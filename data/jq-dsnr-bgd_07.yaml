- en: Chapter 7. Navigating Asynchronously
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章。异步导航
- en: Websites are often set up so that all pages of the site share a common header
    and footer with only the content in between changing from page to page. Sometimes
    there is also one or more sidebars on the left and/or right side of the main content
    area that stay the same throughout the site as well. Why make our site visitors
    re-download the same header, footer, and sidebar content over and over again while
    they browse our site?
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 网站通常设置成，网站的所有页面共享一个通用的页眉和页脚，只有中间的内容从页面到页面发生改变。有时左侧和/或右侧的主要内容区域还有一个或多个侧边栏，在整个网站中保持不变。为什么让我们的网站访问者在浏览我们的网站时一遍又一遍地重新下载相同的页眉、页脚和侧边栏内容呢？
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up a website to navigate asynchronously
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建异步导航的网站
- en: Enhancing asynchronous navigation to make it more user friendly
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强异步导航以使其更加用户友好
- en: Simple asynchronous navigation
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单的异步导航
- en: In the early days of the Web, one solution to the repeated identical content
    download problem was frames. If you're too new to web development to remember,
    frames presented a way to break a single-page view into several different HTML
    files — navigating through the site involved reloading one or more of the frames
    while the others stayed the same. Frames helped a website to load faster and made
    a site easier to maintain, but in the end, they created more problems than they
    solved. Framed websites were easily broken, were difficult for search engines
    to index, often broke the back and forward buttons, and made it difficult or impossible
    for the site visitors to bookmark pages, share links, or print content. Because
    of all these problems, the use of frames has fallen out of favor.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Web 的早期，解决重复下载相同内容的问题的一个方法是框架。如果你对网页开发还太新，以至于不记得，框架提供了一种将单页面视图分割成几个不同的 HTML
    文件的方法——浏览网站涉及重新加载一个或多个框架，而其他框架保持不变。框架有助于网站加载更快，使网站更容易维护，但最终它们制造的问题比解决的问题更多。有框架的网站易于破坏，搜索引擎难以索引，经常破坏前进和后退按钮，并且使访问者难以或无法收藏页面、分享链接或打印内容。由于所有这些问题，使用框架已不受青睐。
- en: More recently, single-page applications have started to become more popular.
    If you log into your Twitter account and start clicking around, you'll notice
    that the whole page refreshes only rarely—most of the interactions take place
    inside one page. If you visit any of the Gawker Media sites, you'll notice that
    after the initial page loads, the entire page isn't refreshed again as you browse
    around the site. Let's take a look at how we can accomplish this same type of
    interaction on our own site in a progressively enhanced way to make sure our site
    still works without JavaScript and can be easily indexed by search engines.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 近来，单页面应用程序开始变得更受欢迎。如果你登录你的 Twitter 账户并开始点击各处，你会注意到整个页面很少刷新——大部分交互发生在一个页面内。如果你访问
    Gawker Media 网站中的任何一个，你会注意到在初始页面加载后，当你浏览网站时整个页面并不会再次刷新。现在，让我们看看如何以渐进增强的方式在我们自己的网站上实现相同类型的交互，以确保我们的网站在没有
    JavaScript 的情况下仍然可以正常工作，并且可以被搜索引擎轻易索引。
- en: Time for action — setting up a simple website
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**行动时间** — 建立一个简单的网站'
- en: We're going to get started by building out a small and simple website with a
    few pages. They'll all share the same header, navigation, sidebar, and footer.
    They'll all have a main content area where the unique content for each page will
    be displayed.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始建立一个小而简单的网站，其中包含一些页面。它们都共享相同的页眉、导航、侧边栏和页脚。它们都有一个主内容区，其中将显示每个页面的唯一内容。
- en: 'Get started by setting up an `index.html` file with all the associated files
    and folders as we did in [Chapter 1](ch01.html "Chapter 1. Designer, Meet jQuery"),
    *Designer, Meet jQuery*. The body of the `index.html` file will contain our header,
    navigation, sidebar, and footer:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过建立一个包含所有相关文件和文件夹的`index.html`文件来开始，就像我们在[第一章](ch01.html "第1章 设计师，遇见 jQuery")中所做的那样，*设计师，遇见
    jQuery*。`index.html`文件的主体将包含我们的页眉、导航、侧边栏和页脚：
- en: '[PRE0]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You''ll notice one extra `<div>` that you may not have been expecting: inside
    `<div>` with an id of main-col, I''ve added a `<div>` tag with an id of main-col-wrap.
    This is not used for layout or CSS purposes, but will be used once we create our
    JavaScript for asynchronously loading the content.'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能会注意到额外的一个`<div>`，你可能没有预料到：`main-col`id内的`<div>`，我添加了一个`main-col-wrap`id的`<div>`标签。这并不用于布局或
    CSS 目的，但一旦我们创建异步加载内容的JavaScript时，它就会被用到。
- en: 'Next, we''ll write some CSS to create a simple layout. Open your `styles.css`
    file and add the following styles:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将编写一些CSS来创建一个简单的布局。打开您的`styles.css`文件并添加以下样式：
- en: '[PRE1]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The final page will look similar to the following screenshot:'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终页面将类似于以下屏幕截图：
- en: '![Time for action — setting up a simple website](img/6709OS_07_img1.jpg)'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——设置一个简单的网站](img/6709OS_07_img1.jpg)'
- en: If you're feeling inspired, feel free to write some extra CSS to style your
    page to be a bit fancier.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您感到灵感来了，请随意编写一些额外的CSS来使您的页面看起来更加花哨。
- en: 'Next, we''ll create the other pages of the site, namely the pages for cupcakes,
    petits fours, tea cakes, and muffins. The HTML will be exactly the same as the
    home page, with the exception of the content inside`<div>` with an `id` of `main-col-wrap`.
    The following is a sample of my content for the cupcakes page:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建网站的其他页面，即杯子蛋糕、小甜饼、茶点和松饼的页面。HTML将与主页完全相同，除了`<div>`内部的内容，其`id`为`main-col-wrap`。以下是我为杯子蛋糕页面准备的内容样本：
- en: '[PRE2]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Outside of this`<div>`, the rest of my page is exactly the same as the home
    page we created earlier. Go ahead and create the pages for muffins, tea cakes,
    and petits fours in a similar manner so that you have a five-page website with
    a shared header, navigation, sidebar, and footer.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`<div>`之外，我的页面的其他部分与我们之前创建的主页完全相同。继续在类似的方式下创建松饼、茶点和小甜饼的页面，这样您就可以得到一个包含共享页眉、导航、侧边栏和页脚的五页网站。
- en: Don't forget that each page of your site should contain a link to the `styles.css`
    file in the head section and a link to jQuery and the `scripts.js` file at the
    bottom of the document, just before the closing`</body>` tag.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记，您的网站每页应在头部部分包含`styles.css`文件的链接，以及在文档底部，在结束`</body>`标记之前包含对jQuery和`scripts.js`文件的链接。
- en: What just happened?
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We set up a simple five-page website in HTML. Each page of our website shares
    the same header, navigation, sidebar, and footer. Then we set up some simple CSS
    to style our page. The only hint that something fancy is going to happen here
    is an extra`<div>` wrapped around our main content area — the area of the page
    that contains different content from page to page.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在HTML中设置了一个简单的五页网站。我们网站的每一页共享相同的页眉、导航、侧边栏和页脚。然后我们设置了一些简单的CSS来美化我们的页面。唯一表明这里会发生一些花哨的东西是额外的`<div>`包裹着我们的主内容区域——页面上包含从页面到页面不同内容的区域。
- en: Time for action — adding Ajax magic
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——添加Ajax魔力
- en: If you click around this small and simple site in your browser, you'll see that
    we're reloading the same header, navigation, sidebar, and footer over and over
    again. Only the content in the main content area of the page is changing from
    page to page. Let's use the magic of jQuery to fix that.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中浏览这个简单的小网站，您会发现我们一遍又一遍地重新加载相同的页眉、导航、侧边栏和页脚。只有页面的主要内容区域的内容在页面之间不断地变化。让我们使用jQuery的魔力来解决这个问题。
- en: 'Just a reminder that these Ajax functions won''t work unless your pages are
    being served by a server. To see this code in action, you''ll either have to upload
    your pages to a server or create a server on your own computer. First, we''ll
    open our `scripts.js` file and set to work writing our code. We''ll get started
    as we often do with the document ready statement as follows:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只是一个提醒，除非您的页面是由服务器提供的，否则这些Ajax函数将不起作用。要看这段代码的实际效果，您要么需要将页面上传到服务器，要么在自己的计算机上创建一个服务器。首先，我们将打开我们的`scripts.js`文件并开始编写我们的代码。我们将像往常一样以文档就绪语句开始：
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We''ll need to select all the links inside our navigation. That will look similar
    to this:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要选择导航中的所有链接。这看起来类似于这样：
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When those links are clicked by the site visitor, the browser responds by loading
    the requested page. That''s the behavior that we''d like to override, so we''ll
    bind a function to the links that overrides the link''s click behavior as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击这些链接时，浏览器会加载请求的页面。这就是我们希望覆盖的行为，因此我们将绑定一个函数到链接，覆盖链接的点击行为如下：
- en: '[PRE5]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first thing we need to do when a site visitor clicks a link is cancel the
    default behavior. We can do that by telling the function to return `false:`
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当站点访问者单击链接时，我们需要做的第一件事情就是取消默认行为。我们可以通过告诉函数返回`false`来实现：
- en: '[PRE6]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now if you reload your simple site in the browser, you'll see that clicking
    on the links in the main navigation doesn't do anything. The page you requested
    no longer loads into the browser. We've set the stage for our own code.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果您在浏览器中重新加载您的简单网站，您会发现单击主导航中的链接没有任何作用。您请求的页面不再加载到浏览器中。我们已经为我们自己的代码做好了准备。
- en: 'If we''re going to fetch a page from the server, we need to know which page
    we''re fetching. We need to know which URL we need to call. Luckily, our links
    already contain this information in their `href` attributes. For example, by looking
    at the HTML for our cupcakes link:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们要从服务器获取页面，我们需要知道我们要获取哪个页面。我们需要知道我们需要调用哪个URL。幸运的是，我们的链接已经在它们的`href`属性中包含了这些信息，例如，通过查看我们杯子蛋糕链接的HTML：
- en: '[PRE7]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: we can see that the page we need to request to get information on cupcakes is
    `cupcakes.html.`
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以看到我们需要请求以获取有关杯子蛋糕信息的页面是`cupcakes.html。`
- en: 'We''re going to use jQuery to get the `href` attribute of the link that was
    just clicked:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将使用jQuery来获取刚刚点击的链接的`href`属性：
- en: '[PRE8]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now we have a variable called `url` that contains the `href` attribute of the
    link that was clicked. Remember, variables are just containers. If our site visitor
    has just clicked the cupcakes link, then the `url` variable will contain `cupcakes.html`.
    If the site visitor has just clicked the muffins link on the other hand, then
    the url variable contains `muffins.html`. This function gets called each time
    the site visitor clicks on any of the links in the main navigation - `$(this)`
    will always refer to the link that was just clicked.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们有一个名为`url`的变量，其中包含了刚刚点击的链接的`href`属性。记住，变量只是容器。如果我们的网站访问者刚刚点击了杯子蛋糕链接，那么`url`变量将包含`cupcakes.html`。而另一方面，如果网站访问者刚刚点击了松饼链接，那么`url`变量将包含`muffins.html`。这个函数在站点访问者点击主导航中的任何链接时都会被调用-
    `$(this)`将始终引用刚刚点击的链接。
- en: 'Now that we know which page on the server contains the information the site
    visitor has requested, what do we do with it? Luckily, jQuery provides us with
    the `load()` method which makes loading content from the server into our page
    very easy. We''re going to select the element on the page where we''d like to
    load our content and then call the `load()` method for that element. In this case,
    we''re going to select the`<div>` tag with the `id` of `main-col`, since that''s
    the container of the content that changes from page to page:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们知道服务器上的哪个页面包含了网站访问者请求的信息，那么我们该怎么办？幸运的是，jQuery为我们提供了`load()`方法，它可以轻松地将内容从服务器加载到我们的页面中。我们将选择页面上我们想要加载内容的元素，然后调用那个元素的`load()`方法。在这种情况下，我们将选择`<div>`标签，并且其`id`为`main-col`，因为这是页面上从一页到另一页变化的内容的容器：
- en: '[PRE9]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you reload the page in the browser and click on links in the main navigation,
    you'll see that nothing happens. No errors are reported by the browser so what's
    the problem?
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您刷新浏览器中的页面并点击主导航中的链接，您将会发现没有任何反应。浏览器没有报告任何错误，那么问题出在哪里呢？
- en: 'Remember Maggie the dog who was eating bacon back in [Chapter 1,](ch01.html
    "Chapter 1. Designer, Meet jQuery") *Designer, Meet jQuery* Maggie had an eat
    method like this:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记得Maggie这只狗吗，她在[第1章](ch01.html "第1章。设计师，见识jQuery") *设计师，见识jQuery*中正在吃培根。Maggie有一个这样的`eat`方法：
- en: '[PRE10]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'However, remember, she couldn''t just eat—she had to eat something. So we passed
    `bacon` to the `eat()` method of Maggie as follows:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，请记住，她不能只是吃东西——她必须吃一些东西。因此，我们将`bacon`传递给Maggie的`eat()`方法如下：
- en: '[PRE11]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `load` method is similar. We can''t just load—we have to load something.
    In this case, we know what we need to load in—the content at the URL contained
    in our url variable:'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`load`方法也类似。我们不能只是加载—我们必须加载一些东西。在这种情况下，我们知道我们需要加载什么—url变量中包含的URL中的内容：'
- en: '[PRE12]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now if you refresh the browser and try clicking on the cupcakes link in the
    main navigation, you''ll see that the content of the cupcakes page is indeed loaded
    into our `#main-col` div. However, it''s not quite what we had in mind, because
    it''s loading up the entire page:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果刷新浏览器并尝试点击主导航中的杯子蛋糕链接，您会看到杯子蛋糕页面的内容确实加载到我们的`#main-col` div中。然而，这并不是我们想要的，因为它加载整个页面：
- en: '![Time for action — adding Ajax magic](img/6709OS_07_img2.jpg)'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间- 添加Ajax魔法](img/6709OS_07_img2.jpg)'
- en: 'We don''t want to get the whole page. We just need the content inside the `#main-col`
    div. That''s where that extra wrapper element,`<div>` with an `id` of `main-col-wrap`
    comes in. We can tell jQuery to only load that`<div>` and its content into `#main-col
    <div>` as follows:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不想获取整个页面。我们只需要`#main-col` div中的内容，这就是额外的包装元素`<div>`和`id`为`main-col-wrap`的地方。我们可以告诉jQuery仅将`<div>`和其内容加载到`#main-col
    <div>`中，如下所示：
- en: '[PRE13]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This is sometimes referred to as jQuery's **partial load method**, since we're
    not loading the entire contents of what we've fetched into the page, just the
    part we care about. If you refresh the page in the browser and click through the
    main navigation, you'll see that the content loads up as we expected now and only
    the main content area of the page refreshes. The header, navigation, sidebar,
    and footer remain on the page while the main content area reloads.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这有时被称为 jQuery 的**部分加载方法**，因为我们不是将获取到的整个内容加载到页面中，而只是我们关心的部分。如果你在浏览器中刷新页面并点击主导航，你会发现现在内容按我们预期的方式加载，只有页面的主内容区域刷新。页眉、导航、侧边栏和页脚仍然保留在页面上，而主内容区域重新加载。
- en: What just happened?
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We used jQuery's powerful CSS-based selectors to select all the links in the
    main navigation. We identified the click behavior of the links as the behavior
    we needed to override to get the result that we wanted. We bound a click function
    to the links that would run each time a link was called. We cancelled the link's
    default behavior of loading up a new page in the browser window. Next, we examined
    the link to get the URL contained in the `href` attribute. We selected the container
    on the page where we wanted to load up new content, and used jQuery's `load()`
    method to call the content we needed. We passed a selector to the `load()` method
    along with the URL so that jQuery would know we wanted only the content inside
    that selected element to load rather than the entire page.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了 jQuery 强大的基于 CSS 的选择器来选择主导航中的所有链接。我们确定了链接的点击行为是我们需要覆盖以获得所需结果的行为。我们将一个点击函数绑定到链接上，每次调用链接时都会运行。我们取消了链接在浏览器窗口中加载新页面的默认行为。接下来，我们检查链接以获取`href`属性中包含的
    URL。我们选择了页面上希望加载新内容的容器，并使用 jQuery 的`load()`方法调用所需内容。我们向`load()`方法传递了一个选择器和 URL，以便
    jQuery 知道我们只想加载选定元素中的内容，而不是整个页面。
- en: We turned our simple website into a single-page application. And we did it using
    progressive enhancement so that site visitors who don't have JavaScript enabled
    will be able to use our site without any problems. Search engines will also be
    able to index the content of our site. And we did all that with just a few lines
    of JavaScript — thanks to jQuery!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将我们简单的网站转换成了单页面应用。我们使用渐进增强的方式来做到这一点，这样那些没有启用 JavaScript 的网站访问者也可以无问题地使用我们的网站。搜索引擎也可以索引我们网站的内容。而这一切都只用了几行
    JavaScript 代码 —— 多亏了 jQuery！
- en: Deluxe asynchronous navigation
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 豪华异步导航
- en: 'You''d be downright pleased with yourself for taking an ordinary site and turning
    it into a single-page application in just a few lines of code, but let''s face
    it: our simple asynchronous navigation leaves a little bit to be desired and could
    definitely use a bit of polish.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你会对自己只用几行代码就将一个普通网站变成单页面应用而感到非常满意，但让我们面对现实：我们简单的异步导航还有待改进，绝对需要一些润色。
- en: Perhaps most obviously, we've broken the back and forward buttons in the browser.
    We can no longer use them to navigate between the pages of our site. We've also
    taken away our site visitor's ability to bookmark or share a link to a page of
    our site. We also don't give any feedback to our site visitor that anything is
    happening after they've clicked a link in our main navigation. Since our pages
    are short and simple, they should usually load up pretty quickly, but the Internet
    is notoriously unpredictable in the speed department. Sometimes it could take
    a half second, a full second, or more to load up our content—and our site visitor
    has no idea their browser is hard at work trying to get the new content for them—it
    just looks like nothing's happening.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 或许最明显的是，我们破坏了浏览器的后退和前进按钮。我们不能再使用它们在我们网站的页面之间导航。我们还剥夺了我们网站访问者将页面链接加为书签或分享的能力。我们在我们的主导航中点击链接后，也没有向我们的网站访问者提供任何反馈。由于我们的页面短小简单，它们通常会很快加载，但互联网在速度方面众所周知是不可预测的。有时加载我们的内容可能需要半秒、一秒或更长时间
    —— 我们的网站访问者不知道他们的浏览器正在努力获取新内容 —— 它看起来就像什么都没发生。
- en: There are a few other nice touches we can add to make the whole thing nicer
    and faster too, so let's get started on the deluxe version of asynchronous navigation.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他小技巧，可以使整个过程更加美观和快速，所以让我们开始制作高级异步导航的豪华版本吧。
- en: Time for action — building deluxe asynchronous navigation
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 —— 构建豪华异步导航
- en: To add some missing functionality to our asynchronous navigation, we're going
    to use Ben Alman's excellent jQuery BBQ plugin. Even though that name might make
    you feel hungry, BBQ stands for Back Button and Query in this case. We'll keep
    working with the files we created in the last example.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给我们的异步导航添加一些缺失的功能，我们将使用Ben Alman的出色的jQuery BBQ插件。尽管这个名字可能会让你觉得饥饿，但在这种情况下，BBQ代表Back
    Button和Query。我们将继续使用我们在上一个示例中创建的文件。
- en: First, we'll need to get a copy of the BBQ plugin to work with. Head over to
    [http://benalman.com/projects/jquery-bbq-plugin/](http://benalman.com/projects/jquery-bbq-plugin/)
    to get the download file and the documentation and examples for the jQuery BBQ
    plugin.![Time for action — building deluxe asynchronous navigation](img/6709OS_07_img3.jpg)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要获取BBQ插件的副本以进行使用。访问 [http://benalman.com/projects/jquery-bbq-plugin/](http://benalman.com/projects/jquery-bbq-plugin/)
    获取下载文件以及jQuery BBQ插件的文档和示例。![行动时间——构建豪华的异步导航](img/6709OS_07_img3.jpg)
- en: As usual, we're going to download the minified version of the plugin and drop
    it into our `scripts` folder alongside jQuery and our `scripts.js` file.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 和往常一样，我们将下载插件的压缩版本，并将其放入我们的`scripts`文件夹中，与jQuery和我们的`scripts.js`文件并列。
- en: '![Time for action — building deluxe asynchronous navigation](img/6709OS_07_img4.jpg)'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——构建豪华的异步导航](img/6709OS_07_img4.jpg)'
- en: Next, open up each of the HTML pages of your mini website and add the BBQ plugin,
    after jQuery and before `scripts.js:`
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开你的迷你网站的每个HTML页面，并在jQuery之后、`scripts.js`之前添加BBQ插件：
- en: '[PRE14]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now we're ready to get to work on building the deluxe version of our asynchronous
    navigation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好开始构建我们的异步导航的豪华版本了。
- en: What just happened?
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We downloaded the jQuery BBQ plugin and attached it to each of our pages. So
    far, this hasn't made a difference on our site — we've attached the BBQ plugin,
    but we aren't using it to do anything. Next up, we'll take a look at how to put
    the BBQ plugin to use.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下载了jQuery BBQ插件，并将其附加到我们的每个页面上。到目前为止，这在我们的网站上没有任何区别——我们已经附加了BBQ插件，但我们并没有使用它来做任何事情。接下来，我们将看看如何使用BBQ插件。
- en: Time for action — using the BBQ plugin
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——使用BBQ插件
- en: Our first order of business is to get those back and forward buttons working,
    and allow our site visitors to bookmark and share links to individual pages. That's
    why we've included the jQuery BBQ plugin.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一项任务是让返回和前进按钮起作用，并允许我们的网站访问者将链接添加到书签并分享到个别页面。这就是为什么我们包含了jQuery BBQ插件。
- en: 'We''re going to write some new JavaScript, so erase the code we wrote earlier
    in `scripts.js` and replace it with a simple document ready statement as follows:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将编写一些新的JavaScript代码，因此将`scripts.js`中我们之前编写的代码清除，并用以下简单的文档就绪语句替换它：
- en: '[PRE15]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Next, we're going to select each of the links in our main navigation and replace
    the URLs with hash links so that the browser thinks they are internal to our HTML
    page.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将选择主导航中的每个链接，并用哈希链接替换URL，以便浏览器认为它们是我们HTML页面内部的链接。
- en: '[PRE16]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We''re selecting all the links in the main navigation, then looping through
    all of them to add a # character at the front of the URL. For example, the `cupcakes.html`
    link is now `#cupcakes.html`. If you refresh the page in the browser, you''ll
    see that clicking the links doesn''t change anything on the page, but it does
    update the hash sin the URL in the browser''s location bar.'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们选择主导航中的所有链接，然后循环遍历它们以在URL前添加一个`#`字符。例如，`cupcakes.html`链接现在是`#cupcakes.html`。如果你在浏览器中刷新页面，你会发现点击链接不会改变页面上的任何内容，但它会更新浏览器位置栏中的哈希。
- en: '![Time for action — using the BBQ plugin](img/6709OS_07_img5.jpg)'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——使用BBQ插件](img/6709OS_07_img5.jpg)'
- en: 'Next, we''re going to bind a function to the window''s `hashchange` event.
    Modern browsers have provided an event called `hashchange` that fires whenever
    the URL''s hash changes, just as it''s doing when you click the main navigation
    links. Older browsers don''t support the `hashchange` event, but that''s where
    the jQuery BBQ plugin comes in. It provides support for a pseudo `hashchange`
    event in most browsers so that we only have to write our code once without worrying
    about browser differences. Here''s how we bind a function to the `hashchange`
    event:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将一个函数绑定到窗口的`hashchange`事件上。现代浏览器提供了一个称为`hashchange`的事件，每当URL的哈希更改时就会触发，就像当您单击主导航链接时所做的那样。旧版浏览器不支持`hashchange`事件，但这就是jQuery
    BBQ插件发挥作用的地方。它在大多数浏览器中提供了对伪`hashchange`事件的支持，这样我们只需编写我们的代码一次，而不必担心浏览器的差异。这是我们如何将函数绑定到`hashchange`事件上的方式：
- en: '[PRE17]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The function we write will now be called each time the window's hash changes,
    which we know is going to happen each time the site visitor clicks on a link in
    our main navigation. Now we can write the code to tell the browser what to do
    when this happens.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们编写的函数现在将在窗口的哈希更改时调用，我们知道每当站点访问者点击我们的主导航中的链接时都会发生这种情况。现在我们可以编写代码，告诉浏览器在发生这种情况时该做什么。
- en: '[PRE18]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: First, we're setting up a variable called `url` and setting it equal to `e.fragment.`
    The `fragment` property is made available by the jQuery BBQ plugin. It's equal
    to the hash of the URL without the hash symbol. So if the window's hash changes
    to `#cupcakes.html, e.fragment` will be equal to `cupcakes.html.`
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们设置一个名为`url`的变量，并将其设置为`e.fragment`。`fragment`属性由jQuery BBQ插件提供。它等于URL的哈希但不包括哈希符号。因此，如果窗口的哈希更改为`#cupcakes.html`，`e.fragment`将等于`cupcakes.html`。
- en: The next line of code is the same as our basic Ajax navigation example. I'm
    going to select the container on the page where I want to load my content, then
    call the `load()` method. I'm going to pass the URL and jQuery selector for the
    part of the page at that URL that I want to load into the browser.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下一行代码与我们的基本Ajax导航示例相同。我将选择页面上要加载内容的容器，然后调用`load()`方法。我将传递URL和jQuery选择器，指定要加载到浏览器中的页面部分。
- en: If you refresh the page in the browser now, you'll see that our main navigation
    is again working asynchronously. Clicking a link loads up only the main content
    area of the page while the rest remains unchanged. There is one important difference,
    though—if you click the back and forward buttons, they work. Once you've clicked
    through to the cupcakes page, you can click the back button to return to the home
    page.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你现在在浏览器中刷新页面，你会看到我们的主导航再次以异步方式工作。点击链接只会加载页面的主内容区域，而其余部分保持不变。然而，有一个重要的区别——如果你点击回退和前进按钮，它们会起作用。一旦你点击进入杯子页面，你可以点击返回按钮返回首页。
- en: 'There''s just one thing left to do to get our navigation optimized and that''s
    to make sure that our site visitors can bookmark and share links to our pages.
    If you click on the cupcakes page, copy the URL from the browser''s location bar,
    and open either a new browser window or a new tab and paste in the URL, you''ll
    see that you get the site''s home page rather than the cupcake page. If you look
    at the URL, the `#cupcakes.html` hash is there, we just have to tell our code
    to look for it. The simplest way to do that is to fire the window''s `hashchange`
    event as soon as the page loads in the browser. Here''s how we do that:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们只剩下一件事要做，就是确保我们的站点访问者可以收藏和分享我们页面的链接。如果你点击杯子页面，复制浏览器地址栏中的URL，并打开一个新的浏览器窗口或一个新的选项卡，并粘贴URL，你会发现你得到的是站点的主页而不是杯子页面。如果你查看URL，`#cupcakes.html`哈希就在那里，我们只需要告诉我们的代码去找它。最简单的方法是在页面加载时立即触发窗口的`hashchange`事件。以下是我们如何做到的：
- en: '[PRE19]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now, you can open up that cupcakes link in a new window and you'll see the cupcakes
    page load up, just as it should. Our `hashchange` function fires as soon as the
    page is loaded, which loads in the correct content.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，你可以在新窗口中打开杯子链接，你会看到杯子页面加载，就像它应该的那样。我们的`hashchange`函数在页面加载时立即触发，加载正确的内容。
- en: What just happened?
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么事？
- en: We used jQuery to loop through each of our navigation links and replace them
    with internal links or hash links. Why not just do this in HTML? Because we want
    to make sure that our page continues to work for users with JavaScript disabled.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用jQuery循环遍历我们的每个导航链接，并用内部链接或哈希链接替换它们。为什么不直接在HTML中这样做呢？因为我们想确保我们的页面继续为禁用JavaScript的用户工作。
- en: Then we used the jQuery BBQ plugin to change our asynchronous navigation to
    enable both bookmarking and sharing of links and the back and forward buttons
    in the browser. This allows our site to behave just like a single-page application
    without breaking the site visitor's expected experience.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用jQuery BBQ插件将我们的异步导航更改为启用书签和共享链接以及浏览器中的后退和前进按钮。这使得我们的站点能够像单页应用程序一样运行，而不会破坏站点访问者的预期体验。
- en: Time for action — highlighting the current page in the Navigation
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——在导航中突出显示当前页面
- en: We've already made our asynchronous navigation much better than our simple example,
    but I think we can keep going and make it even better. Next up, we're going to
    highlight the page currently being viewed in the navigation to make it easy for
    our site visitors to see which page they're on.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使我们的异步导航比我们简单的示例好得多，但我认为我们可以继续努力，使它变得更好。接下来，我们将突出显示导航中当前正在查看的页面，以便我们的网站访问者轻松看到他们所在的页面。
- en: '![Time for action — highlighting the current page in the Navigation](img/6709OS_07_img7.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间——在导航中突出显示当前页面](img/6709OS_07_img7.jpg)'
- en: 'First up, let''s open up `styles.css` again and write a `.current` CSS class
    for the navigation:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们再次打开`styles.css`并编写导航的`.current`CSS类：
- en: '[PRE20]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: I've made my navigation bar green, so I'm going to make the `.current` class
    a slightly lighter shade of green so that the current item is highlighted in the
    menu. You can follow my example or create your own style—whatever suits your taste.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我已经将我的导航栏设为绿色，所以我要将`.current`类设为稍浅一些的绿色，以便当前项目在菜单中突出显示。你可以参考我的示例或创建自己的样式——任何适合你口味的都可以。
- en: 'Now we just need to apply our `.current` class to the current navigation item.
    We''re going to add a few lines to the `hashchange` event function we wrote earlier.
    We''ll start by checking to see if there''s a hash in the window location:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们只需要将我们的`.current`类应用到当前导航项上。我们将在之前编写的`hashchange`事件函数中添加几行代码。我们将从检查窗口位置是否有哈希开始：
- en: '[PRE21]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, if there is a hash, then we want to find the link in my main navigation
    that corresponds to the hash, find its parent container, and add the current class.
    That sounds like a lot, but I can do that in one line:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果有一个哈希值，那么我们想要找到与哈希值对应的主导航中的链接，找到它的父容器，并添加当前类。听起来有点复杂，但我可以用一行代码完成：
- en: '[PRE22]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: I'm using jQuery's powerful attribute selectors to select the link with the
    `href` attribute equal to the window's hash. Then I'm using the `parents()` method
    to get the link's parents. I'm passing `li` to the `parents()` method to tell
    jQuery I'm only interested in one parent, the `<li>` that contains my link. Then
    I'm using the `addClass()` method to add my current class to the current link.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我正在使用jQuery强大的属性选择器来选择具有`href`属性等于窗口哈希的链接。然后我使用`parents()`方法获取链接的父级。我将`li`传递给`parents()`方法，告诉jQuery我只对一个父级感兴趣，即包含我的链接的`<li>`。然后我使用`addClass()`方法将我的当前类添加到当前链接中。
- en: 'If there isn''t a hash, then I want to highlight the home page, which is the
    first page in our main navigation. I''ll select the first`<li>` and add the current
    class as shown in the following code:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有哈希值，那么我想要突出显示主页，这是我们主导航中的第一个页面。我会选择第一个`<li>`并添加当前类，如下面的代码所示：
- en: '[PRE23]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, if you refresh the page in the browser and click through the pages, you''ll
    see that the current page is highlighted, but as you move through the site, more
    and more of the navigation is highlighted — we''re not removing the old highlight
    before adding a new one. We''ll add this line to remove the current highlight
    before adding a new one:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你在浏览器中刷新页面并浏览页面，你会看到当前页面被突出显示，但随着你在网站上移动，越来越多的导航被突出显示——我们在添加新突出显示之前没有删除旧的突出显示。我们将添加以下代码以在添加新的突出显示之前删除当前突出显示：
- en: '[PRE24]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Refresh the page in the browser and you'll see that the highlight is now working
    as it should, highlighting only the current page.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中刷新页面，你会看到突出显示现在正常工作，只突出显示当前页面。
- en: What just happened?
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We added a few lines of code to our `hashchange` function to add a highlight
    to the current page in the navigation. This will help the site visitor orient
    themselves on the site and further enforce their current location.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的`hashchange`函数中添加了几行代码，以在导航中为当前页面添加高亮显示。这将帮助网站访问者在网站上定位自己的位置，并进一步加强他们当前的位置感。
- en: Time for action — adding a loading animation
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——添加加载动画
- en: Next, we'd like to show the site visitor that something is happening as soon
    as they click on the link in the navigation. Remember that if the response from
    the server is slow, the site visitor can't see that anything is happening. Even
    though the browser is hard at work fetching the content for the new page, there's
    no indication to the site visitor that anything is happening. Let's add in a little
    animation to make it obvious that something's happening on our page.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要向网站访问者显示，当他们点击导航中的链接时，有一些事情正在发生。请记住，如果来自服务器的响应速度很慢，网站访问者看不到任何事情正在发生。即使浏览器正在努力获取新页面的内容，网站访问者也没有任何指示表明有任何事情正在发生。让我们添加一个小动画，以明显地显示我们页面上正在发生的事情。
- en: 'Loading animations can take many different forms: spinning daisies, animated
    progress bars, blinking dots — anything that will communicate that there''s an
    action in progress will help make your site feel snappier and more responsive
    for your site visitors.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 加载动画可以采用许多不同的形式：旋转的雏菊、动画进度条、闪烁的点 —— 任何能传达正在进行的操作的东西都将有助于使您的站点对于您的站点访问者感觉更加迅捷和响应。
- en: '![Time for action — adding a loading animation](img/6709OS_07_img8.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间 — 添加加载动画](img/6709OS_07_img8.jpg)'
- en: First, head over to [http://ajaxload.info](http://ajaxload.info) to create and
    download a loading animation of your choice.![Time for action — adding a loading
    animation](img/6709OS_07_img6.jpg)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，前往[http://ajaxload.info](http://ajaxload.info)来创建并下载您选择的加载动画。![操作时间 — 添加加载动画](img/6709OS_07_img6.jpg)
- en: Select the type, background color, and foreground color in the **Generator**
    box, then click on the **Generate It!** button.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**生成器**框中选择类型、背景颜色和前景颜色，然后单击**生成！**按钮。
- en: You'll see a preview of your button in the **Preview** box along with a link
    to download your button. Click on the **Download It!** link to download a copy
    of the loading animation you just created.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**预览**框中，您将看到您按钮的预览以及下载按钮的链接。单击**下载！**链接以下载您刚创建的加载动画的副本。
- en: After you've downloaded your button, drop it in your `images` folder along with
    the other images you're using on your website.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你下载了按钮之后，将它放入你的`images`文件夹，与你网站上使用的其他图片一起。
- en: Now, let's think through the modifications we have to make to our page. We want
    to fade out the content that is currently shown in the `#main-col` div and show
    our loading animation in its place until the server sends back the content for
    our new page. As soon as we get that content back, we want to hide the loading
    animation and display the content.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们仔细考虑一下我们需要对页面进行的修改。我们希望淡出当前显示在`#main-col` div中的内容，并在其位置显示我们的加载动画，直到服务器发送回我们新页面的内容。一旦我们收到了那个内容，我们就想隐藏加载动画并显示内容。
- en: 'When we''re ready to show the loading animation to our site visitors, we want
    it to be visible immediately. It would be no good at all if we were to have to
    go and fetch the image from the server—the actual page content might be returned
    before our image. So we''ll have to preload the image. Using jQuery, that''s very
    simple. As soon as the document has loaded into the browser, we''ll create a new
    image element as shown in the following code:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们准备向我们的站点访问者显示加载动画时，我们希望它立即可见。如果我们不得不从服务器获取图像，那将毫无意义 —— 实际页面内容可能在我们的图像之前返回。所以我们必须预加载图像。使用
    jQuery，这非常简单。一旦文档加载到浏览器中，我们将创建一个新的图像元素，如下所示：
- en: '[PRE25]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Just creating this element is enough to preload the image into the browser's
    cache. Now when we're ready to show the image, it will be available immediately
    without waiting.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只创建此元素就足以将图像预加载到浏览器的缓存中。现在，当我们准备显示图像时，它将立即可用，无需等待。
- en: 'Next, we have to write a bit of CSS to handle how our loading image is displayed.
    We''ll wrap it in a simple paragraph tag to which we''ll add a bit of padding
    and center the image:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须编写一些 CSS 来处理我们的加载图像的显示方式。我们将其包装在一个简单的段落标签中，然后添加一些填充并使图像居中：
- en: '[PRE26]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Note that we''re also setting the `display` to `none`—that way we won''t have
    the image showing up until we''re ready for it. We only want our animation to
    appear if the URL has a hash, so inside our `if/else` statement, we''ll append
    the loading animation to the `#main-col` div:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，我们还将`display`设置为`none`—这样我们在准备好之前就不会有图像显示出来。我们只希望我们的动画出现在 URL 中有一个哈希时，所以在我们的`if/else`语句内，我们将加载动画附加到`#main-col`
    div中：
- en: '[PRE27]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We've added a paragraph with the `id` of `loading` to the document and we've
    appended our pre-loaded loading image to that paragraph. Remember, even though
    it's there, it's not visible yet, since we've hidden it with CSS.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们已经在文档中添加了一个`id`为`loading`的段落，并将我们预加载的加载图像附加到该段落中。请记住，即使它存在，由于我们用 CSS 隐藏了它，所以它还不可见。
- en: 'Next, we''ll fade out the content that''s currently showing on the page. In
    case our content returns quickly from the server, we want to make sure we''re
    not getting in the way, so we''ll tell the animation to complete quickly:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将淡出当前在页面上显示的内容。如果我们的内容从服务器返回得很快，我们要确保我们没有妨碍，所以我们会告诉动画快速完成：
- en: '[PRE28]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Finally, we want to show our loading animation, but we don''t want it to appear
    until after the content has faded out. To make sure it doesn''t show up before
    then, we''ll add it as a callback function to the `fadeOut()` method. A callback
    function is a function that''s called after the animation completes. Here''s how
    we add a callback function to the `fadeOut()` method:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们想要展示我们的加载动画，但我们不想让它在内容淡出之前出现。为了确保它在此之前不会出现，我们将它作为回调函数添加到 `fadeOut()` 方法中。回调函数是在动画完成后调用的函数。这是我们如何向
    `fadeOut()` 方法添加回调函数的方式：
- en: '[PRE29]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Now, when the site visitor clicks a link, the hash in the location bar will
    update. That will fire off our code to fade the page's current content out, show
    a loading animation, and then replace the loading animation with the new page
    content as soon as it's returned by the server. If you're really lucky, your site
    visitor won't even get a chance to see the loading animation because your server
    will return the new page content quickly. However, if there's a slowdown anywhere
    along the way, your site visitor will get a clear message that something's happening
    and they won't be left wondering or feeling like your site is slow and unresponsive.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，当网站访问者点击链接时，定位栏中的哈希将更新。这将触发我们的代码，将页面当前内容淡出，显示加载动画，然后一旦服务器返回新页面内容，立即将加载动画替换为新页面内容。如果您非常幸运，您的网站访问者甚至不会有机会看到加载动画，因为您的服务器会快速返回新页面内容。但是，如果任何地方出现了减速，您的网站访问者将收到一个清晰的信息，表明正在发生某些事情，他们不会感到困惑或感到您的网站缓慢且不响应。
- en: What just happened?
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We added some animation effects to show the site visitor that something was
    happening in the event that the server's response with the new page content was
    delayed more than a fraction of a second. The site visitor will immediately see
    the content fade out and a loading animation take its place until the server responds
    with the new page content.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为网站访问者添加了一些动画效果，以示在服务器响应新页面内容的过程中出现超过几分之一秒的延迟时发生了什么。网站访问者将立即看到内容淡出，并且加载动画会取而代之，直到服务器响应新页面内容为止。
- en: If you're looking at your pages from your local computer using WAMP or MAMP,
    chances are the new content will be returned so quickly you won't get a chance
    to see the loading animation. However, if you upload your pages to a server and
    access them via the Internet, you're almost guaranteed to see the loading animation
    for at least a fraction of a second while the browser fetches the new content.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用 WAMP 或 MAMP 从本地计算机查看页面，那么新内容很可能会返回得非常快，以至于您没有机会看到加载动画。但是，如果您将页面上传到服务器并通过互联网访问它们，则几乎可以肯定会在浏览器获取新内容时至少看到加载动画的一小部分。
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to set up a simple website and then we enhanced
    it to behave like a single-page application without breaking it for search engines
    or site visitors who have JavaScript disabled. First, we set up a simple version
    that might be suitable for use in some simple cases. Then we took a look at setting
    up the deluxe version that allowed for bookmarking and sharing of links, working
    back and forward buttons, current page highlighting in the navigation, and smooth
    transition animations to show the site visitor the browser was hard at work. All
    of this was relatively simple and straightforward thanks to jQuery and the jQuery
    BBQ plugin.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何建立一个简单的网站，然后我们增强了它的功能，使其表现得像一个单页面应用程序，但不会对搜索引擎或禁用 JavaScript 的网站访问者造成影响。首先，我们建立了一个简单版本，可能适用于某些简单情况。然后，我们看了看如何设置豪华版本，它允许收藏和分享链接，工作的前进和后退按钮，导航中当前页面的突出显示，以及平滑的过渡动画，向网站访问者展示浏览器正在辛勤工作。所有这些都相对简单和直接，多亏了
    jQuery 和 jQuery BBQ 插件。
- en: Next up, we'll take a look at loading content into lightboxes.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将研究如何将内容加载到灯箱中。
