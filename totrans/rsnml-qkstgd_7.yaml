- en: JSON in Reason
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Reason 中的 JSON
- en: 'In this chapter, we''ll learn how to work with JSON by building a simple customer
    management application. This application lives within the `/customers` route of
    our existing app and can create, read, and update customers. JSON data persists
    to `localStorage`. Throughout this chapter, we convert external JSON into a typed
    data structure that Reason can understand in two different ways:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过构建一个简单的客户管理应用程序来学习如何使用 JSON。此应用程序位于我们现有应用程序的 `/customers` 路径中，可以创建、读取和更新客户。JSON
    数据持久化到 `localStorage`。在本章中，我们将以两种不同的方式将外部 JSON 转换为 Reason 可以理解的类型化数据结构：
- en: Using pure Reason
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用纯粹的理由
- en: Using the `bs-json` library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `bs-json` 库
- en: We'll compare and contrast each method at the end of the chapter. We'll also
    discuss how **GraphQL** can help provide a pleasant developer experience when
    working with JSON in a statically typed language such as Reason.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章末尾比较和对比每种方法。我们还将讨论 **GraphQL** 如何帮助在静态类型语言（如 Reason）中处理 JSON 时提供愉快的开发者体验。
- en: 'To follow along with building the customer management application, clone this
    book''s GitHub repository and start from `Chapter07/app-start`:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随构建客户管理应用程序，请克隆本书的 GitHub 仓库并从 `Chapter07/app-start` 开始：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this chapter we will look at the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: Building views
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建视图
- en: Integrating with localStorage
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 localStorage 集成
- en: Using bs-json
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 bs-json
- en: Using GraphQL
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GraphQL
- en: Building views
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建视图
- en: 'In total, we''ll have three views:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 总共，我们将有三个视图：
- en: A list view
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表视图
- en: A create view
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建视图
- en: An update view
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新视图
- en: Each view has its own route. The create and update views share a common component
    because they're so similar.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 每个视图都有自己的路由。创建和更新视图共享一个公共组件，因为它们非常相似。
- en: File structure
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件结构
- en: 'Since our `bsconfig.json` includes subdirectories, we can create a `src/customers`
    directory to house related components, and BuckleScript will recursively look
    for Reason (and OCaml) files in subdirectories of `src`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的 `bsconfig.json` 包含子目录，我们可以创建一个 `src/customers` 目录来存放相关组件，BuckleScript
    将递归地在 `src` 的子目录中查找 Reason（和 OCaml）文件：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let's move on and rename the `src/Page1.re` component to `src/customers/CustomerList.re`.
    In the same directory, we'll later create `Customer.re`, which will be used to
    both create and update individual customers.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续并将 `src/Page1.re` 组件重命名为 `src/customers/CustomerList.re`。在同一个目录中，我们稍后创建
    `Customer.re`，它将用于创建和更新单个客户。
- en: Updating the router and navigation menu
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新路由和导航菜单
- en: 'In `Router.re`, we''ll replace the `/page1` route with the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Router.re` 中，我们将用以下内容替换 `/page1` 路由：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We''ll also add the routes for `/customers/create` and `/customers/:id`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将添加 `/customers/create` 和 `/customers/:id` 的路由：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The router has been updated so it can handle route variables (such as `/customers/:id`).
    This change has been made for you in `Chapter07/app-start`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 路由已更新，以便它可以处理路由变量（例如 `/customers/:id`）。此更改已在 `Chapter07/app-start` 中为您完成。
- en: 'Finally, be sure to also update the navigation menu in `<App.re />`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，务必更新 `<App.re />` 中的导航菜单：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: CustomerType.re
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CustomerType.re
- en: 'This file will hold the customer type used by both `<CustomerList />` and `<Customer
    />`. This is done to avoid any circular dependency compiler errors:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件将包含 `<CustomerList />` 和 `<Customer />` 都使用的客户类型。这样做是为了避免任何循环依赖编译器错误：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: CustomerList.re
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CustomerList.re
- en: 'For now, we''ll use a hardcoded array of customers. Soon, we''ll retrieve this
    data from `localStorage`. The following component renders a styled array of customers.
    Each customer is wrapped in a `<Link />` component. Clicking on a customer navigates
    to the update view:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们将使用硬编码的客户数组。很快，我们将从 `localStorage` 中检索这些数据。以下组件渲染一个样式化的客户数组。每个客户都被 `<Link
    />` 组件包裹。点击客户将导航到更新视图：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Customer.re
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Customer.re
- en: This reducer component renders a form where every customer field is editable
    inside an input element. The component has two modes—`Create` and `Update`—based
    on the `window.location.pathname`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此还原组件渲染一个表单，其中每个客户字段都可以在输入元素内编辑。组件有两个模式——`Create` 和 `Update`——基于 `window.location.pathname`。
- en: 'We start by binding to `window.location.pathname`, and defining our component''s
    actions and state:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先绑定到 `window.location.pathname`，并定义组件的动作和状态：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we add our component styles using `bs-css`. To see the styles, check
    out `Chapter07/app-end/src/customers/Customer.re`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用 `bs-css` 添加我们的组件样式。要查看样式，请查看 `Chapter07/app-end/src/customers/Customer.re`：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We also have helper functions, for the following reasons:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提供了辅助函数，以下是一些原因：
- en: To extract the customer ID from `window.location.pathname`
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 `window.location.pathname` 提取客户 ID
- en: To get a customer by ID
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要通过 ID 获取客户
- en: 'To generate a default customer:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要生成默认客户：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And, of course, the following is our component''s `make` function:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，以下是我们组件的 `make` 函数：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `Save` action doesn't yet save to `localStorage`. The form is empty when
    navigating to `/customers/create` and populated when navigating to, for example,
    `/customers/1`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`Save` 动作还没有保存到 `localStorage`。当导航到 `/customers/create` 时，表单是空的，当导航到例如 `/customers/1`
    时，表单会被填充。'
- en: Integrating with localStorage
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 localStorage 集成
- en: Let's create a separate module to interact with the data layer, which we'll
    call `DataPureReason.re`. Here, we expose bindings to `localStorage.getItem` and
    `localStorage.setItem`, and a parsing function to parse JSON strings into the
    `CustomerType.t` record defined earlier.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个单独的模块来与数据层交互，我们将它称为 `DataPureReason.re`。在这里，我们公开 `localStorage.getItem`
    和 `localStorage.setItem` 的绑定，以及一个解析函数，用于将 JSON 字符串解析为之前定义的 `CustomerType.t` 记录。
- en: Populating localStorage
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 填充 localStorage
- en: You'll find some initial data in `Chapter07/app-end/src/customers/data.json`.
    Please run `localStorage.setItem("customers", JSON.stringify(/* paste JSON data
    here */))` in your browser's console to populate `localStorage` with this initial
    data.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 `Chapter07/app-end/src/customers/data.json` 中找到一些初始数据。请在浏览器控制台中运行 `localStorage.setItem("customers",
    JSON.stringify(/* paste JSON data here */))` 以填充 `localStorage` 中的这些初始数据。
- en: DataPureReason.re
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DataPureReason.re
- en: 'Remember when BuckleScript bindings felt kind of obscure? Hopefully, they''re
    now starting to feel a bit more straightforward:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 记得当 BuckleScript 绑定感觉有点神秘的时候吗？希望现在它们开始感觉稍微直接一些：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To parse the JSON, we'll use the `Js.Json` module.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要解析 JSON，我们将使用 `Js.Json` 模块。
- en: 'The Js.Json documentation can be found at the following URL:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Js.Json 文档可以在以下 URL 找到：
- en: '[https://bucklescript.github.io/bucklescript/api/Js_json.html](https://bucklescript.github.io/bucklescript/api/Js_json.html)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bucklescript.github.io/bucklescript/api/Js_json.html](https://bucklescript.github.io/bucklescript/api/Js_json.html)'
- en: 'Soon, you''ll see one way to use the `Js.Json` module to parse JSON strings.
    One caveat, though: it''s a bit tedious. But it''s important to understand what
    is going on and why we need to do this for typed languages such as Reason. At
    a high level, we will validate the JSON string to ensure that it''s valid JSON,
    and if so use the `Js.Json.classify` function to convert the JSON string (`Js.Json.t`)
    into a tagged type (`Js.Json.tagged_t`). The available tags are as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 很快，你就会看到一种使用 `Js.Json` 模块解析 JSON 字符串的方法。不过有一个注意事项：这有点繁琐。但了解正在发生的事情以及为什么我们需要为像
    Reason 这样的类型化语言做这件事是很重要的。从高层次上讲，我们将验证 JSON 字符串以确保它是有效的 JSON，如果是的话，使用 `Js.Json.classify`
    函数将 JSON 字符串（`Js.Json.t`）转换为标签类型（`Js.Json.tagged_t`）。可用的标签如下：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This way, we can convert JSON strings into typed Reason data structures.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们可以将 JSON 字符串转换为 Reason 数据结构。
- en: Validating JSON strings
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证 JSON 字符串
- en: 'The `getItem` binding defined in the previous section will return a string:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节中定义的 `getItem` 绑定将返回一个字符串：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can validate the JSON string like so:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以这样验证 JSON 字符串：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If the JSON is not valid, it will generate a runtime error. At the end of the
    chapter, we'll learn how GraphQL can help improve this situation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 JSON 无效，它将生成一个运行时错误。在本章的结尾，我们将学习 GraphQL 如何帮助改善这种情况。
- en: Using Js.Json.classify
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Js.Json.classify
- en: 'Let''s assume that we''ve validated the following JSON (it''s an array of objects):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经验证了以下 JSON（它是一个对象数组）：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now that we have validated the JSON, we''re ready to classify it:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经验证了 JSON，我们准备对其进行分类：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We pattern-match on the possible tags for `Js.Json.tagged_t`. If it's an array,
    we then map over it using `Belt.Array.map` (or `Js.Array.map`). Otherwise, we
    get a runtime error in the context of our application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对 `Js.Json.tagged_t` 的可能标签进行模式匹配。如果它是一个数组，我们就会使用 `Belt.Array.map`（或 `Js.Array.map`）遍历它。否则，在我们的应用程序上下文中会得到一个运行时错误。
- en: 'The `map` function is passed a reference to each object in the array. But Reason
    doesn''t yet know that each element is an object. Inside the `map`, we once again
    classify each element of the array. After classifying, Reason now knows that each
    element is, in fact, an object. We''ll define a custom helper function called
    `parseCustomer` for use with the `map` function:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`map` 函数传递一个对数组中每个对象的引用。但 Reason 还不知道每个元素实际上是一个对象。在 `map` 内部，我们再次对数组中的每个元素进行分类。分类后，Reason
    现在知道每个元素实际上是一个对象。我们将定义一个名为 `parseCustomer` 的自定义辅助函数，用于与 `map` 函数一起使用：'
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, if each element of the array is an object, we want to return a new record.
    This record will be of type `CustomerType.t`. Otherwise, we get a runtime error:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果数组中的每个元素都是一个对象，我们希望返回一个新的记录。这个记录将是 `CustomerType.t` 类型。否则，我们会得到一个运行时错误：
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, for each field (that is, `id`, `name`, `address`, and so on), we use `Js.Dict.get`
    to get and classify each field:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于每个字段（即`id`、`name`、`address`等），我们使用`Js.Dict.get`来获取和分类每个字段：
- en: 'The `Js.Dict` documentation can be found at the following URL:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`Js.Dict`的文档可以在以下URL找到：'
- en: '[https://bucklescript.github.io/bucklescript/api/Js.Dict.html](https://bucklescript.github.io/bucklescript/api/Js.Dict.html)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bucklescript.github.io/bucklescript/api/Js.Dict.html](https://bucklescript.github.io/bucklescript/api/Js.Dict.html)'
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: See `src/customers/DataPureReason.re` for the full implementation. `DataPureReason.rei`
    hides implementation details and only exposes the `localStorage` bindings and
    a parse function.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`src/customers/DataPureReason.re`以获取完整的实现。`DataPureReason.rei`隐藏了实现细节，只暴露了`localStorage`绑定和一个解析函数。
- en: 'Phew, that was a bit tedious, wasn''t it? Now that it''s done though, we can
    replace the hardcoded customer array in both `CustomerList.re` and `Customer.re`
    with the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，这有点繁琐，不是吗？不过现在完成了，我们可以将`CustomerList.re`和`Customer.re`中的硬编码客户数组替换为以下内容：
- en: '[PRE21]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: So far, so good! The JSON data is being pulled in dynamically, and parsed, and
    now works the same as it did when hardcoded.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 目前一切顺利！JSON数据正在动态地被拉取、解析，现在的工作方式与硬编码时相同。
- en: Writing to localStorage
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入localStorage
- en: 'Let''s now add the functionality to create and update customers. To do this,
    we''ll need to convert our Reason data structure to JSON. In the interface file, `DataPureReason.rei`,
    we''ll expose a `toJson` function:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加创建和更新客户的功能。为此，我们需要将我们的Reason数据结构转换为JSON。在接口文件`DataPureReason.rei`中，我们将暴露一个`toJson`函数：
- en: '[PRE22]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And then we''ll implement it:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将实现它：
- en: '[PRE23]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And then we''ll use the `toJson` function in the `Customer.re` reducer:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将在`Customer.re`的reducer中使用`toJson`函数：
- en: '[PRE24]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the reducer, we update `self.state.customer` with values from the DOM, and
    then call a function that updates `localStorage`. Now, we're able to write to
    `localStorage` by creating or updating customers. Navigate to `/customers/create`
    to create a new customer, and then navigate back to `/customers` to see your newly
    added customer. Click on a customer to navigate to the update view, update the
    customer, click the Update button, and refresh the page.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在reducer中，我们使用DOM中的值更新`self.state.customer`，然后调用一个更新`localStorage`的函数。现在，我们能够通过创建或更新客户来写入`localStorage`。导航到`/customers/create`以创建新客户，然后导航回`/customers`以查看您新添加的客户。点击客户以导航到更新视图，更新客户，点击更新按钮，然后刷新页面。
- en: Using bs-json
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用bs-json
- en: Now that we understand exactly how to convert JSON strings into typed Reason
    data structures, we notice that the process is a bit tedious. It's more lines
    of code than one would expect coming from a dynamic language such as JavaScript.
    Also, there is quite a bit of repetitive code. As an alternative, many in the
    Reason community have adopted `bs-json` as an "official" solution for encoding
    and decoding JSON.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们确切地了解了如何将JSON字符串转换为类型化的Reason数据结构，我们注意到这个过程有点繁琐。与JavaScript这样的动态语言相比，代码行数更多。此外，还有相当多的重复代码。作为替代方案，Reason社区中的许多人已经采用了`bs-json`作为编码和解码JSON的“官方”解决方案。
- en: Let's create a new module called `DataBsJson.re` and a new interface file, `DataBsJson.rei`.
    We'll copy the exact same interface as we had in `DataPureReason.rei` so that
    we know that, once we're done, we'll be able to replace all references to `DataPureReason`
    with `DataBsJson` and everything should work the same.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的模块`DataBsJson.re`和一个新的接口文件`DataBsJson.rei`。我们将复制与`DataPureReason.rei`中完全相同的接口，这样我们就可以知道，一旦我们完成，我们就可以用`DataBsJson`替换所有对`DataPureReason`的引用，一切应该都能正常工作。
- en: 'The exposed interface is as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 暴露的接口如下：
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let''s focus on the `parse` function:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们关注`parse`函数：
- en: '[PRE26]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here, we are accepting the same JSON string as before, validating it, converting
    it to a `Js.Json.t` (via `Json.parseOrRaise`), and then passing the result into
    this new `Json.Decode.array(customerDecoder)` function. `Json.Decode.array` will
    attempt to decode the JSON string into an array, and decode each element of the
    array with a custom function called `customerDecoder`—which we''ll see next:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们接受与之前相同的JSON字符串，验证它，将其转换为`Js.Json.t`（通过`Json.parseOrRaise`），然后将结果传递给这个新的`Json.Decode.array(customerDecoder)`函数。`Json.Decode.array`将尝试将JSON字符串解码为数组，并使用一个名为`customerDecoder`的自定义函数解码数组的每个元素——我们将在下面看到：
- en: '[PRE27]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `customerDecoder` function accepts the JSON associated with each element
    of the array and tries to decode that into a record of type `CustomerType.t`.
    This is pretty much exactly the same as what we did previously, but it''s much
    less verbose and much easier to read. As you can see, we have another customer
    decoder, called `addressDecoder`, which is used to decode the `CustomerType.address`
    type:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`customerDecoder`函数接受与数组中每个元素关联的JSON，并尝试将其解码为`CustomerType.t`类型的记录。这基本上与我们之前所做的是完全相同的，但它更加简洁，更容易阅读。正如你所看到的，我们还有一个名为`addressDecoder`的客户解码器，用于解码`CustomerType.address`类型：'
- en: '[PRE28]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Notice how the custom decoders are easily composed. Each record field is decoded
    by calling `Json.Decode.field`, passing the name of the field (on the JSON side),
    and passing in a `Json.Decode` function that ultimately converts the JSON field
    to a type Reason can understand.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 注意自定义解码器是如何轻松组合的。每个记录字段都是通过调用`Json.Decode.field`，传递字段名称（在JSON方面），并传递一个`Json.Decode`函数来解码的，该函数最终将JSON字段转换为Reason可以理解的数据类型。
- en: 'Encoding works similarly, but in the reverse order:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 编码的工作方式类似，但顺序相反：
- en: '[PRE29]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The array of customers is mapped and each customer is encoded to a JSON object.
    The result is an array of JSON objects, which then gets encoded to JSON, and stringified.
    Much better than our previous implementation.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 客户数组被映射，每个客户都被编码为一个JSON对象。结果是JSON对象的数组，然后被编码为JSON，并转换为字符串。这比我们之前的实现要好得多。
- en: After copying over the same `localStorage` bindings from `DataPureReason.re`,
    our interface is now implemented. After replacing all references to `DataPureReason`
    with `DataBsJson`, we see that our app is working just the same.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在将`DataPureReason.re`中的相同`localStorage`绑定复制过来之后，我们的界面现在已经实现。在将所有对`DataPureReason`的引用替换为`DataBsJson`之后，我们看到我们的应用程序仍然在正常工作。
- en: Using GraphQL
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GraphQL
- en: 'At ReactiveConf 2018, there was an amazing talk by Sean Grove on Reason and
    GraphQL titled *ReactiveMeetups w/ Sean Grove | ReasonML GraphQL.* The following
    is an excerpt from this talk that nicely summarizes the problems and solution
    for using JSON in Reason:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在2018年ReactiveConf上，Sean Grove关于Reason和GraphQL的演讲非常精彩，标题为*ReactiveMeetups w/
    Sean Grove | ReasonML GraphQL.*以下是从这次演讲中摘录的内容，很好地总结了在Reason中使用JSON的问题和解决方案：
- en: So I would argue that, in typed languages, like Reason, there are three really,
    really big problems when you want to interact with the real world. The first is
    all the boilerplate that it takes to get data into and out of your type system.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我认为，在像Reason这样的类型语言中，当你想要与现实世界交互时，有三个真正非常大的问题。第一个是，将数据放入和从你的类型系统中取出所需的所有样板代码。
- en: The second is, even if you can program your way out of the boilerplate, you
    are still worried about the accuracy, the safety of conversion.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个是，即使你可以通过编程方式摆脱样板代码，你仍然会担心转换的准确性和安全性。
- en: And then finally, even if you if you get all of this and you're absolutely sure
    you've caught all the variation, someone can still change it from underneath you
    without you knowing.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，即使你得到了所有这些，并且你绝对确信你已经捕捉到了所有的变化，有人仍然可以在你不知情的情况下从下面改变它。
- en: How many times do we get a changelog whenever the server changes fields? In
    an ideal world, we would. But most of the time we don't. We get to reverse-engineer
    what our server changed.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 每当服务器更改字段时，我们有多少次会得到一个变更日志？在一个理想的世界里，我们会。但大多数时候我们不会。我们只能反向工程我们的服务器发生了什么变化。
- en: 'So I would argue that, in order to solve this in a broadly applicable way,
    we want four things:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我认为，为了以广泛适用的方式解决这个问题，我们想要四件事情：
- en: 1) Access to all of the data types that an API can provide to us in a programmatic
    way.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 1) 以编程方式访问API可以为我们提供的数据类型。
- en: 2) Automatic conversions that are guaranteed to be safe.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 2) 保证安全的自动转换。
- en: 3) And we want to have a contract. We want the server to guarantee if it said
    a field is not nullable, they will never give us null. If they change the field
    name, then we immediately know and that they know.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 3) 我们希望有一个合同。我们希望服务器保证，如果它说一个字段不可为空，那么它们永远不会给我们空值。如果它们更改字段名称，那么我们立即知道，并且它们也知道。
- en: 4) And we want all of that in a programmatic way.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 4) 我们希望以编程方式实现所有这些。
- en: And that's GraphQL.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 那就是GraphQL。
- en: -Sean Grove
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: -Sean Grove
- en: 'You can find the video of *ReactiveMeetups w/ Sean Grove | ReasonML GraphQL* at
    the following URL:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下URL找到*ReactiveMeetups w/ Sean Grove | ReasonML GraphQL*的视频：
- en: '[https://youtu.be/t9a-_VnNilE](https://youtu.be/t9a-_VnNilE)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://youtu.be/t9a-_VnNilE](https://youtu.be/t9a-_VnNilE)'
- en: 'And, here is ReactiveConf''s Youtube channel:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这里是ReactiveConf的YouTube频道：
- en: '[https://www.youtube.com/channel/UCBHdUnixTWymmXBIw12Y8Qg](https://www.youtube.com/channel/UCBHdUnixTWymmXBIw12Y8Qg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/channel/UCBHdUnixTWymmXBIw12Y8Qg](https://www.youtube.com/channel/UCBHdUnixTWymmXBIw12Y8Qg)'
- en: It's beyond the scope of this book to go too deeply into GraphQL, but a high-level
    introduction seems fitting given that we're discussing using JSON in Reason.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的内容并不深入探讨 GraphQL，但鉴于我们在讨论在 Reason 中使用 JSON，一个高级介绍似乎很合适。
- en: What is GraphQL?
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 GraphQL？
- en: If you're part of the ReactJS community, then you've likely already heard of
    GraphQL. GraphQL is a query language and a runtime we can use to fulfill those
    queries and was also created by Facebook. With GraphQL, ReactJS components can
    include GraphQL fragments for data that a component requires—this means that a
    component can couple HTML, CSS, JavaScript, and its external data all in one file.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你属于 ReactJS 社区，那么你很可能已经听说过 GraphQL。GraphQL 是一种查询语言和运行时，我们可以用它来满足这些查询，它也是由
    Facebook 创建的。使用 GraphQL，ReactJS 组件可以包含 GraphQL 片段，用于组件所需的数据——这意味着组件可以将 HTML、CSS、JavaScript
    和其外部数据全部放在一个文件中。
- en: When using GraphQL, do I need to create JSON decoders?
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当使用 GraphQL 时，我需要创建 JSON 解码器吗？
- en: Since GraphQL knows your application's external data intimately, the GraphQL
    client (`reason-apollo`) will generate the decoders for you automatically. Of
    course, the decoders would have to be automatically generated so we're confident
    that they reflect the current shape of the external data. This is just another
    reason to consider using GraphQL with your Reason application when you need to
    handle external data.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 GraphQL 对你的应用程序的外部数据了如指掌，GraphQL 客户端（`reason-apollo`）将为你自动生成解码器。当然，解码器必须自动生成，这样我们才能确信它们反映了外部数据的当前形状。这又是考虑在需要处理外部数据时使用
    GraphQL 与你的 Reason 应用程序的一个原因。
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: As long as we're working within Reason, the type system will prevent you from
    running into runtime type errors. However, when interacting with the outside world—whether
    it be JavaScript or external data—we lose those guarantees. To be able to preserve
    these guarantees within Reason's boundaries, we need to help out the type system
    when using things outside Reason. We previously learned how to use external JavaScript
    in Reason, and in this chapter we've learned how to use external data in Reason.
    Although writing decoders and encoders is more challenging, it's quite similar
    to writing JavaScript bindings. In the end, we're simply telling Reason the type
    of something external to Reason. With GraphQL, we can extend the boundaries of
    Reason to include external data. There are trade-offs, and nothing is perfect,
    but it's definitely worth giving GraphQL a shot.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 只要我们在 Reason 中工作，类型系统就会阻止你遇到运行时类型错误。然而，当我们与外部世界交互——无论是 JavaScript 还是外部数据——我们就失去了这些保证。为了能够在
    Reason 的边界内保留这些保证，我们需要在 Reason 外部使用事物时帮助类型系统。我们之前学习了如何在 Reason 中使用外部 JavaScript，在本章中我们学习了如何在
    Reason 中使用外部数据。虽然编写解码器和编码器更具挑战性，但它与编写 JavaScript 绑定非常相似。最终，我们只是在告诉 Reason 外部事物的类型。使用
    GraphQL，我们可以扩展 Reason 的边界以包括外部数据。当然，这会有权衡，没有什么是完美的，但绝对值得一试。
- en: In the next chapter, we'll explore testing in the context of Reason. What tests
    should we write? What tests should we avoid? We'll also explore how unit testing
    can help us improve the code we wrote in this chapter.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 Reason 上下文中的测试。我们应该编写哪些测试？我们应该避免哪些测试？我们还将探讨单元测试如何帮助我们改进本章中编写的代码。
