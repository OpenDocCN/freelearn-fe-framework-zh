- en: Our Second Project - The Budgeting App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第二个项目 - 预算应用
- en: Staying within a monthly budget is something that I've found difficult to do
    in the past. For our second project, we will build an app that keeps track of
    our budget by letting us set a goal for how much we'd like to spend in a month,
    and then lets us enter expenses into the application and categorize them under
    simple labels. At any point, we can go and look at how we're doing for the month
    and look at our previous months' results.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，我发现保持月度预算是一件困难的事情。对于我们的第二个项目，我们将构建一个应用程序，通过让我们设定一个月内希望花费的目标来跟踪我们的预算，然后允许我们进入应用程序并按简单标签分类支出。在任何时候，我们都可以查看我们这个月的进度并查看我们前几个月的结果。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Planning our second app, `Expenses`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划我们的第二个应用程序，`Expenses`
- en: Installing a popular vector icon library for React Native
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为React Native安装流行的矢量图标库
- en: Building a series of helper methods that will be used throughout our app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一系列将在我们的应用中使用的辅助方法
- en: Creating a modal that lets us enter our expenses
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个允许我们输入支出的模态窗口
- en: Rendering a list for the current month, showing the month's progress
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染当前月份的列表，显示月份的进度
- en: Getting started
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始
- en: 'Like always, let''s begin by initializing a new React Native project using
    the following statement in our command line:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，让我们通过在命令行中使用以下语句来初始化一个新的React Native项目：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: While the React Native CLI is doing its work in scaffolding our project, we
    should plan out the functionality of the app.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当React Native CLI在构建我们的项目时，我们应该规划出应用程序的功能。
- en: App planning
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序规划
- en: 'Once this app is complete, we would like for it to function in the following
    ways:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这个应用完成，我们希望它能够以下方式运行：
- en: Upon launching the app, if a budget for the month has not yet been set, it should
    ask the user to input their monthly goal and save it in `AsyncStorage`.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当应用程序启动时，如果尚未设置该月的预算，它应该要求用户输入他们的月度目标并将其保存在`AsyncStorage`中。
- en: Once a budget for the month has been set, the user should be shown a screen
    that contains a button to add their expenses for the month.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦设置了该月的预算，用户应看到一个包含添加该月支出按钮的屏幕。
- en: 'Upon tapping on that button, the user should be shown a modal that allows them
    to input details for their expenses: the name, amount, date the purchase was made
    on, and an icon to categorize the item. The modal should allow the user to either
    cancel or save the entry that they make.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击该按钮后，用户应看到一个模态窗口，允许他们输入支出的详细信息：名称、金额、购买日期以及一个用于分类项目的图标。该模态窗口应允许用户取消或保存他们所做的条目。
- en: If the expense is saved, it should then be rendered in a list on the main screen
    that contains the button to add further expenses.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果保存了支出，它应该在主屏幕上的列表中渲染，该列表包含添加更多支出的按钮。
- en: This list should also prominently display the user's set budget for the month
    along a progress indicator showing how close they are to hitting their budget.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此列表还应突出显示用户为该月设定的预算，以及一个进度指示器，显示他们离达到预算有多近。
- en: The app should also contain a second tab, where the user can view their previous
    months' histories.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序还应包含一个第二个标签页，用户可以在其中查看他们前几个月的历史记录。
- en: Users should be able to add expenses to any month and delete any expenses as
    well.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户应能够向任何月份添加支出，并删除任何支出。
- en: For the first part of this project, we'll tackle the top half of the list.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目的第一部分，我们将处理列表的上半部分。
- en: Let's start by installing the vector icon library as we'll be using it in this
    app.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先安装矢量图标库，因为我们将在这个应用中使用它。
- en: Installing vector icons
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装矢量图标
- en: One of the most popular vector icon packs for React Native is `react-native-vector-icons`.
    It includes a plethora of icons from different sources, including FontAwesome
    and Google's Material icons pack.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: React Native最受欢迎的矢量图标库之一是`react-native-vector-icons`。它包含来自不同来源的大量图标，包括FontAwesome和谷歌的Material图标库。
- en: 'Installing this vector icons pack takes a couple of steps, but we''ll start
    by pulling it down:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 安装这个矢量图标库需要几个步骤，但我们将首先将其下载：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is now installed as a module, but we still need to link it to our project
    so that this app knows where to look for the files. This is because not every
    app we build will utilize all the native capabilities of the iOS and Android platforms.
    Including all the binaries to support every imaginable native capability will increase
    the size of our applications; instead, any components that rely on native iOS
    and Android code will have to be manually linked to our application, thus giving
    our application access to those pieces of code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它已经作为一个模块安装，但我们仍然需要将其链接到我们的项目，以便这个应用知道在哪里查找文件。这是因为我们构建的每个应用程序都不会利用 iOS 和 Android
    平台的所有原生功能。包括支持所有可想象的原生功能的二进制文件将增加我们应用程序的大小；相反，任何依赖于原生 iOS 和 Android 代码的组件都必须手动链接到我们的应用程序，从而让我们的应用程序能够访问这些代码片段。
- en: 'The simple way to link this vector icon library is with the following command
    line:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 链接这个矢量图标库的简单方法是以下命令行：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding command will automatically link libraries with native dependencies
    to your project.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将自动将具有原生依赖关系的库链接到您的项目。
- en: Folder structure
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件夹结构
- en: 'The following structure includes components that we will wind up building in
    this very chapter:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下结构包括我们将在这个章节中构建的组件：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Utilities
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具
- en: The `utils` folder stores helper methods that we will be using in our application.
    The `dateMethods` deals with the different methods that we will use to get different
    parts of the date, while `storageMethods` handles access to `AsyncStorage`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`utils` 文件夹存储了我们将要在我们的应用程序中使用的辅助方法。`dateMethods` 处理我们将要使用以获取日期不同部分的不同方法，而 `storageMethods`
    处理对 `AsyncStorage` 的访问。'
- en: Our first bullet point from app planning says that upon launching the app, if
    a budget for this month has not yet been set, it should ask the user to input
    their monthly goal and save it into `AsyncStorage`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从应用程序规划中的第一个要点开始，当应用程序启动时，如果尚未设置本月的预算，应该提示用户输入他们的月度目标并将其保存到 `AsyncStorage`。
- en: 'Based on the preceding intent, we want to do the following things:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的意图，我们想要做以下事情：
- en: Grab the current month and year
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取当前月份和年份
- en: Retrieve the object storing our expenses in `AsyncStorage` and check the month
    and year to check whether a budget has been set
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 `AsyncStorage` 中检索存储我们费用的对象，并检查月份和年份以检查是否已设置预算
- en: If it hasn't, then prompt the user to enter a budget for the month and save
    it into `AsyncStorage`
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果还没有，那么提示用户输入本月的预算并将其保存到 `AsyncStorage`
- en: Let's create some helper methods that deal with the dates.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一些处理日期的辅助方法。
- en: Date methods
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日期方法
- en: 'These are the things that the `dateMethods.js` file should contain:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是 `dateMethods.js` 文件应该包含的内容：
- en: An object that maps the number of the month to its name
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个将月份数字映射到其名称的对象
- en: 'Four methods get different parts of the date. Each should accept an optional
    date object or create a new instance of the `Date` object if one is not passed
    in the following ones:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个方法获取日期的不同部分。每个方法都应该接受一个可选的日期对象，如果没有传入，则创建一个新的 `Date` 对象实例：
- en: '`getYear`: This grabs the year number and returns a stringified form of it'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getYear`: 这个方法获取年份数字并返回其字符串形式'
- en: '`getMonth`: This grabs the month number and returns a stringified form of it'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getMonth`: 这个方法获取月份数字并将其作为字符串返回'
- en: '`getDay`: This grabs the day number and returns a stringified form of it'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getDay`: 这个方法获取天数字并将其作为字符串返回'
- en: '`getMonthString`: This returns the name of the month using the object created
    previously'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getMonthString`: 这个方法使用之前创建的对象返回月份的名称'
- en: 'This is how my `dateMethods` file looks after completing the preceding bullet
    points. This is an object mapping month numbers to the stringified name of the
    month:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我的 `dateMethods` 文件在完成前面的要点后的样子。这是一个将月份数字映射到月份字符串名称的对象：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The next one grabs the current year and returns it as a string:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个方法获取当前年份并将其作为字符串返回：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This one gets the current month which is zero-indexed and returns which number
    it is:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法获取当前月份（零索引）并返回它是第几个月：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following one gets the day and returns it as a string:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个方法获取天并将其作为字符串返回：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This one returns the name of the month, given its number:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法根据月份的数字返回月份的名称：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, it is time to create some methods to access `AsyncStorage`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候创建一些方法来访问 `AsyncStorage`。
- en: Storage methods
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储方法
- en: The `listOfExpenses` we will store in our application will be a multi-layered
    object.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在应用程序中存储的 `listOfExpenses` 将是一个多层对象。
- en: 'Visually, we will build it to look like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从视觉上看，我们将构建成这样：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The methods we want to create for storage involve the following things:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要为存储创建的方法涉及以下内容：
- en: '`getAsyncStorage`: This retrieves the list of expenses in `AsyncStorage`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getAsyncStorage`: 这将检索`AsyncStorage`中的支出列表'
- en: '`setAsyncStorage`: This accepts an object and saves it into `AsyncStorage`
    as the list of expenses'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setAsyncStorage`: 接受一个对象并将其保存到`AsyncStorage`中作为支出列表'
- en: '`checkCurrentMonth`: This lets us accept a month and year as stringified numbers
    and finds out whether a budget has been set for that given month and year, returning
    `false` if it has not, and the budget, if it has been set'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkCurrentMonth`: 这个方法允许我们接受一个月份和年份作为字符串化的数字，并找出是否为该月份和年份设置了预算，如果没有设置，则返回`false`，如果设置了，则返回预算'
- en: '`saveMonthlyBudget`: This accepts a month and year as stringified numbers and
    a budget as a number, then creates that `month` object and stores it in the right
    year in our list of expenses, saving it to `AsyncStorage` at the end'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`saveMonthlyBudget`: 接受一个月份和年份作为字符串化的数字和一个预算作为数字，然后创建该`month`对象并将其存储在我们的支出列表中的正确年份，最后将其保存到`AsyncStorage`中'
- en: '`saveExpenseToMonth`: This accepts a month and year as stringified numbers
    and a single `expense` object, then saves that to the budget for that month and
    year'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`saveExpenseToMonth`: 接受一个月份和年份作为字符串化的数字以及一个单独的`expense`对象，然后将其保存到该月份和年份的预算中'
- en: '`resetAsyncStorage`: This is a development-specific method that will erase
    the data in `AsyncStorage` so that we can clear our list whenever we need to'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resetAsyncStorage`: 这是一个特定于开发的方法，它将清除`AsyncStorage`中的数据，这样我们就可以在我们需要的时候清除我们的列表'
- en: '`logAsyncStorage`: This is another development-specific method to log the object
    currently stored in `AsyncStorage` so that we can view it whenever needed'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logAsyncStorage`: 这是一个特定于开发的方法，用于记录当前存储在`AsyncStorage`中的对象，这样我们就可以在需要时查看它'
- en: 'Import the `AsyncStorage` API from React Native and the `dateMethods` utility
    file:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从React Native导入`AsyncStorage` API和`dateMethods`实用文件：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Grab the object in storage under the key `expenses` and return it:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 获取存储中键为`expenses`的对象并返回它：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Override the `expenses` object in storage with the object passed in as an argument:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 用作为参数传递的对象覆盖存储中的`expenses`对象：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Grab the `month` and `year` from `dateMethods`, then grab the `expenses` object
    in storage. If that object does not exist or does not have any data for the given
    `year` and/or `month`, return `false`, otherwise return the `budget`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从`dateMethods`获取`month`和`year`，然后从存储中获取`expenses`对象。如果该对象不存在或没有给定年份和/或月份的数据，则返回`false`，否则返回预算：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In `saveMonthlyBudget`, we grab the `expenses` object, then we check to see
    whether the result exists; this is so that we can seed `AsyncStorage` with a default
    empty object if we need to, which is important for a new user who hasn''t entered
    data into the app before:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在`saveMonthlyBudget`中，我们获取`expenses`对象，然后检查结果是否存在；这样我们就可以在需要时用默认的空对象初始化`AsyncStorage`，这对于之前还没有在应用中输入数据的用户来说很重要：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We also make checks along the way to see whether our `expenses` object has an
    object pertaining to the specific year passed to it, and then whether that `year`
    object has an object pointing to the specific `month` we're pointing to; if not,
    we create it. After setting up the `month` object with an entered `budget`, `expenses`
    array, and amount already `spent` (number defaulting to zero), we save it right
    back to `AsyncStorage`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还沿途进行检查，看我们的`expenses`对象是否有与传递给它的特定年份相关的对象，然后是否该`year`对象指向我们指向的特定`month`；如果没有，我们创建它。在设置包含输入的`budget`、`expenses`数组和已花费的金额（默认为零）的`month`对象后，我们将其直接保存回`AsyncStorage`。
- en: 'The following code calls `setAsyncStorage` and passes it an empty object, erasing
    the `expenses` object:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码调用`setAsyncStorage`并传递一个空对象，从而清除`expenses`对象：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Grab the `expenses` object in storage and log it to the console:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 从存储中获取`expenses`对象并将其记录到控制台：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: App.js and index.ios.js
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: App.js 和 index.ios.js
- en: '`App.js` will serve as the initial route for our app''s navigation. It will
    handle the logic that decides whether to show the current month''s expenses or
    a prompt to enter a budget for the month.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`App.js`将作为我们应用导航的初始路由。它将处理决定是否显示当前月份的支出或提示输入该月预算的逻辑'
- en: 'The root `index.ios.js` file will be modified in the same way as we structured
    it in the first project of this book, `Tasks`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 根目录下的`index.ios.js`文件将按照与本书第一个项目`Tasks`中结构化的方式修改：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, let''s create the `App.js` file and have it do the following things during
    its `componentDidMount` lifecycle:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建`App.js`文件，并在其`componentDidMount`生命周期中执行以下操作：
- en: 'On load, we should use our `storageMethods` file to find out whether a budget
    has been set for the current month:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在加载时，我们应该使用我们的`storageMethods`文件来找出当前月份是否设置了预算：
- en: If the budget for the current month has been set, we should render it on the
    screen using a `Text` component for the user to see
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果当前月份的预算已经设置，我们应该使用`Text`组件将其渲染到屏幕上，让用户可以看到
- en: If it has not been set, let's throw a basic alert stating the same for the user
    to see
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果尚未设置，让我们抛出一个基本的警告，让用户看到相同的内容
- en: 'This is how i built the `App` component:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我构建`App`组件的方式：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Check the current month’s budget and set it in state. If there is no budget,
    alert the user:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 检查当前月份的预算并将其设置在状态中。如果没有预算，提醒用户：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Render a `Text` element that states the current month’s budget, if set:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置了，渲染一个显示当前月份预算的`Text`元素：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `marginTop` property offsets the height of the navigation bar:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`marginTop`属性抵消了导航栏的高度：'
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Next, let’s create a component that will let the user know their budget for
    the month.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个组件，让用户知道他们这个月的预算。
- en: The EnterBudget component
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`EnterBudget`组件'
- en: 'The component to enter a budget should do the following things:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 输入预算的组件应该执行以下操作：
- en: Prompt the user to enter their budget for the month with a numerical input
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提示用户使用数字输入输入他们这个月的预算
- en: 'Include a button that lets them save the budget. When saved, we will do the
    following things:'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含一个按钮，允许他们保存预算。保存后，我们将执行以下操作：
- en: Have the parent `App.js` component use `saveMonthlyBudget`, created in our `storageMethods`
    file, to save the entered budget
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让父`App.js`组件使用在`storageMethods`文件中创建的`saveMonthlyBudget`来保存输入的预算
- en: Update the parent `App.js` component to reflect the entered budget
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新父`App.js`组件以反映输入的预算
- en: Pop out of the `EnterBudget` component and go back to the `App.js` component
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`EnterBudget`组件中退出并返回到`App.js`组件
- en: 'We should also modify the `App.js` component so that it does the following
    things:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该修改`App.js`组件，使其执行以下操作：
- en: Pushes the `EnterBudget` component to the navigator in the event that a budget
    has not been set. This should replace the current call to alert the user that
    they have not yet set a budget. This component should not contain a back button
    so that the user is required to enter a budget for the month.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果尚未设置预算，将`EnterBudget`组件推送到导航器中。这应该替换当前提醒用户他们尚未设置预算的调用。这个组件不应该包含返回按钮，这样用户就必须输入这个月的预算。
- en: Passes the name of the current month in string form to the `EnterBudget` component.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将当前月份的名称以字符串形式传递给`EnterBudget`组件。
- en: Stores the current month and year in numerical form in its local state so that
    it can refer to them when required
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将当前月份和年份以数字形式存储在其本地状态中，以便在需要时引用它们
- en: Contains a method that updates itself with the new budget once the user saves
    a number in the `EnterBudget` component. This should be in the form of a prop
    passed into it.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含一个方法，在用户在`EnterBudget`组件中保存一个数字后，用新的预算更新自己。这应该以传递给它的prop的形式出现。
- en: Like always, spend some time building out this component yourself. When you're
    finished, keep reading and check out the solution I came up with.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，花些时间自己构建这个组件。当你完成时，继续阅读并查看我提出的解决方案。
- en: EnterBudget component example
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`EnterBudget`组件示例'
- en: 'Building and linking this component involved changing the `App.js` file. Let''s
    take a look at that one first since it passes props down to the `EnterBudget`
    component:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 构建和链接这个组件涉及到更改`App.js`文件。让我们先看看这个文件，因为它将属性传递给`EnterBudget`组件：
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Set the `month` and `year` in state, then call `_updateBudget`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在状态中设置`month`和`year`，然后调用`_updateBudget`：
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Push `EnterBudget` to the navigator and pass it two props. Hide the navigation
    bar so that the user cannot leave without entering a budget for the month:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 将`EnterBudget`推送到导航器并传递两个props。隐藏导航栏，这样用户就不能不输入这个月的预算就离开：
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Save the budget into storage. The argument is passed from the `EnterBudget`
    component:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 将预算保存到存储中。这个参数是从`EnterBudget`组件传递过来的：
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Previously found in `componentWillMount`, set the `budget` in state if it exists
    and render `EnterBudget` if it does not:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在`componentWillMount`中找到的，如果存在，则在状态中设置`budget`并渲染`EnterBudget`，如果不存在：
- en: '[PRE26]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Next, let's take a look at the new `EnterBudget` component.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看新的`EnterBudget`组件。
- en: '[PRE27]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Explicitly define the `props` this component expects:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 明确定义这个组件期望的`props`：
- en: '[PRE28]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Store the value of the `TextInput` field in state. Prompt the user to enter
    their budget for the month with a numeric `TextInput`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 将`TextInput`字段的值存储在状态中。使用数字`TextInput`提示用户输入他们这个月的预算：
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `Button` calls `_saveAndUpdateBudget` on press and is disabled if `TextInput`
    is empty:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`Button` 在按下时调用 `_saveAndUpdateBudget`，如果 `TextInput` 为空则禁用：'
- en: '[PRE30]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The following code calls `saveAndUpdateBudget` from the `App` component and
    `pop` on the navigator:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码从 `App` 组件调用 `saveAndUpdateBudget` 和 `pop`：
- en: '[PRE31]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Finally, `_setBudgetValue` sets the value of the `TextInput`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`_setBudgetValue` 设置 `TextInput` 的值：
- en: '[PRE32]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This component also received some styling shown as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件还接收了一些如下所示的样式：
- en: '[PRE33]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Like in the previous containers, we import `Navigator` so that we can offset
    the top margin by its `height`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的容器一样，我们导入 `Navigator` 以通过其 `height` 来偏移顶部边距：
- en: '[PRE34]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Styling for the header, text, and input field in `EnterBudget` are as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`EnterBudget` 中的标题、文本和输入字段的样式如下：'
- en: '[PRE35]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'By the end of this section, you should have an `EnterBudget` component that
    looks like this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 到本节结束时，你应该有一个看起来是这样的 `EnterBudget` 组件：
- en: '![](img/image_03_001.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_001.png)'
- en: Great job! In the next section, let’s style `App.js` and add a button to open
    a modal.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！在下一节中，我们将对 `App.js` 进行样式设计并添加一个打开模态框的按钮。
- en: The AddExpenses container and modal
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加支出的容器和模态框
- en: When planning this app, I wrote that once a budget for the month has been set,
    the user should be shown a screen that contains a button to add their expenses
    for the month.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在规划此应用程序时，我写道一旦设置了月份的预算，用户应该看到一个包含添加当月支出按钮的屏幕。
- en: The button's behavior was also detailed, and we said that upon tapping on that
    button, the user should be shown a modal that allows them to input details for
    their expenses--the name, amount, date the purchase was made on, and an icon to
    categorize the item. The modal should allow the user to either cancel or save
    the entry they make.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮的行为也得到了详细说明，我们说当点击该按钮时，用户应该看到一个模态框，允许他们输入支出的详细信息——名称、金额、购买日期以及用于分类的图标。模态框应允许用户取消或保存他们所做的条目。
- en: We can create one component to add expenses that will contain both the `Button`
    and `Modal`, with the `Modal` defaulting to a hidden state unless activated by
    the `Button`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个组件来添加支出，该组件将包含 `Button` 和 `Modal`，其中 `Modal` 默认为隐藏状态，除非由 `Button` 激活。
- en: 'Let''s start by creating a component, titled `AddExpenses`, which will start
    off by doing the following things:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个名为 `AddExpenses` 的组件开始，它将首先执行以下操作：
- en: Accepting the `month` and `year` as props
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受 `month` 和 `year` 作为属性
- en: Rendering a `Button` that, when pressed, will alert the user for now
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染一个 `Button`，当按下时，现在将提醒用户
- en: 'Additionally, we should render the `AddExpenses` component within `App.js`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们应在 `App.js` 中渲染 `AddExpenses` 组件：
- en: '[PRE36]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The `Modal` we render will take advantage of these props. I also rendered a
    `Button` that will eventually launch this modal:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们渲染的 `Modal` 将利用以下属性。我还渲染了一个 `Button`，最终将启动此模态框：
- en: '[PRE37]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'These are the changes to the `App` component:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是 `App` 组件的更改：
- en: '[PRE38]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Pass in the `month` and `year` to `AddExpenses`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `month` 和 `year` 传递给 `AddExpenses`：
- en: '[PRE39]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'At this point, you should have a button rendered on the screen:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，屏幕上应该有一个按钮被渲染：
- en: '![](img/image_03_002.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_002.png)'
- en: Great work! Next, we will create a modal that opens when the button is pressed.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！接下来，我们将创建一个当按钮被按下时打开的模态框。
- en: Looking at modals
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看模态框
- en: Modals let us present content over another view. In React Native, we can render
    one using the `Modal` tag. Any child elements within a `Modal` tag are rendered
    within it.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 模态框让我们能够在另一个视图上呈现内容。在 React Native 中，我们可以使用 `Modal` 标签来渲染一个模态框。任何在 `Modal` 标签内的子元素都将被渲染在其中。
- en: 'Modals have a couple of props that we can take advantage of. The ones listed
    as follows will be used in this project, though there are more available in the
    React Native documentation:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 模态框有几个属性我们可以利用。以下列出的属性将用于本项目，尽管 React Native 文档中还有更多可用：
- en: '`animationType`: This controls how a modal animates when it appears for the
    user. The three options are slide (from bottom), fade, and none.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`animationType`：这控制模态框出现时对用户的动画方式。有三个选项：从底部滑动、淡入和没有动画。'
- en: '`onRequestClose`: This is a callback that is fired when a modal is dismissed.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onRequestClose`：这是一个回调，当模态框被关闭时触发。'
- en: '`transparent`: This is a Boolean that determines modal transparency.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transparent`：这是一个布尔值，用于确定模态框的透明度。'
- en: '`visible`: This is a Boolean to determine whether a modal is visible.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`visible`：这是一个布尔值，用于确定模态框是否可见。'
- en: 'Since this modal will encapsulate a large amount of logic, let''s create a
    new `AddExpensesModal` component that will return this modal. It should do the
    following things:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个模态将封装大量逻辑，让我们创建一个新的`AddExpensesModal`组件，该组件将返回此模态。它应该执行以下操作：
- en: Contains a hidden `Modal` component that starts off hidden
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含一个初始时隐藏的`Modal`组件
- en: Accept the `month` and `year` props from the `AddExpenses` component
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`AddExpenses`组件接受`month`和`year`属性
- en: Accept a `modalVisible` Boolean as a prop from `AddExpenses`
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`AddExpenses`接受一个作为属性的`modalVisible`布尔值
- en: Render a string with the current month and year
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染一个包含当前月份和年份的字符串
- en: 'We should also update the existing `AddExpenses` component to do the following
    things:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该更新现有的`AddExpenses`组件以执行以下操作：
- en: Render the `AddExpensesModal` component when the `AddExpenses` button is pressed,
    passing the `month`, `year`, and `modalVisible` props
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当按下`AddExpenses`按钮时渲染`AddExpensesModal`组件，传递`month`、`year`和`modalVisible`属性
- en: Modify the existing button to toggle the modal’s visibility
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改现有的按钮以切换模态的可见性
- en: 'Let''s start by looking at `AddExpenses`:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从查看`AddExpenses`开始：
- en: '[PRE40]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Track the `modalVisible` Boolean in state:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在状态中跟踪`modalVisible`布尔值：
- en: '[PRE41]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Render `AddExpensesModal`, passing it a Boolean for visibility, the `month`,
    and `year`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 将布尔值、`month`和`year`传递给`AddExpensesModal`：
- en: '[PRE42]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Modify the `Button` to call `_toggleModal` instead of `alert`:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`Button`以调用`_toggleModal`而不是`alert`：
- en: '[PRE43]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Flip the `modalVisible` Boolean in state:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在状态中翻转`modalVisible`布尔值：
- en: '[PRE44]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Here is how I built the `AddExpensesModal`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这是构建`AddExpensesModal`的方法：
- en: '[PRE45]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Explicitly declare the expected `props` and their datatypes:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 明确声明预期的`props`及其数据类型：
- en: '[PRE46]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Render a modal with a `slide` animation. Visibility is controlled by the `modalVisible`
    Boolean:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染一个带有`slide`动画的模态框。可见性由`modalVisible`布尔值控制：
- en: '[PRE47]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Render a `View` with `Text` within the `Modal`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Modal`中渲染一个包含`Text`的`View`：
- en: '[PRE48]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This is the styling for `AddExpensesModal`:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`AddExpensesModal`的样式：
- en: '[PRE49]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Header and TextInput fields
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标题和`TextInput`字段
- en: 'You may note that we currently don''t have a way to close this modal or add
    any data to create new expenses for our list. Let''s change that by adding the
    following things:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到，我们目前还没有关闭此模态或添加任何数据以创建我们列表中新费用的方法。让我们通过添加以下内容来改变这一点：
- en: A header that prompts the user to add an expense
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个提示用户添加费用的标题
- en: A normal `TextInput` field that prompts the user for the name of the expense
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个提示用户输入费用名称的正常`TextInput`字段
- en: A numeric `TextInput` field, set to a numeric keyboard, that prompts the user
    for the cost of the expense
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个设置为数字键盘的数字`TextInput`字段，提示用户输入费用的金额
- en: 'Here are the changes I made to `AddExpensesModal`:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我对`AddExpensesModal`所做的更改：
- en: '[PRE50]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Store the `amount` and `description` values for the two `TextInput` fields:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 存储两个`TextInput`字段的`amount`和`description`值：
- en: '[PRE51]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The `render` method of `AddExpensesModal` wraps any components that the Modal
    displays as its children:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddExpensesModal`的`render`方法将其显示的任何组件作为其子组件包裹：'
- en: '[PRE52]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Create the `TextInput` field specifically for numeric `amount` input:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个专门用于数字`amount`输入的`TextInput`字段：
- en: '[PRE53]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Create the `TextInput` field specifically for the description:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个专门用于描述的`TextInput`字段：
- en: '[PRE54]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'These two methods set the `amount` and `description` values in state:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个方法在状态中设置`amount`和`description`值：
- en: '[PRE55]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'New styling has also been added to this component:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件已添加新的样式：
- en: '[PRE56]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The three amount-related styles are for the row where the `expense` amount is
    entered.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 三个与金额相关的样式用于输入费用金额的行。
- en: '[PRE57]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The `amountRow` has a `justifyContent` property of `space-between` to evenly
    space the `Text` and `TextInput` components:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`amountRow`具有`justifyContent`属性为`space-between`，以均匀地分隔`Text`和`TextInput`组件：'
- en: '[PRE58]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'These styles deal with the `description` and `header` elements:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这些样式处理`description`和`header`元素：
- en: '[PRE59]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Your `AddExpensesModal` should resemble something like this now:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 您的`AddExpensesModal`现在应该看起来像这样：
- en: '![](img/image_03_003.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_003.png)'
- en: DatePickerIOS plus ExpandableCell
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DatePickerIOS plus ExpandableCell
- en: 'In the next step, you should modify the `AddExpensesModal` component to contain
    the following things:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，您应该修改`AddExpensesModal`组件以包含以下内容：
- en: 'A `DatePickerIOS` component that sets only the date--without time--the expense
    was made on. It should default to today''s date if not specified:'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个仅设置日期（不包含时间）的`DatePickerIOS`组件，即在该日期发生的费用。如果没有指定，则默认为今天的日期：
- en: You should import and wrap `DatePickerIOS` around the `ExpandableCell` component
    we built for `Tasks`.
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您应该导入并将`DatePickerIOS`包裹在我们为`Tasks`构建的`ExpandableCell`组件周围。
- en: A line of text that explains the date on which the expense was made.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一行文本，解释了费用发生的日期。
- en: 'This is how I added `ExpandableCell` to `AddExpensesModal`:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我将`ExpandableCell`添加到`AddExpensesModal`的方式：
- en: '[PRE60]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Two new properties are now saved in state: the current `date` and the `expanded`
    Boolean:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在状态中保存了两个新属性：当前的`date`和`expanded`布尔值：
- en: '[PRE61]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: There is no new code in the `ExpandableCell` module from [Chapter 2](ca59eac5-a24f-4ac1-8b42-f1c28d149d74.xhtml),
    *Advanced Functionality and Styling the To-Do List App*.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ca59eac5-a24f-4ac1-8b42-f1c28d149d74.xhtml)的`ExpandableCell`模块中，没有新增代码，*高级功能与待办事项应用样式设置*。
- en: '[PRE62]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Placement of the `ExpandableCell` component comes right after the `TextInput`
    for the expense''s description:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExpandableCell`组件的位置紧接在开支描述的`TextInput`之后：'
- en: '[PRE63]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The `DatePickerIOS` component’s `mode` is set to `date` so that time cannot
    be selected:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`DatePickerIOS`组件的`mode`设置为`date`，这样就不能选择时间：'
- en: '[PRE64]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The logic to get the height of `DatePickerIOS` is unchanged from, [Chapter
    2](ca59eac5-a24f-4ac1-8b42-f1c28d149d74.xhtml): *Advanced Functionality and Styling
    the To-Do List App*:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 获取`DatePickerIOS`高度的逻辑与[第2章](ca59eac5-a24f-4ac1-8b42-f1c28d149d74.xhtml)：*高级功能与待办事项应用样式设置*中的逻辑相同：
- en: '[PRE65]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Three new methods can be found in this component, all of which are reused from
    our earlier project, `Tasks`, handled by the `ExpandableCell` and its `DatePickerIOS`
    child.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在此组件中可以找到三个新方法，它们都来自我们早期的项目`Tasks`，由`ExpandableCell`及其`DatePickerIOS`子组件处理。
- en: '[PRE66]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Styling for this component involves just one new property:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 为此组件的样式设置仅涉及一个新属性：
- en: '[PRE67]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'By this point, your app will look like the following screenshot:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你的应用看起来将如下截图所示：
- en: '![](img/image_03_004.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_004.png)'
- en: Great job with the updates! The `AddExpensesModal` will end up with a lot of
    fields for the user to interact with.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 更新做得很好！`AddExpensesModal`将最终拥有许多供用户交互的字段。
- en: You may have noted that the keyboard does not dismiss itself when `ExpandableCell`
    is interacted with, which can lead to information that the user is unable to access.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，当与`ExpandableCell`交互时，键盘不会自动关闭，这可能导致用户无法访问的信息。
- en: It’s time to look at the `ScrollView` component to learn how to dismiss the
    keyboard.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候查看`ScrollView`组件，学习如何关闭键盘。
- en: ScrollView
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ScrollView
- en: By default, the *return* key on the software keyboard handles a dismiss action
    for our apps. However, a *return* key does not exist on a numeric keyboard. Instead,
    we can replace our top-level `View` with the `ScrollView` component.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，软件键盘上的*回车*键处理我们应用的关闭操作。然而，在数字键盘上不存在*回车*键。相反，我们可以用`ScrollView`组件替换我们的顶级`View`。
- en: The `ScrollView` component wraps around the rest of your component, providing
    scrolling capabilities.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`ScrollView`组件围绕你的其他组件包裹，提供滚动功能。'
- en: An important thing to know is that `ScrollView` requires all its children to
    have a `height` property in its styling. If it does not have one, then the child
    element will not render.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一个重要事项是`ScrollView`要求其所有子元素在样式中都拥有`height`属性。如果没有，则子元素将不会渲染。
- en: Let's quickly replace the `View` that `AddExpensesModal` encapsulates around
    its `Modal` component with a `ScrollView`.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速将`AddExpensesModal`围绕其`Modal`组件封装的`View`替换为`ScrollView`。
- en: ScrollView example
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ScrollView示例
- en: 'This is how I updated `AddExpensesModal` to include a `ScrollView`:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这是更新`AddExpensesModal`以包含`ScrollView`的方式：
- en: '[PRE68]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Replace the modal''s `View` with `ScrollView`. The `maxHeight` of the `View`
    inside is now `height`:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 将模态框的`View`替换为`ScrollView`。现在`View`内部的`maxHeight`现在是`height`：
- en: '[PRE69]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The outer `View` container that was the direct child of the `Modal` component
    has been swapped out with a `ScrollView`.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 之前是`Modal`组件直接子元素的`View`容器已被替换为`ScrollView`。
- en: The `maxHeight` property in the `View` that encapsulates `ExpandableCell` has
    been changed into a `height` property so that it renders in the `ScrollView`.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 封装`ExpandableCell`的`View`中的`maxHeight`属性已被更改为`height`属性，以便在`ScrollView`中渲染。
- en: Saving expenses
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存开支
- en: 'The next step is to allow entries to be saved to the app. Let''s modify `AddExpensesModal`
    again and add the following features; you will also need to add some methods into
    `storageMethods` as well as the `AddExpenses` component:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是允许将条目保存到应用中。让我们再次修改`AddExpensesModal`并添加以下功能；你还需要将一些方法添加到`storageMethods`以及`AddExpenses`组件中：
- en: 'A button to save the expense, with the following conditions:'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于保存开支的按钮，以下条件：
- en: It should only be enabled if all the fields of the modal are filled out.
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有当模态框的所有字段都已填写时，才应启用。
- en: When pressed, the expense name, amount, and date should be saved into `AsyncStorage`.
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当按下时，开支名称、金额和日期应保存到`AsyncStorage`。
- en: The date should be formatted with Moment the same way we formatted it for the
    `ExpandableCell` title.
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期应该使用 Moment 以与 `ExpandableCell` 标题相同的方式格式化。
- en: 'When this logic finishes, the modal should be closed and the information entered
    should be cleared. The closing of the modal should be passed in as a prop from
    the parent `AddExpenses` component since it already has a method to toggle the
    modal:'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当此逻辑完成时，模态应该关闭，输入的信息应该被清除。模态的关闭应该作为从父 `AddExpenses` 组件传递的 prop，因为它已经有一个方法可以切换模态：
- en: A new helper method in `storageMethods` should be created to handle the logic
    of saving an expense into `AsyncStorage`.
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `storageMethods` 中应该创建一个新的辅助方法来处理将支出保存到 `AsyncStorage` 的逻辑。
- en: Another helper method in `storageMethods` should be written to tally each expense
    for the month and set it to the `spent` property of that specific month. It should
    be fired when a new expense is added to the month's `expenses` array, and then
    modify that month's `spent` property with the tally before the expense is saved
    into `AsyncStorage`.
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `storageMethods` 中应该编写另一个辅助方法来计算每月的每一项支出并将其设置为该特定月份的 `spent` 属性。当向该月的 `expenses`
    数组添加新的支出时，应该触发此方法，然后在将支出保存到 `AsyncStorage` 之前修改该月的 `spent` 属性。
- en: Another button to cancel the expense, closing the `AddExpensesModal` and clearing
    any information previously entered. It should also have access to the same method
    from `AddExpenses` to toggle the modal.
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个用于取消支出、关闭 `AddExpensesModal` 并清除之前输入的任何信息的按钮。它还应该能够访问来自 `AddExpenses` 的相同方法来切换模态。
- en: 'As a reminder, earlier in the chapter, we visualized a single object in our
    list of expenses to be structured in the following way:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 作为提醒，在本章的早期，我们以以下方式可视化了我们支出列表中的单个对象：
- en: '[PRE70]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Do not worry about the `category` key for now; that will come in the next chapter.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 目前不必担心 `category` 键；这将在下一章中介绍。
- en: 'The first thing I did was go to `storageMethods` and create two new methods: `getTotalSpentForMonth`
    and `saveItemToBudget`. The first function, `getTotalSpentForMonth`, takes in
    an array and iterates through it. It returns the total amount spent by converting
    the strings to numbers with `parseInt`:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我首先做了的是去 `storageMethods` 中创建两个新的方法：`getTotalSpentForMonth` 和 `saveItemToBudget`。第一个函数
    `getTotalSpentForMonth` 接收一个数组并遍历它。它通过使用 `parseInt` 将字符串转换为数字来返回总支出金额：
- en: '[PRE71]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The second function, `saveItemToBudget`, is an asynchronous one and starts
    by taking in the `month`, `year`, and `expenseObject` as arguments:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个函数 `saveItemToBudget` 是一个异步函数，它首先接收 `month`、`year` 和 `expenseObject` 作为参数：
- en: '[PRE72]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: It grabs the `expenses` object stored in `AsyncStorage`, creates a new array
    with the array spread operator (`...`) to add the new `expenseObject` argument
    to it, and then calls `getTotalSpentForMonth` with the new array.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 它获取存储在 `AsyncStorage` 中的 `expenses` 对象，使用数组扩展运算符 (`...`) 创建一个新的数组，并将新的 `expenseObject`
    参数添加到其中，然后使用新数组调用 `getTotalSpentForMonth`。
- en: Afterwards, it assigns the new array to the `expenses` property for the month
    and the total is calculated as the new total amount spent. Finally, it saves it
    to `AsyncStorage`.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，它将新数组分配给该月的 `expenses` 属性，并计算新的总支出金额。最后，它将其保存到 `AsyncStorage`。
- en: 'The next file I modified was `AddExpenses`:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我修改的下一个文件是 `AddExpenses`：
- en: '[PRE73]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: In the preceding code, I'm passing `_toggleModal` into the `AddExpensesModal`
    component so that it can toggle the modal between its visible and invisible states.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我将 `_toggleModal` 传递给 `AddExpensesModal` 组件，以便它可以切换模态的可见和不可见状态。
- en: '[PRE74]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The two `Buttons` are rendered after the `View` that encapsulates `ExpandableCell`.
    The Save button is disabled unless each field contains a value:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 `按钮` 在封装 `ExpandableCell` 的 `View` 之后渲染。只有当每个字段都包含一个值时，保存按钮才可用：
- en: '[PRE75]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'The following code sets the `amount` and `description` values to empty strings,
    clearing them:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将 `amount` 和 `description` 值设置为空字符串，以清除它们：
- en: '[PRE76]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The following code creates an `expense` object and calls `saveItemToBudget`
    from `storageMethods`, passing it in. Then, it clears the `amount` and `description`:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建一个 `expense` 对象并从 `storageMethods` 中调用 `saveItemToBudget`，将其传递进去。然后，它清除
    `amount` 和 `description`。
- en: '[PRE77]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'By this point, your `AddExpensesModal` should be nearly complete:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你的 `AddExpensesModal` 应该几乎完成了：
- en: '![](img/image_03_005.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_03_005.png)'
- en: Good job on your progress! Let's switch gears and begin to address the rendering
    of our month's expenses. We will revisit this component in the next chapter so
    that we can add the functionality of categorizing expenses by icons.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 你做得很好！让我们转换一下思路，开始处理我们月份支出的渲染。我们将在下一章中重新访问这个组件，以便我们可以添加通过图标对支出进行分类的功能。
- en: Displaying the current month's expenses
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示当前月份的支出
- en: The next feature we wrote about earlier in this chapter was that if the expense
    is saved, it should then be rendered in a list on the main screen that contains
    the button to add further expenses.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中我们之前提到的下一个特性是，如果支出被保存，它应该随后在主屏幕上的列表中渲染，该列表包含添加更多支出的按钮。
- en: In this section, we will create that list. We should create a component called
    `CurrentMonthExpenses` and make modifications to the existing files to support
    it.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建这个列表。我们应该创建一个名为 `CurrentMonthExpenses` 的组件，并对现有文件进行修改以支持它。
- en: You should add a new function to `storageMethods` that accepts a month and year,
    returning the budget, list of expenses, and the amount spent for that month and
    year.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在 `storageMethods` 中添加一个新函数，该函数接受月份和年份，返回该月份和年份的预算、支出列表和支出金额。
- en: 'The `CurrentMonthExpenses` component should do the following things:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`CurrentMonthExpenses` 组件应该执行以下操作：'
- en: Render a header that shows the current month's name and budget.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染一个显示当前月份名称和预算的标题。
- en: Display a `ListView` of the month's expenses, retrieved from `AsyncStorage`,
    with some styling and formatting. At the very least, it should include the description
    of the expense as well as the dollar amount.
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示从 `AsyncStorage` 中检索的月份支出 `ListView`，并添加一些样式和格式。至少，它应该包括支出的描述以及金额。
- en: The `ListView` being rendered should be its own component so that we can reuse
    it in the next chapter for the prior months.
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正在渲染的 `ListView` 应该是其自己的组件，这样我们就可以在下一章中重用它来显示前几个月的数据。
- en: The rows being rendered in the `ListView` should be written as its component
    as well.
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `ListView` 中渲染的行应该也作为其组件来编写。
- en: 'Then, your `App.js` file should do the following things:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你的 `App.js` 文件应该执行以下操作：
- en: Render `CurrentMonthExpenses` right before the `AddExpenses` component.
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `AddExpenses` 组件之前渲染 `CurrentMonthExpenses`。
- en: Load this list when the component is mounted.
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当组件挂载时加载此列表。
- en: Update `ListView` in `CurrentMonthExpenses` when a new expense has been added
    by `AddExpenses`.
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 `AddExpenses` 添加新的支出时，更新 `CurrentMonthExpenses` 中的 `ListView`。
- en: 'As a result, you may need to modify `AddExpenses` to do as follows:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可能需要修改 `AddExpenses` 以执行以下操作：
- en: Accept a callback as a prop that will propagate up to `App.js` when the modal
    is toggled.
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受一个回调作为属性，当模态框被切换时，该回调将传播到 `App.js`。
- en: When you have finished the preceding procedure, come back and check out the
    code I wrote.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成前面的程序后，回来查看我写的代码。
- en: CurrentMonthExpenses example
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CurrentMonthExpenses 示例
- en: 'The first thing I did was add and export a function called `getMonthObject`
    into `storageMethods.js`:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 我首先做的事情是将一个名为 `getMonthObject` 的函数添加并导出到 `storageMethods.js` 文件中：
- en: '[PRE78]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The `getMonthObject` method grabs the `expenses` object from `AsyncStorage`,
    checks for the existence of the `year` and `month` object, then returns it if
    possible. Here is how I used that method within the new `currentMonthExpenses`
    component:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`getMonthObject` 方法从 `AsyncStorage` 中获取 `expenses` 对象，检查 `year` 和 `month` 对象的存在性，如果可能的话返回它。以下是如何在新的
    `currentMonthExpenses` 组件中使用该方法的示例：'
- en: '[PRE79]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'I start by setting up a `ListView.DataSource` instance in anticipation of the
    `ListView` being rendered:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 我首先设置一个 `ListView.DataSource` 实例，以期待 `ListView` 被渲染：
- en: '[PRE80]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: The `render` method of `CurrentMonthExpenses` creates a header for our `month`
    and `budget`, then creates a `ListView`. This `ListView` is also using the `renderSeparator`
    prop, which renders a horizontal line to separate the items on the list.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`CurrentMonthExpenses` 的 `render` 方法为我们的 `month` 和 `budget` 创建一个标题，然后创建一个 `ListView`。这个
    `ListView` 也使用了 `renderSeparator` 属性，它渲染一条水平线来分隔列表中的项目。'
- en: '[PRE81]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Data pertaining to the `expenses` array and `budget` are obtained as props
    passed down to this component from its parent, `App.js`:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `expenses` 数组和 `budget` 相关的数据作为属性从其父组件 `App.js` 传递到该组件：
- en: '[PRE82]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'The `_renderRowData` function renders a single expense row using the `ExpenseRow`
    component, which we will look at in the following section. Then, `_renderRowSeparator`
    returns a simple view that contains a style for the separator. Check this out
    here:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`_renderRowData` 函数使用 `ExpenseRow` 组件渲染单个支出行，我们将在下一节中查看该组件。然后，`_renderRowSeparator`
    返回一个包含分隔线样式的简单视图。请在此处查看：'
- en: '[PRE83]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'This is the styling for `CurrentMonthExpenses`:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`CurrentMonthExpenses`的样式：
- en: '[PRE84]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Styling is standard for our component, though `rowSeparator` is a new one. The
    `height` for this component is set to the `hairlineWidth` property of the `StyleSheet`.
    This is how we render the thin line that separates each individual row in a `ListView`.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我们组件的样式是标准的，尽管`rowSeparator`是一个新的属性。这个组件的高度被设置为`StyleSheet`的`hairlineWidth`属性。这就是我们在`ListView`中渲染分隔每一行个体的细线的做法。
- en: '[PRE85]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: This syntax might look new to you, and it’s worth taking a moment to cover it.
    What you are seeing here is a **stateless functional component**. It is a function
    that takes in any number of props passed into it, and returns a component that
    can be used in React applications.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 这种语法可能对你来说看起来很新，花点时间来了解它是有价值的。你在这里看到的是一个**无状态函数组件**。这是一个接受任何数量的传入props的函数，并返回一个可以在React应用中使用组件的函数。
- en: The reason `ExpenseRow` is being written as a stateless functional component
    is because we don’t intend on adding any heavy logic to it or using any React
    life cycle events.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExpenseRow`被编写为无状态函数组件的原因是我们不打算向其中添加任何复杂的逻辑或使用任何React生命周期事件。'
- en: 'There are two big changes to the `render` method of `App.js`: First, we are
    rendering `CurrentMonthExpenses` prior to `AddExpenses` and, second, we are passing
    a callback to `AddExpenses`, titled `updateCurrentMonthExpenses`, pointing to
    the similarly named `_updateCurrentMonthExpenses` method in this component. We
    will look at that one shortly:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`App.js`的`render`方法有两个重大变化：首先，我们在`AddExpenses`之前渲染`CurrentMonthExpenses`，其次，我们向`AddExpenses`传递一个回调，标题为`updateCurrentMonthExpenses`，指向这个组件中同名的`_updateCurrentMonthExpenses`方法。我们很快就会看到它：'
- en: '[PRE86]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'The main change to `_updateBudget` is that we are firing `_updateCurrentMonthExpenses` so
    that when the app is opened by the user, we can populate the list of expenses:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`_updateBudget`的主要变化是我们正在触发`_updateCurrentMonthExpenses`，这样当用户打开应用时，我们可以填充支出列表：'
- en: '[PRE87]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: The following is the function that does the bulk of the legwork. As an asynchronous
    function, it starts using the `getMonthObject` function from `storageMethods`
    that we built earlier in this section and then checks to see whether it exists.
    If it does, then it will set the `budget`, `expenses` array, and `amount` spent
    to state. This in turn triggers a re-render, passing any changed values down to
    the `CurrentMonthExpenses` component.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是执行大部分工作的函数。作为一个异步函数，它开始使用我们在本节早期构建的`storageMethods`中的`getMonthObject`函数，然后检查它是否存在。如果存在，它将设置`budget`、`expenses`数组以及已花费的`amount`到状态中。这反过来又触发了重新渲染，将任何更改的值传递到`CurrentMonthExpenses`组件。
- en: '[PRE88]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'In the `AddExpense` component, the `_toggleModal` method now fires the `updateCurrentMonthExpenses`
    callback so that when the modal is toggled, the most up-to-date list of expenses
    is passed to the `CurrentMonthExpenses` component:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在`AddExpense`组件中，`_toggleModal`方法现在触发`updateCurrentMonthExpenses`回调，这样当模态框切换时，最新的支出列表会被传递给`CurrentMonthExpenses`组件：
- en: '[PRE89]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Here is how the `CurrentExpenses` modal should now look:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`CurrentExpenses`模态框现在的样子：
- en: '![](img/image_03_006.png)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_03_006.png)'
- en: Great job on your progress so far! This is just the beginning of how we will
    build this app, and we will do even more in the next chapter.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 你到目前为止的进步做得很好！这只是我们构建这个应用的开始，我们将在下一章做更多的事情。
- en: Summary
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started building our budgeting app. We installed a popular
    vector icon library, discovered how to link that library to our project in Xcode,
    and then wrote a basic version of our app.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们开始构建我们的预算应用。我们安装了一个流行的矢量图标库，发现了如何在Xcode中链接这个库到我们的项目，然后编写了我们应用的基本版本。
- en: This included a basic helper library that managed date methods and another to
    manage storage.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括了一个基本的辅助库，用于管理日期方法，另一个用于管理存储。
- en: In the app, we created a prompt for the user to enter their budget for the month
    and ensured that it collected this data before letting them proceed to add in
    expenses. Then, we used a modal to show and hide the fields for a user to add
    a new expense into the app and updated the `ListView` component to reflect the
    newly added expense.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用中，我们创建了一个提示让用户输入他们这个月的预算，并确保在让他们添加支出之前收集了这些数据。然后，我们使用模态框来显示和隐藏用户添加新支出到应用的字段，并更新了`ListView`组件以反映新添加的支出。
- en: The next chapter will get more advanced. We will finally put that vector icon
    library to good use by letting the user categorize their expenses by icon, and
    then let them look at the past months' data by creating a second section of our
    app, which is controlled by a tab bar. Additionally, we will create a progress
    view to track the total amount already spent by the user for the month, so that
    they can track their spending better.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将更加深入。我们将最终充分利用那个矢量图标库，让用户通过图标对他们的支出进行分类，然后通过创建我们应用的第二个部分来查看过去几个月的数据，这个部分由标签栏控制。此外，我们还将创建一个进度视图来跟踪用户在本月已经花费的总金额，以便他们能更好地跟踪自己的支出。
