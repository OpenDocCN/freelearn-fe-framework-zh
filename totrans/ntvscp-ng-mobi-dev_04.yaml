- en: A prettier view with CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the many key benefits NativeScript brings to native app development is
    the ability to style native view components with standard CSS. You will find great
    support for many common and advanced properties; however, some don't have a direct
    correlation, whereas others are completely unique to native view layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how to turn our first view into something pretty amazing
    with a few CSS classes. You will also learn how to utilize NativeScript's core
    theme to provide a consistent styling framework to build on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using CSS to style views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding some of the differences between typical web styling and native
    styling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlocking NativeScript powers with platform-specific files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to use the nativescript-theme-core styling framework plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusting the status bar background color and text color on iOS and Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's time to get classy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by taking a look at our app''s main `app.css` file inside the
    `App` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Out of the box, the `--ng` template hints at two options you could choose from
    to build out your CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: Write your own custom classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilize the nativescript-theme-core styling framework plugin as your base
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s explore the first option for a moment. Add the following after the `.btn`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s a number of interesting things you may pick up on right away from
    this simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: Padding does not use the `px` suffix you may know well with web styling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't worry, using the `px` suffix will not hurt you.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting with NativeScript 3.0, release units are supported, so you can use
    dp (device independent pixels) or `px` (device pixels).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If no unit is specified, dp will be used. For width/height and margins, you
    can also use percents in CSS as a unit type.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Various common properties (`padding`, `font size`, `font weight`, `color`,
    `background color`, and more) are supported. Also, shorthand margin/padding works
    as well, that is, padding: 15 5.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use standard hex color names, such as yellow, or shorthand codes, such
    as #444.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS scoping works as you would expect, that is, `.row .title { ...`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Element/Tag/Component names can be styled globally.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even though you can style by tag/component name, it is not advisable to do so.
    We will show you a few interesting considerations for native devices you will
    want to be aware of.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s open `app/modules/player/components/track-list/track-list.component.html`
    and add the `row` and `title` classes to our template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s quickly preview what happens with `tns run ios --emulator` and you should
    see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you take a look in Android with `tns run android --emulator`, you should
    see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see, on both platforms, these styles applied consistently, while, still
    maintaining each platform's unique characteristics. For example, iOS maintains
    the flat design aesthetic across the buttons, and the switches provide that familiar
    iOS feel. In contrast, on Android the buttons preserve their subtle default shadows
    and all caps text, as well as retaining the familiar Android switches.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are some subtle (potentially undesirable) differences that are
    important to understand and remedy. From this example, we may note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Android's buttons have wider left/right margins than iOS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Row titles are not aligned consistently. On iOS, the Label is vertically centered
    by default; however, on Android it's aligned to the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you tap on the Record button to view the login dialog, you will also notice
    something quite undesirable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Item #3 may be the most surprising and unexpected. It exemplifies one of the
    main reasons it is not advisable to style Element/Tag/Component names globally.
    Since the native dialogs use `Buttons` by default, some of the global `Button`
    styles we added are bleeding into the dialog (notably `color: white`). To fix
    this, we can either ensure we properly scope all the component names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Or better yet, just use a class name on your Buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To fix item #2 (row title alignment), we can introduce a special power of NativeScript:
    the ability to build platform-specific files depend on which platform you are
    running it on. Let''s create a new file, `app/common.css`, and refactor all the
    contents of `app/app.css` into this new file. Then, let''s create two other new
    files, `app/app.ios.css` and `app/app.android.css` (and then delete `app.css`,
    since it will no longer be needed), both with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will ensure that our common shared styles are imported into both iOS and
    Android CSS. Now, we have a way to apply platform-specific styling fixes!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s fix that vertical alignment issue by modifying `app/app.android.css`
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This adds the additional styling tweak for Android only to give us this now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Excellent, much better.
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix #1, we would need to apply more platform-specific tweaking if we want
    our buttons on both platforms to have the same margins.'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you may be wondering how much tweaking you may need to do yourself
    to address some of these platform-specific concerns. You should be happy to know
    there's not an exhaustive list, but the incredibly high spirited NativeScript
    community worked together to create something even better, a consistent bootstrap-like
    core theme that provides a lot of these subtle tweaks, such as Label vertical
    alignment and many other subtle adjustments.
  prefs: []
  type: TYPE_NORMAL
- en: Meet the NativeScript core theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All new NativeScript projects come with a core theme installed and are ready
    to use out of the box. As mentioned previously, you are provided at two options you
    could use to style your app. The preceding section outlined a few of the things
    you may run into while styling your App from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at Option #2: using the `nativescript-theme-core` plugin.
    Out of the box, this theme is built to scale and build on top of. It provides
    a wide assortment of utility classes for spacing, coloring, layout, colored skins,
    and much more. Because of the solid foundation and amazing flexibility it provides,
    we will build our app''s styles on top of this theme.'
  prefs: []
  type: TYPE_NORMAL
- en: It's worth mentioning the `nativescript-theme-` prefix was intentional as a
    standard, as it helps provide a common prefix to search for on `npm` to find all
    the NativeScript themes. It's encouraged to use the same prefix if you design
    and publish your own custom NativeScript theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s remove our custom styling, leaving only the core theme imported. However,
    instead of using the default light skin, we are going to use the dark skin. This
    is what our `app/common.css` file should look like now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, we want to start classing our components with some of the classes that
    the core theme provides. You can learn a full list of classes here: [https://docs.nativescript.org/ui/theme](https://docs.nativescript.org/ui/theme).
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting with `app/app.component.html`, let''s add the following classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `action-bar` class ensures our skin gets applied appropriately to the header
    of the App, as well as providing subtle consistency adjustments for `ActionBar`
    on both iOS and Android.
  prefs: []
  type: TYPE_NORMAL
- en: The `page` class ensures our skin applies to the entire page. It's important
    this class is applied to the root layout container on any given component view.
  prefs: []
  type: TYPE_NORMAL
- en: 'With these two adjustments, we should now see this on iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And this is on Android:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll notice another iOS/Android difference with `ListView`. iOS has a white
    background by default, whereas Android appears to have a transparent background,
    allowing the skin page color to show through. Let''s continue classing our components
    with more classes from the core theme, which help address these subtleties. Open
    `app/modules/player/components/track-list/track-list.component.html` and add the
    following classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The parent `list-group` class helps scope everything properly down to `list-group-item`.
    Then, we add `c-ruby` to splash some reddish color to our Record buttons. There
    are several skinned colors that provide surnames: `c-sky`, `c-aqua`, `c-charcoal`,
    `c-purple`, and much more. See all of them here: [https://docs.nativescript.org/ui/theme#color-schemes](https://docs.nativescript.org/ui/theme#color-schemes).
  prefs: []
  type: TYPE_NORMAL
- en: We then add `h2` to the Label to bring its font size up a bit. Lastly, the `switch`
    class helps standardize the track solo switch.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have this on iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And we have this on Android:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s move onward to our last component (for now), `player-controls`. Open
    `app/modules/player/components/player-controls/player-controls.component.html`
    and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: First, we add the `p-x-10` class to add the `10` padding to only the left/right
    container (`GridLayout`). Then, we add `btn btn-primary w-100` to our play/pause
    button. The `w-100` class sets the button to have a fixed width of `100`. Then,
    we add the `slider` class to our Slider.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, things are starting to shape up on iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It will look as follows on Android:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Wow, alright now, things are coming together. We will continue to polish things
    more as we go, but this exercise has demonstrated how quickly you can pull your
    styling around with the core theme by using a lot of the classes that come out
    of the box.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the status bar background color and text color on iOS and Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have noticed earlier that, on iOS, the status bar text is black and
    doesn't look very good with our dark skin. Additionally, we may want to alter
    Android's status bar tint color. NativeScript provides direct access to native
    APIs, so we can easily change these to whatever we would like. Both platforms
    deal with them differently, so we can conditionally alter the status bar for each.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `app/app.component.ts` and let''s add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This will turn the iOS status bar text white:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The second part of the condition adjusts Android to use dark text in the status
    bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s also adjust the `ActionBar` background color while we''re at it for
    a nice touch. On iOS, the status bar background color takes on the background
    color of `ActionBar`, whereas on Android, the background color of the status bar
    must be adjusted via Android `colors.xml` in `App_Resources`. Starting with iOS,
    let''s open `app/common.css` and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This colors `ActionBar` as follows for iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For Android, we want our status bar background to present a complimentary hue
    to our `ActionBar` background. To do that, we want to open `app/App_Resources/Android/values/colors.xml`
    and make the following adjustment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the final result on Android:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's refreshing and fun to finally put a face on our app; however, we are certainly
    not done styling. We will continue polishing views via CSS and introduce SASS
    soon to refine it even more in the upcoming chapters. However, this chapter has
    introduced you to various considerations you will want to be aware of while styling
    your App via CSS.
  prefs: []
  type: TYPE_NORMAL
- en: You've learned that common CSS properties are supported, and we have also looked
    at differences between how iOS and Android handle certain default characteristics.
    The ability to have platform-specific CSS overrides is a nice benefit and special
    power you will want to take advantage of in your cross-platform NativeScript apps.
    Understanding how to control the appearance of the status bar on both platforms
    is essential to achieving the desired look and feel of your app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a break from styling and dive into routing
    and navigation via lazy loading to set the stage for rounding out the general
    usability flow of our app. Get ready to dive into some of the more interesting
    Angular bits of our app.
  prefs: []
  type: TYPE_NORMAL
