- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bonus Chapter - UX Patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A long time ago, computer software was sold with heavy, printed manuals and
    in many cases, also with specialized training. While some of this still applies
    to corporate applications and specialized hardware, such a concept has almost
    completely disappeared from the consumer market. Imagine that, for each website,
    you had to read a manual and attend three months of training classes before even
    using it. How come, today, a user can be presented with a new application and
    somehow manage to accomplish basic tasks at first sight? No doubt, a great contributor
    to this current situation is the years of study and progress in the areas of human-computer
    interactions, a discipline almost as old as computers themselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a step back from the intricacies of inner-working
    software patterns and architecture and look at some of the well-established patterns
    for designing a **user interface** (**UI**) and **user experience** (**UX**).
    We will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Understand the differences between UI and UX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Become familiar with common UX patterns in web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about the evil side of UX with dark patterns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a broad understanding of what UX patterns
    are, the principles they are based on, what the most common approaches are today,
    and the effects they produce for the user, be they positive or negative. You will
    also learn and develop a common language to interact with UI and UX designers
    and other developers.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is mostly informative; however, small examples are discussed and
    implemented in Vue 3, as they demonstrate the use of a technique not seen this
    far in the book. For the complete source code, please refer to the project folder
    for the chapter in the book’s repository at [https://github.com/PacktPublishing/Vue.js-3-Design-Patterns-and-Best-Practices/tree/main/Chapter11](https://github.com/PacktPublishing/Vue.js-3-Design-Patterns-and-Best-Practices/tree/main/Chapter11).
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://packt.link/5ymkr](https://packt.link/5ymkr)'
  prefs: []
  type: TYPE_NORMAL
- en: UI design versus UX design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is common to hear these two terms associated or used indistinctively, and
    in some cases, both responsibilities are merged into the same role in a team,
    which adds to the confusion. While there is some overlapping, as often happens
    in computer science disciplines, we will focus on the differences for learning
    purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**UI design** is in charge of defining the visual language to represent information
    and capture user input to interact with the application. It covers the design
    of visual styles, typography, interactions, colors, sizes, animations, sounds,
    and so on that make up the interface between humans and computers (software and
    hardware). This applies to visual mediums (web, mobile, etc.) as well as other
    types such as natural language interfaces (think of AI assistants such as Siri,
    Alexa, etc.).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UX design** includes the conditions that affect and guide the UI design but
    encompasses a broader view focused on the user’s perception of the system, company,
    or feature they come to interact with. It involves elements beyond software or
    hardware, with aspects such as support, promotion, post-services, and so on. The
    aim is to create a wide and, hopefully, successful positive experience from the
    user’s perspective. Under this definition, it also collaborates with other disciplines,
    such as marketing, customer support, distribution, product management, brand recognition,
    and so on. It has the primary objective to alter or create the user’s perception
    that the product, service, or system is easy to use, efficient, and above all,
    useful for their purposes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the principles and objectives of each discipline will help us
    develop better software and have a common ground for understanding when collaborating
    with those in these assignments. Without UI and UX, even the best-produced software
    may fall into oblivion. Software history is full of examples of companies that
    went the way of the dodo bird, even with superior products to their competitors,
    for neglecting the user experience or having a bad visual design. Sometimes, the
    cover of the book is as important as the content...
  prefs: []
  type: TYPE_NORMAL
- en: The principles of UI design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At its core, UI design has the objective of creating an interface that the user
    finds easy to use, efficient, informative, and enjoyable. Marketing concepts such
    as user retention and satisfaction rely heavily on product design. For our purposes,
    we will limit the introduction of UIs to on-display application interfaces (presented
    through a visual medium, such as a screen or touch device).
  prefs: []
  type: TYPE_NORMAL
- en: There is ample documentation studying UI design in detail, with engineering
    precision and well-defined industry standards. Each aspect has its own set of
    rules that a good UI designer needs to keep in mind. A web designer will see things
    differently from an industrial designer, for example. In our case, most of the
    patterns for UI design have been included since the beginning in the HTML standard,
    so most, if not all, of what we will see as patterns are already familiar to you
    and the end user. How they work, or the principles they follow, however, is not
    something that is commonly discussed or self-evident. For example, why is the
    “X” to close a window in the top-right corner? What does each different menu icon
    mean? Why does the **Start** button appear on the top or bottom-left corner of
    the screen? Why are some features hard to find, while others are accessible at
    first sight? All these questions have a solution rooted in UI design and UX patterns.
    With that in mind, let’s review some of the UI principles, and then move on to
    the UX patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Sufficient contrast or distinction between elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This principle states that the elements of a page should be clearly distinguishable
    from each other and representative of their function. It reflects the need to
    organize the visual elements in a hierarchy using size, colors, typography, margins,
    and white space in such a way that each function is clearly represented and distinct
    from others. The main objective is to direct the user’s attention to the focal
    point of the interface. Let’s see the Packt home page ([https://www.packtpub.com/](https://www.packtpub.com/))
    as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Packt’s home page and color contrast](img/Figure_11.01_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – Packt’s home page and color contrast
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, most of the content uses a limited number of colors (a “palette”),
    and the two buttons have high contrast, which draws the attention of the user:
    the **TRY FOR FREE** and **START LEARNING NOW** buttons. Clearly, the designer
    has set the focus point for these two actions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Related to this principle, there is a design “rule” applied in this screenshot
    that is handy to keep in mind: the *60-30-10 color rule*. This means that 60%
    of the section must have a base color (here, it is dark brown), 30% is a primary
    color (used for regular text, menus, and the image, which, here, is white), and
    10% is reserved for the secondary color or high contrast (used for the focal point,
    or the “call to action” buttons in orange). Let’s continue analyzing this page
    to see the other principles of UI design.'
  prefs: []
  type: TYPE_NORMAL
- en: Stimulating repetition and being consistent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This principle is based on the concept that people learn through repetition.
    It indicates that the same task, even done through different interfaces, should
    emulate more or less the same repetitive behavior from the user. For example,
    if you ask a user to open a word processor, and you ask them to open a file, where
    will they try to click? Most “seasoned” users will take their mouse to the upper-left
    part of the window and look for either an icon that represents “**Open**,” or
    the **File** menu. Why is this? It is because this placement has become standard,
    and we have learned through repetition where to find it. If you placed the **File**
    menu at the bottom right of the screen, most, if not all, of your users would
    have trouble finding it without direction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another example of repetition and consistency appears when displaying visual
    elements – more importantly, when they are part of a list or common set. Let’s
    follow with an example from the Packt Publishing website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Cards with books](img/Figure_11.02_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – Cards with books
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding example, the designer used repetition to display the books
    in prime time, by using vertical “cards” for each item. Each card repeats a similar
    layout, colors, and format. Once you understand what one displays, the same applies
    to all the others: this is a repetition of visual design and is important, so
    the user doesn’t have to “re-learn” the interface for each book.'
  prefs: []
  type: TYPE_NORMAL
- en: In short, it is the repetition of placements, actions, and visual styles. Let’s
    move to the next one.
  prefs: []
  type: TYPE_NORMAL
- en: Be mindful of alignment and direction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The alignment of elements (graphics, fonts, etc.) creates a sense of order and
    organization, showing that such elements belong to the same group or have the
    same weight or importance. We are mostly familiar with alignment (and spacing)
    when working with fonts, but the same concept applies to graphical elements such
    as icons, sections, images, and so on. From the previous figure, notice how the
    tabs are aligned, as well as the cards and the content therein. Just by alignment
    and style alone, we can distinguish what belongs to which natural group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another example of alignment is clearly seen when only using typography for
    menus and features. For example, in the footer of this page, even without the
    use of icons or visual boundaries, it is easy to see what option belongs to each
    natural group just by using space and alignment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Packt’s website footer, using alignment to display natural
    groups](img/Figure_11.03_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – Packt’s website footer, using alignment to display natural groups
  prefs: []
  type: TYPE_NORMAL
- en: 'This example, though simple, already shows the use of contrast (bold versus
    normal font-weight), consistency through repetition, alignment, and also the next
    principle we will see here: proximity.'
  prefs: []
  type: TYPE_NORMAL
- en: Use proximity and distance to show natural groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This principle is simple to follow: place the elements that are naturally related
    close to each other. This makes it easier for the user to find and understand.
    Typography and iconography can also be used to show proximity and similar functionality.
    The famous “ribbon bar” introduced by Microsoft in its Office applications uses
    this concept heavily and soon became a standard. For example, here is a segment
    of the **Home** tab that deals with alignment, lists, spacing, and indentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Paragraph icons](img/Figure_11.04_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – Paragraph icons
  prefs: []
  type: TYPE_NORMAL
- en: Notice how the icons that modify the type of paragraph, spacing, and alignment
    are close to each other, without being “mixed.”
  prefs: []
  type: TYPE_NORMAL
- en: These are not the only principles of UI design but are the most basic ones that
    we should keep in mind when developing our components. If you work with a team
    that includes a UI designer, you may receive templates or mockups, even storyboards,
    to implement into Vue components, as we saw in [*Chapter 4*](B18602_04.xhtml#_idTextAnchor102),
    *User Interface Composition with Components*. If instead, you are on a *“one-man
    band team”* and the design of the interfaces falls in your lap, these principles
    will help you greatly to create a professional and useful UI. But there is more...
  prefs: []
  type: TYPE_NORMAL
- en: Laws for UI design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like we have principles, several studies have issued or identified “laws”
    of design, which are measurable functions to predict certain software attributes,
    such as usability and friendliness. In particular, the following stand out.
  prefs: []
  type: TYPE_NORMAL
- en: Fitt’s law
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This law specifies that the time taken for a user to acquire a target is a
    function of the distance from the pointer and the size of the target. The important
    concepts here are the distance and size of the target: the longer the distance
    between targets, the larger these should be.'
  prefs: []
  type: TYPE_NORMAL
- en: The application of this law is what places the window close button (**X**) in
    one of the corners of the screen (when the window is maximized), the **Start**
    button at the lower left of the screen, *Show desktop* at the bottom right of
    the screen, and so on. If a user moves the mouse in any of these directions, it
    will sooner or later arrive at these targets, and continuing in the same direction
    will not affect the result. In the language of UI design, these buttons are “infinite”
    as once the cursor has reached a corner by the edge of the screen, continuing
    scrolling in the same direction with the mouse will still hit the target.
  prefs: []
  type: TYPE_NORMAL
- en: Another implication of this law is that functions that are similar should also
    be placed in proximity to each other (such as the examples in *Figure 11**.4*).
    You can find more information about this law on Wikipedia, at [https://en.wikipedia.org/wiki/Fitts’s_law](https://en.wikipedia.org/wiki/Fitts’s_law).
  prefs: []
  type: TYPE_NORMAL
- en: Hick’s law
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This law says that the time it takes a user to make a choice is a logarithmic
    function based on the number of available options and their complexity. In simpler
    terms, too many options are confusing and will make the user take more time to
    decide. Some implications of this law are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Break complex tasks into smaller groups, manageable by the user to speed up
    their decision time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid creating interfaces overloaded with options, as they will overwhelm the
    user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a function is time-sensitive, minimize the options to the bare minimum for
    the situation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In everyday software, we can see the application of this law in multiple places
    – for example, in “installers” for a particular software, where successive windows
    with options are presented to the user during or before starting the installation
    in a sequential manner, as opposed to a form to fill in. More information about
    this law can be found on Wikipedia: [https://en.wikipedia.org/wiki/Hick%27s_law](https://en.wikipedia.org/wiki/Hick%27s_law).'
  prefs: []
  type: TYPE_NORMAL
- en: Ben Schneiderman’s eight rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In 1986, Professor Ben Schneiderman published his book titled *Designing the
    User Interface: Strategies for Effective Human-Computer Interaction*, where he
    stipulated eight rules for interface design. These rules are as relevant today
    as on the day they were created, so they are worth mentioning here:'
  prefs: []
  type: TYPE_NORMAL
- en: Strive for consistency (in actions, steps, placements, etc.).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the use of shortcuts for common tasks (be it using a keyboard or icons).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Offer informative feedback (especially when an error occurs).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Design dialogs with an end.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Offer simple error handling, so the user can take action quickly and avoid serious
    errors by the user. The classical implementation of rules *#4* and *#5* are “confirmation
    dialogs” before performing permanent actions, such as deleting content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Permit easy reversal of actions (thanks to this, we have *Ctrl* + *Z*!).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Support the sense of control in the user. Nothing is worse for a user than to
    feel that the machine is “doing its own thing, out of control.” If you ever sent
    an 800-page file to print by mistake, and it took you a dozen pages before you
    could actually cancel the operation... this is what this is about.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reduce short-term memory. The user can only keep in their short-term memory
    a handful of items and tasks at a time, and too many elements on a screen (menu,
    and so on) create rejection. This principle also relates to Hick’s law.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For practical applications and an introduction to the topic, these principles,
    rules, and laws should give us a sure footing.
  prefs: []
  type: TYPE_NORMAL
- en: More information about these rules and Ben Schneiderman can be found on Wikipedia
    ([https://en.wikipedia.org/wiki/Ben_Shneiderman](https://en.wikipedia.org/wiki/Ben_Shneiderman)).
  prefs: []
  type: TYPE_NORMAL
- en: UX design principles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'UX design also has its own objectives and principles that apply to patterns.
    Above all, the main objective of UX is to provide a good perception to the user,
    to create a bond with the brand or product, by carefully tailoring a flow of interactions.
    In this case, the solutions must be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Useful and usable:* First and foremost, the application must do what it intended
    to do, do it well, and be easy for the user to use'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Learnable and memorable*: The user must be able to learn and understand what
    information is presented and internalize it for future use as well'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Credible and give control to the user*: When the user interacts with the application,
    it must feel that it is doing what the user intends and that the result is “safe”
    for the user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This last principle is very important. If the user feels that the application
    somewhere during the interaction has “lost control” of what is going on, it is
    a recipe for disaster. Sadly, this occurs all too often with the dark patterns
    that we will see later in this chapter, but now, let’s see some good patterns
    that result in a good experience for the user.
  prefs: []
  type: TYPE_NORMAL
- en: Common patterns for data manipulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These patterns are often matched by pure HTML elements, while others have emerged
    in recent years through the clever use of styling of such elements. These have
    become standard in the industry and are well understood by users at first sight.
    What follows here is a non-exclusive list with a short description of when to
    use each one.
  prefs: []
  type: TYPE_NORMAL
- en: HTML input elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The standard input fields provided by HTML are a clear pattern for receiving
    input from the user. Nowadays, the input element has many variants due to the
    `type` attribute, allowing for input other than plain text. Used in forms and
    validation libraries, these elements are as good as they come, ready to read and
    format from text and numbers to URL, date, time, images, and colors. The full
    list of available types supported by today’s browsers can be found here: [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input#input_types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input#input_types).'
  prefs: []
  type: TYPE_NORMAL
- en: For the most part, these elements are used with basic functionality and some
    heavy CSS styling. Use `inputs` (and `textareas`) any time that you need the user
    to enter text information. Browsers today offer native-looking widgets for the
    more complex types, such as date and color pickers.
  prefs: []
  type: TYPE_NORMAL
- en: Checkboxes, radios, and toggle switches
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Checkboxes and radio buttons are provided natively by HTML and are presented
    to the user following the format of the local OS or environment. **Checkboxes**
    represent multiple options to the user, which they can select freely from the
    group. In contrast, **radio** buttons only allow the selection of one option from
    the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Checkboxes on the left, and radio buttons on the right](img/Figure_11.05_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – Checkboxes on the left, and radio buttons on the right
  prefs: []
  type: TYPE_NORMAL
- en: 'With the release of the original iPhone, a new variant of the checkbox became
    very popular: the **toggle switch**. It is not provided natively by the HTML standard,
    but it is easily styled through CSS to “disguise” a checkbox. A toggle switch
    has two states, enabled and disabled, and it is often used to activate or deactivate
    a function or feature. This is an important distinction as the checkbox should
    focus on options or alternatives. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.6 – Toggle switches in each state](img/Figure_11.06_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – Toggle switches in each state
  prefs: []
  type: TYPE_NORMAL
- en: The toggle switch is in an “off” state (or false) when the toggle is to the
    left, and “on” when to the right. Often, switching also affects the color, showing
    it in a mute scale of gray when off or in vibrant colors when activated. Internally,
    these two states are often represented by `true` (on) and `false` (off), and they
    should be used to activate or deactivate settings, features, and so on. You can
    find the `Toggle` component that implements the styling and the `v-model` code
    in the repository for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Chips, pills, or tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This pattern encompasses short text (or “copy” in UI lingo) inside a round box.
    The copy can be accompanied by an icon to emphasize the state when selected, or
    an action such as an “`span` element).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.7 – A list of items with pills](img/Figure_11.07_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 – A list of items with pills
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a short list of UI patterns to capture user input, but it does cover
    the most common types: the HTML inputs and styling variations.'
  prefs: []
  type: TYPE_NORMAL
- en: Common patterns for data visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These patterns display information back to the user, either in response to a
    user action or an application event. What follows is a non-exclusive list of patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Tooltips
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This pattern shows the user some floating small text with information regarding
    the target element, usually when the user activates the element using some action
    (a hover, click, selection, etc.). The information is displayed above, below,
    or to the side of the element in the form of a “speech bubble” (like in comic
    books). Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.8 – A tooltip displaying the name/action of the icon and a shortcut](img/Figure_11.08_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – A tooltip displaying the name/action of the icon and a shortcut
  prefs: []
  type: TYPE_NORMAL
- en: 'This pattern is mostly used to display help regarding the target object, but
    it can be used also to display contextual menus. For example, selecting a word
    from this paragraph in a text editor online will display a popup with a menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.9 – A tooltip pattern used to display a contextual menu](img/Figure_11.09_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.9 – A tooltip pattern used to display a contextual menu
  prefs: []
  type: TYPE_NORMAL
- en: There may be some discussion regarding whether this last use is a tooltip or
    a contextual menu, but the fact that it opens on selection would indicate the
    first. Traditionally, contextual menus are opened with a secondary action, such
    as the right mouse button (in Windows and Linux). In either case, the concept
    to remember for this pattern is to show information to the user on selection or
    pre-activation to help them decide what to do next.
  prefs: []
  type: TYPE_NORMAL
- en: Notification dots, bubbles, marks, or badges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This pattern consists of displaying a small icon on top of a larger icon to
    indicate that an event has happened and requires the attention of the user, yet
    it is not urgent. This small icon can be a dot, a bubble, and so on. If the notification
    has a number in it, it is also called a **badge.** Some examples of this pattern
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The small circle with a number for new emails received in the email icon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The double checkmark in a chat application indicating that the other party has
    received and read the message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A small mark in a taskbar showing that an application has been opened
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The key concept is to use some sort of small variance to the icon to indicate
    the need for future attention, but it is not urgent and won’t affect the current
    activity for the user.
  prefs: []
  type: TYPE_NORMAL
- en: Toast notifications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This pattern is used in multiple applications and OSes. It consists of displaying,
    for a short amount of time, an overlayed floating window with quick information
    for the user. Often, it includes a short text fragment paired with a sensible
    icon. Depending on the OS, this can be displayed natively at the top center, right
    of the screen, or at the bottom right above the system tray. Web applications
    can either implement their own toast notification within the browser window or
    require permission from the user and display a “native toast notification” using
    the local OS. Here is an example of a toast notification:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.10 – A native toast notification on the desktop](img/Figure_11.10_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.10 – A native toast notification on the desktop
  prefs: []
  type: TYPE_NORMAL
- en: These notifications are useful to inform the user of changes in the environment
    that require their attention, to report back the result of an asynchronous operation
    (success, error, etc.), and so on. These calls to attention are ephemeral, so
    they should not be a critical part of an important workflow, except for the conditions
    just mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: Carousel or image sliders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Carousel or image sliders are a pattern for displaying, in the same space, different
    sections with images and content in sequential order. Usually, using a timer,
    these sections are presented to the user a few seconds apart, also offering the
    option to skip to any of them through dotted navigation. While they were very
    popular some years ago, there are counterpoints to the use of these, as “impatient”
    users may never see the entire content of a carousel. In practice, the recommendation
    is to keep the list of sections as short as possible, somewhere between three
    to five elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples of this implementation abound on the internet, as they are implemented
    primarily on the landing page of a site. Practically all shopping and news websites
    make use of this pattern – for example, the Amazon landing page ([www.amazon.de](http://www.amazon.de)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.11 – Amazon’s carousel displays offers from the store](img/Figure_11.11_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.11 – Amazon’s carousel displays offers from the store
  prefs: []
  type: TYPE_NORMAL
- en: 'Image sliders can be as big as a carousel but can also be much smaller and
    used to display thumbnails. Here is again an example from Amazon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.12 – Amazon makes good use of image sliders to display items to
    the user](img/Figure_11.12_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.12 – Amazon makes good use of image sliders to display items to the
    user
  prefs: []
  type: TYPE_NORMAL
- en: While trivial to implement, the use of carousels and image sliders is a good
    way to display information to the user. There is a warning, though, that abusing
    this pattern could lead to an overwhelming and saturated experience, create confusion,
    and even trigger undesirable side effects, such as sensory overwhelming and content
    avoidance.
  prefs: []
  type: TYPE_NORMAL
- en: Progress bars and spinners
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A progress bar is any element that gives the user an idea of how far down the
    workflow the current state of a process is. While the name seems to indicate a
    “bar,” in practice, any element that displays progress through a limited number
    of actions falls into this category. The basic objective is to notify the user
    of the progress of tasks that take a long time and show that the system is “busy”
    working on them, thus providing visibility and a sense of control to the user.
    Progress bars are very important to prevent involuntary negative actions from
    the user. If a long-running task is being executed in the background (let’s say
    in a web worker) without any feedback on the progress, the user may believe that
    the task has not started, has failed, or the computer has “hung up.” It is a negative
    user experience to leave the user wondering what is going on. Here are some examples
    of progress bar elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.13 – Example of progress bars](img/Figure_11.13_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.13 – Example of progress bars
  prefs: []
  type: TYPE_NORMAL
- en: In addition to styling, progress bars can also be used in an “undetermined state,”
    meaning that it is not possible for the application to calculate how much time
    or how many steps a process may take; however, it still wants to inform the user
    that the system is busy and shouldn’t be interrupted. The HTML standard does provide
    an element specifically for progress bars that can manage these situations (the
    progress element; see [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress)),
    but there are other patterns to use in these cases, such as **spinners**.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the name “spinner” indicates, this is an icon that “spins” on itself, giving
    the notion that the application is busy and working. Here is an example of a spinner
    with a text indicator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.14 – Spinner circle, indicating the application is busy](img/Figure_11.14_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.14 – Spinner circle, indicating the application is busy
  prefs: []
  type: TYPE_NORMAL
- en: 'This approach has been used in OSes and applications for some time now, so
    users understand its meaning. There is one caveat when using this pattern and
    that is that after a long period of time, it can create anxiety, so it is recommended
    to accompany it with some sort of indicator of action. Implementing a `spinner`
    component in Vue is rather trivial, and mostly CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: ./components/Spinner.vue
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this simple component, we only need to define a prop for the text, and a
    class for our spinning elements. The circle is made here by setting the border
    radius and defining a color for one border, so the spinning action is noticeable.
  prefs: []
  type: TYPE_NORMAL
- en: Pagination and infinite scroller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we need to display a long list of items to the user, there are two patterns
    that come to mind as a well-understood solution: pagination and infinite scrollers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In **pagination**, the dataset is divided into smaller parts of fixed size
    in sequential order. Each subset is called a **page** and is referenced by an
    ordinal (usually a number). This allows for easy navigation between pages, such
    as random and sequential access by the page number. Also, giving the same order
    function in the data allows a quick and easy way to “come back” to the data in
    different sessions. The element that allows the user to navigate in the paged
    data is usually referred to as a **pager**, and it is common practice to place
    it at the top and bottom of the item list. A typical pager might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.15 – The elements of a typical pager](img/Figure_11.15_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.15 – The elements of a typical pager
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding figure, you can see the different elements of a typical pager,
    usually used for tables or lists of content. However, this is not the only shape
    that a pager may take. It could, for example, use a drop-down menu for the page
    numbers, display ranges of pages, and so on. The important concept of this pattern
    is the division of the set and the quick navigation to each individual subgroup.
  prefs: []
  type: TYPE_NORMAL
- en: 'An alternative to pagination is to use an **infinite scroller**. In this pattern,
    the exact location of each item in the dataset may or may not be needed, and the
    items are presented to the user as they scroll the web page. When the user reaches
    the end of the list, new items are loaded on the page, chunk by chunk, until the
    user stops scrolling or the entire dataset has been loaded. Here is a graphical
    representation of this pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.16 – The implementation of an infinite scroller](img/Figure_11.16_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.16 – The implementation of an infinite scroller
  prefs: []
  type: TYPE_NORMAL
- en: 'A number of techniques are used to detect user behavior and load or pre-load
    data. One of the easiest implementations is through the use of an **intersection
    observer**, a native element provided by browsers in JavaScript that triggers
    an event when such an observer intersects with other elements and, in this case,
    with the viewport. Since this is a new concept, we will implement a minimal infinite
    scroller that will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.17 – The example infinite scroller limited to a div element](img/Figure_11.17_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.17 – The example infinite scroller limited to a `div` element
  prefs: []
  type: TYPE_NORMAL
- en: 'If you scroll down on the `div` boundary, by any available means (mouse, keyboard,
    etc.), the list will generate new items and will never stop, giving the impression
    that the scrolling is infinite. Here is the source code for that component:'
  prefs: []
  type: TYPE_NORMAL
- en: ./src/components/InfiniteScroller.vue
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The preceding component is minimal, but it does illustrate the technique. We
    will have a list of numbers with an initial limit that will trigger an overflow
    in the container (`#1`). This is important as, on the first load, the user will
    know that there is a scrollbar and more content below (as in *Figure 11**.17*).
    Now, the technique here is to define a reactive variable, `_scroll_watcher`, pointing
    to `null`. This variable will later have the value of an element at the bottom
    of the list, which we mark as a reference (`#5`). We use `null` so Vue does not
    run any optimization at this point. In line `#3`, we create a new `IntersectionObserver`,
    and pass as value the reference to our `triggerEvent` function, where we will
    simply increment the boundary of our list. In our template, we use a `v-for` directive
    to generate the elements for each integer in the list, which should appear before
    our scroll watcher element. The magic happens in line `#4`, once our component
    has been created and mounted into the page. At this moment, Vue has already assigned
    to `_scroll_watcher` the reference for the HTML element, so we can pass it to
    our instance of `IntersectionObserver`. As we are using it with defaults, it will
    run the `triggerEvent` function each time the div in question appears in the viewport,
    which will happen when we reach the end of the list. In that function, we increment
    again the number of items, making Vue inject more elements into the web page and
    pushing the scroll watcher div again out of the viewport. This process repeats
    *ad infinitum*, giving us a simple but effective infinite scroller.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond the implementation of the UX pattern, this technique is the correct approach
    to binding a reactive variable to an element in the DOM, and it saves us from
    writing direct JavaScript DOM manipulation, such as `document.getElementById("#someId")`
    and dealing with issues such as ID collisions. Vue resolves this for us.
  prefs: []
  type: TYPE_NORMAL
- en: Common patterns for interaction and navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These patterns control the interaction or offer the user options to control
    the process and navigation of the application. As usually happens, some of these
    patterns could also fit into other categories.
  prefs: []
  type: TYPE_NORMAL
- en: Placement of menus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The placement of menus is also a pattern that has been standardized in three
    basic layouts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Menu bars** (horizontal) are often placed in a “sticky” position at the top
    of the screen (meaning they will not scroll with the page).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Navigation bars** (horizontal), mostly popular for mobile devices, are an
    iconography menu placed at the bottom of the screen to navigate to different sections
    of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sidebars** cover the full height of the screen, and with variable widths.
    These show menus with icons and/or text. In mobile and desktop applications where
    the screen’s real state is important, there is usually an option to toggle it
    in or out of the viewport. The standard icon to trigger this feature has become
    the “hamburger” icon (see later in this chapter).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Following these standard placements for desktop and mobile will ensure that
    the user knows how to navigate the site easily. Often, some applications such
    as video games break these standards, but unless there is a powerful reason to
    do so, it should be avoided.
  prefs: []
  type: TYPE_NORMAL
- en: Breadcrumbs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Breadcrumbs are a hierarchical list of links that show the current position
    of the web page in the overall website organization. Each link allows the user
    to go back to a level, without having to use the browser’s **Back** button or
    dig deep into the main menu. The current approach is to place breadcrumbs at the
    top of the page, before the main content. Here is an example of a breadcrumb path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The convention is to use the more-than symbol (`>`) to separate each navigation
    page, but there are many artistic licenses taken on this matter. Another representation
    for this navigation is to use a tree structure, such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This “folder-like” structure is not so common for main navigations but is mostly
    used for nested content such as comments and replies in forums.
  prefs: []
  type: TYPE_NORMAL
- en: Modal dialogs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A modal dialog is a small window that opens in front of the application, taking
    full control of the focus. It prevents the user from interacting with the rest
    of the application until the activity presented in the dialog is resolved. Modal
    dialogs should focus on one action only and provide sufficient information for
    the user to take action by giving clear options. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.18 – A confirmation dialog](img/Figure_11.18_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.18 – A confirmation dialog
  prefs: []
  type: TYPE_NORMAL
- en: We have previously implemented a system to display modal dialogs in Vue 3, so
    you can review the code from [*Chapter 5*](B18602_05.xhtml#_idTextAnchor130),
    *Single-Page Applications*, to see an implemented approach.
  prefs: []
  type: TYPE_NORMAL
- en: Menu icons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Other than the plain copy (text) naming convention for menu items, there are
    a number of icons used today to show the user at first glance what kind of interaction
    to expect when presenting a menu. Here are some of the standard icons you can
    find and use today:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.19 – Menu icons](img/Figure_11.19_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.19 – Menu icons
  prefs: []
  type: TYPE_NORMAL
- en: 'And here are their descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hamburger icon** (three horizontal lines): Reserved for *main menus* and
    navigation, this toggles the display of a wide site menu in a sidebar. These types
    of sidebars that show and hide on convenience are called **drawers** and are very
    popular in mobile sites and applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kebab icon** (three vertical dots): Made popular by Google’s Material Design,
    this indicates that there are more *options* for the current element or activity
    and that they will be displayed in a modal dialog.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Meatball icon** (three horizontal dots): This is displayed next to an item
    on a list and indicates that there is a pop-up menu with additional *actions*
    for the element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bento icon** (9 squares in a 3x3 grid): This is used to indicate a pop-up
    menu to navigate between different *applications* inside the same solution or
    environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Döner icon** (three stack lines with different sizes): This indicates options
    to *sort* the entries of a list using a selectable order option (usually in a
    popup). This icon, however, has not become as popular as the others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accordion menus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This pattern’s basic use is to group content under a title and to display it
    only when the user selects it, allowing only one group to be displayed at a time.
    Nowadays, it is used commonly for *Frequently Asked Questions* pages, and in sidebar
    menus. Here is an example from the Packt website ([https://www.packtpub.com/](https://www.packtpub.com/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.20 – Accordion menu used for FAQ](img/Figure_11.20_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.20 – Accordion menu used for FAQ
  prefs: []
  type: TYPE_NORMAL
- en: The accordion menu is a pattern well understood by users, and one rather simple
    to implement. It helps keep the design clean and allows the user to focus only
    on what matters to them.
  prefs: []
  type: TYPE_NORMAL
- en: Mega menus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Thus far, most of the patterns we have seen have the objective of hiding complexity
    from the user to avoid overwhelming them. However, this pattern seems to break
    this rule at first sight. When the complexity of navigation would make the features
    hard to find (for example, more than three levels of depth: group -> subgroup
    -> sub-subgroup), an alternative is to use a **mega menu**. This pattern is commonly
    used in government websites and other complex organizations with heavy unavoidable
    content. The basic concept is to present a large menu containing all (or most)
    of the options to choose from. This doesn’t mean that there will not be a “drilling
    down” after reaching these sections, but it does make access faster. For example,
    let’s see the official website for the city of Hyvinkää, Finland ([www.hyvinkaa.fi](http://www.hyvinkaa.fi)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_11.21_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure11.21: Hyvinkää city home page mega menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, it is a compelling number of options with just one click in
    the top menu. However, notice how well organized they are and visually separated
    from each other. The mega menu pattern breaks the *simplicity* rule but does not
    forget other rules and principles of UI design, making it still pleasing to the
    eye. In other cases, it is also possible to consider the mega menu as a placeholder
    for other patterns, such as a sidebar or accordion menu. The official Packt website
    ([https://www.packtpub.com/](https://www.packtpub.com/)) uses this pattern in
    the main menu **BOOKS &** **VIDEOS** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.22 – Packt mega menu with a sidebar to categorize and filter options](img/Figure_11.22_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.22 – Packt mega menu with a sidebar to categorize and filter options
  prefs: []
  type: TYPE_NORMAL
- en: A mega menu could be a place for innovation as it is easier for the user to
    understand and use. It is not a viable option for every web application but can
    be very powerful when properly used. When there is no other option than to show
    a large number of shortcuts or options, this is a good pattern to keep in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Drop-down menus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Drop-down menus and selection boxes display a list of options to the user when
    they are activated (by a click or touch, for example) through a trigger area (icon,
    text, or button). Here, the concept of hiding the options and showing them upon
    “request” by the user is more important than a specific implementation. The accordion
    and mega menus make use of this concept, for example. The accordion menu could
    be considered a list of drop-down menus and is not that far off. HTML provides
    a native solution for selection lists (the `select` element), but the same concept
    can be applied in many circumstances and, with some creativity, can birth new
    implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Common patterns for content organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The patterns we will see next have to do with the overall organization and layout
    of the website or application.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The term *responsive* relates to the way the layout of an application adapts
    to the size of the screen. Perhaps you have heard of the “mobile-first approach,”
    which is a philosophy to design first for smaller screens, and then move upward
    to the possible resolutions to reach the desktop, which is considered the largest.
    While there are ways to accomplish this with JavaScript, the most sensible direct
    approach is to use well-thought-out designs with CSS media queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on the application, there are certain formulas to create a responsive
    site, but analyzing the many alternatives goes beyond the objectives of this book.
    Instead, we will see only one as an example, using the “switch columns” method.
    This method basically sets for mobile (or narrow portrait screens) the main content
    inside a single vertical column, section by section. A main navigation bar or
    menu is placed at the top or bottom of the screen, always visible. Then, for the
    desktop, the navigation bar totally or partially moves to the top menu or to a
    sidebar, and the content from the main column moves to horizontal sections, stacked
    one after the other. This method is illustrated and better understood with this
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.23 – Transformation from mobile first to desktop](img/Figure_11.23_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.23 – Transformation from mobile first to desktop
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the preceding figure, the sections are always in the same
    order, but the content inside adapts from a vertical to horizontal layout direction.
    This concept is so simple and clean to design that it has become the standard
    for most landing pages. Once you understand this pattern, you begin to see it
    everywhere it is implemented.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple coding approach to do this change is by using the CSS flexbox model
    and changing the orientation from column to horizontal at the section level. Here
    is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Notice how the code has included a breakpoint at 600-px wide. You can control
    different screen sizes by applying multiple media queries with breakpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Home link
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This pattern is so ubiquitous that we do not even think about it. The main
    corporate logo is placed at the top left of the page, as a link to the home screen.
    The position is not random, and it has its origins in the way users “scan” a page.
    Different users will take a quick look when a page loads, guiding the eyes in
    a *Z*, *L*,or *T* movement through the page. Placing the logo as a link at the
    top left ensures that it is the first item the user will register. In this chapter,
    *Figures 11.21* and *11**.22* are good examples of this pattern. But there are
    exceptions to the placement, such as Google’s home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.24 – Google’s home page is an exception to this pattern as the
    logo is not a link](img/Figure_11.24_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.24 – Google’s home page is an exception to this pattern as the logo
    is not a link
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the exception shown in the preceding figure is only temporal, as Google
    goes back to this pattern once it presents the search results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.25 – Google’s search result applies the pattern](img/Figure_11.25_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.25 – Google’s search result applies the pattern
  prefs: []
  type: TYPE_NORMAL
- en: The home link pattern should bring you back to either the home page or the first
    step of the process. This pattern is so widespread and understood by users, that
    any exception should be made very carefully with a good understanding of the behavior
    and interaction of the user base.
  prefs: []
  type: TYPE_NORMAL
- en: Hero section, call to action, and social media icons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **hero section** is the first part that displays when the page loads in
    the browser and goes from the very top (where the home link and main menu reside)
    to, at most, the visible bottom of the screen. All content below this section
    is referred to as “below the fold,” meaning that to see it, the user needs to
    scroll down the page. The hero section is considered the most important part of
    the home page, and the place where the initial **call to action** is placed. We
    visited this concept previously in this chapter when talking about UI design principles
    and contrast. Nowadays, most websites will adhere to this pattern and display
    the hero section in contrast, with large images or a carousel, and a predominant
    call to action.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.26 – Kobold Press home page’s hero section – colorful and direct](img/Figure_11.26_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.26 – Kobold Press home page’s hero section – colorful and direct
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding example from Kobold Press ([https://koboldpress.com/](https://koboldpress.com/)),
    we can see how they have applied several patterns seen here, from the home link
    and main menu to the hero section and the call to action. Notice also, on the
    left side, the display of social media icons as a floating sidebar. It is becoming
    a pattern to place such icons with links to the social media address for each
    institution, or in the case of posts or articles, a link to “share” the content.
    Common places to locate the social icon’s bar are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In the footer of the website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the beginning and/or end of an article
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the description of a product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When including links to share direct content from a Vue application (for example,
    a product from an online store), it is important that the link and the Vue application
    point directly to such an item. Careful attention needs to be placed on the way
    the navigation URL is formed and interpreted on the first load by the Vue application,
    to avoid sharing links that will open the home screen instead of the desired section
    of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Other patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are other patterns, hundreds if not thousands, that have a direct influence
    on the user experience. I encourage you to continue investigating these, such
    as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Shopping cart patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User onboarding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gamification patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registration and de-registration patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is, however, a dark side to user experience, and it has to do with the
    use of manipulative and deceitful practices. As an ethical developer, you should
    avoid using any of these dark patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Dark patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dark patterns are carefully designed interfaces and interactions with the sole
    purpose of manipulating or tricking the user into performing unintended actions
    or even entangling them into malicious results. After such a definition, you may
    think that such actions belong to the deepest shady corners of the internet. Sadly,
    even mainstream companies often follow these unethical practices. As a matter
    of fact, the reproduced examples in these sections all belong to such a category,
    and as often happens with design patterns, many of these overlaps or can be found
    nested within each other. Let’s see them one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Trick questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This pattern is a simple or complex play on words to trick the user to do the
    opposite of what their intention is. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.27 – A trick question for a newsletter subscription](img/Figure_11.27_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.27 – A trick question for a newsletter subscription
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in this example, a user filling in a form would be tempted to
    leave this checkbox unchecked if they don’t want to receive a newsletter from
    the company. The common tendency is to pay attention to the marked text in bold,
    which is a sort of title. The real action for the checkbox can be found at the
    end of the paragraph, which the majority of users would not read: **Check this
    option if you do not want to receive** **our newsletter**.'
  prefs: []
  type: TYPE_NORMAL
- en: Sneak into the basket
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This dark pattern appears in many shopping applications, quite commonly in
    services such as hosting and airline tickets. It consists of placing items into
    the shopping cart at checkout, but that the user has not selected, usually presented
    as an offer or a “necessary” item of a small amount. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.28 – An additional item has been added to the shopping cart](img/Figure_11.28_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.28 – An additional item has been added to the shopping cart
  prefs: []
  type: TYPE_NORMAL
- en: In this example, after ordering for a new domain, a new item, **First time setup**,
    has been automatically added to the shopping cart. This item does not have any
    other explanation, and the amount appears to be “small” in comparison to the main
    purpose of the purchase. Often, these types of items are “scammish” and have no
    other intent than to add penny by penny to the final amount. In some cases, there
    may be options to remove such items before confirming the purchase, but quite
    often there are none.
  prefs: []
  type: TYPE_NORMAL
- en: Roach motels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This pattern appears quite often for services and subscriptions. It consists
    of making a very easy purchase, often after a free trial period, with the condition
    that charges will continue until explicitly canceled by the user. Here is where
    the dark pattern appears: by making this “unsubscribe” process complicated or
    impossible to complete. For example, some companies require that the user contact
    the support team with a signed letter accompanied by a legal ID. The basic concept
    is to “trap” the user so rescinding the contracted service becomes near impossible.'
  prefs: []
  type: TYPE_NORMAL
- en: Privacy Zuckering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This dark pattern is named after the founder of a recognizable social media
    company. It consists of offering to the user a large number of services, for free,
    while the use of the applications monitors the user’s activity and behavior. This
    data is then collected and sold behind the scenes to third-party companies without
    the knowledge of the user. Often, this practice is somehow named in a rather lengthy
    contract of terms of service, which the user needs to accept before using the
    services. This way, the company alleges that the user has given their consent
    and is aware, while very few users ever read or interpret properly such an agreement.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing price comparison
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this pattern, the website presents to the user a number of plans for services,
    but purposely hides or disguises either features or individual prices, so the
    user is unable to make a direct comparison to select the most suitable option.
  prefs: []
  type: TYPE_NORMAL
- en: The price is hidden or disguised in such a way that the user cannot make an
    informed decision and must select an option based on features or other attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Misdirection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is another pattern often used in shopping cart workflows. It consists of
    using names and options that are confusing to the user, with pre-selected options
    that hide alternatives and better price deals. If the system has a floating price
    value (for example, for hotels or airplane tickets), this pattern is often used
    to manipulate the user into selecting the option that is in the best interest
    of the company.
  prefs: []
  type: TYPE_NORMAL
- en: Hidden costs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this pattern, the user’s selection of products or services does not disclose
    a total or comprehensive description of the associated costs involved (beyond
    taxes). Either in the initial purchase or subsequent purchases, the total amount
    paid results in a higher price than what the user estimated in the first instance.
  prefs: []
  type: TYPE_NORMAL
- en: Bait and switch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This pattern is widely used by online advertisers and is one that causes the
    most hate in captive users. It simply disguises one option to perform another
    or the exact opposite the user intended. A classic example is when a pop-up window
    displays a **Close** button (usually a simple **X**), but when the user clicks
    it intending to close the dialog window, it opens a new tab with the advertised
    website.
  prefs: []
  type: TYPE_NORMAL
- en: Confirm shaming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A highly manipulative pattern, it involves deliberately using wording or actions
    to shame and ridicule the user into doing something they didn’t want at the beginning
    of the transaction. It can go from mildly annoying to outspoken insulting. It
    is often used together with other dark patterns. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.29 – A confirmation dialog when removing a service from the cart](img/Figure_11.29_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.29 – A confirmation dialog when removing a service from the cart
  prefs: []
  type: TYPE_NORMAL
- en: Notice in the example how the wording in the action buttons is highly manipulative,
    even though the original question is not so. This pattern is a double-edged sword,
    as users may feel the rejection of the entire service and cancel the entire operation.
  prefs: []
  type: TYPE_NORMAL
- en: Disguised ads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When an advertisement is injected into a page, it can disguise itself as proper
    content, imitating styles and action buttons with the intent of tricking the user
    to trigger a redirection or download a file. In some cases, the camouflage is
    such that it is not possible to distinguish the site’s call to action and the
    advertisements. This pattern is popular on free sites that offer to host files
    for download, where it is common to find multiple **Download** buttons on the
    page, yet only one does actually download the desired file and the others redirect
    the user to a third-party site. Here is one example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.30 – FileHippo.com hosts free software. Some ads disguise as Download
    buttons](img/Figure_11.30_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.30 – FileHippo.com hosts free software. Some ads disguise as Download
    buttons
  prefs: []
  type: TYPE_NORMAL
- en: In this screenshot from [FileHippo.com](http://FileHippo.com), if you access
    the download page for VLC Media Player, the site presents multiple **Download**
    buttons. If a user does not pay attention, it may trigger a different action than
    the intended software download.
  prefs: []
  type: TYPE_NORMAL
- en: Friendly spam
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this dark pattern, the application requests access to the user’s contacts,
    with the idea of expanding their network or social circle. If the user accepts,
    their entire contact list will be “spammed” with emails as if coming from the
    user, offering the service. Often, once this information has been shared, it is
    also shared with third-party entities and advertisers.
  prefs: []
  type: TYPE_NORMAL
- en: The list of dark patterns may not be directly associated with a single media
    or framework, but it is the ethical responsibility of people in this industry
    to avoid or prevent them.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw important patterns to present the user with a satisfactory
    user experience. We also learned important terms to speak with designers in equal
    terms and with mutual understanding – a necessary point for collaboration and
    presenting the user base with the best possible positive experience. We also reviewed
    some of the most common dark patterns, which are techniques and workflow implementations
    to manipulate users and often deprive them of privacy and resources. While mostly
    informative, this chapter should give you a better understanding of the environment
    where web applications are built, and what standards to follow for easy use. This
    is all knowledge that a good engineer and developer should be aware of.
  prefs: []
  type: TYPE_NORMAL
- en: Review questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some simple questions to help you summarize what you learned in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What are UI and UX patterns?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can you name the benefits of using UX patterns?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can you benefit of using standard patterns in your Vue 3 components?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are dark patterns and why should they be avoided?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Appendix: Migrating from Vue 2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Migrating a Vue 2 application to Vue 3 is not as straightforward as just replacing
    the framework. While the Options API remains fully compatible and there should
    not be a need to migrate to the Composition API, there are other breaking changes
    that we should be aware of.
  prefs: []
  type: TYPE_NORMAL
- en: The changes between versions affect not only the core framework but also the
    ecosystem (new router, state management, etc.) and other dependencies. In Vue
    3, there is also a new official bundler, **Vite** (which replaces **WebPack**),
    a new router and state management (**Pinia**, the replacement for **Vuex**), and
    other plugins as well. The list of changes included here is a quick reference
    to help you migrate your application but may not be exhaustive with all the nuances
    of specific needs for each particular project. Because of this, I will refer you
    to the official documentation for migration at [https://v3-migration.vuejs.org/](https://v3-migration.vuejs.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a non-exclusive list of the major changes, other than the new Composition
    API:'
  prefs: []
  type: TYPE_NORMAL
- en: A different way to bootstrap and start the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes in global components and plugins registration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes in the `data` property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes to `v-model`, `props`, and `emits`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reactivity options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Framework browser compatibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes in directory and file organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes in the router and state management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This list doesn’t show all the changes *under the hood* that the framework went
    through, but it will give you a starting point to migrate your working application
    from Vue 2 to Vue 3\. Now, let’s see each of these in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: A different way to bootstrap and start the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The way to bootstrap and start our application has changed. It is now required
    that we import a constructor from the Vue bundle. Let’s compare both implementations
    from `main.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vue 2** **application instantiation**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In Vue 2, we import the Vue constructor and pass an object with options. In
    Vue 3, after the application has been created, we attach components, plugins,
    and so on before mounting our application to the top-level component. Here is
    the example rewritten for Vue 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vue 3** **application instantiation**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The location of the `index.html` file has also changed and is now placed at
    the root of our application. You can see more changes to the document structure
    in [*Chapter 3*](B18602_03.xhtml#_idTextAnchor079), *Setting Up a* *Working Project*.
  prefs: []
  type: TYPE_NORMAL
- en: Register global components, plugins, and so on
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Vue 2, we declare an application-wide component (global) by attaching it
    to the Vue root instance. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In Vue 3, we instead register components and plugins with the application *after*
    it has been created and *before* it is mounted. The `component` (for components),
    `use` (for plugins), and `directive` (for directives) methods are all chainable.
    Here is how the preceding example looks in Vue 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If we do not need to reference the application, we can just concatenate the
    instantiation of the application as in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The application bootstrap is independent of the syntax used to describe components
    (Options API, Composition API, or script setup).
  prefs: []
  type: TYPE_NORMAL
- en: The data property is now always a function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Vue 2 applications, there is a discrepancy in the `data` attribute. The root
    component has a property that is directly a reactive definition, while all other
    components need to provide a function that returns an object as the `data` property.
    This created an inconsistency in the creation of components. This issue has been
    resolved in Vue 3, so now *all components are treated equally*, meaning the data
    attribute always has to be a function that returns an object whose members will
    be reactive properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of the root component in `main.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And then in all other components, you have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Notice that for these examples, we are using the Options API for clarity. When
    using the `script setup` syntax, you do not need to declare a `data` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: There are more reactive options to choose from
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When using the Composition API, we have two options to create reactive properties:
    `ref()` and `reactive()`. The first one returns an object with a `.value` propertythat
    is reactive. The second converts an object passed as an argument and returns the
    same object with reactive properties. Here is one example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the difference in syntax. At this point, you may think about when to
    use one or the other. Here is a small comparison of when to use each one:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `ref()` | `reactive()` |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Applies to any data type, not only primitives.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When applied to objects or arrays, you can replace them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It uses getters and setters to detect changes and trigger reactivity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use it by default for simple data. For arrays and objects (complex types), it
    is recommended to use `reactive()` when working with their internal elements.
    When the entire object will be replaced, it is convenient to use `ref()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Applies to objects and arrays, but not primitives. Makes their attributes reactive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The object cannot be replaced, only its attributes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It uses the native implementation of the `Proxy()` handlers to detect changes
    and trigger reactivity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use when you need to group a large number of variables that must “travel” together.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Table A.1 - A simple guide to choose between ref() and reactive()
  prefs: []
  type: TYPE_NORMAL
- en: Each method has its own advantages. From the point of view of reactive properties
    with complex types, it doesn’t matter which one you use. In some cases, `reactive()`
    can be more performant due to the use of native implementations in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Changes to v-model, props, and events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a big change from Vue 2 that can and will break your code. In Vue 3,
    we no longer receive and emit the property value. Instead, any prop can be input/output,
    such as `v-model`. The default `v-model` attribute is received in a *prop* named
    `modelValue`, and the counterpart *emit* prepends `update:`, so it is called `update:modelValue`.
  prefs: []
  type: TYPE_NORMAL
- en: In Vue 3, we can now have multiple *v-models* at the same time. For example,
    we can have `v-model:person="person"` in our component, and define the prop as
    `"modelPerson"` and the event as `"update:modelPerson"`.
  prefs: []
  type: TYPE_NORMAL
- en: Props and emits are now macros (a macro is a special function provided by the
    bundler or framework). **Props** have the same footprint as in Vue 2, so you can
    define them as arrays, objects, include types, default values, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example with a default v-model and a notated model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Props and emits are discussed in this book in more detail in [*Chapter 4*](B18602_04.xhtml#_idTextAnchor102),
    *User Interface Composition* *with Components*.
  prefs: []
  type: TYPE_NORMAL
- en: Removed old browser compatibility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Vue 3 was built for speed and “modern” JavaScript. Backward compatibility for
    older browsers has been removed. Many internal functions used for reactivity now
    use native implementations by default (for example, the Proxy API). If you need
    to support an application in an outdated browser, you should consider staying
    with Vue 2, but fear not! There is an official plugin for Vue 2 to use the new
    *Composition API*, including the `script` `setup` syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: Vue 2.7 includes it without plugins ([https://blog.vuejs.org/posts/vue-2-7-naruto.html](https://blog.vuejs.org/posts/vue-2-7-naruto.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are on Vue 2.6 or below, you can find the plugin here: [https://github.com/vuejs/composition-api](https://github.com/vuejs/composition-api)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you still want the speed of Vue 3, there is a special migration build that
    has almost the same API as Vue 2 (see [https://v3-migration.vuejs.org/migration-build.html](https://v3-migration.vuejs.org/migration-build.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Why remove old browsers’ compatibility? There are many reasons, including the
    following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The global usage of older browsers has fallen below a significant percentage,
    and it is expected to continue to drop over time.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: With the removal of old code and compatibility checks, the resulting Vue core
    implementation is lighter and more performant. The increase in speed and reduction
    in bundle size is significant, making our applications load faster and be more
    responsive.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In practice, there are two browser engines that take up most of the market:
    browsers based on Chromium, and ones based on Mozilla Firefox. Check [www.caniuse.com](http://www.caniuse.com)
    if you need to use a feature that may not be available in older browsers.'
  prefs: []
  type: TYPE_NORMAL
- en: Changes in directory and file organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The organization for the directory structure in Vue 2 was influenced to some
    degree by the bundler at the time, `index.html`, which has moved to the root folder
    out of the `Public/` folder. It now has a more prominent place in the bundling
    process. This and other changes appear in [*Chapter 3*](B18602_03.xhtml#_idTextAnchor079),
    *Setting Up a* *Working Project*.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in the router and state management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The new approach to components and modularity also affects the router and the
    state management. While a new version of the router has been provided for Vue
    3, the state management’s official solution has moved away from **Vuex** to **Pinia**.
    More information about the new router and Pinia can be found in [*Chapter 5*](B18602_05.xhtml#_idTextAnchor130),
    *Single-Page Applications*, and in [*Chapter 7*](B18602_07.xhtml#_idTextAnchor173),
    *Data Flow* *Management*, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The new router now has a different approach to defining modes, using constructors
    such as `createWebHashHistory` (hash mode), `createWebHistory` (history mode),
    and `createMemoryHistory` (navigation in memory alone). This change also affected
    the configuration of the production bundle. In WebPack, when in history mode,
    the deployment path was part of the bundler configuration. Now, the path is passed
    to the constructor as a parameter, being handled completely by the router.
  prefs: []
  type: TYPE_NORMAL
- en: New components and other changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue 3 also introduces new components such as `teleport` (a special component
    that allows placing reactive templates outside the Vue component tree, inside
    another DOM element), but also breaks free of some limitations in Vue 2\. For
    example, components now can have more than one root element. Please refer to the
    official documentation to learn more about the new components in Vue 3.
  prefs: []
  type: TYPE_NORMAL
- en: Other breaking changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To see a full list of breaking changes not mentioned here, please check the
    official documentation at [https://v3-migration.vuejs.org/breaking-changes/](https://v3-migration.vuejs.org/breaking-changes/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Migrating from Vue 2 to Vue 3 has a clear path, with only a few breaking changes
    to be aware of. The new Composition API however, does require a change of mentality,
    but it comes naturally when using the `script setup` syntax. But the most important
    feature of Vue 3 is the performance gains and the size reduction. In short, Vue
    3 is fast, very fast, and well worth the migration. For projects supporting outdated
    browsers, there are plugins for the Vue 2.x branch that provide some of the advantages
    of Vue 3, but for other projects seeking the positive gains of Vue 3, it is well
    worth the migration.
  prefs: []
  type: TYPE_NORMAL
- en: Final words
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Congratulations on reaching the end of this book! We have covered a wide spectrum
    of topics, from the very basics of Vue to the deployment of the final product.
    Let’s review together the main concepts for each chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B18602_01.xhtml#_idTextAnchor017), *The Vue 3 Framework*, we
    introduced the key Vue concepts and the different syntax options available for
    writing components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B18602_02.xhtml#_idTextAnchor040), *Software Design Principles
    and Patterns*, we took a deep-dive into important conceptual and well-tested patterns
    for architecting our code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [*Chapter 3*](B18602_03.xhtml#_idTextAnchor079), *Setting Up a Working Project*,
    and [*Chapter 4*](B18602_04.xhtml#_idTextAnchor102), *User Interface Composition
    with Components*, we learned how to start a Vue project and how to translate designs
    into working code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [*Chapter 5*](B18602_05.xhtml#_idTextAnchor130), *Single-Page Applications*,
    and [*Chapter 6*](B18602_06.xhtml#_idTextAnchor148), *Progressive Web Applications*,
    possibly the most important chapters, we learned how to create advanced applications
    with navigation and installation via the browser’s native functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [*Chapter 7*](B18602_07.xhtml#_idTextAnchor173), *Data Flow Management*,
    and [*Chapter 8*](B18602_08.xhtml#_idTextAnchor186), *Multithreading with Web
    Workers*, we learned more about how to improve performance and control the information
    flow with good practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18602_09.xhtml#_idTextAnchor199), *Testing and Source Control*,
    introduced tools to automate programmatic tests to secure the good quality of
    our code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B18602_10.xhtml#_idTextAnchor224), *Deploying Your Application*,
    gave us a view into the steps and resources needed to publish and secure our server
    with a secure protocol'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B18602_11.xhtml#_idTextAnchor238), *Bonus Chapter -UX,* gave
    us a view from the user perspective, and a common vocabulary to collaborate with
    UI/UX designers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indeed, this has been a long journey, but I’m confident and positive that this
    content will improve your skills as a developer and professional.
  prefs: []
  type: TYPE_NORMAL
- en: Where to go from here
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Technology keeps advancing daily, so there is much to learn ahead. New tools
    and patterns are created regularly. Because of this, it is not possible to cover
    them all in just one book. Often, while preparing a chapter, I’ve been limited
    to touching on some technologies and concepts only at a surface level due to the
    scope and breadth of this book. For example, beyond the web, Vue can also be used
    to develop hybrid applications with tools such as **NW.js** ([https://nwjs.io/](https://nwjs.io/)),
    **Electron** ([https://www.electronjs.org/](https://www.electronjs.org/)), **Tauri**
    ([https://tauri.app/](https://tauri.app/)), and more.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about this framework and the technologies it is based upon will give
    you important skills.
  prefs: []
  type: TYPE_NORMAL
- en: Finally...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I express my appreciation for your dedication to this discipline and thank you
    for purchasing this book. I wish you well and brilliant success in your future
    endeavors and professional career.
  prefs: []
  type: TYPE_NORMAL
- en: Sincerely,
  prefs: []
  type: TYPE_NORMAL
- en: Pablo David Garaguso
  prefs: []
  type: TYPE_NORMAL
- en: '[www.pdgaraguso.com](http://www.pdgaraguso.com)'
  prefs: []
  type: TYPE_NORMAL
