- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Cracking Any Real-World Programming Task
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 破解任何现实世界编程任务
- en: To effectively perform a real-world programming assignment in today’s quickly
    expanding tech landscape, programmers must manage an ever-increasing number of
    hurdles and complexity levels. In this chapter, we will look at the basic stages,
    tools, and best practices that will allow you to approach any programming project
    with confidence and generate high-quality, maintainable software. Our interview
    preparation becomes so much better when we can confidently talk about this subject
    and give real-world examples. Over time, we will be able to provide more of our
    own personal experiences, which, as a result, makes us a far better candidate
    for hiring when going through an interview process.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天快速发展的技术环境中，为了有效地完成现实世界的编程作业，程序员必须管理越来越多的障碍和复杂程度。在本章中，我们将探讨基本阶段、工具和最佳实践，这将使你能够自信地处理任何编程项目，并生成高质量、可维护的软件。当我们能够自信地谈论这个主题并提供现实世界的例子时，我们的面试准备就会变得更好。随着时间的推移，我们将能够提供更多我们自己的个人经验，这使我们成为面试过程中更好的候选人。
- en: This chapter will give you the knowledge and confidence you need to overcome
    every programming assignment that comes your way, from setting up your development
    environment to organizing your code base and sharing your work. We’ll go through
    how to pick the correct scaffolding tools and templates to help you construct
    an excellent foundation for your application while saving you time and effort.
    We will also look into the optimal application architecture for your project’s
    needs, striking a balance between versatility and ease of use.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为你提供克服任何摆在你面前的编程作业所需的知识和信心，从设置你的开发环境到组织你的代码库和分享你的工作。我们将介绍如何选择正确的脚手架工具和模板，以帮助你构建一个出色的应用程序基础，同时节省你的时间和精力。我们还将探讨满足你项目需求的最优应用架构，在多功能性和易用性之间取得平衡。
- en: As we go along, you’ll realize how important it is to test your code to assure
    its dependability, scalability, and security. We will provide you with practical
    guidance on how to include a testing strategy in your workflow and show you how
    to use **test-driven development** (**TDD**) to generate higher-quality code from
    the start. Finally, we’ll lead you through the steps of setting up and managing
    your Git repository, writing a clear and informative README, and sharing your
    work with the rest of the world. Not only will this increase the exposure and
    effect of your work, but it will also stimulate cooperation and continual development.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续前进，你会意识到测试你的代码以确保其可靠性、可扩展性和安全性是多么重要。我们将提供实际指导，教你如何在工作流程中包含测试策略，并展示如何使用**测试驱动开发**（**TDD**）从一开始就生成高质量的代码。最后，我们将引导你完成设置和管理你的Git仓库、编写清晰且信息丰富的README以及与世界分享你的工作的步骤。这不仅会增加你工作的曝光度和影响力，还会激发合作和持续发展。
- en: By the end of this chapter, you will have gained the necessary abilities and
    methods to conquer any real-world programming work, and you will be well on your
    way to being an invaluable asset in the field of software development.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将获得征服任何现实世界编程工作的必要能力和方法，你将朝着成为软件开发领域宝贵资产的道路迈进。
- en: In this chapter, we will go through subjects related to solving programming
    assignments, giving you the confidence required in this programming area. These
    fundamental skills are key to performing well on the job as well as during interviews
    because your ability to problem-solve determines how good a programmer you are.
    As developers, we often get asked about our development environment and tech stacks,
    and if we are to work effectively within another team at a company, then we have
    to know about the tools that we will have to use. So, having the right answers
    to these questions when at an interview can show that we know what we are talking
    about and can integrate into any team.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨与解决编程作业相关的主题，给你在这个编程领域所需的信心。这些基本技能对于在工作中以及面试中表现良好至关重要，因为你的问题解决能力决定了你是一名多么优秀的程序员。作为开发者，我们经常被问到我们的开发环境和技术栈，如果我们要在公司的另一个团队中有效工作，那么我们必须了解我们将要使用的工具。因此，在面试时对这些问题的正确回答可以表明我们知道自己在说什么，并且可以融入任何团队。
- en: 'These are the topics we will discuss in this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们将在本章中讨论的主题：
- en: Preparing your development environment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备你的开发环境
- en: Choosing the right scaffolding tools or templates
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择正确的脚手架工具或模板
- en: Deciding on the application architecture
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定应用程序架构
- en: Testing your code
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试你的代码
- en: Creating a Git repository with a README and sharing it
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建带有README的Git仓库并分享
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'On your machine, please ensure that you have downloaded and installed the latest
    version of Node.js and `npm`, which you can find here: [https://nodejs.org/en](https://nodejs.org/en).
    Also, ensure that you have a code editor installed, such as Visual Studio Code,
    which you can download from here: [https://code.visualstudio.com/](https://code.visualstudio.com/).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的机器上，请确保你已经下载并安装了最新版本的Node.js和`npm`，你可以在这里找到：[https://nodejs.org/en](https://nodejs.org/en)。同时，确保你已经安装了一个代码编辑器，例如Visual
    Studio Code，你可以从这里下载：[https://code.visualstudio.com/](https://code.visualstudio.com/)。
- en: Preparing your development environment
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备你的开发环境
- en: Let’s now learn how to make excellent React applications. The most diffiicult
    step is setting up your development environment, but it doesn’t have to be. You’ll
    be one step closer to your dream job as a React developer with the assistance
    of workflow background knowledge and these basic guidelines for setting up a successful
    JavaScript development environment. This section will walk you through every stage
    of the process, from selecting the best scaffolding tools for your project to
    debugging and fixing any difficulties that arise. Every developer should know
    the basics of setting up a development environment and getting a framework working.
    In an interview setting, we might be expected to work on a technical test, so
    being able to find the right tools, install them, and get your code base working
    is all required knowledge for us as developers. It is absolutely paramount to
    be able to do so when at an interview. So, let’s get going.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来学习如何制作优秀的React应用程序。最困难的步骤是设置你的开发环境，但这并不一定如此。借助工作流程背景知识和这些设置成功的JavaScript开发环境的基本指南，你将更接近你的React开发者梦想工作。本节将带你了解整个过程的每个阶段，从为你的项目选择最佳的脚手架工具到调试和修复出现的任何困难。每个开发者都应该了解设置开发环境并让框架运行的基本知识。在面试环境中，我们可能会被要求进行技术测试，因此能够找到正确的工具、安装它们并让你的代码库运行是作为开发者所需的所有知识。在面试时能够做到这一点是至关重要的。所以，让我们开始吧。
- en: Why do you need a good development environment?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你为什么需要一个好的开发环境？
- en: A development environment is an essential part of the software development process
    for a developer. A development environment provides an isolated environment in
    which you can generate and test your code without fear of interfering with a live
    production environment. This decreases the danger of end user or customer disruptions
    and allows you to play around with and test different ways of coding. A development
    environment also allows you to test your source code against many platforms, browsers,
    and devices to verify that your application works flawlessly for all users. You
    can write code more effectively, identify mistakes and defects earlier, and ultimately
    offer a high-quality product to your consumers if you utilize a development environment.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 开发环境是开发者软件开发过程中的一个重要组成部分。开发环境提供了一个隔离的环境，在其中你可以生成和测试你的代码，而不用担心会干扰到实际的生产环境。这减少了最终用户或客户中断的风险，并允许你尝试和测试不同的编码方式。开发环境还允许你测试你的源代码针对多个平台、浏览器和设备，以验证你的应用程序对所有用户都能完美运行。如果你利用开发环境，你可以更有效地编写代码，更早地识别错误和缺陷，并最终向消费者提供高质量的产品。
- en: A development environment requires us to have either an **integrated development
    environment** (**IDE**) or a text editor/code editor. But what is the difference
    between them? Let us have a look.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 开发环境要求我们拥有一个**集成开发环境**（**IDE**）或一个文本编辑器/代码编辑器。但它们之间有什么区别呢？让我们来看看。
- en: What is the difference between an IDE and a text editor/code editor?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IDE和文本编辑器/代码编辑器有什么区别？
- en: There are many ways for us to set up our development environments. Developers,
    particularly those using JavaScript and React, have a variety of tools to pick
    from according to their personal needs. An IDE is a popular choice since it includes
    a full array of tools for developing, debugging, and testing. A text editor, which
    is a basic tool that enables effective and simplified coding, is another choice.
    An online code editor, on the other hand, might be the greatest option for those
    who like to work directly in the browser. These environments enable quick and
    easy testing and deployment without the need for any software to be installed
    on your desktop or laptop.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有许多方法可以设置我们的开发环境。开发者，尤其是那些使用JavaScript和React的开发者，可以根据个人需求选择各种工具。IDE是一个流行的选择，因为它包括用于开发、调试和测试的全套工具。文本编辑器，作为一种基本的工具，能够有效地简化编码，也是另一个选择。另一方面，对于喜欢直接在浏览器中工作的开发者来说，在线代码编辑器可能是最佳选择。这些环境允许快速轻松地进行测试和部署，无需在您的桌面或笔记本电脑上安装任何软件。
- en: Now that we have an understanding of these tools, it’s time to move on to learning
    about the basic steps for setting up a modern React development environment.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了这些工具，是时候学习设置现代React开发环境的基本步骤了。
- en: How do you set up a React development environment?
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您如何设置React开发环境？
- en: 'It might look difficult to set up a React development environment, but with
    the appropriate steps, anyone can accomplish it. First and foremost, you must
    be familiar with JavaScript and the command line. Then, download and install Node.js
    and `npm` here: [https://nodejs.org/en](https://nodejs.org/en), both of which
    are required for React development. Choose a coding editor, such as Visual Studio
    Code, which you can download from here: [https://code.visualstudio.com/](https://code.visualstudio.com/).
    Following that, it is recommended to use Next.js, Remix, or Gatsby commands to
    build a new React project.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 设置React开发环境可能看起来很困难，但有了适当的步骤，任何人都可以完成它。首先，您必须熟悉JavaScript和命令行。然后，在此处下载并安装Node.js和`npm`：[https://nodejs.org/en](https://nodejs.org/en)，这两者都是React开发所必需的。选择一个编码编辑器，例如Visual
    Studio Code，您可以从此处下载：[https://code.visualstudio.com/](https://code.visualstudio.com/)。随后，建议使用Next.js、Remix或Gatsby命令来构建一个新的React项目。
- en: 'You can learn about the setup process here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处了解设置过程：
- en: '[https://react.dev/learn/start-a-new-react-project](https://react.dev/learn/start-a-new-react-project)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://react.dev/learn/start-a-new-react-project](https://react.dev/learn/start-a-new-react-project)'
- en: Installing software requires us to use a package manager, which is basically
    a collection of tools bundled together that automate a process. This enables us
    to install, upgrade, configure, and delete software from our computers. `npm`
    is the most popular package manager for the JavaScript ecosystem. Alternatives
    include `yarn` and `pnpm`, and they all have their pros and cons. There is also
    `npx`, which is an abbreviation for `npm` package runner that enables developers
    to run any JavaScript package accessible on the `npm` registry without the need
    to install it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 安装软件需要我们使用包管理器，它基本上是一组捆绑在一起的工具，可以自动化一个过程。这使得我们能够从计算机上安装、升级、配置和删除软件。`npm`是JavaScript生态系统中最受欢迎的包管理器。其他选择包括`yarn`和`pnpm`，它们都有自己的优缺点。还有`npx`，它是`npm`包运行器的缩写，允许开发者运行`npm`注册表上可访问的任何JavaScript包，而无需安装它。
- en: 'Developers usually use `npm` or `npx` depending on the documentation for the
    tool that they are using. Anyway, we will be using `npm` and `npx` in these upcoming
    examples. The commands for setting up a React project are quite simple. Let’s
    take a look at the syntax for each React framework, as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者通常会根据他们使用的工具的文档使用`npm`或`npx`。无论如何，我们将在接下来的示例中使用`npm`和`npx`。设置React项目的命令相当简单。让我们看看每个React框架的语法，如下所示：
- en: '*Next.js*'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Next.js*'
- en: 'Running this code will scaffold a Next.js starter project:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行此代码将构建一个Next.js入门项目：
- en: '[PRE0]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It’s straightforward, and when you have completed the setup, you will be ready
    to go.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这很简单，当您完成设置后，您就可以开始使用了。
- en: '*Remix*'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Remix*'
- en: 'The code here is for Remix and will create a new project for us:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此处的代码是用于Remix的，将为我们创建一个新的项目：
- en: '[PRE1]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once again, the setup is easy to follow, so creating a Remix project does not
    take long.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 再次强调，设置过程很容易跟随，因此创建一个Remix项目不会花费很长时间。
- en: '*Gatsby*'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Gatsby*'
- en: 'Using this code sets up a Gatsby project for us:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用此代码为我们设置一个Gatsby项目：
- en: '[PRE2]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Vite.js*'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Vite.js*'
- en: 'With this command, we can set up a Vite.js project:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用此命令，我们可以设置一个Vite.js项目：
- en: '[PRE3]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Gatsby has a similar setup to Next.js and Remix, so it’s pretty easy to alternate
    between the three of them.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Gatsby 的设置与 Next.js 和 Remix 类似，因此在这三者之间切换相当容易。
- en: Finally, start the development server and see your project come to life. While
    the setup procedure could appear time-consuming and tedious, the end product is
    definitely worth it. You’ll be able to start developing dynamic and interesting
    web applications when you have a fully working development environment.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，启动开发服务器，看看你的项目是如何焕发生机的。虽然设置过程可能看起来既耗时又繁琐，但最终产品绝对物有所值。当你拥有一个完全工作的开发环境时，你将能够开始开发动态且有趣的网络应用程序。
- en: A development environment is only as good as the tools that we use to create
    it. Let’s learn more about React scaffolding tools to see how they can make our
    job much easier.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 开发环境的好坏取决于我们用来创建它的工具。让我们更多地了解 React 脚手架工具，看看它们如何使我们的工作变得更加容易。
- en: Which tools can we use for scaffolding a React project?
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们可以使用哪些工具来搭建 React 项目？
- en: We’re certain to come across some new and intriguing tools and frameworks as
    we explore the world of web development. There are a few scaffolding tools that
    stand out from the rest. webpack is an open source bundle runner that simplifies
    the process of bundling code for deployment. Next.js, Remix, and Gatsby all use
    webpack. Then, there’s Babel, a tool that allows us to write in the most recent
    version of JavaScript and have it compiled into a format that most browsers support.
    These technologies work together to provide a seamless and fast scaffolding experience,
    freeing up our time to focus on providing the greatest possible user experience.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在探索网络开发的世界时，肯定会遇到一些新颖且引人入胜的工具和框架。有几款脚手架工具在众多工具中脱颖而出。webpack 是一个开源的打包运行器，它简化了代码打包部署的过程。Next.js、Remix
    和 Gatsby 都使用了 webpack。然后是 Babel，这个工具允许我们使用最新的 JavaScript 版本，并将其编译成大多数浏览器都支持的格式。这些技术协同工作，为我们提供无缝且快速的脚手架体验，从而让我们有更多时间专注于提供最佳的用户体验。
- en: Scaffolding tools are essential for having a project that is easy to maintain,
    and we are going to discover why this is the case.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 脚手架工具对于拥有易于维护的项目至关重要，我们将发现为什么这是如此。
- en: Why are scaffolding tools so important to our project’s success?
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么脚手架工具对我们项目的成功如此重要？
- en: It is critical to have the correct tools for any profession, and project management
    is no exception. Having the right tools, from kanban boards to collaborative software,
    can make or ruin a project. These tools improve communication, boost productivity,
    and simplify operations. Without them, projects can become disorganized and difficult
    to manage. The correct tools can help teams stay on track, meet deadlines, and
    ultimately succeed. Investing in the correct project management tools may appear
    to be an unnecessary cost, but it may save time, money, and your sanity in the
    long run. Similarly, it’s just as important to check that you have the latest
    version of Node.js installed or a compatible version that works with your software.
    This can help you avoid breaking changes, which can affect the software you are
    using because there can be compatibility issues.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何职业来说，拥有正确的工具都是至关重要的，项目管理也不例外。拥有正确的工具，从看板到协作软件，都可能使项目成功或失败。这些工具改善了沟通，提高了生产力，并简化了操作。没有它们，项目可能会变得混乱且难以管理。正确的工具可以帮助团队保持进度，按时完成任务，并最终取得成功。投资正确的项目管理工具可能看起来像是一项不必要的开支，但从长远来看，它可能会节省时间、金钱，并让你的精神得到放松。同样，检查你是否安装了最新版本的
    Node.js 或与之兼容的版本也非常重要。这可以帮助你避免破坏性更改，这些更改可能会影响你正在使用的软件，因为可能存在兼容性问题。
- en: Setting up an environment can be both exhilarating and intimidating. It might
    be aggravating to experience technical issues throughout this process, so we are
    going to learn how we can overcome some of these problems.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 设置环境既令人兴奋又令人畏惧。在这个过程中遇到技术问题可能会让人感到沮丧，因此我们将学习如何克服其中的一些问题。
- en: How do you troubleshoot common issues that can arise in the process of setting
    up the environment?
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你如何在设置环境的过程中解决常见的故障？
- en: To make the process less unpleasant, you can tackle typical difficulties. First,
    double-check that you have all of the required gear and software. Then, make sure
    your internet connection is reliable and stable. Try refreshing your browser or
    clearing your cache if you are experiencing issues or missing files. Follow any
    instructions carefully and, if necessary, seek assistance. Remember that a little
    patience and effort will go a long way toward resolving any problems that might
    emerge throughout the setup process.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个过程不那么令人不愉快，你可以解决典型的困难。首先，请确保你拥有所有必需的工具和软件。然后，确保你的互联网连接可靠且稳定。如果你遇到问题或丢失文件，尝试刷新你的浏览器或清除你的缓存。仔细遵循任何指示，并在必要时寻求帮助。记住，一点耐心和努力将有助于解决在整个设置过程中可能出现的任何问题。
- en: To summarize, having an effective React development environment is incredibly
    beneficial for any web developer. It not only allows you to develop and test your
    projects successfully but also allows you to jump right into coding chores rather
    than battling with integration concerns. The tools and frameworks discussed previously
    have proven to be essential in creating the required environment and providing
    excellent scaffolding. A thorough grasp of these components will enable us to
    deploy our application without bugs or technical concerns. When developing React
    applications, the correct environment and structure are critical to success.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，拥有一个有效的React开发环境对任何Web开发者来说都极其有益。它不仅允许你成功开发和测试你的项目，而且允许你直接进入编码任务，而不是与集成问题作斗争。之前讨论的工具和框架已被证明在创建所需环境并提供出色的脚手架方面至关重要。对这些组件的深入了解将使我们能够无错误或技术问题地部署我们的应用程序。在开发React应用程序时，正确的环境和结构对于成功至关重要。
- en: Let’s now dive deeper into scaffolding tools and learn how to choose a good
    architecture for our programming tasks.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们更深入地探讨脚手架工具，并学习如何为我们的编程任务选择一个好的架构。
- en: Choosing the right scaffolding tools or templates
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择合适的脚手架工具或模板
- en: Scaffolding tools, templates, programs, and other resources are all accessible
    to assist you in realizing your idea. However, in order to get the most out of
    your project, you must take the time to properly assess those options. In this
    section, we will look at the many components of choosing a feasible architecture
    for React-based applications and how to use them effectively.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 脚手架工具、模板、程序和其他资源都可供你使用，帮助你实现你的想法。然而，为了充分利用你的项目，你必须花时间正确评估这些选项。在本节中，我们将探讨选择适合React应用程序的可行架构的许多组成部分以及如何有效地使用它们。
- en: What is scaffolding in programming?
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程中的脚手架是什么？
- en: Scaffolding is the process of creating a structured framework, layout, or template
    for an application in order to offer a stable basis for subsequent development.
    Scaffolding saves time and effort for developers by automating repetitive operations
    and establishing an effective structure for the project. For a variety of programming
    languages and technologies, scaffolding tools and frameworks exist to assist developers
    in launching their projects with the least amount of manual setup. These tools
    frequently include best practices and suggested patterns, which can result in
    code bases that are easier to maintain and scale.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 脚手架是创建一个结构化框架、布局或模板的过程，以便为后续开发提供一个稳定的基座。脚手架通过自动化重复操作并为项目建立有效的结构，为开发者节省时间和精力。对于各种编程语言和技术，存在脚手架工具和框架来帮助开发者以最少的手动设置启动他们的项目。这些工具通常包括最佳实践和推荐模式，这可能导致易于维护和扩展的代码库。
- en: 'Scaffolding tends to include the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 脚手架通常包括以下内容：
- en: '**A file structure**: Establishing a consistent, sustainable system for organizing
    files and folders that makes it simple to navigate and understand how the project
    is set up'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件结构**：建立一个一致、可持续的系统来组织文件和文件夹，使得导航简单，并能够理解项目的设置'
- en: '**Configuration and setup file**: Creating configuration files for tools and
    libraries such as linters, bundlers, and transpilers that support maintaining
    a standardized development environment and streamlining the build procedure'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置和设置文件**：为工具和库（如linters、bundlers和transpilers）创建配置文件，以支持维护标准化的开发环境并简化构建过程'
- en: '**Code examples**: Giving simple examples of how to utilize the framework,
    libraries, or project components can aid users in getting up and running fast
    and grasping recommended practices'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码示例**：提供如何利用框架、库或项目组件的简单示例，可以帮助用户快速启动并掌握推荐的最佳实践'
- en: '**Boilerplate starter kit**: Producing reusable code snippets or components
    that are able to be quickly customized for certain use cases, including establishing
    a build system, setting up a web server, or developing standard **user interface**
    (**UI**) elements'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**样板启动套件**：生成可快速定制用于特定用例的可重用代码片段或组件，包括建立构建系统、设置Web服务器或开发标准**用户界面**（**UI**）元素'
- en: Aside from scaffolding, we also need to consider the project size, complexity,
    and technologies required to complete our React programming tasks. Moving on to
    the next section, we are going to talk about and learn more about the project
    aspects.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了脚手架之外，我们还需要考虑项目的规模、复杂性和完成React编程任务所需的技术。在下一节中，我们将讨论并学习更多关于项目方面的内容。
- en: How do you determine which project factors to take into account when creating
    a project?
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您如何在创建项目时确定要考虑哪些项目因素？
- en: 'There are various ways to analyze which project factors we should be taking
    into account as we create projects. This can include the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建项目时，有各种方法来分析我们应该考虑哪些项目因素。这可以包括以下内容：
- en: Each project’s size
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个项目的规模
- en: Complexity
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂度
- en: Required technologies
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要的技术
- en: You can develop great frontend designs that are responsive to the organization’s
    demands by properly taking these variables into account. While simpler code and
    testing might be needed for smaller projects, more complicated frameworks for
    implementing React components may be needed for bigger projects. Knowing which
    technologies could be necessary to complete the work at hand is crucial. You can
    make sure that you’re producing high-quality work, meeting client needs, and offering
    smooth user experiences by having a thorough awareness of all these factors.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通过正确考虑这些变量，您可以开发出满足组织需求的优秀前端设计。对于较小的项目，可能需要更简单的代码和测试，而对于较大的项目，可能需要更复杂的框架来实现React组件。了解完成手头工作可能需要哪些技术至关重要。通过全面了解所有这些因素，您可以确保您的工作质量，满足客户需求，并提供流畅的用户体验。
- en: We will now learn about evaluating the functionalities of tools and templates
    because this is required for the project setup and specification.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将学习如何评估工具和模板的功能，因为这对于项目设置和规范是必需的。
- en: How do you evaluate the functionalities of each tool or template and determine
    which one best suits your needs?
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 您如何评估每个工具或模板的功能，并确定哪个最适合您的需求？
- en: Carefully compare the features of each tool or template before choosing one
    that best suits your requirements. You can be sure that you select the tool that
    is the greatest fit for your particular requirements by taking the time to thoroughly
    analyze the features and capabilities of each one. There are many solutions available
    to fit any demand, whether you’re searching for a tool with a wide range of customization
    possibilities or a template that’s simple to use right out of the box. In the
    end, the decision you make will be influenced by a number of variables, such as
    your financial situation, your degree of expertise, and the precise objectives
    you want to accomplish with the tool or template you select.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择最适合您需求的工具或模板之前，仔细比较每个工具或模板的功能。通过花时间彻底分析每个工具的功能和能力，您可以确保选择最适合您特定需求的工具。无论您是在寻找具有广泛定制可能性的工具，还是寻找开箱即用的简单模板，都有许多解决方案可以满足任何需求。最终，您的决定将受到许多变量的影响，例如您的财务状况、您的专业知识程度以及您希望通过所选工具或模板实现的具体目标。
- en: Analyzing the attributes of a project is something that we take into account
    when working on our own projects and those for clients as well. Let’s find out
    why it’s so significant to do so.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 分析项目的属性是我们自己在处理项目以及为客户工作时考虑的因素。让我们找出为什么这样做如此重要。
- en: How do you analyze these adaptability, compatibility, scalability, and security
    features?
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 您如何分析这些适应性、兼容性、可扩展性和安全性功能？
- en: Businesses require software that can keep up with their changing needs in today’s
    fast-paced environment. Analyzing the software’s adaptability, compatibility,
    scalability, and security aspects is essential when choosing a program. Software
    needs to be able to adapt as a business develops and evolves, therefore adaptability
    is essential. Scalability enables the software to expand in line with changing
    company requirements, while compatibility guarantees that it integrates seamlessly
    with other important internal systems. On the topic of scalability, there are
    many ways that we can make our applications scalable. If we choose to use a modern
    framework such as Next.js, for example, then we guarantee that we are getting
    access to the latest tools and features. This can be further enhanced when we
    have the mindset to use some popular coding standards and methodologies to keep
    our projects robust.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天这个快节奏的环境中，企业需要能够跟上他们不断变化需求的软件。在选择程序时，分析软件的可适应性、兼容性、可扩展性和安全性方面是至关重要的。软件需要能够随着企业的发展而发展，因此可适应性是必不可少的。可扩展性使软件能够根据不断变化的公司需求进行扩展，而兼容性则保证了它能够无缝地与其他重要内部系统集成。在可扩展性的问题上，我们有多种方法可以使我们的应用程序可扩展。例如，如果我们选择使用像Next.js这样的现代框架，那么我们就可以保证我们能够获得最新的工具和功能。当我们有使用一些流行的编码标准和方法的思维模式来保持我们的项目稳健时，这可以进一步增强。
- en: 'A few ways this can be accomplished are set out here:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了一些实现方式：
- en: '`.nvmrc` and `.npmrc` file for this.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为此需要`.nvmrc`和`.npmrc`文件。
- en: '**ESLint setup**: For JavaScript code analysis and spotting problematic patterns.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ESLint配置**：用于JavaScript代码分析和查找问题模式。'
- en: '**Prettier configuration**: So that every developer’s code follows the same
    formatting.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Prettier配置**：以确保每个开发者的代码遵循相同的格式。'
- en: '**Commit linting**: A way to lint our commit messages and ensure they adhere
    to a set of standards.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交代码审查**：一种审查我们的提交信息并确保它们遵循一系列标准的方法。'
- en: '**Framework customizations and plugins**: A framework can be further extended
    by enabling features and customizations that are outlined in the documentation
    or by installing third-party packages and tools.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**框架定制和插件**：可以通过启用文档中概述的功能和定制，或者通过安装第三方包和工具来进一步扩展框架。'
- en: Last but not least, security is the backbone of any software, safeguarding private
    information and making sure the program is resilient enough to fend off attackers.
    Businesses can make sure they have the software they need to succeed in today’s
    competitive environment by examining these essential qualities.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，安全性是任何软件的支柱，它保护私人信息并确保程序足够强大，能够抵御攻击者。通过检查这些基本品质，企业可以确保他们拥有在当今竞争激烈的环境中取得成功的软件。
- en: Choosing the right tool from the start of the project can save you a lot of
    time and give you more confidence in the code base. Let’s now read about how this
    can affect us in the long run.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从项目开始就选择正确的工具可以节省你大量的时间，并增加你对代码库的信心。现在让我们来看看这如何影响我们长远的发展。
- en: How do you choose the right tool or template that meets all your requirements
    to ensure a successful outcome?
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你如何选择满足你所有要求的正确工具或模板，以确保成功的结果？
- en: You must use the appropriate tool or template that satisfies all of your needs
    if you want to obtain a good conclusion. It might be difficult to choose the right
    tool or template, especially with so many possibilities available. However, you
    will be setting yourself up for success if you take the time to do your research
    and select the one that is most suited to your needs. Finding the ideal match
    for your project can ultimately save you time and effort, whether it’s a software
    program, a project management template, or an app. Avoid opting for a tool that
    is only *good enough*; instead, look harder to locate the one that will enable
    you to reach your goal.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要得到一个良好的结论，你必须使用满足你所有需求的适当工具或模板。在如此多的可能性面前，选择正确的工具或模板可能会很困难。然而，如果你花时间进行研究和选择最适合你需求的工具，你将为自己设定成功的条件。找到适合你项目的理想匹配最终可以节省你的时间和精力，无论是软件程序、项目管理模板还是应用程序。避免选择仅仅“足够好”的工具；相反，更努力地寻找能够帮助你实现目标的工具。
- en: For React applications, it’s crucial to pick the appropriate scaffolding tool
    or template. Prior to anything else, be sure to comprehend what scaffolding is
    and its significance. The size, complexity, and technology needed to complete
    your work should then be taken into account. Research all accessible tools or
    templates for the duties after that. Determine which tool or template best meets
    your needs by comparing its functionality to others. To achieve a good end result,
    consider each option’s adaptability, compatibility, scalability, and security
    characteristics before choosing one that best suits your needs. By following these
    steps, you’ll be able to pick a solid framework for your project and eventually
    simplify your work.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于React应用程序，选择合适的脚手架工具或模板至关重要。在考虑其他任何事情之前，务必理解什么是脚手架以及它的意义。然后，应考虑完成工作所需的大小、复杂性和技术。接下来，研究所有可用的工具或模板以完成这些任务。通过比较其功能与其他工具，确定哪个工具或模板最适合您的需求。在选择一个最适合您需求的选项之前，考虑每个选项的适应性、兼容性、可扩展性和安全性特征。遵循这些步骤，您将能够为项目选择一个坚实的框架，并最终简化工作。
- en: Staying on topic, we will now segue into the theme of application architecture,
    which is connected to scaffolding.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 保持话题一致，我们现在将过渡到应用程序架构的主题，这与脚手架有关。
- en: Deciding on the application architecture
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决定应用程序架构
- en: A number of aspects and considerations must be taken into account when choosing
    an application architecture for a React project. Maintainability, scalability,
    and reuse are encouraged by a well-designed architecture. The architecture ought
    to be adaptive and change with the needs of the project. As you get more expertise
    and familiarity with React, you’ll find yourself better able to make educated
    architectural design decisions. When the project expands and fresh demands arise,
    be willing to refactor and reconsider your decisions.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在为React项目选择应用程序架构时，必须考虑许多方面和因素。良好的架构鼓励可维护性、可扩展性和重用。架构应该具有适应性，并随着项目需求的变化而变化。随着您对React的熟练度和熟悉度提高，您将发现自己能够更好地做出明智的架构设计决策。当项目扩展和出现新的需求时，愿意重构和重新考虑您的决策。
- en: What do we need to think about when choosing an application architecture?
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择应用程序架构时，我们需要考虑哪些因素？
- en: Every project is different and, as a result, requires a different configuration.
    We have to take into account many different factors, which is something we have
    to do right at the start before we start to work on our project. There is no right
    or wrong answer because ultimately, it can come down to our personal preferences,
    team tech stack familiarity, or even client requirements.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目都是不同的，因此需要不同的配置。我们必须在开始工作之前考虑许多不同的因素。没有正确或错误答案，因为最终这可能会归结为我们的个人偏好、团队对技术栈的熟悉度，甚至是客户的要求。
- en: For example, if we were building a website that was taking payments, then many
    factors would need to be considered, such as a secure way to manage and take payments,
    and a way for users to sign up and create accounts. So, figuring out why we would
    choose one state management solution over another one or why we would choose a
    payment gateway such as Stripe instead of a different one are all options that
    we should be able to talk through.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们正在构建一个需要处理支付的网站，那么需要考虑许多因素，例如安全地管理和收取支付的方式，以及用户注册和创建账户的方式。因此，弄清楚为什么我们会选择一个状态管理解决方案而不是另一个，或者为什么我们会选择像Stripe这样的支付网关而不是其他支付网关，都是我们应该能够讨论的选项。
- en: Again, there is no right or wrong answer here; the main thing is that we can
    explain and justify our choices.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这里没有正确或错误答案；主要的是我们能够解释和证明我们的选择。
- en: 'To choose the best application architecture for our React project, we should
    consider the following characteristics:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为我们的React项目选择最佳的应用程序架构，我们应该考虑以下特征：
- en: '**State management**: Thinking about the component-to-component level of interaction
    and the level of detail of your application’s state, determine whether you require
    a state management tool such as Redux.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态管理**：考虑到组件间的交互级别和应用程序状态的详细程度，确定您是否需要像Redux这样的状态管理工具。'
- en: '**Routing**: If your application has to switch between various views or pages,
    configure your framework for routing or use an external routing framework such
    as React Router.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由**：如果您的应用程序需要在各种视图或页面之间切换，请配置您的框架以进行路由或使用如React Router的外部路由框架。'
- en: '**Recognizing project specifications**: Start by comprehending the project’s
    needs, scale, and scope. Decide on the main characteristics, the performance standards,
    and the different deployment platforms.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**识别项目规范**：首先理解项目的需求、规模和范围。确定主要特性、性能标准和不同的部署平台。'
- en: '**Future-proofing**: To provide for future expansion and modification, modularity
    and adaptability should be considered while designing your components, state management,
    and API design.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未来兼容性**：为了提供未来的扩展和修改，在设计组件、状态管理和 API 设计时，应考虑模块化和适应性。'
- en: '**The folder structure**: Ensure that your file and folder structures are logical,
    scalable, and well maintained. Group by category, such as components, media, and
    testing, or group by feature set.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件夹结构**：确保你的文件和文件夹结构是逻辑的、可扩展的，并且维护良好。按类别分组，例如组件、媒体和测试，或者按功能集分组。'
- en: '**Application programming interface (API)**: Determine any external libraries
    or APIs required for your task, such as those for data analysis, authorization,
    or other specialized functionality.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序编程接口 (API)**：确定完成任务所需的外部库或 API，例如用于数据分析、授权或其他专用功能的 API。'
- en: '**Static site generation (SSG) versus server-side rendering (SSR)**: To enhance
    performance and **search engine optimization** (**SEO**), use an SSR or SSG solution
    such as Next.js, Gatsby, or Remix, which can be chosen based on the requirements
    of your project.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态站点生成 (SSG) 与服务器端渲染 (SSR)**：为了提高性能和**搜索引擎优化**（**SEO**），使用 SSR 或 SSG 解决方案，如
    Next.js、Gatsby 或 Remix，可以根据项目需求进行选择。'
- en: '**Apply programming best practices and criteria**: Use linters such as ESLint,
    code formatters such as Prettier, and documented rules such as the popular Airbnb
    JavaScript style guide to enforce code standards and best practices throughout
    the project so that every developer’s code and project setup is consistent.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用编程最佳实践和标准**：使用 ESLint 等linters、Prettier 等代码格式化工具以及如 Airbnb JavaScript 风格指南等文档化规则，在整个项目中强制执行代码标准和最佳实践，以确保每个开发者的代码和项目设置保持一致。'
- en: '`styled-components`, Sass, or just plain CSS.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`styled-components`、Sass 或纯 CSS。'
- en: Now, we are going to learn about the aspects of testing our code in projects.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习在项目中测试代码的各个方面。
- en: Testing your code
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的代码
- en: All programmers must be able to take advantage of **version control systems**
    (**VCSs**) and conduct adequate tests on their code. Through testing your code,
    you can make sure that it performs as intended and that there are no mistakes
    when various potential inputs are used. Smooth team cooperation will be made possible
    by having efficient version control, and future job deployments will be able to
    manage source files more effectively. We will go into these crucial subjects in
    this section so that you’re equipped with the knowledge required for success.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 所有程序员都必须能够利用**版本控制系统**（**VCSs**）并对他们的代码进行充分的测试。通过测试你的代码，你可以确保它按预期运行，并且在各种潜在输入使用时没有错误。高效的版本控制将使团队协作更加顺畅，未来的工作部署将能够更有效地管理源文件。在本节中，我们将探讨这些关键主题，以便你具备成功所需的知识。
- en: Testing is significantly better when combined with version control. Let’s find
    out how it can help us in this next section.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 测试与版本控制相结合时效果显著。让我们在下一节中了解它如何帮助我们。
- en: Why should you use version control while testing your code?
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么在测试代码时要使用版本控制？
- en: There have been occasions when I forgot what I changed in my code or accidentally
    rewrote a piece of work and forgot what it was before. Version control solves
    these problems. It’s a mechanism that keeps track of modifications you’ve implemented
    in your code over time and lets you go back to earlier iterations if necessary.
    When testing your code, having a VCS set up is essential. It not only enables
    you to keep track of changes, but it also makes organized and secure teamwork
    possible. Version control can speed up the testing process, minimize mistakes,
    and overall make the whole process more effective.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候我会忘记我在代码中做了什么更改，或者不小心重写了某个部分，忘记了它原来的样子。版本控制解决了这些问题。它是一种机制，可以跟踪你随时间在代码中实施的更改，并在必要时让你回到早期版本。在测试代码时，设置一个
    VCS 是至关重要的。它不仅使你能够跟踪更改，而且还能使有组织和安全的团队合作成为可能。版本控制可以加快测试过程，减少错误，并使整个过程更加有效。
- en: We have learned some use cases for version control in this section. Now, we
    are going to find out about ways to track changes in our code base in the next
    section.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了一些版本控制的使用案例。现在，我们将探讨在下一节中跟踪代码库变化的方法。
- en: Which testing and change-tracking tools you should utilize for your code base?
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您应该为您的代码库使用哪些测试和变更跟踪工具？
- en: It might be difficult to test and keep track of changes in your code base, but
    the correct tools can really help. With so many alternatives available, it’s critical
    to select tools that are most effective for your particular need. Cypress and
    Selenium are two well-liked testing solutions that enable automated testing across
    several browsers. Version management tools such as Git and **Subversion** (**SVN**)
    can also make it simpler to track changes. In the case of mistakes, these technologies
    facilitate cooperation and simple rollbacks. Finding tools that will optimize
    your workflow and assist you in achieving your goals requires time-consuming study
    and testing out a variety of solutions.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 测试和跟踪代码库中的变化可能很困难，但正确的工具确实能提供很大帮助。在众多替代方案中，选择最适合您特定需求的工具至关重要。Cypress 和 Selenium
    是两个受欢迎的测试解决方案，它们能够跨多个浏览器实现自动化测试。版本管理工具如 Git 和 **Subversion** (**SVN**) 也可以使跟踪变化变得更加简单。在出现错误的情况下，这些技术有助于促进合作和简单的回滚。寻找能够优化您的流程并帮助您实现目标的工具需要花费时间进行研究和测试各种解决方案。
- en: Finally, let’s tie up this chapter by learning about the importance of creating
    a code repository with well-written documentation as we learn how to create a
    Git repository.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们通过学习如何创建 Git 仓库，来了解创建具有良好文档的代码库的重要性。
- en: Creating a Git repository with a README and sharing it
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建带有 README 的 Git 仓库并进行共享
- en: For many different kinds of reasons, building a code repository with excellent
    documentation is crucial. Let’s continue to read on so that we can understand
    why.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 由于许多不同的原因，构建具有优秀文档的代码库至关重要。让我们继续阅读，以便了解其中的原因。
- en: Why is creating a code repository with good documentation crucial?
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么创建具有良好文档的代码库至关重要？
- en: Developers can more easily comprehend the functionality, purpose, and design
    of a code base with the aid of clear documentation. They can utilize, contribute
    to, or alter the code more successfully as a result. A well-documented code repository
    makes it easier for team members to work together since everyone is aware of the
    code’s structure and intended use. This makes it simpler to talk about adjustments,
    work out problems, and monitor advancement.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者借助清晰的文档可以更容易地理解代码库的功能、目的和设计。因此，他们可以更成功地使用、贡献或修改代码。一个文档良好的代码库使得团队成员更容易协作，因为每个人都了解代码的结构和预期用途。这使得讨论变更、解决问题和监控进展变得更加容易。
- en: In essence, onboarding refers to the process of integrating new team members
    into a project. They rapidly become comfortable with the code base thanks to clear
    documentation, which lowers the learning curve and cuts down on the effort required
    to ask queries or look for solutions. There is another benefit of quality control.
    Test cases, anticipated results, and instructions for assisting with the project
    are frequently included in the documentation. This guarantees that updates comply
    with the project’s objectives and maintain the quality of the code.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，入职是指将新团队成员融入项目的过程。由于清晰的文档，他们可以迅速熟悉代码库，这降低了学习曲线，减少了提问或寻找解决方案所需的努力。质量控制还有另一个好处。测试用例、预期结果和协助项目的说明通常包含在文档中。这保证了更新符合项目目标并保持代码质量。
- en: We explain our code as it is produced, which generally results in time savings
    over the long term. Developers do not need to sift through the code or seek assistance
    from other developers; they can just turn to the docs for direction and clarification.
    The ability to maintain docs becomes considerably simpler when all of the aforementioned
    suggestions are integrated. Whenever the documentation is clear, it is simpler
    to preserve the code base as time goes on since it gives developers a complete
    guide to use when adding updates or addressing errors. This lessens the possibility
    of creating new problems or compromising current functionality.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按照代码生成的顺序来解释我们的代码，这通常会在长期内节省时间。开发者不需要筛选代码或寻求其他开发者的帮助；他们可以直接查阅文档以获取指导和澄清。当所有上述建议都整合在一起时，维护文档的能力会变得相当简单。每当文档清晰时，随着时间的推移，保留代码库也会变得简单，因为它为开发者提供了在添加更新或解决错误时使用的完整指南。这减少了创建新问题或损害当前功能的可能性。
- en: These enhancements could indicate a developer’s expertise and self-assurance.
    The repository reflects favorably on the developers and organizations participating
    with well-documented code. It exhibits a dedication to best practices, meticulousness,
    and consideration for the requirements of other developers. A well-documented
    code base increases the likelihood that others will find it valuable and expand
    upon it. This could result in more widespread developer community acceptance,
    cooperation, and innovation. To ensure comprehension, maintainability, and cooperation,
    it is essential to have a code repository with clear documentation. It enhances
    a project’s longevity and viability and favorably portrays the project’s developers.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这些增强功能可能表明开发者的专业知识和自信。存储库反映了参与者的良好表现，拥有良好文档的代码。它展示了致力于最佳实践、细致入微和对其他开发者需求的考虑。一个良好的代码库增加了其他人认为它有价值并在此基础上进行扩展的可能性。这可能导致更广泛的开发者社区接受、合作和创新。为了确保理解、可维护性和合作，拥有一个具有清晰文档的代码存储库至关重要。它提高了项目的长期性和可行性，并有利于展示项目的开发者。
- en: How do you create a Git repository?
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你如何创建一个Git存储库？
- en: 'Creating a new Git repository is a very easy process. Details of how to do
    so can be found here: [https://github.com/new](https://github.com/new).'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的Git存储库是一个非常简单的过程。如何操作的详细信息可以在这里找到：[https://github.com/new](https://github.com/new)。
- en: 'Essentially, all you have to do is create a new repository and then run the
    setup code inside your local project folder. An example of the code can be seen
    here:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你所要做的就是创建一个新的存储库，然后在你的本地项目文件夹中运行设置代码。代码的示例可以在这里看到：
- en: '[PRE4]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The code is autogenerated every single time we create a new repository, and
    it is configured for our project, so all we have to do is copy and paste the code
    into our command line to get our project set up and version controlled on Git.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们创建一个新的存储库时，代码都会自动生成，并且已经为我们的项目配置好了，所以我们只需要将代码复制粘贴到我们的命令行中，就可以设置我们的项目并使其在Git上受版本控制。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: As we get to the end of this chapter on solving any real-world programming problem,
    it is clear that a solid foundation and a systematic approach will substantially
    speed up the software development process. We have created a basis for a successful
    project by carefully configuring our development environment, selecting suitable
    scaffolding tools and templates, and selecting an acceptable application architecture.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们到达本章的结尾，关于解决任何现实世界编程问题的章节时，很明显，一个坚实的基础和系统化的方法将大大加快软件开发过程。我们通过仔细配置我们的开发环境，选择合适的脚手架工具和模板，以及选择可接受的应用程序架构，为成功项目奠定了基础。
- en: With everything that we have learned, we now have knowledge we can use when
    we get asked about setting up our development environment and some good reasons
    for choosing the right project architecture. These tend to be common interview
    questions or, at the very least, talking topics where we can show our experience
    and way of thinking when it comes to creating React projects.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我们所学的所有知识，我们现在有了在有人询问我们设置开发环境时可以使用的信息，以及选择正确项目架构的一些很好的理由。这些往往是常见的面试问题，或者至少是我们可以展示我们在创建React项目方面的经验和思考方式的谈话话题。
- en: The importance of testing also cannot be understated, and we are capable of
    talking about the reasons why it is an area that React developers should be taking
    seriously and using during the development process.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '测试的重要性也不容忽视，我们能够讨论为什么它是React开发者应该认真对待并在开发过程中使用的领域。 '
- en: We have emphasized the significance of implementing a rigorous testing plan
    to ensure the stability, scalability, and security of our code throughout this
    chapter. You can find and solve issues early in the development process by embracing
    TDD and adding a rigorous testing framework, thereby enhancing the overall quality
    of your product.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们强调了实施严格测试计划的必要性，以确保我们的代码在整个开发过程中的稳定性、可扩展性和安全性。通过采用TDD（测试驱动开发）和添加严格的测试框架，你可以在开发早期发现并解决问题，从而提高产品的整体质量。
- en: On top of that, we have emphasized the need to build a well-structured Git repository
    with a clear and informative README. This not only acts as a great reference for
    yourself and other developers in the future, but it also develops a working atmosphere
    that promotes ongoing growth.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还强调了构建一个结构良好、README清晰且信息丰富的Git仓库的必要性。这不仅为你和其他未来的开发者提供了一个极好的参考，而且还能营造一种促进持续发展的工作氛围。
- en: Ultimately, mastering the art of real-world programming necessitates a blend
    of technical knowledge, strategic planning, and good communication. You are now
    better prepared to handle any programming challenge with confidence and sophistication
    after polishing these abilities and adopting the best practices mentioned in this
    chapter. Remember that a software developer’s career is an ongoing learning experience,
    and as you continue to mature and evolve, you will find yourself more capable
    of overcoming even the most complicated obstacles in the field of software development.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，掌握现实编程的艺术需要技术知识、战略规划和良好沟通的融合。在磨炼这些能力并采纳本章中提到的最佳实践之后，你现在更有信心和技巧地应对任何编程挑战。记住，软件工程师的职业是一个持续的学习过程，随着你不断成熟和发展，你将发现自己能够克服软件开发领域中的任何复杂障碍。
- en: In the next chapter, we will be building an app based on React Hooks/Redux,
    `styled-components`, and Firebase. This will allow us to build on the knowledge
    we have gained up until now, further progressing our React and interview skills.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将基于React Hooks/Redux、`styled-components`和Firebase构建一个应用程序。这将使我们能够基于到目前为止所获得的知识，进一步推进我们的React和面试技能。
