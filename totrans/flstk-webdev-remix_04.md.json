["```js\n    app/routes folder. We can see that there are currently two files in the folder:*   `demo.tsx`*   `_index.tsx`You will find that this matches the hierarchy displayed by the `remix route` command. The hierarchy can be interpreted as a tree. Everything starts at the root (`root.tsx`). Nested, we have two child routes, each pointing to a file in the `routes` folder. Since the two route modules themselves have no children, they are leaves.Note that one route is flagged as `index`, while the demo route has a `path` property, which matches its filename. Each route segment in the routes hierarchy can have one index file. The index file is the default child route for a parent route and its URL path segment. The root of the `routes` folder maps to the `/`path. The `_index.tsx` file on the root level of the `routes` folder acts as the default route module for that path segment (`/`).\n    ```", "```js\n    import { H1 } from '~/components/headings';_index.tsx route module maps to the /path of the application. It is the default child route of the routes foler and renders when we visit the homepage of BeeRich. We will later see that this pattern holds true for every nested index file inside the routes hierarchy.\n    ```", "```js\n    Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object. GET request for an HTML document), Remix looked for a default export of a React component. However, we did not specify a default export, or even a React component for that matter.\n    ```", "```js\n    import { H1 } from '~/components/headings';export default function Component() {  return <H1>Login!</H1>;}\n    ```", "```js\n    npx remix routes\n    ```", "```js\n    <Routes>  <Route file=\"root.tsx\">    <Route index file=\"routes/_index.tsx\" />    <Route path=\"signup\" file=\"routes/signup.tsx\" />    <Route path=\"login\" file=\"routes/login.tsx\" />    <Route path=\"demo\" file=\"routes/demo.tsx\" />  </Route></Routes>\n    ```", "```js\n'routes/demo': {    id: 'routes/demo',\n    parentId: 'root',\n    path: 'demo',\n    module: '/build/routes/demo-EKLEFBX2.js',\n    imports: ['/build/_shared/chunk-AATHADRZ.js'],\n    hasAction: false,\n    hasLoader: false,\n    hasErrorBoundary: false,\n},\n```", "```js\n    import { H1 } from '~/components/headings';export default function Component() {  return (    <div className=\"w-full\">      <H1>Your expenses</H1>      <div className=\"mt-10 w-full flex flex-col-reverse         lg:flex-row\">        <section className=\"lg:p-8 w-full lg:max-w-2xl\">          <h2 className=\"sr-only\">All expenses</h2>          <ul className=\"flex flex-col\">            <li>              <p className=\"text-xl font-semibold\">Food</p>              <p>$100</p>            </li>            <li>              <p className=\"text-xl font-semibold\">Transport</p>              <p>$100</p>            </li>            <li>              <p className=\"text-xl font-semibold\">Entertainment                 </p>              <p>$100</p>            </li>          </ul>        </section>      </div>    </div>  );}\n    ```", "```js\n    <li>  <a href=\"/dashboard/expenses/1\">    <p className=\"text-xl font-semibold\">Food</p>    <p>$100</p>  </a></li>\n    ```", "```js\n    import { H2 } from '~/components/headings';export default function Component() {  return (    <div className=\"w-full h-full p-8\">      <H2>Food</H2>      <p>$100</p>    </div>  );}\n    ```", "```js\n    className attributes and the last two list items from this example for easier readability. You can find the complete code on GitHub.\n    ```", "```js\n    const data = [  {    id: 1,    title: 'Food',    amount: 100,  },  {    id: 2,    title: 'Transport',    amount: 100,  },  {    id: 3,    title: 'Entertainment',    amount: 100,  },];\n    ```", "```js\n    import type { LoaderFunctionArgs } from '@remix-run/node';import { json } from '@remix-run/node';export function loader({ loader function runs server-side before its route component is rendered. It is the perfect place to fetch data (on the server) dynamically based on route parameters.Remix exposes the `LoaderFunctionArgs` type to type the `loader` function’s arguments. As visible in the code, Remix provides a `params` argument that can be used to access the route parameters of the current URL.Using a parameterized route, we can now utilize the `params` argument to access the dynamic values of our URL. We access the `id` parameter from the parameter argument and use it to find the right expense from our mock data.We then return the expense object (using the `json` helper function provided by Remix). We will learn more about server-side data fetching and Remix’s server-side conventions and primitives in [*Chapter 5*](B17399_05.xhtml#_idTextAnchor078), *Fetching and* *Mutating Data*.\n    ```", "```js\n    import { useLoaderData } from '@remix-run/react';export default function Component {useLoaderData hook provides access to the route module’s loader data. In our case, we returned an expense object that we can now access in our React application.We pass `typeof loader` as the generic type variable to `userLoaderData` to infer the type of the loader data, based on the `loader` function’s return value. These type hints are great for autocompletion.With that, we have created a dynamic route that renders its content based on the URL!\n    ```", "```js\n    import { Outlet } from '@remix-run/react';import { Container } from '~/components/containers';export default function Component() {  return (    <>      <header>        <Container className=\"p-4 mb-10\">          <nav>            <ul className=\"w-full flex flex-row gap-5 font-bold               text-lg lg:text-2xl\">              <li>                <a href=\"/\">BeeRich</a>              </li>              <li className=\"ml-auto\">                <a href=\"/404\">Log out</a>              </li>            </ul>            <ul className=\"mt-10 w-full flex flex-row gap-5\">              <li className=\"ml-auto\">                <a href=\"/dashboard/income\">Income</a>              </li>              <li className=\"mr-auto\">                <a href=\"/dashboard/expenses\">Expenses</a>              </li>            </ul>          </nav>        </Container>      </header>      <main className=\"p-4 w-full flex justify-center items-        center\">        <Outlet />      </main>    </>  );}\n    ```", "```js\n    import { Outlet } from '@remix-run/react';export default function Component() {  return (    <>      <header className=\"mb-4 lg:mb-10\">        <nav className=\"p-4\">          <ul className=\"w-full flex flex-row gap-5 text-lg             lg:text-2xl font-bold\">            <li>              <a href=\"/\">Home</a>            </li>            <li className=\"ml-auto\">              <a href=\"/login\">Log in</a>            </li>            <li>              <a href=\"/signup\">Sign up</a>            </li>          </ul>        </nav>      </header>      <main className=\"p-4 w-full flex justify-center items-        center\">        <Outlet />      </main>    </>  );}\n    ```", "```js\n    import { Outlet } from '@remix-run/react';import { NavLink } from '~/components/links';export default function Component() {  return (    <>      <header className=\"mb-4 lg:mb-10\">        <nav className=\"p-4\">          <ul className=\"w-full flex flex-row gap-5 text-lg             lg:text-2xl font-bold\">            <li>              <NavLink to=\"/\">Home</NavLink>            </li>            <li className=\"ml-auto\">              <NavLink to=\"/login\">Log in</NavLink>            </li>            <li>              <NavLink to=\"/signup\">Sign up</NavLink>            </li>          </ul>        </nav>      </header>      <main className=\"p-4 w-full flex justify-center items-        center\">        <Outlet />      </main>    </>  );}\n    ```", "```js\n    import { Link components RemixLink to highlight that we are not using our own Link wrapper component. We also utilize another wrapper component – Container – to reuse some additional styling.\n    ```", "```js\n    import { Outlet } from '@remix-run/react';import { H1 } from '~/components/headings';ListLinkItem component from the components folder to add custom styling to the expenses list. Under the hood, the component renders Remix’s NavLink component.\n    ```", "```js\n    import { Outlet, useNavigation } from '@remix-run/react';\n    ```", "```js\n      const navigation = navigation.state property can have one of the following three values:*   `idle`*   `loading`*   `submitting`\n    ```", "```js\n    import clsx from 'clsx';\n    ```", "```js\n    loading state and conditionally render Tailwind’s built-in pulse animation.\n    ```", "```js\n    import { PageTransitionProgressBar } from './components/progress';\n    ```", "```js\n    <body className=\"bg-background dark:bg-darkBackground text-lg text-text dark:text-darkText\">  PageTransitionProgressBar component uses the navigation object and tracks a CSS animation across the idle, loading, and submitting states.\n    ```", "```js\nexport function loader({ params }: LoaderFunctionArgs) {  const { id } = params;\n  const expense = data.find((expense) => expense.id === Number(id));\n  if (!expense) throw new Response('Not found', { status: 404 });\n  return json(expense);\n}\n```", "```js\nimport { redirect } from '@remix-run/node';export function loader() {\n  return redirect('/dashboard/expenses');\n}\n```", "```js\nGET /dashboard 302 - - 2.918 msGET /dashboard/expenses 200 - - 8.031 ms\n```", "```js\nreturn new Response(null, {  status: 302,\n  headers: {\n    Location: '/dashboard/expenses',\n  },\n});\n```"]