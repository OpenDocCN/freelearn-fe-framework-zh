["```js\n    import React from \"react\";\n    import {\n      initializeReactContainer,\n      render,\n    } from \"./reactTestExtensions\";\n    import { App } from \"../src/App\";\n    ```", "```js\n    import {\n      AppointmentsDayViewLoader\n    } from \"../src/AppointmentsDayViewLoader\";\n    jest.mock(\"../src/AppointmentsDayViewLoader\", () => ({\n      AppointmentsDayViewLoader: jest.fn(() => (\n        <div id=\"AppointmentsDayViewLoader\" />\n      )),\n    }));\n    ```", "```js\n    describe(\"App\", () => {\n      beforeEach(() => {\n        initializeReactContainer();\n      });\n      it(\"initially shows the AppointmentDayViewLoader\", () => {\n        render(<App />);\n        expect(AppointmentsDayViewLoader).toBeRendered();\n      });\n    });\n    ```", "```js\n    import React from \"react\";\n    import ReactDOM from \"react-dom\";\n    import {\n      AppointmentsDayViewLoader\n    } from \"./AppointmentsDayViewLoader\";\n    export const App = () => (\n      <AppointmentsDayViewLoader />\n    );\n    ```", "```js\n    import {\n      initializeReactContainer,\n      render,\n      element,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    it(\"has a menu bar\", () => {\n      render(<App />);\n      expect(element(\"menu\")).not.toBeNull();\n    });\n    ```", "```js\n    export const App = () => (\n      <>\n        <menu />\n        <AppointmentsDayViewLoader />\n      </>\n    )\n    ```", "```js\n    it(\"has a button to initiate add customer and appointment action\", () => {\n      render(<App />);\n      const firstButton = element(\n        \"menu > li > button:first-of-type\"\n      );\n      expect(firstButton).toContainText(\n        \"Add customer and appointment\"\n      );\n    }); \n    ```", "```js\n    <menu>\n      <li>\n        <button type=\"button\">\n          Add customer and appointment\n        </button>\n      <li>\n    </menu>\n    ```", "```js\n    import { CustomerForm } from \"../src/CustomerForm\";\n    ```", "```js\n    jest.mock(\"../src/CustomerForm\", () => ({\n      CustomerForm: jest.fn(() => (\n        <div id=\"CustomerForm\" />\n      )),\n    }));\n    ```", "```js\n    import {\n      initializeReactContainer,\n      render,\n      element,\n      click,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    const beginAddingCustomerAndAppointment = () =>\n      click(element(\"menu > li > button:first-of-type\"));\n    it(\"displays the CustomerForm when button is clicked\", async () => {\n      render(<App />);\n      beginAddingCustomerAndAppointment();\n      expect(element(\"#CustomerForm\")).not.toBeNull();\n    });\n    ```", "```js\n    import React, { useState, useCallback } from \"react\";\n    import { CustomerForm } from \"./CustomerForm\";\n    ```", "```js\n    const [view, setView] = useState(\"dayView\");\n    ```", "```js\n    const transitionToAddCustomer = useCallback(\n      () => setView(\"addCustomer\"),\n      []\n    );\n    ```", "```js\n    <button\n      type=\"button\"\n      onClick={transitionToAddCustomer}>\n      Add customer and appointment\n    </button>\n    ```", "```js\n    return (\n      <>\n        <menu>\n          ...\n        </menu>\n        {view === \"addCustomer\" ? <CustomerForm /> : null}\n      </>\n    );\n    ```", "```js\n    it(\"passes a blank original customer object to CustomerForm\", async () => {\n      render(<App />);\n      beginAddingCustomerAndAppointment();\n      expect(CustomerForm).toBeRenderedWithProps(\n        expect.objectContaining({\n          original: blankCustomer\n        })\n      );\n    });\n    ```", "```js\n    export const blankCustomer = {\n      firstName: \"\",\n      lastName: \"\",\n      phoneNumber: \"\",\n    };\n    ```", "```js\n    import { blankCustomer } from \"./builders/customer\";\n    ```", "```js\n    const blankCustomer = {\n      firstName: \"\",\n      lastName: \"\",\n      phoneNumber: \"\",\n    };\n    ```", "```js\n    {view === \"addCustomer\" ? (\n        <CustomerForm original={blankCustomer} />\n    ) : null}\n    ```", "```js\n    it(\"hides the AppointmentsDayViewLoader when button is clicked\", async () => {\n      render(<App />);\n      beginAddingCustomerAndAppointment();\n      expect(\n        element(\"#AppointmentsDayViewLoader\")\n      ).toBeNull();\n    });\n    ```", "```js\n    { view === \"addCustomer\" ? (\n     <CustomerForm original={blankCustomer} />\n    ) : (\n     <AppointmentsDayViewLoader />\n    )}\n    ```", "```js\n    it(\"hides the button bar when CustomerForm is being displayed\", async () => {\n      render(<App />);\n      beginAddingCustomerAndAppointment();\n      expect(element(\"menu\")).toBeNull();\n    });\n    ```", "```js\n    return view === \"addCustomer\" ? (\n      <CustomerForm original={blankCustomer} />\n    ) : (\n      <>\n        <menu>\n          ...\n        </menu>\n        <AppointmentsDayViewLoader />\n      </>\n    );\n    ```", "```js\nit(\"displays the AppointmentFormLoader after the CustomerForm is submitted\", async () => {\n  // ...\n});\n```", "```js\n    export const propsOf = (mockComponent) => {\n      const lastCall = mockComponent.mock.calls[\n        mockComponent.mock.calls.length – 1\n      ];\n      return lastCall[0];\n    };\n    ```", "```js\n    import {\n      initializeReactContainer,\n      render,\n      element,\n      click,\n      propsOf,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    import { act } from \"react-dom/test-utils\";\n    ```", "```js\n    import {\n      AppointmentFormLoader\n    } from \"../src/AppointmentFormLoader\";\n    ```", "```js\n    jest.mock(\"../src/AppointmentFormLoader\", () => ({\n      AppointmentFormLoader: jest.fn(() => (\n        <div id=\"AppointmentFormLoader\" />\n      )),\n    }));\n    ```", "```js\n    const exampleCustomer = { id: 123 };\n    const saveCustomer = (customer = exampleCustomer) =>\n      act(() => propsOf(CustomerForm).onSave(customer));\n    ```", "```js\n    it(\"displays the AppointmentFormLoader after the CustomerForm is submitted\", async () => {\n      render(<App />);\n      beginAddingCustomerAndAppointment();\n      saveCustomer();\n      expect(\n        element(\"#AppointmentFormLoader\")\n      ).not.toBeNull();\n    });\n    ```", "```js\n    switch (view) {\n      case \"addCustomer\":\n        return (\n          <CustomerForm original={blankCustomer} />\n        );\n      default:\n        return (\n          <>\n            <menu>\n              <li>\n                <button\n                  type=\"button\"\n                  onClick={transitionToAddCustomer}>\n                  Add customer and appointment\n                </button>\n              </li>\n            </menu>\n            <AppointmentsDayViewLoader />\n          </>\n        );\n    }\n    ```", "```js\n    const transitionToAddAppointment = useCallback(\n      () => {\n      setView(\"addAppointment\")\n    }, []);\n    ```", "```js\n    <CustomerForm\n      original={blankCustomer}\n      onSave={transitionToAddAppointment}\n    />\n    ```", "```js\n    case \"addAppointment\":\n      return (\n        <AppointmentFormLoader />\n      );\n    ```", "```js\n    it(\"passes a blank original appointment object to CustomerForm\", async () => {\n      render(<App />);\n      beginAddingCustomerAndAppointment();\n      saveCustomer();\n      expect(AppointmentFormLoader).toBeRenderedWithProps(\n        expect.objectContaining({\n          original: \n            expect.objectContaining(blankAppointment),\n        })\n      );\n    });\n    ```", "```js\n    export const blankAppointment = {\n      service: \"\",\n      stylist: \"\",\n      startsAt: null,\n    };\n    ```", "```js\n    import {\n      blankAppointment\n    } from \"./builders/appointment\";\n    ```", "```js\n    const blankAppointment = {\n      service: \"\",\n      stylist: \"\",\n      startsAt: null,\n    };\n    ```", "```js\n    <AppointmentFormLoader original={blankAppointment} />\n    ```", "```js\n    it(\"passes the customer to the AppointmentForm\", async () => {\n      const customer = { id: 123 };\n      render(<App />);\n      beginAddingCustomerAndAppointment();\n      saveCustomer(customer);\n      expect(AppointmentFormLoader).toBeRenderedWithProps(\n        expect.objectContaining({\n          original: expect.objectContaining({\n            customer: customer.id,\n          }),\n        })\n      );\n    });\n    ```", "```js\n    const [customer, setCustomer] = useState();\n    ```", "```js\n    const transitionToAddAppointment = useCallback(\n      (customer) => {\n      setCustomer(customer);\n      setView(\"addAppointment\")\n    }, []);\n    ```", "```js\n    case \"addAppointment\":\n      return (\n        <AppointmentFormLoader\n          original={{\n            ...blankAppointment,\n            customer: customer.id,\n          }}\n        />\n    );\n    ```", "```js\n    const saveAppointment = () =>\n      act(() => propsOf(AppointmentFormLoader).onSave());\n    it(\"renders AppointmentDayViewLoader after AppointmentForm is submitted\", async () => {\n      render(<App />);\n      beginAddingCustomerAndAppointment();\n      saveCustomer();\n      saveAppointment();\n      expect(AppointmentsDayViewLoader).toBeRendered();\n    });\n    ```", "```js\n    const transitionToDayView = useCallback(\n      () => setView(\"dayView\"),\n      []\n    );\n    ```", "```js\n    case \"addAppointment\":\n      return (\n        <AppointmentFormLoader\n          original={{\n            ...blankAppointment,\n            customer: customer.id,\n          }}\n          onSave={transitionToDayView}\n        />\n      );\n    ```", "```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nReactDOM\n  .createRoot(document.getElementById(\"root\"))\n  .render(<App />);\n```"]