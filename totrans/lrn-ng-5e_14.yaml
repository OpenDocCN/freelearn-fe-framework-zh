- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Bringing Applications to Production
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序推向生产
- en: 'A web application should typically run on the web and be accessible by anyone
    and from anywhere. It needs two essential ingredients: a web server hosting the
    application and a production build to deploy it to that server. In this chapter,
    we will focus on the second part of the recipe.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Web 应用程序通常应该在 Web 上运行，并且任何人从任何地方都可以访问。它需要两个基本要素：一个托管应用程序的 Web 服务器和一个生产构建，以便将其部署到该服务器。在本章中，我们将关注食谱的第二部分。
- en: In a nutshell, a production build of a web application is an optimized version
    of the application code that is smaller, faster, and more performant. Primarily,
    it is a process that takes all the code files of the application, applies optimization
    techniques, and converts them into a single-bundle file.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，一个 Web 应用的生产构建是应用程序代码的优化版本，它更小、更快、性能更优。主要来说，这是一个将所有代码文件应用于优化技术，并将它们转换成一个单包文件的过程。
- en: In the previous chapters, we went through the many parts involved in building
    an Angular application. We need just one last piece to connect the dots and make
    our application available for anyone to use, which is to build it and deploy it
    to a web server.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们了解了构建 Angular 应用程序所涉及到的许多部分。我们只需要最后一块拼图，将所有部分连接起来，使我们的应用程序可供任何人使用，那就是构建它并将其部署到
    web 服务器上。
- en: 'In this chapter, we will learn about the following concepts:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下概念：
- en: Building an Angular application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 Angular 应用程序
- en: Limiting the application bundle size
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制应用程序包的大小
- en: Optimizing the application bundle
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化应用程序包
- en: Deploying an Angular application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署 Angular 应用程序
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The chapter contains various code samples to walk you through the concept of
    bringing applications to production.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含各种代码示例，以指导您了解将应用程序推向生产的概念。
- en: 'You can find the related source code in the `ch14` folder of the following
    GitHub repository:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下 GitHub 仓库的 `ch14` 文件夹中找到相关的源代码：
- en: '[https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition](https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition](https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition)'
- en: Building an Angular application
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 Angular 应用程序
- en: 'To build an Angular application, we use the following command of the Angular
    CLI:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建 Angular 应用程序，我们使用以下 Angular CLI 命令：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The build process boots up the Angular compiler, which primarily collects all
    TypeScript and HTML files of our application code and converts them into JavaScript.
    CSS stylesheet files such as SCSS are converted into pure CSS files. The build
    process ensures the fast and optimal rendering of our application in the browser.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 构建过程启动 Angular 编译器，它主要收集我们应用程序代码中的所有 TypeScript 和 HTML 文件，并将它们转换为 JavaScript。CSS
    样式表文件（如 SCSS）被转换为纯 CSS 文件。构建过程确保我们的应用程序在浏览器中的快速和最优渲染。
- en: 'An Angular application contains various TypeScript files not generally used
    during runtime, such as unit tests or tooling helpers. The compiler knows which
    files to collect for the build process by reading the `files` property of the
    `tsconfig.app.json` file:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Angular 应用程序包含各种 TypeScript 文件，这些文件在运行时通常不使用，例如单元测试或工具辅助程序。编译器通过读取 `tsconfig.app.json`
    文件的 `files` 属性来确定哪些文件需要收集到构建过程中：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `src/main.ts` file is the main entry point of the application and helps
    Angular to go through all the components, services, and other Angular artifacts
    that our application needs.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/main.ts` 文件是应用程序的主要入口点，它帮助 Angular 遍历我们应用程序需要的所有组件、服务和其它 Angular 元素。'
- en: 'The output of the `ng build` command looks like the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`ng build` 命令的输出如下所示：'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This output displays the JavaScript and CSS files generated from building the
    Angular application, namely:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出显示了从构建 Angular 应用程序生成的 JavaScript 和 CSS 文件，即：
- en: '`main` : The actual application code that we have written'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main`：我们所编写的实际应用程序代码'
- en: '`polyfills` : Feature polyfills for older browsers'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`polyfills`：为旧浏览器提供的功能 polyfills'
- en: '`styles` : Global CSS styles of our application'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`styles`：我们应用程序的全局 CSS 样式'
- en: 'The Angular compiler outputs the preceding files into a `dist\appName\browser`
    folder, where `appName` is the application name. It also contains the following
    files:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 编译器将前面的文件输出到 `dist\appName\browser` 文件夹中，其中 `appName` 是应用程序名称。它还包含以下文件：
- en: '`favicon.ico` : The icon of the Angular application'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`favicon.ico`：Angular 应用程序的图标'
- en: '`index.html` : The main HTML file of the Angular application'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`：Angular 应用程序的主要 HTML 文件'
- en: 'The `ng build` command of the Angular CLI can be run in two modes: development
    and production. By default, it is run in production mode. To run it in development
    mode, we should run the following Angular CLI command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI 的 `ng build` 命令可以在两种模式下运行：开发和生产。默认情况下，它以生产模式运行。要将其以开发模式运行，我们应该运行以下
    Angular CLI 命令：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding command will have an output that looks like the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将产生如下所示的输出：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding output, you may notice that the names of the `Initial chunk
    files` do not contain hash numbers, as in the case of a production build. In production
    mode, the Angular CLI performs various optimization techniques on the application
    code, such as image optimization and **Ahead of Time** ( **AOT** ) compilation,
    so that the final output is suitable for hosting in a web server and a production
    environment. The hash number added to each file ensures that the cache of a browser
    will quickly invalidate them upon deploying a newer version of the application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，您可能会注意到 `Initial chunk files` 的名称不包含哈希数字，这与生产构建的情况不同。在生产模式下，Angular
    CLI 对应用程序代码执行各种优化技术，例如图像优化和**即时编译**（**AOT**），以确保最终输出适合托管在 Web 服务器和生产环境中。添加到每个文件的哈希数字确保在部署应用程序的新版本时，浏览器的缓存会快速失效它们。
- en: When we ran the `ng build` command of the Angular CLI in development mode, we
    used the `--configuration` option. The `--configuration` option allows us to run
    an Angular application in different environments. We will learn how to define
    Angular environments in the following section.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在开发模式下运行 Angular CLI 的 `ng build` 命令时，我们使用了 `--configuration` 选项。`--configuration`
    选项允许我们在不同的环境中运行 Angular 应用程序。我们将在下一节学习如何定义 Angular 环境。
- en: Building for different environments
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为不同环境构建
- en: An organization may want to build an Angular application for multiple environments
    that require different variables, such as a backend API endpoint and application
    local settings. A common use case is a staging environment for testing the application
    before deploying it to production.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一个组织可能希望为需要不同变量（如后端 API 端点和应用程序本地设置）的多个环境构建 Angular 应用程序。一个常见的用例是在部署到生产之前测试应用程序的预发布环境。
- en: 'The Angular CLI enables us to define different configurations for each environment
    and build our application with each one. We can execute the `ng build` command
    while passing the configuration name as a parameter using the following syntax:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI 允许我们为每个环境定义不同的配置，并使用每个配置构建我们的应用程序。我们可以使用以下语法在执行 `ng build` 命令时传递配置名称作为参数：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can also pass a configuration in other Angular CLI commands, such as `ng
    serve` and `ng test` .
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在其他 Angular CLI 命令中传递配置，例如 `ng serve` 和 `ng test`。
- en: 'We can use the following Angular CLI command to start working with environments:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下 Angular CLI 命令来开始使用环境：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This command will create a `src\environments` folder in the Angular project
    that contains the following files:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在 Angular 项目中创建一个 `src\environments` 文件夹，其中包含以下文件：
- en: '`environment.ts` : The default environment of the application, which is used
    during production'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`environment.ts`：应用程序的默认环境，在生产期间使用'
- en: '`environment.development.ts` : The application environment used during development'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`environment.development.ts`：开发期间使用的应用程序环境'
- en: 'It will also add a `fileReplacements` section in the `angular.json` configuration
    file of the Angular project:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 它还会在 Angular 项目的 `angular.json` 配置文件中添加一个 `fileReplacements` 部分：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding snippet, the `fileReplacements` property defines the environment
    file that will replace the default one while executing the `build` command in
    the `development` environment. If we run the `ng build --configuration=development`
    command, the Angular CLI will replace the `environment.ts` file with the `environment.development.ts`
    file in the application bundle.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`fileReplacements` 属性定义了在执行 `build` 命令时的 `development` 环境中将替换默认环境文件的环境文件。如果我们运行
    `ng build --configuration=development` 命令，Angular CLI 将将应用程序包中的 `environment.ts`
    文件替换为 `environment.development.ts` 文件。
- en: 'Each environment file exports an `environment` object where we can define additional
    application properties such as the URL of a backend API:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每个环境文件导出一个 `environment` 对象，其中我们可以定义额外的应用程序属性，例如后端 API 的 URL：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The same properties of the exported object must be defined in all environment
    files.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所有环境文件中必须定义导出对象的相同属性。
- en: 'We need to import the default environment to access an environment property
    in an Angular application. For example, to use the `apiUrl` property in the main
    application component, we should do the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要导入默认环境才能在Angular应用程序中访问环境属性。例如，要使用主应用程序组件中的`apiUrl`属性，我们应该这样做：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Not all libraries in an Angular application can be imported as a JavaScript
    module, as most of the Angular first-party libraries are. In the following section,
    we will learn how to import libraries that need the global `window` object.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 并非Angular应用程序中的所有库都可以像大多数Angular第一方库那样导入为JavaScript模块。在下一节中，我们将学习如何导入需要全局`window`对象的库。
- en: Building for the window object
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为窗口对象构建
- en: An Angular application may use a library like **jQuery** that must be attached
    to the `window` object. Other libraries, such as **Bootstrap** , have fonts, icons,
    and CSS files that must be included in the application bundle.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Angular应用程序可能使用像**jQuery**这样的库，它必须附加到`window`对象上。其他库，如**Bootstrap**，包含字体、图标和CSS文件，这些文件必须包含在应用程序包中。
- en: In all these cases, we need to tell the Angular CLI about their existence so
    that it can include them in the final bundle.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些情况下，我们需要告诉Angular CLI它们的存在，以便它可以将其包含在最终包中。
- en: 'The `angular.json` configuration file contains an `options` object in the `build`
    configuration that we can use to define such files:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`angular.json`配置文件包含一个在`build`配置中的`options`对象，我们可以使用它来定义此类文件：'
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `options` object contains the following properties that we can use:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`options`对象包含以下属性，我们可以使用它们：'
- en: '`assets` : Contains static files from the `public` folder such as icons, fonts,
    and translations.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assets`：包含来自`public`文件夹的静态文件，如图标、字体和翻译。'
- en: '`styles` : Contains external CSS stylesheet files. The global CSS stylesheet
    file of the application is included by default.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`styles`：包含外部CSS样式表文件。默认情况下，应用程序的全局CSS样式表文件被包含在内。'
- en: '`scripts` : Contains external JavaScript files.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scripts`：包含外部JavaScript文件。'
- en: As we add more and more features to an Angular application, the final bundle
    will grow bigger at some point. In the following section, we’ll learn how to mitigate
    such an effect using budgets.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们向Angular应用程序添加越来越多的功能，最终包的大小在某些时候会变得更大。在下一节中，我们将学习如何使用预算来减轻这种影响。
- en: Limiting the application bundle size
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制应用程序包的大小
- en: As developers, we always want to build impressive applications with cool features
    for the end user. As such, we end up adding more and more features to our Angular
    application – sometimes according to the specifications and at other times to
    provide additional value to users. However, adding new functionality to an Angular
    application will cause it to grow in size, which may not be acceptable at some
    point. To overcome this problem, we can use **budgets** .
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，我们总是希望为最终用户提供具有酷炫功能的令人印象深刻的程序。因此，我们最终会向我们的Angular应用程序添加越来越多的功能——有时根据规格，有时为了向用户提供额外的价值。然而，向Angular应用程序添加新功能会导致其大小增加，这可能在某些时候是不可接受的。为了克服这个问题，我们可以使用**预算**。
- en: 'Budgets are thresholds that we can define in the `angular.json` configuration
    file, and we can make sure that the size of our application does not exceed those
    thresholds. To set budgets, we can use the `budgets` property of the `production`
    configuration in the `build` command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 预算是我们可以在`angular.json`配置文件中定义的阈值，我们可以确保应用程序的大小不超过这些阈值。要设置预算，我们可以使用`build`命令中的`production`配置的`budgets`属性：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The Angular CLI defines the preceding default budgets when creating a new Angular
    CLI project.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI在创建新的Angular CLI项目时定义了前面的默认预算。
- en: We can define a budget for different types, such as the whole Angular application
    or some parts of it. The threshold of a budget can be defined as bytes, kilobytes,
    megabytes, or a percentage of it. The Angular CLI displays a warning or throws
    an error when the size is reached or exceeds the defined value of the threshold.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为不同类型定义预算，例如整个Angular应用程序或其某些部分。预算的阈值可以定义为字节、千字节、兆字节或其百分比。当达到或超过阈值定义的值时，Angular
    CLI会显示警告或抛出错误。
- en: 'To better understand it, let’s describe the previous default example:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解它，让我们描述前面的默认示例：
- en: A warning is shown when the size of the Angular application exceeds `500` KB
    and an error when it goes over `1` MB.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当Angular应用程序的大小超过`500` KB时，会显示警告，当超过`1` MB时，会显示错误。
- en: A warning is shown when the size of any component style exceeds `4` KB and an
    error when it goes over `8` .
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当任何组件样式的尺寸超过`4` KB时，会显示警告，当超过`8` KB时，会显示错误。
- en: To see all available options you can define when configuring budgets in an Angular
    application, check out the guide on the official documentation website at [https://angular.dev/tools/cli/build/#configuring-size-budgets](https://angular.dev/tools/cli/build/#configuring-size-budgets)
    .
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看在配置Angular应用程序的预算时可以定义的所有可用选项，请查看官方文档网站上的指南：[https://angular.dev/tools/cli/build/#configuring-size-budgets](https://angular.dev/tools/cli/build/#configuring-size-budgets)。
- en: Budgets are great to use when we want to provide an alert mechanism in case
    our Angular application grows significantly. However, they are just a level of
    information and precaution. In the following section, we will learn how to minimize
    our bundle size.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望提供一种警报机制以应对Angular应用程序显著增长时，预算是非常有用的。然而，它们只是信息预防和措施的一个级别。在下一节中，我们将学习如何最小化我们的包大小。
- en: Optimizing the application bundle
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化应用程序包
- en: 'As we learned in the *Building an Angular application* section, the Angular
    CLI performs optimization techniques when we build an Angular application. The
    optimization process that is performed in the application code includes modern
    web techniques and tools, including the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在*构建Angular应用程序*部分中学到的，当我们构建Angular应用程序时，Angular CLI会执行优化技术。在应用程序代码中执行的优化过程包括现代Web技术和工具，如下所示：
- en: '**Minification** : Converts multiline source files into a single line, removing
    white space and comments. It is a process that enables browsers to parse them
    faster later on.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**压缩**：将多行源文件转换为单行，删除空白和注释。这是一个使浏览器能够更快地解析它们的进程。'
- en: '**Uglification** : Renames properties and methods to a non-human-readable form
    so that they are difficult to understand and use for malicious purposes.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混淆**：将属性和方法重命名为非人类可读的形式，以便它们难以理解和用于恶意目的。'
- en: '**Bundling** : Concatenates all source files of the application into a single
    file, called the bundle.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打包**：将应用程序的所有源文件连接成一个单一的文件，称为包。'
- en: '**Tree-shaking** : Removes unused files and Angular artifacts, such as components
    and services, resulting in a smaller bundle.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**摇树优化**：删除未使用的文件和Angular组件和服务等Angular工件，从而减小包的大小。'
- en: '**Font optimization** : Inlines external font files in the main HTML file of
    the application without blocking render requests. It currently supports Google
    Fonts and Adobe Fonts and requires an internet connection to download them.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字体优化**：在应用程序的主要HTML文件中内联外部字体文件，而不会阻塞渲染请求。它目前支持Google Fonts和Adobe Fonts，并需要互联网连接来下载它们。'
- en: '**Build cache** : Caches the previous build state and restores it when we run
    the same build, decreasing the time taken to build the application.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建缓存**：缓存之前的构建状态，并在我们运行相同的构建时恢复它，从而减少构建应用程序所需的时间。'
- en: 'If the final bundle of an Angular application remains large after all preceding
    optimization techniques, we can use an external tool called `source-map-explorer`
    to investigate the cause. Perhaps we have imported a JavaScript library twice
    or included an unused file. The tool analyzes our application bundle and displays
    all Angular artifacts and libraries we use in a visual representation. To start
    using it, do the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在所有先前的优化技术之后，Angular应用程序的最终包仍然很大，我们可以使用一个名为`source-map-explorer`的外部工具来调查原因。也许我们重复导入了JavaScript库或包含了一个未使用的文件。该工具分析我们的应用程序包，并以可视化的形式显示我们使用的所有Angular工件和库。要开始使用它，请按照以下步骤操作：
- en: 'Install the `source-map-explorer` npm package from the terminal:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从终端安装`source-map-explorer` npm包：
- en: '[PRE12]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Build your Angular application and enable source maps:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建您的Angular应用程序并启用源映射：
- en: '[PRE13]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the following script in the `package.json` file:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`package.json`文件中添加以下脚本：
- en: '[PRE14]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Run the following command against the `main` bundle file:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`包文件上运行以下命令：
- en: '[PRE15]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'It will open up a visual representation of the application bundle in the browser:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 它将在浏览器中打开应用程序包的视觉表示：
- en: '![img](img/B21418_14_01.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![img](img/B21418_14_01.png)'
- en: 'Figure 14.1: Source map explorer output'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1：源映射探索器输出
- en: 'We can then interact with it and inspect it to understand why our bundle is
    still too large. Some causes may be the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以与之交互并检查它，以了解为什么我们的包仍然太大。一些可能的原因如下：
- en: A library is included twice in the bundle
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包中包含了一个库
- en: A library that cannot be tree-shaken is included but is not currently used
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含了一个无法摇树优化的库，但当前并未使用
- en: The last step after we build our Angular application is to deploy it to a web
    server, as we will learn in the following section.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们构建Angular应用程序之后的最后一步是将它部署到Web服务器，正如我们将在下一节中学习的那样。
- en: Deploying an Angular application
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署 Angular 应用
- en: 'If you already have a web server that you want to use for your Angular application,
    you can copy the contents of the output folder to a path in that server. If you
    want to deploy it in another folder other than the root, you can change the `href`
    attribute of the `<base>` tag in the main HTML file in the following ways:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经有一个想要用于 Angular 应用的网络服务器，你可以将输出文件夹的内容复制到该服务器的一个路径。如果你想将其部署到根目录以外的其他文件夹，你可以按照以下方式更改主
    HTML 文件中 `<base>` 标签的 `href` 属性：
- en: 'Passing the `--base-href` option in the `ng build` command:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `ng build` 命令中传递 `--base-href` 选项：
- en: '[PRE16]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Setting the `baseHref` property in the `build` command of the `angular.json`
    configuration file:'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `angular.json` 配置文件的 `build` 命令中设置 `baseHref` 属性：
- en: '[PRE17]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you do not want to deploy it to a custom server, you can use the Angular
    CLI tooling to deploy it in a supported hosting provider, which you can find at
    [https://angular.dev/tools/cli/deployment#automatic-deployment-with-the-cli](https://angular.dev/tools/cli/deployment#automatic-deployment-with-the-cli)
    .
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想将其部署到自定义服务器，你可以使用 Angular CLI 工具将应用部署到支持的托管提供商，具体信息可以在[https://angular.dev/tools/cli/deployment#automatic-deployment-with-the-cli](https://angular.dev/tools/cli/deployment#automatic-deployment-with-the-cli)
    找到。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The deployment of an Angular application is the simplest and most crucial part
    because it finally makes your awesome application available to the end user. Web
    applications are all about delivering experiences to the end user at the end of
    the day.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 应用的部署是最简单且最重要的部分，因为它最终使你的优秀应用对最终用户可用。毕竟，Web 应用都是关于向最终用户提供体验的。
- en: In this chapter, we learned how to build an Angular application and make it
    ready for production. We also investigated different ways to optimize the final
    bundle and learned how to deploy an Angular application into a custom server,
    manually and automatically, for other hosting providers.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何构建 Angular 应用并将其准备好用于生产。我们还探讨了优化最终包的不同方法，并学习了如何将 Angular 应用部署到自定义服务器，手动和自动地部署到其他托管提供商。
- en: In the next chapter, which is also the final chapter of the book, we will learn
    how to improve the performance of an Angular application.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，也就是本书的最后一章，我们将学习如何提高 Angular 应用的性能。
