- en: Chapter 5. Developing Web Components Using Mozilla Brick
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章：使用 Mozilla Brick 开发 Web 组件
- en: In this chapter, we will learn about the Mozilla Brick UI components. We will
    cover the installation and configuration of Brick in an application. We will also
    explore what is upcoming in Mozilla Brick 2.0.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习关于 Mozilla Brick UI 组件的内容。我们将介绍在应用程序中安装和配置 Brick 的方法。我们还将探讨 Mozilla
    Brick 2.0 即将推出什么新功能。
- en: What is the Brick library?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Brick 库是什么？
- en: The Mozilla Brick library provides a set of elements based on the web component
    specification. The motto behind the Brick framework is *strong opinions*, *tightly
    scoped*. This means that the Brick framework does not focus on code structure,
    data binding, or any other problem. It provides the web interface that can be
    easily integrated with any other library. Brick elements are developed on top
    of the custom element API. This custom element API involves shadow DOM, HTML Imports,
    template element, and custom element. Brick provides a standard interface that
    can easily be interpolated with other application frameworks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla Brick 库提供了一组基于 Web 组件规范的元素。Brick 框架背后的座右铭是 *强烈的观点*，*紧密的范围*。这意味着 Brick
    框架不专注于代码结构、数据绑定或任何其他问题。它提供了一个可以轻松与其他库集成的 Web 接口。Brick 元素是在自定义元素 API 之上开发的。这个自定义元素
    API 包括阴影 DOM、HTML 导入、模板元素和自定义元素。Brick 提供了一个标准接口，可以轻松与其他应用程序框架进行交互。
- en: Mozilla Brick provided a **UIKit** for the web that can be used by the developers
    to create web application. Brick components are written in vanilla style JavaScript
    for development.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla Brick 为 Web 开发者提供了一个 **UIKit**，可用于创建 Web 应用程序。Brick 组件是用纯 JavaScript
    编写的，以便于开发。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To find out more about Mozilla Brick framework visit:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Mozilla Brick 框架的信息，请访问：
- en: '[https://mozbrick.github.io/](https://mozbrick.github.io/)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mozbrick.github.io/](https://mozbrick.github.io/)'
- en: Mozilla Brick 1.0
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mozilla Brick 1.0
- en: 'The current released version of Mozilla Brick is 1.0\. The following diagram
    shows the building blocks of the Mozilla Brick framework:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当前发布的 Mozilla Brick 版本是 1.0。以下图表显示了 Mozilla Brick 框架的构建块：
- en: '![Mozilla Brick 1.0](img/image00311.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![Mozilla Brick 1.0](img/image00311.jpeg)'
- en: 'The details of the preceding Mozilla Brick 1.0 block diagram are listed here:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 Mozilla Brick 1.0 块图的详细信息在此列出：
- en: '**Platform**: This represents the native support for web component specification
    and the polyfill script files for unsupported features.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台**：这代表了对 Web 组件规范的本地支持以及不支持功能的 polyfill 脚本文件。'
- en: '**X-Tag**: This represents the X-Tag libraries to create elements.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**X-Tag**：这代表用于创建元素的 X-Tag 库。'
- en: '**Brick web components**: This represents the UI toolkit of built-in elements
    for developers to use in web applications.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Brick Web 组件**：这代表开发人员在 Web 应用程序中使用的内置元素 UI 工具包。'
- en: Mozilla Brick 2.0
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mozilla Brick 2.0
- en: 'Mozilla Brick 2.0 is the new version of Brick framework. This library is released
    for application development. The following screenshot shows the block diagram
    of Mozilla Brick 2.0:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla Brick 2.0 是 Brick 框架的新版本。这个库是为了应用开发而发布的。以下截图显示了 Mozilla Brick 2.0 的块图：
- en: '![Mozilla Brick 2.0](img/image00312.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Mozilla Brick 2.0](img/image00312.jpeg)'
- en: 'The details of the preceding Mozilla Brick 2.0 block diagram are listed here:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 Mozilla Brick 2.0 块图的详细信息在此列出：
- en: '**Platform**: This represents the native support for web component specification
    and the polyfill script files for unsupported features. This polyfill file is
    `platform.js`, which has been used by the PolymerJS framework. In the current
    release of PolymerJS, the `platform.js` file has been renamed to `webcomponents.js`.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台**：这代表了对 Web 组件规范的本地支持以及不支持功能的 polyfill 脚本文件。这个 polyfill 文件是 `platform.js`，它已被
    PolymerJS 框架使用。在当前版本的 PolymerJS 中，`platform.js` 文件已被重命名为 `webcomponents.js`。'
- en: Note
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find more information on polyfill using the following link:'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以通过以下链接找到有关 polyfill 的更多信息：
- en: '[http://webcomponents.org/polyfills](http://webcomponents.org/polyfills)'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://webcomponents.org/polyfills](http://webcomponents.org/polyfills)'
- en: '**Brick web components**: This represents a set of built-in UI elements that
    can be used by the developer in web application.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Brick Web 组件**：这代表了一组内置 UI 元素，开发人员可以在 Web 应用程序中使用。'
- en: Installing Mozilla Brick
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Mozilla Brick
- en: 'The Mozilla Brick framework can be installed using the Bower package manager.
    If Bower is not installed on your system, then use the following link to install
    it:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla Brick 框架可以使用 Bower 软件包管理器进行安装。如果您的系统上没有安装 Bower，请使用以下链接进行安装：
- en: '[http://bower.io/#install-bower](http://bower.io/#install-bower)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bower.io/#install-bower](http://bower.io/#install-bower)'
- en: 'Assuming that the Bower is installed on your system, use the following command
    to install Mozilla Brick:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 Bower 已安装在您的系统上，请使用以下命令安装 Mozilla Brick：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following screenshot shows the terminal with Mozilla Brick installation
    using the Bower package manager:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用 Bower 软件包管理器安装 Mozilla Brick 的终端：
- en: '![Installing Mozilla Brick](img/image00313.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Mozilla Brick](img/image00313.jpeg)'
- en: 'Once the Mozilla Brick is installed successfully, it creates a parent directory
    `bower_components` where other Brick components are copied to their respective
    subdirectories. The following screenshot shows the terminal with the created directory
    structure:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Mozilla Brick 安装成功，它会在 `bower_components` 目录下创建一个父目录，其他 Brick 组件会被复制到各自的子目录中。以下截图显示了创建的目录结构的终端：
- en: '![Installing Mozilla Brick](img/image00314.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Mozilla Brick](img/image00314.jpeg)'
- en: Configuring Mozilla Brick
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Mozilla Brick
- en: 'The Mozilla Brick library can be configured to a web application by including
    two files inside the `<head>` element. These two files are listed as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla Brick 库可以通过在 `<head>` 元素内包含两个文件来配置为 Web 应用程序。这两个文件如下所示：
- en: '`platform.js`: This file contains all the polyfill scripts needed for supporting
    web component specification. The `platform.js` polyfill library is present inside
    the platform subdirectory. The following screenshot shows the terminal with the
    `platform.js` file:![Configuring Mozilla Brick](img/image00315.jpeg)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`platform.js`：此文件包含所有支持 Web 组件规范的 polyfill 脚本。`platform.js` polyfill 库位于平台子目录中。以下截图显示了包含
    `platform.js` 文件的终端：![配置 Mozilla Brick](img/image00315.jpeg)'
- en: '`Brick.html`: This file combines all the Brick elements into a single file
    and places it inside the `dist` subdirectory under `brick` directory. The following
    screenshot shows the terminal for the `brick.html` directory structure:![Configuring
    Mozilla Brick](img/image00316.jpeg)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Brick.html`：此文件将所有 Brick 元素合并到一个文件中，并将其放置在 `brick` 目录下的 `dist` 子目录中。以下截图显示了
    `brick.html` 目录结构的终端：![配置 Mozilla Brick](img/image00316.jpeg)'
- en: 'The Brick framework library can be added to a web page by including the `platform.js`
    polyfill and the `brick.html` file. The following code shows the HTML code for
    including Brick framework in the web page:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过包含 `platform.js` polyfill 和 `brick.html` 文件，可以将 Brick 框架库添加到 Web 页面中。以下代码显示了将
    Brick 框架包含在网页中的 HTML 代码：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Built-in components
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置组件
- en: Mozilla Brick 1.0 has many built-in components for web application development.
    In this section, we will explore some of them.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla Brick 1.0 为 Web 应用程序开发提供了许多内置组件。在本节中，我们将探讨其中的一些。
- en: The brick-calendar element
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: brick-calendar 元素
- en: 'The `brick-calendar` element represents a calendar component and can be used
    by calling the following custom tag in the HTML page:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`brick-calendar` 元素代表一个日历组件，可以在 HTML 页面中通过调用以下自定义标签来使用：'
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `brick-calendar` element can be used by including polyfill and calendar
    definition files in the web application. The following code can be included to
    use the Brick''s calendar component:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`brick-calendar` 元素可以通过在 Web 应用程序中包含 polyfill 和日历定义文件来使用。以下代码可以包含以使用 Brick
    的日历组件：'
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following screenshot shows the `brick-calendar` component rendered in a
    browser, and the HTML element inspection using Chrome developer console:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在浏览器中渲染的 `brick-calendar` 组件，以及使用 Chrome 开发者控制台进行的 HTML 元素检查：
- en: '![The brick-calendar element](img/image00317.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![brick-calendar 元素](img/image00317.jpeg)'
- en: The brick-flipbox element
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: brick-flipbox 元素
- en: 'The `brick-flipbox` element is used for flipping between content using animations,
    and can be used by calling the following custom tag in the HTML page:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`brick-flipbox` 元素用于通过动画在内容之间切换，可以在 HTML 页面中通过调用以下自定义标签来使用：'
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `brick-flipbox` element can be used by including polyfill and flipbox definition
    files in the web application. The following code can be included to use the Brick''s
    flipbox component:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`brick-flipbox` 元素可以通过在 Web 应用程序中包含 polyfill 和 flipbox 定义文件来使用。以下代码可以包含以使用
    Brick 的 flipbox 组件：'
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s check out an example of using `brick-flipbox` in a web application.
    The following code contains the use of flipbox:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在 Web 应用程序中使用 `brick-flipbox` 的一个示例。以下代码包含了 flipbox 的使用：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output of the preceding code is listed in the following screenshot showing
    the content of flipbox and a **Flip** button:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出列在以下截图所示，显示了 flipbox 的内容和 **翻转** 按钮：
- en: '![The brick-flipbox element](img/image00318.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![brick-flipbox 元素](img/image00318.jpeg)'
- en: 'When the **Flip** button is pressed, then the callback method gets called.
    The callback method gets the flipbox instance and calls the `toggle` method. The
    `toggle` method flips the content based on the `direction` property, which is
    set to `left`. This method prints the value of the `flipped` property, which returns
    the Boolean value `true` if the flipbox is flipped. The following screenshot shows
    the console log message when the **Flip** button is pressed:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当按下**翻转**按钮时，回调方法被调用。回调方法获取翻转框实例并调用`toggle`方法。`toggle`方法根据`direction`属性翻转内容，该属性设置为`left`。此方法打印`flipped`属性的值，如果翻转框被翻转，则返回布尔值`true`。以下截图显示了按下**翻转**按钮时的控制台日志消息：
- en: '![The brick-flipbox element](img/image00319.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![砖块式翻转框元素](img/image00319.jpeg)'
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find more information about the `brick-flipbox` element using following
    link:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下链接找到有关`brick-flipbox`元素的更多信息：
- en: '[https://mozbrick.github.io/docs/brick-flipbox.html](https://mozbrick.github.io/docs/brick-flipbox.html)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mozbrick.github.io/docs/brick-flipbox.html](https://mozbrick.github.io/docs/brick-flipbox.html)'
- en: The brick-deck element
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 砖块式面板元素
- en: 'The `brick-deck` element contains a set of cards. Using deck elements, the
    cards can be ordered. The cards inside the deck can have their own transition.
    A `brick-deck` element can be used by including the following code in the page:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`brick-deck`元素包含一组卡片。使用卡片元素，可以对卡片进行排序。面板内的卡片可以有自己的过渡效果。可以通过在页面中包含以下代码来使用`brick-deck`元素：'
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The details of the preceding code snippet are listed as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段的详细信息如下：
- en: The `<brick-deck>` element is the parent element to be used for the deck.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<brick-deck>`元素是用于面板的父元素。'
- en: The `<brick-card>` element is the child element for the deck.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<brick-card>`元素是面板的子元素。'
- en: 'The `brick-deck` element can be used by including polyfill and deck definition
    files in the web application. The following code can be included to use the Brick''s
    deck component:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`brick-deck`元素可以通过在Web应用程序中包含polyfill和面板定义文件来使用。以下代码可以包含以使用Brick的卡片组件：'
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s checkout an example using `brick-deck` in a web application. The following
    code contains the use of a deck containing cards with different fruit names:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一个使用`brick-deck`在Web应用程序中的示例。以下代码包含了一个包含不同水果名称的卡片组的用法：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The details of the preceding code are listed as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的详细信息如下：
- en: 'A deck is created using the `<brick-deck>` element with the following properties
    set to some predefined values. The details of these properties are listed as follows:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`<brick-deck>`元素创建了一个卡片组，以下属性被设置为一些预定义的值。这些属性的详细信息如下：
- en: '`selected-index`: This property represents the default selected card inside
    the deck. In this example, this property is set to `0`.'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selected-index`：此属性表示面板内默认选中的卡片。在本例中，此属性设置为`0`。'
- en: '`transition-type`: This property represents the animation direction that the
    deck will apply to the child cards. In this example, this has the `slide-up` value.'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transition-type`：此属性表示面板将对子卡片应用的动画方向。在本例中，此值设置为`slide-up`。'
- en: There are two buttons representing next and previous card navigation.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有两个按钮代表下一张和上一张卡片的导航。
- en: The two buttons having the `nextCard` and `prevCard` IDs are attached with the
    `click` event. This event binding is done inside the `WebComponentsReady` event
    callback.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有ID为`nextCard`和`prevCard`的两个按钮与`click`事件相关联。此事件绑定是在`WebComponentsReady`事件回调中完成的。
- en: When the user presses the `nextCard` button, the deck moves to the next card,
    and when the user presses the `prevCard` button, the deck moves to the previous
    card.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当用户按下`nextCard`按钮时，面板移动到下一张卡片，当用户按下`prevCard`按钮时，面板移动到上一张卡片。
- en: 'The following screenshot shows the output of the preceding code where the default
    card with index 0 is selected:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述代码的输出，其中默认选中的卡片索引为0：
- en: '![The brick-deck element](img/image00320.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![砖块式面板元素](img/image00320.jpeg)'
- en: 'When the user presses the `nextCard` button, the deck moves to the next card
    with the index 1\. The value of the `selected-index` property is now 1\. The following
    screenshot shows the next card with the **Apple** fruit:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下`nextCard`按钮时，面板移动到索引为1的下一张卡片。`selected-index`属性的值现在是1。以下截图显示了带有**苹果**水果的下一张卡片：
- en: '![The brick-deck element](img/image00321.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![砖块式面板元素](img/image00321.jpeg)'
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find more information about the `brick-deck` card element using the
    following link:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下链接找到有关`brick-deck`卡片元素的更多信息：
- en: '[http://mozbrick.github.io/docs/brick-deck.html](http://mozbrick.github.io/docs/brick-deck.html)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://mozbrick.github.io/docs/brick-deck.html](http://mozbrick.github.io/docs/brick-deck.html)'
- en: The brick-tabbar element
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 砖形 tabbar 元素
- en: 'The `brick-tabbar` element represents a tab. A tab element provides a single
    content area with multiple panels, each associated with a header in a list. A
    `brick-tabbar` element can be used by including the following code in the page:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`brick-tabbar` 元素代表一个标签。标签元素提供了一个包含多个面板的单个内容区域，每个面板都与列表中的一个标题相关联。可以通过在页面中包含以下代码来使用
    `brick-tabbar` 元素：'
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The details of the preceding code are listed as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的详细信息如下：
- en: The `<brick-tabbar>` element is the parent element to be used for a group of
    tabs.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<brick-tabbar>` 元素是用于一组标签的父元素。'
- en: The `<brick-tabbar-tab>` element is the child tabbar and represents the individual
    tab.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<brick-tabbar-tab>` 元素是子 tabbar，代表单个标签。'
- en: 'The `brick-tabbar` element can be used by including polyfill and tabbar definition
    files in the web application. The following code can be included to use the Brick''s
    tabbar component:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`brick-tabbar` 元素可以通过在 web 应用程序中包含 polyfill 和 tabbar 定义文件来使用。以下代码可以包含以使用 Brick
    的 tabbar 组件：'
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s check out an example using `brick-tabbar` in a web application. The
    following code contains the use of tabbar containing different tabs:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个使用 `brick-tabbar` 的网络应用示例来检查一下。以下代码包含了一个包含不同标签页的 tabbar 的用法：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The details of the preceding code are listed here:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的详细信息如下：
- en: 'There are three different tabs: **Fruits**, **Flowers**, and **Vegetables**.
    They are defined using `<brick-tabbar-tab>` inside a `<brick-tabbar>` element.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有三个不同的标签页：**水果**、**花卉**和**蔬菜**。它们是在 `<brick-tabbar>` 元素内部使用 `<brick-tabbar-tab>`
    定义的。
- en: There are three different buttons defined for selecting fruits, flowers, and
    vegetables. The callback function attached to each button has a `select` method
    to dynamically select a tab element.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义了三个不同的按钮用于选择水果、花卉和蔬菜。附加到每个按钮的回调函数有一个 `select` 方法，用于动态选择标签元素。
- en: 'The following screenshot shows the output of the preceding code with three
    different tabs **Fruits**, **Flowers**, and **Vegetables**. The **Fruits** tab
    element is selected by default:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面代码的输出，有三个不同的标签 **水果**、**花卉**和**蔬菜**。默认选择的是 **水果** 标签元素：
- en: '![The brick-tabbar element](img/image00322.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![砖形 tabbar 元素](img/image00322.jpeg)'
- en: 'When the user presses the **Select Vegetables** button, the tab selection focuses
    the changes to **Vegetables** with the `select` property set to `true`. The following
    screenshot shows that the **Vegetables** tab element is selected programmatically:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下 **选择蔬菜** 按钮时，标签选择会聚焦到 `select` 属性设置为 `true` 的 **蔬菜**。以下截图显示了程序化选择的 **蔬菜**
    标签元素：
- en: '![The brick-tabbar element](img/image00323.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![砖形 tabbar 元素](img/image00323.jpeg)'
- en: Note
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find more information about the `brick-tabbar` element using the following
    link:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下链接找到有关 `brick-tabbar` 元素的更多信息：
- en: '[https://mozbrick.github.io/docs/brick-tabbar.html](https://mozbrick.github.io/docs/brick-tabbar.html)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mozbrick.github.io/docs/brick-tabbar.html](https://mozbrick.github.io/docs/brick-tabbar.html)'
- en: The brick-action element
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 砖形 action 元素
- en: 'The `brick-action` element binds an event with a method of a different element.
    A `brick-action` element has a listener, which continuously listens to the source
    element to detect the specified event and calls the method of the target element.
    A `brick-action` element can be used by including the following code in the page:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`brick-action` 元素将一个事件与另一个元素的方法绑定。一个 `brick-action` 元素有一个监听器，它持续监听源元素以检测指定的事件，并调用目标元素的方法。可以通过在页面中包含以下代码来使用
    `brick-action` 元素：'
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `brick-action` element can be used by including polyfill and action definition
    files in the web application. The following code can be included to use the Brick''s
    action component:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`brick-action` 元素可以通过在 web 应用程序中包含 polyfill 和动作定义文件来使用。以下代码可以包含以使用 Brick 的动作组件：'
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s check out an example using `brick-action` in a web application. The
    following code contains the use of an action element with a flipbox:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个使用 `brick-action` 的网络应用示例来检查一下。以下代码包含了一个带有 flipbox 的动作元素的用法：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The details of the preceding code are listed as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的详细信息如下：
- en: A `<brick-flipbox>` element has two different lists of fruits and flowers with
    the `id` attribute set to `fruitFlowerbox`.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `<brick-flipbox>` 元素有两个不同的水果和花卉列表，其 `id` 属性设置为 `fruitFlowerbox`。
- en: A `<brick-action>` element is defined with the `target` and `action` attribute.
    The `target` attribute is set to `fruitFlowerbox` and the `action` attribute is
    set to the `toggle` method.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`<brick-action>`元素通过`target`和`action`属性定义。`target`属性设置为`fruitFlowerbox`，而`action`属性设置为`toggle`方法。
- en: When the user clicks on the button present inside the `<brick-action>` element,
    it finds the `target` element `fruitFlowerbox` and executes its `toggle` method.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当用户点击`<brick-action>`元素内的按钮时，它会找到`target`元素`fruitFlowerbox`并执行其`toggle`方法。
- en: 'The following screenshot shows the output of the preceding code where the `brick-action`
    element is bound to a flipbox:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上一段代码的输出，其中`brick-action`元素绑定到了一个flipbox上：
- en: '![The brick-action element](img/image00324.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![brick-action元素](img/image00324.jpeg)'
- en: 'When the user presses the **Toggle Fruits & Flowers** button the `toggle` method
    gets called on the flipbox. The following screenshot shows the output of the flipbox
    after the **Toggle Fruits & Flowers** button is clicked on:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下**切换水果与花卉**按钮时，`toggle`方法在flipbox上被调用。以下截图显示了点击**切换水果与花卉**按钮后flipbox的输出：
- en: '![The brick-action element](img/image00325.jpeg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![brick-action元素](img/image00325.jpeg)'
- en: Note
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find more information about the `brick-action` element using the following
    link:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下链接了解更多关于`brick-action`元素的信息：
- en: '[https://mozbrick.github.io/docs/brick-action.html](https://mozbrick.github.io/docs/brick-action.html)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mozbrick.github.io/docs/brick-action.html](https://mozbrick.github.io/docs/brick-action.html)'
- en: The brick-menu element
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: brick-menu元素
- en: 'The `brick-menu` element represents a simple menu containing different items
    inside it for selection. A menu element can be used inside a page by including
    the following code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`brick-menu`元素代表一个简单的菜单，其中包含用于选择的多个项。可以通过包含以下代码在页面中使用菜单元素：'
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `brick-menu` element can be used by including polyfill and menu definition
    files in the web application. The following code can be included to use the Brick''s
    menu component:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在Web应用中包含polyfill和菜单定义文件来使用`brick-menu`元素。以下代码可以包含以使用Brick的菜单组件：
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s check out an example using `brick-menu` in a web application. The following
    code contains the use of the menu element with different items:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个使用`brick-menu`的Web应用示例。以下代码包含了使用菜单元素和不同项的用法：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the preceding code, a menu is defined using the `<brick-menu>` element.
    It contains `Fruits`, `Flowers`, `Vegetables`, and `Beverages` as the `<brick-item>`
    elements. The following screenshot shows the output of the preceding code with
    a rendered menu:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，使用`<brick-menu>`元素定义了一个菜单。它包含`Fruits`、`Flowers`、`Vegetables`和`Beverages`作为`<brick-item>`元素。以下截图显示了前面代码渲染的菜单输出：
- en: '![The brick-menu element](img/image00326.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![brick-menu元素](img/image00326.jpeg)'
- en: The X-Tag library
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: X-Tag库
- en: The Mozilla Brick 1.0 framework is based on the X-Tag library. You can find
    details about X-Tag in [Chapter 1](lrn-web-cmpn-dev_ch01.html#aid-DB7S1 "Chapter 1. Introducing
    Web Components"), *Introducing Web Components*. The following sections focus on
    custom web component development using X-Tag.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla Brick 1.0框架基于X-Tag库。您可以在[第1章](lrn-web-cmpn-dev_ch01.html#aid-DB7S1 "第1章。介绍Web组件")*介绍Web组件*中找到关于X-Tag的详细信息。以下章节将重点介绍使用X-Tag进行自定义Web组件开发。
- en: 'You can create your own bundle and download the X-Tag library using the following
    link:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下链接创建自己的包并下载X-Tag库：
- en: '[http://www.x-tags.org/download](http://www.x-tags.org/download)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.x-tags.org/download](http://www.x-tags.org/download)'
- en: 'The following screenshot shows the downloaded page with checkboxes, and with
    different features that can be selected to make a custom build:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了包含复选框的下载页面，以及可以选择的不同功能以创建自定义构建：
- en: '![The X-Tag library](img/image00327.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![X-Tag库](img/image00327.jpeg)'
- en: 'The downloaded build directory contains two files. Details about these files
    are listed here:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 下载的构建目录包含两个文件。以下是这些文件的详细信息：
- en: '`x-tag-components.min.css`: This is a minified CSS file containing style attributes
    for the downloaded content.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x-tag-components.min.css`：这是一个包含下载内容样式属性的压缩CSS文件。'
- en: '`x-tag-components.min.js`: This is a minified JS file containing core X-Tag
    library and polyfill script files.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x-tag-components.min.js`：这是一个包含核心X-Tag库和polyfill脚本文件的压缩JS文件。'
- en: Note
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you want to know more about X-Tag, use the following link:'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于X-Tag的信息，请使用以下链接：
- en: '[http://x-tag.readme.io/v1.0/docs/getting-started](http://x-tag.readme.io/v1.0/docs/getting-started)'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://x-tag.readme.io/v1.0/docs/getting-started](http://x-tag.readme.io/v1.0/docs/getting-started)'
- en: Developing a digital clock using X-Tag
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用X-Tag开发数字时钟
- en: 'In this section, we will develop a `<ts-clock>` element using X-Tag libraries
    with lifecycle methods. The definition code for `<ts-clock>` element has the following
    three different sections:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 X-Tag 库和生命周期方法开发一个 `<ts-clock>` 元素。`<ts-clock>` 元素的定义代码分为以下三个不同的部分：
- en: 'The X-Tag core libraries with polyfill script bundled as a single minified
    JS file named `x-tag-components.min.js`. This JS file should be included in the
    top `ts-clock.html` file containing the definition of a digital clock in the `<script>`
    element. The following code shows the `<script>` element for X-Tag libraries:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: X-Tag 核心库和 polyfill 脚本捆绑为一个名为 `x-tag-components.min.js` 的单个压缩 JS 文件。此 JS 文件应包含在顶部
    `ts-clock.html` 文件中，该文件定义了数字时钟并在 `<script>` 元素中。以下代码显示了 X-Tag 库的 `<script>` 元素：
- en: '[PRE19]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `<template>` element contains the HTML markup for the digital clock and
    CSS style attributes for the clock''s template element. The template code of the
    digital clock element is listed as follows:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<template>` 元素包含数字时钟的 HTML 标记和时钟模板元素的 CSS 样式属性。以下列出了数字时钟元素的模板代码：'
- en: '[PRE20]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `<script>` element contains the registration and definition of the `<ts-clock>`
    element using the `xtag.register` method. The registration script for the `<ts-clock>`
    element is listed as follows:'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<script>` 元素包含使用 `xtag.register` 方法注册和定义 `<ts-clock>` 元素的代码。以下列出了 `<ts-clock>`
    元素的注册脚本：'
- en: '[PRE21]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The details of the preceding code are listed here:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列出了前面代码的详细信息：
- en: The `thisDoc` variable contains the reference of `ownerDocument` of the `_currentScript`
    value before jumping to the registering of the `<ts-clock>` element.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thisDoc` 变量包含在跳转到 `<ts-clock>` 元素注册之前 `_currentScript` 值的 `ownerDocument`
    的引用。'
- en: The `created` callback method creates a `shadowRoot` element using the `createShadowRoot`
    method, and appends the template content by cloning it using the `cloneNode` method.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created` 回调方法使用 `createShadowRoot` 方法创建一个 `shadowRoot` 元素，并通过使用 `cloneNode`
    方法克隆模板内容来附加模板内容。'
- en: The `<ts-clock>` element has three attributes `hour`, `minute`, and `second`
    defined inside the `accessors` block. These attributes are linked to `{}`, which
    binds these properties as attributes of the `<ts-clock>` element.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ts-clock>` 元素在 `accessors` 块内部定义了三个属性 `hour`、`minute` 和 `second`。这些属性链接到
    `{}`，将这些属性绑定为 `<ts-clock>` 元素的属性。'
- en: The `inserted` callback contains the `window.setTimeOut` method. It contains
    the code for setting the value of the `hour`, `minute`, and `second` attribute
    using the `setAttribute` method. This code block is called every 1 second.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inserted` 回调包含 `window.setTimeOut` 方法。它包含使用 `setAttribute` 方法设置 `hour`、`minute`
    和 `second` 属性值的代码。此代码块每秒调用一次。'
- en: The `attributeChanged` callback contains code for DOM manipulation based on
    the new value of the changed attribute.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attributeChanged` 回调包含基于更改的属性新值的 DOM 操作代码。'
- en: 'The `<ts-clock>` element can be used by importing the definition to a web page
    using `HTMLImport`. The following code shows the use of the `<ts-clock>` element
    by importing `HTMLImport` to a page:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用 `HTMLImport` 将定义导入到网页中来使用 `<ts-clock>` 元素。以下代码显示了通过将 `HTMLImport` 导入到页面中来使用
    `<ts-clock>` 元素的示例：
- en: '[PRE22]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The details of the preceding code are listed as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列出了前面代码的详细信息：
- en: 'The `<ts-clock>` element is included to the page using the following code:'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下代码将 `<ts-clock>` 元素包含到页面中：
- en: '[PRE23]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `<ts-clock>` element is called by including the following code inside the
    `<body>` element:'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `<body>` 元素内部包含以下代码来调用 `<ts-clock>` 元素：
- en: '[PRE24]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Inside the `WebComponentsReady` event callback function, the `<ts-clock>` element
    is referred using the `document.querySelector` method
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `WebComponentsReady` 事件回调函数内部，使用 `document.querySelector` 方法引用 `<ts-clock>`
    元素
- en: The value of the `hour`, `minute`, and `second` attribute is accessed using
    the `getAttribute` method
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `getAttribute` 方法访问 `hour`、`minute` 和 `second` 属性的值
- en: 'The following screenshot shows the output of the preceding code, where a digital
    clock is rendered by including the `<ts-clock>` custom element:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面代码的输出，其中通过包含 `<ts-clock>` 自定义元素来渲染数字时钟：
- en: '![Developing a digital clock using X-Tag](img/image00328.jpeg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![使用 X-Tag 开发数字时钟](img/image00328.jpeg)'
- en: 'In the preceding screenshot, we can see that the `hour`, `minute`, and `second`
    attributes are created because the `accessors` properties are set to `{}`. The
    following screenshot shows the Chrome developer console with the log messages
    printed by the `getAttribute` method for getting the values of `hours`, `minutes`,
    and `seconds`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们可以看到`hour`、`minute`和`second`属性被创建，因为`accessors`属性被设置为`{}`。下面的屏幕截图显示了包含由`getAttribute`方法打印的获取`hours`、`minutes`和`seconds`值的日志消息的Chrome开发者控制台：
- en: '![Developing a digital clock using X-Tag](img/image00329.jpeg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![使用X-Tag开发数字时钟](img/image00329.jpeg)'
- en: Summary
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the Mozilla Brick library for web application
    development using web component specification. In the next chapter, we will learn
    about the ReactJS framework.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了使用Web组件规范进行Web应用程序开发的Mozilla Brick库。在下一章中，我们将学习ReactJS框架。
