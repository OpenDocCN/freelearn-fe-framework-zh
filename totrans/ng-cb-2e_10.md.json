["```js\n    npm run serve:ng-jest-setup \n    ```", "```js\n    npm install --save-dev jest jest-preset-angular @types/jest \n    ```", "```js\n    npm uninstall karma karma-chrome-launcher karma-jasmine-html-reporter @types/jasmine @types/jasminewd2 jasmine-core jasmine-spec-reporter karma-coverage-istanbul-reporter karma-jasmine \n    ```", "```js\n    {\n      ...\n      \"projects\": {\n    \"ng-jest-setup\": {\n    \"...\"\n    \"prefix\": \"app\",\n    \"architect\": {\n    \"build\": {...},\n    \"serve\": {...},\n    \"extract-i18n\": {...},\n    **\"test\"****:****{**\n    **\"builder\"****:****\"@angular-builders/jest:run\"****,**\n    **\"options\"****:****{**\n    **\"tsConfig\"****:**\n    **\"<rootDir>/src/tsconfig.test.json\"****,**\n    **\"collectCoverage\"****:****false****,**\n    **\"forceExit\"****:****true**\n    **}**\n    **},**\n    \"lint\": {...},\n    \"e2e\": {...}\n    }\n    }\n    },\n    \"defaultProject\": \"setting-up-jest\"\n    } \n    ```", "```js\n    import 'jest-preset-angular/setup-jest'; \n    ```", "```js\n    {\n    \"extends\": \"./tsconfig.json\",\n    \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/spec\",\n    **\"types\"****:****[****\"jest\"****,****\"node\"****],**\n    **\"esModuleInterop\"****:****true****,**\n    **\"emitDecoratorMetadata\"****:****true**\n    },\n    \"files\": [\"src/polyfills.ts\"],\n    \"include\": [\"src/**/*.spec.ts\", \"src/**/*.d.ts\"]\n    } \n    ```", "```js\n    {\n    \"name\": \"setting-up-jest\",\n    \"version\": \"0.0.0\",\n    \"scripts\": {\n        ...\n        \"build\": \"ng build\",\n    **\"test\"****:****\"jest\"****,**\n    **\"test:coverage\"****:****\"jest --coverage\"****,**\n        ...\n      },\n    \"private\": true,\n    \"dependencies\": {...},\n    \"devDependencies\": {...},\n    } \n    ```", "```js\n    {\n      ...\n      \"dependencies\": {...},\n    \"devDependencies\": {...},\n    **\"jest\"****:****{**\n    **\"preset\"****:****\"jest-preset-angular\"****,**\n    **\"setupFilesAfterEnv\"****:****[**\n    **\"<rootDir>/jestSetup.ts\"**\n    **]**\n    **}**\n    } \n    ```", "```js\n    npm run test \n    ```", "```js\n{\n\"projects\": {\n\"my-app\": {\n\"architect\": {\n**\"test\"****:****{**\n**\"builder\"****:****\"@angular-devkit/build-angular:jest\"****,**\n**\"options\"****:****{**\n**\"tsConfig\"****:****\"tsconfig.spec.json\"****,**\n**\"polyfills\"****:****[****\"****zone.js\"****,****\"zone.js/testing\"****]**\n**}**\n**}**\n}\n}\n}\n} \n```", "```js\n    npm run serve ng-jest-global-mocks \n    ```", "```js\n    ...\n    describe('CounterComponent', () => {\n      ...\n      **it****(****'****should show an alert when the counter value goes**\n    **above the MAX_VALUE'****,** **() =>** **{**\n    **jest.****spyOn****(****window****,** **'alert'****);**\n    **component.****counter** **= component.****MAX_VALUE****;**\n    **component.****increment****();**\n    **expect****(****window****.****alert****).****toHaveBeenCalledWith****(****'Value too**\n    **high'****);**\n    **expect****(component.****counter****).****toBe****(component.****MAX_VALUE****);**\n    **});**\n    **it****(****'should show an alert when the counter value goes**\n    **below the MIN_VALUE'****,** **() =>** **{**\n    **jest.****spyOn****(****window****,** **'alert'****);**\n    **component.****counter** **= component.****MIN_VALUE****;**\n    **component.****decrement****();**\n    **expect****(****window****.****alert****).****toHaveBeenCalledWith****(****'Value too**\n    **low'****);**\n    **expect****(component.****counter****).****toBe****(component.****MIN_VALUE****);**\n    **});**\n    }); \n    ```", "```js\n    ...\n    describe('CounterComponent', () => {\n      ...\n      **it.****only****(****'****should call the localStorage.getItem method on**\n    **component init'****,** **() =>** **{**\n    **jest.****spyOn****(****localStorage****,** **'getItem'****);**\n    **component.****ngOnInit****();**\n    **expect****(****localStorage****.****getItem****).****toHaveBeenCalled****();**\n    **});**\n    }); \n    ```", "```js\n    class LocalStorageMock {\n      storage: Partial<Storage> = {};\n      getItem(key: string) {\n        return this.storage[key] ? this.storage[key] : null;\n      }\n\n      setItem(key: string, value: string) {\n        this.storage[key] = value;\n      }\n    }\n\n    Object.defineProperty(window, 'localStorage', {\n      value: new LocalStorageMock(),\n    });\n\n    Object.defineProperty(window, 'alert', {\n      value: jest.fn(),\n    }); \n    ```", "```js\n    ...\n    globalThis.ngJest = {...};\n    import 'jest-preset-angular/setup-jest';\n    **import****'./jest-global-mocks'****;** \n    ```", "```js\n    ...\n    describe('CounterComponent', () => {\n      ...\n      it('should call the localStorage.getItem method on\n    component init', () => {...});\n      **it****(****'should retrieve the last saved value from**\n    **localStorage on component init'****,** **() =>** **{**\n    **localStorage****.****setItem****(****'counterValue'****,** **'12'****);**\n    **component.****ngOnInit****();**\n    **expect****(component.****counter****).****toBe****(****12****);**\n    **});**\n    }); \n    ```", "```js\n    ...\n    describe('CounterComponent', () => {\n      ...\n      **it****(****'should save the new counterValue to localStorage on**\n    **increment, decrement and reset'****,** **() =>** **{**\n    **jest.****spyOn****(****localStorage****,** **'setItem'****);**\n    **component.****counter** **=** **0****;**\n    **component.****increment****();**\n    **expect****(****localStorage****.****setItem****).****toHaveBeenCalledWith****(**\n    **'counterValue'****,** **'1'****);**\n    **component.****counter** **=** **20****;**\n    **component.****decrement****();**\n    **expect****(****localStorage****.****setItem****).****toHaveBeenCalledWith****(**\n    **'counterValue'****,** **'19'****);**\n    **component.****reset****();**\n    **expect****(****localStorage****.****setItem****).****toHaveBeenCalledWith****(**\n    **'****counterValue'****,** **'0'****);**\n    **});**\n    }); \n    ```", "```js\nimport { sum } from './sum';\ndescribe('Sum function', () => {\n  it('should add two numbers', () => {\n    expect(sum(2,3)).toBe(5);\n  });\n}); \n```", "```js\n    npm run serve ng-test-services-stubs \n    ```", "```js\n    import { CounterService } from \"../../app/services/counter.service\"; \n    const counterServiceMock: CounterService = {\n      storageKey: 'counterValue',\n      getFromStorage: jest.fn(),\n      saveToStorage: jest.fn(),\n    };\n    export default counterServiceMock; \n    ```", "```js\n    ...\n    **import** **{** **CounterService** **}** **from****'../services/counter.service'****;**\n    **import** **counterServiceMock** **from****'../../__mocks__/services/counter.service.mock'****;**\n    describe('CounterComponent', () => {\n      ...\n      beforeEach(async () => {\n        await TestBed.configureTestingModule({\n          imports: [CounterComponent]**,**\n    **providers****: [{**\n    **provide****:** **CounterService****,**\n    **useValue****: counterServiceMock**\n    **}]**\n        }).compileComponents();\n      });\n      ...\n    }); \n    ```", "```js\n    ...\n    describe('CounterComponent', () => {\n      ...\n    **// replace the tests below**\n    }); \n    ```", "```js\nconst mockFn = jest.fn();\nmockFn();\nexpect(mockFn).toHaveBeenCalled(); // test passes\n// With a mock implementation:\nconst returnsTrue = jest.fn(() => true);\nconsole.log(returnsTrue()); // true;\nexpect(returnsTrue()).toBe(true); // test passes \n```", "```js\nexpect(counterServiceMock.getFromStorage).toBeCalled(); \n```", "```js\nexpect(counterServiceMock.saveToStorage).toHaveBeenCalledWith(1); \n```", "```js\n    npm run serve ng-test-services \n    ```", "```js\n    it(' should get counter from storage on component init',\n      () => {\n        jest.spyOn(component.counterService, 'getFromStorage');\n        component.ngOnInit();\n        expect(component.counterService.getFromStorage)\n     .toHaveBeenCalled();\n      }); \n    ```", "```js\n    it(' should have the initial value of counter from storage\n      on component init ', () => {\n        jest.spyOn(component.counterService,\n          'getFromStorage').mockReturnValue(12);\n        component.ngOnInit();\n        expect(component.counter).toBe(12);\n      }); \n    ```", "```js\n    it('should save the new counterValue on increment, decrement\n      and reset', () => {\n        jest.spyOn(component.counterService, 'saveToStorage');\n        component.counter = 0;\n        component.increment();\n        expect(component.counterService.saveToStorage)\n     .toHaveBeenCalledWith(1);\n        component.counter = 20;\n        component.decrement();\n        expect(component.counterService.saveToStorage)\n     .toHaveBeenCalledWith(19);\n        component.reset();\n        expect(component.counterService.saveToStorage)\n     .toHaveBeenCalledWith(0);\n      }); \n    ```", "```js\n    npm run serve ng-test-ng-mocks \n    ```", "```js\n    cd start && npm install ng-mocks --save \n    ```", "```js\n    npm run test ng-test-ng-mocks â€“t \"App\" \n    ```", "```js\n    ...\n    **import** **{** **VersionControlComponent** **}** **from****'./components/version-control/version-control.component'****;**\n    ...\n    describe('AppComponent', () => {\n      beforeEach(waitForAsync(() => {\n        TestBed.configureTestingModule({\n          imports: [RouterTestingModule],\n          **declarations****: [****AppComponent****,**\n    **VersionControlComponent****],**\n        }).compileComponents();\n      }));\n      ...\n    }); \n    ```", "```js\n    ...\n    **import** **{** **MockComponent** **}** **from****'ng-mocks'****;**\n    ...\n    describe('AppComponent', () => {\n      beforeEach(waitForAsync(() => {\n        TestBed.configureTestingModule({\n          **declarations****: [****AppComponent****,**\n    **MockComponent****(****VersionControlComponent****)],**\n    **imports****: [****RouterTestingModule****],**\n        }).compileComponents();\n      }));\n      ...\n    }); \n    ```", "```js\n    import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\n    import { VersionControlComponent } from './version-control.component';\n    import { FormsModule } from '@angular/forms';\n    import { MockBuilder, MockRender, MockedComponentFixture } from 'ng-mocks';\n    import { AppModule } from '../../app.module';\n    import { VcLogsComponent } from '../vc-logs/vc-logs.component';\n    describe('VersionControlComponent', () => {\n      let component: VersionControlComponent;\n      let fixture: MockedComponentFixture\n     <VersionControlComponent>;\n      beforeEach(() => {\n        return MockBuilder(\n          VersionControlComponent,\n          AppModule\n        );\n      });\n      beforeEach(() => {\n        fixture = MockRender(VersionControlComponent);\n        component = fixture.point.componentInstance;\n      });\n      it('should create', () => {...});\n    }); \n    ```", "```js\n    import { VersionControlComponent } from './version-control.component';\n    import { MockBuilder, MockRender, MockedComponentFixture, **ngMocks** } from 'ng-mocks';\n    import { AppModule } from '../../app.module';\n    **import** **{** **VcLogsComponent** **}** **from****'../vc-logs/vc-logs.component'****;**\n    describe('VersionControlComponent', () => {\n      ...\n      it('should create', () => {...});\n      **it****(****'should set vName input value in VCLogsComponent'****,**\n    **() =>** **{**\n    **const** **vcLogsComponent = ngMocks.****find****<****VcLogsComponent****>(**\n    **'app-vc-logs'**\n    **).****componentInstance****;**\n    **component.****versionName** **=** **'2.2.2'****;**\n    **fixture.****detectChanges****();**\n    **expect****(vcLogsComponent.****vName****).****toBe****(****'2.2.2'****);**\n    **});**\n    }); \n    ```", "```js\n    ...\n    import { TestBed, waitForAsync } from '@angular/core/testing';\n    import { VcLogsComponent } from './vc-logs.component';\n    **import** **{** **MockRender****,** **MockedComponentFixture** **}** **from****'****ng-mocks'****;**\n    describe('VcLogsComponent', () => {\n      ...\n      beforeEach(waitForAsync(() => {...}));\n      beforeEach(() => {\n        fixture = **MockRender****(****VcLogsComponent****, {**\n    **vName****:** **'0.0.0'**\n    **});**\n        component = fixture**.****point**.componentInstance;\n        fixture.detectChanges();\n      });\n      it('should create', () => {\n        expect(component).toBeTruthy();\n      });\n      **it****(****'should add a log after vName change'****,** **() =>** **{**\n    **fixture.****detectChanges****();**\n    **fixture.****componentInstance****.****vName** **=** **\"2.2.3\"****;**\n    **fixture.****detectChanges****();**\n    **expect****(component.****logs****).****toHaveLength****(****2****);**\n    **});**\n    }); \n    ```", "```js\n    npm run serve ng-test-cdk-harness \n    ```", "```js\n    npm run test ng-test-cdk-harness \n    ```", "```js\n    import { ComponentHarness } from '@angular/cdk/testing';\n    export class VersionControlComponentHarness extends\n      ComponentHarness {\n      static hostSelector = 'app-release-form';\n      protected getSubmitButton =\n      this.locatorFor('button[type=submit]');\n      protected getAppVersionInput =\n      this.locatorFor(`#versionNumber`);\n      protected getVersionErrorEl =\n      this.locatorFor('small.error');\n    } \n    ```", "```js\n     import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';\n          ... \n    ```", "```js\n    ...\n    export class ReleaseFormComponentHarness extends ComponentHarness {\n      ...\n      **async****clickSubmit****() {**\n    **const** **submitBtn =** **await****this****.****getSubmitButton****();**\n    **return****await** **submitBtn.****click****();**\n    **}**\n    **async****setNewAppVersion****(****version****:** **string****) {**\n    **const** **versionInput =** **await****this****.****getAppVersionInput****();**\n    **return****await** **versionInput.****sendKeys****(version);**\n    **}**\n    **async****isVersionErrorShown****() {**\n    **const** **expected =** **'Version number does not match the**\n    **pattern (x.x.x)'****;**\n    **const** **versionErrorEl =** **await****this****.****getVersionErrorEl****();**\n    **const** **versionErrorText =** **await** **versionErrorEl.****text****();**\n    **const** **isErrorShown = versionErrorText.****trim****() ===**\n    **expected;**\n    **if** **(!isErrorShown) {**\n    **console****.****log****({**\n    **actual****: versionErrorText.****trim****(),**\n    **expected,**\n    **});**\n    **}**\n    **return** **isErrorShown;**\n    **}** \n    ```", "```js\n    ...\n    **import** **{** **VersionControlComponentHarness** **}** **from****'./version-control.component.harness'****;**\n    describe('VersionControlComponent', () => {\n      ...\n      **it****(****'should show error on wrong version number input'****,**\n    **async** **() => {**\n    **const** **vcHarness =** **await****TestbedHarnessEnvironment**\n    **.****harnessForFixture****(**\n    **fixture,**\n    **VersionControlComponentHarness**\n    **);**\n    **await** **vcHarness.****setNewAppVersion****(****'abcd'****);**\n    **await** **vcHarness.****clickSubmit****();**\n    **fixture.****detectChanges****();**\n    **const** **isErrorShown =** **await** **vcHarness**\n    **.****isVersionErrorShown****();**\n    **expect****(isErrorShown).****toBe****(****true****);**\n      });\n      ...\n    }); \n    ```", "```js\n    import { ComponentHarness } from '@angular/cdk/testing';\n    export class VCLogsComponentHarness extends ComponentHarness {\n      static hostSelector = 'app-vc-logs';\n      protected getLogsList = this.locatorForAll('.logs__item');\n      async getLogsLength() {\n        const logsElements = await this.getLogsList();\n        return logsElements.length;\n      }\n      protected async getLogTextAt(index: number) {\n        const logsElements = await this.getLogsList();\n        return (await logsElements[index].text()).trim();\n      }\n      async getFirstLogText() {\n        return await this.getLogTextAt(0);\n      }\n      async getSecondLogText() {\n        return await this.getLogTextAt(1);\n      }\n    } \n    ```", "```js\n    ...\n    import { VersionControlComponentHarness } from './version-control.component.harness';\n    **import** **{** **VCLogsComponentHarness** **}** **from****'../vc-logs/vc-logs.component.harness'****;**\n    describe('VersionControlComponent', () => {\n      ...\n      it('should show the new log in the list after adding\n      submitting a new log', async () => {\n        **const** **vcHarness =** **await****TestbedHarnessEnvironment**\n    **.****harnessForFixture****(**\n    **fixture,**\n    **VersionControlComponentHarness**\n    **);**\n    **const** **harnessLoader =** **TestbedHarnessEnvironment**\n    **.****loader****(fixture);**\n    **const** **vcLogsHarness =** **await** **harnessLoader.****getHarness****(**\n    **VCLogsComponentHarness**\n    **);**\n    **const****VERSION** **=** **'2.3.6'****;**\n    **await** **vcHarness.****setNewAppVersion****(****VERSION****);**\n    **await** **vcHarness.****clickSubmit****();**\n    **fixture.****detectChanges****();**\n    **const** **logsLength =** **await** **vcLogsHarness.****getLogsLength****();**\n    **expect****(logsLength).****toBe****(****2****);**\n    **const** **firstLogText =** **await** **vcLogsHarness**\n    **.****getFirstLogText****();**\n    **expect****(firstLogText).****toBe****(****`initial version is 0.0.0`****);**\n    **const** **secondLogText =** **await** **vcLogsHarness**\n    **.****getSecondLogText****();**\n    **expect****(secondLogText).****toBe****(****`version changed to**\n    **2.3.6`****);**\n      });\n    }); \n    ```", "```js\n    npm run serve ng-test-http-resp \n    ```", "```js\n    ...\n    **import** **{** **HttpClientModule** **}** **from****'****@angular/common/http'****;**\n    describe('UserService', () => {\n      ...\n      beforeEach(() => {\n        TestBed.configureTestingModule(**{**\n    **imports****: [****HttpClientModule****],**\n    **}**);\n        service = TestBed.inject(UserService);\n      });\n      ...\n    }); \n    ```", "```js\n    ...\n    **import** **{** **HttpClientTestingModule****,**\n    **}** **from****'@angular/common/http/testing'****;**\n    ...\n    describe('UserService', () => {\n      let service: UserService;\n      beforeEach(() => {\n        TestBed.configureTestingModule({\n          imports: [HttpClientModule, **HttpClientTestingModule**],\n        });\n        service = TestBed.inject(UserService);\n      });\n    }); \n    ```", "```js\n    ...\n    import {\n      HttpClientTestingModule**,**\n    **HttpTestingController****,**\n    } from '@angular/common/http/testing';\n    describe('UserService', () => {\n      let service: UserService;\n      **let****httpTestingController****:** **HttpTestingController****;**\n    beforeEach(() => {\n        TestBed.configureTestingModule({...});\n        service = TestBed.inject(UserService);\n        **httpTestingController =** **TestBed****.****inject****(**\n    **HttpTestingController****);**\n      });\n    }); \n    ```", "```js\n    ...\n    **import** **{** **User** **}** **from****'../user.interface'****;**\n    describe('UserService', () => {\n      ...\n      **it****(****'should return expected user data (HttpClient called**\n    **once)'****,** **() =>** **{**\n    **const****mockUsers****:** **User****[] = [];**\n    **const** **req = httpTestingController**\n    **.****expectOne****(****'assets/users.json'****);**\n    **expect****(req.****request****.****method****).****toEqual****(****'GET'****);**\n    **req.****flush****(mockUsers);** **// Respond with mocked data**\n    **});**\n    }); \n    ```", "```js\n    ...\n    describe('UserService', () => {\n      ...\n      **afterEach****(****() =>** **{**\n    **// After every test, assert that there are no more**\n    **pending requests.**\n    **httpTestingController.****verify****();**\n    **});**\n      ...\n    }); \n    ```", "```js\n    describe('UserService', () => {\n      ...\n      it('should return expected user data (HttpClient called\n    once)', (**done**) => {\n        const mockUsers: User[] = [...];\n        **service.****getUsers****().****subscribe****({**\n    **next****:** **(****data****) =>** **{**\n    **expect****(data).****toEqual****([{**\n    **...mockUsers[****0****],**\n    **fullAddress****:** **'sample street 1, 123 ABC, Dream**\n    **city, 4567'**\n    **}, {**\n    **...mockUsers[****1****],**\n    **fullAddress****:** **'sample street 2, 123 ABC, Dream**\n    **city, 890'**\n    **}]);**\n    **done****();**\n    **},**\n    **error****:** **(****err****) =>** **{**\n    **console****.****log****(****'****Error: '****, err);**\n    **},**\n    **});**\n        ...\n      });\n    }); \n    ```", "```js\n    npm run serve ng-test-pipes \n    ```", "```js\n    import { MultTablePipe } from './mult-table.pipe';\n    describe('MultTablePipe', () => {\n      let pipe: MultTablePipe;\n      beforeEach(() => {\n        pipe = new MultTablePipe();\n      })\n      it('should return an empty array if the value of digit\n      is not valid', () => {\n        const digit = 0;\n        const limit = 10;\n        const outputArray = pipe.transform(null, digit, limit);\n        expect(outputArray).toEqual([]);\n      });\n    }); \n    ```", "```js\n    ...\n    describe('MultTablePipe', () => {\n      ...\n      **it****(****'should return an empty array if the value of limit**\n    **is not valid'****,** **() =>** **{**\n    **const** **digit =** **10****;**\n    **const** **limit =** **0****;**\n    **const** **outputArray = pipe.****transform****(****null****, digit,**\n    **limit);**\n    **expect****(outputArray).****toEqual****([]);**\n    **});**\n    }); \n    ```", "```js\n     describe('MultTablePipe', () => {\n      ...\n      **it****(****'should return the correct multiplication table**\n    **when both digit and limit inputs are valid'****,** **() =>** **{**\n    **const** **digit =** **10****;**\n    **const** **limit =** **2****;**\n    **const** **expectedArray = [{** **digit****:** **10****,** **factor****:** **1****,** **result****:**\n    **10** **},**\n    **{** **digit****:** **10****,** **factor****:** **2****,** **result****:** **20** **},];**\n    **const** **outputArray = pipe.****transform****(****null****, digit, limit);**\n    **expect****(outputArray).****toEqual****(expectedArray);**\n    **});**\n    }); \n    ```", "```js\n    ...\n    describe('MultTablePipe', () => {\n      ...\n      **it****(****'should round of the limit if it is provided**\n    **in decimals'****,** **() =>** **{**\n    **const** **digit =** **10****;**\n    **const** **limit =** **3.5****;**\n    **const** **expectedArray = [**\n    **{****digit****:** **10****,** **factor****:** **1****,** **result****:** **10****},**\n    **{****digit****:** **10****,** **factor****:** **2****,** **result****:** **20****},**\n    **{****digit****:** **10****,** **factor****:** **3****,** **result****:** **30****}**\n    **];** **// rounded off to 3 factors instead of 3.5**\n    **const** **outputArray = pipe.****transform****(****null****, digit, limit);**\n    **expect****(outputArray).****toEqual****(expectedArray);**\n    **});**\n    }); \n    ```"]