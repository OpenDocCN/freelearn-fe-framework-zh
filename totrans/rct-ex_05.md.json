["```js\ngetInitialState() {\n    return ({currentStep: 1, formValues: {}, cartTimeout: 60 * 15});\n  }\n```", "```js\nupdateCartTimeout(timeout){\n    this.setState({cartTimeout: timeout});\n}\n```", "```js\nvar SetIntervalMixin = {\n\n  componentWillMount: function() {\n    this.intervals = [];\n  },\n\n  setInterval: function() {\n    this.intervals.push(setInterval.apply(null, arguments));\n  },\n\n  componentWillUnmount: function() {\n    this.intervals.map(clearInterval);\n  }\n};\n\nmodule.exports = SetIntervalMixin;\n```", "```js\ncomponentWillMount: function() {\n    this.intervals = [];\n  }\n\n```", "```js\n  setInterval: function() {\n    this.intervals.push(setInterval.apply(null, arguments));\n  }\n```", "```js\n  componentWillUnmount: function() {\n    this.intervals.map(clearInterval);\n  }\n```", "```js\nvar DeliveryDetails = React.createClass({\n…\nmixins: [SetIntervalMixin]\n…\n```", "```js\nvar CartTimeoutMixin = {\n  componentWillMount: function () {\n    this.setInterval(this.decrementCartTimer, 1000);\n  },\n\n  decrementCartTimer(){\n    if (this.state.cartTimeout == 0) {\n      this.props.alertCartTimeout();\n      return;\n    }\n    this.setState({cartTimeout: this.state.cartTimeout - 1});\n  },\n\n};\n```", "```js\n……\nrender() {\n    switch (this.state.currentStep) {\n\n      case 1:\n        return <BookList updateFormData={this.updateFormData}/>;\n\n      case 2:\n        return <ShippingDetails updateFormData={this.updateFormData}\n                                cartTimeout={this.state.cartTimeout}\n                                updateCartTimeout={this.updateCartTimeout} />;\n\n      case 3:\n        return <DeliveryDetails updateFormData={this.updateFormData}\n                                cartTimeout={this.state.cartTimeout}\n                                updateCartTimeout={this.updateCartTimeout} />;\n\n……\n```", "```js\ngetInitialState() {\n    return { deliveryOption: 'Primary', cartTimeout: this.props.cartTimeout };\n } \n```", "```js\n  render() {\n\n    var minutes = Math.floor(this.state.cartTimeout / 60);\n    var seconds = this.state.cartTimeout - minutes * 60;\n\n    return (\n      <div>\n        <h1>Choose your delivery options here.</h1>\n        <div style={{width:200}}>\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"radio\">\n              <label>\n\n                <input type=\"radio\"\n                       checked={this.state.deliveryOption === \"Primary\"}\n                       value=\"Primary\"\n                       onChange={this.handleChange} />\n                Primary -- Next day delivery\n              </label>\n            </div>\n\n            <div className=\"radio\">\n              <label>\n                <input type=e\"radio\"\n                       checked={this.state.deliveryOption === \"Normal\"}\n                       value=\"Normal\"\n                       onChange={this.handleChange} />\n                Normal -- 3-4 days\n              </label>\n            </div>\n\n            <button className=\"btn btn-success\">\n              Submit\n            </button>\n\n          </form>\n        </div>\n\n        <div className=\"well\">\n          <span className=\"glyphicon glyphicon-time\" aria-hidden=\"true\"></span> You have {minutes} Minutes, {seconds} Seconds, before confirming order\n        </div>\n\n      </div>\n    );\n  }\n```", "```js\n…\nmixins: [SetIntervalMixin, CartTimeoutMixin],\n…\n```", "```js\n….\ncomponentWillUnmount(){\n    this.props.updateCartTimeout(this.state.cartTimeout);\n  }\n….\n```", "```js\nvar CartTimeoutMixin = {\n  componentWillMount: function () {\n    this.setInterval(this.decrementCartTimer, 1000);\n  },\n\n  decrementCartTimer(){\n    if (this.state.cartTimeout == 0) {\n      this.props.alertCartTimeout();\n      return;\n    }\n    this.setState({cartTimeout: this.state.cartTimeout - 1});\n  },\n\n  componentWillUnmount(){\n    this.props.updateCartTimeout(this.state.cartTimeout);\n  }\n\n};\n\nmodule.exports = CartTimeoutMixin;\n```", "```js\n  alertCartTimeout(){\n    this.setState({currentStep: 10});\n  },\n```", "```js\nrender() {\n    switch (this.state.currentStep) {\n      case 1:\n        return <BookList updateFormData={this.updateFormData}/>;\n      case 2:\n        return <ShippingDetails updateFormData={this.updateFormData}\n                                cartTimeout={this.state.cartTimeout}\n                                updateCartTimeout={this.updateCartTimeout}\n                                alertCartTimeout={this.alertCartTimeout}/>;\n      case 3:\n        return <DeliveryDetails updateFormData={this.updateFormData}\n                                cartTimeout={this.state.cartTimeout}\n                                updateCartTimeout={this.updateCartTimeout}\n                                alertCartTimeout={this.alertCartTimeout}/>;\n      case 4:\n        return <Confirmation data={this.state.formValues}\n                             updateFormData={this.updateFormData}\n                             cartTimeout={this.state.cartTimeout}/>;\n      case 5:\n        return <Success data={this.state.formValues} cartTimeout={this.state.cartTimeout}/>;\n\n      case 10:\n       /* Handle the case of Cart timeout */\n        return <div><h2>Your cart timed out, Please try again!</h2></div>;\n      default:\n        return <BookList updateFormData={this.updateFormData}/>;\n    }\n  }\n```", "```js\nimport React from 'react';\nimport SetIntervalMixin from './mixins/set_interval_mixin'\nimport CartTimeoutMixin from './mixins/cart_timeout_mixin'\n\nvar DeliveryDetails = React.createClass({\n  propTypes: {\n    alertCartTimeout: React.PropTypes.func.isRequired,\n    updateCartTimeout: React.PropTypes.func.isRequired,\n    cartTimeout: React.PropTypes.number.isRequired\n  },\n\n  mixins: [SetIntervalMixin, CartTimeoutMixin],\n\n  getInitialState() {\n    return { deliveryOption: 'Primary', cartTimeout: this.props.cartTimeout };\n  },\n\n  componentWillReceiveProps(newProps){\n    this.setState({cartTimeout: newProps.cartTimeout});\n  },\n\n  handleChange(event) {\n    this.setState({ deliveryOption: event.target.value});\n  },\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.updateFormData(this.state);\n  },\n\n  render() {\n    var minutes = Math.floor(this.state.cartTimeout / 60);\n    var seconds = this.state.cartTimeout - minutes * 60;\n    return (\n      <div>\n        <h1>Choose your delivery options here.</h1>\n        <div style={{width:200}}>\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"radio\">\n              <label>\n                <input type=\"radio\"\n                       checked={this.state.deliveryOption === \"Primary\"}\n                       value=\"Primary\"\n                       onChange={this.handleChange} />\n                Primary -- Next day delivery\n              </label>\n            </div>\n            <div className=\"radio\">\n              <label>\n                <input type=\"radio\"\n                       checked={this.state.deliveryOption === \"Normal\"}\n                       value=\"Normal\"\n                       onChange={this.handleChange} />\n                Normal -- 3-4 days\n              </label>\n            </div>\n\n            <button className=\"btn btn-success\">\n              Submit\n            </button>\n          </form>\n        </div>\n        <div className='well'>\n          <span className=\"glyphicon glyphicon-time\" aria-hidden=\"true\"></span> You have {minutes} Minutes, {seconds} Seconds, before confirming order\n        </div>\n      </div>\n    );\n  }\n});\n\nmodule.exports = DeliveryDetails;\n```", "```js\nimport React from 'react';\nimport SetIntervalMixin from './mixins/set_interval_mixine'\nimport CartTimeoutMixin from './mixins/cart_timeout_mixin'\n\nvar ShippingDetails = React.createClass({\n  propTypes: {\n    alertCartTimeout:React.PropTypes.func.isRequired,\n    updateCartTimeout: React.PropTypes.func.isRequired,\n    cartTimeout: React.PropTypes.number.isRequired\n  },\n\n  mixins: [SetIntervalMixin, CartTimeoutMixin],\n\n  getInitialState() {\n    return {fullName: '', contactNumber: '', shippingAddress: '', error: false, cartTimeout: this.props.cartTimeout};\n  },\n  _renderError() {\n    if (this.state.error) {\n      return (\n        <div className=e\"alert alert-danger\">\n          {this.state.error}\n        </div>\n      );\n    }\n  },\n\n  _validateInput() { \n  …..\n  },\n\n  handleSubmit(event) {\n  ….\n  },\n\n  handleChange(event, attribute) {\n    var newState = this.state;\n    newState[attribute] = event.target.value;\n    this.setState(newState);\n    console.log(this.state);\n  },\n\n  render() {\n    var errorMessage = this._renderError();\n    var minutes = Math.floor(this.state.cartTimeout / 60);\n    var seconds = this.state.cartTimeout - minutes * 60;\n\n    return (\n      <div>\n        <h1>Enter your shipping information.</h1>\n           …..\n\n        <div className='well'>\n          <span className=\"glyphicon glyphicon-time\" aria-hidden=\"true\"></span> You have {minutes} Minutes, {seconds} Seconds, before confirming order\n        </div>\n      </div>\n    );\n  }\n});\n\nmodule.exports = ShippingDetails;\n```", "```js\nimport React from 'react';\n\nvar ModalAlertTimeout = React.createClass({\n  render() {\n    return (\n\n      <div className=\"modal fade\" ref='timeoutModal'>\n        <div className=\"modal-dialog\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">×</span></button>\n              <h4 className=\"modal-title\">Timeout</h4>\n            </div>\n            <div className=\"modal-body\">\n              <p>The cart has timed-out. Please try again!</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n});\nmodule.exports = ModalAlertTimeout;\n```", "```js\nalertCartTimeout(){\n    React.render(<ModalAlertTimeout />, document.getElementById('modalAlertTimeout'));\n    this.setState({currentStep: 1, formValues: {}, cartTimeout: 1});\n  }\n```", "```js\ncomponentDidMount(){\n    setTimeout(()=> {\n      let timeoutModal = this.refs.timeoutModal.getDOMNode();\n      $(timeoutModal).modal('show');\n    }, 100);\n  }\n```", "```js\nimport React from 'react';\n\nvar ModalAlertTimeout = React.createClass({\n  componentDidMount(){\n    setTimeout(()=> {\n      let timeoutModal = this.refs.timeoutModal.getDOMNode();\n      $(timeoutModal).modal('show');\n    }, 100);\n  },\n\n  render() {\n    return (\n\n      <div className=\"modal fade\" ref='timeoutModal'>\n        <div className=\"modal-dialog\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">×</span></button>\n              <h4 className=\"modal-title\">Timeout</h4>\n            </div>\n            <div className=\"modal-body\">\n              <p>The cart has timed-out. Please try again!</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n});\nmodule.exports = ModalAlertTimeout;\n```", "```js\nunMountComponent () {\n    React.unmountComponentAtNode(this.getDOMNode().parentNode);\n  }\n```", "```js\n$(timeoutModal).on('hidden.bs.modal', this.unMountComponent);\n```"]