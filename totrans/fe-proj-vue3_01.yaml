- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Starting Your First Vue Project
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始你的第一个 Vue 项目
- en: In this chapter, you will learn about the key concepts and benefits of **Vue.js**
    (**Vue**), how to set up the project architecture using the terminal (or command
    line), and how to create a simple Vue component with local data following the
    component fundamentals.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解 **Vue.js**（**Vue**）的关键概念和优势，如何使用终端（或命令行）设置项目架构，以及如何根据组件基本原理创建一个具有本地数据的简单
    Vue 组件。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding Vue as a framework
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Vue 作为框架
- en: Setting up a Vite-powered Vue application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Vite 驱动的 Vue 应用程序
- en: Exploring `data` properties as a local state
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 `data` 属性作为本地状态
- en: Writing components with `<``script setup>`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `<script setup>` 编写组件
- en: Understanding Vue directives
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Vue 指令
- en: Enabling two-way binding using `v-model`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `v-model` 启用双向绑定
- en: Understanding data iteration with `v-for`
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `v-for` 理解数据迭代
- en: Exploring methods
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索方法
- en: Understanding component lifecycle hooks
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解组件生命周期钩子
- en: Styling components
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 样式组件
- en: Understanding CSS modules
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 CSS 模块
- en: By the end of this chapter, you will be able to describe the fundamentals of
    Vue lifecycle hooks and expressions and use various styling approaches and HTML
    syntax flavors to control the HTML template competently.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够描述 Vue 生命周期钩子和表达式的根本，并使用各种样式方法和 HTML 语法风格来熟练地控制 HTML 模板。
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The complete code for this chapter is available on GitHub at: [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整代码可在 GitHub 上找到：[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01)
- en: Understanding Vue as a framework
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Vue 作为框架
- en: Developers in the industry must resolve frontend development problems quickly
    with minimal impact on existing workflows or backend architecture. In many cases,
    developers tend to overlook the UI until the end of a project, which can happen
    because of a lack of resources, ever-evolving product requirements, or the existing
    attitude that the frontend is the easy bit.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 行业中的开发者必须快速解决前端开发问题，同时对现有工作流程或后端架构的影响最小。在许多情况下，开发者往往在项目结束时才关注 UI，这可能是由于资源不足、产品需求不断演变或现有的前端是简单部分的态度。
- en: However, companies such as Apple and Google have proven that thinking through
    the design of the frontend is key to a solid product or platform that will excite
    and engage users, leading to a higher return on investment and a more successful
    business.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，像苹果和谷歌这样的公司已经证明，深入思考前端设计是打造一个能够激发和吸引用户、带来更高投资回报和更成功业务的产品或平台的关键。
- en: If you know Vue, you may have also come across other frontend frameworks that,
    at face value, solve the same problems, such as Ember, Angular, or React. At a
    surface level, they attempt to make reactive frontend development more reliable
    and introduce patterns that make it easier. However, there are significant differences
    in how a Vue project might play out compared to an Angular or React project. Let’s
    investigate them.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你了解 Vue，你可能也遇到过其他前端框架，它们表面上解决的是相同的问题，例如 Ember、Angular 或 React。在表面层面上，它们试图使响应式前端开发更加可靠，并引入使开发更简单的模式。然而，与
    Angular 或 React 项目相比，Vue 项目可能会有显著的不同。让我们来调查一下。
- en: Angular versus Vue
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular 与 Vue 的比较
- en: Angular is a **Model-View-ViewModel** (**MVVM**) framework built by Google and
    has built-in support for TypeScript. The Angular ecosystem includes **Ahead-of-Time**
    (**AoT**) rendering, a router, and a CLI tool. However, it fails to deliver a
    simplified system for global state management; developers would need to learn
    how to use Flux or adopt NgRx.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 是由谷歌构建的 **模型-视图-视图模型**（**MVVM**）框架，并内置了对 TypeScript 的支持。Angular 生态系统包括
    **预编译**（**AoT**）渲染、路由器和 CLI 工具。然而，它未能提供全局状态管理的简化系统；开发者需要学习如何使用 Flux 或采用 NgRx。
- en: Vue takes Angular’s core robustness and provides a better development experience
    by removing the restriction of an enforced code style for developers. Vue also
    simplifies common Angular patterns, such as HTML directives, and eliminates a
    variety of Angular’s project structures, such as injectables, components, pipes,
    modules, and so on. From Vue 3.0 onward, it provides excellent support for TypeScript
    and typing without the drawbacks of Angular-enforced coding styles.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Vue继承了Angular的核心稳健性，并通过移除对开发者强制代码风格的限制，提供了更好的开发体验。Vue还简化了常见的Angular模式，如HTML指令，并消除了Angular的各种项目结构，如可注入的、组件、管道、模块等。从Vue
    3.0开始，它为TypeScript和类型提供了出色的支持，而没有Angular强制编码风格的缺点。
- en: Vue is more flexible, developer-friendly, efficient, and straightforward to
    set up and learn to use than Angular in many cases.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，Vue比Angular更灵活、开发者友好、高效，并且设置和学习的直接性更强。
- en: Next, let’s look at how Vue and React differ.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看Vue和React之间的区别。
- en: React versus Vue
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React与Vue的比较
- en: First released in 2013 and backed by Meta (previously known as Facebook), React
    rapidly gained popularity in the developer community. React introduces the **JSX
    pattern** to write HTML syntax directly with JavaScript. With JSX, React increases
    the amount that new developers are required to learn about both JavaScript and
    component-based architecture.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首次发布于2013年，由Meta（之前称为Facebook）支持，React迅速在开发者社区中获得了人气。React引入了**JSX模式**，可以直接用JavaScript编写HTML语法。有了JSX，React增加了新开发者需要学习的JavaScript和基于组件的架构的知识量。
- en: 'Both React and Vue share the same component-driven development approach, allowing
    developers to build applications in a modular way. Each component contains its
    functionalities and lifecycle. Vue takes these core concepts of modular coding
    and offers flexibility to developers in choosing which approach to use to write
    their components: JSX or the traditional style, in which HTML, CSS, and JavaScript
    are separated.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: React和Vue都采用相同的组件驱动开发方法，允许开发者以模块化的方式构建应用程序。每个组件都包含其功能性和生命周期。Vue将这些模块化编码的核心概念带给开发者，并提供了灵活性，让他们可以选择使用哪种方法来编写组件：JSX或传统的风格，其中HTML、CSS和JavaScript是分离的。
- en: Vue uses the **Single-File Component** (**SFC**) approach to leverage this modular
    structure into a single file while keeping the separation readable and understandable
    for developers.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Vue使用**单文件组件**（**SFC**）方法来利用这种模块化结构到一个文件中，同时保持对开发者的可读性和可理解性。
- en: Advantages of using Vue for your project
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Vue进行项目的优势
- en: Vue has a gentler learning curve and a vibrant ecosystem. This gentle learning
    curve helps reduce overhead and cost for any team onboarding developers to a new
    Vue project.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Vue的学习曲线更平缓，生态系统更活跃。这种平缓的学习曲线有助于降低任何团队在将开发者引入新的Vue项目时的开销和成本。
- en: 'One key benefit of Vue is its approachability for both new and veteran developers:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Vue的一个关键优势是其对新老开发者都易于接近：
- en: Out of the box, developers can use a well-optimized and performant framework
    on which to build scalable, dynamic frontend applications.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者可以立即使用一个经过良好优化和性能出色的框架来构建可扩展的、动态的前端应用程序。
- en: The SFC format pattern offers a modular and flexible blueprint that provides
    an enjoyable experience to developers. SFCs allow Vue to be genuinely versatile.
    You can implement basic functionalities and incrementally adopt pieces of a static
    site into Vue rather than overhaul your entire website.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SFC格式模式提供了一个模块化和灵活的蓝图，为开发者提供了愉快的体验。SFC允许Vue真正地灵活多变。你可以实现基本功能，并逐步将静态站点的部分内容集成到Vue中，而不是彻底重写整个网站。
- en: As powerful as Redux and NgRx, Vuex (and lately Pinia) proves to be an outstanding
    official global state management tool that is flexible enough to meet most development
    needs.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 与Redux和NgRx一样强大，Vuex（以及最近的Pinia）证明是一个出色的官方全局状态管理工具，它足够灵活，可以满足大多数开发需求。
- en: Thanks to its stable performance; well-defined tools such as Vue Router, Pinia,
    Vuex, and so on; and a supportive community, developers can save time and money
    by choosing Vue for their development stack.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其稳定的性能；定义明确的工具，如Vue Router、Pinia、Vuex等；以及一个支持性的社区，开发者可以通过选择Vue作为他们的开发栈来节省时间和金钱。
- en: The following section explores the essential Vue architecture before deep-diving
    into the SFC pattern and template syntax.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究SFC模式和模板语法之前，本节将探讨Vue的基本架构。
- en: Working with Vue
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与Vue一起工作
- en: 'To learn about the Vue architecture, we will start by importing the Vue package
    into our coding playground. One straightforward way is to import the Vue package
    through the official `index.html` file and adding a `<script>` tag to load the
    Vue CDN within the `<head>` section of the HTML template, as demonstrated in the
    following code block:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解 Vue 架构，我们将首先将 Vue 包导入到我们的编码沙盒中。一种简单的方法是通过官方的 `index.html` 文件导入 Vue 包，并在
    HTML 模板的 `<head>` 部分添加一个 `<script>` 标签来加载 Vue CDN，如下面的代码块所示：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The browser will also load the Vue package using the CDN defined in the `script`
    tag when loading the page. Once completed, you can utilize the Vue functions and
    start writing Vue code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面加载时，浏览器也会使用在 `script` 标签中定义的 CDN 加载 Vue 包。一旦完成，您就可以使用 Vue 函数并开始编写 Vue 代码。
- en: But first, let’s look at the Vue instance.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，让我们看看 Vue 实例。
- en: Understanding the Vue instance
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 Vue 实例
- en: 'In general, each Vue application consists of *only one* root Vue instance,
    which can be created using the `Vue.createApp` method:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，每个 Vue 应用程序只包含 *一个* 根 Vue 实例，可以使用 `Vue.createApp` 方法创建：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `Vue` class constructor accepts an `options` object for the configurations
    and behavior of components. We call this approach Options API and we can use it
    for all corresponding Vue components. However, all of them are considered nested
    Vue instances, with their own options and properties.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vue` 类构造函数接受一个 `options` 对象，用于配置和组件的行为。我们称这种方法为 Options API，我们可以为所有相应的 Vue
    组件使用它。然而，它们都被视为嵌套 Vue 实例，具有它们自己的选项和属性。'
- en: Note
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`vm` is a term commonly used to refer to a `vm` helps you to keep track of
    your Vue instance in a block of code.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`vm` 是一个常用术语，用来指代 `vm`，它帮助您在代码块中跟踪 Vue 实例。'
- en: 'For the Vue engine to render the application instance, in our `index.html`
    file, we declare an `<div>` element within the `<body>` tag using a unique class
    name, ID, or data attribute as the main entry point for the application accordingly:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 Vue 引擎渲染应用程序实例，在我们的 `index.html` 文件中，我们使用唯一的类名、ID 或数据属性作为应用程序的主要入口点，在 `<body>`
    标签内声明一个 `<div>` 元素：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To render the Vue application in the browser, we need to trigger `vm.mount()`
    to mount the root component to the targeted HTML element using a unique selector.
    In this example, it is an `id` with a value of `vue-app`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要在浏览器中渲染 Vue 应用程序，我们需要触发 `vm.mount()`，将根组件挂载到具有唯一选择器的目标 HTML 元素上。在这个例子中，它是一个值为
    `vue-app` 的 `id`：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, you bind the `<div>` element with `id="vue-app"` to the new Vue instance.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将 `<div>` 元素绑定到新的 Vue 实例上，其 `id` 为 `vue-app`。
- en: 'Next, let’s define text with a value of `"Start using Vue.js today!"` and add
    it as a property of the `return` value for the `data` method in the application
    options:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们定义一个值为 `"Start using Vue.js today!"` 的文本，并将其添加为应用程序选项中 `data` 方法返回值的属性：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code example, `data` is a function that returns an Object instance
    containing the local state (or local variables) of a component. We will discuss
    this further in an upcoming section of this chapter.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，`data` 是一个返回包含组件本地状态（或本地变量）的对象实例的函数。我们将在本章的后续部分进一步讨论这一点。
- en: 'To render the content of `text` to the DOM, we use Vue template syntax, represented
    by double curly braces (`{{}}`) wrapped around the reactive content. In this case,
    we use `{{ text }}`, as shown in the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 `text` 的内容渲染到 DOM 中，我们使用 Vue 模板语法，由双大括号 (`{{}}`) 包围的响应式内容表示。在这种情况下，我们使用 `{{
    text }}`，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The Vue engine will replace the data property labeled `text` and the curly brace
    placeholder with the `Start using Vue.js` `today!` string.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 引擎将替换标签为 `text` 的数据属性和花括号占位符，用字符串 `Start using Vue.js today!` 替换。
- en: 'The output of the preceding code will be as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下所示：
- en: '![Figure 1.1 – Displaying “Start using Vue.js today!” using a local data property](img/B18645_01_01.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 使用本地数据属性显示“今天开始使用 Vue.js！”](img/B18645_01_01.jpg)'
- en: Figure 1.1 – Displaying “Start using Vue.js today!” using a local data property
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 使用本地数据属性显示“今天开始使用 Vue.js！”
- en: 'In the `<head>` tag, we can also use the DOM API to construct a Vue application
    instance and bound it to our target element (with the ID selector as `#vue-app`):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<head>` 标签中，我们也可以使用 DOM API 构建一个 Vue 应用程序实例，并将其绑定到我们的目标元素（ID 选择器为 `#vue-app`）：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The output is the same for both approaches. However, we strongly recommend *not*
    using `DOMContentLoaded`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 两种方法的输出相同。然而，我们强烈建议 *不要* 使用 `DOMContentLoaded`。
- en: 'While working with a CDN is very portable, we recommend using package managers
    as the installation method for Vue. From Vue 3 and above, Vue projects use Vite
    (or Vite.js) to initialize and bundle the code. You can access it here: [https://vuejs.org/guide/quick-start.html#creating-a-vue-application](https://vuejs.org/guide/quick-start.html#creating-a-vue-application).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用 CDN 的工作方式非常便携，但我们建议将包管理器作为 Vue 的安装方法。从 Vue 3 及以上版本开始，Vue 项目使用 Vite（或 Vite.js）来初始化和打包代码。您可以通过此处访问：[https://vuejs.org/guide/quick-start.html#creating-a-vue-application](https://vuejs.org/guide/quick-start.html#creating-a-vue-application)。
- en: Using a bundling management tool is very helpful for managing other third-party
    libraries and building an optimized code package for production. In the next section,
    we will explore a package-controlled example.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用打包管理工具对于管理其他第三方库和构建用于生产的优化代码包非常有帮助。在下一节中，我们将探讨一个由包控制的示例。
- en: Setting up a Vite-powered Vue application
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Vite 驱动的 Vue 应用程序
- en: 'A Vue project is structured similarly to a lot of modern node-based apps and
    contains the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 项目结构与许多基于 Node 的现代应用程序类似，包含以下内容：
- en: A `package.json` file
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `package.json` 文件
- en: A `node_modules` folder in the root of your project
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目根目录下的 `node_modules` 文件夹
- en: Various other configuration files are usually contained at the root level, such
    as `vite.config.js` and `.eslintrc.js`, since they will generally have an effect
    across your whole project.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种其他配置文件通常位于根目录级别，例如 `vite.config.js` 和 `.eslintrc.js`，因为它们通常会对整个项目产生影响。
- en: 'The following screenshot displays a default Vue app folder structure:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了默认 Vue 应用程序的文件夹结构：
- en: '![Figure 1.2 – Default Vue application folder structure](img/B18645_01_02.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 默认 Vue 应用程序文件夹结构](img/B18645_01_02.jpg)'
- en: Figure 1.2 – Default Vue application folder structure
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 默认 Vue 应用程序文件夹结构
- en: By default, there is an `index.html` file at the root level that serves as a
    placeholder for loading the Vue application. You can modify this file to include
    `header` and `footer` scripts, such as Google Fonts or third-party JavaScript
    libraries that are not included as a part of your bundle.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，根目录下有一个 `index.html` 文件，用作加载 Vue 应用的占位符。您可以修改此文件以包含 `header` 和 `footer`
    脚本，例如 Google Fonts 或作为您的包一部分之外的第三方 JavaScript 库。
- en: 'The Vue project structure follows a pattern where you manage most of your source
    code within the `/src` directory. You can subdivide your Vue files into various
    folders, for example, using a `components` folder to store reusable Vue components.
    By default, Vite will create `assets` and `components` folders to code-split the
    default files. For beginners, it is good to follow this pattern until you get
    more comfortable:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 项目结构遵循一种模式，其中您将大部分源代码管理在 `/src` 目录中。您可以将 Vue 文件细分到各种文件夹中，例如使用 `components`
    文件夹来存储可重用的 Vue 组件。默认情况下，Vite 将创建 `assets` 和 `components` 文件夹以进行代码拆分。对于初学者来说，遵循此模式直到您更加熟悉是很好的：
- en: '![Figure 1.3 – Default Vue application src folder structure](img/B18645_01_03.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 默认 Vue 应用程序 src 文件夹结构](img/B18645_01_03.jpg)'
- en: Figure 1.3 – Default Vue application src folder structure
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 默认 Vue 应用程序 src 文件夹结构
- en: 'The `public` folder is a special directory containing files that need to be
    transferred directly to the output location. The following screenshot displays
    how this folder will look:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`public` 文件夹是一个特殊的目录，包含需要直接传输到输出位置的文件。以下截图显示了该文件夹的外观：'
- en: '![Figure 1.4 – Default Vue application public folder](img/B18645_01_04.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – 默认 Vue 应用程序 public 文件夹](img/B18645_01_04.jpg)'
- en: Figure 1.4 – Default Vue application public folder
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 默认 Vue 应用程序 public 文件夹
- en: At this point, you should be somewhat familiar with how a Vue project structure
    looks. Next, we discuss Vue’s unique pattern – the SFC architecture.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该对 Vue 项目结构的样子有了一定的了解。接下来，我们将讨论 Vue 的独特模式——SFC 架构。
- en: Vue’s SFC architecture
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vue 的 SFC 架构
- en: Components are the building blocks of most modern frameworks. In general, splitting
    your code into component-specific chunks ensures code readability and facilitates
    the **Don’t Repeat Yourself** (**DRY**) principle. Vue’s SFC pattern follows this
    approach closely.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 组件是大多数现代框架的构建块。通常，将代码拆分为特定组件的块可以确保代码可读性，并促进 **不要重复自己**（**DRY**）原则。Vue 的 SFC
    模式紧密遵循这种方法。
- en: 'The SFC architecture centralizes the responsibility of both appearance and
    behavior into a single file, thus simplifying the architecture of your project.
    You now can refer to your HTML, CSS, and JavaScript logic without switching files.
    Your default `.vue` file structure will be as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: SFC架构将外观和行为的责任集中到单个文件中，从而简化了您项目的架构。现在，您可以参考HTML、CSS和JavaScript逻辑，而无需切换文件。您的默认`.vue`文件结构如下：
- en: "![Figure 1.5 – Default .\uFEFF\uFEFFvue file structure](img/B18645_01_05.jpg)"
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图1.5 – 默认.vue文件结构](img/B18645_01_05.jpg)'
- en: Figure 1.5 – Default .vue file structure
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5 – 默认.vue文件结构
- en: 'A general good practice is to ensure your `components` file doesn’t contain
    more than 500 lines of code. If you encounter this situation, it’s recommended
    to split them into smaller reusable components. For example, in the header of
    your application, you may have a logo element that is reused on other pages. You
    would create a component such as `logo.vue`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一个一般的好习惯是确保您的`components`文件不包含超过500行代码。如果您遇到这种情况，建议将它们拆分成更小的可重用组件。例如，在应用程序的标题中，您可能有一个在其他页面上重复使用的logo元素。您将创建一个如`logo.vue`的组件：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In `header.vue`, you import the `logo` component into the `script` section
    and then include it as a nested component of the `header` component. You can achieve
    this by declaring it as a property of the `components` field:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在`header.vue`中，您将`logo`组件导入到`script`部分，然后将其作为`header`组件的嵌套组件包含。您可以通过将其声明为`components`字段的属性来实现这一点：
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `template` section, you can use the logo as a normal HTML element, as
    shown here:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在`template`部分，您可以将logo用作一个普通的HTML元素，如下所示：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The output will be a header with the logo image rendered – and you can reuse
    the `logo` component in any other component when needed.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将是一个带有渲染的logo图像的标题 – 当需要时，您可以在任何其他组件中重用`logo`组件。
- en: Very soon, you will have lots of these semantically structured files, which
    use small chunks of a reusable syntax that your team can implement across various
    application areas.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 很快，您将拥有许多这些语义结构化的文件，它们使用可重用语法的小块，您的团队可以在各种应用程序区域中实现。
- en: In the next exercise, you will practice creating your first Vue component and
    displaying it in another component.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，您将练习创建您的第一个Vue组件并在另一个组件中显示它。
- en: Exercise 1.01 – building your first component
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.01 – 构建您的第一个组件
- en: We are going to build our first component, `Exercise1.01`, inside of a Vue project
    and import it to use it in the `App.vue` component using ES6 module syntax.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在Vue项目中构建我们的第一个组件`Exercise1.01`，并使用ES6模块语法将其导入到`App.vue`组件中使用。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Front-End-Development-Projects-with-Vue.js/tree/v2-edition/Chapter01/Exercise1.01](https://github.com/PacktPublishing/Front-End-Development-Projects-with-Vue.js/tree/v2-edition/Chapter01/Exercise1.01).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅[https://github.com/PacktPublishing/Front-End-Development-Projects-with-Vue.js/tree/v2-edition/Chapter01/Exercise1.01](https://github.com/PacktPublishing/Front-End-Development-Projects-with-Vue.js/tree/v2-edition/Chapter01/Exercise1.01)。
- en: Note
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Your app will hot-reload when you save new changes, so you can see them instantly.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当您保存新的更改时，您的应用程序将进行热重载，因此您可以立即看到它们。
- en: 'To get started, execute the following steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，执行以下步骤：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.01`
    folder by using the following commands in order:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`npm init vue@3`生成的应用程序作为起点，或者在使用以下命令在代码仓库的根目录中导航到`Chapter01/Exercise1.01`文件夹：
- en: '[PRE10]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run the application using the following command:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE12]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Go to `https://localhost:3000`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往`https://localhost:3000`。
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code中打开练习项目（在项目目录中使用`code .`命令）或使用您首选的IDE。
- en: Open the `src/App.vue` file, delete everything in that file, and save.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/App.vue`文件，删除该文件中的所有内容，并保存。
- en: In your browser, everything should be a blank, clean state to start working
    from.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的浏览器中，一切应该是一个空白、干净的状态，以便开始工作。
- en: 'The three primary components that make up a single-file component are the `<template>`,
    `<script>`, and `<style>` blocks. Add the following code blocks as our scaffolding
    for a Vue component:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构成单个文件组件的三个主要组件是`<template>`、`<script>`和`<style>`块。将以下代码块添加为我们Vue组件的脚手架：
- en: '[PRE13]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create another file in the `components` folder called `Exercise1-01.vue` and
    repeat the same step for scaffolding the Vue component:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `components` 文件夹中创建另一个名为 `Exercise1-01.vue` 的文件，并重复相同的步骤来搭建 Vue 组件：
- en: '[PRE22]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Within our `Exercise1-01.vue` component, compose a set of `<div>` tags, with
    an `<h1>` element and a heading inside the `<``template>` tags:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 `Exercise1-01.vue` 组件中，组合一组 `<div>` 标签，其中包含一个 `<h1>` 元素和 `<template>` 标签内的标题：
- en: '[PRE31]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Inside the `<style>` block, add some styling as follows:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<style>` 块内，添加以下样式：
- en: '[PRE36]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Import our component into `App.vue` by using the ES6 `import` method and defining
    the component inside the `components` object in the `<script>` block. We can now
    reference this component inside the HTML by using its name in camelCase or kebab-case
    (both will work):'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 ES6 的 `import` 方法将我们的组件导入到 `App.vue` 中，并在 `<script>` 块中的 `components` 对象内定义组件。现在我们可以通过使用其驼峰式或短横线命名法（两者都有效）在
    HTML 中引用此组件：
- en: '[PRE45]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'When you press *Ctrl* + *S* (or *Cmd* + *S* on macOS), `https://localhost:3000`
    should reload and look amazing:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当你按下 *Ctrl* + *S*（或在 macOS 上按下 *Cmd* + *S*），`https://localhost:3000` 应该重新加载并看起来很棒：
- en: '![Figure 1.6 – localhost output for Exercise 1.01](img/B18645_01_06.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – Exercise 1.01 的 localhost 输出](img/B18645_01_06.jpg)'
- en: Figure 1.6 – localhost output for Exercise 1.01
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – Exercise 1.01 的 localhost 输出
- en: In this exercise, we saw how to structure Vue components using template tags,
    and scaffold basic Vue components using Vetur. We also created a new Vue component
    and reuse it in `App.vue` using ES6 syntax and property field `components`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们看到了如何使用模板标签构建 Vue 组件，以及如何使用 Vetur 搭建基本的 Vue 组件。我们还创建了一个新的 Vue 组件，并使用
    ES6 语法和 `components` 属性在 `App.vue` 中重用它。
- en: In the next section, we will gain an understanding of how to define the local
    state data of a component using `data` properties.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将了解如何使用 `data` 属性定义组件的本地状态数据。
- en: Exploring data properties as a local state
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索数据属性作为本地状态
- en: 'One of the most used terms and reactive elements used when constructing Vue
    components is `data` properties. These manifest themselves within the `data()`
    function of a Vue instance:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建 Vue 组件时，最常用到的术语和响应式元素之一是 `data` 属性。这些在 Vue 实例的 `data()` 函数中体现出来：
- en: '[PRE56]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: You can use the `data()` function to create a local data object to essentially
    store any information you want to use within your Vue templates. This local object
    is bound to the component and we call it the local state data of the component.
    When any property of this local object is updated or changed, it will reactively
    update in the corresponding template.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `data()` 函数创建一个本地数据对象，以存储你想要在 Vue 模板中使用的信息。这个本地对象绑定到组件上，我们称之为组件的本地状态数据。当这个本地对象的任何属性更新或更改时，它将在相应的模板中响应式地更新。
- en: Once we have defined our local data, we need to bind it to the `template` section
    to display its values in the UI, which is called **data interpolation**.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了本地数据，就需要将其绑定到 `template` 部分以在 UI 中显示其值，这被称为 **数据插值**。
- en: '**Interpolation** is the insertion of something of a different nature into
    something else. In the Vue context, this is where you would use *mustache* syntax
    (double curly braces) to define an area in which you can inject data into a component’s
    HTML template.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**插值**是将不同性质的内容插入到其他内容中的过程。在 Vue 的上下文中，这就是你使用 *mustache* 语法（双大括号）来定义可以注入数据到组件
    HTML 模板中的区域的地方。'
- en: 'Consider the following example:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE57]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The `data` property of `red` is bound to Vue.js reactive data and will update
    during runtime, depending on state changes between the UI and its data.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`red` 的 `data` 属性绑定到 Vue.js 的响应式数据，并在运行时根据 UI 和其数据之间的状态变化进行更新。'
- en: At this point, we should look at how to define and bind local data in the most
    classical Vue way. With Vue 3.0, we enjoy a shorter and simpler approach to writing
    and importing components. Let’s explore it next.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们应该看看如何以最经典的 Vue 方式定义和绑定本地数据。随着 Vue 3.0 的推出，我们享受了编写和导入组件的更简短、更简单的方法。让我们接下来探索它。
- en: Writing components with script setup
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用脚本设置编写组件
- en: Starting from Vue 3.0, Vue introduces a new syntactic sugar `setup` attribute
    for the `<script>` tag. This attribute allows you to write code using Composition
    API (which we will discuss further in [*Chapter 5*](B18645_05.xhtml#_idTextAnchor193),
    *The Composition API*) in SFCs and shorten the amount of code needed for writing
    simple components.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Vue 3.0 开始，Vue 引入了一个新的语法糖 `setup` 属性用于 `<script>` 标签。这个属性允许你在 SFC 中使用组合式 API（我们将在
    [*第 5 章*](B18645_05.xhtml#_idTextAnchor193)，*组合式 API*）编写代码，并缩短编写简单组件所需的代码量。
- en: The code block residing within the `<script setup>` tag will then be compiled
    into a `render()` function before being deployed to the browser, providing better
    runtime performance.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，位于 `<script setup>` 标签内的代码块将被编译成一个 `render()` 函数，在部署到浏览器之前，提供更好的运行时性能。
- en: 'To start using this syntax, we take the following example code:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用此语法，请参考以下示例代码：
- en: '[PRE58]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Then, we replace `<script>` with `<script setup>`, and remove all the code
    blocks of `export default…`. The example code now becomes as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将 `<script>` 替换为 `<script setup>`，并删除所有 `export default…` 的代码块。示例代码现在如下所示：
- en: '[PRE59]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'In `<template>`, we use `logo` as usual:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<template>` 中，我们像往常一样使用 `logo`：
- en: '[PRE60]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'To define and use local data, instead of using `data()`, we can declare regular
    variables as local data and functions as local methods for that component directly.
    For example, to declare and render a local data property of `color`, we use the
    following code:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义和使用局部数据，我们可以在该组件中直接声明常规变量作为局部数据，并声明函数作为局部方法。例如，为了声明并渲染局部数据属性 `color`，我们使用以下代码：
- en: '[PRE61]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The preceding code outputs the same result as the example in the previous section
    –`red`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码输出的结果与上一节中的示例相同——`red`。
- en: As mentioned at the beginning of this section, `<script setup>` is the most
    useful when you need to use Composition API within SFCs. Still, we can always
    take advantage of its simplicity for simple components.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如本节开头所述，`<script setup>` 在需要在使用 SFC 内的 Composition API 时最有用。尽管如此，我们仍然可以充分利用其简洁性来简化组件。
- en: Note
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: From this point onward, we will combine both approaches and use `<script setup>`
    whenever possible.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，我们将结合两种方法，并在可能的情况下使用 `<script setup>`。
- en: In the following exercise, we will go into more detail about how to use interpolation
    and data.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下练习中，我们将更详细地介绍如何使用插值和数据。
- en: Exercise 1.02 – interpolation with conditionals
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.02 – 带条件的插值
- en: When you want to output data into your template or make elements on a page reactive,
    interpolate data into the template by using curly braces. Vue can understand and
    replace that placeholder with data.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想将数据输出到模板或使页面上的元素具有响应性时，通过使用大括号将数据插值到模板中。Vue 可以理解并替换占位符为数据。
- en: 'To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.02):'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.02)：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.02`
    folder by using the following commands in order:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm init vue@3` 生成的应用程序作为起点，或在代码仓库的根目录中，使用以下命令按顺序导航到 `Chapter01/Exercise1.02`
    文件夹：
- en: '[PRE62]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Run the application using the following command:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE64]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 中打开练习项目（在项目目录中使用 `code .` 命令）或使用你喜欢的 IDE。
- en: Create a new Vue component file named `Exercise1-02.vue` in the `src/components`
    directory.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/components` 目录中创建一个新的 Vue 组件文件，命名为 `Exercise1-02.vue`。
- en: 'Inside the `Exercise1-02.vue` component, let’s add data within the `<script
    setup>` tags by adding a function called `data()`, and return a key called `title`
    with your heading string as the value:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Exercise1-02.vue` 组件内部，让我们通过添加一个名为 `data()` 的函数，在 `<script setup>` 标签内添加数据，并返回一个名为
    `title` 的键，其值为你的标题字符串：
- en: '[PRE65]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Reference `title` by replacing your `<h1>` text with the interpolated value
    of `{{` `title }}`:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将 `<h1>` 文本替换为 `{{` `title }}` 的插值表达式来引用 `title`：
- en: '[PRE74]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: When you save this document, the data title will now appear inside your `h1`
    tag.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当你保存此文档时，数据 `title` 将现在出现在你的 `h1` 标签内。
- en: 'In Vue, interpolation will resolve any JavaScript that’s inside curly braces.
    For example, you can transform the text inside your curly braces using the `toUpperCase()`
    method:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Vue 中，插值将解析大括号内的任何 JavaScript。例如，你可以使用 `toUpperCase()` 方法转换大括号内的文本：
- en: '[PRE79]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Go to [https://localhost](https://localhost)`:3000`. You should see an output
    like the following screenshot:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://localhost](https://localhost):3000`。你应该会看到一个如下截图所示的输出：
- en: '![Figure 1.7 – Display of an uppercase title](img/B18645_01_07.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7 – 大写标题的显示](img/B18645_01_07.jpg)'
- en: Figure 1.7 – Display of an uppercase title
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7 – 大写标题的显示
- en: 'Interpolation can also handle conditional logic. Inside the data object, add
    a Boolean key-value pair, `isUppercase: false`:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '插值也可以处理条件逻辑。在数据对象内部，添加一个布尔键值对，`isUppercase: false`：'
- en: '[PRE84]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'The preceding code will generate the following output:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将生成以下输出：
- en: '![Figure 1.8 – Exercise 1.02 output after including the inline conditional
    statement](img/B18645_01_08.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8 – 包含内联条件语句后的 1.02 练习输出](img/B18645_01_08.jpg)'
- en: Figure 1.8 – Exercise 1.02 output after including the inline conditional statement
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8 – 包含内联条件语句后的 1.02 练习输出
- en: 'Add this condition to the curly braces and when you save, you should see the
    title in sentence case. Play around with this value by changing `isUppercase`
    to `true`:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此条件添加到大括号中，并在保存时，你应该看到标题为句子大小写。通过将 `isUppercase` 改为 `true` 来玩转这个值：
- en: '[PRE99]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'The following screenshot displays the final output generated upon running the
    preceding code:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了运行上述代码后生成的最终输出：
- en: '![Figure 1.9 – Displaying the uppercase title](img/B18645_01_09.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.9 – 显示大写标题](img/B18645_01_09.jpg)'
- en: Figure 1.9 – Displaying the uppercase title
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9 – 显示大写标题
- en: 'Now, let’s replace `<script>` with `<script setup>` and move all the local
    data declared within the `data()` function to its own variable names respectively,
    such as `title` and `isUpperCase`, as shown here:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将 `<script>` 替换为 `<script setup>`，并将 `data()` 函数内声明的所有本地数据分别移动到其自己的变量名中，例如
    `title` 和 `isUpperCase`，如下所示：
- en: '[PRE109]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: The output should remain the same as in *Figure 1**.9*.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出应与 *图 1**.9* 中的相同。
- en: In this exercise, we were able to apply inline conditions within the interpolated
    tags (`{{}}`) by using a Boolean variable. The feature allows us to modify what
    data to display without overly complicated situations, which can be helpful in
    certain use cases. We also learned how to write a more concise version of the
    component using `<script setup>` in the end.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们能够通过使用布尔变量在插值标签（`{{}}`）内应用内联条件。此功能允许我们在不过度复杂的情况下修改要显示的数据，这在某些用例中可能很有帮助。我们还学会了如何使用
    `<script setup>` 编写组件的更简洁版本。
- en: Since we are now familiar with using interpolation to bind local data, we will
    move on to our next topic – how to attach data and methods to HTML element events
    and attributes using Vue attributes.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在已经熟悉了使用插值来绑定本地数据，我们将继续探讨下一个主题——如何使用 Vue 属性将数据和方法附加到 HTML 元素的事件和属性上。
- en: Understanding Vue directives
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Vue 指令
- en: 'All Vue-based directives start with a `v-*` prefix as a Vue-specific attribute:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 所有基于 Vue 的指令都以 `v-*` 前缀开始，作为 Vue 特定的属性：
- en: '`v-text`: The `v-text` directive has the same reactivity as with interpolation.
    Interpolation with `{{ }}` is more performant than the `v-text` directive. However,
    you may find yourself in situations where you have pre-rendered text from a server
    and want to override it once your Vue application has finished loading. For example,
    you can pre-define a static placeholder text while waiting for the Vue engine
    to eventually replace it with the dynamic value received from `v-text`, as shown
    in the following code block:'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-text`：`v-text` 指令与插值具有相同的响应性。使用 `{{ }}` 的插值比 `v-text` 指令更高效。然而，你可能遇到这样的情况：你从服务器预先渲染了文本，并希望在
    Vue 应用程序加载完成后覆盖它。例如，你可以在等待 Vue 引擎最终用从 `v-text` 接收到的动态值替换它时，预先定义一个静态占位文本，如下面的代码块所示：'
- en: '[PRE113]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '`v-once`: When used, it indicates the starting point of static content. The
    Vue engine will render the component with this attribute and its children exactly
    once. It also ignores all data updates for this component or element after the
    initial render. This attribute is handy for scenarios with no reactivity needed
    for certain parts. You can combine `v-once` with `v-text`, interpolation, and
    any Vue directive.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-once`：当使用时，它表示静态内容的起点。Vue 引擎将仅渲染一次具有此属性及其子元素。它还会忽略在初始渲染之后对此组件或元素的任何数据更新。此属性在不需要某些部分具有响应性的场景中非常有用。你可以将
    `v-once` 与 `v-text`、插值和任何 Vue 指令结合使用。'
- en: '`V-html`: Vue will parse the value passed to this directive and render your
    text data as a valid HTML code into the target element. We don’t recommend using
    this directive, especially on the client side, due to its performance impact and
    the potential security leak. The `script` tag can be embedded and triggered using
    this directive.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`V-html`：Vue 将解析传递给此指令的值，并将你的文本数据作为有效的 HTML 代码渲染到目标元素中。我们不建议使用此指令，尤其是在客户端，因为它会影响性能并可能导致潜在的安全漏洞。`script`
    标签可以通过此指令嵌入和触发。'
- en: '`v-bind`: This directive is one of the most popular Vue features. You can use
    this directive to enable one-way binding for a data variable or an expression
    to an HTML attribute, as shown in the following example:'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-bind`: 这是 Vue 中最受欢迎的功能之一。你可以使用这个指令来为一个数据变量或表达式启用对 HTML 属性的单向绑定，如下例所示：'
- en: '[PRE119]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: The preceding code demonstrates how to bind the `logo` data variable to image’s
    `src`. The `img` component now takes the source value from the `logo` variable
    and renders the image accordingly.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码演示了如何将 `logo` 数据变量绑定到图像的 `src` 属性。现在 `img` 组件从 `logo` 变量获取源值并相应地渲染图像。
- en: 'You can also use it to pass a local data variable as props to another component.
    A shorter way is using the `:attr` syntax instead of `v-bind:attr`. Take the preceding
    example, for instance. We can rewrite the template as follows:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以用它将本地数据变量作为 props 传递给另一个组件。一种更简短的方式是使用 `:attr` 语法而不是 `v-bind:attr`。以先前的例子为例。我们可以将模板重写如下：
- en: '[PRE125]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '`v-if`: This is a powerful directive you can use to conditionally control how
    elements render inside a component. This directive operates like the `if…else`
    and `if…else if…` conditions. It comes with supporting directives, such as `v-else`,
    standing for the `else` case, and `v-else-if`, standing for the `else if` case.
    For example, we want to render different text when `count` is `2`, `4`, and `6`.
    The following code will demonstrate how to do so:'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-if`: 这是一个强大的指令，你可以用它来有条件地控制组件内部元素的渲染方式。这个指令的操作类似于 `if…else` 和 `if…else if…`
    条件。它附带支持指令，如 `v-else`，代表 `else` 的情况，以及 `v-else-if`，代表 `else if` 的情况。例如，我们想在 `count`
    为 `2`、`4` 和 `6` 时渲染不同的文本。下面的代码将演示如何做到这一点：'
- en: '[PRE126]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '`v-show`: You can also control the visible state of HTML elements by using
    `v-show`. Unlike `v-if`, with `v-show`, the Vue engine still mounts the element
    to the DOM tree but hides it using the `display: none` CSS style. You can still
    see the content of the hidden element visible in the DOM tree upon inspecting
    it, but it is not visible on the UI to end users. This directive does not work
    with `v-else` or `v-else-if`. If `v-show` results in a `true` Boolean, it will
    leave the DOM element as is. If it resolves as `false`, it will apply the `display:
    none` style to the element.'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-show`: 你还可以使用 `v-show` 来控制 HTML 元素的可见状态。与 `v-if` 不同，使用 `v-show` 时，Vue 引擎仍然将元素挂载到
    DOM 树上，但使用 `display: none` CSS 样式将其隐藏。在检查时，你仍然可以在 DOM 树中看到隐藏元素的文本内容，但对于最终用户来说，它不可见。此指令不与
    `v-else` 或 `v-else-if` 一起使用。如果 `v-show` 的结果为 `true` 布尔值，它将保持 DOM 元素不变。如果解析为 `false`，它将应用
    `display: none` 样式到该元素。'
- en: '`v-for`: We use the `v-for` directive to accomplish the goal of list rendering
    based on a data source. The data source is an iterative data collection, such
    as an `array` or `object`. We will dive deeper into different use cases for this
    directive in a separate section within this chapter.'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-for`: 我们使用 `v-for` 指令来实现基于数据源进行列表渲染的目标。数据源是一个可迭代的集合，例如 `array` 或 `object`。我们将在本章的单独部分深入探讨这个指令的不同用法。'
- en: We have gone over the most common directives in Vue. Let’s review and experiment
    with how to use these directives with the following exercise.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了 Vue 中最常用的指令。现在让我们通过以下练习来复习和实验如何使用这些指令。
- en: Exercise 1.03 – exploring basic directives (v-text, v-once, v-html, v-bind,
    v-if, v-show)
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.03 – 探索基本指令（v-text, v-once, v-html, v-bind, v-if, v-show）
- en: More complicated components will use multiple directives to achieve the desired
    outcome. In this exercise, we will construct a component that uses several directives
    to bind, manipulate, and output data to a template view.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的组件将使用多个指令来实现预期的效果。在这个练习中，我们将构建一个组件，该组件使用多个指令来绑定、操作并将数据输出到模板视图。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.03).
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.03)。
- en: 'Let’s start the exercise by performing the following steps:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下步骤开始练习：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.03`
    folder by using the following commands in order:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以使用 `npm init vue@3` 生成的应用程序作为起点，或者在每个代码仓库的根目录下，使用以下命令按顺序导航到 `Chapter01/Exercise1.03`
    文件夹：
- en: '[PRE132]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Run the application using the following command:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE134]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: Open the exercise project in VS Code (by using `code .` command within the project
    directory) or your preferred IDE.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code中打开练习项目（在项目目录中使用`code .`命令）或您首选的IDE。
- en: Create a new Vue component file named `Exercise1-03.vue` in the `src/components`
    directory.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`目录下创建一个名为`Exercise1-03.vue`的新Vue组件文件。
- en: 'Inside `Exercise1-03.vue`, compose the following code to display the `text`
    content:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Exercise1-03.vue`内部，编写以下代码以显示`text`内容：
- en: '[PRE135]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'Replace the `{{}}` interpolation with the `v-text` attribute. The output should
    not change:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`{{}}`插值替换为`v-text`属性。输出不应更改：
- en: '[PRE143]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '*Figure 1**.10* displays the output of the preceding code:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1.10*显示了上述代码的输出：'
- en: '![Figure 1.10 – Same output for v-text and the interpolation method](img/B18645_01_10_.jpg)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
  zh: '![图1.10 – v-text和插值方法具有相同的输出](img/B18645_01_10_.jpg)'
- en: Figure 1.10 – Same output for v-text and the interpolation method
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10 – v-text和插值方法具有相同的输出
- en: 'Add the `v-once` directive to the same element. This will force this DOM element
    to only load the `v-text` data once:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`v-once`指令添加到同一元素上。这将强制此DOM元素只加载`v-text`数据一次：
- en: '[PRE148]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'Underneath the `h1` element, include a new `h2` element that uses the `v-html`
    attribute. Add a new local data called `html` that contains a string with HTML
    formatting in it, as shown in the following code block:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`h1`元素下方，包含一个新的`h2`元素，该元素使用`v-html`属性。添加一个新的本地数据`html`，其中包含一个包含HTML格式的字符串，如下面的代码块所示：
- en: '[PRE153]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'Running the preceding code will generate an output as follows:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的代码将生成以下输出：
- en: '![Figure 1.11 – Rendering HTML elements from a string using v-html](img/B18645_01_11_.jpg)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![图1.11 – 使用v-html从字符串渲染HTML元素](img/B18645_01_11_.jpg)'
- en: Figure 1.11 – Rendering HTML elements from a string using v-html
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11 – 使用v-html从字符串渲染HTML元素
- en: 'Add a new local `link` object that contains a bunch of information such as
    the URL, target, title, and tab index. Inside the template, add a new anchor HTML
    element and bind the `link` object to the HTML element using the `v-bind` short
    syntax – for example, `:href="link.url"`:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的本地`link`对象，其中包含诸如URL、目标、标题和标签索引等信息。在模板中，添加一个新的锚点HTML元素，并使用`v-bind`简写语法将该`link`对象绑定到HTML元素上
    – 例如，`:href="link.url"`：
- en: '[PRE163]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: 'The following screenshot displays the output:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了输出：
- en: '![Figure 1.12 – Output on binding the reactive data from the Vue instance to
    any HTML attribute](img/B18645_01_12_.jpg)'
  id: totrans-373
  prefs: []
  type: TYPE_IMG
  zh: '![图1.12 – 将Vue实例的响应式数据绑定到任何HTML属性时的输出](img/B18645_01_12_.jpg)'
- en: Figure 1.12 – Output on binding the reactive data from the Vue instance to any
    HTML attribute
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.12 – 将Vue实例的响应式数据绑定到任何HTML属性时的输出
- en: 'Apply `v-if="false"` to the `h1` element, `v-else-if="false"` to `h2`, and
    `v-else` to the `a` tag like this:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`v-if="false"`应用于`h1`元素，将`v-else-if="false"`应用于`h2`，将`v-else`应用于`a`标签，如下所示：
- en: '[PRE184]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: You should only see the `<a>` tag on the page since we have set the main conditional
    statements to `false`.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将主要条件语句设置为`false`，你应该只能在页面上看到`<a>`标签。
- en: 'The `v-else` condition will display the following:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-else`条件将显示以下内容：'
- en: '![Figure 1.13 – false v-if statements hiding the whole HTML element from the
    DOM](img/B18645_01_13_.jpg)'
  id: totrans-391
  prefs: []
  type: TYPE_IMG
  zh: '![图1.13 – false v-if语句隐藏整个HTML元素从DOM中](img/B18645_01_13_.jpg)'
- en: Figure 1.13 – false v-if statements hiding the whole HTML element from the DOM
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.13 – false v-if语句隐藏整个HTML元素从DOM中
- en: 'Change the template to use `v-show` instead of the `v-if` statements, remove
    `v-else` from the `<a>` element, and change the value of `v-show` in `h1` to `true`:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模板更改为使用`v-show`而不是`v-if`语句，从`<a>`元素中删除`v-else`，并将`h1`中的`v-show`值更改为`true`：
- en: '[PRE197]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: 'The output of the preceding code will be as follows:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下所示：
- en: '![Figure 1.14 – Changing v-show to true will display the main directive text](img/B18645_01_14_.jpg)'
  id: totrans-407
  prefs: []
  type: TYPE_IMG
  zh: '![图1.14 – 将v-show设置为true将显示主要指令文本](img/B18645_01_14_.jpg)'
- en: Figure 1.14 – Changing v-show to true will display the main directive text
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.14 – 将v-show设置为true将显示主要指令文本
- en: 'When you open the `Elements` tab of your browser Devtools, you should be able
    to observe that the `h2` display state is set to `none` as follows:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开浏览器Devtools的`Elements`标签页时，你应该能够观察到`h2`的显示状态被设置为`none`，如下所示：
- en: "![Figure 1.15 \uFEFF– h2 has “display: none” for the false condition](img/B18645_01_15_.jpg)"
  id: totrans-410
  prefs: []
  type: TYPE_IMG
  zh: '![图1.15 – h2在false条件下具有“display: none”](img/B18645_01_15_.jpg)'
- en: 'Figure 1.15 – h2 has “display: none” for the false condition'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '图1.15 – h2在false条件下具有“display: none”'
- en: In this exercise, we learned about the core Vue directives to control, bind,
    show, and hide HTML template elements without requiring any JavaScript outside
    of adding new data objects to your local state.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们学习了 Vue 的核心指令，用于控制、绑定、显示和隐藏 HTML 模板元素，而无需在本地状态中添加新的数据对象之外使用任何 JavaScript。
- en: In the next section, we will learn how to achieve two-way binding with the help
    of Vue’s `v-model`.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何借助 Vue 的 `v-model` 实现双向绑定。
- en: Enabling two-way binding using v-model
  id: totrans-414
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 v-model 启用双向绑定
- en: Vue achieves two-way data binding by creating a dedicated directive that watches
    a data property within your Vue component. The `v-model` directive triggers data
    updates when the target data property is modified on the UI. This directive is
    usually useful for HTML form elements that need to both display the data and modify
    it reactively – for example, `input`, `textarea`, radio buttons, and so on.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 通过创建一个专门用于监视 Vue 组件内部数据属性的指令来实现双向数据绑定。当目标数据属性在 UI 上被修改时，`v-model` 指令会触发数据更新。此指令通常用于需要同时显示和响应式修改数据的
    HTML 表单元素，例如 `input`、`textarea`、单选按钮等。
- en: 'We can enable two-way binding by adding the `v-model` directive to the target
    element and binding it to our desired data props:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向目标元素添加 `v-model` 指令并将其绑定到我们希望的数据属性上来启用双向绑定：
- en: '[PRE209]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: 'In *Figure 1**.16*, the output generated by running the preceding code will
    be as follows:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 1**.16* 中，运行前面代码生成的输出将如下所示：
- en: '![Figure 1.16 – Output for the v-model example](img/B18645_01_16_.jpg)'
  id: totrans-419
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.16 – v-model 示例的输出](img/B18645_01_16_.jpg)'
- en: Figure 1.16 – Output for the v-model example
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16 – v-model 示例的输出
- en: Note
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Binding a huge amount of data using `v-model` can affect the performance of
    your application. Consider your UI and split the data into different Vue components
    or views. Vue data in the local state is not immutable and can be redefined anywhere
    in the template.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `v-model` 绑定大量数据可能会影响您应用程序的性能。请考虑您的 UI 并将数据拆分到不同的 Vue 组件或视图中。Vue 中的本地状态数据不是不可变的，可以在模板的任何位置重新定义。
- en: In the next exercise, we are going to build a component using Vue’s two-way
    data binding and experiment with what it means to bind data in two ways.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，我们将使用 Vue 的双向数据绑定构建一个组件，并实验双向绑定数据的意义。
- en: Exercise 1.04 – experimenting with two-way binding using v-model
  id: totrans-424
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.04 – 使用 v-model 进行双向绑定实验
- en: The context for this type of data model is usually forms or wherever you expect
    both input and output data. By the end of the exercise, we should be able to utilize
    the `v-model` attribute in the context of a form.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 此类数据模型的上下文通常是表单或您期望输入和输出数据的任何地方。到练习结束时，我们应该能够在表单的上下文中使用 `v-model` 属性。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.04).
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.04)。
- en: 'Let’s start the exercise by performing the following steps:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤开始练习：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise
    1.04` folder by using the following commands in order:'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以使用 `npm init vue@3` 生成的应用程序为起点，或者在代码仓库的根目录下，使用以下命令按顺序导航到 `Chapter01/Exercise
    1.04` 文件夹：
- en: '[PRE210]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: 'Run the application using the following command:'
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE212]'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory) or your preferred IDE.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 VS Code 中打开练习项目（在项目目录中使用 `code .` 命令）或您首选的 IDE。
- en: Create a new Vue component file named `Exercise1-04.vue` in the `src/components`
    directory.
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/components` 目录下创建一个名为 `Exercise1-04.vue` 的新 Vue 组件文件。
- en: 'Inside `Exercise1-04.vue`, start by composing an HTML `label` and bind an `input`
    element to the `name` data prop using `v-model` inside the `template` area:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Exercise1-04.vue` 内部，首先在 `template` 区域内创建一个 HTML `label` 并使用 `v-model` 将一个
    `input` 元素绑定到 `name` 数据属性：
- en: '[PRE213]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: 'Complete the binding of the `text` input by returning a reactive data prop
    called `name` in the `<``script>` tag:'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在 `<``script>` 标签中返回一个名为 `name` 的响应式数据属性来完成 `text` 输入的绑定：
- en: '[PRE219]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: 'Next, compose a `label` and selectable HTML `select` tied to the `language`
    data prop using `v-model` inside of the `template` area:'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`template`区域内部使用`v-model`组合一个`label`和与`language`数据属性绑定的可选HTML`select`：
- en: '[PRE228]'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: 'Finish binding the `select` input by returning a reactive data prop called
    `language` in the `<``script>` tag:'
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`<script>`标签中返回一个名为`language`的响应式数据属性来完成`select`输入的绑定：
- en: '[PRE246]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: 'Below the `form` fields, output the name and language inside of an unordered
    list structure (`<ul>` and `<li>`) by using curly braces such as `{{` `name }}`:'
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`表单`字段下方，使用大括号如`{{` `name }}`在无序列表结构（`<ul>`和`<li>`）中输出名称和语言：
- en: 'Your code should look as follows:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码应该如下所示：
- en: '[PRE256]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'Add styling inside the `<style>` tag at the bottom of the component:'
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件底部的`<style>`标签内添加样式：
- en: '[PRE257]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: 'Go to `https://localhost:3000`. Your output should look as follows:'
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往`https://localhost:3000`。你的输出应该如下所示：
- en: '![Figure 1.17 – Displaying the final form after the data is updated](img/B18645_01_17_.jpg)'
  id: totrans-514
  prefs: []
  type: TYPE_IMG
  zh: '![图1.17 – 更新数据后的最终表单显示](img/B18645_01_17_.jpg)'
- en: Figure 1.17 – Displaying the final form after the data is updated
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.17 – 更新数据后的最终表单显示
- en: When you update the data in the form, it should also update the overview area
    synchronously.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在表单中更新数据时，它也应该同步更新概览区域。
- en: In this exercise, we used the `v-model` directive to bind the name and JavaScript-style
    drop-down selection to our local state’s data. When you modify the data, it will
    reactively update the DOM elements to which we output its value.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们使用了`v-model`指令将名称和JavaScript风格的下拉选择绑定到我们本地状态的数据。当你修改数据时，它将反应性地更新我们输出的DOM元素。
- en: Next, we will discuss our `v-for` directive further and different approaches
    to handling iterative data collection in Vue.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将进一步讨论我们的`v-for`指令以及处理Vue中迭代数据集合的不同方法。
- en: Understanding data iteration with v-for
  id: totrans-519
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解v-for数据迭代
- en: To loop over HTML elements in Vue, you use the `v-for` loop directive directly
    on the target elements. When Vue renders the component, it will iterate the target
    to use and render the data being parsed into the directive, with the same concept
    as a normal JavaScript `for` loop.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Vue中循环HTML元素，你直接在目标元素上使用`v-for`循环指令。当Vue渲染组件时，它将迭代目标以使用和渲染解析到指令中的数据，这与正常的JavaScript`for`循环的概念相同。
- en: Basic iteration using v-for
  id: totrans-521
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用v-for进行基本迭代
- en: 'The basic syntax of `v-for` is as follows:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-for`的基本语法如下：'
- en: '[PRE284]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: The preceding syntax example indicates that we are iterating through a list
    of `items`. We have access to a single `item` and its appearance `index` in the
    list in each iteration. `:key` is a required attribute, acting as the unique identifier
    of each iterating element rendered for the Vue engine to keep track.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语法示例表明我们正在遍历一个`items`列表。在每次迭代中，我们都可以访问单个`item`及其在列表中的`index`外观。`:key`是一个必需的属性，它作为Vue引擎渲染的每个迭代元素的唯一标识符，以便跟踪。
- en: When the `key` or `item` content changes, either programmatically or due to
    user interactions, the Vue engine triggers an update of the changed item on the
    UI. If you have multiple loops in one component, you should randomize the `key`
    attribute with extra characters or context-related strings to avoid `key` duplication
    conflicts.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 当`key`或`item`内容发生变化时，无论是程序性地还是由于用户交互，Vue引擎都会触发UI上更改项的更新。如果你在一个组件中有多个循环，你应该使用额外的字符或与上下文相关的字符串随机化`key`属性，以避免`key`重复冲突。
- en: There are various use cases for this direction. One straightforward use case
    is to perform **anonymous loops**, in which you can define a number, *X*, as a
    symbolic list, and the loop will iterate that *X* times. This can be handy in
    situations in which you strictly control the number of iterations you want or
    render some placeholder content.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方向有各种用例。一个直接的用例是执行**匿名循环**，其中你可以定义一个数字，*X*，作为一个符号列表，循环将迭代该*X*次。这在你需要严格控制迭代次数或渲染一些占位内容的情况下非常有用。
- en: 'In the following example, we see an anonymous loop in which the total iterations
    are `2` and we define `key` with a `loop-1` prefix:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们看到一个匿名循环，总迭代次数为`2`，我们使用`loop-1`前缀定义`key`：
- en: '[PRE285]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: 'You can also use template literals (with [PRE286] backticks) to compute strings
    without `+`:'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用模板字符串（使用[PRE286]反引号）来计算字符串而不使用`+`：
- en: '[PRE287]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: The output of the preceding code in both approaches should look as follows
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 上述两种方法中，代码的输出应该如下所示
- en: '![Figure 1.18 – Output of anonymous loops example](img/B18645_01_18_.jpg)'
  id: totrans-532
  prefs: []
  type: TYPE_IMG
  zh: '![图1.18 – 匿名循环示例输出](img/B18645_01_18_.jpg)'
- en: Figure 1.18 – Output of anonymous loops example
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.18 – 匿名循环示例输出
- en: Now that we have covered how to handle basic loops by using `v-for`, we will
    utilize this function in the next exercise.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了如何使用 `v-for` 处理基本循环，我们将在下一个练习中利用这个功能。
- en: Exercise 1.05 – using v-for to iterate through an array of strings
  id: totrans-535
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.05 – 使用 v-for 遍历字符串数组
- en: In this exercise, we are going to create an anonymous loop using Vue’s `v-for`
    directive. This will be familiar to those who have used `for` or `forEach` loops
    in JavaScript before.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用 Vue 的 `v-for` 指令创建一个匿名循环。对于那些以前在 JavaScript 中使用过 `for` 或 `forEach`
    循环的人来说，这将很熟悉。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.05](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.05).
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.05](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.05)。
- en: 'Perform the following steps to complete the exercise:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以完成练习：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.05`
    folder by using the following commands in order:'
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm init vue@3` 生成的应用程序作为起点，或者在每个代码仓库的根目录中，使用以下命令按顺序导航到 `Chapter01/Exercise1.05`
    文件夹：
- en: '[PRE288]'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE289]'
- en: 'Run the application using the following command:'
  id: totrans-542
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE290]'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE290]'
- en: Open the exercise project in VS Code (by using `code .` command within the project
    directory) or your preferred IDE.
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录中使用 `code .` 命令或在您的首选 IDE 中打开练习项目。
- en: Create a new Vue component file named `Exercise1-05.vue` in the `src/components`
    directory.
  id: totrans-545
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/components` 目录中创建一个名为 `Exercise1-05.vue` 的新 Vue 组件文件。
- en: 'Inside `Exercise1-05.vue`, we compose a new component with an `<h1>` element
    to render the static title of `Looping through arrays`, and an `<ul>` element
    containing an empty `<``li>` tag:'
  id: totrans-546
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Exercise1-05.vue` 内部，我们使用一个 `<h1>` 元素来渲染静态标题 `Looping through arrays`，以及一个包含空
    `<li>` 标签的 `<ul>` 元素：
- en: '[PRE291]'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: 'In the `script` section, let’s add a `setup` attribute to the `script` tag.
    Then, let’s declare an array of `interests` containing some strings as follows:'
  id: totrans-553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `script` 部分，让我们给 `script` 标签添加一个 `setup` 属性。然后，让我们声明一个包含一些字符串的 `interests`
    数组，如下所示：
- en: '[PRE297]'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: 'Now, let’s go back to the `template` section and add the `v-for` directive
    on the `<li>` tag to iterate through `interests`. For each iteration, we get a
    combination of `(item, index)` from the interests, in which `item` outputs the
    string of the array, and `index` is the loop index. We map the `key` attribute
    to `index`, and display the value of `item` as shown in the following code block:'
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们回到 `template` 部分，并在 `<li>` 标签上添加 `v-for` 指令来遍历 `interests`。对于每次迭代，我们都会从
    `interests` 中获取 `(item, index)` 的组合，其中 `item` 输出数组的字符串，而 `index` 是循环索引。我们将 `key`
    属性映射到 `index`，并显示 `item` 的值，如下面的代码块所示：
- en: '[PRE300]'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE306]'
- en: 'Go to `https://localhost:3000`. The following output is as follows:'
  id: totrans-565
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 `https://localhost:3000`。以下输出如下：
- en: '![Figure 1.19 – Output of iterating through an array of strings](img/B18645_01_19_.jpg)'
  id: totrans-566
  prefs: []
  type: TYPE_IMG
  zh: '![图1.19 – 遍历字符串数组的结果](img/B18645_01_19_.jpg)'
- en: Figure 1.19 – Output of iterating through an array of strings
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.19 – 遍历字符串数组的结果
- en: In this exercise, we learned how to iterate through a specific array of strings,
    outputting the string value or index of an array. We also learned that the key
    attribute needs to be unique to avoid DOM conflicts and forces the DOM to re-render
    the component properly.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们学习了如何遍历特定的字符串数组，输出数组的字符串值或索引。我们还了解到，key 属性需要是唯一的，以避免 DOM 冲突并强制 DOM
    正确重新渲染组件。
- en: Next, let’s experiment with iterating a collection of objects.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们尝试遍历一组对象。
- en: Iterating through an array of objects
  id: totrans-570
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遍历对象数组
- en: 'In most practical scenarios, we work with data as objects, especially when
    iterating through an array of objects. Vue makes it easy to control various data
    states through its directive syntax. Like iterating through an array of strings,
    the directive syntax remains the same:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数实际场景中，我们以对象的形式处理数据，尤其是在遍历对象数组时。Vue 通过其指令语法使控制各种数据状态变得容易。就像遍历字符串数组一样，指令语法保持不变：
- en: '[PRE307]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: 'The `item` you receive is now an Object, with various properties. You can bind
    each property using what you have learned so far to display its value. For example,
    assume in `item`, we will have `id`, `title`, `description`, and another array,
    `characteristics`, containing some strings. We can display the `title` and `description`
    information for each `item` like so:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在收到的`item`是一个对象，具有各种属性。你可以使用到目前为止所学的内容绑定每个属性以显示其值。例如，假设在`item`中，我们将有`id`、`title`、`description`以及另一个包含一些字符串的数组`characteristics`。我们可以像这样显示每个`item`的`title`和`description`信息：
- en: '[PRE308]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: Note here we don’t use an `index` as the `key`; instead, we use `id` as the
    unique identifier for `key`. It is considered a more secure approach to use `id`
    or any other unique identifier and we also don’t need to include `index` in the
    syntax in this case since we don’t use it.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这里我们不使用`index`作为`key`；相反，我们使用`id`作为唯一的标识符。使用`id`或任何其他唯一标识符被认为是一种更安全的方法，在这种情况下我们也不需要将`index`包含在语法中，因为我们没有使用它。
- en: Since `characteristics` is an array, we display its values by using a `v-for`
    directive again for `characteristics`. You don’t have to use the same name, `item`,
    that the syntax example shows. Instead, you can give it a different name depending
    on how you want your variable to be.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`characteristics`是一个数组，我们通过再次使用`v-for`指令来显示其值。你不必使用语法示例中显示的相同名称`item`。相反，你可以根据你想要变量的方式给它一个不同的名称。
- en: 'In the following example, we use `str` for each element in the `item.characteristics`
    array:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们为`item.characteristics`数组中的每个元素使用`str`：
- en: '[PRE309]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: 'And in the `script` section, we define `items` as follows:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 在`script`部分，我们如下定义`items`：
- en: '[PRE310]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: 'The preceding code will output as shown in *Figure 1**.20*:'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将输出如*图1.20*所示：
- en: "![Figure 1.20 – Output of iterating through an \uFEFFarray of object items](img/B18645_01_20_.jpg)"
  id: totrans-582
  prefs: []
  type: TYPE_IMG
  zh: '![图1.20 – 遍历对象数组后的输出](img/B18645_01_20_.jpg)'
- en: Figure 1.20 – Output of iterating through an array of object items
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.20 – 遍历对象数组后的输出
- en: Understanding how to loop through collections of objects with `v-for` is essential
    and useful for handling data, especially with external data. In the next exercise,
    you will combine `v-for` and `v-if` to display a list of objects conditionally.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 理解如何使用`v-for`遍历对象集合对于处理数据，特别是外部数据，是基本且有用的。在下一个练习中，你将结合`v-for`和`v-if`来有条件地显示对象列表。
- en: Exercise 1.06 – using v-for to iterate through an array of objects and using
    their properties in v-if conditions
  id: totrans-585
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.06 – 使用v-for遍历对象数组并在v-if条件下使用它们的属性
- en: In this exercise, we will be controlling a Vue data array and iterating through
    the objects inside of it.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将控制Vue数据数组并遍历其内部的对象。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.06](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.06).
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.06](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.06)。
- en: 'Let’s start the exercise by performing the following steps:'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下步骤开始练习：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.06`
    folder by using the following commands in order:'
  id: totrans-589
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`npm init vue@3`生成的应用程序作为起点，或者在代码仓库的根目录下，使用以下命令按顺序导航到`Chapter01/Exercise1.06`文件夹：
- en: '[PRE311]'
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE312]'
- en: 'Run the application using the following command:'
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE313]'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE313]'
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  id: totrans-594
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code中打开练习项目（在项目目录中使用`code .`命令）或使用你喜欢的IDE。
- en: Create a new Vue component file named `Exercise1-06.vue` in the `src/components`
    directory.
  id: totrans-595
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`目录中创建一个新的Vue组件文件，命名为`Exercise1-06.vue`。
- en: 'Inside `Exercise1-06.vue`, create an array of data objects, `interests`, as
    local data. Each interest contains a `title` string and a `favorites` array of
    strings:'
  id: totrans-596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Exercise1-06.vue`内部，创建一个数据对象数组`interests`作为本地数据。每个兴趣包含一个`title`字符串和一个字符串数组`favorites`：
- en: '[PRE314]'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE330]'
- en: 'In `template`, we loop over `interests` and display the `title` for each `item`
    in the `interests` array:'
  id: totrans-614
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`template`中，我们遍历`interests`并显示`interests`数组中每个`item`的`title`：
- en: '[PRE331]'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE340]'
- en: 'Go to `https://localhost:3000` and the output of the preceding code will be
    as follows:'
  id: totrans-625
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往`https://localhost:3000`，前面代码的输出将如下所示：
- en: '![Figure 1.21 – You should now see a list of titles in the browser](img/B18645_01_21_.jpg)'
  id: totrans-626
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.21 – 你现在应该在浏览器中看到一个标题列表](img/B18645_01_21_.jpg)'
- en: Figure 1.21 – You should now see a list of titles in the browser
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.21 – 你现在应该在浏览器中看到一个标题列表
- en: 'Let’s create a second `v-for` loop to iterate through a `favorites` list for
    each `item`. Note that we use different names – `fav` and `m` – for our nested
    loop:'
  id: totrans-628
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建第二个 `v-for` 循环来遍历每个 `item` 的 `favorites` 列表。注意，我们为嵌套循环使用了不同的名称 – `fav`
    和 `m`：
- en: '[PRE341]'
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '*Figure 1**.22* displays an output where looping is performed through an array
    of objects:'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1.22* 显示了一个通过对象数组进行循环的输出：'
- en: '![Figure 1.22 – Nested ordered list detailing your favorites](img/B18645_01_22_.jpg)'
  id: totrans-645
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.22 – 详细显示你喜欢的嵌套有序列表](img/B18645_01_22_.jpg)'
- en: Figure 1.22 – Nested ordered list detailing your favorites
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.22 – 详细显示你喜欢的嵌套有序列表
- en: 'When inspecting the DOM elements (press *Ctrl* + *F12* or open `<ol>` element
    even though `favorites` is an empty array:'
  id: totrans-647
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当检查 DOM 元素时（按 *Ctrl* + *F12* 或打开 `<ol>` 元素，即使 `favorites` 是一个空数组）：
- en: '![Figure 1.23 – Displaying empty DOM elements in your virtual DOM](img/B18645_01_23_.jpg)'
  id: totrans-648
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.23 – 在你的虚拟 DOM 中显示空 DOM 元素](img/B18645_01_23_.jpg)'
- en: Figure 1.23 – Displaying empty DOM elements in your virtual DOM
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.23 – 在你的虚拟 DOM 中显示空 DOM 元素
- en: 'Now, we need to hide that empty `<ol>` element after applying it. We will check
    whether the `favorites` array is empty (`length > 0`) and then display the ordered
    list HTML element. Let’s add a `v-if` directive to `<ol>` with the `item.favorites.length
    >` `0` condition:'
  id: totrans-650
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在应用之后隐藏那个空的 `<ol>` 元素。我们将检查 `favorites` 数组是否为空（`length > 0`），然后显示有序列表
    HTML 元素。让我们给 `<ol>` 添加一个 `v-if` 指令，条件为 `item.favorites.length > 0`：
- en: '[PRE356]'
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE360]'
- en: 'This won’t make a difference to the visuals of your page, but when you inspect
    the DOM tree in your browser, you’ll notice an HTML comment in dev mode that allows
    you to understand where a `v-if` statement might be `false`. When you build for
    production, these HTML comments won’t be visible in your DOM tree:'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会影响你页面的视觉效果，但当你检查浏览器中的 DOM 树时，你会注意到一个在开发模式下允许你理解 `v-if` 语句可能为 `false` 的 HTML
    注释。当你为生产构建时，这些 HTML 注释不会在你的 DOM 树中可见：
- en: '![Figure 1.24 – Output displaying no HTML comment in production builds](img/B18645_01_24_.jpg)'
  id: totrans-657
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.24 – 显示生产构建中无 HTML 注释的输出](img/B18645_01_24_.jpg)'
- en: Figure 1.24 – Output displaying no HTML comment in production builds
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.24 – 显示生产构建中无 HTML 注释的输出
- en: In this exercise, we have iterated through complex arrays of objects, outputting
    the nested keys for these objects and controlling the view state of DOM elements
    based on length conditions.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们遍历了复杂对象数组，输出了这些对象的嵌套键，并根据长度条件控制 DOM 元素的视图状态。
- en: Next, let’s experiment with iterating through a keyed collection (or Object).
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们尝试遍历一个键值集合（或对象）。
- en: Iterating through a keyed collection (Object)
  id: totrans-661
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遍历键值集合（对象）
- en: We can generally use `v-for` for looping through any iterative data collection
    type. Object in JavaScript is a key-value data collection, and we can iterate
    through its properties using `v-for`.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常可以使用 `v-for` 来遍历任何迭代数据集合类型。JavaScript 中的对象是一个键值数据集合，我们可以使用 `v-for` 来遍历其属性。
- en: 'The syntax example is like the previous syntax example for arrays of objects
    and strings, with a tiny difference. Here, we change the naming convention from
    `(item, index)` to `(value, key)`, in which `key` is the object’s property, and
    `value` is that `key` property’s value. Vue also exposes one more parameter –
    `index` – to indicate that property’s appearance index in the target object. Thus,
    the syntax now becomes the following:'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 语法示例类似于之前数组对象和字符串的语法示例，只有一个细微的差别。在这里，我们将命名约定从 `(item, index)` 改为 `(value, key)`，其中
    `key` 是对象的属性，`value` 是该 `key` 属性的值。Vue 还暴露了一个额外的参数 – `index` – 以指示该属性在目标对象中的出现索引。因此，现在的语法如下：
- en: '[PRE361]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: Here, `obj` is our target object to iterate.
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`obj` 是我们要遍历的目标对象。
- en: 'For example, assume we have the following object named `course`, which contains
    a title, a description, and the name of the lecturer(s):'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有一个名为 `course` 的对象，它包含标题、描述和讲师（们）的姓名：
- en: '[PRE362]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: 'In our template, we iterate through the `course`’s properties and output their
    value in the `<index>.< key > : <value>` format as shown in the following code
    block:'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: '在我们的模板中，我们遍历 `course` 的属性，并以 `<index>.<key> : <value>` 格式输出它们的值，如下面的代码块所示：'
- en: '[PRE363]'
  id: totrans-669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: 'The output will be as shown in *Figure 1**.25*:'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如图 *图 1.25* 所示：
- en: '![Figure 1.25 – Iterating and displaying values of the course’s properties](img/B18645_01_25_.jpg)'
  id: totrans-671
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.25 – 遍历和显示课程属性的值](img/B18645_01_25_.jpg)'
- en: Figure 1.25 – Iterating and displaying values of the course’s properties
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.25 – 遍历和显示课程属性的值
- en: Looping through the properties of an object is also a joint development practice.
    It is the same concept as winding through any keyed collection type, such as a
    hash-map (mapping according to key), lookup dictionary (it is also an object),
    and so on. Since the syntax stays consistent between both array and object iteration,
    it helps reduce the need for refactoring or data conversion.
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历对象属性也是一种联合开发实践。这与遍历任何键集合类型（如哈希表（根据键映射）、查找字典（它也是一个对象）等）的概念相同。由于数组和对象迭代之间的语法保持一致，这有助于减少重构或数据转换的需求。
- en: Next, you will practice how to write basic looping for Object properties.
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将练习如何编写基本的对象属性循环。
- en: Exercise 1.07 – using v-for to loop through the properties of Object
  id: totrans-675
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.07 – 使用 v-for 遍历对象的属性
- en: In this exercise, we will be controlling a Vue data object and iterating through
    the properties inside of it.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将控制 Vue 数据对象并遍历其内部的属性。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.07](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.07).
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.07](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.07)。
- en: 'Let’s start the exercise by performing the following steps:'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下步骤开始练习：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.07`
    folder by using the following commands in order:'
  id: totrans-679
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm init vue@3` 生成的应用程序作为起点，或者在代码仓库的根目录下，使用以下命令按顺序导航到 `Chapter01/Exercise1.07`
    文件夹：
- en: '[PRE364]'
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE365]'
- en: 'Run the application using the following command:'
  id: totrans-682
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE366]'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  id: totrans-684
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 中打开练习项目（在项目目录中使用 `code .` 命令）或你的首选 IDE。
- en: Create a new Vue component file named `Exercise1-07.vue` in the `src/components`
    directory.
  id: totrans-685
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/components` 目录下创建一个新的 Vue 组件文件，命名为 `Exercise1-07.vue`。
- en: 'Inside `Exercise1-07.vue`, let’s compose `information` for the local data within
    `<script setup>` as follows:'
  id: totrans-686
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Exercise1-07.vue` 中，让我们在 `<script setup>` 内部为局部数据 `information` 组合如下：
- en: '[PRE367]'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-691
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE373]'
- en: 'In the `<template>` section, we will loop through `information` and display
    the values of its properties:'
  id: totrans-694
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<template>` 部分，我们将遍历 `information` 并显示其属性的值：
- en: '[PRE374]'
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE381]'
- en: 'Go to `https://localhost:3000` and the output will be as follows:'
  id: totrans-703
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 `https://localhost:3000`，输出将如下所示：
- en: '![Figure 1.26 – Output using v-for on the information object](img/B18645_01_26_.jpg)'
  id: totrans-704
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.26 – 使用 v-for 在信息对象上输出](img/B18645_01_26_.jpg)'
- en: Figure 1.26 – Output using v-for on the information object
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.26 – 使用 v-for 在信息对象上输出
- en: 'Note that Vue renders the value for items, which is an array of strings, the
    same as how we declared using JavaScript. To render it in a better format, we
    use the built-in JavaScript `toString()` function to export all the elements’
    values into a string with comma separation automatically:'
  id: totrans-706
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，Vue 以与使用 JavaScript 声明相同的方式渲染值，即字符串数组。为了以更好的格式渲染它，我们使用内置的 JavaScript `toString()`
    函数自动将所有元素的值导出到一个以逗号分隔的字符串中：
- en: '[PRE382]'
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-709
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE388]'
- en: '[PRE389]'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE389]'
- en: 'The final output will render the list as follows:'
  id: totrans-715
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终输出将渲染列表如下：
- en: '![Figure 1.27 – Output using v-for and toString() on values](img/B18645_01_27_.jpg)'
  id: totrans-716
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.27 – 使用 v-for 和 toString() 在值上输出](img/B18645_01_27_.jpg)'
- en: Figure 1.27 – Output using v-for and toString() on values
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.27 – 使用 v-for 和 toString() 在值上输出
- en: Understanding iterations (or loops) is key to not only working with Vue but
    also with JavaScript in general. Now that we have covered how to handle loops
    by using the `v-for` directive and the importance of the `key` property for proper
    reactivity enhancement, we will explore how to use, write, and trigger methods
    in a component.
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 理解迭代（或循环）对于不仅与 Vue 一起工作，而且与 JavaScript 一起工作都是至关重要的。现在我们已经介绍了如何使用 `v-for` 指令处理循环以及
    `key` 属性对于正确增强响应性的重要性，我们将探讨如何在组件中使用、编写和触发方法。
- en: Exploring methods
  id: totrans-719
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索方法
- en: 'In Vue 2.0, Vue defines component methods inside the `methods` object as part
    of a Vue instance. You compose each component method as a normal JavaScript function.
    The Vue method is scoped to your Vue component and can be run from anywhere inside
    the component it belongs to. It also has access to the `this` instance, which
    indicates the instance of the component:'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue 2.0中，Vue将组件方法定义在`methods`对象中，作为Vue实例的一部分。您将每个组件方法作为常规JavaScript函数编写。Vue方法的作用域限定在您的Vue组件中，并且可以在属于该组件的任何地方运行。它还可以访问`this`实例，这表示组件的实例：
- en: '[PRE390]'
  id: totrans-721
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: 'From Vue 3.0 onward, with `<script setup>`, as with local data, you can define
    a method as a regular function and it will work the same way as with the traditional
    approach. Hence, we can rewrite the preceding code as follows:'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 从Vue 3.0开始，使用`<script setup>`，与本地数据一样，您可以定义一个方法作为常规函数，并且它将以相同的方式工作。因此，我们可以将前面的代码重写如下：
- en: '[PRE391]'
  id: totrans-723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: 'You then can bind the methods to HTML events of an element as its event listeners
    in the `template` section. When binding events to HTML elements in Vue, you would
    use the `@` symbol. For example, `v-on:click` is equivalent to `@click`, as shown
    in the following code block:'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以在`template`部分将方法绑定到元素的HTML事件上作为其事件监听器。在Vue中绑定HTML元素的事件时，您会使用`@`符号。例如，`v-on:click`等同于`@click`，如下面的代码块所示：
- en: '[PRE392]'
  id: totrans-725
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: Clicking on both buttons triggers the same `myMethod()` method and generates
    the same result.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 点击两个按钮都会触发相同的`myMethod()`方法并生成相同的结果。
- en: Let’s build a component with some methods.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个具有一些方法的自定义组件。
- en: Exercise 1.08 – triggering methods
  id: totrans-728
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.08 – 触发方法
- en: In this exercise, we are going to build a component that uses Vue’s methods
    API. Consider how similarly these Vue methods can be written to your own named
    functions in JavaScript, as they behave in a very similar way. By the end of the
    exercise, we should be able to use methods and trigger them from the HTML template.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将构建一个使用Vue的methods API的组件。考虑这些Vue方法如何与您自己的JavaScript命名函数类似编写，因为它们的行为非常相似。到练习结束时，我们应该能够使用方法和从HTML模板中触发它们。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.08](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.08)
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.08](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.08)
- en: 'We will build a list of different elements. For each element, we bind an `onClick`
    event with a `component` method, and alert users about the index of the clicked
    element by performing the following:'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个不同元素的列表。对于每个元素，我们将绑定一个`onClick`事件和一个`component`方法，并通过执行以下操作来提醒用户点击的元素的索引：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.08`
    folder by using the following commands in order:'
  id: totrans-732
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用由`npm init vue@3`生成的应用程序作为起点，或者在代码仓库的根目录下，使用以下命令按顺序进入`Chapter01/Exercise1.08`文件夹：
- en: '[PRE393]'
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE394]'
- en: 'Run the application using the following command:'
  id: totrans-735
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE395]'
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE395]'
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  id: totrans-737
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code中打开练习项目（在项目目录中使用`code .`命令）或您首选的IDE。
- en: Create a new Vue component file named `Exercise1-08.vue` in the `src/components`
    directory.
  id: totrans-738
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`目录中创建一个名为`Exercise1-08.vue`的新Vue组件文件。
- en: 'Inside `Exercise1-08.vue`, within the `<script setup>` section, let’s define
    a method, `triggerAlert`, that receives an index and displays an alert informing
    users which index has been clicked:'
  id: totrans-739
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Exercise1-08.vue`的`<script setup>`部分内部，让我们定义一个名为`triggerAlert`的方法，它接收一个索引并显示一个警告，告知用户哪个索引已被点击：
- en: '[PRE396]'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-741
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '[PRE399]'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE400]'
- en: 'In the `template` section, set up an anonymous `v-for` loop on an HTML list
    and add a `button` element inside the list element. Set the loop to iterate `5`
    times, and display the `index` value as each button’s label:'
  id: totrans-745
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`template`部分，在HTML列表上设置一个匿名的`v-for`循环，并在列表元素内添加一个`button`元素。将循环设置为迭代`5`次，并显示每个按钮的`index`值作为标签：
- en: '[PRE401]'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE410]'
- en: 'Add the `@click` directive, referencing the `triggerAlert` method, and pass
    the value of `index` as an argument:'
  id: totrans-756
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`@click`指令，引用`triggerAlert`方法，并将`index`的值作为参数传递：
- en: '[PRE411]'
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '[PRE412]'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-759
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '[PRE416]'
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '[PRE417]'
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '[PRE418]'
  id: totrans-764
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '[PRE419]'
  id: totrans-765
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[PRE420]'
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE421]'
- en: 'Add a margin between each button for readability:'
  id: totrans-768
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个按钮之间添加边距以提高可读性：
- en: '[PRE422]'
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE422]'
- en: '[PRE423]'
  id: totrans-770
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '[PRE424]'
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '[PRE426]'
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE426]'
- en: 'Your page should feature a list of buttons that when clicked, trigger an alert
    with a message that contains the button number you clicked, as follows:'
  id: totrans-774
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的页面应包含一个按钮列表，点击时将触发一个包含您点击的按钮编号的消息的警告，如下所示：
- en: '![Figure 1.28 – Outputting a list of triggers](img/B18645_01_28_.jpg)'
  id: totrans-775
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.28 – 输出触发器列表](img/B18645_01_28_.jpg)'
- en: Figure 1.28 – Outputting a list of triggers
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.28 – 输出触发器列表
- en: 'The following prompt is displayed when a trigger is clicked:'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 当触发器被点击时，将显示以下提示：
- en: '![Figure 1.29 – Displaying a browser alert with the index number in it](img/B18645_01_29_.jpg)'
  id: totrans-778
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.29 – 显示包含索引编号的浏览器警告](img/B18645_01_29_.jpg)'
- en: Figure 1.29 – Displaying a browser alert with the index number in it
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.29 – 显示包含索引编号的浏览器警告
- en: Note
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: While you can add an event listener to any HTML element, we suggest applying
    them to native HTML interactive elements such as anchor tags, form input, or buttons
    to help with browser accessibility.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以将事件监听器添加到任何HTML元素上，但我们建议将它们应用于原生HTML交互元素，如锚标签、表单输入或按钮，以帮助提高浏览器可访问性。
- en: At this point, you can utilize the Vue methods API to define and trigger methods
    from the HTML template, and parse arguments into each method dynamically. In the
    next exercise, we will explore how to return data with Vue methods within a Vue
    component.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您可以使用Vue方法API在HTML模板中定义和触发方法，并将参数动态地解析到每个方法中。在下一个练习中，我们将探讨如何在Vue组件中使用Vue方法返回数据。
- en: Exercise 1.09 – returning data using Vue methods
  id: totrans-783
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.09 – 使用Vue方法返回数据
- en: Often, in a web application, we want elements to appear on the page depending
    on whether a condition is met or not. For instance, if our product is not in stock,
    our page should display the fact that it is out of stock.
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在Web应用程序中，我们希望元素根据条件是否满足而出现在页面上。例如，如果我们的产品没有库存，我们的页面应显示它已售罄。
- en: So, let’s figure out how we conditionally render these elements depending on
    whether our product is in stock or not.
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们弄清楚我们如何根据产品是否有库存来条件性地渲染这些元素。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Front-End-Development-Projects-with-Vue.js/tree/v2-edition/Chapter01/Exercise1.09](https://github.com/PacktPublishing/Front-End-Development-Projects-with-Vue.js/tree/v2-edition/Chapter01/Exercise1.09).
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅[https://github.com/PacktPublishing/Front-End-Development-Projects-with-Vue.js/tree/v2-edition/Chapter01/Exercise1.09](https://github.com/PacktPublishing/Front-End-Development-Projects-with-Vue.js/tree/v2-edition/Chapter01/Exercise1.09)。
- en: 'We will build a list of different elements and demonstrate adding different
    quantities to a cart. Then, we will display the updated cart’s total value in
    a currency format by performing the following:'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个不同元素的列表，并演示向购物车添加不同数量的操作。然后，我们将通过以下方式以货币格式显示更新后的购物车总价值：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.09`
    folder by using the following commands in order:'
  id: totrans-788
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以使用 `npm init vue@3` 生成的应用程序为起点，或者在代码仓库的根目录下，使用以下命令按顺序导航到 `Chapter01/Exercise1.09`
    文件夹：
- en: '[PRE427]'
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '[PRE428]'
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE428]'
- en: 'Run the application using the following command:'
  id: totrans-791
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE429]'
  id: totrans-792
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE429]'
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory), or your preferred IDE.
  id: totrans-793
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的VS Code中打开练习项目（在项目目录中使用 `code .` 命令），或使用您首选的IDE。
- en: Create a new Vue component file named `Exercise1-09.vue` in the `src/components`
    directory.
  id: totrans-794
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/components` 目录下创建一个名为 `Exercise1-09.vue` 的新Vue组件文件。
- en: 'Inside `Exercise1-09.vue`, within the `<script>` section, we set up two data
    objects, `totalItems` and `totalCost`, which will be updated when a user clicks
    on our shop’s buttons:'
  id: totrans-795
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Exercise1-09.vue` 中，在 `<script>` 部分，我们设置了两个数据对象 `totalItems` 和 `totalCost`，这些对象将在用户点击我们商店的按钮时更新：
- en: '[PRE430]'
  id: totrans-796
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[PRE431]'
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '[PRE432]'
  id: totrans-798
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '[PRE433]'
  id: totrans-799
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE433]'
- en: '[PRE434]'
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '[PRE435]'
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '[PRE436]'
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-803
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-804
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '[PRE439]'
  id: totrans-805
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE439]'
- en: 'In the `template` section, we display the value of `totalItems` and `totalCost`
    accordingly:'
  id: totrans-806
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `template` 部分，我们相应地显示 `totalItems` 和 `totalCost` 的值：
- en: '[PRE440]'
  id: totrans-807
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '[PRE441]'
  id: totrans-808
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '[PRE442]'
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE442]'
- en: '[PRE443]'
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE443]'
- en: '[PRE444]'
  id: totrans-811
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '[PRE445]'
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE445]'
- en: 'Within the `script` section, let’s create an `addToCart` method, which will
    update `totalCost` and `totalItems` for the current component based on the received
    number, `n`, by using `this.totalCost` and `this.totalItems`:'
  id: totrans-813
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `script` 部分，让我们创建一个 `addToCart` 方法，该方法将根据接收到的数字 `n`，使用 `this.totalCost` 和
    `this.totalItems` 更新当前组件的 `totalCost` 和 `totalItems`：
- en: '[PRE446]'
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '[PRE447]'
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '[PRE448]'
  id: totrans-816
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '[PRE449]'
  id: totrans-817
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[PRE450]'
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE450]'
- en: '[PRE451]'
  id: totrans-819
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE451]'
- en: '[PRE452]'
  id: totrans-820
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE452]'
- en: '[PRE453]'
  id: totrans-821
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE453]'
- en: '[PRE454]'
  id: totrans-822
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE454]'
- en: '[PRE455]'
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '[PRE456]'
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE456]'
- en: '[PRE457]'
  id: totrans-825
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE457]'
- en: '[PRE458]'
  id: totrans-826
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE458]'
- en: 'Let’s iterate through a random amount to create buttons for adding a quantity
    to the cart. The quantity is the button’s index. Then, we bind the `addToCart`
    method to each button, with its index as the function’s input argument:'
  id: totrans-827
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们遍历一个随机数量来创建添加到购物车数量的按钮。数量是按钮的索引。然后，我们将`addToCart`方法绑定到每个按钮上，其索引作为函数的输入参数：
- en: '[PRE459]'
  id: totrans-828
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE459]'
- en: '[PRE460]'
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE460]'
- en: '[PRE461]'
  id: totrans-830
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE461]'
- en: '[PRE462]'
  id: totrans-831
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE462]'
- en: '[PRE463]'
  id: totrans-832
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE463]'
- en: '[PRE464]'
  id: totrans-833
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE464]'
- en: '[PRE465]'
  id: totrans-834
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE465]'
- en: '[PRE466]'
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE466]'
- en: '[PRE467]'
  id: totrans-836
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE467]'
- en: '[PRE468]'
  id: totrans-837
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE468]'
- en: '[PRE469]'
  id: totrans-838
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE469]'
- en: '[PRE470]'
  id: totrans-839
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE470]'
- en: 'Add a `10px` margin to the `button` element for readability:'
  id: totrans-840
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`button`元素添加`10px`的边距以提高可读性：
- en: '[PRE471]'
  id: totrans-841
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE471]'
- en: '[PRE472]'
  id: totrans-842
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE472]'
- en: '[PRE473]'
  id: totrans-843
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE473]'
- en: '[PRE474]'
  id: totrans-844
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE474]'
- en: '[PRE475]'
  id: totrans-845
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE475]'
- en: 'Go to `https://localhost:3000` and the output is as follows:'
  id: totrans-846
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问`https://localhost:3000`，输出如下：
- en: '![Figure 1.30 – Pressing any of the buttons will demonstrate the cart logic](img/B18645_01_30_.jpg)'
  id: totrans-847
  prefs: []
  type: TYPE_IMG
  zh: '![图1.30 – 点击任意按钮将演示购物车逻辑](img/B18645_01_30_.jpg)'
- en: Figure 1.30 – Pressing any of the buttons will demonstrate the cart logic
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.30 – 点击任意按钮将演示购物车逻辑
- en: 'When you click on the buttons, the `totalItems` counter should increment by
    `1`, but `totalCost` will increment by the `n` value, which should demonstrate
    a normal cart functionality. For example, when clicking `Add 2`, then `Add 5`,
    the output will be as follows:'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击按钮时，`totalItems`计数器应该增加`1`，但`totalCost`将增加`n`值，这应该演示正常的购物车功能。例如，当点击`添加2`然后`添加5`时，输出将如下所示：
- en: '![Figure 1.31 – Output displaying Returning Methods after increments of 2 and
    5](img/B18645_01_31_.jpg)'
  id: totrans-850
  prefs: []
  type: TYPE_IMG
  zh: '![图1.31 – 显示递增2和5后的返回方法输出](img/B18645_01_31_.jpg)'
- en: Figure 1.31 – Output displaying Returning Methods after increments of 2 and
    5
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.31 – 显示递增2和5后的返回方法输出
- en: 'Now, let’s format `totalCost`. Create a method called `formatCurrency`, which
    accepts one argument. We will return the same value after giving it two decimal
    points and a `$` symbol:'
  id: totrans-852
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们格式化`totalCost`。创建一个名为`formatCurrency`的方法，它接受一个参数。我们将给它添加两位小数和一个`$`符号，然后返回相同的值：
- en: '[PRE476]'
  id: totrans-853
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE476]'
- en: '[PRE477]'
  id: totrans-854
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE477]'
- en: '[PRE478]'
  id: totrans-855
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE478]'
- en: '[PRE479]'
  id: totrans-856
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE479]'
- en: '[PRE480]'
  id: totrans-857
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE480]'
- en: '[PRE481]'
  id: totrans-858
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE481]'
- en: '[PRE482]'
  id: totrans-859
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE482]'
- en: '[PRE483]'
  id: totrans-860
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE483]'
- en: '[PRE484]'
  id: totrans-861
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE484]'
- en: '[PRE485]'
  id: totrans-862
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE485]'
- en: '[PRE486]'
  id: totrans-863
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE486]'
- en: '[PRE487]'
  id: totrans-864
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE487]'
- en: '[PRE488]'
  id: totrans-865
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE488]'
- en: 'To use this method in the template, add it to the interpolated curly braces
    and pass the value that was there as an argument inside the method instead:'
  id: totrans-866
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在模板中使用此方法，将其添加到插值大括号中，并将方法内的值作为参数传递：
- en: '[PRE489]'
  id: totrans-867
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE489]'
- en: '[PRE490]'
  id: totrans-868
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE490]'
- en: '[PRE491]'
  id: totrans-869
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE491]'
- en: '[PRE492]'
  id: totrans-870
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE492]'
- en: '[PRE493]'
  id: totrans-871
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE493]'
- en: '[PRE494]'
  id: totrans-872
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE494]'
- en: '[PRE495]'
  id: totrans-873
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE495]'
- en: '[PRE496]'
  id: totrans-874
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE496]'
- en: '[PRE497]'
  id: totrans-875
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE497]'
- en: '[PRE498]'
  id: totrans-876
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE498]'
- en: '[PRE499]'
  id: totrans-877
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE499]'
- en: '[PRE500]'
  id: totrans-878
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE500]'
- en: '[PRE501]'
  id: totrans-879
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE501]'
- en: '[PRE502]'
  id: totrans-880
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE502]'
- en: 'The following screenshot displays the output of the preceding code:'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面代码的输出：
- en: '![Figure 1.32 – All the values now are in currency format while retaining the
    cart counter](img/B18645_01_32_.jpg)'
  id: totrans-882
  prefs: []
  type: TYPE_IMG
  zh: '![图1.32 – 所有值现在都是货币格式，同时保留购物车计数器](img/B18645_01_32_.jpg)'
- en: Figure 1.32 – All the values now are in currency format while retaining the
    cart counter
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.32 – 所有值现在都是货币格式，同时保留购物车计数器
- en: In this exercise, we were able to utilize Vue’s methods API to parse arguments
    into methods, return modified values, and use methods to update the local data
    state in a life-like scenario.
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们能够利用Vue的方法API将参数解析为方法，返回修改后的值，并在一个逼真的场景中使用方法来更新本地数据状态。
- en: In the next section, we will explore a significant part of a component – the
    lifecycle and available component hooks in Vue.
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨组件的一个重要部分——Vue中的生命周期和可用的组件钩子。
- en: Understanding component lifecycle hooks
  id: totrans-886
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解组件生命周期钩子
- en: The Vue component lifecycle events happen during a component’s lifecycle, from
    creation to deletion. They allow us to add callbacks and side effects at each
    stage of the component’s life when necessary.
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: Vue组件的生命周期事件发生在组件的生命周期中，从创建到删除。它们允许我们在组件生命周期的每个阶段添加回调和副作用，当需要时。
- en: 'Vue executes the events in order, as follows:'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: Vue按顺序执行事件，如下所示：
- en: '`setup`: This event runs before all other hooks, including `beforeCreate`.
    It doesn’t have access to this instance since the instance has not yet been created
    at this point. It is mainly for using Composition API and is treated in the same
    way Vue treats `script setup`. We will discuss this event more in [*Chapter 5*](B18645_05.xhtml#_idTextAnchor193),
    *The* *Composition API*.'
  id: totrans-889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setup`：这个事件在所有其他钩子之前运行，包括`beforeCreate`。由于实例在此点尚未创建，它无法访问此实例。它主要用于使用组合API，并且与Vue对待`script
    setup`的方式相同。我们将在[*第五章*](B18645_05.xhtml#_idTextAnchor193)中更详细地讨论此事件，*组合API*。'
- en: '`beforeCreate`: This runs when your component has been initialized. `data`
    has not been made reactive and events are not set up in your DOM.'
  id: totrans-890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beforeCreate`：当你的组件被初始化时运行。`data`尚未变为响应式，DOM中的事件也没有设置。'
- en: '`created`: You will be able to access reactive data and events, but the templates
    and DOM are not mounted or rendered. This hook is generally good to use when requesting
    asynchronous data from a server since you will more than likely want this information
    as early as possible before the virtual DOM is mounted.'
  id: totrans-891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created`：你将能够访问响应式数据和事件，但模板和DOM尚未挂载或渲染。当你需要尽早在虚拟DOM挂载之前请求异步数据时，这个钩子通常很有用。'
- en: '`beforeMount`: A very uncommon hook, as it runs directly before the first render
    of your component and is not called **Server-Side Rendering**.'
  id: totrans-892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beforeMount`：这是一个非常不常见的钩子，因为它直接在组件的第一次渲染之前运行，并且不会在**服务器端渲染**中调用。'
- en: '`mounted`: Mounting hooks are among the most common hooks you will use since
    they allow you to access your DOM elements so that non-Vue libraries can be integrated.'
  id: totrans-893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mounted`：挂载钩子是你将最常使用的钩子之一，因为它们允许你访问DOM元素，以便集成非Vue库。'
- en: '`beforeUpdate`: This runs immediately after a change to your component occurs
    and before it has been re-rendered. It’s useful for acquiring the state of reactive
    data before it has been rendered.'
  id: totrans-894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beforeUpdate`：这个钩子在组件发生变化后立即运行，在它被重新渲染之前。在渲染之前获取响应式数据的状态是有用的。'
- en: '`updated`: It runs immediately after the `beforeUpdate` hook and re-renders
    your component with new data changes.'
  id: totrans-895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`updated`：它在`beforeUpdate`钩子之后立即运行，并使用新的数据更改重新渲染你的组件。'
- en: '`beforeUnMount`: This is fired directly before unmounting your component instance.
    The component will still be functional until the `unmounted` hook is called, allowing
    you to stop event listeners and subscriptions to data to avoid memory leaks. Note
    this event is called `beforeDestroy` in Vue 2.x.'
  id: totrans-896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beforeUnMount`：这个钩子在组件实例卸载前直接触发。组件在`unmounted`钩子被调用之前仍然可以正常工作，这允许你停止事件监听和数据订阅以避免内存泄漏。注意，在Vue
    2.x中，此事件被称为`beforeDestroy`。'
- en: '`unmounted`: All the virtual DOM elements and event listeners have been cleaned
    up from your Vue instance. This hook allows you to communicate that to anyone
    or any element that needs to know this has been done. This event in Vue 2.x is
    called `destroyed`.'
  id: totrans-897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unmounted`：所有虚拟DOM元素和事件监听器都已从你的Vue实例中清理。此钩子允许你通知任何需要知道这一点的任何人或任何元素。在Vue 2.x中，此事件被称为`destroyed`。'
- en: Let’s do a small exercise to learn how and when to use Vue’s lifecycle hooks,
    and when they trigger.
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做一个小的练习，学习如何以及何时使用Vue的生命周期钩子，以及它们何时触发。
- en: Exercise 1.10 – using a Vue lifecycle to control data
  id: totrans-899
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.10 – 使用Vue生命周期控制数据
- en: In this exercise, we will be learning how and when to use Vue’s lifecycle hooks,
    and when they are triggered by using JavaScript alerts. By the end of the exercise,
    we will be able to understand and use multiple Vue lifecycle hooks.
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将通过使用JavaScript弹窗学习如何以及何时使用Vue的生命周期钩子，以及它们何时被触发。到练习结束时，我们将能够理解和使用多个Vue生命周期钩子。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.10](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.10).
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.10](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.10)。
- en: 'We will build a list of different elements demonstrating adding different quantities
    to a cart. Then, we will display the updated cart’s total value in a currency
    format by performing the following:'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个不同元素的列表，展示如何向购物车添加不同数量的商品。然后，我们将通过以下方式以货币格式显示更新后的购物车总价值：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.10`
    folder by using the following commands in order:'
  id: totrans-903
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用由`npm init vue@3`生成的应用程序作为起点，或者在代码仓库的根目录下，使用以下命令按顺序导航到`Chapter01/Exercise1.10`文件夹：
- en: '[PRE503]'
  id: totrans-904
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE503]'
- en: '[PRE504]'
  id: totrans-905
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE504]'
- en: 'Run the application using the following command:'
  id: totrans-906
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE505]'
  id: totrans-907
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE505]'
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  id: totrans-908
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code中打开练习项目（在项目目录中使用`code .`命令）或你的首选IDE。
- en: Create a new Vue component file named `Exercise1-10.vue` in the `src/components`
    directory.
  id: totrans-909
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/components`目录中创建一个名为`Exercise1-10.vue`的新Vue组件文件。
- en: 'Inside `Exercise1-10.vue`, we start by creating an array of data to iterate
    through in a list element, set the key to `n`, and output the `{{item}}` value
    inside of the `<li>` element using curly braces:'
  id: totrans-910
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Exercise1-10.vue` 中，我们首先创建一个数据数组，用于在列表元素中迭代，将键设置为 `n`，并在 `<li>` 元素中使用花括号输出
    `{{item}}` 值：
- en: '[PRE506]'
  id: totrans-911
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE506]'
- en: '[PRE507]'
  id: totrans-912
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE507]'
- en: '[PRE508]'
  id: totrans-913
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE508]'
- en: '[PRE509]'
  id: totrans-914
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE509]'
- en: '[PRE510]'
  id: totrans-915
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE510]'
- en: '[PRE511]'
  id: totrans-916
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE511]'
- en: '[PRE512]'
  id: totrans-917
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE512]'
- en: '[PRE513]'
  id: totrans-918
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE513]'
- en: '[PRE514]'
  id: totrans-919
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE514]'
- en: '[PRE515]'
  id: totrans-920
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE515]'
- en: '[PRE516]'
  id: totrans-921
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE516]'
- en: '[PRE517]'
  id: totrans-922
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE517]'
- en: '[PRE518]'
  id: totrans-923
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE518]'
- en: '[PRE519]'
  id: totrans-924
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE519]'
- en: '[PRE520]'
  id: totrans-925
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE520]'
- en: '[PRE521]'
  id: totrans-926
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE521]'
- en: '[PRE522]'
  id: totrans-927
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE522]'
- en: '[PRE523]'
  id: totrans-928
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE523]'
- en: '[PRE524]'
  id: totrans-929
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE524]'
- en: '[PRE525]'
  id: totrans-930
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE525]'
- en: '[PRE526]'
  id: totrans-931
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE526]'
- en: '[PRE527]'
  id: totrans-932
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE527]'
- en: '[PRE528]'
  id: totrans-933
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE528]'
- en: '[PRE529]'
  id: totrans-934
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE529]'
- en: '[PRE530]'
  id: totrans-935
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE530]'
- en: '[PRE531]'
  id: totrans-936
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE531]'
- en: '[PRE532]'
  id: totrans-937
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE532]'
- en: '[PRE533]'
  id: totrans-938
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE533]'
- en: 'Add `beforeCreated()` and `created()` as properties below the `data()` function.
    Set an alert or console log inside these hooks so that you can see when they are
    being triggered:'
  id: totrans-939
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `data()` 函数之下添加 `beforeCreated()` 和 `created()` 作为属性。在这些钩子内部设置一个警告或控制台日志，以便你可以看到它们何时被触发：
- en: '[PRE534]'
  id: totrans-940
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE534]'
- en: '[PRE535]'
  id: totrans-941
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE535]'
- en: '[PRE536]'
  id: totrans-942
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE536]'
- en: '[PRE537]'
  id: totrans-943
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE537]'
- en: '[PRE538]'
  id: totrans-944
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE538]'
- en: '[PRE539]'
  id: totrans-945
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE539]'
- en: '[PRE540]'
  id: totrans-946
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE540]'
- en: '[PRE541]'
  id: totrans-947
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE541]'
- en: '[PRE542]'
  id: totrans-948
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE542]'
- en: '[PRE543]'
  id: totrans-949
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE543]'
- en: '[PRE544]'
  id: totrans-950
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE544]'
- en: '[PRE545]'
  id: totrans-951
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE545]'
- en: 'When you refresh your browser, you should see both alerts before you see your
    list load on the page:'
  id: totrans-952
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你刷新浏览器时，你应该在看到页面上的列表加载之前看到这两个警告：
- en: '![Figure 1.33 – Observing the beforeCreate() hook alert first](img/B18645_01_33_.jpg)'
  id: totrans-953
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.33 – 首先观察 beforeCreate() 钩子的警告](img/B18645_01_33_.jpg)'
- en: Figure 1.33 – Observing the beforeCreate() hook alert first
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.33 – 首先观察 beforeCreate() 钩子的警告
- en: 'The following screenshot displays the `created()` hook alert after the `beforeCreate()`
    hook:'
  id: totrans-955
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下截图显示了 beforeCreate() 钩子之后的 created() 钩子的警告：
- en: '![Figure 1.34 – Observing the before() hook alert after the beforeCreate()
    hook](img/B18645_01_34_.jpg)'
  id: totrans-956
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.34 – 在 beforeCreate() 钩子之后观察 before() 钩子的警告](img/B18645_01_34_.jpg)'
- en: Figure 1.34 – Observing the before() hook alert after the beforeCreate() hook
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.34 – 在 beforeCreate() 钩子之后观察 before() 钩子的警告
- en: 'Define `beforeMount()` and `mounted()` in the same way as in *step 6*. Set
    an alert or console log inside of these hooks so that you can see when they are
    being triggered:'
  id: totrans-958
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以与第 6 步相同的方式定义 `beforeMount()` 和 `mounted()`。在这些钩子内部设置一个警告或控制台日志，以便你可以看到它们何时被触发：
- en: '[PRE546]'
  id: totrans-959
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE546]'
- en: '[PRE547]'
  id: totrans-960
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE547]'
- en: '[PRE548]'
  id: totrans-961
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE548]'
- en: '[PRE549]'
  id: totrans-962
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE549]'
- en: '[PRE550]'
  id: totrans-963
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE550]'
- en: '[PRE551]'
  id: totrans-964
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE551]'
- en: '[PRE552]'
  id: totrans-965
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE552]'
- en: '[PRE553]'
  id: totrans-966
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE553]'
- en: '[PRE554]'
  id: totrans-967
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE554]'
- en: '[PRE555]'
  id: totrans-968
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE555]'
- en: '[PRE556]'
  id: totrans-969
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE556]'
- en: '[PRE557]'
  id: totrans-970
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE557]'
- en: 'When you refresh your browser, you should also see these alerts before you
    can see your list load on the page:'
  id: totrans-971
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你刷新浏览器时，你应该在看到页面上的列表加载之前看到这些警告：
- en: '![Figure 1.35 – Observing the beforeMount() hook alert after the create() hook](img/B18645_01_35_.jpg)'
  id: totrans-972
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.35 – 在 create() 钩子之后观察 beforeMount() 钩子的警告](img/B18645_01_35_.jpg)'
- en: Figure 1.35 – Observing the beforeMount() hook alert after the create() hook
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.35 – 在 create() 钩子之后观察 beforeMount() 钩子的警告
- en: 'The following screenshot displays the `mounted()` hook alert after the `beforeMount()`
    hook:'
  id: totrans-974
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下截图显示了 beforeMount() 钩子之后的 mounted() 钩子的警告：
- en: '![Figure 1.36 – Observing the mounted() hook alert after the beforeMount()
    hook](img/B18645_01_36_.jpg)'
  id: totrans-975
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.36 – 在 beforeMount() 钩子之后观察 mounted() 钩子的警告](img/B18645_01_36_.jpg)'
- en: Figure 1.36 – Observing the mounted() hook alert after the beforeMount() hook
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.36 – 在 beforeMount() 钩子之后观察 mounted() 钩子的警告
- en: 'Add a new `button` element inside your `<li>` element that renders the `item`
    output. Use a `@click` directive to bind this button to a method called `deleteItem`
    and pass the `item` value as an argument:'
  id: totrans-977
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `<li>` 元素内部添加一个新的 `button` 元素，该元素渲染 `item` 输出。使用 `@click` 指令将此按钮绑定到名为 `deleteItem`
    的方法，并将 `item` 值作为参数传递：
- en: '[PRE558]'
  id: totrans-978
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE558]'
- en: '[PRE559]'
  id: totrans-979
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE559]'
- en: '[PRE560]'
  id: totrans-980
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE560]'
- en: '[PRE561]'
  id: totrans-981
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE561]'
- en: '[PRE562]'
  id: totrans-982
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE562]'
- en: '[PRE563]'
  id: totrans-983
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE563]'
- en: '[PRE564]'
  id: totrans-984
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE564]'
- en: '[PRE565]'
  id: totrans-985
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE565]'
- en: '[PRE566]'
  id: totrans-986
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE566]'
- en: '[PRE567]'
  id: totrans-987
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE567]'
- en: '[PRE568]'
  id: totrans-988
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE568]'
- en: 'Add a method called `deleteItem` into a `methods` object above your hooks but
    below the `data()` function. Inside this function, pass `value` as an argument
    and filter out items from the `list` array based on this value. Then, replace
    the existing list with the new list:'
  id: totrans-989
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 hooks 之上的 methods 对象中添加一个名为 `deleteItem` 的方法，但要在 `data()` 函数之下。在这个函数内部，将
    `value` 作为参数传递，并根据这个值从 `list` 数组中过滤出项目。然后，用新的列表替换现有的列表：
- en: '[PRE569]'
  id: totrans-990
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE569]'
- en: '[PRE570]'
  id: totrans-991
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE570]'
- en: '[PRE571]'
  id: totrans-992
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE571]'
- en: '[PRE572]'
  id: totrans-993
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE572]'
- en: '[PRE573]'
  id: totrans-994
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE573]'
- en: '[PRE574]'
  id: totrans-995
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE574]'
- en: '[PRE575]'
  id: totrans-996
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE575]'
- en: '[PRE576]'
  id: totrans-997
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE576]'
- en: '[PRE577]'
  id: totrans-998
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE577]'
- en: '[PRE578]'
  id: totrans-999
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE578]'
- en: '[PRE579]'
  id: totrans-1000
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE579]'
- en: '[PRE580]'
  id: totrans-1001
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE580]'
- en: 'Add `beforeUpdate()` and `updated()` as functions same as in *step 9* and set
    an alert or console log inside them:'
  id: totrans-1002
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与第 9 步相同，添加 `beforeUpdate()` 和 `updated()` 作为函数，并在它们内部设置一个警告或控制台日志：
- en: '[PRE581]'
  id: totrans-1003
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE581]'
- en: '[PRE582]'
  id: totrans-1004
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE582]'
- en: '[PRE583]'
  id: totrans-1005
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE583]'
- en: '[PRE584]'
  id: totrans-1006
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE584]'
- en: '[PRE585]'
  id: totrans-1007
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE585]'
- en: '[PRE586]'
  id: totrans-1008
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE586]'
- en: '[PRE587]'
  id: totrans-1009
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE587]'
- en: '[PRE588]'
  id: totrans-1010
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE588]'
- en: '[PRE589]'
  id: totrans-1011
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE589]'
- en: '[PRE590]'
  id: totrans-1012
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE590]'
- en: '[PRE591]'
  id: totrans-1013
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE591]'
- en: '[PRE592]'
  id: totrans-1014
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE592]'
- en: '[PRE593]'
  id: totrans-1015
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE593]'
- en: 'When you delete a list item by clicking on the `beforeUpdated` will trigger:'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 当你通过点击 `beforeUpdated` 删除列表项时将触发：
- en: '![Figure 1.37 – BeforeCreated is called first after clicking on any delete
    button](img/B18645_01_37_.jpg)'
  id: totrans-1017
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.37 – 点击任何删除按钮后首先调用 BeforeCreated](img/B18645_01_37_.jpg)'
- en: Figure 1.37 – BeforeCreated is called first after clicking on any delete button
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.37 – 点击任何删除按钮后首先调用 BeforeCreated
- en: 'Then, `updated` triggers, as shown in the following screenshot:'
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，updated 触发，如下截图所示：
- en: '![Figure 1.38 – updated is called when the Vue engine finishes updating the
    component before rendering to the DOM](img/B18645_01_38_.jpg)'
  id: totrans-1020
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.38 – Vue 引擎在渲染到 DOM 之前更新组件时调用 updated](img/B18645_01_38_.jpg)'
- en: Figure 1.38 – updated is called when the Vue engine finishes updating the component
    before rendering to the DOM
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.38 – 当 Vue 引擎在渲染到 DOM 之前更新组件时调用 updated
- en: 'Continue adding `beforeUnmount()` and `unmounted()` to the component options
    as function properties. Set an alert or console log inside these hooks so that
    you can see when they are being triggered:'
  id: totrans-1022
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续将`beforeUnmount()`和`unmounted()`添加到组件选项中作为函数属性。在这些钩子内部设置一个警告或控制台日志，以便您可以看到它们何时被触发：
- en: '[PRE594]'
  id: totrans-1023
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE594]'
- en: '[PRE595]'
  id: totrans-1024
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE595]'
- en: '[PRE596]'
  id: totrans-1025
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE596]'
- en: '[PRE597]'
  id: totrans-1026
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE597]'
- en: '[PRE598]'
  id: totrans-1027
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE598]'
- en: '[PRE599]'
  id: totrans-1028
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE599]'
- en: '[PRE600]'
  id: totrans-1029
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE600]'
- en: '[PRE601]'
  id: totrans-1030
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE601]'
- en: '[PRE602]'
  id: totrans-1031
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE602]'
- en: '[PRE603]'
  id: totrans-1032
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE603]'
- en: '[PRE604]'
  id: totrans-1033
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE604]'
- en: '[PRE605]'
  id: totrans-1034
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE605]'
- en: '[PRE606]'
  id: totrans-1035
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE606]'
- en: 'Add a new string to your `list` array – for example, `testing` `unmounted hooks`:'
  id: totrans-1036
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向您的`list`数组添加一个新的字符串 – 例如，`testing` `unmounted hooks`：
- en: '[PRE607]'
  id: totrans-1037
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE607]'
- en: '[PRE608]'
  id: totrans-1038
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE608]'
- en: '[PRE609]'
  id: totrans-1039
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE609]'
- en: '[PRE610]'
  id: totrans-1040
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE610]'
- en: '[PRE611]'
  id: totrans-1041
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE611]'
- en: '[PRE612]'
  id: totrans-1042
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE612]'
- en: '[PRE613]'
  id: totrans-1043
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE613]'
- en: '[PRE614]'
  id: totrans-1044
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE614]'
- en: '[PRE615]'
  id: totrans-1045
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE615]'
- en: '[PRE616]'
  id: totrans-1046
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE616]'
- en: '[PRE617]'
  id: totrans-1047
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE617]'
- en: '[PRE618]'
  id: totrans-1048
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE618]'
- en: '[PRE619]'
  id: totrans-1049
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE619]'
- en: '[PRE620]'
  id: totrans-1050
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE620]'
- en: '[PRE621]'
  id: totrans-1051
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE621]'
- en: '[PRE622]'
  id: totrans-1052
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE622]'
- en: '[PRE623]'
  id: totrans-1053
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE623]'
- en: 'You should see the unmount alerts according to this order: `beforeUnmount`
    – `beforeCreated` – `created` – `beforeMount` – `unmounted` – `mounted`. An example
    output screen displaying the alert for `beforeUnmount` is shown here:'
  id: totrans-1054
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该按照以下顺序看到卸载警告：`beforeUnmount` – `beforeCreated` – `created` – `beforeMount`
    – `unmounted` – `mounted`。这里显示了显示`beforeUnmount`警告的示例输出屏幕：
- en: '![Figure 1.39 – Alert displays when a component is about to be unmounted](img/B18645_01_39.jpg)'
  id: totrans-1055
  prefs: []
  type: TYPE_IMG
  zh: '![图1.39 – 当组件即将卸载时显示警告](img/B18645_01_39.jpg)'
- en: Figure 1.39 – Alert displays when a component is about to be unmounted
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.39 – 当组件即将卸载时显示警告
- en: Note
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`mounted` and `created` lifecycle hooks will run every time a component is
    initialized. If this is not the desired effect, consider running the code you
    want to run once from the parent component or view, such as the `App.vue` file.'
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: '`mounted`和`created`生命周期钩子将在每次组件初始化时运行。如果这不是期望的效果，请考虑从父组件或视图中运行一次您想要运行的代码，例如`App.vue`文件。'
- en: In this exercise, we learned what Vue lifecycle hooks are, when they trigger,
    and in what order they trigger. This will be useful in combination with triggering
    methods and controlling data within your Vue components.
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们学习了Vue生命周期钩子的概念，它们何时触发以及触发顺序。这将在与触发方法和控制Vue组件内的数据结合使用时非常有用。
- en: Next, we will discuss how we style our Vue components using the `<``style>`
    section.
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论如何使用`<style>`部分来样式化我们的Vue组件。
- en: Styling components
  id: totrans-1061
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式组件
- en: When using Vue components, the Vite compiler allows you to use almost any frontend
    templating language style. The easiest way to enable these expressive library
    plugins in your Vue templates is to install them when you initialize your project,
    or by using `npm install` (or `yarn add`) for the package.
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Vue组件时，Vite编译器允许您使用几乎任何前端模板语言风格。在Vue模板中启用这些表达性库插件的最简单方法是，在初始化项目时安装它们，或者使用`npm
    install`（或`yarn add`）安装包。
- en: When using the `style` tag inside of a Vue component, you can specify a language
    using the `lang` attribute, provided that you have installed that specific language
    plugin.
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Vue组件内部使用`style`标签时，您可以使用`lang`属性指定一个语言，前提是您已安装了该特定语言插件。
- en: 'For example, if you chose to install the Stylus preprocessor, first you need
    to install the `stylus` package in your project as a dependency by performing
    the following command:'
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您选择安装Stylus预处理器，首先您需要通过执行以下命令在项目中将`stylus`包作为依赖项安装：
- en: '[PRE624]'
  id: totrans-1065
  prefs: []
  type: TYPE_PRE
  zh: '[PRE624]'
- en: 'Then, you can add the `lang="stylus"` attribute to the `style` tag to begin
    using Stylus:'
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以将`lang="stylus"`属性添加到`style`标签中，开始使用Stylus：
- en: '[PRE625]'
  id: totrans-1067
  prefs: []
  type: TYPE_PRE
  zh: '[PRE625]'
- en: Another benefit of using Vue is scoping the style with the `scoped` attribute.
    This is a useful way to create isolated and component-specific CSS stylings. It
    also overrides any other CSS global rules, according to the CSS rule of specificity.
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Vue的另一个好处是使用`scoped`属性作用域化样式。这是一种创建隔离和组件特定CSS样式的有用方法。它还会根据CSS规则的具体性覆盖任何其他CSS全局规则。
- en: It is not recommended to scope global styles. A common method for defining global
    styling is to separate these styles into another style sheet and import them into
    your `App.vue` file.
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议将全局样式作用域化。定义全局样式的常见方法是将这些样式分离到另一个样式表中，并将其导入到您的`App.vue`文件中。
- en: Now, let’s practice importing SCSS, a pre-processor plugin for CSS, to use in
    your application, and write some scoped stylings with the following exercise.
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过以下练习来练习导入SCSS，这是CSS的预处理器插件，并在您的应用程序中使用它，并编写一些作用域化的样式：
- en: Exercise 1.11 – importing SCSS into a scoped component
  id: totrans-1071
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.11 – 将SCSS导入到作用域组件中
- en: In this exercise, we will be utilizing the `style` tag to add SCSS preprocessed
    styles to a component and importing external stylesheets.
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将利用`style`标签向组件添加SCSS预处理器样式，并导入外部样式表。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.11](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.11).
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.11](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.11)。
- en: 'Let’s start by performing the following steps:'
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先执行以下步骤：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.11`
    folder by using the following commands in order:'
  id: totrans-1075
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm init vue@3` 生成的应用程序作为起点，或者在你的代码仓库的根目录中，使用以下命令按顺序导航到 `Chapter01/Exercise1.11`
    文件夹：
- en: '[PRE626]'
  id: totrans-1076
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE626]'
- en: '[PRE627]'
  id: totrans-1077
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE627]'
- en: 'Run the application using the following command:'
  id: totrans-1078
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE628]'
  id: totrans-1079
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE628]'
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  id: totrans-1080
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 中打开练习项目（在项目目录中使用 `code .` 命令）或使用你偏好的 IDE。
- en: Create a new Vue component file named `Exercise1-11.vue` in the `src/components`
    directory.
  id: totrans-1081
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/components` 目录下创建一个名为 `Exercise1-11.vue` 的新 Vue 组件文件。
- en: 'Inside `Exercise1-11.vue`, let’s write some HTML that can be styled using SCSS.
    Let’s keep practicing the interpolation method:'
  id: totrans-1082
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Exercise1-11.vue` 内，让我们编写一些可以使用 SCSS 样式的 HTML。让我们继续练习插值方法：
- en: '[PRE629]'
  id: totrans-1083
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE629]'
- en: '[PRE630]'
  id: totrans-1084
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE630]'
- en: '[PRE631]'
  id: totrans-1085
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE631]'
- en: '[PRE632]'
  id: totrans-1086
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE632]'
- en: '[PRE633]'
  id: totrans-1087
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE633]'
- en: '[PRE634]'
  id: totrans-1088
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE634]'
- en: '[PRE635]'
  id: totrans-1089
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE635]'
- en: '[PRE636]'
  id: totrans-1090
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE636]'
- en: '[PRE637]'
  id: totrans-1091
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE637]'
- en: '[PRE638]'
  id: totrans-1092
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE638]'
- en: '[PRE639]'
  id: totrans-1093
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE639]'
- en: '[PRE640]'
  id: totrans-1094
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE640]'
- en: '[PRE641]'
  id: totrans-1095
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE641]'
- en: '[PRE642]'
  id: totrans-1096
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE642]'
- en: '[PRE643]'
  id: totrans-1097
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE643]'
- en: '[PRE644]'
  id: totrans-1098
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE644]'
- en: '[PRE645]'
  id: totrans-1099
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE645]'
- en: '[PRE646]'
  id: totrans-1100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE646]'
- en: '[PRE647]'
  id: totrans-1101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE647]'
- en: '[PRE648]'
  id: totrans-1102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE648]'
- en: '[PRE649]'
  id: totrans-1103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE649]'
- en: '[PRE650]'
  id: totrans-1104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE650]'
- en: 'Add the `sass` SCSS package as a project dependency:'
  id: totrans-1105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `sass` SCSS 包添加为项目依赖项：
- en: '[PRE651]'
  id: totrans-1106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE651]'
- en: 'Add the `lang` attribute to the `style` tag and add the `scss` value to enable
    SCSS syntax inside the `style` block:'
  id: totrans-1107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `lang` 属性添加到 `style` 标签中，并将 `scss` 值添加到 `style` 块中以启用 SCSS 语法：
- en: '[PRE652]'
  id: totrans-1108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE652]'
- en: 'Create a folder inside the `src/` directory called `styles`. Inside this new
    folder, create a file called `typography.scss`:'
  id: totrans-1109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/` 目录下创建一个名为 `styles` 的文件夹。在这个新文件夹内，创建一个名为 `typography.scss` 的文件：
- en: '[PRE653]'
  id: totrans-1110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE653]'
- en: 'Inside `typography.scss`, add some styling for the template you composed in
    your component, such as defining color variables (`green`, `grey`, and `blue`)
    to reuse in different areas of related CSS rules, and some CSS styles for `h1`,
    `h2`, and the list elements:'
  id: totrans-1111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `typography.scss` 内，为你在组件中编写的模板添加一些样式，例如定义颜色变量（`green`、`grey` 和 `blue`）以便在不同区域的
    CSS 规则中重用，并为 `h1`、`h2` 和列表元素添加一些 CSS 样式：
- en: '[PRE654]'
  id: totrans-1112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE654]'
- en: '[PRE655]'
  id: totrans-1113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE655]'
- en: '[PRE656]'
  id: totrans-1114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE656]'
- en: '[PRE657]'
  id: totrans-1115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE657]'
- en: '[PRE658]'
  id: totrans-1116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE658]'
- en: '[PRE659]'
  id: totrans-1117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE659]'
- en: '[PRE660]'
  id: totrans-1118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE660]'
- en: '[PRE661]'
  id: totrans-1119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE661]'
- en: '[PRE662]'
  id: totrans-1120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE662]'
- en: '[PRE663]'
  id: totrans-1121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE663]'
- en: '[PRE664]'
  id: totrans-1122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE664]'
- en: '[PRE665]'
  id: totrans-1123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE665]'
- en: '[PRE666]'
  id: totrans-1124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE666]'
- en: '[PRE667]'
  id: totrans-1125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE667]'
- en: '[PRE668]'
  id: totrans-1126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE668]'
- en: '[PRE669]'
  id: totrans-1127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE669]'
- en: '[PRE670]'
  id: totrans-1128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE670]'
- en: '[PRE671]'
  id: totrans-1129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE671]'
- en: '[PRE672]'
  id: totrans-1130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE672]'
- en: '[PRE673]'
  id: totrans-1131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE673]'
- en: '[PRE674]'
  id: totrans-1132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE674]'
- en: '[PRE675]'
  id: totrans-1133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE675]'
- en: '[PRE676]'
  id: totrans-1134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE676]'
- en: '[PRE677]'
  id: totrans-1135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE677]'
- en: In SCSS, you can use standard CSS selectors to select elements in your component.
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SCSS 中，你可以使用标准的 CSS 选择器来选择组件中的元素。
- en: '`ul > li` will select every `<li>` element inside of an `<ul>` element for
    styling. Similarly, using the addition symbol (`+`) means that the elements placed
    after the first element will be styled if they match the condition. For example,
    `h1 + h2` will dictate that all `h2` elements after `h1` will be styled in a certain
    way, but `h3` will not. You can understand this better through the following example:'
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: '`ul > li` 将选择 `<ul>` 元素内的每个 `<li>` 元素进行样式化。同样，使用加号符号（`+`）意味着如果元素满足条件，则放置在第一个元素之后的元素将被样式化。例如，`h1
    + h2` 将规定所有在 `h1` 之后的所有 `h2` 元素将以某种方式样式化，但 `h3` 不会。你可以通过以下示例更好地理解这一点：'
- en: 'In CSS, you would present this code as follows:'
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CSS 中，你会这样呈现这段代码：
- en: '[PRE678]'
  id: totrans-1139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE678]'
- en: 'In SCSS, the same code can be represented as follows:'
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SCSS 中，相同的代码可以表示如下：
- en: '[PRE679]'
  id: totrans-1141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE679]'
- en: 'In your component, import these styles by using the SCSS `@``import` method:'
  id: totrans-1142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的组件中，通过使用 SCSS 的 `@import` 方法导入这些样式：
- en: '[PRE680]'
  id: totrans-1143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE680]'
- en: '[PRE681]'
  id: totrans-1144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE681]'
- en: '[PRE682]'
  id: totrans-1145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE682]'
- en: 'This will generate an output as follows:'
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下输出：
- en: '![Figure 1.40 – When you save and reload, your project should have the style
    imported](img/B18645_01_40.jpg)'
  id: totrans-1147
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.40 – 保存并重新加载后，你的项目应该已导入样式](img/B18645_01_40.jpg)'
- en: Figure 1.40 – When you save and reload, your project should have the style imported
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.40 – 保存并重新加载后，你的项目应该已导入样式
- en: 'Add the `scoped` attribute to your `<style>` tag to only apply these styles
    to this component instance. Use the variable from the `$color-blue` imported stylesheet:'
  id: totrans-1149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `scoped` 属性添加到 `<style>` 标签中，以便仅将这些样式应用于此组件实例。使用从导入的样式表中导入的 `$color-blue`
    变量：
- en: '[PRE683]'
  id: totrans-1150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE683]'
- en: '[PRE684]'
  id: totrans-1151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE684]'
- en: '[PRE685]'
  id: totrans-1152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE685]'
- en: '[PRE686]'
  id: totrans-1153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE686]'
- en: '[PRE687]'
  id: totrans-1154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE687]'
- en: '[PRE688]'
  id: totrans-1155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE688]'
- en: '[PRE689]'
  id: totrans-1156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE689]'
- en: 'The output of the preceding code is as follows:'
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下：
- en: '![Figure 1.41 – The outcome of scoping styles](img/B18645_01_41.jpg)'
  id: totrans-1158
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.41 – 作用域样式的结果](img/B18645_01_41.jpg)'
- en: Figure 1.41 – The outcome of scoping styles
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.41 – 作用域样式的结果
- en: Inspect the DOM and you will notice that at runtime, that scoping has applied
    `v-data-*` attributes to your DOM elements specifying these specific rules.
  id: totrans-1160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 DOM，你将注意到在运行时，作用域已将 `v-data-*` 属性应用于你的 DOM 元素，指定了这些特定规则。
- en: 'The `<head>` and `<``style>` tags:'
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: '`<head>` 和 `<style>` 标签：'
- en: '![Figure 1.42 – How the virtual DOM uses data attributes to assign scoped styles](img/B18645_01_42.jpg)'
  id: totrans-1162
  prefs: []
  type: TYPE_IMG
  zh: '![图1.42 – 虚拟DOM如何使用数据属性来分配作用域样式](img/B18645_01_42.jpg)'
- en: Figure 1.42 – How the virtual DOM uses data attributes to assign scoped styles
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.42 – 虚拟DOM如何使用数据属性来分配作用域样式
- en: 'Create a new style sheet called `global.scss` in the `styles` folder, containing
    only stylings for the main `body` element:'
  id: totrans-1164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`styles`文件夹中创建一个新的样式表`global.scss`，其中只包含对主`body`元素的样式：
- en: '[PRE690]'
  id: totrans-1165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE690]'
- en: '[PRE691]'
  id: totrans-1166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE691]'
- en: '[PRE692]'
  id: totrans-1167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE692]'
- en: '[PRE693]'
  id: totrans-1168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE693]'
- en: '[PRE694]'
  id: totrans-1169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE694]'
- en: '[PRE695]'
  id: totrans-1170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE695]'
- en: 'Import this stylesheet into your `App.vue`:'
  id: totrans-1171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此样式表导入到你的`App.vue`中：
- en: '[PRE696]'
  id: totrans-1172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE696]'
- en: '[PRE697]'
  id: totrans-1173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE697]'
- en: '[PRE698]'
  id: totrans-1174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE698]'
- en: 'Our app should render the same as before; only the font family for all elements
    should change to Avenir and there should be no margin for the main `body`, as
    follows:'
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用应该与之前渲染相同；只是所有元素的字体族应更改为Avenir，并且主`body`不应有任何边距，如下所示：
- en: '![Figure 1.43 – Properly scoped styles for Exercise 1.03](img/B18645_01_43.jpg)'
  id: totrans-1176
  prefs: []
  type: TYPE_IMG
  zh: '![图1.43 – 练习1.03的正确作用域样式](img/B18645_01_43.jpg)'
- en: Figure 1.43 – Properly scoped styles for Exercise 1.03
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.43 – 练习1.03的正确作用域样式
- en: In this exercise, we interpolated data that originated from an array and learned
    about some basic SCSS syntax. Then, we styled our component using forms of `scoped`
    SCSS, which can either exist inside the `<style>` tag or be imported from another
    directory into our project.
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们从一个数组中插值了数据，并学习了SCSS的一些基本语法。然后，我们使用`scoped` SCSS的形式来设计我们的组件，这些`scoped`
    SCSS可以存在于`<style>`标签内部，或者从另一个目录导入到我们的项目中。
- en: In the next section, we are going to experiment with how to write dynamic CSS
    for a component using Vue 3 features.
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将通过Vue 3的特性来实验如何为组件编写动态CSS。
- en: Setting up state-driven dynamic CSS in Vue 3
  id: totrans-1180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Vue 3中设置状态驱动的动态CSS
- en: Vue 3.x introduces a new CSS function, `v-bind()`, to use within the `style`
    section of a Vue SFC. We use this function to create a one-way link between local
    data and a CSS value.
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 3.x引入了一个新的CSS函数，`v-bind()`，用于Vue SFC的`style`部分。我们使用这个函数在本地数据和CSS值之间创建单向链接。
- en: Under the hood, the Vue engine uses CSS custom properties (or CSS variables)
    to compute the dynamic stylings received from `v-bind()`. For each `v-bind()`,
    it generates a hashed custom property (with the `--` prefix) and adds it to the
    component’s root element. All the custom properties are added as inline static
    styles and will be updated whenever the linked local data’s value changes.
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: 在底层，Vue引擎使用CSS自定义属性（或CSS变量）来计算从`v-bind()`接收到的动态样式。对于每个`v-bind()`，它生成一个带哈希的自定义属性（带有`--`前缀）并将其添加到组件的根元素。所有自定义属性都作为行内静态样式添加，并且将在链接的本地数据值更改时更新。
- en: 'For example, let’s have a component that prints out a `title` and contains
    a local data property, `headingStyles`. The `headingStyles` data object contains
    several fields such as `marginTop`, `textAlign`, and `color`, indicating the relevant
    CSS properties:'
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们有一个组件，它打印出一个`title`并包含一个本地数据属性，`headingStyles`。`headingStyles`数据对象包含多个字段，如`marginTop`、`textAlign`和`color`，表示相关的CSS属性：
- en: '[PRE699]'
  id: totrans-1184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE699]'
- en: 'At this point, the output does not have a custom style and will be as follows:'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，输出没有自定义样式，如下所示：
- en: '![Figure 1.44 – Displaying the title without using v-bind() and custom CSS](img/B18645_01_44.jpg)'
  id: totrans-1186
  prefs: []
  type: TYPE_IMG
  zh: '![图1.44 – 不使用v-bind()和自定义CSS显示标题](img/B18645_01_44.jpg)'
- en: Figure 1.44 – Displaying the title without using v-bind() and custom CSS
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.44 – 不使用v-bind()和自定义CSS显示标题
- en: 'We now can bind `headingStyles` to the CSS stylings of `h1` in the `<style>`
    section, by applying `v-bind()` accordingly:'
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过应用`v-bind()`将`headingStyles`绑定到`<style>`部分中`h1`的CSS样式上：
- en: '[PRE700]'
  id: totrans-1189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE700]'
- en: 'The output will now have custom CSS enabled:'
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的输出将启用自定义CSS：
- en: '![Figure 1.45 – Output with v-bind() and custom CSS applied](img/B18645_01_45.jpg)'
  id: totrans-1191
  prefs: []
  type: TYPE_IMG
  zh: '![图1.45 – 应用v-bind()和自定义CSS的输出](img/B18645_01_45.jpg)'
- en: Figure 1.45 – Output with v-bind() and custom CSS applied
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.45 – 应用v-bind()和自定义CSS的输出
- en: 'If you open `h1` element in the **Elements** tab, you will see it has inline
    styles, as shown in *Figure 1**.47*:'
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开**元素**选项卡中的`h1`元素，你会看到它有行内样式，如图*1.47*所示：
- en: '![Figure 1.46 – Devtools inspection shows the inline styles with hashed custom
    properties generated](img/B18645_01_46.jpg)'
  id: totrans-1194
  prefs: []
  type: TYPE_IMG
  zh: '![图1.46 – Devtools检查显示带有哈希自定义属性的行内样式](img/B18645_01_46.jpg)'
- en: Figure 1.46 – Devtools inspection shows the inline styles with hashed custom
    properties generated
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.46 – Devtools检查显示带有哈希自定义属性的行内样式
- en: Since `v-bind()` is a Vue 3.x feature, it also supports local variables defined
    using `script setup` out of the box. You can re-write the code in the `script
    setup` standards, and the outputs stay the same.
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `v-bind()` 是 Vue 3.x 的功能，它也支持使用 `script setup` 定义的本地变量。您可以使用 `script setup`
    标准重新编写代码，输出保持不变。
- en: '`v-bind()` also support JavaScript expressions. To use JavaScript expressions,
    you need to wrap them in quotes. For example, we can take `headingStyles` from
    the previous example and re-define `marginTop` as a number only:'
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-bind()` 也支持 JavaScript 表达式。要使用 JavaScript 表达式，您需要将它们用引号括起来。例如，我们可以从上一个示例中获取
    `headingStyles` 并重新定义 `marginTop` 为一个数字：'
- en: '[PRE701]'
  id: totrans-1198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE701]'
- en: 'In the `<style>` section, let’s compute `margin-top` for the `h1` selector
    with the addition of `5px` and add the `px` suffix:'
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<style>` 部分，让我们计算 `h1` 选择器的 `margin-top` 并添加 `5px`，并添加 `px` 后缀：
- en: '[PRE702]'
  id: totrans-1200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE702]'
- en: 'The output now has a margin top of `15px` as shown in *Figure 1**.48*:'
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的输出现在具有 `15px` 的上边距，如 *图 1**.48* 所示：
- en: '![Figure 1.47 – Generated custom property for margin-top is 15px](img/B18645_01_47.jpg)'
  id: totrans-1202
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.47 – 为 margin-top 生成的自定义属性为 15px](img/B18645_01_47.jpg)'
- en: Figure 1.47 – Generated custom property for margin-top is 15px
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.47 – 为 margin-top 生成的自定义属性为 15px
- en: Using `v-bind(`) is very beneficial for defining theming dynamically and programmatically.
    However, it provides only one-way binding from the local data to the styling,
    not vice versa. In the next section, we will explore the opposite binding direction
    using CSS modules.
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `v-bind(`) 对于动态和程序化地定义主题非常有用。然而，它只提供了从本地数据到样式的单向绑定，而不是相反。在下一节中，我们将探索使用 CSS
    模块的反向绑定方向。
- en: Understanding CSS modules
  id: totrans-1205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 CSS 模块
- en: A recent pattern that has become popular in the reactive framework world is
    CSS modules. Frontend development always faces the issue of conflicting CSS class
    names, ill-structured BEM code, and confusing CSS file structures. Vue components
    help to solve this by being modular and allowing you to compose CSS that will
    generate unique class names for the specific component at compile time.
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: 最近在响应式框架领域流行的一种模式是 CSS 模块。前端开发始终面临 CSS 类名冲突、结构不良的 BEM 代码和混乱的 CSS 文件结构的问题。Vue
    组件通过模块化和允许您在编译时组合生成特定组件的唯一类名的 CSS 来帮助解决这个问题。
- en: Using CSS modules in Vue exports CSS styles from the `style` section into JavaScript
    modules and uses those styles in the template and logic computing.
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Vue 中使用 CSS 模块将 CSS 样式从 `style` 部分导出为 JavaScript 模块，并在模板和逻辑计算中使用这些样式。
- en: 'To enable this feature in Vue, you will need to add the `module` attribute
    to the `style` block, and reference as classes using the `:class` and `$style.<class
    name>` syntax, as shown here:'
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Vue 中启用此功能，您需要将 `module` 属性添加到 `style` 块中，并使用 `:class` 和 `$style.<class name>`
    语法引用类，如下所示：
- en: '[PRE703]'
  id: totrans-1209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE703]'
- en: Once you have enabled the CSS module, the Vue engine exposes the `$style` object
    containing all the defined selectors as objects for use within the `template`
    section, and `this.$style` to use within the component’s JavaScript logic. In
    the preceding example, you are binding the CSS stylings defined for the`.container`
    class selector to `div` using `$style.container`.
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启用了 CSS 模块，Vue 引擎会暴露一个 `$style` 对象，其中包含所有定义的选择器作为对象，用于 `template` 部分的内部使用，以及
    `this.$style` 用于组件的 JavaScript 逻辑内部。在上一个示例中，您使用 `$style.container` 将为 `.container`
    类选择器定义的 CSS 样式绑定到 `div` 上。
- en: If you inspected the DOM tree, that class would be called something such as
    `.container_ABC123`. If you were to create multiple components that had a semantic
    class name such as `.container` but used CSS modules, you would never run into
    style conflicts again.
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您检查了 DOM 树，该类将被命名为类似 `.container_ABC123` 的名称。如果您要创建多个组件，这些组件具有像 `.container`
    这样的语义化类名但使用 CSS 模块，您将永远不会再次遇到样式冲突。
- en: Now, let’s practice using CSS modules to style a Vue component.
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们练习使用 CSS 模块来对 Vue 组件进行样式设计。
- en: Exercise 1.12 – styling Vue components using CSS modules
  id: totrans-1213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.12 – 使用 CSS 模块对 Vue 组件进行样式设计
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.12](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.12).
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.12](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.12)。
- en: 'Let’s start by performing the following steps:'
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从执行以下步骤开始：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.12`
    folder by using the following commands in order:'
  id: totrans-1216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm init vue@3` 生成的应用程序作为起点，或在代码仓库的根目录下，使用以下命令按顺序导航到 `Chapter01/Exercise1.12`
    文件夹：
- en: '[PRE704]'
  id: totrans-1217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE704]'
- en: '[PRE705]'
  id: totrans-1218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE705]'
- en: 'Run the application using the following command:'
  id: totrans-1219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE706]'
  id: totrans-1220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE706]'
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  id: totrans-1221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 中打开练习项目（在项目目录中使用 `code .` 命令）或您首选的 IDE。
- en: Create a new Vue component file named `Exercise1-12.vue` in the `src/components`
    directory.
  id: totrans-1222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/components` 目录下创建一个名为 `Exercise1-12.vue` 的新 Vue 组件文件。
- en: 'Inside `Exercise1-12.vue`, compose the following code:'
  id: totrans-1223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Exercise1-12.vue` 中，编写以下代码：
- en: '[PRE707]'
  id: totrans-1224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE707]'
- en: '[PRE708]'
  id: totrans-1225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE708]'
- en: '[PRE709]'
  id: totrans-1226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE709]'
- en: '[PRE710]'
  id: totrans-1227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE710]'
- en: '[PRE711]'
  id: totrans-1228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE711]'
- en: '[PRE712]'
  id: totrans-1229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE712]'
- en: '[PRE713]'
  id: totrans-1230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE713]'
- en: '[PRE714]'
  id: totrans-1231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE714]'
- en: '[PRE715]'
  id: totrans-1232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE715]'
- en: '[PRE716]'
  id: totrans-1233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE716]'
- en: '[PRE717]'
  id: totrans-1234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE717]'
- en: '[PRE718]'
  id: totrans-1235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE718]'
- en: '[PRE719]'
  id: totrans-1236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE719]'
- en: '[PRE720]'
  id: totrans-1237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE720]'
- en: '[PRE721]'
  id: totrans-1238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE721]'
- en: '[PRE722]'
  id: totrans-1239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE722]'
- en: 'Add the `<style>` block and add `module` as an attribute instead of `scoped`:'
  id: totrans-1240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `<style>` 块，并将 `module` 作为属性而不是 `scoped`：
- en: '[PRE723]'
  id: totrans-1241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE723]'
- en: '[PRE724]'
  id: totrans-1242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE724]'
- en: '[PRE725]'
  id: totrans-1243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE725]'
- en: '[PRE726]'
  id: totrans-1244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE726]'
- en: '[PRE727]'
  id: totrans-1245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE727]'
- en: '[PRE728]'
  id: totrans-1246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE728]'
- en: '[PRE729]'
  id: totrans-1247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE729]'
- en: '[PRE730]'
  id: totrans-1248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE730]'
- en: '[PRE731]'
  id: totrans-1249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE731]'
- en: '[PRE732]'
  id: totrans-1250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE732]'
- en: '[PRE733]'
  id: totrans-1251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE733]'
- en: '[PRE734]'
  id: totrans-1252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE734]'
- en: '[PRE735]'
  id: totrans-1253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE735]'
- en: '[PRE736]'
  id: totrans-1254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE736]'
- en: '[PRE737]'
  id: totrans-1255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE737]'
- en: '[PRE738]'
  id: totrans-1256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE738]'
- en: 'To use CSS modules in your template, you need to bind them to your HTML elements
    by using the `:class` syntax, which is the same as the `v-bind:class` directive:'
  id: totrans-1257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在模板中使用 CSS 模块，您需要使用 `:class` 语法将它们绑定到 HTML 元素上，这与 `v-bind:class` 指令相同：
- en: '[PRE739]'
  id: totrans-1258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE739]'
- en: '[PRE740]'
  id: totrans-1259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE740]'
- en: 'When you save it, your project should look something like this:'
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: 保存后，您的项目应该看起来像这样：
- en: '![Figure 1.48 – Output using CSS modules](img/B18645_01_48.jpg)'
  id: totrans-1261
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.48 – 使用 CSS 模块生成的输出](img/B18645_01_48.jpg)'
- en: Figure 1.48 – Output using CSS modules
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.48 – 使用 CSS 模块生成的输出
- en: 'If you inspect the virtual DOM, you will see how it has applied unique class
    names to the bound elements:'
  id: totrans-1263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您检查虚拟 DOM，您将看到它如何为绑定元素应用了唯一的类名：
- en: '![Figure 1.49 – Generated CSS module class](img/B18645_01_49.jpg)'
  id: totrans-1264
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.49 – 生成的 CSS 模块类](img/B18645_01_49.jpg)'
- en: Figure 1.49 – Generated CSS module class
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.49 – 生成的 CSS 模块类
- en: In this exercise, we saw how to use CSS modules in your Vue components and how
    it works differently from CSS scoping.
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们看到了如何在 Vue 组件中使用 CSS 模块，以及它与 CSS 命名空间的不同之处。
- en: In combination with file splitting and importing SCSS, using CSS modules is
    the preferred method for scoping component styling here. This safely ensures that
    individual component styles and business rules do not risk overriding each other
    and do not pollute global styling and variables with component-specific styling
    requirements.
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: 结合文件拆分和导入 SCSS，使用 CSS 模块是此处作用域组件样式的首选方法。这安全地确保了单个组件样式和业务规则不会相互覆盖，并且不会因组件特定的样式要求而污染全局样式和变量。
- en: Readability is important. The class name also hints at the component name as
    opposed to the `v-data` attribute, which can be good when debugging large projects.
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: 可读性很重要。类名也暗示了组件名称，而不是 `v-data` 属性，这在调试大型项目时可能很有用。
- en: In the next section, you will apply what you have learned in this chapter to
    build a dynamic shopping list app by combining directives, loops, two-way data,
    and method declaration for a Vue component together, with scoped CSS styling.
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将应用本章学到的知识，通过结合指令、循环、双向数据和 Vue 组件的方法声明，以及作用域 CSS 样式，构建一个动态购物清单应用。
- en: Activity 1.01 – building a dynamic shopping list app using Vue
  id: totrans-1270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动摘要 1.01 – 使用 Vue 构建动态购物清单应用
- en: To access the code file for this activity, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Activity1.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Activity1.01)
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此活动的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Activity1.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Activity1.01)
- en: This activity aims to leverage your knowledge thus far about the basic features
    of an SFC, such as expressions, loops, two-way binding, and event handling.
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: 本活动旨在利用您迄今为止对 SFC 基本特性的了解，例如表达式、循环、双向绑定和事件处理。
- en: This application should let users create and delete individual list items and
    clear the total list in one click.
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序应允许用户创建和删除单个列表项，并一键清除整个列表。
- en: 'The following steps will help you complete the activity:'
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您完成活动：
- en: Build an interactive form in one component using an input bound to `v-model`.
  id: totrans-1275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个组件中使用绑定到 `v-model` 的输入创建一个交互式表单。
- en: Add one input field to which you can add shopping list items. Allow users to
    add items by using the *Enter* key by binding a method to the `@``keyup.enter`
    event.
  id: totrans-1276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个输入字段，用户可以添加购物清单项目。允许用户通过将方法绑定到 `@keyup.enter` 事件来使用 *Enter* 键添加项目。
- en: Users can expect to clear the list by deleting all the items or removing them
    one at a time. To facilitate this, you can use a `delete` method, which can pass
    the array position as an argument, or simply overwrite the whole shopping list
    data prop with an empty array, `[]`.
  id: totrans-1277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户可以通过删除所有项目或逐个删除它们来清除列表。为了方便起见，你可以使用一个 `delete` 方法，该方法可以将数组位置作为参数传递，或者简单地用空数组
    `[]` 覆盖整个购物清单数据属性。
- en: 'The expected outcome is as follows:'
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: 预期结果如下：
- en: "![Figure 1.5\uFEFF0 – Expected output of Activity 1.01](img/B18645_01_50.jpg)"
  id: totrans-1279
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5.0 – 活动 1.01 的预期输出](img/B18645_01_50.jpg)'
- en: Figure 1.50 – Expected output of Activity 1.01
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.50 – 活动 1.01 的预期输出
- en: Summary
  id: totrans-1281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to create and run a Vue project using the command
    prompt with Vite. You also learned how to create basic Vue components. Within
    these Vue components, you can scaffold templates that use Vue’s unique directives
    and HTML syntax sugar to loop over data or control DOM states with conditional
    statements. The key concepts of reactive data using data props and the `v-model`
    binding were explored and demonstrated as useful through real-life examples that
    utilized Vue methods and lifecycles.e
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用命令提示符和 Vite 创建并运行 Vue 项目。你还学习了如何创建基本的 Vue 组件。在这些 Vue 组件中，你可以构建模板，使用
    Vue 的独特指令和 HTML 语法糖来遍历数据或使用条件语句控制 DOM 状态。通过实际例子展示了使用 Vue 方法和生活周期的反应性数据的关键概念，并证明其是有用的。
- en: 'In the next chapter, we will learn about more advanced reactive data concepts
    that will build upon this first chapter: using computed props and watchers and
    fetching asynchronous data from an external source.sssssse'
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习更多高级的反应性数据概念，这些概念将建立在第一章的基础上：使用计算属性和观察者以及从外部源获取异步数据。
