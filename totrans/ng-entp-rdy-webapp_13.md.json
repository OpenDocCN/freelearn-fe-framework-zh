["```js\n    projects/ch13 \n    ```", "```js\n    npx ng serve ch13 \n    ```", "```js\n    npx ng test ch13 --watch=false \n    ```", "```js\n    npx ng e2e ch13 \n    ```", "```js\n    npx ng build ch13 --prod \n    ```", "```js\n$ docker stats\nCONTAINER ID  CPU %  MEM USAGE / LIMIT  MEM %  NET I/O  BLOCK I/O    PIDS\n27d431e289c9  0.00%  1.797MiB / 1.9GiB  0.09%  13.7kB / 285kB  0B / 0B  2 \n```", "```js\n    $ docker run --name <imageName> -d -p 8080:<internal_port>\n    <imageRepo> \n    ```", "```js\n    $ npm run docker:debug \n    ```", "```js\n    $ curl -L http://bit.ly/load-test-bash | bash -s 100 \"http://localhost:8080\" \n    ```", "```js\n    **package.json**\n    ...\n    \"config\": {\n      \"imageRepo\": \"000000000000.dkr.ecr.us-east-1.amazonaws.com/lemon-mart\",\n      ...\n    } \n    ```", "```js\n    DNS name:\n    lemon-mart-alb-1871778644.us-east-1.elb.amazonaws.com (A Record) \n    ```", "```js\n    npm i -g mrm-task-npm-aws \n    ```", "```js\n    npx mrm npm-aws \n    ```", "```js\n    **.env**\n    AWS_ACCESS_KEY_ID=your_own_key_id\n    AWS_SECRET_ACCESS_KEY=your_own_secret_key \n    ```", "```js\n    **package.json**\n      ...\n      \"config\": {\n        ...\n        \"awsRegion\": \"us-east-1\",\n        \"awsEcsCluster\": \"fargate-cluster\",\n        \"awsService\": \"lemon-mart-service\"\n      },\n    ... \n    ```", "```js\n    **package.json**\n    ...\n    \"scripts\": {\n      ...\n      \"aws:login:win\": \"cross-conf-env \n         aws ecr get-login --no-include-email --region \n         $npm_package_config_awsRegion > \n         dockerLogin.cmd && call dockerLogin.cmd && \n         del dockerLogin.cmd\",\n      \"aws:login:mac\": \"eval $(aws ecr get-login \n         --no-include-email --region $npm_package_config_awsRegion)\",\n        \"aws:login\": \"run-p -cs aws:login:win aws:login:mac\", \n    } \n    ```", "```js\n**example**\n$ npm run aws:login \ndocker login -u AWS -p eyJwYXl...3ODk1fQ== https://00000000000.dkr.ecr.us-east-1.amazonaws.com\n$ docker login -u AWS -p eyJwYXl...3ODk1fQ== https://00000000000.dkr.ecr.us-east-1.amazonaws.com\nWARNING! Using --password via the CLI is insecure. Use --password-stdin.\nLogin Succeeded \n```", "```js\n**package.json**\n...\n\"scripts\": {\n...\n\"aws:deploy\": \"cross-conf-env docker run \n   --env-file ./.env silintl/ecs-deploy\n   -c $npm_package_config_awsEcsCluster \n   -n $npm_package_config_awsService \n   -i $npm_package_config_imageRepo:latest \n   -r $npm_package_config_awsRegion --timeout 1000\", \n}\n...\nexample\n$ docker image build . -f nginx.Dockerfile \n   -t 000000000.dkr.ecr.us-east-1.amazonaws.com/lemon-mart:latest\n$ npm run docker:publish\n$ npm run aws:deploy\nUsing image name: 0000000.dkr.ecr.us-east-1.amazonaws.com/lemon-mart:latest\nCurrent task definition: arn:aws:ecs:us-east-1: 0000000:task-definition/lemon-mart-task:7\nNew task definition: arn:aws:ecs:us-east-1: 0000000:task-definition/lemon-mart-task:8\nService updated successfully, new task definition running.\nWaiting for service deployment to complete...\nService deployment successful. \n```", "```js\n**package.json**\n...\n\"scripts\": {\n  ...\n  \"aws:release\": \"run-s -cs aws:login docker:publish aws:deploy\"\n}\n... \n```", "```js\n    $ npm run docker:debug \n    ```", "```js\n    $ npm run aws:release \n    ```", "```js\n**.circleci/config.yml**\nversion: 2.1\norbs:\n  **aws-cli: circleci/aws-cli@1.0.0**\n...\njobs:\n  ...\n  **deploy:**\n **executor: aws-cli/default**\n    working_directory: ~/repo\n    steps:\n      - attach_workspace:\n          at: /tmp/workspace\n      - checkout\n      - setup_remote_docker\n      - aws-cli/setup\n      - run: npm ci\n      - run:\n          name: Restore .env files\n          command: |\n            set +H\n            DOT_ENV=AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID\\\\nAWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY\n            echo -e $DOT_ENV > .env\n      - run:\n          name: Sign Docker into AWS ECR\n          command: |\n            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/lemon-mart\n      - run:\n          name: Push it to ECR\n          command: |\n            docker load < /tmp/workspace/built-image.tar.gz\n            ECR_URI=$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/lemon-mart\n            docker image tag lemon-mart:$CIRCLE_BRANCH $ECR_URI:$CIRCLE_BRANCH\n            docker image tag $ECR_URI:$CIRCLE_BRANCH $ECR_URI:latest\n            docker image push $ECR_URI:$CIRCLE_BRANCH\n            docker image push $ECR_URI:latest      \n      - run:\n          name: Deploy\n          **command: npm run aws:deploy** \n```", "```js\n**.circleci/config.yml**\n...\nworkflows:\n  version: 2\n  build-and-deploy:\n    jobs:\n      - build\n      - deploy:\n          **context: aws**\n          requires:\n            - build \n```"]