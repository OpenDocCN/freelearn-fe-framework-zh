- en: Chapter 8. jQuery Mobile Configuration, Utilities, and JavaScript methods
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。jQuery Mobile 配置、实用工具和 JavaScript 方法
- en: In this chapter, we will look at how JavaScript can be used to further configure
    and enhance jQuery Mobile websites. So far we've made use of HTML and CSS to generate
    everything. Now we'll look at additional scripting that add additional functionality
    to your sites.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看如何使用 JavaScript 进一步配置和增强 jQuery Mobile 网站。到目前为止，我们已经使用 HTML 和 CSS
    来生成所有内容。现在我们将看看额外的脚本，为您的网站添加额外的功能。
- en: 'In this chapter, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Explain how jQuery Mobile sites can be configured via JavaScript
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释了如何通过 JavaScript 配置 jQuery Mobile 网站
- en: Discuss the various JavaScript utilities that ship with jQuery Mobile and how
    they can be used
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论了使用 jQuery Mobile 的各种 JavaScript 实用工具以及它们的使用方式
- en: Explain the APIs used to work with the enhanced jQuery Mobile form and widget
    controls
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释了用于处理增强的 jQuery Mobile 表单和小部件控件的 API
- en: Configuring jQuery Mobile
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 jQuery Mobile
- en: jQuery Mobile does many things for you — from improving page navigation to changing
    how form controls work. All of this is done in an effort to make your content
    work better in a mobile environment. There will be times, however, when you do
    not want jQuery Mobile to do something, or you perhaps simply want to slightly
    tweak how the framework acts. That's where configuration comes in.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile 对您做了许多事情 - 从改善页面导航到改变表单控件的工作方式。所有这些都是为了让您的内容在移动环境中更好地运行。然而，有时您并不希望
    jQuery Mobile 做某些事情，或者也许您只是想微调框架的行为。这就是配置的作用所在。
- en: 'To configure a jQuery Mobile site, you begin by writing code that listens for
    the `mobileinit` event. This can be listened to using a normal jQuery event handler,
    similar to the following code snippet:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置 jQuery Mobile 网站，您首先需要编写代码来监听`mobileinit`事件。这可以使用普通的 jQuery 事件处理程序来监听，类似以下代码片段：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In order for this event to be captured, you must configure it before jQuery
    Mobile is actually loaded. The simplest way to do this, and the way recommended
    by the jQuery Mobile docs, is to simply place this code in a script loaded before
    the jQuery Mobile JavaScript library. The following code snippet shows what the
    header of our files typically look like:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了捕获此事件，您必须在 jQuery Mobile 实际加载之前对其进行配置。最简单的方法，也是 jQuery Mobile 文档建议的方法，就是将此代码放在加载
    jQuery Mobile JavaScript 库之前的脚本中。以下代码片段显示了我们文件标头的典型样式：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Notice the jQuery Mobile library is the last one loaded. We can simply add
    in a new script tag before it:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，jQuery Mobile 库是最后一个加载的。我们可以简单地在其之前添加一个新的脚本标签：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Configuring jQuery Mobile is as simple as updating the `$.mobile` object. The
    following code snippet is a simple example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 jQuery Mobile 就像更新`$.mobile`对象一样简单。以下代码片段是一个简单的示例：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This object contains a set of key/value pairs for the various settings that
    can be configured. You don''t actually create it — it exists when the event handler
    is run. Another option is to make use of jQuery''s `extend()` functionality, as
    shown in the following code snippet:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象包含一组可配置的各种设置的键/值对。实际上不需要创建它 - 它在运行事件处理程序时已经存在。另一个选项是利用 jQuery 的`extend()`功能，如下面的代码片段所示：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Either form is ok and works absolutely the same. Use whichever feels more comfortable.
    Now, let''s look at the various configuration options:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 两种表单都可以，并且完全相同。可以使用您觉得更舒适的任何一种。现在，让我们看看各种配置选项：
- en: '| Settings | Use |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 设置 | 使用 |'
- en: '| --- | --- |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ns` | This is the namespace value used for data attributes. It defaults
    to nothing. You would specify a value here if you wanted to prefix the jQuery
    Mobile-recognized data attributes. So for example, if you wanted to use `data-jqm-role="page"`
    instead of `data-role="page"`, you would configure the ns value to be `jqm`. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `ns` | 这是用于数据属性的命名空间值。默认为空。如果要为 jQuery Mobile-recognized 数据属性添加前缀，则可以在此处指定值。因此，例如，如果要使用`data-jqm-role="page"`而不是`data-role="page"`，则可以将`ns`值配置为`jqm`。'
- en: '| `activeBtnClass` | This simply sets the class name used for buttons in the
    active state. The default for this value is `ui-btn-active`. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `activeBtnClass` | 这只是设置在活动状态下按钮使用的类名。默认值为`ui-btn-active`。'
- en: '| `activePageClass` | This sets the class name for pages that are currently
    being viewed. The default for this value is `ui-page-active`. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `activePageClass` | 这设置了当前正在查看的页面的类名。默认值为`ui-page-active`。'
- en: '| `ajaxEnabled` | We''ve discussed before how Ajax is used for both, page loads
    and form submissions. If you wish to disable this, set this value to `false`.
    The default, obviously, is `true`. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `ajaxEnabled` | 我们之前讨论过 Ajax 既用于页面加载，也用于表单提交。如果你希望禁用此功能，请将此值设置为 `false`。默认情况下是`true`。|'
- en: '| `allowCrossDomainPages` | A security setting that defaults to false, setting
    this to true allows for remote pages to be loaded via `$.mobile.loadPage`. This
    is normally only required for PhoneGap applications that load content from another
    server. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `allowCrossDomainPages` | 一个默认值为 false 的安全设置，将其设置为 true 允许通过 `$.mobile.loadPage`
    加载来自另一个服务器的远程页面。通常仅在需要从另一个服务器加载内容的 PhoneGap 应用程序中需要。|'
- en: '| `autoInitializePage` | Normally, jQuery Mobile will run `$.mobile.initializePage`
    on load. This displays the renders page. (At this time, this particular function
    isn''t properly documented.) If you wish to disable this default value, set `autoInitializePage`
    to `false`. You will need to run `$.mobile.initializePage` manually. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `autoInitializePage` | 通常情况下，jQuery Mobile 在加载时会运行 `$.mobile.initializePage`。这会显示渲染页面。（目前，这个特定功能并没有得到很好的文档记录。）如果你希望禁用此默认值，请将`autoInitializePage`设置为
    `false`。你需要手动运行`$.mobile.initializePage`。|'
- en: '| `defaultDialogTransition` | Specifies what transition should be used to show
    or hide dialogs. The default is `pop`. Possible values are: `fade, flip, pop,
    slide, slidedown`, and `slideup`. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `defaultDialogTransition` | 指定显示或隐藏对话框时使用的过渡效果。默认值为 `pop`。可能的值包括：`fade, flip,
    pop, slide, slidedown` 和 `slideup`。|'
- en: '| `defaultPageTransition` | Like the previous option, this setting is used
    for transitions, this time for page loads. The default is `slide` and the options
    similar to the previous option are possible. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `defaultPageTransition` | 类似于前一个选项，这个设置用于页面加载时的过渡效果。默认值为 `slide`，可能的选项与前一个选项类似。|'
- en: '| `gradea` | Used to determine what actually constitutes a "good" browser.
    This is handled by jQuery Mobile but if you want to overrule the framework, or
    define some other condition that must be met, you would provide a function here
    that returns a Boolean (true or false). |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `gradea` | 用于确定什么才是一个“好”浏览器。这由 jQuery Mobile 处理，但如果你想否决框架，或定义必须满足的其他条件，你可以在这里提供一个返回布尔值（true
    或 false）的函数。|'
- en: '| `hashListeningEnabled` | Refers to the ability to listen to changes in the
    `location.hash` property of the browser. jQuery Mobile handles this normally,
    but if the value is set to `false`, you can write your own code to respond to
    these changes. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `hashListeningEnabled` | 指的是监听浏览器的 `location.hash` 属性的能力。jQuery Mobile 通常会处理这个，但如果将值设置为
    `false`，你可以编写自己的代码来响应这些变化。|'
- en: '| `ignoreContentEnabled` | Normally jQuery Mobile automatically enhances everything
    it can. You can disable this in some cases at a control level, but you can also
    tell jQuery Mobile to ignore everything within a particular container by adding
    `data-enhance=true`. If you make use of this feature, then your configuration
    must be set `ignoreContentEnabled` to `true`. This tells jQuery Mobile to look
    for, and respect, that particular flag. This is set to `false` by default and
    allows jQuery Mobile to do its magic quite a bit faster. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `ignoreContentEnabled` | 通常情况下，jQuery Mobile 会自动增强任何可能的东西。你可以在某些情况下在控件级别禁用该功能，但也可以通过添加
    `data-enhance=true` 告诉 jQuery Mobile 忽略特定容器内的所有内容。如果你使用了这个功能，那么你的配置必须设置 `ignoreContentEnabled`
    为 `true`。这告诉 jQuery Mobile 寻找并遵守该特定标志。默认情况下设置为 `false`，可以让 jQuery Mobile 更快地完成它的工作。|'
- en: '| `linkBindingEnabled` | jQuery Mobile typically listens to all link clicks.
    If you wish to disable this globally, you can do so with this setting. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `linkBindingEnabled` | jQuery Mobile 通常会监听所有链接点击。如果你希望全局禁用这个功能，可以通过这个设置来实现。|'
- en: '| `loadingMessage` | This specifies the text used when pages are loading. This
    is normally "loading", but you could use custom code here to check the user''s
    locale and use a local specific version. However, the message is typically hidden.
    See the next setting for more information. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `loadingMessage` | 这指定了页面加载时使用的文本。通常是“loading”，但你可能会在此处使用自定义代码来检查用户的语言环境，并使用特定的本地化版本。然而，消息通常是隐藏的。有关更多信息，请参阅下一个设置。|'
- en: '| `loadingMessageTextVisible` | When pages are loaded by jQuery Mobile, only
    a loading graphic is used. If you wish a message to be displayed as well, set
    this value to `true`. The default is `false`. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `loadingMessageTextVisible` | 当页面由 jQuery Mobile 加载时，只会使用一个加载图形。如果你希望显示一条消息，将这个值设置为
    `true`。默认值为 `false`。|'
- en: '| `loadingMessageTheme` | The theme to use for the page loading dialog. The
    default is `a`. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `loadingMessageTheme` | 用于页面加载对话框的主题。默认值为 `a`。|'
- en: '| `minScrollBack` | jQuery Mobile will attempt to remember your scrolled position
    in a page when you return to it. This can be useful on a large page that the user
    returns to after visiting another page. By default, the scroll will be remembered
    if it is more than `150`, the default. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `minScrollBack` | 当用户返回到页面时，jQuery Mobile 将尝试记住您在页面中滚动的位置。这在用户在访问另一个页面后返回到的大页面上可能很有用。默认情况下，如果滚动超过默认值
    `150`，则会记住滚动位置。 |'
- en: '| `pageLoadErrorMssage` | This is a message shown to users if an error occurs
    when loading a page. The default is **Error Loading Page**, but could be changed
    for localization reasons. (Or any reason really.) |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `pageLoadErrorMssage` | 如果加载页面时发生错误，则向用户显示的消息。默认为 **Error Loading Page**，但出于本地化原因（或其他任何原因），可能会更改。
    |'
- en: '| `pageLoadErrorMessageTheme` | The theme to use when a page load error dialog
    is displayed. The default is `e`. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `pageLoadErrorMessageTheme` | 显示页面加载错误对话框时要使用的主题。默认值为 `e`。 |'
- en: '| `pushStateEnabled` | Tells jQuery Mobile to use the HTML5 `pushState` functionality
    instead of hash based changes for page navigation. This defaults to `true`. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `pushStateEnabled` | 告诉 jQuery Mobile 使用 HTML5 `pushState` 功能而不是基于哈希的方式进行页面导航。默认值为
    `true`。 |'
- en: '| `subPageUrlKey` | jQuery Mobile supports multiple pages within one file.
    In order to make these "virtual" pages bookmarkable, jQuery Mobile will append
    a value to the URL containing the prefix ui-page. So for example, `ui-page=yourpage`.
    This setting lets you customize the prefix. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `subPageUrlKey` | jQuery Mobile 支持一个文件中的多个页面。为了使这些“虚拟”页面可书签化，jQuery Mobile
    将在 URL 中追加一个值，该值包含前缀 `ui-page`。例如，`ui-page=yourpage`。此设置允许您自定义前缀。 |'
- en: 'That''s quite a few options, but typically you will only need to configure
    one or two of these settings. Let''s look at a simple example where a few of these
    are put to use. `Listing 8-1` is the home page for the application. Note the use
    of the additional script tag to load in our configuration:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相当多的选项，但通常您只需要配置其中一个或两个设置。让我们看一个简单的示例，其中使用了其中几个设置。`Listing 8-1` 是应用程序的主页。请注意，使用额外的脚本标签加载我们的配置：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The file contains two pages, and links to another, `test2.html`. That page simply
    provides a link back so will not be included in the text. Now let's look at `config.js:`
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 文件包含两个页面，并链接到另一个 `test2.html`。该页面只提供一个返回链接，因此不会包含在文本中。现在让我们看看 `config.js:`
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In `config.js`, two settings are modified - the default page transition and
    the loading message for pages.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `config.js` 中，修改了两个设置 - 默认页面转换和页面加载消息。
- en: In an earlier chapter, we discussed forms and how jQuery Mobile automatically
    enhances controls. While you can suppress this enhancement on a control within
    your HTML, you can also tell jQuery Mobile a list of controls never to enhance.
    To set this list, specify a value for `$.mobile.page.prototype.options.keepnative`.
    The value should be a list of selectors. Any field that matches one of the selectors
    will *not* be enhanced.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们讨论了表单以及 jQuery Mobile 如何自动增强控件。虽然您可以在 HTML 中禁止对控件的此增强，但还可以告诉 jQuery
    Mobile 一系列永远不要增强的控件。要设置此列表，请为 `$.mobile.page.prototype.options.keepnative` 指定一个值。该值应为一个选择器列表。与其中一个选择器匹配的任何字段都将*不会*被增强。
- en: Using jQuery Mobile utilities
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 jQuery Mobile 实用程序
- en: Now that we've covered jQuery Mobile configuration, let's take a look at the
    utilities available to your applications. These are utilities provided by the
    framework and can be used in any application. You may not need them all (or any)
    on your site, but knowing they are there can help save you time in the future.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了 jQuery Mobile 的配置，请让我们看一下可用于您的应用程序的实用程序。这些是框架提供的实用程序，可在任何应用程序中使用。您可能不需要它们（或其中任何一个）在您的网站上，但知道它们存在可以帮助您节省将来的时间。
- en: Page methods and utilities
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面方法和实用程序
- en: 'Let''s begin looking at methods and utilities related to pages and navigation
    between pages:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始查看与页面和页面之间导航相关的方法和实用程序：
- en: '`$.mobile.activePage:` This property is a reference to the current page.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.mobile.activePage:` 此属性是对当前页面的引用。'
- en: '`$.mobile.changePage(page,options):` This method is used to change to another
    page. The first argument, page, can be either a string (the URL), or a jQuery
    DOM object. The `options` argument is an optional object of key/value pairs. These
    options are:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.mobile.changePage(page,options):` 此方法用于切换到另一个页面。第一个参数 page 可以是一个字符串（URL），也可以是
    jQuery DOM 对象。`options` 参数是一个可选的键/值对对象。这些选项包括：'
- en: '`allowSamePageTransition:` Normally jQuery Mobile will not allow you to transition
    to the same page, but if set to `false`, this will be allowed.'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allowSamePageTransition:` 通常情况下，jQuery Mobile 不会允许您转换到相同的页面，但如果设置为 `false`，则会允许这样做。'
- en: '`changeHash:` Determines if the URL should change.'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`changeHash:` 确定 URL 是否应该更改。'
- en: '`data:` Either a string or an object of values passed to the next page.'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data:` 传递给下一页的值的字符串或对象。'
- en: '`data-url:` Value used for the URL in the browser. This is normally set by
    the page the user is being sent to. You can override this here.'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-url:` 用于浏览器中的 URL 的值。通常由用户要发送到的页面设置。你可以在这里覆盖它。'
- en: '`pageContainer:` jQuery Mobile will place pages within a DOM item that acts
    as a *bag* for all the pages. You can bypass this automatic collection and use
    another item in the DOM instead.'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pageContainer:` jQuery Mobile 将页面放置在作为所有页面的 *包* 的 DOM 项中。你可以绕过此自动收集并使用 DOM
    中的另一个项。'
- en: '`reloadPage:` If a page already exists in the browser, jQuery Mobile will fetch
    it from memory. Setting this to `true` will force jQuery Mobile to reload the
    page.'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reloadPage:` 如果页面已经存在于浏览器中，jQuery Mobile 将从内存中获取它。将此设置为 `true` 将强制 jQuery
    Mobile 重新加载页面。'
- en: '`role:` jQuery Mobile will typically look for the `data-role` attribute of
    the page loaded. To specify another role, set this option.'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`role:` jQuery Mobile 通常会查找加载的页面的 `data-role` 属性。要指定另一个角色，请设置此选项。'
- en: '`showLoadMsg:` Normally jQuery Mobile shows a loading message when a page is
    fetched. You can disable this by setting this value to `false`.'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showLoadMsg:` 通常当页面被获取时，jQuery Mobile 会显示一个加载消息。你可以通过将此值设置为 `false` 来禁用此功能。'
- en: '`transition:` What transition to use. Remember this can be configured at a
    global level as well.'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transition:` 使用什么过渡效果。请记住，这可以在全局级别进行配置。'
- en: '`type:` We mentioned earlier that jQuery Mobile loads in new pages via an Ajax-based
    request. The `type` option allows you to specify the HTTP method used to load
    the page. The default is `get`.'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type:` 我们之前提到过，jQuery Mobile 通过基于 Ajax 的请求加载新页面。`type` 选项允许你指定用于加载页面的 HTTP
    方法。默认为 `get`。'
- en: '`$.mobile.loadPage(page,options):` This is a lower-level function used when
    `$.mobile.changePage` is passed a string URL to load. Its first argument is the
    same as `$.mobile.changePage`, but its options are limited to `data, loadMsgDelay,
    pageContainer, reloadPage, role`, and `type`. Those options are the same as those
    listed in the previous option, except for `loadMsgDelay`. This value gives time
    for the framework to try to fetch a page via the cache first.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.mobile.loadPage(page,options):` 这是一个更低级别的函数，当 `$.mobile.changePage` 被传递一个字符串
    URL 来加载时使用。它的第一个参数与 `$.mobile.changePage` 相同，但其选项限于 `data, loadMsgDelay, pageContainer,
    reloadPage, role` 和 `type`。这些选项与前一个选项中列出的相同，除了 `loadMsgDelay`。此值为框架尝试首先通过缓存获取页面提供时间。'
- en: '`$.mobile.showPageLoadingMsg()` and `$.mobile.hidePageLoadingMsg():` Either
    shows or hides the page loading message. The `showPageLoadingMsg` function allows
    for custom text, theming, and an icon only view.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.mobile.showPageLoadingMsg()` 和 `$.mobile.hidePageLoadingMsg():` 显示或隐藏页面加载消息。`showPageLoadingMsg`
    函数允许自定义文本、主题和仅图标视图。'
- en: 'In `listing 8-2`, a simple example of `$.mobile.changePage` is demonstrated:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `listing 8-2` 中，演示了 `$.mobile.changePage` 的一个简单示例：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The page simply contains one button. At the bottom of the file is a jQuery event
    listener for that button. When clicked, `$.mobile.changePage` is used to load
    `test2.html` while making use of the flip transition.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 页面只包含一个按钮。文件底部是一个 jQuery 事件监听器，用于监听该按钮。当点击时，使用 `$.mobile.changePage` 加载 `test2.html`，同时使用翻转过渡效果。
- en: Path and URL related utilities
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与路径和 URL 相关的实用程序
- en: 'These utilities are related to the current location, URL, or path of the application:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些实用程序与应用程序的当前位置、URL 或路径相关：
- en: '`$.mobile.path.isAbsoluteUrl` and `$.mobile.path.isRelativeUrl:` These two
    functions look at a URL and allow you to check if they are either a full, or absolute
    URL, or a relative URL.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.mobile.path.isAbsoluteUrl` 和 `$.mobile.path.isRelativeUrl:` 这两个函数查看一个 URL
    并允许你检查它们是完整的、绝对的 URL 还是相对的 URL。'
- en: '`$.mobile.path.isSameDomain(first url, second url):` Allows you to compare
    two URLs and determine if they are in the same domain. This method will notice
    http versus https and correctly consider these separate domains.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.mobile.path.isSameDomain(first url, second url):` 允许你比较两个 URL，并确定它们是否在同一个域中。此方法将注意到
    http 与 https 并正确地将它们视为不同的域。'
- en: '`$.mobile.path.makePathAbsolute(relative path, absolute path):` Takes a relative
    path, compares it to an absolute path, and returns an absolute path version of
    the relative path.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.mobile.path.makePathAbsolute(relative path, absolute path):` 获取一个相对路径，将其与一个绝对路径进行比较，并返回相对路径的绝对路径版本。'
- en: '`$.mobile.path.makeUrlAbsolute(relative url, absolute url):` A slightly different
    form of the previous function, this utility works with absolute URLs instead.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.mobile.path.makeUrlAbsolute(relative url, absolute url):` 这个工具与前一个函数稍有不同，它处理绝对
    URL。'
- en: '`$.mobile.path.parseUrl(url):` URLs are made up of many different parts. This
    function will take either a full or relative URL and return an object containing
    the following properties: hash, host, hostname, href, pathname, port, protocol,
    and search. Along with these fairly typical URL properties, the function also
    returns the following properties:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.mobile.path.parseUrl(url):` URL 由许多不同的部分组成。此函数将接受完整或相对 URL，并返回一个包含以下属性的对象：hash、host、hostname、href、pathname、port、protocol
    和 search。除了这些相当典型的 URL 属性外，该函数还返回以下属性：'
- en: '`authority:` Contains the username, password, and host properties.'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`authority:` 包含用户名、密码和主机属性。'
- en: '`directory:` Given the path portion of a URL, this will return just the directory.'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`directory:` 给定 URL 的路径部分，这将只返回目录。'
- en: '`domain:` Contains the authority and protocol portions of the URL.'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`domain:` 包含 URL 的授权和协议部分。'
- en: '`filename:` Returns just the filename portion of the URL.'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filename:` 返回 URL 的文件名部分。'
- en: '`hrefNoHash:` Given a URL with a hash, this returns the href minus the hash.'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hrefNoHash:` 给定带有哈希的 URL，返回除哈希外的 href。'
- en: '`hrefNoSearch:` Given a URL with a search property, this returns the href minus
    the search value.'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hrefNoSearch:` 给定带有搜索属性的 URL，返回除搜索值外的 href。'
- en: '`username` and `password:` Contains the username and password if present in
    the URL.'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`username` 和 `password:` 包含 URL 中的用户名和密码（如果有）。'
- en: '`Listing 8-3` is a *tester* application. It contains form fields allowing you
    to test all of the methods previously discussed:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`Listing 8-3` 是一个 *测试* 应用程序。它包含表单字段，允许您测试先前讨论过的所有方法：'
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`Listing 9-4` is a bit long, but it''s really pretty simple. Each `fieldcontain`
    block consists of one particular test of the path methods and utilities. In the
    bottom half of the template you can see we''ve made use of `keyup` event listeners
    to monitor changes to these fields and run each test. You can use this template
    to see how these methods react based on different inputs. The following screenshot
    shows an example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`Listing 9-4` 有点长，但实际上非常简单。每个 `fieldcontain` 块都由路径方法和实用工具的一个特定测试组成。在模板的下半部分，您可以看到我们已经使用
    `keyup` 事件侦听器来监视这些字段的更改并运行每个测试。您可以使用此模板来查看这些方法如何根据不同的输入而反应。以下截图显示了一个示例：'
- en: '![Path and URL related utilities](img/7263_08_04.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![路径和 URL 相关的实用工具](img/7263_08_04.jpg)'
- en: Miscellaneous utilities
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 杂项实用程序
- en: 'There are a few more utilities you may want to know about:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些您可能想了解的其他实用程序：
- en: '`$.mobile.fixedToolbars.hide()` and `$.mobile.fixedToolbars.show():` Either
    show or hide fixed toolbars. Both utilities can take a Boolean argument that specifies
    if the hide (or show) action takes place immediately. If not specified (or false
    is passed) then the toolbars will animate as they hide or show.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.mobile.fixedToolbars.hide()` 和 `$.mobile.fixedToolbars.show():` 显示或隐藏固定工具栏。这两个实用程序都可以接受一个布尔参数，指定隐藏（或显示）动作是否立即发生。如果未指定（或传递
    false），则工具栏将在隐藏或显示时进行动画处理。'
- en: '`$.mobile.silentScroll(position):` Scrolls the page to a certain y-position.
    The term `silent` here refers to the fact that this method will *not* fire any
    code listening for scroll events.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.mobile.silentScroll(position):` 将页面滚动到特定的 y 位置。这里的 `silent` 一词指的是此方法*不*会触发任何监听滚动事件的代码。'
- en: '`jqmData()` and `jqmRemoveData():` Due to jQuery Mobile''s heavy use of data
    attributes for various features, "regular" usage of jQuery''s data functions should
    be replaced with these instead. They handle recognizing any update to the default
    namespace as well.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jqmData()` 和 `jqmRemoveData():` 由于 jQuery Mobile 大量使用数据属性进行各种功能，因此应该用这些替代
    jQuery 的数据函数的“常规”用法。它们处理识别对默认命名空间的任何更新。'
- en: jQuery widget and form utilities
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery 小部件和表单实用工具
- en: 'We''ve mentioned, numerous times, how jQuery Mobile automatically updates various
    items and supports things like lists and collapsible content. One of the things
    you may run into, however, is trying to get jQuery Mobile to work with content
    loaded *after* the page is rendered. So, for example, imagine a list view that
    has data added to it via some JavaScript code. `Listing 8-4` demonstrates a simple
    example of this. It has a `listview` with a few items in it, but also a form by
    which a person could add new entries:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经多次提到，jQuery Mobile 会自动更新各种项目并支持诸如列表和可折叠内容之类的功能。但是，您可能会遇到的一件事是尝试使 jQuery
    Mobile 与页面渲染*后*加载的内容一起工作。因此，例如，想象一下列表视图，通过一些 JavaScript 代码向其添加数据。`Listing 8-4`
    展示了一个简单的示例。它有一个 `listview`，其中包含一些项目，但也有一个人可以通过其中一个表单添加新条目的表单：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When initially loaded, notice everything seems fine:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最初加载时，请注意一切似乎都很正常：
- en: '![jQuery widget and form utilities](img/7263_08_01.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![jQuery 小部件和表单实用工具](img/7263_08_01.jpg)'
- en: 'However, the following screenshot shows what happens when an item is added
    to the end of the list:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，以下屏幕截图显示了将项目添加到列表末尾时发生的情况：
- en: '![jQuery widget and form utilities](img/7263_08_02.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![jQuery小部件和表单实用程序](img/7263_08_02.jpg)'
- en: 'As you can see, the new item was indeed added to the end of the list, but it
    wasn''t drawn correctly. This brings up a critical point. jQuery Mobile parses
    your code for data attributes and checks for form fields once. After it has done
    so, it considers its work done. Luckily, there is a standard way for these UI
    items to be updated. For our `listview` it is a simple matter of calling the `listview`
    method on the list itself. The `listview` method can be used to turn a new list
    into a `listview`, or to refresh an existing `listview`. To refresh our `listview`
    , we''d simply modify the code, as shown in the following code snippet:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，新项目确实被添加到了列表的末尾，但是没有正确地绘制。这提出了一个关键问题。jQuery Mobile仅对数据属性解析您的代码并一次性检查表单字段。在这样做之后，它认为自己的工作完成了。幸运的是，这些UI项更新有一种标准方法。对于我们的`listview`，只需在列表本身上调用`listview`方法就可以了。`listview`方法可用于将新列表转换为`listview`，或刷新现有的`listview`。要刷新我们的`listview`，我们只需修改代码，如下面的代码片段所示：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can find the previous code snippet in `test6.html`. The following screenshot
    shows how the application handles the new item:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`test6.html`中找到前一个代码片段。以下屏幕截图显示了应用程序如何处理新项目：
- en: '![jQuery widget and form utilities](img/7263_08_03.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![jQuery小部件和表单实用程序](img/7263_08_03.jpg)'
- en: That `listview` method could also be used for completely new lists. Consider
    the following code snippet `listing 8-5:`
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 那个`listview`方法也可以用于全新的列表。考虑以下代码片段`清单8-5：`
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this example, a completely new list is appended to the `div` tag. Notice
    that we still include the proper `data-role`. But, this by itself, is not enough.
    We follow up the HTML insertion with a call to the `listview` method to enhance
    the list just added.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，一个全新的列表被附加到`div`标签上。请注意，我们仍然包含适当的`data-role`。但是，仅此而已是不够的。我们在HTML插入后紧跟着调用`listview`方法来增强刚添加的列表。
- en: Similar APIs exist for other fields. For example, new buttons added to a page
    can be enhanced by calling the `button()` method on them. In general, assume any
    changes to enhanced controls will need to be updated via their respective JavaScript
    APIs.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他字段也存在类似的API。例如，添加到页面的新按钮可以通过在其上调用`button()`方法来增强。一般来说，假设对增强控件的任何更改都需要通过它们各自的JavaScript
    API进行更新。
- en: Summary
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, we (finally!) broke out some JavaScript. We looked at how you
    can configure various jQuery Mobile settings, what utilities exist, and how to
    handle post-rendered updates to enhanced controls.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们（终于！）深入了解了一些JavaScript。我们看了一下您如何配置各种jQuery Mobile设置，存在哪些实用程序，以及如何处理对增强控件的后渲染更新。
- en: In the next chapter, we'll continue working with JavaScript and look at the
    various events your code can listen to.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续使用JavaScript，并查看您的代码可以监听的各种事件。
