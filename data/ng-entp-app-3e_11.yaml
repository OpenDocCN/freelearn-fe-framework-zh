- en: Appendix A
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A
- en: Setting Up Your Development Environment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的开发环境
- en: Sharing a consistent development environment between you and your team members
    is important. Consistency helps to avoid many IT-related issues, including ongoing
    maintenance, licensing, and upgrade costs. Further, you want to ensure the entire
    team has the same development experience. This way, if a team member runs into
    a configuration issue, other team members can help resolve the issue. Creating
    a frustration-free and efficient onboarding experience for a new team member is
    also essential.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在您和团队成员之间共享一致的开发环境非常重要。一致性有助于避免许多与 IT 相关的问题，包括持续维护、许可和升级成本。此外，您还希望确保整个团队拥有相同的开发体验。这样，如果团队成员遇到配置问题，其他团队成员可以协助解决问题。为新团队成员创建一个无烦恼且高效的入职体验也是至关重要的。
- en: Easy and well-documented onboarding procedures ensure that new team members
    can quickly become productive and be integrated into the team. On an ongoing basis,
    achieving a consistent and minimal development environment remains challenging
    for teams. Automation can help deliver and maintain a consistent environment across
    developer machines.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 简单且文档齐全的入职流程确保新团队成员可以快速变得高效并融入团队。在持续的过程中，保持一致且最小化的开发环境对团队来说仍然是一个挑战。自动化可以帮助在开发机器上提供和维护一致的环境。
- en: The recommended operating systems are Windows 10 or Windows 11 Pro with PowerShell
    v7+ and Developer Mode enabled or macOS Ventura or Sonoma with Terminal and XCode
    developer tools installed. It is recommended to use the Chromium-based Google
    Chrome or Microsoft Edge as a web browser because they offer almost identical
    developer experience.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐的操作系统是 Windows 10 或 Windows 11 Pro，并启用 PowerShell v7+ 和开发者模式，或者 macOS Ventura
    或 Sonoma，并安装了终端和 XCode 开发者工具。建议使用基于 Chromium 的 Google Chrome 或 Microsoft Edge
    作为网络浏览器，因为它们提供了几乎相同的开发者体验。
- en: Most of the suggested software in this book are cross-platform tools, so they
    also work on Linux systems. However, your experience may vary with these systems.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书建议的大多数软件都是跨平台工具，因此它们也适用于 Linux 系统。然而，您在使用这些系统时的体验可能会有所不同。
- en: 'This appendix covers:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录涵盖：
- en: Recommended web development tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推荐的 Web 开发工具
- en: CLI package managers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行包管理器
- en: Install automation for Windows and macOS
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Windows 和 macOS 安装自动化
- en: Project setup with the Angular CLI
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Angular CLI 进行项目设置
- en: Optimizing VS Code for Angular
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化 VS Code 以支持 Angular
- en: Let’s start by reviewing the recommended web development tools and how you can
    quickly install these tools via automation scripts. Later in the appendix, we
    will go over how you can create such scripts.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从回顾推荐的 Web 开发工具以及如何通过自动化脚本来快速安装这些工具开始。在附录的后面部分，我们将介绍如何创建这样的脚本。
- en: Recommended web development tools
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐的 Web 开发工具
- en: 'This section covers the recommended for developing to develop a web application,
    as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本节涵盖了推荐用于开发 Web 应用程序的工具，如下所示：
- en: '| **Tool** | **Description** | **URL** |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| **工具** | **描述** | **URL** |'
- en: '| Git | Version control system | [https://git-scm.com](https://git-scm.com)
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| Git | 版本控制系统 | [https://git-scm.com](https://git-scm.com) |'
- en: '| GitHub Desktop | **Graphical User Interface** (**GUI**) to run Git commands
    and interact with GitHub | [https://desktop.github.com](https://desktop.github.com)
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| GitHub Desktop | 运行 Git 命令并与 GitHub 交互的**图形用户界面**（**GUI**） | [https://desktop.github.com](https://desktop.github.com)
    |'
- en: '| Node.js | Cross-platform JavaScript runtime environment | [https://nodejs.org](https://nodejs.org)
    |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| Node.js | 跨平台 JavaScript 运行时环境 | [https://nodejs.org](https://nodejs.org)
    |'
- en: '| Visual Studio Code | Cross-platform **Integrated Development Environment**
    (**IDE**) | [https://code.visualstudio.com](https://code.visualstudio.com) |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| Visual Studio Code | 跨平台**集成开发环境**（**IDE**） | [https://code.visualstudio.com](https://code.visualstudio.com)
    |'
- en: '| Docker Desktop | Lightweight container virtualization platform | [https://www.docker.com/products/docker-desktop](https://www.docker.com/products/docker-desktop)
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| Docker Desktop | 轻量级容器虚拟化平台 | [https://www.docker.com/products/docker-desktop](https://www.docker.com/products/docker-desktop)
    |'
- en: 'Table A.1: Tools needed for web development'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 表 A.1：Web 开发所需的工具
- en: To automatically install all the web development tools required for this book,
    execute the following commands for your OS to configure your environment.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要自动安装本书所需的全部 Web 开发工具，请在您的操作系统上执行以下命令以配置您的环境。
- en: 'On Windows PowerShell, execute:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows PowerShell 中执行：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On macOS Terminal, execute:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 终端中执行：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For more information, refer to [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参阅 [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup)。
- en: The macOS script installs Node version 20, which is the **Long-term Support**
    (**LTS**) version at the time of publishing. To ensure you always have the latest
    LTS installed, the script installs `n`, a Node version manager. Using `n`, you
    can easily switch between different versions of Node.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: macOS 脚本安装了 Node 版本 20，这是发布时的 **长期支持**（**LTS**）版本。为了确保您始终安装了最新的 LTS 版本，脚本安装了
    `n`，一个 Node 版本管理器。使用 `n`，您可以轻松地在不同的 Node 版本之间切换。
- en: Once you’ve installed your IDE, you’re ready to start development. In the next
    section, you’ll learn about CLI-based package managers. You’ll see that using
    CLI tools is superior to dealing with individual installers. Automating CLI tools
    is much easier, making setup and maintenance tasks repeatable and fast.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您安装了您的 IDE，您就可以开始开发了。在下一节中，您将了解基于 CLI 的包管理器。您会发现使用 CLI 工具比处理单个安装程序要好。自动化 CLI
    工具要容易得多，使得设置和维护任务可重复且快速。
- en: CLI package managers
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CLI 包管理器
- en: Installing software through a **Graphical User Interface** (**GUI**) is slow
    and challenging to automate. As a full-stack developer, whether a Windows or a
    Mac user, you must rely on **Command-Line Interface** (**CLI**) package managers
    to install and configure the software you depend on efficiently.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 **图形用户界面**（**GUI**）安装软件速度慢且难以自动化。作为一名全栈开发者，无论是 Windows 还是 Mac 用户，您必须依赖 **命令行界面**（**CLI**）包管理器来高效地安装和配置您依赖的软件。
- en: Anything that can be expressed as a CLI command can also be automated.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可以用 CLI 命令表达的内容也可以自动化。
- en: Installing Chocolatey for Windows
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Windows 的 Chocolatey
- en: 'Chocolatey is a CLI-based package manager for Windows that can be used for
    automated software installation. To install Chocolatey on Windows, you need to
    run an elevated command shell:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Chocolatey 是一个基于 CLI 的 Windows 包管理器，可用于自动化软件安装。要在 Windows 上安装 Chocolatey，您需要运行提升的命令壳：
- en: Launch the **Start** menu.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **开始** 菜单。
- en: Start typing in **PowerShell**.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **PowerShell** 中开始输入。
- en: You should see **Windows PowerShell Desktop App** as a search result.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到 **Windows PowerShell 桌面应用** 作为搜索结果。
- en: Right-click on **Windows PowerShell** and select **Run as Administrator**.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 **Windows PowerShell** 并选择 **以管理员身份运行**。
- en: This triggers a **User Account Control** (**UAC**) warning; select **Yes** to
    continue.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这会触发一个 **用户账户控制**（**UAC**）警告；选择 **是** 以继续。
- en: 'Execute the install command found at [https://chocolatey.org/install](https://chocolatey.org/install)
    in **PowerShell** to install the Chocolatey package manager:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **PowerShell** 中执行 [https://chocolatey.org/install](https://chocolatey.org/install)
    中的安装命令以安装 Chocolatey 包管理器：
- en: '[PRE2]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Verify your Chocolatey installation by executing `choco`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行 `choco` 验证您的 Chocolatey 安装。
- en: You should see a similar output to the one shown in the following screenshot:![A
    screenshot of a computer  Description automatically generated](img/B20960_11_01.png)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下截图所示的类似输出：![计算机的截图  自动生成的描述](img/B20960_11_01.png)
- en: 'Figure A.1: Successful installation of Chocolatey'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 A.1：Chocolatey 成功安装
- en: All subsequent Chocolatey commands must also be executed from an elevated command
    shell. Alternatively, it is possible to install Chocolatey in a non-administrator
    setting that doesn’t require an elevated command shell. However, this results
    in a non-standard and less secure development environment, and certain applications
    installed through the tool may still require elevation.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 所有后续的 Chocolatey 命令也必须从提升的命令壳中执行。或者，您可以在不需要提升命令壳的非管理员设置中安装 Chocolatey。然而，这会导致一个非标准且不太安全的开发环境，并且通过此工具安装的某些应用程序可能仍然需要提升权限。
- en: WinGet is the Windows Package Manager that is provided by Microsoft. You can
    learn more about WinGet at [https://github.com/microsoft/winget-cli/](https://github.com/microsoft/winget-cli/)
    or from the Microsoft Store.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: WinGet 是由 Microsoft 提供的 Windows 包管理器。您可以在 [https://github.com/microsoft/winget-cli/](https://github.com/microsoft/winget-cli/)
    或 Microsoft Store 中了解更多关于 WinGet 的信息。
- en: I prefer Chocolatey over WinGet, because it offers better resilience when the
    script encounters an unexpected configuration. For more information on Chocolatey,
    refer to [https://chocolatey.org/install](https://chocolatey.org/install).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我更喜欢 Chocolatey 而不是 WinGet，因为当脚本遇到意外的配置时，它提供了更好的弹性。有关 Chocolatey 的更多信息，请参阅 [https://chocolatey.org/install](https://chocolatey.org/install)。
- en: Installing Homebrew for macOS
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 macOS 的 Homebrew
- en: 'Homebrew is a CLI-based package manager for macOS that can be used for automated
    software installation. To install Homebrew on macOS, you need to run a command
    shell:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Homebrew 是一个基于 CLI 的 macOS 软件包管理器，可用于自动化软件安装。要在 macOS 上安装 Homebrew，您需要运行一个命令行：
- en: Launch **Spotlight Search** with ![](img/B20960_11_001.png) + *Space*.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 ![](img/B20960_11_001.png) + *Space* 启动 **Spotlight 搜索**。
- en: Type in `terminal`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `终端`。
- en: 'Execute the following command in Terminal to install the Homebrew package manager:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中执行以下命令以安装 Homebrew 软件包管理器：
- en: '[PRE3]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Verify your Homebrew installation by executing `brew`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行 `brew` 验证您的 Homebrew 安装。
- en: You should see a similar output to the following:![](img/B20960_11_02.png)
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下类似的输出！[](img/B20960_11_02.png)
- en: 'Figure A.2: Successful installation of Homebrew'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 A.2：Homebrew 成功安装
- en: 'To enable access to additional software, execute the following command:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启用对额外软件的访问，请执行以下命令：
- en: '[PRE4]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Homebrew Cask extends Homebrew and brings its elegance, simplicity, and speed
    to the installation and management of GUI macOS applications such as Visual Studio
    Code and Google Chrome. Read more about it at [https://github.com/Homebrew/homebrew-cask](https://github.com/Homebrew/homebrew-cask).
    On macOS, if you run into permissions issues while installing brew packages related
    to chown’ing `/usr/local`, you need to execute the `sudo chown -R $(whoami)`
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Homebrew Cask 扩展了 Homebrew，将它的优雅、简洁和速度带到了 GUI macOS 应用程序的安装和管理中，如 Visual Studio
    Code 和 Google Chrome。更多关于它的信息请查看 [https://github.com/Homebrew/homebrew-cask](https://github.com/Homebrew/homebrew-cask)。在
    macOS 上，如果您在安装与 chown’ing `/usr/local` 相关的 brew 软件包时遇到权限问题，您需要执行 `sudo chown -R
    $(whoami)`。
- en: '`$(brew --prefix)/*` command. This command reinstates user-level ownership
    to `brew` packages, which is more secure than broad superuser`/su`-level access.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(brew --prefix)/*` 命令。此命令将用户级别的所有权重新分配给 `brew` 软件包，这比广泛的超级用户 `/su` 级别访问更安全。'
- en: For more information, check out [https://brew.sh/](https://brew.sh/).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请查看 [https://brew.sh/](https://brew.sh/)。
- en: Install automation for Windows and macOS
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Windows 和 macOS 的自动化
- en: Remember, *anything that can be expressed as a CLI command can also be automated*.
    Throughout the setup process, we ensured that every tool being used was set up
    and its functionality was verifiable through a CLI command. This means we can
    easily create a PowerShell or Bash script to string these commands together and
    ease setting up and verifying new environments.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，*任何可以用 CLI 命令表达的内容都可以自动化*。在整个设置过程中，我们确保每个正在使用的工具都已设置好，并且可以通过 CLI 命令验证其功能。这意味着我们可以轻松地创建一个
    PowerShell 或 Bash 脚本来将这些命令串联起来，并简化设置和验证新环境的过程。
- en: Let’s implement rudimentary – but effective scripts – to help set up your development
    environment.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现一些基本但有效的脚本，以帮助设置您的开发环境。
- en: PowerShell script
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PowerShell 脚本
- en: 'For Windows-based development environments, you need to create a PowerShell
    script:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于 Windows 的开发环境，您需要创建一个 PowerShell 脚本：
- en: Create a file named `setup-windows-dev-env.ps1`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `setup-windows-dev-env.ps1` 的文件。
- en: 'Insert the following text, also available at [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup),
    in the file:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中插入以下文本，该文本也可在 [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup)
    找到：
- en: '[PRE5]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To execute the script, run:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行脚本，请运行：
- en: '[PRE6]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Alternatively, you can install and execute the script directly from the PowerShell
    Gallery, located at [https://www.powershellgallery.com](https://www.powershellgallery.com),
    by executing the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以直接从 PowerShell Gallery 安装并执行脚本，PowerShell Gallery 的网址为 [https://www.powershellgallery.com](https://www.powershellgallery.com)，通过执行以下命令：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By executing this script, you have successfully set up your development environment
    on Windows.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行此脚本，您已成功在 Windows 上设置开发环境。
- en: If you’re interested in publishing your own scripts to the PowerShell Gallery
    or generally interested in advancing your PowerShell skills, I suggest you install
    PowerShell Core, a multi-platform version of PowerShell, from [https://github.com/PowerShell/PowerShell](https://github.com/PowerShell/PowerShell).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣将您自己的脚本发布到 PowerShell Gallery 或对提高 PowerShell 技能感兴趣，我建议您从 [https://github.com/PowerShell/PowerShell](https://github.com/PowerShell/PowerShell)
    安装 PowerShell Core，这是一个跨平台的 PowerShell 版本。
- en: Now, let’s investigate how you can achieve a similar setup on Mac.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们调查您如何在 Mac 上实现类似的设置。
- en: Bash script
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bash 脚本
- en: 'For Mac-based development environments, you need to create a Bash script:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于 Mac 的开发环境，您需要创建一个 Bash 脚本：
- en: Create a file named `setup-mac-dev-env.sh`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `setup-mac-dev-env.sh` 的文件。
- en: Run `chmod a+x setup-mac-dev-env.sh` to make the file executable.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`chmod a+x setup-mac-dev-env.sh`以使文件可执行。
- en: 'Insert the following text, also available at [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup),
    in the `setup-mac-dev-env.sh` file:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下文本（也可在[https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup)找到）插入到`setup-mac-dev-env.sh`文件中：
- en: '[PRE8]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To execute the script, run:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行脚本，请运行：
- en: '[PRE9]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'By executing this script, you have successfully set up your development environment
    on Mac. Here is an example of a more sophisticated install and verify routine,
    where you can check to see if a particular program, like `brew` or `node`, is
    already installed, before attempting to install them:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行此脚本，你已经在Mac上成功设置了你的开发环境。以下是一个更复杂的安装和验证例程的示例，你可以在尝试安装之前检查是否已经安装了特定的程序，如`brew`或`node`：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: By now, you should have a good idea of what automating the execution of your
    scripts looks like. However, the harsh reality is that these scripts do not represent
    a highly capable or resilient solution. They can’t be executed or managed remotely,
    nor can they quickly recover from errors or survive machine boot cycles. Moreover,
    your IT requirements may exceed what is covered here.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你应该对自动化执行你的脚本的样子有了很好的了解。然而，残酷的现实是，这些脚本并不代表一个高度能干或具有弹性的解决方案。它们不能远程执行或管理，也不能快速从错误中恢复或从机器启动周期中生存下来。此外，你的IT需求可能超出了这里涵盖的范围。
- en: If you’re dealing with large teams and experiencing frequent staff turnover,
    an automation tool can be extremely beneficial. Conversely, if you’re working
    alone or part of a smaller, more stable team, such a tool might be overkill. I
    encourage you to explore tools such as Puppet, Chef, Ansible, and Vagrant to help
    you decide which best fits your needs, or to determine if a simple script would
    suffice.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在处理大型团队并且经常有员工流动，自动化工具可以非常有用。相反，如果你是单独工作或者是一个更小、更稳定的团队的一部分，这样的工具可能就是过度配置了。我鼓励你探索像Puppet、Chef、Ansible和Vagrant这样的工具，以帮助你决定哪个最适合你的需求，或者确定一个简单的脚本是否足够。
- en: Project setup with the Angular CLI
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular CLI进行项目设置
- en: The Angular CLI tool, `ng`, is an official Angular project to ensure that newly
    created Angular applications have a uniform architecture, following the best practices
    perfected by the community over time. This means that any Angular application
    you encounter going forward should have the same general shape.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI工具`ng`是Angular官方项目，旨在确保新创建的Angular应用程序具有统一的架构，遵循社区经过时间检验的最佳实践。这意味着你将来遇到的任何Angular应用程序都应该具有相同的一般形状。
- en: Nx tools are popular in the Enterprise App Development space to scaffold, generate,
    and maintain Angular applications. You can learn more about Nx at [https://nx.dev](https://nx.dev).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Nx工具在企业级应用开发领域非常流行，用于构建、生成和维护Angular应用程序。你可以在[https://nx.dev](https://nx.dev)了解更多关于Nx的信息。
- en: Setting up your development directory
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置你的开发目录
- en: Setting up a dedicated `dev` directory is a lifesaver. Since all the data under
    this directory is backed up using GitHub, you can safely configure your antivirus,
    cloud sync, or backup software to ignore it. This helps significantly reduce CPU,
    disk, and network utilization. As a full-stack developer, you’re likely to be
    multitasking a lot, so avoiding unnecessary activity has a net positive impact
    on performance, power, and data consumption daily, especially if your development
    environment is a laptop that is resource-starved or you wish to squeeze as much
    battery life as possible when you’re on the move.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个专门的`dev`目录可以救命。因为这个目录下的所有数据都使用GitHub进行备份，所以你可以安全地配置你的防病毒软件、云同步或备份软件来忽略它。这可以显著减少CPU、磁盘和网络的使用率。作为一个全栈开发者，你很可能会进行很多多任务处理，所以避免不必要的活动对性能、电力和数据消耗的净正面影响很大，尤其是如果你的开发环境是资源匮乏的笔记本电脑，或者你希望在移动时尽可能延长电池寿命。
- en: Creating a `dev` folder directly in the `c:\` drive is very important on Windows.
    Earlier versions of Windows, or rather NTFS, can’t handle file paths longer than
    260 characters. This may seem adequate at first, but when you install `npm` packages
    in a folder structure that is already deep in the hierarchy, the `node_modules`
    folder structure can get deep enough to hit this limit very easily.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中，直接在`c:\`驱动器下创建一个`dev`文件夹非常重要。早期的Windows版本，或者说NTFS，无法处理超过260个字符的文件路径。一开始这看起来可能足够，但当你在一个已经非常深的目录结构中安装`npm`包时，`node_modules`文件夹结构可能会变得足够深，以至于很容易达到这个限制。
- en: With `npm 3+`, a new, flatter package installation strategy was introduced,
    which helps with npm-related issues, but being as close to the root folder as
    possible helps tremendously with any tool.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `npm 3+`，引入了一种新的、更扁平的包安装策略，这有助于解决与 npm 相关的问题，但尽可能接近根文件夹对任何工具都非常有帮助。
- en: 'Create your `dev` folder using the following commands. For Windows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令创建你的 `dev` 文件夹。对于 Windows：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For macOS:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 macOS：
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In Unix-based operating systems, `~` (pronounced tilde) is a shortcut to the
    current user’s home directory, which resides under `/Users/ your-user-name`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于 Unix 的操作系统上，`~`（发音为 tilde）是当前用户主目录的快捷方式，该目录位于 `/Users/你的用户名` 下。
- en: Now that your development directory is ready, let’s start generating your Angular
    application.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在开发目录已经准备好了，让我们开始生成你的 Angular 应用程序。
- en: Generating your Angular application
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成你的 Angular 应用程序
- en: We will be using the npm create command to generate your Angular application,
    which uses the Angular CLI to generate the code. The Angular CLI goes beyond initial
    code generation; you’ll use it frequently to create new components, directives,
    pipes, services, modules, and more. The Angular CLI also helps during development
    with live-reloading features so that you can quickly see the results of your changes.
    The Angular CLI can also test, lint, and build optimized versions of your code
    for a production release. Furthermore, as new Angular versions are released, the
    Angular CLI helps you upgrade your code by automatically rewriting portions to
    remain compatible with potential breaking changes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 npm create 命令来生成你的 Angular 应用程序，该命令使用 Angular CLI 生成代码。Angular CLI 不仅仅局限于初始代码生成；你将频繁地使用它来创建新的组件、指令、管道、服务、模块等。Angular
    CLI 还在开发过程中提供实时重新加载功能，以便你可以快速看到你更改的结果。Angular CLI 还可以测试、检查和构建用于生产发布的代码优化版本。此外，随着新的
    Angular 版本的发布，Angular CLI 帮助你通过自动重写部分代码以保持与潜在破坏性更改的兼容性来升级你的代码。
- en: Installing the Angular CLI
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Angular CLI
- en: The documentation at [https://angular.dev/tools/cli](https://angular.dev/tools/cli)
    guides you on how to install `@angular/cli` as a global npm package. However,
    I advise against doing this. Over time, as the Angular CLI is upgraded, keeping
    the global and in-project versions in sync becomes a constant irritant. If they’re
    not aligned, the tool tends to complain endlessly. Additionally, if you’re working
    on multiple projects, you end up with varying versions of the Angular CLI over
    time. As a result, your commands may not return the results you expect, or the
    results that your team members are getting.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://angular.dev/tools/cli](https://angular.dev/tools/cli) 上的文档指导你如何将 `@angular/cli`
    作为全局 npm 包进行安装。然而，我建议不要这样做。随着时间的推移，随着 Angular CLI 的升级，保持全局和在项目中的版本同步成为一个持续的烦恼。如果它们不一致，工具往往会无休止地抱怨。此外，如果你在多个项目上工作，随着时间的推移，你将拥有
    Angular CLI 的不同版本。结果，你的命令可能不会返回你预期的结果，或者你的团队成员得到的结果。'
- en: The strategy detailed in the next section introduces a bit more complexity to
    the initial configuration of your Angular project. However, you’ll more than make
    up for this pain if you must return to a project a few months or even a year later.
    In that case, you could use the version of the tool that you last used on the
    project, instead of some future version that may require upgrades that you’re
    not willing to perform. In the next section, you’ll use this best practice to
    initialize your Angular app.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分中详细介绍的策略为你的 Angular 项目的初始配置增加了一些复杂性。然而，如果你几个月或甚至一年后必须返回项目，你将完全弥补这种痛苦。在这种情况下，你可以使用你在项目上最后使用的工具版本，而不是可能需要升级而你不愿意执行的未来版本。在下一个部分中，你将使用这个最佳实践来初始化你的
    Angular 应用程序。
- en: Initializing your Angular app
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化你的 Angular 应用程序
- en: 'The main way to initialize your app is by using the Angular CLI. Let’s initialize
    the application for development:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化你的应用程序的主要方式是使用 Angular CLI。让我们为开发初始化应用程序：
- en: 'Under your `dev` folder, execute:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `dev` 文件夹下，执行以下命令：
- en: '[PRE13]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Angular creates all new projects using the standalone project configuration.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Angular 使用独立项目配置创建所有新的项目。
- en: Follow the on-screen instructions and name your app `my-test-app`; otherwise,
    accept the default option by pressing **Enter**.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照屏幕上的说明，并将你的应用程序命名为 `my-test-app`；否则，通过按 **Enter** 键接受默认选项。
- en: On your terminal, you should see a success message.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端上，你应该会看到一个成功消息。
- en: Your project folder `my-test-app` has been initialized as a Git repository and
    scaffolded with an initial file and folder structure.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你的项目文件夹 `my-test-app` 已初始化为 Git 仓库，并使用初始文件和文件夹结构进行了脚手架搭建。
- en: The alias for `@angular/cli` is `ng`. If you were to install the Angular CLI
    globally, you would execute `ng new my-test-app`, but we didn’t do this. To use
    the Angular CLI, you would have to run it as `npx @angular/cli`. However, we just
    installed the Angular CLI under the `node_modules/.bin` directory of your app,
    i.e., the `my-test-app` directory. This means you can run `ng` commands as `npx
    ng` in the `apps` directory using the version attached to your project, such as
    `npx ng generate component` `my-new-component`, and continue working efficiently.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`@angular/cli`的别名是`ng`。如果你要全局安装Angular CLI，你会执行`ng new my-test-app`，但我们没有这样做。要使用Angular
    CLI，你必须以`npx @angular/cli`的方式运行它。然而，我们只是在你应用的`node_modules/.bin`目录下安装了Angular
    CLI，即`my-test-app`目录。这意味着你可以在`apps`目录中使用与你的项目关联的版本运行`ng`命令，例如`npx ng generate
    component` `my-new-component`，并继续高效地工作。'
- en: Optimizing VS Code for Angular
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化VS Code以适应Angular
- en: It’s essential to optimize your **Integrated Development Environment** (**IDE**)
    to have a great development experience. If you leverage the automated tools I
    present in this section, you can quickly configure your IDE and Angular project
    with dozens of settings that work well together.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 优化你的**集成开发环境（IDE**）以获得良好的开发体验至关重要。如果你利用本节中我提供的自动化工具，你可以快速配置你的IDE和Angular项目，使用数十个可以良好协同工作的设置。
- en: Configuring your project automatically
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动配置你的项目
- en: 'To quickly configure your Angular application and VS Code workspace, run the
    following commands:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速配置你的Angular应用程序和VS Code工作区，请运行以下命令：
- en: 'Apply the Angular VS Code configuration:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用Angular VS Code配置：
- en: '[PRE14]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Apply the `npm` scripts for Docker configuration:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用Docker配置的`npm`脚本：
- en: '[PRE15]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: These settings are constantly tweaked to adapt to the ever-evolving landscape
    of extensions, plugins, Angular, and VS Code. Always make sure to install a fresh
    version of the task by rerunning the `install` command to get the latest version.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些设置不断调整以适应扩展、插件、Angular和VS Code不断变化的格局。始终确保通过重新运行`install`命令来安装任务的最新版本。
- en: Execute `npm run style:fix`.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`npm run style:fix`。
- en: Execute `npm run lint:fix`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`npm run lint:fix`。
- en: 'For more information on the `mrm` tasks, refer to:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`mrm`任务的更多信息，请参阅：
- en: '[https://github.com/expertly-simple/mrm-task-angular-vscode](https://github.com/expertly-simple/mrm-task-angular-vscode)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/expertly-simple/mrm-task-angular-vscode](https://github.com/expertly-simple/mrm-task-angular-vscode)'
- en: '[https://github.com/expertly-simple/mrm-task-npm-docker](https://github.com/expertly-simple/mrm-task-npm-docker
    )'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/expertly-simple/mrm-task-npm-docker](https://github.com/expertly-simple/mrm-task-npm-docker)'
- en: You may verify your configuration against the sample projects on GitHub. However,
    note that the configuration pieces will be applied at the root of the repository
    and not under the `projects` folder.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将你的配置与GitHub上的示例项目进行验证。然而，请注意，配置组件将应用于存储库的根目录，而不是`projects`文件夹下。
- en: Congratulations – you’re done setting up your development environment!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你 – 你已经完成了开发环境的设置！
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this appendix, you mastered using CLI-based package managers for both Windows
    and macOS to speed up and automate the setup of development environments for you
    and your colleagues. You also created your first Angular project and optimized
    its configuration for development using Visual Studio Code. You then implemented
    automated style checkers and fixers to enforce coding standards and styling across
    your team. The lint checker and fixer you implemented will automatically catch
    potential coding errors and maintainability issues.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，你掌握了使用基于命令行界面（CLI）的包管理器来加速和自动化为你和你的同事设置开发环境的方法。你还创建了你的第一个Angular项目，并使用Visual
    Studio Code对其配置进行了优化。然后，你实现了自动化的样式检查器和修复器，以强制执行团队中的编码标准和样式。你实现的检查器和修复器将自动捕获潜在的编码错误和维护性问题。
- en: The automated scripts you created codify your team norms and document them for
    new and existing members. By reducing variance from one developer’s environment
    to the next, your team can overcome any individual configuration issue more efficiently
    and remain focused on executing the task at hand. With a collective understanding
    of a common environment, no single individual on the team carries the burden of
    having to help troubleshoot everyone else’s issues. The same idea applies to the
    shape and style of your code files.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建的自动化脚本将你的团队规范编码化，并为新成员和现有成员记录下来。通过减少不同开发者环境之间的差异，你的团队能够更有效地克服任何个人配置问题，并专注于手头的任务。通过共同理解一个共同的环境，团队中的任何个人都不需要承担帮助解决其他人的问题的负担。同样的想法也适用于你的代码文件的结构和风格。
- en: When a team member looks at another team member’s code, it looks stylistically
    identical, which makes it easier to troubleshoot and debug an issue. As a result,
    your team is more productive. By leveraging more sophisticated and resilient tools,
    mid-to-large sized organizations can achieve considerable savings in their IT
    budgets.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当团队成员查看另一位团队成员的代码时，其风格看起来完全相同，这使得调试和解决问题更加容易。因此，你的团队会更加高效。通过利用更复杂和健壮的工具，中大型组织可以在其IT预算中实现相当大的节省。
- en: Further reading
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: The article *Automating the Setup of the Local Developer Machine* by Vishwas
    Parameshwarappa is a great place to start for using Vagrant, found at [https://www.vagrantup.com](https://www.vagrantup.com).
    You can find the article at [https://Red-gate.com/simple-talk/sysadmin/general/automating-setup-local-developer-machine](https://Red-gate.com/simple-talk/sysadmin/general/automating-setup-local-developer-machine).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 维什瓦什·帕拉梅什瓦拉帕的《自动化本地开发者机器的设置》一文是使用Vagrant的绝佳起点，可以在[https://www.vagrantup.com](https://www.vagrantup.com)找到。你可以在[https://Red-gate.com/simple-talk/sysadmin/general/automating-setup-local-developer-machine](https://Red-gate.com/simple-talk/sysadmin/general/automating-setup-local-developer-machine)找到这篇文章。
- en: Other tools include Chef at [https://www.chef.io](https://www.chef.io), and
    Puppet at [https://puppet.com](https://puppet.com). Some developers prefer to
    work within Docker containers during coding at [https://www.docker.com](https://www.docker.com).
    This is done to isolate different versions of SDKs from each other. Specific development
    tools cannot be scoped to a given folder and must be installed globally or OS-wide,
    making it difficult to work on multiple projects simultaneously. I recommend avoiding
    this type of setup if you can. I expect IDEs will automate such chores in the
    future, as CPU core counts increase and virtualization tech gains better hardware
    acceleration.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 其他工具包括位于[https://www.chef.io](https://www.chef.io)的Chef和位于[https://puppet.com](https://puppet.com)的Puppet。一些开发者更喜欢在[https://www.docker.com](https://www.docker.com)的Docker容器内进行编码。这样做是为了隔离不同版本的SDK。特定的开发工具不能局限于特定的文件夹，必须全局或操作系统范围内安装，这使得同时处理多个项目变得困难。如果你能避免这种设置，我建议你这样做。我预计随着CPU核心数量的增加和虚拟化技术获得更好的硬件加速，IDEs将在未来自动化此类任务。
- en: Questions
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions as best as possible to ensure you’ve understood
    the key concepts from this chapter. Do you know if you’ve got all the answers
    right? Visit [https://angularforenterprise.com/self-assessment](https://angularforenterprise.com/self-assessment)
    for more:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能好地回答以下问题，以确保你已经理解了本章的关键概念。你知道你是否已经正确回答了所有问题？请访问[https://angularforenterprise.com/self-assessment](https://angularforenterprise.com/self-assessment)获取更多信息：
- en: What are the motivations for using a CLI tool as opposed to a GUI?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与GUI相比，使用CLI工具的动机是什么？
- en: For your specific operating system, what is the suggested package manager to
    use?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于你的特定操作系统，建议使用哪个包管理器？
- en: What are some of the benefits of using a package manager?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用包管理器的一些好处是什么？
- en: What are the benefits of keeping the development environments of the members
    of your development team as similar to one another as possible?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持你的开发团队成员的开发环境尽可能相似有什么好处？
- en: Join our community on Discord
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord社区
- en: 'Join our community’s Discord space for discussions with the authors and other
    readers:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的Discord空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/AngularEnterpise3e](Appendix.xhtml)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/AngularEnterpise3e](Appendix.xhtml)'
- en: '![](img/QR_Code1116411172100421421.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_Code1116411172100421421.png)'
