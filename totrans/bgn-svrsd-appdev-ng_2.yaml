- en: Chapter 2. Creating the Application Module and Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this lesson, we will start by creating a `PostsModule` that contains all
    the code related to displaying the posts that come from our API.
  prefs: []
  type: TYPE_NORMAL
- en: Inside this module, we will add various components, a service, and two resolvers.
  prefs: []
  type: TYPE_NORMAL
- en: The components are used to display the data in the browser. We will go over
    their use in this lesson. The service is used to retrieve the data from the API.
    Lastly, we will add resolvers to our app; resolvers make sure the data from the
    service is available at the moment we navigate from one route to another.
  prefs: []
  type: TYPE_NORMAL
- en: Lesson Objectives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Explore the types of components that will be used in our app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create and load the PostsModule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the container components, such as PostsComponent and ProfileComponent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add dummy posts and profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a service to retrieve data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the presentational components, such as PostListComponent, PostItemComponent,
    and ProfileItemComponent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create and import resolvers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will take a look at how we can differentiate our components
    by making a distinction between **container** and **presentational** components.
    Sometimes, they are also called *smart* and *dumb* components, referring to how
    much *knowledge* of the world outside of the components each of them has.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main difference we can make is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A presentational component is responsible for *how things look*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A container component is responsible for *how things work*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will dive into more details of why this distinction is important when we
    create them, but we can give away a few things already.
  prefs: []
  type: TYPE_NORMAL
- en: Presentational Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can say the following about presentational components:'
  prefs: []
  type: TYPE_NORMAL
- en: They get their data *passed in* using the `@Input()` decorator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any operations are *passed up* using the `@Output()` decorator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They handle the markup and the styling of the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They mostly just contain other presentational components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They have no knowledge (or dependencies) on any routes or services from the
    app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can say the following about container components:'
  prefs: []
  type: TYPE_NORMAL
- en: They retrieve their data from a service or a resolver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They handle the operations that they receive from the presentational components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They have very little markup and styling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They will often contain both presentational and container components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Folder Structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make the distinction clear in our project, we will use different folders
    for each type of component:'
  prefs: []
  type: TYPE_NORMAL
- en: The `src/<module>/components` folder is where the presentational components
    live
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `src/<module>/containers` folder is where the container components live
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate and Lazy Load the PostsModule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will generate the `PostsModule` using the `ng` command and lazy load the
    `PostsModule` in the `AppRoutingModule`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `ng generate` command, we can generate or scaffold out all sorts of
    code that can be used in our Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the `ng generate module` command to generate our `PostsModule`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This command has one required parameter, which is the name. In our application,
    we will call this module `posts`. A second optional parameter is passed in in
    order to create a separate file to hold the routes for this module, the `PostsRoutingModule`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your terminal and navigate to the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command from inside the project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As you can see from the output of the command, our `PostsModule` is generated
    in the new folder `src/app/posts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generate and Lazy Load the PostsModule](img/1.33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In contrast to how we load our `UiModule` by importing it into our `AppModule`,
    we will lazy load our `PostsModule` using our `AppRoutingModule`.
  prefs: []
  type: TYPE_NORMAL
- en: This is an optimization of how our application is built and it makes sure that
    our application has a smaller initial file to download by using a technology called
    **code splitting**. This basically bundles each lazy loaded module into its own
    file and the browser is instructed to download this file when needed, but not
    before.
  prefs: []
  type: TYPE_NORMAL
- en: We will add two routes to our main application file. The first route is a route
    with a blank `path` property (our default route) and its function is to redirect
    to the `/posts` route.
  prefs: []
  type: TYPE_NORMAL
- en: The second route is the `/posts` route and it lazy loads the `PostsModule`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the user navigates to the app, the first route that will be found is our
    blank redirect route. This will tell the router to navigate to `/posts`. The router
    finds the `/posts` route and navigates the user to that module:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `src/app/app-routing.module.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate our only existing route object that is defined in the `routes` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside this new `children` array, we create two routes that look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here are a few things to explain how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we define that we want to have children to our main route. This makes
    sure that all of our children get rendered in the `<router-outlet>` that is defined
    in the `LayoutComponent` in the *Creating the LayoutComponent* section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We define our first route to respond to all paths (that's what the empty string
    does), and we tell it to redirect to the `/posts` route.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, we create a `posts` route and we tell it to load its children from our
    new module. The `loadChildren` property is what enables the lazy loading.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we refresh our page in the browser, we can see that nothing changes in
    the app itself, but we can see that our URL has changed; it has redirected to
    `/posts`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to the next section to create our container components so that
    we can start seeing data!
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Container Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will use `ng generate` to create the `PostsComponent` and
    `ProfileComponent` inside the `PostsModule`, add routes to both components, and
    add dummy data that we can use to build our presentational components.
  prefs: []
  type: TYPE_NORMAL
- en: Creating PostsComponent and ProfileComponent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the `ng generate` command to create our `PostsComponent`. This
    is the component that will eventually list an overview for all our posts.
  prefs: []
  type: TYPE_NORMAL
- en: The application route to this component will be `/posts:`
  prefs: []
  type: TYPE_NORMAL
- en: Open your terminal and navigate to the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command from inside the project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Creating PostsComponent and ProfileComponent](img/1.35.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Open the `src/app/posts/posts-routing.module.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `PostsComponent`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following route to the `routes` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now when we refresh the page in our app, we should see the text **posts works!**
    between our header and footer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating PostsComponent and ProfileComponent](img/1.37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Very similar to how we created the PostsComponent, we will now create the `ProfileComponent`.
    This is the component that will be responsible for displaying the profile that
    made the post.
  prefs: []
  type: TYPE_NORMAL
- en: 'The application route to this component will be `/posts/<id>`, where `<id>`
    is the identifier of the profile we want to display:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your terminal and navigate to the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command from inside the project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Creating PostsComponent and ProfileComponent](img/1.38.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Open the `src/app/posts/posts-routing.module.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `ProfileComponent`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following route to the `routes` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When our application refreshes and we navigate our browser to `http://localhost:4200/posts/1`,
    we should see the text **profile works!**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating PostsComponent and ProfileComponent](img/1.40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding Dummy Post and Profile Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to get a feel of how our application works, we will add some dummy
    data to our components so we have something to work with. We will add a service
    to retrieve the data from our API:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/posts/containers/posts/posts.component.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new property called `posts` and define it with the following structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following import to the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `items` array inside our `posts` object is what will eventually hold our
    posts. We will use a simple loop to add a few dummy items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Locate the `ngOnInit()` method and add the following code to the method body.
    This code creates 10 dummy elements in our `posts` array so we can display some
    data. The details are not relevant as this block will be obsolete in the next
    lesson when we retrieve data from our API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the last step, we need to update our template. Remove all the content from
    the `template` property and replace it with the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code in our template uses the `ngFor` directive to loop over the content
    of the `posts` array. For each of those items, it prints an `a` tag that links
    to the post by `id` using the `routerLink` directive. The link text is set to
    `post.text`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what we get in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Dummy Post and Profile Data](img/1.42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Lastly, we will add some dummy data to our `ProfileComponent:`
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/posts/containers/profile/profile.component.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new property called `profile` and define it with the following structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `import` to the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `constructor()` method and add the following code to the method
    parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `ngOnInit()` method and add the following code to the method body.
    This code *subscribes* to the parameters of the current route and when it changes,
    it reads the value of the `profileId` property in the URL and assigns it to the
    `id` property of `this.profile`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the last step, we need to update our template. Remove all the content from
    the `template` property and replace it with the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we go to `http://localhost:4200/posts/5`, we will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Dummy Post and Profile Data](img/1.44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The code in the `ngOnInit` block *subscribes* to the parameters of the *activated
    route*. When we retrieve that on that subscription, we use it to append the ID
    to the string in the `post.text` property, making the content dynamic.
  prefs: []
  type: TYPE_NORMAL
- en: We can now click through from the `PostsContainer` to the `ProfileContainer`
    component. We can use the Back button or the link in the header to go back.
  prefs: []
  type: TYPE_NORMAL
- en: Our container components are set up and the routes work. Let's add some real
    data from the API!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Service to Retrieve Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will use `ng generate` to create the `PostsService`, use
    `environment` to store the API URL, and use the `PostsService` in our components.
    We will then define our API calls in the `PostsService` and leverage the `HttpClientModule`
    to enable HTTP access.
  prefs: []
  type: TYPE_NORMAL
- en: Generating the Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the `ng generate service` command to generate a service that will
    handle the interaction with our API:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your terminal and navigate to the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command from inside the project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Generating the Service](img/1.45.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Storing Our API URL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the `environment` of Angular CLI to store our API URL. Using the
    `environment`, we can define a different URL for development and production environments.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the application generated with Angular CLI comes with two predefined
    environments. These environments are defined in `.angular-cli.json` in the project
    root.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/environments/environment.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `environment` variable, add an `apiUrl` key and assign as the value
    the string `http://localhost:3000/api`, which is the URL to the development API:![Storing
    Our API URL](img/1.46.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `src/environments/environment.prod.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `environment` variable, add an `apiUrl` key and assign as the value
    the string `https://packt-angular-social.now.sh/api`, which is the URL to the
    production API:![Storing Our API URL](img/1.47.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Referencing Our New PostsService in Our Container Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this service, we will reference our new `PostsService` in our container components
    and that way define what our service should look like.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the `OnInit` component life cycle hook provided by Angular to call
    into our inject service and invoke the `getPosts` method on that service.
  prefs: []
  type: TYPE_NORMAL
- en: We will *map* over the result to only get the items and then we will subscribe
    and set the result of the method to our `posts` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that we do the same thing for both the `PostsComponent` and the `ProfileComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/posts/containers/posts/posts.component.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an `import` statement for our new `PostsService`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the constructor to *inject* the `PostsService` and make it available
    under the `private postsService` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the contents of the `ngOnInit` method and update it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `src/app/posts/containers/posts/profile.component.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an `import` statement for our new `PostsService`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the constructor to *inject* the `PostsService`, and make sure to leave
    our `private route` dependency in place:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the contents of the `ngOnInit` method and update it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Defining the Public Methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next step is to define our public methods in our `PostsService` and make
    sure that these retrieve the data we need from our API.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will add two methods in our `PostsService`. The first method is the `getPosts`
    method, which does not take any arguments and returns all the posts from the API.
    The second method is the `getProfile` method, which takes the `profileId` as an
    argument. It returns the profile related to the `profileId` that is passed in
    as the argument, and includes all the related posts that are made by that profile:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/posts/services/posts.service.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an `import` statement to import the `HttpClient` from `@angular/common/http`
    and a reference to the `environment` where we have our API URL defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the constructor to inject the `HttpClient` and make it available under
    the `private http` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new method called `getPosts() {}` and add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new method called `getProfile(profileId) { }` and add the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Importing HttpClientModule in Our AppModule
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are almost done creating our `PostsService`, but there is still one thing
    we need to fix. When we refresh our application in our browser, we see that we
    have an error message in our **Console** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Importing HttpClientModule in Our AppModule](img/1.50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The reason we get this error is because we have used the `HttpClient` in our
    service, but Angular does not know where this module comes from. In order to fix
    this, we need to import `HttpClientModule` in our `AppModule:`
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/app.module.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an `import` statement to import the `HttpClientModule` from `@angular/common/http`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `imports` array in the `NgModule` decorator to import `HttpClientModule`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Importing HttpClientModule in Our AppModule](img/1.51.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'When we now check the **Console** tab, we see that there is another error message,
    **.map is not a function**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Importing HttpClientModule in Our AppModule](img/1.52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To fix this, we need to import the `map` operator from the `rxjs` library.
  prefs: []
  type: TYPE_NORMAL
- en: The `rxjs` library is one of the main dependencies of Angular and is used to
    implement the *Observable* pattern in Angular. It is used by Angular itself in
    the router and the HTTP client.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `map` operator is one of the operators shipped by `rxjs` and it can be
    used to map over the data before you subscribe to it. This is useful if you want
    to manipulate the data you work with:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/app.module.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an `import` statement to import the `map` operator from the `rxjs` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When we now refresh our application, we should see a list of posts retrieved
    from the API!
  prefs: []
  type: TYPE_NORMAL
- en: Let's continue to add some presentational components to give our posts some
    style!
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Presentational Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will use `ng generate component` to create the `PostListComponent`
    and `PostItemComponent` inside the `PostsModule`. We will then add a UI to these
    components and use these components in our container components.
  prefs: []
  type: TYPE_NORMAL
- en: The `PostListComponent` is responsible for taking in an array of posts using
    its *Input*, and it loops over each of these posts and invokes the `PostItemComponent`.
  prefs: []
  type: TYPE_NORMAL
- en: The `PostItemComponent` accepts a single post as its *Input* and displays that
    post.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the PostListComponent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the `ng generate` command to create our `PostListComponent`.
    This is the component that will loop over our posts and will be called from our
    `PostsComponent:`
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/posts/container/posts/posts.component.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the template to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open your terminal and navigate to the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command from inside the project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Creating the PostListComponent](img/1.54.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Open the `src/app/posts/components/post-list/post-list.component.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `Input` from `@angular/core` by adding it to the existing `import`
    statement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following property in the component class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the template to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating the PostItemComponent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the `ng generate` command to create our `PostItemComponent:`
  prefs: []
  type: TYPE_NORMAL
- en: Open your terminal and navigate to the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command from inside the project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Creating the PostItemComponent](img/1.56.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Open the `src/app/posts/components/post-item/post-item.component.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `Input` from `@angular/core` by adding it to the existing `import`
    statement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following property in the component class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the template to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `styles` property from our component to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we refresh our browser now, this is how our page will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the PostItemComponent](img/1.58.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating the ProfileItemComponent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the `ng generate` command to create our `ProfileItemComponent:`
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/posts/container/posts/profile.component.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the template to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open your terminal and navigate to the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command from inside the project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `src/app/posts/components/profile-item/profile-item.component.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `Input` from `@angular/core` by adding it to the existing `import`
    statement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following property in the component class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the template to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `styles` property from our component to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we now refresh the application in our browser, we see that the content
    is styled and that the navigation still works as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the ProfileItemComponent](img/1.60.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have successfully separated the concerns of retrieving the data and displaying
    it.
  prefs: []
  type: TYPE_NORMAL
- en: It's generally a good idea to keep components as small and simple as possible;
    in particular, our `PostItemComponent` could probably be split up into multiple
    components.
  prefs: []
  type: TYPE_NORMAL
- en: For our purpose, this works perfectly and we can continue with our last step
    in this lesson, which is to properly handle retrieving our data using the Angular
    router.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Resolvers to Retrieve Data Using the Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will manually create two Injectable classes that act as
    resolvers and then configure our router to use these resolvers. We will then update
    our container components to use this resolved data.
  prefs: []
  type: TYPE_NORMAL
- en: A resolver is a class that we can use to fetch the data that we use in our component
    *before* the component is displayed. We call the resolvers in the routes where
    we need the data. In our implementation, the resolvers retrieve the data from
    the API and return it so it can be displayed in the components.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'More information about resolvers can be found at: [https://angular.io/guide/router#resolve-pre-fetching-component-data](https://angular.io/guide/router#resolve-pre-fetching-component-data).'
  prefs: []
  type: TYPE_NORMAL
- en: Our application is quite neatly structured already, but there is one thing that
    we can optimize.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to see what our problem is, open Chrome Developer Tools and then the
    **Performance** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Resolvers to Retrieve Data Using the Router](img/1.61.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Hit the cog icon and set **Network** to **Slow 3G**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Resolvers to Retrieve Data Using the Router](img/1.62.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we now click around in our application, we will see that that our page navigation
    still works, but we are presented with empty pages.
  prefs: []
  type: TYPE_NORMAL
- en: The reason for this is that while our components are loaded correctly, they
    still need to retrieve the data after they are loaded. This is because our components
    call into the `PostsService` from our `ngOnInit` method.
  prefs: []
  type: TYPE_NORMAL
- en: It would be better if our router could make sure that the component has all
    the needed data loaded before entering the page.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, the Angular router provides a way to handle this using resolvers.
    They will resolve the data before entering the route, and in our component, we
    can just take this resolved data and display it.
  prefs: []
  type: TYPE_NORMAL
- en: The resolvers that we create need the `@Injectable()` decorator to make sure
    they are part of the dependency injection in Angular.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Resolvers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we will create a resolver that resolves our post:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Creating Resolvers](img/1.63.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Open the `src/app/posts/resolvers/posts-resolver.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the file by defining the needed imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Decorate the `PostsResolver` class with the `@Injectable` operator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make the class implement `Resolve<any>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the class, create a constructor and inject our `PostsService`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Below the constructor, create a class method called `resolve` and make it return
    the `getPosts()` method from our `PostsService`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the resolver that will be used to retrieve all our posts, just like
    how we do this currently in our `PostsComponent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will create a resolver that resolves our profile:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Creating Resolvers](img/1.65.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Open the `src/app/posts/resolvers/profile-resolver.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the file by defining the needed imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Decorate the `ProfileResolver` class with the `@Injectable` operator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make the class implement `Resolve<any>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the class, create a constructor and inject our `PostsService`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Below the constructor, create a class method called `resolve`, and pass the
    `route: ActivatedRouteSnapshot` class into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `resolve` method, we return the `getProfile()` method from our `PostsService`
    while getting the `params[''profileid'']` off our route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the resolver that will be used to retrieve the posts that we have navigated
    to in our route.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Our Resolvers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add our two new resolvers to the `PostsRoutingModule`. We do this by
    importing the resolvers and then adding a `resolve` property to both of our routes.
    The `resolve` property takes an object where the key is how the data will be available
    in the router after it is resolved, and the value is a reference to the imported
    resolver:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/posts/posts-routing.module.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import our two freshly created resolvers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update both our routes to add a `resolve` property and call to the resolvers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we now refresh our page, we see that we get no output displayed and that
    we have an error in the browser console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Importing Our Resolvers](img/1.68.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to fix this error, we need to *provide* the resolvers in our module,
    just like how we do it with other Injectables, such as services:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/posts/posts.module.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the two resolvers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a reference to both resolvers to the `providers` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the application refreshes, we see that the error in the console is gone.
  prefs: []
  type: TYPE_NORMAL
- en: If we check in the **Network** tab in Chrome Developer Tools, we see that we
    make two requests to the same endpoint. This is because we retrieve the data twice,
    in our resolver and in our component. Let's update our container components and
    let them use the data resolved by the router.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Data Resolved by the Router
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will update our `PostsComponent` to read the data that has been resolved
    by our router. We subscribe to the data of the active route and we map over that
    data twice. In the first map command, the `posts` value relates to the object
    key we used in our resolver object for this route:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/posts/container/posts/posts.component.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `ActivatedRoute` from `@angular/router`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remove the `PostsService` import as we are no longer going to use it here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the constructor to inject `private route: ActivatedRoute`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `ngOnInit()` method and replace the content as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Because we will always have data available when arriving on the route, we can
    remove the assignment from our `posts` property, so it looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Refresh the page and make sure the data is still loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will update our `ProfileComponent` to read the data that has been resolved
    by our router. We subscribe to the data of the active route and we map over that
    data. In our map command, the value `profile` relates to the object key we used
    in our resolver object for this route:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/posts/container/profile/profile.component.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `PostsService` import as we are no longer going to use it here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the constructor to only inject `private route: ActivatedRoute`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `ngOnInit()` method and replace the content as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the assignment from the `public profile` property so it looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And we are done! Our basic application is built and even though there are enough
    things to add and optimize, it's well-structured and works using Angular's best
    practices.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we created our container components and added dummy data. We
    also created presentational components and implemented resolvers for our app.
    In the next lesson, we will add support for server-side rendering by adding Angular
    Universal.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this lesson, we learned the different types of components and how to create
    them. We then learned how to create resolvers to retrieve data using the router.
  prefs: []
  type: TYPE_NORMAL
- en: In the next lesson, we will look at implementing server-side rendering in our
    app.
  prefs: []
  type: TYPE_NORMAL
