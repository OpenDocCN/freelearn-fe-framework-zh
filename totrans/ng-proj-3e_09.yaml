- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Building a Component UI Library Using Angular CLI and Angular CDK
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular CLI和Angular CDK构建组件UI库
- en: An Angular application consists of Angular components that are organized into
    modules. When components need to share a similar appearance or behavior across
    modules, we extract their functionality into reusable components and group them
    in a shared module. Reusable components may vary from complex UI structures with
    many controls, such as forms, to single native HTML elements, such as buttons.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Angular应用程序由Angular组件组成，这些组件组织成模块。当组件需要在模块之间共享相似的外观或行为时，我们将提取其功能到可重用组件中，并将它们分组到一个共享模块中。可重用组件可能从具有许多控件（如表单）的复杂UI结构到单个原生HTML元素（如按钮）不等。
- en: A component UI library is a collection of reusable components that can be used
    outside a specific application domain. A large enterprise application built with
    a monorepo architecture can use these components across all its applications.
    A project outside an organization can also use the same component library as an
    external dependency.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 组件UI库是一组可重用组件的集合，可以在特定应用领域之外使用。一个使用monorepo架构构建的大型企业应用程序可以在其所有应用程序中使用这些组件。组织外部的项目也可以使用相同的组件库作为外部依赖项。
- en: The Angular CLI includes all the necessary tooling for creating libraries with
    Angular. The Angular **Component Dev Kit** (**CDK**) provides a broad range of
    functionalities for creating accessible and high-performant UI components. In
    this chapter, we will combine them with **Bulma**, a modern CSS framework, to
    create a simple component UI library from scratch.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI包含创建Angular库所需的所有工具。Angular **组件开发工具包**（**CDK**）提供了一系列用于创建可访问性和高性能UI组件的功能。在本章中，我们将结合**Bulma**，一个现代CSS框架，从头开始创建一个简单的组件UI库。
- en: 'In this chapter, we will cover the following topics in more detail:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更详细地介绍以下主题：
- en: Creating a library with the Angular CLI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Angular CLI创建库
- en: Building a draggable card list
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建可拖拽的卡片列表
- en: Interacting with the clipboard
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与剪贴板交互
- en: Publishing an Angular library to `npm`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Angular库发布到`npm`
- en: Using components as **Angular elements**
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用组件作为**Angular元素**
- en: Essential background theory and context
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 必要的背景理论和上下文
- en: The Angular CDK contains a collection of common interactions and behaviors that
    we can apply to Angular components. It is at the heart of the Angular Material
    library but can be used with any CSS framework in an Angular application. The
    Angular CDK is available from the `@angular/cdk` npm package.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CDK包含了一系列常见的交互和行为，我们可以将其应用于Angular组件。它是Angular Material库的核心，但也可以与Angular应用程序中的任何CSS框架一起使用。Angular
    CDK可以从`@angular/cdk` npm包中获取。
- en: The Angular CLI supports creating Angular libraries out of the box. The functionality
    of an Angular library can be used only in Angular applications, and it is decoupled
    from specific business logic. If we want to use an Angular library in a non-Angular
    application, we must convert it into an Angular element.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI支持开箱即用创建Angular库。Angular库的功能只能在Angular应用程序中使用，并且与特定业务逻辑解耦。如果我们想在非Angular应用程序中使用Angular库，我们必须将其转换为Angular元素。
- en: '**Custom elements** are a web standard that allows the creation of HTML elements
    independent of any JavaScript framework. It works by declaring a custom HTML tag
    and associating it with a JavaScript class. The browser can identify the HTML
    tag and execute the JavaScript code defined inside the class.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义元素**是一个网络标准，允许创建独立于任何JavaScript框架的HTML元素。它通过声明一个自定义HTML标签并将其与一个JavaScript类关联来实现。浏览器可以识别HTML标签并执行类内部定义的JavaScript代码。'
- en: Angular elements are Angular components converted into custom elements using
    the `@angular/elements` library. Packaging an Angular component as a custom element
    connects the Angular framework to the DOM of the element, enriching it with data
    binding, a component life cycle, and change detection features.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Angular元素是使用`@angular/elements`库将Angular组件转换为自定义元素。将Angular组件打包为自定义元素将Angular框架与元素的DOM连接起来，通过数据绑定、组件生命周期和变更检测功能来丰富它。
- en: Project overview
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: 'In this project, we will build a component UI library for our Angular projects.
    Initially, we will use the Angular CLI to scaffold a new Angular workspace for
    our library. We will then use the Angular CDK and the Bulma CSS framework to create
    the following components:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将为我们的Angular项目构建一个组件UI库。最初，我们将使用Angular CLI为我们的库搭建一个新的Angular工作空间。然后，我们将使用Angular
    CDK和Bulma CSS框架来创建以下组件：
- en: A list of cards that we can rearrange using drag-and-drop features
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一份我们可以使用拖放功能重新排列的卡片列表
- en: A button that will allow us to copy arbitrary content to the clipboard
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个按钮，允许我们将任意内容复制到剪贴板
- en: 'We will learn how to deploy the library into a package registry such as **npm**.
    Finally, we will convert one of our components into an Angular element to share
    it with non-Angular applications using the `ngx-build-plus` library. The following
    diagram provides an architectural overview of the project:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何将库部署到包注册库，如**npm**。最后，我们将使用`ngx-build-plus`库将我们的一个组件转换为Angular元素，以便与非Angular应用程序共享。以下图表提供了项目的架构概述：
- en: '![Εικόνα που περιέχει διάγραμμα  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_09_01.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![包含图表的图片 自动生成的描述](img/B18465_09_01.png)'
- en: Figure 9.1 – Project architecture
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 项目架构
- en: 'Build time: 1½ hours'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 构建时间：1½小时
- en: Getting started
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'The following prerequisites and software tools are required to complete this
    project:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此项目所需的以下先决条件和软件工具：
- en: 'Angular CLI: A CLI for Angular, which you can find at [https://angular.io/cli](https://angular.io/cli).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular CLI：一个用于Angular的CLI，您可以在[https://angular.io/cli](https://angular.io/cli)找到。
- en: 'GitHub material: The related code for this chapter can be found in the `Chapter09`
    folder at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition).'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub材料：本章的相关代码可以在[https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition)的`Chapter09`文件夹中找到。
- en: Creating a library with the Angular CLI
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular CLI创建库
- en: Before we can start working with Angular libraries using the Angular CLI, we
    need to create an Angular CLI workspace. The Angular CLI workspace will contain
    our Angular library and an Angular application for testing the library.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够开始使用Angular CLI工作与Angular库之前，我们需要创建一个Angular CLI工作区。这个Angular CLI工作区将包含我们的Angular库以及一个用于测试库的Angular应用程序。
- en: 'Use the following command to generate a new Angular CLI workspace:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令来生成一个新的Angular CLI工作区：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command will create a new Angular CLI workspace that contains
    an Angular application named `my-components`. Navigate to the `my-components`
    folder and execute the following command to generate a new Angular library:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将创建一个新的Angular CLI工作区，其中包含一个名为`my-components`的Angular应用程序。导航到`my-components`文件夹，并执行以下命令以生成一个新的Angular库：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding command will create a `ui-controls` library inside the `projects`
    folder of the workspace. It will contain various files and folders similar to
    those when creating an Angular application, including the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在工作区的`projects`文件夹内创建一个`ui-controls`库。它将包含与创建Angular应用程序时类似的文件和文件夹，包括以下内容：
- en: '`src\lib`: This contains the source code of the library, such as modules, components,
    and services.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src\lib`: 这包含库的源代码，例如模块、组件和服务。'
- en: '`src\public-api.ts`: This exports artifacts from the library that we want to
    make publicly available in other Angular applications.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src\public-api.ts`: 这导出我们从库中想要在其他Angular应用程序中公开的工件。'
- en: '`ng-package.json`: This contains a configuration for the `ng-packagr` library
    that the Angular CLI uses under the hood for building libraries.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ng-package.json`: 这包含了一个配置文件，用于Angular CLI在底层构建库时使用的`ng-packagr`库。'
- en: '`tsconfig.lib.json`: The TypeScript configuration file for our library, which
    also contains several Angular compiler options.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tsconfig.lib.json`: 我们库的TypeScript配置文件，它还包含几个Angular编译器选项。'
- en: '`tsconfig.lib.prod.json`: The TypeScript configuration file used when building
    our library in production mode.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tsconfig.lib.prod.json`: 当我们在生产模式下构建库时使用的TypeScript配置文件。'
- en: 'The Angular CLI will generate a module, a component, and a service in the `src\lib`
    folder for us by default. It will also export them so that they can be used by
    any Angular application that will use the library. You can see an example of this
    here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Angular CLI会为我们生成一个模块、一个组件和一个服务，存放在`src\lib`文件夹中。它还会将它们导出，以便任何将使用该库的Angular应用程序都可以使用。这里有一个例子：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now that we have set up our Angular CLI workspace, we can go ahead and install
    the Bulma and Angular CDK libraries as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了Angular CLI工作区，我们可以继续安装Bulma和Angular CDK库，如下所示：
- en: 'Execute the following command to install the Angular CDK:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令来安装Angular CDK：
- en: '[PRE3]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the following command to install the Bulma CSS framework:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来安装Bulma CSS框架：
- en: '[PRE4]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Open the `angular.json` configuration file and add the CSS style sheet file
    of the Bulma library to the `styles` section of the `build` architect entry, as
    follows:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `angular.json` 配置文件，并将 Bulma 库的 CSS 样式表文件添加到 `build` 架构条目的 `styles` 部分中，如下所示：
- en: '[PRE5]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open the `package.json` file of the `projects\ui-controls` folder and modify
    it accordingly:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `projects\ui-controls` 文件夹中的 `package.json` 文件，并相应地进行修改：
- en: '[PRE6]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We add the Angular CDK and the Bulma library to the `peerDependencies` section
    to ensure that any consuming application has a specific version of the packages
    to run our library.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 Angular CDK 和 Bulma 库添加到 `peerDependencies` 部分以确保任何消费应用程序都有特定版本的包来运行我们的库。
- en: The version number of each package may vary if you follow along with this project.
    To ensure you have the correct versions, copy them from the `package.json` file
    of the root folder of the workspace.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您跟随此项目，每个包的版本号可能会有所不同。为确保您拥有正确的版本，请从工作区根目录的 `package.json` 文件中复制它们。
- en: We have now completed the basic setup of our UI components library. We have
    also configured the Angular application that comes with the Angular CLI workspace
    to preview and test the library. In the following section, we will build the first
    component of our library—a card list that can be re-ordered.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了 UI 组件库的基本设置。我们还配置了 Angular CLI 工作区中附带的应用程序，以预览和测试库。在下一节中，我们将构建库的第一个组件——一个可重新排序的卡片列表。
- en: Building a draggable card list
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建可拖动卡片列表
- en: 'The first component of our UI library will be a list of Bulma card elements.
    Each card will display a title, a description, and an anchor link element. We
    will also be able to drag a card and change the order of the card list using the
    Angular CDK. Building our component will consist of the following tasks:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们 UI 库的第一个组件将是一个 Bulma 卡片元素的列表。每个卡片将显示一个标题、一个描述和一个锚点链接元素。我们还将能够使用 Angular CDK
    拖动卡片并改变卡片列表的顺序。构建我们的组件将包括以下任务：
- en: Displaying card data
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示卡片数据
- en: Adding drag-and-drop functionality
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加拖放功能
- en: In the following section, we will first see how to display data on the card
    list.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将首先了解如何在卡片列表上显示数据。
- en: Displaying card data
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示卡片数据
- en: 'Our Angular application should pass a list of cards as an input property to
    the component for displaying them. Let’s see how we can create a draggable card
    component as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 Angular 应用程序应将卡片列表作为输入属性传递给组件以显示它们。让我们看看如何创建一个可拖动的卡片组件，如下所示：
- en: 'Execute the following Angular CLI command to create an Angular component:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下 Angular CLI 命令来创建一个 Angular 组件：
- en: '[PRE7]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding command will create a `card-list` component in the `ui-controls`
    project of our Angular CLI workspace. The `--export` option will also export the
    component from `UiControlsModule`.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令将在 Angular CLI 工作区的 `ui-controls` 项目中创建一个 `card-list` 组件。`--export` 选项还将从
    `UiControlsModule` 中导出组件。
- en: The `UiControlsModule` class is already exported from the `public-api.ts` file.
    So, when our Angular application imports `UiControlsModule`, it will also have
    our component available.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UiControlsModule` 类已经从 `public-api.ts` 文件中导出。因此，当我们的 Angular 应用程序导入 `UiControlsModule`
    时，它也将拥有我们的组件。'
- en: 'Use the `generate` command of the Angular CLI to create an interface for the
    structure of card data, as follows:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Angular CLI 的 `generate` 命令创建一个用于卡片数据结构的接口，如下所示：
- en: '[PRE8]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding command will create a `card.ts` file in the `ui-controls` project
    of our workspace.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述命令将在我们的工作区 `ui-controls` 项目中创建一个 `card.ts` 文件。
- en: 'Open the `card.ts` file and add the following properties to the `Card` interface:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `card.ts` 文件，并将以下属性添加到 `Card` 接口中：
- en: '[PRE9]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Open the `public-api.ts` file and add the following `export` statements to
    make the component and the interface available to the library consumers:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `public-api.ts` 文件，并添加以下 `export` 语句，以便将组件和接口提供给库消费者：
- en: '[PRE10]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Open the `card-list.component.ts` file and use the `@Input` decorator to define
    an `input` property as follows:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `card-list.component.ts` 文件，并使用 `@Input` 装饰器定义一个 `input` 属性，如下所示：
- en: '[PRE11]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `cards` property will be set later from the Angular application with the
    card data we want to display.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`cards` 属性将在稍后由 Angular 应用程序设置，以显示我们想要显示的卡片数据。'
- en: 'Open the `card-list.component.html` file and replace its content with the following
    HTML template:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `card-list.component.html` 文件，并用以下 HTML 模板替换其内容：
- en: '[PRE12]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding template uses the Bulma `card` component and iterates over the
    `cards` component property to display each one, using the `*ngFor` directive.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前使用的模板使用了 Bulma 的 `card` 组件，并通过遍历 `cards` 组件属性来显示每一个，使用 `*ngFor` 指令。
- en: 'Open the `card-list.component.css` file and add the following CSS styles:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `card-list.component.css` 文件，并添加以下 CSS 样式：
- en: '[PRE13]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding styles, we use the `:host` selector to target the `div` element
    in the `host` element of our component and apply a `grid` style to display all
    cards in a single row.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的样式表中，我们使用 `:host` 选择器来定位组件的 `host` 元素中的 `div` 元素，并应用 `grid` 样式以在单行中显示所有卡片。
- en: 'Open the `ui-controls.module.ts` file and add `CommonModule` to the `imports`
    array of the `@NgModule` decorator, as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ui-controls.module.ts` 文件，并将 `CommonModule` 添加到 `@NgModule` 装饰器的 `imports`
    数组中，如下所示：
- en: '[PRE14]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `CommonModule` class is needed for the `*ngFor` directive in the card list
    component template.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`CommonModule` 类对于卡片列表组件模板中的 `*ngFor` 指令是必需的。'
- en: 'Our component is ready to accept and display data in a card list representation.
    Let’s see how to consume it from the Angular application as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的可组件已经准备好接受并显示以卡片列表形式呈现的数据。让我们看看如何从 Angular 应用程序中消费它，如下所示：
- en: 'First, execute the following command to build the component UI library:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，执行以下命令来构建组件 UI 库：
- en: '[PRE15]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The Angular CLI will start building the library, and it will have been completed
    as soon as you see the following output on the terminal:'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Angular CLI 将开始构建库，一旦你在终端上看到以下输出，它就已经完成：
- en: '![Εικόνα που περιέχει τραπέζι  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_09_02.png)'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![包含表格的图片 自动生成的描述](img/B18465_09_02.png)'
- en: Figure 9.2 – Library build output
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.2 – 图书馆构建输出
- en: 'Open the `app.module.ts` file and add the `UiControlsModule` class to the `imports`
    array of the `@NgModule` decorator, as follows:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.module.ts` 文件，并将 `UiControlsModule` 类添加到 `@NgModule` 装饰器的 `imports`
    数组中，如下所示：
- en: '[PRE16]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We import `UiControlsModule` from the `ui-controls` namespace, which is the
    library name, and not from the full absolute path in our workspace.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们从 `ui-controls` 命名空间导入 `UiControlsModule`，这是库的名称，而不是从我们的工作区中的完整绝对路径导入。
- en: 'Open the `app.component.ts` file and declare a `component` property of the
    `Card[]` type, as follows:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.component.ts` 文件，并声明一个 `Card[]` 类型的 `component` 属性，如下所示：
- en: '[PRE17]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We initialize the `cards` component property using demo data from the `assassins.ts`
    file, which you can find in the GitHub repository of the *Getting started* section.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用来自 `assassins.ts` 文件中的示例数据初始化 `cards` 组件属性，该文件可以在 *入门* 部分的 GitHub 仓库中找到。
- en: 'Open the `app.component.html` file and replace its content with the following
    HTML template:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.component.html` 文件，并用以下 HTML 模板替换其内容：
- en: '[PRE18]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To preview the application, run `ng serve` and open your browser at `http://localhost:4200`.
    You should then see something like this:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要预览应用程序，请运行 `ng serve` 并在浏览器中打开 `http://localhost:4200`。你应该会看到如下内容：
- en: '![Figure 9.2 – Card list component](img/B18465_09_03.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图9.2 – 卡片列表组件](img/B18465_09_03.png)'
- en: Figure 9.3 – Card list component
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 – 卡片列表组件
- en: The card list component displays data that a consumer application passed using
    the `cards` input property. In the following section, we will take our component
    a step further and make our cards able to change their location in the list.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 卡片列表组件显示消费者应用程序通过 `cards` 输入属性传递的数据。在下一节中，我们将进一步扩展我们的组件，使卡片能够在列表中改变它们的位置。
- en: Adding drag-and-drop functionality
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加拖放功能
- en: A feature of the card list component is that we will be able to change the location
    of a card by dragging and dropping it into the list. The order of the card list
    should be emitted back to the consumer application using an output property binding.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 卡片列表组件的一个特性是，我们将能够通过拖放卡片到列表中来改变卡片的位置。应该使用输出属性绑定将卡片列表的顺序返回给消费者应用程序。
- en: 'The Angular CDK contains a drag-and-drop module that we can use for this purpose.
    To do so, follow these steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CDK 包含一个拖放模块，我们可以用它来实现这个目的。为此，请按照以下步骤操作：
- en: 'Open the `ui-controls.module.ts` file and import `DragDropModule` from the
    `@angular/cdk/drag-drop` namespace, like this:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ui-controls.module.ts` 文件，并从 `@angular/cdk/drag-drop` 命名空间导入 `DragDropModule`，如下所示：
- en: '[PRE19]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the `DragDropModule` class to the `imports` array of the `@NgModule` decorator
    like this:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `DragDropModule` 类添加到 `@NgModule` 装饰器的 `imports` 数组中，如下所示：
- en: '[PRE20]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open the `card-list.component.html` file and modify the template as follows:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `card-list.component.html` 文件，并按如下方式修改模板：
- en: '[PRE21]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: First, we add the `cdkDrag` directive to each card element to be able to move
    it by dragging it. Then, we add the `cdkDropList` directive to the container element
    to mark it as a drop list. A drop list in the Angular CDK indicates that its contents
    can be re-ordered using drag-and-drop actions. We set the drag-and-drop orientation
    to `horizontal` because our card list is rendered in a single row, and we also
    bind a `sortCards` component method to the `cdkDropListDropped` event of the drop
    list.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们将 `cdkDrag` 指令添加到每个要拖动的卡片元素上，以便可以通过拖动来移动它。然后，我们将 `cdkDropList` 指令添加到容器元素上，将其标记为拖放列表。在
    Angular CDK 中，拖放列表表示其内容可以通过拖放操作重新排序。我们将拖放方向设置为 `horizontal`，因为我们的卡片列表以单行渲染，并且我们还绑定了一个
    `sortCards` 组件方法到拖放列表的 `cdkDropListDropped` 事件。
- en: 'Open the `card-list.component.ts` file and modify the `import` statements accordingly:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `card-list.component.ts` 文件并相应地修改 `import` 语句：
- en: '[PRE22]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create an output property using the `@Output` decorator and use it in the `sortCards`
    component method to emit the re-ordered list to the consumer of the component,
    as follows:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `@Output` 装饰器创建一个输出属性，并在 `sortCards` 组件方法中使用它来向组件的消费者发出重新排序的列表，如下所示：
- en: '[PRE23]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The card list component has now acquired drag-and-drop superpowers. Let’s give
    it a try, as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 卡片列表组件现在已经获得了拖放超级能力。让我们试一试，如下所示：
- en: 'Open the `app.component.html` file and add an event binding to the `cardChange`
    event of the `<lib-card-list>` component, as follows:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.component.html` 文件并为 `<lib-card-list>` 组件的 `cardChange` 事件添加事件绑定，如下所示：
- en: '[PRE24]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Open the `app.component.ts` file and create an `onCardChange` method to log
    the new card list as follows:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.component.ts` 文件并创建一个 `onCardChange` 方法来记录新的卡片列表，如下所示：
- en: '[PRE25]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Run the following command to build the library:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来构建库：
- en: '[PRE26]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Execute the `serve` command of the Angular CLI to start your application like
    this:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 Angular CLI 的 `serve` 命令以启动您的应用程序，如下所示：
- en: '[PRE27]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Try to drag and drop some of the cards from the list and notice the output in
    the **Console** window of your browser and the actual application.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试拖放列表中的某些卡片，并注意浏览器和实际应用程序的 **控制台** 窗口中的输出。
- en: The first component of our UI library is now packed with all the functionality
    to make it a drag-and-drop list. It can display a list passed from our Angular
    application in a Bulma card format. It can also change the order of each item
    in the list using the Angular CDK drag-and-drop module, and propagate the change
    back to our application.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们 UI 库的第一个组件现在已经包含了所有功能，使其成为一个拖放列表。它可以以 Bulma 卡片格式显示从我们的 Angular 应用程序传递过来的列表。它还可以使用
    Angular CDK 拖放模块改变列表中每个项目的顺序，并将更改回传到我们的应用程序。
- en: In the following section, we will create a second component of our library for
    copying data to the clipboard.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下部分，我们将创建我们库的第二个组件，用于将数据复制到剪贴板。
- en: Interacting with the clipboard
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与剪贴板交互
- en: 'The Angular CDK library contains a collection of Angular artifacts that we
    can use to interact with the system clipboard. Specifically, it includes a directive
    for copying data to the clipboard and an event binding for taking additional action
    when the content has been copied. Let’s see how we can integrate both in to our
    component library, as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CDK 库包含一组 Angular 实体，我们可以使用它们与系统剪贴板进行交互。具体来说，它包括一个用于复制数据到剪贴板的指令和一个事件绑定，当内容被复制时执行额外操作。让我们看看我们如何将两者集成到我们的组件库中，如下所示：
- en: 'Execute the following command of the Angular CLI to create a new Angular component
    in the library:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下 Angular CLI 命令在库中创建一个新的 Angular 组件：
- en: '[PRE28]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Export the newly generated component from the `public-api.ts` file as follows:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `public-api.ts` 文件中导出新生成的组件，如下所示：
- en: '[PRE29]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Open the `ui-controls.module.ts` file and import `ClipboardModule` from the
    `@angular/cdk/clipboard` namespace, like this:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ui-controls.module.ts` 文件并从 `@angular/cdk/clipboard` 命名空间导入 `ClipboardModule`，如下所示：
- en: '[PRE30]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add the `ClipboardModule` class to the `imports` array of the `@NgModule` decorator
    like this:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `ClipboardModule` 类添加到 `@NgModule` 装饰器的 `imports` 数组中，如下所示：
- en: '[PRE31]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Open the `copy-button.component.ts` file and declare the following component
    properties:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `copy-button.component.ts` 文件并声明以下组件属性：
- en: '[PRE32]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `data` property will be used to set clipboard data, and the `copied` event
    will fire when the data is successfully copied to the clipboard.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`data` 属性将用于设置剪贴板数据，当数据成功复制到剪贴板时，将触发 `copied` 事件。'
- en: 'Create a component method to trigger a `copied` output event, as follows:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个组件方法来触发一个 `copied` 输出事件，如下所示：
- en: '[PRE33]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Open the `copy-button.component.html` file and replace its content with the
    following HTML template:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`copy-button.component.html`文件并用以下HTML模板替换其内容：
- en: '[PRE34]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In the preceding template, we use a Bulma `button` component and attach two
    Angular CDK bindings to it. The `cdkCopyToClipboard` property binding indicates
    that the `data` component property will be copied to the clipboard when the button
    is clicked. The `cdkCopyToClipboardCopied` event binding will call the `onCopy`
    component method as soon as data has been copied to the clipboard successfully.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的模板中，我们使用了一个Bulma `button`组件并将其与两个Angular CDK绑定关联。`cdkCopyToClipboard`属性绑定表示当按钮被点击时，`data`组件属性将被复制到剪贴板。`cdkCopyToClipboardCopied`事件绑定将在数据成功复制到剪贴板后立即调用`onCopy`组件方法。
- en: 'Now that we have set up our component, let’s find out how to use it in our
    Angular application, as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了组件，让我们来看看如何在Angular应用程序中使用它，如下所示：
- en: 'Open the `app.component.html` file and add a `<div>` element that consists
    of an `<input>` element and the `<lib-copy-button>` component, as follows:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.html`文件并添加一个包含一个`<input>`元素和`<lib-copy-button>`组件的`<div>`元素，如下所示：
- en: '[PRE35]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In the previous template, we bind the `title` property of the component to the
    `<input>` element using the `ngModel` directive. We also bind it to the `data`
    property of the `<lib-copy-button>` component to copy the contents of the `<input>`
    element to the clipboard. We also bind the `copied` event to the `log` component
    method.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的模板中，我们使用`ngModel`指令将组件的`title`属性绑定到`<input>`元素，并将其绑定到`<lib-copy-button>`组件的`data`属性以复制`<input>`元素的内容到剪贴板。我们还绑定了`copied`事件到`log`组件方法。
- en: 'Open the `app.component.ts` file and create a `log` method for displaying an
    information message when data is copied to the clipboard, as follows:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.ts`文件并为显示当数据复制到剪贴板时的信息消息创建一个`log`方法，如下所示：
- en: '[PRE36]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Open the `app.module.ts` file and import `FormsModule`, like this:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.module.ts`文件并导入`FormsModule`，如下所示：
- en: '[PRE37]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `FormsModule` class is part of the `@angular/forms` npm package and is required
    when we want to use `ngModel` in our application.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`FormsModule`类是`@angular/forms` npm包的一部分，当我们在应用程序中使用`ngModel`时是必需的。'
- en: 'Execute the following command to build the library so that our application
    can recognize the new component:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以构建库，以便我们的应用程序可以识别新的组件：
- en: '[PRE38]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Run the application using `ng serve`, and you should get the following output:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ng serve`运行应用程序，你应该得到以下输出：
- en: '![Figure 9.3 – Clipboard interaction](img/B18465_09_04.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图9.3 – 剪贴板交互](img/B18465_09_04.png)'
- en: Figure 9.4 – Clipboard interaction
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 – 剪贴板交互
- en: 'Enter the value `my awesome library` into the textbox and click on the **Copy**
    button. You should get the following output:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本框中输入值`my awesome library`并点击**复制**按钮。你应该得到以下输出：
- en: '![Figure 9.4 – Alert message](img/B18465_09_05.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图9.4 – 警告信息](img/B18465_09_05.png)'
- en: Figure 9.5 – Alert message
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 – 警告信息
- en: We have successfully created a button that we can attach to an Angular application
    and use to interact with the clipboard directly!
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功创建了一个可以附加到Angular应用程序并用于直接与剪贴板交互的按钮！
- en: The Angular CDK contains various other components and behaviors that we can
    use in our Angular applications. When combined with a highly customizable CSS
    framework such as Bulma, it can create compelling and unique interfaces. Try them
    in your Angular projects and build a library with a rich set of components. In
    the following section, we will learn how to publish a library in the **npm package
    registry**.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CDK包含了许多其他组件和行为，我们可以在Angular应用程序中使用。当与高度可定制的CSS框架如Bulma结合使用时，它可以创建引人注目且独特的界面。在您的Angular项目中尝试它们，并构建一个具有丰富组件集的库。在下一节中，我们将学习如何将库发布到**npm包注册库**。
- en: Publishing an Angular library to npm
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Angular库发布到npm
- en: 'We have already seen how to build an Angular library and consume it in an Angular
    application when both exist in the same repository or organization. However, there
    are cases where you may want to make your library available to Angular projects
    outside your infrastructure via a public package registry such as npm. A usual
    case is when you want to make your library open source so that other members of
    the development community can benefit from this. Let’s see how to publish our
    `ui-controls` library to npm, as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何在同一存储库或组织中的Angular应用中构建Angular库并使用它。然而，有些情况下，您可能希望通过公共包注册表（如npm）使您的库对您的基础设施之外的Angular项目可用。一个常见的例子是，当您想使您的库开源，以便开发社区的成员可以从中受益时。让我们看看如何按照以下步骤发布我们的`ui-controls`库到npm：
- en: If you do not have an npm account, navigate to [https://www.npmjs.com/signup](https://www.npmjs.com/signup)
    to create one.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您没有npm账户，请导航到[https://www.npmjs.com/signup](https://www.npmjs.com/signup)创建一个。
- en: Open the `package.json` file that exists in the `projects\ui-controls` folder
    of the Angular CLI workspace and set the value of the `version` property to `1.0.0`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Angular CLI工作区中`projects\ui-controls`文件夹中存在的`package.json`文件，并将`version`属性的值设置为`1.0.0`。
- en: It is considered a good practice to follow **semantic versioning** in your library
    and publish it as version *1.0.0* for the first time. Angular also follows semantic
    versioning, and you can learn more about this at [https://semver.org](https://semver.org).
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在您的库中遵循**语义化版本控制**是一种良好的做法，并首次发布为版本*1.0.0*。Angular也遵循语义化版本控制，您可以在[https://semver.org](https://semver.org)了解更多相关信息。
- en: 'Open a terminal window and run the following Angular CLI command to build your
    library:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端窗口，并运行以下Angular CLI命令来构建您的库：
- en: '[PRE39]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Navigate to the `dist` folder where the Angular CLI has generated the final
    bundle of our library, as illustrated in the following code snippet:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到Angular CLI生成的我们库的最终包所在的`dist`文件夹，如下面的代码片段所示：
- en: '[PRE40]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Execute the following `npm` command to log in to the npm registry from the
    terminal:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中执行以下`npm`命令以登录到npm注册表：
- en: '[PRE41]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'After you have successfully authenticated with npm, run the following command
    to publish your library:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您成功通过npm认证后，运行以下命令来发布您的库：
- en: '[PRE42]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Running the preceding command will throw an error because the npm package registry
    already contains a `ui-controls` package. If you want to preview the result of
    the previous command, make sure that you change the `name` field in the `package.json`
    file of the library.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的命令将抛出一个错误，因为npm包注册表中已经包含了一个`ui-controls`包。如果您想预览前面命令的结果，请确保您更改了库的`package.json`文件中的`name`字段。
- en: Well done! Your library is now on the public npm registry and can be used by
    other developers in their Angular applications.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！您的库现在已在公共npm注册表中，其他开发者可以在他们的Angular应用中使用它。
- en: Always remember to change the `version` number in the `package.json` file of
    your library before publishing it. Otherwise, the npm registry will throw an error
    stating that the version you are trying to publish already exists.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 总是记得在发布库之前更改库的`package.json`文件中的`version`数字。否则，npm注册表将抛出一个错误，指出您试图发布的版本已存在。
- en: In the following section, we will learn how to use our library in non-Angular
    applications using Angular elements.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用我们的库在非Angular应用中使用Angular元素。
- en: Using components as Angular elements
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用组件作为Angular元素
- en: We have already learned how to use the Angular CLI to create an Angular library.
    We also saw how to publish our library to the npm registry so that other Angular
    projects can use it and benefit from it. In this section, we will go the extra
    mile and learn how to build our Angular library to be used in non-Angular environments.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何使用Angular CLI创建Angular库。我们还看到了如何将我们的库发布到npm注册表，以便其他Angular项目可以使用它并从中受益。在本节中，我们将更进一步，学习如何构建我们的Angular库以便在非Angular环境中使用。
- en: As we have already pointed out, the Angular framework is a cross-platform JavaScript
    framework in many ways. It can run on the server using **Angular Universal** and
    on mobile platforms. It can also run on a native desktop environment. In addition
    to those platforms, it can even run on web applications that are not built with
    Angular, using Angular elements.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经指出的，Angular框架在许多方面都是一个跨平台的JavaScript框架。它可以在服务器上使用**Angular Universal**运行，在移动平台上运行，也可以在原生桌面环境中运行。除了这些平台之外，它甚至可以在没有使用Angular构建的Web应用中使用Angular元素运行。
- en: 'Let’s see how we can convert our clipboard component into an Angular element,
    as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何将我们的剪贴板组件转换为 Angular 元素，如下所示：
- en: 'Execute the following Angular CLI command to generate a new Angular application
    in our workspace:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下 Angular CLI 命令以在我们的工作区中生成一个新的 Angular 应用程序：
- en: '[PRE43]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The preceding command will generate the `ui-elements` Angular application in
    the `projects` folder using default options.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的命令将在 `projects` 文件夹中使用默认选项生成 `ui-elements` Angular 应用程序。
- en: The Angular CLI does not currently support the use of Angular elements directly
    on an Angular library. Thus, we need to create an Angular application whose only
    purpose will be to export our components as Angular elements.
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Angular CLI 目前不支持在 Angular 库中直接使用 Angular 元素。因此，我们需要创建一个 Angular 应用程序，其唯一目的就是将我们的组件导出为
    Angular 元素。
- en: 'Navigate to the `projects\ui-elements` folder and run the following command
    to install the `@angular/elements` package:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `projects\ui-elements` 文件夹并运行以下命令以安装 `@angular/elements` 包：
- en: '[PRE44]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Open the `app.module.ts` file of the `ui-elements` application and modify it
    accordingly:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ui-elements` 应用程序的 `app.module.ts` 文件并相应地进行修改：
- en: '[PRE45]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Add a `constructor` to the `AppModule` class and inject the `Injector` service
    as follows:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `AppModule` 类中添加一个 `constructor` 并按照以下方式注入 `Injector` 服务：
- en: '[PRE46]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Implement an `ngDoBootstrap` method to create the custom element for the `CopyButtonComponent`
    class, as follows:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个 `ngDoBootstrap` 方法来为 `CopyButtonComponent` 类创建自定义元素，如下所示：
- en: '[PRE47]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The `ngDoBootstrap` method is used to hook in the manual bootstrap process of
    the Angular application. We use the `createCustomElement` method from the `@angular/elements`
    npm package to create a custom element, passing the class of the component and
    the injector. Finally, we use the `define` method of the `customElements` object
    to declare the custom element, passing the HTML selector that we want to use and
    the custom element as parameters.
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ngDoBootstrap` 方法用于挂钩 Angular 应用的手动引导过程。我们使用 `@angular/elements` npm 包中的 `createCustomElement`
    方法创建一个自定义元素，传递组件的类和注入器。最后，我们使用 `customElements` 对象的 `define` 方法声明自定义元素，传递我们想要使用的
    HTML 选择器和自定义元素作为参数。'
- en: Now that we have put into practice all the workings for converting an Angular
    component into an Angular element, it’s time to build it so that we can use it
    in a web application.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将将 Angular 组件转换为 Angular 元素的全部操作实施到位，是时候构建它以便我们可以在 Web 应用程序中使用它了。
- en: 'Building an Angular element differs from a standard build of an Angular application.
    When we build an Angular application, the Angular CLI generates different JavaScript
    bundles that contain the application source code, the Angular framework, and any
    third-party libraries. In an Angular element scenario, we only want to generate
    one bundle file containing our component. For this purpose, we will use the `ngx-build-plus`
    library, which can generate a single bundle, among other things. Let’s see how
    to install it and use it in our application, as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 构建 Angular 元素与构建标准的 Angular 应用程序不同。当我们构建 Angular 应用程序时，Angular CLI 会生成包含应用程序源代码、Angular
    框架和任何第三方库的不同 JavaScript 包。在 Angular 元素场景中，我们只想生成包含我们的组件的单个包文件。为此，我们将使用 `ngx-build-plus`
    库，它可以生成单个包，等等。让我们看看如何安装它并在我们的应用程序中使用它，如下所示：
- en: 'Execute the following command of the Angular CLI to install the `ngx-build-plus`
    package:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下 Angular CLI 命令以安装 `ngx-build-plus` 包：
- en: '[PRE48]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The preceding command will modify the `angular.json` file of the Angular CLI
    workspace to use the `ngx-build-plus` library to build the `ui-elements` application.
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的命令将修改 Angular CLI 工作区的 `angular.json` 文件以使用 `ngx-build-plus` 库构建 `ui-elements`
    应用程序。
- en: 'Run the following command of the Angular CLI to build the application:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下 Angular CLI 命令来构建应用程序：
- en: '[PRE49]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The previous command will build the `ui-elements` application and produce a
    single bundle for all application code.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的命令将构建 `ui-elements` 应用程序并生成包含所有应用程序代码的单个包。
- en: Copy the `dist\ui-elements` folder to another location of your choice on your
    hard disk and open the `index.html` file, using your editor.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `dist\ui-elements` 文件夹复制到您硬盘上的另一个位置，并使用您的编辑器打开 `index.html` 文件。
- en: 'Remove the `<base>` tag from the `<head>` element and add the Bulma CSS minified
    file using a **content delivery network** (**CDN**), as follows:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `<head>` 元素中删除 `<base>` 标签，并使用 **内容分发网络**（**CDN**）添加 Bulma CSS 压缩文件，如下所示：
- en: '[PRE50]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Replace the `<app-root>` selector with the following HTML snippet in the `<body>`
    element:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<body>` 元素中将 `<app-root>` 选择器替换为以下 HTML 片段：
- en: '[PRE51]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Insert the following JavaScript code *after* the `<div>` element:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In the preceding script, we communicate with the component that is hidden behind
    the Angular element using vanilla JavaScript. First, we query the global `document`
    object to get a reference to the Angular element. Then, we set the `data` input
    property using the `setAttribute` method of the element. Finally, we listen for
    the `copied` output event by attaching an event listener using the `addEventListener`
    method.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use a web server to serve the `ui-elements` folder and open the `index.html`
    file using your browser. You should see the following output:![Figure 9.6 – Angular
    element](img/B18465_09_06.png)
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 9.6 – Angular element
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you do not want to install a separate web server, you can use the Live Server
    VSCode extension.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on the **Copy** button, and you should see the following alert dialog:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Alert dialog](img/B18465_09_07.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – Alert dialog
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: We have managed to use an Angular component from our UI component library as
    a native HTML element in a web application that has nothing to do with Angular!
    The custom element looks and behaves the same as its Angular counterpart. The
    only difference is how we set up and configure the custom element in our web application
    using plain JavaScript.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we built a component UI library that we can use in our Angular
    applications. Initially, we learned how to use the Angular CLI to create an Angular
    library. We scaffolded a new Angular CLI workspace that contained our Angular
    library, along with an Angular application for testing it.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: We then used the Angular CDK with the Bulma CSS framework to build the UI components
    of our library. We created a card list that can be re-ordered using drag-and-drop
    features and a button for copying content to the clipboard.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: We also saw how to publish our library in the npm registry to use it in other
    Angular projects. Finally, we converted it into custom elements using Angular
    elements for distribution to non-Angular applications.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: In the next project, which will be the final project in the book, we will learn
    how to customize the Angular CLI to create our generation schematics.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Practice questions
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s take a look at a few practice questions:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: How do we generate a new Angular library using the Angular CLI?
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we make an Angular artifact of our library public?
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which CSS selector do we use to target the `host` element of an Angular component?
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we mark an element as draggable in the Angular CDK?
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which method do we use to re-order a draggable list of items?
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Angular CDK directive is responsible for passing data to the clipboard?
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we create a single bundle using the `ngx-build-plus` library?
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we pass data to and from an Angular element?
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some links to build upon what we learned in the chapter:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular libraries overview: [https://angular.io/guide/libraries](https://angular.io/guide/libraries)'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Creating Angular libraries: [https://angular.io/guide/creating-libraries](https://angular.io/guide/creating-libraries)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Angular库：[https://angular.io/guide/creating-libraries](https://angular.io/guide/creating-libraries)
- en: 'Bulma CSS: [https://bulma.io](https://bulma.io)'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bulma CSS：[https://bulma.io](https://bulma.io)
- en: 'Angular CDK: [https://material.angular.io/cdk/categories](https://material.angular.io/cdk/categories)'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular CDK：[https://material.angular.io/cdk/categories](https://material.angular.io/cdk/categories)
- en: 'Drag-and-drop module: [https://material.angular.io/cdk/drag-drop/overview](https://material.angular.io/cdk/drag-drop/overview)'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拖放模块：[https://material.angular.io/cdk/drag-drop/overview](https://material.angular.io/cdk/drag-drop/overview)
- en: 'Clipboard module: [https://material.angular.io/cdk/clipboard/overview](https://material.angular.io/cdk/clipboard/overview)'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剪贴板模块：[https://material.angular.io/cdk/clipboard/overview](https://material.angular.io/cdk/clipboard/overview)
- en: 'Angular elements overview: [https://angular.io/guide/elements](https://angular.io/guide/elements)'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular元素概述：[https://angular.io/guide/elements](https://angular.io/guide/elements)
- en: '`ngx-build-plus`: [https://www.npmjs.com/package/ngx-build-plus](https://www.npmjs.com/package/ngx-build-plus)'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngx-build-plus`：[https://www.npmjs.com/package/ngx-build-plus](https://www.npmjs.com/package/ngx-build-plus)'
- en: Join our community on Discord
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的社区Discord空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/AngularProjects3e](https://packt.link/AngularProjects3e)'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/AngularProjects3e](https://packt.link/AngularProjects3e)'
- en: '![](img/QR_Code89405936498927781.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_Code89405936498927781.png)'
