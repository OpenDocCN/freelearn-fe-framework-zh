["```js\nimport { ThemeContext } from '@/contexts/ThemeContext.js'\nexport default function SomeComponent () {\n  const theme = useContext(ThemeContext)\n  // â€¦ \n```", "```js\n    $ cp -R Chapter10_3 Chapter12_1 \n    ```", "```js\n    import { useContext } from 'react'\n    import { ThemeContext } from '@/contexts/ThemeContext.js' \n    ```", "```js\n    export function useTheme() {\n      return useContext(ThemeContext)\n    } \n    ```", "```js\n    import { useContext } from 'react'\n    import { ThemeContext } from '@/contexts/ThemeContext.js' \n    ```", "```js\nimport { useTheme } from '@/hooks/theme.js' \n```", "```js\n    export function Post({ id }) {\n      const theme = **useTheme****()** \n    ```", "```js\n    import { useContext } from 'react'\n    import { ThemeContext } from '@/contexts/ThemeContext.js' \n    ```", "```js\nimport { useTheme } from '@/hooks/theme.js' \n```", "```js\n    export function PostListItem({ id, title, author }) {\n      const theme = **useTheme****()** \n    ```", "```js\n    $ npm run dev \n    ```", "```js\n    $ cp -R Chapter12_1 Chapter12_2 \n    ```", "```js\n    import { useLocalStorage } from '@uidotdev/usehooks' \n    ```", "```js\n    export function useUser() {\n      const [username, setUsername] = useLocalStorage('username', null) \n    ```", "```js\n     const isLoggedIn = username !== null \n    ```", "```js\n     function register(username) {\n        setUsername(username)\n      }\n      function login(username) {\n        setUsername(username)\n      }\n      function logout() {\n        setUsername(null)\n      } \n    ```", "```js\n     return { username, isLoggedIn, register, login, logout }\n    } \n    ```", "```js\n    import { useLocalStorage } from '@uidotdev/usehooks' \n    ```", "```js\nimport { useUser } from './hooks/user.js' \n```", "```js\n    export function App() {\n    **const** **{ isLoggedIn } =** **useUser****()** \n    ```", "```js\n     {**isLoggedIn** && <CreatePost />} \n    ```", "```js\n    import { useLocalStorage } from '@uidotdev/usehooks' \n    ```", "```js\nimport { useUser } from '@/hooks/user.js' \n```", "```js\n    export function UserBar() {\n    **const** **{ isLoggedIn } =** **useUser****()** \n    ```", "```js\n     if (**isLoggedIn**) { \n    ```", "```js\n    import { useLocalStorage } from '@uidotdev/usehooks' \n    ```", "```js\nimport { useUser } from '@/hooks/user.js' \n```", "```js\n    export function Register() {\n    **const** **{ register } =** **useUser****()** \n    ```", "```js\n     const username = e.target.elements.username.value\n    **register**(username)\n      } \n    ```", "```js\n    import { useLocalStorage } from '@uidotdev/usehooks' \n    ```", "```js\nimport { useUser } from '@/hooks/user.js' \n```", "```js\n    export function Login() {\n    **const** **{ login } =** **useUser****()** \n    ```", "```js\n     const username = e.target.elements.username.value\n    **login**(username)\n      } \n    ```", "```js\n    import { useLocalStorage } from '@uidotdev/usehooks' \n    ```", "```js\nimport { useUser } from '@/hooks/user.js' \n```", "```js\n    export function Logout() {\n    **const** **{ username, logout } =** **useUser****()** \n    ```", "```js\n     function handleSubmit(e) {\n        e.preventDefault()\n    **logout****()**\n      } \n    ```", "```js\n    import { **useLocalStorage,** useHistoryState } from '@uidotdev/usehooks' \n    ```", "```js\n    import { useUser } from '@/hooks/user.js' \n    ```", "```js\n    export function CreatePost() {\n    **const** **{ username } =** **useUser****()** \n    ```", "```js\n    import { useLocalStorage } from '@uidotdev/usehooks' \n    ```", "```js\nimport { useUser } from '@/hooks/user.js' \n```", "```js\n    export function CreateComment({ addComment }) {\n    **const** **{ username } =** **useUser****()** \n    ```", "```js\n    import { useLocalStorage } from '@uidotdev/usehooks' \n    ```", "```js\nimport { useUser } from '@/hooks/user.js' \n```", "```js\n    export function CommentList() {\n    **const** **{ isLoggedIn } =** **useUser****()** \n    ```", "```js\n     {**isLoggedIn** && <CreateComment addComment={addComment} />} \n    ```", "```js\n$ npm run dev \n```", "```js\n    $ cp -R Chapter12_2 Chapter12_3 \n    ```", "```js\n    import { useSuspenseQuery, useMutation } from '@tanstack/react-query'\n    import {\n      fetchPosts,\n      fetchPost,\n      searchPosts,\n      createPost,\n      queryClient,\n    } from '@/api.js' \n    ```", "```js\n    export function useAPIFetchPosts({ featured }) {\n      const { data } = useSuspenseQuery({\n        queryKey: ['posts', featured],\n        queryFn: async () => await fetchPosts({ featured }),\n      })\n      return data\n    } \n    ```", "```js\n    export function useAPIFetchPost({ id }) {\n      const { data } = useSuspenseQuery({\n        queryKey: ['post', id],\n        queryFn: async () => await fetchPost({ id }),\n      })\n      return data\n    } \n    ```", "```js\n    export function useAPISearchPosts({ query }) {\n      const { data } = useSuspenseQuery({\n        queryKey: ['posts', query],\n        queryFn: async () => await searchPosts(query),\n      })\n      return data\n    } \n    ```", "```js\n    export function useAPICreatePost() {\n      const createPostMutation = useMutation({\n        mutationFn: createPost,\n        onSuccess: () => {\n          queryClient.invalidateQueries(['posts'])\n        },\n      })\n      return createPostMutation.mutateAsync\n    } \n    ```", "```js\n    import { useSuspenseQuery } from '@tanstack/react-query'\n    import { fetchPosts } from '@/api.js' \n    ```", "```js\nimport { useAPIFetchPosts } from '@/hooks/api.js' \n```", "```js\n    export function PostFeed({ featured = false }) {\n    **const** **posts =** **useAPIFetchPosts****({ featured })**\n    return <PostList posts={**posts**} />\n    } \n    ```", "```js\n    import { useSuspenseQuery } from '@tanstack/react-query'\n    import { fetchPost } from '@/api.js' \n    ```", "```js\nimport { useAPIFetchPost } from '@/hooks/api.js' \n```", "```js\n    export function Post({ id }) {\n      const theme = useTheme()\n    **const** **{ title, content, author } =** **useAPIFetchPost****({ id })**\n    return ( \n    ```", "```js\n    import { useSuspenseQuery } from '@tanstack/react-query'\n    import { searchPosts } from '@/api.js' \n    ```", "```js\nimport { useAPISearchPosts } from '@/hooks/api.js' \n```", "```js\n    export function PostSearchResults({ query }) {\n    **const** **posts =** **useAPISearchPosts****({ query })**\n    return <PostList posts={**posts**} />\n    } \n    ```", "```js\n    import { useMutation } from '@tanstack/react-query'\n    import { createPost, queryClient } from '@/api.js' \n    ```", "```js\nimport { useAPICreatePost } from '@/hooks/api.js' \n```", "```js\n     const createPostMutation = useMutation({\n        mutationFn: createPost,\n        onSuccess: () => {\n          queryClient.invalidateQueries(['posts'])\n        },\n      }) \n    ```", "```js\n const createPost = useAPICreatePost() \n```", "```js\n     const newPost = { title, content, author: username, featured: false }\n          try {\n            const result = await **createPost**(post)\n            clear()\n            navigate(`/post/${result.id}`)\n          } catch (err) {\n            return err\n          } \n    ```", "```js\n    $ npm run dev \n    ```", "```js\n    $ cp -R Chapter12_3 Chapter12_4 \n    ```", "```js\n    import { useState, useEffect } from 'react'\n    import { useDebouncedCallback } from 'use-debounce'\n    import { useHistoryState } from '@uidotdev/usehooks' \n    ```", "```js\n    export function useDebouncedHistoryState(initialState, timeout) { \n    ```", "```js\n     const { state, set, undo, redo, clear, canUndo, canRedo } =\n        useHistoryState(initialState) \n    ```", "```js\n     const [content, setContent] = useState(initialState) \n    ```", "```js\n     const debounced = useDebouncedCallback((value) =>\n     set(value), timeout) \n    ```", "```js\n     useEffect(() => {\n        debounced.cancel()\n        setContent(state)\n      }, [state, debounced]) \n    ```", "```js\n     function handleContentChange(e) {\n        const { value } = e.target\n    setContent(value)\n        debounced(value)\n      } \n    ```", "```js\n     return { content, handleContentChange, undo, redo, clear, canUndo,\n     canRedo }\n    } \n    ```", "```js\n    import { useActionState**, useState, useEffect** } from 'react'\n    **import** **{ useDebouncedCallback }** **from****'use-debounce'**\n    **import** **{ useHistoryState }** **from****'@uidotdev/usehooks'** \n    ```", "```js\n    import { useDebouncedHistoryState } from '@/hooks/debouncedHistoryState.js' \n    ```", "```js\n     const { state, set, undo, redo, clear, canUndo, canRedo } =\n        useHistoryState('')\n      const [content, setContent] = useState('')\n      const debounced = useDebouncedCallback((value) => set(value), 200)\n      useEffect(() => {\n        debounced.cancel()\n        setContent(state)\n      }, [state, debounced]) \n    ```", "```js\n const { content, handleContentChange, undo, redo, clear, canUndo,\n    canRedo } =\nuseDebouncedHistoryState('', 200) \n```", "```js\n     function handleContentChange(e) {\n        const { value } = e.target\n    setContent(value)\n        debounced(value)\n      } \n    ```", "```js\n    $ npm run dev \n    ```", "```js\n    $ cp -R Chapter12_4 Chapter12_5 \n    ```", "```js\n    $ npm install --save-exact --save-dev vitest@3.0.5 @testing-library/react@16.2.0 jsdom@26.0.0 \n    ```", "```js\n     \"scripts\": {\n    **\"test\"****:** **\"vitest\"****,** \n    ```", "```js\n     rewrite: (path) => path.replace(/^\\/api/, ''),\n          },\n        },\n      },\n    **test****: {**\n    **environment****:** **'jsdom'****,**\n     **},**\n    }) \n    ```", "```js\n    import { useState } from 'react' \n    ```", "```js\n    export function useCounter(initialCount = 0) { \n    ```", "```js\n     const [count, setCount] = useState(initialCount) \n    ```", "```js\n     function increment() {\n        setCount((count) => count + 1)\n      } \n    ```", "```js\n     function reset() {\n        setCount(initialCount)\n      } \n    ```", "```js\n     return { count, increment, reset }\n    } \n    ```", "```js\n    import { describe, test, expect } from 'vitest'\n    import { renderHook, act } from '@testing-library/react' \n    ```", "```js\n    import { useCounter } from './counter.js' \n    ```", "```js\n    describe('Counter Hook', {}, () => { \n    ```", "```js\n     test('should return 0 by default', {}, () => { \n    ```", "```js\n     const { result } = renderHook(() => useCounter()) \n    ```", "```js\n     expect(result.current.count).toBe(0)\n      }) \n    ```", "```js\n     test('should initially return initial count', {}, () => {\n        const { result } = renderHook(() => useCounter(123))\n        expect(result.current.count).toBe(123)\n      }) \n    ```", "```js\n     test('should increment counter when increment() is called', {}, () => {\n        const { result } = renderHook(() => useCounter(0)) \n    ```", "```js\n     act(() => result.current.increment()) \n    ```", "```js\n     expect(result.current.count).toBe(1)\n      }) \n    ```", "```js\n     test('should reset to initial value', {}, () => { \n    ```", "```js\n     let initial = 0\n    const { result, rerender } = renderHook(() =>\n     useCounter(initial)) \n    ```", "```js\n     initial = 123\n    rerender() \n    ```", "```js\n     act(() => result.current.reset())\n        expect(result.current.count).toBe(123)\n      })\n    }) \n    ```", "```js\n    $ npm test \n    ```", "```js\n    import { describe, test, expect } from 'vitest'\n    import { renderHook } from '@testing-library/react'\n    import { ThemeContext } from '@/contexts/ThemeContext.js'\n    import { useTheme } from './theme.js' \n    ```", "```js\n    function ThemeContextWrapper({ children }) { \n    ```", "```js\n     return (\n        <ThemeContext.Provider value={{ primaryColor: 'deepskyblue' }}>\n          {children}\n        </ThemeContext.Provider>\n      )\n    } \n    ```", "```js\n    describe('Theme Hook', {}, () => { \n    ```", "```js\n     test('should return the primaryColor defined by the context',\n     {}, () => { \n    ```", "```js\n     const { result } = renderHook(() => useTheme(), {\n          wrapper: ThemeContextWrapper,\n        }) \n    ```", "```js\n     expect(result.current.primaryColor).toBe('deepskyblue')\n      })\n    }) \n    ```", "```js\n    $ npm test \n    ```", "```js\n    import { describe, test, expect } from 'vitest'\n    import { renderHook, act } from '@testing-library/react'\n    import { useUser } from './user.js' \n    ```", "```js\n    describe('User Hook', {}, () => { \n    ```", "```js\n     test('should not be logged in by default', {}, () => {\n        const { result } = renderHook(() => useUser())\n        expect(result.current.isLoggedIn).toBe(false)\n        expect(result.current.username).toBe(null)\n      }) \n    ```", "```js\n     test('should be logged in after registering', {}, () => {\n        const { result } = renderHook(() => useUser())\n        act(() => result.current.register('testuser'))\n        expect(result.current.isLoggedIn).toBe(true)\n        expect(result.current.username).toBe('testuser')\n      }) \n    ```", "```js\n     test('should be logged in after logging in', {}, () => {\n        const { result } = renderHook(() => useUser())\n        act(() => result.current.login('testuser'))\n        expect(result.current.isLoggedIn).toBe(true)\n        expect(result.current.username).toBe('testuser')\n      }) \n    ```", "```js\n     test('should be logged out after logout', {}, () => {\n        const { result } = renderHook(() => useUser())\n        act(() => result.current.login('testuser'))\n        act(() => result.current.logout())\n        expect(result.current.isLoggedIn).toBe(false)\n        expect(result.current.username).toBe(null)\n      })\n    }) \n    ```", "```js\n    import { describe, test, expect } from 'vitest'\n    import { renderHook, act, waitFor } from '@testing-library/react'\n    import { useDebouncedHistoryState } from './debouncedHistoryState.js' \n    ```", "```js\n    describe('Debounced History State Hook', {}, () => {\n      test('should return initial state as content', {}, () => {\n        const { result } = renderHook(() => useDebouncedHistoryState('', 10))\n        expect(result.current.content).toBe('')\n      }) \n    ```", "```js\n     test('should update content immediately', {}, () => {\n        const { result } = renderHook(() => useDebouncedHistoryState('',\n     10))\n        act(() =>\n          result.current.handleContentChange({ target: {\n             value: 'new content' } }),\n        )\n        expect(result.current.content).toBe('new content')\n      }) \n    ```", "```js\n     test('should only update history state after debounce', {},\n      async () => { \n    ```", "```js\n     const { result } = renderHook(() => useDebouncedHistoryState('',\n     10)) \n    ```", "```js\n     act(() =>\n          result.current.handleContentChange({ target: {\n            value: 'new content' } }),\n        ) \n    ```", "```js\n     expect(result.current.canUndo).toBe(false) \n    ```", "```js\n     await waitFor(() => {\n          expect(result.current.canUndo).toBe(true)\n        })\n      })\n    }) \n    ```", "```js\n$ npm test \n```"]