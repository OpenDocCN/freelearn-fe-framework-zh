- en: Chapter 1. Getting Started with ReactJS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章：ReactJS 入门
- en: 'In this chapter, we are going to look at an overview of ReactJS—what it is
    and some highlights on what this powerful and flexible library does. We''ll also
    learn how to download and make it work in a small application. In this chapter,
    we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 ReactJS 的概述——它是什么以及这个强大且灵活的库的一些亮点。我们还将学习如何下载并在小型应用程序中使用它。本章将涵盖以下主题：
- en: Introducing ReactJS
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 ReactJS
- en: Downloading ReactJS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载 ReactJS
- en: Tools
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具
- en: Trying ReactJS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试 ReactJS
- en: Introducing ReactJS
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 ReactJS
- en: '**ReactJS** is a JavaScript library, created by Facebook and Instagram, in
    order to build user interfaces (UIs) that can respond to users'' input events
    along with creating and maintaining states. States are used to maintain changes
    to components, which will be covered in detail in later chapters. The page loads
    faster by comparing only the changed and the updated part of the web page (we
    will cover Virtual **DOM** (**Document Object Model**) in more detail in [Chapter
    4](part0029_split_000.html#page "Chapter 4. Stateful Components and Events"),
    *Stateful Components and Events*). React provides a one-way data flow that reduces
    complexity compared with a traditional data-binding system, which facilitates
    creating reusable and encapsulated components. We will also explore React data
    flow in *Stateful Components and Events* chapter and how to make your UI components
    more reusable in [Chapter 7](part0044_split_000.html#page "Chapter 7. Making Your
    Component Reusable"), *Making Your Components Reusable*.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**ReactJS** 是一个由 Facebook 和 Instagram 创建的 JavaScript 库，旨在构建能够响应用户输入事件的用户界面（UI），同时创建和维护状态。状态用于维护组件的变化，这将在后续章节中详细说明。页面通过仅比较网页的更改和更新部分来加快加载速度（我们将在第
    4 章“有状态组件和事件”中更详细地介绍虚拟 **DOM**（**文档对象模型**））。与传统的数据绑定系统相比，React 提供了一向数据流，这降低了复杂性，有助于创建可重用和封装的组件。我们还将探索
    React 数据流在第 7 章“使你的组件可重用”中，以及如何使你的 UI 组件更具可重用性。在第 7 章“使你的组件可重用”中。'
- en: 'ReactJS is not just another JavaScript library though many developers consider
    it to be the V of the MVC application. It drives you through building reusable
    components, rethinking your UI and best practices. Nowadays, performance and portability
    are vital to build user interfaces, mainly due to the large use of Internet-accessible
    devices and the fast-paced developmental phases of the projects. This can result
    in complex frontend code. The need for using a library that helps your code to
    grow in both performance and quality is really important; otherwise, you just
    end up writing big HTML files with UI logic everywhere that takes ages to modify
    and can compromise code quality. ReactJS encourages the best practices shown here:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管许多开发者认为 ReactJS 只是 MVC 应用程序的 V，但它驱使你构建可重用组件，重新思考你的 UI 和最佳实践。如今，性能和可移植性对于构建用户界面至关重要，这主要归因于大量使用互联网可访问设备和项目快速的开发阶段。这可能导致前端代码复杂。使用一个有助于你的代码在性能和质量上增长的库的需求真的很重要；否则，你只会写出包含
    UI 逻辑的大 HTML 文件，修改起来耗时且可能降低代码质量。ReactJS 鼓励以下最佳实践：
- en: Following a pattern
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟随一个模式
- en: Separating concerns
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分离关注点
- en: Splitting your UI into components
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 UI 分解为组件
- en: Communication between components with one-way data flow
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件之间的一向数据流通信
- en: Use of properties and states appropriately
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确使用属性和状态
- en: ReactJS is a library that takes care of the UI (Views) differently from a framework.
    Let's say we are building a **Single Page Application** (**SPA**) and we want
    to handle a routing system, we can use whatever library we want that deals with
    routing. This applies to every other part of the technology stack required to
    build a SPA except the UI or, as some say, the View, when working on an MVC/MV*
    architecture. In the ReactJS world, when you're talking about the view, actually
    you're talking about a component. They are a little different from each other.
    A React component holds both logic and behavior of the View. In general, a single
    component represents a small part of the View, whereas many of these components
    together represent the whole View of the application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS是一个库，它以与框架不同的方式处理UI（视图）。假设我们正在构建一个**单页应用**（SPA），并希望处理路由系统，我们可以使用任何我们想要的处理路由的库。这适用于构建SPA所需的技术堆栈的每个其他部分，除了UI或，如一些人所说，当在MVC/MV*架构上工作时，视图。在ReactJS的世界里，当你谈论视图时，实际上你是在谈论一个组件。它们之间有一点不同。React组件持有视图的逻辑和行为。一般来说，一个组件代表视图的一个小部分，而许多这样的组件一起代表应用的整体视图。
- en: We will be discussing more about MVC/MV* and FLUX architecture in [Chapter 6](part0036_split_000.html#page
    "Chapter 6. Reacting with Flux"), *Reacting with FLUX*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第6章](part0036_split_000.html#page "第6章。使用FLUX反应")*使用FLUX反应*中更详细地讨论MVC/MV*和FLUX架构。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: MVC stands for Model View Controller and MV* for Model View Whatever.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: MVC代表模型-视图-控制器，而MV*代表模型-视图-任何东西。
- en: It is very straightforward to build or change just a small part of your web
    application. Facebook did that with their commenting interface. They replaced
    it with one made in ReactJS. There is detailed code at [https://facebook.github.io/react/docs/tutorial.html](https://facebook.github.io/react/docs/tutorial.html)
    about how the comments appear in Facebook using ReactJS.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 构建或更改您Web应用的一个小部分非常简单。Facebook就是用他们的评论界面做到了这一点。他们用ReactJS制作的一个新界面替换了它。有关如何在Facebook上使用ReactJS显示评论的详细代码，请参阅[https://facebook.github.io/react/docs/tutorial.html](https://facebook.github.io/react/docs/tutorial.html)。
- en: This commenting interface, which the Facebook development team explained, gives
    us the live updates and *Optimistic commenting*, in which the comments are shown
    in the list before having been saved on the server. There is also a Facebook developer
    plugin, which enables users to add comments in your website using their Facebook
    accounts ([https://developers.facebook.com/docs/plugins/comments](https://developers.facebook.com/docs/plugins/comments)).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个由Facebook开发团队解释的评论界面为我们提供了实时更新和*乐观评论*，其中评论在服务器上保存之前就显示在列表中。还有一个Facebook开发者插件，允许用户使用他们的Facebook账户在您的网站上添加评论（[https://developers.facebook.com/docs/plugins/comments](https://developers.facebook.com/docs/plugins/comments)）。
- en: One of my experiences was to build a survey app in ReactJS and place it in some
    web application already in production. ReactJS provides a bunch of life cycle
    events, which facilitates the integration with other libraries, plugins, and even
    frameworks. In [Chapter 5](part0033_split_000.html#page "Chapter 5. Component
    Life cycle and Newer ECMAScript in React"), *Component Life Cycle*, we will go
    through all the life cycle phases of a React component, and in [Chapter 7](part0044_split_000.html#page
    "Chapter 7. Making Your Component Reusable"), *Making Your Component Reusable*,
    we will be incorporating validations and organizing our code using Mixins.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我的一个经验是在ReactJS中构建一个调查应用，并将其放置在生产中的某个Web应用中。ReactJS提供了一组生命周期事件，这有助于与其他库、插件甚至框架的集成。在[第5章](part0033_split_000.html#page
    "第5章。组件生命周期和React中的新ECMAScript")*组件生命周期*中，我们将讨论React组件的所有生命周期阶段，而在[第7章](part0044_split_000.html#page
    "第7章。使您的组件可重用")*使您的组件可重用*中，我们将引入验证并使用Mixins来组织我们的代码。
- en: ReactJS understands the UI elements as objects. When building React components,
    we will modularize the code by encapsulating the view logic and the view representation.
    This is another feature that supports componentization and is one of the reasons
    for Virtual DOM to work. React code can also be written in another syntax, JSX
    (an extension to ECMASCRIPT), instead of JavaScript. Although it is not mandatory
    to use, it is easy to use and increases the readability of the code. We're going
    to dig more into JSX and see how it works and why it's necessary in [Chapter 2](part0020_split_000.html#page
    "Chapter 2. Exploring JSX and the ReactJS Anatomy"), *Exploring JSX*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS 将 UI 元素视为对象。在构建 React 组件时，我们将通过封装视图逻辑和视图表示来模块化代码。这是支持组件化的另一个特性，也是虚拟
    DOM 能够工作的原因之一。React 代码也可以用另一种语法编写，即 JSX（ECMASCRIPT 的扩展），而不是 JavaScript。尽管使用 JSX
    不是强制性的，但它易于使用，并提高了代码的可读性。我们将在 [第 2 章](part0020_split_000.html#page "第 2 章. 探索
    JSX 和 ReactJS 的结构") *探索 JSX* 中深入了解 JSX 并了解它是如何工作的以及为什么它是必要的。
- en: Who uses ReactJS?
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谁使用 ReactJS？
- en: 'ReactJS is one of the emerging JavaScript libraries to build web UI components,
    and some big companies are already using it in production. They are as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS 是用于构建 Web UI 组件的兴起 JavaScript 库之一，一些大型公司已经在生产中使用它。它们如下：
- en: The Instagram website
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Instagram 网站
- en: Facebook comments, page insights, business management tools, Netflix, Yahoo,
    Atlassian, and most new JS development
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Facebook 评论、页面洞察、商业管理工具、Netflix、Yahoo、Atlassian 以及大多数新的 JS 开发
- en: New JS development for Khan Academy, PayPal, AirBnb, Discovery Digital Networks,
    and many more
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的 JS 开发用于 Khan Academy、PayPal、AirBnb、Discovery Digital Networks 以及更多
- en: Some projects inside *The New York Times*
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些在 *《纽约时报》* 内的项目
- en: Downloading ReactJS
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载 ReactJS
- en: Before we start coding some ReactJS, we need to download it. You can download
    ReactJS through their website, [http://facebook.github.io/react/downloads.html](http://facebook.github.io/react/downloads.html).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写一些 ReactJS 代码之前，我们需要下载它。你可以通过他们的网站下载 ReactJS，[http://facebook.github.io/react/downloads.html](http://facebook.github.io/react/downloads.html)。
- en: 'At the time of writing this book, ReactJS is currently at version 0.14.7\.
    Two versions of ReactJS scripts are provided—one is for development, which has
    all the core code with comments if you want to debug or even contribute to them.
    The other one is for production, which includes extra performance optimizations.
    Here are the links of the versions of the script for downloading:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写这本书的时候，ReactJS 目前处于版本 0.14.7。提供了两种 ReactJS 脚本版本——一个是用于开发的，如果你想要调试或者甚至贡献代码，它包含了所有核心代码和注释。另一个是用于生产的，它包含了额外的性能优化。以下是脚本版本的下载链接：
- en: '[http://fb.me/react-0.14.7.js](http://fb.me/react-0.14.7.js) (development)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://fb.me/react-0.14.7.js](http://fb.me/react-0.14.7.js)（开发版）'
- en: '[http://fb.me/react-0.14.7.min.js](http://fb.me/react-0.14.7.min.js) (production)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://fb.me/react-0.14.7.min.js](http://fb.me/react-0.14.7.min.js)（生产版）'
- en: Versions of 0.13.0 and higher contain a huge set of enhancements. There is a
    support for the ES6 class syntax and removal of mix-ins, which are covered in
    [Chapter 5](part0033_split_000.html#page "Chapter 5. Component Life cycle and
    Newer ECMAScript in React"), *Component Life Cycle and Newer ECMAscript in ReactJS*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 0.13.0 版本及更高版本包含了一组巨大的增强功能。它支持 ES6 类语法，并移除了混合模式，这些内容在 [第 5 章](part0033_split_000.html#page
    "第 5 章. 组件生命周期和 ReactJS 中的新 ECMAScript") *组件生命周期和 ReactJS 中的新 ECMAScript* 中有所介绍。
- en: Inside the ReactJS downloads page, there are other versions of the ReactJS script
    with add-ons. This script extends the ReactJS library to support animations and
    transitions, and also provides some other utilities that are not part of core
    React. There is no need to download this version for now because we're not going
    to use those features in the following examples.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ReactJS 下载页面中，还有其他带有附加功能的 ReactJS 脚本版本。这个脚本扩展了 ReactJS 库以支持动画和过渡，并提供了一些不属于核心
    React 的其他实用工具。目前我们不需要下载这个版本，因为我们不会在接下来的示例中使用这些功能。
- en: There is also the JSX transformer script for download. You can download it at
    [https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/JSXTransformer.js](https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/JSXTransformer.js).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个 JSX 转换器脚本的下载链接。你可以在 [https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/JSXTransformer.js](https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/JSXTransformer.js)
    下载它。
- en: It should only be used in the development environment and not in production.
    JSX will be covered in more detail in the [Chapter 2](part0020_split_000.html#page
    "Chapter 2. Exploring JSX and the ReactJS Anatomy"), *Exploring JSX and the ReactJS
    Anatomy*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 它仅应在开发环境中使用，而不应在生产环境中使用。JSX 将在第 2 章，*探索 JSX 和 ReactJS 结构* 中更详细地介绍。
- en: If you are using a tool to control your dependencies, such as **Node Package
    Manager** (**NPM**) or **Bower**, it's also possible to download ReactJS through
    these tools. Details can be found at [https://facebook.github.io/react/downloads.html](https://facebook.github.io/react/downloads.html).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用工具来控制您的依赖项，例如 **Node 包管理器** (**NPM**) 或 **Bower**，您也可以通过这些工具下载 ReactJS。详细信息请参阅
    [https://facebook.github.io/react/downloads.html](https://facebook.github.io/react/downloads.html)。
- en: Installing ReactJS with NPM
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 NPM 安装 ReactJS
- en: Check whether `node` is already installed on your machine using `node -v`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `node -v` 检查您的机器上是否已安装 `node`。
- en: Otherwise, install the node packages from their website ([https://nodejs.org/en/](https://nodejs.org/en/)),
    based on your operating system.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，根据您的操作系统，从其网站 ([https://nodejs.org/en/](https://nodejs.org/en/)) 安装节点包。
- en: We cover installing packages through NPM in [Chapter 8](part0048_split_000.html#page
    "Chapter 8. Testing React Components"), *Testing React Components* and [Chapter
    9](part0053_split_000.html#page "Chapter 9. Preparing Your Code for Deployment"),
    *Deployment*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第 8 章，*测试 React 组件* 和第 9 章，*准备代码以进行部署* 中介绍了通过 NPM 安装包。
- en: 'If you have `Node` and NPM configured on your machine, execute the following
    command inside your application''s folder from any console tool to install `react-tools`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的机器上已配置 `Node` 和 NPM，请从任何控制台工具中在您的应用程序文件夹内执行以下命令以安装 `react-tools`：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once installed, you can reference React dependency as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以按以下方式引用 React 依赖项：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: From now on, you can use the `React` variable and its methods, such as `React.createClass({…});`.
    Remember that because you've installed it using NPM, it's required that you bundle
    your code or transform it to a static asset before testing your application. In
    [Chapter 2](part0020_split_000.html#page "Chapter 2. Exploring JSX and the ReactJS
    Anatomy"), *Exploring JSX*, we're going to cover some transform tools that you
    might use. You can check for more details about deployment in [Chapter 8](part0048_split_000.html#page
    "Chapter 8. Testing React Components"), *Preparing Your Code for Deployment*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，您可以使用 `React` 变量和其方法，例如 `React.createClass({…});`。请记住，因为您使用 NPM 安装了它，所以在测试您的应用程序之前，您需要打包您的代码或将其转换为静态资源。在
    [第 2 章](part0020_split_000.html#page "第 2 章。探索 JSX 和 ReactJS 结构")，*探索 JSX* 中，我们将介绍一些您可能使用的转换工具。您可以在
    [第 8 章](part0048_split_000.html#page "第 8 章。准备代码以进行部署")，*准备代码以进行部署* 中查看更多关于部署的详细信息。
- en: Installing ReactJS with Bower
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Bower 安装 ReactJS
- en: Unlike NPM, Bower controls browser-ready packages, so it's also the same. Apart
    from using the NPM packages, we can also use Bower-ready packages ([https://facebook.github.io/react/downloads.html](https://facebook.github.io/react/downloads.html)).
    Bower helps to maintain all the packages by installing and maintaining the correct
    versions of the necessary packages ([http://bower.io/](http://bower.io/)).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 与 NPM 不同，Bower 控制浏览器就绪的包，因此也是相同的。除了使用 NPM 包外，我们还可以使用 Bower 就绪的包 ([https://facebook.github.io/react/downloads.html](https://facebook.github.io/react/downloads.html))。Bower
    通过安装和维护所需包的正确版本来帮助维护所有包 ([http://bower.io/](http://bower.io/))。
- en: 'First, make sure that you have Bower installed and configured. After this,
    execute the following command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请确保您已安装并配置了 Bower。之后，执行以下命令：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will save ReactJS as a dependency in you Bower configuration file. Now
    you just need to reference that in your HTML code. By default, it's provided at
    `./bower_components/react/react.js`. The minified version is also provided in
    the same folder at `react.min.js`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的 Bower 配置文件中将 ReactJS 作为依赖项保存。现在您只需在您的 HTML 代码中引用它即可。默认情况下，它位于 `./bower_components/react/react.js`。同一文件夹中还提供了压缩版本
    `react.min.js`。
- en: Tools
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具
- en: The community has already developed a bunch of tools to improve our coding experience
    and productivity. In this section, we'll get through some text editors, their
    packages, and a browser extension created to improve debugging applications in
    ReactJS.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 社区已经开发了许多工具来提高我们的编码体验和生产力。在本节中，我们将介绍一些文本编辑器、它们的包以及一个用于提高 ReactJS 应用程序调试的浏览器扩展。
- en: Text editors
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本编辑器
- en: 'Most of the text editors available today provide syntax highlighting for JSX
    and useful snippets and helpers for ReactJS. Here are some text editors that I
    suggest using:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当今大多数文本编辑器都提供了 JSX 的语法高亮以及 ReactJS 的有用片段和辅助工具。以下是我建议使用的文本编辑器：
- en: Vim—[http://www.vim.org/download.php](http://www.vim.org/download.php)
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vim—[http://www.vim.org/download.php](http://www.vim.org/download.php)
- en: Emacs Editor—[https://www.gnu.org/software/emacs/](https://www.gnu.org/software/emacs/)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Emacs 编辑器—[https://www.gnu.org/software/emacs/](https://www.gnu.org/software/emacs/)
- en: Sublime Text—[http://www.sublimetext.com/](http://www.sublimetext.com/)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sublime Text—[http://www.sublimetext.com/](http://www.sublimetext.com/)
- en: Atom—[https://atom.io/](https://atom.io/)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Atom—[https://atom.io/](https://atom.io/)
- en: Brackets—[http://brackets.io/](http://brackets.io/)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Brackets—[http://brackets.io/](http://brackets.io/)
- en: '**Sublime Text** requires a paid license although it works in free mode, always
    showing a popup that might trouble you from time to time. Also, you will need
    to install its package manager separately. You can find sublime Text packages
    and more information on how to install its package manager at [https://packagecontrol.io/](https://packagecontrol.io/).
    Once the Sublime editor is installed, go to the installed directory, and you can
    open Sublime from the terminal by running `subl` in the directory that your are
    in and you will open the files of the current directory in Sublime.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sublime Text** 虽然在免费模式下工作，但需要付费许可证，并且会不时显示可能打扰你的弹出窗口。此外，你还需要单独安装其包管理器。你可以在
    [https://packagecontrol.io/](https://packagecontrol.io/) 上找到 Sublime Text 包以及如何安装其包管理器的更多信息。一旦安装了
    Sublime 编辑器，前往安装目录，你可以在终端中运行 `subl` 来从当前目录打开 Sublime，这样你就可以在 Sublime 中打开当前目录的文件。'
- en: '**Atom** is recent and free and was made by GitHub. It comes with a package
    manager included and there is no need to install it separately. You just need
    to go to the settings and install the React package. It comes with syntax highlights,
    snippets, and so on. The only problem I''ve experienced using Atom on a MacOS
    X Yosemite is that the font quality looks poorer than that in Sublime Text. If
    you face it, you just need to uncheck the **Use Hardware Acceleration** option
    in Atom''s settings.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**Atom** 是一款新推出的免费编辑器，由 GitHub 开发。它包含内置的包管理器，无需单独安装。你只需前往设置并安装 React 包。它包含语法高亮、片段等功能。我在使用
    Atom 在 MacOS X Yosemite 上时遇到的问题仅是字体质量看起来比 Sublime Text 差。如果你遇到这种情况，只需在 Atom 的设置中取消选择
    **使用硬件加速** 选项即可。'
- en: '**Brackets** is also free and has a lot of great features such as live preview;
    for example, you can edit your code files and see the changes being applied in
    the browser. Brackets has a built-in extension manager, and you can install ReactJS
    JSX syntax highlighting as well. However, at the time of writing this book, some
    highlighting features were not working well.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**Brackets** 也是免费的，并且具有许多出色的功能，例如实时预览；例如，你可以编辑你的代码文件，并在浏览器中看到应用的变化。Brackets
    内置了扩展管理器，你也可以安装 ReactJS JSX 语法高亮。然而，在撰写本书时，一些高亮功能表现不佳。'
- en: All of these text editors are pretty good and have lots of features, but it's
    not the purpose of this book to show them. Feel free to choose one if you don't
    have a preferred text editor already.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些文本编辑器都相当不错，功能丰富，但本书的目的不是展示它们。如果你还没有偏好的文本编辑器，请随意选择。
- en: Chrome extension
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chrome 扩展
- en: The ReactJS team created a browser extension for Google Chrome. It allows you
    to inspect the component hierarchy, and it helps a lot when you need to debug
    your application. You can open **Chrome Web Store**, search for **React Developer
    Tools**, and install it. You need to open **Chrome Developer Tools** (*F12* on
    Windows and Linux, ⌘-*Option-I* on Mac) to use the extension. We're going to use
    the extension in later chapters to understand the ReactJS component hierarchy.
    In order to have the React extension/add-on work in Chrome/Firefox, we need to
    have a React component globally available on the web page.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS 团队为 Google Chrome 创建了一个浏览器扩展程序。它允许你检查组件层次结构，当你需要调试应用程序时非常有帮助。你可以打开 **Chrome
    Web Store**，搜索 **React Developer Tools** 并安装它。你需要打开 **Chrome 开发者工具**（Windows 和
    Linux 上按 *F12*，Mac 上按 ⌘-*Option-I*）来使用此扩展程序。我们将在后续章节中使用此扩展程序来理解 ReactJS 组件层次结构。为了使
    React 扩展/附加组件在 Chrome/Firefox 中工作，我们需要在网页上全局提供 React 组件。
- en: Trying ReactJS
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尝试 ReactJS
- en: It is time to hack some code and create our first application with ReactJS.
    We'll start configuring React in a simple web page by adding the ReactJS script
    dependency. Then, we'll create a JavaScript file that will hold our ReactJS component
    code and render it in an HTML element.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候编写一些代码并使用 ReactJS 创建我们的第一个应用程序了。我们将通过添加 ReactJS 脚本依赖项来在简单的网页中配置 React。然后，我们将创建一个
    JavaScript 文件来保存我们的 ReactJS 组件代码，并在 HTML 元素中渲染它。
- en: Then, we'll rebuild the same example using JSX syntax and learn how to configure
    that in the page. Don't worry about JSX for now as it will be covered in detail
    in the [Chapter 2](part0020_split_000.html#page "Chapter 2. Exploring JSX and
    the ReactJS Anatomy"), *Exploring JSX and the ReactJS Anatomy*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将使用 JSX 语法重建相同的示例，并学习如何在页面中配置它。现在不用担心 JSX，因为它将在第 2 章 [Exploring JSX and
    the ReactJS Anatomy](part0020_split_000.html#page "第 2 章. 探索 JSX 和 ReactJS 的结构")
    中详细介绍。
- en: This is going to be a simple application for learning purposes. In following
    chapters, we're going to create a full web application that will consume the Facebook
    Open Graph API, log in with your Facebook's account, render your friend list,
    and so on. So, let's get our hands dirty!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个简单的学习用途的应用程序。在接下来的章节中，我们将创建一个完整的网络应用程序，该应用程序将消费 Facebook Open Graph API，使用你的
    Facebook 账户登录，渲染你的朋友列表等。所以，让我们动手吧！
- en: Configuring ReactJS in a web page
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在网页中配置 ReactJS
- en: After downloading ReactJS scripts dependencies, we need to create an HTML file
    with a simple element inside its body. We're going to call the file `root.html.`
    It will be responsible for rendering our ReactJS component.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载 ReactJS 脚本依赖项后，我们需要创建一个包含简单元素的 HTML 文件，并将其命名为 `root.html`。它将负责渲染我们的 ReactJS
    组件。
- en: 'Here is how your HTML file should look like:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你的 HTML 文件应该看起来像什么样子：
- en: '[PRE3]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It references Facebook CDN scripts, but you can reference the scripts that we
    have downloaded (`fb-react-0.12.2.js`) locally.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 它引用了 Facebook CDN 脚本，但你也可以引用我们下载的本地脚本（`fb-react-0.12.2.js`）。
- en: 'Here is how your HTML file should look like if the locally downloaded ReactJS
    file is used instead of CDN:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用本地下载的 ReactJS 文件而不是 CDN，你的 HTML 文件将看起来如下：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating your first React component
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建你的第一个 React 组件
- en: 'Now create a JavaScript file named `hello-world.js and` reference that in the
    HTML file by placing this code after the `root` div element:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个名为 `hello-world.js` 的 JavaScript 文件，并在 HTML 文件中将此代码放置在 `root` div 元素之后来引用它：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will make use of React.createElement to create React element. The format
    of `React.createElement` is:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 React.createElement 来创建 React 元素。`React.createElement` 的格式是：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Paste the following code into `hello-world.js`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码粘贴到 `hello-world.js` 中：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Details of this code will be covered in more detail in the following chapters.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下章节将更详细地介绍此代码的细节。
- en: 'Now open the page in any browser and check that it created an `h1` html element
    and placed the text inside it. You should see something like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在任何浏览器中打开页面，检查它是否创建了一个 `h1` HTML 元素并将文本放在其中。你应该看到如下内容：
- en: '![Creating your first React component](img/00002.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![创建你的第一个 React 组件](img/00002.jpeg)'
- en: Configuring JSX
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 JSX
- en: 'Now we are going to make the same application using JSX syntax. First, we need
    to configure that in our HTML page by adding the JSX transformer script file `JSXTransformer-0.12.2.js`
    after the ReactJS script `react-0.12.2.js` within the `head` element:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用 JSX 语法创建相同的应用程序。首先，我们需要在 HTML 页面中配置它，通过在 `head` 元素中添加 JSX 转换器脚本文件 `JSXTransformer-0.12.2.js`
    来在 ReactJS 脚本 `react-0.12.2.js` 之后：
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You also need to change the `hello-world.js` type reference to `text/jsx` in
    the HTML page. It must be like this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要在 HTML 页面中将 `hello-world.js` 的类型引用更改为 `text/jsx`。它必须是这样的：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Serving files through the web server
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过网络服务器提供文件
- en: Google Chrome doesn't accept requests to local files of type `text/jsx`, it
    throws a cross-origin request error (commonly named as the CORS error). CORS is
    sharing a resource on a different domain than the current one. Chrome security
    doesn't allow it by default; however, you can access it on Firefox and Safari.
    It's also possible to work around with CORS errors by starting a local server,
    such as Python, Node, or any other web server you want.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Google Chrome 不接受对类型为 `text/jsx` 的本地文件的请求，它会抛出一个跨源请求错误（通常称为 CORS 错误）。CORS 是在不同于当前域的域上共享资源。Chrome
    安全默认不允许这样做；然而，你可以在 Firefox 和 Safari 上访问它。你也可以通过启动本地服务器（如 Python、Node 或任何其他你想要的网络服务器）来绕过
    CORS 错误。
- en: 'Another way is to install the node package `httpster`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是安装 node 包 `httpster`：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once installed, run the command `httpster` from the react application directory.
    The application will load up in your browser (default port `3333`):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，从react应用程序目录中运行`httpster`命令。应用程序将在你的浏览器中加载（默认端口`3333`）：
- en: '![Serving files through the web server](img/00003.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![通过Web服务器提供文件](img/00003.jpeg)'
- en: 'Another way is to install the simple Python server. Install it and run its
    command inside the folder you want to serve and then you''re ready to go. You
    can find out how to install python at [https://www.python.org/](https://www.python.org/).
    After installing python, you can run the following command inside your project
    folder:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是安装简单的Python服务器。安装它，然后在您想要提供服务的文件夹内运行其命令，然后您就可以开始了。您可以在[https://www.python.org/](https://www.python.org/)上找到如何安装Python的说明。安装Python后，您可以在项目文件夹内运行以下命令：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'It will output a message saying the port it''s running such as `Serving HTTP`
    `on 0.0.0.0 port 8000`. You can now navigate to `http://localhost:8000/`. If this
    port is being used by another application, consider passing the desired port number
    as the last parameter in the same command as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 它将输出一条消息，说明正在运行的服务端口，例如`Serving HTTP` `on 0.0.0.0 port 8000`。你现在可以导航到`http://localhost:8000/`。如果此端口已被其他应用程序使用，请考虑在相同命令中将期望的端口号作为最后一个参数传递，如下所示：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you don't want to use python, ReactJS has provided a tutorial page with scripts
    in other languages to run a simple web server and you should be able to test it.
    You can check it out at [https://github.com/reactjs/react-tutorial/](https://github.com/reactjs/react-tutorial/).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想使用Python，ReactJS提供了一个包含其他语言脚本的教程页面，用于运行简单的Web服务器，你应该能够测试它。你可以在[https://github.com/reactjs/react-tutorial/](https://github.com/reactjs/react-tutorial/)上查看。
- en: Creating a React component with the JSX syntax
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用JSX语法创建React组件
- en: 'With our HTML page configured, we can now change the `hello-world.js` script
    file to follow the JSX Syntax. Your script file should look like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置好我们的HTML页面后，我们现在可以将`hello-world.js`脚本文件更改为遵循JSX语法。你的脚本文件应该看起来像这样：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It will generate the same result as in the previous `Hello World` example. As
    you can see, there is no need to call the `createElement` method explicitly.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 它将生成与上一个`Hello World`示例相同的结果。正如你所看到的，没有必要显式调用`createElement`方法。
- en: Thus, the JSX will produce the same output as the JavaScript, but without the
    extra braces and semicolons.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，JSX将产生与JavaScript相同的输出，但不需要额外的花括号和分号。
- en: In the following chapter, [Chapter 2](part0020_split_000.html#page "Chapter 2. Exploring
    JSX and the ReactJS Anatomy"), *Exploring JSX and the ReactJS Anatomy* you're
    going to learn how JSX works and why it is highly recommended.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，[第二章](part0020_split_000.html#page "第二章. 探索JSX和ReactJS结构")，你将学习JSX是如何工作的，以及为什么它被高度推荐。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned what ReactJS is, downloaded it, and used it in
    a small application. We have created our first React component and reviewed key
    benefits of this powerful library.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了ReactJS是什么，下载了它，并在一个小应用程序中使用了它。我们已经创建了我们的第一个React组件，并回顾了此强大库的关键优势。
- en: In the next chapter, we are going to dive into JSX and learn how to build some
    practical components that demonstrate this powerful extension syntax. We'll also
    learn some "gotchas" and best practices and learn why JSX suits our needs when
    developing a React components presentation.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨JSX，学习如何构建一些展示此强大扩展语法的实用组件。我们还将学习一些“陷阱”和最佳实践，并了解为什么JSX在开发React组件展示时满足我们的需求。
