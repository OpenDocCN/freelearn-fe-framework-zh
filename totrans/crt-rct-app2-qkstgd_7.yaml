- en: Building Progressive Web Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建渐进式Web应用
- en: The beauty of building a modern web application is being able to take advantage
    of functionalities such as a **Progressive Web App** (**PWA**)! But they can be
    a little complicated to work with. As always, the Create React App project makes
    a lot of this easier for us, but this time carries some significant caveats that
    we'll need to think about.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 构建现代Web应用的美丽之处在于能够利用诸如**渐进式Web应用**（**PWA**）之类的功能！但它们可能有点复杂。就像往常一样，Create React
    App项目让这一切对我们来说变得容易得多，但这次也有一些重要的注意事项需要我们思考。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Examining PWAs and what they add
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查PWA及其添加的内容
- en: Learning how to configure our Create React App project into a custom PWA
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何将我们的Create React App项目配置为自定义PWA
- en: Modifying and tuning the `manifest` file
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改和调整`manifest`文件
- en: Exploring service workers, their life cycle, and how to use them with Create
    React App
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Service Worker、其生命周期以及如何与Create React App一起使用
- en: Exploring the caveats of using Create React App to build a PWA
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索使用Create React App构建PWA的注意事项
- en: Understanding and building PWAs
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解和构建PWA
- en: PWAs are one of those features that sounds amazingly cool but it's surprisingly
    complicated to understand the when, why, and how of building them. Let's spend
    a little bit of time demystifying them and helping you understand why they are
    such a powerful (and appreciated) inclusion in our Create React App projects and
    how we can get started using them!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: PWAs是那些听起来非常酷但理解其何时、为什么以及如何构建它们却很复杂的功能之一。让我们花点时间揭开它们的神秘面纱，帮助你理解为什么它们是我们Create
    React App项目中如此强大（且受欢迎）的组成部分，以及我们如何开始使用它们！
- en: What is a PWA?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是PWA？
- en: Let's talk a little bit about what a PWA is, because there is unfortunately
    a lot of misinformation and confusion about precisely what a PWA does!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简单谈谈什么是PWA，因为关于PWA确切做什么的信息和误解很多！
- en: 'Here''s a short, maybe slightly unhelpful, version of what a PWA does; it''s
    simply a website that does the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个简短、可能不太有用的PWA功能版本；它仅仅是一个执行以下操作的网站：
- en: Only uses `HTTPS`
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只使用`HTTPS`
- en: Adds a JSON manifest (a web app manifest) file
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个JSON manifest（web应用manifest）文件
- en: Has a Service Worker
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有Service Worker
- en: While yes, a PWA must have those behaviors, it's still difficult to understand
    what a PWA is or what it gives you in the long run. For example, does that tell
    you anything about what it does in different browsers? With different window sizes?
    What about how accessible it is, or how it functions when the internet is slow
    or non-existent?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然是的，PWA必须具备这些行为，但仍然很难理解PWA是什么，或者它最终能给你带来什么。例如，这告诉你关于它在不同浏览器中做什么的信息吗？在不同窗口大小下呢？关于它的可访问性或当网络慢或不存在时如何工作呢？
- en: How do we define a PWA?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们如何定义PWA？
- en: 'A PWA, for us, is a React application that would be installable/runnable on
    a mobile device or desktop. Essentially, it''s just your app, but with capabilities
    that make it a little more advanced, a little more effective, and a little more
    resilient to poor/no internet. A PWA accomplishes these via a few tenets, tricks,
    and requirements that we''d want to follow:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们来说，PWA（Progressive Web Application，渐进式Web应用）是一个可以在移动设备或桌面电脑上安装/运行的React应用。本质上，它只是你的应用，但具有一些使其更先进、更有效、更能抵御网络不佳/无网络的能力。PWA通过一些原则、技巧和需求来实现这些功能，这是我们希望遵循的：
- en: The app must be usable by mobile and desktop-users alike
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用必须可供移动和桌面用户使用
- en: The app must operate over `HTTPS`
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用必须通过`HTTPS`运行
- en: The app must implement a web app JSON `manifest` file
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用必须实现一个web app JSON `manifest`文件
- en: The app must implement a Service Worker
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用必须实现Service Worker
- en: 'Now, the first one is a design question. Did you make your design responsive?
    If so, congratulations, you built the first step toward having a PWA! The next
    one is also more of an implementation question that''s maybe not as relevant to
    us here: when you deploy your app to production, did you make it `HTTPS` only?
    I hope the answer to this is yes, of course, but it''s still a good question to
    ask!'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，第一个问题是设计问题。你的设计是否是响应式的？如果是的话，恭喜你，你已经迈出了拥有PWA的第一步！下一个问题也是一个可能不太相关的实现问题：当你将应用部署到生产环境时，你是否只使用了`HTTPS`？我希望答案是肯定的，但仍然是一个值得问的问题！
- en: The next two, though, are things we can do as part of our Create React App project,
    and we'll make those the focus of this chapter!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，接下来的两个是我们可以在Create React App项目中实现的事情，我们将把这些作为本章的重点！
- en: Building a PWA in Create React App
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Create React App中构建PWA
- en: 'If we want to start building out a PWA in Create React App, as mentioned earlier,
    we need to start implementing against those two requirements that we laid out.
    We''ll start off with the simplest problem to solve: implementing a `manifest`
    file for our PWA!'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在Create React App中开始构建PWA，如前所述，我们需要开始针对我们提出的两个要求进行实施。我们将从最简单的问题开始解决：为我们的PWA实现一个`manifest`文件！
- en: Starting with our manifest file
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从我们的清单文件开始
- en: 'Okay, so I identified the two items that we need to build to make this all
    happen: the JSON `manifest` file and the service worker! Easy, right? Actually,
    it''s even easier than that. You see, Create React App will populate a JSON `manifest`
    file for us as part of our project creation by default! That means we have already
    completed this step! Let''s celebrate, go home, and kick off our shoes, because
    we''re all done now, right?'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，所以我确定了我们需要构建的两个项目来使这一切发生：JSON `manifest`文件和服务工作者！简单，对吧？实际上，比这还简单。你看，Create
    React App默认会为我们创建一个JSON `manifest`文件，作为项目创建的一部分！这意味着我们已经完成了这一步！让我们庆祝一下，回家，脱掉鞋子，因为我们现在已经完成了，对吧？
- en: 'Well, sort of. We should take a look at that default `manifest` file because
    it''s very unlikely that we want our fancy `TodoList` project to be called `"Create
    React App Sample"`. Let''s take a look at the `manifest` file, located in `public/manifest.json`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，差不多吧。我们应该看看那个默认的`manifest`文件，因为我们不太可能希望我们的“TodoList”项目被称为“Create React App
    Sample”。让我们看看位于`public/manifest.json`的`manifest`文件：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Some of these keys are pretty self-explanatory or at least have a little bit
    of information that you can infer from them as to what they accomplish. Some of
    the other keys, though, might be a little stranger. For example, what does `"start_url"`
    mean? What are the different options we can pick for display? What's a `"theme_color"`
    or `"background_color"`? Aren't those just decided by the CSS of our application?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些键非常直观，或者至少你可以从中推断出它们的功能。然而，一些其他的键可能有点奇怪。例如，“start_url”是什么意思？我们可以选择哪些不同的显示选项？什么是“theme_color”或“background_color”？这些不都是由我们应用的CSS决定的吗？
- en: Not quite. In fact, let's dive super deep into this world of JSON `manifest`
    files and turn it into something more useful!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 还不止这些。实际上，让我们深入这个JSON `manifest`文件的世界，并使其变得更有用！
- en: Viewing our manifest file in action with Chrome
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Chrome查看我们的清单文件的实际效果
- en: 'First, to be able to test this, we should have something where we can verify
    the results of our changes. We''ll start off with Chrome, where if you go into
    the Developer tools section, you can navigate to the Application tab and be brought
    right to the Service Workers section! Let''s take a look at what it all looks
    like for our application:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为了能够测试这个，我们应该有一个可以验证我们更改结果的地方。我们将从Chrome开始，如果你进入开发者工具部分，你可以导航到应用标签，并直接进入服务工作者部分！让我们看看我们的应用看起来是什么样子：
- en: '![](img/ae72d45d-31f2-44e6-a50a-1e759a59907e.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae72d45d-31f2-44e6-a50a-1e759a59907e.png)'
- en: Exploring the manifest file options
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索清单文件选项
- en: Having a `manifest` file with no explanation of what the different keys and
    options mean is not very helpful, so let's take a deeper dive, key by key, into
    each of the configuration options available to us and some of the possible values
    we could use for each.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果清单文件没有解释不同的键和选项的含义，那么它并不很有帮助，所以让我们深入地，键接键，查看我们可用的每个配置选项以及我们可以为每个选项使用的可能值。
- en: name and short_name
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: name和short_name
- en: 'The first key we have is `short_name`. This is a shorter version of the name
    that might be displayed when, for example, the title can only display a smaller
    bit of text than the full app or site name. The counterpart to this is `name`,
    which is the full name of your application. A good example of this might be something
    like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们拥有的第一个键是`short_name`。这是当，例如，标题只能显示比完整的应用或站点名称更小的文本时可能显示的名称的简短版本。与之相对应的是`name`，这是你应用的完整名称。一个很好的例子可能是这样的：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: icons
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图标
- en: The next key to look at is the `"icons"` key, which is a list of sub-objects,
    each of which has three keys. This contains a list of icons that the PWA should
    use, whether it's for display on someone's desktop, someone's phone home screen,
    or something else. Each `"icon"` object should contain an `"src"`, which is a
    link to the image file that will be your icon. Next, you have the `"type"` key,
    which should tell the PWA what type of image file you're working with. For example,
    if you're using a `.png` file, you would list `"image/png"` here as the type.
    Finally, we have the `"sizes"` key, which tells the PWA the size of the icon.
    For best results, you should have at least a `"512x512"` and a `"192x192"` icon.
    The PWA will take care of scaling things down where necessary.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: start_url
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `start_url` key is used to tell the application at what point it should
    start in your application in relation to your server. While we''re not using it
    for anything as we have a single page, no route app, that might be different in
    a much larger application, so you might just want the `start_url` key to be something
    indicating where you want them to start off from. Another option would be to add
    a query string on to the end of `url`, such as a tracking link. An example of
    that would be something like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: background_color
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the color used when a splash screen is displayed any time the application
    is first launched. This is similar to when you launch an application from your
    phone for the first time; that little page that pops up temporarily while the
    app loads is the splash screen, and this would be the background of that. This
    can either be a color name, like you'd use in CSS, or it can be a hex value for
    a color.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: display
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`display` affects the browser''s UI when the application is launched. There
    are ways to make the application full-screen, to hide some of the UI elements,
    and so on. Here are the possible options, with their explanations:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '| `Value` | Description. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
- en: '| `browser` | A normal web browser experience. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
- en: '| `fullscreen` | No browser UI, and takes up the entire display. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
- en: '| `standalone` | Makes the web app look like a native application. It will
    run in its own window and hides a lot of the browser UI to make it look and feel
    more native. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
- en: For our example, we'll be using `standalone` as our setting for display!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: orientation
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to make your application in the landscape orientation, you would
    specify it here. Otherwise you would leave this option missing from your `manifest`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: scope
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scope helps to determine where the PWA in your site lies and where it doesn't.
    This prevents your PWA from trying to load things outside where your PWA runs. `start_url`
    must be located inside your scope for it to work properly! This is optional, and
    in our case we'll be leaving it out.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: theme_color
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This sets the color of the tool bar, again to make it feel and look a little
    more native. If we specify a meta theme color, we'd set this to be the same as
    that specification. Much like background color, this can either be a color name,
    like you'd use in CSS, or it can be a hex value for a color.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这设置了工具栏的颜色，再次使其感觉和外观更接近原生。如果我们指定了元主题颜色，我们会将其设置为与该指定相同。就像背景颜色一样，这可以是CSS中使用的颜色名称，也可以是颜色的十六进制值。
- en: Customizing our manifest file
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义我们的清单文件
- en: 'Now that we''re experts on `manifest` files, let''s customize our manifest
    file! We''re going to change a few things here and there, but we won''t make any
    major changes. For the purposes of this book, we''re not going to worry about
    working with the images, so we''ll leave those be for now. Let''s take a look
    at how we''ve set up the `manifest` file in `public/manifest.json`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经是`manifest`文件的专家了，让我们自定义我们的清单文件！我们在这里和那里做一些更改，但不会进行任何重大更改。为了这本书的目的，我们不会担心与图像一起工作，所以我们会暂时保留它们。让我们看看我们在`public/manifest.json`中是如何设置`manifest`文件的：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: So we've set our `short_name` and `name` keys to match the actual application.
    We've left the `icons` key alone completely since we don't really need to do much
    of anything with that anyway.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将`short_name`和`name`键设置为与实际应用程序匹配。我们完全保留了`icons`键，因为我们实际上不需要对它做太多任何事情。
- en: Next, we've changed `start_url` to just be `"/"`, since we're working under
    the assumption that this application is the only thing running on its domain.
    We've set the `display` to `standalone`, since we want our application to have
    the ability to be added to someone's home screen and be recognized as a true PWA.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将`start_url`更改为仅`"/"`，因为我们假设这个应用程序是这个域上唯一运行的东西。我们将`display`设置为`standalone`，因为我们希望我们的应用程序能够被添加到某个人的主页上，并被识别为真正的PWA。
- en: Finally, we set the theme color to `#343a40`, which matches the color of the
    nav bar and will give a more seamless look and feel to the PWA. We also set the
    `background_color` key, which is for our splash screen, to `#a5a5f5`, which is
    the color of our normal `Todo` items!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将主题颜色设置为`#343a40`，这与导航栏的颜色相匹配，并将为PWA提供更流畅的外观和感觉。我们还设置了`background_color`键，这是为我们启动屏幕设置的，颜色为`#a5a5f5`，这是我们的正常`Todo`项的颜色！
- en: 'If you think back to the explanation of keys, you''ll remember we also need
    to change our meta theme tag in our `public/index.html` file, so we''ll open that
    up and quickly make that change:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回顾一下键的解释，你会记得我们还需要更改`public/index.html`文件中的元主题标签，所以我们将打开它并快速进行更改：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And that''s it! Our `manifest` file has been customized! If we did it all correctly,
    we should be able to verify the changes again in our Chrome Developer tools:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们的`manifest`文件已经自定义了！如果我们一切都做得正确，我们应该能够在Chrome开发者工具中再次验证这些更改：
- en: '![](img/bb4b9aad-125c-4881-a485-016633b4a808.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bb4b9aad-125c-4881-a485-016633b4a808.png)'
- en: Hooking up Service Workers
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接服务工作者
- en: The other necessary component to having a working PWA for our application is
    to build out a Service Worker. Service Workers are another one of those components
    in PWAs that are not super well-understood, depending on who you ask, and their
    utility is also not immediately clear. We'll spend a little bit of time exploring
    and understanding Service Workers, even though the actual amount of work we need
    to do to implement Service Workers for our PWA is incredibly minimal (maybe even
    less work than our `manifest` file)!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为我们的应用程序创建一个可工作的PWA的另一个必要组件是构建服务工作者。服务工作者是PWA中那些组件之一，其理解程度因人而异，而且它们的效用也不立即明显。尽管我们为我们的PWA实现服务工作者所需的工作量非常小（可能甚至比我们的`manifest`文件还要少），但我们将花一些时间探索和理解服务工作者。
- en: What is a Service Worker?
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务工作者是什么？
- en: Service Workers are defined as a script that your browser runs behind the scenes,
    separate from the main browser threads. It can intercept network requests, interact
    with a cache (either storing or retrieving information from a cache), or listen
    to and deliver push messages. This carries a couple of caveats, too. It is fully
    asynchronous, so that means anything that requires synchronous operations, such
    as **XMLHttpRequest** (**XHR**) or operating with **localStorage**, cannot be
    used inside the Service Worker code. It can also do some other neat tricks, such
    as receiving push messages even when the app itself is not active, allowing you
    to display notifications to the user even when the app is not open!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Service Worker 被定义为浏览器在幕后运行的脚本，与主浏览器线程分开。它可以拦截网络请求，与缓存（存储或从缓存检索信息）交互，或监听并传递推送消息。这也带来了一些注意事项。它是完全异步的，这意味着需要同步操作的所有内容，例如
    **XMLHttpRequest**（**XHR**）或与 **localStorage** 操作，都不能在 Service Worker 代码内部使用。它还可以执行一些其他巧妙的小技巧，例如即使在应用程序本身不活跃的情况下也能接收推送消息，允许你在应用程序未打开时向用户显示通知！
- en: Since it can intercept network requests and store/retrieve information from
    a server, it can also operate when offline, which allows your application to start
    up and be used immediately, and progressively fetch updates or update periodically
    in the background from the server!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它可以拦截网络请求并从服务器存储/检索信息，因此它还可以在离线状态下运行，这使得你的应用程序可以立即启动并使用，并从服务器逐步获取更新或定期在后台更新！
- en: The Service Worker life cycle
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Service Worker 生命周期
- en: 'The life cycle for a Service Worker is pretty simple. There are three main
    stages:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Service Worker 的生命周期相当简单。主要有三个主要阶段：
- en: Registration
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册
- en: Installation
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装
- en: Activation
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 激活
- en: Each of these stages are pretty self-explanatory.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 每个这些阶段都很直观易懂。
- en: '**Registration** is the process of letting the browser know where the Service
    Worker is located and how to install it into the background. The code for registration
    may look something like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**注册** 是让浏览器知道 Service Worker 所在位置以及如何将其安装到后台的过程。注册的代码可能看起来像这样：'
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Installation** is the process that happens after the Service Worker has been
    registered, and only happens if the Service Worker either hasn''t already been
    installed, or the Service Worker has changed since the last time.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装** 是在 Service Worker 已注册后发生的过程，并且仅在 Service Worker 还未安装或自上次以来已更改的情况下才会发生。'
- en: 'In a `service-worker.js` file, you''d add something like this to be able to
    listen to this `event`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `service-worker.js` 文件中，你可以添加以下内容来监听这个 `event`：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, **Activation** is the step that happens after all of the other steps
    have completed. The Service Worker has been registered and then installed, so
    now it''s time for the service worker to start doing its thing:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**激活** 是在所有其他步骤完成后发生的步骤。Service Worker 已注册并安装，现在是 Service Worker 开始执行其任务的时候了：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How can we use a Service Worker in our app?
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们如何在我们的应用程序中使用 Service Worker 呢？
- en: 'So, how do we use a Service Worker in our application? Well, it''s simple to
    do with Create React App, but there is a major caveat: you can''t configure the
    Create React App default generated `service-worker.js` file without ejecting your
    project, unfortunately! Not all is lost, however; you can still take advantage
    of some of the highlights of PWAs and service workers by using the default Create
    React App-generated Service Worker.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何在我们的应用程序中使用 Service Worker 呢？嗯，使用 Create React App 来做这件事很简单，但有一个主要的注意事项：不幸的是，你无法在不推出项目的情况下配置
    Create React App 默认生成的 `service-worker.js` 文件！然而，并非所有希望都破灭了；你仍然可以通过使用默认的 Create
    React App 生成的 Service Worker 来利用一些 PWA 和 Service Worker 的亮点。
- en: 'To enable this, hop over into `src/index.js`, and, at the final line, change
    the Service Worker `unregister()` call to `register()` instead:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用此功能，请跳转到 `src/index.js`，并在最后一行将 Service Worker 的 `unregister()` 调用更改为 `register()`：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And now we''re opting in to our Service Worker! Next, to actually see the results,
    you''ll need to run the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们正在选择加入我们的 Service Worker！接下来，为了真正看到结果，你需要运行以下命令：
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We''ll create a *Production* build (We''ll cover this in greater detail in
    [Chapter 8](f657a8b7-93c3-412c-871d-8f3f56604a58.xhtml), *Getting Your App Ready
    for Production*). You''ll see some output that we''ll want to follow as part of
    this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个 *生产* 版本（我们将在第 8 章 [准备应用程序投入生产](f657a8b7-93c3-412c-871d-8f3f56604a58.xhtml)中更详细地介绍）。你会看到一些我们希望作为此过程一部分跟踪的输出：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As per the instructions, we''ll install **serve** globally, and run the command
    as instructed. When we run this, we should see the following output:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 根据指示，我们将全局安装 **serve**，并按照指示运行命令。当我们运行这个命令时，我们应该看到以下输出：
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We will get the following output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：
- en: '![](img/40e02f22-cc31-4d5b-8d70-19786046e80b.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40e02f22-cc31-4d5b-8d70-19786046e80b.png)'
- en: 'Now open up `http://localhost:5000` in your local browser and you''ll be able
    to see, again in the Chrome Developer tools, the Service Worker up and running
    for your application:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在请在您的本地浏览器中打开 `http://localhost:5000`，您将能够在 Chrome 开发者工具中看到，您的应用程序的服务工作者正在运行：
- en: '![](img/77b20199-b619-49f7-925b-a981b91c24e0.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77b20199-b619-49f7-925b-a981b91c24e0.png)'
- en: Note that the rule of requiring `HTTPS` for Service Workers and PWAs is not
    in effect when you're running it on `localhost`!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当您在 `localhost` 上运行时，要求服务工作者和 PWA 使用 `HTTPS` 的规则并不适用！
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Hopefully, we've explored at least enough of Progressive Web Apps that they
    have at least been partially demystified! A lot of the confusion and trouble with
    building PWAs tends to stem from the fact that there's not always a good starting
    point for building one. To get the value out of PWAs, you have to have a PWA,
    but to build a PWA you typically need to demonstrate the value of them! What a
    whirlwind!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 希望我们至少已经探索了足够多的渐进式网络应用程序，至少它们的部分神秘性已经被揭开！构建 PWA 时的许多困惑和麻烦往往源于没有好的起点来构建一个 PWA。要从
    PWA 中获得价值，您必须拥有一个 PWA，但通常需要证明它们的价值！真是一场旋风！
- en: 'Create React App limits us a little bit in how we can implement Service Workers,
    which admittedly limits the functionality and usefulness of our PWA. It doesn''t
    hamstring us, by any means, but doing fun tricks with pre-caching networks and
    API responses, and loading up our application instantly, even if the browser doing
    the loading is offline in the first place. That being said, it''s like many other
    things in Create React App: an amazing stepping stone and a great way to get moving
    with PWAs in the future!'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Create React App 在我们如何实现服务工作者方面有限制，这确实限制了我们的 PWA 的功能和实用性。但这并不是说它束缚了我们，我们可以通过预缓存网络和
    API 响应等有趣的小技巧来提高我们的应用程序的加载速度，即使加载的浏览器最初是离线的。话虽如此，这就像 Create React App 中的许多其他事情一样：一个惊人的垫脚石，也是未来开始使用
    PWA 的绝佳方式！
- en: In the next and final chapter, we'll tie up a few loose ends with our project
    and talk a little bit about production builds and ejecting out of Create React
    App! We'll look at how to take our code and get it into production. We'll also
    discuss importing some other major libraries into our Create React App project,
    such as Redux!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章和最后一章中，我们将整理我们项目的几个 loose ends，并简要讨论一下生产构建和从 Create React App 中退出！我们将探讨如何将我们的代码带入生产环境。我们还将讨论将一些其他主要库导入我们的
    Create React App 项目中，例如 Redux！
