- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Internationalization, Localization, and Accessibility of Angular Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular应用的国际化、本地化和无障碍性
- en: When developing applications, you’re often targeting users from many different
    countries; because of that, it’s essential to add internationalization and localization
    to your Angular applications. **Internationalization** is the process of making
    your applications translatable so people who speak different languages can use
    your application without any issues. With **localization**, you tailor the content
    of your website to a specific location. For example, users from the USA expect
    dollar signs, whereas users from the EU use a euro sign in front of currency values.
    Besides people from different countries, your applications will also be used by
    people with different abilities. Some users might not be able to use a keyboard
    or read the screen like other users. In a world where we rely more on applications,
    it’s important to develop your applications in a way that ensures users of all
    abilities can use them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发应用时，你通常针对来自许多不同国家的用户；因此，将国际化本地化添加到您的Angular应用中至关重要。**国际化**是指使您的应用可翻译的过程，这样讲不同语言的人就可以无任何问题使用您的应用。通过**本地化**，您将网站内容定制到特定位置。例如，来自美国的用户期望看到美元符号，而来自欧盟的用户在货币值前使用欧元符号。除了来自不同国家的用户外，您的应用也将被不同能力的人使用。一些用户可能无法像其他用户那样使用键盘或阅读屏幕。在一个越来越依赖应用的世界里，以确保所有能力用户都能使用它们的方式开发您的应用非常重要。
- en: In this chapter, you will learn how to develop Angular applications that can
    serve as many people as possible. First, we will dive into and implement internationalization
    within the Nx monorepo. After making your content translatable, you will learn
    about and implement localization to correctly display your dates, currencies,
    and other values depending on the user. Lastly, we will dive into the topic of
    developing accessible frontend applications that can be used by users of all abilities.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何开发可以服务于尽可能多人的Angular应用。首先，我们将深入Nx单仓库中实现国际化。在使您的内容可翻译后，您将了解并实现本地化，以便根据用户正确显示日期、货币和其他值。最后，我们将深入研究开发可访问的前端应用的主题，这些应用可以被所有能力用户使用。
- en: 'This chapter will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Adding translatable content in Angular applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Angular应用中添加可翻译内容
- en: Localization for Angular applications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular应用的本地化
- en: Making your Angular applications accessible to everyone
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使您的Angular应用对所有人可访问
- en: Adding translatable content in Angular applications
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Angular应用中添加可翻译内容
- en: In this section, we will dive into internationalization, commonly referred to
    as **i18n** (i18n is the abbreviation for internationalization, where “i” and
    “n” are the first and last letters of the word, and 18 stands for the number of
    letters in between the “i” and the “n”). Internationalization is developing usable
    applications for people who speak different languages. Simply put, when you implement
    i18n, you make your application content translatable. About 75% of the world doesn’t
    speak English at all, so if you only display your application content in English
    (or exclusively use another language), you are missing out on a lot of potential
    users.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入研究国际化，通常称为**i18n**（i18n是国际化的缩写，其中“i”和“n”是单词的首尾字母，18代表“i”和“n”之间字母的数量）。国际化是为讲不同语言的人开发可用的应用。简单来说，当您实现i18n时，您使您的应用内容可翻译。大约世界上75%的人根本不说英语，所以如果您只以英语（或仅使用另一种语言）显示您的应用内容，您就会错过很多潜在用户。
- en: The Angular framework has built-in functionalities to support translatable content,
    but we will not be using the built-in i18n solution to support translatable content.
    The first reason is that the built-in solution used XML content in the translation
    files. Most developers don’t like XML, and JSON is a much more readable and flexible
    alternative. The second reason we will not use the built-in i18n solution for
    translatable content is that it’s predominately focused on compiling time translations.
    With compile-time translations, the translation keys are replaced during the compilation
    process; because of that, you must create and deploy a specific build for each
    language you want to support. There is also some support for runtime translations,
    meaning the translations can change when the application is deployed and running,
    but there is little documentation, and the solution is rarely used because there
    are much better options developed and maintained by the Angular community.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 框架内置了支持可翻译内容的功能，但我们将不会使用内置的 i18n 解决方案来支持可翻译内容。第一个原因是内置解决方案在翻译文件中使用了
    XML 内容。大多数开发者不喜欢 XML，而 JSON 是一个更易读和更灵活的替代品。我们不使用内置 i18n 解决方案进行可翻译内容的第二个原因是它主要关注编译时翻译。在编译时翻译中，翻译键在编译过程中被替换；因此，您必须为每个您想要支持的语言创建和部署特定的构建。还有一些对运行时翻译的支持，这意味着翻译可以在应用程序部署和运行时更改，但文档很少，并且该解决方案很少被使用，因为社区开发了更好的选项并进行了维护。
- en: The two most commonly used i18n libraries that support translatable content
    in Angular applications are **Transloco** and **ngx-translate**. We will use Transloco,
    as it has better support for standalone components, is more actively maintained,
    has better documentation, supports server-side rendering, and has more configuration
    options and features overall. We will implement Transloco step by step into the
    *expenses-registration* *application* in the Nx monorepo.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular 应用程序中支持可翻译内容的两个最常用的 i18n 库是 **Transloco** 和 **ngx-translate**。我们将使用
    Transloco，因为它对独立组件的支持更好，维护更活跃，文档更完善，支持服务器端渲染，并且整体上具有更多的配置选项和功能。我们将逐步将 Transloco
    实施到 Nx monorepo 中的 *费用登记* *应用* 中。
- en: 'You can still dive into Transloco’s documentation at this website: [https://jsverse.github.io/transloco/](https://jsverse.github.io/transloco/).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您仍然可以访问此网站深入了解 Transloco 的文档：[https://jsverse.github.io/transloco/](https://jsverse.github.io/transloco/)。
- en: Installing Transloco in your Nx monorepo
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在您的 Nx monorepo 中安装 Transloco
- en: 'Before you can support translatable content in your HTML templates and TypeScript
    files, you need to install Transloco in your Nx monorepo and add it to the applications
    where you want to use it. So, let’s start at the beginning and install the NPM
    package using the following command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在您能够支持 HTML 模板和 TypeScript 文件中的可翻译内容之前，您需要在您的 Nx monorepo 中安装 Transloco 并将其添加到您想要使用的应用中。因此，让我们从开始安装
    NPM 包，使用以下命令：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After installing the package, you need to add Transloco to your project, open
    the terminal at the `business-tools-monorepo\apps\finance\expenses-registration`
    folder path, and run the following command in your terminal:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装包后，您需要将 Transloco 添加到您的项目中，在 `business-tools-monorepo\apps\finance\expenses-registration`
    文件夹路径下打开终端，并在终端中运行以下命令：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When you run this command, you will be asked two questions inside the terminal:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行此命令时，您将在终端内被问及两个问题：
- en: '`en` to add English and `nl` to add Dutch as my default languages. You can
    provide your own languages, but please add `en` for English, as we will use that
    one in the book. You can always extend upon these languages if you want.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `en` 添加英语，使用 `nl` 添加荷兰语作为我的默认语言。您可以提供自己的语言，但请添加 `en` 以确保英语，因为我们在书中会使用它。如果您愿意，您总是可以扩展这些语言。
- en: '**Are you working with server-side rendering?**: False–this is the default,
    so you can just hit *Enter*).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**您是否在使用服务器端渲染？**：False–这是默认设置，所以您只需按 *Enter* 即可）。'
- en: After answering the questions, the command will add the necessary configuration
    to add Transloco to the *expenses-registration application*. You can also add
    the configurations manually, but using the terminal command is faster and ensures
    that everything is added correctly.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在回答完问题后，命令将添加必要的配置以将 Transloco 添加到 *费用登记应用*。您也可以手动添加配置，但使用终端命令更快，并确保一切配置都添加正确。
- en: Now let’s look closer at the files Transloco generated for you that have been
    added to the Nx monorepo and *expenses-registration application*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更仔细地查看 Transloco 为您生成的文件，这些文件已被添加到 Nx monorepo 和 *费用登记应用* 中。
- en: 'The first file we will look at is `transloco-loader.ts`. Inside this file,
    Transloco created an Angular service that is responsible for loading the translation
    files based on a provided language. The following code is generated for you in
    the `transloco-loader.ts` file:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要查看的第一个文件是 `transloco-loader.ts`。在这个文件中，Transloco 创建了一个 Angular 服务，该服务负责根据提供的语言加载翻译文件。以下代码是在
    `transloco-loader.ts` 文件中为你生成的：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see in the preceding code, the `TranslocoHttpLoader` service does
    fetch a JSON file from your assets folder. The fetched JSON file will contain
    translation keys and values for a specific language. You need to provide the `getTranslation()`
    function with a language key that correlates with the naming of your translation
    file. For example, if you have an `en.json` file inside the `i18n` folder containing
    your English translations, you would call the `getTranslation()` function with
    `en` as a parameter to fetch the English translations.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的代码所示，`TranslocoHttpLoader` 服务确实从你的 `assets` 文件夹中获取了一个 JSON 文件。获取到的 JSON
    文件将包含特定语言的翻译键和值。你需要为 `getTranslation()` 函数提供一个与你的翻译文件命名相对应的语言键。例如，如果你在 `i18n`
    文件夹中有一个包含你的英语翻译的 `en.json` 文件，你将使用 `en` 作为参数调用 `getTranslation()` 函数以获取英语翻译。
- en: 'Personally, I like to ensure better typing for the function parameter of the
    `getTranslation()` function and only allow specific string values instead of any
    string. In my case, I have `en` and `nl` as my language files, so I would adjust
    the function parameter to this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 个人的观点，我喜欢确保 `getTranslation()` 函数的函数参数有更好的类型，并且只允许特定的字符串值而不是任何字符串。在我的情况下，我有
    `en` 和 `nl` 作为我的语言文件，所以我将调整函数参数为这个：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can adjust the function parameter type to the languages you support.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以调整函数参数类型以匹配你支持的语言。
- en: Important note
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It’s important to note that when you deploy your Angular application and Transloco
    isn’t able to load your language files, it might be because you need to provide
    a relative path, but generally speaking, this is not the case.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，当你部署你的 Angular 应用程序，并且 Transloco 无法加载你的语言文件时，可能是因为你需要提供一个相对路径，但一般来说，这种情况并不常见。
- en: 'Now let’s see how you can use the `getTranslation()` method with a relative
    path:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看如何使用带有相对路径的 `getTranslation()` 方法：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code, you’ll find an example of a relative path, but you only
    have to provide a relative path if Transloco can’t load your translations with
    the regular setup.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，你可以找到一个相对路径的示例，但你只需要提供一个相对路径，如果 Transloco 无法使用常规设置加载你的翻译。
- en: Now that you know about the `transloco-loader.ts` file and what it is used for,
    let’s look at what else Transloco created for you.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了 `transloco-loader.ts` 文件及其用途，让我们看看 Transloco 还为你创建了什么。
- en: For each language you provided when you ran the command in the terminal, Transloco
    created a translation file for you. Inside your assets folder, an `i18n` folder
    was created, and inside the `i18n` folder, you’ll find a JSON file for each of
    the languages you provided. So, in my case, I provided `en` and `nl`, so Transloco
    created an `en.json` and `nl.json` file for me. You will add your translation
    keys and values to these JSON files. By default, the files contain an empty JSON
    object. After generating the empty translation files, Transloco adjusted the `ApplicationConfig`
    object inside the `app.config.ts` file.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你在终端中运行命令时提供的每种语言，Transloco 都为你创建了一个翻译文件。在你的 `assets` 文件夹中，创建了一个 `i18n` 文件夹，在该
    `i18n` 文件夹中，你可以找到为你提供的每种语言的 JSON 文件。所以，在我的情况下，我提供了 `en` 和 `nl`，因此 Transloco 为我创建了
    `en.json` 和 `nl.json` 文件。你将添加你的翻译键和值到这些 JSON 文件中。默认情况下，这些文件包含一个空的 JSON 对象。在生成空翻译文件后，Transloco
    调整了 `app.config.ts` 文件中的 `ApplicationConfig` 对象。
- en: 'Inside your `ApplicationConfig`, Transloco added the `provideHttpClient()`
    and `provideTransloco()` configurations inside the providers array:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `ApplicationConfig` 中，Transloco 在提供者数组中添加了 `provideHttpClient()` 和 `provideTransloco()`
    配置：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `provideTransloco()` configuration function receives a configuration object
    of its own, configuring the Transloco instance. By default, the configuration
    for Transloco defines the translation loader, the default language, the available
    languages, whether you are in production mode, and whether you support runtime
    language changes within your application. Additionally, you can add other configurations
    such as a fallback language, the number of times Transloco needs to try loading
    a language file before using the fallback language, or if it should log missing
    translation keys.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`provideTransloco()` 配置函数接收一个自己的配置对象，用于配置 Transloco 实例。默认情况下，Transloco 的配置定义了翻译加载器、默认语言、可用语言、是否处于生产模式以及是否支持在应用程序中运行时更改语言。此外，您还可以添加其他配置，例如备用语言、Transloco
    在使用备用语言之前需要尝试加载语言文件多少次，或者是否记录丢失的翻译键。'
- en: Remove the generated provideHttpClient() function
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 删除生成的 provideHttpClient() 函数
- en: Transloco also added the `provideHttpClient()` function inside your providers
    array. Because you already have a `provideHttpClient()` configuration inside the
    providers array in your `ApplicationConfig` object, it’s important to remove this
    configuration added by Transloco. If you do not remove the `provideHttpClient()`
    added by Transloco, it will overwrite your own `provideHttpClient()` configuration,
    which also contains your mock data interceptor configuration.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Transloco 还在您的 providers 数组内部添加了 `provideHttpClient()` 函数。因为您已经在 `ApplicationConfig`
    对象的 providers 数组中有一个 `provideHttpClient()` 配置，所以删除 Transloco 添加的此配置非常重要。如果您不删除
    Transloco 添加的 `provideHttpClient()`，它将覆盖您自己的 `provideHttpClient()` 配置，该配置还包含您的模拟数据拦截器配置。
- en: 'You need to adjust one more thing because of the mock data interceptor. Go
    to the `mock.interceptor.ts` file and adjust the first `if` check. We want to
    return the request without modifying it in production (as we already do) or if
    the request URL ends with `.json`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于模拟数据拦截器，您还需要调整一件事。转到 `mock.interceptor.ts` 文件并调整第一个 `if` 检查。我们希望在不修改请求的情况下返回请求（就像我们在生产中已经做的那样）或如果请求
    URL 以 `.json` 结尾：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you now check the network tab of your browser console, you’ll see that a
    request is made and successfully fetches the `en.json` file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在检查浏览器控制台的“网络”标签页，您会看到有一个请求被发送并成功获取了 `en.json` 文件。
- en: Now that you know what Transloco generated and added to your application, let’s
    move on and learn how you can use Transloco to support content in multiple languages.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道了 Transloco 生成了什么并添加到您的应用程序中，让我们继续学习如何使用 Transloco 来支持多语言内容。
- en: Translating content using Transloco
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Transloco 翻译内容
- en: 'To translate values using Transloco, you create key-value pairs in your translation
    files. You use the same key in each translation file and provide it with the correct
    translation value for the given language file. The keys are all lowercase, and
    words are separated by an underscore. For example, if I wanted to translate `Expenses
    Overview`, I would add the following in the `en.json` translation file:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Transloco 翻译值，您在翻译文件中创建键值对。您在每个翻译文件中使用相同的键，并为其提供给定语言文件的正确翻译值。键都是小写，单词之间用下划线分隔。例如，如果我想翻译
    `Expenses Overview`，我会在 `en.json` 翻译文件中添加以下内容：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the other translation files, you add the same `expenses_overview` key and
    assign it the translation value for that specific language. For example, in my
    `nl.json` file, I would add the same key with the Dutch translation:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他翻译文件中，您添加相同的 `expenses_overview` 键，并为其分配特定语言的翻译值。例如，在我的 `nl.json` 文件中，我会添加相同的键并带有荷兰语的翻译：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now that you know how to add translation keys and values to the translation
    files, let’s see how to use these key-value pairs inside your application to translate
    content. You can translate values inside your HTML templates and the TypeScript
    files. We’ll start by looking into the HTML translations, and you will learn about
    translating values inside the TypeScript files after that.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道了如何向翻译文件添加翻译键和值，让我们看看如何在您的应用程序中使用这些键值对来翻译内容。您可以在 HTML 模板和 TypeScript
    文件中翻译值。我们将首先查看 HTML 翻译，之后您将学习如何在 TypeScript 文件中翻译值。
- en: Translating values in the HTML template
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 HTML 模板中翻译值
- en: Inside HTML templates, you can translate values with a **structural directive**,
    an **attribute directive**, or a **translation pipe**. It’s recommended to use
    the structural directive. Both the pipe and directives create subscriptions to
    observe when the user changes the selected languages. When using the structural
    directive, you only create a single subscription for the template. In contrast,
    the pipe and attribute directives create a subscription each time you use them
    in a template, which can be multiple times. Also, the structural directive caches
    the translations, so if you’re using the same translation key numerous times in
    a template, the structural directive can return it directly from the cache, improving
    your performance and memory usage.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML模板中，你可以使用**结构指令**、**属性指令**或**翻译管道**来翻译值。建议使用结构指令。管道和指令都会创建订阅以观察用户何时更改选定的语言。当使用结构指令时，你只为模板创建一个订阅。相比之下，管道和属性指令每次在模板中使用时都会创建一个订阅，这可能在模板中多次发生。此外，结构指令会缓存翻译，所以如果你在模板中多次使用相同的翻译键，结构指令可以直接从缓存中返回它，从而提高你的性能和内存使用。
- en: 'Because the structural directive is the recommended approach, let’s first learn
    how to use that before we look at the pipe and attribute directive. Because we
    use a standalone component, we need to import the directive in the imports array
    of the component before we can use it:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因为结构指令是推荐的方法，所以在查看管道和属性指令之前，让我们首先学习如何使用它。因为我们使用的是独立组件，所以在我们可以使用它之前，我们需要将其导入到组件的`imports`数组中：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After importing the directive, add it to the expenses overview page. When using
    the structural directive, it’s recommended to wrap the entire template in an `ng-container`
    element and add the structural directive on the `ng-container` element:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 导入指令后，将其添加到支出概述页面。当使用结构指令时，建议将整个模板包裹在一个`ng-container`元素中，并在`ng-container`元素上添加结构指令：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <h1>{{ t variable from the directive as a function and provide it with the translation
    key you want to display. In the browser, you’ll see t function provided by the
    *transloco structural directive. But there are also many scenarios where you need
    to translate something and need dynamic values inside the translated value.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`<h1>{{ t variable from the directive as a function and provide it with the
    translation key you want to display. In the browser, you’ll see t function provided
    by the *transloco structural directive. But there are also many scenarios where
    you need to translate something and need dynamic values inside the translated
    value.'
- en: For example, let’s say you want to change the title inside the `h1` tag from
    `Expenses Overview` to `Expenses overview for <user name>`. In that case, you
    need a way to provide the username to the translatable value so it can be inserted
    in the correct place. You also can’t just append the username because the build-up
    of your translatable value might not be the same for each language, or your dynamic
    value has to be inserted somewhere in the middle of your translated value. Luckily,
    there is a simple solution for this—you can add parameters inside your translation
    values and provide a value for these parameters whenever you use the translation
    key connected to the translation value.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你想将`h1`标签内的标题从`Expenses Overview`更改为`Expenses overview for <user name>`。在这种情况下，你需要一种方法将用户名提供给可翻译的值，以便将其插入正确的位置。你也不能仅仅追加用户名，因为你的可翻译值在每种语言中可能不同，或者你的动态值需要在翻译值的中间某个位置插入。幸运的是，有一个简单的解决方案——你可以在你的翻译值中添加参数，并在使用与翻译值关联的翻译键时提供这些参数的值。
- en: 'To achieve this, start by adding another (or changing the existing) translation
    key inside the translation files:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，首先在翻译文件中添加另一个（或更改现有的）翻译键：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As you can see, we’ve added a parameter in our translation value by using double
    curly brackets. Now, inside the HTML template, you can provide a value for the
    user translation parameter like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，我们通过使用双大括号在我们的翻译值中添加了一个参数。现在，在HTML模板中，你可以像这样为用户翻译参数提供一个值：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, you can provide an object to the `t` function as a second parameter.
    The first parameter for the `t` function is the translation key and the second
    parameter is optional and can be used to provide values for the translation parameters.
    In our example, we use a `user` object with a `fullName` property to provide the
    user name to the translation parameter (we currently don’t have this user object
    in our component; it’s just an example, and you can provide the user translation
    parameter with any property or static value you want). Besides parameters and
    simple translation keys, you can also group translation keys inside the translation
    files.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，您可以将一个对象传递给`t`函数作为第二个参数。`t`函数的第一个参数是翻译键，第二个参数是可选的，可以用来为翻译参数提供值。在我们的例子中，我们使用一个具有`fullName`属性的`user`对象来向翻译参数提供用户名（我们当前组件中没有这个用户对象；这只是一个例子，您可以使用任何属性或静态值来提供用户翻译参数）。除了参数和简单的翻译键之外，您还可以在翻译文件中分组翻译键。
- en: 'To group translation keys, create a grouping key, for example, `expenses_overview_page`,
    and add nested keys under the group key like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要分组翻译键，创建一个分组键，例如`expenses_overview_page`，然后在分组键下添加嵌套键，如下所示：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Especially when your translation files grow larger, this helps to locate specific
    translations quickly. Using this approach, you might end up with some duplicate
    translation values. Still, the improved maintainability is a more significant
    win than having a few duplicate translation values, but your approach is up to
    you and your team. When using the grouped approach, you use the following syntax
    inside your HTML template:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 尤其当您的翻译文件变得更大时，这有助于快速定位特定的翻译。使用这种方法，您可能会得到一些重复的翻译值。尽管如此，改进的可维护性比几个重复的翻译值更有意义，但您的做法取决于您和您的团队。当使用分组方法时，您在HTML模板中使用以下语法：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As you can see in the preceding example, you first define the group name followed
    by a dot and then the translation key. As you might imagine, prefixing every translation
    key with the group name might get redundant, so to make things easier, you can
    define this group name inside the `*``transloco` directive:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的示例中所见，您首先定义组名，然后是一个点，然后是翻译键。正如您所想象的那样，在每个翻译键前加上组名可能会变得冗余，因此为了简化，您可以在`*transloco`指令中定义此组名：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When you define the group name inside the directive, you only have to use the
    inner translation keys inside the `t` functions:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在指令中定义组名时，您只需在`t`函数中使用内部翻译键：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You now know how to declare translation key-value pairs in groups or regularly
    and how to translate them inside your HTML templates using the `*transloco` structural
    directive. Alternatively, you can use the `transloco` attribute directive or pipe
    to do your translations; however, as mentioned, the attribute directive is recommended
    because it creates fewer subscriptions and has caching throughout your HTML template.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在知道如何声明分组或常规的翻译键值对，以及如何在HTML模板中使用`*transloco`结构指令来翻译它们。或者，您可以使用`transloco`属性指令或管道来完成您的翻译；然而，如前所述，属性指令是推荐的，因为它在您的HTML模板中创建更少的订阅，并且具有缓存功能。
- en: 'To give a full overview of the possibilities, here is an example including
    translation parameters using the pipe:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供一个全面的概述，以下是一个使用管道包括翻译参数的示例：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Lastly, you can use the attribute directive:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以使用属性指令：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '@Injectable({ providedIn: ''root'' })'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '@Injectable({ providedIn: ''root'' })'
- en: export class TranslationService {
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: export class TranslationService {
- en: translocoService = inject(TranslocoService);
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: translocoService = inject(TranslocoService);
- en: translationsLoaded = toSignal<boolean>(this.translocoService.events$.pipe(filter(event
    => event.type === ‹translationLoadSuccess›), map(event => !!event)));
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: translationsLoaded = toSignal<boolean>(this.translocoService.events$.pipe(filter(event
    => event.type === 'translationLoadSuccess'), map(event => !!event)));
- en: '}'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: protected readonly translationService = inject(TranslationService);
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: protected readonly translationService = inject(TranslationService);
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: translationEventsEffect = effect(() => {
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: translationEventsEffect = effect(() => {
- en: if (this.translationService.translationsLoaded()) {
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: if (this.translationService.translationsLoaded()) {
- en: // Perform your translations here
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: // 在此处执行您的翻译
- en: '}'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: this.translationService.translocoService.translate('expenses_overview_page.title')
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: this.translationService.translocoService.translate('expenses_overview_page.title')
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'this.translationService.translocoService.translate('' expenses_overview_for_user'',
    {user: user.fullname})'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 'this.translationService.translocoService.translate('' expenses_overview_for_user'',
    {user: user.fullname})'
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: this.translationService.translocoService.selectTranslate('expenses_overview_page.title').subscribe((title)
    => {
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: this.translationService.translocoService.selectTranslate('expenses_overview_page.title').subscribe((title)
    => {
- en: console.log(‹==>›, title);
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(‹==>›, title);
- en: '});'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: <div>
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: '<select #selectList (change)=»languageChange.emit(selectList.value)»>'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '<select #selectList (change)=»languageChange.emit(selectList.value)»>'
- en: <option *ngFor=»let lang of languages()» (click)=»languageChange.emit(lang)»
    [value]=»lang»>{{ lang }}</option>
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: <option *ngFor=»let lang of languages()» (click)=»languageChange.emit(lang)»
    [value]=»lang»>{{ lang }}</option>
- en: </select>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: </select>
- en: </div>
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: '[PRE25]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: export class NavbarComponent {
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: export class NavbarComponent {
- en: 'navbarItems = input([], { transform: addHome });'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 'navbarItems = input([], { transform: addHome });'
- en: languages = input<string[]>([]);
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: languages = input<string[]>([]);
- en: '@Output() languageChange = new EventEmitter();'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '@Output() languageChange = new EventEmitter();'
- en: '}'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: getLanguages() {
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: getLanguages() {
- en: return this.translocoService.getAvailableLangs() as string[];
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: return this.translocoService.getAvailableLangs() as string[];
- en: '}'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: <bt-libs-navbar …… [languages]="translationService.getLanguages()" />
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: <bt-libs-navbar …… [languages]="translationService.getLanguages()" />
- en: '[PRE28]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: <bt-libs-navbar …… (languageChange)="translationService.translocoService.setActiveLang($event)"
    />
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <bt-libs-navbar …… (languageChange)="translationService.translocoService.setActiveLang($event)"
    />
- en: '[PRE29]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: npm i @ngneat/transloco-locale
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: npm i @ngneat/transloco-locale
- en: '[PRE30]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: provideTranslocoLocale({
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: provideTranslocoLocale({
- en: 'langToLocaleMapping: { en: ‹en-US›, nl: ‹nl-NL› }'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 'langToLocaleMapping: { en: ‹en-US›, nl: ‹nl-NL› }'
- en: '})'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE31]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: this.translocoService.setLocale('en-US');
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: this.translocoService.setLocale('en-US');
- en: '[PRE32]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: export interface TranslocoLocaleConfig {
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: export interface TranslocoLocaleConfig {
- en: 'defaultLocale?: Locale;'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 'defaultLocale?: Locale;'
- en: 'defaultCurrency?: Currency;'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 'defaultCurrency?: Currency;'
- en: 'localeConfig?: LocaleConfig;'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 'localeConfig?: LocaleConfig;'
- en: 'langToLocaleMapping?: LangToLocaleMapping;'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 'langToLocaleMapping?: LangToLocaleMapping;'
- en: 'localeToCurrencyMapping?: LocaleToCurrencyMapping;'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 'localeToCurrencyMapping?: LocaleToCurrencyMapping;'
- en: '}'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE33]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: <td>{{ expense.amount.value.toFixed(2) | en to nl inside the navbar (in a production
    environment, the backend should also return different data because of the exchange
    rate between the currencies, or the API can provide the exchange rate so you can
    perform the conversions on the frontend).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <td>{{ expense.amount.value.toFixed(2) | en to nl inside the navbar (在生产环境中，后端也应返回不同的数据，因为货币之间的汇率，或者
    API 可以提供汇率，以便您可以在前端执行转换)。
- en: 'You can provide the `translocoCurrency` pipe with some additional options for
    further configuring the displayed value:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为 `translocoCurrency` 管道提供一些额外的选项来进一步配置显示的值：
- en: '`display`: This controls what you want to display for the currency unit. The
    options you can choose from are code, symbol, narrowSymbol, and name.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display`: 此选项控制您想要显示的货币单位。您可以选择的选项有 code、symbol、narrowSymbol 和 name。'
- en: '`numberFormatOptions`: This is an object that controls how the numbers are
    formatted. You can provide the object with `Intl.NumberFormatOptions` properties
    (`Intl.NumberFormatOptions` are native JavaScript format options).'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numberFormatOptions`: 这是一个对象，用于控制数字的格式。您可以为该对象提供 `Intl.NumberFormatOptions`
    属性（`Intl.NumberFormatOptions` 是原生的 JavaScript 格式选项）。'
- en: '`currencyCode`: With this option, you can specify the currency symbol that
    should be used by the pipe.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`currencyCode`: 使用此选项，您可以指定管道应使用的货币符号。'
- en: '`locale`: With this option, you can provide a locale option, such as en-US
    or nl-NL.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`locale`: 使用此选项，您可以提供区域设置选项，例如 en-US 或 nl-NL。'
- en: 'The following is an example of the `translocoCurrency` pipe including parameters:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个包含参数的 `translocoCurrency` 管道的示例：
- en: '[PRE34]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The configuration options are optional and will overwrite any default settings
    you configured inside the `provideTranslocoLocale()` function.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 配置选项是可选的，并将覆盖您在 `provideTranslocoLocale()` 函数内部配置的任何默认设置。
- en: Now that you know about the currency pipe, explore the other localization pipes
    Transloco has to offer.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了货币管道，探索 Transloco 提供的其他本地化管道。
- en: Localizing dates using the translocoDate pipe
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 translocoDate 管道本地化日期
- en: When localizing dates, you want to ensure the dates are formatted correctly
    depending on the language settings (or localization settings if you have them
    separated) the user has selected. Dates in the EU and USA, for example, are formatted
    differently. For instance, in the USA, dates start with the month. In the EU,
    they begin with the day. So, if you want to display the 20th of January, 2024
    for users from the USA, that would be 1/20/2024, and for EU users, 20-01-2024
    would be the conventional formatting. Also, for English-speaking users, months
    are always capitalized, whereas this is not the case for some EU languages.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地化日期时，您想要确保日期格式正确，这取决于用户选择的语言设置（或如果它们是分开的，本地化设置）。例如，欧盟和美国的日期格式不同。例如，在美国，日期以月份开始。在欧盟，它们以日期开始。因此，如果您想为美国用户显示
    2024 年 1 月 20 日，这将表示为 1/20/2024，而对于欧盟用户，20-01-2024 将是传统的格式。此外，对于讲英语的用户，月份总是大写，而对于某些欧盟语言来说则不是这样。
- en: 'To provide the best possible user experience, dates in your applications should
    be formatted correctly. The `translocoDate` pipe offers a simple way to achieve
    this. Just import the pipe into your component (if you’re using standalone components).
    Similar to the currency pipe, you can replace the native Angular date pipe with
    the `translocoDate` pipe, and your dates will automatically react when the user
    changes the language (or localization) settings. To demonstrate this, you can
    change the date pipe you used in the `expenses-overview-page.component.html` file:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供最佳的用户体验，您的应用程序中的日期应正确格式化。`translocoDate` 管道提供了一种简单的方法来实现这一点。只需将管道导入到您的组件中（如果您正在使用独立组件）。类似于货币管道，您可以用
    `translocoDate` 管道替换原生的 Angular 日期管道，并且当用户更改语言（或本地化）设置时，您的日期将自动响应。为了演示这一点，您可以在
    `expenses-overview-page.component.html` 文件中更改您使用的日期管道：
- en: '[PRE35]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: <!--1,234,567,890  en-US -->
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <!--1,234,567,890  en-US -->
- en: '<span> {{ 1234567890 | en-US, the large number is separated by commas. If you
    make it a decimal number, the decimal values will be separated by a dot:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: <span> {{ 1234567890 | en-US, 大数以逗号分隔。如果您将其作为小数，小数值将以点分隔：
- en: '[PRE36]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Just as with the `translocoDate` and `translocoCurrency` pipes, you have some
    additional configuration options for the `translocoDecimal` pipe. The `translocoDecimal`
    pipe can take the following parameters:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 `translocoDate` 和 `translocoCurrency` 管道一样，您为 `translocoDecimal` 管道有一些额外的配置选项。`translocoDecimal`
    管道可以接受以下参数：
- en: '`numberFormatOptions`: This is an object containing the `Intl.NumberFormatOptions`
    formatting properties (`Intl.NumberFormatOptions` is a native JavaScript formatting
    object)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numberFormatOptions`: 这是一个包含 `Intl.NumberFormatOptions` 格式化属性的对象（`Intl.NumberFormatOptions`
    是一个原生的 JavaScript 格式化对象）'
- en: '`locale`: With this option, you can provide a locale option, such as en-US
    or nl-NL'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`locale`: 使用此选项，您可以提供区域设置选项，例如 en-US 或 nl-NL'
- en: You’ve now learned how you can use the different localization pipes of the Transloco
    library and what configuration options you can provide to the pipes to control
    the output. In the next section, you’ll learn how to make your Angular applications
    accessible to everybody.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经学会了如何使用 Transloco 库的不同本地化管道，以及您可以提供哪些配置选项来控制输出。在下一节中，您将学习如何使您的 Angular
    应用程序对所有人可访问。
- en: Making your Angular applications accessible to everyone
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使您的 Angular 应用程序对所有人可访问
- en: In a world that relies more on web applications, ensuring everyone can use your
    application is essential. Making your Angular application accessible to people
    with motor or visual impairments is crucial in ensuring that users of all abilities
    can effectively interact with it. **Accessibility**, often abbreviated as **a11y**,
    involves designing and developing your application to be usable by people with
    diverse needs, including those with disabilities.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个越来越依赖网络应用的世界里，确保每个人都能使用您的应用程序至关重要。确保您的 Angular 应用程序对有运动或视觉障碍的人可访问是确保所有能力用户都能有效与之互动的关键。**可访问性**，通常缩写为
    **a11y**，涉及设计和开发您的应用程序，使其能够被具有不同需求的人使用，包括那些有残疾的人。
- en: 'As a developer, I often forget that not everyone can use a keyboard or see
    a screen just like I can. Not only people with permanent disabilities but also
    people who temporarily can’t use their hands or sight should be able to keep interacting
    with your applications. In some countries, it’s even enforced by law that your
    application has to implement specific accessibility standards. A commonly used
    standard for accessibility is the **Web Content Accessibility Guidelines 2.2 (WCAG
    2.2)**. WCAG 2.2 has 13 guidelines to follow:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名开发者，我经常忘记并不是每个人都能像我能一样使用键盘或看到屏幕。不仅包括永久性残疾的人，还包括那些暂时无法使用他们的手或视力的人也应该能够继续与你的应用程序互动。在一些国家，法律甚至强制要求你的应用程序实施特定的可访问性标准。一个常用的可访问性标准是**Web内容可访问性指南2.2（WCAG
    2.2）**。WCAG 2.2有13条准则需要遵循：
- en: '**Text alternatives**: Provide text alternatives for non-text content to make
    it accessible to users who cannot see images or hear audio.'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**文本替代**：为非文本内容提供文本替代方案，使其对无法看到图像或听到音频的用户可访问。'
- en: '**Time-based media**: Provide alternatives for time-based media, such as audio
    and video, to ensure accessibility for users who cannot hear or see multimedia
    content.'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**基于时间的媒体**：为基于时间的媒体提供替代方案，如音频和视频，以确保无法听到或看到多媒体内容的用户能够访问。'
- en: '**Adaptable**: Create content that can be presented in different ways without
    losing information or structure, ensuring accessibility for users who rely on
    various assistive technologies.'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**适应性**：创建可以在不同方式下呈现而不丢失信息或结构的内容，确保依赖于各种辅助技术的用户能够访问。'
- en: '**Distinguishable**: Ensure sufficient contrast, provide alternatives for audio
    content, and avoid distractions that could hinder accessibility to make it easier
    for users to see and hear content.'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**可区分性**：确保足够的对比度，提供音频内容的替代方案，并避免可能阻碍访问的干扰，使用户更容易看到和听到内容。'
- en: '**Keyboard accessible**: Make all functionality available from a keyboard interface,
    ensuring accessibility for users who cannot use a mouse.'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**键盘可访问**：确保所有功能都可通过键盘界面访问，确保无法使用鼠标的用户能够访问。'
- en: '**Enough time**: Provide users with enough time to read and use content, ensuring
    accessibility for users who may need more time to interact with web pages.'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**充足时间**：为用户提供足够的时间阅读和使用内容，确保那些可能需要更多时间与网页互动的用户能够访问。'
- en: '**Seizures and physical reactions**: Do not design content in a way that is
    known to cause seizures or physical reactions, ensuring accessibility for users
    with photosensitive epilepsy or other conditions.'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**癫痫和身体反应**：不要设计可能导致癫痫发作或身体反应的内容，确保对患有光敏感性癫痫或其他状况的用户可访问。'
- en: '**Navigable**: Make web pages navigable and predictable, ensuring accessibility
    for users who rely on navigation aids or have cognitive disabilities.'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**可导航性**：使网页可导航且可预测，确保依赖于导航辅助工具或具有认知障碍的用户能够访问。'
- en: '**Input modalities**: Ensure compatibility with different input modalities,
    such as touch, speech, and gestures, ensuring accessibility for users with disabilities
    that affect how they interact with web content.'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**输入模式**：确保与不同的输入模式兼容，如触摸、语音和手势，确保那些影响他们与网页内容互动的残疾用户能够访问。'
- en: '**Device independence**: Ensure compatibility with various devices, platforms,
    and assistive technologies, ensuring accessibility for users who use different
    devices to access the web.'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设备独立性**：确保与各种设备、平台和辅助技术兼容，确保使用不同设备访问网络的用户能够访问。'
- en: '**Readable**: Make text content readable and understandable, ensuring accessibility
    for users with cognitive disabilities or those who use screen readers.'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**可读性**：使文本内容易于阅读和理解，确保认知障碍或使用屏幕阅读器的用户能够访问。'
- en: '**Predictable**: Make web pages operate in predictable ways, ensuring accessibility
    for users who rely on consistent navigation and interaction patterns.'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**可预测性**：使网页以可预测的方式运行，确保依赖于一致导航和交互模式的用户能够访问。'
- en: '**Input assistance**: Help users avoid and correct mistakes, ensuring accessibility
    for users who may have difficulty entering information or navigating web forms.'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**输入辅助**：帮助用户避免和纠正错误，确保信息输入或导航网页表单可能存在困难的用户能够访问。'
- en: Now that you know the 13 guidelines of WCAG 2.2, let’s examine what you can
    do in your Angular applications to adhere to these guidelines.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了WCAG 2.2的13条准则，让我们来看看在你的Angular应用程序中你可以做些什么来遵守这些准则。
- en: How to make Angular applications accessible
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如何使Angular应用程序可访问
- en: The easiest way to adhere to accessibility guidelines is by using a UI library
    that takes these concerns out of your hands. Some good Angular UI libraries include
    Angular Material, PrimeNG, and Ng Zorro. However, not all your application code
    can be developed using a UI library, and sometimes your employer develops its
    own UI components; in these scenarios, you need to apply WCAG yourself. The first
    thing you need to do to ensure you adhere to WCAG is to use semantic HTML.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循可访问性指南的最简单方法是使用一个UI库，该库将这些关注点从你的手中拿走。一些好的Angular UI库包括Angular Material、PrimeNG和Ng
    Zorro。然而，并非所有应用程序代码都可以使用UI库开发，有时你的雇主会开发自己的UI组件；在这些情况下，你需要自己应用WCAG。为了确保你遵循WCAG，你需要做的第一件事是使用语义化HTML。
- en: Semantic HTML is when you use the appropriate HTML element for the element you
    want to visualize on the screen. Often, developers like to use too many `<div>`
    and `<span>` elements; these elements don’t tell a screen reader anything about
    their purpose. Try to use HTML elements such as `<label>`, `<button>`, `<input>`,
    `<header>`, `<footer>`, `<section>`, `<article>`, `<form>`, etc. When using semantic
    HTML elements, screen readers can better explain the page to users who can’t see
    the page. Besides implementing semantic HTML, you should ensure that the user
    can navigate the page using the keyboard.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 语义化HTML是指使用适当的HTML元素来可视化屏幕上的元素。通常，开发者喜欢使用过多的`<div>`和`<span>`元素；这些元素并没有告诉屏幕阅读器任何关于它们用途的信息。尽量使用如`<label>`、`<button>`、`<input>`、`<header>`、`<footer>`、`<section>`、`<article>`、`<form>`等HTML元素。当使用语义化HTML元素时，屏幕阅读器可以更好地向无法看到页面的用户解释页面内容。除了实现语义化HTML之外，你还应该确保用户可以使用键盘导航页面。
- en: Using the tabindex attribute
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tabindex`属性
- en: 'You can ensure HTML elements are focusable with the tab key on your keyboard
    by adding a `tabindex` attribute. This default focus behavior is implemented for
    the following elements: `<a>` or `<area>` with an `href` attribute, `<button>`,
    `<iframe>`, `<input>`, `<object>`, `<select>`, `<textarea>`, `<SVG>`, and `<summary>`
    elements that provide a summary for a `<details>` element. Developers don’t need
    to manually add a `tabindex` attribute to these elements unless they want to alter
    their default focus behavior.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过添加`tabindex`属性来确保HTML元素可以通过键盘上的tab键聚焦。这种默认聚焦行为适用于以下元素：具有`href`属性的`<a>`或`<area>`、`<button>`、`<iframe>`、`<input>`、`<object>`、`<select>`、`<textarea>`、`<SVG>`和为`<details>`元素提供摘要的`<summary>`元素。开发者不需要手动添加`tabindex`属性到这些元素，除非他们想要改变它们的默认聚焦行为。
- en: For instance, setting a negative `tabindex` value would remove the element from
    the focus navigation order, effectively making it non-focusable. However, it’s
    essential to exercise caution when modifying the default behavior of focusable
    elements to ensure an intuitive and accessible user experience.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，设置负的`tabindex`值将移除元素从焦点导航顺序，从而使其无法聚焦。然而，在修改可聚焦元素的默认行为时，必须谨慎行事，以确保直观且易于访问的用户体验。
- en: 'With the `tabindex` attribute, you can make HTML elements keyboard-focusable,
    prevent elements from being keyboard-focusable, and determine the focus order.
    As mentioned before, when you provide a negative integer to the `tabindex` attribute,
    the HTML element becomes non-focusable when using the keyboard. If you provide
    a `0` for the `tabindex` attribute, the element maintains the default tab order
    (from top to bottom, based on the order of the HTML elements). Lastly, you can
    provide positive integers. Elements with a positive integer will be focused before
    the default focus order kicks in, starting at `tabindex 1` and ending at the highest
    `tabindex`. When there are no more tabindex attributes with a positive integer,
    the next focused element is the first HTML element with the default `tabindex`
    attribute:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tabindex`属性，你可以使HTML元素可键盘聚焦，防止元素被键盘聚焦，并确定聚焦顺序。如前所述，当你为`tabindex`属性提供一个负整数时，HTML元素在使用键盘时将不可聚焦。如果你为`tabindex`属性提供一个`0`，则元素保持默认的tab顺序（从上到下，根据HTML元素的顺序）。最后，你可以提供正整数。具有正整数的元素将在默认聚焦顺序之前聚焦，从`tabindex
    1`开始，到最高的`tabindex`结束。当没有更多的具有正整数的`tabindex`属性时，下一个聚焦的元素是第一个具有默认`tabindex`属性的HTML元素：
- en: '[PRE37]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: <button [attr.aria-label]="dynamicValue">…</button>
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`<button [attr.aria-label]="dynamicValue">…</button>`'
- en: <button [attr.aria-label]="'translationkey' | translate">…</button>
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`<button [attr.aria-label]="''translationkey'' | translate">…</button>`'
- en: <button aria-label="static value">…</button>
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`<button aria-label="static value">…</button>`'
- en: '[PRE38]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '<button aria-label attribute and provided it with the text Hamburger menu,
    so a screen reader can clearly explain what the element is about. Alternatively,
    you can use the aria-label attribute to provide a better explanation for elements
    that do contain text:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: <button aria-label 属性，并为其提供了文本“汉堡菜单”，这样屏幕阅读器可以清楚地解释该元素的内容。或者，你也可以使用aria-label属性为包含文本的元素提供更好的解释：
- en: '[PRE39]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: <a href="#" <a> tag, designating the role of the HTML element as a button. Commonly,
    <a> tags are used as links, but in this case, we indicate that it is used as a
    button instead.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: <a href="#" <a> 标签，指定HTML元素的role为按钮。通常，<a>标签被用作链接，但在这个情况下，我们表明它被用作按钮。
- en: More information
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息
- en: Besides the `role` and `aria-label` attributes, there are many other ARIA attributes,
    for example `aria-hidden`, `aria-checked`, `aria-disabled`, and `aria-readonly`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`role`和`aria-label`属性之外，还有许多其他的ARIA属性，例如`aria-hidden`、`aria-checked`、`aria-disabled`和`aria-readonly`。
- en: 'You can find a full list of all ARIA attributes and a detailed explanation
    at the following URL:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下URL找到所有ARIA属性的完整列表和详细解释：
- en: '[https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes).'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes)。'
- en: Now you know what the different accessibility guidelines are and how to implement
    them into your Angular applications. You learned why using a semantic HTML structure
    for your pages is important, so tools such as screen readers can better navigate
    and understand your components and pages. You learned how you can make elements
    focusable with the tab key and how you can control the focus order of different
    elements on the page. Lastly, you learned about the ARIA attributes and how they
    can be used to provide additional information for assistive technologies, such
    as screen readers.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了不同的无障碍性指南以及如何将它们应用到你的Angular应用程序中。你学习了为什么为你的页面使用语义化的HTML结构很重要，这样屏幕阅读器等辅助工具可以更好地导航和理解你的组件和页面。你学习了如何使用Tab键使元素可聚焦，以及如何控制页面中不同元素的聚焦顺序。最后，你学习了ARIA属性以及它们如何被用来为辅助技术，如屏幕阅读器，提供额外信息。
- en: Summary
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to make your applications more accessible to
    people who speak different languages or are located in various locations. You
    learned about the Transloco library and how it can be used to implement localization
    and internationalization. You created language files to provide translation key-value
    pairs and implemented the translations in your HTML templates. You learned to
    translate values using structural directives, attribute directives, pipes, and
    the `TranslocoService`. After learning about translatable content, you learned
    how to format values for users from different locations. You learned about the
    `translocoCurrency`, `translocoDate`, and `translocoDecimal` pipe. You’ve seen
    how to configure your applications for localization and how to overwrite your
    default settings for specific instances within your code. After internationalizing
    and localizing your website, you learned about accessibility. You got familiar
    with the WCAG and how you can ensure they are implemented within your Angular
    applications.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何让你的应用程序对讲不同语言或位于不同地区的人更加无障碍。你了解了Transloco库以及如何用它来实现本地化和国际化。你创建了语言文件以提供翻译键值对，并在你的HTML模板中实现了翻译。你学习了如何使用结构指令、属性指令、管道和`TranslocoService`来翻译值。在了解了可翻译内容之后，你学习了如何为来自不同地区的人格式化值。你学习了`translocoCurrency`、`translocoDate`和`translocoDecimal`管道。你看到了如何为本地化配置你的应用程序，以及如何在代码中特定实例中覆盖默认设置。在国际化并本地化你的网站之后，你学习了无障碍性。你熟悉了WCAG，并了解了如何在Angular应用程序中确保它们得到实施。
- en: In the next chapter, you will learn how to write unit and end-to-endtests for
    your Angular applications.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何为你的Angular应用程序编写单元测试和端到端测试。
- en: '[PRE40]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
