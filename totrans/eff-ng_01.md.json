["```js\nnx test testApp\n```", "```js\nnx run-many -t build lint test\n```", "```js\nrun-many -t build lint test -p testApp testApp2\n```", "```js\nnx watch --projects=testApp,testApp2 --includeDependentProjects -- echo \\$NX_PROJECT_NAME \\$NX_FILE_CHANGES\n```", "```js\nnx affected -t test\n```", "```js\nnx migrate [packageAndVersion]\n```", "```js\nnx migrate latest\n```", "```js\nnx migrate --run-migrations\n```", "```js\nnx graph\n```", "```js\nnx affected:graph\n```", "```js\nnpm i -g nx cypress\n```", "```js\nnpx create-nx-workspace\n```", "```js\nnpm i --save-dev eslint-plugin-deprecation eslint-plugin-rxjs eslint-plugin-rxjs-angular\n```", "```js\n    npm i @nx/plugin\n    ```", "```js\nimport { Tree } from '@nx/devkit';\nimport { libraryGenerator } from '@nx/angular/generators';\nimport { GenerateAngularLibraryGeneratorSchema } from './schema';\nexport async function generateAngularLibraryGenerator(\n  tree: Tree,\n  options: GenerateAngularLibraryGeneratorSchema\n) {\n  await libraryGenerator(tree, options);\n}\nexport default generateAngularLibraryGenerator;\n```", "```js\nawait libraryGenerator(tree, {\n  name: options.name,\n  simpleName: true,\n  standalone: true,\n  buildable: true,\n  prefix: `bt-libs-${options.type}`,\n  style: ‹scss›,\n  changeDetection: ‹OnPush›,\n  directory: `libs/${options.domain}/${options.type}`,\n  tags: `domain:${options.domain}, type:${options.type}`,\n  importPath: `@bt-libs/${options.domain}/${options.type}/${options.name}`,\n});\n```", "```js\nexport interface GenerateAngularLibraryGeneratorSchema {\n  name: string;\n  domain: 'finance' | 'hr' | 'marketing' | 'inventory' | 'shared' ;\n  type: 'ui' | 'data-access' | 'feature' | 'util' | 'all' ;\n}\n```", "```js\n\"domain\": {\n  \"type\": \"string\",\n  \"description\": \"Domain of the library\",\n  \"$default\": {\n    \"$source\": \"argv\",\n    \"index\": 1\n  },\n  \"x-prompt\": {\n    \"message\": \"What domain would you like to use?\",\n    \"type\": \"list\",\n    \"items\": [\"finance\", \"hr\", \"marketing\", \"inventory\", \"shared\"]\n  }\n}\n```", "```js\nasync function generateLibrary(\n  tree: Tree,\n  options: GenerateAngularLibraryGeneratorSchema,\n  type: string\n) {\n  await libraryGenerator(tree, {\n    name: options.name,\n    simpleName: true,\n    standalone: true,\n    buildable: true,\n    prefix: `bt-libs-${type}`,\n    style: ‹scss›,\n    changeDetection: ‹OnPush›,\n    directory: `${options.domain}/${type}`,\n    tags: `domain:${options.domain}, type:${type}`,\n    importPath: `@bt-libs/${options.domain}/${type}/${options.name}`,\n  });\n}\n```", "```js\nconst TYPES = ['ui', 'data-access', 'feature', 'util'];\nexport async function generateAngularLibraryGenerator(\n  tree: Tree,\n  options: GenerateAngularLibraryGeneratorSchema\n) {\n  ………\n}\n```", "```js\n  if (options.type === ‹all›) {\n    for (const type of TYPES) {\n      await generateLibrary(tree, options, type);\n    }\n  } else {\n    await generateLibrary(tree, options, options.type);\n  }\n```", "```js\n  const path = `libs/${options.domain}/${options.type}/${options.name}/src`;\n  tree.delete(`${path}/lib/${options.name}`);\n  tree.write(`${path}/index.ts`, ‹›);\n```", "```js\n        \"@nx/enforce-module-boundaries\"\n          \"error\",\n          {\n            \"enforceBuildableLibDependency\": true,\n            \"depConstraints\": [\n              {\n                \"sourceTag\": \"*\",\n                \"onlyDependOnLibsWithTags\": [\"*\"]\n              }\n            ]\n          }\n```", "```js\n{\n \"sourceTag\": \"domain:finance\",\n \"onlyDependOnLibsWithTags\": [\"domain:finance\"]\n}\n```", "```js\nnx g move --project some-library target/folder/path\n```", "```js\nnx g remove some-project-name\n```"]