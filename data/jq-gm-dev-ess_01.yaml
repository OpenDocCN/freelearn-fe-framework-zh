- en: Chapter 1. jQuery for Games
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 jQuery游戏编程
- en: Over the course of the last few years, jQuery has almost become the default
    framework for any JavaScript development. More than 55 percent of the top 10,000
    most visited websites as well as an estimated total of 24 million websites on
    the Internet are using it (more at [http://trends.builtwith.com/javascript/JQuery](http://trends.builtwith.com/javascript/JQuery)).
    And this trend doesn't show any sign of stopping.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几年里，jQuery几乎已经成为任何JavaScript开发的默认框架。超过55％的最受欢迎的10,000个网站以及估计总共2400万个网站正在使用它（更多信息，请参阅[http://trends.builtwith.com/javascript/JQuery](http://trends.builtwith.com/javascript/JQuery)）。而且这一趋势并没有显示出任何停止的迹象。
- en: This book expects you to have some prior experience of jQuery. If you feel that
    you don't meet this requirement, then you could first learn more about it in *Learning
    jQuery*, *Jonathan Chaffer*, *Karl Swedberg*, *Packt Publishing*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书期望您具有一些jQuery的相关经验。如果您觉得自己不符合这个要求，那么您可以首先在*学习jQuery*，*Jonathan Chaffer*，*Karl
    Swedberg*，*Packt Publishing*中了解更多。
- en: 'This chapter will quickly go through the peculiarities of jQuery and will then
    dive deeper into its most game-oriented functions. Even if you probably have already
    used most of them, you may not be familiar with the full extent of their capabilities.
    The following is a detailed list of the topics addressed in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将快速浏览jQuery的特点，然后更深入地了解它最具游戏性的函数。即使您可能已经使用过其中的大部分，您可能还不了解它们的全部功能。以下是本章涵盖的主题的详细列表：
- en: The peculiarities of jQuery
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery的特点
- en: The function that will help you for moving elements around
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将帮助您移动元素的函数
- en: Event handling
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件处理
- en: DOM manipulation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOM操作
- en: The way of jQuery
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery的方式
- en: jQuery's philosophy differs from most other JavaScript frameworks that predated
    it. Understanding the design patterns it uses is key to writing readable and efficient
    code. We'll cover these patterns in the next sections.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery的哲学与大多数之前的JavaScript框架有所不同。了解它使用的设计模式是编写可读和高效代码的关键。我们将在接下来的几节中讨论这些模式。
- en: Chaining
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接
- en: 'Most jQuery statements are of the following form: a selection followed by one
    or more actions. The way those actions are combined is called chaining and is
    one of the most elegant aspects of jQuery. A beginner using jQuery who wants to
    set the width of an element to 300 pixels and its height to 100 pixels would typically
    write something like:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数jQuery语句的形式如下：选择后跟一个或多个操作。这些操作的组合方式被称为链式，并且是jQuery最优雅的方面之一。一个使用jQuery的初学者想要将元素的宽度设置为300像素，高度设置为100像素，通常会写成：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With chaining, this would be written as:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用链接，这可以写成：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This has many advantages: the element is selected only once, and the resulting
    code is more compact and conveys the semantic meaning that what you want to achieve
    is really only one thing, which is to change the element size.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这有很多优点：元素只被选择一次，并且生成的代码更紧凑，传达了语义意义，即你想要实现的确实只是一件事，那就是改变元素的大小。
- en: Functions that allow chaining don't only make it possible to group many calls
    on the same object, but also there are many ways to actually change on what object
    (or objects) the next function on the chain will operate. In these situations,
    it is typical to use indentation to convey the idea that you're not working on
    the same elements as the previous indentation level.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 允许链式调用的函数不仅可以将许多调用组合在同一个对象上，还有许多实际上可以在哪个对象（或对象）上进行下一个链上的函数操作的方法。在这些情况下，通常使用缩进来传达这样一个想法：你不是在同一层级的元素上操作。
- en: For example, the following chain first selects an element, then sets its background's
    color as `red`. It then changes the elements in the chain to the children of the
    previous element and changes their `background-color` attribute to `yellow`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下链首先选择一个元素，然后将其背景颜色设置为`red`。然后将链中的元素更改为前一个元素的子元素，并将它们的`background-color`属性更改为`yellow`。
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It's important that you always ask yourself how the current interactions with
    the previous and next element in the chain can be avoided for undesired behavior.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 很重要的一点是，您必须始终问自己当前和链中上一个和下一个元素的相互作用如何可以避免产生不良行为。
- en: Polymorphism
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多态性
- en: jQuery has its own way to use polymorphism, and a given function can be called
    in a lot of different ways depending on how much information you want to give
    to it. Let's have a look at the `.css()` function. If called with a `String` data
    type as the only argument, this function will behave as a getter by returning
    the value of the CSS property you asked for.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery有自己的多态使用方式，给定函数可以以许多不同的方式调用，具体取决于你想给它多少信息。让我们看一下`.css()`函数。如果只使用`String`数据类型作为唯一参数调用该函数，则该函数将作为getter运行，返回你要求的CSS属性的值。
- en: 'For example, the following line retrieves the left-hand side position of a
    given element (assuming it''s positioned absolutely):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下行检索给定元素的左侧位置（假设它是绝对定位的）：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: However, if you pass a second argument, it will start to behave like a setter
    and set the value of the CSS property. The interesting thing is that the second
    argument can also be a function. In this situation, the function is expected to
    return the value that will be set to the CSS property.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果传递第二个参数，则它将开始行为类似于setter，并设置CSS属性的值。有趣的是，第二个参数也可以是一个函数。在这种情况下，函数预计返回将设置为CSS属性的值。
- en: 'The following code does just that and uses a function that will increase the
    left-hand side position of the element by one:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码就是这样做的，并使用一个函数，该函数将增加元素的左侧位置一个单位：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'However; wait, there''s more! If you pass just one element to the same function,
    but that element is an object literal, then it will be considered as holding a
    map of properties/values. This will allow you to change many CSS properties in
    one single call, like setting the left and top position to 100 pixels in the following
    example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但是；等一下，还有更多！如果你向同一个函数只传递一个元素，但该元素是一个对象文字，那么它将被视为保存属性/值映射。这将允许你在一个单一调用中更改许多CSS属性，就像在以下示例中将左侧和顶部位置设置为100像素一样：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can also use strings as the key and value of your object literal as it's
    done in JSON.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以像在JSON中那样，使用字符串作为对象文字的键和值。
- en: A very complete resource for finding about all the ways to call a function is
    the jQuery API website ([http://api.jquery.com](http://api.jquery.com)).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常完整的资源，用于了解调用函数的所有方式，是jQuery API网站 ([http://api.jquery.com](http://api.jquery.com))。
- en: We will now focus on a few functions that are of interest for developing games.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将重点关注一些对开发游戏感兴趣的函数。
- en: Moving things around
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动物体
- en: Chaining has a slightly different signification for animation. Though you may
    never actually need to use jQuery animation functions in most of your games, it
    may still be interesting to see the peculiarities of their functioning as it may
    be the cause of many strange behaviors.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于动画，链式有着稍微不同的意义。虽然你在大多数游戏中实际上可能从未需要使用jQuery动画函数，但仍然有意思看到它们的工作特点，因为它可能导致许多奇怪的行为。
- en: Chaining animations
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接动画
- en: The `.animate()` function from jQuery allows you to make a property vary through
    time from the current value to a new one. A typical effect, for example, would
    be to move it left from 10 pixels, or change its height. From what you've seen
    earlier and experienced for other type of functions, you may expect the following
    code to make a div (DOM division element) move diagonally to the position `left
    = 200px` and `top = 200px`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery的`.animate()`函数允许你通过时间使属性的值从当前值变化到新值。举个典型的例子，可以移动它左边10像素，或者改变它的高度。从你之前看到的以及体验到其他类型的函数，你可能期望以下代码将使一个div（DOM
    division元素）对角线移动到位置`left = 200px`和`top = 200px`。
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: However, it doesn't! What you will see instead is the div first moves to reach
    `top = 200px` and only then moves to `left = 200px`. This is called queuing; each
    call to `animate` will be queued to the previous ones and will only execute once
    they're all finished. If you want to have two movements executed at the same time,
    thereby generating a diagonal movement, you'll have to use only one call to `.animate()`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它并不会！相反，你将看到div首先移动到达`top = 200px`，然后才移动到`left = 200px`。这称为排队；每次调用`animate`都将排队到之前的调用，并且只有在它们都完成后才会执行。如果你想同时执行两个移动，从而生成对角线移动，你将只能使用一次`.animate()`调用。
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Another possibility is to explicitly tell the `.animate()` function not to
    queue the animations:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可能性是明确告诉`.animate()`函数不要排队执行动画：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Keep in mind that this also applies to other functions that are in fact wrappers
    around the `.animate()` function, such as the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这也适用于实际上是包装在`.animate()`函数周围的其他函数，例如以下情况：
- en: '`fadeIn()`, `fadeOut()`, and `fadeTo()`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fadeIn()`、`fadeOut()`和`fadeTo()`'
- en: '`hide()` and `show()`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hide()` 和 `show()`'
- en: '`slideUp()` and `slideDown()`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slideUp()` 和 `slideDown()`'
- en: '![Chaining animations](img/5060OT_01_01.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![链接动画](img/5060OT_01_01.jpg)'
- en: Managing the queue
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理队列
- en: Here is a list of functions that you can use to manipulate this queue of animations.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一系列函数，你可以使用它们来操作这个动画队列。
- en: .stop()
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .stop()
- en: The `.stop()` function stops the current animation of the queue. If you provide
    some more arguments to the call, you can also clear the queue and define if the
    elements should stop being animated and stay where they are, or jump to their
    destination.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`.stop()` 函数停止队列当前的动画。如果你在调用时提供了更多的参数，你还可以清除队列并定义元素是否停止动画并停留在原地，或者跳转到它们的目标位置。'
- en: .clearQueue()
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .clearQueue()
- en: The `.clearQueue()` function removes all animations from the queue; not only
    the current one, but also all the next ones.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`.clearQueue()` 函数从队列中删除所有动画；不仅是当前的动画，还有所有接下来的动画。'
- en: .dequeue()
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .dequeue()
- en: The `.dequeue()` function starts the next animation in the queue. This means
    that if an animation is being executed when this function is called, then the
    new one will start as the current one finishes executing. For example, if we take
    the example at the beginning of this section and add a `dequeue()` function at
    the end, the elements will actually start moving diagonally.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`.dequeue()` 函数启动队列中的下一个动画。这意味着当调用此函数时正在执行动画时，新的动画将在当前动画执行完成后开始。例如，如果我们拿本节开头的示例并在结尾添加一个
    `dequeue()` 函数，元素将实际上开始对角线移动。'
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: .delay()
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .delay()
- en: 'The `.delay()` function allows you to insert a pause between two animations
    in the queue. For example, if you want to make an element visible with `.fadeIn()`,
    then wait for 2 seconds and make it disappear again with `.fadeOut()`. This would
    be written like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`.delay()` 函数允许你在队列中的两个动画之间插入一个暂停。例如，如果你想要使用 `.fadeIn()` 使元素可见，然后等待 2 秒，再用
    `.fadeOut()` 使其消失。这将被写成这样：'
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Other usages of queues
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 队列的其他用途
- en: Queues are not used only for animations. When you don't specify otherwise, the
    queue manipulated by those functions is the `fx` queue. This is the default queue
    used by animations. However, if you want to, you could create another queue and
    add any number of custom functions and delays to script some time-dependent behavior
    in your game.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 队列不仅用于动画。当你没有另外指定时，被这些函数操作的队列是 `fx` 队列。这是动画使用的默认队列。但是，如果你愿意，你可以创建另一个队列，并添加任意数量的自定义函数和延迟，以便在游戏中脚本一些时间相关的行为。
- en: Handling of events
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理
- en: If you have used jQuery before, you probably used `.click()` at some point.
    It is used to define an event handler that will respond to a mouse click in jQuery.
    There are many more of those, going from keyboard input, form submission, and
    window resizing, but we will not go through all these. Instead we will focus on
    the more "low-level" functions to handle events in jQuery and explain exactly
    the subtle differences between them.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以前使用过 jQuery，您可能在某个时候使用过 `.click()`。它用于定义一个事件处理程序，用于在 jQuery 中响应鼠标点击。还有许多其他的事件处理程序，从键盘输入、表单提交到窗口调整大小，但我们不会逐一介绍所有这些。而是专注于更
    "低级别" 的函数来处理 jQuery 中的事件，并准确解释它们之间的微妙差异。
- en: You would typically use some of those functions to implement the control of
    your games either with mouse or keyboard inputs.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你通常会使用其中一些函数来实现游戏的控制，无论是通过鼠标还是键盘输入。
- en: .bind()
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .bind()
- en: 'The `.bind()` function is the basic way to handle events. `.click()` is, for
    example, just a wrapper around it. The two lines of the following example have
    exactly the same effect:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`.bind()` 函数是处理事件的基本方式。`.click()` 例如，只是它的一个包装器。以下示例的两行具有完全相同的效果：'
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'However, there is a limitation with the usage of `bind`. Like all other jQuery
    functions, it only applies to the selected elements. Now, imagine a situation
    where you want to execute some task each time a user clicks a link with a given
    class. You would write something like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，使用 `bind` 有一个限制。像所有其他 jQuery 函数一样，它仅适用于所选元素。现在，想象一种情况，你想要在用户每次点击具有给定类的链接时执行某些任务。你会写出这样的代码：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will work as intended, but only for the link present in the webpage at
    the moment of its execution. What if you change the content of the page with an
    Ajax call, and the new content also contains links with this class? You will have
    to call this line of code again to enhance the new links!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将按预期工作，但仅适用于网页中在执行时存在的链接。如果你使用 Ajax 调用更改页面内容，并且新内容也包含具有此类的链接，那么你将不得不再次调用此行代码来增强新链接！
- en: This is far from ideal, because you have to manually track all event handlers
    you defined that may require to be called again later and all the places where
    you change the content of the page. This process is very likely to go wrong and
    you'll end up with some inconsistencies.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这远非理想，因为你必须手动跟踪你定义的所有事件处理程序，这些处理程序可能需要稍后再次调用，以及你改变页面内容的所有位置。这个过程很可能会出错，你最终会得到一些不一致的结果。
- en: The solution to this problem is `.delegate()`, which is explained in detail
    in the following section.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的方法是 `.delegate()`，详细说明见下一节。
- en: .delegate()
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .delegate()
- en: With `.delegate()`, you give the responsibility of handling events to a parent
    node. This way all elements added later on as a child to this node (directly under
    it or not) will still see the corresponding handler execute.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `.delegate()`，你将事件处理的责任交给了一个父节点。这样，稍后添加到该节点（直接或间接）下面的所有元素仍将看到相应的处理程序执行。
- en: The following code fixes the preceding example to make it work with a link added
    later on. It's implied that all those links are children of a div with the `ID`
    attribute as `page`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码修复了前面的示例，使其能够与稍后添加的链接一起工作。这意味着所有这些链接都是 `ID` 属性为 `page` 的 div 的子元素。
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This is a very elegant way to solve the problem and it will come in very handy
    while creating games, for example, where you click on sprites.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是解决问题的一个非常优雅的方式，当你创建游戏时，它会非常方便，例如，当你点击精灵时。
- en: Removing event handlers
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移除事件处理程序
- en: If you need to remove an event handler you can simply use the `.unbind()` and
    `.undelegate()` functions.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要移除一个事件处理程序，你可以简单地使用 `.unbind()` 和 `.undelegate()` 函数。
- en: jQuery 1.7
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jQuery 1.7
- en: In jQuery 1.7, `.delegate()` and `.bind()` have been replaced by `.on()` (and
    `.off()` to remove the handlers). Think of it as a `.delegate()` function with
    the capacity to behave like `.bind()`. If you understand how `.delegate()` works,
    you will have no problem to use `.on()`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在 jQuery 1.7 中，`.delegate()` 和 `.bind()` 已被 `.on()`（以及 `.off()` 用于移除处理程序）取代。将其视为一个具有像
    `.bind()` 一样行为能力的 `.delegate()` 函数。如果你理解了 `.delegate()` 的工作原理，你将没有问题使用 `.on()`。
- en: Associating data with DOM elements
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据与 DOM 元素关联
- en: Let's say you create a div element for each enemy in your game. You will probably
    want to associate them to some numerical value, like their life. You may even
    want to associate an object if you're writing object-oriented code.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你为游戏中的每个敌人创建一个 div 元素。你可能想要将它们与一些数值关联起来，比如它们的生命值。如果你正在编写面向对象的代码，你甚至可能想要关联一个对象。
- en: jQuery provides a simple method to do this, that is, `.data()`. This method
    takes a key and a value. If you later call it with only the key, it will return
    the value. For example, the following code associates the numerical value `3`
    with the key `"numberOfLife"` for the element with ID `enemy3`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 提供了一个简单的方法来做到这一点，即 `.data()`。这个方法接受一个键和一个值。如果你稍后只调用它的键，它将返回这个值。例如，以下代码将数值
    `3` 与键 `"numberOfLife"` 关联到了 ID 为 `enemy3` 的元素上。
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You may be thinking, "Why shouldn't I simply store my values directly on the
    DOM element?". There is a very good answer for that. By using `.data()`, you completely
    decouple your value and the DOM, which will make it way easier to avoid a situation
    where the garbage collector doesn't free the memory associated with the DOM of
    a removed element because you're still holding some cyclic reference to it somewhere.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在想，“为什么我不能直接将我的值存储在 DOM 元素上呢？”对此有一个非常好的答案。通过使用 `.data()`，你完全解耦了你的值和 DOM，这将使得避免因为你仍然在某个地方保持着对它的某个循环引用而导致垃圾回收器没有释放与已移除元素的
    DOM 关联的内存的情况变得更容易。
- en: If you defined some values using the HTML5 data attribute ([http://ejohn.org/blog/html-5-data-attributes/](http://ejohn.org/blog/html-5-data-attributes/)),
    the `.data()` function retrieves them too.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 HTML5 数据属性定义了一些值（[http://ejohn.org/blog/html-5-data-attributes/](http://ejohn.org/blog/html-5-data-attributes/)），`.data()`
    函数也会将它们检索出来。
- en: However, you have to keep in mind that making calls to this function has some
    performance cost, and if you have many values to store for an element, you may
    want to store all of them in an object literal associated with a single key instead
    of many values, each associated with their own key.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，你必须记住调用这个函数会有一些性能成本，如果你需要为一个元素存储许多值，你可能会希望将它们全部存储在与单个键关联的对象字面量中，而不是许多值，每个值都与自己的键关联。
- en: Manipulating the DOM
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操纵 DOM
- en: While creating a game with jQuery, you will spend quite some time adding and
    removing nodes to the DOM. For example, you could create new enemies or remove
    dead ones. In the next section we'll cover the functions you will be using and
    we will also see how they work.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 jQuery 创建游戏时，您将花费相当多的时间向 DOM 添加和移除节点。例如，您可以创建新的敌人或移除已经死亡的敌人。在下一节中，我们将介绍您将要使用的函数，还将看到它们的工作原理。
- en: .append()
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .append()
- en: 'This function allows you to add a child to the currently selected element (or
    elements). It takes as argument some already existing DOM element, a string containing
    HTML code that describes an element (or a whole hierarchy of elements), or a jQuery
    element selecting some nodes. For example, if you wanted to add a child to a node
    with the ID `"content"`, you would write:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数允许您将子元素添加到当前选择的元素（或元素）。它的参数可以是一些已经存在的 DOM 元素、包含描述元素的 HTML 代码的字符串（或一整个元素层次结构），或者是选择某些节点的
    jQuery 元素。例如，如果您想要将子元素添加到具有 ID `"content"` 的节点上，您可以这样写：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Keep in mind that if you give a string to this function, the content will have
    to be parsed and that this could have some performance issues if you do it too
    often or for very large strings.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果您向此函数传递一个字符串，那么内容将需要被解析，如果您经常这样做或者字符串非常大，可能会导致性能问题。
- en: .prepend()
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .prepend()
- en: This function works exactly like `.append()`, but adds the new content before
    the first child of the selected element instead of after its last one.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数与`.append()`完全相同，但是将新内容添加到所选元素的第一个子元素之前，而不是添加到其最后一个子元素之后。
- en: .html()
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .html()
- en: This function allows you to completely replace the content of the selected node(s)
    with the string passed as an argument. If called without an argument, it will
    return the current HTML content of the first of the selected elements.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数允许您使用作为参数传递的字符串完全替换所选节点的内容。如果没有传递参数调用它，它将返回所选元素中第一个的当前 HTML 内容。
- en: If you call it with an empty string, you will erase all the content of the nodes.
    This could also be achieved by calling `.empty()`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用空字符串调用它，您将擦除所有节点的内容。这也可以通过调用`.empty()`来实现。
- en: '![.html()](img/5060OT_01_02.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![.html()](img/5060OT_01_02.jpg)'
- en: .remove()
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .remove()
- en: This function will simply delete all the selected elements and unregister all
    the associated event handlers and data.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将简单地删除所有选定的元素并注销所有关联的事件处理程序和数据。
- en: .detach()
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .detach()
- en: In some situations, you may only want to remove some content for a short period
    of time and add it again later. This is typically a case where `.remove()` does
    too much of a good job. What you really want is to keep all those other things
    you associated with your nodes so that when they get added later on, they will
    work exactly like before. `.detach()` has been created exactly for this situation.
    It will behave like `.remove()`, but will allow you to reinsert your elements
    easily.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能只想暂时删除一些内容，然后稍后再添加。这通常是 `.remove()` 做得太好的情况。您真正想要的是保留与节点关联的所有其他内容，以便稍后重新添加时，它们将与以前完全相同。`.detach()`
    就是为了这种情况而创建的。它的行为类似于 `.remove()`，但是允许您轻松重新插入元素。
- en: Stay curious my friend!
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持好奇，我的朋友！
- en: So that's it. I would really encourage you to read the API for each of these
    functions because there are still some sets of arguments that have not been shown
    here. If anything is still unclear about any of those functions, don't hesitate
    to look around the Web for more examples on how to use them. As jQuery is such
    a popular library, and the Web's culture is one of openness, you will easily find
    lots of help online.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。我真的鼓励您阅读每个函数的 API，因为这里还有一些未显示的参数集。如果对其中任何函数仍然不清楚，不要犹豫在网络上寻找更多关于如何使用它们的示例。由于
    jQuery 是如此流行的库，而网络文化是开放的，您将很容易在网上找到大量帮助。
- en: 'Here are some places where you can start looking for more information about
    jQuery:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可以开始寻找有关 jQuery 更多信息的地方：
- en: 'jQuery''s API: [http://api.jquery.com/](http://api.jquery.com/)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'jQuery 的 API: [http://api.jquery.com/](http://api.jquery.com/)'
- en: 'Learning jQuery: [http://www.learningjquery.com/](http://www.learningjquery.com/)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '学习 jQuery: [http://www.learningjquery.com/](http://www.learningjquery.com/)'
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've seen some of the most useful jQuery functions for game
    development and how to use them. By now you should be familiar with the jQuery
    philosophy and syntax. In the next chapter, we will put what we've learned into
    practice and create our first game.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到了一些对游戏开发非常有用的 jQuery 函数以及如何使用它们。到目前为止，您应该已经熟悉了 jQuery 的哲学和语法。在下一章中，我们将将学到的知识付诸实践，并创建我们的第一个游戏。
