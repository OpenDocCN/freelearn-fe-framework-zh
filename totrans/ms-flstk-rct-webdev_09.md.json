["```js\n \"scripts\": { \n    \"clean\": \"rimraf dist\", \n    \"compile\": \"better-npm-run compile\", \n    \"lint\": \"eslint src tests server\", \n    \"lint:fix\": \"npm run lint -- --fix\", \n    \"start\": \"better-npm-run start\", \n    \"dev\": \"better-npm-run dev\", \n    \"dev:no-debug\": \"npm run dev -- --no_debug\", \n    \"test\": \"better-npm-run test\", \n    \"test:dev\": \"npm run test -- --watch\", \n    \"deploy\": \"better-npm-run deploy\", \n    \"deploy:dev\": \"better-npm-run deploy:dev\", \n    \"deploy:prod\": \"better-npm-run deploy:prod\", \n    \"codecov\": \"cat coverage/*/lcov.info | codecov\" \n  },\n\n```", "```js\n   \"test\": { \n      \"command\": \"babel-node ./node_modules/karma/bin/ \n       karma start build/karma.conf\", \n      \"env\": { \n        \"NODE_ENV\": \"test\", \n        \"DEBUG\": \"app:*\" \n      } \n    }\n\n```", "```js\nimport { argv } from 'yargs' \nimport config from '../config' \nimport webpackConfig from './webpack.config' \nimport _debug from 'debug' \n\nconst debug = _debug('app:karma') \ndebug('Create configuration.') \n\nconst karmaConfig = { \n  basePath: '../', // project root in relation to bin/karma.js \n  files: [ \n    { \n      pattern: &grave;./${config.dir_test}/test-bundler.js&grave;, \n      watched: false, \n      served: true, \n      included: true \n    } \n  ], \n  singleRun: !argv.watch, \n  frameworks: ['mocha'], \n  reporters: ['mocha'], \n  preprocessors: { \n    [&grave;${config.dir_test}/test-bundler.js&grave;]: ['webpack'] \n  }, \n  browsers: ['PhantomJS'], \n  webpack: { \n    devtool: 'cheap-module-source-map', \n    resolve: { \n      ...webpackConfig.resolve, \n      alias: { \n        ...webpackConfig.resolve.alias, \n        sinon: 'sinon/pkg/sinon.js' \n      } \n    }, \n    plugins: webpackConfig.plugins, \n    module: { \n      noParse: [ \n        //sinon.js/ \n      ], \n      loaders: webpackConfig.module.loaders.concat([ \n        { \n          test: /sinon(|/)pkg(|/)sinon.js/, \n          loader: 'imports?define=>false,require=>false' \n        } \n      ]) \n    }, \n    // Enzyme fix, see: \n    // https://github.com/airbnb/enzyme/issues/47 \n    externals: { \n      ...webpackConfig.externals, \n      'react/addons': true, \n      'react/lib/ExecutionEnvironment': true, \n      'react/lib/ReactContext': 'window' \n    }, \n    sassLoader: webpackConfig.sassLoader \n  }, \n  webpackMiddleware: { \n    noInfo: true \n  }, \n  coverageReporter: { \n    reporters: config.coverage_reporters \n  } \n} \n\nif (config.globals.__COVERAGE__) { \n  karmaConfig.reporters.push('coverage') \n  karmaConfig.webpack.module.preLoaders = [{ \n    test: /.(js|jsx)$/, \n    include: new RegExp(config.dir_client), \n    loader: 'isparta', \n    exclude: /node_modules/ \n  }] \n} \n\n// cannot use &grave;export default&grave; because of Karma. \nmodule.exports = (cfg) => cfg.set(karmaConfig)\n\n```", "```js\n// --------------------------------------- \n// Test Environment Setup \n// --------------------------------------- \nimport 'babel-polyfill' \nimport sinon from 'sinon' \nimport chai from 'chai' \nimport sinonChai from 'sinon-chai' \nimport chaiAsPromised from 'chai-as-promised' \nimport chaiEnzyme from 'chai-enzyme' \n\nchai.use(sinonChai) \nchai.use(chaiAsPromised) \nchai.use(chaiEnzyme()) \n\nglobal.chai = chai \nglobal.sinon = sinon \nglobal.expect = chai.expect \nglobal.should = chai.should()\n\n```", "```js\nimport React from 'react' \nimport TestUtils from 'react-addons-test-utils' \nimport CoreLayout from 'layouts/CoreLayout/CoreLayout' \n\nfunction shallowRender (component) { \n  const renderer = TestUtils.createRenderer() \n\n  renderer.render(component) \n  return renderer.getRenderOutput() \n} \n\nfunction shallowRenderWithProps (props = {}) { \n  return shallowRender(<CoreLayout {...props} />) \n} \n\ndescribe('(Layout) Core', function () { \n  let _component \n  let _props \n  let _child \n\n  beforeEach(function () { \n    _child = <h1 className='child'>Child</h1> \n    _props = { \n      children: _child \n    } \n\n    _component = shallowRenderWithProps(_props) \n  }) \n\n  it('Should render as a <div>.', function () { \n    expect(_component.type).to.equal('div') \n  }) \n})\n\n```", "```js\nfunction shallowRender (component) { \n  const renderer = TestUtils.createRenderer() \n\n  renderer.render(component) \n  return renderer.getRenderOutput() \n} \n\nfunction shallowRenderWithProps (props = {}) { \n  return shallowRender(<CoreLayout {...props} />) \n}\n\n```", "```js\ndescribe('(Layout) Core', function () { \n  let _component \n  let _props \n  let _child \n\n  beforeEach(function () { \n    _child = <h1 className='child'>Child</h1> \n    _props = { \n      children: _child \n    } \n\n    _component = shallowRenderWithProps(_props) \n  }) \n\n  it('Should render as a <div>.', function () { \n    expect(_component.type).to.equal('div') \n  }) \n})\n\n```", "```js\nexpect(_component.type).to.equal('div')\n\n```", "```js\n<div> \n  <span className=\"heading\">Title</span> \n  <Subcomponent foo=\"bar\" /> \n</div>\n\n```", "```js\nvar renderer = ReactTestUtils.createRenderer(); \nresult = renderer.getRenderOutput(); \nexpect(result.type).toBe('div'); \nexpect(result.props.children).toEqual([ \n  <span className=\"heading\">Title</span>, \n  <Subcomponent foo=\"bar\" /> \n]);\n\n```", "```js\n[ \n  <span className=\"heading\">Title</span>, \n  <Subcomponent foo=\"bar\" /> \n]\n\n```"]