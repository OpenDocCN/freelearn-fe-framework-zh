["```js\nnpx nuxi@latest init server\n```", "```js\nnpm install --save-dev @invictus.codes/nuxt-vuetify\n```", "```js\n// https://nuxt.com/docs/api/configuration/nuxt-configexport default defineNuxtConfig({\nÂ Â devtools: { enabled: true },\nÂ Â modules: [\nÂ Â Â Â '@invictus.codes/nuxt-vuetify'\nÂ Â ],\nÂ Â vuetify: {\nÂ Â Â Â moduleOptions: {\nÂ Â Â Â Â Â treeshaking: true,\nÂ Â Â Â Â Â useIconCDN: true,\nÂ Â Â Â Â Â styles: true,\nÂ Â Â Â Â Â autoImport: true,\nÂ Â Â Â Â Â useVuetifyLabs: true,\nÂ Â Â Â }\nÂ Â }\n})\n```", "```js\n<template>Â Â <NuxtLayout>\nÂ Â Â Â <NuxtWelcome />\nÂ Â </NuxtLayout>\n</template>\n```", "```js\n<template>Â Â <v-card class=\"mx-auto\" width=\"600\">\nÂ Â Â Â <template v-slot:title>Welcome to the Admin Panel</template>\nÂ Â Â Â <v-card-text>\nÂ Â Â Â Â Â <p>\nÂ Â Â Â Â Â Â Â Via this interface, you can create and edit quizzes. This panel is not perfect, but it works. As an extra challenge consider implementing the following features:\nÂ Â Â Â Â Â </p>\nÂ Â Â Â Â Â <ul class=\"ma-4\">\nÂ Â Â Â Â Â Â Â <li>\nÂ Â Â Â Â Â Â Â Â Â Adding meta data to a quiz, such as a title and make it more identifiable in Admin Panel;\nÂ Â Â Â Â Â Â Â </li>\nÂ Â Â Â Â Â Â Â <li>Managing the order of Questions in a Quiz;</li>\nÂ Â Â Â Â Â Â Â <li>Securing the Admin Panel via the Supabase OTP authentication;</li>\nÂ Â Â Â Â Â Â Â <li>Adding validation on the Question dialog inputs</li>\nÂ Â Â Â Â Â </ul>\nÂ Â Â Â Â Â <p>Good luck!</p>\nÂ Â Â Â </v-card-text>\nÂ Â </v-card>\n</template>\n```", "```js\n<template>Â Â <div class=\"my-8\">\nÂ Â Â Â <h1 class=\"text-h3 mb-8\">Choose quiz to edit</h1>\nÂ Â Â Â <v-card class=\"mx-auto\" max-width=\"600\">\nÂ Â Â Â Â Â <v-divider />\nÂ Â Â Â Â Â <v-card-actions>\nÂ Â Â Â Â Â Â Â <v-btn primary class=\"my-4 mx-4\">âœ¨ Create new Quiz</v-btn>\nÂ Â Â Â Â Â </v-card-actions>\nÂ Â Â Â </v-card>\nÂ Â </div>\n</template>\n```", "```js\nnpm install @supabase/supabase-js\n```", "```js\nimport { createClient } from '@supabase/supabase-js'const supabaseUrl = import.meta.env.VITE_SUPABASE_URL\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY\nexport const useSupabaseClient = createClient(supabaseUrl as string, supabaseAnonKey as string, { auth: { persistSession: false } });\n```", "```js\nVITE_SUPABASE_URL=YOUR_SUPABASE_URLVITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY\n```", "```js\nnpm install pinia @pinia/nuxt\n```", "```js\nÂ Â modules: [Â Â Â Â '@invictus.codes/nuxt-vuetify',\nÂ Â Â Â '@pinia/nuxt'\nÂ Â ],\n```", "```js\nÂ Â pinia: {Â Â Â Â autoImports: [\nÂ Â Â Â Â Â 'defineStore',\nÂ Â Â Â Â Â ['defineStore', 'definePiniaStore'],\nÂ Â Â Â ],\nÂ Â },\n```", "```js\n<nuxt-link :to=\"`/share/${quiz.id}`\">Â Â <v-btn flat>{{ quiz.id }}</v-btn>\n</nuxt-link>\n```", "```js\nÂ Â routes: [Â Â Â Â {\nÂ Â Â Â Â Â path: '/share/:id',\nÂ Â Â Â Â Â name: share,\nÂ Â Â Â Â Â component: () => import('../pages/ShareDetail.vue')\nÂ Â Â Â },\nÂ Â ]\n```", "```js\nimport type { QuizHead } from '../../types/quiz';import { useSupabaseClient } from '../../composables/supabase';\nexport default defineEventHandler(async (): Promise<QuizHead[] | null> => {\nÂ Â console.log(\"ğŸ“¦ Requesting quizzes from endpoint\")\nÂ Â const { data, error, status } = await useSupabaseClient\nÂ Â Â Â .from(`quiz`)\nÂ Â Â Â .select(`id, created_at`);\nÂ Â if (error && status !== 406) console.error(error);\nÂ Â return data\n})\n```", "```js\nnpm install express socket.io ts-node @types/node\n```", "```js\n{Â Â \"compilerOptions\": {\nÂ Â Â Â \"target\": \"ES2022\",\nÂ Â Â Â \"module\": \"commonjs\",\nÂ Â Â Â \"lib\": [\"dom\"],\nÂ Â Â Â \"allowJs\": true,\nÂ Â Â Â \"outDir\": \"build\",\nÂ Â Â Â \"rootDir\": \"./\",\nÂ Â Â Â \"strict\": true,\nÂ Â Â Â \"noImplicitAny\": true,\nÂ Â Â Â \"esModuleInterop\": true,\nÂ Â Â Â \"resolveJsonModule\": true\nÂ Â }\n}\n```", "```js\nconst express = require(\"express\");const { createServer } = require(\"node:http\");\nconst { Server } = require(\"socket.io\");\nimport QuizGame from \"./quiz\";\nconst app = express();\nconst server = createServer(app);\n// This needs to match the client url of the running app instance\nconst clientAppUrl = \"http://localhost:5173\";\nlet serverOptions = {};\nif (process.env.NODE_ENV !== \"production\") {\nÂ Â serverOptions = {\nÂ Â Â Â ...serverOptions,\nÂ Â Â Â Â Â cors: {\nÂ Â Â Â Â Â Â Â origin: clientAppUrl, // cors is enabled for socketed connections on localhost:5173\nÂ Â Â Â Â Â },\nÂ Â Â Â }\n}\nconst io = new Server(server, serverOptions);\nconst game = new QuizGame();\n// ******************************\n// Listen on the port for events\n// ******************************\nserver.listen(4000, () => {\nÂ Â console.log(\"ğŸ”Œ Server is running on port 4000\");\n});\n```", "```js\nnpm install nodemon npm-run-all ts-node @types/node open chalk\n```", "```js\nimport chalk from 'chalk';import open from 'open';\nconst urls = [{\nÂ Â Â Â name: 'ğŸ“¦ Quiz Admin Panel',\nÂ Â Â Â url: 'http://localhost:3000',\n}]\nurls.forEach(url => {\nÂ Â Â Â setTimeout(async (): void => {\nÂ Â Â Â Â Â Â Â console.log(`âœ¨ Opening ${chalk.black.bgCyan(url.name)} at ${chalk.magenta(url.url)}`);\nÂ Â Â Â Â Â Â Â await open(url.url);\nÂ Â Â Â }, url.wait || 0);\n});\n```", "```js\nÂ Â \"scripts\": {Â Â Â Â \"dev\": \"npm-run-all --parallel dev:*\",\nÂ Â Â Â \"dev:sockets\": \"nodemon ./sockets/index.ts\",\nÂ Â Â Â \"dev:server\": \"cd server && npm run dev\",\nÂ Â Â Â \"dev:open\": \"node ./open.mjs\"\nÂ Â },\n```", "```js\n// ...abbreviatedexport default defineConfig({\nÂ Â plugins: [\nÂ Â Â Â // ...abbreviated\nÂ Â define: { 'process.env': {} },\nÂ Â resolve: {\nÂ Â Â Â // ...abbreviated\nÂ Â },\nÂ Â server: {\nÂ Â Â Â port: 5173,\nÂ Â },\nÂ Â clearScreen: false,\n})\n```", "```js\nÂ Â \"scripts\": {Â Â Â Â \"dev\": \"npm-run-all --parallel dev:*\",\nÂ Â Â Â \"dev:client\": \"cd app && npm run dev\",\nÂ Â Â Â \"dev:sockets\": \"nodemon ./sockets/index.ts\",\nÂ Â Â Â \"dev:server\": \"cd server && npm run dev\",\nÂ Â Â Â \"dev:open\": \"node ./open.mjs\"\nÂ Â },\n```", "```js\nconst urls = [Â Â {\nÂ Â Â Â name: \"ğŸ“¦ Quiz Admin Panel\",\nÂ Â Â Â url: \"http://localhost:3000\",\nÂ Â },\nÂ Â {\nÂ Â Â Â name: \"ğŸ“± Quiz App\",\nÂ Â Â Â url: \"http://localhost:5173\",\nÂ Â Â Â wait: 5000,\nÂ Â },\n];\n```", "```js\n<template>Â Â <div class=\"my-8\">\nÂ Â Â Â <h1 class=\"text-h3 mb-8\">Home</h1>\nÂ Â </div>\n</template>\n```", "```js\n<template>Â Â <v-layout>\nÂ Â Â Â <v-app-bar class=\"bg-primary pa-4\"\nÂ Â Â Â Â Â ><h1 class=\"text-h5\">Quiz time!</h1>\nÂ Â Â Â </v-app-bar>\nÂ Â Â Â <v-main>\nÂ Â Â Â Â Â <RouterView />\nÂ Â Â Â </v-main>\nÂ Â </v-layout>\n</template>\n```", "```js\nnpm install socket.io-client\n```", "```js\n<script setup lang=\"ts\">import { onMounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { socket } from \"@/socket\";\nconst route = useRoute();\nconst router = useRouter();\nconst init = (id: string): void => {\nÂ Â socket.emit('quiz:select', id);\n}\nonMounted(() => {\nÂ Â const id : string | string[] = route.params.id;\nÂ Â if (id) {\nÂ Â Â Â init(id.toString());\nÂ Â Â Â router.push('/lobby');\nÂ Â }\n});\n</script>\n```", "```js\n<template>Â Â <router-view />\n</template>\n<script setup lang=\"ts\">\nimport { computed, watch } from 'vue'\nimport { RouterView, useRouter } from 'vue-router'\nimport { state } from '@/socket'\nconst router = useRouter()\nconst quizStatus = computed((): string | null => state.quizStatus)\n// when quizStatus changes, check if it's \"ready\" and if so, redirect to /quiz\nwatch(quizStatus, (newStatus) => {\nÂ Â if (newStatus === 'question') {\nÂ Â Â Â router.push('/question')\nÂ Â }\nÂ Â if (newStatus === 'answer') {\nÂ Â Â Â router.push('/answer')\nÂ Â }\nÂ Â if (newStatus === 'end') {\nÂ Â Â Â router.push('/final')\nÂ Â }\nÂ Â if (newStatus === 'scoreboard') {\nÂ Â Â Â router.push('/scoreboard')\nÂ Â }\n})\n</script>\n```", "```js\n<script setup lang=\"ts\">import PlayerAdd from '@/components/PlayerAdd.vue'\nimport PlayersOverview from '@/components/PlayersOverview.vue'\n</script>\n<template>\nÂ Â <div class=\"my-8\">\nÂ Â Â Â <h1 class=\"text-h3 mb-8\">Welcome to the lobby</h1>\nÂ Â Â Â <player-add />\nÂ Â Â Â <players-overview class=\"my-8\" />\nÂ Â </div>\n</template>\n```", "```js\n<script setup lang=\"ts\">import { computed } from 'vue'\nimport { state } from '@/socket'\nimport type { QuizQuestion } from '@/types/quiz'\nimport QuestionForm from '@/components/QuestionForm.vue';\nconst question = computed((): QuizQuestion => {\nÂ Â return state.quizCurrentQuestion\n})\n</script>\n<template>\nÂ Â <div class=\"my-8\">\nÂ Â Â Â <h1 class=\"text-h3 mb-8\">{{ question.question }}</h1>\nÂ Â Â Â <QuestionForm />\nÂ Â </div>\n</template>\n```", "```js\n<script setup lang=\"ts\">import AnswerResult from '@/components/AnswerResult.vue'\n</script>\n<template>\nÂ Â <div class=\"my-8\">\nÂ Â Â Â <h1 class=\"text-h3 mb-8\">Answers</h1>\nÂ Â Â Â <answer-result />\nÂ Â </div>\n</template>\n```", "```js\n<script setup lang=\"ts\">import ScoreBoard from '@/components/ScoreBoard.vue';\n</script>\n<template>\nÂ Â <div class=\"my-8\">\nÂ Â Â Â <h1 class=\"text-h3 mb-8\">Scoreboard</h1>\nÂ Â Â Â <score-board />\nÂ Â </div>\n</template>\n```", "```js\nnpm install vue-confetti-explosion\n```", "```js\n<script setup lang=\"ts\">import FinalScoreBoard from '@/components/FinalScoreBoard.vue';\n</script>\n<template>\nÂ Â <div class=\"my-8\">\nÂ Â Â Â <h1 class=\"text-h3 mb-8\">Scoreboard</h1>\nÂ Â Â Â <final-score-board />\nÂ Â </div>\n</template>\n```"]