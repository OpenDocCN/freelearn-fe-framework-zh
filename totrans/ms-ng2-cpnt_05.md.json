["```js\nrouterOnActivate(currentRouteSegment, \n                 previousRouteSegment,\n                 currentTree,\n                 previousTree)\n```", "```js\nrouterOnActivate(currentRouteSegment) {\n this.id = currentRouteSegment.getParam('id');\n}\n```", "```js\nrouterOnActivate(currentRouteSegment, \n                 previousRouteSegment, \n currentTree) {\n this.id = currentTree.parent(currentRouteSegment).getParam('id');\n}\n```", "```js\n...\nimport {bootstrap} from '@angular/platform-browser-dynamic';\nimport {provide} from '@angular/core';\n// Import router dependencies\nimport {HashLocationStrategy, LocationStrategy} from '@angular/common';\nimport {ROUTER_PROVIDERS} from '@angular/router'; \n...\nbootstrap(App, [\n  ...\n  ROUTER_PROVIDERS,\n provide(LocationStrategy, {\n useClass: HashLocationStrategy\n })\n]);\n```", "```js\n...\nimport {Project} from './project/project';\nimport {Routes, Route} from '@angular/router';\n\n@Component({\n  selector: 'ngc-app',\n  ...\n})\n@Routes([\n new Route({path: 'projects/:projectId', component: Project})\n])\nexport class App {\n     ...\n}\n```", "```js\n    path: '/home'\n    ```", "```js\npath: '/child/:id'\n```", "```js\n...\nimport {Routes, Route, ROUTER_DIRECTIVES} from '@angular/router';\n   ...\n@Component({\n  selector: 'ngc-app',\n  ...\n  directives: [..., ROUTER_DIRECTIVES],\n  ...\n})\n...\nexport class App {\n  ...\n}\n```", "```js\n<div class=\"app\">\n  ...\n  <div class=\"app__l-main\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n```", "```js\nimport {Component, ViewEncapsulation, Inject} from '@angular/core';\nimport template from './project.html!text';\nimport {Tabs} from '../ui/tabs/tabs';\nimport {DataProvider} from '../../data-access/data-provider';\nimport {LiveDocument} from '../../data-access/live-document';\n\n@Component({\n  selector: 'ngc-project',\n  host: {class: 'project'},\n  template,\n  encapsulation: ViewEncapsulation.None,\n  directives: [Tabs]\n})\nexport class Project {\n  constructor(@Inject(DataProvider) dataProvider) {\n this.dataProvider = dataProvider;\n    this.tabItems = [\n      {title: 'Tasks', link: ['tasks']},\n      {title: 'Comments', link: ['comments']}\n    ];\n  }\n\n routerOnActivate(currentRouteSegment) {\n this.id = currentRouteSegment.getParam('projectId');\n this.document = new LiveDocument(this.dataProvider, {\n type: 'project',\n _id: this.id\n });\n this.document.change.subscribe((data) => {\n this.title = data.title;\n this.description = data.description;\n this.tasks = data.tasks;\n this.comments = data.comments;\n });\n }\n\n  updateTasks(tasks) {\n this.document.data.tasks = tasks;\n this.document.persist();\n  }\n\n  updateComments(comments) {\n this.document.data.comments = comments;\n this.document.persist();\n  }\n\n  ngOnDestroy() {\n this.document.unsubscribe();\n  }\n}\n```", "```js\nimport {Component, ViewEncapsulation, Inject, forwardRef} from '@angular/core';\nimport template from './project-task-list.html!text';\nimport {TaskList} from '../../task-list/task-list';\nimport {Project} from '../project';\n\n@Component({\n  selector: 'ngc-project-task-list',\n  ...\n  directives: [TaskList]\n})\nexport class ProjectTaskList {\n  constructor(@Inject(forwardRef(() => Project)) project) {\n    this.project = project;\n  }\n\n  updateTasks(tasks) {\n this.project.updateTasks(tasks);\n }\n}\n```", "```js\n<ngc-task-list [tasks]=\"project.tasks\"\n             (tasksUpdated)=\"updateTasks($event)\"></ngc-task-list>\n```", "```js\n...\nimport {ProjectTaskList} from './project-task-list/project-task-list';\nimport {ProjectComments} from './project-comments/project-comments';\nimport {Routes, Route} from '@angular/router';\n...\n@Component({\n  selector: 'ngc-project',\n  ...\n})\n@Routes([\n new Route({ path: 'tasks', component: ProjectTaskList}),\n new Route({ path: 'comments', component: ProjectComments})\n])\nexport class Project {\n  ...\n}\n```", "```js\n...\nimport {ROUTER_DIRECTIVES} from '@angular/router';\n\n@Component({\n  selector: 'ngc-tabs',\n  ...\n directives: [ROUTER_DIRECTIVES]\n})\nexport class Tabs {\n @Input() items;\n}\n```", "```js\n<ul class=\"tabs__tab-list\">\n  <li *ngFor=\"let item of items\">\n    <a class=\"tabs__tab-button\"\n       [routerLink]=\"item.link\">{{item.title}}</a>\n  </li>\n</ul>\n<div class=\"tabs__l-container\">\n  <div class=\"tabs__tab tabs__tab--active\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n```", "```js\nthis.tabItems = [\n  {title: 'Tasks', link: ['tasks']},\n  {title: 'Comments', link: ['comments']}\n];\n```", "```js\n<div class=\"project__l-header\">\n  <h2 class=\"project__title\">{{title}}</h2>\n  <p>{{description}}</p>\n</div>\n<ngc-tabs [items]=\"tabItems\"></ngc-tabs>\n\n```", "```js\n<a class=\"navigation-section__link\"\n   [class.navigation-section__link--active]=\"isActive()\"\n   [routerLink]=\"link\">{{title}}</a>\n```", "```js\n...\nimport {RouterLink} from '@angular/router/src/directives/router_link';\n\n@Component({\n  selector: 'ngc-navigation-item',\n  ...\n directives: [RouterLink]\n})\nexport class NavigationItem {\n  @Input() title;\n  @Input() link;\n @ViewChild(RouterLink) routerLink;\n\n  isActive() {\n return this.routerLink ? \n this.routerLink.isActive : false;\n }\n}\n```", "```js\nthis.projectsSubscription = projectService.change\n  .subscribe((projects) => {\n    this.projects = projects;\n    // We create new navigation items for our projects\n    this.projectNavigationItems = this.projects\n      // We first filter for projects that are not deleted\n      .filter((project) => !project.deleted)\n      .map((project) => {\n        return {\n          title: project.title,\n          link: ['/projects', project._id]\n        };\n      });\n    });\n```"]