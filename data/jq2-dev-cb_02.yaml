- en: Chapter 2. Interacting with the User by Making Use of jQuery Events
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章. 利用jQuery事件与用户进行交互
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Detecting button clicks
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测按钮点击
- en: Detecting element clicks
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测元素点击
- en: Detecting change
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测变化
- en: Updating content based on user input
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据用户输入更新内容
- en: Detecting key press events on inputs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测输入框中的按键事件
- en: Restricting input character length
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制输入字符长度
- en: Changing page elements on mouse hover
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在鼠标悬停时更改页面元素
- en: Triggering events manually
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动触发事件
- en: Preventing event triggers
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阻止事件触发
- en: Creating a custom event
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义事件
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter looks at how you can make use of jQuery's many events to allow
    your interface to respond to different user interactions, such as button clicks,
    and also how jQuery events can help you with form validation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍如何利用jQuery的许多事件来允许您的界面响应不同的用户交互，例如按钮点击，以及jQuery事件如何帮助您进行表单验证。
- en: Detecting button clicks
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测按钮点击
- en: Clicking on website elements is a primary user interaction; therefore, detecting
    these clicks is a very fundamental aspect in creating interactive web applications.
    There are various ways in which jQuery developers can listen for certain button
    presses within their web page.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 点击网站元素是主要的用户交互；因此，检测这些点击是创建交互式Web应用程序中非常基本的一个方面。jQuery开发人员可以通过各种方式监听其网页内的某些按钮按下。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using your favorite text editor or IDE, create a blank HTML page named `recipe-1.html`
    in an easily accessible location.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜欢的文本编辑器或IDE，在易于访问的位置创建一个名为`recipe-1.html`的空白HTML页面。
- en: How to do it…
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Create two buttons with click event handlers by performing the following steps:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下步骤创建带有点击事件处理程序的两个按钮：
- en: Add the following HTML code to `recipe-1.html`. Be sure to change the location
    of the jQuery library in the JavaScript file, pointing it to where the latest
    version of jQuery is downloaded on your computer.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`recipe-1.html`中添加以下HTML代码。请确保在JavaScript文件中更改jQuery库的位置，指向您计算机上下载的jQuery最新版本的位置。
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Within the script tags, add the following JavaScript code, which attaches click
    event handlers to both of the button elements:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本标签中添加以下JavaScript代码，为两个按钮元素附加点击事件处理程序：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Open `recipe-1.html` within a web page and click on either of the buttons. You
    will be presented with a different JavaScript alert for each button, demonstrating
    that the event handlers have been executed.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Web页面中打开`recipe-1.html`，并单击其中的任一按钮。您将为每个按钮显示不同的JavaScript警报，这表明事件处理程序已被执行。
- en: How it works…
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We can use various selectors to select button elements and then attach event
    handlers to these elements. In the preceding example, we select the first button
    using its class name, `.button1`, and the second button using the class name `.button2`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用各种选择器来选择按钮元素，然后为这些元素附加事件处理程序。在前面的示例中，我们使用类名`.button1`选择第一个按钮，使用类名`.button2`选择第二个按钮。
- en: With each button selected via the `$()` method, we can choose a method for attaching
    a click event to our buttons. The `.click()` method, as shown in the following
    code snippet, is dedicated for this purpose. By passing a callback function as
    an argument, we can specify a set of commands to be executed once the buttons
    have been clicked.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`$()`方法选择每个按钮后，我们可以选择一种方法将点击事件附加到我们的按钮上。`.click()`方法，如以下代码片段所示，专门用于此目的。通过将回调函数作为参数传递，我们可以指定一组命令，一旦按钮被点击，这些命令将被执行。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding code will display the specified alert once the first button has
    been clicked. The following code uses an alternative function, `.on()`, which
    also handles other event types:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将在第一个按钮被点击后显示指定的警报。以下代码使用另一种函数`.on()`，也处理其他事件类型：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This method is a little different as we first select the container of our buttons
    and then specify the button identifier (that is, `.button2`).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有些不同，因为我们首先选择按钮的容器，然后指定按钮标识符（即`.button2`）。
- en: There's more...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `.on()` method has some additional benefits over `.click()` alongside the
    previously mentioned memory benefit. If any elements are added to the DOM dynamically
    after the `.click()` function has been called, they will not have a click event
    attached. If the `.on()` method is used, provided that the dynamically added elements
    are added within the specified container, they will be caught by the click event
    handler. Consider the following code as an example of this situation:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`.on()`方法与`.click()`方法相比具有一些额外的好处，除了之前提到的内存优势外。如果在调用`.click()`函数后动态地向DOM添加任何元素，则它们将不会有点击事件附加。如果使用`.on()`方法，只要动态添加的元素被添加到指定的容器内，它们将被点击事件处理程序捕获。考虑以下代码作为此情况的示例：'
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code will attach an event handler to each of the buttons on page load using
    the `.click()` and `.on()` methods, respectively. Then, using the `setTimeout()`
    function, it will dynamically add two more buttons to the DOM; one button with
    the `.button1` class and the other with the `.button2` class. If you open this
    web page in a browser and wait for the second set of buttons to be created and
    then click on the additional **Button 1** button, no click event will be fired.
    Click on the additional **Button 2** button, and you will see the alert box being
    fired as desired.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将在页面加载时使用`.click()`和`.on()`方法分别为每个按钮附加事件处理程序。然后，使用`setTimeout()`函数，它将动态地向DOM添加另外两个按钮；一个带有`.button1`类，另一个带有`.button2`类。如果你在浏览器中打开这个网页，并等待第二组按钮被创建，然后点击额外的**按钮1**按钮，将不会触发点击事件。点击额外的**按钮2**按钮，你将看到警告框按预期被触发。
- en: See also
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Detecting element clicks*'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*检测元素点击*'
- en: '*Detecting key press events on inputs*'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*检测输入框上的按键事件*'
- en: Detecting element clicks
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测元素点击
- en: Having the ability to detect if a user has clicked on elements other than buttons
    can provide additional flexibility to your web application. You can attach click
    events to any HTML elements, just as we did with the buttons in the previous recipe.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 具有检测用户是否点击了除按钮以外的元素的能力可以为您的Web应用程序提供额外的灵活性。您可以像我们在前面的配方中所做的那样，将点击事件附加到任何HTML元素上。
- en: Getting ready
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To work through this recipe, we are first going to need a blank HTML page named
    `recipe-2.html`, the same as in the other recipes. Remember that you need to have
    the latest version of jQuery downloaded and easily accessible on your computer
    so that it can be included in `recipe-2.html`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本配方，我们首先需要一个名为`recipe-2.html`的空白HTML页面，与其他配方中的相同。请记住，您需要下载最新版本的jQuery，并将其轻松地放在计算机上，以便将其包含在`recipe-2.html`中。
- en: How to do it…
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To understand how you can detect user clicks on elements other than buttons,
    perform the following steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何检测用户点击除按钮以外的元素，请执行以下步骤：
- en: Add the following HTML to the `recipe-2.html` page you have just created. This
    HTML creates a very basic web page with an input, an anchor, and a division element.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下HTML添加到您刚创建的`recipe-2.html`页面中。此HTML创建了一个非常基本的Web页面，其中包含一个输入框，一个锚点和一个分隔元素。
- en: '[PRE5]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Within the script tags in the head tag of the HTML page we just created, add
    the following JavaScript code. This JavaScript code uses two different methods
    of attaching click event handlers to three DOM elements.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们刚创建的HTML页面的头部标签中的脚本标签内，添加以下JavaScript代码。该JavaScript代码使用了两种不同的方法将点击事件处理程序附加到三个DOM元素上。
- en: '[PRE6]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Ensure that all the changes have been saved and then open `recipe-2.html` in
    a browser. When you click on any of the elements, you will be presented with a
    different JavaScript alert, demonstrating that each of these click events are
    being caught by the event handlers we created earlier in the recipe.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保所有更改都已保存，然后在浏览器中打开`recipe-2.html`。当你点击任何元素时，你将看到不同的JavaScript警告，演示了我们在配方中早些时候创建的每个点击事件都被事件处理程序捕获。
- en: How it works…
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: We can select DOM elements using their tag names, such as `a` to select a link,
    and then use the `.click()` or `.on()` functions to attach a click event handler,
    as shown in the following code snippet. We can also use the CSS selector `input[type="text"]`
    to select all text inputs on the page.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用它们的标签名称选择DOM元素，比如`a`选择一个链接，然后使用`.click()`或`.on()`函数附加一个点击事件处理程序，如下面的代码片段所示。我们也可以使用CSS选择器`input[type="text"]`来选择页面上的所有文本输入。
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding jQuery code attaches a click event to each DOM element with the
    `.clickme` class. These elements can be any DOM elements such as divs, buttons,
    links, inputs, and text areas. This gives the jQuery developer the flexibility
    to be able to interpret user interactions across all page elements.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 jQuery 代码将点击事件附加到每个具有 `.clickme` 类的 DOM 元素。这些元素可以是任何 DOM 元素，例如 div、按钮、链接、输入和文本区域。这使得
    jQuery 开发人员能够灵活地解释用户与所有页面元素的交互。
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: See the *Detecting button clicks* recipe of this chapter to understand the difference
    between `.click()` and `.on()` and why `.on()` is the preferred implementation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 参见本章的 *检测按钮点击* 配方，了解 `.click()` 和 `.on()` 之间的区别以及为什么 `.on()` 是首选实现方式。
- en: See also
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Detecting button clicks*'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*检测按钮点击*'
- en: '*Detecting key press events on inputs*'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*检测输入框上的按键按下事件*'
- en: Detecting change
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测更改
- en: While creating dynamic and interactive websites and web applications, it is
    useful to know when a user has changed something on the page, such as the value
    of a selected input, a text input, or any other element that has a modifiable
    value.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建动态和交互式网站和 Web 应用程序时，了解用户何时更改了页面上的某些内容（例如所选输入的值、文本输入或任何具有可修改值的其他元素）是很有用的。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Once more, create a new blank HTML document named `recipe-3.html`. Ensure that
    you have the latest version of jQuery downloaded, which can be included into this
    HTML file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 再次创建一个名为 `recipe-3.html` 的空白 HTML 文档。确保已下载最新版本的 jQuery，并将其包含到此 HTML 文件中。
- en: How to do it…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To learn how to attach change event handlers to various element types, perform
    the following steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要学习如何将更改事件处理程序附加到各种元素类型，请执行以下步骤：
- en: 'Add the following HTML code to the HTML document you have just created, and
    update the reference to the jQuery library in order to ensure that the latest
    version of jQuery is being included into the page:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到您刚创建的 HTML 文档中，并更新对 jQuery 库的引用，以确保页面中包含的是最新版本的 jQuery：
- en: '[PRE8]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Within the script tags, add the following JavaScript code to attach change
    event handlers on the different elements:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本标签中，添加以下 JavaScript 代码来附加不同元素上的更改事件处理程序：
- en: '[PRE9]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Ensure that all the changes have been saved. Now, open `recipe-3.html` in a
    web browser; if you change the value of one of the elements on the page, you will
    be presented with an alert informing you of the change.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保所有更改都已保存。现在，在 Web 浏览器中打开 `recipe-3.html`；如果更改页面上某个元素的值，将显示一个提醒框通知您更改了。
- en: How it works…
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Selecting each input element using `$()` and then using the `.change()` function
    to attach a change event handler allows us to specify the code to be executed
    once the user has changed the value of each input.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `$()` 选择每个输入元素，然后使用 `.change()` 函数附加更改事件处理程序，允许我们指定一旦用户更改每个输入的值后要执行的代码。
- en: Within the callback function, which is provided to the `.change()` function
    as an argument, we can get the new value. Using `this`, which refers to the selected
    element, we can use `$(this).val()` to retrieve the newly chosen value and display
    it within an alert.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在回调函数中（作为参数提供给 `.change()` 函数），我们可以获取新值。使用 `this`，它引用所选元素，我们可以使用 `$(this).val()`
    来检索新选择的值，并在警报框内显示它。
- en: 'If you open the web page within a browser and change the selected input value
    to `Allyce`, an alert will be displayed similar to the one shown in the following
    screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在浏览器中打开 Web 页面并将选定的输入值更改为 `Allyce`，将显示与以下截图类似的警报：
- en: '![How it works…](img/0896OS_02_01.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/0896OS_02_01.jpg)'
- en: This is done using `.val()` to return the `value="Allyce"` property on the selected
    option in the drop-down input which has the change event handler attached.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `.val()` 来返回在下拉输入中所选选项上附加了更改事件处理程序的 `value="Allyce"` 属性。
- en: When using the `.change()` event handler on a text input, this change event
    will not be fired until the input box has lost focus, that is, the user has clicked
    on another part of the web page. As it is often desirable to detect an immediate
    change, you should consider using a key press event to catch these changes instead.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当在文本输入上使用 `.change()` 事件处理程序时，该更改事件直到输入框失去焦点（即，用户单击 Web 页面的其他部分）才会触发。由于通常希望检测到即时更改，因此应考虑使用按键按下事件来捕获这些更改。
- en: There's more...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'The *Detecting button clicks* recipe discussed the benefits of using the `.on()`
    method over using `.click()`. These benefits also apply in this situation as the
    `.on()` method can also be used with the change event. Consider the following
    code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*检测按钮点击*配方讨论了使用`.on()`方法而不是使用`.click()`的好处。这些好处在这种情况下同样适用，因为`.on()`方法也可以与change事件一起使用。考虑以下代码：'
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: See also
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Detecting button clicks*'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*检测按钮点击*'
- en: '*Detecting key press events on inputs*'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*检测输入框的按键事件*'
- en: '*Updating content based on user input*'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*根据用户输入更新内容*'
- en: Updating content based on user input
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据用户输入更新内容
- en: jQuery allows developers to easily process user input and then update the page
    to reflect this input. The previous recipes of this chapter have looked at detecting
    changes on input values and clicks on various page elements. This recipe will
    help you to create a web page that will update a header element based on the title
    that has been selected from a drop-down menu.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery允许开发人员轻松处理用户输入，然后更新页面以反映此输入。本章的先前配方已经介绍了检测输入值的更改和点击各种页面元素的操作。本配方将帮助您创建一个网页，根据从下拉菜单中选择的标题来更新标题元素。
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a blank HTML document named `recipe-4.html`, with the latest version
    of the jQuery library downloaded and ready for use.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe-4.html`的空HTML文档，其中包含最新版本的jQuery库，已下载并准备就绪。
- en: How to do it…
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Using techniques similar to those you have learned in the previous recipes,
    perform the following steps to make changes to the DOM based on user interaction:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类似于您在先前配方中学到的技术，执行以下步骤根据用户交互来改变DOM：
- en: Add the following HTML code to `recipe-4.html`, which you have just created;
    don't forget to update the reference to the jQuery library. This HTML creates
    a basic HTML web page with a drop-down menu element, allowing the user to choose
    a number of titles. There is also a header element that we can manipulate with
    jQuery based on user selection.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下HTML代码添加到您刚刚创建的`recipe-4.html`中；不要忘记更新到jQuery库的引用。这个HTML创建了一个基本的HTML网页，其中包含一个下拉菜单元素，允许用户选择一些标题。还有一个头部元素，我们可以根据用户的选择来使用jQuery进行操作。
- en: '[PRE11]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the following JavaScript code within the script tags to attach a change
    event handler to the select input `#title`:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下JavaScript代码添加到`＃title`的选择输入中的脚本标记内，以附加change事件处理程序：
- en: '[PRE12]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Running this web page in a browser and selecting a new option from the drop-down
    menu will update the text of the header accordingly.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中运行此网页，并从下拉菜单中选择一个新选项，将相应地更新标题的文本。
- en: How it works…
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运作原理…
- en: 'First, we instruct jQuery to attach a change event handler to the `#title`
    select input using the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们指示jQuery使用以下代码将change事件处理程序附加到`＃title`选择输入：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When the user changes the selected option in the drop-down input, the change
    event handler is executed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户更改下拉输入中的选定选项时，change事件处理程序就会执行。
- en: 'In the `function` argument, we can use `$(this)` to refer to the `#title` select
    input and then use `$(this).val();` to get its selected value. Once we have this
    value, we can perform any action we require using JavaScript. In this example,
    we determine which title has been selected using a JavaScript `switch` statement,
    as shown in the following code snippet:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在`function`参数中，我们可以使用`$(this)`来引用`＃title`选择输入，然后使用`$(this).val();`来获取其选定的值。一旦我们有了这个值，我们可以使用JavaScript执行所需的任何操作。在这个例子中，我们使用JavaScript的`switch`语句来确定选择了哪个标题，如下面的代码片段所示：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Depending on the selected title value, we create some text which we then provide
    to `$('#main-title').html();`. This will update the `#main-title` header element's
    HTML to be the provided text.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 根据所选的标题值，我们创建一些文本，然后将其提供给`$('#main-title').html();`。这将更新`＃main-title`标题元素的HTML为提供的文本。
- en: This illustrates a very simple task of how a jQuery developer can process user
    input and perform an action to alter the page.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这展示了一个jQuery开发人员如何处理用户输入并执行操作以改变页面的一个非常简单的任务。
- en: See also
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Detecting change*'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*检测更改*'
- en: '*Changing page elements on mouse hover*'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*鼠标悬停时更改页面元素*'
- en: Detecting key press events on inputs
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在输入框上检测按键事件
- en: jQuery provides three event functions that allow the jQuery developer to determine
    what key a user is pressing, and when and how the user is pressing it. The `.keyup()`
    function is an event handler that can be attached to an input and will be fired
    once the pressed key has been fully released; likewise, `.keydown()`will be fired
    once the key has been fully pressed. The third available event handler is `.keypress()`,
    which is fired instantly when a key is pressed.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery提供了三个事件函数，允许jQuery开发者确定用户按下了哪个键，以及用户何时以何种方式按下了它。`.keyup()`函数是一个事件处理程序，可以附加到一个输入框上，并在按下的键完全释放后触发；同样，`.keydown()`将在按下键后完全释放时触发。第三个可用的事件处理程序是`.keypress()`，它在按下键时立即触发。
- en: These methods allow the developer to provide powerful client-side validation
    or to provide the user with simple features such as triggering a form submission
    when the *Enter* key is pressed.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法允许开发者提供强大的客户端验证，或者提供用户简单功能，比如在按下*Enter*键时触发表单提交。
- en: Getting ready
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a blank HTML file named `recipe-5.html` which we can use for this recipe.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe-5.html`的空白HTML文件，我们可以在这个配方中使用。
- en: How to do it…
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Use a variety of event handlers to detect user key press events by performing
    the following steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用各种事件处理程序来检测用户按键事件，执行以下步骤：
- en: Add the following HTML code to the web page you have just created. Update the
    reference to the jQuery library to ensure that the latest version is being referenced
    into the web page. This HTML creates a simple page that has an input and an unordered
    list element, which we can use to output some event information in order to illustrate
    what each part of our jQuery code is achieving.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下HTML代码添加到您刚创建的网页中。更新对jQuery库的引用，以确保引用了最新版本到网页中。这个HTML创建了一个简单的页面，其中包含一个输入框和一个无序列表元素，我们可以使用它来输出一些事件信息，以说明我们的jQuery代码的每个部分都在实现什么。
- en: '[PRE15]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Within the script tags, add the following JavaScript code to attach both the
    `keyup` and `keydown` event handlers:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本标签中，添加以下JavaScript代码来附加`keyup`和`keydown`事件处理程序：
- en: '[PRE16]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works…
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作…
- en: 'We can attach both the `keyup` and `keydown` event handlers by first selecting
    our `.myInput` element and then specifying one of the event handler functions
    as shown in the following code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过首先选择我们的`.myInput`元素，然后指定一个事件处理程序函数来附加`keyup`和`keydown`事件处理程序，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We have added an `event` variable as an argument to the callback function on
    the `keydown` event. From this `event` variable, we can detect which key has been
    pressed using `event.which`. This is often useful as we can determine whether
    the key that the user has just pressed down is the *Enter* key, which we would
    be likely to want to perform a specific action on, such as for form submission
    or when we want to trigger an AJAX call. In this example, we simply append a list
    item to our `#myList` unordered list to illustrate the concept.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在`keydown`事件的回调函数中添加了一个`event`变量作为参数。通过这个`event`变量，我们可以使用`event.which`来检测按下了哪个键。这通常很有用，因为我们可以确定用户刚刚按下的键是否是*Enter*键，我们可能希望对其执行特定操作，比如表单提交或当我们想要触发AJAX调用时。在这个例子中，我们简单地将一个列表项附加到我们的`#myList`无序列表中，以说明这个概念。
- en: We replicate this procedure within our `keyup` event handler and use the `.append()`
    function to append a new DOM element into the list.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`keyup`事件处理程序中复制此过程，并使用`.append()`函数将新的DOM元素附加到列表中。
- en: 'Once you load this web page in a browser and enter text in the input box, you
    will be able to see the events trigger as the list element updates on every key
    press. You will be able to see something similar to the following screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在浏览器中加载了这个网页并在输入框中输入文本，您就能看到事件被触发，因为每次按键时列表元素都会更新。您将能够看到类似以下截图的内容：
- en: '![How it works…](img/0896OS_02_02.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![如何运作…](img/0896OS_02_02.jpg)'
- en: There's more…
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: This recipe provides two examples with `keydown` and `keyup`. Try experimenting
    with the code, and use the alternative `keypress()` function in the same way to
    see how it works.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 该配方提供了两个使用`keydown`和`keyup`的示例。尝试用代码进行实验，并以同样的方式使用替代`keypress()`函数来看看它是如何工作的。
- en: See also
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Detecting button clicks*'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*检测按钮点击*'
- en: '*Detecting element clicks*'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*检测元素点击*'
- en: '*Restricting input character length*'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*限制输入字符长度*'
- en: '*Detecting change*'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*检测变化*'
- en: Restricting input character length
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制输入字符长度
- en: It is possible to limit the characters a user is able to input into a text field
    by utilizing jQuery's `keypress` events. In some situations, this can be a powerful
    user experience feature, as the user is visually aware of the characters that
    they cannot provide instead of having to wait for a response from the server informing
    them of this error.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 jQuery 的 `keypress` 事件限制用户能够输入到文本字段中的字符。在某些情况下，这可以是一个强大的用户体验功能，因为用户可以直观地了解到他们不能提供的字符，而不必等待服务器的响应通知他们发生了错误。
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Once again, we are going to need a blank HTML document with the latest version
    of jQuery to work through this recipe. Create `recipe-6.html` and ensure that
    you have jQuery downloaded and ready to go.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们将需要一个带有最新版本 jQuery 的空白 HTML 文档来完成本教程。创建 `recipe-6.html` 并确保您已下载并准备好 jQuery。
- en: How to do it…
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Learn how to restrict a user from entering certain characters into a text input
    using jQuery by performing the following steps:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下步骤学习如何使用 jQuery 限制用户输入到文本输入中的某些字符：
- en: 'Add the following HTML code to your newly created `recipe-6.html` file that
    creates a basic HTML web page with a single input element:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到您新创建的 `recipe-6.html` 文件中，以创建一个带有单个输入元素的基本 HTML 网页：
- en: '[PRE18]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Within the script tags of the HTML page, add the following JavaScript code,
    which binds a `keypress` event handler to the input and prevents any nonalphanumeric
    character input in the selected text input:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 HTML 页面的脚本标签中，添加以下 JavaScript 代码，将一个 `keypress` 事件处理程序绑定到输入，并阻止选定文本输入中的任何非字母数字字符输入：
- en: '[PRE19]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Open `recipe-6.html` in a browser and attempt to type a nonalphanumeric character
    into the input textbox; you will see that it is not possible to do so.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开 `recipe-6.html` 并尝试在输入文本框中输入非字母数字字符；您会发现无法这样做。
- en: How it works…
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'We attach the `keypress` event handler to the `.myInput` element and specify
    the `event` variable as an argument as shown in the following code snippet:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `keypress` 事件处理程序附加到 `.myInput` 元素，并将 `event` 变量指定为参数，如下面的代码片段所示：
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This allows us to specify commands to be executed on `keypress` when the `.myInput`
    field has focus.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许我们在 `.myInput` 字段获得焦点时在 `keypress` 上指定要执行的命令。
- en: We declare a regular expression variable which we can use to evaluate whether
    the entered character is alphanumeric.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明一个正则表达式变量，可以使用它来评估输入的字符是否是字母数字字符。
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Each key on the keyboard has a unique numeric code that can be accessed using
    `event.which`. Then, to determine if the key pressed is alphanumeric, we need
    to retrieve its string value (for example, alphanumeric value for f is 102 ),
    which can be done with the following code:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘上的每个键都有一个独特的数字代码，可以使用 `event.which` 访问。然后，要确定按下的键是否是字母数字字符，我们需要检索其字符串值（例如，f
    的字母数字值为 102 ），可以使用以下代码完成：
- en: '[PRE22]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This now allows us to apply the regular expression and determine if it meets
    our alphanumeric requirements. If it does not, we prevent such key value from
    being entered by returning `false` as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这现在使我们能够应用正则表达式并确定是否符合我们的字母数字要求。如果不符合，我们通过返回 `false` 来阻止该键值被输入，如下所示：
- en: '[PRE23]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We allow the character to be displayed in the textbox if the pressed key was
    a valid alphanumeric character.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果按下的键是有效的字母数字字符，则允许字符显示在文本框中。
- en: There's more...
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: It is important to understand that client-side validation such as this is a
    powerful user experience feature, but it should never be solely relied upon. Any
    validation done on the client side should always be mirrored on the server. This
    is because it is extremely easy for a user to bypass client-side validation. It
    is often as easy as turning off JavaScript from the browser settings. Remember
    that any client-side language such as JavaScript is completely open to manipulation
    by the end user. For this reason, client-side validation should only be used as
    a user experience enhancement and never a form of explicit validation of data
    input.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 理解客户端验证的重要性很重要，例如这样的验证是一个强大的用户体验功能，但绝不能仅仅依赖于此。在客户端执行的任何验证都应始终在服务器端进行镜像。这是因为用户很容易绕过客户端验证。通常情况下，只需在浏览器设置中关闭
    JavaScript 就可以绕过验证。请记住，任何客户端语言，如 JavaScript，都完全可以被最终用户操纵。因此，客户端验证应仅用作用户体验增强，而永远不是数据输入的明确验证形式。
- en: See also
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Detecting key press events on inputs*'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*检测输入框上的按键事件*'
- en: Changing page elements on mouse hover
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 鼠标悬停时更改页面元素
- en: jQuery provides many ways to bind mouse event handlers that can give the jQuery
    developer more control and flexibility than CSS pseudo classes such as `:hover`.
    These event handlers make it possible to create a rich and interactive user experience
    based on user actions.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 提供了许多绑定鼠标事件处理程序的方法，这些方法可以比 CSS 伪类如 `:hover` 给 jQuery 开发人员更多的控制和灵活性。这些事件处理程序使得基于用户操作创建丰富和交互式的用户体验成为可能。
- en: Note
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: With the release of jQuery 2.0, jQuery no longer officially supports earlier
    browsers such as IE6, IE7, and IE8\. However, methods such as `.hover()` can still
    provide benefits that will allow you to support earlier versions of browsers.
    Be wary, however, that some parts of the jQuery library may no longer work.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 jQuery 2.0 的发布，jQuery 不再正式支持较早的浏览器，如 IE6、IE7 和 IE8。然而，诸如 `.hover()` 之类的方法仍然可以提供利益，使您能够支持较早版本的浏览器。但是，请注意，jQuery
    库的某些部分可能已不再起作用。
- en: Getting ready
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To demonstrate the mouse hover event, we need to firstly create a blank HTML
    document. Create `recipe-7.html` in an easily accessible location on your computer.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示鼠标悬停事件，我们首先需要创建一个空白的 HTML 文档。在计算机上的一个易于访问的位置创建 `recipe-7.html`。
- en: How to do it…
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The following are the steps to understand how jQuery can be used to detect
    when a user is performing a hover action:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 了解 jQuery 如何检测用户执行悬停操作的步骤如下：
- en: 'With your newly created HTML document, add the following HTML and CSS code
    to create a web page with some basic form elements:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您新创建的 HTML 文档，添加以下 HTML 和 CSS 代码来创建一个带有一些基本表单元素的网页：
- en: '[PRE24]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now we have a web page with three simple form elements and a div tag in which
    we can display information about the hovered item. Use the following JavaScript
    code and place it within the script tags to attach the `mouseover` and `mouseleave`
    event handlers to each of the elements with the `.hoverinfo` class:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了一个带有三个简单表单元素和一个 div 标签的网页，在其中我们可以显示有关悬停项的信息。使用以下 JavaScript 代码，并将其放置在
    script 标记中，以将 `mouseover` 和 `mouseleave` 事件处理程序附加到具有 `.hoverinfo` 类的每个元素：
- en: '[PRE25]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Open the web page in a browser and hover over the different form elements; you
    will see the appropriate message displayed.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开网页，悬停在不同的表单元素上；您将看到适当的消息显示。
- en: How it works…
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'We use the following CSS code to add some basic styles to our `.info` div element
    so that it will stand out on the page once displayed:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下 CSS 代码为我们的 `.info` div 元素添加一些基本样式，以便在显示后在页面上突出显示：
- en: '[PRE26]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We have added `display: none;` to prevent the `.info` element from being displayed
    on the screen, leaving this to the jQuery code.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '我们添加了 `display: none;` 以防止 `.info` 元素显示在屏幕上，将其留给 jQuery 代码。'
- en: 'We add the `.hoverinfo` class to each HTML element that includes extra information,
    so we can identify them within our jQuery code. We then use the following code
    to attach both a `mouseover` and `mouseleave` event handler to each of the `.hoverinfo`
    elements:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `.hoverinfo` 类添加到包含额外信息的每个 HTML 元素中，以便在我们的 jQuery 代码中识别它们。然后，我们使用以下代码将 `mouseover`
    和 `mouseleave` 事件处理程序附加到每个 `.hoverinfo` 元素：
- en: '[PRE27]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `mouseover` event handler will be executed when the users move their mouse
    over any of the `.hoverinfo` elements. Similarly, the `mouseleave` event will
    be executed once the user's mouse pointer has left any of the HTML elements with
    the `.hoverinfo` class.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户将鼠标移动到任何 `.hoverinfo` 元素上时，将执行 `mouseover` 事件处理程序。类似地，一旦用户的鼠标指针离开任何具有 `.hoverinfo`
    类的 HTML 元素，`mouseleave` 事件将被执行。
- en: 'Inside the `mouseover` event handler, we can use `$(this).attr("rel");` to
    get the text of the `rel` attribute (or the value of any HTML attribute) that
    we have added to each of the `.hoverinfo` elements. This can then be used with
    the following code:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `mouseover` 事件处理程序中，我们可以使用 `$(this).attr("rel");` 来获取我们添加到每个 `.hoverinfo`
    元素上的 `rel` 属性的文本（或任何 HTML 属性的值）。然后，可以与以下代码一起使用：
- en: '[PRE28]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We pass the text from the `rel` attribute to the `.html()` function, which will
    replace the existing HTML code inside the `.info` div element. We then use jQuery's
    `.fadeIn()` function to provide an animation and show the `.info` element with
    the value from the `rel` attribute.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `rel` 属性的文本传递给 `.html()` 函数，该函数将替换 `.info` div 元素中的现有 HTML 代码。然后，我们使用 jQuery
    的 `.fadeIn()` 函数提供动画，并显示具有 `rel` 属性值的 `.info` 元素。
- en: Finally, the `mouseleave` event handler uses `$('.info').hide();` to again hide
    the element from view, allowing the process to be repeated once another of the
    `.hoverinfo` element's `mouseover` events has been triggered.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`mouseleave` 事件处理程序使用 `$('.info').hide();` 再次将元素隐藏起来，使得可以在另一个 `.hoverinfo`
    元素的 `mouseover` 事件被触发后重复该过程。
- en: There's more…
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: jQuery includes many additional mouse event handlers that can be used for a
    variety of user interactions. Ensure that you choose the one most suitable for
    your situation. Visit the jQuery documentation ([http://api.jquery.com/category/events/mouse-events/](http://api.jquery.com/category/events/mouse-events/))
    to learn more.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 包含许多其他鼠标事件处理程序，可用于各种用户交互。确保选择最适合您情况的事件处理程序。访问 jQuery 文档 ([http://api.jquery.com/category/events/mouse-events/](http://api.jquery.com/category/events/mouse-events/))
    了解更多信息。
- en: See also
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Updating content based on user input*'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基于用户输入更新内容*'
- en: Triggering events manually
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动触发事件
- en: There may be parts of your web application where reacting to events fired by
    user interaction is not enough. jQuery allows us to manually trigger events from
    within our code.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 web 应用程序中可能会有部分需要对用户交互触发的事件做出反应是不够的。jQuery 允许我们从代码内部手动触发事件。
- en: Getting ready
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: When creating a web application, there may be times when you require a form
    that is handled solely by your jQuery code and is not submitted as a typical HTML
    form, perhaps to make an AJAX request instead. This is what we will demonstrate
    in this recipe. To get started, once again create another blank HTML document
    named `recipe-8.html`. Ensure that it is placed in an easily accessible location
    on your computer.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 web 应用程序时，可能会有时候需要一个仅由您的 jQuery 代码处理并且不作为典型 HTML 表单提交的表单，也许是为了执行 AJAX 请求。这就是我们将在这个示例中演示的内容。首先，再次创建一个名为
    `recipe-8.html` 的空白 HTML 文档。确保它被放置在您计算机上易于访问的位置。
- en: How to do it…
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Learn how to manually trigger events from within JavaScript by performing the
    following steps:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下步骤学习如何从 JavaScript 内部手动触发事件：
- en: 'Add the following HTML code to `recipe-8.html` in order to create a very basic
    web page with a set of form elements and a submit button:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到 `recipe-8.html` 中，以创建一个非常基本的网页，其中包含一组表单元素和一个提交按钮：
- en: '[PRE29]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the following jQuery code within the script tags to create an event handler
    for the **Submit** button and to manually trigger the submit button click event
    when the user presses *Enter* inside any of the text inputs:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 jQuery 代码添加到脚本标签中，以创建一个**提交**按钮的事件处理程序，并在用户在任何文本输入框内按下 *Enter* 键时手动触发提交按钮的点击事件：
- en: '[PRE30]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works…
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作…
- en: 'We often want to mimic typical behavior such as form submission when the *Enter*
    key is pressed inside one of our form inputs. We can use the following code to
    listen for a key press event on all of our text inputs:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常希望模仿典型行为，比如当在我们的表单输入框中按下 *Enter* 键时进行表单提交。我们可以使用以下代码监听所有文本输入框的按键事件：
- en: '[PRE31]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This code will be executed once the user has pressed a key inside a text input.
    When they do so, we use `event.which == 13` to check if the *Enter* key is pressed
    (that is, the character code of *Enter* is `13`). If it has been pressed, we use
    the jQuery function `.trigger()` and pass the string `click` to manually trigger
    the click event on the selected element, which in this case is `.submit-btn`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户在文本输入框内按下键盘，此代码将被执行。当他们这样做时，我们使用 `event.which == 13` 来检查是否按下了 *Enter* 键（即
    *Enter* 的字符代码为 `13`）。如果按下了 *Enter* 键，我们就使用 jQuery 函数 `.trigger()` 并传递字符串 `click`
    来手动触发所选元素上的点击事件，这里选定的元素是 `.submit-btn`。
- en: 'Using the following code, a click event handler can be attached to `.submit-btn`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码，可以将点击事件处理程序附加到 `.submit-btn`：
- en: '[PRE32]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The code within the `function` argument is executed and the alert is displayed.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `function` 参数中的代码将被执行，并显示警报。
- en: There's more...
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'There are many other jQuery event handler functions that can be used to manually
    trigger an event if no callback function is provided as an argument. For example,
    consider the following code:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他的 jQuery 事件处理程序函数，可以在没有提供回调函数作为参数时手动触发事件。例如，请考虑以下代码：
- en: '[PRE33]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This code uses the `.click()` function to manually trigger a click event, as
    opposed to using the `.trigger()` function. There is no noticeable difference
    between the two methods, but note that both are available.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码使用 `.click()` 函数来手动触发点击事件，而不是使用 `.trigger()` 函数。两种方法之间没有明显的区别，但请注意两者都是可用的。
- en: Preventing event triggers
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防止事件触发
- en: There are many situations where a jQuery developer will want to prevent the
    default browser actions of events of normal HTML elements such as forms, buttons,
    or even their own event handlers. jQuery provides the ability to stop these events.
    This allows the developer to prevent situations such as multiple button clicks,
    multiple form submissions, and accidental submissions, or generally allow the
    developer to change the normal behavior of typical events.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多情况下，jQuery 开发人员将希望阻止正常 HTML 元素（例如表单、按钮甚至是他们自己的事件处理程序）的默认浏览器操作。jQuery 提供了停止这些事件的能力。这使开发人员可以防止诸如多次按钮点击、多次表单提交和意外提交等情况，或者通常允许开发人员更改典型事件的正常行为。
- en: Getting ready
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a blank HTML file named `recipe-9.html` and ensure that the latest version
    of the jQuery library is available.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `recipe-9.html` 的空白 HTML 文件，并确保最新版本的 jQuery 库可用。
- en: How to do it…
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Understand how to prevent default browser actions by performing the following
    steps:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 了解如何通过执行以下步骤阻止默认浏览器操作：
- en: 'Add the following HTML code to `recipe-9.html`; ensure that you update the
    reference to the jQuery library to the correct location on your computer:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到 `recipe-9.html` 中；确保您更新对 jQuery 库的引用以指向计算机上的正确位置：
- en: '[PRE34]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Use the following jQuery code and place it within the script tags to catch
    the button click of the **Submit** button and prevent the form from being submitted:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 jQuery 代码并将其放置在脚本标签中以捕获 **提交** 按钮的点击并阻止表单被提交：
- en: '[PRE35]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Opening `recipe-9.html` in a browser and clicking on the **Submit** button will
    present you with a JavaScript confirmation message, which will catch your response
    and then submit the HTML form, depending on your choice. The form will not be
    submitted until you have responded to this message box, thanks to the `event.preventDefault();`
    and `event.stopPropagation();` methods.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开 `recipe-9.html` 并单击 **提交** 按钮将向您显示一个 JavaScript 确认消息，该消息将捕获您的响应，然后根据您的选择提交
    HTML 表单。感谢 `event.preventDefault();` 和 `event.stopPropagation();` 方法，直到您对此消息框做出响应，表单才会被提交。
- en: How it works…
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The following jQuery code allows us to click on the **Submit** button and create
    a click event handler using the `.on()` function. We provide `click` as the first
    argument to specify that we require the click event handler, and the `.on()` function
    provides an interface for many other types of events.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 jQuery 代码允许我们点击 **提交** 按钮并使用 `.on()` 函数创建一个点击事件处理程序。我们将 `click` 作为第一个参数提供，以指定我们需要点击事件处理程序，而
    `.on()` 函数提供了许多其他类型事件的接口。
- en: '[PRE36]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We provide the `event` variable as an argument in the `.on()` callback function.
    We can then use the following jQuery functions to create our desired effect:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `.on()` 回调函数中提供 `event` 变量作为参数。然后，我们可以使用以下 jQuery 函数来创建我们想要的效果：
- en: '[PRE37]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `event.prevenDefault();` function prevents the default action of the current
    event; in this case, the form submission. This allows us to handle the event in
    our own way, such as providing extra functionality or resulting in a different
    action entirely. The `event.stopPropagation();` function will prevent the event
    from bubbling up through the parent and ancestor DOM elements. When an event is
    fired on an element, the event is also fired on the parent and all ancestor elements
    within the DOM, and as a result, we can still fire the event we are trying to
    initially prevent.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`event.preventDefault();` 函数阻止当前事件的默认操作；在这种情况下，即表单提交。这样可以让我们以自己的方式处理事件，例如提供额外功能或导致完全不同的操作。`event.stopPropagation();`
    函数将阻止事件冒泡通过父级和祖先 DOM 元素。当在元素上触发事件时，事件也会在父元素和 DOM 中的所有祖先元素上触发，因此，我们仍然可以触发最初尝试阻止的事件。'
- en: 'As we have used these methods to prevent the form submission, we can ask the
    user if they are sure they would like to submit the form. We use the native JavaScript
    `confirm()` function to do this as follows:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经使用了这些方法来防止表单提交，我们可以询问用户是否确定要提交表单。我们使用原生的 JavaScript `confirm()` 函数来实现这一点，如下所示：
- en: '[PRE38]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: We store the user's response in a variable which we can then evaluate. If they
    click on **OK** to confirm the form submission, we can go ahead and submit the
    form using `$('#myForm').submit();`. Otherwise, we do nothing and the form is
    not submitted.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用户的响应存储在一个变量中，然后对其进行评估。如果他们点击 **确定** 来确认表单提交，我们可以继续使用 `$('#myForm').submit();`
    提交表单。否则，我们什么也不做，表单就不会被提交。
- en: See also
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Triggering events manually*'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*手动触发事件*'
- en: Creating a custom event
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义事件
- en: jQuery provides the developer with ways to handle built-in JavaScript events
    with functions such as `.click()`, `.hover()`, and others. jQuery also allows
    developers to create their own event types for additional functionality. With
    the creation of custom events, developers are also able to pass data around their
    application more easily.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 为开发者提供了处理内置 JavaScript 事件的方法，如 `.click()`、`.hover()` 等。jQuery 还允许开发者创建自己的事件类型以提供额外的功能。通过创建自定义事件，开发者还可以更轻松地在他们的应用程序中传递数据。
- en: Getting ready
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create another blank HTML document named `recipe-10.html` in an easily accessible
    location.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个易于访问的位置创建另一个空白的 HTML 文档，命名为 `recipe-10.html`。
- en: How to do it…
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做……
- en: 'Learn how to create a custom event using jQuery by performing the following
    steps:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何使用 jQuery 创建自定义事件，执行以下步骤：
- en: Add the following HTML code to this newly created HTML document. Remember to
    update the reference to the jQuery library to point to its local location on your
    computer.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到这个新创建的 HTML 文档中。记得更新对 jQuery 库的引用，指向你计算机上的本地位置。
- en: '[PRE39]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We can now bind a custom event handler to our paragraph and trigger it when
    one of our button elements is clicked. Add the following JavaScript code within
    the script tags:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以绑定一个自定义事件处理程序到我们的段落上，并在其中一个按钮元素被点击时触发它。在脚本标签内添加以下 JavaScript 代码：
- en: '[PRE40]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Open your newly created web page, and by clicking on either of the two buttons,
    you should see the paragraph text change along with its color, corresponding to
    the button that was clicked.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你新创建的网页，并点击两个按钮中的任何一个，你应该看到段落文本随按钮的点击而改变，并且颜色也相应变化。
- en: How it works…
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'jQuery provides us with a `.on()` function that allows us to specify the name
    of the event we wish to bind to the selected element. We can specify a built-in
    jQuery event or we can provide the name of our own event. We do this using the
    following JavaScript code:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 提供了一个 `.on()` 函数，允许我们指定要绑定到选定元素的事件的名称。我们可以指定内置的 jQuery 事件，或者我们可以提供我们自己事件的名称。我们使用以下
    JavaScript 代码来做到这一点：
- en: '[PRE41]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This code binds an event handler for our custom `switchColour` event to the
    paragraph element with the `colourme` class. The second argument we provide to
    the `.on()` function is a callback method that has its own three arguments: `Event`,
    which holds the event information, and then `colour` and `text`, which are our
    own custom properties that we can use later.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将事件处理程序绑定到具有 `colourme` 类的段落元素的自定义 `switchColour` 事件上。我们向 `.on()` 函数提供的第二个参数是一个回调方法，该方法有三个参数：`Event`，保存事件信息，然后是
    `colour` 和 `text`，它们是我们自己的自定义属性，我们稍后可以使用它们。
- en: Within the function, we use `$(this).html(text);` in order to change the content
    of the currently selected `.colourme` paragraph element to be the text provided
    within the `text` variable. We also apply some CSS using `$(this).css("color",
    colour);` (use the spelling `color` not colour) that changes the color of the
    text to that of the value provided as the `colour` variable.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数内部，我们使用 `$(this).html(text);` 来改变当前选择的 `.colourme` 段落元素的内容为 `text` 变量提供的文本。我们还使用
    `$(this).css("color", colour);` 应用一些 CSS，将文本的颜色更改为提供的 `colour` 变量的值。（使用拼写 `color`
    而不是 `colour`）。
- en: 'Now that our custom event has been created, we need to be able to trigger this
    event, which can be done using the following code:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了自定义事件，我们需要能够触发此事件，可以使用以下代码完成：
- en: '[PRE42]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In the preceding JavaScript code, we use the jQuery provided `.click()` function
    to execute a set of code once either of the button elements have been clicked.
    Within the click event handler, we first retrieve the `rel` attribute of the element,
    which we specified as a variable `colour` in the HTML.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的 JavaScript 代码中，我们使用 jQuery 提供的 `.click()` 函数来执行一组代码，一旦点击了其中一个按钮元素。在点击事件处理程序中，我们首先检索元素的
    `rel` 属性，我们在 HTML 中指定为变量 `colour`。
- en: We then use the `.trigger()` function and specify our custom event to be triggered.
    We provide a second parameter as an array, containing both the variables we specified
    in our custom event using `.on()`, `colour`, and `text`.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用 `.trigger()` 函数并指定要触发的自定义事件。我们提供第二个参数作为一个数组，包含我们在使用 `.on()` 指定的自定义事件中的变量，`colour`
    和 `text`。
- en: The `.trigger()` function will fire our custom event and provide any bound elements
    with the information we provide. The .`colourme` paragraph that is bound to this
    event will have its inner HTML changed and its CSS color property modified to
    become the specified color.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`.trigger()` 函数将触发我们自定义的事件，并为任何绑定的元素提供我们提供的信息。绑定到此事件的 `.colourme` 段落将其内部 HTML
    更改，并修改其 CSS 颜色属性以成为指定的颜色。'
