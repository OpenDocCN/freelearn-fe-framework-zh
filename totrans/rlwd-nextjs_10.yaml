- en: '*Chapter 8*: Using a Custom Server'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next.js is an incredibly powerful framework. In the first seven chapters of
    this book, we've been able to create some nice server-side rendered web applications
    without really caring about tweaking and customizing the web server. Of course,
    there are few chances for us to discuss implementing a Next.js application inside
    an Express.js or Fastify server in a real-life scenario, but knowing how to do
    so is likely to be handy on many occasions.
  prefs: []
  type: TYPE_NORMAL
- en: Talking for myself, in the past years, I've created dozens of large-scale web
    applications using Next.js, and I rarely needed to use a custom server. However,
    in some cases, it is inevitable.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look at the following topics in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: What using a "custom server" means, when we might need to use it, and what are
    the options.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use Express.js and Next.js together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use Fastify and Next.js together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the requirements for deploying a custom server?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll be able to determine when to use a custom
    server, what its advantages and downsides are, and what problems it can solve.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To run the code examples in this chapter, you need to have both Node.js and
    `npm` installed on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer, you can use an online IDE such as [https://repl.it](https://repl.it)
    or [https://codesandbox.io](https://codesandbox.io); they both support Next.js,
    and you don''t need to install any dependency on your computer. As with the other
    chapters, you can find the codebase for this chapter on GitHub: https://github.com/PacktPublishing/Real-World-Next.js.'
  prefs: []
  type: TYPE_NORMAL
- en: About using a custom server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we''ve already seen, Next.js ships with its own server, so we don''t need
    to configure a custom one to get started with writing web applications with this
    framework. Still, there are some cases where we may want to serve a Next.js app
    from a custom web server, such as Express.js or Fastify, and the framework makes
    this possible by exposing some straightforward APIs that we''ll be looking into
    in just one moment. But before looking at the implementation, let''s answer an
    important question: *do we really need a custom server?*'
  prefs: []
  type: TYPE_NORMAL
- en: The short answer is, most of the time, *no*. Next.js is such a complete framework
    that we rarely need to customize the server-side logic via Express.js, Fastify,
    or any other server-side framework. But sometimes, it is just inevitable, as it
    can solve specific problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some common use cases for a custom server are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Integrating Next.js into an existing server**: Suppose you''re refactoring
    an existing web application to adopt Next.js; you may want to maintain as much
    server-side logic as possible, your middlewares, and routes. In that case, you
    can progressively add Next.js by choosing which pages of your websites will be
    served from the framework and which ones will be rendered by something else.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-tenancy**: Even though Next.js supports multiple domains and conditional
    rendering depending on the current hostname (look at [https://github.com/leerob/nextjs-multiple-domains](https://github.com/leerob/nextjs-multiple-domains)
    if you''re interested in a native solution), there are cases where you may need
    more control and a simplified workflow for handling up to thousands of different
    domains. If you''re interested in an Express.js/Fastify multi-tenant middleware
    for Next.js, you can take a look at [https://github.com/micheleriva/krabs](https://github.com/micheleriva/krabs).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**You want more control**: Even though Next.js provides everything you need
    for creating a robust and complete user experience, there are cases where your
    app is growing in complexity and you want to organize the backend code using different
    approaches, such as adopting the MVC philosophy, where Next.js is just the "view"
    part of the process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While a custom server could solve some problems, it also has some downsides.
    For instance, you cannot deploy a custom server to Vercel, the platform created
    by the Next.js authors, which is highly optimized for the framework. Also, you'll
    need to write and maintain more code, which can be a significant downside if you're
    working on a side project, in a small team, or for a small company.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next section, we''ll see how to write a custom server for Next.js using
    one of the most popular web frameworks for Node.js: Express.js.'
  prefs: []
  type: TYPE_NORMAL
- en: Using a custom Express.js server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Writing a custom Express.js server to render Next.js pages is easier than you
    might think. Let''s create a new project and install the following dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we''ve installed these four packages, we can start writing a custom Express.js
    server. Let''s create an `index.js` file inside the project root and start by
    importing the required dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to instantiate the Next.js app, and we can do that by adding the
    following code right after the import statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s complete our server by writing the `main` function, which takes every
    incoming `GET` request and passes it to Next.js for server-side rendering:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Let's focus on the `main` function body and see what's going on.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we wait for the Next.js app to be ready for rendering. Then, we
    instantiate a `handle` constant, which will handle the incoming requests on behalf
    of Next.js. We then create the Express.js server and ask it to handle all the
    `GET` requests using the Next.js request handler.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now create a home page by creating a new `pages/` directory and a `pages/index.js`
    file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If we try to run `node index.js`, and then go to `http://localhost:3000`, we
    will see the **Homepage** text displayed on the screen. We did it!
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also test dynamic routes by creating a new `pages/greet/[user].js` file
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Going to `http://localhost:3000/greet/Mitch`, we will see a friendly **Hello
    Mitch!** message printed on the screen. As you can see, implementing dynamic routes
    is incredibly easy!
  prefs: []
  type: TYPE_NORMAL
- en: From this point, we can continue working on Next.js as we always did. There
    aren't many differences compared to what we did in the previous chapters, but
    what would be the point of having a custom server if we did not exploit its full
    potential?
  prefs: []
  type: TYPE_NORMAL
- en: We've seen that a custom server may be helpful when we have an existing web
    application that we wish to progressively migrate to Next.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start adding some more functionality by refactoring the server as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As you can tell, we're not serving any page with Next.js right now. So instead,
    we just serve a home page, and a fake API at `/api/greet`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now want to create a new `/about` page and serve it using Next.js. But first,
    we need to create the Next.js-powered page under the `/pages/about` route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can go back to our `index.js` file and edit the `main` function, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re now using a different function for rendering a Next.js page: `app.render`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This function takes the following arguments: Express.js'' `request` and `response`,
    the page to render, and the parsed query string.'
  prefs: []
  type: TYPE_NORMAL
- en: 'But as soon as we start the server and head over to `http://localhost:3000/about`,
    we will notice a blank page. If we inspect the network call for this page, we
    will see the following situation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Next.js scripts are not found'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.01_B16985.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.1 – Next.js scripts are not found
  prefs: []
  type: TYPE_NORMAL
- en: What's happening here? Next.js renders the page properly, as you can tell by
    inspecting the HTML output, but the page is entirely white!
  prefs: []
  type: TYPE_NORMAL
- en: We forgot to tell Express.js that every static asset whose path starts with
    `_next/` needs to be handled by Next.js itself. This is because all those static
    assets (typically JavaScript files) are responsible for importing React into the
    browser, handling hydration, and managing all the Next.js frontend-specific features.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can quickly fix that by adding the following route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Given that we cannot predict Next.js static asset names, we will use a regular
    expression (`/_next\/.+/`) matching every file whose path starts with `_next/`.
    We then use the Next.js handle method for serving those files.
  prefs: []
  type: TYPE_NORMAL
- en: We can now start our server and see that it is working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: As we've seen before, from now, the developer experience will remain the same
    while developing Next.js-powered pages. We still have access to both the `_app.js`
    and `_document.js` files, we can still use the built-in `Link` component, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next section, we will see how to integrate Next.js with another incredibly
    popular Node.js web framework: Fastify.'
  prefs: []
  type: TYPE_NORMAL
- en: Using a custom Fastify server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fastify is an incredible web framework for Node.js. As the name suggests, it
    can be attractive as it is really, really fast when compared to other web frameworks,
    such as Express.js, Koa, and Hapi. If you''re interested in learning more about
    its performance, you can find the official benchmarks in the following repository:
    [https://github.com/fastify/benchmarks](https://github.com/fastify/benchmarks).'
  prefs: []
  type: TYPE_NORMAL
- en: This web framework is developed and maintained by some of Node.js' core developers,
    such as Matteo Collina (Node.js technical steering committee member). So, as you
    can imagine, the people behind Fastify perfectly know how the runtime works and
    have made the framework as optimized as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'But Fastify is not just about the performance: it also enforces excellent best
    practices to keep the developer experience as good as possible. It also has a
    robust plugin system that allows everyone to write their own plugin or middleware
    with ease. If you haven''t already, I highly recommend checking it out at https://github.com/fastify/fastify.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fastify provides an official plugin for managing Next.js-rendered routes: `fastify-nextjs`.
    You can find its source code here: https://github.com/fastify/fastify-nextjs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new empty project and install the following dependencies to
    see it in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We can now create the same three pages we made in the past section.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple home page under `/pages/index.js` can be implemented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'An "about" page under `/pages/about.js` can be implemented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, a dynamic page used for greeting a user under `/pages/greet/[user].js`
    can be implemented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can finally code our Fastify server, and it will be straightforward compared
    to the Express.js one. Let''s create an `index.js` file inside of the project''s
    root and add the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Starting the server, we will be able to render all the pages we specified in
    our `index.js` file! As you can notice, this implementation is even easier than
    the Express.js one. We just invoke the `fastify.next` function to render a Next.js
    page, and we don't even need to worry about Next.js' static assets; Fastify will
    take care of them on our behalf.
  prefs: []
  type: TYPE_NORMAL
- en: 'From this point, we can start writing different routes serving different contents,
    such as JSON responses, HTML pages, and static files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, integrating Next.js with Fastify is incredibly easy. From this
    point, just like with Express.js, we can do whatever we want, just like we're
    writing a common Next.js web application.
  prefs: []
  type: TYPE_NORMAL
- en: We can create both `_app.js` and `_document.js` files to customize our Next.js
    pages' behavior, integrate any UI library, and do all the things we've already
    seen in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ve seen how to integrate Next.js with two of the most
    popular web frameworks for Node.js: Express.js and Fastify. It is possible to
    integrate Next.js with other web frameworks, and the implementation won''t be
    different from what we''ve seen in the previous sections.'
  prefs: []
  type: TYPE_NORMAL
- en: One thing to consider when using a custom server of any kind (be it Express.js,
    Fastify, or any other framework) is that we cannot deploy it to some providers,
    such as Vercel or Netlify.
  prefs: []
  type: TYPE_NORMAL
- en: 'Technically speaking, many providers (Vercel, Netlify, Cloudflare, and so on)
    provide a great way to serve Node.js-powered applications: serverless functions.
    However, since this is quite an advanced topic, we will discuss it in depth in
    [*Chapter 11*](B16985_11_Final_SB_epub.xhtml#_idTextAnchor113), *Different Deployment
    Platforms*.'
  prefs: []
  type: TYPE_NORMAL
- en: As we'll see in [*Chapter 11*](B16985_11_Final_SB_epub.xhtml#_idTextAnchor113),
    *Different Deployment Platforms*, Next.js is a framework highly optimized to run
    on Vercel, the infrastructure provided by the company behind the creation (and
    maintenance) of the framework. Using a custom server, we lose the ability to deploy
    to this infrastructure, making things a bit less optimized and integrated.
  prefs: []
  type: TYPE_NORMAL
- en: Still, there are other awesome options out there, such as DigitalOcean, Heroku,
    AWS, and Azure. From this point, we can deploy our custom Next.js server on all
    of those services that support a Node.js environment.
  prefs: []
  type: TYPE_NORMAL
- en: Starting from [*Chapter 11*](B16985_11_Final_SB_epub.xhtml#_idTextAnchor113),
    *Different Deployment Platforms*, we will discuss Next.js deployments in more
    depth. But for now, we just want to concentrate on its features and integrations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Talking about its integrations specifically, once we write a page, some middleware,
    or a component for our Next.js application, we want to test whether it works properly
    before deploying it to production. In the next chapter, we''ll discuss implementing
    unit and end-to-end tests using two of the most commonly used testing libraries
    out there: Jest and Cypress.'
  prefs: []
  type: TYPE_NORMAL
