["```js\n $ npm install  react-addons-update --save\n\n // src/App.js\n import Update from 'react-addons-update';\n\n```", "```js\n  // Updated getInitialState function of App component\n  // src/App.js\n\n  getInitialState(){\n    return { books: [],\n             totalBooks: 0,\n             searchCompleted: false,\n             searching: false,\n             sorting: 'asc' };\n  }\n```", "```js\nimport sortBy from 'sort-by';\n\n_sortByTitle() {\n    let sortByAttribute = this.state.sorting === 'asc' ? \"title\" : \"-title\";\n    let unsortedBooks = this.state.books;\n    let sortedBooks = unsortedBooks.sort(sortBy(sortByAttribute));\n    this.setState({ books: sortedBooks, \n                    sorting: this._toggleSorting() });\n  },\n\n  _toggleSorting() {\n    return this.state.sorting === 'asc' ? 'desc' : 'asc';\n  }\n```", "```js\nlet unsortedBooks = this.state.books;\n```", "```js\n_sortByTitle() {\n    let sortByAttribute = this.state.sorting === 'asc' ? \"title\" : \"-title\";\n    let unsortedBooks = this.state.books;\n    console.log(\"Before sorting :\");\n    console.log(this.state.books[0].title);\n    let sortedBooks = unsortedBooks.sort(sortBy(sortByAttribute));\n    console.log(\"After sorting :\");\n    console.log(this.state.books[0].title);\n    // this.setState({ books: sortedBooks, \n                       sorting: this._toggleSorting() });\n\n  },\n```", "```js\n_sortByTitle() {\n    let sortByAttribute = this.state.sorting === 'asc' ? \"title\" : \"-title\";\n    let unsortedBooks = Object.assign([], this.state.books);\n    console.log(\"Before sorting :\");\n    console.log(this.state.books[0].title);\n    let sortedBooks = unsortedBooks.sort(sortBy(sortByAttribute));\n    console.log(\"After sorting :\");\n    console.log(this.state.books[0].title);\n    this.setState({ books: sortedBooks, \n                    sorting: this._toggleSorting() });\n  }\n```", "```js\n_sortByTitle() {\n    let sortByAttribute = this.state.sorting === 'asc' ? \"title\" : \"-title\";\n    let unsortedBooks = Object.assign([], this.state.books);\n    unsortedBooks.map((book) => book.title = book.title.toUpperCase());\n    console.log(\"unsortedBooks\");\n    console.log(unsortedBooks[0].title);\n    console.log(\"this.state.books\");\n    console.log(this.state.books[0].title); \n  }\n```", "```js\nUpdate(this.state, { books: { sortedBooks }})\n```", "```js\n    // src/App.js\n\nimport Update from 'react-addons-update';\n\n_sortByTitle() {\n  let sortByAttribute = this.state.sorting === 'asc' ? \"title\" : \"-title\";\n  console.log(\"Before sorting\");\n  console.log(this.state.books[0].title);\n  let newState = Update(this.state,\n                        { books: { $apply: (books) => { return books.sort(sortBy(sortByAttribute)) } },\n                          sorting: { $apply: (sorting) => { return sorting === 'asc' ? 'desc' : 'asc' } } });\n  console.log(\"After sorting\");\n  console.log(this.state.books[0].title);\n  this.setState(newState);\n  }\n```", "```js\nReact.cloneElement(element, props, …children);\n```", "```js\n// src/App.js\n\nrender() {\n    let tabStyles = {paddingTop: '5%'};\n    return (\n      <div className='container'>\n        <div className=\"row\" style={tabStyles}>\n          <div className=\"col-lg-8 col-lg-offset-2\">\n            <h4>Open Library | Search any book you want!</h4>\n            <div className=\"input-group\">\n              <input type=\"text\" className=\"form-control\" placeholder=\"Search books...\" ref='searchInput'/>\n              <span className=\"input-group-btn\">\n                <button className=\"btn btn-default\" type=\"button\" onClick={this._performSearch}>Go!</button>\n              </span>\n            </div>\n          </div>\n        </div>\n        {this._displaySearchResults()}\n      </div>\n    );\n  },\n\n_displaySearchResults() {\n    if(this.state.searching) {\n      return <Spinner />;\n    } else if(this.state.searchCompleted) {\n      return (\n        <BookList\n            searchCount={this.state.totalBooks}\n            _sortByTitle={this._sortByTitle}>\n          {this._renderBooks()}\n        </BookList>\n      );\n    }\n  } \n\n_renderBooks() {\n    return this.state.books.map((book, idx) => {\n      return (\n        <BookRow key={idx}\n                 title={book.title}\n                 author_name={book.author_name}\n                 edition_count={book.edition_count} />\n      );\n    })\n  },\n\n})\n  }\n```", "```js\n// BookList component\n\nvar BookList = React.createClass({\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col-lg-8 col-lg-offset-2\">\n          <span className='text-center'>\n            Total Results: {this.props.searchCount}\n          </span>\n          <table className=\"table table-stripped\">\n            <thead>\n              <tr>\n                <th><a href=\"#\" onClick={this.props._sortByTitle}>Title</a></th>\n                <th>Author</th>\n                <th>No. of Editions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.props.children}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n});\n```", "```js\n// RowAlternator component\n\nimport React from 'react';\n\nvar RowAlternator = React.createClass({\n  propTypes: {\n    firstColor: React.PropTypes.string,\n    secondColor: React.PropTypes.string\n  },\n\n  render() {\n    return (\n      <tbody>\n        { this.props.children.map((row, idx) => {\n            if (idx %2 == 0) {\n              return React.cloneElement(row, { style: { background: this.props.firstColor }});\n            } else {\n              return React.cloneElement(row, { style: { background: this.props.secondColor }});\n            }\n          })\n        }\n      </tbody>\n    )\n  }\n});\n\nmodule.exports = RowAlternator;\n```", "```js\n// BookList component\n\nimport RowAlternator from '../src/RowAlternator';\n\nvar BookList = React.createClass({\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col-lg-8 col-lg-offset-2\">\n          <span className='text-center'>\n            Total Results: {this.props.searchCount}\n          </span>\n          <table className=\"table table-stripped\">\n            <thead>\n              <tr>\n                <th><a href=\"#\" onClick={this.props._sortByTitle}>Title</a></th>\n                <th>Author</th>\n                <th>No. of Editions</th>\n              </tr>\n            </thead>\n            <RowAlternator firstColor=\"white\" secondColor=\"lightgrey\">\n              {this.props.children}\n            </RowAlternator>\n          </table>\n        </div>\n      </div>\n    );\n  }\n});\n```", "```js\nnpm install jest-cli --save-dev\nnpm install babel-jest –-save-dev\n\n```", "```js\n{\n ...\n \"scripts\": {\n   \"test\": \"jest\"\n },\n\n \"jest\": {\n   \"scriptPreprocessor\": \"<rootDir>/node_modules/babel-jest\",\n    \"unmockedModulePathPatterns\": [\n         \"<rootDir>/node_modules/react\",\n         \"<rootDir>/node_modules/react-dom\",\n         \"<rootDir>/node_modules/react-addons-test-utils\",\n         \"<rootDir>/node_modules/fbjs\"\n     ],\n   \"testFileExtensions\": [\"es6\", \"js\", \"jsx\"],\n   \"moduleFileExtensions\": [\"js\", \"json\", \"es6\"]\n }\n ...\n}\n```", "```js\nmkdir __test__\ntouch __test__/app-test.js\n\n```", "```js\n$ npm test\n\n> react-addons-examples@0.0.1 test /Users/prathamesh/Projects/sources/reactjs-by-example/chapter7\n> jest\n\nUsing Jest CLI v0.7.1\nPASS __tests__/app-test.js (0.007s)\n\n```", "```js\n// app-test.js\n\n   const App = require('App'); // Mocked by Jest\n```", "```js\n// app-test.js\n\njest.dontmock('./../src/App'); // Tells Jest not to mock App.\nconst App = require('App');\n```", "```js\n// app-test.js\n\njest.dontMock('../src/App');\nconst App = require('../src/App');\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TestUtils from 'react-addons-test-utils';\n```", "```js\n// app-test.js\n\ndescribe('App', () => {\n  it('mounts successfully', () => {\n    let app = TestUtils.renderIntoDocument(<App />);\n    expect(app.state.books).toEqual([]);\n    expect(app.state.searching).toEqual(false);\n  })\n});\n```", "```js\n// app-test.js\n\nit('starts searching when user enters search term and clicks submit', () => {\n    let app = TestUtils.renderIntoDocument(<App />);\n\n    let inputNode = TestUtils.findRenderedDOMComponentWithTag(app, 'input');\n    inputNode.value = \"Dan Brown\";\n    TestUtils.Simulate.change(inputNode);\n    let submitButton = TestUtils.findRenderedDOMComponentWithTag(app, 'button');\n    TestUtils.Simulate.click(submitButton);\n    expect(app.state.searching).toEqual(true);\n    expect(app.state.searchCompleted).toEqual(false);\n  })\n```", "```js\n// app-test.js\n\n// __tests__/app-test.js\n\nimport Spinner from './../src/Spinner';\n\nit('starts searching when user enters search term and clicks submit', () => {\n    let app = TestUtils.renderIntoDocument(<App />);\n    let inputNode = TestUtils.findRenderedDOMComponentWithTag(app, 'input');\n    inputNode.value = \"Dan Brown\";\n    TestUtils.Simulate.change(inputNode);\n    let submitButton = TestUtils.findRenderedDOMComponentWithTag(app, 'button');\n    TestUtils.Simulate.click(submitButton);\n    expect(app.state.searching).toEqual(true);\n    expect(app.state.searchCompleted).toEqual(false);\n let spinner = TestUtils.findRenderedComponentWithType(app, Spinner);\n expect(spinner).toBeTruthy();\n  }),\n```", "```js\nlet renderer = TestUtils.createRenderer();\n```", "```js\nlet renderer = TestUtils.createRenderer();\nlet result = renderer.render(<App />);\n```", "```js\nlet renderer = TestUtils.createRenderer();\nlet result = renderer.render(<App />);\nresult = renderer.getRenderOutput();\nconsole.log(result);\n\n// Output of console.log(result)\n\nObject {\n  '$$typeof': Symbol(react.element),\n  type: 'div',\n  key: null,\n  ref: null,\n  props: \n   Object {\n     className: 'container',\n     children: Array [ [Object], undefined ] },\n  _owner: null,\n  _store: Object {} }\n```"]