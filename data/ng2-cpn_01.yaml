- en: Chapter 1. Angular 2 Component Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。Angular 2组件架构
- en: The way we think about web applications has changed. The goal of this chapter
    is to provide an overview of the existing popular architectural patterns for building
    frontend applications, and the new approach that relies on composing self-contained
    custom components.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对Web应用程序的思考方式已经改变了。本章的目标是概述构建前端应用程序的现有流行架构模式，以及依赖于组合自包含自定义组件的新方法。
- en: 'Understanding the architectural pattern that was implemented in Angular 1 will
    help you migrate your existing application to Angular 2 in the future. In this
    chapter, we will discuss those topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 了解在Angular 1中实现的架构模式将有助于您将现有应用程序迁移到将来的Angular 2。在本章中，我们将讨论这些主题：
- en: Overview of the Model-View-Controller pattern
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型视图控制器模式概述
- en: Angular 1 implementation of model, view, and ViewModel
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 1中的模型、视图和ViewModel的实现
- en: Moving from MVVM to components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MVVM迁移到组件
- en: An example of the Angular 2 components architecture
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 2组件架构的示例
- en: The Model-View-Controller pattern
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型-视图-控制器模式
- en: This is an architectural design pattern for implementing user interfaces, which
    has been used for many years for desktop GUI.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种用于实现用户界面的架构设计模式，多年来一直用于桌面GUI。
- en: 'It divides the application into three distinct parts:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 它将应用程序分为三个不同的部分：
- en: '**Model**: This is responsible for storing the actual data'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型：这负责存储实际数据
- en: '**View**: This is the presentation layer that renders the data to the user'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：这是将数据呈现给用户的表示层'
- en: '**Controller**: The glue between the model and the view'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：模型和视图之间的粘合剂'
- en: 'The following diagram describes the relationships between those parts:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表描述了这些部分之间的关系：
- en: '![The Model-View-Controller pattern](../Images/image00089.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![模型-视图-控制器模式](../Images/image00089.jpeg)'
- en: This pattern describes the communication between those parts. The **view** reflects
    the data in the model, but cannot alter the data directly in the model. It is
    common to describe the relationship between the model and the view as read only
    (the view can only read from the model). The view uses the **controller** by invoking
    methods and changing attributes. The **controller** updates the model, which causes
    the view to update and render the new data.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式描述了这些部分之间的通信。**视图**反映模型中的数据，但不能直接改变模型中的数据。通常将模型和视图之间的关系描述为只读的（视图只能从模型中读取）。视图使用**控制器**通过调用方法和更改属性。**控制器**更新模型，导致视图更新并呈现新数据。
- en: MVC, which was originally developed for desktop applications, has been widely
    adopted as an architecture for building single page web applications and can be
    found in all the popular client-side frameworks, including Angular.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: MVC最初是为桌面应用程序开发的，但已被广泛采用作为构建单页面Web应用程序的架构，并且可以在所有流行的客户端框架中找到，包括Angular。
- en: MVC in Angular 1
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Angular 1中的MVC
- en: 'Angular 1 implements a variation of the classic MVC, which is known by the
    name **Model View ViewModel** (**MVVM**). This pattern describes different roles
    and communication between the parts:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 1实现了经典MVC的变体，称为**Model View ViewModel**（**MVVM**）。这种模式描述了不同角色和部分之间的通信：
- en: '**Model**: This holds the data or acts as data access layer'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：这保存数据或充当数据访问层'
- en: '**View**: Like MVC, this is the presentation layer'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：像MVC一样，这是表示层'
- en: '**ViewModel**: This is an abstraction of the view that is bound to the view'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ViewModel**：这是绑定到视图的视图的抽象'
- en: 'The following diagram describes the relationships between those parts with
    the terminology of Angular 1:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表描述了使用Angular 1术语的这些部分之间的关系：
- en: '![MVC in Angular 1](../Images/image00090.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![MVC in Angular 1](../Images/image00090.jpeg)'
- en: 'The **ViewModel** in Angular 1 is an object named: ''`$scope`'' that is constructed
    by an Angular controller. We do not always interact with this object directly.
    It''s binding to the view is two-way (In Angular, we refer to the view as a ''Template'').
    The ViewModel can read and alter the data on the model and update itself when
    necessary. The view will reflect those changes immediately. Angular doesn''t include
    any predefined model type. Instead, we code our models as plain JavaScript and
    register it as an Angular service. The following code snippet shows the structure
    of a custom model service `Model.js`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular 1中，**ViewModel**是一个名为'`$scope`'的对象，由Angular控制器构造。我们并不总是直接与这个对象交互。它与视图的绑定是双向的（在Angular中，我们将视图称为'模板'）。ViewModel可以读取和修改模型上的数据，并在必要时更新自身。视图将立即反映这些变化。Angular不包括任何预定义的模型类型。相反，我们将我们的模型编码为纯JavaScript，并将其注册为Angular服务。以下代码片段显示了自定义模型服务`Model.js`的结构：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following code snippet shows the structure of `ViewModel.js`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了`ViewModel.js`的结构：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following code snippet shows the structure of `View.html`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了`View.html`的结构：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Moving from views to components
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从视图转向组件
- en: Angular applications are based around the concept of views. A view in Angular
    refers to a template (HTML), which is, most of the time, managed by one or more
    controllers. This view can also contain some custom directives that encapsulate
    some other chunks of HTML and JavaScript. Naturally, over the years, Angular developers
    tend to create more and more directives and use them as building blocks that replace
    the original HTML tags with custom elements.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Angular应用程序围绕视图的概念构建。在Angular中，视图指的是模板（HTML），大多数情况下由一个或多个控制器管理。这个视图也可以包含一些自定义指令，这些指令封装了一些其他的HTML和JavaScript块。多年来，Angular开发人员倾向于创建更多的指令，并将它们用作替换原始HTML标记的自定义元素的构建块。
- en: The concept of composing a view from small custom elements has become trendy
    and can be found in other popular modern frameworks such as react and polymer.
    Angular 2 builds around this concept well and will base the UI architecture on
    those building blocks. Hence from now on, we call components as building blocks
    and templates as layouts.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从小的自定义元素组合视图的概念变得流行，并且可以在其他流行的现代框架（如react和polymer）中找到。Angular 2很好地围绕这个概念构建，并将基于这些构建块构建UI架构。因此，从现在开始，我们将组件称为构建块，将模板称为布局。
- en: Defining components
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义组件
- en: Components are a clean way of organizing UI code into self-contained, reusable
    chunks, which contain their own view and logic. Components can be composed together
    to create a complex user interface. Components can optionally receive properties
    from the outside world and optionally communicate through callbacks or events.
    The business logic, structure and styling can be encapsulated inside the component
    code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 组件是将UI代码组织成自包含、可重用的块的一种清晰方式，其中包含它们自己的视图和逻辑。组件可以组合在一起创建复杂的用户界面。组件可以选择性地从外部接收属性，并可以通过回调或事件进行通信。业务逻辑、结构和样式可以封装在组件代码中。
- en: Components in Angular 2 are just directives with a view. Actually, the component
    in Angular 2 is a type of directive. We can also write a directive that doesn't
    include a template (and will not be called component) in Angular 2.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular 2中，组件只是带有视图的指令。实际上，Angular 2中的组件是一种指令。在Angular 2中，我们也可以编写不包含模板（并且不会被称为组件）的指令。
- en: 'Those directives are very similar to the directives you''re familiar with in
    Angular 1.x. The main difference is that in Angular 2.0 we think of two kinds
    of directives: attribute directives that add behavior to the elements, and structural
    directives which we named: components.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指令与您在Angular 1.x中熟悉的指令非常相似。主要区别在于，在Angular 2.0中，我们考虑两种类型的指令：为元素添加行为的属性指令，以及我们称之为组件的结构指令。
- en: Breaking the application into components
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序分解为组件
- en: The angular 2 application is a set of components. We define a component for
    every UI element, view and route. We must define a root component that we will
    use as a container for all other components. In other words, an Angular 2 application
    is a tree of components.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 2应用程序是一组组件。我们为每个UI元素、视图和路由定义一个组件。我们必须定义一个根组件，我们将用作所有其他组件的容器。换句话说，Angular
    2应用程序是一个组件树。
- en: 'The key for a well-designed, component-oriented Angular 2 application is to
    break the UI in to a tree of components successfully. For example, let''s talk
    about a simple mobile to-do list application, which looks like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 设计良好、面向组件的Angular 2应用程序的关键是成功地将UI分解为组件树。例如，让我们谈谈一个简单的移动待办事项列表应用程序，它看起来像这样：
- en: '![Breaking the application into components](../Images/image00091.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![将应用程序分解为组件](../Images/image00091.jpeg)'
- en: 'The components tree that composes this UI will look like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 构成此UI的组件树将如下所示：
- en: '![Breaking the application into components](../Images/image00092.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![将应用程序分解为组件](../Images/image00092.jpeg)'
- en: This application is made up of nine components. At the root is the **Application**
    component, which contains all the other components. Next, we find the **Form**
    component, which is built from an **Input** component and a **Button** component.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序由九个组件组成。在根部是**Application**组件，其中包含所有其他组件。接下来，我们找到**Form**组件，它由**Input**组件和**Button**组件构成。
- en: The **TaskList** component is a container for the **TaskRow** component. Each
    TaskRow comprises three components—a **CheckBox**, a **Label**, and a **Trash**
    icon.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**TaskList**组件是**TaskRow**组件的容器。每个TaskRow包括三个组件——**CheckBox**，**Label**和**Trash**图标。'
- en: There is no strict rule about how many components you should create, but a best
    practice is to break the UI to as many components as we can. The number of components
    will affect the other aspects of the application such as reusability, maintenance,
    and testing.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 关于您应该创建多少组件并没有严格的规定，但最佳实践是将UI分解为尽可能多的组件。组件的数量将影响应用程序的其他方面，如可重用性、维护和测试。
- en: Summary
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The idea of building a UI from components is not new. While in Angular 1 we
    had the ability to develop directives that act like components, it wasn't mandatory.
    In Angular 2, the whole application is a tree of components, so the ability to
    break your design into small parts and learn the how to build components is crucial.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从组件构建UI的想法并不新鲜。在Angular 1中，我们有能力开发行为像组件的指令，但这并不是强制性的。在Angular 2中，整个应用程序是一个组件树，因此将设计分解成小部分并学习如何构建组件的能力至关重要。
