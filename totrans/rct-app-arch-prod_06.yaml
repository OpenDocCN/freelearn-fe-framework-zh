- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integrating the API into the Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we went through setting up the mocked API, which we
    will be consuming in our application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be learning how to consume the API via the application.
  prefs: []
  type: TYPE_NORMAL
- en: When we say API, we mean the API backend server. We will learn how to fetch
    data from both the client and the server. For the HTTP client, we will be using
    **Axios**, and for handling fetched data, we will be using the **React Query**
    library, which allows us to handle API requests and responses in our React application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the API client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring React Query
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the API layer for the features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the API layer in the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, we will know how to make our application communicate
    with the API in a clean and organized way.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we get started, we need to set up our project. To be able to develop
    our project, we will need the following things installed on our computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js** version 16 or above and **npm** version 8 or above'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are multiple ways to install Node.js and npm. Here is a great article
    that goes into more detail: [https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js](https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js).'
  prefs: []
  type: TYPE_NORMAL
- en: '**VSCode** (optional) is currently the most popular editor/IDE for JavaScript/TypeScript,
    so we will be using it. It is open source, has great integration with TypeScript,
    and we can extend its features via extensions. It can be downloaded from [https://code.visualstudio.com/](https://code.visualstudio.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found here: [https://github.com/PacktPublishing/React-Application-Architecture-for-Production](https://github.com/PacktPublishing/React-Application-Architecture-for-Production)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The repository can be cloned locally with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the repository has been cloned, we need to install the application’s dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can provide the environment variables using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the dependencies have been installed, we need to select the right stage
    of the code base that matches this chapter. We can do that by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will prompt us with a list of stages for each chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is the sixth chapter, so we can select `chapter-06-start` if we want to
    follow along, or `chapter-06` to see the final results of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Once the chapter has been selected, all the files required to follow along with
    this chapter will appear.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the setup details, check out the `README.md` file.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the API client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the API client of our application, we will be using Axios, a very popular
    library for handling HTTP requests. It is supported in both the browser and the
    server and has an API for creating instances, intercepting requests and responses,
    canceling requests, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by creating an instance of Axios, which will include some common
    things we want to be done on every request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `src/lib/api-client.ts` file and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have created an Axios instance where we define a common base URL and
    the headers we want to include in each request.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we attached a response interceptor where we want to extract the data property
    from the response and return that to our client. We also defined the error interceptor
    where we want to log the error to the console.
  prefs: []
  type: TYPE_NORMAL
- en: Having an Axios instance configured is, however, not enough to handle requests
    in React components elegantly. We would still need to handle calling the API,
    waiting for the data to arrive, and storing it in a state. That’s where React
    Query comes into play.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring React Query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React Query is a great library for handling async data and making it available
    in React components.
  prefs: []
  type: TYPE_NORMAL
- en: Why React Query?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main reason that React Query is a great option for handling the async remote
    state is the number of things it handles for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine the following component, which loads some data from the API and displays
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This is fine if we fetch data from an API only once, but in most cases, we
    need to fetch it from many different endpoints. We can see that there is a certain
    amount of boilerplate here:'
  prefs: []
  type: TYPE_NORMAL
- en: The same `data`, `error`, and `isLoading` pieces of state need to be defined
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different pieces of state must be updated accordingly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data is thrown away as soon as we move away from the component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That’s where React Query comes in. We can update our component to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Notice how the state handling is abstracted away from the consumer. We do not
    need to worry about storing the data, or handling loading and error states; everything
    is handled by React Query. Another benefit of React Query is its caching mechanism.
    For every query, we need to provide a corresponding query key that will be used
    to store the data in the cache.
  prefs: []
  type: TYPE_NORMAL
- en: This also helps with the deduplication of requests. If we called the same query
    from multiple places, it would make sure the API requests happen only once.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring React Query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, back to our application. We already have `react-query` installed. We just
    need to configure it for our application. The configuration needs a query client,
    which we can create in `src/lib/react-query.ts` and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: React Query comes with a default configuration that we can override during the
    query client creation. A full list of options can be found in the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have created our query client, we must include it in the provider.
    Let’s head to `src/providers/app.tsx` and replace the content with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are importing and adding `QueryClientProvider`, which will make the
    query client and its configuration available for queries and mutations. Notice
    how we are passing our query client instance as the `client` prop.
  prefs: []
  type: TYPE_NORMAL
- en: We are also adding `ReactQueryDevtools`, which is a widget that allows us to
    inspect all queries. It only works in development, and that is very useful for
    debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our `react-query` setup is in place, we can start implementing the
    API layer for the features.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the API layer for the features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The API layer will be defined in the `api` folder of every feature. An API request
    can be either a query or a mutation. A query describes requests that only fetch
    data. A mutation describes an API call that mutates data on the server.
  prefs: []
  type: TYPE_NORMAL
- en: For every API request, we will have a file that includes and exports an API
    request definition function and a hook for consuming the request inside React.
    For the request definition functions, we will be using the API client we just
    created with Axios, and for the hooks, we will be using the hooks from React Query.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll learn how to implement it in action in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Jobs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the `jobs` feature, we have three API calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET /jobs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GET /jobs/:jobId`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST /jobs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get jobs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s start with the API call that fetches jobs. To define it in our application,
    let’s create the `src/features/jobs/api/get-jobs.ts` file and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, there are a few things going on:'
  prefs: []
  type: TYPE_NORMAL
- en: We are defining the type for the request options. There, we can pass `organizationId`
    to specify the organization for which we want to get the jobs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are defining the `getJobs` function, which is the request definition for
    getting jobs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are defining the `useJobs` hook by using `useQuery` from `react-query`. The
    `useQuery` hook returns many different properties, but we want to expose only
    what is needed by the application. Notice how by using the `enabled` property,
    we are telling `useQuery` to run only if `organizationId` is provided. This means
    that the query will wait for `organizationId` to exist before fetching the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since we will be using it outside the feature, let’s make it available at `src/features/jobs/index.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Get job details
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The get job request should be straightforward. Let’s create the `src/features/jobs/api/get-job.ts`
    file and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, we are defining and exporting the `getJob` function and the `useJob`
    query, which we will use in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to consume this API request outside the feature, so we have to make
    it available by re-exporting it from `src/features/jobs/index.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Create job
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we already mentioned, whenever we change something on the server, it should
    be considered a mutation. With that said, let’s create the `src/features/jobs/api/create-job.ts`
    file and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few things going on here:'
  prefs: []
  type: TYPE_NORMAL
- en: We define the `CreateJobOptions` type of the API request. It will require a
    data object that contains all the fields that are required for creating a new
    job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We define the `createJob` function, which makes the request to the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We define `UseCreateJobOptions`, which accepts an optional callback to call
    if the request succeeds. This may become useful whenever we want to show a notification,
    redirect the user, or do anything that is not directly related to the API request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are defining the `useCreateJob` hook, which uses `useMutation` from `react-query`.
    As defined in the type, it accepts an optional `onSuccess` callback that gets
    called if the mutation succeeds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create the mutation, we provide the `createJob` function as `mutationFn`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We define `onSuccess` of `useMutation`, where we invalidate all job queries
    once a new job is created. Invalidating queries means that we want to set them
    as invalid in the cache. If we need them again, we will have to fetch them from
    the API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are reducing the API surface of the `useCreateJob` hook to things that are
    used by the application, so we are just exposing `submit` and `isLoading`. We
    can always expose more things in the future if we notice we need them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We don’t have to export this request from the `index.ts` file since it is used
    only within the `jobs` feature.
  prefs: []
  type: TYPE_NORMAL
- en: Organizations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the `organizations` feature, we have one API call:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET /organizations/:organizationId`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get organization details
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s create `src/features/organizations/api/get-organization.ts` and add the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are defining a query that will fetch the organization based on the
    `organizationId` property we pass.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since this query will also be used outside the `organizations` feature, let’s
    also re-export from `src/features/organizations/index.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have defined all our API requests, we can start consuming them in
    our application.
  prefs: []
  type: TYPE_NORMAL
- en: Consuming the API in the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To be able to build the UI without the API functionality, we used test data
    on our pages. Now, we want to replace it with the real queries and mutations that
    we just made for communicating with the API.
  prefs: []
  type: TYPE_NORMAL
- en: Public organization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to replace a couple of things now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s open `src/pages/organizations/[organizationId]/index.tsx` and remove
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we must load the data from the API. We can do that by importing `getJobs`
    and `getOrganization` from corresponding `features`. Let’s add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The new API functions are a bit different, so we need to replace the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We must replace it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Public job
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The same process should be repeated for the public job page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s open `src/pages/organizations/[organizationId]/jobs/[jobId].tsx` and
    remove the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s import `getJob` and `getOrganization` from the corresponding features:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, inside `getServerSideProps`, we need to update the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Dashboard jobs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the dashboard jobs, the only thing we need to do is to update the imports
    so that we no longer load jobs from test data but from the API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s import `useJobs` from the `jobs` feature instead of the test data by
    updating the following lines in `src/pages/dashboard/jobs/index.tsx`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We will still keep `useUser` from `test-data` for now; we will replace this
    in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the newly created `useJobs` hook is a bit different than the `test-data`
    one, we need to update the way it is being used, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Dashboard job
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The job details page in the dashboard is also very straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/pages/dashboard/jobs/[jobId].tsx`, let’s remove `useJob`, which was
    imported from `test-data`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s import it from the `jobs` feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we need to update how `useJob` is consumed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Create job
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the job creation, we will need to update the form, which, when submitted,
    will create a new job.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, the form is not functional, so we need to add a couple of things.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s open `src/features/jobs/components/create-job-form/create-job-form.tsx`
    and replace the content with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a `few`things worth mentioning in this component:'
  prefs: []
  type: TYPE_NORMAL
- en: We are using the `useForm` hook to handle the form’s state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are importing and using the `useCreateJob` API hook we previously defined
    to submit the request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the mutation succeeds, the `onSuccess` callback is called.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The *create job* form requires the user to be authenticated. Since we didn’t
    implement the authentication system yet, you can use the MSW dev tools to authenticate
    with the test user to try the form submission.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to make the application communicate with its
    API. First, we defined an API client that allows us to unify the API requests.
    Then, we introduced **React Query**, a library for handling asynchronous states.
    Using it reduces boilerplate and simplifies the code base significantly.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we declared the API requests, and then we integrated them into the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to create an authentication system for
    our application where only authenticated users will be able to visit the dashboard.
  prefs: []
  type: TYPE_NORMAL
