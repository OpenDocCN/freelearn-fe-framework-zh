- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction to Angular Material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing a web application, you must decide how to create your **user
    interface** ( **UI** ). It should ideally use proper contrasting colors, have
    a consistent look and feel, be responsive, and work well on different devices
    and browsers. In short, there are many things to consider regarding UI and UX.
    Many developers consider creating the UI/UX a daunting task and turn to UI frameworks
    that do much of the heavy lifting. Some frameworks are used more than others,
    namely **Bootstrap** and **Tailwind CSS** . However, **Angular Material** , a
    framework based on Google’s **Material Design** techniques, has gained popularity.
    In this chapter, we will explain what Material Design is and how Angular Material
    uses it to provide a component UI library for the Angular framework. We will also
    learn to use various Angular Material components by applying them in our e-shop
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Material Design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Angular Material
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating UI components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The chapter contains various code samples to walk you through the concept of
    Angular Material. You can find the related source code in the `ch12` folder of
    the following GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition](https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Material Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material Design is a design language developed by Google with the following
    goals in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Develop a single underlying system, allowing a unified experience across platforms
    and device sizes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile precepts are fundamental, but touch, voice, mouse, and keyboard are all
    first-class input methods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The purpose of a design language is to have the user deal with how the UI and
    user interaction should look and feel across devices. Material Design is based
    on three main principles:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Material is the metaphor** : It is inspired by the physical world with different
    textures and mediums, such as paper and ink.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bold, graphic, and intentional** : It is guided by different print design
    methods, such as typography, grids, and color, to create an immersive experience
    for the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Motion provides meaning** : Elements are displayed on the screen by creating
    animations and interactions that reorganize the environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Material Design has much theory behind it, and proper documentation on the
    topic is available should you wish to delve further. You can find more information
    at the official documentation site: [https://material.io](https://material.io)'
  prefs: []
  type: TYPE_NORMAL
- en: A design language alone isn’t that interesting if you are not a designer. In
    the following section, we will learn how Angular developers can benefit from Material
    Design using the Angular Material library.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Angular Material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Angular Material library was developed to implement Material Design for
    the Angular framework. It is based on the following concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sprint from zero to app** : The intention is to make it easy for you, as
    an application developer, to hit the ground running. The effort needed to set
    it up should be minimal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fast and consistent** : Performance has been a significant focus point, and
    Angular Material is guaranteed to work well on all major browsers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Versatile** : Many themes should be easily customizable, and there is also
    great support for localization and internationalization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Optimized for Angular** : The fact that the Angular team has built it means
    that support for Angular is a big priority.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The library is split into the following main parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Components** : Many UI components, such as different kinds of input, buttons,
    layout, navigation, modals, and other ways to show tabular data, are in place
    to help you be successful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Themes** : The library comes with preinstalled themes, but there is also
    a theming guide if you want to create your own at [https://material.angular.io/guide/theming](https://material.angular.io/guide/theming)
    .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every part and component of the Angular Material library encapsulates web accessibility
    best techniques out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: The core of the Angular Material library is the **Angular CDK** , which is a
    collection of tools that implement similar interaction patterns unrelated to any
    presentation style. The behavior of Angular Material components has been designed
    using the Angular CDK. The Angular CDK is so abstract that you can use it to create
    custom components. You should seriously consider it if you are a UI library author.
  prefs: []
  type: TYPE_NORMAL
- en: We have covered all the basic theory about Angular Material, so let’s put it
    into practice in the following section by integrating it with an Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Angular Material
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Angular Material library is an npm package. To install it, we need to manually
    execute the `npm install` command and import several Angular artifacts into our
    Angular application. The Angular team has automated these interactions by creating
    the necessary schematics to install it using the Angular CLI.
  prefs: []
  type: TYPE_NORMAL
- en: You will need the source code of the Angular application we created in *Chapter
    11* , *Handling Application Errors* , to follow along with the rest of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `ng add` command of the Angular CLI to install Angular Material
    into our e-shop application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in the current Angular CLI workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Angular CLI will find the latest stable version of the Angular Material
    library and prompt us to download it.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we work with Angular Material 19, which is compatible with Angular
    19. If the version that prompts you is different, you should run the command `ng
    add @angular/material@19` to install the latest Angular Material 19 to your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the download is complete, it will ask us whether we want to use a prebuilt
    theme for our Angular application or a custom one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Accept the default value, **Azure/Blue,** by pressing *Enter* .
  prefs: []
  type: TYPE_NORMAL
- en: 'After selecting a theme, the Angular CLI will ask if we want to set up global
    typography styles in our application. Typography refers to how the text is arranged
    in our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We want to keep our application as simple as possible, so accept the default
    value, `No` , by pressing *Enter* .
  prefs: []
  type: TYPE_NORMAL
- en: Angular Material typography is based on Material Design guidelines and uses
    the Roboto Google Font for styling.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next question is about animations. Animation isn’t strictly required, but
    we want our application to display a beautiful animation when we click a button
    or open a modal dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Accept the default value, `Include and enable animations` , by pressing *Enter.*
  prefs: []
  type: TYPE_NORMAL
- en: 'The Angular CLI will start installing and configuring Angular Material into
    our application. It will scaffold and import all necessary artifacts so we can
    start working with Angular Material immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: '`angular.json` : It adds the theme stylesheet file in the configuration file
    of the Angular CLI workspace:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`package.json` : It adds the `@angular/cdk` and `@angular/material` npm packages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.html` : It adds the stylesheet files of the Roboto fonts and the Material
    icons in the main HTML file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`styles.css` : It adds the necessary global CSS styles for the `<html>` and
    the `<body>` tags:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`app.config.ts` : It enables animations in the application configuration file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the process is finished, we can begin adding UI components from the Angular
    Material library into our application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding UI components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The button component is one of the most used components from the Angular Material
    library. As an example, we will learn how easy it is to add a button component
    to our e-shop application. Before we can use it in our Angular application, we
    must remove all CSS styles for the native `<button>` tag that we have used so
    far:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `styles.css` file and remove the `button` , `button:hover` , and `button:disabled`
    CSS styles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `product-detail.component.css` file and remove the `--button-accent`
    variable from the `button.secondary` and `button.delete` styles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `.button-group` CSS style completely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `color` in the `button.delete` style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To start using a UI component from the Angular Material library, we must import
    its corresponding Angular component. Let’s see how this is done by adding a button
    component in the authentication component of the Angular application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `auth.component.ts` file and add the following `import` statement
    to use Angular Material buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We do not import directly from the `@angular/material` package because every
    component has a dedicated namespace. The button component can be found in the
    `@angular/material/button` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Material components can also be used by importing their respective module,
    such as `MatButtonModule` for buttons. It is recommended to import the components
    directly though, because it helps us stay consistent with modern Angular patterns.
    However, we will see that some features require too many components to import.
    In those cases, it is acceptable to import the module directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `MatButton` class in the `imports` array of the `@Component` decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `auth.component.html` file and add the `mat-button` directive in the
    `<button>` HTML elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding template, the `mat-button` directive, in essence, modifies
    the `<button>` element so that it appears and behaves as a Material Design button.
  prefs: []
  type: TYPE_NORMAL
- en: If we run the `ng serve` command and navigate to `http://localhost:4200` , we
    will notice that the button style is different than before. It looks more like
    a link, which is the default appearance of a Material button. In the following
    section, we will learn about theming and variations of the button component.
  prefs: []
  type: TYPE_NORMAL
- en: Theming UI components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Angular Material library comes with four built-in themes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure/Blue**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rose/Red**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Magenta/Violet**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cyan/Orange**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we add Angular Material to an Angular application, we can choose which
    of the preceding themes we want to apply. We can always change it by modifying
    the included CSS stylesheet file in the `angular.json` configuration file. Here’s
    an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As we saw in the preceding section, the button component is displayed as a
    link. The `mat-button` directive displays a background color only when we hover
    over the button. To set the background color permanently, we must use the `mat-flat-button`
    directive as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we know how to interact with the button component in an Angular application
    let’s learn some of its variations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-create.component.ts` file and add the following `import`
    statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `MatButton` class in the `imports` array of the `@Component` decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `product-create.component.html` file and add the `mat-raised-button`
    directive in the `<button>` HTML element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `mat-raised-button` directive will add a shadow to the button element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, λογότυπο, γραμματοσειρά, σχεδίαση  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_12_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.1: Raised button'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `product-detail.component.ts` file and repeat *steps 1* and *2* .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `product-detail.component.html` file and add the `mat-stroked-button`
    directive in the `Change` button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `mat-stroked-button` directive adds a border around the button element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει γραμματοσειρά, λογότυπο, γραφικά, λευκό  Περιγραφή που
    δημιουργήθηκε αυτόματα](img/B21418_12_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.2: Stroked button'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove the `<div>` HTML element with the `button-group` class and add the `mat-raised-button`
    directive in both `<button>` HTML elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The two buttons appear as follows when we run the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, γραμματοσειρά, λογότυπο, λευκό  Περιγραφή που
    δημιουργήθηκε αυτόματα](img/B21418_12_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.3: Product detail action buttons'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-list.component.ts` file and add the following `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the preceding imported classes in the `imports` array of the `@Component`
    decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `product-list.component.html` file and replace the anchor element
    that navigates to the product create component with the following HTML snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `mat-mini-fab` directive displays a square button with rounded corners
    and an icon indicated by the `<mat-icon>` HTML element. The text of the `<mat-icon>`
    element corresponds to the `add` icon name from the Material Design icons collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει σύμβολο, λογότυπο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B21418_12_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.4: FAB button'
  prefs: []
  type: TYPE_NORMAL
- en: Theming in Angular Material is so extensive that we can use existing CSS variables
    to create custom themes, a topic that is out of the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: To continue our journey through the land of styling with Angular Material, we
    will learn how to integrate various UI components in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating UI components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Angular Material contains a lot of UI components organized in categories at
    [https://material.angular.io/components/categories](https://material.angular.io/components/categories)
    . In this chapter, we will explore a subset of the preceding collection that can
    be grouped into the following categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Form controls** : These can be used inside an Angular form, such as autocomplete,
    input, and drop-down list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Navigation** : These provide navigation capabilities, such as a header and
    footer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layout** : These define how data is represented, such as a card or table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Popups and overlays** : These are overlay windows that display information
    and can block any user interaction until they are dismissed in any way.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following sections, we will explore each category in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Form controls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We learned in *Chapter 10* , *Collecting User Data with Forms* , that form controls
    are about collecting input data in different ways and taking further action, such
    as sending data to a backend API over HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are quite a few form controls in the Angular Material library of varying
    types, namely the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Autocomplete** : Enables the user to start typing in an input field and be
    presented with suggestions while typing. It helps to narrow down the possible
    values that the input can take.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Checkbox** : A classic checkbox representing a state either checked or unchecked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Date picker** : Allows the user to select a date in a calendar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Input** : A classic input control enhanced with meaningful animation while
    typing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Radio button** : A classic radio button enhanced with animations and transitions
    while editing to create a better user experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Select** : A drop-down control that prompts the user to select one or more
    items from a list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Slider** : Enables the user to increase or decrease a value by pulling a
    slider button to either the right or the left.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Slide toggle** : A switch the user can slide to set on or off.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chips** : A list that displays, selects, and filters items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following sections, we will examine some of these form controls in more
    detail. Let’s begin with the input component.
  prefs: []
  type: TYPE_NORMAL
- en: Input
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The input component is usually attached to an `<input>` HTML element. We can
    also add the ability to display errors in the input field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we can use the input component in our Angular application, we must remove
    all CSS styles for the native `<input>` tag that we have used so far:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `styles.css` file and remove any CSS styles referencing the `input`
    tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `input` CSS style from the `product-create.component.css` and `cart.component.css`
    files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To learn how to use the input component, we will integrate it into our application
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-create.component.ts` file and add the following `import`
    statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the preceding imported classes in the `imports` array of the `@Component`
    decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `product-create.component.html` file and replace the `<div>` tags
    of the `<input>` HTML elements as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding HTML snippet, we use the `matInput` directive to indicate that
    an `<input>` HTML element is an Angular Material input component. A form control
    in Angular Material must be enclosed in a `<mat-form-field>` element.
  prefs: []
  type: TYPE_NORMAL
- en: We have replaced all `<label>` HTML elements with `<mat-label>` elements. A
    `<mat-label>` HTML element is a label that targets a specific Angular Material
    form control.
  prefs: []
  type: TYPE_NORMAL
- en: The `<mat-error>` element displays error messages in form controls when Angular
    triggers validation errors. It is shown by default when the status of the form
    control is invalid. In all other cases, we can use an `@if` block to control when
    the `<mat-error>` element will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the global `styles.css` file and add the following CSS style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding snippet, we configure `mat-form-field` elements to take all
    the available width.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `ng` `serve` command to start the application and navigate to `http://localhost:4200/products/new`
    . Focus on the appearance of the input fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, ορθογώνιο παραλληλόγραμμο,
    γραμματοσειρά  Περιγραφή που δημιουργήθηκε αυτόματα](img/B21418_12_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.5: Input component'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding figure, the label of each form control is suffixed by an asterisk.
    The asterisk is a common indication that the form control must have a value. Angular
    Material automatically adds it by recognizing the `required` attribute on the
    `<input>` HTML element.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `cart.component.ts` file and repeat steps 1 and 2, but do not include
    the `MatError` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `cart.component.html` file and modify the contents of the `@for` block
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The remaining component of our application that contains an `<input>` HTML
    element is the product detail component. The product detail component is a special
    case of an Angular Material input because we must group it with the button that
    changes the product price:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-detail.component.ts` file and modify the `import` statement
    from the Angular Material npm package as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the preceding imported classes in the `imports` array of the `@Component`
    decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `product-detail.component.html` file and modify the `<form>` HTML
    element as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding snippet, we modified the button that changes the price so that
    it displays a pencil icon, and it is placed in line with the `<input>` HTML element.
  prefs: []
  type: TYPE_NORMAL
- en: The `mat-icon-button` directive indicates that the button will not have any
    text. Instead, it will display an icon defined by the `<mat-icon>` HTML element.
    The `matSuffix` directive positions the button inline and at the end of the `<input>`
    HTML element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the product list in the browser and select one product. The input
    for changing the product price should be the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, ορθογώνιο παραλληλόγραμμο, στιγμιότυπο οθόνης,
    γραμματοσειρά  Περιγραφή που δημιουργήθηκε αυτόματα](img/B21418_12_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.6: Input component with inline button'
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will learn how to use an Angular Material select
    component to choose a category in the product create component.
  prefs: []
  type: TYPE_NORMAL
- en: Select
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The select component works similarly to the native `<select>` HTML element.
    It displays a drop-down element with a list of options for users.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will add one in the product create component to select the category of a
    new product:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-create.component.ts` file and add the following `import`
    statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the preceding imported classes in the `imports` array of the `@Component`
    decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `product-create.component.html` file and replace the `<div>` HTML
    element that encloses the `<select>` element with the following HTML snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding snippet, we replaced the `<select>` and the `<option>` HTML
    elements with the `<mat-select>` and the `<mat-option>` elements, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to `http://localhost:4200/products/new` and click on the **Category**
    drop-down list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_12_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.7: Select component'
  prefs: []
  type: TYPE_NORMAL
- en: The product details component displays the product category as a paragraph element
    with a specific CSS class. In the following section, we will learn how to represent
    the product category with the Angular Material chips component.
  prefs: []
  type: TYPE_NORMAL
- en: Chips
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The chips component is often used to display information grouped by a specific
    property. It can also provide data filtering and selection capabilities. We can
    use chips in our application to display the category in the product details component.
  prefs: []
  type: TYPE_NORMAL
- en: Our products only have one category, but chips would make more sense if we had
    additional categories assigned to our products.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-detail.component.ts` file and add the following `import`
    statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the preceding imported classes in the `imports` array of the `@Component`
    decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `product-detail.component.html` file and replace the `<div>` HTML
    element that contains the `pill-group` class with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `<mat-chip>` HTML element indicates a chip component. Chips must always
    be enclosed using a container element. The simplest form of a chips container
    is the `<mat-chip-set>` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-detail.component.css` file and add the following CSS style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the `ng serve` command to start the application and select a product from
    the list. The category should, for example, look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει γραμματοσειρά, κείμενο, λευκό, λογότυπο  Περιγραφή που
    δημιουργήθηκε αυτόματα](img/B21418_12_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.8: Chips component'
  prefs: []
  type: TYPE_NORMAL
- en: The chips component completes our exploration of the Angular Material form controls.
    In the following section, we will get hands-on experience by styling the navigation
    layout of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are different ways of navigating in an Angular application, such as clicking
    a link or a menu item. Angular Material offers the following components for this
    type of interaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Menu** : A pop-up list where you can choose from a predefined set of options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sidenav** : A component that acts as a menu docked to the left or the right
    of the page. It can be presented as an overlay over the application while dimming
    the application content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Toolbar** : A standard toolbar that allows the user to reach commonly used
    actions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we will demonstrate how to use the toolbar component. We will
    convert the `<header>` and `<footer>` HTML elements of the main application component
    to Angular Material toolbars.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a toolbar, we will go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.component.ts` file and add the following `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the preceding imported classes in the `imports` array of the `@Component`
    decorator and remove the `RouterLinkActive` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `app.component.html` file and modify the `<header>` HTML element as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding template, we add the main application links and the authentication
    component inside a `<mat-toolbar>` element. The toolbar component consists of
    a single row indicated by the `<mat-toolbar-row>` HTML element.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `app.component.css` file and remove the CSS style for the `header`
    tag and the `menu-links` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we run the application using the `ng serve` command, we will see the new
    toolbar of our application at the top of the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![img](img/B21418_12_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.9: Application header'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, modify the `<footer>` HTML element to convert it to an Angular Material
    toolbar component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save changes, wait for the application to refresh, and observe the toolbar
    at the bottom of the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![img](img/B21418_12_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.10: Application footer'
  prefs: []
  type: TYPE_NORMAL
- en: The toolbar component is fully customizable, and we can adjust it according
    to the application’s needs. We can add icons and even create toolbars with content
    in multiple rows. Now that you know the basics of creating a simple toolbar, you
    can explore further possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will learn how to lay out content differently inside
    our application.
  prefs: []
  type: TYPE_NORMAL
- en: Layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we refer to the layout, we discuss how we place content in our templates.
    Angular Material gives us different components for this purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '**List** : Visualizes the content as a list of items. It can be enriched with
    links and icons and even multiline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grid list** : Helps us arrange the content in blocks. We only need to define
    the number of columns; the component will fill the visual space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Card** : Wraps content and adds a box shadow. We can define a header for
    it as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tabs** : Divides up the content into different tabs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stepper** : Divides up the content into wizard-like steps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Expansion panel** : Enables us to place the content in a list-like way with
    a title for each item. Items can only be expanded one at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Table** : Represents data in a tabular format with rows and columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this book, we will cover the card and table components.
  prefs: []
  type: TYPE_NORMAL
- en: Card
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will learn how to display each product in the list as a card:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product.ts` file and add an `image` property to the `Product` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `image` property is a URL that points to the product image file in the Fake
    Store API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-list.component.ts` file and add the following `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `MatCardModule` class in the `imports` array of the `@Component` decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Angular Material card component consists of many other components and directives.
    We choose to import the whole Angular module because it would not be convenient
    to import them all individually.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-list.component.html` file and replace the unordered list
    element with the following HTML snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: An Angular Material card component consists of a header, indicated by the `<mat-card-header>`
    HTML element. The header component contains a `<mat-card-title-group>` HTML element
    that aligns the card title, subtitle, and image into a single section. The card
    title indicated by the `<mat-card-title>` HTML element displays the product title.
    The card subtitle indicated by the `<mat-card-subtitle>` HTML element displays
    the product category. Finally, the product image is displayed by attaching the
    `mat-card-sm-image` directive to an `<img>` HTML element. The `sm` keyword in
    the directive indicates that we want to render a small size of the image.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Material also supports `md` and `lg` for medium and large sizes, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-list.component.css` file and add the following CSS style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the `ng serve` command and navigate to `http://localhost:4200`
    :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης  Περιγραφή που δημιουργήθηκε
    αυτόματα](img/B21418_12_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.11: Product list card representation'
  prefs: []
  type: TYPE_NORMAL
- en: You can explore more options for the card component by navigating to [https://material.angular.io/components/card/overview](https://material.angular.io/components/card/overview)
    .
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will learn how to switch the product list to a
    tabular view.
  prefs: []
  type: TYPE_NORMAL
- en: Data table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The table component from the Angular Material library enables us to display
    our data in columns and rows. To create a table, we must import the `MatTableModule`
    class from the `@angular/material/table` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular Material data table consists of many other components and directives.
    We choose to import the whole Angular module because it would not be convenient
    to import them all individually.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-list.component.ts` file and import the `CurrencyPipe` and
    the `MatTableModule` artifacts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the preceding imported classes to the `imports` array of the `@Component`
    decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following property in the `ProductListComponent` class to define
    the table column names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The name of each column matches a property from the `Product` interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-list.component.html` file and add the following snippet after
    the `@for` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: An Angular Material table is a standard `<table>` HTML element with the `mat-table`
    directive attached.
  prefs: []
  type: TYPE_NORMAL
- en: The `dataSource` property of the `mat-table` directive defines the data we want
    to display on the table. It can be any data that can be enumerated, such as an
    array. In our case, we bind it to the `products` template reference variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add an `<ng-container>` element for each column we want to display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `<ng-container>` element is a unique-purpose element that groups elements
    with similar functionality. It does not interfere with the styling of the child
    elements, nor is it rendered on the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `<ng-container>` element uses the `matColumnDef` directive to set the name
    of the specific column.
  prefs: []
  type: TYPE_NORMAL
- en: The value of the `matColumnDef` directive must match with a value from the `columnNames`
    component property; otherwise, the application will throw an error that it cannot
    find the name of the defined column.
  prefs: []
  type: TYPE_NORMAL
- en: It contains a `<th>` HTML element with a `mat-header-cell` directive that indicates
    the header of the cell and a `<td>` HTML element with a `mat-cell` directive for
    the data of the cell. The `<td>` HTML element uses the `matCellDef` directive
    to create a local template variable for the current row data that we can use later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following snippet after the `<ng-container>` elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding snippet, we define the header row of the table that displays
    column names and the actual rows that contain data.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the application, the output should be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, αριθμός, γραμματοσειρά  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_12_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.12: Table component'
  prefs: []
  type: TYPE_NORMAL
- en: 'The product list component displays the card and the table representation of
    data simultaneously. We will use the button toggle component from Angular Material
    to distinguish between them. The button toggle component toggles buttons on or
    off according to a specific condition:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-list.component.ts` file and add the following `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the preceding imported classes in the `imports` array of the `@Component`
    decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `product-list.component.html` file and add the following HTML snippet
    inside the `<div>` HTML element with the `caption` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding snippet, we use the `<mat-button-toggle-group>` element to
    create two toggle buttons side by side. The instance of the button toggle group
    is assigned to the `group` template reference variable so we can access it later.
  prefs: []
  type: TYPE_NORMAL
- en: We declare toggle buttons using the `<mat-button-toggle>` element and setting
    an appropriate `value` . The `value` property will be set when we click on either
    button. We also have an icon for each toggle button to enhance UX while users
    interact with the product list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `@if` block after the `<div>` HTML element with the `caption`
    class and move the `@for` block inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: According to the preceding snippet, the card representation of products will
    be displayed when the `value` property of the button toggle group is set to `card`
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following `@else` block and move the data table component inside it
    to display the product list in tabular format when the second toggle button is
    clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the `ng serve` command to start the application and verify that the card
    representation is initially displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης  Περιγραφή που δημιουργήθηκε
    αυτόματα](img/B21418_12_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.13: Product list'
  prefs: []
  type: TYPE_NORMAL
- en: Click the second toggle button and verify that the products are now displayed
    in tabular format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we learned how to display the product list in a tabular format.
    We also used toggle buttons to switch from the card view to the tabular one.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will learn how to use popups and overlays to provide
    additional information to the users.
  prefs: []
  type: TYPE_NORMAL
- en: Popups and overlays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are different ways to capture the user’s attention in a web application.
    One of them is to show a pop-up dialog over the content of the page and prompt
    the user to act accordingly. Another way is displaying information as a notification
    in different parts of the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular Material offers three different components for handling such cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dialog** : A modal pop-up dialog that displays itself on top of the page
    content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Badge** : A small circled indication to update the status of a UI element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Snackbar** : An information message displayed at the bottom of a page that
    is visible briefly. Its purpose is to notify the user of the result of an action,
    such as saving a form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will learn how to use the preceding components in our e-shop application,
    starting with how to create a simple modal dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a confirmation dialog
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The dialog component is quite powerful and can easily be customized and configured.
    It is an ordinary Angular component with custom directives that force it to behave
    like a dialog. To explore the capabilities of the Angular Material dialog, we
    will use a confirmation dialog in the checkout guard to notify users about remaining
    items in their shopping carts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following Angular CLI command to create a new Angular component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will create an Angular component that will host our dialog.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `checkout.component.ts` file and add the following `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Angular Material dialog component consists of many other components and
    directives. We choose to import the whole Angular module because it would not
    be convenient to import them all individually.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the preceding imported classes in the `imports` array of the `@Component`
    decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `checkout.component.html` file and replace its content with the following
    HTML template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component template contains various directives and elements that belong
    to the Angular Material dialog component. The `mat-dialog-title` directive defines
    the title of the dialog, and the `<mat-dialog-content>` is the actual content.
    The `<mat-dialog-actions>` element defines the actions the dialog can perform
    and usually wraps button elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'A dialog must be triggered to be displayed on a page. Open the `checkout.guard.ts`
    file and add the following `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inject the `MatDialog` service in the body of the `checkoutGuard` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the assignment of the `confirmation` variable as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding snippet, we use the `MatDialog` service to display the checkout
    component. The `MatDialog` service accepts the type of component class representing
    the dialog as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The `open` method of the `MatDialog` service returns an `afterClosed` observable
    property, which will notify us when the dialog closes. The observable emits any
    value that is sent back from the dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Later in the chapter, we will learn how to return a boolean value from the dialog
    component that matches the type returned by the `CanDeactivateFn` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now verify that the dialog component works as expected by executing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the application using the `ng serve` command and navigate to `http://localhost:4200`
    .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a product from the list and add it to the shopping cart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the preceding step to add more products to the cart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the shopping cart and then click the back button of the browser
    or any of the application links to leave the cart. The following dialog will be
    displayed on the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_12_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.14: Checkout dialog component'
  prefs: []
  type: TYPE_NORMAL
- en: We could improve the application’s UX further by displaying information on the
    dialog about the number of items we have added to the shopping cart. In the following
    section, we will learn how to pass data in the dialog and display the number of
    shopping cart items.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring dialogs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a real-world scenario, you will probably need to create a reusable component
    to display a dialog in an Angular project. The component may end up in an Angular
    library as a package. Therefore, you should configure the dialog component to
    accept data dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the current Angular project, we would like to display the number of products
    that we have added to the shopping cart:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `checkout.component.ts` file and modify the `import` statements as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inject `MAT_DIALOG_DATA` in the `CheckoutComponent` class in the following
    way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `MAT_DIALOG_DATA` is an injection token that enables us to pass arbitrary
    data to the dialog component. The `data` variable will contain any data we pass
    to the dialog when we call its `open` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `checkout.component.html` file and add the `data` property to the
    inner text of the `<span>` HTML element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `checkout.guard.ts` file and set the `data` property in the dialog
    configuration object, which is the second parameter of the `open` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we try to leave the cart page while running the application, we will get
    a dialog similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_12_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.15: Checkout dialog component with custom data'
  prefs: []
  type: TYPE_NORMAL
- en: The buttons of the dialog component don’t do anything specific yet. In the following
    section, we will learn how to configure them and return data to the guard.
  prefs: []
  type: TYPE_NORMAL
- en: Getting data from dialogs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Angular Material dialog module exposes the `mat-dialog-close` directive
    that we can use to configure which button will close the dialog. Open the `checkout.component.html`
    file and add the `mat-dialog-close` directive to both buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding snippet, we use the `mat-dialog-close` directive in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Without passing a value in the `Yes` button, the dialog will return `true` as
    a default value, allowing the guard to navigate away from the shopping cart page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With property binding in the `No` button, we pass `false` as a value to cancel
    the navigation from the guard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Execute the following steps to verify that the dialog behavior is correct:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `ng serve` command to start the application and navigate to `http://localhost:4200`
    .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a product from the list and add it to the cart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **My Cart** link to navigate to the shopping cart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Products** link, select **No** in the checkout dialog, and verify
    that the application stays on the shopping cart page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Products** link again, select **Yes** in the dialog, and you should
    navigate to the product list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dialogs are a great feature of Angular Material that can give your applications
    powerful capabilities. In the following section, we will explore the badge and
    snackbar components for notifying the user when a product is added to the shopping
    cart.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying user notifications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Angular Material library enforces patterns and behaviors that improve the
    application’s UX. One aspect of the application UX concerns providing notifications
    to users upon specific actions. Angular Material gives us the badge and the snackbar
    components we can use in this case.
  prefs: []
  type: TYPE_NORMAL
- en: Applying badges
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The badge component is a circle positioned on top of another element and usually
    displays a number. We will learn how to apply badges by displaying the number
    of shopping cart items in the **My Cart** application link:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.component.ts` file and add the following `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `MatBadge` class exports the badge component. The `CartService` class will
    provide us with the number of items in the shopping cart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `MatBadge` class in the `imports` array of the `@Component` decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inject the `CartService` class in the `AppComponent` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `app.component.html` file and add the `matBadge` directive to the
    `My Cart` button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding snippet, the `matBadge` directive indicates the number displayed
    in the badge. In this case, we bind it with the `length` of the `products` array
    that exists in the current shopping cart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.component.css` file and add the following CSS style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding style will add space around each application link so that buttons
    do not overlap with the badge component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `ng serve` command to start the application and add some products to
    the shopping cart. Notice that the badge icon updates its value when products
    are added to the cart; here’s an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, γραμματοσειρά, στιγμιότυπο οθόνης, λογότυπο  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_12_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.16: Badge component'
  prefs: []
  type: TYPE_NORMAL
- en: Applying a snackbar
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Another good UX pattern when we work with CRUD applications is to display a
    notification when an action has been completed. We can apply such a pattern by
    displaying a notification when a product is added to the shopping cart. We will
    use the snackbar component of the Angular Material to show the notification:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-detail.component.ts` file and add the following `import`
    statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The snackbar is not an actual Angular component like all the Angular Material
    components we have seen. It is an Angular service named `MatSnackBar` and can
    be used by importing the `MatSnackBarModule` class into our components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `MatSnackBarModule` class in the `imports` array of the `@Component`
    decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inject the `MatSnackBar` service into the `constructor` of the `ProductDetailComponent`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `addToCart` method to display a snackbar when the product is added
    to the cart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the preceding method, we use the `open` method of the `MatSnackBar` service
    to display a snackbar. The `open` method accepts three parameters: the message
    we want to display, any action we want to take when the snackbar is dismissed,
    and a configuration object. The configuration object enables us to set various
    options, such as the `duration` for which the snackbar will be visible in milliseconds.'
  prefs: []
  type: TYPE_NORMAL
- en: We do not pass a parameter for the action because we do not want to react when
    the snackbar is dismissed.
  prefs: []
  type: TYPE_NORMAL
- en: Run the `ng serve` command to start the application and select a product from
    the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure you are logged in and click the **Add to cart** button. The following
    notification message will be displayed at the bottom of the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, γραμματοσειρά, στιγμιότυπο οθόνης, ορθογώνιο
    παραλληλόγραμμο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B21418_12_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.17: Snackbar component'
  prefs: []
  type: TYPE_NORMAL
- en: The position of the snackbar can be changed from the configuration options.
    Read more at [https://material.angular.io/components/snack-bar/overview](https://material.angular.io/components/snack-bar/overview)
    .
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned to use pop-up models and notification overlays to
    enhance the application UX and provide a great workflow to our users.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the basics of the Material Design system. We put
    most of our focus on Angular Material, the Material Design implementation meant
    for Angular, and how it consists of different components. We looked at a hands-on
    explanation of how to install it, set it up, and use some of its core components
    and themes.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, you will have read this chapter and found that you now grasp Material
    Design in general and Angular Material in particular and can determine whether
    it is a good match for your next Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: Web applications must be testable to ensure they are functional and in accordance
    with the application requirements. In the next chapter, we will learn how to apply
    different testing techniques in Angular applications.
  prefs: []
  type: TYPE_NORMAL
