["```js\nnpm install xstate@latest --save\n// or\nyarn add xstate@latest --save\n```", "```js\nnpm install xstate-react@latest –-save\n// or\nyarn add xstate-react@latest –-save\n```", "```js\nimport { createMachine } from 'xstate';\nexport const userFlowMachine = createMachine({\n  id: 'userFlow',\n  initial: 'anonymous',\n  states: {\n    anonymous,\n    authenticated,\n  }\n});\n```", "```js\nimport { createMachine } from 'xstate';\nexport const userFlowMachine = createMachine({\n  id: 'userFlow',\n  initial: 'anonymous',\n  states: {\n    anonymous: {\n      on: {\n        LOGIN: { target: 'authenticated' },\n      }\n    },\n    authenticated: {\n        on: {\n            LOGOUT: { target: 'anonymous' },\n          }\n    },\n  }\n});\n```", "```js\nimport React, { createContext } from 'react';\nimport { useInterpret } from '@xstate/react';\nimport { userFlowMachine } from './machines/userFlowMachine;\nexport const GlobalStateContext = createContext({});\nexport const GlobalStateProvider = (props) => {\n  const userFlowService = useInterpret(userFlowMachine);\n  return (\n    <GlobalStateContext.Provider value={{ userFlowService }}>\n      {props.children}\n    </GlobalStateContext.Provider>\n  );\n};\n```", "```js\nimport React, { useContext } from 'react';\nimport { GlobalStateContext } from './globalState';\nimport { useActor } from '@xstate/react';\nexport const SomeComponent = (props) => {\n  const globalServices = useContext(GlobalStateContext);\n  const [state] = useActor(globalServices. userFlowService);\n    return state.matches('loggedIn') ? 'Logged In' :      'Logged Out';\n};\n```", "```js\n// src/machines/likeImagesMachine.js\nimport { createMachine } from \"xstate\";\nexport const likeImagesMachine = createMachine({\n  id: \"likeImagesMachine\",\n  context: {\n    likedImages: [\n       { Example Image Object 1},\n       { Example Image Object 2}\n       …\n       ],\n  },\n  initial: \"loading\",\n  states: {\n    loading: {},\n    ready: {},\n    error: {},\n  },\n});\n```", "```js\n// src/context.js\n[…]\nimport { useInterpret } from \"@xstate/react\";\n  import { likeImagesMachine } from \"./machines/    likeImagesMachine \";\nimport { userFlow } from \"./machines/userFlowMachine\";\nexport const GlobalStateContext = createContext({});\nexport const useXStateContext = () => {\n  const context = React.useContext(GlobalStateContext);\n  if (context === undefined) {\n    throw new Error(\n        \" useXStateContext must be used within a           GlobalStateContextProvider\"\n    );\n  }\n  return context;\n};\nexport const GlobalStateProvider = (props) => {\n  const likedImagesAppService = useInterpret(likeImagesMachine);\n  const userFlowService = useInterpret(userFlow);\n  const mergedServices = {\n    likedImagesAppService,\n    userFlowService,\n  };\n  return (\n    <GlobalStateContext.Provider value={mergedServices}>\n      {props.children}\n    </GlobalStateContext.Provider>\n  );\n};\n```", "```js\n// src/App.js\n[…]\nimport {\n  […]\n    GlobalStateProvider\n      } from \"./src/context\";\n[…]\nreturn (\n    <SafeAreaProvider>\n      <GlobalStateProvider>\n        <UserStateContext.Provider value={userLoggedIn}>\n[…]\n```", "```js\n// src/components/ListOfFavorties.js\nimport { useXStateContext } from \"../context\";\nimport { useActor } from \"@xstate/react\";\nexport const ListOfFavorites = ({ navigation }) => {\n  const globalServices = useXStateContext();\n    const [state] = useActor(globalServices.      likedImagesAppService);\n    const [imageData, updateImageData] = useState       (state.context.likedImages);\n//…\n  return (\n    //…\n      <FlatList\n        data={imageData}\n//…\n```", "```js\n// src/machines/fetchMachine.js\nimport { createMachine, assign } from \"xstate\";\nexport const fetchImagesMachine = createMachine({\n  id: \"fetchImages\",\n  initial: \"loading\",\n  context: {\n    retries: 0,\n    images: [],\n  },\n  states: {\n    loading: {\n      on: {\n        RESOLVE: \"success\",\n        REJECT: \"failure\",\n      },\n    },\n    success: {\n      type: \"final\",\n    },\n    failure: {\n      on: {\n        RETRY: {\n          target: \"loading\",\n          actions: assign({\n            retries: (context, event) => context.retries+1,\n          }),\n        },\n      },\n    },\n  },\n});\n```", "```js\n//…\nstates: {\n    loading: {\n      invoke: {\n        id: 'fetchImagesFunction',\n        src: async () => {\n          const response = await fetch(\n            requestBase + \"/john_doe/likedImages.json\"\n          );\n          const imageData = await response.json();\n          return imageData;\n        },\n        onDone: {\n          target: \"success\",\n          actions: assign((context, event) => {\n            return {\n              images: event.data,\n            };\n          }),\n        },\n        onError: {\n          target: \"failure\",\n          actions: assign({\n              error: (context, event) => \"Oops!                Something went wrong\",\n          }),\n        },\n      },\n    },\n```", "```js\n// src/machines/likeImagesMachine.js\nimport { fetchImagesMachine } from \"./fetchImagesMachine\";\nexport const likeImagesMachine  = createMachine({\n  id: \"likeImagesMachine \",\n  context: {\n    likedImages: [],\n    currentImage: null,\n  },\n  initial: \"loading\",\n  states: {\n    loading: {\n      invoke: {\n        id: \"fetchImagesMachine\",\n        src: fetchImagesMachine,\n        onDone: {\n          target: \"ready\",\n          actions: assign({\n            likedImages: (context, event) => {\n              return event.data.images;\n            },\n          }),\n        },\n      },\n    },\n//…\n```", "```js\n// src/machines/fetchImagesMachine.js\n//…\nsuccess: {\n      type: \"final\",\n      data: {\n        images: (context, event) => context.images,\n      },\n    },\n//…\n```", "```js\nexport const likeImagesMachine  = createMachine({\n  id: \"likeImagesMachine \",\n  context: {\n    likedImages: [],\n    currentImage: null,\n  },\n//…\n```", "```js\n// src/machines/likeImagesMachine\nready: {\n      on: {\n        MODAL_OPEN: {\n          actions: assign((context, event) => {\n            return {\n              currentImage: event.payload,\n            };\n          }),\n        },\n        MODAL_CLOSE: {\n          actions: assign((context, event) => {\n            return {\n              currentImage: null,\n            };\n          }),\n        },\n      },\n//…\n```", "```js\n// src/surfaces/ImageDetailsModal.js\nexport const ImageDetailsModal = ({ navigation, route }) => {\n  const globalServices = useXStateContext();\n  const { send } = globalServices.likedImagesAppService;\n  useEffect(() => {\n    send({\n      type: \"MODAL_OPEN\",\n      payload: route.params.imageItem,\n    });\n    return () => {\n      send(\"MODAL_CLOSE\", {});\n    };\n  }, []);\n```", "```js\nconst isImageLikedSelector = (state) => {\n  if (!state.context.currentImage) {\n    return;\n  }\n  const checkIfInImagesArray = state.context.likedImages.find(\n      (image) => image.itemId === state.context.currentImage.        itemId\n  );\n  return !!checkIfInImagesArray;\n};\n```", "```js\n// src/surfaces/ImageDetailsModal.js\nexport const ImageDetailsModal = ({ navigation, route }) => {\n  const globalServices = useXStateContext();\n  const { send } = globalServices.globalAppService;\n  const isImageLiked = useSelector(\n    globalServices.globalAppService,\n    isImageLikedSelector\n  );\n```", "```js\n// src/machines/likeImagesMachine.js\n//…\nready: {\n      on: {\n        LIKE: {\n          actions: assign((context, event) => {\n            const updateImageArray = event.payload.concat(context.likedImages);\n            return {\n              likedImages: updateImageArray,\n            };\n          }),\n        },\n//…\n```", "```js\n// src/surfaces/ImageDetailsModal\n//…\n<Pressable\n          onPress={() => {\n            if (!isImageLiked) {\n                send({ type: \"LIKE\", payload:                  [route.params.imageItem] });\n            }\n//…\n```", "```js\n// src/components/ListOfFavorites\nexport const ListOfFavorites = ({ navigation }) => {\n  const globalServices = useXStateContext();\n  const [state] = useActor(globalServices.globalAppService);\n  const [imageData, updateImageData] = useState([]);\n  useEffect(() => {\n    updateImageData(state.context.likedImages);\n  }, [state.context.likedImages]);\n//…\n```"]