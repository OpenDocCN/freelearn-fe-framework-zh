["```js\nimport { Observable, map } from 'rxjs';\n. . .\nexport class ExerciseSetsService {\n. . .\n  getInitialList(): Observable<ExerciseSetList> {\n    const headers = new HttpHeaders().set('X-TELEMETRY', 'true');\n    return this.httpClient\n      .get<ExerciseSetListAPI>(this.url, { headers })\n      .pipe(map((api) => api?.items));\n  }\n  refreshList(): Observable<ExerciseSetList> {\n    return this.httpClient\n      .get<ExerciseSetListAPI>(this.url)\n      .pipe(map((api) => api?.items));\n  }\n. . .\n}\n```", "```js\nexport const diaryResolver: ResolveFn<ExerciseSetList> = (route, state) => {\n  const exerciseSetsService = inject(ExerciseSetsService);\n  return exerciseSetsService.getInitialList();\n};\n```", "```js\nconst routes: Routes = [\n  {\n    path: '',\n    children: [\n      {\n        path: '',\n        component: DiaryComponent,\n        title: 'Diary',\n        resolve: { exerciseList: diaryResolver },\n      },\n. . .\n  },\n];\n```", "```js\nexport class DiaryComponent implements OnInit {\n . . .\n ngOnInit(): void {\n   this.route.data.subscribe(({ exerciseList }) => {\n     this.exerciseList = exerciseList;\n   });\n }\n newList() {\n   this.exerciseSetsService\n     .refreshList()\n     .subscribe((exerciseList) => (this.exerciseList = exerciseList));\n }\n. . .\n}\n```", "```js\nng g interface diary/interfaces/exercise\n```", "```js\nexport interface Exercise {\n  id?: string;\n  description: string;\n}\nexport type ExerciseList = Array<Exercise>;\nexport interface ExerciseListAPI {\n  hasNext: boolean;\n  items: ExerciseList;\n}\n```", "```js\nng g service diary/services/exercises\n```", "```js\nexport class ExercisesService {\n  private httpClient = inject(HttpClient);\n  private url = 'exercises';\n  getExercises(filter?: string): Observable<ExerciseList> {\n    const headers = new HttpHeaders().set('X-LOADING', 'false');\n    filter = filter ? `?filter=${filter}` : '';\n    return this.httpClient\n      .get<ExerciseListAPI>(`${this.url}${filter}`, { headers })\n      .pipe(map((api) => api?.items));\n  }\n}\n```", "```js\nexport class NewEntryFormReactiveComponent implements OnInit {\n. . .\n  private exerciseService = inject(ExercisesService);\n  public showSuggestions: boolean = false;\n  public exercises$ = this.exerciseService.getExercises();\n  selectExercise(suggestion: string) {\n    this.entryForm.get('exercise')?.setValue(suggestion);\n    this.toggleSuggestions(false);\n  }\n  toggleSuggestions(turnOn: boolean) {\n    this.showSuggestions = turnOn;\n  }\n}\n```", "```js\n. . .\n    <input\n      type=\"text\"\n      id=\"exercise\"\n      name=\"exercise\"\n      class=\"w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 shadow\"\n      formControlName=\"exercise\"\n      (focus)=\"toggleSuggestions(true)\"\n    />\n    <ul\n      class=\"absolute z-10 mt-2 w-auto rounded border border-gray-300 bg-white\"\n      *ngIf=\"showSuggestions\"\n    >\n      <li\n        *ngFor=\"let suggestion of exercises$ | async\"\n        class=\"cursor-pointer px-3 py-2 hover:bg-blue-500 hover:text-white\"\n        (click)=\"selectExercise(suggestion.description)\"\n      >\n        {{ suggestion.description }}\n      </li>\n    </ul>\n. . .\n```", "```js\n*ngFor=\"let suggestion of exercises$ | async\"\n```", "```js\nngOnInit(): void {\n  this.entryForm.valueChanges.subscribe((model) => console.log(model));\n  . . .\n}\n```", "```js\npublic exercises$ = this.entryForm.valueChanges.pipe(\n  switchMap((model) => this.exerciseService.getExercises(model?.exercise))\n);\n```", "```js\npublic exercises$ = this.entryForm.valueChanges.pipe(\n  map((model) => model?.exercise ?? ''),\n  filter((exercise) => exercise.length >= 3),\n  switchMap((exercise) => this.exerciseService.getExercises(exercise))\n);\n```", "```js\nconst DEBOUNCE_TIME = 300;\n. . .\npublic exercises$ = this.entryForm.valueChanges.pipe(\n  debounceTime(DEBOUNCE_TIME),\n  map((model) => model?.exercise ?? ''),\n  filter((exercise) => exercise.length >= 3),\n  switchMap((exercise) => this.exerciseService.getExercises(exercise))\n);\n. . .\n```", "```js\npublic exercises$ = this.entryForm.valueChanges.pipe(\n  debounceTime(DEBOUNCE_TIME),\n  map((model) => model?.exercise ?? ''),\n  filter((exercise) => exercise.length >= 3),\n  distinctUntilChanged(),\n  switchMap((exercise) => this.exerciseService.getExercises(exercise))\n);\n```"]