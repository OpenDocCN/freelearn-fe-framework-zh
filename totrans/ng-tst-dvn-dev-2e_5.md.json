["```js\n    $ npm install -g protractor\n\n    ```", "```js\n    $ protractor --version\n\n    ```", "```js\n            exports.config = {  \n              //...  \n            multiCapabilities: [{\n             'browserName': 'firefox' \n            }, { \n             'browserName': 'chrome' \n            }]\n            //... };\n    ```", "```js\n            exports.config = {  \n              //...  \n              capabilities: { \n                'browserName': 'chrome'\n                'chromeOptions': {\n                  'args': ['show-fps-counter=true']\n                }}]\n            //... };\n    ```", "```js\n            exports.config = { \n              //... \n              directConnect: true, \n              //... \n            }; \n\n    ```", "```js\nbrowser.get(url); \nbrowser.get('http://localhost:3000'); // This will navigate to\nthe localhost:3000 and will load mock module if needed \n\n```", "```js\nbrowser.getCurrentUrl(); // will return http://localhost:3000 \n\n```", "```js\nbrowser.setLocation('new-page'); // will change the url and navigate to the new url, as our current url was http://localhost:3000, now it will change and navigate to http://locahost:3000/#/new-page \n\n```", "```js\nbrowser.getTitle(); // will return the page title of our page, for us it will return us \"Angular Protractor Debug\" \n\n```", "```js\nbrowser.refresh(); // this will reload the full page and definitely will load the mocks module as well. \n\n```", "```js\nbrowser.pause(); \n\n```", "```js\nbrowser.debugger(); \n\n```", "```js\nbrowser.close(); \n\n```", "```js\nbrowser.useAllAngular2AppRoots; \n\n```", "```js\nelement.all(Locator); \nvar elementArr = element.all(by.css('.selector'));  // return the ElementFinderArray \n\n```", "```js\nelement.all(Locator).get(position); \nelementArr.get(0); // will return first element from the ElementFinderArray  \n\n```", "```js\nelement.all(Locator).all(Locator); \nelementArr.all(by.css('.childSelector')); // will return another ElementFinderArray as child elements based on child locator  \n\n```", "```js\nelement.all(Locator).count(); \nelementArr.count(); // will return the total number in the select element's array   \n\n```", "```js\nelement.all(Locator).first(); \nelementArr.first(); // will return the first element from the element's array   \n\n```", "```js\nelement.all(Locator).last(); \nelementArr.last(); // will return the last element from the element array   \n\n```", "```js\nelement.all(Locator).each(Function) { }; \nelementArr.each( function (element, index) { \n    // ......  \n}); // ... will loop through out the array elements \n\n```", "```js\nelement.all(Locator).filter(Function) { }; \nelementArr.filter( function (element, index) { \n    // ......  \n}); //... will apply filter function's action to all elements  \n\n```", "```js\nelement(Locator); \nvar elementObj = element(by.css('.selector'));  // return the ElementFinder based on locator  \n\n```", "```js\nelement(Locator).element.all(Locator); \nelementObj.element.all(by.css('.childSelector')); // will return another ElementFinderArray as child elements based on child locator  \n\n```", "```js\nelement(Locator).isPresent(); \nelementObj.isPresent(); // will return boolean if the selected element is exist or not.   \n\n```", "```js\nelement(Locator).getText(); \nvar elementObj = element(by.css('.selector'));  // return the ElementFinder based on locator  \nelementObj.getText(); // will return the contained text of that specific selected element  \n\n```", "```js\nelement.(Locator).getInnerHtml(); \nelementObj.getInnerHtml(); // will return the inner html of the selected element.  \n\n```", "```js\nelement(Locator).getAttribute('attribute'); \nelementObj.getAttribute('data'); // will return the value of data attribute of that selected element if that have that attribute \n\n```", "```js\nelement.(Locator).clear(); \nelementObj.clear(); // Guessing the elementFinder is input/textarea, and after calling this clear() it will clear the value and reset it.    \n\n```", "```js\nelement.(Locator).click(); \nelementObj.click(); // will trigger the click event as the selected element chaining it.    \n\n```", "```js\nelement.(Locator).submit(); \nelementObj.submit(); // Will trigger the submit for the form \nelement as submit() work only for form element.   \n\n```", "```js\nelement(by.css(cssSelector));  \nelement.all(by.css(cssSelector)); \n<span class=\"selector\"></span> \nelement.all(by.css('.selector'));  // return the specific DOM element/elements that will have selector class on it \n\n```", "```js\nelement(by.id(id)); \n<span id=\"selectorID\"></span>   \nelement(by.id('selectorID')); // return the specific DOM element that will have selectorID as element id on it  \n\n```", "```js\nelement(by.tagName(htmlTagName)); \nelement.all(by.tagName(htmlTagName)); \n<span data=\"myData\">Content</span> \nelement.all(by.tagName('span')); // will return the DOM element/elements of all span tag.  \n\n```", "```js\nelement(by.name(elementName)); \n<input type=\"text\" name=\"myInput\"> \nelement(by.name('myInput')); // will return the specific input field's DOM element that have name attr as myInput \n\n```", "```js\n<button name=\"myButton\">Click Me</button> \nelement(by.buttonText('Click Me')); // will return the specific button that will have Click Me as label text  \nelement(by.buttonText(textLabel)); \n\n```", "```js\nelement.(by.model); \n<span ng-model=\"userName\"></span> \nelement(by.model('userName')); // will return that specific element which have defined userName as model name    \n\n```", "```js\nelement.(by.binding); \n<span ng-bind=\"email\"></span> \nelement(by.binding('email')); // will return the element that have email as bindings with ng-bind  \n\n```", "```js\nelement.(by.locatorName(args)); \n<button ng-click=\"someAction()\">Click Me</button> \nby.addLocator('customLocator', function(args) { \n    // .....  \n}) \nelement(by. customLocator(args)); // will return the element that will match with the defined logic in the custom locator. This useful mostly when user need to select dynamic generated element.  \n\n```", "```js\n$ npm install\n\n```", "```js\n$ npm start\n\n```", "```js\n$ npm run e2e\n\n```", "```js\nexports.config = { \n    // ....  \n    jasmineNodeOpts: { \n      showColors: true, \n      defaultTimeoutInterval: 3000000 \n    }, \n    // ..... \n}; \n\n```", "```js\nexports.config = { \n    // ....  \n    specs: [ \n      'app.debug.e2e.js' \n    ], \n    // ..... \n}; \n\n```", "```js\ndescribe('AppComponent Tests', () => { \n    beforeEach(() => { \n        browser.get('/'); \n    }); \n\n    it('Test spec for debug and play', () => { \n\n    }); \n}); \n\n```", "```js\nit('Test spec for debug and play', () => { \n  browser.pause(); \n  // There is not element with the id=\"my_id\", so this will fail\n  the test \n  expect(element(by.id('my_id')).getText()).toEqual('my text') \n});  \n\n```", "```js\n$ protractor debug/debugConf.js\n\n```", "```js\n> element(by.id('my_id')).getText() \n\n```", "```js\n> element.all(by.css('li')).first().getText() \n\n```", "```js\nit('Test spec for debug and play', () => { \n  browser.debugger(); \n  // There is not element with the id=\"my_id\", so this will fail \nthe test \n  expect(element(by.id('my_id')).getText()).toEqual('my text') \n  });   \n\n```", "```js\n$ protractor debug debug/debugConf.js\n\n```"]