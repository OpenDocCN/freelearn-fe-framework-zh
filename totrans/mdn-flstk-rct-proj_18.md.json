["```js\n    $ cp -R ch13 ch14\n    ```", "```js\n    import postRoutes from './routes/posts.js'\n    ```", "```js\n    postRoutes(app)\n    ```", "```js\n    import { createContext, useState, useContext, useEffect } from 'react'\n    import { io } from 'socket.io-client'\n    import PropTypes from 'prop-types'\n    ```", "```js\n    import { useAuth } from './AuthContext.jsx'\n    ```", "```js\n    export const SocketIOContext = createContext({\n      socket: null,\n      status: 'waiting',\n      error: null,\n    })\n    ```", "```js\n    export const SocketIOContextProvider = ({ children }) => {\n      const [socket, setSocket] = useState(null)\n      const [status, setStatus] = useState('waiting')\n      const [error, setError] = useState(null)\n    ```", "```js\n      const [token] = useAuth()\n    ```", "```js\n      useEffect(() => {\n        if (token) {\n          const socket = io(import.meta.env.VITE_SOCKET_HOST, {\n            query: window.location.search.substring(1),\n            auth: { token },\n          })\n    ```", "```js\n          socket.on('connect', () => {\n            setStatus('connected')\n            setError(null)\n          })\n          socket.on('connect_error', (err) => {\n            setStatus('error')\n            setError(err)\n          })\n          socket.on('disconnect', () => setStatus('disconnected'))\n    ```", "```js\n          setSocket(socket)\n        }\n      }, [token, setSocket, setStatus, setError])\n    ```", "```js\n      return (\n        <SocketIOContext.Provider value={{ socket, status, error }}>\n          {children}\n        </SocketIOContext.Provider>\n      )\n    }\n    ```", "```js\n    SocketIOContextProvider.propTypes = {\n      children: PropTypes.element.isRequired,\n    }\n    export function useSocket() {\n      return useContext(SocketIOContext)\n    }\n    ```", "```js\n    import { io } from 'socket.io-client'\n    ```", "```js\n    import { SocketIOContextProvider } from './contexts/SocketIOContext.jsx'\n    ```", "```js\n    const socket = io(import.meta.env.VITE_SOCKET_HOST, {\n      query: window.location.search.substring(1),\n      auth: {\n        token: window.localStorage.getItem('token'),\n      },\n    })\n    socket.on('connect', async () => {\n      console.log('connected to socket.io as', socket.id)\n      socket.emit('chat.message', 'hello from client')\n      const userInfo = await socket.emitWithAck('user.info', socket.id)\n      console.log('user info', userInfo)\n    })\n    socket.on('connect_error', (err) => {\n      console.error('socket.io connect error:', err)\n    })\n    socket.on('chat.message', (message) => {\n      console.log(message)\n    })\n    ```", "```js\n    export function App() {\n      return (\n        <QueryClientProvider client={queryClient}>\n          <AuthContextProvider>\n            <SocketIOContextProvider>\n              <RouterProvider router={router} />\n            </SocketIOContextProvider>\n          </AuthContextProvider>\n        </QueryClientProvider>\n      )\n    }\n    ```", "```js\n    import { useSocket } from '../contexts/SocketIOContext.jsx'\n    ```", "```js\n    export function Status() {\n      const { status, error } = useSocket()\n    ```", "```js\n      return (\n        <div>\n          Socket status: <b>{status}</b>\n    ```", "```js\n          {error && <i> - {error.message}</i>}\n        </div>\n      )\n    }\n    ```", "```js\n    import { Header } from '../components/Header.jsx'\n    import { Status } from '../components/Status.jsx'\n    ```", "```js\n    export function Chat() {\n      return (\n        <div style={{ padding: 8 }}>\n          <Header />\n          <br />\n          <hr />\n          <br />\n          <Status />\n        </div>\n      )\n    }\n    ```", "```js\n    import { Blog } from './pages/Blog.jsx'\n    ```", "```js\n    import { Chat } from './pages/Chat.jsx'\n    ```", "```js\n    const router = createBrowserRouter([\n      {\n        path: '/',\n        element: <Chat />,\n      },\n    ```", "```js\n    $ npm run dev\n    ```", "```js\n    $ cd backend/\n    $ npm run dev\n    ```", "```js\n    import { useSocket } from '../contexts/SocketIOContext.jsx'\n    ```", "```js\n    export function Header() {\n      const [token, setToken] = useAuth()\n      const { socket } = useSocket()\n    ```", "```js\n      const handleLogout = () => {\n        socket.disconnect()\n        setToken(null)\n      }\n    ```", "```js\n            <button onClick={handleLogout}>Logout</button>\n    ```", "```js\n    import PropTypes from 'prop-types'\n    export function ChatMessage({ username, message }) {\n    ```", "```js\n      return (\n        <div>\n          <b>{username}</b>: {message}\n        </div>\n      )\n    }\n    ```", "```js\n    ChatMessage.propTypes = {\n      username: PropTypes.string.isRequired,\n      message: PropTypes.string.isRequired,\n    }\n    ```", "```js\n    import { useState } from 'react'\n    import PropTypes from 'prop-types'\n    ```", "```js\n    export function EnterMessage({ onSend }) {\n    ```", "```js\n      const [message, setMessage] = useState('')\n    ```", "```js\n      function handleSend(e) {\n        e.preventDefault()\n        onSend(message)\n        setMessage('')\n      }\n    ```", "```js\n      return (\n        <form onSubmit={handleSend}>\n          <input\n            type='text'\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n          />\n          <input type='submit' value='Send' />\n        </form>\n      )\n    }\n    ```", "```js\n    EnterMessage.propTypes = {\n      onSend: PropTypes.func.isRequired,\n    }\n    ```", "```js\n    import { useState, useEffect } from 'react'\n    ```", "```js\n    import { useSocket } from '../contexts/SocketIOContext.jsx'\n    ```", "```js\n    export function useChat() {\n      const { socket } = useSocket()\n      const [messages, setMessages] = useState([])\n    ```", "```js\n      function receiveMessage(message) {\n        setMessages((messages) => [...messages, message])\n      }\n    ```", "```js\n      useEffect(() => {\n        socket.on('chat.message', receiveMessage)\n    ```", "```js\n        return () => socket.off('chat.message', receiveMessage)\n      }, [])\n    ```", "```js\n      function sendMessage(message) {\n        socket.emit('chat.message', message)\n      }\n    ```", "```js\n      return { messages, sendMessage }\n    }\n    ```", "```js\n    import { useChat } from '../hooks/useChat.js'\n    import { EnterMessage } from './EnterMessage.jsx'\n    import { ChatMessage } from './ChatMessage.jsx'\n    ```", "```js\n    export function ChatRoom() {\n      const { messages, sendMessage } = useChat()\n    ```", "```js\n      return (\n        <div>\n          {messages.map((message, index) => (\n            <ChatMessage key={index} {...message} />\n          ))}\n    ```", "```js\n          <EnterMessage onSend={sendMessage} />\n        </div>\n      )\n    }\n    ```", "```js\n    import { ChatRoom } from '../components/ChatRoom.jsx'\n    import { useSocket } from '../contexts/SocketIOContext.jsx'\n    ```", "```js\n    export function Chat() {\n      const { status } = useSocket()\n    ```", "```js\n      return (\n        <div style={{ padding: 8 }}>\n          <Header />\n          <br />\n          <hr />\n          <br />\n          <Status />\n          <br />\n          <hr />\n          <br />\n          {status === 'connected' && <ChatRoom />}\n    ```", "```js\n      async function sendMessage(message) {\n    ```", "```js\n        if (message.startsWith('/')) {\n          const command = message.substring(1)\n          switch (command) {\n    ```", "```js\n            case 'clear':\n              setMessages([])\n              break\n    ```", "```js\n            case 'rooms': {\n              const userInfo = await socket.emitWithAck('user.info', socket.id)\n    ```", "```js\n              const rooms = userInfo.rooms.filter((room) => room !== socket.id)\n    ```", "```js\n              receiveMessage({\n                message: `You are in: ${rooms.join(', ')}`,\n              })\n              break\n            }\n    ```", "```js\n            default:\n              receiveMessage({\n                message: `Unknown command: ${command}`,\n              })\n              break\n          }\n    ```", "```js\n        } else {\n          socket.emit('chat.message', message)\n        }\n      }\n    ```", "```js\n    export function ChatMessage({ username, message }) {\n      return (\n        <div>\n          {username ? (\n            <span>\n              <b>{username}</b>: {message}\n            </span>\n          ) : (\n            <i>{message}</i>\n          )}\n        </div>\n      )\n    }\n    ```", "```js\n    ChatMessage.propTypes = {\n      username: PropTypes.string,\n    ```"]