["```js\nnpm install nativescript-dev-webpack --save-dev\n```", "```js\nBEFORE:\nimport { isIOS } from 'platform';\nimport { topmost } from 'ui/frame';\nimport * as app from 'application';\n\nAFTER:\nimport { isIOS } from 'tns-core-modules/platform';\nimport { topmost } from 'tns-core-modules/ui/frame';\nimport * as app from 'tns-core-modules/application';\n```", "```js\nnpm run build-ios-bundle\n```", "```js\nERROR in Unexpected value 'SlimSliderDirective in /path/to/TNSStudio/app/modules/player/directives/slider.directive.d.ts' declared by the module 'PlayerModule in /path/to/TNSStudio/app/modules/player/player.module.ts'. Please add a @Pipe/@Directive/@Component annotation.\n```", "```js\nnpm install nativescript-webpack-import-replace --save-dev\n```", "```js\nfunction getPlugins(platform, env) {\n    let plugins = [\n      ...\n      new ImportReplacePlugin({\n          platform: platform,\n          files: [\n              'slider.directive'\n          ]\n      }),\n      ...\n```", "```js\nERROR in Cannot determine the module for class SlimSliderDirective in /path/to/TNSStudio/app/modules/player/directives/slider.directive.android.ts! Add SlimSliderDirective to the NgModule to fix it.\nCannot determine the module for class SlimSliderDirective in /path/to/TNSStudio/app/modules/player/directives/slider.directive.ios.ts! Add SlimSliderDirective to the NgModule to fix it.\n```", "```js\nBEFORE:\n  ...\n  \"exclude\": [\n    \"node_modules\",\n    \"platforms\"\n  ],\n\nAFTER:\n  ...\n  \"files\": [\n \"./app/main.ts\"\n ]\n```", "```js\nERROR in .. lazy\nModule not found: Error: Can't resolve '/path/to/TNSStudio/app/modules/mixer/mixer.module.ngfactory.ts' in '/path/to/TNSStudio'\n @ .. lazy\n @ ../~/@angular/core/@angular/core.es5.js\n @ ./vendor.ts\n\nERROR in .. lazy\nModule not found: Error: Can't resolve '/path/to/TNSStudio/app/modules/recorder/recorder.module.ngfactory.ts' in '/path/to/TNSStudio'\n @ .. lazy\n @ ../~/@angular/core/@angular/core.es5.js\n @ ./vendor.ts\n```", "```js\n\"files\": [\n  \"./app/main.ts\",\n  \"./app/modules/mixer/mixer.module.ts\",\n \"./app/modules/recorder/recorder.module.ts\"\n ],\n```", "```js\nERROR in /path/to/TNSStudio/app/modules/recorder/components/record.component.ts (128,19): Cannot find name 'CFRunLoopGetMain'.\nERROR in /path/to/TNSStudio/app/modules/recorder/components/record.component.ts (130,9): Cannot find name 'CFRunLoopPerformBlock'.\nERROR in /path/to/TNSStudio/app/modules/recorder/components/record.component.ts (130,40): Cannot find name 'kCFRunLoopDefaultMode'.\nERROR in /path/to/TNSStudio/app/modules/recorder/components/record.component.ts (131,9): Cannot find name 'CFRunLoopWakeUp'.\n```", "```js\n\"files\": [\n  \"./app/main.ts\",\n  \"./app/modules/mixer/mixer.module.ts\",\n  \"./app/modules/recorder/recorder.module.ts\",\n  \"./node_modules/tns-platform-declarations/ios.d.ts\",\n \"./node_modules/tns-platform-declarations/android.d.ts\"\n]\n```", "```js\nERROR in Error encountered resolving symbol values statically. Calling function 'ModalDialogParams', function calls are not supported. Consider replacing the function or lambda with a reference to an exported function, resolving symbol RecorderModule in /path/to/TNSStudio/app/modules/recorder/recorder.module.ts, resolving symbol RecorderModule in /path/to/TNSStudio/app/modules/recorder/recorder.module.ts\n```", "```js\n...\n// factory functions\nexport function defaultModalParamsFactory() {\n return new ModalDialogParams({}, null);\n};\n...\n@NgModule({\n  ...\n  providers: [\n    ...PROVIDERS,\n    { \n provide: ModalDialogParams, \n useFactory: defaultModalParamsFactory \n }\n  ],\n  ...\n})\nexport class RecorderModule { }\n```", "```js\n4\\. ERROR in Entry module not found: Error: Can't resolve './app.css' in '/path/to/TNSStudio/app'\n\n5\\. ERROR in [copy-webpack-plugin] unable to locate 'app.css' at '/path/to/TNSStudio/app/app.css'\n```", "```js\nmodule.exports = env => {\n  const platform = getPlatform(env);\n\n  // Default destination inside platforms/<platform>/...\n  const path = resolve(nsWebpack.getAppPath(platform));\n\n  const entry = {\n    // Discover entry module from package.json\n    bundle: `./${nsWebpack.getEntryModule()}`,\n    // Vendor entry with third-party libraries\n    vendor: `./vendor`,\n    // Entry for stylesheet with global application styles\n    [mainSheet]: `./app.${platform}.css`,\n  };\n  ...\n\nfunction getPlugins(platform, env) {\n  ...\n  // Copy assets to out dir. Add your own globs as needed.\n  new CopyWebpackPlugin([\n    { from: \"app.\" + platform + \".css\", to: mainSheet },\n    { from: \"css/**\" },\n    { from: \"fonts/**\" },\n    { from: \"**/*.jpg\" },\n    { from: \"**/*.png\" },\n    { from: \"**/*.xml\" },\n  ], { ignore: [\"App_Resources/**\"] }),\n  ...\n```", "```js\nJS ERROR Error: No NgModule metadata found for 'AppModule'.\n```", "```js\nimport { platformNativeScript } from \"nativescript-angular/platform-static\";\nimport { AppModuleNgFactory } from \"./app.module.ngfactory\";\n\nplatformNativeScript().bootstrapModuleFactory(AppModuleNgFactory);\n```", "```js\nnew CopyWebpackPlugin([\n  { from: \"app.\" + platform + \".css\", to: mainSheet },\n  { from: \"assets/**\" },\n { from: \"audio/**\" },\n  { from: \"css/**\" },\n  { from: \"fonts/**\" },\n  { from: \"**/*.jpg\" },\n  { from: \"**/*.png\" },\n  { from: \"**/*.xml\" },\n], { ignore: [\"App_Resources/**\"] }),\n```", "```js\n{\n  \"name\": \"nativescript-webpack-import-replace\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Replace imports with .ios or .android suffix for target mobile platforms.\",\n  \"files\": [\n    \"index.js\",\n    \"lib\"\n  ],\n  \"engines\": {\n    \"node\": \">= 4.3 < 5.0.0 || >= 5.10\"\n  },\n  \"author\": {\n    \"name\": \"Nathan Walker\",\n    \"url\": \"http://github.com/NathanWalker\"\n  },\n  \"keywords\": [\n    \"webpack\",\n    \"nativescript\",\n    \"angular\"\n  ],\n  \"nativescript\": {\n    \"platforms\": {\n      \"android\": \"3.0.0\",\n      \"ios\": \"3.0.0\"\n    },\n    \"plugin\": {\n      \"nan\": \"false\",\n      \"pan\": \"false\",\n      \"core3\": \"true\",\n      \"webpack\": \"true\",\n      \"category\": \"Developer\"\n    }\n  },\n  \"homepage\": \"https://github.com/NathanWalker/nativescript-webpack-import-replace\",\n  \"repository\": \"NathanWalker/nativescript-webpack-import-replace\",\n  \"license\": \"MIT\"\n}\n```", "```js\nexports.ImportReplacePlugin = (function () {\n  function ImportReplacePlugin(options) {\n    if (!options || !options.platform) {\n      throw new Error(`Target platform must be specified!`);\n    }\n\n    this.platform = options.platform;\n    this.files = options.files;\n    if (!this.files) {\n      throw new Error(`An array of files containing just the filenames to replace with platform specific names must be specified.`);\n    }\n  }\n\n  return ImportReplacePlugin;\n})();\n```", "```js\nImportReplacePlugin.prototype.apply = function (compiler) {\n    compiler.plugin(\"make\", (compilation, callback) => {\n      const aotPlugin = getAotPlugin(compilation);\n      aotPlugin._program.getSourceFiles()\n        .forEach(sf => {\n          this.usePlatformUrl(sf)\n        });\n\n      callback();\n    })\n };\n\n  function getAotPlugin(compilation) {\n    let maybeAotPlugin = compilation._ngToolsWebpackPluginInstance;\n    if (!maybeAotPlugin) {\n      throw new Error(`This plugin must be used with the AotPlugin!`);\n    }\n    return maybeAotPlugin;\n  }\n```", "```js\nImportReplacePlugin.prototype.usePlatformUrl = function (sourceFile) {\n    this.setCurrentDirectory(sourceFile);\n    forEachChild(sourceFile, node => this.replaceImport(node));\n}\n\nImportReplacePlugin.prototype.setCurrentDirectory = function (sourceFile) {\n   this.currentDirectory = resolve(sourceFile.path, \"..\");\n}\n\nImportReplacePlugin.prototype.replaceImport = function (node) {\n    if (node.moduleSpecifier) {\n      var sourceFile = this.getSourceFileOfNode(node);\n      const sourceFileText = sourceFile.text;\n      const result = this.checkMatch(sourceFileText);\n      if (result.index > -1) {\n        var platformSuffix = \".\" + this.platform;\n        var additionLength = platformSuffix.length;\n        var escapeAndEnding = 2; // usually \"\\\";\" or \"\\';\"\n        var remainingStartIndex = result.index + (result.match.length - 1) + (platformSuffix.length - 1) - escapeAndEnding;\n\n        sourceFile.text =\n          sourceFileText.substring(0, result.index) +\n          result.match +\n          platformSuffix +\n          sourceFileText.substring(remainingStartIndex);\n\n        node.moduleSpecifier.end += additionLength;\n      }\n    }\n  }\n\n  ImportReplacePlugin.prototype.getSourceFileOfNode = function (node) {\n    while (node && node.kind !== SyntaxKind.SourceFile) {\n      node = node.parent;\n    }\n    return node;\n  }\n\n  ImportReplacePlugin.prototype.checkMatch = function (text) {\n    let match = '';\n    let index = -1;\n    this.files.forEach(name => {\n      const matchIndex = text.indexOf(name);\n      if (matchIndex > -1) {\n        match = name;\n        index = matchIndex;\n      }\n    });\n    return { match, index };\n  }\n```", "```js\nImportReplacePlugin.prototype.getSourceFileOfNode = function (node) {\n  while (node && node.kind !== SyntaxKind.SourceFile) {\n    node = node.parent;\n  }\n  return node;\n}\n```", "```js\nmodule.exports = require(\"./lib/ImportReplacePlugin\").ImportReplacePlugin;\n```"]