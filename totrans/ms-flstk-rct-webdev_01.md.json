["```js\n$ nvm list-remote\n\n```", "```js\n$ nvm install v4.0.0\n$ nvm alias default v4.0.0\n\n```", "```js\n$ npm -v\n2.14.23\n\n```", "```js\nmongod\n\n```", "```js\ntouch initData.js\n\n```", "```js\n[ \n    { \n        articleId: '987654', \n        articleTitle: 'Lorem ipsum - article one', \n        articleContent: 'Here goes the content of the article' \n    }, \n    { \n        articleId: '123456', \n        articleTitle: 'Lorem ipsum - article two', \n        articleContent: 'Sky is the limit, the content goes here.' \n    } \n]\n\n```", "```js\n$ mongo\n\n```", "```js\nshow dbs\n\n```", "```js\nWelcome to the MongoDB shell. \nFor interactive help, type \"help\". \nFor more comprehensive documentation, see \n http://docs.mongodb.org/ \nQuestions? Try the support group \n http://groups.google.com/group/mongodb-user \nServer has startup warnings: \n2016-02-25T13:31:05.896+0100 I CONTROL  [initandlisten] \n2016-02-25T13:31:05.896+0100 I CONTROL  [initandlisten] ** WARNING: soft rlimits too low. Number of files is 256, should be at least 1000 \n> show dbs \nlocal  0.078GB \n>\n\n```", "```js\nmongoimport --db local --collection articles --jsonArray initData.js --host=127.0.0.1\n\n```", "```js\nconnected to: 127.0.0.1\nimported 2 documents\n\n```", "```js\nnpm init --yes\n\n```", "```js\nmkdir server\ncd server\ntouch index.js\n\n```", "```js\n// babel-core and babel-polyfill to be installed later in that  \n//chapter \nrequire('babel-core/register'); \nrequire('babel-polyfill'); \nrequire('./server');\n\n```", "```js\nnpm i express@4.13.4  cors@2.7.1 body-parser@1.15.0--save\n\n```", "```js\nnpm i --save-dev babel@6.5.2 \nnpm i --save-dev babel-core@6.6.5 \nnpm i --save-dev babel-polyfill@6.6.1 \nnpm i --save-dev babel-loader@6.2.4 \nnpm i --save-dev babel-preset-es2015@6.6.0 \nnpm i --save-dev babel-preset-react@6.5.0 \nnpm i --save-dev babel-preset-stage-0@6.5.0\n\n```", "```js\n$ [[[you are in the main project's directory]]] \n$ touch .babelrc \n\n```", "```js\n{ \n'presets': [ \n'es2015', \n'react', \n'stage-0' \n  ] \n}\n\n```", "```js\n&boxvr;&boxh;&boxh; node_modules \n&boxv;   &boxvr;&boxh;&boxh; *** \n&boxvr;&boxh;&boxh; initData.js \n&boxvr;&boxh;&boxh; package.json \n&boxur;&boxh;&boxh; server \n    &boxur;&boxh;&boxh; index.js\n\n```", "```js\ntouch server.js\n\n```", "```js\nimport http from 'http'; \nimport express from 'express'; \nimport cors from 'cors'; \nimport bodyParser from 'body-parser'; \n\nconst app = express(); \napp.server = http.createServer(app); \n\n// CORS - 3rd party middleware \napp.use(cors()); \n\n// This is required by falcor-express middleware  \n//to work correctly with falcor-browser \napp.use(bodyParser.json({extended: false})); \n\napp.get('/', (req, res) => res.send('Publishing App Initial Application!')); \n\napp.server.listen(process.env.PORT || 3000); \nconsole.log(&grave;Started on port ${app.server.address().port}&grave;); \nexport default app;\n\n```", "```js\nnpm i mongoose@4.4.5 --save\n\n```", "```js\nimport http from 'http'; \nimport express from 'express'; \nimport cors from 'cors'; \nimport bodyParser from 'body-parser'; \nimport mongoose from 'mongoose'; \n\nmongoose.connect('mongodb://localhost/local'); \n\nconst articleSchema = { \n    articleTitle:String, \n    articleContent:String \n}; \n\nconst Article = mongoose.model('Article', articleSchema,  'articles');\nconst app = express(); \napp.server = http.createServer(app); \n\n// CORS - 3rd party middleware \napp.use(cors()); \n\n// This is required by falcor-express middleware to work correctly  \n//with falcor-browser \napp.use(bodyParser.json({extended: false})); \n\napp.use(express.static('dist')); \n\napp.get('/', (req, res) => {  \n    Article.find( (err, articlesDocs) => { \n      const ourArticles = articlesDocs.map((articleItem) => { \n        return &grave;<h2>${articleItem.articleTitle}</h2>            \n        ${articleItem.articleCon tent}&grave;; \n      }).join('<br/>'); \n\n      res.send(&grave;<h1>Publishing App Initial Application!</h1>        \n      ${ourArticles}&grave;); \n    }); \n}); \n\napp.server.listen(process.env.PORT || 3000); \nconsole.log(&grave;Started on port ${app.server.address().port}&grave;); \nexport default app;\n\n```", "```js\nmongod\n\n```", "```js\n\"devDependencies\": { \n\"babel\": \"6.5.2\", \n\"babel-core\": \"6.6.5\", \n\"babel-loader\": \"6.2.4\", \n\"babel-polyfill\": \"6.6.1\", \n\"babel-preset-es2015\": \"6.6.0\", \n\"babel-preset-react\": \"6.5.0\", \n\"babel-preset-stage-0\": \"6.5.0\" \n  }\n\n```", "```js\n\"dependencies\": { \n\"body-parser\": \"1.15.0\", \n\"cors\": \"2.7.1\", \n\"express\": \"4.13.4\", \n\"mongoose\": \"4.4.5\" \n  }\n\n```", "```js\nnode server/index.js \n\n```", "```js\n$ node server/index.js\nStarted on port 3000\n\n```", "```js\n{ \n    type: 'ADD_ARTICLE', \n    payload: '_____HERE_GOES_INFORMATION_ABOUT_THE_CHANGE_____' \n}\n\n```", "```js\nmkdir src \ncd src \nmkdir reducers \ncd reducers \ntouch article.js \n\n```", "```js\nconst articleMock = { \n'987654': { \n        articleTitle: 'Lorem ipsum - article one', \n        articleContent: 'Here goes the content of the article' \n    }, \n'123456': { \n        articleTitle: 'Lorem ipsum - article two', \n        articleContent: 'Sky is the limit, the content goes here.' \n    } \n}; \n\nconst article = (state = articleMock, action) => { \n    switch (action.type) { \n        case 'RETURN_ALL_ARTICLES': \n            return Object.assign({}, state); \n        default: \n            return state; \n    } \n} \nexport default article;\n\n```", "```js\npwd \n/Users/przeor/Desktop/React-Convention-Book/src/reducers \ncd ../.. \nmkdir dist \ncd dist \ntouch index.html \n\n```", "```js\n<!doctype html> \n<html lang=\"en\"> \n<head> \n<title>Publishing App</title> \n<meta charset=\"utf-8\"> \n\n</head> \n<body> \n<div id=\"publishingAppRoot\"></div> \n\n<script src=\"img/app.js\"></script> \n</body> \n</html>\n\n```", "```js\nnpm i --save-dev webpack@1.12.14 webpack-dev-server@1.14.1 \n\n```", "```js\ntouch webpack.config.js\n\n```", "```js\nmodule.exports = { \n    entry: ['babel-polyfill', './src/app.js'], \n    output: { \n        path: './dist', \n        filename: 'app.js', \n        publicPath: '/' \n    }, \n    devServer: { \n        inline: true, \n        port: 3000, \n        contentBase: './dist' \n    }, \n    module: { \n        loaders: [ \n            { \n                test: /.js$/, \n                exclude: /(node_modules|bower_components)/, \n                loader: 'babel', \n        query: { \n                    presets: ['es2015', 'stage-0', 'react'] \n                } \n            } \n        ] \n    } \n}\n\n```", "```js\nnpm i --save react@0.14.7 react-dom@0.14.7 react-redux@4.4.0 redux@3.3.1\n\n```", "```js\n\"scripts\": { \n\"dev\": \"webpack-dev-server\" \n  },\n\n```", "```js\n01{ \n\"name\": \"project\", \n\"version\": \"1.0.0\", \n\"description\": \"\", \n\"scripts\": { \n\"dev\": \"webpack-dev-server\" \n  }, \n\"dependencies\": { \n\"body-parser\": \"1.15.0\", \n\"cors\": \"2.7.1\", \n\"express\": \"4.13.4\", \n\"mongoose\": \"4.4.5\", \n\"react\": \"0.14.7\", \n\"react-dom\": \"0.14.7\", \n\"react-redux\": \"4.4.0\", \n\"redux\": \"3.3.1\" \n  }, \n\"devDependencies\": { \n\"babel\": \"6.5.2\", \n\"babel-core\": \"6.6.5\", \n\"babel-loader\": \"6.2.4\", \n\"babel-polyfill\": \"6.6.1\", \n\"babel-preset-es2015\": \"6.6.0\", \n\"babel-preset-react\": \"6.5.0\", \n\"babel-preset-stage-0\": \"6.5.0\", \n\"webpack\": \"1.12.14\", \n\"webpack-dev-server\": \"1.14.1\" \n  } \n}\n\n```", "```js\n//[[your are in the main directory of the project]] cd src\ntouch app.js\n\n```", "```js\nimport React from 'react'; \nimport { render } from 'react-dom'; \nimport { Provider } from 'react-redux'; \nimport { createStore } from 'redux'; \nimport article from './reducers/article'; \nimport PublishingApp from './layouts/PublishingApp'; \n\nconst store = createStore(article); \n\nrender( \n<Provider store={store}> \n<PublishingApp /> \n</Provider>, \n    document.getElementById('publishingAppRoot') \n);\n\n```", "```js\n<Provider store>\n\n```", "```js\nconnect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\n\n```", "```js\nstore.getState();\n\n```", "```js\nstore.dispatch({ type: 'RETURN_ALL_ARTICLES' });\n\n```", "```js\nstore.subscribe(() => { \n\n});\n\n```", "```js\n&boxvr;&boxh;&boxh; dist \n&boxv;   &boxur;&boxh;&boxh; index.html \n&boxvr;&boxh;&boxh; initData.js \n&boxvr;&boxh;&boxh; node_modules \n&boxv;   &boxvr;&boxh;&boxh; ********** (A LOT OF LIBRARIES HERE) \n&boxvr;&boxh;&boxh; package.json \n&boxvr;&boxh;&boxh; server \n&boxv;   &boxvr;&boxh;&boxh; index.js \n&boxv;   &boxur;&boxh;&boxh; server.js \n&boxvr;&boxh;&boxh; src \n&boxv;   &boxvr;&boxh;&boxh; app.js \n&boxv;   &boxur;&boxh;&boxh; reducers \n&boxv;       &boxur;&boxh;&boxh; article.js \n&boxur;&boxh;&boxh; webpack.config.js\n\n```", "```js\npwd\n/Users/przeor/Desktop/React-Convention-Book/src\nmkdir layouts\ncd layouts\ntouch PublishingApp.js\n\n```", "```js\nimport React from 'react'; \nimport { connect } from 'react-redux'; \n\nconst mapStateToProps = (state) => ({ \n  ...state \n}); \n\nconst mapDispatchToProps = (dispatch) => ({ \n}); \n\nclass PublishingApp extends React.Component { \n  constructor(props) { \n    super(props); \n  } \n  render () { \n    console.log(this.props);     \n    return ( \n<div> \n          Our publishing app \n</div> \n    ); \n  } \n} \nexport default connect(mapStateToProps, mapDispatchToProps)(PublishingApp);\n\n```", "```js\nconst mapStateToProps = (state) => ({ \n  ...state \n});\n\n```", "```js\nconst articleMock = { \n'987654': { \n        articleTitle: 'Lorem ipsum - article one', \n        articleContent: 'Here goes the content of the article' \n    }, \n\"123456\": { \n        articleTitle: 'Lorem ipsum - article two', \n        articleContent: 'Sky is the limit, the content goes here.' \n    } \n};\n\n```", "```js\n render () { \n    let articlesJSX = []; \n\n    for(let articleKey in this.props) { \n        const articleDetails = this.props[articleKey]; \n        const currentArticleJSX = ( \n          <div key={articleKey}> \n          <h2>{articleDetails.articleTitle}</h2> \n          <h3>{articleDetails.articleContent}</h3> \n          </div>); \n\n        articlesJSX.push(currentArticleJSX); \n    } \n\n    return ( \n      <div> \n      <h1>Our publishing app</h1> \n          {articlesJSX} \n      </div> \n    ); \n  }\n\nfor(let articleKey in this.props) over the article Mock object (passed from the reducer's state in this.props) and creating an array of articles (in JSX) with articlesJSX.push(currentArticleJSX);. After it is created, then we will have added the articlesJSX into the return statement:\n```", "```js\n<div> \n<h1>Our publishing app</h1> \n          {articlesJSX} \n</div>\n\n```", "```js\nnpm run dev\n\n```", "```js\n        { \n            id: '92', \n            title: 'example title', \n            content: 'example content' \n        }\n\n```", "```js\npwd \n/Users/przeor/Desktop/React-Convention-Book \nnpm i --save falcor@0.1\\. \n16 falcor-http-datasource@0.1.3 \n\n```", "```js\ncd src\ntouch falcorModel.js\n\n```", "```js\nimport falcor from 'falcor';  \nimport FalcorDataSource from 'falcor-http-datasource'; \n\nlet cache = { \n  articles: [ \n    { \n        id: 987654, \n        articleTitle: 'Lorem ipsum - article one', \n        articleContent: 'Here goes the content of the article' \n    }, \n    { \n        id: 123456, \n        articleTitle: 'Lorem ipsum - article two from backend', \n        articleContent: 'Sky is the limit, the content goes here.' \n    } \n  ] \n}; \n\nconst model = new falcor.Model({ \n'cache': cache \n}); \nexport default model;\n\n```", "```js\nimport falcorModel from '../falcorModel.js';\n\n```", "```js\nclass PublishingApp extends React.Component { \n  constructor(props) { \n    super(props); \n  } \n\n  componentWillMount() { \n    this._fetch(); \n  } \n\n  async _fetch() { \n    const articlesLength = await falcorModel. \n      getValue('articles.length'). \n      then((length) => length ); \n\n    const articles = await falcorModel. \n      get(['articles', {from: 0, to: articlesLength-1},  \n      ['id','articleTitle', 'articleContent']])  \n      .then((articlesResponse) => articlesResponse.json.articles); \n  } \n  // below here are next methods o the PublishingApp\n\n```", "```js\n        const articlesLength = await falcorModel. \n          getValue('articles.length'). \n          then( (length) =>  length );\n\n```", "```js\n        let articles = await falcorModel. \n          get(['articles', {from: 0, to: articlesLength-1},\n          ['id','articleTitle', 'articleContent']]).  \n          then( (articlesResponse) => articlesResponse.json.articles);\n\n```", "```js\nfalcorModel.get( \n['articles', {from: 0, to: articlesLength-1}, ['id','articleTitle', 'articleContent']] \n)\n\n```", "```js\n{ \n  articles: [ \n    { \n        id: 987654, \n        articleTitle: 'Lorem ipsum - article one', \n        articleContent: 'Here goes the content of the article' \n    }, \n    { \n        id: 123456, \n        articleTitle: 'Lorem ipsum - article two from backend', \n        articleContent: 'Sky is the limit, the content goes here.' \n    } \n  ] \n}\n\n```", "```js\n        ['articles']\n\n```", "```js\n        ['articles', {from: 0, to: articlesLength-1}]\n\n```", "```js\n        ['articles', {from: 0, to: articlesLength-1},   \n        ['id','articleTitle', 'articleContent']]\n\n```", "```js\npwd \n$ /Users/przeor/Desktop/React-Convention-Book \ncd src \nmkdir actions \ncd actions \ntouch article.js \n\n```", "```js\nexport default { \n  articlesList: (response) => { \n    return { \n      type: 'ARTICLES_LIST_ADD', \n      payload: { response: response } \n    } \n  } \n}\n\n```", "```js\nimport {bindActionCreators} from 'redux'; \nimport articleActions from '../actions/article.js';\n\n```", "```js\nconst mapDispatchToProps = (dispatch) => ({ \n});\n\n```", "```js\nconst mapDispatchToProps = (dispatch) => ({ \n  articleActions: bindActionCreators(articleActions, dispatch) \n});\n\n```", "```js\nthis.props.articleActions.articlesList(articles);\n\n```", "```js\n async _fetch() { \n    const articlesLength = await falcorModel. \n      getValue('articles.length'). \n      then( (length) => length); \n\n    let articles = await falcorModel. \n      get(['articles', {from: 0, to: articlesLength-1},  \n      ['id','articleTitle', 'articleContent']]).  \n      then( (articlesResponse) => articlesResponse.json.articles); \n\n    this.props.articleActions.articlesList(articles); \n  }\n\n```", "```js\n componentWillMount() { \n    this._fetch(); \n  }\n\n```", "```js\nconst article = (state = {}, action) => { \n    switch (action.type) { \n        case 'RETURN_ALL_ARTICLES': \n            return Object.assign({}, state); \n        case 'ARTICLES_LIST_ADD': \n            return Object.assign({}, action.payload.response); \n        default: \n            return state; \n    } \n} \nexport default article\n\n```", "```js\n   case 'ARTICLES_LIST_ADD': \n        let articlesList = action.payload.response; \n        return Object.assign({}, articlesList);\n\n```", "```js\n\"scripts\": { \n  \"dev\": \"webpack-dev-server\", \n  \"start\": \"npm run webpack; node server\", \n  \"webpack\": \"webpack --config ./webpack.config.js\" \n},\n\n```", "```js\nnpm i --save falcor-express@0.1.2 falcor-router@0.2.12\n\n```", "```js\n        import falcor from 'falcor'; \n        import falcorExpress from 'falcor-express';\n\n```", "```js\n        app.use(bodyParser.json({extended: false})); \n        app.use(express.static('dist'));\n\n```", "```js\n        app.use(bodyParser.json({extended: false})); \n\n        let cache = { \n          articles: [ \n            { \n                id: 987654, \n                articleTitle: 'Lorem ipsum - article one', \n                articleContent: 'Here goes the content of the article' \n            }, \n            { \n                id: 123456, \n                articleTitle: 'Lorem ipsum - article two from          \n                backend', \n                articleContent: 'Sky is the limit, the content goes          \n                here.' \n            } \n          ] \n        }; \n\n        var model = new falcor.Model({ \n          cache: cache \n        }); \n\n        app.use('/model.json', falcorExpress.dataSourceRoute((req,               \n        res) => { \n            return model.asDataSource(); \n        })); \n        app.use(express.static('dist'));\n\n```", "```js\n        import falcor from 'falcor'; \n        import FalcorDataSource from 'falcor-http-datasource'; \n\n        let cache = { \n          articles: [ \n          { \n            id: 987654, \n            articleTitle: 'Lorem ipsum - article one', \n            articleContent: 'Here goes the content of the article' \n          }, \n          { \n            id: 123456, \n            articleTitle: 'Lorem ipsum - article two from backend', \n            articleContent: 'Sky is the limit, the content goes here.' \n          } \n         ] \n        }; \n\n        const model = new falcor.Model({ \n        'cache': cache \n        }); \n\n        export default model;\n\n```", "```js\n        import falcor from 'falcor'; \n        import FalcorDataSource from 'falcor-http-datasource'; \n\n        const model = new falcor.Model({ \n          source: new FalcorDataSource('/model.json') \n        }); \n\n        export default model;\n\n```", "```js\n npm start\n\n```", "```js\nhttp://localhost:3000/model.json?paths=[[\"articles\", {\"from\":0,\"to\":1},   \n[\"articleContent\",\"articleTitle\",\"id\"]]]&method=get.\n\n```", "```js\n$ pwd \n/Users/przeor/Desktop/React-Convention-Book \n$ cd server \n$ touch routes.js \n\n```", "```js\nconst PublishingAppRoutes = [{ \n  route: 'articles.length', \n  get: () => { \n    const articlesCountInDB = 2; // hardcoded for example \n    return { \n      path: ['articles', 'length'], \n      value: articlesCountInDB \n    }; \n  } \n}]; \nexport default PublishingAppRoutes;\n\n```", "```js\n // location of that code snippet: src/layouts/PublishingApp.js \n const articlesLength = await falcorModel. \n    getValue('articles.length'). \n    then((length) => length);\n\n```", "```js\n{ \n  route: 'articles[{integers}][\"id\",\"articleTitle\",\"articleContent\"]', \n  get: (pathSet) => { \n    const articlesIndex = pathSet[1]; \n    const articlesArrayFromDB = [{ \n    'articleId': '987654', \n    'articleTitle': 'BACKEND Lorem ipsum - article one', \n    'articleContent': 'BACKEND Here goes the content of the article' \n    }, { \n    'articleId': '123456', \n    'articleTitle': 'BACKEND Lorem ipsum - article two', \n    'articleContent': 'BACKEND Sky is the limit, the content goes here.' \n    }]; // That are our mocked articles from MongoDB \n\n    let results = []; \n    articlesIndex.forEach((index) => { \n      const singleArticleObject = articlesArrayFromDB[index]; \n      const falcorSingleArticleResult = { \n        path: ['articles', index], \n        value: singleArticleObject \n      }; \n      results.push(falcorSingleArticleResult); \n    }); \n\n    return results; \n  } \n}\n\n```", "```js\n[  \n'articles', \n  [ 0, 1 ], \n  [ 'articleContent', 'articleTitle', 'id' ]  \n]\n\n```", "```js\nlet results = [];\n\n```", "```js\narticlesIndex.forEach((index) => { \n   const singleArticleObject = articlesArrayFromDB[index]; \n   const falcorSingleArticleResult = { \n     path: ['articles', index], \n     value: singleArticleObject \n   }; \n   results.push(falcorSingleArticleResult); \n });\n\n{from: 0, to: articlesLength-1} in PublishingApp.js?). Based on the indexes ([0, 1]) we fetch mocked data via const singleArticleObject = articlesArrayFromDB[index];. Later we put into the path and index (path: ['articles', index],) so Falcor knows to what path in our JSON graph object, the value singleArticleObject belongs to.\n```", "```js\nconsole.info(results) \n return results;\n\n```", "```js\n[{ \n  path: ['articles', 0], \n  value: { \n    articleId: '987654', \n    articleTitle: 'BACKEND Lorem ipsum - article one', \n    articleContent: 'BACKEND Here goes the content of the article' \n  } \n}, { \n  path: ['articles', 1], \n  value: { \n    articleId: '123456', \n    articleTitle: 'BACKEND Lorem ipsum - article two', \n    articleContent: 'BACKEND Sky is the limit, the content goes here.' \n  } \n}]\n\n```", "```js\nimport falcorRouter from 'falcor-router'; \nimport routes from './routes.js';\n\n```", "```js\n// This is old code, remove it and replace with new \napp.use('/model.json', falcorExpress.dataSourceRoute((req, res) =>  { \n  return model.asDataSource(); \n}));\n\n```", "```js\napp.use('/model.json', falcorExpress.dataSourceRoute((req, res) => { \n return new falcorRouter(routes); \n}));\n\n```", "```js\nnpm start\n\n```", "```js\n// this goes to server/routes.js \nimport mongoose from 'mongoose'; \n\nmongoose.connect('mongodb://localhost/local'); \n\nconst articleSchema = { \n  articleTitle:String, \n  articleContent:String \n}; \nconst Article = mongoose.model('Article', articleSchema, 'articles');\n\n```", "```js\n route: 'articles.length', \n    get: () => { \n    return Article.count({}, (err, count) => count) \n    .then ((articlesCountInDB) => { \n      return { \n        path: ['articles', 'length'], \n        value: articlesCountInDB \n      } \n    }) \n  }\n\n```", "```js\n{ \n  route: 'articles[{integers}][\"id\",\"articleTitle\",\"articleContent\"]', \n  get: (pathSet) => { \n    const articlesIndex = pathSet[1]; \n\n    return Article.find({}, (err, articlesDocs) => articlesDocs) \n    .then ((articlesArrayFromDB) => { \n      let results = []; \n      articlesIndex.forEach((index) => { \n        const singleArticleObject =          \n        articlesArrayFromDB[index].toObject(); \n        const falcorSingleArticleResult = { \n          path: ['articles', index], \n          value: singleArticleObject \n        }; \n        results.push(falcorSingleArticleResult); \n      }); \n      return results; \n    }) \n  } \n}\n\n```", "```js\nimport mongoose from 'mongoose'; \n\nmongoose.connect('mongodb://localhost/local'); \n\nconst articleSchema = { \n  articleTitle:String, \n  articleContent:String \n}; \n\nconst Article = mongoose.model('Article', articleSchema, 'articles'); \n\nconst PublishingAppRoutes = [ \n  { \n    route: 'articles.length', \n      get: () =>  Article.count({}, (err, count) => count) \n        .then ((articlesCountInDB) => { \n          return { \n            path: ['articles', 'length'], \n            value: articlesCountInDB \n          }; \n      }) \n  }, \n  { \n    route: 'articles[{integers}]  \n    [\"id\",\"articleTitle\",\"articleContent\"]', \n    get: (pathSet) => { \n      const articlesIndex = pathSet[1]; \n\n      return Article.find({}, (err, articlesDocs) =>         \n      articlesDocs); \n       .then ((articlesArrayFromDB) => { \n          let results = []; \n\n          articlesIndex.forEach((index) => { \n            const singleArticleObject =              \n            articlesArrayFromDB[index].toObject(); \n            const falcorSingleArticleResult = { \n              path: ['articles', index], \n              value: singleArticleObject \n            }; \n\n            results.push(falcorSingleArticleResult); \n          }); \n\n          return results; \n        }) \n      } \n  } \n]; \n\nexport default PublishingAppRoutes;\n\n```", "```js\n{ \n\"name\": \"project\", \n\"version\": \"1.0.0\", \n\"scripts\": { \n\"dev\": \"webpack-dev-server\", \n\"start\": \"npm run webpack; node server\", \n\"webpack\": \"webpack --config ./webpack.config.js\" \n  }, \n\"dependencies\": { \n\"body-parser\": \"^1.15.0\", \n\"cors\": \"^2.7.1\", \n\"express\": \"^4.13.4\", \n\"falcor\": \"^0.1.16\", \n\"falcor-express\": \"^0.1.2\", \n\"falcor-http-datasource\": \"^0.1.3\", \n\"falcor-router\": \"0.2.12\", \n\"mongoose\": \"4.4.5\", \n\"react\": \"^0.14.7\", \n\"react-dom\": \"^0.14.7\", \n\"react-redux\": \"^4.4.0\", \n\"redux\": \"^3.3.1\" \n  }, \n\"devDependencies\": { \n\"babel\": \"^6.5.2\", \n\"babel-core\": \"^6.6.5\", \n\"babel-loader\": \"^6.2.4\", \n\"babel-polyfill\": \"^6.6.1\", \n\"babel-preset-es2015\": \"^6.6.0\", \n\"babel-preset-react\": \"^6.5.0\", \n\"babel-preset-stage-0\": \"^6.5.0\", \n\"webpack\": \"^1.12.14\", \n\"webpack-dev-server\": \"^1.14.1\" \n  } \n}\n\n```"]