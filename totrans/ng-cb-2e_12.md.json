["```js\n    npm run serve ng-on-push-strategy \n    ```", "```js\n    cd start && nx g s services/logs --project ng-on-push-strategy \n    ```", "```js\n    import { Injectable } from '@angular/core';\n\n    @Injectable({\n      providedIn: 'root'\n    })\n    export class LogsService {\n      logs: Record<string, number> = {}\n\n      updateLogEntry(email: string) {\n        if (this.logs[email] === undefined) {\n          this.logs = {\n            ...this.logs,\n            [email]: 1\n          }\n        } else {\n          this.logs = {\n            ...this.logs,\n            [email]: this.logs[email] + 1\n          }\n        }\n      }\n    } \n    ```", "```js\n    ...\n    **import** **{** **LogsService** **}** **from****'../../services/logs.service'****;**\n    @Component({...})\n    export class UserCardComponent {\n      ...\n      randomizationCount = inject(RANDOMIZATION_COUNT);\n      **logsService =** **inject****(****LogsService****);**\n    **get****log****() {**\n    **return****this****.****logsService****.****logs****[****this****.****user****.****email****] ??** **0****;**\n    **}**\n    get randomColor() {\n        **this****.****logsService****.****updateLogEntry****(****this****.****user****.****email****);**\n        ...\n      }\n    } \n    ```", "```js\n    <div [style.backgroundColor]=\"randomColor\"...>\n    <img ...>\n    <div class=\"card-body flex-1\">...</div>\n    **<****div****class****=****\"p-4 bg-slate-900 text-green-300 rounded-md h-fit\"****>**\n    **<****div****>**\n    **Color Generation Count:**\n    **</****div****>**\n    **<****pre****>****{{log}}****</****pre****>**\n    **</****div****>**\n    </div> \n    ```", "```js\n    import { **ChangeDetectionStrategy**, Component, Input, inject } from '@angular/core';\n    ...\n    @Component({\n      ...,\n      styleUrls: ['./user-card.component.scss'],\n      **changeDetection****:** **ChangeDetectionStrategy****.****OnPush**\n    })\n    ... \n    ```", "```js\n    npm run serve ng-cd-ref \n    ```", "```js\n    cd start && nx g s services/logs --project ng-cd-ref \n    ```", "```js\n    import { Injectable } from '@angular/core';\n    @Injectable({\n      providedIn: 'root'\n    })\n    export class LogsService {\n      logs: Record<string, number> = {}\n      updateLogEntry(email: string) {\n        if (this.logs[email] === undefined) {\n          this.logs = {\n            ...this.logs,\n            [email]: 1\n          }\n        } else {\n          this.logs = {\n            ...this.logs,\n            [email]: this.logs[email] + 1\n          }\n        }\n      }\n    } \n    ```", "```js\n    ...\n    **import** **{** **LogsService** **}** **from****'../../services/logs.service'****;**\n    @Component({...})\n    export class UserCardComponent {\n      ...\n      randomizationCount = inject(RANDOMIZATION_COUNT);\n      **logsService =** **inject****(****LogsService****);**\n    **get****log****() {**\n    **return****this****.****logsService****.****logs****[****this****.****user****.****email****] ??** **0****;**\n    **}**\n    get randomColor() {\n        **this****.****logsService****.****updateLogEntry****(****this****.****user****.****email****);**\n        ...\n      }\n    } \n    ```", "```js\n    <div [style.backgroundColor]=\"randomColor\"...>\n    <img ...>\n    <div class=\"card-body flex-1\">...</div>\n    **<****div****class****=****\"p-4 bg-slate-900 text-green-300 rounded-md h-fit\"****>**\n    **<****div****>**\n    **Color Generation Count:**\n    **</****div****>**\n    **<****pre****>****{{log}}****</****pre****>**\n    **</****div****>**\n    </div> \n    ```", "```js\n    import { **AfterViewInit**, **ChangeDetectorRef**, Component, Input, inject } from '@angular/core';\n          ...\n\n    export class UserCardComponent**implements****AfterViewInit** {\n      ...\n      logsService = inject(LogsService);\n      **cdRef =** **inject****(****ChangeDetectorRef****);**\n    **ngAfterViewInit****():** **void** **{**\n    **this****.****cdRef****.****detach****();**\n    **}**\n      ...\n    } \n    ```", "```js\n    <div class=\"home\">\n    <section class=\"flex flex-col gap-4 w-full\">\n    <h2 class=\"text-center text-2xl\">Users</h2>\n    <form class=\"input-container flex gap-4 w-full items\n          -center mb-4\" [formGroup]=\"searchForm\">\n    <div class=\"relative flex-1\">...</div>\n    **<****button** **(****click****)=****\"updateName(users[0])\"****>****Update**\n    **Irineu's Name****</****button****>**\n    </form>\n    <div class=\"secondary-container flex justify-center\">...</div>\n    </section>\n    </div>\n    <ng-template #loader>\n    <app-loader></app-loader>\n    </ng-template> \n    ```", "```js\n     ...\n    export class UsersComponent implements OnInit {\n      ...\n\n      usersTrackBy(_index: number, user: IUser) {\n        return user.uuid;\n      }\n\n      **updateName****(****user****:** **IUser****) {**\n    **this****.****users** **=** **this****.****users****.****map****(****(****userItem****) =>** **{**\n    **if** **(userItem.****uuid** **=== user.****uuid****) {**\n    **return** **{**\n    **...userItem,**\n    **name****: {**\n    **...userItem.****name****,**\n    **last****:** **'Test 123'**\n    **}**\n    **}**\n    **}**\n    **return** **userItem;**\n    **})**\n    **}**\n    } \n    ```", "```js\n    import { Component, inject, OnInit, **QueryList**, **ViewChildren**} from '@angular/core';\n    ...\n    export class UsersComponent implements OnInit {\n      **@ViewChildren****(****UserCardComponent****) userCards!:**\n    **QueryList****<****UserCardComponent****>;**\n      users!: IUser[];\n      ...\n\n      updateName(user: IUser) {\n        this.users = this.users.map((userItem) => {\n          ...\n        })\n        **const** **matchingComponent =** **this****.****userCards****.****find****(****comp** **=>** **{**\n    **return** **comp.****user****.****uuid** **=== user.****uuid****;**\n    **})**\n    **if** **(matchingComponent) {**\n    **setTimeout****(****() =>** **{**\n    **matchingComponent.****cdRef****.****detectChanges****();**\n    **},** **0****);**\n    **}**\n      }\n    } \n    ```", "```js\n    npm run serve ng-run-outside-angular \n    ```", "```js\n    ...\n    @Component({...})\n    export class WatchBoxComponent implements OnInit {\n      ...\n      ngOnInit(): void {\n        this.intervalTimer = setInterval(() => {\n          this.timer();\n      }, 1);\n        **setTimeout****(****() =>** **{**\n    **clearInterval****(****this****.****intervalTimer****);**\n    **},** **4000****);**\n      }\n      ...\n    } \n    ```", "```js\n    ...\n    export class WatchComponent implements OnInit {\n      ...\n      ngOnInit(): void {\n        this.intervalTimer = setInterval(...}, 30);\n        **setTimeout****(****() =>** **{**\n    **clearInterval****(****this****.****intervalTimer****);**\n    **},** **4000****);**\n      }\n      ...\n    } \n    ```", "```js\n    ...\n    @Component({...})\n    export class WatchBoxComponent implements OnInit {\n      ...\n      ngOnInit(): void {\n        **// this.intervalTimer = setInterval(() => {**\n    **//   this.timer();**\n    **// }, 1);**\n    **// setTimeout(() => {**\n    **//   clearInterval(this.intervalTimer);**\n    **// }, 4000);**\n      }\n    } \n    ```", "```js\n    import {\n      ...\n      ViewChild,\n      **inject****,**\n    **NgZone****,**\n    } from '@angular/core';\n    @Component({...})\n    export class WatchComponent implements OnInit {zone = inject(NgZone);\n      ...\n      ngOnInit(): void {\n      if (!window['appLogs']) {\n        window['appLogs'] = {};\n      }\n      window['appLogs'][ watchComponentRender] = 0;\n        **this****.****zone****.****runOutsideAngular****(****() =>** **{**\n       ...\n          setTimeout(() => {\n            clearInterval(this.intervalTimer);\n          }, 4000);\n        **});**\n      }\n      ...\n    } \n    ```", "```js\n    ...\n    @Component({...})\n    export class WatchComponent implements OnInit {\n      ...\n      ngOnInit(): void {\n        ...\n        this.ngZone.runOutsideAngular(() => {\n          this.intervalTimer = setInterval(() => {\n            this.animate();\n          }, 30);\n          setTimeout(() => { <-- remove this\n            clearInterval(this.intervalTimer);\n          }, 4000);\n        });\n      }\n      ...\n    } \n    ```", "```js\n    import { Component, OnInit } from '@angular/core';\n    @Component({\n      selector: 'app-watch-box',\n      templateUrl: './watch-box.component.html',\n      styleUrls: ['./watch-box.component.scss'],\n    })\n    export class WatchBoxComponent implements OnInit {\n      name = '';\n      time = {\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n        milliseconds: 0,\n      };\n      intervalTimer;\n      constructor() {}\n      ngOnInit(): void {\n        this.intervalTimer = setInterval(() => {\n          this.timer();\n        }, 1);\n        setTimeout(() => { //<-- Remove this\n          clearInterval(this.intervalTimer);\n        }, 4000);\n      }\n      ...\n    } \n    ```", "```js\n    npm run serve:prod ng-run-outside-angular \n    ```", "```js\nel.style.setProperty('--x', `${this.xCoordinate}px`);\nel.style.setProperty('--y', `${this.yCoordinate}px`); \n```", "```js\n    npm run serve ng-for-trackby \n    ```", "```js\n    ...\n    export class UsersListComponent {\n      @Input() listItems: AppUserCard[] = [];\n      @Output() itemClicked = new EventEmitter<AppUserCard>();\n      @Output() itemDeleted = new EventEmitter<AppUserCard>();\n      **trackByFn****(****_index****:** **number****,** **item****:** **AppUserCard****) {**\n    **return** **item.****id****;**\n    **}**\n    } \n    ```", "```js\n    <h4 class=\"heading\">Our trusted customers</h4>\n    <ul class=\"list list-group p-2\">\n    <li class=\"list__item list-group-item\" *ngFor=\"let item of\n        listItems; **trackBy: trackByFn**\">\n        ...\n      </li>\n    </ul> \n    ```", "```js\nupdateUser(updatedUser: AppUserCard) {\n  this.users = this.users.map((user) => {\n    if (user.id === updatedUser.id) {\n      return {\n        ...updatedUser,\n      };\n    }\n    return { ...user };\n  });\n} \n```", "```js\n    npm run serve ng-pipes-perf \n    ```", "```js\n    cd start && nx g s services/logs --project ng-pipes-perf \n    ```", "```js\n    import { Injectable } from '@angular/core';\n    @Injectable({\n      providedIn: 'root'\n    })\n    export class LogsService {\n      logs: Record<string, number> = {}\n      updateLogEntry(email: string) {\n        if (this.logs[email] === undefined) {\n          this.logs = {\n            ...this.logs,\n            [email]: 1\n          }\n        } else {\n          this.logs = {\n            ...this.logs,\n            [email]: this.logs[email] + 1\n          }\n        }\n      }\n    } \n    ```", "```js\n    ...\n    **import** **{** **LogsService** **}** **from****'../../services/logs.service'****;**\n    @Component({...})\n    export class UserCardComponent {\n      ...\n      randomizationCount = inject(RANDOMIZATION_COUNT);\n      **logsService =** **inject****(****LogsService****);**\n    **get****log****() {**\n    **return****this****.****logsService****.****logs****[****this****.****user****.****email****] ??** **0****;**\n    **}**\n    get randomColor() {\n        **this****.****logsService****.****updateLogEntry****(****this****.****user****.****email****);**\n        ...\n      }\n    } \n    ```", "```js\n    <div [style.backgroundColor]=\"randomColor\"...>\n    <img ...>\n    <div class=\"card-body flex-1\">...</div>\n    **<****div****class****=****\"p-4 bg-slate-900 text-green-300 rounded-md** **h-fit\"****>**\n    **<****div****>**\n    **Color Generation Count:**\n    **</****div****>**\n    **<****pre****>****{{log}}****</****pre****>**\n    **</****div****>**\n    </div> \n    ```", "```js\n    cd start && nx g pipe random-color --directory apps/chapter12/ng-pipes-perf/src/app/pipes \n    ```", "```js\n    import { Pipe, PipeTransform, inject } from '@angular/core';\n    **import** **{** **LogsService** **}** **from****'../services/logs.service'****;**\n    **import** **{ randColor }** **from****'@ngneat/falso'****;**\n    **import** **{** **IUser** **}** **from****'../interfaces/user.interface'****;**\n    ...\n    export class RandomColorPipe implements PipeTransform {\n      **logsService =** **inject****(****LogsService****);**\n    **factorial****(****n****:** **number****):** **number** **{**\n    **if** **(n ==** **0** **|| n ==** **1****) {**\n    **return****1****;**\n    **}** **else** **{**\n    **return** **n *** **this****.****factorial****(n -** **1****);**\n    **}**\n    **}**\n    **randomColor****(****email****:** **string****,** **randomizationCount****:** **number****) {**\n    **this****.****logsService****.****updateLogEntry****(email);**\n    **let** **color;**\n    **for** **(****let** **i =** **0****; i <** **this****.****factorial****(randomizationCount); i++) {**\n    **color =** **randColor****();**\n    **}**\n    **return** **color;**\n    **}**\n    transform(r**andomizationCount****:** **number****,** **user****:** **IUser**):\n        **string** **|** **undefined** {\n        return **this****.****randomColor****(user.****email****, randomizationCount)**;\n      }\n    } \n    ```", "```js\n    ...\n    **import** **{** **RandomColorPipe** **}** **from****'../../pipes/random-color.pipe'****;**\n    @Component({\n      selector: 'app-user-card',\n      standalone: true,\n      imports: [CommonModule, RouterModule, **RandomColorPipe**],\n      ...\n    }) \n    ```", "```js\n    <div [style.backgroundColor]=\"**randomizationCount | randomColor : user**\" class=\"card flex flex-col max-w-sm mx-auto h-full duration-200 cursor-pointer hover:border-purple-500 hover:shadow-md p-4 border border-slate-300 rounded-md text-center\" *ngIf=\"user\" routerLink=\"/user/{{user.uuid}}\">\n      ...\n    </div> \n    ```", "```js\n    npm run serve ng-ww-perf \n    ```", "```js\n    cd start && nx generate web-worker workers/randomColor --project ng-ww-perf \n    ```", "```js\n    /// <reference lib=\"webworker\" />\n    import { generateRandomColor } from \"../utils\";\n    type RandomColorIncomingEvent = {\n      data: {\n        randomizationCount: number\n      }\n    }\n    export type RandomColorOutgoingEvent = { data: { color: string } };\n    addEventListener('message', ({ data }:\n      RandomColorIncomingEvent) => {\n      const {\n        randomizationCount\n      } = data;\n      console.log('inside the worker', data)\n      if (!randomizationCount) {\n        return;\n      }\n      const color = generateRandomColor(randomizationCount);\n      postMessage({\n        color\n      });\n    });\n    export const getRandomColorWorker = () => {\n      if (typeof Worker !== undefined) {\n        return new Worker(new URL('./random-color.worker', import.meta.url), {\n          type: 'module'\n        })\n      }\n      return null;\n    } \n    ```", "```js\n    ...\n    export class UserCardComponent implements OnInit, OnChanges {\n      ...\n      randomizationCount = inject(RANDOMIZATION_COUNT);\n      **randomColor =** **''****;**\n      ...\n    } \n    ```", "```js\n    import { Component, Input, **OnInit**, inject } from '@angular/core';\n    ...\n    import { RANDOMIZATION_COUNT } from '../../tokens';\n    **import** **{** **RandomColorOutgoingEvent** **, getRandomColorWorker }** **from****'../../workers/random-color.worker'****;**\n    @Component({...})\n    export class UserCardComponent **implements****OnInit** {\n      @Input() user!: IUser;\n      @Input() index = 0;\n      logsService = inject(LogsService);\n      randomizationCount = inject(RANDOMIZATION_COUNT);\n      randomColor = '';\n      **worker****:** **Worker** **|** **null** **=** **getRandomColorWorker****();**\n    **ngOnInit****():** **void** **{**\n    **if** **(!****this****.****worker****) {**\n    **return****;**\n    **}**\n    **this****.****worker****.****onmessage** **=** **(****{ data: { color } }:**\n    **RandomColorOutgoingEvent****) =>** **{**\n    **console****.****log****(**\n    **`received color** **${color}** **from worker for user** **${****this****.user.email}****`**\n    **);**\n    **this****.****logsService****.****updateLogEntry****(****this****.****user****.****email****);**\n    **this****.****randomColor** **= color;**\n    **};**\n    **}**\n     ...\n    } \n    ```", "```js\n    import { Component, Input, **OnChanges**, OnInit, **SimpleChanges**, inject } from '@angular/core';\n    ...\n    export class UserCardComponent implements OnInit, **OnChanges**{\n      ...\n      ngOnInit(): void {...}\n\n      **ngOnChanges****(****changes****:** **SimpleChanges****) {**\n    **if** **(changes[****'user'****].****currentValue** **!==**\n    **changes[****'user'****].****previousValue****) {**\n    **if** **(!****this****.****worker****) {**\n    **this****.****randomColor** **=** **generateRandomColor****(**\n    **this****.****randomizationCount****);**\n    **return****;**\n    **}**\n    **this****.****worker****.****postMessage****({** **randomizationCount****:**\n    **this****.****randomizationCount** **});**\n    **}**\n    **}**\n      ...\n    } \n    ```", "```js\n    ...\n    @ import { Component, Input, OnChanges, **OnDestroy**, OnInit, SimpleChanges, inject } from '@angular/core';\n    export class UserCardComponent implements OnInit, OnChanges,\n      **OnDestroy**{\n      ...\n      **ngOnDestroy****():** **void** **{**\n    **this****.****worker****?.****terminate****();**\n    **}**\n    get log() {...}\n    } \n    ```", "```js\n/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n\"extends\": \"../../../tsconfig.json\",\n\"compilerOptions\": {\n\"outDir\": \"../../../out-tsc/worker\",\n\"lib\": [\n\"es2018\",\n\"webworker\"\n],\n\"types\": []\n},\n\"include\": [\n\"src/**/*.worker.ts\"\n]\n} \n```", "```js\n    npm run build ng-perf-budgets \n    ```", "```js\n    ...\n    **import** ***** **as** **moment** **from****'../lib/moment'****;**\n    **import** ***** **as****THREE****from****'three'****;**\n    @Component({...})\n    export class AppComponent {\n      ...\n      constructor() {\n       const scene = new THREE.Scene(); \n       console.log(moment().format('MMM Do YYYY'));\n       console.log(scene);\n     }\n      ...\n    } \n    ```", "```js\n    npm run build ng-perf-budgets \n    ```", "```js\n    ...\n    {\n    \"budgets\": [\n    {\n    \"type\": \"initial\",\n    \"maximumWarning\": \"**800kb**\",\n    \"maximumError\": \"**1mb**\"\n    },\n    {\n    \"type\": \"anyComponentStyle\",\n    \"maximumWarning\": \"2kb\",\n    \"maximumError\": \"4kb\"\n    }\n    ]\n    }\n    ... \n    ```", "```js\n    cd start && npm install --save date-fns \n    ```", "```js\n    import { Component } from '@angular/core';\n    import { Router } from '@angular/router';\n    import { AuthService } from './services/auth.service';\n    **import** **{ format }** **from****'date-fns'****;**\n    **import** **{** **Scene** **}** **from****'three'****;**\n    @Component({...})\n    export class AppComponent {\n      ...\n      constructor() {\n        **const** **scene =** **new****Scene****();**\n    **console****.****log****(****format****(****new****Date****(),** **'LLL do yyyy'****));** \n    **console****.****log****(scene);**\n      }\n      ...\n    } \n    ```", "```js\n    npm run build ng-perf-wba \n    ```", "```js\n    ...\n    **import** ***** **as** **moment** **from****'../lib/moment'****;**\n    **import** ***** **as****THREE****from****'three'****;**\n    @Component({...})\n    export class AppComponent {\n      ...\n      **constructor****() {**\n    **const** **scene =** **new****THREE****.****Scene****();** \n    **console****.****log****(****moment****().****format****(****'MMM Do YYYY'****));**\n    **console****.****log****(scene);**\n    **}**\n      ...\n    } \n    ```", "```js\n    npm run build ng-perf-wba \n    ```", "```js\n    npm run build ng-perf-wba with-stats \n    ```", "```js\n    npx webpack-bundle-analyzer ./start/dist/apps/chapter12/ng-perf-wba/stats.json \n    ```", "```js\n    cd start && npm install --save date-fns \n    ```", "```js\n    ...\n    import { AuthService } from './services/auth.service';\n    **import** **{ format }** **from****'date-fns'****;**\n    **import** **{** **Scene** **}** **from****'three'****;**\n    @Component({...})\n    export class AppComponent {\n      ...\n      constructor() {\n        **const** **scene =** **new****Scene****();**\n    **console****.****log****(****format****(****new****Date****(),** **'LLL do yyyy'****));** \n    **console****.****log****(scene);**\n      }\n      ...\n    } \n    ```"]