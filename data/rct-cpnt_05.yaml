- en: Chapter 5. Going Material!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。迈向材料设计！
- en: In the last chapter, we looked at the basics of how to style and animate React
    components. We can make components look how we want them to, but how do we want
    them to look?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了如何样式化和动画化React组件的基础。我们可以让组件看起来像我们想要的样子，但我们希望它们看起来如何？
- en: In this chapter, we will look at something called material design. You'll learn
    how to express our interface not only in terms of components, but in a consistent
    design language.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨所谓的材料设计。你将学习如何用一致的设计语言表达我们的界面，而不仅仅是组件。
- en: You will see a major intersection between component-based design and visual
    design patterns. Material design is very detailed, as we'll see in this chapter.
    It describes, in great detail, how each type of component (or surface) must look,
    feel, and move. It's that core approach of designing in the smallest terms that
    we've come to understand with React. Now, we get to apply those lessons from a
    visual standpoint as well.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到组件式设计和视觉设计模式之间的主要交叉。材料设计非常详细，正如我们在本章中将要看到的。它详细描述了每种类型的组件（或表面）应该如何看起来、感觉和移动。这就是我们通过React理解的最小化设计方法的核心。现在，我们将从视觉角度应用这些经验教训。
- en: Understanding material design
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解材料设计
- en: For me, the name material design evokes an image of fashion or engineering,
    where different textures and patterns have distinct visual or technical characteristics.
    Everything I touch is some kind of material. Everything I see is some kind of
    material. All of these materials obey the laws of physics and behave in familiar
    ways.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，“材料设计”这个名字唤起了时尚或工程的图像，其中不同的质感和图案具有独特的视觉或技术特征。我触摸的一切都是某种材料。我所看到的一切都是某种材料。所有这些材料都遵循物理定律并以熟悉的方式表现。
- en: These senses, of touch and sight, are fundamental to how we interact with the
    world. They're a broad and unspoken constant. Material design is a language that
    aims to bridge the gap between the physical and digital world, using material
    as a metaphor.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这些感觉，触摸和视觉，是我们与世界互动的基础。它们是广泛且不言而喻的常数。材料设计是一种旨在弥合物理世界和数字世界之间差距的语言，使用材料作为隐喻。
- en: In this language, the surfaces and edges of material give us some visual interface
    cues that are grounded in reality. In this language, components respond immediately
    to touch in ways that hint at what they can do.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种语言中，材料的表面和边缘为我们提供了基于现实的视觉界面提示。在这种语言中，组件会立即对触摸做出反应，暗示它们可以做什么。
- en: Material design is heavily inspired by print design. Yet all the typography,
    color, and imagery do more than just look good. They create focus, hierarchy,
    and meaning. It reinforces the user as the primary cause of movement, using meaningful
    motion to focus on important areas of the interface, always giving the appropriate
    amount of feedback.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 材料设计深受印刷设计的启发。然而，所有的字体、色彩和图像不仅仅是为了美观。它们创造了焦点、层次和意义。它强化了用户作为运动主要驱动的角色，使用有意义的运动来聚焦于界面的重要区域，始终提供适当的反馈。
- en: Surfaces
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表面
- en: Each object is represented by a material surface. These objects are sized in
    **device-independent pixels** (or **dp**, for short). This is a great unit to
    measure user input because it allows designers to design interfaces independent
    of the screen size.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 每个对象都由一个材料表面表示。这些对象的大小以**设备无关像素**（或**dp**，简称）来衡量。这是一个衡量用户输入的绝佳单位，因为它允许设计师设计独立于屏幕大小的界面。
- en: It can also be converted to absolute units (such as inches or millimeters) depending
    on the device's screen size.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以根据设备的屏幕大小转换为绝对单位（如英寸或毫米）。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can learn more about dp at [http://en.wikipedia.org/wiki/Device_independent_pixel](http://en.wikipedia.org/wiki/Device_independent_pixel).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://en.wikipedia.org/wiki/Device_independent_pixel](http://en.wikipedia.org/wiki/Device_independent_pixel)了解更多关于dp的信息。
- en: Surfaces are thought of as 3D objects, having width, height, and depth. All
    surfaces have a depth of 1 dp, but they can have any width or height. Surfaces
    also overlap, so they have a vertical offset from each other.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 表面被视为3D对象，具有宽度、高度和深度。所有表面都有1 dp的深度，但它们可以有任意宽度和高度。表面还可以重叠，因此它们之间有垂直偏移。
- en: This vertical offset (or elevation) allows layering, creating a sense of depth
    similar to the real world. The content on a surface, such as typography and images,
    lies flat on the surface. Think of it like ink on paper, where the paper has a
    depth that's easier to notice than the ink printed on it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这种垂直偏移（或高度）允许分层，创造出类似于现实世界的深度感。表面上的内容，如排版和图像，平铺在表面上。把它想象成纸上的墨水，纸张的深度比打印在上面的墨水更容易注意到。
- en: This layering effect is accentuated with shadows cast onto lower surfaces. The
    screen serves as a light source, so the closer the surfaces are to it (the higher
    they are in the interface), the bigger the shadow they cast.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这种分层效果通过投射到下表面的阴影得到强调。屏幕作为光源，因此表面离它越近（在界面中位置越高），它们投射的阴影就越大。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can learn more about elevation and layering at [https://www.google.com/design/spec/what-is-material/elevation-shadows.html](https://www.google.com/design/spec/what-is-material/elevation-shadows.html).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.google.com/design/spec/what-is-material/elevation-shadows.html](https://www.google.com/design/spec/what-is-material/elevation-shadows.html)了解更多关于高度和分层的信息。
- en: Interactions
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交互
- en: Surfaces provide the depth and hierarchy, but the real value of an application
    comes from the content presented through the interface. Content drives interaction.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 表面提供了深度和层次结构，但应用程序的真实价值来自于通过界面呈现的内容。内容驱动交互。
- en: Material surfaces should respond to interactions. Playing videos, zooming photos,
    or completing forms should feel natural. An interaction should feel natural, and
    wherever possible, it should mimic how it would feel in the real world.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 材料表面应该对交互做出响应。播放视频、缩放照片或填写表单应该感觉自然。交互应该感觉自然，并且尽可能模仿现实世界中的感觉。
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can learn more about interactions at [https://www.google.com/design/spec/animation/responsive-interaction.html](https://www.google.com/design/spec/animation/responsive-interaction.html).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.google.com/design/spec/animation/responsive-interaction.html](https://www.google.com/design/spec/animation/responsive-interaction.html)了解更多关于交互的信息。
- en: Motion
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运动
- en: One of the ways in which an interface can respond to a user interaction is through
    the efficient use of motion. Animation is not new to mobile interfaces (where
    material design was born), but we're talking about a considered approach to how
    that animation is performed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接口对用户交互做出响应的一种方式是通过有效利用运动。动画对移动界面（材料设计诞生的地方）来说并不陌生，但我们谈论的是对动画执行方式的深思熟虑的方法。
- en: Just like in the real world, some objects move faster or slower when interacted
    with as concepts such as friction and momentum come into play. Some elements compress
    deeper when pressed and others barely move at all.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在现实世界中一样，当涉及到摩擦和动量等概念时，一些物体在交互时移动得更快或更慢。一些元素在按下时会压缩得更深，而其他元素几乎不会移动。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can learn more about motion at [https://www.google.com/design/spec/animation/meaningful-transitions.html](https://www.google.com/design/spec/animation/meaningful-transitions.html).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.google.com/design/spec/animation/meaningful-transitions.html](https://www.google.com/design/spec/animation/meaningful-transitions.html)了解更多关于运动的信息。
- en: Typography and iconography
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排版和图标
- en: There are guidelines for how to structure and color textual content in material
    interfaces. Most of the examples show Roboto (which is the standard Android font),
    but the rules work just as well with other clear typefaces.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 存在有关如何在材料界面中结构和着色文本内容的指南。大多数示例展示了Roboto（这是标准的Android字体），但规则同样适用于其他清晰的字体。
- en: Similarly, there are guidelines for how to create and use icons through your
    interface. There is a standard set of icons (called system icons), which will
    get you started.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，还有关于如何通过界面创建和使用图标的指南。存在一套标准的图标（称为系统图标），这将帮助您开始。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can download Roboto from [https://www.google.com/fonts/specimen/Roboto](https://www.google.com/fonts/specimen/Roboto)
    and the system icons from [http://www.google.com/design/spec/style/icons.html#icons-system-icons](http://www.google.com/design/spec/style/icons.html#icons-system-icons).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[https://www.google.com/fonts/specimen/Roboto](https://www.google.com/fonts/specimen/Roboto)下载Roboto字体，以及从[http://www.google.com/design/spec/style/icons.html#icons-system-icons](http://www.google.com/design/spec/style/icons.html#icons-system-icons)获取系统图标。
- en: Keeping your head above water
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持清醒
- en: The first time you read through the material design specification (available
    at [http://www.google.com/design/spec/material-design/introduction.html](http://www.google.com/design/spec/material-design/introduction.html)),
    you may be a little overwhelmed. There's a lot of detail in there, and knowing
    where to start is not easy.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次阅读材料设计规范（可在[http://www.google.com/design/spec/material-design/introduction.html](http://www.google.com/design/spec/material-design/introduction.html)找到），你可能会感到有些不知所措。其中有很多细节，知道从哪里开始并不容易。
- en: The truth is you don't have to keep all of it in mind. I freaked out the first
    time I read through it, but I've since come to realize that the point is not to
    memorize it all. Sure, that would help when making every minute choice about your
    interface, but it isn't meant to be a toolkit or component library.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，你不必记住所有的内容。我第一次阅读时感到非常紧张，但后来我意识到，重点不是要记住所有内容。当然，这有助于你在界面上的每一个选择时做出决定，但它并不是一个工具包或组件库。
- en: Material design is a language—a living document. Google has and will continue
    to adapt it, and when you learn a language, it helps to know some of the words.
    However, you cannot learn a whole language in a day, nor can you learn it well
    only by memorizing set phrases.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 材料设计是一种语言——一份活生生的文档。谷歌已经并且将继续对其进行调整，当你学习一门语言时，了解一些单词是有帮助的。然而，你不可能在一天之内学会一门语言，也不可能仅仅通过记忆固定短语就能学好它。
- en: No, to learn a language, you need to speak it daily. You need to take to heart
    the grammar and struggle through your mistakes, until one day you have learned
    how to be comfortable with it without consciously having to remember each and
    every rule. On that day, material design becomes second nature to you.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 不，要学习一门语言，你需要每天都说它。你需要用心去学习语法，并努力克服你的错误，直到有一天你能够舒适地使用它，而不必有意识地记住每一条规则。在那一天，材料设计对你来说将变得像第二本能一样自然。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: I encourage you to read through the material design specification at least once
    before continuing. Remember, you can find it at [http://www.google.com/design/spec/material-design/introduction.html](http://www.google.com/design/spec/material-design/introduction.html).
    It doesn't matter if you forget some or even most of it. The purpose of reading
    it is that some of the decisions will seem more natural to you, as you remember
    parts of the specification. The pieces may fit together easier.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励你在继续之前至少阅读一遍材料设计规范。记住，你可以在[http://www.google.com/design/spec/material-design/introduction.html](http://www.google.com/design/spec/material-design/introduction.html)找到它。即使你忘记了其中的一些或大部分内容，也没有关系。阅读它的目的是，当你记住规范的部分内容时，一些决策将对你来说显得更加自然，因为各个部分更容易结合起来。
- en: Material design lite
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 材料设计lite
- en: Having said all that, there are a few tools to help you get started. The first
    tool we will look at is called material design lite. Over 120 contributors have
    teamed up to create a set of reusable components in the material design language.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 说了这么多，还有一些工具可以帮助你开始。我们将首先查看的工具被称为材料设计lite。超过120位贡献者联合起来，在材料设计语言中创建了一套可重用的组件。
- en: 'The *lite* part of the name comes mainly from two things:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 名称中的“*lite*”部分主要来自两个方面：
- en: It is framework agnostic, which means you can use it without including something
    such as jQuery or Angular
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是框架无关的，这意味着你可以使用它而无需包含像jQuery或Angular这样的东西
- en: When it is gzipped, it's less than 30 KB
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当它被gzip压缩时，它的大小不到30 KB
- en: Let's try it out by customizing the colors of the default template. Go to [http://www.getmdl.io/customize/index.html](http://www.getmdl.io/customize/index.html)
    and pick a couple of colors. The color palettes in material design consist of
    primary colors and an accent color. You can also use some hues of the primary
    color in your design, but we'll not worry about those just yet.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过自定义默认模板的颜色来试一试。前往[http://www.getmdl.io/customize/index.html](http://www.getmdl.io/customize/index.html)并选择几种颜色。材料设计中的调色板由主色和强调色组成。你还可以在你的设计中使用主色的某些色调，但我们现在不必担心这些。
- en: As you select colors from the color wheel, you may notice some of the other
    colors disappear. The color wheel hides colors that will not have enough contrast
    to those you have already selected.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从色轮中选择颜色时，你可能注意到一些其他颜色消失了。色轮隐藏了与已选颜色对比度不足的颜色。
- en: 'You should pick the colors you want to use in your design. I''ve picked the
    two colors marked as **1** and **2** in the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该选择你想要在设计中使用的颜色。我在下面的截图中选择了两色，标记为**1**和**2**：
- en: '![Material design lite](img/5268_05_01.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![材料设计lite](img/5268_05_01.jpg)'
- en: 'Just below the wheel, you''ll see a link element. This points to a hosted CSS
    file. If you place it in the head of your HTML page, those colors will be applied
    to your material design elements. I picked indigo and pink, which is reflected
    in the URL:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在轮子下方，你会看到一个链接元素。这个元素指向一个托管CSS文件。如果你将它放置在你的HTML页面头部，这些颜色就会应用到你的材料设计元素上。我选择了靛蓝和粉色，这反映在URL中：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can choose to save this file and serve it locally. For now, I will include
    it directly in the head of my HTML page.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择保存此文件并本地提供服务。目前，我将直接将其包含在我的HTML页面头部。
- en: 'We also need to include a JavaScript file, and another CSS file that defines
    a few custom fonts:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要包含一个JavaScript文件，以及一个定义了一些自定义字体的CSS文件：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s add a few class names to our button elements as we begin to apply some
    material design styles to our interface. We''ll begin with `PageAdmin`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始应用一些材料设计样式到我们的界面时，让我们给我们的按钮元素添加一些类名。我们将从`PageAdmin`开始：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: All the material design lite class names start with `mdl-`. We added a few that
    define some visual styles for **floating action buttons** (or **FAB**, for short).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所有材料设计轻量级类名都以`mdl-`开头。我们添加了一些定义**浮动操作按钮**（或简称**FAB**）一些视觉样式的类名。
- en: 'These styles make our *add* button look much better:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些样式让我们的**添加**按钮看起来好多了：
- en: '![Material design lite](img/5268_05_02.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![材料设计轻量级](img/5268_05_02.jpg)'
- en: This isn't a great layout though. We should position the button better and add
    some boundaries to the `Page` components. In fact, we should start thinking of
    this CMS interface in terms of the different sections/pages we plan to have.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这不是一个很好的布局。我们应该更好地定位按钮，并为`Page`组件添加一些边界。实际上，我们应该开始从我们计划拥有的不同部分/页面来思考这个CMS界面。
- en: In the beginning, this admin interface won't be open for everyone to see, so
    perhaps we should have a login page. And, how will we navigate between different
    sections of this interface? Perhaps we should add some navigation to the mix.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始时，这个管理界面不会对所有人开放，所以也许我们应该有一个登录页面。那么，我们如何在这个界面的不同部分之间导航呢？也许我们应该添加一些导航。
- en: When we visit [http://www.getmdl.io/templates/index.html](http://www.getmdl.io/templates/index.html),
    we can see a few different starter layouts that we can use. I really like the
    look of the **Dashboard** layout, so I think we can base the navigation on that.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们访问[http://www.getmdl.io/templates/index.html](http://www.getmdl.io/templates/index.html)时，我们可以看到一些不同的起始布局，我们可以使用。我真的很喜欢**仪表板**布局的外观，所以我认为我们可以基于这个布局来构建导航。
- en: Then, there's the **Text-heavy webpage** layout, which has a list of card components.
    These look just right for our `Page` components. Let's get to work!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，还有**文本密集型网页**布局，它包含一系列卡片组件。这些看起来非常适合我们的`Page`组件。让我们开始工作吧！
- en: Creating a login page
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建登录页面
- en: 'We''ll start by creating a simple login without any server-side validation
    (for now). We''ll break it out into its own `login.html` page and `login.js` file:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个简单的登录页面，不包含任何服务器端验证（目前是这样）。我们将将其拆分为单独的`login.html`页面和`login.js`文件：
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'I made a few changes to how SystemJS is configured. Instead of listing every
    individual file, we now set the root directory as the `baseURL`. This means we
    need to change how we import everything except `react` and `react-dom`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我对SystemJS的配置做了一些修改。我们不再列出每个单独的文件，现在我们将根目录设置为`baseURL`。这意味着我们需要改变除了`react`和`react-dom`之外的所有内容的导入方式：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Again, we will use some material design lite **Dashboard** class names, which
    we defined in `example.css`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们将使用一些材料设计轻量级**仪表板**类名，这些我们在`example.css`中定义过：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: These styles are mostly taken from the **Dashboard** layout files, though I've
    deleted styles that we don't need. Take a note of how the `.react` container element
    is stretched to the bounds of the window.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些样式主要来自**仪表板**布局文件，尽管我已经删除了我们不需要的样式。注意`.react`容器元素是如何拉伸到窗口边界的。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Ideally, we would like to isolate the styles for each component inside each
    component. This can be achieved in a number of ways (which we briefly looked at
    in the previous chapter). Try to pull the styles for each of these components
    into the components themselves. It may be a bit more difficult to do if most of
    the styles come from the packaged MDL source files.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们希望将每个组件内部的样式隔离出来。这可以通过多种方式实现（我们之前在上一章中简要讨论过）。尝试将每个这些组件的样式拉入组件本身。如果大部分样式来自打包的MDL源文件，这可能有点困难。
- en: 'Let''s take a look at the `Nav` component:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`Nav`组件：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This new `Nav` component is vastly different from the other React components
    we've created so far. For a start, it has no internal state, rendering only static
    content. It's not a class, but rather a plain arrow function. Since React 0.14,
    it has become possible to pass a function to the `ReactDOM.render`, whether directly
    or indirectly.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新的`Nav`组件与我们迄今为止创建的其他React组件大不相同。首先，它没有内部状态，只渲染静态内容。它不是一个类，而是一个普通的箭头函数。自React
    0.14以来，将函数传递给`ReactDOM.render`（无论是直接还是间接）已经成为可能。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may also want to move the class arrays outside of the functions that use
    them, since they're not likely to change often. This isolates them away from the
    moving parts of each component and reduces the amount of work done each time the
    components are rendered.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还想将类数组移出使用它们的函数之外，因为它们不太可能经常改变。这样可以将它们与每个组件的动态部分隔离开来，并减少每次组件渲染时的工作量。
- en: For the sake of simplicity, I've left them inside the render function, but you're
    welcome to move them as you extend or customize your components.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，我将它们留在了`render`函数内部，但你可以根据需要将它们移动到扩展或自定义组件时。
- en: This style is far simpler to follow when it comes to stateless components. It's
    a pattern that we'll repeat as time goes on, so be on the lookout for it!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到无状态组件时，这种风格要简单得多。这是一个随着时间的推移我们将重复的模式，所以请留意它！
- en: 'Then, we need to create the `Login` component:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要创建`Login`组件：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, input elements work the same as usual, with the addition of
    a few special MDL classes.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，输入元素的工作方式与往常一样，增加了几个特殊的MDL类。
- en: 'This gives us a pleasant login page:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了一个令人愉悦的登录页面：
- en: '![Creating a login page](img/5268_05_03.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![创建登录页面](img/5268_05_03.jpg)'
- en: Updating page admin
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新页面管理员
- en: 'We need to apply similar changes to the now-separate `page-admin.html` and
    `page-admin.js` files. Let''s begin with the HTML:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将类似的变化应用到现在分开的`page-admin.html`和`page-admin.js`文件上。让我们从HTML开始：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is almost exactly the same as `login.html`, except that we load a different
    bootstrap file in this page. There are significant differences in `page-admin.js`
    though:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎与`login.html`完全相同，只是在这个页面上我们加载了不同的引导文件。然而，在`page-admin.js`中存在显著差异：
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We still load in the `mdl-` classes and HTML structure, but we also include
    the same `Backend` bootstrapping as we included earlier. The `PageAdmin` component
    `render` method looks very different now:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然加载`mdl-`类和HTML结构，但我们还包含了之前包含的相同的`Backend`引导。现在`PageAdmin`组件的`render`方法看起来非常不同：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, we need to update the `PageView` component:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要更新`PageView`组件：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These changes don't do anything significant to the functionality we had previously,
    other than the CSS and HTML changes. We still create pages in exactly the same
    way. Also, we still edit and delete them in exactly the same way. We simply apply
    new visuals to an already functional interface.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改对我们的功能没有产生重大影响，除了CSS和HTML的变化。我们仍然以完全相同的方式创建页面。此外，我们仍然以完全相同的方式编辑和删除它们。我们只是将新的视觉元素应用到已经功能齐全的界面中。
- en: 'The page admin section should now look like this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 页面管理员部分现在应该看起来像这样：
- en: '![Updating page admin](img/5268_05_04.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![更新页面管理员](img/5268_05_04.jpg)'
- en: It's much better than before! One thing to note is that we haven't yet styled
    the `PageEdit` component, so consider that an exercise for next time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 它比以前好得多！需要注意的是，我们还没有为`PageEdit`组件添加样式，所以请将其视为下一次练习的内容。
- en: Note
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Pay careful attention to the example code files. A lot has changed since the
    last chapter, including splitting the example files and loading everything differently
    with SystemJS. You cannot continue on from the last chapter's code without making
    these changes and expect the examples in this chapter to work out of the box.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请仔细注意示例代码文件。自从上一章以来，有很多变化，包括分割示例文件以及使用SystemJS以不同的方式加载所有内容。如果不进行这些更改，就无法从上一章的代码继续，并期望本章的示例能够直接工作。
- en: Alternative resources
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替代资源
- en: Before we wrap up, I want to share a few resources that you might find helpful.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束之前，我想分享一些可能对你有帮助的资源。
- en: Font Squirrel
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Font Squirrel
- en: In this chapter, we used Roboto. More accurately, The MDL instructions told
    us how to embed a link to Roboto on Google Webfonts. If you would prefer to use
    your own custom fonts, then you may need to convert them.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用了Roboto。更准确地说，MDL指令告诉我们如何在Google Webfonts上嵌入Roboto的链接。如果你希望使用自己的自定义字体，那么你可能需要将它们转换。
- en: 'You can convert font files at Font Squirrel:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Font Squirrel转换字体文件：
- en: '![Font Squirrel](img/5268_05_05.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![Font Squirrel](img/5268_05_05.jpg)'
- en: Head over to [http://www.fontsquirrel.com/tools/webfont-generator](http://www.fontsquirrel.com/tools/webfont-generator)
    and upload your font files. You'll start to download the converted files with
    helpful CSS files to get you started. We don't have time to cover all the intricacies
    of custom fonts, but the example files you download should set you on the right
    path.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[http://www.fontsquirrel.com/tools/webfont-generator](http://www.fontsquirrel.com/tools/webfont-generator)并上传你的字体文件。你将开始下载转换后的文件，附带一些有用的CSS文件以帮助你开始。我们没有时间涵盖所有自定义字体的复杂性，但下载的示例文件应该能让你走上正确的道路。
- en: Material UI
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 材料UI
- en: We created a bit of a mash-up between the MDL CSS/JavaScript and React. This
    might not always work or be as elegant as you would like. In such instances, check
    out [http://www.material-ui.com](http://www.material-ui.com).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在MDL CSS/JavaScript和React之间创建了一些混合。这不一定总是按你的意愿工作或那么优雅。在这种情况下，请查看[http://www.material-ui.com](http://www.material-ui.com)。
- en: 'Material UI has a huge range of components to choose from, as we can see in
    the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 材料UI提供了大量的组件供选择，如下面的截图所示：
- en: '![Material UI](img/5268_05_06.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![Material UI](img/5268_05_06.jpg)'
- en: It's a catalogue of material design components built to work on top of React.
    We may use some of them in our CMS, but I'll make sure that I explain when we
    do. It's worth taking a look through the components it has to offer and deciding
    whether you'd prefer the purer approach of material design over the code we have
    so far.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个构建在React之上的材料设计组件目录。我们可能会在我们的CMS中使用其中的一些，但我将确保在这样做时进行解释。查看它提供的组件并决定你是否更喜欢比我们迄今为止的代码更纯粹的材料设计方法，这是值得的。
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we blasted through some of the concepts in material design.
    You learned to think of it as an ever-changing language that we must learn over
    time. We implemented a global navigation component using a new form of React component
    (a function). We also implemented a login page, which is in need of a server-side
    validation, and we made our `PageAdmin` component look heaps better!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们快速浏览了材料设计的一些概念。你学会了将其视为一种随着时间的推移我们必须学习的不断变化的语言。我们使用一种新的React组件形式（一个函数）实现了全局导航组件。我们还实现了一个登录页面，它需要服务器端验证，并且让我们的`PageAdmin`组件看起来更好！
- en: In the next chapter, we'll look at how to change views without page reloads
    and some of the neat things we can do to make that experience beautiful.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何在不重新加载页面的情况下更改视图，以及我们可以做一些使体验变得美丽的事情。
