- en: A prettier view with CSS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CSS创建更美观的视图
- en: One of the many key benefits NativeScript brings to native app development is
    the ability to style native view components with standard CSS. You will find great
    support for many common and advanced properties; however, some don't have a direct
    correlation, whereas others are completely unique to native view layouts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: NativeScript为原生应用程序开发带来的许多关键好处之一是能够使用标准CSS为原生视图组件设置样式。您会发现对许多常见和高级属性有很好的支持；然而，有些属性没有直接对应，而其他属性则完全是原生视图布局的独特之处。
- en: Let's take a look at how to turn our first view into something pretty amazing
    with a few CSS classes. You will also learn how to utilize NativeScript's core
    theme to provide a consistent styling framework to build on.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用一些CSS类将我们的第一个视图变得非常惊人。您还将学习如何利用NativeScript的核心主题来提供一致的样式框架以构建。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using CSS to style views
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CSS来为视图设置样式
- en: Understanding some of the differences between typical web styling and native
    styling
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解典型Web样式和原生样式之间的一些区别
- en: Unlocking NativeScript powers with platform-specific files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用特定于平台的文件解锁NativeScript的功能
- en: Learning how to use the nativescript-theme-core styling framework plugin
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用nativescript-theme-core样式框架插件
- en: Adjusting the status bar background color and text color on iOS and Android
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整iOS和Android上状态栏的背景颜色和文本颜色
- en: It's time to get classy
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候开始优雅了
- en: 'Let''s start by taking a look at our app''s main `app.css` file inside the
    `App` directory:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看我们应用程序主要的`app.css`文件，位于`App`目录中：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Out of the box, the `--ng` template hints at two options you could choose from
    to build out your CSS:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`--ng`模板提示了您可以选择的两个选项来构建您的CSS：
- en: Write your own custom classes
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写自定义类
- en: Utilize the nativescript-theme-core styling framework plugin as your base
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将nativescript-theme-core样式框架插件用作基础。
- en: 'Let''s explore the first option for a moment. Add the following after the `.btn`
    class:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索第一个选项片刻。在`.btn`类之后添加以下内容：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There''s a number of interesting things you may pick up on right away from
    this simple example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个简单的例子中，您可能会立即注意到一些有趣的事情：
- en: Padding does not use the `px` suffix you may know well with web styling.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`padding`不使用您在Web样式中熟悉的`px`后缀。'
- en: Don't worry, using the `px` suffix will not hurt you.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不用担心，使用`px`后缀不会伤害您。
- en: Starting with NativeScript 3.0, release units are supported, so you can use
    dp (device independent pixels) or `px` (device pixels).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从NativeScript 3.0开始，支持发布单位，因此您可以使用dp（设备独立像素）或`px`（设备像素）。
- en: If no unit is specified, dp will be used. For width/height and margins, you
    can also use percents in CSS as a unit type.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未指定单位，则将使用dp。对于宽度/高度和边距，您还可以在CSS中使用百分比作为单位类型。
- en: 'Various common properties (`padding`, `font size`, `font weight`, `color`,
    `background color`, and more) are supported. Also, shorthand margin/padding works
    as well, that is, padding: 15 5.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '支持各种常见属性（`padding`，`font size`，`font weight`，`color`，`background color`等）。同样，简写的`margin/padding`也可以使用，即`padding:
    15 5`。'
- en: 'You can use standard hex color names, such as yellow, or shorthand codes, such
    as #444.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用标准的十六进制颜色名称，例如黄色，或者使用简写代码，例如＃444。
- en: CSS scoping works as you would expect, that is, `.row .title { ...`.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS作用域与您期望的一样，即`.row .title { ...`。
- en: Element/Tag/Component names can be styled globally.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素/标签/组件名称可以进行全局样式设置。
- en: Even though you can style by tag/component name, it is not advisable to do so.
    We will show you a few interesting considerations for native devices you will
    want to be aware of.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您可以按标签/组件名称设置样式，但不建议这样做。我们将向您展示一些有趣的原生设备注意事项。
- en: 'Now, let''s open `app/modules/player/components/track-list/track-list.component.html`
    and add the `row` and `title` classes to our template:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们打开 `app/modules/player/components/track-list/track-list.component.html`
    并在我们的模板中添加 `row` 和 `title` 类：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s quickly preview what happens with `tns run ios --emulator` and you should
    see the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速预览一下使用 `tns run ios --emulator` 会发生什么，你应该会看到以下内容：
- en: '![](../images/00008.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00008.jpeg)'
- en: 'If you take a look in Android with `tns run android --emulator`, you should
    see the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Android中使用 `tns run android --emulator`，您应该会看到以下内容：
- en: '![](../images/00009.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00009.jpeg)'
- en: We can see, on both platforms, these styles applied consistently, while, still
    maintaining each platform's unique characteristics. For example, iOS maintains
    the flat design aesthetic across the buttons, and the switches provide that familiar
    iOS feel. In contrast, on Android the buttons preserve their subtle default shadows
    and all caps text, as well as retaining the familiar Android switches.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在两个平台上，这些样式都得到了一致的应用，同时仍然保持了每个平台的独特特征。例如，iOS保持了按钮的扁平设计美学，开关提供了熟悉的iOS感觉。相比之下，在Android上，按钮保留了其微妙的默认阴影和全大写文本，同时保留了熟悉的Android开关。
- en: 'However, there are some subtle (potentially undesirable) differences that are
    important to understand and remedy. From this example, we may note the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一些微妙的（可能不理想的）差异是重要的理解和解决的。从这个例子中，我们可能注意到以下内容：
- en: Android's buttons have wider left/right margins than iOS.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Android的按钮左右边距比iOS宽。
- en: Row titles are not aligned consistently. On iOS, the Label is vertically centered
    by default; however, on Android it's aligned to the top.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 行标题的对齐不一致。在iOS上，默认情况下，标签是垂直居中的；然而，在Android上，它是对齐到顶部的。
- en: 'If you tap on the Record button to view the login dialog, you will also notice
    something quite undesirable:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您点击“记录”按钮查看登录对话框，您还会注意到一些非常不理想的东西：
- en: '![](../images/00010.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00010.jpeg)'
- en: 'Item #3 may be the most surprising and unexpected. It exemplifies one of the
    main reasons it is not advisable to style Element/Tag/Component names globally.
    Since the native dialogs use `Buttons` by default, some of the global `Button`
    styles we added are bleeding into the dialog (notably `color: white`). To fix
    this, we can either ensure we properly scope all the component names:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '第3项可能是最令人惊讶和意想不到的。它展示了全局样式元素/标签/组件名称不建议的主要原因之一。由于原生对话框默认使用 `Buttons`，我们添加的一些全局
    `Button` 样式正在渗入对话框（特别是 `color: white`）。为了解决这个问题，我们可以确保适当地限定所有组件名称：'
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Or better yet, just use a class name on your Buttons:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 或者更好的是，只需在按钮上使用一个类名：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To fix item #2 (row title alignment), we can introduce a special power of NativeScript:
    the ability to build platform-specific files depend on which platform you are
    running it on. Let''s create a new file, `app/common.css`, and refactor all the
    contents of `app/app.css` into this new file. Then, let''s create two other new
    files, `app/app.ios.css` and `app/app.android.css` (and then delete `app.css`,
    since it will no longer be needed), both with the following contents:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决第2项（行标题对齐），我们可以介绍NativeScript的一个特殊功能：根据运行平台构建特定于平台的文件的能力。让我们创建一个新文件 `app/common.css`，并将
    `app/app.css` 的所有内容重构到这个新文件中。然后，让我们创建另外两个新文件 `app/app.ios.css` 和 `app/app.android.css`（然后删除
    `app.css`，因为它将不再需要），两个文件的内容如下：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will ensure that our common shared styles are imported into both iOS and
    Android CSS. Now, we have a way to apply platform-specific styling fixes!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保我们的共享通用样式被导入到iOS和Android的CSS中。现在，我们有一种方法来应用特定于平台的样式修复！
- en: 'Let''s fix that vertical alignment issue by modifying `app/app.android.css`
    to the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过修改 `app/app.android.css` 来解决垂直对齐问题：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This adds the additional styling tweak for Android only to give us this now:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们现在添加了仅适用于Android的额外样式调整：
- en: '![](../images/00011.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00011.jpeg)'
- en: Excellent, much better.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 非常好，好多了。
- en: 'To fix #1, we would need to apply more platform-specific tweaking if we want
    our buttons on both platforms to have the same margins.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决问题＃1，如果我们希望在两个平台上的按钮具有相同的边距，我们需要应用更多特定于平台的调整。
- en: At this point, you may be wondering how much tweaking you may need to do yourself
    to address some of these platform-specific concerns. You should be happy to know
    there's not an exhaustive list, but the incredibly high spirited NativeScript
    community worked together to create something even better, a consistent bootstrap-like
    core theme that provides a lot of these subtle tweaks, such as Label vertical
    alignment and many other subtle adjustments.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您可能想知道您需要自己进行多少调整来解决一些特定于平台的问题。您会高兴地知道，并没有详尽的清单，但是非常高昂的NativeScript社区共同努力创造了更好的东西，一个一致的类似于bootstrap的核心主题，提供了许多这些微妙的调整，比如标签的垂直对齐和许多其他微妙的调整。
- en: Meet the NativeScript core theme
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认识NativeScript核心主题
- en: All new NativeScript projects come with a core theme installed and are ready
    to use out of the box. As mentioned previously, you are provided at two options you
    could use to style your app. The preceding section outlined a few of the things
    you may run into while styling your App from scratch.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 所有新的NativeScript项目都安装了一个核心主题，并且可以立即使用。如前所述，您可以选择两种选项来为您的应用程序设置样式。前面的部分概述了您在从头开始为您的应用程序设置样式时可能遇到的一些问题。
- en: 'Let''s take a look at Option #2: using the `nativescript-theme-core` plugin.
    Out of the box, this theme is built to scale and build on top of. It provides
    a wide assortment of utility classes for spacing, coloring, layout, colored skins,
    and much more. Because of the solid foundation and amazing flexibility it provides,
    we will build our app''s styles on top of this theme.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们来看看Option #2：使用`nativescript-theme-core`插件。这个主题是为了扩展和构建而构建的。它提供了各种各样的实用类，用于间距、着色、布局、着色皮肤等等。由于它提供了坚实的基础和令人惊叹的灵活性，我们将在这个主题的基础上构建我们应用的样式。'
- en: It's worth mentioning the `nativescript-theme-` prefix was intentional as a
    standard, as it helps provide a common prefix to search for on `npm` to find all
    the NativeScript themes. It's encouraged to use the same prefix if you design
    and publish your own custom NativeScript theme.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，`nativescript-theme-`前缀是有意为之的，因为它有助于提供一个在`npm`上搜索所有NativeScript主题的常用前缀。如果您设计并发布自己的自定义NativeScript主题，建议使用相同的前缀。
- en: 'Let''s remove our custom styling, leaving only the core theme imported. However,
    instead of using the default light skin, we are going to use the dark skin. This
    is what our `app/common.css` file should look like now:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们移除我们的自定义样式，只留下核心主题。然而，我们不会使用默认的浅色皮肤，而是使用深色皮肤。现在我们的`app/common.css`文件应该是这样的：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, we want to start classing our components with some of the classes that
    the core theme provides. You can learn a full list of classes here: [https://docs.nativescript.org/ui/theme](https://docs.nativescript.org/ui/theme).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们希望开始使用核心主题提供的一些类来为我们的组件分类。您可以在这里了解所有类的完整列表：[https://docs.nativescript.org/ui/theme](https://docs.nativescript.org/ui/theme)。
- en: 'Starting with `app/app.component.html`, let''s add the following classes:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从`app/app.component.html`开始，让我们添加以下类：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `action-bar` class ensures our skin gets applied appropriately to the header
    of the App, as well as providing subtle consistency adjustments for `ActionBar`
    on both iOS and Android.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`action-bar`类确保我们的皮肤能够适当地应用于应用程序的标题，并为iOS和Android上的`ActionBar`提供微妙的一致性调整。'
- en: The `page` class ensures our skin applies to the entire page. It's important
    this class is applied to the root layout container on any given component view.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`page`类确保我们的皮肤应用于整个页面。在任何给定的组件视图上，将此类应用于根布局容器非常重要。'
- en: 'With these two adjustments, we should now see this on iOS:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这两个调整，我们现在应该在iOS上看到这个：
- en: '![](../images/00012.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00012.jpeg)'
- en: 'And this is on Android:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 而这是在Android上的样子：
- en: '![](../images/00013.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00013.jpeg)'
- en: 'You''ll notice another iOS/Android difference with `ListView`. iOS has a white
    background by default, whereas Android appears to have a transparent background,
    allowing the skin page color to show through. Let''s continue classing our components
    with more classes from the core theme, which help address these subtleties. Open
    `app/modules/player/components/track-list/track-list.component.html` and add the
    following classes:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到`ListView`的另一个iOS/Android差异。iOS默认具有白色背景，而Android似乎具有透明背景，允许皮肤页面颜色透过显示。让我们继续使用核心主题中更多的类来为我们的组件分类，这有助于解决这些细微差别。打开`app/modules/player/components/track-list/track-list.component.html`并添加以下类：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The parent `list-group` class helps scope everything properly down to `list-group-item`.
    Then, we add `c-ruby` to splash some reddish color to our Record buttons. There
    are several skinned colors that provide surnames: `c-sky`, `c-aqua`, `c-charcoal`,
    `c-purple`, and much more. See all of them here: [https://docs.nativescript.org/ui/theme#color-schemes](https://docs.nativescript.org/ui/theme#color-schemes).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 父类`list-group`有助于将所有内容范围限定到`list-group-item`。然后，我们添加`c-ruby`来为我们的录音按钮添加一些红色。有几种皮肤颜色提供了姓氏：`c-sky`，`c-aqua`，`c-charcoal`，`c-purple`等等。在这里查看所有这些：[https://docs.nativescript.org/ui/theme#color-schemes](https://docs.nativescript.org/ui/theme#color-schemes)。
- en: We then add `h2` to the Label to bring its font size up a bit. Lastly, the `switch`
    class helps standardize the track solo switch.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们在标签中添加`h2`，使其字体大小增加一点。最后，`switch`类有助于标准化轨道独奏开关。
- en: 'We now have this on iOS:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在iOS上有了这个：
- en: '![](../images/00014.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00014.jpeg)'
- en: 'And we have this on Android:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 而我们在Android上有了这个：
- en: '![](../images/00015.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00015.jpeg)'
- en: 'Let''s move onward to our last component (for now), `player-controls`. Open
    `app/modules/player/components/player-controls/player-controls.component.html`
    and add the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续前进到我们的最后一个组件（目前为止），`player-controls`。打开`app/modules/player/components/player-controls/player-controls.component.html`并添加以下内容：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: First, we add the `p-x-10` class to add the `10` padding to only the left/right
    container (`GridLayout`). Then, we add `btn btn-primary w-100` to our play/pause
    button. The `w-100` class sets the button to have a fixed width of `100`. Then,
    we add the `slider` class to our Slider.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们添加`p-x-10`类来为左/右容器（`GridLayout`）添加`10`填充。然后，我们为我们的播放/暂停按钮添加`btn btn-primary
    w-100`。`w-100`类将按钮的宽度设置为`100`。然后，我们为我们的滑块添加`slider`类。
- en: 'Now, things are starting to shape up on iOS:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在iOS上事情开始有所进展：
- en: '![](../images/00016.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00016.jpeg)'
- en: 'It will look as follows on Android:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android上看起来将如下所示：
- en: '![](../images/00017.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00017.jpeg)'
- en: Wow, alright now, things are coming together. We will continue to polish things
    more as we go, but this exercise has demonstrated how quickly you can pull your
    styling around with the core theme by using a lot of the classes that come out
    of the box.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，好了，现在事情正在逐渐成形。随着我们的进行，我们将继续对事情进行更多的打磨，但是这个练习已经展示了您可以多快地使用核心主题中的许多类来调整您的样式。
- en: Adjusting the status bar background color and text color on iOS and Android
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整iOS和Android上状态栏的背景颜色和文本颜色
- en: You may have noticed earlier that, on iOS, the status bar text is black and
    doesn't look very good with our dark skin. Additionally, we may want to alter
    Android's status bar tint color. NativeScript provides direct access to native
    APIs, so we can easily change these to whatever we would like. Both platforms
    deal with them differently, so we can conditionally alter the status bar for each.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，在 iOS 上，状态栏文本是黑色的，与我们的深色皮肤不太搭配。此外，我们可能希望改变 Android 的状态栏色调。NativeScript
    提供了对原生 API 的直接访问，因此我们可以轻松地将它们更改为我们想要的样子。这两个平台处理它们的方式不同，因此我们可以有条件地为每个平台更改状态栏。
- en: 'Open `app/app.component.ts` and let''s add the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `app/app.component.ts`，让我们添加以下内容：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will turn the iOS status bar text white:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使 iOS 状态栏文本变为白色：
- en: '![](../images/00018.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00018.jpeg)'
- en: 'The second part of the condition adjusts Android to use dark text in the status
    bar:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 条件的第二部分调整 Android 以在状态栏中使用深色文本：
- en: '![](../images/00019.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00019.jpeg)'
- en: 'Let''s also adjust the `ActionBar` background color while we''re at it for
    a nice touch. On iOS, the status bar background color takes on the background
    color of `ActionBar`, whereas on Android, the background color of the status bar
    must be adjusted via Android `colors.xml` in `App_Resources`. Starting with iOS,
    let''s open `app/common.css` and add the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在此期间，让我们也调整 `ActionBar` 的背景颜色，为其增添一些亮点。在 iOS 上，状态栏的背景颜色采用 `ActionBar` 的背景颜色，而在
    Android 上，状态栏的背景颜色必须通过 `App_Resources` 中的 Android `colors.xml` 进行调整。从 iOS 开始，让我们打开
    `app/common.css` 并添加以下内容：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This colors `ActionBar` as follows for iOS:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为 iOS 的 `ActionBar` 着色如下：
- en: '![](../images/00020.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00020.jpeg)'
- en: 'For Android, we want our status bar background to present a complimentary hue
    to our `ActionBar` background. To do that, we want to open `app/App_Resources/Android/values/colors.xml`
    and make the following adjustment:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Android，我们希望我们的状态栏背景呈现与我们 `ActionBar` 背景相衬的色调。为此，我们要打开 `app/App_Resources/Android/values/colors.xml`
    并进行以下调整：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This is the final result on Android:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Android 上的最终结果：
- en: '![](../images/00021.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00021.jpeg)'
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: It's refreshing and fun to finally put a face on our app; however, we are certainly
    not done styling. We will continue polishing views via CSS and introduce SASS
    soon to refine it even more in the upcoming chapters. However, this chapter has
    introduced you to various considerations you will want to be aware of while styling
    your App via CSS.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最终为我们的应用程序添加外观是令人耳目一新和有趣的；然而，我们当然还没有完成样式设置。我们将继续通过 CSS 磨练视图，并很快引入 SASS 来在即将到来的章节中进一步完善它。然而，本章介绍了您在通过
    CSS 设置应用程序时需要注意的各种考虑因素。
- en: You've learned that common CSS properties are supported, and we have also looked
    at differences between how iOS and Android handle certain default characteristics.
    The ability to have platform-specific CSS overrides is a nice benefit and special
    power you will want to take advantage of in your cross-platform NativeScript apps.
    Understanding how to control the appearance of the status bar on both platforms
    is essential to achieving the desired look and feel of your app.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经了解到常见的 CSS 属性是受支持的，并且我们还看到了 iOS 和 Android 处理某些默认特性的差异。具有特定于平台的 CSS 覆盖的能力是一个很好的好处，也是您想要利用在跨平台
    NativeScript 应用程序中的特殊能力。了解如何在两个平台上控制状态栏的外观是实现应用程序所需外观和感觉的关键。
- en: In the next chapter, we will take a break from styling and dive into routing
    and navigation via lazy loading to set the stage for rounding out the general
    usability flow of our app. Get ready to dive into some of the more interesting
    Angular bits of our app.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将暂时停止样式设置，转而深入研究通过延迟加载进行路由和导航，为我们的应用程序的一般可用性流程做好准备。准备好深入了解我们应用程序中更有趣的
    Angular 部分。
