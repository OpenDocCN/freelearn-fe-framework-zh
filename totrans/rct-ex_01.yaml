- en: Chapter 1. Getting Started with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web development has seen a huge advent of **Single Page Application** (**SPA**)
    in the past couple of years. Early development was simple—reload a complete page
    to perform a change in the display or perform a user action. The problem with
    this was a huge round-trip time for the complete request to reach the web server
    and back to the client.
  prefs: []
  type: TYPE_NORMAL
- en: Then came AJAX, which sent a request to the server, and could update parts of
    the page without reloading the current page. Moving in the same direction, we
    saw the emergence of the SPAs.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up the heavy frontend content and delivering it to the client browser
    just once, while maintaining a small channel for communication with the server
    based on any event; this is usually complemented by thin API on the web server.
  prefs: []
  type: TYPE_NORMAL
- en: The growth in such apps has been complemented by JavaScript libraries and frameworks
    such as Ext JS, KnockoutJS, BackboneJS, AngularJS, EmberJS, and more recently,
    React and Polymer.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how React fits in this ecosystem and get introduced to
    it in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is React and why do we use React?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data flows in the component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component displays the view based on state of the component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component defines display of the view, irrespective of data contained, thus
    reducing the dependency and complexity of state for display
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User interactions may change state of component from handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components are reused and re-rendered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is React?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ReactJS tries to solve the problem from the *View* layer. It can very well be
    defined and used as the *V* in any of the *MVC* frameworks. It's not opinionated
    about how it should be used. It creates abstract representations of views. It
    breaks down parts of the view in the *Components*. These components encompass
    both the logic to handle the display of view and the view itself. It can contain
    data that it uses to render the state of the app.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid complexity of interactions and subsequent render processing required,
    React does a full render of the application. It maintains a simple flow of work.
  prefs: []
  type: TYPE_NORMAL
- en: React is founded on the idea that DOM manipulation is an expensive operation
    and should be minimized. It also recognizes that optimizing DOM manipulation by
    hand will result in a lot of *boilerplate* code, which is error-prone, boring,
    and repetitive.
  prefs: []
  type: TYPE_NORMAL
- en: React solves this by giving the developer a virtual DOM to render to instead
    of the actual DOM. It finds difference between the real DOM and virtual DOM and
    conducts the minimum number of DOM operations required to achieve the new state.
  prefs: []
  type: TYPE_NORMAL
- en: React is also declarative. When the data changes, React conceptually hits the
    refresh button and knows to only update the changed parts.
  prefs: []
  type: TYPE_NORMAL
- en: This simple flow of data, coupled with dead simple display logic, makes development
    with ReactJS straightforward and simple to understand.
  prefs: []
  type: TYPE_NORMAL
- en: Who uses React? If you've used any of the services such as Facebook, Instagram,
    Netflix, Alibaba, Yahoo, E-Bay, Khan-Academy, AirBnB, Sony, and Atlassian, you've
    already come across and used React on the Web.
  prefs: []
  type: TYPE_NORMAL
- en: In just under a year, React has seen adoption from major Internet companies
    in their core products.
  prefs: []
  type: TYPE_NORMAL
- en: In its first-ever conference, React also announced the development of React
    Native. React Native allows the development of mobile applications using React.
    It transpiles React code to the native application code, such as Objective-C for
    iOS applications.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this, Facebook already uses React Native in its Groups
    and Ads Manager app.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will be following a conversation between two developers, Mike
    and Shawn. Mike is a senior developer at Adequate Consulting and Shawn has just
    joined the company. Mike will be mentoring Shawn and conducting pair programming
    with him.
  prefs: []
  type: TYPE_NORMAL
- en: When Shawn meets Mike and ReactJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's a bright day at Adequate Consulting. Its' also Shawn's first day at the
    company. Shawn had joined Adequate to work on its amazing products and also because
    it uses and develops exciting new technologies.
  prefs: []
  type: TYPE_NORMAL
- en: After onboarding the company, Shelly, the CTO, introduced Shawn to Mike. Mike,
    a senior developer at Adequate, is a jolly man, who loves exploring new things.
  prefs: []
  type: TYPE_NORMAL
- en: '"So Shawn, here''s Mike", said Shelly. "He''ll be mentoring you as well as
    pairing with you on development. We follow pair programming, so expect a lot of
    it with him. He''s an excellent help."'
  prefs: []
  type: TYPE_NORMAL
- en: With that, Shelly took leave.
  prefs: []
  type: TYPE_NORMAL
- en: '"Hey Shawn!" Mike began, "are you all set to begin?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yeah, all set! So what are we working on?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Well we are about to start working on an app using [https://openlibrary.org/](https://openlibrary.org/).
    Open Library is collection of the world''s classic literature. It''s an open,
    editable library catalog for all the books. It''s an initiative under [https://archive.org/](https://archive.org/)
    and lists free book titles. We need to build an app to display the most recent
    changes in the record by Open Library. You can call this the **Activities** page.
    Many people contribute to Open Library. We want to display the changes made by
    these users to the books, addition of new books, edits, and so on, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![When Shawn meets Mike and ReactJS](img/4730_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Oh nice! What are we using to build it?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Open Library provides us with a neat REST API that we can consume to fetch
    the data. We are just going to build a simple page that displays the fetched data
    and format it for display. I''ve been experimenting and using ReactJS for this.
    Have you used it before?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Nope. However, I have heard about it. Isn''t it the one from Facebook and
    Instagram?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"That''s right. It''s an amazing way to define our UI. As the app isn''t going
    to have much of logic on the server or perform any display, it is an easy option
    to use it."'
  prefs: []
  type: TYPE_NORMAL
- en: '"As you''ve not used it before, let me provide you a quick introduction."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Have you tried services such as JSBin and JSFiddle before?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"No, but I have seen them."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Cool. We''ll be using one of these, therefore, we don''t need anything set
    up on our machines to start with."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s try on your machine", Mike instructed. "Fire up [http://jsbin.com/?html,output](http://jsbin.com/?html,output)"'
  prefs: []
  type: TYPE_NORMAL
- en: '"You should see something similar to the tabs and panes to code on and their
    output in adjacent pane."'
  prefs: []
  type: TYPE_NORMAL
- en: '![When Shawn meets Mike and ReactJS](img/4730_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Go ahead and make sure that the **HTML**, **JavaScript**, and **Output** tabs
    are clicked and you can see three frames for them so that we are able to edit
    HTML and JS and see the corresponding output."'
  prefs: []
  type: TYPE_NORMAL
- en: '"That''s nice."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yeah, good thing about this is that you don''t need to perform any setups.
    Did you notice the **Auto-run JS** option? Make sure its selected. This option
    causes JSBin to reload our code and see its output so that we don''t need to keep
    saying **Run with JS** to execute and see its output."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Ok."'
  prefs: []
  type: TYPE_NORMAL
- en: Requiring React library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Alright then! Let''s begin. Go ahead and change the title of the page, to
    say, `React JS Example`. Next, we need to set up and we require the React library
    in our file."'
  prefs: []
  type: TYPE_NORMAL
- en: '"React''s homepage is located at [http://facebook.github.io/react/](http://facebook.github.io/react/).
    Here, we''ll also locate the downloads available for us so that we can include
    them in our project. There are different ways to include and use the library.'
  prefs: []
  type: TYPE_NORMAL
- en: We can make use of bower or install via npm. We can also just include it as
    an individual download, directly available from the fb.me domain. There are development
    versions that are full version of the library as well as production version which
    is its minified version. There is also its version of add-on. We'll take a look
    at this later though."
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s start by using the development version, which is the unminified version
    of the React source. Add the following to the file header:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '"Done".'
  prefs: []
  type: TYPE_NORMAL
- en: '"Awesome, let''s see how this looks."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Building our first component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"So Shawn, we are all set to begin. Let''s build our very first React App.
    Go ahead and add the following code to the JavaScript section of JSBin:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '"Here it is. You should see the output section of the page showing something
    similar to the following:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '"Nice Mike. I see that we are making use of this React object to create classes?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"That''s right. We are creating, what are called as Components in React."'
  prefs: []
  type: TYPE_NORMAL
- en: '"The entry point to the ReactJS library is the React object. Once the `react.js`
    library is included, it is made available to us in the global JavaScript namespace."'
  prefs: []
  type: TYPE_NORMAL
- en: '"`React.createClass` creates a component with the given specification. The
    component must implement the render method that returns a single child element
    as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: React will take care of calling the render method of the component to generate
    the HTML."
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even if the render method needs to return a single child, that single child
    can have an arbitrarily deep structure to contain full-fledged HTML page parts.
  prefs: []
  type: TYPE_NORMAL
- en: '"Here, we are making use of `React.createElement` to create our content. It''s
    a singleton method that allows us to create a `div` element with the "`Welcome
    to Adequate, Mike!` contents. `React.createElement` creates a `ReactElement`,
    which is an internal representation of the DOM element used by React. We are passing
    null as the second argument. This is used to pass and specify attributes for the
    element. Right now, we are leaving it as blank to create a simple div."'
  prefs: []
  type: TYPE_NORMAL
- en: '"The type of `ReactElement` can be either a valid HTML tag name like `span`,
    `div`, `h1` and so on or a component created by `React.createClass` itself."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Once we are done creating the component, it can be displayed using the `React.render`
    method as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, a new `ReactElement` is created for the `App` component that we have
    created previously and it is then rendered into the HTML element—`document.body`.
    This is called the `mountNode`, or mount point for our component, and acts as
    the root node. Instead of passing `document.body` directly as a container for
    the component, any other DOM element can also be passed."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Mike, go ahead and change the text passed to the div as `Hello React World!`.
    We should start seeing the change and it should look something similar to the
    following:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '"Nice."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Mike, while constructing the first component, we also got an overview of React''s
    top-level API, that is, making use of `React.createClass`, `React.createElement`,
    and `React.render`."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Now, the component that we just built to display this hello message is pretty
    simple and straightforward. However, the syntax can get challenging and it keeps
    growing when building complex things. Here''s where JSX comes in handy."'
  prefs: []
  type: TYPE_NORMAL
- en: '"JSX?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"JSX is an XML-like syntax extension to ECMAScript without any defined semantics.
    It has a concise and familiar syntax with plain HTML and it''s familiar for designers
    or non-programmers. It can also be used directly from our JavaScript file!"'
  prefs: []
  type: TYPE_NORMAL
- en: '"What? Isn''t it bad?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Well, time to rethink the best practices. That''s right, we will be bringing
    our view and its HTML in the JavaScript file!"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s see how to start using it. Go ahead and change the contents of our
    JavaScript file as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '"As you can see, what we did here was that instead of using `createElement`,
    we directly wrote the `div` tag. This is very similar to writing HTML markup directly.
    It also works right out of the JavaScript file."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Mike, the code is throwing some errors on JSBin."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Oh, right. We need to make use of the JSX transformer library so that React
    and the browser can understand the syntax. In our case, we need to change the
    type of JavaScript, which we are using, to be used to interpret this code. What
    we need to do is change from **JavaScript** to **JSX (React)**, from the dropdown
    on the JavaScript frame header, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building our first component](img/4730_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"That should do it."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Looks good, Mike. It''s working."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Now you will see something similar to the following:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Back to work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"That''s good to start, Shawn. Let''s move back to the task of building our
    app using Open Library''s Recent changes API now. We already have a basic prototype
    ready without using ReactJS."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We will be slowly replacing parts of it using ReactJS."'
  prefs: []
  type: TYPE_NORMAL
- en: '"This is how the information is displayed right now, using server-side logic,
    as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '![Back to work](img/4730_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"First task that we have is to display the information retrieved from the Open
    Library Recent Changes API in a table using ReactJS similar to how it''s displayed
    right now using server-side."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We will be fetching the data from the Open Library API similar to the following:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '"Let''s use this to prototype our app for now. Before that, let''s take a look
    at the simple HTML version of this app. In our `React.render` method, we start
    returning a table element, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '"This should start displaying our table with three rows. Now, go ahead and
    add a heading at top of this table from the `React App`, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '"There, something like that?" asked Shawn. "Oh, that didn''t work."'
  prefs: []
  type: TYPE_NORMAL
- en: '"That''s because React expends our render method to always return a single
    HTML element. In this case, after you added the `h1` heading, our app started
    returning two elements, which is wrong. There''ll be many cases when you will
    come across this. To avoid this, just wrap the elements in a `div` or `span` tag.
    The main idea is that we just want to return a single element from the render
    method."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it. Something like this?"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Displaying static data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Awesome! Looks good. Now, let''s change our table that is displaying static
    information, to start fetching and displaying this information in the rows from
    the JSON data that we had before."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We''ll define this data in the render method itself and see how we would be
    using it to create our table. We''ll basically just be looping over the data and
    creating elements, that is, table rows in our case, for the individual data set
    of events. Something like this:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '"Notice how we are using `{}` here. `{}` is used in JSX to embed dynamic information
    in our view template. We can use it to embed the JavaScript objects in our views,
    for example, the name of a person or heading of this table. As you can see, what
    we are doing here is using the `map` function to loop over the dataset that we
    have. Then, we are returning a table row, constructed from the information available
    from the row object – the details about when the event was created, who created
    it and event description."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We are using JSX syntax here to construct the rows of table. However, it is
    not used as the final return value from render function."'
  prefs: []
  type: TYPE_NORMAL
- en: '"That''s correct, Shawn. React with JSX allows us to arbitrarily create elements
    to be used in our views, in our case, creating it dynamically from the dataset
    that we have. The rows variable now contains a part of view that we had used at
    a different place. We can also build another component of the view on top of it."'
  prefs: []
  type: TYPE_NORMAL
- en: '"That''s the beauty of it. React allows us to dynamically create, use, and
    reuse the parts of views. This is helpful to build our views, part by part, in
    a systematic way."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Now, after we are done with building our rows, we can use them in our final
    render call."'
  prefs: []
  type: TYPE_NORMAL
- en: '"So now, the return statement will look something similar to the following:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '"Here''s how the complete render method now looks after building up rows with
    static data:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Displaying static data](img/4730_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"That''s starting to look like where we want to reach."'
  prefs: []
  type: TYPE_NORMAL
- en: Passing data to components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Do we define our data and everything else in the render method?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"I was just getting to that. Our component should not contain this information.
    The information should be passed as a parameter to it."'
  prefs: []
  type: TYPE_NORMAL
- en: '"React allows us to pass the JavaScript objects to components. These objects
    would be passed when we call the `React.render` method and create an instance
    of the `<App>` component. The following is how we can pass objects to it:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '"Notice how are using the `<App/>` syntax here, instead of `createElement`.
    As I mentioned previously, we can create elements from our components and represent
    them using JSX as done earlier."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '"The preceding code becomes the following:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '"That looks even more cleaner", said Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"As you can see, we are passing the title for our table as the `title` parameter,
    followed by the contents of the title. React makes this data passed to the component
    as something called `props`. The `props`, short for properties, are a component''s
    configuration options that are passed to the component when initializing it."'
  prefs: []
  type: TYPE_NORMAL
- en: '"These `props` are just plain JavaScript objects. They are made accessible
    to us within our component via the `this.props` method. Let''s try accessing this
    from the `render` method, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '"That should start logging the title that we passed to the component to the
    console."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Now, let''s try to abstract the headings as well as the JSON data out of the
    `render` method and start passing them to the component, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '"There. We pulled the data out of the `render` method and are now passing it
    to our component."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We defined the dynamic headers for our table that we will start using in the
    component."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Here the curly braces, used to pass the parameters to our component, are used
    to specify the JavaScript expressions that will be evaluated and then used as
    attribute values."'
  prefs: []
  type: TYPE_NORMAL
- en: '"For example, the preceding JSX code will get translated into JavaScript by
    React, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '"We will revisit `props` later. However, right now, let''s move on to complete
    our component."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Now, using the passed data and headings via `props`, we need to generate the
    table structure in the app''s `render` method."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s generate the headings first, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '"Notice, how we are using `this.props.headings` to access the passed information
    about headings. Now let''s create rows of the table similar to what we were doing
    earlier:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '"Finally, let''s put the headings and rows together in our table."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '"The table is now displayed with the passed dynamic headers and JSON data."'
  prefs: []
  type: TYPE_NORMAL
- en: '"The headings can be changed to `["Last change at", "By Author", "Summary"]`
    and the table in our view will get updated automatically."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Alright, Shawn, go ahead and add a title to our table. Make sure to pass it
    from the props."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Ok," said Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Now, the render method will be changed to the following:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '"While the call to `React.render` will change to the following:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '"Awesome. You are starting to get a hang of it. Let''s see how this looks in
    completion shall we?"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '"We should again start seeing something as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '![Passing data to components](img/4730_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Here we have it, Shawn. Our very first component using React!", said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"This looks amazing. I can''t wait to try out more things in React!", exclaimed
    Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started with React and built our first component. In the
    process, we studied the top-level API of React to construct components and elements.
    We used JSX to construct the components. We saw how to display static information
    using React and then gradually replaced all the static information with dynamic
    information using props. In the end, we were able to tie all ends together and
    display mock data in the format that is returned from Open Library's Recent Changes
    API using React.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive deep into JSX internals and continue building
    our application for Recent Changes API.
  prefs: []
  type: TYPE_NORMAL
