["```js\nyarn add -D jest\n```", "```js\n{\n  \"presets\": [\"next/babel\"]\n}\n```", "```js\nimport { \n  trimTextToLength, \n  slugify, \n  composeArticleSlug, \n  extractArticleIdFromSlug\n} from '../index';\n```", "```js\nconst str = \"The quick brown fox jumps over the lazy dog\";\n```", "```js\nconst str = \"The quick brown fox jumps over the lazy dog\";\nconst cut = trimTextToLength(str, 5);\ncut === \"The q...\" // true\n```", "```js\ndescribe(\"trimTextToLength\", () => {\ntest('Should cut a string that exceeds 10 characters', () => {\n    const initialString = 'This is a 34 character long \n     string';\n    const cutResult = trimTextToLength(initialString, 10);\n    expect(cutResult).toEqual('This is a ...');\n  });\n});\n```", "```js\ndescribe(\"trimTextToLength cuts a string when it's too long, () => {\n  test('Should cut a string that exceeds 10 characters', () \n    => {\n    const initialString = 'This is a 35 characters long \n     string';\n    const cutResult = trimTextToLength(initialString, 10);\n    expect(cutResult).toEqual('This is a ...');\n  });\ntest(\"Should not cut a string if it's shorter than 10 \n  characters\",\n    () => {\n        const initialString = '7 chars';\nconst cutResult = trimTextToLength(initialString, \n         10);\n        expect(cutResult).toEqual('7 chars');\n    }\n  );\n});\n```", "```js\ndescribe('slugify makes a string URL-safe', () => {\n  test('Should convert a string to URL-safe format', () => \n   {\n    const initialString = 'This is a string to slugify';\n    const slugifiedString = slugify(initialString);\n    expect(slugifiedString).\n      toEqual('this-is-a-string-to-slugify');\n   });\n  test('Should slugify a string with special \n    characters', () => {\n    const initialString = 'This is a string to \n    slugify!@#$%^&*()+';\n    const slugifiedString = slugify(initialString);\n    expect(slugifiedString).\n      toEqual('this-is-a-string-to-slugify');\n  });\n});\n```", "```js\n\"scripts\": {\n  \"dev\": \"next dev\",\n  \"build\": \"next build\",\n  \"start\": \"next start\",\n  \"test\": \"jest\"\n},\n```", "```js\nyarn add @testing-library/react\n```", "```js\nexport const article = {\n  id: 'u12w3o0d',\n  title: 'Healthy summer melon-carrot soup',\n  body: 'Lorem ipsum dolor sit amet, consectetur adipiscing \n   elit. Morbi iaculis, felis quis sagittis molestie, mi \n   sem lobortis dui, a sollicitudin nibh erat id ex.',\n  author: {\n    id: '93ksj19s',\n    name: 'John Doe',\n  },\n  image: {\n    url: 'https://images.unsplash.com/photo-1629032355262-\n     d751086c475d',\n    author: 'Karolin Baitinger',\n  },\n};\n```", "```js\nimport { render, screen } from '@testing-library/react';\nimport ArticleCard from '../index';\nimport { trimTextToLength } from '../../../utils';\nimport { article } from '../tests/mock';\n```", "```js\n describe('ArticleCard', () => {\n   test('Generated link should be in the correct format', () \n     => {\n        const component = render(<ArticleCard {...article} />);\n        const link = component.getByRole('\n        link').getAttribute('href');\n        expect(link).toBe(\n        '/articles/healthy-summer-meloncarrot-soup-u12w3o0d'\n     );\n  });\n});\n```", "```js\nThe error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.\nConsider using the \"jsdom\" test environment.\n```", "```js\n/**\n * @jest-environment jsdom\n */\n```", "```js\ndescribe('ArticleCard', () => {\n  test('Generated link should be in the correct format', () \n    => {\n       const component = render(<ArticleCard {...article} />);\n       const link = component.getByRole('link')\n         .getAttribute('href');\n       expect(link).toBe(\n       '/articles/healthy-summer-meloncarrot-soup-u12w3o0d'\n    );\n  });\ntest('Generated summary should not exceed 100 \n   characters',\n    async () => {\n      render(<ArticleCard {...article} />);\n      const summary = screen.getByText(\n        trimTextToLength(article.body, 100)\n      );\n    expect(summary).toBeDefined();\n  });\n});\n```", "```js\nyarn add -D cypress\n```", "```js\n\"scripts\": {\n  \"dev\": \"next dev\",\n  \"build\": \"next build\",\n  \"start\": \"next start\",\n  \"test\": \"jest\",\n  \"cypress\": \"cypress run\",\n},\n```", "```js\n{\n  \"baseUrl\": http://localhost:3000\n}\n```", "```js\n    import data from '../../data/articles';\n    export default (req, res) => {\n      res.status(200).json(data);\n    };\n    ```", "```js\n    import data from '../../../data/articles';\n    export default (req, res) => {\n      const id = req.query.id;\n      const requestedArticle = data.find(\n        (article) => article.id === id\n      );\n      requestedArticle\n        ? res.status(200).json(requestedArticle)\n        : res.status(404).json({ error: 'Not found' });\n    };\n    ```", "```js\ndescribe('articles APIs', () => {\n  test('should correctly set application/json header', () \n   => {\n    cy.request('http://localhost:3000/api/articles')\n      .its('headers')\n      .its('content-type')\n      .should('include', 'application/json');\n  });\n});\n```", "```js\ndescribe('articles APIs', () => {\n  test('should correctly set application/json header', () \n   => {\n    cy.request('http://localhost:3000/api/articles')\n      .its('headers')\n      .its('content-type')\n      .should('include', 'application/json');\n  });\n  test('should correctly return a 200 status code', () => {\n    cy.request('http://localhost:3000/api/articles')\n      .its('status')\n      .should('be.equal', 200);\n  });\n});\n```", "```js\ntest('should correctly return a list of articles', (done) => {\n  cy.request('http://localhost:3000/api/articles')\n    .its('body')\n    .each((article) => {\n      expect(article)\n        .to.have.keys('id', 'title', 'body', 'author', \n          'image');\n      expect(article.author).to.have.keys('id', 'name');\n      expect(article.image).to.have.keys('url', 'author');\n        done();\n    });\n});\n```", "```js\ntest('should correctly return a an article given an ID', (done) => {\n  cy.request('http://localhost:3000/api/article?id=u12w3o0d')\n    .then(({ body }) => {\n      expect(body)\n        .to.have.keys('id', 'title', 'body', 'author', \n         'image');\n      expect(body.author).to.have.keys('id', 'name');\n      expect(body.image).to.have.keys('url', 'author');\n      done();\n  });\n});\n```", "```js\ntest('should return 404 when an article is not found', () => {\n  cy.request({\n    url: 'http://localhost:3000/api/article?id=unexistingID',\n    failOnStatusCode: false,\n  })\n  .its('status')\n  .should('be.equal', 404);\n});\n```", "```js\nyarn add -D start-server-and-test\n```", "```js\n\"scripts\": {\n  \"dev\": \"next dev\",\n  \"build\": \"next build\",\n  \"start\": \"next start\",\n  \"test\": \"jest\",\n  \"cypress\": \"cypress run\",\n  \"e2e\": \"start-server-and-test 'yarn build && yarn start' \n   http://localhost:3000 cypress\"\n},\n```", "```js\ndescribe('Navigation', () => {\n  test('should correctly navigate to the article page', () \n   => {\n    cy.visit('http://localhost:3000/');\n    cy.get('a[href*=\"/articles\"]').first().click();\n    cy.url().should('be.equal', \n    'http://localhost:3000/articles/healthy-summer-meloncarrot-\n     soup-u12w3o0d');\n    cy.get('h1').contains('Healthy summer melon-carrot \n     soup');\n  });\n  test('should correctly navigate back to the homepage', () \n   => {\n    cy.visit('http://localhost:3000/articles/\n      healthy-summer-meloncarrot-soup-u12w3o0d');\n    cy.get('a[href*=\"/\"]').first().click();\n    cy.url().should('be.equal', 'http://localhost:3000/');\n    cy.get('h1').contains('My awesome blog');\n  });\n});\n```"]