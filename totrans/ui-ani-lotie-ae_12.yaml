- en: '*Chapter 9*: Let’s Do Some Magic: Integrating Your First Lottie Animation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our app is now ready to display Lottie animations on its screens. In this chapter,
    we will learn how to integrate a Lottie file, whether downloaded from [https://lottiefiles.com/](https://lottiefiles.com/)
    or generated by us in Adobe **After Effects** (**AE**). The requirements to perform
    this integration successfully are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Have a JSON file with the Lottie animation exported from AE using the Bodymovin
    plugin or downloaded from LottieFiles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have the React Native project ready after having followed the steps described
    in [*Chapter 8*](B17930_08_ePub.xhtml#_idTextAnchor156), *Installing lottie-react-native*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The final result will be our app displaying the provided Lottie animation on
    the initial screen. The topics we will cover in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Lottie file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a Lottie file in a React Native app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `lottie-react-native` in your TypeScript app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding documentation for `lottie-react-native`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using remote Lottie files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the Lottie file elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in previous chapters, Lottie files are JSON representations of our
    AE animations that have been transformed and exported using the Bodymovin plugin.
    As a JSON object, we can open it in a text editor and see that Lottie files are
    just a collection of keys and values storing the assets that need to be rendered
    and to which transformations should be applied on each frame of the animation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at a sample Lottie file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Lottie files are usually much larger than this one, but we have summarized
    it for educational purposes. Let''s now go through the most important values in
    this sample file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"v"`: Specifies which version of the file this one is. It has no direct effect
    on the animation as it serves as mere information for developers and designers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"meta"`: General information about the file such as name and license, for
    example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"fr"`: Also known as **frame rate**, this represents the number of frames
    per second that the animation should be rendered in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"w"`: The width of the animation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"h"`: The height of the animation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"assets"`: A list of external assets that will be shown within the animation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"layers"`: Details for each of the AE layers used in our animation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"layers/ks"`: Information about how to display a specific layer on a specific
    frame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"layers/shapes"`: Shapes used on each layer, including their metadata and
    rendering options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In general, it's best to modify our Lottie animations on AE, but changing values
    in the exported Lottie JSON file is possible and may affect the animation itself.
  prefs: []
  type: TYPE_NORMAL
- en: Using a Lottie file in a React Native app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have our animation exported into a Lottie file, we can integrate it
    into any React Native app and start the animation on any iOS or Android device.
    In this section, we will show how this is done on the main screen of a sample
    blank React Native app, but the process can be extrapolated into any screen or
    component within any React Native app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we have to do is store our Lottie file in a folder inside our
    app. We need to make sure we can import files from this folder in our React components
    and screens. For example, we could store our Lottie files in the `assets` folder,
    where all images used in our app are stored:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Storing animation in the app folder structure'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17930_09_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.1 – Storing animation in the app folder structure
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we stored a JSON file named `myLottieFile.json` inside the `assets/animations`
    folder so it''s accessible through a simple `import` statement: `require(''./assets/animations/myLottieFile.json'')`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now see an example of how `App.js` would look using the integrated Lottie
    file in the proposed folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'In this file, we are displaying our Lottie animation on the main screen so
    users can see it just after opening the app. There are a number of things we should
    consider about this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SafeAreaView` is used to prevent the animation from going under the notch
    on notched-screen devices (for example, the iPhone 13).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having `LottieView` inside a sized container is important to prevent the animation
    from resizing or being cropped. That's why we use a `100%` width and height-sized
    view containing the `LottieView` component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LottieView` is a React component that will render the Lottie animation. It
    requires a source prop to import the JSON file containing the animation. It also
    accepts a number of properties to control and configure the animation. We will
    take a deeper look into these properties in this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The props passed to the `LottieView` components are also worth noting:'
  prefs: []
  type: TYPE_NORMAL
- en: '`source`: This needs to receive the imported JSON file for the animation. The
    path for importing the animation, as it works with the `require` statement in
    JavaScript, can be absolute or relative to the parent component/screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoPlay`: When specified (or set to `true`), this makes the app start playing
    right after the component is mounted. This is normally used when the parent component
    makes sense only when the animation is running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loop`: When specified (or set to `true`), this will repeat the animation until
    the component gets unmounted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The former component example is the simplest representation of a Lottie animation
    being rendered inside a React Native app but it's a good example of how important
    it is to place the `LottieView` component in a sized container.
  prefs: []
  type: TYPE_NORMAL
- en: If your app uses classes instead of functional components, you should know that
    `lottie-react-native` can still be imported and used in a very similar fashion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see an example of a Lottie file being integrated in to a class-based
    React native app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Similar to the previous example, the main difference in class-based apps is
    the need to return the rendering component inside the `render` method. One of
    the basic props (`colorFilters`) allows users to control and change the colors
    of the layers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how this prop can be used to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the `colorFilters` prop in the `LottieView` component is modifying
    the colors of two layers (which should have been defined with the same name in
    AE) to render them as black, no matter which color they were defined as during
    the animation creation process.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript has become the de facto language for modern React Native apps. In
    the previous example, we used plain JavaScript, but the `LottieView` component
    is TypeScript-ready.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will show what caveats a user may find when using `lottie-react-native`
    in their TypeScript applications.
  prefs: []
  type: TYPE_NORMAL
- en: Using lottie-react-native in your TypeScript app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `lottie-react-native` library includes types, so `LottieView` components
    can be easily integrated with TypeScript applications. These types are defined
    in the file found in the `lottie-react-native/src/js/index.d.ts` (type definition
    file) path inside the library's code. They are also accessible in the library's
    repository through [https://github.com/lottie-react-native/lottie-react-native/blob/master/src/js/index.d.ts](https://github.com/lottie-react-native/lottie-react-native/blob/master/src/js/index.d.ts).
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides the definition of the props and methods applicable to `LottieView`,
    this file includes types for the following objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AnimationObject`: Types for the Lottie JSON file when it gets translated to
    a JavaScript object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ColorFilter`: Types for the filters that can be applied to change colors in
    the animation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextFilterIOS`: Types for the filters that can be applied to change fonts
    on iOS devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextFilterAndroid`: Types for the filters that can be applied to change fonts
    on Android devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The main caveat when using `lottie-react-native` concerns the way we import
    the Lottie component (`LottieView`) in our app. Depending on how TypeScript is
    configured in our project, we would need to import it in a different way:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If your `tsconfig.json` file defines `"esModuleInterop": false`, you will need
    to use `require` to import `LottieView` in the following way: `const LottieView
    = require("lottie-react-native");`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If your `tsconfig.json` file defines `"esModuleInterop": true` and `"allowSyntheticDefaultImports":
    true` (`true` is the default value), you will need to import `LottieView` in the
    standard ES6 way: `import LottieView from "lottie-react-native";`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s see how both ways could be implemented in the sample code we developed
    previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we will see where to find the best resources to work around
    other caveats when using the `lottie-react-native` library.
  prefs: []
  type: TYPE_NORMAL
- en: Finding documentation for lottie-react-native
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Getting stuck when using a third-party library might be a frustrating experience
    but in the case of `lottie-react-native`, there is a large knowledge base accessible
    on the public repository of the library: [https://github.com/lottie-react-native/](https://github.com/lottie-react-native/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This knowledge base includes the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`lottie-react-native` (at a basic level). This file serves as a good introduction
    to the library and should be the first resource to check when looking for help
    related to library usage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LottieView` component to control the animations in our apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TypeScript caveats** ([https://github.com/lottie-react-native/lottie-react-native/blob/master/docs/typescript.md](https://github.com/lottie-react-native/lottie-react-native/blob/master/docs/typescript.md)):
    As we saw in the *Using lottie-react-native in your TypeScript app* section, TypeScript
    can be difficult to integrate. This document explains what problems we might run
    into and how to work around them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lottie-react-native`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CHANGELOG** ([https://github.com/lottie-react-native/lottie-react-native/blob/master/CHANGELOG.md](https://github.com/lottie-react-native/lottie-react-native/blob/master/CHANGELOG.md)):
    A list of the versions released for the library. This document is very useful
    when having issues with a specific feature or platform so we can revert/update
    to versions where those issues don''t exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contributing guide** ([https://github.com/lottie-react-native/lottie-react-native/blob/master/CONTRIBUTING.md](https://github.com/lottie-react-native/lottie-react-native/blob/master/CONTRIBUTING.md)):
    This document explains how to request help or contribute code updates to the open
    source repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pull requests** ([https://github.com/lottie-react-native/lottie-react-native/pulls](https://github.com/lottie-react-native/lottie-react-native/pulls)):
    This is the list of contributions that are proposed to the library. Users can
    use this list to find out about upcoming fixes or discussions about bugs and features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Issues** ([https://github.com/lottie-react-native/lottie-react-native/issues](https://github.com/lottie-react-native/lottie-react-native/issues)):
    Here, library users share their problems, bugs, or questions about the library.
    This is a good resource to search through when getting problems with library usage
    or integration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lottie for iOS repository** ([https://github.com/airbnb/lottie-ios](https://github.com/airbnb/lottie-ios)):
    A source of information for the iOS-specific library for Lottie. This can be used
    to search for iOS-specific issues or features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lottie for Android repository** ([https://github.com/airbnb/lottie-android](https://github.com/airbnb/lottie-android)):
    A source of information for the Android-specific library for Lottie. This can
    be used to search for Android-specific issues or features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we have all the resources to get started, let's import and use our first
    Lottie file in our app.
  prefs: []
  type: TYPE_NORMAL
- en: Using remote Lottie files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For optimal performance, animations should be included locally within the app's
    folder structure but, in some cases, it could be useful to use a remote JSON file
    as a Lottie animation to be rendered in our React Native apps. For these cases,
    `lottie-react-native` allows us to transparently specify a remote URL as the source
    of the animation through the source prop passed to `LottieView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how our initial example would look if we used a remote animation
    instead of a local one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: As this example shows, only the `source` property needs to change its value.
    In this case, we replaced the `require` statement with a simple URL that points
    to a JSON Lottie animation that is hosted on a public server. For external sources,
    users need to make sure that the app will always have access to the external file,
    as failing to reach the remote URL would show an empty space instead of showing
    the animation itself.
  prefs: []
  type: TYPE_NORMAL
- en: Assets (such as images) can also be used inside Lottie files and rendered with
    `lottie-react-native`. Let's take a look at how this behavior can be achieved
    through code.
  prefs: []
  type: TYPE_NORMAL
- en: Using Lottie files with assets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Lottie animations may contain external images displayed in them to make richer
    and more complex animations. When using AE and the Bodymovin plugin to create
    animations, the exported JSON may have various assets to rely on, such as the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: 'In these cases, our app needs to include the files inside its binary, so you
    will need to add the files to the project and re-build it from scratch running
    `yarn ios` or `yarn android` so the app is compiled together with the newly added
    assets being used in the animation. Adding the assets to the project differs depending
    on which platform we are targeting:'
  prefs: []
  type: TYPE_NORMAL
- en: '`resources` folder you can find in the right-hand column, and click on **Add
    file to "LottieReactNative"…** to select the images required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Adding animation assets in Xcode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17930_09_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.2 – Adding animation assets in Xcode
  prefs: []
  type: TYPE_NORMAL
- en: '`[PROJECT FOLDER]/android/app/src/main/assets`. It is a good practice to establish
    a `lottie` subdirectory and then a folder for each animation. You''ll need to
    refer to that folder in the `imageAssetsFolder` prop for the animation, using
    its relative path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a look at an example of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: 'It is possible to rename the assets once you have them in your project, but
    you will need to modify the JSON file containing the Lottie animation too in order
    to identify the asset file by its new name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: With this, we will have our shiny assets loaded into our animations, making
    them fully capable of rendering external images.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about the way Lottie animations can be loaded
    into React Native, using basic integrations such as TypeScript types, and adding
    external assets into our animations. This gives us the ability to display complex
    animations inside our React Native apps, but what happens if we need to be in
    control of the playback (for example, tell the animation to start/stop based on
    events happening in the app)?
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to the next chapter to discover how controlling Lottie animations
    in `lottie-react-native` is done.
  prefs: []
  type: TYPE_NORMAL
