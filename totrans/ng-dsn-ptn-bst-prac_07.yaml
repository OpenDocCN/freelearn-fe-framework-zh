- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Routes and Routers
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由和路由器
- en: A `index.html` page and, from there, all the content of the web application
    is rendered using JavaScript.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `index.html` 页面，并且从那里，所有 Web 应用程序的内容都使用 JavaScript 渲染。
- en: From the user’s perspective, however, they are interacting with the application
    on different interfaces (or pages) such as the login screen, the home page, and
    the purchase form. Technically, they are all rendered on the `index.html` page
    but, for the user, they are different experiences.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，从用户的角度来看，他们正在与登录屏幕、主页和购买表单等不同界面（或页面）进行交互。技术上，它们都在 `index.html` 页面上渲染，但对于用户来说，它们是不同的体验。
- en: The mechanism responsible for this flow of interfaces that the client interacts
    with in a SPA is the routing engine. The Angular framework has this feature out
    of the box and, in this chapter, we will explore it in detail.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 负责这种客户端在单页应用（SPA）中与界面交互流程的机制是路由引擎。Angular 框架自带此功能，在本章中，我们将详细探讨它。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Routes and navigation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由和导航
- en: Defining an error page and title
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义错误页面和标题
- en: Dynamic routes – wildcards and parameters
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态路由 – 通配符和参数
- en: Securing routes – guards
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护路由 – 守卫
- en: Optimizing the experience – Resolve
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化体验 – 解析
- en: By the end of the chapter, you will be able to use Angular’s routing mechanisms
    to create navigation flows that will improve your users’ experience.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够使用 Angular 的路由机制创建改进用户体验的导航流程。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the instructions in this chapter, you’ll need the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章的说明，您需要以下内容：
- en: Visual Studio Code ([https://code.visualstudio.com/Download](https://code.visualstudio.com/Download))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code ([https://code.visualstudio.com/Download](https://code.visualstudio.com/Download))
- en: Node.js 18 or higher ([https://nodejs.org/en/download/](https://nodejs.org/en/download/))
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 18 或更高版本 ([https://nodejs.org/en/download/](https://nodejs.org/en/download/))
- en: The code files for this chapter are available at [https://github.com/PacktPublishing/Angular-Design-Patterns-and-Best-Practices/tree/main/ch7](https://github.com/PacktPublishing/Angular-Design-Patterns-and-Best-Practices/tree/main/ch7).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可在 [https://github.com/PacktPublishing/Angular-Design-Patterns-and-Best-Practices/tree/main/ch7](https://github.com/PacktPublishing/Angular-Design-Patterns-and-Best-Practices/tree/main/ch7)
    找到。
- en: While following this chapter, remember to run the backend of the application
    found in the `gym-diary-backend` folder with the `npm` `start` command.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在遵循本章内容时，请记得使用 `npm start` 命令运行位于 `gym-diary-backend` 文件夹中的应用程序的后端。
- en: Routes and navigation
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由和导航
- en: 'Let’s improve our project by creating a home page with a simplified menu for
    our interface, thereby exploring the possibilities we can have with Angular routes.
    In the command line, we’ll use the Angular CLI to create a new module and the
    component page:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建一个具有简化菜单的用户界面主页来改进我们的项目，从而探索我们可以使用 Angular 路由实现的可能。在命令行中，我们将使用 Angular
    CLI 创建一个新的模块和组件页面：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding snippet, we first create a new module, and by using the `--routing`
    parameter, we instruct the Angular CLI to create the module along with the routing
    file. The following command creates the component we are working on:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们首先创建了一个新的模块，并通过使用 `--routing` 参数，我们指示 Angular CLI 创建模块及其路由文件。以下命令创建了我们在工作的组件：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For more details about the Angular CLI and modules, you can refer to [*Chapter
    2*](B19562_02.xhtml#_idTextAnchor081), *Organizing* *Your Application*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 Angular CLI 和模块的详细信息，您可以参考 [*第 2 章*](B19562_02.xhtml#_idTextAnchor081)，*组织*
    *您的应用程序*。
- en: 'First, let’s create the template in the HTML file of the component we just
    created:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们在我们刚刚创建的组件的 HTML 文件中创建模板：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this template example, we are using the `<aside>` and `<main>` HTML elements
    to create the menu and the area where the selected pages will be projected. For
    this purpose, we are using the `<router-outlet>` directive to indicate the correct
    area to Angular.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模板示例中，我们使用 `<aside>` 和 `<main>` HTML 元素来创建菜单和将要投影所选页面的区域。为此，我们使用 `<router-outlet>`
    指令来指示 Angular 正确的区域。
- en: 'To make the home page the main page, we need to modify the main routing module
    of our application in the `app-routing.module.ts` file:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要使主页成为主页面，我们需要修改我们的应用程序在 `app-routing.module.ts` 文件中的主要路由模块：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `routes` array is the main element of the Angular routing mechanism. We
    define objects in it that correspond to the routes our users will have access
    to. In this example, we defined that the root route (`"/"`) of our application
    will redirect the user to the `home` route using the `redirectTo` property.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`routes` 数组是 Angular 路由机制的主要元素。我们在其中定义对象，这些对象对应于用户将能够访问的路由。在这个例子中，我们定义了应用程序的根路由（`"/"`）将通过
    `redirectTo` 属性重定向用户到 `home` 路由。'
- en: Here, we should use the `pathMatch` property with the `"full"` value. This is
    because it determines whether the Angular route engine will match the first route
    that matches the pattern (the default behavior, which is `"prefix"`), or whether
    it will match the entire route.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们应该使用 `pathMatch` 属性，并设置为 `"full"` 值。这是因为它决定了 Angular 路由引擎是否会匹配第一个与模式匹配的路由（默认行为，即
    `"prefix"`），或者是否会匹配整个路由。
- en: In the second object, we are defining the `home` route and loading the `Home`
    module lazily. For more details about lazy loading, you can refer to [*Chapter
    2*](B19562_02.xhtml#_idTextAnchor081), *Organizing* *Your Application*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个对象中，我们正在定义 `home` 路由并懒加载 `Home` 模块。有关懒加载的更多详细信息，您可以参考 [*第 2 章*](B19562_02.xhtml#_idTextAnchor081)，*组织*
    *您的应用程序*。
- en: When running our application, we have the menu and the area where the pages
    of our workout diary will be displayed.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行我们的应用程序时，我们有菜单和显示我们的锻炼日记页面的区域。
- en: 'To include the workout diary on the home page, we need to modify the `HomeRoutingModule`
    module:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要在主页上包含锻炼日记，我们需要修改 `HomeRoutingModule` 模块：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this routes file, similar to the previous one, we define that the main route
    will direct to the `HomeComponent` component. However, here, we want the routes
    and modules to be rendered in the *router outlet* of the component instead of
    `AppModule`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个路由文件中，类似于上一个文件，我们定义了主路由将导向 `HomeComponent` 组件。然而，在这里，我们希望路由和模块在组件的 *router
    outlet* 中渲染，而不是 `AppModule`。
- en: Here, the `children` property comes into play in which we will define the nested
    routes for this module. Since we want to use `DiaryComponent`, we are performing
    lazy loading of its module. This follows the Angular best practice of separating
    functional modules in the application.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`children` 属性发挥作用，我们将定义该模块的嵌套路由。由于我们想使用 `DiaryComponent`，我们正在对该模块进行懒加载。这遵循了
    Angular 在应用程序中分离功能模块的最佳实践。
- en: Now, when running our application again, we have the diary page back.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们再次运行应用程序时，我们又有了日记页面。
- en: '![Figure 7.1 – Gym Diary home page with Diary](img/B19562_07_1.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 带有日记的健身房日记主页](img/B19562_07_1.jpg)'
- en: Figure 7.1 – Gym Diary home page with Diary
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 带有日记的健身房日记主页
- en: 'To conclude this session, let’s add the links for the new exercise entry in
    the `Home` template. Make the following modification:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了结束这个环节，让我们在 `Home` 模板中添加新的锻炼条目链接。进行以下修改：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We are using the Angular `routerLink` directive to create the link in the template,
    specifying the URL it should navigate to.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用 Angular 的 `routerLink` 指令在模板中创建链接，指定它应该导航到的 URL。
- en: An important detail to note is that we are using the relative path of the project
    to create the link using `./`. Since the entry form route is located in the diary
    module, Angular interprets that the module has already been loaded and allows
    the link without requiring an additional declaration in the `HomeRoutingModule`
    component.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一个需要注意的重要细节是，我们正在使用项目的相对路径来创建链接，使用 `./`。因为条目表单路由位于日记模块中，Angular 解释为该模块已经被加载，并允许链接，无需在
    `HomeRoutingModule` 组件中声明额外的声明。
- en: In the next section, let’s explore how to handle a scenario in which the user
    enters a date that does not exist.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，让我们探讨如何处理用户输入一个不存在的日期的场景。
- en: Defining an error page and title
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义错误页面和标题
- en: In our current project, if the user enters a path that does not have a mapped
    route, they will be faced with a blank screen. This is not a good **user experience**
    (**UX**) practice; ideally, we need to handle this error by presenting an error
    page for it to be redirected to the correct page.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的当前项目中，如果用户输入一个没有映射路由的路径，他们将面临一个空白屏幕。这不是一个好的 **用户体验**（**UX**）实践；理想情况下，我们需要通过显示错误页面来处理这个错误，以便将其重定向到正确的页面。
- en: 'First, let’s create the component using the Angular CLI:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用 Angular CLI 创建组件：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we are creating the component directly in `AppModule` because we want
    to give this treatment to our entire system and not to a specific functional module.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们直接在 `AppModule` 中创建组件，因为我们想将这种处理应用于整个系统，而不是特定的功能模块。
- en: 'Let’s create the template for this component with the error message:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为这个组件创建一个带有错误信息的模板：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that we have the link to the home page as a call to action for the user
    to return to the home page.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们有一个链接到主页的号召性用语，让用户返回主页。
- en: 'The next step is to update the `AppRoutingModule` routes file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是更新`AppRoutingModule`路由文件：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: At this point, Angular will do its job. Just by defining the error page route
    and then creating another entry in the array, we have defined the `'**'` path
    and redirected it to the error route.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一点，Angular将完成其工作。只需定义错误页面路由并在数组中创建另一个条目，我们就已经定义了`'**'`路径并将其重定向到错误路由。
- en: 'When we run our project, if the user enters an incorrect page, the following
    message will be displayed:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行项目时，如果用户输入了错误的页面，将会显示以下信息：
- en: '![Figure 7.2 – Incorrect route error page](img/B19562_07_2.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 - 错误路由错误页面](img/B19562_07_2.jpg)'
- en: Figure 7.2 – Incorrect route error page
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 - 错误路由错误页面
- en: Another point that we can improve in our application is the title of the page
    in the **Browser** tab.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在我们的应用程序中改进的另一个点是**浏览器**标签页中的页面标题。
- en: 'For this, we can once again use Angular’s routing mechanisms. In `DiaryRoutingModule`,
    we need to change the following code snippet:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们还可以再次使用Angular的路由机制。在`DiaryRoutingModule`中，我们需要更改以下代码片段：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To change the title, we just need to inform the `title` property in the route
    definition. Another approach that is possible (but longer) is to use Angular’s
    `Title` service.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改标题，我们只需在路由定义中通知`title`属性。另一种可能的方法（但更长）是使用Angular的`Title`服务。
- en: 'Let’s exemplify this in the `NewEntryFormTemplateComponent` component:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`NewEntryFormTemplateComponent`组件中举例说明：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: After injecting the `Title` service, we are using it in the `OnInit` lifecycle
    hook. Although the route approach is much simpler and more intuitive, the `Title`
    service can be used if the title can change dynamically.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注入`Title`服务后，我们在`OnInit`生命周期钩子中使用它。虽然路由方法更简单、更直观，但如果标题可以动态更改，则可以使用`Title`服务。
- en: We will now learn how to pass information from one route to another in the next
    section.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节学习如何从一个路由传递信息到另一个路由。
- en: Dynamic routes – wildcards and parameters
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态路由 - 通配符和参数
- en: We want to change the function of the **New Rep** button so that instead of
    adding a rep to the entry, the user can actually edit the entry, opening the form
    with the data filled in.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望更改**新重复**按钮的功能，使其不再是向条目添加重复，而是用户实际上可以编辑条目，打开填写了数据的表单。
- en: 'First, let’s add a new method to the `ExerciseSetsService` service:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们向`ExerciseSetsService`服务中添加一个新方法：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In addition to creating the new method by getting a specific item, we also prepared
    the `update` method to accept `Partial` of the `ExerciseSet` object.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 除了通过获取特定项创建新方法外，我们还准备了`update`方法来接受`ExerciseSet`对象的`Partial`。
- en: The form for editing the diary entry will be the same as for adding a new entry,
    with the difference that it will be filled in and will call the `update` method.
    So, let’s reuse the `NewEntryFormReactiveComponent` component for this.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑日记条目的表单将与添加新条目时的表单相同，不同之处在于它将被填写，并将调用`update`方法。因此，让我们重用`NewEntryFormReactiveComponent`组件来完成这项工作。
- en: 'We’ll start by editing the `DiaryRoutingModule` routes file:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先编辑`DiaryRoutingModule`路由文件：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the `route` array, we change the route of the new form to `entry` and create
    the `entry/:id` route.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在`route`数组中，我们将新表单的路由更改为`entry`并创建`entry/:id`路由。
- en: This route is pointing to the same component, but note that `:id` tells Angular
    that it is a dynamic route – that is, it will receive a variable value that must
    be directed to the route.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由指向相同的组件，但请注意`:id`告诉Angular这是一个动态路由——也就是说，它将接收一个变量值，必须指向该路由。
- en: 'With this change, we need to refactor some parts of our application. In the
    `HomeComponent` menu, let’s adjust the application route:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 随着这一变化，我们需要重构我们应用程序的一些部分。在`HomeComponent`菜单中，让我们调整应用程序路由：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We also need to adjust the journal and input components to call the new route
    instead of increasing the number of repetitions. In the `EntryItemComponent` component,
    we are going to adjust the component’s method and `Output` instances:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要调整日记和输入组件以调用新路由而不是增加重复次数。在`EntryItemComponent`组件中，我们将调整组件的方法和`Output`实例：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, we remove the treatment and just emit the event. In the template, we
    will adjust the HTML content:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们移除了处理并仅发出事件。在模板中，我们将调整HTML内容：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We will also adjust the `ListEntriesComponent` component to properly propagate
    `editEvent`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将调整 `ListEntriesComponent` 组件以正确传播 `editEvent`：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We’ll make a small change to the diary to reflect the new route. We’ll do this
    in the template first:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对日记进行一些小的更改以反映新路由。我们首先在模板中这样做：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the component, we will change the `newRep` method, which, in addition to
    the name change, will redirect to the new route:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件中，我们将更改 `newRep` 方法，除了名称更改外，它还将重定向到新路由：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To redirect to the new route, we are doing string interpolation to include
    `id` that was emitted by the output of the list item. Finally, let’s focus our
    attention on the form. In the `NewEntryFormReactiveComponent` component, let’s
    adjust the `button` label in the template:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了重定向到新路由，我们正在进行字符串插值以包含由列表项输出发出的 `id`。最后，让我们将注意力集中在表单上。在 `NewEntryFormReactiveComponent`
    组件中，让我们调整模板中的 `button` 标签：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the `NewEntryFormReactiveComponent` component, we will adapt it to now be
    the form for creating and editing entries in our application:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `NewEntryFormReactiveComponent` 组件中，我们将对其进行调整，使其现在成为创建和编辑条目的表单：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the example, we use the `OnInit` lifecycle hook to configure the form according
    to the route it was called. For this, Angular has a service called `ActivatedRoute`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，我们使用 `OnInit` 生命周期钩子根据被调用的路由配置表单。为此，Angular 有一个名为 `ActivatedRoute` 的服务。
- en: In the `ngOnInit` method, we capture the parameter of the route that called
    our application and, if the component receives the ID, it will fetch the entry
    from the backend and update the form according to the return.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `ngOnInit` 方法中，我们捕获调用我们应用程序的路由参数，如果组件接收到 ID，它将从后端获取条目并根据返回值更新表单。
- en: One detail here is that we are using the destructuring assignment to remove
    the `id` field from the object because it does not exist in the form’s data model.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的一个细节是，我们正在使用解构赋值来从对象中移除 `id` 字段，因为它在表单的数据模型中不存在。
- en: 'In the same component, we need to change the recording of the diary entry:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在相同的组件中，我们需要更改日记条目的记录：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the `newEntry` method, if the component has received the object’s `id` via
    the route, it will behave as an edition and call the corresponding method of the
    `exerciseSetsService` service.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `newEntry` 方法中，如果组件通过路由接收到了对象的 `id`，它将表现为编辑并调用 `exerciseSetsService` 服务的相应方法。
- en: When we run the project, we now have the input edit form.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行项目时，我们现在有了输入编辑表单。
- en: '![Figure 7.3 – Gym Diary edit entry form](img/B19562_07_3.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – 健身日记编辑条目表单](img/B19562_07_3.jpg)'
- en: Figure 7.3 – Gym Diary edit entry form
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 健身日记编辑条目表单
- en: From version 16 of Angular, we have an improvement in the use of route parameters.
    In addition to the `ActivatedRoute` service, we can map the inputs of page components
    directly to route variables in our applications.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Angular 的第 16 版开始，我们在路由参数的使用上有了改进。除了 `ActivatedRoute` 服务外，我们还可以直接将页面组件的输入映射到我们应用程序的路由变量中。
- en: 'Let’s refactor our example to this; first, change the main routing module,
    `AppRoutingModule`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重构我们的示例，首先更改主路由模块 `AppRoutingModule`：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: To use this resource, we need to add the `bindToComponentInputs` attribute in
    the general configuration of the application’s route.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此资源，我们需要在应用程序路由的一般配置中添加 `bindToComponentInputs` 属性。
- en: 'In our form page, we will refactor as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的表单页面中，我们将进行如下重构：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We create `Input` for the `entryId` property and define that the route’s wildcard
    variable will be `id`. We did this to prevent needing to refactor the rest of
    the component, but we could also change the property name to also be `id`, as
    in this example:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为 `entryId` 属性创建 `Input` 并定义路由的通配符变量将是 `id`。我们这样做是为了防止需要重构组件的其余部分，但我们也可以将属性名称更改为
    `id`，如下例所示：
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The important thing here is that Angular automatically binds the information
    that comes from the route in the attribute, simplifying even more the passing
    of parameters via the URL to the component.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这里重要的是 Angular 自动将来自路由的信息绑定到属性中，从而进一步简化通过 URL 将参数传递到组件的过程。
- en: In the next section, we will learn how to protect the route from being incorrectly
    accessed by studying route guards.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将通过学习路由守卫来了解如何保护路由免受错误访问。
- en: Securing routes – guards
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护路由 – 守卫
- en: So far, we’ve seen how to take data through the route to determine the behavior
    of a `page` component. However, the routing created in Angular is versatile and
    also allows you to shape the customer’s journey by conditioning resources based
    on a business rule.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何通过路由获取数据来确定`page`组件的行为。然而，Angular创建的路由非常灵活，还允许您通过基于业务规则的条件资源来塑造客户的旅程。
- en: To illustrate this feature, we are going to create a login screen with a simplified
    authentication mechanism. To create the components, we are going to use the Angular
    CLI.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这个功能，我们将创建一个具有简化认证机制的登录屏幕。为了创建组件，我们将使用Angular CLI。
- en: 'At the command prompt of your operating system, use the following commands:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在您操作系统的命令提示符下，使用以下命令：
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The first command creates a `Login` module with the `routes` file. The second
    creates the `login` page component and, finally, we have the service that will
    manage the interaction with the authentication of our backend.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令创建了一个带有`routes`文件的`Login`模块。第二个命令创建了`login`页面组件，最后，我们有了将管理后端认证交互的服务。
- en: 'In the `Login` module, we will configure the dependencies of the new module:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Login`模块中，我们将配置新模块的依赖项：
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, let’s add the new module to `AppRoutingModule`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将新模块添加到`AppRoutingModule`：
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the `LoginRoutingModule` module, we will configure the component we created:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在`LoginRoutingModule`模块中，我们将配置我们创建的组件：
- en: '[PRE28]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To simplify the handling of the request and response payload of our authentication
    service, let’s create an interface with the new types:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化处理认证服务的请求和响应有效负载，让我们使用新的类型创建一个接口：
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `LoginForm` interface corresponds to the data that we are going to send
    and the `Token` interface is the API return, which is basically the access token
    that the application will send the client’s JWT.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoginForm`接口对应我们要发送的数据，而`Token`接口是API返回的，基本上是应用将发送给客户端的JWT访问令牌。'
- en: 'With the interface created, let’s create a service that will orchestrate the
    interaction with the backend:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了接口后，让我们创建一个将协调与后端交互的服务：
- en: '[PRE30]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In this service, we make the request to the backend using the `HttpClient` service
    (for more details, read [*Chapter 5*](B19562_05.xhtml#_idTextAnchor163), *Angular
    Services and the Singleton Pattern*). We are using the RxJS tap operator so that
    as soon as the request is successful, it saves the token in a `service` variable.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个服务中，我们使用`HttpClient`服务向后端发送请求（更多详情，请参阅[*第5章*](B19562_05.xhtml#_idTextAnchor163)，*Angular服务和单例模式*)。我们使用RxJS的tap操作符，以便在请求成功后立即将令牌保存到`service`变量中。
- en: 'It is through this variable that we create the `isLogged` property, which will
    be important for controlling the route. With the services created, we can develop
    the `Login` page template:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 正是通过这个变量，我们创建了`isLogged`属性，这对于控制路由非常重要。创建了服务后，我们可以开发`Login`页面模板：
- en: '[PRE31]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: When creating `Login` pages, an important point is to correctly use the HTML
    `input` field types for the correct UX treatment and accessibility.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建`Login`页面时，一个重要点是正确使用HTML `input`字段类型以正确处理UX和可访问性。
- en: 'With the template completed, let’s develop the component:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 完成模板后，让我们开发组件：
- en: '[PRE32]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In this example, we are creating the reactive form, and in the `login` method,
    we are using the `AuthService` service. Run the project and, in `url /login`,
    we will have our login screen. To use the screen, we have the username `mario`
    and password `1234`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在创建响应式表单，并在`login`方法中使用`AuthService`服务。运行项目后，在`url /login`，我们将有我们的登录屏幕。要使用该屏幕，我们有用户名`mario`和密码`1234`：
- en: '![Figure 7.4 – Login page](img/B19562_07_4.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图7.4 – 登录页面](img/B19562_07_4.jpg)'
- en: Figure 7.4 – Login page
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4 – 登录页面
- en: 'To create the logout treatment, we will create a link in the `HomeComponent`
    component menu and create the `logout` method in it, redirecting to the login
    page:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建注销处理，我们将在`HomeComponent`组件菜单中创建一个链接，并在其中创建`logout`方法，将其重定向到登录页面：
- en: '[PRE33]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: With the page created, now we need a way to guarantee access to the diary only
    if the user is logged in. For this type of route checking, we should use Angular’s
    **route** **guard** feature.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 页面创建后，现在我们需要一种方式来确保只有用户登录时才能访问日记。对于这种类型的路由检查，我们应该使用Angular的**路由****守卫**功能。
- en: 'To create it, we can count on the help of the Angular CLI; in the command line,
    use the following command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建它，我们可以依靠Angular CLI的帮助；在命令行中，使用以下命令：
- en: '[PRE34]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'A selection list will be presented; choose **CanActivate**. In the new file,
    let’s create the following function:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 将会显示一个选择列表；选择**CanActivate**。在新文件中，让我们创建以下函数：
- en: '[PRE35]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Since version 14, the recommended way to create route guards is through functions
    and not classes.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本14开始，创建路由守卫的推荐方式是通过函数而不是类。
- en: We are creating the `authGuard` function that has the `CanActivateFn` interface,
    which is a function that expects a Boolean return or an object of the `UrlTree`
    class to redirect the user to the indicated route.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在创建一个具有`CanActivateFn`接口的`authGuard`函数，这是一个期望返回布尔值或`UrlTree`类对象的函数，用于将用户重定向到指定的路由。
- en: In the function, we first inject the `AuthService` and `Router` services; notice
    that the `inject` function in this context is mandatory because, in a function,
    we don’t have a constructor to inject the services.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数中，我们首先注入`AuthService`和`Router`服务；注意在这个上下文中`inject`函数是强制性的，因为在函数中我们没有构造函数来注入服务。
- en: With the services configured, we make an `if` statement evaluating the `isLogged`
    service property. We return `true` if the user is logged in, allowing the route
    to be navigated. Otherwise, we return an object of the `UrlTree` class with the
    login page route.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好服务后，我们做一个评估`isLogged`服务属性的`if`语句。如果用户已登录，我们返回`true`，允许导航到该路由。否则，我们返回一个包含登录页面路由的`UrlTree`类的对象。
- en: 'To use the guard, let’s change `DiaryRoutingModule`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用守卫，让我们改变`DiaryRoutingModule`：
- en: '[PRE36]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: By using the `canActivate` attribute, we can pass one or more route guards.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`canActivate`属性，我们可以传递一个或多个路由守卫。
- en: Running the application, we can see that we are directed to the login page.
    But if we directly call the `/home/diary/entry` route, we realize that it is not
    protected. This happens because we set `guard` only on the `/``diary` route.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序后，我们可以看到我们被导向登录页面。但如果我们直接调用`/home/diary/entry`路由，我们会发现它并没有被保护。这是因为我们只在`/diary`路由上设置了`guard`。
- en: To fix this, we can set the `canActivate` attribute on all routes, but a more
    effective way would be to change the type of the route to `CanActivateChild`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们可以在所有路由上设置`canActivate`属性，但更有效的方法是将路由的类型改为`CanActivateChild`。
- en: 'Going back to the `route` function, let’s change its type:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`route`函数，让我们改变它的类型：
- en: '[PRE37]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We now need to refactor `DiaryRoutingModule`:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要重构`DiaryRoutingModule`：
- en: '[PRE38]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Here, we are using a component-less route pattern; basically, we create a route
    without a component and put all the routes as children of it.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们使用了一个无组件的路由模式；基本上，我们创建了一个没有组件的路由，并将所有路由作为它的子路由。
- en: Then, we use the `canActivateChild` attribute to call the route’s guard, so
    we don’t need to repeat all the routes in this module.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`canActivateChild`属性来调用路由的守卫，这样我们就不需要在这个模块中重复所有路由。
- en: The route guard feature can do more for your application than flow control;
    we can improve its perceived performance, as we’ll see in the next section.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 路由守卫功能可以为您的应用程序做更多的事情，而不仅仅是流程控制；我们可以提高它的感知性能，就像我们将在下一节中看到的那样。
- en: Optimizing the experience – Resolve
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化体验 – 解析
- en: Performance is one of the biggest variables that impact the experience and satisfaction
    of our users; therefore, optimal performance should be a constant goal for the
    web developer.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 性能是影响用户体验和满意度最大的变量之一；因此，最佳性能应该是网络开发者的一个持续目标。
- en: Perceived perception is the game we want to win, and we have plenty of options
    in the Angular ecosystem. We can load the information that our page will require
    before it renders and, for that, we will use the Resolveroute saver resource.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 感知感知是我们想要赢得的游戏，在Angular生态系统中我们有丰富的选择。我们可以在页面渲染之前加载页面所需的信息，为此我们将使用Resolveroute保存资源。
- en: Unlike the guard we studied earlier, its purpose is to return information needed
    by the page being directed by the route.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前研究的守卫不同，它的目的是返回由路由导向的页面所需的信息。
- en: 'We will create this guard using the Angular CLI. In your command prompt, use
    the following command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Angular CLI创建这个守卫。在您的命令提示符中，使用以下命令：
- en: '[PRE39]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In the new file created, let’s change the function that the Angular CLI generated:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在新创建的文件中，让我们改变Angular CLI生成的函数：
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The function injects the `ExerciseSetsService` service and returns the observable
    returned by the `getInitialList` method.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 函数注入了`ExerciseSetsService`服务，并返回`getInitialList`方法返回的Observable。
- en: 'We will configure `DiaryRoutingModule` with this new resolver:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个新解析器配置`DiaryRoutingModule`：
- en: '[PRE41]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We are using the `resolve` property, much like configuring a route guide, with
    the difference that we associate an object with the function, which will be important
    for the component to consume the data generated by it.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`resolve`属性，就像配置路由指南一样，不同之处在于我们将一个对象与函数关联起来，这对于组件消耗由它生成数据将非常重要。
- en: 'In the `DiaryComponent` component, we will refactor the component to consume
    data from the resolver instead of fetching the information from the service directly:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在`DiaryComponent`组件中，我们将对该组件进行重构，使其从解析器中获取数据，而不是直接从服务中获取信息：
- en: '[PRE42]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The component is now consuming the `data` attribute of the route. It returns
    an observable that has an object with the `diaryApi` attribute – the same one
    we configured in the `routes` module.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 组件现在正在消耗路由的`data`属性。它返回一个包含`diaryApi`属性的对象的可观察对象——这是我们之前在`routes`模块中配置的。
- en: When we run our project again, we see that the behavior of the screen does not
    change externally; however, internally, we are fetching information from the gym
    diary before the component is loaded. This change in our example may have been
    imperceptible, but in a larger and more complex application, it could be the difference
    that you and your team are looking for.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次运行我们的项目时，我们会看到屏幕的行为在外部没有改变；然而，在内部，我们在组件加载之前从健身房日记中获取信息。在我们这个例子中的这种变化可能不易察觉，但在一个更大、更复杂的应用中，这可能是你和你的团队所寻找的差异。
- en: It is important to bear in mind that this will not speed up the request to the
    backend. It will take the same time as before, but the performance perception
    that your user will have may be impacted.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，这不会加快对后端请求的速度。它将花费与之前一样的时间，但你的用户可能会感受到的性能可能会受到影响。
- en: 'We will do this same treatment to load the diary entry edit page; in the same
    `resolve` file, we will create a new function:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对加载日记条目编辑页面进行相同的处理；在同一个`resolve`文件中，我们将创建一个新的函数：
- en: '[PRE43]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The function injects the service but, this time, we are using the `route` parameter
    to extract the `id` of the entry to load it. This parameter is offered by Angular
    so that you can extract any attribute from the route in which you will configure
    the resolver.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 函数注入了服务，但这次我们使用`route`参数来提取条目的`id`以加载它。这个参数由Angular提供，以便你可以从你将配置解析器的路由中提取任何属性。
- en: 'In the `route` module, we will add the `resolve` function to the edit route:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在`route`模块中，我们将`resolve`函数添加到编辑路由：
- en: '[PRE44]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, we need to refactor the component to use the route guard information:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要重构组件以使用路由守卫信息：
- en: '[PRE45]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: In the same way as we did with the diary page, here, we are replacing the consumption
    of the service with the consumption of the route.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在日记页面中所做的那样，这里我们用路由的消耗来替换服务的消耗。
- en: Summary
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we worked with routes and their resources to guide and organize
    user flows in our application. We learned about the router concept in the Angular
    framework and created an error page in case a user uses a route that does not
    exist. We created our edit diary entry page by reusing a form and, with the dynamic
    route feature, we learned how to capture route data for page setup.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们与路由及其资源一起工作，以引导和组织我们应用中的用户流程。我们了解了Angular框架中的路由器概念，并为用户使用了不存在路由的情况创建了一个错误页面。我们通过重用表单创建了编辑日记条目页面，并利用动态路由功能学习了如何捕获页面设置所需的路由数据。
- en: Finally, we learned about the route guards feature, created our simplified login
    flow, and saw how to optimize the user experience by loading the backend information
    before the page loads using the guard resolve feature.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们了解了路由守卫功能，创建了简化的登录流程，并看到了如何通过在页面加载之前使用守卫解析功能来加载后端信息来优化用户体验。
- en: In the next chapter, we will learn how to use a resource to streamline our requests
    to the backend using the interceptor design pattern.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用资源通过拦截器设计模式来简化我们对后端的请求。
