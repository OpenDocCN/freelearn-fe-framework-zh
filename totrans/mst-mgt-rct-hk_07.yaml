- en: '*Chapter 5*: Sharing Component State with Context and Subscription'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous two chapters, we learned how to use Context and Subscription
    for a global state. Each has different benefits: Context allows us to provide
    different values for different subtrees, while Subscriptions prevent extra re-renders.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn a new approach: combining React Context and
    Subscriptions. The combination will give us the benefits of each, which means:'
  prefs: []
  type: TYPE_NORMAL
- en: Context can provide a global state to a subtree and the Context provider can
    be nested. Context allows us to control a global state in the React component
    lifecycle like the `useState` hook.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the other hand, Subscriptions allow us to control re-renders, which is not
    possible with a single Context.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having the benefits of both can be a good solution for larger apps – because,
    as mentioned, this means we can have different values in different subtrees, and
    we can also avoid extra re-renders.
  prefs: []
  type: TYPE_NORMAL
- en: This approach is useful for mid to large apps. In such apps, having different
    values in different subtrees can happen, and we can avoid extra re-renders, which
    can be very important for our apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the limitations of module state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding when to use Context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the Context and Subscription pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You are expected to have moderate knowledge of React, including React Hooks.
    Refer to the official site, [https://reactjs.org](https://reactjs.org), to learn
    more.
  prefs: []
  type: TYPE_NORMAL
- en: In some code, we use TypeScript ([https://www.typescriptlang.org](https://www.typescriptlang.org)),
    and you should have basic knowledge of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code in this chapter is available on GitHub: [https://github.com/PacktPublishing/Micro-State-Management-with-React-Hooks/tree/main/chapter_05](https://github.com/PacktPublishing/Micro-State-Management-with-React-Hooks/tree/main/chapter_05).'
  prefs: []
  type: TYPE_NORMAL
- en: To run code snippets, you need a React environment, for example, Create React
    App ([https://create-react-app.dev](https://create-react-app.dev)) or CodeSandbox
    ([https://codesandbox.io](https://codesandbox.io)).
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the limitations of module state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Because module state resides outside React components, there''s a limitation:
    the module state defined globally is a singleton, and you can''t have different
    states for different component trees or subtrees.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s revisit our `createStore` implementation from [*Chapter 4*](B17780_04_Final_VK_ePub.xhtml#_idTextAnchor066),
    *Sharing Module State with Subscription*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Using this `createStore`, let''s define a new `store`. We define a `store`
    with a property `count`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that this `store` is defined outside the React component.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use `store` in a React component, we use `useStore`. The following is an
    example with two components that show the shared count from the same `store` variable.
    We use `useStore`, which was defined in [*Chapter 4*](B17780_04_Final_VK_ePub.xhtml#_idTextAnchor066),
    *Sharing Module State with Subscription*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We have the component `Counter`, which is to show the `count` number in the
    `store` object, and a `button` to update the `count` value. Because this `Counter`
    component is reusable, `Component` can have two `Counter` instances. This will
    show a pair of two counters sharing the same state.
  prefs: []
  type: TYPE_NORMAL
- en: Now, suppose we want to show another pair of counters. We would like to have
    two new components in `Component`, but the new pair should show different counters
    from the first set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new `count` value. We could add a new property to the `store`
    object we already defined, but we assume there are other properties and want to
    isolate stores. Therefore, we create `store2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Because `createStore` is reusable, creating a new `store2` object is straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then need to create components to use `store2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You may notice the similarity between `Counter` and `Counter2` – that they are
    both 14 lines of code, and the only difference is the `store` variable they are
    referencing – `store` for `Counter` and `store2` for `Counter2`. We would need
    `Counter3` or `Counter4` to support more stores. Ideally, `Counter` should be
    reusable. But, as module state is defined outside React, it's not possible. This
    is the limitation of module state.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: You may notice we can make the `Counter` component reusable if we put `store`
    in `props`. However, that will require prop drilling when components are deeply
    nested, and the primary reason for introducing module state is to avoid prop drilling.
  prefs: []
  type: TYPE_NORMAL
- en: 'It would be nice to reuse the `Counter` component for different stores. The
    pseudocode would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you look at the code, you will notice that `Component`, `Component2`, and
    `Component3` are mostly the same. The only difference is the `Provider` components.
    This is exactly where React Context fits in. We will discuss this in more detail
    in the *Implementing the Context and Subscription pattern* section.
  prefs: []
  type: TYPE_NORMAL
- en: Now you understand the limitation of module state and the ideal patterns for
    multiple stores. Next up, we'll recap React Context and explore the usage of Context.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding when to use Context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before diving into learning the way to combine Context and Subscription, let's
    recap how Context works.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a simple Context example with a theme. So, we specify a default
    value for `createContext`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: What `useContext(ThemeContext)` returns depends on the Context in the component
    tree.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the Context value, we use a `Provider` component in Context as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this case, `Component` will show the theme as `dark`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The provider can be nested. It will use the value from the innermost provider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If there are no providers in the component tree, it will use the default value.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, here, we assume `Root` is a component at the root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this case, `Component` will show the theme as `light`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see an example that has a provider to provide the same default value
    at the root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this case too, `Component` will show the theme as `light`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s discuss when to use Context. To do this, think of our example: what
    is the difference between this example with a provider and the previous example
    without a provider? We can say that there is no difference. Using the default
    value gives the same result.'
  prefs: []
  type: TYPE_NORMAL
- en: Having a proper default value for Context is important. The Context provider
    can be seen as a method to override the default Context value or a value provided
    by the parent provider if it exists.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of `ThemeContext`, if we have the proper default value, then what's
    the point of using a provider? It will be required to provide a different value
    for a subtree of the entire component tree. Otherwise, we can just use the default
    value from `Context`.
  prefs: []
  type: TYPE_NORMAL
- en: For a global state with Context, you may only use one provider at the root.
    This is a valid use case, but this use case can be covered by module state with
    Subscription, which we learned about in [*Chapter 4*](B17780_04_Final_VK_ePub.xhtml#_idTextAnchor066),
    *Sharing Module State with Subscription*. Given that module state covers the use
    case with one Context provider at the root, Context for a global state is only
    required if we need to provide different values for different subtrees.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we revisited React Context and learned when to use it. Next
    up, we will learn how to combine Context and Subscription.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Context and Subscription pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we learned, using one Context to propagate a global state value has a limitation:
    it causes extra re-renders.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Module state with Subscription doesn''t have such a limitation, but there is
    another: it only provides a single value for the entire component tree.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We would like to combine Context and Subscription to overcome both limitations.
    Let''s implement this feature. We''ll start with `createStore`. This is exactly
    the same implementation we developed in [*Chapter 4*](B17780_04_Final_VK_ePub.xhtml#_idTextAnchor066),
    *Sharing Module State with Subscription*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In [*Chapter 4*](B17780_04_Final_VK_ePub.xhtml#_idTextAnchor066), *Sharing Module
    State with Subscription*, we used `createStore` for module state. This time, we'll
    use `createStore` for the `Context` value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code to create a Context. The default value is passed
    to `createContext`, which we refer to as a default store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the default store has a state with two properties: `count` and
    `text`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To provide different stores for subtrees, we implement `StoreProvider`, which
    is a tiny wrapper around `StoreContext.Provider`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`useRef` is used to make sure that the store object is initialized only once
    at the first render.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use a store object, we implement a hook called `useSelector`. Unlike `useStoreSelector`,
    defined in the *Working with a selector and useSubscription* section in [*Chapter
    4*](B17780_04_Final_VK_ePub.xhtml#_idTextAnchor066), *Sharing Module State with
    Subscription*, `useSelector` doesn''t take a `store` object in its arguments.
    It takes a `store` object from `StoreContext` instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Using `useContext` together with `useSubscription` is the key point of this
    pattern. This combination allows us the benefits of both Context and Subscription.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike module state, we need to provide a way to update the state with Context.
    `useSetState` is a simple hook to return the `setState` function in `store`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s use what we have implemented. The following is a component that
    shows `count` in `store`, along with `button` to increment `count`. We define
    `selectCount` outside the `Component`, otherwise, we would need to wrap the function
    with `useCallback`, which introduces extra work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: It's important to note here that this `Component` component is not tied to any
    specific store object. The `Component` component can be used for different stores.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also have `Component` in various places:'
  prefs: []
  type: TYPE_NORMAL
- en: Outside any providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the first provider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the second provider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following `App` component includes the `Component` components in three
    places: 1) outside of `StoreProvider`, 2) inside the first `StoreProvider` component,
    and 3) inside the second nested `StoreProvider` component. The `Component` components
    in different `StoreProvider` components share different `count` values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Each `Component` component using the same `store` object will share the `store`
    object and show the same `count` value. In this case, the components in different
    component tree levels use a different `store`, hence the components show a different
    `count` value in various places. When you run this app, you will see something
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Screenshot of the running app  ](img/Figure_5.1_B17780.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – Screenshot of the running app
  prefs: []
  type: TYPE_NORMAL
- en: If you click the **+1** button in **Using default store**, you will see two
    counts in **Using default store** are updated together. If you click the **+1**
    button in **Using store provider**, you will see two counts in **Using store provider**
    are updated together. The same applies to **Using inner store provider**.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to implement a global state with Context and
    Subscription, taking advantage of the related benefits. We can isolate state in
    a subtree thanks to Context, and we can avoid extra re-renders thanks to Subscription.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we learned a new approach: combining React Context and Subscription.
    It provides the benefits of both: providing isolated values in subtrees and avoiding
    extra re-renders. This approach is useful for mid to large apps. In such apps,
    having different values in different subtrees can happen, and we can avoid extra
    re-renders, which can be very important for our apps.'
  prefs: []
  type: TYPE_NORMAL
- en: Starting from the next chapter, we will dive into various global state libraries.
    We will learn how those libraries are based on what we have learned so far.
  prefs: []
  type: TYPE_NORMAL
