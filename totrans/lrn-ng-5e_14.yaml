- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bringing Applications to Production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A web application should typically run on the web and be accessible by anyone
    and from anywhere. It needs two essential ingredients: a web server hosting the
    application and a production build to deploy it to that server. In this chapter,
    we will focus on the second part of the recipe.'
  prefs: []
  type: TYPE_NORMAL
- en: In a nutshell, a production build of a web application is an optimized version
    of the application code that is smaller, faster, and more performant. Primarily,
    it is a process that takes all the code files of the application, applies optimization
    techniques, and converts them into a single-bundle file.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapters, we went through the many parts involved in building
    an Angular application. We need just one last piece to connect the dots and make
    our application available for anyone to use, which is to build it and deploy it
    to a web server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: Building an Angular application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limiting the application bundle size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing the application bundle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying an Angular application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The chapter contains various code samples to walk you through the concept of
    bringing applications to production.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the related source code in the `ch14` folder of the following
    GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition](https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: Building an Angular application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build an Angular application, we use the following command of the Angular
    CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The build process boots up the Angular compiler, which primarily collects all
    TypeScript and HTML files of our application code and converts them into JavaScript.
    CSS stylesheet files such as SCSS are converted into pure CSS files. The build
    process ensures the fast and optimal rendering of our application in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'An Angular application contains various TypeScript files not generally used
    during runtime, such as unit tests or tooling helpers. The compiler knows which
    files to collect for the build process by reading the `files` property of the
    `tsconfig.app.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `src/main.ts` file is the main entry point of the application and helps
    Angular to go through all the components, services, and other Angular artifacts
    that our application needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the `ng build` command looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This output displays the JavaScript and CSS files generated from building the
    Angular application, namely:'
  prefs: []
  type: TYPE_NORMAL
- en: '`main` : The actual application code that we have written'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`polyfills` : Feature polyfills for older browsers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`styles` : Global CSS styles of our application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Angular compiler outputs the preceding files into a `dist\appName\browser`
    folder, where `appName` is the application name. It also contains the following
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`favicon.ico` : The icon of the Angular application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.html` : The main HTML file of the Angular application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `ng build` command of the Angular CLI can be run in two modes: development
    and production. By default, it is run in production mode. To run it in development
    mode, we should run the following Angular CLI command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will have an output that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding output, you may notice that the names of the `Initial chunk
    files` do not contain hash numbers, as in the case of a production build. In production
    mode, the Angular CLI performs various optimization techniques on the application
    code, such as image optimization and **Ahead of Time** ( **AOT** ) compilation,
    so that the final output is suitable for hosting in a web server and a production
    environment. The hash number added to each file ensures that the cache of a browser
    will quickly invalidate them upon deploying a newer version of the application.
  prefs: []
  type: TYPE_NORMAL
- en: When we ran the `ng build` command of the Angular CLI in development mode, we
    used the `--configuration` option. The `--configuration` option allows us to run
    an Angular application in different environments. We will learn how to define
    Angular environments in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Building for different environments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An organization may want to build an Angular application for multiple environments
    that require different variables, such as a backend API endpoint and application
    local settings. A common use case is a staging environment for testing the application
    before deploying it to production.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Angular CLI enables us to define different configurations for each environment
    and build our application with each one. We can execute the `ng build` command
    while passing the configuration name as a parameter using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We can also pass a configuration in other Angular CLI commands, such as `ng
    serve` and `ng test` .
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the following Angular CLI command to start working with environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will create a `src\environments` folder in the Angular project
    that contains the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`environment.ts` : The default environment of the application, which is used
    during production'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`environment.development.ts` : The application environment used during development'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It will also add a `fileReplacements` section in the `angular.json` configuration
    file of the Angular project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding snippet, the `fileReplacements` property defines the environment
    file that will replace the default one while executing the `build` command in
    the `development` environment. If we run the `ng build --configuration=development`
    command, the Angular CLI will replace the `environment.ts` file with the `environment.development.ts`
    file in the application bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each environment file exports an `environment` object where we can define additional
    application properties such as the URL of a backend API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The same properties of the exported object must be defined in all environment
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to import the default environment to access an environment property
    in an Angular application. For example, to use the `apiUrl` property in the main
    application component, we should do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Not all libraries in an Angular application can be imported as a JavaScript
    module, as most of the Angular first-party libraries are. In the following section,
    we will learn how to import libraries that need the global `window` object.
  prefs: []
  type: TYPE_NORMAL
- en: Building for the window object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An Angular application may use a library like **jQuery** that must be attached
    to the `window` object. Other libraries, such as **Bootstrap** , have fonts, icons,
    and CSS files that must be included in the application bundle.
  prefs: []
  type: TYPE_NORMAL
- en: In all these cases, we need to tell the Angular CLI about their existence so
    that it can include them in the final bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `angular.json` configuration file contains an `options` object in the `build`
    configuration that we can use to define such files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `options` object contains the following properties that we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assets` : Contains static files from the `public` folder such as icons, fonts,
    and translations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`styles` : Contains external CSS stylesheet files. The global CSS stylesheet
    file of the application is included by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scripts` : Contains external JavaScript files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we add more and more features to an Angular application, the final bundle
    will grow bigger at some point. In the following section, we’ll learn how to mitigate
    such an effect using budgets.
  prefs: []
  type: TYPE_NORMAL
- en: Limiting the application bundle size
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As developers, we always want to build impressive applications with cool features
    for the end user. As such, we end up adding more and more features to our Angular
    application – sometimes according to the specifications and at other times to
    provide additional value to users. However, adding new functionality to an Angular
    application will cause it to grow in size, which may not be acceptable at some
    point. To overcome this problem, we can use **budgets** .
  prefs: []
  type: TYPE_NORMAL
- en: 'Budgets are thresholds that we can define in the `angular.json` configuration
    file, and we can make sure that the size of our application does not exceed those
    thresholds. To set budgets, we can use the `budgets` property of the `production`
    configuration in the `build` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The Angular CLI defines the preceding default budgets when creating a new Angular
    CLI project.
  prefs: []
  type: TYPE_NORMAL
- en: We can define a budget for different types, such as the whole Angular application
    or some parts of it. The threshold of a budget can be defined as bytes, kilobytes,
    megabytes, or a percentage of it. The Angular CLI displays a warning or throws
    an error when the size is reached or exceeds the defined value of the threshold.
  prefs: []
  type: TYPE_NORMAL
- en: 'To better understand it, let’s describe the previous default example:'
  prefs: []
  type: TYPE_NORMAL
- en: A warning is shown when the size of the Angular application exceeds `500` KB
    and an error when it goes over `1` MB.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A warning is shown when the size of any component style exceeds `4` KB and an
    error when it goes over `8` .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To see all available options you can define when configuring budgets in an Angular
    application, check out the guide on the official documentation website at [https://angular.dev/tools/cli/build/#configuring-size-budgets](https://angular.dev/tools/cli/build/#configuring-size-budgets)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Budgets are great to use when we want to provide an alert mechanism in case
    our Angular application grows significantly. However, they are just a level of
    information and precaution. In the following section, we will learn how to minimize
    our bundle size.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing the application bundle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we learned in the *Building an Angular application* section, the Angular
    CLI performs optimization techniques when we build an Angular application. The
    optimization process that is performed in the application code includes modern
    web techniques and tools, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Minification** : Converts multiline source files into a single line, removing
    white space and comments. It is a process that enables browsers to parse them
    faster later on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Uglification** : Renames properties and methods to a non-human-readable form
    so that they are difficult to understand and use for malicious purposes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bundling** : Concatenates all source files of the application into a single
    file, called the bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tree-shaking** : Removes unused files and Angular artifacts, such as components
    and services, resulting in a smaller bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Font optimization** : Inlines external font files in the main HTML file of
    the application without blocking render requests. It currently supports Google
    Fonts and Adobe Fonts and requires an internet connection to download them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build cache** : Caches the previous build state and restores it when we run
    the same build, decreasing the time taken to build the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the final bundle of an Angular application remains large after all preceding
    optimization techniques, we can use an external tool called `source-map-explorer`
    to investigate the cause. Perhaps we have imported a JavaScript library twice
    or included an unused file. The tool analyzes our application bundle and displays
    all Angular artifacts and libraries we use in a visual representation. To start
    using it, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `source-map-explorer` npm package from the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build your Angular application and enable source maps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following script in the `package.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command against the `main` bundle file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It will open up a visual representation of the application bundle in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![img](img/B21418_14_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.1: Source map explorer output'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then interact with it and inspect it to understand why our bundle is
    still too large. Some causes may be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A library is included twice in the bundle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A library that cannot be tree-shaken is included but is not currently used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last step after we build our Angular application is to deploy it to a web
    server, as we will learn in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying an Angular application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you already have a web server that you want to use for your Angular application,
    you can copy the contents of the output folder to a path in that server. If you
    want to deploy it in another folder other than the root, you can change the `href`
    attribute of the `<base>` tag in the main HTML file in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Passing the `--base-href` option in the `ng build` command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Setting the `baseHref` property in the `build` command of the `angular.json`
    configuration file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you do not want to deploy it to a custom server, you can use the Angular
    CLI tooling to deploy it in a supported hosting provider, which you can find at
    [https://angular.dev/tools/cli/deployment#automatic-deployment-with-the-cli](https://angular.dev/tools/cli/deployment#automatic-deployment-with-the-cli)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The deployment of an Angular application is the simplest and most crucial part
    because it finally makes your awesome application available to the end user. Web
    applications are all about delivering experiences to the end user at the end of
    the day.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we learned how to build an Angular application and make it
    ready for production. We also investigated different ways to optimize the final
    bundle and learned how to deploy an Angular application into a custom server,
    manually and automatically, for other hosting providers.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, which is also the final chapter of the book, we will learn
    how to improve the performance of an Angular application.
  prefs: []
  type: TYPE_NORMAL
