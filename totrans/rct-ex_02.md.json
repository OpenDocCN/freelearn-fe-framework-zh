["```js\n// render without JSX\nrender: function(){\n    return(React.createElement(\"div\", \n                               null, \n                               \"Hello React World!\"));\n}\n```", "```js\n// render with JSX\nrender: function(){\n    return <div>\n      Hello React World\n    </div>;\n  }\n```", "```js\n// Input (JSX):\nvar app = <App name=\"Mike\" />;\n```", "```js\n// Output (JS):\nvar app = React.createElement(App, {name:\"Mike\"});\n```", "```js\nReactDOM.render(<App headings = {['When', 'Who', 'Description']} \n                     data = {data} />, \n             document.getElementById('container'));\n```", "```js\n// Specifying HTML tags\nrender: function(){\n    return(<table className = 'table'>\n           .....\n           </table>);\n}\n\n// Specifying React components\nvar App = React.createClass({..});\nReactDOM.render(<App headings = {['When', 'Who', 'Description']}  \n                     data = {data} />, \n                document.getElementById('container'));\n```", "```js\nReactDOM.render(<App .../>, document.getElementById('container'));\n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <script src=\"img/jquery.min.js\"></script>\n    <link href=\"https://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n    <script src=\"img/bootstrap.min.js\"></script>\n    <script src=\"img/\"></script>\n    <script src=\"img/\"></script>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n    <title>JSX in Detail</title>\n  </head>\n  <body>\n    <div id=\"container\">\n    </div>\n  </body>\n</html>\n```", "```js\nvar App = React.createClass({\n  render: function(){\n    var headings = this.props.headings.map(function(heading) {\n      return(<th>\n        {heading}\n      </th>);\n    });\n\n    var rows = this.props.data.map(function(row){\n      return  <tr>\n        <td>{row.when}</td>\n        <td>{row.who}</td>\n        <td>{row.description}</td>\n      </tr>\n\n    })\n      return <div><h1>{this.props.title}</h1><table>\n        <thead>\n          {headings}\n        </thead>\n        {rows}\n      </table></div>\n  }\n});\n```", "```js\nreturn(<table>\n             {tableHeadings}\n             {tableRows}\n       </table>);\n```", "```js\n<table>\n  <Headings>\n    <Heading/>\n    <Heading/>\n  </Headings>\n  <Rows >\n    <Row/>\n    <Row/>\n  </Rows>\n</table>\n```", "```js\nvar Heading = React.createClass({\n  render: function() {\n    return(<th>{heading}</th>);\n  }\n});\n```", "```js\nvar Heading = React.createClass({\n  render: function() {\n    return(<th>{this.props.heading}</th>);\n  }\n}); \n```", "```js\nvar Row = React.createClass({\n  render: function() {\n    return(<tr>\n             <td>{this.props.changeSet.when}</td>\n             <td>{this.props.changeSet.who}</td>\n             <td>{this.props.changeSet.description}</td>\n          </tr>);\n  }\n});\n```", "```js\nvar Headings = React.createClass({\n  render: function() {\n    var headings = this.props.headings.map(function(heading) {\n      return(<Heading heading = {heading}/>);\n    });\n\n   return (<thead><tr>{headings}</tr><thead>);\n  }\n});\n```", "```js\nvar Rows = React.createClass({\n  render: function() {\n    var rows = this.props.changeSets.map(function(changeSet) {\n      return(<Row changeSet = {changeSet}/>);\n    });\n    return ({rows});\n  }\n});\n```", "```js\nvar Rows = React.createClass({\n  render: function() {\n    var rows = this.props.changeSets.map(function(changeSet) {\n      return(<Row changeSet = {changeSet}/>);\n    });\n\n    return (<tobdy>{rows}</tbody>);\n  }\n});\n```", "```js\nvar App = React.createClass({\n  render: function(){\n    return <table className = 'table'>\n             <Headings headings = {this.props.headings} />\n             <Rows changeSets = {this.props.changeSets} />\n           </table>;\n    }\n});\n```", "```js\nvar Heading = React.createClass({\n  render: function() {\n    return <th>{this.props.heading}</th>;\n  }\n});\n\nvar Headings = React.createClass({\n  render: function() {\n    var headings = this.props.headings.map(function(name) {\n      return <Heading heading = {name}/>;\n    });\n   return <thead><tr>{headings}</tr></thead>;\n  }\n});\n\nvar Row = React.createClass({\n  render: function() {\n    return <tr>\n             <td>{this.props.changeSet.when}</td>\n             <td>{this.props.changeSet.who}</td>\n             <td>{this.props.changeSet.description}</td>\n           </tr>;\n  }\n});\n\nvar Rows = React.createClass({\n  render: function() {\n    var rows = this.props.changeSets.map(function(changeSet) {\n      return(<Row changeSet = {changeSet}/>);\n    });\n    return <tbody>{rows}</tbody>;\n  }\n});\n\nvar App = React.createClass({\n  render: function() {\n    return <table className = 'table'>\n             <Headings headings = {this.props.headings} />\n             <Rows changeSets = {this.props.changeSets} />\n           </table>;\n    }\n});\n\nvar data = [{ \"when\": \"2 minutes ago\",\n              \"who\": \"Jill Dupre\",\n              \"description\": \"Created new account\"\n            },\n            {      \n              \"when\": \"1 hour ago\",\n              \"who\": \"Lose White\",\n              \"description\": \"Added fist chapter\"\n           }];\nvar headings = ['When', 'Who', 'Description'];\n\nReactDOM.render(<App headings = {headings} \n                     changeSets = {data} />, \n                                      document.getElementById('container')); \n```", "```js\nrender: function() {\n    var headings = this.props.headings.map(function(name) {\n      return(<Heading heading = {name}/>);\n    });\n\n   return <tr>{headings}</tr>;\n  }\n```", "```js\n// Passing props as expressions\nReactDOM.render(<App headings = {['When', 'Who', 'Description']} \n                  data = {data} />, \n                document.getElementById('container'));\n\n// Evaluating expressions\nReactDOM.render(<App headings = {['When', 'Who', 'Description']} \n                  data = {data.length > 0 ? data : ''} />, \n                document.getElementById('container'));\n```", "```js\nrender: function() {\n    return(<th> \n             {/* This is a comment */}\n             {this.props.heading}\n           </th>);\n  }\n```", "```js\nReactDOM.render(<App \n                  /* Multi\n                     Line \n                     Comment\n                  */\n                  headings = {headings} \n                  changeSets = {data} />, \n                document.getElementById('container'));\n```", "```js\nvar RecentChangesTable = React.createClass({\n  render: function() {\n    return <table>\n             {this.props.children}\n           </table>;\n  } \n});\n```", "```js\nvar App = React.createClass({\n  render: function(){\n    return(<RecentChangesTable>\n                <Headings headings = {this.props.headings} />\n                <Rows changeSets = {this.props.changeSets} />\n           </RecentChangesTable>);\n    }\n});\n```", "```js\nRecentChangesTable.Headings = React.createClass({\n  render: function() {\n    var headings = this.props.headings.map(function(name) {\n      return(<RecentChangesTable.Heading heading = {name}/>);\n    });\n\n   return (<thead><tr>{headings}</tr></thead>);\n  }\n});\n\nRecentChangesTable.Heading = React.createClass({\n  render: function() {\n    return(<th>\n             {this.props.heading}\n           </th>);\n  }\n});\n\nRecentChangesTable.Row = React.createClass({\n  render: function() {\n    return(<tr>\n             <td>{this.props.changeSet.when}</td>\n             <td>{this.props.changeSet.who}</td>\n             <td>{this.props.changeSet.description}</td>\n          </tr>);\n  }\n});\n\nRecentChangesTable.Rows = React.createClass({\n  render: function() {\n    var rows = this.props.changeSets.map(function(changeSet) {\n      return(<RecentChangesTable.Row changeSet = {changeSet}/>);\n    });\n\n    return (<tbody>{rows}</tbody>);\n  }\n});\n```", "```js\nvar App = React.createClass({\n  render: function(){\n    return(<RecentChangesTable>\n                 <RecentChangesTable.Headings headings = {this.props.headings} />\n                 <RecentChangesTable.Rows changeSets = {this.props.changeSets} />\n               </RecentChangesTable>);\n    }\n});\n```", "```js\nvar props = { headings: headings, changeSets: data, timestamps: timestamps };\nReactDOM.render(<App {...props } />, \n                     document.getElementById('container'));\n```", "```js\nvar data = [{ \"when\": \"2 minutes ago\",\n              \"who\": \"Jill Dupre\",\n              \"description\": \"Created new account\"\n            },\n            {\n              \"when\": \"1 hour ago\",\n              \"who\": \"Lose White\",\n              \"description\": \"Added fist chapter\"\n            }];\nvar headings = ['When', 'Who', 'Description'];\n\nvar props = { headings: headings, changeSets: data };\n\nReactDOM.render(<App {...props} headings = {['Updated at ', 'Author', 'Change']} />, document.getElementById('container'));\n```", "```js\nbackground-color: 'FloralWhite',\nfont-size: '19px';\n```", "```js\n    var headingStyle = { backgroundColor: 'FloralWhite',\n                         fontSize: '19px' \n                       };\n```", "```js\nRecentChangesTable.Heading = React.createClass({\n  render: function() {\n    var headingStyle = { backgroundColor: 'FloralWhite',\n                         fontSize: '19px' };\n    return(<th style={headingStyle}>{this.props.heading}</th>);\n  }\n});\n```", "```js\n  RecentChangesTable.Row = React.createClass({\n  render: function() {\n  var trStyle = { backgroundColor: 'aliceblue' };\n    return <tr style={trStyle}>\n                <td>{this.props.changeSet.when}</td>\n                <td>{this.props.changeSet.who}</td>\n                <td>{this.props.changeSet.description}</td>\n            </tr>;\n  }\n});\n```", "```js\n// css\nrecentChangesTable {\n  background-color: 'FloralWhite',\n  font-size: '19px'\n}\n```", "```js\nrender: function(){\n    return <table className = 'recentChangesTable'>\n             <Headings headings = {this.props.headings} />\n             <Rows changeSets = {this.props.changeSets} />\n           </table>;\n    }\n});\n```", "```js\n<table class = 'recentChangesTable'> \n…\n</table>\n```", "```js\n<table className = 'recentChangesTable userHeadings'>\n```", "```js\n// custom-attribute won't be rendered\n<table custom-attribute = 'super_awesome_table'>\n</table>\n```", "```js\n// data-custom-attribute will be rendered\n<table data-custom-attribute = 'super_awesome_table'>\n</table>\n```", "```js\n// Using HTML entity inside JSX tags.\n<div> Mike &amp; Shawn </div>\n// will produce\n React.createElement(\"div\", null, \" Mike & Shawn \")\n```", "```js\n// Using HTML entity inside dynamic expression\nvar first = 'Mike';\nvar second = 'Shawn';\n<div> { first + '&amp;' + second } </div>\n\nvar first = 'Mike';\nvar second = 'Shawn';\nReact.createElement(\"div\", null, \" \", first + '&amp;' + second, \" \")\n```", "```js\n// Using mixed arrays of JSX elements and normal variables\n<div> {[first, <span>&amp;</span>, second]} </div>\n\nReact.createElement(\"div\", null, \" \", [first, \n                                   React.createElement(\"span\", null, \"&\"), second], \" \")\n```", "```js\n// Rendering raw HTML directly\n<div dangerouslySetInnerHTML={{__html: 'Mike &amp; Shawn'}} />\n```", "```js\n// Using if/else directly doesn't work\n<div className={if(success) { 'green' } else { 'red' }}/>\nError: Parse Error: Line 1: Unexpected token if\n```", "```js\n// Using ternary operator\n<div className={ success ? 'green' : 'red' }/>\nReact.createElement(\"div\", {className:  success ? 'green' : 'red'})\n```", "```js\n// Moving if/else logic to a function\nvar showResult = function() {\n  if(this.props.success === true)\n    return <SuccessComponent />\n  else\n    return <ErrorComponent />\n};\n```", "```js\n\"Each child in an array should have a unique \\\"key\\\" prop. Check the render method of Rows. See http://fb.me/react-warning-keys for more information.\"\n```", "```js\nRecentChangesTable.Rows = React.createClass({\n  render: function() {\n    var rows = this.props.changeSets.map(function(changeSet) {\n      return(<Row changeSet = {changeSet}/>);\n    });\n\n    return <tbody>{rows}</tbody>;\n  }\n});\n```", "```js\nRecentChangesTable.Rows = React.createClass({\n  render: function() {\n    var rows = this.props.changeSets.map(function(changeSet, index) {\n      return(<Row key={index} changeSet = {changeSet}/>);\n    });\n\n    return (<div>{rows}</div>);\n  }\n});\nRecentChangesTable.Headings = React.createClass({\n  render: function() {\n    var headings = this.props.headings.map(function(name, index) {\n      return(<RecentChangesTable.Heading key={index} heading = {name}/>);\n    });\n\n    return (<thead><tr>{headings}</tr></thead>);\n  }\n});\n```", "```js\n<input ref=\"myInput\" />\n```", "```js\n    this.refs.myInput\n```"]