- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing Your First Application with React Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After learning about the State Hook in-depth, we are now going to make use of
    it by creating a blog application from scratch. In this chapter, we are first
    going to learn how to structure React apps in a way that scales well. Then, we
    are going to define the components that we are going to need to cover the basic
    features of a blog application. Finally, we are going to use Hooks to introduce
    state to our application! Throughout this chapter, we are also going to learn
    about JSX and various JavaScript features. At the end of this chapter, we are
    going to have a basic blog application, where we can log in, register, and create
    posts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Structuring React projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing static React components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing stateful components with Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A fairly recent version of Node.js should already be installed. The Node Package
    Manager (`npm`) also needs to be installed (it should come with Node.js). For
    more information on how to install Node.js, please check out the official website:
    [https://nodejs.org/](https://nodejs.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to use **Visual Studio Code** (**VS Code**) for the guides in
    this book, but everything should work similarly in any other editor. For more
    information on how to install VS Code, please refer to the official website: [https://code.visualstudio.com](https://code.visualstudio.com).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we use the following versions:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js v22.14.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm` v10.9.2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Code v1.97.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The versions mentioned in the preceding list are the ones used in the book.
    While installing a newer version should not be an issue, please note that certain
    steps might work differently on a newer version. If you are having an issue with
    the code and steps provided in this book, please try using the mentioned versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter03](https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter03).'
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended that you write the code on your own. Do not simply
    run the code examples that are provided with the book. It is important to write
    the code yourself to be able to learn and understand it properly. However, if
    you run into any issues, you can always refer to the code example.
  prefs: []
  type: TYPE_NORMAL
- en: Structuring React projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After learning about the principles of React, how to use the State Hook, and
    how Hooks work internally, we are now going to make use of the real State Hook
    to develop a blog application. In this section, we are going to structure the
    folders in a way that will allow us to scale the project later.
  prefs: []
  type: TYPE_NORMAL
- en: Folder structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many ways that projects can be structured, and different structures
    can do well for different projects. Usually, it’s a good idea to create a `src/`
    folder for all source code, to distinguish it from assets and configuration files.
    Inside this folder, one possible structure is to group the files by features.
    Another popular way to structure projects is to group the files by routes. For
    some projects, it might make sense to additionally separate by file type, such
    as `src/api/` and `src/components/`. However, for our project, we are mainly going
    to focus on the **user interface** (**UI**). So, we are going to group our files
    by features in the `src/` folder.
  prefs: []
  type: TYPE_NORMAL
- en: It is a good idea to start with a simple structure at first, and only nest more
    deeply when you actually need it. Do not spend too much time thinking about the
    file structure when starting a project because, usually, you do not know upfront
    how files should be grouped, and it may change later anyway. However, do try to
    avoid generic names for folders and files, such as `utils`, `common`, or `shared`.
    Use a term as specific as possible and broaden it when the structure evolves.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We first have to think about which features we are going to implement in our
    blog application. At the bare minimum, we want to implement the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Registering users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging in/out
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing a single post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coming up with an initial structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From our defined features, we can abstract a couple of feature groups:'
  prefs: []
  type: TYPE_NORMAL
- en: User (registering, logging in/logging out)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post (creating, viewing, listing)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We could now just keep it very simple and create all the components in the
    `src/` folder, without any nesting. However, since we already have a quite clear
    picture of the features that a blog application is going to need, we can already
    come up with a folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`src/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/user/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/post/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s set up the initial folder structure now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter01_3` folder to a new `Chapter03_1` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter03_1` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `Chapter03_1` folder, create new `src/user/` and `src/post/` folders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Component structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The idea of components in React is to have each component deal with a single
    task or UI element. We should try to make components as fine-grained as possible,
    in order to be able to reuse code. If we find ourselves copying and pasting code
    from one component to another, it might be a good idea to break out this common
    code into a separate component that we can reuse.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, when developing software, we start with a UI mock-up. For our blog,
    this would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – An initial mock-up of our blog application](img/B31327_03_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – An initial mock-up of our blog application
  prefs: []
  type: TYPE_NORMAL
- en: When splitting components, we use the **single responsibility principle**, which
    states that every module should have responsibility over a single encapsulated
    part of the functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the mock-up, we can draw boxes around each component and subcomponent, and
    give them names. Keep in mind that each component should have exactly one responsibility.
    We start with the fundamental components that make up this app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Mapping out the fundamental components in our mock-up](img/B31327_03_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – Mapping out the fundamental components in our mock-up
  prefs: []
  type: TYPE_NORMAL
- en: We mapped out a `Logout` component for the logout (which will be replaced with
    `Login`/`Register` components in the logged-out state), a `CreatePost` component
    to render a form to create new posts, and a `Post` component for the actual posts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we mapped out the fundamental components, we are going to look at
    which components logically belong together, therefore, forming a group. To do
    so, we now map out the container components, which we need in order to group the
    components together:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Mapping out the container components in our mock-up](img/B31327_03_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – Mapping out the container components in our mock-up
  prefs: []
  type: TYPE_NORMAL
- en: We mapped out a `PostList` component, which is used to group posts together,
    and then a `UserBar` component to deal with login/logout and registration. Finally,
    we mapped out an `App` component to group everything else together and define
    the structure of our app.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are done with structuring our React project, we can move on to implementing
    the static components.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing static components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start adding state to our blog application via Hooks, we are going
    to model the basic features of our application as static React components. Doing
    this means that we must deal with the static view structure of our application.
  prefs: []
  type: TYPE_NORMAL
- en: It makes sense to deal with the static structure first, as it will avoid having
    to move dynamic code to different components later. Furthermore, it is easier
    to deal only with HTML (and CSS) first—helping us get started with projects quickly.
    Then, we can move on to implementing dynamic code and handling state.
  prefs: []
  type: TYPE_NORMAL
- en: Doing this step by step, instead of implementing everything at once, helps us
    to quickly get started with new projects without having to think about too much
    at once, and reduces the amount of restructuring we will have to do later!
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the user-related static components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to start with the simplest feature in terms of static components,
    that is, implementing user-related functionality. As we have seen from our mock-up,
    we are going to need four components here:'
  prefs: []
  type: TYPE_NORMAL
- en: A `Login` component, which we are going to show when the user is not logged
    in yet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `Register` component, which we are also going to show when the user is not
    logged in yet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `Logout` component, which is going to be shown after the user is logged in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `UserBar` component, which will display the other components conditionally
    depending on the user’s login state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are going to start by defining the first three components, which are all
    standalone components. Finally, we will define the `UserBar` component, which
    depends on the other components being defined.
  prefs: []
  type: TYPE_NORMAL
- en: The Login component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, we will define the `Login` component, where we will show two fields:
    a **Username** field and a **Password** field. Additionally, we will show a **Login**
    button. Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the previously set up `Chapter03_1` folder, create a new file for our
    component: `src/user/Login.jsx`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the newly created `src/user/Login.jsx` file, define a component, which does
    not accept any props for now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render a `<form>` that prevents the default action of submitting the form and
    refreshing the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, we are using an **anonymous function** (also called **arrow function**)
    to define the `onSubmit` handler. Anonymous functions are defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If they do not have any arguments, we could write `() => { ... }`, instead of
    `function () { ... }`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With arguments, we could write `(arg1, arg2) => { ... }`, instead of `function
    (arg1, arg2) { ... }`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we do not use brackets, `{ }`, the result from the statement in the function
    body will also automatically be returned from the function, which is usually not
    an issue with event handlers, though.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, render two fields to input the username and password, and a button to
    submit the login form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using semantic HTML such as `<form>` and `<label>` makes your app easier to
    navigate for people using accessibility assistance software, such as screen readers.
    Additionally, when using semantic HTML, keyboard shortcuts, such as submitting
    forms by pressing the *Enter*/*Return* key, automatically work. We used the `htmlFor`
    and `id` attributes to make sure screen readers know which input field the label
    belongs to. The `id` prop needs to be unique across the whole page, but for the
    `name` prop, it is enough to be unique within the form.
  prefs: []
  type: TYPE_NORMAL
- en: The static `Login` component is now implemented, so let’s render it to see what
    it looks like.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering the Login component
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Follow these steps to render the `Login` component:'
  prefs: []
  type: TYPE_NORMAL
- en: First, edit `src/App.jsx` and *remove* all existing code from it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, import the `Login` component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define and export the `App` component, which simply renders the `Login` component
    for now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we are only returning a single component, we can omit the brackets in the
    `return` statement. Instead of writing `return (<Login />)`, we can simply write
    `return <Login />`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `dev` server by opening a terminal (the **Terminal** | **New Terminal**
    menu option in VS Code) and executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the link to the dev server in your browser, and you should see the `Login`
    component being rendered. If you change the code, it should refresh automatically,
    so you can keep the dev server running throughout this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.4 – The first component of our blog application: a login with username
    and password](img/B31327_03_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.4 – The first component of our blog application: a login with username
    and password'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the static `Login` component renders fine in React.
  prefs: []
  type: TYPE_NORMAL
- en: The Register component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The static `Register` component will be very similar to the `Login` component,
    with an additional field to repeat the password. One might get the idea to merge
    them into one component if they are so similar and add a prop to toggle the additional
    field. However, in this case, it is better to have each component deal with only
    one functionality. Later, we are going to extend the static components with dynamic
    code; then, `Register` and `Login` will have vastly different logic and we will
    need to split them up again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nevertheless, let’s start working on the code for the `Register` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/user/Register.jsx` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define a form with **Username** and **Password** fields, similar to the `Login`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Please note that you should prefer spacing via CSS rather than using the `<br
    />` HTML tag. However, we are focusing on the UI structure and integration with
    Hooks in this book, so we simply use HTML whenever possible.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, add a **Repeat password** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add a **Register** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Again, we can edit `src/App.jsx` to show our new component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can see, the `Register` component looks very similar to the `Login` component,
    but with an additional field and different text on the button.
  prefs: []
  type: TYPE_NORMAL
- en: The Logout component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, we will define the `Logout` component, which is going to display the
    name of the currently logged-in user, and a button to log out:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `src/user/Logout.jsx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `src/user/Logout.jsx` file and define a component that takes a `username`
    property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we use **destructuring** to extract the `username` key from the `props`
    object. React passes all component props as the first argument to a function in
    a single object. Using destructuring on the first argument is similar to doing
    `const { username } = this.props` in a class component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside it, return a form that shows the currently logged-in user and a **Logout**
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now replace the `Register` component with the `Logout` component in
    `src/App.jsx` to see our newly defined component (do not forget to pass the `username`
    prop to it!):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that the `Logout` component is defined, we can move on to the `UserBar`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: The UserBar component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, it is time to put our user-related components together into a `UserBar`
    component, where we are going to conditionally show either the `Login` and `Register`
    components or the `Logout` component, depending on whether the user is already
    logged in or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started implementing the `UserBar` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/user/UserBar.jsx` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, import the `Login`, `Logout`, and `Register` components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `UserBar` component and a variable for the `username`. For now,
    we just set it to a static value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we check whether the user is logged in or not. If the user is logged
    in, we display the `Logout` component, and pass the `username` to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Otherwise, we show the `Login` and `Register` components. Here, we can use
    `React.Fragment` (shorthand syntax: `<>` and `</>`) instead of a `<div>` container.
    This keeps our UI tree clean, as the components will simply be rendered side by
    side instead of being wrapped in another element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/App.jsx` and show the `UserBar` component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As you can see, the `UserBar` component is successfully rendering the `Login`
    and `Register` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – The UserBar component when no user is logged in yet](img/B31327_03_05.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – The UserBar component when no user is logged in yet
  prefs: []
  type: TYPE_NORMAL
- en: 'You can try editing the static `username` variable to see it render the `Logout`
    component instead. Edit `src/user/UserBar.jsx` and adjust it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After making this change, the `UserBar` component renders the `Logout` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – The UserBar component after defining the username](img/B31327_03_06.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – The UserBar component after defining the username
  prefs: []
  type: TYPE_NORMAL
- en: Later in this chapter, we are going to add Hooks to our application, so that
    we can log in and have the state change dynamically, without having to edit the
    code!
  prefs: []
  type: TYPE_NORMAL
- en: Implementing posts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After implementing all the user-related components, we can now move on to implementing
    posts in our blog app. We are going to define the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: A `Post` component to display a single post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `CreatePost` component for creating new posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `PostList` component to display a list of all posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Post component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have already thought about which elements a post has when creating the mock-up.
    A post should have a title, content, and an author (the user who wrote the post).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s implement the `Post` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/post/Post.jsx` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, render all props in a way that resembles the mock-up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As always, we can test our component by editing the `src/App.jsx` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that the static `Post` component has been implemented, we can move on to
    the `CreatePost` component.
  prefs: []
  type: TYPE_NORMAL
- en: The CreatePost component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We need to implement a form to create a new post. Here, we pass `username` as
    a prop to the component, as the author should always be the currently logged-in
    user. Then, we show the author and provide an input field for the title and a
    `<textarea>` element for the content of the blog post.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s implement the `CreatePost` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/post/CreatePost.jsx` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, define the component according to the mock-up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As always, we can test our component by editing the `src/App.jsx` file, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can see, the `CreatePost` component renders fine. We can now move on to
    the `PostList` component.
  prefs: []
  type: TYPE_NORMAL
- en: The PostList component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After implementing the other post-related components, we can now implement
    the most important part of our blog app: the feed of blog posts. For now, the
    feed is simply going to show a list of blog posts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start implementing the `PostList` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/post/PostList.jsx` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we import `Fragment` and the `Post` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we define the `PostList` function component, accepting a `posts` array
    as a prop. If `posts` is not defined, we set it to an empty array by default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we render all posts by using the `.map` function and the spread syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We return the `<Post>` component for each post and pass all the keys from the
    `post` object to the component as props. We do this by using the spread syntax,
    which has the same effect as listing all the keys from the object manually as
    props, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: If we are rendering a list of elements, we have to give each element a unique
    `key` prop. React uses this `key` prop to efficiently compute the difference between
    two lists when the data has changed. It is best practice to use a unique ID for
    the `key` prop, such as a database ID, so that React can keep track of items changing
    in a list. In this case, however, we do not have such an ID, so we simply fall
    back to using the index.
  prefs: []
  type: TYPE_NORMAL
- en: 'We used the `map` function, which applies a function to all the elements of
    an array. This is similar to using a `for` loop and storing all the results, but
    it is more concise, declarative, and easier to read! Alternatively, we could do
    the following instead of using the `map` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: However, using this style is *not* recommended with React.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the mock-up, we have a horizontal line after each blog post. We can implement
    this without an additional `<div>` container element, by using `Fragment`, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using `Fragment` instead of an additional `<div>` container keeps the DOM tree
    clean and reduces the amount of nesting.
  prefs: []
  type: TYPE_NORMAL
- en: The `key` prop always has to be added to the uppermost parent element that is
    rendered within the `map` function. In this case, we had to move the `key` prop
    from the `Post` component to the `Fragment`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, we test our component by editing the `src/App.jsx` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we can see that our app lists all the posts that we defined in the `posts`
    array.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, listing multiple posts via the `PostList` component works fine.
    We can now move on to putting the app together.
  prefs: []
  type: TYPE_NORMAL
- en: Putting the app together
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After implementing all components to reproduce the mock-up, we only have to
    put everything together in the `App` component. Then, we will have successfully
    reproduced the mock-up!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start modifying the `App` component and putting our app together:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit `src/App.jsx` and *remove* all the current code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, import the `UserBar`, `CreatePost`, and `PostList` components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define some mock data for the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define the `App` component and return a container with some padding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, render the `UserBar` and `CreatePost` components, passing the `username`
    prop to the `CreatePost` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, display the `PostList` component, passing the `posts` prop to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After saving the file, the browser should automatically refresh, and we can
    now see the full UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Full implementation of our static blog app, according to the
    mock-up](img/B31327_03_07.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – Full implementation of our static blog app, according to the mock-up
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, now, all the static components that we defined earlier are rendered
    together in one `App` component.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter03/Chapter03_1`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Our app now looks just like the mock-up, so, we can now move on to making all
    the components dynamic using Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing stateful components with Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have implemented the static structure of our application, we are
    going to add State Hooks to it to be able to handle state and dynamic interactions!
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s create a new folder for the stateful implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter03_1` folder to a new `Chapter03_2` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter03_2` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding Hooks for the user features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To add Hooks for the user features, we are going to have to replace the static
    `username` variable with a Hook. Then, we need to adjust the value when we log
    in, register, and log out.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting UserBar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we created the `UserBar` component, we statically defined a `username`
    variable. We are now going to replace it with a State Hook!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start modifying the `UserBar` component to make it dynamic:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/UserBar.jsx` and import the `useState` Hook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Remove* the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* it with a State Hook, using an empty username as the default value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, pass the `setUsername` function to the `Logout` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For simplicity and to make it easier to follow where the state is being handled,
    we are passing the `username` and `setUsername` function from the State Hook directly
    down to the other components. In real-world projects, it would be better to use
    specific names for the handlers instead, such as `onLogout`. This reduces coupling
    between components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, pass the `setUsername` function to the `Login` and `Register` components,
    respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, the `UserBar` component handles setting the username dynamically. However,
    we still need to modify the other components to add the handlers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/Logout.jsx` and define a `handleSubmit` function, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In React 19, **Form Actions** were introduced as an advanced way of handling
    form submissions. We are going to learn more about Form Actions in [*Chapter 7*](Chapter_07.xhtml#_idTextAnchor169),
    *Using Hooks for Handling Forms*. In this chapter, we will be focusing on using
    the State Hook and the traditional way of handling forms using an `onSubmit` handler
    function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, replace the existing `onSubmit` handler with the newly defined function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/user/Login.jsx` and define a `handleSubmit` function, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can see, we can directly access the value of the `username` field from
    the form by using `e.target.elements`. The key of the `form` element is equivalent
    to the `name` prop on the `<input>` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/Register.jsx` and define a `handleSubmit` function, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can now try registering, logging in, and logging out, and see how the state
    changes across components.
  prefs: []
  type: TYPE_NORMAL
- en: Adding validation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When trying out the `login` and `register` features, you may have noticed that
    there is no validation going on. For simple validation, such as required fields,
    we can directly use HTML features. HTML validation will prevent the user from
    submitting the form if a field is invalid and show a popup telling the user what’s
    wrong with it. However, for more complex validation, such as checking whether
    the repeated password is the same, we will need to use a State Hook to keep track
    of the error state of the form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started implementing validation now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/Login.jsx` and add the `required` prop to the following `input`
    fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/user/Register.jsx` and add the `required` prop as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `src/user/Register.jsx` file, also import the `useState` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add a new State Hook to keep track of the error state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This kind of state is called **local state**, as it is only needed within one
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `handleSubmit` function, check whether the `password` and `password-repeat`
    fields are the same. If not, set the error state and return from the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Early returns from functions, if a certain condition is not met, are usually
    preferable over nesting `if` clauses. Returning early keeps the function easy
    to read and avoids problems where code is accidentally executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the `if` clause, if the passwords are the same, reset the error state
    and process the registration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the end of the form, before the **Register** button, we insert an error
    message if the error state got triggered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we try registering now but do not properly repeat the password, we can see
    the following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Validation and an error message implemented using Hooks](img/B31327_03_08.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – Validation and an error message implemented using Hooks
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have successfully implemented validation, we can move on to passing
    the username to the `CreatePost` component.
  prefs: []
  type: TYPE_NORMAL
- en: Passing the user to CreatePost
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As you might have noticed, the `CreatePost` component still uses the hardcoded
    username. To be able to access the username there, we need to move the Hook from
    the `UserBar` component up into the `App` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/UserBar.jsx` and *cut/remove* the following Hook definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, adjust the function definition to accept these two as props:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Remove* the following `useState` import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, edit `src/App.jsx` and import the `useState` function there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Remove* the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `App` function component, add the Hook we removed earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This kind of state is called **global state**, as it is needed across multiple
    components throughout the blog app, which is also why we moved the State Hook
    up into the `App` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, pass down the `username` value and `setUsername` function to the `UserBar`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In [*Chapter 5*](Chapter_05.xhtml#_idTextAnchor127), *Implementing React Contexts*,
    we are going to learn a better solution to provide the logged-in state to other
    components. For now, we are just going to pass down the value and function, though.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, make sure the `CreatePost` component is only rendered when the user
    is logged in (`username` is defined):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that the user features are fully implemented, we can move on to using Hooks
    to implement the post features!
  prefs: []
  type: TYPE_NORMAL
- en: Adding Hooks for the post features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After implementing the user features, we are now going to implement the dynamic
    creation of posts. We do so by first adjusting the `App` component, then we modify
    the `CreatePost` component to be able to insert new posts.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the App component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similar to the `username` state, we are going to define `posts` as a global
    state in the `App` component and provide it to other components from there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started adjusting the `App` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/App.jsx` and rename the current `posts` array to `defaultPosts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a new Hook for the `posts` state inside of the `App` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, pass `setPosts` as a prop to the `CreatePost` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After providing the state to the `CreatePost` component, let’s continue by adjusting
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the CreatePost component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We now need to use the `setPosts` function to insert a new post when the **Create**
    button is pressed, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/post/CreatePost.jsx` and adjust the function definition to accept
    the `setPosts` prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define a `handleSubmit` function, in which we first gather all the values
    we need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, we shortened the `{ title: title }` object assignment to `{ title }`,
    which has the same effect.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we insert the new post into the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are using a function to get the current value of the State Hook, then
    returning a new value with the new post inserted into the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we reset the form to clear all input fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We still need to assign the newly defined function to the `onSubmit` handler,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we can log in and create a new post, and it will be inserted at the beginning
    of the feed!
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – The first version of our blog app using Hooks, after inserting
    a new post](img/B31327_03_09.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – The first version of our blog app using Hooks, after inserting
    a new post
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter03/Chapter03_2`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we developed our own blog application from scratch! We started
    with a mock-up and then created static components to resemble it. Afterward, we
    implemented Hooks to allow for dynamic behavior. Throughout the chapter, we learned
    how to deal with local and global state using Hooks. Furthermore, we learned how
    to use multiple Hooks, and in which components to define Hooks and store state.
    We also learned how to solve common use cases, such as form validation and submission.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, [*Chapter 4*](Chapter_04.xhtml#_idTextAnchor103), *Using
    the Reducer and Effect Hooks*, we are going to learn about the Reducer Hook, which
    allows us to deal with certain state changes more easily. Furthermore, we are
    going to learn about the Effect Hook, which allows us to run code with side effects.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To recap what we have learned in this chapter, try to answer the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What are good ways to structure folders in React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which principle should we use when splitting up React components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the `map` function do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does destructuring work, and when do we use it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does the spread operator work, and when do we use it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we deal with form validation and submission?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where should local State Hooks be defined?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is global state?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where should global State Hooks be defined?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Official docs on *Thinking in React*: [https://react.dev/learn/thinking-in-react](https://react.dev/learn/thinking-in-react)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/wnXT0](Chapter_03.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_%283%29.png)'
  prefs: []
  type: TYPE_IMG
