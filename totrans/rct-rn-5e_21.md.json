["```js\nnpm install @react-navigation/native \n```", "```js\nnpx expo install react-native-screens react-native-safe-area-context \n```", "```js\nnpm install @react-navigation/native-stack \n```", "```js\nimport Home from \"./Home\";\nimport Settings from \"./Settings\";\nconst Stack = createNativeStackNavigator<RootStackParamList>();\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={Home} />\n        <Stack.Screen name=\"Settings\" component={Settings} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n} \n```", "```js\ntype Props = NativeStackScreenProps<RootStackParamList>;\nexport default function Home({ navigation }: Props) {\n  return (\n    <View style={styles.container}>\n      <StatusBar barStyle=\"dark-content\" />\n      <Text>Home Screen</Text>\n      <Button\n        title=\"Settings\"\n        onPress={() => navigation.navigate(\"Settings\")}\n      />\n    </View>\n  );\n} \n```", "```js\nexport type RootStackParamList = {\n  Home: undefined;\n  Settings: undefined;\n}; \n```", "```js\ntype Props = NativeStackScreenProps<RootStackParamList>;\nexport default function Settings({ navigation }: Props) {\n  return (\n    <View style={styles.container}>\n      <StatusBar barStyle=\"dark-content\" />\n      <Text>Settings Screen</Text>\n      <Button title=\"Home\" onPress={() => navigation.navigate(\"Home\")} />\n    </View>\n  );\n} \n```", "```js\nconst Stack = createNativeStackNavigator<RootStackParamList>();\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={Home} />\n        <Stack.Screen name=\"Details\" component={Details} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n} \n```", "```js\nexport type RootStackParamList = {\n  Home: undefined;\n  Details: { title: string };\n}; \n```", "```js\ntype Props = NativeStackScreenProps<RootStackParamList, \"Home\">;\nexport default function Home({ navigation }: Props) {\n  return (\n    <View style={styles.container}>\n      <StatusBar barStyle=\"dark-content\" />\n      <Text>Home Screen</Text>\n      <Button\n        title=\"First Item\"\n        onPress={() => navigation.navigate(\"Details\", { title: \"First Item\" })}\n      />\n      <Button\n        title=\"Second Item\"\n        onPress={() => navigation.navigate(\"Details\", { title: \"Second Item\" })}\n      />\n      <Button\n        title=\"Third Item\"\n        onPress={() => navigation.navigate(\"Details\", { title: \"Third Item\" })}\n      />\n    </View>\n  );\n} \n```", "```js\ntype Props = NativeStackScreenProps<RootStackParamList, \"Details\">;\nexport default function ({ route }: Props) {\n  const { title } = route.params;\n  return (\n    <View style={styles.container}>\n      <StatusBar barStyle=\"dark-content\" />\n      <Text>{title}</Text>\n    </View>\n  );\n} \n```", "```js\nconst Stack = createNativeStackNavigator<RoutesParams>();\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={Home} />\n        <Stack.Screen\n          name=\"Details\"\n          component={Details}\n          options={({ route }) => ({\n            headerRight: () => {\n              return (\n                <Button\n                  title=\"Buy\"\n                  onPress={() => {}}\n                  disabled={route.params.stock === 0}\n                />\n              );\n            },\n          })}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n} \n```", "```js\ntype Props = NativeStackScreenProps<RoutesParams, \"Home\">;\nexport default function Home({ navigation }: Props) {\n  return (\n    <View style={styles.container}>\n      <StatusBar barStyle=\"dark-content\" />\n      <Button\n        title=\"First Item\"\n        onPress={() =>\n          navigation.navigate(\"Details\", {\n            title: \"First Item\",\n            content: \"First Item Content\",\n            stock: 1,\n          })\n        }\n      />\n      ...\n    </View>\n  );\n} \n```", "```js\ntype Props = NativeStackScreenProps<RoutesParams, \"Details\">;\nexport default function Details({ route, navigation }: Props) {\n  const { content, title } = route.params;\n  React.useEffect(() => {\n    navigation.setOptions({ title });\n  }, []);\n  return (\n    <View style={styles.container}>\n      <StatusBar barStyle=\"dark-content\" />\n      <Text>{content}</Text>\n    </View>\n  );\n} \n```", "```js\nnpm install @react-navigation/bottom-tabs @react-navigation/drawer \n```", "```js\nnpx expo install react-native-gesture-handler react-native-reanimated \n```", "```js\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: [\"babel-preset-expo\"],\n    plugins: [\"react-native-reanimated/plugin\"],\n  };\n}; \n```", "```js\nconst Tab = createBottomTabNavigator<Routes>();\nconst Drawer = createDrawerNavigator<Routes>();\nexport default function App() {\n  return (\n    <NavigationContainer>\n      {Platform.OS === \"ios\" && (\n        <Tab.Navigator>\n          <Tab.Screen name=\"Home\" component={Home} />\n          <Tab.Screen name=\"News\" component={News} />\n          <Tab.Screen name=\"Settings\" component={Settings} />\n        </Tab.Navigator>\n      )}\n      {Platform.OS == \"android\" && (\n        <Drawer.Navigator> \n          <Drawer.Screen name=\"Home\" component={Home} />\n          <Drawer.Screen name=\"News\" component={News} />\n          <Drawer.Screen name=\"Settings\" component={Settings} />\n        </Drawer.Navigator>\n      )}\n    </NavigationContainer>\n  );\n} \n```", "```js\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\"; \n```", "```js\nexport default function Home() {\n  return (\n    <View style={styles.container}>\n      <Text>Home Content</Text>\n    </View>\n  );\n} \n```", "```js\nnpx create-expo-app –template \n```", "```js\n Blank\n    Blank (TypeScript)\n❯   Navigation (TypeScript) - File-based routing with TypeScript enabled\n    Blank (Bare) \n```", "```js\nimport { Stack } from \"expo-router\";\nexport default function RootLayout() {\n  return <Stack />;\n} \n```", "```js\nimport { Link } from \"expo-router\";\nexport default function Home() {\n  return (\n    <View style={styles.container}>\n      <StatusBar barStyle=\"dark-content\" />\n      <Text>Home Screen</Text>\n      <Link href=\"/settings\" asChild>\n        <Button title=\"Settings\" />\n      </Link>\n    </View>\n  );\n} \n```", "```js\nimport { Link } from \"expo-router\";\nexport default function Settings() {\n  return (\n    <View style={styles.container}>\n      <StatusBar barStyle=\"dark-content\" />\n      <Text>Settings Screen</Text>\n      <Link href=\"/\" asChild>\n        <Button title=\"Home\" />\n      </Link>\n    </View>\n  );\n} \n```"]