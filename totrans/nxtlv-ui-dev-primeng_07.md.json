["```js\n- Electronics\n   - Computers\n      - MacBook Air\n      - Smartphone\n   - Phones\n      - iPhone\n      - Samsung\n      - Google Pixel\n- Home & Garden\n   - Outdoor\n   - Furniture\n   - Office\n- Books & Media\n   - Books\n   - Movies & TV\n```", "```js\nimport { TreeModule } from 'primeng/tree'\n```", "```js\n// tree.component.ts\nimport { TreeNode } from 'primeng/api'\n// Html / template\n<p-tree [value]=\"products\" />\n// TypeScript\nproducts: TreeNode[] = [\n   {\n      \"key\": \"0\",\n      \"label\": \"Electronics\",\n      \"data\": \"Category Level\",\n      \"icon\": \"pi pi-tablet\",\n      \"children\": [\n         {\n            \"key\": \"0-0\",\n            \"label\": \"Computers\",\n            \"data\": \"SubCategory Level\",\n            \"icon\": \"pi pi-desktop\",\n            \"children\": [\n               {\n                  \"key\": \"0-0-0\",\n                  \"label\": \"MacBook Air\",\n                  \"data\": \"Product Level\",\n                  \"icon\": \"pi pi-apple\"\n               },\n               ...\n            ]\n         },\n         ...\n      ]\n   }\n   ...\n]\n```", "```js\n// tree.component.ts\n<div class=\"grid gap-2 p-2 mb-2\">\n   <button\n      pButton\n      type=\"button\"\n      label=\"Expand all\"\n      (click)=\"expandAll()\"\n   ></button>\n   <button\n      pButton\n      type=\"button\"\n      label=\"Collapse all\"\n      (click)=\"collapseAll()\"\n   ></button>\n</div>\n<p-tree [value]=\"products\" />\n...\nexpandAll() {\n   this.products.forEach((node) => {\n      this.expandRecursive(node, true)\n   })\n}\ncollapseAll() {\n   this.products.forEach((node) => {\n      this.expandRecursive(node, false)\n   })\n}\nprivate expandRecursive(node: TreeNode, isExpand: boolean) {\n   node.expanded = isExpand\n   if (node.children) {\n      node.children.forEach((childNode) => {\n         this.expandRecursive(childNode, isExpand)\n      })\n   }\n}\n```", "```js\n// tree.component.ts\n<p-tree\n      [value]=\"products\"\nselectionMode=\"single\"\n      (onNodeSelect)=\"onNodeSelected($event)\"\n      (onNodeUnselect)=\"onNodeUnselected($event)\"\n/>\n...\nonNodeSelected(event: TreeNodeSelectEvent) {\n   console.log(event)\n}\nonNodeUnselected(event: TreeNodeSelectEvent) {\n   console.log(event)\n}\n```", "```js\n// tree.component.ts\n<p-tree\n   [value]=\"productsWithEvents\"\n(onNodeExpand)=\"onNodeExpanded($event)\"\n   (onNodeCollapse)=\"onNodeCollapsed($event)\"\n/>\n...\nonNodeExpanded(event: TreeNodeSelectEvent) {\n   console.log(event)\n}\nonNodeCollapsed(event: TreeNodeSelectEvent) {\n   console.log(event)\n}\n```", "```js\n<p-tree\n   [loading]=\"loading\"\n   [value]=\"products\"\n   (onNodeExpand)=\"loadChildNodes($event)\"\n/>\n...\nloading = false\nloadChildNodes(event: TreeNodeSelectEvent) {\n   if (event.node) {\n      this.loading = true\n      // example of retrieving child nodes data\n      event.node.children = this.nodeService.getChildNodes(event.node)\n      this.loading = false\n   }\n}\n```", "```js\nimport { TreeTableModule } from 'primeng/treetable'\n```", "```js\n<p-treeTable\n   [value]=\"products\"\n   [scrollable]=\"true\"\n   [tableStyle]=\"{ 'min-width': '50rem' }\"\n>\n   <ng-template pTemplate=\"header\">\n      <tr>\n         <th>Name</th>\n         <th>Price (USD)</th>\n         <th>Rating</th>\n      </tr>\n   </ng-template>\n<ng-template pTemplate=\"body\" let-rowNode let-product=\"rowData\">\n      <tr [ttRow]=\"rowNode\">\n         <td>\n            <p-treeTableToggler [rowNode]=\"rowNode\" />\n            {{ product.name }}\n         </td>\n         <td>{{ product?.price | currency }}</td>\n         <td>{{ product?.rating }}</td>\n      </tr>\n   </ng-template>\n</p-treeTable>\n...\nproducts: TreeTableNode[] = [\n   {\n      \"key\": \"0\",\n      \"data\": {\n         \"name\": \"Electronics\"\n      },\n      \"children\": [\n         {\n            \"key\": \"0-0\",\n            \"data\": {\n               \"name\": \"Computers\"\n            },\n            \"children\": [\n               {\n                  \"key\": \"0-0-0\",\n                  \"data\": {\n                     \"id\": 1,\n                     \"name\": \"MacBook Air\",\n                     \"price\": 999,\n                     \"description\": \"Light and portable MacBook\",\n                     \"quantity\": 100,\n                     \"rating\": 4,\n                     \"category\": \"Computers\"\n                  }\n               },\n               ...\n            ]\n         }\n      ]\n   }\n   ...\n]\n```", "```js\n<div class=\"grid gap-4 ml-0 mb-4\">\n   <button\n      (click)=\"updateColumns('RATING')\"\n      pButton\n      label=\"Rating\"\n   ></button>\n   <button\n      (click)=\"updateColumns('QUANTITY')\"\n      pButton\n      label=\"Quantity\"\n   ></button>\n</div>\n<p-treeTable\n   [value]=\"products\"\n   [columns]=\"cols\"\n   [scrollable]=\"true\"\n   [tableStyle]=\"{ 'min-width': '50rem' }\"\n>\n   <ng-template pTemplate=\"header\" let-columns>\n      <tr>\n         <th *ngFor=\"let col of columns\">\n            {{ col.header }}\n         </th>\n      </tr>\n   </ng-template>\n   <ng-template\n      pTemplate=\"body\"\n      let-rowNode\n      let-product=\"rowData\"\n      let-columns=\"columns\"\n   >\n      <tr>\n         <td *ngFor=\"let col of columns; let i = index\">\n            <p-treeTableToggler [rowNode]=\"rowNode\" *ngIf=\"i === 0\" />\n            {{ product[col.field] }}\n         </td>\n      </tr>\n   </ng-template>\n</p-treeTable>\n...\ncols = [\n   { field: 'name', header: 'Name' },\n   { field: 'price', header: 'Price' },\n   { field: 'rating', header: 'Rating' },\n]\nupdateColumns(option: string) {\n   switch (option) {\n      case 'RATING':\n         this.cols = [\n            { field: 'name', header: 'Name' },\n            { field: 'price', header: 'Price' },\n            { field: 'rating', header: 'Rating' },\n         ]\n         break\n      case 'QUANTITY':\n         this.cols = [\n            { field: 'name', header: 'Name' },\n            { field: 'price', header: 'Price' },\n            { field: 'quantity', header: 'Quantity' },\n         ]\n         break\n      default:\n         break\n   }\n}\n```", "```js\n<p-treeTable [value]=\"products\" [paginator]=\"true\" [rows]=\"2\">\n      <!-- Column templates and other TreeTable configurations go here -->\n</p-treeTable>\n```", "```js\n<p-treeTable\n[value]=\"files\"\n(onNodeCollapse)=\"handleNodeCollapse($event)\"\n>\n      <!-- Column templates and other TreeTable configurations -->\n</p-treeTable>\n...\nhandleNodeCollapse(event: TreeTableNodeCollapseEvent) {\n   const collapsedNodeData = event.node.data\n   // Handle actions when a node is collapsed\n}\n```", "```js\nimport { TimelineModule } from 'primeng/timeline'\n```", "```js\n<p-timeline [value]=\"orderStatuses\">\n   <ng-template pTemplate=\"content\" let-order>\n      <span [class]=\"order.icon\"></span>\n      {{ order.title }}\n   </ng-template>\n</p-timeline>\n...\norderStatuses = [\n   {\n      title: 'Order Placed',\n      content: 'Your order has been received and is being processed.',\n      icon: 'pi pi-shopping-cart',\n   },\n   {\n      title: 'Order Confirmed',\n      content:\n         'Your payment has been confirmed and the order is now being prepared.',\n      icon: 'pi pi-check-square',\n   },\n   {\n      title: 'In Warehouse',\n      content: 'Your product is in the warehouse, awaiting dispatch.',\n      icon: 'pi pi-globe',\n   },\n   {\n      title: 'Shipped',\n      content:\n         'Your order has been shipped and is on its way to the delivery address.',\n      icon: 'pi pi-truck',\n   },\n   {\n      title: 'Out for Delivery',\n      content: 'The product is out for delivery and will reach you soon.',\n      icon: 'pi pi-map-marker',\n   },\n   {\n      title: 'Delivered',\n      content: 'Your product has been successfully delivered. Enjoy!',\n      icon: 'pi pi-check-circle',\n   },\n]\n```", "```js\n<p-timeline [value]=\"orderStatuses\" align=\"alternate\">\n   // timeline content\n</p-timeline>\n```", "```js\n<p-timeline [value]=\"orderStatuses\" layout=\"horizontal\">\n   // timeline content\n</p-timeline>\n```"]