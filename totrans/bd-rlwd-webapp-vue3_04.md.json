["```js\nnpm init vue@latest\n```", "```js\npnpm install -D tailwindcss postcss autoprefixerpnpm dlx tailwindcss init -p\n```", "```js\n/** @type {import('tailwindcss').Config} */export default {\n  purge: ['./index.html', './src/**/*.{vue,js,ts,jsx,tsx}'],\n  content: ['./src/**/*.{vue,js,ts,jsx,tsx}'],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```", "```js\n@tailwind base;@tailwind components;\n@tailwind utilities;\n```", "```js\nimport { createApp } from 'vue'import App from './App.vue'\nimport router from './router'\nimport './style.css'\nconst app = createApp(App)\napp.use(router)\napp.mount('#app')\n```", "```js\nVITE_APP_MARVEL_API_PUBLIC=YOUR_PUBLIC_KEY_HEREVITE_APP_MARVEL_API_SECRET=YOUR_SECRET_HERE\n```", "```js\nimport type { Comics } from '@/types/marvel'export const useComics = async (): Promise<Comics> => {\n  const apiKey = import.meta.env.VITE_APP_MARVEL_API_PUBLIC;\n  const MARVEL_API = `//gateway.marvel.com/v1/public/\n  const API_SIGN = apikey=${apiKey}`\n  const requestURI = `${MARVEL_API}/comics?${API_SIGN}`\n  const res = await fetch(requestURI);\n  const jsonRes = await res.json();\n  return jsonRes.data;\n}\n```", "```js\n<script lang=\"ts\" setup>import { ref, onMounted } from \"vue\";\nimport type { Ref } from \"vue\";\nimport { useComics } from \"@/composables/marvelApi\";\nimport type { Comic } from \"@/types/marvel\";\nconst isLoading: Ref<boolean> = ref(false);\nconst data: Ref<Comic[] | undefined> = ref();\nconst getComics = async () => {\n  isLoading.value = true;\n  const comics = await useComics();\n  data.value = comics.results;\n  isLoading.value = false;\n};\nonMounted(async () => {\n  await getComics();\n});\n</script>\n```", "```js\n<template>  <div>\n    <div v-if=\"isLoading\"><p>Loading comics…</p></div>\n    <div v-if=\"data && !isLoading\">\n      <div\n        class=\"grid grid-flow-row grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4\"\n      >\n        <div :key=\"comic.id\" v-for=\"comic in data\">{{ comic.title }}</div>\n      </div>\n    </div>\n  </div>\n</template>\n```", "```js\n<script setup lang=\"ts\">const props = defineProps<{\n  text?: string;\n}>();\n</script>\n<template>\n  <div\n    class=\"flex flex-col items-center justify-center p-4 pt-16 min-h-min min-w-screen\"\n  >\n    <div v-if=\"text\" class=\"mb-4\">\n      {{ text }}\n    </div>\n    <div class=\"flex space-x-2 animate-pulse\">\n      <div class=\"w-3 h-3 bg-gray-500 rounded-full\"></div>\n      <div class=\"w-3 h-3 bg-gray-500 rounded-full\"></div>\n      <div class=\"w-3 h-3 bg-gray-500 rounded-full\"></div>\n    </div>\n  </div>\n</template>\n```", "```js\n<script lang=\"ts\" setup>import { ref, onMounted } from \"vue\";\nimport type { Ref } from \"vue\";\nimport { useComics } from \"@/composables/marvelApi\";\nimport type { Comic } from \"@/types/marvel\";\nimport LoadingIndicator from \"./LoadingIndicator.vue\";\n//… abbreviated\n</script>\n<template>\n  <div>\n    <LoadingIndicator v-if=\"isLoading\" text=\"Loading comics...\"/>\n    // … abbreviated\n  </div>\n</template>\n```", "```js\n<template>    <article class=\"p-4 bg-white rounded-lg shadow-xl place-content-center text-slate-800\">\n    <header>\n        <h1 class=\"pb-5 text-lg font-semibold \"><slot name=\"header\"></slot></h1>\n    </header>\n    <slot></slot>\n    </article>\n</template>\n```", "```js\nconst lf = new Intl.ListFormat('en');\n```", "```js\n<template>  <CardView :data-testid=\"comic.id\">\n    <template v-slot:header>\n     {{ comic.title }}\n    </template>\n    <template v-slot:default>\n      <img\n        class=\"aspect-[150/228] shadow-xl float-left mr-4\"\n        :src=\"img/`${comic.thumbnail.path}.${comic.thumbnail.extension}`\"\n        width=\"150\"\n      />\n      //… abbreviated\n    </template>\n  </CardView>\n</template>\n```", "```js\n<template #header>  {{ comic.title }}\n</template>\n<template #default>\n  //… abbreviated\n</template>\n```", "```js\n{  path: '/search,\n  name: search,\n  // route level code-splitting\n  // this generates a separate chunk (Search.[hash].js) for this route\n  // which is lazy-loaded when the route is visited.\n  component: () => import('../views/SearchView.vue')\n}\n```", "```js\n<template>  <div class=\"search\">\n    <h1>This is a search page</h1>\n  </div>\n</template>\n```", "```js\n<script setup lang=\"ts\">import { RouterLink, RouterView } from 'vue-router'\n</script>\n<template>\n  <header>\n    <div class=\"my-4 text-center\">\n      <h1 class=\"mb-4 text-6xl font-extrabold uppercase\">Marvel Explorer 🔭</h1>\n      <nav>\n        <RouterLink to=\"/\" class=\"px-4 py-2 border-2 rounded-s-md hover:text-slate-600\">📒 Comics</RouterLink>\n        <RouterLink to=\"/search\" class=\"px-4 py-2 border-2 border-s-0 hover:text-slate-600 rounded-e-md\">🦹 Heroes</RouterLink>\n      </nav>\n    </div>\n  </header>\n  <RouterView />\n</template>\n```", "```js\n<script setup lang=\"ts\">import ComicsOverview from '@/components/ComicsOverview.vue';\n</script>\n<template>\n  <main>\n    <ComicsOverview />\n  </main>\n</template>\n```", "```js\n{  path: '/:page',\n  name: 'home',\n  component: HomeView\n},\n```", "```js\n{  path: '/:page?',\n  name: 'home',\n  component: HomeView\n},\n```", "```js\n<template>  <div>\n    <LoadingIndicator v-if=\"isLoading\" text=\"Loading comics...\" />\n    <div v-if=\"data && !isLoading\">\n      <div\n        class=\"grid grid-flow-row grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4\"\n      >\n        <ComicCard\n          :comic=\"comic\"\n          :key=\"comic.id\"\n          v-for=\"comic in data\"\n        ></ComicCard>\n      </div>\n      <Pagination\n        :total-pages=\"totalPages\"\n        path=\"/\"\n        :current-page=\"+currentPage\"\n      ></Pagination>\n    </div>\n  </div>\n</template>\n```", "```js\nexport const useComics = async (page: number = 0): Promise<Comics> => {    const apiKey = import.meta.env.VITE_APP_MARVEL_API_PUBLIC;  const MARVEL_API = //gateway.marvel.com/v1/public/\n  const API_SIGN = apikey=${apiKey}\n  const ITEMS_PER_PAGE = 20;\n  const pagination = page ? &offset=${page * ITEMS_PER_PAGE} :\n  const requestURI = ${MARVEL_API}/comics?${API_SIGN}${pagination}\n  const res = await fetch(requestURI);\n  const jsonRes = await res.json();\n  return jsonRes.data;\n}\n```", "```js\n<script lang=\"ts\" setup>import { ref, onMounted, watch } from \"vue\";\n// abbreviated…\nconst getComics = async (page: number = 0) => {\n  isLoading.value = true;\n  const comics = await useComics(page);\n  currentPage.value = comics?.offset / comics?.limit || 0;\n  totalPages.value = Math.ceil(comics.total / comics.limit);\n  data.value = comics.results;\n  isLoading.value = false;\n};\nwatch(\n  () => route.params.page,\n  async (newPage) => {\n    await getComics(+newPage);\n  }\n);\nonMounted(async () => {\n  await getComics(+currentPage.value);\n});\n</script>\n```", "```js\nimport { Path } from '@/types/marvel'import type { Comics, Characters, Character } from '@/types/marvel'\nconst apiKey = import.meta.env.VITE_APP_MARVEL_API_PUBLIC;\nconst MARVEL_API = //gateway.marvel.com/v1/public/\nconst API_SIGN = apikey=${apiKey}\nconst ITEMS_PER_PAGE = 20;\nexport const useComics = async (page: number = 0): Promise<Comics> => {\n  const pagination = page ? &offset=${page * ITEMS_PER_PAGE} :\n  const requestURI = ${MARVEL_API}/comics?${API_SIGN}${pagination}\n  const res = await fetch(requestURI);\n  const jsonRes = await res.json();\n  return jsonRes.data;\n}\n```", "```js\nconst getPagination = (page?: number): string => {    return page ? &offset=${page * ITEMS_PER_PAGE} : ''\n};\n```", "```js\nconst getQuery = (query?: string): string => {    return query ? &${query} : ''\n};\n```", "```js\nconst getRequestURI = (path: Path,query: string, pagination: string): string => {    const apiPath = ${MARVEL_API}/${path};\n    return ${apiPath}?${API_SIGN}${query}${pagination};\n};\n```", "```js\nexport const useFetch = async (requestURI: string): Promise<Comics | Characters> => {  const res = await fetch(requestURI);\n  const jsonRes = await res.json();\n  return jsonRes.data as Comics | Characters;\n};\n```", "```js\ninterface ApiOptions {  query?: string;\n  page?: number;\n}\nexport const useMarvelAPI = async (path: Path, options: ApiOptions): Promise<Comics | Characters> => {\n  const pagination = getPagination(options.page);\n  const query = getQuery(options.query);\n  const requestURI = getRequestURI(path, id, query, pagination);\n  return useFetch(requestURI);\n}\n```", "```js\nexport const useComics = async (page: number = 0): Promise<Comics> => {  return await useMarvelAPI(Path.COMICS, { page }) as Comics\n}\n```", "```js\nexport const useCharacterSearch = async (query: string, page: number = 0): Promise<Characters> => {  return await useMarvelAPI(Path.CHARACTERS, { query: nameStartsWith=${query}, page }) as Characters\n}\n```", "```js\n<script setup lang=\"ts\">import type { Character } from \"@/types/marvel\";\nimport CardView from \"./CardView.vue\";\ninterface Props {\n  character: Character;\n}\nconst props = defineProps<Props>();\n</script>\n<template>\n  <CardView :id=\"character.id\">\n    <img :src=\"img/`${character.thumbnail.path}.${character.thumbnail.extension}`\" class=\"float-left w-12 h-12 mb-2 mr-4 rounded-full shadow-md aspect-square\" />\n    <template #header>{{ character.name }}</template>\n    <div class=\"text-base max-w-prose\">{{ character.description }}</div>\n  </CardView>\n</template>\n```", "```js\n<script lang=\"ts\" setup>import { ref } from \"vue\";\nimport type { Ref } from \"vue\";\nconst emit = defineEmits(['searchSubmit'])\ninterface Props {\n  isSearching: boolean;\n}\nconst props = defineProps<Props>();\nconst query: Ref<string> = ref(\"\");\nconst search = (): void => {\n  emit(\"searchSubmit\", query.value);\n};\n</script>\n```", "```js\n<template>  <form class=\"flex justify-center my-8\" v-on:submit.stop=\"search\">\n    <input\n      class=\"px-3 py-2 border rounded-md rounded-r-none disabled:opacity-40 border-slate-300 text-slate-800 focus:outline-none focus:border-slate-500\"\n      type=\"text\"\n      v-model=\"query\"\n      placeholder=\"Search...\"\n      :disabled=\"isSearching\"\n    />\n    <button\n      class=\"px-4 py-2 text-sm font-bold text-white transition-colors duration-300 rounded-md rounded-l-none disabled:opacity-40 bg-slate-500 hover:bg-slate-600\"\n      :disabled=\"isSearching\"\n      type=\"submit\"\n    >\n      🔍 Search\n    </button>\n  </form>\n</template>\n```", "```js\n<script lang=\"ts\" setup>import { ref, watch } from \"vue\";\nimport type { Ref } from \"vue\";\nconst emit = defineEmits([\"searchSubmit\"]);\ninterface Props {\n  isSearching: boolean;\n}\nconst props = defineProps<Props>();\nconst query: Ref<string> = ref(\"\");\nlet timeout: number;\nconst search = (): void => {\n  emit(\"searchSubmit\", query.value);\n};\nconst debouncedSearch = (): void => {\n  clearTimeout(timeout);\n  timeout = setTimeout(async () => {\n    search();\n  }, 500);\n};\nwatch(query, (): void => {\n  debouncedSearch();\n});\n</script>\n```", "```js\n<template>  <div>\n    <SearchForm\n      :is-searching=\"isSearching\"\n      @search-submit=\"search\"\n    />\n    <LoadingIndicator v-if=\"isSearching\" :text=\"Searching by '${searchQuery}'...\" />\n    // ...abbreviated\n  </div>\n</template>\n```", "```js\n<template>  <main>\n    Oops!\n  </main>\n</template>\n```", "```js\nimport { createRouter, createWebHistory } from 'vue-router'import HomeView from '../views/HomeView.vue'\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: '/:page?',\n      name: 'home',\n      component: HomeView\n    },\n    {\n      path: '/search',\n      name: 'search',\n      component: () => import('../views/SearchView.vue')\n    },\n    {\n      path: '/error',\n      name: 'error',\n      component: () => import('../views/ErrorView.vue')\n    }\n  ]\n})\nexport default router\n```", "```js\nexport const useComics = async (page: number = 0): Promise<Comics> => {  try {\n    return await useMarvelAPI(Path.COMICS, { page }) as Comics\n  } catch {\n    throw new Error('An error occurred while trying to read comics');\n  }\n}\nexport const useCharacterSearch = async (query: string, page: number = 0): Promise<Characters> => {\n  try {\n    return await useMarvelAPI(Path.CHARACTERS, { query: nameStartsWith=${query}, page }) as Characters\n  } catch {\n    throw new Error('An error occurred while trying to search comics');\n  }\n}\n```", "```js\n<template>  <article\n    class=\"p-4 mx-4 my-24 bg-white rounded-lg shadow-xl place-content-center text-slate-800\"\n  >\n    <header>\n      <h1 class=\"pb-5 text-lg font-semibold\">Oops! 🤭</h1>\n    </header>\n    Something went wrong!\n  </article>\n</template>\n```", "```js\n<script setup lang=\"ts\">import ErrorMessage from '@/components/ErrorMessage.vue'\n</script>\n<template>\n  <main>\n    <ErrorMessage />\n  </main>\n</template>\n```", "```js\n<script lang=\"ts\" setup>import { ref } from \"vue\";\nimport type { Ref } from \"vue\";\nimport { useRouter } from \"vue-router\";\n// … abbreviated\nconst router = useRouter();\n// … abbreviated\nconst getCharacterSearch = async (query: string, page: number = 0) => {\n  try {\n    if (query !== \"\") {\n      isSearching.value = true;\n      searchQuery.value = query;\n      const search = await useCharacterSearch(query, page);\n      currentPage.value = search?.offset / search?.limit || 0;\n      totalPages.value = Math.ceil(search.total / search.limit);\n      data.value = search.results;\n      isSearching.value = false;\n    } else {\n      searchReset();\n    }\n  } catch (e) {\n    router.push(\"/error\");\n  }\n};\n// … abbreviated\n</script>\n```", "```js\n} catch (e) {  router.push(\"/error\");\n}\n```", "```js\n} catch (e) {  router.push({ path: 'error', query: { info: e as string }})\n}\n```", "```js\n<script setup lang=\"ts\">import { ref, onMounted } from \"vue\";\nimport type { Ref } from \"vue\";\nimport { useRoute } from \"vue-router\";\nconst route = useRoute();\nconst errorMessage: Ref<string> = ref(\"\");\nonMounted((): void => {\n  errorMessage.value = route.query.info as string;\n});\n</script>\n<template>\n  <article\n    class=\"p-4 mx-4 my-24 bg-white rounded-lg shadow-xl place-content-center text-slate-800\"\n  >\n    <header>\n      <h1 class=\"pb-5 text-lg font-semibold\">Oops! 🤭</h1>\n    </header>\n    {{ errorMessage }}\n  </article>\n</template>\n```"]