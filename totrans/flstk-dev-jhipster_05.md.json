["```js\n<div *ngIf=\"products\">\n    <div class=\"*list-group*\">\n        <a [routerLink]=\"['../product', product.id ]\" \n           class=\"*list-group-item list-group-item-action* flex-column \n           align-items-start\"\n           *ngFor=\"let product of products; trackBy: trackId\">\n            <div class=\"d-flex w-100 justify-content-between\">\n                <h5 class=\"mb-1\">{{product.name}}</h5>\n                <small *ngIf=\"product.productCategory\">\n                    <a [routerLink]=\"['../product-category', \n                     product.productCategory?.id ]\" >\n                        {{product.productCategory?.id}}\n                    </a>\n                </small>\n            </div>\n            <small class=\"mb-1\">{{product.description}}</small>\n            <p class=\"mb-1\">Price: {{product.price}}</p>\n            <small>\n                Size: \n                <span jhiTranslate=\"{{'storeApp.Size.' + \n                 product.size}}\">\n                    {{product.size}}\n                </span>\n            </small>\n        </a>\n    </div>\n</div>\n```", "```js\n<div *ngIf=\"products\">\n    <div class=\"list-group\">\n        <a [routerLink]=\"['../product', product.id ]\" class=\"list-group-item list-group-item-action flex-column align-items-start\"\n            *ngFor=\"let product of products; trackBy: trackId\">\n            <div class=\"row\">\n                <div class=\"col-2 col-xs-12 justify-content-center\">\n                    <img [src]=\"'data:' + product.imageContentType + \n                    ';base64,' + product.image\" \n                        style=\"max-height:150px;\" alt=\"product image\"/>\n                </div>\n                <div class=\"col col-xs-12\">\n                    <div class=\"d-flex w-100 justify-content-between\">\n                        ...\n                    </div>\n                    <small class=\"mb-1\">{{product.description}}</small>\n                    <p class=\"mb-1\">Price: {{product.price}}</p>\n                    <small>\n                        ...\n                    </small>\n                </div>\n            </div>\n        </a>\n    </div>\n</div>\n```", "```js\n<div *ngIf=\"products\">\n    <div class=\"list-group\">\n        <a [routerLink]=\"['../product', product.id ]\" \n            class=\"list-group-item list-group-item-action flex-column \n            align-items-start\"\n            *ngFor=\"let product of products; trackBy: trackId\">\n            <div class=\"row\">\n                <div class=\"col-2 col-xs-12 justify-content-center\">\n                    <img [src]=\"'data:' + product.imageContentType + \n                     ';base64,' + product.image\" \n                        style=\"max-height:150px;\" alt=\"product image\"/>\n                </div>\n                <div class=\"col col-xs-12\">\n                    <div class=\"d-flex w-100 justify-content-between\">\n                        <h5 class=\"mb-1\">{{product.name}}</h5>\n                        <small *ngIf=\"product.productCategory\">\n                            <a [routerLink]=\"['../product-category', \n                                    product.productCategory?.id ]\" >\n                                Category: {{product.productCategory?.id}}\n                            </a>\n                        </small>\n                    </div>\n                    <small class=\"mb-1\">{{product.description}}</small>\n                <p class=\"mb-1\">{{product.price | currency:'USD'}}</p>\n                    <small>\n                        Size:\n                        <span jhiTranslate=\"{{'storeApp.Size.' + \n                         product.size}}\">\n                            {{product.size}}\n                        </span>\n                    </small>\n                    <div *jhiHasAnyAuthority=\"'ROLE_ADMIN'\">\n                        <button type=\"submit\"\n                                [routerLink]=\"['/', \n                                    { outlets: { popup: 'product/'+ \n                                    product.id + '/edit'} }]\"\n                                replaceUrl=\"true\"\n                                queryParamsHandling=\"merge\"\n                                class=\"btn btn-primary btn-sm\">\n                            <span class=\"fa fa-pencil\"></span>\n                            <span class=\"d-none d-md-inline\"\n                                  jhiTranslate=\"entity.action.edit\">Edit</span>\n                        </button>\n                        <button type=\"submit\"\n                                [routerLink]=\"['/', \n                                    { outlets: { popup: 'product/'+ \n                                     product.id + '/delete'} }]\"\n                                replaceUrl=\"true\"\n                                queryParamsHandling=\"merge\"\n                                class=\"btn btn-danger btn-sm\">\n                            <span class=\"fa fa-remove\"></span>\n                            <span class=\"d-none d-md-inline\" \n                                  jhiTranslate=\"entity.action.delete\">Delete</span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </a>\n    </div>\n</div>\n```", "```js\n<div class=\"mb-2 d-flex justify-content-end align-items-center\">\n    <span class=\"mx-2 col-1\">Sort by</span>\n    <div class=\"btn-group\" role=\"group\"\n        jhiSort [(predicate)]=\"predicate\" [(ascending)]=\"reverse\"\n [callback]=\"transition.bind(this)\">\n        <button type=\"button\" class=\"btn btn-light\" jhiSortBy=\"name\">\n            <span jhiTranslate=\"storeApp.product.name\">Name</span>\n            <span class=\"fa fa-sort\"></span>\n        </button>\n        <button type=\"button\" class=\"btn btn-light\" jhiSortBy=\"price\">\n            <span jhiTranslate=\"storeApp.product.price\">Price</span>\n            <span class=\"fa fa-sort\"></span>\n        </button>\n        <button type=\"button\" class=\"btn btn-light\" jhiSortBy=\"size\">\n            <span jhiTranslate=\"storeApp.product.size\">Size</span>\n            <span class=\"fa fa-sort\"></span>\n        </button>\n        <button type=\"button\" class=\"btn btn-light\" \n         jhiSortBy=\"productCategory.id\">\n            <span  \njhiTranslate=\"storeApp.product.productCategory\">Product Category</span>\n            <span class=\"fa fa-sort\"></span>\n        </button>\n    </div>\n</div>\n```", "```js\nexport class ProductComponent implements OnInit, OnDestroy {\n\n    ...\n    filter: string;\n\n    constructor(\n        ...\n    ) {\n    ...\n    }\n    ...\n}\n```", "```js\n<div class=\"mb-2 d-flex justify-content-end align-items-center\">\n    <span class=\"mr-2 col-2\">Filter by name</span>\n <input type=\"search\" class=\"form-control\" [(ngModel)]=\"filter\">\n    <span class=\"mx-2 col-1\">Sort by</span>\n    <div class=\"btn-group\" role=\"group\"\n        ...\n    </div>\n</div>\n```", "```js\n*ngFor=\"let product of (products | pureFilter:filter:'name'); trackBy: trackId\"\n```", "```js\n> git add --all\n> git commit -am \"update product listing page UI\"\n```", "```js\nrelationship OneToOne {\n    Customer{user} to User\n}\n\nrelationship ManyToOne {\n  OrderItem{product} to Product\n}\n\nrelationship OneToMany {\n   Customer{order} to ProductOrder{customer},\n   ProductOrder{orderItem} to OrderItem{order},\n   ProductOrder{invoice} to Invoice{order},\n   Invoice{shipment} to Shipment{invoice},\n   ProductCategory{product} to Product{productCategory}\n}\n```", "```js\nrelationship OneToOne {\n    Customer{user(login)} to User\n}\n\nrelationship ManyToOne {\n  OrderItem{product(name)} to Product\n}\n\nrelationship OneToMany {\n   Customer{order} to ProductOrder{customer(email)},\n   ProductOrder{orderItem} to OrderItem{order(code)},\n   ProductOrder{invoice} to Invoice{order(code)},\n   Invoice{shipment} to Shipment{invoice(code)},\n   ProductCategory{product} to Product{productCategory(name)}\n}\n```", "```js\n> git checkout -b entity-update-display-name\n> jhipster import-jdl online-store.jh\n```", "```js\n> jhipster entity Invoice \n```", "```js\nUsing JHipster version installed globally\nExecuting jhipster:entity Invoice\nOptions: \n\nFound the .jhipster/Invoice.json configuration file, entity can be automatically generated!\n\nThe entity Invoice is being updated.\n\n? Do you want to update the entity? This will replace the existing files for this entity, all your custom code will be overwritten \n  Yes, re generate the entity \n❯ Yes, add more fields and relationships \n  Yes, remove fields and relationships \n  No, exit \n```", "```js\nGenerating field #7\n\n? Do you want to add a field to your entity? Yes\n? What is the name of your field? code\n? What is the type of your field? String\n? Do you want to add validation rules to your field? Yes\n? Which validation rules do you want to add? Required\n\n================= Invoice =================\nFields\ndate (Instant) required\ndetails (String) \nstatus (InvoiceStatus) required\npaymentMethod (PaymentMethod) required\npaymentDate (Instant) required\npaymentAmount (BigDecimal) required\ncode (String) required\n\nRelationships\nshipment (Shipment) one-to-many \norder (ProductOrder) many-to-one \n\nGenerating field #8\n\n? Do you want to add a field to your entity? (Y/n) \n```", "```js\nrelationship OneToOne {\n    Customer{user(login) required} to User\n}\n\nrelationship ManyToOne {\n    OrderItem{product(name) required} to Product\n}\n\nrelationship OneToMany {\n   Customer{order} to ProductOrder{customer(email) required},\n   ProductOrder{orderItem} to OrderItem{order(code) required},\n   ProductOrder{invoice} to Invoice{order(code) required},\n   Invoice{shipment} to Shipment{invoice(code) required},\n   ProductCategory{product} to Product{productCategory(name)}\n}\n```", "```js\n> git add --all\n> git commit -am \"entity relationships display names and required update\"\n```", "```js\n> git add src/main/webapp/app/entities/product/product.component.html\n> git commit -am \"cherrypick: update product listing page UI\"\n> git checkout master\n> git merge --no-ff entity-update-display-name\n```", "```js\nliquibase.AsyncSpringLiquibase : Liquibase could not start correctly, your database is NOT ready: Validation Failed:\n 5 change sets check sum\n config/liquibase/changelog/20180114123500_added_entity_Customer.xml::20180114123500-1::jhipster was: 7:3e0637bae010a31ecb3416d07e41b621 but is now: 7:01f8e1965f0f48d255f613e7fb977628\n config/liquibase/changelog/20180114123501_added_entity_ProductOrder.xml::20180114123501-1::jhipster was: 7:0ff4ce77d65d6ab36f27b229b28e0cda but is now: 7:e5093e300c347aacf09284b817dc31f1\n config/liquibase/changelog/20180114123502_added_entity_OrderItem.xml::20180114123502-1::jhipster was: 7:2b3d9492d127add80003e2f7723903bf but is now: 7:4beb407d4411d250da2cc2f1d84dc025\n config/liquibase/changelog/20180114123503_added_entity_Invoice.xml::20180114123503-1::jhipster was: 7:5afaca031815e037cad23f0a0f5515d6 but is now: 7:fadec7bfabcd82dfc1ed22c0ba6c6406\n config/liquibase/changelog/20180114123504_added_entity_Shipment.xml::20180114123504-1::jhipster was: 7:74d9167f5da06d3dc072954b1487e11d but is now: 7:0b1b20dd4e3a38f7410b6b3c81e224fd\n```", "```js\n// Override Boostrap variables\n@import \"bootstrap-variables\";\n@import 'node_modules/bootswatch/dist/materia/variables'; // Import Bootstrap source files from node_modules\n@import 'node_modules/bootstrap/scss/bootstrap';\n@import \"node_modules/bootswatch/dist/materia/bootswatch\";\n```", "```js\n$primary: #032b4e;\n$success: #1df54f;\n$info: #17a2b8;\n$warning: #ffc107;\n$danger: #fa1a30;\n```", "```js\n.form-check-input {\n    height: 18px;\n    width: 18px;\n}\n```", "```js\n> git add --all\n> git commit -am \"update bootstrap theme using bootswatch\"\n```", "```js\n> git checkout -b add-french-language\n> jhipster languages\n```", "```js\nUsing JHipster version installed locally in current project's node_modules\nExecuting jhipster:languages\nOptions:\n\nLanguages configuration is starting\n? Please choose additional languages to install (Press <space> to select, <a> to toggle all, <i> to inverse selection) >◯ Arabic (Libya)\n ◯ Armenian\n ◯ Catalan\n ◯ Chinese (Simplified)\n ◯ Chinese (Traditional)\n ◯ Czech\n ◯ Danish\n(Move up and down to reveal more choices)\n```", "```js\n.yo-rc.json\n\nsrc/main/resources/i18n/messages_fr.properties\n\nsrc/main/webapp/app/shared/language/find-language-from-key.pipe.ts\n\nsrc/main/webapp/app/shared/language/language.constants.ts\n\nwebpack/webpack.common.js\n\nsrc/main/webapp/i18n/fr\n```", "```js\n> git add --all\n> git commit -am \"add French as additional language\"\n> git merge --no-ff add-french-language\n```", "```js\n.antMatchers(\"/api/customers\").hasAuthority(AuthoritiesConstants.ADMIN)\n.antMatchers(\"/api/product-categories\").hasAuthority(AuthoritiesConstants.ADMIN)\n```", "```js\n    @DeleteMapping(\"/order-items/{id}\")\n    @Timed\n    @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\n    public ResponseEntity<Void> deleteOrderItem(@PathVariable Long id) {\n        ...\n    }\n```", "```js\n    @Transactional(readOnly = true)\n    public Page<ProductOrder> findAll(Pageable pageable) {\n        log.debug(\"Request to get all ProductOrders\");\n if (SecurityUtils.isCurrentUserInRole(AuthoritiesConstants.ADMIN)) {\n return productOrderRepository.findAll(pageable);\n } else\n return productOrderRepository.findAllByCustomerUserLogin(\n SecurityUtils.getCurrentUserLogin().get(),\n pageable\n );\n    }\n```", "```js\nPage<ProductOrder> findAllByCustomerUserLogin(String login, Pageable pageable);\n```", "```js\nselect * from product_order po cross join customer c cross join jhi_user u where po.customer_id=c.id and c.user_id=u.id and u.login=:login\n```", "```js\nPage<Invoice> findAllByOrderCustomerUserLogin(String login, Pageable pageable);\n```", "```js\nPage<OrderItem> findAllByOrderCustomerUserLogin(String login, Pageable pageable);\n```", "```js\nPage<Shipment> findAllByInvoiceOrderCustomerUserLogin(String login, Pageable pageable);\n```", "```js\n    @Transactional(readOnly = true)\n    public ProductOrder findOne(Long id) {\n        log.debug(\"Request to get ProductOrder : {}\", id);\n        if (SecurityUtils.isCurrentUserInRole(AuthoritiesConstants.ADMIN)) {\n return productOrderRepository.findOne(id);\n } else\n return productOrderRepository.findOneByIdAndCustomerUserLogin(\n id,\n SecurityUtils.getCurrentUserLogin().get()\n );\n    }\n```", "```js\nProductOrder findOneByIdAndCustomerUserLogin(Long id, String login);\n```", "```js\nInvoice findOneByIdAndOrderCustomerUserLogin(Long id, String login);\n```", "```js\nOrderItem findOneByIdAndOrderCustomerUserLogin(Long id, String login);\n```", "```js\nShipment findOneByIdAndInvoiceOrderCustomerUserLogin(Long id, String login);\n```", "```js\n> git add --all\n> git commit -am \"update role based authorization logic\"\n```"]