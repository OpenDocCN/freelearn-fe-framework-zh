- en: Organizing Your Angular Project Structure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织您的 Angular 项目结构
- en: In this chapter, we will create project structure using the `@angular/cli` command.
    We will download all the necessary libraries using **npm** (**node package manager**).
    Then, we will start the project to take a look at our first Angular application
    running on the browser. We will go through all the important files that are required
    to develop a high-quality Angular application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 `@angular/cli` 命令创建项目结构。我们将使用 **npm**（**Node 包管理器**）下载所有必要的库。然后，我们将启动项目，查看在浏览器上运行的第一个
    Angular 应用程序。我们将介绍开发高质量 Angular 应用程序所需的所有重要文件。
- en: npm is a package manager for JavaScript. It also helps in installing packages
    required to develop an application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: npm 是 JavaScript 的包管理器。它还帮助安装开发应用程序所需的包。
- en: We will also run through setting up a testing framework setup and write test
    cases for some of the important components of our social application. Our aim
    is to develop a production-ready application through testing, development, and
    analytics.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将运行设置测试框架的过程，并为我们的社交应用的一些重要组件编写测试用例。我们的目标是通过对测试、开发和数据分析的开发，创建一个生产就绪的应用程序。
- en: At the end, we will go through the recommended guidelines for coding styles,
    as this is the most ignored part in development. We feel this is required when
    we develop any application in the team so that common terms and terminologies
    are followed across the development team.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将介绍编码风格的推荐指南，因为这是开发中最被忽视的部分。我们觉得在团队开发任何应用程序时，这是必需的，以确保在整个开发团队中遵循通用术语和术语。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Creating a project outline
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建项目大纲
- en: Project structure
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目结构
- en: Setting up Firebase
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Firebase
- en: Angular terminologies
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 术语
- en: The application project structure
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序项目结构
- en: Common principles
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见原则
- en: Coding standard guidelines
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编码标准指南
- en: Creating a project outline
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目大纲
- en: '**Angular CLI** (**command-line interface**) makes it easy to create a project.
    It also helps in creating component, routes, services, and pipes with a simple-to-use
    command. We will use Angular CLI to create a sample project outline. This provides
    all the necessary files to start building your application.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Angular CLI**（**命令行界面**）使创建项目变得容易。它还通过简单的命令帮助创建组件、路由、服务和管道。我们将使用 Angular
    CLI 创建一个示例项目大纲。这提供了开始构建您的应用程序所需的所有必要文件。'
- en: 'We require the following four steps to run our first Angular application without
    any coding and get our first welcome page. We also need npm to install important
    libraries; you can download npm from [https://nodejs.org/en/download/](https://nodejs.org/en/download/):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下四个步骤来运行我们的第一个 Angular 应用程序，而无需编写任何代码，并获取我们的第一个欢迎页面。我们还需要 npm 来安装重要的库；您可以从
    [https://nodejs.org/en/download/](https://nodejs.org/en/download/) 下载 npm：
- en: 'Let''s install Angular CLI using `npm`:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用 `npm` 安装 Angular CLI：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Please note that the `-g` flag installs the angular CLI globally so that it
    can be accessed in any project.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`-g` 标志全局安装 angular CLI，以便在任何项目中都可以访问。
- en: 'Create the friends project structure using the `ng new` command. Since we are
    using SASS to create our style sheets, we will provide the `--style=sass` option
    as well, and this configures SASS in our application. Take a look at the following
    command:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `ng new` 命令创建 friends 项目的结构。由于我们使用 SASS 创建样式表，因此我们还将提供 `--style=sass` 选项，这将配置我们的应用程序中的
    SASS。请查看以下命令：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Don't forget to give your project name at the end, otherwise it will create
    a default project name.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在最后给出您的项目名称，否则它将创建一个默认的项目名称。
- en: 'Go to the newly created `friends` folder and execute `npm install`. This installs
    all the packages required to build our application, and it also creates the `node_modules`
    folder. Take a look at the following command:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入新创建的 `friends` 文件夹并执行 `npm install`。这安装了构建我们的应用程序所需的所有包，并创建了 `node_modules`
    文件夹。请查看以下命令：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, deploy the newly created friends project using `npm start` and take
    a look at your first Angular application running in a browser. Refer to the following
    command. The default port is 4200, and you can type `http://localhost:4200` to
    see your sample application in a browser:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用 `npm start` 部署新创建的 friends 项目，并查看在浏览器中运行的第一个 Angular 应用程序。请参考以下命令。默认端口是
    4200，您可以在浏览器中输入 `http://localhost:4200` 来查看您的示例应用程序：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Congratulations on your first Angular application!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜您完成了您的第一个 Angular 应用程序！
- en: Project structure
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目结构
- en: 'The next step is to map the newly created project to an editor. We use WebStorm
    as our editor, which is a paid version. You can use Visual Studio Code or Sublime
    as your editor, which are free versions, and you can download them from the following
    URLs:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将新创建的项目映射到一个编辑器。我们使用WebStorm作为我们的编辑器，这是一个付费版本。您可以使用免费的Visual Studio Code或Sublime作为您的编辑器，您可以从以下URL下载它们：
- en: 'Visual Studio Code: [https://code.visualstudio.com/download](https://code.visualstudio.com/download)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Visual Studio Code: [https://code.visualstudio.com/download](https://code.visualstudio.com/download)'
- en: Sublime Text: [https://www.sublimetext.com/download](https://www.sublimetext.com/download)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Sublime Text: [https://www.sublimetext.com/download](https://www.sublimetext.com/download)'
- en: 'We mapped the project to our WebStorm editor and installed the dependent libraries
    using `npm install`, and it creates a `node_modules` folder. This folder contains
    all the dependent libraries. Our project structures in the editor looks like the
    following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将项目映射到我们的WebStorm编辑器，并使用 `npm install` 安装依赖库，它创建了一个 `node_modules` 文件夹。这个文件夹包含所有依赖库。在编辑器中的项目结构如下截图所示：
- en: '![](img/00005.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00005.jpeg)'
- en: Overview of package.json
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: package.json概述
- en: The `package.json` file specifies the starter packages for running the application.
    We can also add packages in this file as our application evolves.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 文件指定了运行应用的起始包。我们也可以在此文件中添加包，随着应用的演变。'
- en: 'The `package.json` file contains the following two sets of dependencies:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 文件包含以下两组依赖：'
- en: '`dependencies`**: **The packages in "dependencies" contain all essential libraries
    for running the Angular application:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dependencies`**: **"dependencies" 中的包包含运行Angular应用所需的所有基本库：'
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Dependencies consist of the following libraries. We have explained only the
    important libraries in the following list:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖包括以下库。以下列表中我们只解释了重要的库：
- en: '`@angular/common`: It provides commonly used functionalities, such as pipes,
    services, and directives.'
  id: totrans-39
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/common`: 它提供了常用功能，如管道、服务和指令。'
- en: '`@angular/compiler`: It understands templates and converts them into a format
    that the browser understands so that our application can run and render. We don''t
    interact directly with this library.'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/compiler`: 它理解模板，并将它们转换为浏览器可以理解的格式，以便我们的应用可以运行和渲染。我们不直接与此库交互。'
- en: '`@angular/core`: It provides all common metadata, such as component, directive,
    dependency injection, and component life cycle hooks.'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/core`: 它提供了所有常用元数据，例如组件、指令、依赖注入和组件生命周期钩子。'
- en: '`@angular/forms`: It provides a basic layout for inputs. This is used in login,
    signup, or feedback.'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/forms`: 它提供了一个基本的输入布局。这用于登录、注册或反馈。'
- en: '`@angular/http`: It is an Angular service that provides a utility function
    for HTTP rest calls.'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/http`: 它是一个Angular服务，提供了一个用于HTTP REST调用的实用函数。'
- en: '`@angular/platform-browser`: It provides the `bootstrapStatic()` method for
    bootstrapping applications for production builds.'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/platform-browser`: 它提供了用于生产构建启动应用的 `bootstrapStatic()` 方法。'
- en: '`@angular/platform-browser-dynamic`***:*** It is mainly used in bootstrapping
    during development.'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/platform-browser-dynamic`***:*** 它主要在开发过程中的启动阶段使用。'
- en: '`@angular/router`: It provides a component router for navigation between components.'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/router`: 它提供了一个组件路由器，用于组件之间的导航。'
- en: '`core-js`: It patches the global context window with essential features of
    ES2015 (ES6).'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core-js`: 它将ES2015（ES6）的基本功能修补到全局上下文window中。'
- en: '`rxjs`: It is a library for reactive programming using observables that help
    in writing asynchronous code for HTTP.'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rxjs`: 它是一个用于使用观察者进行响应式编程的库，有助于编写HTTP的异步代码。'
- en: '`zone.js`: It provides an execution context that persists across asynchronous
    tasks.'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zone.js`: 它提供了一个在异步任务之间持续存在的执行上下文。'
- en: '`devDependencies`**:** The packages in `devDependencies` contain libraries
    that are mostly required during the development process. You can exclude `devDependencies`
    during production builds using the following `npm` command:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`devDependencies`**:** `devDependencies` 中的包主要在开发过程中需要。您可以使用以下 `npm` 命令在生产构建中排除
    `devDependencies`：'
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Setting up Firebase
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Firebase
- en: 'In our project, we use Firebase as a backend service, a mobile and web application
    platform. It provides complete suites of products integrated into one platform
    and makes the development process much faster with the major part handled by the
    platform. Its products are segregated around two major themes:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们使用 Firebase 作为后端服务，一个移动和网页应用平台。它提供了一整套集成到一个平台的产品，使得开发过程更加快速，主要部分由平台处理。其产品主要围绕两个主要主题：
- en: '**Develop and test your application**: These suites provide all the services
    required to develop a scalable application'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发和测试你的应用**：这些套件提供了开发可扩展应用所需的所有服务'
- en: '**Grow and engage your audience**: This is mostly required to grow our application'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增长并吸引你的受众**：这对于我们应用的增长是必需的'
- en: You can refer to the following link for more information on Firebase: [https://firebase.google.com/](https://firebase.google.com/).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考以下链接获取有关 Firebase 的更多信息：[https://firebase.google.com/](https://firebase.google.com/)。
- en: Setting up an account for Firebase
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Firebase 账户
- en: The first step in creating a new Firebase project is to create your new Google
    account or work with the current account.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新 Firebase 项目的第一步是创建你的新 Google 账户或使用当前账户。
- en: 'Now, open the Firebase portal and follow four steps to start your Firebase
    project:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开 Firebase 门户，按照以下四个步骤开始你的 Firebase 项目：
- en: Click on GO TO CONSOLE on the top-right corner.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的“GO TO CONSOLE”。
- en: Click on Add Project with plus (+) sign.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击带有加号（+）的“添加项目”。
- en: In the pop-up window, enter Project name and Country/region. Project ID is an
    optional field, and this will take a default value.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出的窗口中，输入项目名称和国家/地区。项目 ID 是可选字段，它将采用默认值。
- en: Click on CREATE PROJECT.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 CREATE PROJECT。
- en: 'The following screenshot shows the friends project:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了朋友项目：
- en: '![](img/00006.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00006.jpeg)'
- en: 'Finally, you get your configuration details on the welcome page of Firebase
    and then click on Add Firebase to your web app. You can copy this configuration
    into `environments.ts`, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你在 Firebase 的欢迎页面上获取配置详情，然后点击将 Firebase 添加到你的 web 应用。你可以将此配置复制到 `environments.ts`
    中，如下所示：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Angular terminologies
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular 术语
- en: 'In this section, we will discuss important terminologies in Angular. You may
    be familiar with most of them, but this will refresh your knowledge:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论 Angular 中的重要术语。你可能对其中大部分都很熟悉，但这将帮助你巩固知识：
- en: '**Module**: Angular supports modularity using modules. All Angular projects
    have at least one module known as `AppModule`. When we build large applications,
    we can divide our application into multiple feature modules with common related
    capabilities. We can create module using the `@NgModule` annotation.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块**：Angular 通过模块支持模块化。所有 Angular 项目至少有一个名为 `AppModule` 的模块。当我们构建大型应用时，我们可以将应用划分为具有共同相关能力的多个功能模块。我们可以使用
    `@NgModule` 注解创建模块。'
- en: '**Component**: Component is a controller, which has views and logic to manage
    view events and navigation between components. It interacts with the view through
    various data binding techniques. You can generate `component` using the following
    CLI command:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件**：组件是一个控制器，它具有视图和逻辑来管理视图事件和组件之间的导航。它通过各种数据绑定技术与视图交互。你可以使用以下 CLI 命令生成 `component`：'
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Templates**: A template represents the view of the web page and it is created
    using HTML tags. It also has many custom tags such as angular directives along
    with native HTML tags.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板**：模板代表网页的视图，它使用 HTML 标签创建。它还包含许多自定义标签，如 Angular 指令以及原生 HTML 标签。'
- en: '**Metadata**: It assigns a behavior to any class. It is the metadata on top
    of the class that tells Angular the behavior of the class. For example, the component
    is created using the `@Component` annotation.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**元数据**：它为任何类分配行为。这是位于类之上的元数据，它告诉 Angular 类的行为。例如，组件是通过 `@Component` 注解创建的。'
- en: '**Data Binding**: It is a process by which a template interacts with the component.
    The data is passed to and fro using various data binding techniques. Angular supports
    the following three types of data binding:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据绑定**：这是一个模板与组件交互的过程。数据通过各种数据绑定技术来回传递。Angular 支持以下三种类型的数据绑定：'
- en: '**Interpolation*:*** In this binding, we use two curly braces to access the
    property value of component members. For example, if we have `name` as a class
    member property in a component, then we can define `{{name}}` in the template
    to access the name value.'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插值**：在这个绑定中，我们使用两个大括号来访问组件成员的属性值。例如，如果我们有一个组件中的类成员属性 `name`，那么我们可以在模板中定义
    `{{name}}` 来访问名称值。'
- en: '**Property Binding*:*** This data binding technique helps in passing a value
    from a parent component to a child component. For example, if we have `name` as
    a class member property in a parent component and `userName` in a child component,
    then we can assign a value from parent to child using `[userName] = "name"`.'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性绑定**：这种数据绑定技术有助于将值从父组件传递到子组件。例如，如果我们有一个父组件中的 `name` 作为类成员属性，以及子组件中的 `userName`，那么我们可以使用
    `[userName] = "name"` 将父组件的值分配给子组件。'
- en: '**Event Binding*:*** This event-driven data binding helps to pass a value from
    template to component. For example, we display a name from the list; when the
    user clicks on the list item, we pass a click value using event binding `(click)="clickName(name)"`.'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件绑定**：这种事件驱动的数据绑定有助于将值从模板传递到组件。例如，我们显示列表中的名称；当用户点击列表项时，我们使用事件绑定 `(click)="clickName(name)"`
    传递点击值。'
- en: '**Directives**: It is a behavior injected into the templates, which modifies
    the way the **DOM **(**document object model**) is rendered. There are basically
    two kinds of directive:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指令**：它是注入到模板中的行为，它修改了 DOM（文档对象模型）的渲染方式。基本上有两种类型的指令：'
- en: '**Structural**: It alters the DOM layout by adding, removing, or replacing
    DOM elements. Examples for this kind of directive are `ngFor` and `ngIf`.'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构**：它通过添加、删除或替换 DOM 元素来改变 DOM 布局。这类指令的示例有 `ngFor` 和 `ngIf`。'
- en: '**Attribute:** It alters the appearance and behavior of the existing DOM element.
    The `ngModel` directive is an example of attributes directives, which change the
    behavior of the existing element by responding to achange event.'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性**：它改变现有 DOM 元素的外观和行为。`ngModel` 指令是属性指令的示例，它通过响应事件来改变现有元素的行为。'
- en: '**Service**: It is a usable entity, that consumed by any Angular components
    and helps to separate the view logic from  the business logic. We normally write
    HTTP-specific call for a particular module in a service, as it helps readability
    and maintainability of the code. Popular examples of services are logging service
    or data service. You can create `service` using the following CLI command:'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**：它是一个可用的实体，被任何 Angular 组件消费，有助于将视图逻辑与业务逻辑分离。我们通常在服务中为特定模块编写 HTTP 特定的调用，因为它有助于代码的可读性和可维护性。流行的服务示例包括日志服务或数据服务。您可以使用以下
    CLI 命令创建 `service`：'
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Pipe**: It is one of the simplest but most useful features in Angular. It
    provides a way to write a utility functionality, which can be reused across applications.
    Angular provides built-in pipe, such as date and currency. You can create `pipe`
    using the following CLI command:'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管道**：它是 Angular 中最简单但最有用的功能之一。它提供了一种编写可跨应用程序重用实用功能的方法。Angular 提供了内置管道，如日期和货币。您可以使用以下
    CLI 命令创建 `pipe`：'
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The application's project structure
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序的项目结构
- en: 'When we browse our sample friends application, we will come across the `src`
    folder, which contains all the application core files that have view, business
    logic, and navigation functionalities. A developer spends most of their time in
    this folder:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们浏览我们的示例朋友应用程序时，我们会遇到 `src` 文件夹，它包含所有具有视图、业务逻辑和导航功能的应用程序核心文件。开发者的大部分时间都花在这个文件夹中：
- en: '![](img/00007.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00007.jpeg)'
- en: The main idea we followed in organizing our folder is feature module. Each similar
    functionality is organized into features module. In order to understand it better,
    we will take a look at an example of an authentication feature in our friends
    application and a few of the file references comes in later chapters of this book.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们组织文件夹时遵循的主要思想是功能模块。每个类似的功能都被组织到功能模块中。为了更好地理解它，我们将查看我们朋友应用程序中的一个认证功能示例，以及本书后续章节中的一些文件引用。
- en: In our application, all the authentication-related functionalities, such as
    login and signup, are grouped into a module named `authentication`. This same
    pattern will be applied to all the features in our application. This makes our
    application more modular and testable. We have taken an example of an authentication
    feature module and explained it in more detail in the following sections.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，所有与认证相关的功能，如登录和注册，都被组合到一个名为 `authentication` 的模块中。这种相同的模式将应用于我们应用程序的所有功能。这使得我们的应用程序更加模块化和可测试。我们以一个认证功能模块为例，在以下章节中对其进行了更详细的解释。
- en: 'Our authentication feature module looks the following screenshot; authentication
    features have login and signup functionalities, and all the components are declared
    in modules—it also has its own routes module for internal navigation:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的认证功能模块如下截图所示；认证功能具有登录和注册功能，所有组件都在模块中声明——它还有一个用于内部导航的自己的路由模块：
- en: '![](img/00008.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00008.jpeg)'
- en: App module
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用模块
- en: 'App module is the root module of our entire project. All Angular projects have
    at least one app module, which is mandatory, and it is used for bootstrapping
    our project to launch the application. The app module is declared with the `@NgModule`
    decorator. The metadata in the `NgModule` annotation are as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 应用模块是我们整个项目的根模块。所有Angular项目至少有一个应用模块，这是强制性的，它用于启动项目以启动应用程序。应用模块使用`@NgModule`装饰器声明。`NgModule`注解中的元数据如下：
- en: '`imports`: In the `imports` tag, we declare all dependent feature modules.
    In the following code example, we declare `BrowserModule`, `AuthenticationModule`,
    and `AppRouting` modules.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`imports`：在`imports`标签中，我们声明所有依赖的功能模块。以下代码示例中，我们声明了`BrowserModule`、`AuthenticationModule`和`AppRouting`模块。'
- en: '`declarations`: In the `declarations` tag, we declare all the components for
    this root module. In the following example, we declare `AppComponent` in `AppModule`.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`declarations`：在`declarations`标签中，我们声明此根模块的所有组件。以下示例中，我们在`AppModule`中声明了`AppComponent`。'
- en: '`providers`: In the `providers` tag, we declare all the services or pipes.
    In the following example, we declare `AngularFireAuth` and `AngularFireDatabase`.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`providers`：在`providers`标签中，我们声明所有服务或管道。以下示例中，我们声明了`AngularFireAuth`和`AngularFireDatabase`。'
- en: '`bootstrap`: In the `bootstrap` tag, we declare the root component, which is
    required in `index.html`.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bootstrap`：在`bootstrap`标签中，我们声明根组件，这在`index.html`中是必需的。'
- en: 'This sample `app.module.ts` is created using the `ng new` command, as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例`app.module.ts`是使用`ng new`命令创建的，如下所示：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: App routing
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用路由
- en: The root routing module is used to navigate between different feature modules.
    We will create a route containing the navigation flow for the main application.
    The following example contains the sample of routes, which shows the navigation
    between common components in applications, such as `AboutComponent` and `PageNotFoundComponent`.
    The wildcard `'**'` in the path specifies that any wrong URL will be redirected
    to  the page not found component. App routing is created with the `@NgModule`
    decorator and the routes are configured using `RouterModule`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 根路由模块用于在不同的功能模块之间导航。我们将创建一个包含主应用程序导航流程的路由。以下示例包含路由的样本，展示了在应用程序中常见组件之间的导航，例如`AboutComponent`和`PageNotFoundComponent`。路径中的通配符`'**'`指定任何错误的URL都将重定向到页面未找到组件。应用路由使用`@NgModule`装饰器创建，并使用`RouterModule`配置路由。
- en: 'The sample `app.routing.ts` as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例`app.routing.ts`如下：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Authentication module
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证模块
- en: 'The `authentication` module is a feature module, which contains login and signup
    feature set. All the features related to authentication are contained in this
    folder. We included `LoginComponent` and `SignupComponent`  in the declarations
    metadata:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`authentication`模块是一个功能模块，它包含登录和注册功能集。所有与认证相关的功能都包含在这个文件夹中。我们在声明元数据中包含了`LoginComponent`和`SignupComponent`。'
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Authentication routing
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证路由
- en: This routing helps in the navigation within the child component, so we create
    routes for login and signup components. This will evolve as we start implementing
    our login and a signup component in upcoming chapters.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由有助于在子组件内进行导航，因此我们为登录和注册组件创建路由。随着我们在后续章节中开始实现登录和注册组件，这些路由将逐步发展。
- en: 'A sample `authentication.routing.ts` is as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例`authentication.routing.ts`如下：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Login component
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录组件
- en: 'A component is the basic building block of an UI (user interface) in an Angular
    application. The `@Component` decorator is used to mark a class as a Angular component.
    The following example shows the Login component, which is defined using `@Component`
    and contains **SCSS** (**Sassy CSS**) and template files:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 组件是Angular应用程序中UI（用户界面）的基本构建块。`@Component`装饰器用于将类标记为Angular组件。以下示例展示了使用`@Component`定义的登录组件，它包含**SCSS**（**Sassy
    CSS**）和模板文件：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Login component HTML
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录组件HTML
- en: 'Login component HTML is a view and contains the form data for login. The following
    example shows a simple HTML with two tags; a template in Angular follows the same
    syntax as HTML:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 登录组件HTML是一个视图，包含登录表单数据。以下示例展示了包含两个标签的简单HTML；Angular中的模板遵循与HTML相同的语法：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Login component scss
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录组件scss
- en: 'In our project, we use **SASS** (**syntactically awesome stylesheet**), which
    is a preprocessor, to convert our SCSS file to a CSS file. This helps organize
    our CSS element in a simple and readable format. It provides many features, such
    as variables, nesting, mixins, and inheritance, which help in writing complex
    CSS in a reusable way. We will cover these features when we create our feature
    module. The following SCSS file is a simple example where a black variable is
    externalized to a variable: `$black`. This variable can be used with other CSS
    elements:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们使用 **SASS**（**语法优美的样式表**），这是一个预处理器，将我们的 SCSS 文件转换为 CSS 文件。这有助于以简单和可读的格式组织我们的
    CSS 元素。它提供了许多功能，如变量、嵌套、混合和继承，这些功能有助于以可重用的方式编写复杂的 CSS。我们将在创建功能模块时介绍这些功能。以下 SCSS
    文件是一个简单的示例，其中黑色变量被外部化到变量 `:black` 中：此变量可以与其他 CSS 元素一起使用：
- en: '[PRE16]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Login component spec
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录组件规范
- en: We use the **Jasmine** test framework to write our unit test cases. It is a
    very good habit to write test cases from the start of our development. Test cases
    should be part of our development process. Unfortunately, we normally write test
    cases after our application is in production or when we see lot of issues during
    production. We know writing test cases takes time during the initial phase of
    development, but it saves a lot of time later on. Earlier, the software industries
    basis for delivering a new product was *time to market*, but now the focus has
    shifted to *time to market with a quality product*. So, when writing test cases
    becomes a part of development, then we write test cases faster and deliver quality
    products on time. We hope this explains the importance of this process during
    development.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 **Jasmine** 测试框架来编写我们的单元测试用例。从开发初期开始编写测试用例是一个非常好的习惯。测试用例应该是我们开发过程的一部分。不幸的是，我们通常在生产后或在生产过程中看到大量问题时才编写测试用例。我们知道在开发初期编写测试用例需要时间，但它在后期可以节省大量时间。以前，软件行业交付新产品的基础是
    **市场时间**，但现在焦点已经转移到 **有质量的市场时间**。因此，当编写测试用例成为开发的一部分时，我们就可以更快地编写测试用例，并按时交付高质量的产品。我们希望这解释了在开发过程中这一过程的重要性。
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once our test cases are ready, we can execute the test case using `npm`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的测试用例准备就绪后，我们可以使用 `npm` 执行测试用例：
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Authentication service
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证服务
- en: The best way to separate UI logic from business logic in Angular is service.
    It provides a well-defined class to perform specific logic. In our project, we
    interact with a Firebase database using HTTP  in service so that heavy load goes
    to service. In Authentication service, we perform actions such as login, signup,
    and sign-out.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular 中，将 UI 逻辑与业务逻辑分离的最佳方式是使用服务。它提供了一个执行特定逻辑的类。在我们的项目中，我们通过服务中的 HTTP 与
    Firebase 数据库交互，以便将重负载转移到服务上。在认证服务中，我们执行登录、注册和注销等操作。
- en: When we clearly separate responsibility in a well-defined class, we adhere to
    the **SRP** (**single responsibility principle**). SRP is explained in more detail
    in the following section. We use the `Injectable` decorator on top of service
    so that this service is injected in any component or service by Angular framework,
    and we don't have to create the object. This pattern is known as dependency injection.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在一个定义良好的类中明确分离责任时，我们遵循 **SRP**（**单一责任原则**）。SRP 在下一节中将有更详细的解释。我们在服务上使用 `Injectable`
    装饰器，以便 Angular 框架可以将此服务注入到任何组件或服务中，我们不需要创建对象。这种模式被称为依赖注入。
- en: 'A sample `authentication.service.ts`,is  as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 `authentication.service.ts` 的示例：
- en: '[PRE20]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Date pipe
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日期管道
- en: Pipes help to write utility functions in an Angular application.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 管道有助于在 Angular 应用程序中编写实用函数。
- en: We will create a pipe by extending `PipeTransform` and override the `transform`
    method from the super class to provide our functionality. Our application's date
    pipe is decorated with pipe metadata. We will provide a name for our pipe using
    a `name` tag, which is used to transform data in a template.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过扩展 `PipeTransform` 并重写超类中的 `transform` 方法来创建一个管道，以提供我们的功能。我们的应用程序的日期管道被装饰了管道元数据。我们将使用
    `name` 标签为我们的管道提供一个名称，该标签用于在模板中转换数据。
- en: 'A sample `friendsdate.pipe.ts` is as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 `friendsdate.pipe.ts` 的示例：
- en: '[PRE21]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following is how you will use the pipe in a template:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在模板中使用管道的方式：
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Common principles
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见原则
- en: 'Principles help us to design our application in a better way, and these principles
    are not specific to any programming languages or platform. In this section, we
    will cover some of the most used principles in an Angular application:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 原则帮助我们以更好的方式设计我们的应用程序，并且这些原则并不特定于任何编程语言或平台。在本节中，我们将介绍Angular应用程序中最常用的几个原则：
- en: '**Single responsibility principle**:  This principle states that a class should
    have only one reason to change and that the responsibility should be encapsulated
    in the class. We apply this principle to all our component, services, or routers.
    This helps code maintainability and testability. For example, a component is responsible
    for managing the logic related to view. Other complex server logic is delegated
    to services. We mostly implement the utility functions in pipe.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单一职责原则**：此原则指出，一个类应该只有一个改变的理由，并且责任应该封装在类中。我们将此原则应用于所有我们的组件、服务或路由器。这有助于代码的可维护性和可测试性。例如，组件负责管理与视图相关的逻辑。其他复杂的服务器逻辑委托给服务。我们主要在管道中实现实用函数。'
- en: '**Single file**: It is a good practice to define components or services per
    file. This makes our code easier to read, maintain, and export across module.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单文件**：将组件或服务定义在每个文件中是一种良好的实践。这使得我们的代码更容易阅读、维护和跨模块导出。'
- en: '**Small functions**: It is always good to write small functions with a well-defined
    purpose. This really makes the life of other developers—who use your code—easier,
    as the new developer can read and easily understand the code.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小函数**：始终编写具有明确目的的小函数是很好的。这确实使使用您代码的其他开发者的生活变得更简单，因为新开发者可以轻松阅读和理解代码。'
- en: '**LIFT**: Always follow the *lift* principle so that you can *locate* code
    quickly, *identify* the code, keep the structure *flat*, and *try* to be dry.
    This ensures consistent structures across your application. This tremendously
    increases developer efficiency.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LIFT原则**：始终遵循*提升*原则，以便您可以快速*定位*代码，*识别*代码，保持结构*扁平*，并*尝试*保持简洁。这确保了应用程序中结构的一致性。这极大地提高了开发者的效率。'
- en: '**Folders-by-feature**: During the development of our application, we followed
    this principle and all the features are grouped into feature modules.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按功能划分文件夹**：在应用程序的开发过程中，我们遵循了这一原则，并将所有功能分组到功能模块中。'
- en: '**Shared feature**: We create a shared folder to declare all reusable components,
    directives, and pipes, and these are shared among other folders. `SharedModules`
    are created so that they are referenced in the entire application.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共享功能**：我们创建一个共享文件夹来声明所有可重用组件、指令和管道，并且这些在其他文件夹之间共享。创建`SharedModules`以便在整个应用程序中引用。'
- en: Coding standard guidelines
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程标准指南
- en: 'Coding standard are common patterns we follow while writing our application.
    This makes our code consistent across application. This is quite useful when multiple
    developers are working on the same application. A few coding standards are as
    follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 编程标准是我们编写应用程序时遵循的共同模式。这使得我们的代码在应用程序中保持一致。当多个开发者共同开发同一应用程序时，这非常有用。以下是一些编程标准：
- en: '**Naming Conventions**: It is extremely important to have consistent naming
    conventions for our filename, class name, and so on. This is essential from the maintainability
    and readability point of view.  This also helps in understanding the code faster,
    and debugging becomes easier.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名约定**：对于我们的文件名、类名等，保持一致的命名约定非常重要。从可维护性和可读性的角度来看，这是必不可少的。这也有助于更快地理解代码，并使调试变得更容易。'
- en: '**Filename**: The recommended pattern for a filename in Angular is feature.type.ts.
    For example, the name of the authentication component file is `authentication.component.ts`.'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件名**：在Angular中，建议的文件名模式为feature.type.ts。例如，认证组件文件的名称为`authentication.component.ts`。'
- en: '**Class name**: The class name follows the camel case and takes the name from
    the filename. For example, the class name for the authentication component file
    is `AuthenticationComponent`.'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类名**：类名遵循驼峰命名法，并从文件名中获取名称。例如，认证组件文件的类名为`AuthenticationComponent`。'
- en: '**Method and properties name**: We follow camel case to name our class method
    and properties. We don''t prefix private variables with an underscore.'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法和属性名称**：我们遵循驼峰命名法来命名类方法和属性。我们不使用下划线作为私有变量的前缀。'
- en: '**Selector name**: The selector name in a component is hyphenated, and all
    characters are in lowercase. The name of our login component is shown here:'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择器名称**：组件中的选择器名称是连字符分隔的，并且所有字符都是小写。我们的登录组件的名称如下所示：'
- en: '[PRE23]'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Pipe name**:  Pipes are named after their features. For example, the currency
    pipe name is `''currency''`, as follows:'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**管道名称**：管道以其功能命名。例如，货币管道的名称是 `''currency''`，如下所示：'
- en: '[PRE24]'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Constant**:  The constant is the final variable that is declared using the 
    const keyword, and the constant value is assigned once. Constant variables are
    declared in uppercase, as follows:'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常量**：常量是使用 const 关键字声明的最终变量，其值只赋值一次。常量变量以大写形式声明，如下所示：'
- en: '[PRE25]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**Members sequence**:  All member variables are declared first, followed by
    the method. Private members are named after public members.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成员序列**：所有成员变量首先声明，然后是方法。私有成员变量以公共成员变量命名。'
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we created our first Angular application using the Angular
    CLI command. We went through all the important files in our Angular application.
    We learned common Angular terminologies and then went through our application
    project structure and internals. Finally, we covered common principles and coding
    guidelines, which we will follow as part of our development process.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用 Angular CLI 命令创建了我们的第一个 Angular 应用程序。我们浏览了 Angular 应用程序中的重要文件。我们学习了常见的
    Angular 术语，然后了解了我们的应用程序项目结构和内部结构。最后，我们涵盖了常见的原则和编码指南，这些我们将作为我们开发过程的一部分来遵循。
- en: In the next chapter, we will create our first signup page. We will apply many
    concepts from this chapter to create our signup component.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将创建我们的第一个注册页面。我们将应用本章中的许多概念来创建我们的注册组件。
