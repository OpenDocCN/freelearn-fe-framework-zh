["```js\nentity <entity name> ([<table name>]) {\n  <field name> <type> [<validation>*]\n}\n```", "```js\n/**\n * This is customer entity javadoc comment\n * @author Foo\n */\nentity Customer {\n  /** Name field */\n  name String required,\n  age Integer,\n  address String maxlength(100) pattern(/[a-Z0-9]+/)\n}\n```", "```js\nenum <enum name> {\n  <VALUE>*\n}\n```", "```js\nenum Language {\n  ENGLISH, DUTCH, FRENCH\n}\n```", "```js\nrelationship <type> {\n  <from entity>[{<relationship name>[(<display field>)] <validation>*}] \n  to \n  <to entity>[{<relationship name>[(<display field>)] <validation>*}]\n}\n```", "```js\nentity Book\nentity Author\nentity Tag\n\nrelationship OneToMany {\n  Author{book} to Book{writer(name) required},\n  Book{tag} to Tag\n}\n```", "```js\nentity A\nentity B\n...\nentity Z\n\ndto * with mapstruct\nservice A with serviceImpl\nservice B with serviceClass\npaginate * with pagination except B, C\npaginate B, C with infinite-scroll\nfilter A, B\n```", "```js\n/** Product sold by the Online store */\nentity Product {\n    name String required\n    description String\n    price BigDecimal required min(0)\n    size Size required\n    image ImageBlob\n}\n\nenum Size {\n    S, M, L, XL, XXL\n}\n\nentity ProductCategory {\n    name String required\n    description String\n}\n```", "```js\nentity Customer {\n    firstName String required\n    lastName String required\n    gender Gender required\n    email String required pattern(/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/)\n    phone String required\n    addressLine1 String required\n    addressLine2 String\n    city String required\n    country String required\n}\n\nenum Gender {\n    MALE, FEMALE, OTHER\n}\n```", "```js\nentity ProductOrder {\n    placedDate Instant required\n    status OrderStatus required\n    code String required\n}\n\nenum OrderStatus {\n    COMPLETED, PENDING, CANCELLED\n}\n\nentity OrderItem {\n    quantity Integer required min(0)\n    totalPrice BigDecimal required min(0)\n    status OrderItemStatus required\n}\n\nenum OrderItemStatus {\n    AVAILABLE, OUT_OF_STOCK, BACK_ORDER\n}\n```", "```js\nentity Invoice {\n    date Instant required\n    details String\n    status InvoiceStatus required\n    paymentMethod PaymentMethod required\n    paymentDate Instant required\n    paymentAmount BigDecimal required\n}\n\nenum InvoiceStatus {\n    PAID, ISSUED, CANCELLED\n}\n\nenum PaymentMethod {\n    CREDIT_CARD, CASH_ON_DELIVERY, PAYPAL\n}\n\nentity Shipment {\n    trackingCode String\n    date Instant required\n    details String\n}\n```", "```js\nrelationship OneToOne {\n    Customer{user} to User\n}\n```", "```js\nCustomer (1) -----> (1) User\n```", "```js\nrelationship ManyToOne {\n    OrderItem{product} to Product\n}\n```", "```js\nOrderItem (*) -----> (1) Product\n```", "```js\nrelationship OneToMany {\n   Customer{order} to ProductOrder{customer},\n   ProductOrder{orderItem} to OrderItem{order},\n   ProductOrder{invoice} to Invoice{order},\n   Invoice{shipment} to Shipment{invoice},\n   ProductCategory{product} to Product{productCategory}\n}\n```", "```js\nCustomer (1) <-----> (*) ProductOrder\nProductOrder (1) <-----> (*) OrderItem\nProductOrder (1) <-----> (*) Invoice\nInvoice (1) <-----> (*) Shipment\nProductCategory (1) <-----> (*) Product\n```", "```js\nservice * with serviceClass\npaginate Product, Customer, ProductOrder, Invoice, Shipment, OrderItem with pagination\n```", "```js\n> cd online-store\n> jhipster import-jdl online-store.jh\n```", "```js\n> git add --all\n> git commit -am \"generated online store entity model\"\n```", "```js\n{ \n    \"fluentMethods\": true, \n    \"relationships\": [ \n        { \n            \"relationshipType\": \"many-to-one\", \n            \"relationshipName\": \"productCategory\", \n            \"otherEntityName\": \"productCategory\", \n            \"otherEntityField\": \"id\" \n        } \n    ], \n    \"fields\": [ \n        { \n            \"fieldName\": \"name\", \n            \"fieldType\": \"String\", \n            \"fieldValidateRules\": [ \n                \"required\" \n            ] \n        }, \n        { \n            \"fieldName\": \"description\", \n            \"fieldType\": \"String\" \n        }, \n        { \n            \"fieldName\": \"price\", \n            \"fieldType\": \"BigDecimal\", \n            \"fieldValidateRules\": [ \n                \"required\", \n                \"min\" \n            ], \n            \"fieldValidateRulesMin\": 0 \n        }, \n        { \n            \"fieldName\": \"size\", \n            \"fieldType\": \"Size\", \n            \"fieldValues\": \"S,M,L,XL,XXL\", \n            \"fieldValidateRules\": [ \n                \"required\" \n            ] \n        }, \n        { \n            \"fieldName\": \"image\", \n            \"fieldType\": \"byte[]\", \n            \"fieldTypeBlobContent\": \"image\" \n        } \n    ], \n    \"changelogDate\": \"20180114123458\", \n    \"javadoc\": \"Product sold by the Online store\", \n    \"entityTableName\": \"product\", \n    \"dto\": \"no\", \n    \"pagination\": \"pagination\", \n    \"service\": \"serviceClass\", \n    \"jpaMetamodelFiltering\": false \n}\n```", "```js\n@ApiModel(description = \"Product sold by the Online store\")\n@Entity\n@Table(name = \"product\")\n@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\npublic class Product implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @NotNull\n    @Column(name = \"name\", nullable = false)\n    private String name;\n\n    @Column(name = \"description\")\n    private String description;\n\n    @Lob\n    @Column(name = \"image\")\n    private byte[] image;\n\n    @Column(name = \"image_content_type\")\n    private String imageContentType;\n\n    @NotNull\n    @DecimalMin(value = \"0\")\n    @Column(name = \"price\", precision=10, scale=2, nullable = false)\n    private BigDecimal price;\n\n    @NotNull\n    @Enumerated(EnumType.STRING)\n    @Column(name = \"jhi_size\", nullable = false)\n    private Size size;\n\n    @ManyToOne\n    private ProductCategory productCategory;\n\n    // jhipster-needle-entity-add-field - JHipster will add fields \n     here, do not remove\n\n    ... // getters\n\n    public Product name(String name) {\n        this.name = name;\n        return this;\n    }\n\n    ... // setters\n\n    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here, do not remove\n\n    ... // equals, hashcode and toString methods\n}\n```", "```js\n@ApiModel(description = \"Product sold by the Online store\")\n```", "```js\n@Entity\n@Table(name = \"product\")\n```", "```js\n@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n```", "```js\n@Id\n@GeneratedValue(strategy = GenerationType.IDENTITY)\nprivate Long id;\n```", "```js\n@Column(name = \"name\", nullable = false)\n```", "```js\n@NotNull\n@DecimalMin(value = \"0\")\n```", "```js\n@Lob\n@Column(name = \"image\")\nprivate byte[] image;\n\n@Column(name = \"image_content_type\")\nprivate String imageContentType;\n```", "```js\n@Enumerated(EnumType.STRING)\n```", "```js\n@ManyToOne\nprivate ProductCategory productCategory;\n```", "```js\n@OneToMany(mappedBy = \"productCategory\")\n@JsonIgnore\n@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\nprivate Set<Product> products = new HashSet<>();\n```", "```js\npublic Product name(String name) {\n    this.name = name;\n    return this;\n}\n```", "```js\nnew Product().name(\"myProduct\").price(10);\n```", "```js\n@Repository\npublic interface ProductRepository extends JpaRepository<Product, Long> {\n\n}\n```", "```js\n@Service\n@Transactional\npublic class ProductService {\n\n    private final Logger log = LoggerFactory.getLogger(ProductService.class);\n\n    private final ProductRepository productRepository;\n\n    public ProductService(ProductRepository productRepository) {\n        this.productRepository = productRepository;\n    }\n\n    ...\n}\n```", "```js\n    @Transactional(readOnly = true)\n    public Page<Product> findAll(Pageable pageable) {\n        log.debug(\"Request to get all Products\");\n        return productRepository.findAll(pageable);\n    }\n```", "```js\n@RestController\n@RequestMapping(\"/api\")\npublic class ProductResource {\n   ...\n}\n```", "```js\n    @GetMapping(\"/products\")\n    @Timed\n    public ResponseEntity<List<Product>> getAllProducts(Pageable \n    pageable) {\n        log.debug(\"REST request to get a page of Products\");\n        Page<Product> page = productService.findAll(pageable);\n        HttpHeaders headers = \n        PaginationUtil.generatePaginationHttpHeaders(page, \n        \"/api/products\");\n        return new ResponseEntity<>(page.getContent(), headers, \n        HttpStatus.OK);\n    }\n```", "```js\nexport class Product implements IProduct {\n    constructor(\n        public id?: number,\n        public name?: string,\n        public description?: string,\n        public imageContentType?: string,\n        public image?: any,\n        public price?: number,\n        public size?: Size,\n        public productCategory?: IProductCategory\n    ) {\n    }\n}\n```", "```js\n@Injectable()\nexport class ProductService {\n\n    private resourceUrl = SERVER_API_URL + 'api/products';\n\n    constructor(private http: HttpClient) { }\n\n    ...\n\n    query(req?: any): Observable<HttpResponse<Product[]>> {\n        const options = createRequestOption(req);\n        return this.http.get<Product[]>(\n            this.resourceUrl, \n            { params: options, observe: 'response' }\n        )\n        .map((res: HttpResponse<Product[]>) => this.convertArrayResponse(res));\n    }\n\n    ...\n}\n```", "```js\n@Component({\n    selector: 'jhi-product',\n    templateUrl: './product.component.html'\n})\nexport class ProductComponent implements OnInit, OnDestroy {\n    ...\n}\n```", "```js\n@Component({\n    selector: 'jhi-product-dialog',\n    templateUrl: './product-dialog.component.html'\n})\nexport class ProductDialogComponent implements OnInit {\n    ...\n}\n\n@Component({\n    selector: 'jhi-product-popup',\n    template: ''\n})\nexport class ProductPopupComponent implements OnInit, OnDestroy {\n    ...\n}\n```", "```js\n    {\n        path: 'product/:id',\n        component: ProductDetailComponent,\n        data: {\n            authorities: ['ROLE_USER'],\n            pageTitle: 'storeApp.product.home.title'\n        },\n        canActivate: [UserRouteAccessService]\n    }\n```", "```js\n@NgModule({\n    imports: [\n        StoreSharedModule,\n        RouterModule.forChild(ENTITY_STATES)\n    ],\n    declarations: [\n        ProductComponent,\n        ProductDetailComponent,\n        ProductDialogComponent,\n        ProductDeleteDialogComponent,\n        ProductPopupComponent,\n        ProductDeletePopupComponent,\n    ],\n    entryComponents: [\n        ProductComponent,\n        ProductDialogComponent,\n        ProductPopupComponent,\n        ProductDeleteDialogComponent,\n        ProductDeletePopupComponent,\n    ],\n    providers: [\n        ProductService,\n        ProductPopupService,\n        ProductResolvePagingParams,\n    ],\n    schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class StoreProductModule {}\n```", "```js\n> ./gradlew\n```", "```js\n----------------------------------------------------------\n Application 'store' is running! Access URLs:\n Local: http://localhost:8080\n External: http://192.168.2.7:8080\n Profile(s): [swagger, dev]\n----------------------------------------------------------\n```", "```js\n> ./gradlew test && yarn test && yarn e2e\n```"]