["```js\nbrew install postgres \n```", "```js\nln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents \n```", "```js\nalias pg_start=\"launchctl load ~/Library/LaunchAgents\"\nalias pg_stop=\"launchctl unload ~/Library/LaunchAgents\" \n```", "```js\ncreatedb `whoami` \n```", "```js\ncreateuser -s postgres \n```", "```js\nrm /usr/local/var/postgres/postmaster.pi \n```", "```js\nnpm init --yes\nnpm install @apollo/server@4.7.3 @contentpi/lib@1.0.10 @graphql-tools/load-files@7.0.0 @graphql-tools/merge@9.0.0 @graphql-tools/schema@10.0.0 body-parser@1.20.2 cors@2.8.5 dotenv@16.1.4 express@4.18.2 graphql-middleware@6.1.34 graphql-tag@2.12.6 jsonwebtoken@9.0.0 pg@8.11.0 pg-hstore@2.3.4 pm2@5.3.0 sequelize@6.32.0 ts-node@10.9.1\nnpm install --save-dev prettier@2.8.8 ts-node-dev@2.0.0 typescript@5.1.3 eslint@8.42.0 @types/jsonwebtoken@9.0.2 @types/cors@2.8.13 \n```", "```js\n\"scripts\": {\n  \"dev\": \"ts-node-dev src/index.ts\",\n  \"build\": \"rm -rf dist && tsc -p . --traceResolution\",\n  \"lint\": \"eslint . --ext .js,.tsx,.ts\",\n  \"lint:fix\": \"eslint . --fix --ext .js,.tsx,.ts\",\n  \"test\": \"jest src\"\n} \n```", "```js\nDB_DIALECT=postgres\nDB_PORT=5432\nDB_HOST=localhost\nDB_DATABASE=<your-database>\nDB_USERNAME=<your-username>\nDB_PASSWORD=<your-password> \n```", "```js\n{\n  \"server\": {\n  \"port\": 4000\n},\n  \"security\": {\n  \"secretKey\": \"C0nt3ntP1\",\n  \"expiresIn\": \"7d\"\n}\n} \n```", "```js\nimport dotenv from 'dotenv'\nimport config from './config.json'\ndotenv.config()\ntype Db = {\n  dialect: string\n  host: string\n  port: string\n  database: string\n  username: string\n  password: string\n}\ntype Security = {\n  secretKey: string\n  expiresIn: string\n}\ntype Server = {\n  port: number\n}\nconst db: Db = {\n  dialect: process.env.DB_DIALECT || '',\n  port: process.env.DB_PORT || '',\n  host: process.env.DB_HOST || '',\n  database: process.env.DB_DATABASE || '',\n  username: process.env.DB_USERNAME || '',\n  password: process.env.DB_PASSWORD || ''\n}\nconst { security, server } = config\nexport const $db: Db = db\nexport const $security: Security = security\nexport const $server: Server = server \n```", "```js\nimport { makeExecutableSchema } from '@graphql-tools/schema'\nimport { ApolloServer } from '@apollo/server'\nimport { expressMiddleware } from '@apollo/server/express4'\nimport { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer'\nimport cors from 'cors'\nimport http from 'http'\nimport express from 'express'\nimport { applyMiddleware } from 'graphql-middleware'\nimport { json } from 'body-parser'\nimport { $server } from '../config'\nimport resolvers from './graphql/resolvers'\nimport typeDefs from './graphql/types'\nimport models from './models' \n```", "```js\nconst app = express()\nconst corsOptions = {\n  origin: '*',\n  credentials: true\n}\napp.use(cors(corsOptions))\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*')\n  res.header(\n    'Access-Control-Allow-Headers', \n    'Origin, X-Requested-With, Content-Type, Accept'\n)\nnext()\n}) \n```", "```js\n// Schema\nconst schema = applyMiddleware(\n  makeExecutableSchema({\n    typeDefs,\n    resolvers\n  })\n) \n```", "```js\n// Apollo Server\nconst apolloServer = new ApolloServer({\n  schema,\n  plugins: [ApolloServerPluginDrainHttpServer({ httpServer })]\n}) \n```", "```js\nconst main = async () => {\n  const alter = true\n  const force = false\n  await apolloServer.start()\n  await models.sequelize.sync({ alter, force })\n  app.use(\n    '/graphql',\n    cors<cors.CorsRequest>(),\n    json(),\n    expressMiddleware(apolloServer, {\n      context: async () => ({ models })\n    })\n  )\n  await new Promise<void>((resolve) => httpServer.listen({ \n    port: $server.port \n  }, resolve))\n  console.log(`ðŸš€ Server ready at http://localhost:${$server.port}/graphql`)\n}\nmain() \n```", "```js\nimport gql from 'graphql-tag'\nexport default gql`\n  scalar UUID\n  scalar Datetime\n  scalar JSON \n```", "```js\nimport gql from 'graphql-tag'\nexport default gql`\n  type User {\n  id: UUID!\n  username: String!\n  email: String!\n  password: String!\n  role: String!\n  active: Boolean!\n  createdAt: Datetime!\n  updatedAt: Datetime!\n}\n` \n```", "```js\ntype Query {\n  getUser(at: String!): User!\n  getUsers: [User!]\n} \n```", "```js\ntype Mutation {\n  createUser(input: CreateUserInput): User!\n  login(input: LoginInput): Token!\n} \n```", "```js\ntype Token {\n token: String!\n}\ninput CreateUserInput {\n username: String!\n password: String!\n email: String!\n active: Boolean!\n role: String!\n}\ninput LoginInput {\n emailOrUsername: String!\n password: String!\n} \n```", "```js\nimport { mergeTypeDefs } from '@graphql-tools/merge'\nimport Scalar from './Scalar'\nimport User from './User'\nexport default mergeTypeDefs([Scalar, User]) \n```", "```js\nexport default {\n  Query: {\n    getUsers: () => {},\n    getUser: () => {}\n  },\n  Mutation: {\n    createUser: () => {},\n    login: () => {}\n  }\n} \n```", "```js\nimport { doLogin, getUserBy } from '../../lib/auth'\nimport { getUserData } from '../../lib/jwt'\nimport { ICreateUserInput, IloginInput, Imodels, Itoken, Iuser } from '../../types' \n```", "```js\ngetUsers: (\n_: any, \nargs: any, \nctx: { models: Imodels }\n): Iuser[] => ctx.models.User.findAll(), \n```", "```js\ngetUsers: (\n_: any, \nargs: any, \n{ models }: { models: Imodels }\n): Iuser[] => ctx.models.User.findAll(), \n```", "```js\n// Apollo Server\nconst apolloServer = new ApolloServer({\nschema,\ncontext: async () => ({\nmodels\n})\n}) \n```", "```js\ngetUser: async (\n_: any, \n{ at }: { at: string }, \n{ models }: { models: IModels }\n): Promise<any> => {\n// Get current connected user\nconst connectedUser = await getUserData(at)\nif (connectedUser) {\n// Validating if the user is still valid\nconst user = await getUserBy({\nid: connectedUser.id,\nemail: connectedUser.email,\nactive: connectedUser.active\n},\n[connectedUser.role],\nmodels\n)\n\nif (user) {\nreturn connectedUser\n}\n}\nreturn {\nid: '',\nusername: '',\npassword: '',\nemail: '',\nrole: '',\nactive: false\n}\n} \n```", "```js\nMutation: {\ncreateUser: (\n_: any,\n{ input }: { input: ICreateUserInput },\n{ models }: { models: IModels }\n): IUser => models.User.create({ ...input }),\nlogin: (\n_: any,\n{ input }: { input: ILoginInput },\n{ models }: { models: IModels }\n): Promise<IToken> => doLogin(input.email, input.password, models)\n} \n```", "```js\nimport { mergeResolvers } from '@graphql-tools/merge'\nimport user from './user'\nconst resolvers = mergeResolvers([user])\nexport default resolvers \n```", "```js\nimport { encrypt } from '@contentpi/lib'\nimport { IDataTypes, IUser } from '../types'\nexport default (sequelize: any, DataTypes: IDataTypes): IUser => {\nconst User = sequelize.define('User', {\nid: {\nprimaryKey: true,\nallowNull: false,\ntype: DataTypes.UUID,\ndefaultValue: DataTypes.UUIDV4()\n},\nusername: {\ntype: DataTypes.STRING,\nallowNull: false,\nunique: true,\nvalidate: {\nisAlphanumeric: {\nargs: true,\nmsg: 'The user just accepts alphanumeric characters'\n},\nlen: {\nargs: [4, 20],\nmsg: 'The username must be from 4 to 20 characters'\n}\n}\n},\npassword: {\ntype: Datatypes.STRING,\nallowNull: false\n},\nemail: {\ntype: DataTypes.STRING,\nallowNull: false,\nunique: true,\nvalidate: {\nisEmail: {\nargs: true,\nmsg: 'Invalid email'\n}\n}\n},\nrole: {\ntype: DataTypes.STRING,\nallowNull: false,\ndefaultValue: 'user'\n},\nactive: {\ntype: DataTypes.BOOLEAN,\nallowNull: false,\ndefaultValue: false\n}\n},\n{\nhooks: {\nbeforeCreate: (user: IUser): void => {\nuser.password = encrypt(user.password)\n}\n}\n}\n)\nreturn User\n} \n```", "```js\nimport { Sequelize } from 'sequelize'\nimport { $db } from '../../config'\nimport { IModels } from '../types'\n// Db Connection\nconst { dialect, port, host, database, username, password } = $db\n// Connecting to the database\nconst uri = `${dialect}://${username}:${password}@${host}:${port}/${database}`\nconst sequelize = new Sequelize(uri)\n// Models\nconst models: IModels = {\nUser: require('./User').default(sequelize, Sequelize),\nsequelize\n}\nexport default models \n```", "```js\nimport { encrypt, getBase64, setBase64 } from '@contentpi/lib'\nimport jwt from 'jsonwebtoken'\nimport { $security } from '../../config'\nimport { IUser } from '../types'\nconst { secretKey } = $security\nexport function jwtVerify(accessToken: string, cb: any): void {\n// Verifiying our JWT token using the accessToken and the secretKey\njwt.verify(accessToken, secretKey, (error: any, accessTokenData: any = {}) => {\nconst { data: user } = accessTokenData\n// If we get an error or the user is not found we return false\nif (error || !user) {\nreturn cb(false)\n}\n// The user data is on base64 and getBase64 will retreive the\n// information as JSON object\nconst userData = getBase64(user)\nreturn cb(userData)\n})\n}\nexport async function getUserData(accessToken: string): Promise<any> {\n// We resolve the jwtVerify promise to get the user data\nconst UserPromise = new Promise((resolve) => jwtVerify(accessToken, (user: any) => resolve(user)))\n// This will get the user data or false (if the user is not connected)\nconst user = await UserPromise\nreturn user\n}\nexport const createToken = async (user: IUser): Promise<string[]> => {\n// Extracting the user data\nconst { id, username, password, email, role, active } = user\n// Encrypting our password by combining the secretKey and the password\n// and converting it to base64\nconst token = setBase64(`${encrypt($security.secretKey)}${password}`)\n// The \"token\" is an alias for password in this case\nconst userData = {\nid,\nusername,\nemail,\nrole,\nactive,\ntoken\n}\n// We sign our JWT token and we save the data as Base64\nconst _createToken = jwt.sign({ data: setBase64(userData) }, $security.secretKey, {\nexpiresIn: $security.expiresIn\n})\nreturn Promise.all([_createToken])\n} \n```", "```js\nimport { encrypt, isPasswordMatch } from '@contentpi/lib'\nimport { IToken, IModels, IUser } from '../types'\nimport { createToken } from './jwt'\nexport const getUserBy = async (where: any, models: IModels): Promise<IUser> => { \n```", "```js\nconst user = await models.User.findOne({\nwhere,\nraw: true\n})\nreturn user\n}\nexport const doLogin = async (\nemail: string,\npassword: string,\nmodels: IModels\n): Promise<IToken> => { \n```", "```js\nconst user = await getUserBy({ email }, models) \n```", "```js\nif (!user) {\n  throw new Error('Invalid Login')\n} \n```", "```js\nconst passwordMatch = isPasswordMatch(encrypt(password), user.password) \n```", "```js\nconst isActive = user.active \n```", "```js\nif (!passwordMatch) {\n  throw new Error('Invalid Login')\n} \n```", "```js\nif (!isActive) {\n  throw new Error('Your account is not activated yet')\n} \n```", "```js\nconst [token] = await createToken(user)\n// Finally we return the token to Graphql\nreturn {\n  token\n}\n} \n```", "```js\nexport type User = {\n  username: string\n  password: string\n  email: string\n  role: string\n  active: boolean\n}\nexport type Sequelize = {\n  _defaults?: any\n  name?: string\n  options?: any\n  associate?: any\n} \n```", "```js\nimport { Sequelize, User } from './types'\nexport interface IDataTypes {\nUUID: string\nUUIDV4(): string\nSTRING: string\nBOOLEAN: boolean\nTEXT: string\nINTEGER: number\nDATE: string\nFLOAT: number\n}\nexport interface IUser extends User, Sequelize {\nid: string\ntoken?: string\ncreatedAt?: Date\nupdatedAt?: Date\n}\nexport interface ICreateUserInput extends User {}\nexport interface ILoginInput {\nemail: string\npassword: string\n}\nexport interface IToken {\ntoken: string\n}\nexport interface IModels {\nUser: any\nsequelize: any\n} \n```", "```js\nexport * from './interfaces'\nexport * from './types' \n```", "```js\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"./src\",\n    \"esModuleInterop\": true,\n    \"module\": \"commonjs\",\n    \"noImplicitAny\": true,\n    \"outDir\": \"dist\",\n    \"resolveJsonModule\": true,\n    \"sourceMap\": true,\n    \"target\": \"ESNext\",\n    \"typeRoots\": [\"./src/@types\", \"./node_modules/@types\"]\n  },\n  \"include\": [\"src/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n} \n```", "```js\n[INFO] 23:45:16 Restarting: /Users/czantany/projects/React-Design-Patterns-and-Best-Practices-Third-Edition/Chapter05/graphql/backend/src/models/User.ts has been modified\nExecuting (default): CREATE TABLE IF NOT EXISTS \"Users\" (\"id\" UUID NOT NULL , \"username2\" VARCHAR(255) NOT NULL UNIQUE, \"password\" VARCHAR(255) NOT NULL, \"email\" VARCHAR(255) NOT NULL UNIQUE, \"privilege\" VARCHAR(255) NOT NULL DEFAULT 'user', \"active\" BOOLEAN NOT NULL DEFAULT false, \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));\nExecuting (default): ALTER TABLE \"public\".\"Users\" ADD COLUMN \"username2\" VARCHAR(255) NOT NULL UNIQUE;\nExecuting (default): ALTER TABLE \"Users\" ALTER COLUMN \"password\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"password\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"password\" TYPE VARCHAR(255);\nExecuting (default): ALTER TABLE \"Users\" ALTER COLUMN \"email\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"email\" DROP DEFAULT;ALTER TABLE \"Users\" ADD UNIQUE (\"email\");ALTER TABLE \"Users\" ALTER COLUMN \"email\" TYPE VARCHAR(255) ;\nExecuting (default): ALTER TABLE \"Users\" ALTER COLUMN \"privilege\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"privilege\" SET DEFAULT 'user';ALTER TABLE \"Users\" ALTER COLUMN \"privilege\" TYPE VARCHAR(255);\nExecuting (default): ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"active\" SET DEFAULT false;ALTER TABLE \"Users\" ALTER COLUMN \"active\" TYPE BOOLEAN;\nExecuting (default): ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" SET NOT NULL;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" DROP DEFAULT;ALTER TABLE \"Users\" ALTER COLUMN \"createdAt\" TYPE TIMESTAMP WITH TIME ZONE;\nRunning on http://localhost:4000/graphql \n```", "```js\nExecuting (default): ALTER TABLE \"public\".\"Users\" ADD COLUMN \"username2\" VARCHAR(255) NOT NULL UNIQUE;\nExecuting (default): ALTER TABLE \"public\".\"Users\" DROP COLUMN \"username\"; \n```", "```js\nquery {\ngetUsers {\nid\nusername\nemail\nrole\n}\n} \n```", "```js\nmutation($input: CreateUserInput) {\n  createUser(input: $input) {\n    id\n    username\n    email\n    role\n    active\n  }\n} \n```", "```js\nINSERT INTO \"Users\" (\"id\",\"username\",\"password\",\"email\",\"role\",\"active\",\"createdAt\",\"updatedAt\") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) \n```", "```js\nmutation($input: LoginInput) {\n  login(input: $input) {\n    token\n  }\n} \n```", "```js\nnpm init --yes\nnpm install @apollo/client@3.7.0 @contentpi/lib@1.0.10 cookie-parser@1.4.6 cors@2.8.5 dotenv-webpack@8.0.1 express@4.18.2 jsonwebtoken@8.5.1 pm2@5.2.2 react@18.2.0 react-dom@18.2.0 react-cookie@4.1.1 react-router-dom@6.4.2 run-script-webpack-plugin@0.1.1 styled-components@5.3.6 typescript-plugin-styled-components@2.0.0 webpack-node-externals@3.0.0\nnpm install --save-dev @babel/core@7.19.3 @babel/preset-env@7.19.4 @babel/preset-react@7.18.6 @types/node@18.11.3 buffer@6.0.3 cross-env@7.0.3 crypto-browserify@3.12.0 dotenv@16.0.3 html-webpack-plugin@5.5.0 npm-run-all@4.1.5 prettier@2.7.1 stream-browserify@3.0.0 ts-loader@9.4.1 ts-node@10.9.1 ts-node-dev@2.0.0 typescript@4.8.4 webpack@5.74.0 webpack-cli@4.10.0 webpack-dev-server@4.11.1 webpackbar@5.0.2 \n```", "```js\n\"scripts\": {\n  \"build\": \"npm-run-all clean build:production:*\",\n  \"build:production:client\": \"webpack --env mode=production --env presets=client\",\n  \"build:production:server\": \"webpack --env mode=production --env presets=server\",\n  \"clean\": \"rm -rf dist\",\n  \"dev\": \"cross-env DEBUG=server:* npm-run-all clean serve:dev\",\n  \"analyze\": \"cross-env ANALYZE=true cross-env DEBUG=server:* npm-run-all clean serve:*\",\n  \"start\": \"pm2 start apps.json\",\n  \"stop\": \"pm2 stop apps.json\",\n  \"restart\": \"pm2 restart apps.json\",\n  \"serve:dev\": \"cross-env NODE_ENV=development ts-node ./src/server/devServer.ts\",\n  \"webpack\": \"cross-env NODE_ENV=production webpack\",\n  \"lint\": \"eslint . --ext .js,.tsx,.ts\",\n  \"lint:fix\": \"eslint . --fix --ext .js,.tsx,.ts\",\n  \"test\": \"jest src\",\n  \"test:coverage\": \"jest src --coverage\"\n} \n```", "```js\nimport HtmlWebpackPlugin from 'html-webpack-plugin'\nimport { Configuration } from 'webpack'\nimport { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer'\nimport WebpackBar from 'webpackbar'\nconst isAnalyze = Boolean(process.env.ANALYZE) // This is to analyze the bundles sizes\nconst webpackClientConfig: (args: { mode: string }) => Configuration = ({ mode }) => {\nconst isProductionMode = mode === 'production'\nconst title = 'My Website Title'\nconst webpackConfig: Configuration = {\nentry: {\nmain: './src/client/index.tsx' // Entry for the client app\n},\noutput: {\npublicPath: 'http://localhost:3001/' // This is for webpack-dev-server\n},\nplugins: [\nnew HtmlWebpackPlugin({\ntitle,\ntemplate: './src/client/index.xhtml',\nfilename: './index.xhtml'\n}),\nnew WebpackBar({\nname: 'client',\ncolor: '#2EA1F8'\n})\n]\n}\nif (isProductionMode) {\nwebpackConfig.output = {\nfilename: '[name].js',\nchunkFilename: '[name].js',\npublicPath: '/'\n}\n}\nif (isAnalyze) {\nwebpackConfig.plugins = [\n...(webpackConfig.plugins || []),\nnew BundleAnalyzerPlugin({\nanalyzerPort: 9001\n})\n]\n}\nreturn webpackConfig\n}\nexport default webpackClientConfig \n```", "```js\nimport { resolve } from 'path'\nimport { RunScriptWebpackPlugin } from 'run-script-webpack-plugin'\nimport { Configuration, IgnorePlugin, optimize } from 'webpack'\nimport { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer'\nimport nodeExternals from 'webpack-node-externals'\nimport WebpackBar from 'webpackbar'\nconst isAnalyze = Boolean(process.env.ANALYZE)\nconst webpackServerConfig: (args: { mode: string }) => Configuration = ({ mode }) => {\nconst isDevelopment = mode === 'development'\nconst webpackConfig: Configuration = {\ntarget: 'node', // Target node is only for server\nentry: './src/server/index.ts', // Entry for the server app\noutput: {\nlibraryTarget: 'commonjs2',\nfilename: 'server.js',\npath: resolve('dist')\n},\nexternals: [nodeExternals()], // Ignoring all node_modules\nplugins: [\nnew optimize.LimitChunkCountPlugin({\nmaxChunks: 1\n}),\nnew IgnorePlugin({\nresourceRegExp: /\\.((sc|c)ss|jpe?g|png|gif|svg)$/i\n}),\nnew WebpackBar({\nname: 'server',\ncolor: '#2EA1F8',\nprofile: true,\nbasic: false\n})\n]\n}\nif (isDevelopment) {\nwebpackConfig.watch = true\nif (webpackConfig.entry instanceof Array) {\nwebpackConfig.entry.unshift('webpack/hot/poll?300') // This is for HMR\n}\nif (webpackConfig.plugins instanceof Array) {\nwebpackConfig.plugins.push(\nnew RunScriptWebpackPlugin({\nname: 'server.js',\nnodeArgs: ['--inspect']\n})\n)\n}\nwebpackConfig.externals = [\nnodeExternals({\nallowlist: ['webpack/hot/poll?300']\n})\n]\n}\nif (isAnalyze) {\nwebpackConfig.plugins = [\n...(webpackConfig.plugins || []),\nnew BundleAnalyzerPlugin({\nanalyzerPort: 9002\n})\n]\n}\nreturn webpackConfig\n}\nexport default webpackServerConfig \n```", "```js\nimport { Configuration } from 'webpack'\nimport { merge } from 'webpack-merge'\nimport { ConfigArgs } from './webpack.types'\nconst loadPresets: (mode: ConfigArgs) => Promise<Configuration> = async (env) => {\nconst presets: string[] = ([] as string[]).concat(...[env.presets])\nconst webpackConfigs = await Promise.all(\npresets.map(async (presetName: string) => {\ntry {\n// Dynamically loading the presets\nconst {default: webpackConfig} = await import(`./presets/webpack.${presetName}`)\nreturn Promise.resolve(webpackConfig(env))\n} catch (err) {\nreturn Promise.resolve({})\n}\n})\n)\nreturn merge({}, ...webpackConfigs)\n}\nexport default loadPresets \n```", "```js\nimport Dotenv from 'dotenv-webpack'\nimport { resolve } from 'path'\nimport createStyledComponentsTransformer from 'typescript-plugin-styled-components'\nimport { Configuration } from 'webpack'\nconst styledComponentsTransformer = createStyledComponentsTransformer()\nconst webpackCommonConfig: () => Configuration = () => {\nconst webpackConfig: Configuration = {\noutput: {\npath: resolve('dist') // Output by default will be dist directory\n},\nresolve: {\nextensions: ['.ts', '.tsx', '.js', '.jsx', '.json'],\nalias: {\n'~': resolve(__dirname, '../src') // Alias for src\n},\nfallback: {\ncrypto: require.resolve('crypto-browserify'),\nbuffer: require.resolve('buffer/'),\nstream: require.resolve('stream-browserify')\n}\n},\noptimization: { // This is to split the bundle in main.js (app) and vendor.js (node_modules)\nsplitChunks: {\ncacheGroups: {\ndefault: false,\ncommons: {\ntest: /node_modules/,\nname: 'vendor',\nchunks: 'all'\n}\n}\n}\n},\nmodule: {\nrules: [\n{\ntest: /\\.(woff|woff2)$/, // For loading fonts\nuse: {\nloader: 'url-loader'\n}\n},\n{\ntest: /\\.(ts|tsx)$/, // For loading TypeScript files\nexclude: /node_modules/,\nuse: [\n{\nloader: 'ts-loader',\noptions: {\ntranspileOnly: true,\ngetCustomTransformers: () => ({\nbefore: [styledComponentsTransformer]\n})\n}\n}\n]\n}\n]\n},\nplugins: [new Dotenv()] // This will load our .env variables into Webpack\n}\nreturn webpackConfig\n}\nexport default webpackCommonConfig \n```", "```js\nimport { Configuration, HotModuleReplacementPlugin, NoEmitOnErrorsPlugin } from 'webpack'\nconst webpackDevConfig: () => Configuration = () => {\nconst webpackConfig: Configuration = {\nmode: 'development',\ndevtool: 'source-map',\noutput: {\nfilename: '[name].js'\n},\nplugins: [new HotModuleReplacementPlugin(), new NoEmitOnErrorsPlugin()]\n}\nreturn webpackConfig\n}\nexport default webpackDevConfig \n```", "```js\nimport { Configuration } from 'webpack'\nconst webpackProdConfig: (args: { presets: string[] }) => Configuration = () => {\nconst webpackConfig: Configuration = {\nmode: 'production' // By default this mode minifies all code\n}\nreturn webpackConfig\n}\nexport default webpackProdConfig \n```", "```js\nexport type WebpackMode = 'production' | 'development'\nexport type ConfigArgs = {\nmode: WebpackMode\npresets: string[]\n} \n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\" />\n<title><%= htmlWebpackPlugin.options.title %></title>\n</head>\n<body>\n<div id=\"root\"></div>\n</body>\n</html> \n```", "```js\n{\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    \"target\": \"ESNext\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n    \"noImplicitAny\": false,\n    \"paths\": {\n      \"~/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"src\"],\n  \"exclude\": [\"node_modules\", \"**/*.test.tsx\"]\n} \n```", "```js\nimport cookieParser from 'cookie-parser'\nimport cors from 'cors'\nimport express, { Application, Request, Response } from 'express'\nimport { resolve } from 'path'\nimport * as config from '../config'\nimport html from './html'\nimport { isConnected } from './lib/middlewares/user'\n// Express application\nconst app: Application = express()\nconst distDir = resolve('dist')\nconst staticDir = resolve('src', 'static')\n// Middlewares\napp.use(express.json())\napp.use(express.urlencoded({ extended: true }))\napp.use(cookieParser(config.security.secretKey))\napp.use(cors({ credentials: true, origin: true }))\n// Static directories\napp.use(express.static(distDir))\napp.use(express.static(staticDir))\n// Routes\napp.get('/login', isConnected(false), (req: Request, res: Response) => {\nres.send(html({ title: 'My Website' }))\n})\napp.get(`/logout`, (req: Request, res: Response) => {\nconst redirect: any = req.query.redirectTo || '/'\nres.clearCookie('at')\nres.redirect(redirect)\n})\napp.get('*', (req: Request, res: Response) => {\nres.send(html({ title: 'My Website' }))\n})\nexport default app \n```", "```js\n// Types\ntype API = {\nuri: string\n}\ntype Security = {\nsecretKey: string\nexpiresIn: string\n}\n// Environment Configuration\nexport const isProduction: boolean = process.env.NODE_ENV === 'production'\nexport const isDevelopment: boolean = process.env.NODE_ENV !== 'production'\n// Server Configuration\nconst devUrl = 'localhost'\nconst prodUrl = 'localhost' // change this to your production url\nexport const PORT: number = Number(process.env.PORT) || 3000\nexport const DEV_SERVER_PORT = 3001\nexport const GRAPHQL_PORT = 4000\nexport const GRAPHQL_SERVER = isDevelopment ? devUrl : prodUrl\n// Paths Configuration\nexport const domain: string = devUrl\nexport const baseUrl: string = isProduction\n? `https://${domain}:${PORT}`\n: `http://${domain}:${PORT}` // Remove port in actual production\nexport const publicPath: string = isProduction \n? `` \n: `http://${domain}:${DEV_SERVER_PORT}/`\n// API Configuration\nexport const api: API = {\nuri: `http://${GRAPHQL_SERVER}:${GRAPHQL_PORT}/graphql`\n}\n// Security Configuration\nexport const security: Security = {\nsecretKey: process.env.SECURITY_SECRET_KEY || '',\nexpiresIn: '7d'\n} \n```", "```js\nimport { NextFunction, Request, Response } from 'express'\nimport { getUserData } from '../jwt'\nexport const isConnected = (isLogged = true, roles = ['user'], redirectTo = '/') =>\nasync (req: Request, res: Response, next: NextFunction): Promise<void> => {\nconst user = await getUserData(req.cookies.at)\nif (!user && !isLogged) {\nreturn next()\n}\nif (user && isLogged) {\nif (roles.includes('god') && roles.role === 'god') {\nreturn next()\n}\nif (roles.includes('admin') && user.role === 'admin') {\nreturn next()\n}\nif (roles.includes('user') && user.role === 'user') {\nreturn next()\n}\nres.redirect(redirectTo)\n} else {\nres.redirect(redirectTo)\n}\n} \n```", "```js\nimport { getBase64 } from '@contentpi/lib'\nimport jwt from 'jsonwebtoken'\nimport * as config from '~/config'\nconst { security: { secretKey } } = config\nexport function jwtVerify(accessToken: string, cb: any) {\njwt.verify(accessToken, secretKey, (error: any, accessTokenData: any = {}) => {\nconst { data: user } = accessTokenData\nif (error || !user) {\nreturn cb(null)\n}\nconst userData = getBase64(user)\nreturn cb(userData)\n})\n}\nexport async function getUserData(accessToken: string): Promise<any> {\nconst UserPromise = new Promise(\n(resolve) => jwtVerify(accessToken, (user: any) => resolve(user))\n)\nconst user = await UserPromise\nreturn user\n} \n```", "```js\nimport { gql } from '@apollo/client'\nexport default gql`\nquery getUser($at: String!) {\ngetUser(at: $at) {\nid\nemail\nusername\nrole\nactive\n}\n}\n` \n```", "```js\nimport { gql } from '@apollo/client'\nexport default gql`\nmutation login($email: String!, $password: String!) {\nlogin(input: { email: $email, password: $password }) {\ntoken\n}\n}\n` \n```", "```js\nimport { useMutation, useQuery } from '@apollo/client'\nimport { getGraphQlError, redirectTo } from '@contentpi/lib'\nimport { createContext, FC, ReactElement, useEffect, useState } from 'react'\nimport { useCookies } from 'react-cookie'\nimport GET_USER_QUERY from '../graphql/user/getUser.query'\nimport LOGIN_MUTATION from '../graphql/user/login.mutation'\n// Interfaces\ninterface IUserContext {\nlogin(input: any): any\nconnectedUser: any\n}\ninterface IProps {\npage?: string\nchildren: ReactElement\n}\n// Creating context\nexport const UserContext = createContext<IUserContext>({\nlogin: () => null,\nconnectedUser: null\n})\nconst UserProvider: FC<IProps> = ({ page = '', children }) => {\nconst [cookies, setCookie] = useCookies()\nconst [connectedUser, setConnectedUser] = useState(null)\n// Mutations\nconst [loginMutation] = useMutation(LOGIN_MUTATION)\n// Queries\nconst { data: dataUser } = useQuery(GET_USER_QUERY, {\nvariables: {\nat: cookies.at || ''\n}\n})\n// Effects\nuseEffect(() => {\nif (dataUser) {\nif (!dataUser.getUser.id && page !== 'login') {\n// If the user session is invalid and is on a different page than login\n// we redirect them to login\nredirectTo('/login?redirectTo=/dashboard')\n} else {\n// If we have the user data available we save it in our connectedUser state\nsetConnectedUser(dataUser.getUser)\n}\n}\n}, [dataUser, page])\nasync function login(input: { email: string; password: string }): Promise<any> {\ntry {\n// Executing our loginMutation passing the email and password\nconst { data: dataLogin } = await loginMutation({\nvariables: {\nemail: input.email,\npassword: input.password\n}\n})\nif (dataLogin) {\n// If the login was success, we save the token in our \"at\" cookie\nsetCookie('at', dataLogin.login.token, { path: '/' })\nreturn dataLogin.login.token\n}\n} catch (err) {\n// If there is an error we return it\nreturn getGraphQlError(err)\n}\n}\n// Exporting our context\nconst context = {\nlogin,\nconnectedUser\n}\nreturn <UserContext.Provider value={context}>{children}</UserContext.Provider>\n}\nexport default UserProvider \n```", "```js\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'\nimport { render } from 'react-dom'\nimport * as config from '../config'\nimport AppRoutes from './AppRoutes'\nconst client = new ApolloClient({\nuri: config.api.uri,\ncache: new InMemoryCache()\n})\nrender(\n<ApolloProvider client={client}>\n<AppRoutes />\n</ApolloProvider>,\ndocument.querySelector('#root')\n) \n```", "```js\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\nimport DashboardPage from './pages/dashboard'\nimport Error404 from './pages/error404'\nimport HomePage from './pages/home'\nimport LoginPage from './pages/login'\nconst AppRoutes = () => (\n<>\n<Router>\n<Routes>\n<Route path=\"/\" element={<HomePage />} />\n<Route path=\"/dashboard\" element={<DashboardPage />} />\n<Route path=\"/login\" element={<LoginPage />} />\n<Route element={<Error404 />} />\n</Routes>\n</Router>\n</>\n)\nexport default AppRoutes \n```", "```js\nconst Page = () => (\n<div className=\"home\">\n<h1>Home</h1>\n<ul>\n<li><a href=\"/dashboard\">Go to Dashboard</a></li>\n</ul>\n</div>\n)\nexport default Page \n```", "```js\nimport DashboardLayout from '../components/dashboard/DashboardLayout'\nimport UserProvider from '../contexts/user'\nconst Page = () => (\n<UserProvider>\n<DashboardLayout />\n</UserProvider>\n)\nexport default Page \n```", "```js\nimport { isBrowser } from '@contentpi/lib'\nimport { FC, ReactElement } from 'react'\nimport LoginLayout from '../components/users/LoginLayout'\nimport UserProvider from '../contexts/user'\ninterface IProps {\ncurrentUrl?: string\n}\nconst Page: FC<IProps> = ({\ncurrentUrl = isBrowser() ? window.location.search.replace('?redirectTo=', '') : ''\n}) => (\n<UserProvider page=\"login\">\n<LoginLayout currentUrl={currentUrl} />\n</UserProvider>\n)\nexport default Page \n```", "```js\nconst Page = () => (\n<div className=\"error404\">\n<h1>Error404</h1>\n</div>\n)\nexport default Page \n```", "```js\nimport { FC, useContext } from 'react'\nimport { UserContext } from '../../contexts/user'\nimport Login from './Login'\n// Interfaces\ninterface IProps {\ncurrentUrl: string\n}\nconst Layout: FC<IProps> = ({ currentUrl }) => {\nconst { login } = useContext(UserContext)\nreturn <Login login={login} currentUrl={currentUrl} />\n}\nexport default Layout \n```", "```js\nimport { redirectTo } from '@contentpi/lib'\nimport { ChangeEvent, FC, useState } from 'react'\nimport { IUser } from '../../types'\nimport { StyledLogin } from './Login.styled'\ninterface IProps {\nlogin(input: any): any\ncurrentUrl: string\n}\nconst Login: FC<IProps> = ({ login, currentUrl }) => {\nconst [values, setValues] = useState({\nemail: '',\npassword: ''\n})\nconst [errorMessage, setErrorMessage] = useState('')\nconst [invalidLogin, setInvalidLogin] = useState(false)\nconst onChange = (e: ChangeEvent<HTMLInputElement>): void => {\nconst { target: { name, value } } = e\nif (name) {\nsetValues((prevValues: any) => ({\n...prevValues,\n[name]: value\n}))\n}\n}\nconst handleSubmit = async (user: IUser): Promise<void> => {\n// Here we execute the login mutation\nconst response = await login(user)\nif (response.error) {\nsetInvalidLogin(true)\nsetErrorMessage(response.message)\n} else {\nredirectTo(currentUrl || '/')\n}\n}\nreturn (\n<>\n<StyledLogin>\n<div className=\"wrapper\">\n{invalidLogin && <div className=\"alert\">{errorMessage}</div>}\n<div className=\"form\">\n<p>\n<input \nautoComplete=\"off\"\ntype=\"email\"\nclassName=\"email\"\nname=\"email\"\nplaceholder=\"Email\"\nonChange={onChange}\nvalue={values.email}\n/>\n</p>\n<p>\n<input\nautoComplete=\"off\"\ntype=\"password\"\nclassName=\"password\"\nname=\"password\"\nplaceholder=\"Password\"\nonChange={onChange}\nvalue={values.password}\n/>\n</p>\n<div className=\"actions\">\n<button name=\"login\" onClick={() => handleSubmit(values)}>Login</button>\n</div>\n</div>\n</div>\n</StyledLogin>\n</>\n)\n}\nexport default Login \n```", "```js\nimport { FC, useContext } from 'react'\nimport { UserContext } from '../../contexts/user'\nimport Dashboard from './Dashboard'\nconst Layout: FC = () => {\nconst { connectedUser } = useContext(UserContext)\n// We only render the Dashboard if the user is connected\nif (connectedUser) {\nreturn <Dashboard connectedUser={connectedUser} />\n}\nreturn <div />\n}\nexport default Layout \n```", "```js\ninterface IProps {\nconnectedUser: any\n}\nconst Dashboard = ({ connectedUser }) => (\n<div className=\"dashboard\">\n<h1>Welcome, {connectedUser.username}!</h1>\n<ul>\n<li><a href=\"/logout\">Logout</a></li>\n</ul>\n</div>\n)\nexport default Dashboard \n```"]