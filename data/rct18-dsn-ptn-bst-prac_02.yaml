- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Introducing TypeScript
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 TypeScript
- en: This chapter assumes that you have prior experience with JavaScript and are
    interested in improving the quality of your code by learning **TypeScript**. TypeScript
    is a typed superset of JavaScript that compiles to JavaScript. In other words,
    TypeScript is essentially JavaScript with some additional features.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章假设你已经有 JavaScript 的经验，并且对通过学习 **TypeScript** 来提高代码质量感兴趣。TypeScript 是一个类型化的
    JavaScript 超集，它可以编译成 JavaScript。换句话说，TypeScript 实质上是带有一些额外功能的 JavaScript。
- en: Designed by Anders Hejlsberg, the creator of C# at Microsoft, TypeScript is
    an open-source language that enhances the capabilities of JavaScript. By introducing
    static typing and other advanced features, TypeScript helps developers write more
    reliable and maintainable code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由微软 C# 的创造者 Anders Hejlsberg 设计，TypeScript 是一种开源语言，它增强了 JavaScript 的功能。通过引入静态类型和其他高级功能，TypeScript
    帮助开发者编写更可靠和可维护的代码。
- en: In this chapter, we will explore the features of TypeScript and how to convert
    existing JavaScript code to TypeScript. By the end of this chapter, you will have
    a solid understanding of TypeScript’s benefits and how to leverage them to create
    more robust and scalable applications.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 TypeScript 的特性和如何将现有的 JavaScript 代码转换为 TypeScript。到本章结束时，你将深入理解 TypeScript
    的优势以及如何利用它们来创建更健壮和可扩展的应用程序。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: TypeScript’s features
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript 的特性
- en: Convert JavaScript code into TypeScript
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 JavaScript 代码转换为 TypeScript
- en: Types
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型
- en: Interfaces
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口
- en: Extending interfaces and types
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展接口和类型
- en: Implementing interfaces and types
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现接口和类型
- en: Merging interfaces
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并接口
- en: Enums
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举
- en: Namespaces
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名空间
- en: Template literal types
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板字面量类型
- en: TypeScript configuration file
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript 配置文件
- en: Technical requirements
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To work through the contents of this chapter, you will need the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章的内容，你需要以下工具：
- en: Node.js 19+
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 19+
- en: Visual Studio Code
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: TypeScript’s features
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TypeScript 的特性
- en: TypeScript, a popular open-source programming language developed and maintained
    by Microsoft, is rapidly gaining popularity among developers worldwide. It was
    introduced as a superset of JavaScript, aiming to facilitate larger-scale applications
    while enhancing code quality and maintainability. TypeScript leverages static
    typing and compiles to clean, simple JavaScript code, ensuring compatibility with
    existing JavaScript environments.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 是一种由微软开发和维护的流行开源编程语言，正迅速在全球开发者中流行起来。它被引入作为一种 JavaScript 的超集，旨在简化更大规模的应用程序的开发，同时提高代码质量和可维护性。TypeScript
    利用静态类型并编译成干净的、简单的 JavaScript 代码，确保与现有的 JavaScript 环境兼容。
- en: This robust language brings a host of powerful features that set it apart and
    make it an appealing choice for many programmers. Notably, TypeScript infuses
    strong typing into JavaScript, providing better error checking and reducing runtime
    bugs. Moreover, it fully supports object-oriented programming with advanced features
    like classes, interfaces, and inheritance.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这门强大的语言带来了一系列强大的特性，使其与众不同，成为许多程序员的优选。值得注意的是，TypeScript 将强类型注入到 JavaScript 中，提供了更好的错误检查并减少了运行时错误。此外，它完全支持面向对象编程，具有类、接口和继承等高级功能。
- en: Since any valid JavaScript code is also TypeScript, transitioning from JavaScript
    to TypeScript can be done gradually, with developers introducing types to their
    codebase progressively. This makes TypeScript a flexible, scalable solution for
    both small and large-scale projects.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于任何有效的 JavaScript 代码也是 TypeScript，因此从 JavaScript 过渡到 TypeScript 可以逐步进行，开发者可以逐步将类型引入到他们的代码库中。这使得
    TypeScript 成为小型和大型项目都适用的灵活、可扩展的解决方案。
- en: 'In this section, we will summarize the essential features of TypeScript that
    you should take advantage of:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将总结 TypeScript 的基本特性，这些特性是你应该利用的：
- en: '**TypeScript is JavaScript**: TypeScript is a superset of JavaScript, which
    means that any JavaScript code you write will work with TypeScript. If you already
    know how to use JavaScript, you have all the knowledge you need to use TypeScript.
    You just need to learn how to add types to your code. All TypeScript code is transformed
    into JavaScript in the end.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TypeScript 是 JavaScript**: TypeScript 是 JavaScript 的超集，这意味着你写的任何 JavaScript
    代码都将与 TypeScript 兼容。如果你已经知道如何使用 JavaScript，那么你已经拥有了使用 TypeScript 所需的所有知识。你只需要学习如何给你的代码添加类型。所有的
    TypeScript 代码最终都会被转换成 JavaScript。'
- en: '**JavaScript is TypeScript**: This just means that you can rename any valid
    `.js` file with the `.ts` extension, and it will work.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JavaScript是TypeScript**：这仅仅意味着你可以将任何有效的`.js`文件重命名为`.ts`扩展名，并且它将工作。'
- en: '**Error checking**: TypeScript compiles the code and checks for errors, which
    helps identify issues before running the code.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误检查**：TypeScript编译代码并检查错误，这有助于在运行代码之前识别问题。'
- en: '**Strong typing**: By default, JavaScript is not strongly typed. With TypeScript,
    you can add types to all your variables and functions, and even specify the return
    value types.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强类型**：默认情况下，JavaScript不是强类型。使用TypeScript，你可以为所有变量和函数添加类型，甚至可以指定返回值类型。'
- en: '**Object-oriented programming supported**: TypeScript supports advanced concepts
    such as classes, interfaces, inheritance, and more. This allows for better organization
    of code and enhances its maintainability.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持面向对象编程**：TypeScript支持类、接口、继承等高级概念。这有助于更好地组织代码并提高其可维护性。'
- en: After having discussed the key features of TypeScript, let us delve into a practical
    demonstration of converting JavaScript code into TypeScript.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论了TypeScript的关键特性之后，让我们深入探讨将JavaScript代码转换为TypeScript的实际演示。
- en: Converting JavaScript code into TypeScript
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将JavaScript代码转换为TypeScript
- en: In this section, we will see how to transform some JavaScript code into TypeScript.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何将一些JavaScript代码转换为TypeScript。
- en: 'Let’s suppose we have to check whether a word is a palindrome. The JavaScript
    code for this algorithm will be as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们必须检查一个单词是否是回文。这个算法的JavaScript代码如下：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can name this file `palindrome.ts`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这个文件命名为`palindrome.ts`。
- en: As you can see, we are receiving a `string` variable (`word`), and we are returning
    a `boolean` value. So, how will this be translated into TypeScript?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们接收一个`string`变量（`word`），并返回一个`boolean`值。那么，这如何翻译成TypeScript？
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You’re probably thinking, “Great, I just specified the `string` type as `word`
    and the `boolean` type to the function returned value, but now what?”
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能正在想，“太好了，我已经将`string`类型指定为`word`，并将函数返回值指定为`boolean`类型，但现在怎么办？”
- en: 'If you try to run the function with some value that is different from `string`,
    you will get a TypeScript error:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试用与`string`不同的值运行函数，你会得到一个TypeScript错误：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'So, if you try to pass a number to the function, you will get the following
    error:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你尝试将一个数字传递给函数，你会得到以下错误：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18414_02_01.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B18414_02_01.png)'
- en: 'Figure 2.1: Type number is not assignable to parameter of type string'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1：类型number不能赋值给类型为string的参数
- en: That’s why TypeScript is very useful, because it will force you to be stricter
    and more explicit with your code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么TypeScript非常有用，因为它会强制你更严格、更明确地对待你的代码。
- en: Types
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型
- en: 'In the last example, we saw how to specify some primitive types for our function
    parameter and returned value, but you’re probably wondering how you can describe
    an object or array with more details. Types can help us to describe our objects
    or arrays in a better way. For example, let’s suppose you want to describe a `User`
    type to save the information into the database:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个例子中，我们看到了如何为我们的函数参数和返回值指定一些原始类型，但你可能想知道如何更详细地描述一个对象或数组。类型可以帮助我们更好地描述我们的对象或数组。例如，假设你想描述一个`User`类型以将信息保存到数据库中：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We get the following error if we forget to add one of the nodes or put an invalid
    value in one of them:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们忘记添加一个节点或在其中放入一个无效值，我们会得到以下错误：
- en: '![Text  Description automatically generated](img/B18414_02_02.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![文本  自动生成的描述](img/B18414_02_02.png)'
- en: 'Figure 2.2: Age is missing in type User but is required'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2：类型User中缺少年龄，但需要
- en: 'If you need optional nodes, you can always put a `?` next to the age of the
    node, as shown in the following code block:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要可选节点，你可以在节点的年龄旁边始终放置一个`?`，如下面的代码块所示：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can name `type` as you want, but a good practice to follow is to add a prefix
    of `T`. For example, the `User` type will become `TUser`. In this way, you can
    quickly recognize that it is `type` and you don’t get confused thinking it is
    a class or a React component.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随意命名`type`，但遵循一个良好的实践是添加前缀`T`。例如，`User`类型将变为`TUser`。这样，你可以快速识别它是`type`，而不会混淆地认为它是一个类或React组件。
- en: Interfaces
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接口
- en: '**Interfaces** are very similar to types and sometimes developers don’t know
    the differences between them. Interfaces can be used to describe the shape of
    an object or function signature just like types, but the syntax is different:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**接口**与类型非常相似，有时开发者不知道它们之间的区别。接口可以用来描述对象的形状或函数签名，就像类型一样，但语法不同：'
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can name an interface as you want, but a good practice to follow is to add
    a prefix of `I`. For example, the `User` interface will become `IUser`. In this
    way, you can quickly recognize that it is an interface, and you don’t get confused
    thinking it is a class or a React component.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以随意命名接口，但遵循一个良好的实践是添加前缀 `I`。例如，`User` 接口将变为 `IUser`。这样，您可以快速识别它是一个接口，并且不会混淆地认为它是一个类或
    React 组件。
- en: An interface can also be extended, implemented, and merged.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接口也可以扩展、实现和合并。
- en: Extending interfaces and types
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展接口和类型
- en: 'An interface or type can also be extended, but again, the syntax will differ
    as shown in the following code block:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接口或类型也可以扩展，但同样，语法将有所不同，如下面的代码块所示：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, by using the `&` character, you can extend a type, while you
    extend an interface using the `extends` keyword.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，通过使用 `&` 字符，您可以扩展一个类型，而使用 `extends` 关键字扩展接口。
- en: Understanding the extension of interfaces and types paves the way for us to
    delve into their implementation. Let us transition to illustrating how classes
    in TypeScript can implement these interfaces and types while keeping in mind the
    inherent constraints when dealing with union types.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 理解接口和类型的扩展为我们深入了解它们的实现铺平了道路。让我们过渡到展示 TypeScript 中的类如何实现这些接口和类型，同时考虑到处理联合类型时的固有约束。
- en: Implementing interfaces and types
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现接口和类型
- en: 'A class can implement an interface or type alias in the exact same way. But
    it cannot implement (or extend) a *type alias* that names a `union type`. For
    example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类可以以完全相同的方式实现接口或类型别名。但它不能实现（或扩展）一个命名 `联合类型` 的 *类型别名*。例如：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you write the preceding code, you will get the following error in your editor:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您编写前面的代码，您的编辑器将出现以下错误：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B18414_02_03.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图，描述自动生成，中等置信度](img/B18414_02_03.png)'
- en: 'Figure 2.3: A class can only implement an object type or intersection of object
    types with statically known members'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3：一个类只能实现具有静态已知成员的对象类型或对象类型的交集
- en: As you can see, you are not able to implement a union type.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，您无法实现联合类型。
- en: Merging interfaces
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并接口
- en: 'Unlike a type, an interface can be defined multiple times and will be treated
    as a single interface (all declarations will be merged), as shown in the following
    code block:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与类型不同，接口可以定义多次，并且将被视为单个接口（所有声明将合并），如下面的代码块所示：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is very useful when you need to extend your interfaces in different scenarios
    by just redefining the same interface.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这在需要在不同场景下通过重新定义相同的接口来扩展你的接口时非常有用。
- en: Enums
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枚举
- en: '**Enums** are one of the few features TypeScript has that is not a *type*-level
    extension of JavaScript. Enums permit a developer to define a set of **named constants**.
    Using enums can make it easier to document intent or create a set of distinct
    cases.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**枚举**是 TypeScript 具有的少数几个不是 JavaScript *类型* 级扩展的特性之一。枚举允许开发者定义一组 **命名常量**。使用枚举可以使文档化意图或创建一组不同情况变得更容易。'
- en: 'Enums can store numeric or string values and are normally used to provide predefined
    values. Personally, I like to use them to define a palette of colors in a theming
    system, as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举可以存储数字或字符串值，通常用于提供预定义值。我个人喜欢在主题系统中使用它们来定义一组颜色，如下所示：
- en: '![Table  Description automatically generated](img/B18414_02_04.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![表格描述自动生成](img/B18414_02_04.png)'
- en: 'Figure 2.4: Enums used for color palette'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4：用于颜色调板的枚举
- en: Moving on to another useful feature of TypeScript, let’s explore namespaces.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们探索 TypeScript 的另一个有用特性，即命名空间。
- en: Namespaces
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名空间
- en: You may have heard of **namespaces** in other programming languages, such as
    Java or C++. In JavaScript, namespaces are simply named objects in the global
    scope. They serve as a region in which variables, functions, interfaces, or classes
    are organized and grouped together within a local scope to avoid naming conflicts
    between components in the global scope.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能在其他编程语言中听说过 **命名空间**，例如 Java 或 C++。在 JavaScript 中，命名空间只是全局作用域中的命名对象。它们充当一个区域，在该区域中，变量、函数、接口或类在局部作用域中被组织并分组在一起，以避免全局作用域中组件之间的命名冲突。
- en: While modules are also used for code organization, namespaces are more straightforward
    to implement for simple use cases. However, modules offer additional benefits
    such as code isolation, bundling support, re-exporting components, and renaming
    components that namespaces do not provide.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然**模块**也用于代码组织，但对于简单用例，命名空间实现起来更为直接。然而，模块提供了命名空间不提供的额外好处，例如代码隔离、捆绑支持、重新导出组件以及重命名组件。
- en: 'In my own projects, I find namespaces useful for grouping styles when using
    `styled-components`, for instance:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的个人项目中，我发现当使用 `styled-components` 时，命名空间对于分组样式很有用，例如：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then when I need to use it, I consume it like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后当我需要使用它时，我会这样使用它：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is very useful because I don’t need to worry about exporting multiple styled
    components. I just export the CSS namespace and I can use all the styled components
    defined inside that namespace.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常有用，因为我不需要担心导出多个样式组件。我只需导出 CSS 命名空间，就可以使用该命名空间内部定义的所有样式组件。
- en: Template literals
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板字符串
- en: 'In TypeScript, **template literals** are based on **string literal types**
    and can be expanded into multiple strings using **unions**. These types are useful
    for defining a *theme name*, for instance:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TypeScript 中，**模板字符串**基于**字符串字面量类型**，可以使用**联合**扩展成多个字符串。这些类型对于定义一个*主题名称*很有用，例如：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`Theme` is a union type that can only be assigned one of the two string literal
    types: `''light''` or `''dark''`. This provides type safety and prevents runtime
    errors caused by passing an invalid value as the theme name.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`Theme` 是一个联合类型，只能分配两种字符串字面量类型之一：`''light''` 或 `''dark''`。这提供了类型安全并防止了由于传递无效值作为主题名称而导致的运行时错误。'
- en: Using this approach, you can define a set of possible values for a variable,
    argument, or parameter and ensure that only valid values are used at compile time.
    This makes your code more reliable and easier to maintain.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，您可以定义一个变量、参数或参数的可能值集合，并确保在编译时只使用有效的值。这使得您的代码更加可靠且易于维护。
- en: TypeScript configuration file
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TypeScript 配置文件
- en: The presence of a `tsconfig.json` file in a directory indicates that the directory
    is the root of a TypeScript project. The `tsconfig.json` file specifies the root
    files and the compiler options required to compile the project.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 目录中存在 `tsconfig.json` 文件表示该目录是 TypeScript 项目的根目录。`tsconfig.json` 文件指定了项目所需的根文件和编译器选项。
- en: 'You can check all the compiler options at the official TypeScript site: [https://www.typescriptlang.org/tsconfig](https://www.typescriptlang.org/tsconfig).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方 TypeScript 网站上检查所有编译器选项：[https://www.typescriptlang.org/tsconfig](https://www.typescriptlang.org/tsconfig)。
- en: 'This is the `tsconfig.json` file that I normally use in my projects. I’ve always
    separated them into two files: the `tsconfig.common.json` file will contain all
    the shared compiler options, and the `tsconfig.json` file will extend the `tsconfig.common.json`
    file and add some specific options for that project. This is very useful when
    you work with **MonoRepos**.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我通常在我的项目中使用的 `tsconfig.json` 文件。我总是将它们分为两个文件：`tsconfig.common.json` 文件将包含所有共享的编译器选项，而
    `tsconfig.json` 文件将扩展 `tsconfig.common.json` 文件并添加一些特定于该项目的选项。这在您与 **MonoRepos**
    一起工作时非常有用。
- en: 'My `tsconfig.common.json` file looks like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我的 `tsconfig.common.json` 文件看起来像这样：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And my `tsconfig.json` looks like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我的 `tsconfig.json` 文件看起来像这样：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In *Chapter 14*, I will explain how to create a MonoRepos architecture.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第14章* 中，我将解释如何创建 MonoRepos 架构。
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the basics of TypeScript, including creating basic
    types and interfaces, extending them, and using enums, namespaces, and template
    literals. We also explored setting up our first TypeScript configuration file
    (`tsconfig.json`) and splitting it into two parts – one for sharing and the other
    for extending `tsconfig.common.json`. This approach is particularly useful when
    working with MonoRepos.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 TypeScript 的基础知识，包括创建基本类型和接口、扩展它们，以及使用枚举、命名空间和模板字符串。我们还探讨了设置第一个 TypeScript
    配置文件（`tsconfig.json`）并将其分为两部分——一部分用于共享，另一部分用于扩展 `tsconfig.common.json`。这种方法在处理
    MonoRepos 时尤其有用。
- en: In the next chapter, we will delve into using JSX/TSX code and explore various
    configurations that can be applied to improve your code style. You will learn
    how to leverage the power of TypeScript to create efficient and maintainable React
    applications.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨使用 JSX/TSX 代码，并探索可以应用于改进代码风格的多种配置。你将学习如何利用 TypeScript 的力量来创建高效且易于维护的
    React 应用程序。
