- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Building a Mobile Photo Geotagging Application Using Capacitor and 3D Maps
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Capacitor和3D地图构建移动照片地理标记应用程序
- en: Angular is a cross-platform JavaScript framework that can be used to build applications
    for different platforms such as web, desktop, and mobile. Moreover, it allows
    developers to use the same code base and apply the same web techniques to each
    platform, enjoying the same experience and performance. In this chapter, we will
    investigate how we can build mobile applications using Angular.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Angular是一个跨平台的JavaScript框架，可用于构建不同平台（如Web、桌面和移动）的应用程序。此外，它允许开发者使用相同的代码库并将相同的Web技术应用于每个平台，从而享受相同的使用体验和性能。在本章中，我们将探讨如何使用Angular构建移动应用程序。
- en: '**Ionic** is a popular UI toolkit that allows us to build mobile applications
    using web technologies such as Angular. The **Capacitor** library greatly enhances
    Ionic applications by enabling them to run natively on Android and iOS devices.
    In this chapter, we will use both technologies to build a mobile application to
    take geotagged photos and display them on a 3D map.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ionic**是一个流行的UI工具包，允许我们使用如Angular等Web技术构建移动应用程序。**Capacitor**库通过使它们能够在Android和iOS设备上本地运行，极大地增强了Ionic应用程序。在本章中，我们将使用这两种技术构建一个移动应用程序，用于拍摄带有地理标记的照片并在3D地图上显示它们。'
- en: 'We will cover the following topics in detail:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细介绍以下主题：
- en: Creating a mobile application with Ionic
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ionic创建移动应用程序
- en: Taking photos with Capacitor
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Capacitor拍照
- en: Storing data in **Firebase**
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**Firebase**中存储数据
- en: Previewing photos with **CesiumJS**
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**CesiumJS**预览照片
- en: Essential background theory and context
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 必要的背景理论和上下文
- en: Capacitor is a native mobile runtime that enables us to build Android and iOS
    applications with web technologies, including Angular. It provides an abstraction
    API layer for web applications to interact with the native resources of a mobile
    OS. It does not include a UI layer or any other way of interacting with the user
    interface.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 电容器是一个原生移动运行时，使我们能够使用包括Angular在内的Web技术构建Android和iOS应用程序。它为Web应用程序提供了一个抽象API层，以便与移动操作系统的原生资源进行交互。它不包括UI层或任何其他与用户界面交互的方式。
- en: Ionic is a mobile framework containing a collection of UI components we can
    use in an application built with Capacitor. The main advantage of Ionic is that
    we maintain a single code base across all native mobile platforms. That is, we
    write the code once, and it works everywhere. Ionic supports all popular JavaScript
    frameworks, including Angular.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic是一个包含我们可以用于使用Capacitor构建的应用程序中的UI组件的移动框架。Ionic的主要优势是我们可以在所有原生移动平台上维护单个代码库。也就是说，我们只需编写一次代码，它就可以在任何地方工作。Ionic支持所有流行的JavaScript框架，包括Angular。
- en: Firebase is a **Backend-as-a-Service (BaaS)** platform provided by Google that
    contains tools and services for building applications. **Cloud Firestore** is
    a database solution provided by Firebase that features a flexible and scalable
    NoSQL document-oriented database that can be used in web and mobile applications.
    **Firebase** **Storage** is a service that allows us to interact with a storage
    mechanism and upload or download files.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase是由Google提供的**后端即服务（BaaS）**平台，其中包含用于构建应用程序的工具和服务。**Cloud Firestore**是Firebase提供的一种数据库解决方案，它具有灵活和可扩展的NoSQL文档导向数据库，可用于Web和移动应用程序。**Firebase
    Storage**是一种服务，允许我们与存储机制进行交互并上传或下载文件。
- en: CesiumJS is a JavaScript library for creating interactive 3D maps in the browser.
    It is an open-source, cross-platform library that uses WebGL and allows us to
    share geospatial data on multiple platforms. It is powered by **Cesium**, a platform
    for building high-quality and performant 3D geospatial applications.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: CesiumJS是一个用于在浏览器中创建交互式3D地图的JavaScript库。它是一个开源、跨平台的库，使用WebGL，并允许我们在多个平台上共享地理空间数据。它由**Cesium**提供支持，这是一个用于构建高质量和性能优异的3D地理空间应用的平台。
- en: Project overview
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: 'In this project, we will build a mobile application that can take photos according
    to the current location and preview them on a map. Initially, we will learn how
    to create a mobile application using Angular and Ionic. We will then use Capacitor
    to take photos using the camera of the mobile device and tag them with the current
    location via GPS. We will upload those photos to Firebase along with their location
    data. Finally, we will use CesiumJS to load location data on a 3D globe along
    with a preview of the photo. The following diagram depicts an architectural overview
    of the project:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将构建一个可以根据当前位置拍照并在地图上预览照片的移动应用程序。最初，我们将学习如何使用 Angular 和 Ionic 创建移动应用程序。然后，我们将使用
    Capacitor 通过移动设备的相机拍照，并通过 GPS 标记当前位置。我们将把这些照片及其位置数据上传到 Firebase。最后，我们将使用 CesiumJS
    在 3D 球上加载位置数据，并预览照片。以下图表展示了项目的架构概述：
- en: '![Εικόνα που περιέχει διάγραμμα  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_06_01.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![包含图表的图片 自动生成的描述](img/B18465_06_01.png)'
- en: Figure 6.1 – Project architecture
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 项目架构
- en: In this chapter, you will learn how to build a mobile application with Angular
    and Ionic. To follow up with the project and preview your application, you must
    follow the getting started guide for your development environment (Android or
    iOS), which you can find in the *Further reading* section.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何使用 Angular 和 Ionic 构建移动应用程序。为了跟进项目并预览你的应用程序，你必须遵循你的开发环境（Android 或
    iOS）的入门指南，你可以在 *进一步阅读* 部分找到。
- en: 'Build time: 2 hours'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 构建时间：2 小时
- en: Getting started
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'You will need the following software and tools to complete the project:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此项目，你需要以下软件和工具：
- en: 'For Android development: **Android Studio** with the latest Android SDK.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Android 开发：**Android Studio** 以及最新的 Android SDK。
- en: 'For iOS development: **Xcode** with the iOS SDK and XcodeCommand Line Tools.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 iOS 开发：**Xcode** 以及 iOS SDK 和 Xcode 命令行工具。
- en: A physical mobile device.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个物理移动设备。
- en: 'Angular CLI: A command-line interface for Angular that you can find at [https://angular.io/cli](https://angular.io/cli).'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular CLI：Angular 的命令行界面，你可以在 [https://angular.io/cli](https://angular.io/cli)
    找到。
- en: 'GitHub material: The related code for this chapter can be found in the `Chapter06`
    folder at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 资源：本章相关代码可在 [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition)
    的 `Chapter06` 文件夹中找到。
- en: Creating a mobile application with Ionic
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ionic 创建移动应用程序
- en: 'The first step toward building our application is creating a new mobile application
    using the Ionic toolkit. We will start building our application with the following
    tasks:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 建立我们的应用程序的第一步是使用 Ionic 工具包创建一个新的移动应用程序。我们将从以下任务开始构建我们的应用程序：
- en: Scaffolding the application
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序脚手架
- en: Building the main menu
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建主菜单
- en: Ionic has a pretty straightforward process for creating a new mobile application
    from scratch without entering a single line of code.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic 创建从零开始的新移动应用程序的过程非常直接，无需输入任何代码。
- en: Scaffolding the application
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序脚手架
- en: 'To create a new Ionic application, complete the following steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的 Ionic 应用程序，请完成以下步骤：
- en: 'Install the Ionic tooling that we will need using the following command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装我们需要的 Ionic 工具：
- en: '[PRE0]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The **Ionic CLI** is used to build and run an Ionic mobile application. The
    `native-run` library is used to run native libraries on mobile devices and emulators.
    The `cordova-res` library generates the icons and splash screens of our application
    for native mobile devices.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**Ionic CLI** 用于构建和运行 Ionic 移动应用程序。`native-run` 库用于在移动设备和模拟器上运行原生库。`cordova-res`
    库为我们生成原生移动设备的应用程序图标和启动画面。'
- en: 'Run the following command to create a new Angular application that uses the
    `sidemenu` starter template from Ionic and also adds Capacitor:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以创建一个新的 Angular 应用程序，该应用程序使用 Ionic 的 `sidemenu` 起始模板，并添加了 Capacitor：
- en: '[PRE1]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding command will ask you if you want to use Angular modules or standalone
    components. Select `Standalone` and press *Enter*.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之前的命令将询问你是否想使用 Angular 模块或独立组件。选择 `Standalone` 并按 *Enter*。
- en: Ionic will create a sample application for us with some ready-made data. In
    the following section, we will learn how to modify it according to our needs.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic 将为我们创建一个包含一些现成数据的示例应用程序。在下一节中，我们将学习如何根据我们的需求对其进行修改。
- en: Building the main menu
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建主菜单
- en: 'We will start building the main menu of our application according to our specifications:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将根据我们的规格开始构建应用程序的主菜单：
- en: Load the Ionic project we built in the previous section within VSCode and open
    the main HTML file of the application, `index.html`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VSCode 中加载我们在上一节中构建的 Ionic 项目，并打开应用程序的主 HTML 文件 `index.html`。
- en: 'Add the name of your application in the `<title>` tag:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<title>` 标签中添加您应用程序的名称：
- en: '[PRE2]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Open the template file of the main component, `app.component.html`, and remove
    the second `<ion-list>` element. An `<ion-list>` element displays items in a list
    view.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开主组件的模板文件 `app.component.html`，并删除第二个 `<ion-list>` 元素。`<ion-list>` 元素用于在列表视图中显示项目。
- en: 'Add the name of your application in the `<ion-list-header>` element and change
    the text of the `<ion-note>` element accordingly:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<ion-list-header>` 元素中添加您应用程序的名称，并相应地更改 `<ion-note>` 元素的文本：
- en: '[PRE3]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: An `<ion-list-header>` element is the header of a list. An `<ion-note>` element
    is a text element used to provide additional information, such as the subtitle
    of a list.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<ion-list-header>` 元素是列表的标题。`<ion-note>` 元素是一个用于提供额外信息的文本元素，例如列表的副标题。'
- en: 'Open the TypeScript file of the main component, `app.component.ts`, and modify
    the `AppComponent` class as follows:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开主组件的 TypeScript 文件 `app.component.ts`，并按如下方式修改 `AppComponent` 类：
- en: '[PRE4]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `appPages` property contains all the pages of our application. Each page
    has a `title`, a `url` from which it is accessible, and an `icon`. Our application
    will consist of two pages, one that will be used for taking photos using the camera
    and another for displaying them on a map.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`appPages` 属性包含我们应用程序的所有页面。每个页面都有一个 `title`，一个可访问的 `url`，以及一个 `icon`。我们的应用程序将包含两个页面，一个用于使用相机拍照，另一个用于在地图上显示它们。'
- en: 'Run the `serve` command of the Ionic CLI to start the application:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 Ionic CLI 的 `serve` 命令以启动应用程序：
- en: '[PRE5]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding command will build your application and open your default browser
    at `http://localhost:8100`.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令将构建您的应用程序并在默认浏览器中打开 `http://localhost:8100`。
- en: 'You should see the following output in the side menu of the application:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您应该在应用程序的侧边菜单中看到以下输出：
- en: '![Figure 6.8 – Main menu](img/B18465_06_02.png)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 6.8 – 主菜单](img/B18465_06_02.png)'
- en: Figure 6.2 – Main menu
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.2 – 主菜单
- en: Suppose you adjust your browser window size to achieve a more realistic view
    for a mobile device or use an emulator like the device toolbar in the Google Chrome
    developer tools. In that case, you must click the application menu button to see
    the preceding image.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您调整浏览器窗口大小以获得更真实的移动设备视图或使用模拟器，例如 Google Chrome 开发者工具中的设备工具栏。在这种情况下，您必须点击应用程序菜单按钮才能看到前面的图像。
- en: We have learned how to create a new Ionic application using the Ionic CLI and
    make modifications according to our needs.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何使用 Ionic CLI 创建新的 Ionic 应用程序并根据我们的需求进行修改。
- en: If we try to click on a menu item, we will notice that nothing happens since
    we have not created the necessary pages to be activated in each case. In the following
    section, we will learn how to complete this task by building the functionality
    of the first page.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试点击菜单项，我们会注意到没有任何反应，因为我们还没有为每种情况创建必要的页面。在下一节中，我们将学习如何通过构建第一页的功能来完成此任务。
- en: Taking photos with Capacitor
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Capacitor 拍照
- en: 'The first page of our application will allow the user to take photos using
    the camera. We will use the Capacitor runtime to get access to the native resource
    of the camera. To implement the page, we need to take the following actions:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的第一页将允许用户使用相机拍照。我们将使用 Capacitor 运行时来获取对相机原生资源的访问权限。为了实现页面，我们需要采取以下行动：
- en: Create the user interface.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户界面。
- en: Interact with Capacitor.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与电容器交互。
- en: Let’s start building the user interface of the page.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始构建页面的用户界面。
- en: Creating the user interface
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建用户界面
- en: 'Each page in our application is a different Angular component. To create an
    Angular component in Ionic, we can use the `generate` command of the Ionic CLI:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序中的每个页面都是一个不同的 Angular 组件。要在 Ionic 中创建 Angular 组件，我们可以使用 Ionic CLI 的 `generate`
    命令：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The previous command will perform the following actions:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将执行以下操作：
- en: Create an Angular component named `capture`.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个名为 `capture` 的 Angular 组件。
- en: Create a related routes file.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建相关路由文件。
- en: 'Let’s start building the logic of our new page now:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在开始构建新页面的逻辑：
- en: 'First, make our page the default when the user opens the application. Open
    the `app.routes.ts` file and change the first entry of the `routes` property to:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，当用户打开应用程序时，使我们的页面成为默认页面。打开 `app.routes.ts` 文件，并将 `routes` 属性的第一个条目更改为：
- en: '[PRE7]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The empty path is called the **default** routing path and is activated when
    our application starts up. The `redirectTo` property tells Angular to redirect
    to the `capture` path, which will load the page we created.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 空路径称为 **默认** 路由路径，当我们的应用程序启动时被激活。`redirectTo` 属性告诉 Angular 重定向到 `capture` 路径，这将加载我们创建的页面。
- en: You can also remove the `folder/:id` path as it is no longer needed and the
    whole `src\app\folder` directory from the application, which is part of the Ionic
    template layout.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以删除 `folder/:id` 路径，因为它不再需要，并且从应用程序中删除整个 `src\app\folder` 目录，这是 Ionic 模板布局的一部分。
- en: 'Open the `capture.page.html` file and replace the contents of the first `<ion-toolbar>`
    element as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `capture.page.html` 文件并按照以下方式替换第一个 `<ion-toolbar>` 元素的全部内容：
- en: '[PRE8]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `<ion-toolbar>` element is part of the `<ion-header>` element, which is
    the top navigation bar of the page. It contains an `<ion-menu-button>` element
    for toggling the main menu of the application and an `<ion-title>` element that
    depicts the title of the page.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<ion-toolbar>` 元素是 `<ion-header>` 元素的一部分，它是页面的顶部导航栏。它包含一个 `<ion-menu-button>`
    元素，用于切换应用程序的主菜单，以及一个 `<ion-title>` 元素，描述页面的标题。'
- en: 'Modify the title of the second `<ion-toolbar>` element as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式修改第二个 `<ion-toolbar>` 元素的标题：
- en: '[PRE9]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The second `<ion-header>` element will be displayed when the page is expanded,
    and the main menu is displayed on the screen.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当页面展开时，将显示第二个 `<ion-header>` 元素，主菜单将显示在屏幕上。
- en: 'Add the following HTML code immediately after the second header:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个标题之后立即添加以下 HTML 代码：
- en: '[PRE10]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It contains an `<ion-fab-button>` element, which, when clicked, will open the
    camera of the device to take a photo.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它包含一个 `<ion-fab-button>` 元素，当点击时，将打开设备的相机来拍照。
- en: 'Finally, let’s add some cool styles to our page. Open the `capture.page.scss`
    file and enter the following CSS styles:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们给我们的页面添加一些酷炫的样式。打开 `capture.page.scss` 文件并输入以下 CSS 样式：
- en: '[PRE11]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let’s run the application using `ionic serve` to get a quick preview of what
    we have built so far:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `ionic serve` 运行应用程序，以快速预览我们迄今为止所构建的内容：
- en: '![](img/B18465_06_03.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18465_06_03.png)'
- en: Figure 6.3 – Capture page
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 捕获页面
- en: The camera button on the page needs to open the camera to take a photo. In the
    following section, we will learn how to use Capacitor to interact with the camera.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 页面上的相机按钮需要打开相机来拍照。在以下部分，我们将学习如何使用 Capacitor 与相机交互。
- en: Interacting with Capacitor
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与 Capacitor 交互
- en: 'Taking photos in our application involves using two APIs from the Capacitor
    library. The **Camera API** will open the camera to take a photo, and the **Geolocation
    API** will read the current location from the GPS. Let’s see how we can use both
    in our application:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中拍照涉及使用 Capacitor 库中的两个 API。**Camera API** 将打开相机来拍照，而 **Geolocation
    API** 将从 GPS 读取当前位置。让我们看看我们如何在应用程序中使用这两个 API：
- en: 'Execute the following `npm` command to install both APIs:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下 `npm` 命令来安装两个 API：
- en: '[PRE12]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create an Angular service using the following Ionic CLI command:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 Ionic CLI 命令创建 Angular 服务：
- en: '[PRE13]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Open the `photo.service.ts` file and add the following `import` statements:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `photo.service.ts` 文件并添加以下 `import` 语句：
- en: '[PRE14]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a method in the `PhotoService` class to read the current position from
    the GPS device:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `PhotoService` 类中创建一个方法来从 GPS 设备读取当前位置：
- en: '[PRE15]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `getCurrentPosition` method of the `Geolocation` object contains a `coords`
    property with various location-based data such as the latitude and the longitude.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Geolocation` 对象的 `getCurrentPosition` 方法包含一个 `coords` 属性，其中包含各种基于位置的数据，如纬度和经度。'
- en: 'Create another method that calls the `getLocation` method and opens the camera
    of the device to take a photo:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个方法，该方法调用 `getLocation` 方法并打开设备的相机来拍照：
- en: '[PRE16]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We use the `getPhoto` method of the `Camera` object and pass a configuration
    object to define the properties for each photo. The `resultType` property indicates
    that the photo will be in a **data URL** format to save it to Firebase later easily.
    The `source` property indicates that we will use the camera device to get the
    photo, and the `quality` property defines the quality of the actual photo.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用 `Camera` 对象的 `getPhoto` 方法并传递一个配置对象来定义每张照片的属性。`resultType` 属性表示照片将以 **data
    URL** 格式保存，以便稍后轻松地将其保存到 Firebase。`source` 属性表示我们将使用相机设备来获取照片，而 `quality` 属性定义了实际照片的质量。
- en: 'Open the `capture.page.ts` file and inject `PhotoService` in the `constructor`
    of the `CapturePage` class:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `capture.page.ts` 文件并在 `CapturePage` 类的 `constructor` 中注入 `PhotoService`：
- en: '[PRE17]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a component method that will call the `takePhoto` method of the `photoService`
    variable:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个组件方法，该方法将调用`photoService`变量的`takePhoto`方法：
- en: '[PRE18]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Open the `capture.page.html` file and bind the `click` event of the `<ion-fab-button>`
    element to the `openCamera` component method:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`capture.page.html`文件，并将`<ion-fab-button>`元素的`click`事件绑定到`openCamera`组件方法：
- en: '[PRE19]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We have now added all the necessary pieces to take a photo using the camera
    of the device. Let’s try to run the application on a real device to test the interaction
    with the camera:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经添加了所有必要的组件来使用设备的相机拍照。让我们尝试在真实设备上运行应用程序以测试与相机的交互：
- en: 'First, we need to build our application using the following Ionic CLI command:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要使用以下Ionic CLI命令构建我们的应用程序：
- en: '[PRE20]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding command will create a `www` folder in the root folder of your
    project that contains your application bundle.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在项目根目录中创建一个`www`文件夹，其中包含你的应用程序包。
- en: 'Run the following command to open the application in the development environment
    of your chosen platform:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以在所选平台的发展环境中打开应用程序：
- en: '[PRE21]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the previous command, `<os>` can be either **android** or **ios**. Upon execution,
    it will open the native mobile project in the respective IDE, Android Studio,
    or Xcode, depending on the platform that you are targeting. The IDE must then
    be used to run the native application.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上一个命令中，`<os>`可以是**android**或**ios**。执行后，它将根据你针对的平台打开相应的本地移动项目，Android Studio或Xcode，具体取决于目标平台。然后必须使用IDE来运行本地应用程序。
- en: Whenever you want to rebuild the application, you must run the `ionic cap copy`
    command to copy the application bundle from the `www` folder into the native mobile
    project.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每次你想重新构建应用程序时，都必须运行`ionic cap copy`命令，以将应用程序包从`www`文件夹复制到本地移动项目。
- en: Click on the camera button. The application may ask your permission to use the
    GPS and the camera. Alternatively, you may need to enable location settings on
    your device before continuing.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击相机按钮。应用程序可能会要求你允许使用GPS和相机。或者，在继续之前，你可能需要在设备上启用位置设置。
- en: You will probably need to add additional permissions in the native mobile project
    of your development environment. Check the respective documentation of the APIs
    on the Capacitor website.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要在开发环境的本地移动项目中添加额外的权限。检查Capacitor网站上API的相关文档。
- en: The first page of our application now has a sleek interface that allows the
    user to interact with the camera. We have also created an Angular service that
    ensures a seamless interaction with Capacitor to get location-based data and take
    photos. In the following section, we will see how to save them in the cloud using
    Firebase.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的第一页现在有一个简洁的界面，允许用户与相机交互。我们还创建了一个Angular服务，确保与Capacitor的无缝交互以获取基于位置的数据并拍照。在下一节中，我们将看到如何使用Firebase将它们保存在云端。
- en: Storing data in Firebase
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Firebase中存储数据
- en: 'The application will be able to store photos and their location in Firebase.
    We will use the Storage service to upload our photos and the Cloud Firestore database
    to keep their location. We will further expand our application in the following
    tasks:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将能够将照片及其位置存储在Firebase中。我们将使用存储服务上传我们的照片，并使用Cloud Firestore数据库来保存它们的位置。我们将在以下任务中进一步扩展我们的应用程序：
- en: Creating a Firebase project
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Firebase项目
- en: Integrating the **AngularFire** library
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成**AngularFire**库
- en: First, we must set up a new Firebase project for our application.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须为我们的应用程序设置一个新的Firebase项目。
- en: Creating a Firebase project
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Firebase项目
- en: 'We can set up and configure a Firebase project using the **Firebase console**
    at [https://console.firebase.google.com](https://console.firebase.google.com):'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用位于[https://console.firebase.google.com](https://console.firebase.google.com)的**Firebase控制台**设置和配置Firebase项目：
- en: 'Click on the **Add project** button to create a new Firebase project:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加项目**按钮以创建一个新的Firebase项目：
- en: '![Figure 6.10 – Create a new Firebase project](img/B18465_06_04.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图6.10 – 创建新的Firebase项目](img/B18465_06_04.png)'
- en: Figure 6.4 – Create a new Firebase project
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – 创建新的Firebase项目
- en: Enter a name for your project and click the **Continue** button:![Figure 6.11
    – Enter the project name](img/B18465_06_05.png)
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的项目输入一个名称，然后点击**继续**按钮：![图6.11 – 输入项目名称](img/B18465_06_05.png)
- en: Figure 6.5 – Enter the project name
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.5 – 输入项目名称
- en: Firebase generates a unique identifier for your project, which is located underneath
    the project name and is used in various Firebase services.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebase为你的项目生成一个唯一的标识符，它位于项目名称下方，并在各种Firebase服务中使用。
- en: 'Disable **Google Analytics** for this project and click on the **Create project**
    button:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用此项目的**Google Analytics**并点击**创建项目**按钮：
- en: '![Figure 6.12 – Disable Google Analytics](img/B18465_06_06.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图6.12 – 禁用Google Analytics](img/B18465_06_06.png)'
- en: Figure 6.6 – Disable Google Analytics
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – 禁用Google Analytics
- en: Wait for the new project to be created and click the **Continue** button. You
    will be redirected to the dashboard of your new project, which contains a list
    of options:![Figure 6.13 – Select the type of your application](img/B18465_06_07.png)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待创建新项目并点击**继续**按钮。您将被重定向到您的新项目仪表板，其中包含一系列选项：![图6.13 – 选择应用程序类型](img/B18465_06_07.png)
- en: Figure 6.7 – Select the type of your application
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.7 – 选择应用程序类型
- en: Click the third option with the *code* icon to add Firebase to a web application.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击带有*代码*图标的第三个选项，将Firebase添加到Web应用程序中。
- en: 'Enter a name for your application in the **App nickname** field and click on
    the **Register app** button:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**应用昵称**字段中输入您的应用程序名称，然后点击**注册应用**按钮：
- en: '![Figure 6.14 – Application registration](img/B18465_06_08.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图6.14 – 应用程序注册](img/B18465_06_08.png)'
- en: Figure 6.8 – Application registration
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 – 应用程序注册
- en: 'Firebase will generate a configuration that we will use later in the mobile
    application:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Firebase将生成一个配置，我们将在后面的移动应用程序中使用：
- en: '[PRE22]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Copy the `firebaseConfig` object and click the **Continue to console** button.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 复制`firebaseConfig`对象并点击**继续到控制台**按钮。
- en: The Firebase configuration can also be accessed later at `https://console.firebase.google.com/project/<project-id>/settings/general`,
    where `project-id` is the ID of your Firebase project.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebase配置也可以在`https://console.firebase.google.com/project/<project-id>/settings/general`处稍后访问，其中`project-id`是您的Firebase项目ID。
- en: Back in the dashboard console, select the **Cloud Firestore** option to enable
    Cloud Firestore in your application.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仪表板控制台中，选择**Cloud Firestore**选项以在您的应用程序中启用Cloud Firestore。
- en: 'Click on the **Create database** button to create a new Cloud Firestore database:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建数据库**按钮以创建一个新的Cloud Firestore数据库：
- en: '![Figure 6.16 – Create a database](img/B18465_06_09.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图6.16 – 创建数据库](img/B18465_06_09.png)'
- en: Figure 6.9 – Create a database
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 – 创建数据库
- en: Select the operation mode of your database. Choose **Start in Test mode** for
    development purposes and click the **Next** button:![Εικόνα που περιέχει κείμενο  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B18465_06_10.png)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择数据库的操作模式。为了开发目的，选择**以测试模式启动**并点击**下一步**按钮：![包含文本的图像  自动生成的描述](img/B18465_06_10.png)
- en: Figure 6.10 – Select operation mode
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.10 – 选择操作模式
- en: Choosing a mode is nothing less than setting rules for your database. Test mode
    allows faster setup and keeps your data public for 30 days. When you are ready
    to move your application into production, you can modify the rules of your database
    accordingly to make your data private.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择模式相当于为您的数据库设置规则。测试模式允许快速设置，并保持您的数据公开30天。当您准备好将应用程序移入生产时，您可以相应地修改数据库规则以使您的数据私有。
- en: Choose a location for your database according to your regional settings and
    click the **Enable** button.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据您的区域设置选择数据库的位置，然后点击**启用**按钮。
- en: Congratulations! You have created a new Cloud Firestore database. In the next
    section, we will learn how to use the new database for saving data with our mobile
    application.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已创建了一个新的Cloud Firestore数据库。在下一节中，我们将学习如何使用新的数据库通过我们的移动应用程序保存数据。
- en: Integrating the AngularFire library
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成AngularFire库
- en: 'The AngularFire library is an Angular library that we can use in an Angular
    application to interact with Firebase family products such as Cloud Firestore
    and the Storage service. To install it in our application:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: AngularFire库是一个Angular库，我们可以在Angular应用程序中使用它来与Firebase家族产品（如Cloud Firestore和存储服务）交互。要在我们的应用程序中安装它：
- en: 'Run the following command in a terminal window to install **Firebase tools**:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端窗口中运行以下命令以安装**Firebase工具**：
- en: '[PRE23]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the following command in the same terminal window to authenticate with
    the Firebase CLI:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的终端窗口中运行以下命令以使用Firebase CLI进行身份验证：
- en: '[PRE24]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, run the following command of the Angular CLI to install the `@angular/fire`
    npm package in your Angular CLI project:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，运行以下Angular CLI命令以在您的Angular CLI项目中安装`@angular/fire`npm包：
- en: '[PRE25]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The preceding command will find the latest version of the library and prompt
    us to install it.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令将找到库的最新版本，并提示我们安装它。
- en: 'First, it will ask what features of Firebase we want to enable:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，它会询问我们想要启用Firebase的哪些功能：
- en: '[PRE26]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Make sure that you select *only* the `Firestore` option and press *Enter*.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保只选择 **Firestore** 选项并按 *Enter*。
- en: 'Then, it will ask us to select which Firebase account we want to use:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，它将询问我们想要使用哪个 Firebase 账户：
- en: '[PRE27]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Ensure the account you used earlier is selected, and press *Enter*.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保选择你之前使用的账户，并按 *Enter*。
- en: 'In the next question, we will choose for which project we are going to use
    Firestore:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个问题中，我们将选择我们将要使用 Firestore 的项目：
- en: '[PRE28]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Select the `phototag` project that we created earlier and press *Enter*.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择我们之前创建的 `phototag` 项目并按 *Enter*。
- en: 'Finally, we must choose the app that has Firestore enabled:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们必须选择已启用 Firestore 的应用程序：
- en: '[PRE29]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Select the `phototag` app that we created earlier and press *Enter*.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择我们之前创建的 `phototag` 应用程序并按 *Enter*。
- en: The preceding command may throw an error stating that the `app.module.ts` file
    does not exist. Please ignore it and continue with the next step.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的命令可能会抛出一个错误，表明 `app.module.ts` 文件不存在。请忽略它并继续下一步。
- en: 'Open the `main.ts` file and add the following `import` statements:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `main.ts` 文件并添加以下 `import` 语句：
- en: '[PRE30]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally, modify the `providers` array in the `bootstrapApplication` method
    as follows:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，修改 `bootstrapApplication` 方法中的 `providers` 数组如下：
- en: '[PRE31]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Replace `<firebaseConfig>` with the Firebase configuration object that you copied
    in the previous section.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `<firebaseConfig>` 替换为你在上一节中复制的 Firebase 配置对象。
- en: 'Let’s see now how we can use the AngularFire library in our application:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看我们如何在应用程序中使用 AngularFire 库：
- en: 'Open the `photo.service.ts` file and add the following `import` statements:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `photo.service.ts` 文件并添加以下 `import` 语句：
- en: '[PRE32]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `Firestore` service contains all the necessary methods that we will need
    to interact with our Cloud Firestore database. The `Storage` service contains
    methods for uploading files to the Storage service.
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Firestore` 服务包含我们与 Cloud Firestore 数据库交互所需的所有必要方法。`Storage` 服务包含将文件上传到存储服务的方法。'
- en: 'Inject both services into the `constructor` of the `PhotoService` class:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这两个服务注入到 `PhotoService` 类的 `constructor` 中：
- en: '[PRE33]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create the following method to save a photo in Firebase:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下方法以在 Firebase 中保存照片：
- en: '[PRE34]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: First, we create a random `name` for our photo and use the `uploadString` method
    to upload it to Firebase storage. As soon as uploading has been completed, we
    get a downloadable URL using the `getDownloadURL` method, which can be used to
    access that photo. Finally, we use the `addDoc` method to add a new photo in the
    `photocollection` property of the Firestore database.
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们为我们的照片创建一个随机的 `name`，并使用 `uploadString` 方法将其上传到 Firebase 存储中。一旦上传完成，我们使用
    `getDownloadURL` 方法获取可下载的 URL，该 URL 可用于访问该照片。最后，我们使用 `addDoc` 方法将新照片添加到 Firestore
    数据库的 `photocollection` 属性中。
- en: 'Modify the `takePhoto` method to call the `savePhoto` method that we created
    in the previous step:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `takePhoto` 方法以调用我们在上一步中创建的 `savePhoto` 方法：
- en: '[PRE35]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We are now ready to check the full functionality of the photo-shooting process:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以检查照片拍摄过程的完整功能：
- en: 'Run the following command of Capacitor to copy the application bundle to the
    native mobile project:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下 Capacitor 命令以将应用程序包复制到原生移动项目中：
- en: '[PRE36]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Open the native mobile project using the `open` command of Capacitor and run
    the project using the respective IDE.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Capacitor 的 `open` 命令打开原生移动项目，并使用相应的 IDE 运行项目。
- en: Open the Firebase console of your application and select the **Storage** option
    in the **Build** section. Click on the **Get started** button, select the **Start
    in Test mode** option, and click **Next**. Finally, click **Done** to complete
    the process of setting up cloud storage.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开应用程序的 Firebase 控制台，并在 **构建** 部分中选择 **存储** 选项。点击 **开始** 按钮，选择 **以测试模式开始** 选项，然后点击
    **下一步**。最后，点击 **完成** 以完成设置云存储的过程。
- en: 'Use the application to take a nice photo. To verify that your photo has been
    successfully uploaded to Firebase, refresh the page in the Firebase console. You
    should see an entry like the following:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用应用程序拍摄一张好照片。为了验证你的照片是否已成功上传到 Firebase，请刷新 Firebase 控制台中的页面。你应该会看到一个如下条目：
- en: '![Figure 6.19 – Firebase storage](img/B18465_06_11.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.19 – Firebase 存储](img/B18465_06_11.png)'
- en: Figure 6.11 – Firebase storage
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11 – Firebase 存储
- en: 'Similarly, select the **Firestore Database** option in the **Build** section,
    and you should see something like the following:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，在 **构建** 部分中选择 **Firestore 数据库** 选项，你应该会看到以下内容：
- en: '![Figure 6.20 – Cloud Firestore](img/B18465_06_12.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.20 – Cloud Firestore](img/B18465_06_12.png)'
- en: Figure 6.12 – Cloud Firestore
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – Cloud Firestore
- en: In the preceding screenshot, the **1oFxxWgQseIwqWUrYBkN** entry is the logical
    object of the photo that contains the URL of the actual file and its location
    data.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: The first page of our application is now feature-complete. We have gone through
    the full process of taking and uploading a photo to Firebase, along with its location
    data. We started by setting up and configuring a Firebase project and finished
    by learning how to use the AngularFire library to interact with that project.
    In the next section, we will reach our final destination by implementing the second
    page of our application.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Previewing photos with CesiumJS
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next feature of our application will be to display all the photos we have
    taken with the camera on a 3D map. The CesiumJS library provides a viewer with
    a 3D globe that we can use to visualize various things, such as images in specific
    locations. This new feature of our application will consist of the following:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Configuring CesiumJS
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying photos on the viewer
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will begin by learning how to set up the CesiumJS library.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Configuring CesiumJS
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The CesiumJS library is an npm package that we can install to start working
    with 3D maps and visualizations:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following `npm` command to install CesiumJS:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Open the `angular.json` configuration file and add the following entries in
    the `assets` array of the `build` architect option:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The preceding entries will copy all CesiumJS source files into a `cesium` folder
    inside the `assets` folder of our application.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Also, add the CesiumJS widgets style sheet file into the `styles` array of
    the `build` section:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The viewer of CesiumJS contains a toolbar with widgets, including a search bar
    and a dropdown for selecting a specific type of map, such as Bing Maps or Mapbox.
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the main entry point file of our application, `main.ts`, and add the following
    line:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `CESIUM_BASE_URL` global variable indicates the location of the CesiumJS
    source files.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Install a custom webpack builder using the following `npm` command:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: A **builder** is an Angular library that extends the default functionality of
    the Angular CLI. The `@angular-builders/custom-webpack` builder allows us to provide
    an additional webpack configuration file while building our application. It is
    beneficial in cases where we want to include other webpack plugins or override
    existing functionality.
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new webpack configuration file named `extra-webpack.config.js` in
    the root folder of the project and add the following content:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The configuration file will ensure that webpack will only try to load CesiumJS
    code that it can understand. CesiumJS uses modules in a format that cannot be
    statically analyzed using webpack.
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `angular.json` file and change the `builder` property of the `build`
    architect section to use the custom webpack builder:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Define the path of the custom webpack configuration file in the `options` property
    of the `build` section:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Also configure the `serve` architect section to use the custom webpack builder:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now that we have completed the configuration of the CesiumJS library, we can
    start creating the page for our feature:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command of the Ionic CLI to create a new page:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Open the `view.page.html` file and modify the first `<ion-header>` element
    so that it includes a menu toggle button:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Change the title of the `<ion-content>` element and add a `<div>` element that
    will be the container for our viewer:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The `#mapContainer` is a **template reference variable** we use to declare an
    alias for an element in our template.
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `view.page.scss` file and set the size of the map container element:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Let’s create our viewer now. Open the `view.page.ts` file and modify it as
    follows:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: We create a new `Viewer` object inside the `ngAfterViewInit` method of the component.
    The `ngAfterViewInit` method is called when the view of the component has finished
    loading, and it is defined in the `AfterViewInit` interface. The constructor of
    the `Viewer` class accepts as a parameter the native HTML element on which we
    want to create the viewer. In our case, we want to attach it to the map container
    element that we created earlier. Thus, we use the `@ViewChild` decorator to reference
    that element by passing the template reference variable name as a parameter.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the application using `ionic serve` and click on the **View gallery** option
    from the main menu. You should see the following output:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.21 – View gallery page](img/B18465_06_13.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – View gallery page
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: We have now successfully configured the CesiumJS library in our application.
    In the next section, we will see how to benefit from it and display our photos
    on the 3D globe of the CesiumJS viewer.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Displaying photos on the viewer
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next thing we need to do for our application to be ready is display our
    photos on the map. We will get all the photos from Firebase and add them to the
    viewer in the specified locations. Let’s see how we can accomplish that:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Angular service using the following command of the Ionic CLI:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Open the `cesium.service.ts` file and add the following `import` statements:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Inject the `Firestore` service in the `constructor` of the `CesiumService`
    class and create a `viewer` property, which we will use to store our `Viewer`
    object:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Create a `register` method to set the `viewer` property:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Create a method to get the `photos` collection from Cloud Firestore:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: In the preceding method, we call the `getDocs` method to get the data of the
    `photos` collection.
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the following method for adding all the photos to the viewer:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The location of each photo on the viewer will be displayed as a **pin**. Thus,
    we need to initialize a `PinBuilder` object first. The preceding method calls
    the `getPhotos` method to get all photos from Cloud Firestore. For each photo,
    it creates an `entity` object that contains the `position`, which is the location
    of the photo in degrees, and a `billboard` property that displays a pin of 48
    pixels in size. It also defines a `description` property that will show the actual
    image of the photo when we click on the pin.
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Each `entity` object is added to the `entities` collection of the viewer using
    its `add` method.
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The description of each photo is displayed inside an **info box**. Open the
    `global.scss` file that contains the global styles of the application and add
    the following CSS styles for the info box:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now, let’s use `CesiumService` from our page. Open the `view.page.ts` file
    and inject the `CesiumService` class into the `constructor` of the `ViewPage`
    class:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Modify the `ngAfterViewInit` method to register the viewer and add the photos:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'We are now ready to view our photos on the map:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Run the application using the `ionic serve` command.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the application to take nice photos, preferably in different locations.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **View gallery** option from the main menu, and you should get an
    output like the following:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.22 – Photos on the map](img/B18465_06_14.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – Photos on the map
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on one of the pins on the map, and you should see your photo:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.23 – Photo display](img/B18465_06_15.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – Photo display
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: We now have a complete mobile application for taking geotagged photos and displaying
    them on a map. We saw how to set up the CesiumJS library and get our photos from
    Cloud Firestore. The API of the CesiumJS viewer provided us with an easy way to
    visualize our photos on the map and interact with them.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built a mobile application for taking photos, tagging them
    with the current location, and displaying them on a 3D map. Initially, we learned
    how to create a new mobile application using the Ionic framework. We built the
    application locally and integrated Capacitor to interact with the camera and the
    GPS device. The camera was used to take photos, and the GPS to mark them with
    the location.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: Later on, we used Firebase services to store our photo files and data in the
    cloud. Finally, we learned how to retrieve the stored photos from Firebase and
    display them on a 3D globe using the CesiumJS library.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will investigate another way to prerender content in
    Angular. We will use server-side rendering techniques to create a GitHub portfolio
    website.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: Practice questions
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which toolkit can we use to create a UI in a Capacitor application?
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which method do we use to take photos with the camera in a Capacitor application?
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we read the current location in a Capacitor application?
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we add a menu toggle button with Ionic?
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Capacitor command do we use to sync the application bundle with native
    mobile projects?
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between test and production modes in Cloud Firestore?
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we initialize an application with the AngularFire library?
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which method do we use to fetch data from a Cloud Firestore collection?
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we create a pin using the CesiumJS library?
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we convert latitude and longitude to degrees using CesiumJS?
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Getting started with Capacitor: [https://capacitorjs.com/docs/getting-started](https://capacitorjs.com/docs/getting-started)'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Android getting started guide for Capacitor: [https://capacitorjs.com/docs/android#getting-started](https://capacitorjs.com/docs/android#getting-started)'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'iOS getting started guide for Capacitor: [https://capacitorjs.com/docs/ios#getting-started](https://capacitorjs.com/docs/ios#getting-started
    )'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular development with Ionic: [https://ionicframework.com/docs/angular/overview](https://ionicframework.com/docs/angular/overview)'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AngularFire library documentation: [https://firebaseopensource.com/projects/angular/angularfire2](https://firebaseopensource.com/projects/angular/angularfire2)'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CesiumJS quick start guide: [https://cesium.com/docs/tutorials/quick-start](https://cesium.com/docs/tutorials/quick-start)'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CesiumJS and Angular article: [https://cesium.com/blog/2018/03/12/cesium-and-angular](https://cesium.com/blog/2018/03/12/cesium-and-angular)'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join our community on Discord
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/AngularProjects3e](https://packt.link/AngularProjects3e)'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code89405936498927781.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
