["```js\nnpm install @ngrx/entity\n```", "```js\n// user.model.ts\n\nexport interface User {\n  id: number;\n  name: string;\n}\n```", "```js\n// excerpt from app.module.ts\n\nimport { \n  EntityState, \n  createEntityAdapter, \n  EntityAdapter \n} from \"@ngrx/entity\";\n\nexport interface State extends EntityState<User> {\n  selectedUserId: number | null;\n}\n\n```", "```js\n// from NGRX source code\n\nexport interface EntityState<T> {\n  ids: string[] | number[];\n  entities: Dictionary<T>;\n}\n\n```", "```js\n// excerpt from app.module.ts\n\nimport { \n  EntityState, \n  createEntityAdapter, \n  EntityAdapter \n} from \"@ngrx/entity\";\n\nconst userAdapter: EntityAdapter<User> = createEntityAdapter<User>();\n```", "```js\n// excerpt from app.module.ts\n\nconst initialState: State = {\n  ids: [],\n  entities: {},\n  selectedUserId: null\n};\n\nconst initial = userAdapter.getInitialState(initialState);\n```", "```js\n// interfaces.ts\n\nimport { Action } from \"@ngrx/store\";\n\nexport interface ActionPayload<T> extends Action {\n  payload: T;\n}\n\n// excerpt from app.module.ts\n\nfunction userReducer(state = initial, action: ActionPayload<User>): State {\n  switch (action.type) {\n    case \"ADD_USER\":\n      return userAdapter.addOne(action.payload, state);\n    default:\n      return state;\n    }\n }\n}\n```", "```js\n// example of what a reducer could look like that is NOT using @ngrx/entity\n\nfunction reducer(state = [], action: ActionPayload<User>) {\n  switch (action.type) {\n    case \"ADD_USER\":\n      return [\n        ...state.users\n        Object.assign({}, action.payload)\n      ];\n    default:\n      return state;\n    }\n }\n}\n```", "```js\n// excerpt from app.module.ts\n\n@NgModule({\n  declarations: [AppComponent, EditUserComponent],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    StoreModule.forRoot({\n users: userReducer\n })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```", "```js\n// app.component.ts  - a first draft\n\nimport { Component } from \"@angular/core\";\nimport { AppState } from \"./app-state\";\nimport { Store } from \"@ngrx/store\";\n\n@Component({\n  selector: \"app-root\",\n  template: `\n  User list view\n`\n})\nexport class AppComponent {\n  title = \"app\";\n  users$;\n\n  constructor(private store: Store<AppState>) {\n    this.users$ = this.store\n      .select(state => state);\n\n    this.users$\n      .subscribe(data => console.log(\"users\", data));\n  }\n}\n```", "```js\n// app.component.ts adding more UI and selecting the correct slice of state\n\nimport { Component } from \"@angular/core\";\nimport { AppState } from \"./app-state\";\nimport { Store } from \"@ngrx/store\";\nimport { map } from \"rxjs/operators\";\n\n@Component({\n  selector: \"app-root\",\n  template: `\n  <div style=\"border: solid 1px black; padding: 10px;\" \n *ngFor=\"let user of users$ | async\">\n  {{ user.name }}\n  </div>\n`\n})\nexport class AppComponent {\n  title = \"app\";\n  users$;\n  constructor(private store: Store<AppState>) {\n    this.users$ = this.store\n      .select(state => state.users.entities)\n      .pipe(\n        map(this.toArray)\n      );\n    this.users$.subscribe(data => console.log(\"users\", data));\n  }\n\n  toArray(obj) {\n const keys = Object.keys(obj);\n    return keys.map(key => obj[key]);\n  }\n}\n```", "```js\n// excerpt from app.module.ts\n\nfunction userReducer(\n  state = initial, \n  action: ActionPayload<User>): State {\n\n  switch (action.type) {\n    case \"ADD_USER\":\n      return userAdapter.addOne(action.payload, state);\n    default:\n      return state;\n    }\n}\n```", "```js\n// description of the interface for EntityStateAdapter, \n// the interface our userAdapter implements\n\nexport interface EntityStateAdapter<T> {\n  addOne<S extends EntityState<T>>(entity: T, state: S): S;\n  addMany<S extends EntityState<T>>(entities: T[], state: S): S;\n  addAll<S extends EntityState<T>>(entities: T[], state: S): S;\n  removeOne<S extends EntityState<T>>(key: string, state: S): S;\n  removeOne<S extends EntityState<T>>(key: number, state: S): S;\n  removeMany<S extends EntityState<T>>(keys: string[], state: S): S;\n  removeMany<S extends EntityState<T>>(keys: number[], state: S): S;\n  removeAll<S extends EntityState<T>>(state: S): S;\n  updateOne<S extends EntityState<T>>(update: Update<T>, state: S): S;\n  updateMany<S extends EntityState<T>>(updates: Update<T>[], state: S): S;\n}\n```", "```js\n// app.component.ts - adding the capability to add users\n\nimport { Component } from \"@angular/core\";\nimport { AppState } from \"./app-state\";\nimport { Store } from \"@ngrx/store\";\nimport { map } from \"rxjs/operators\";\n\n@Component({\nselector: \"app-root\",\ntemplate: `\n  <div style=\"border: solid 1px black; padding: 10px;\" \n       *ngFor=\"let user of users$ | async\">\n    {{ user.name }}\n  </div>\n  <div>\n    <input [(ngModel)]=\"user\" /> <button (click)=\"add()\">Add</button>\n  </div>\n`\n})\nexport class AppComponent {\n  title = \"app\";\n  users$;\n  user;\n id = 1;\n\n  constructor(private store: Store<AppState>) {\n    this.users$ = this.store\n      .select(state => state.users.entities)\n      .pipe(map(this.toArray));\n    this.users$.subscribe(data => console.log(\"users\", data));\n  }\n\n  toArray(obj) {\n    const keys = Object.keys(obj); \n    return keys.map(key => obj[key]);\n  }\n\n  add() {\n const newUser = { id: this.id++, name: this.user };\n    this.store.dispatch({\n      type: \"ADD_USER\",\n      payload: newUser\n });\n }\n}\n```", "```js\n// edit-user.component.ts\n\nimport { \n  Component, \n  OnInit, \n  Output, \n  Input, \n  EventEmitter \n} from \"@angular/core\";\n\n@Component({\n  selector: \"edit-user\",\n  template: `\n  <div>\n    <input [(ngModel)]=\"user.name\" />\n    <button (click)=\"save.emit(user)\" >Save</button>\n  </div>\n`\n})\nexport class EditUserComponent implements OnInit {\n  private _user;\n\n  @Input()\n get user() {\n    return this._user;\n  }\n\n  set user(val) {\n    this._user = Object.assign({}, val);\n  }\n\n  @Output() save = new EventEmitter();\n\n  constructor() {}\n  ngOnInit() {}\n}\n```", "```js\n// excerpt from app.module.ts\n\n@NgModule({\n  declarations: [AppComponent, EditUserComponent],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    StoreModule.forRoot({\n      users: userReducer\n  })],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```", "```js\n// app.component.ts - adding EditUserComponent to the markup\n\nimport { Component } from \"@angular/core\";\nimport { AppState } from \"./app-state\";\nimport { Store } from \"@ngrx/store\";\nimport { map } from \"rxjs/operators\";\n\n@Component({\n  selector: \"app-root\",\n  template: `\n    <div style=\"border: solid 1px black; padding: 10px;\" \n         *ngFor=\"let user of users$ | async\">\n      {{ user.name }}\n      <edit-user [user]=\"user\" (save)=\"update($event)\" ></edit-user>\n    </div>\n    <div>\n      <input [(ngModel)]=\"user\" /> <button (click)=\"add()\">Add</button>\n    </div>\n`\n})\nexport class AppComponent {\n  title = \"app\";\n  users$;\n  user;\n  id = 1;\n\n  constructor(private store: Store<AppState>) {\n    this.users$ = this.store\n      .select(state => state.users.entities)\n      .pipe(map(this.toArray));\n    this.users$.subscribe(data => console.log(\"users\", data));\n  }\n\n  toArray(obj) {\n    const keys = Object.keys(obj);\n    return keys.map(key => obj[key]);\n  }\n\n  add() {\n    const newUser = { id: this.id++, name: this.user };\n    this.store.dispatch({\n      type: \"ADD_USER\",\n      payload: newUser\n    });\n  }\n\n update(user) {\n console.log(\"updating\", user);\n    this.store.dispatch({ type: \"UPDATE_USER\", payload: user });\n  }\n}\n```", "```js\n// excerpt from app.module.ts\n\nfunction userReducer(state = initial, action: ActionPayload<User>): State {\n  switch (action.type) {\n    case \"ADD_USER\":\n      return userAdapter.addOne(action.payload, state);\n case \"UPDATE_USER\":\n      return userAdapter.updateOne({\n id: action.payload.id,\n changes: action.payload\n },\n state\n );\n    default:\n      return state;\n   }\n}\n```", "```js\n// app.component.ts - adding remove capability\n\nimport { Component } from \"@angular/core\";\nimport { AppState } from \"./app-state\";\nimport { Store } from \"@ngrx/store\";\nimport { map } from \"rxjs/operators\";\n\n@Component({\n  selector: \"app-root\",\n  template: `\n  <div style=\"border: solid 1px black; padding: 10px;\" \n       *ngFor=\"let user of users$ | async\">\n    {{ user.name }}\n    <button (click)=\"remove(user.id)\" >Remove</button>\n    <edit-user [user]=\"user\" (save)=\"update($event)\" ></edit-user>\n  </div>\n  <div>\n    <input [(ngModel)]=\"user\" /> <button (click)=\"add()\">Add</button>\n  </div>\n`\n})\nexport class AppComponent {\n  title = \"app\";\n  users$;\n  user;\n  id = 1;\n\n  constructor(private store: Store<AppState>) {\n    this.users$ = this.store\n      .select(state => state.users.entities)\n      .pipe(map(this.toArray));\n\n    this.users$.subscribe(data => console.log(\"users\", data));\n  }\n\n  toArray(obj) {\n    const keys = Object.keys(obj);\n    return keys.map(key => obj[key]);\n  }\n\n  add() {\n    const newUser = { id: this.id++, name: this.user };\n    this.store.dispatch({\n      type: \"ADD_USER\",\n      payload: newUser\n    });\n  }\n\n remove(id) {\n console.log(\"removing\", id);\n    this.store.dispatch({ type: \"REMOVE_USER\", payload: { id } });\n  }\n\n  update(user) {\n    console.log(\"updating\", user);\n    this.store.dispatch({ type: \"UPDATE_USER\", payload: user });\n  }\n}\n```", "```js\n// excerpt from app.module.ts\n\nfunction userReducer(state = initial, action: ActionPayload<User>): State {\n  switch (action.type) {\n    case \"ADD_USER\":\n      return userAdapter.addOne(action.payload, state);\n    case \"REMOVE_USER\":\n      return userAdapter.removeOne(action.payload.id, state);\n    case \"UPDATE_USER\":\n      return userAdapter.updateOne(\n       {\n          id: action.payload.id,\n          changes: action.payload\n       },\n       state\n     );\n    default:\n      return state;\\\n  }\n}\n```", "```js\nnpm install @ngrx/router-store --save\n```", "```js\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, Injectable } from '@angular/core';\nimport { StoreModule, Action } from '@ngrx/store';\nimport { AppComponent } from './app.component';\nimport { counterReducer } from './reducer';\nimport { TodoModule } from './todo/todo.module';\nimport { todosReducer } from './todo/reducer';\nimport { JediModule } from './jedi/jedi.module';\nimport { jediListReducer } from './jedi/list.reducer';\nimport { productsReducer } from './products/products.reducer';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { ProductsModule } from './products/products.module';\nimport { StoreRouterConnectingModule, routerReducer } from '@ngrx/router-store';\nimport { RouterModule } from '@angular/router';\nimport { TestingComponent } from './testing.component';\nimport { Effect, ofType, Actions } from '@ngrx/effects';\nimport { Observable } from 'rxjs/Observable';\nimport { switchMap } from 'rxjs/operators';\nimport { of } from 'rxjs/observable/of';\nimport { EffectsModule } from '@ngrx/effects';\n\n@NgModule({\n  declarations: [AppComponent, TestingComponent],\n  imports: [\n    BrowserModule,\n    StoreModule.forRoot({\n      count: counterReducer,\n      todos: todosReducer,\n      jediList: jediListReducer,\n      products: productsReducer,\n      router: routerReducer\n    }),\n    EffectsModule.forRoot([]),\n    RouterModule.forRoot([{ path: 'testing', component: TestingComponent }]),\n StoreRouterConnectingModule.forRoot({\n stateKey: 'router' // name of reducer key\n    }),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25 // Retains last 25 states\n    }),\n    TodoModule,\n    JediModule,\n    ProductsModule\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```", "```js\nimport { Component } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs/Observable';\nimport { Increment, Decrement } from './actions';\nimport { AppState } from './app-state';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    {{ count$ | async }}\n    <button (click)=\"increment()\">Increment</button>\n    <button (click)=\"decrement()\">Decrement</button>\n    <app-todos></app-todos>\n    <jedi-list></jedi-list>\n    <div>\n      <a routerLink=\"/testing\" routerLinkActive=\"active\">Testing</a>\n    </div>\n    <router-outlet></router-outlet>`,\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  count$: Observable<number>;\n\n  constructor(private store: Store<AppState>) {\n    this.count$ = store.select('count');\n    store\n .select(state => state.router)\n      .subscribe(route => console.log('router obj', route));\n  }\n\n  increment() {\n    this.store.dispatch(Increment());\n  }\n\n  decrement() {\n    this.store.dispatch(Decrement());\n  }\n}\n```", "```js\nimport { Injectable } from '@angular/core';\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Router } from '@angular/router';\nimport { map, tap, switchMap } from 'rxjs/operators';\nimport { Action } from '@ngrx/store';\nimport { PRODUCTS, RoutingAction } from './routing.constants';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class RoutingEffects {\n  @Effect({ dispatch: false })\n  gotoProducts$ = this.actions$.ofType(PRODUCTS).pipe(\n    tap(action => {\n      this.router.navigate([action.payload.url]);\n    })\n  );\n\n  @Effect({ dispatch: false })\n  locationUpdate$: Observable<Action> = \n    this.actions$.ofType('ROUTER_NAVIGATION').pipe(\n      tap((action: any) => {\n        console.log('router navigation effect', action);\n      })\n );\n\n  constructor(\n    private router: Router, \n    private actions$: Actions<RoutingAction>) {}\n}\n```", "```js\n// my-serializer.ts\n\nimport { RouterStateSerializer } from '@ngrx/router-store';\nimport { RouterStateSnapshot } from '@angular/router';\n\ninterface MyState {\n  url: string;\n}\n\nexport class MySerializer implements RouterStateSerializer<MyState> {\n  serialize(routerState: RouterStateSnapshot): MyState {\n    return <MyState>{};\n    // todo: implement\n  }\n}\n```", "```js\n// my-serializer.ts\nimport { RouterStateSerializer } from '@ngrx/router-store';\nimport { RouterStateSnapshot } from '@angular/router';\n\ninterface MyState {\n  url: string;\n}\n\nexport class MySerializer implements RouterStateSerializer<MyState> {\n  serialize(routerState: RouterStateSnapshot): MyState {\n    const { url } = routerState;\n    return { url };\n  }\n}\n```", "```js\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, Injectable } from '@angular/core';\nimport { StoreModule, Action } from '@ngrx/store';\nimport { AppComponent } from './app.component';\nimport { counterReducer } from './reducer';\nimport { TodoModule } from './todo/todo.module';\nimport { todosReducer } from './todo/reducer';\nimport { JediModule } from './jedi/jedi.module';\nimport { jediListReducer } from './jedi/list.reducer';\nimport { productsReducer } from './products/products.reducer';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { ProductsModule } from './products/products.module';\nimport { StoreRouterConnectingModule, routerReducer, RouterStateSerializer } from '@ngrx/router-store';\nimport { RouterModule } from '@angular/router';\nimport { TestingComponent } from './testing.component';\nimport { Effect, ofType, Actions } from '@ngrx/effects';\nimport { Observable } from 'rxjs/Observable';\nimport { switchMap } from 'rxjs/operators';\nimport { of } from 'rxjs/observable/of';\nimport { EffectsModule } from '@ngrx/effects';\nimport { RoutingEffects } from './routing.effects';\nimport { ProductsTestComponent } from './productstest.component';\nimport { MySerializer } from './my-serializer';\n\n@NgModule({\n  declarations: [AppComponent, TestingComponent, ProductsTestComponent],\n  imports: [\n    BrowserModule,\n    StoreModule.forRoot({\n      count: counterReducer,\n      todos: todosReducer,\n      jediList: jediListReducer,\n      products: productsReducer,\n      router: routerReducer}),\n    EffectsModule.forRoot([RoutingEffects]),\n    RouterModule.forRoot([\n      { path: 'testing', component: TestingComponent },\n      { path: 'products', component: ProductsTestComponent }\n    ]),\n    StoreRouterConnectingModule.forRoot({\n      stateKey: 'router' // name of reducer key\n    }),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25 // Retains last 25 states\n    }),\n    TodoModule,\n    JediModule,\n    ProductsModule\n  ],\n  providers: [{ provide: RouterStateSerializer, useClass: MySerializer }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```", "```js\nproviders: [{ provide: RouterStateSerializer, useClass: MySerializer }]\n```", "```js\n// my-serializer.ts\nimport { RouterStateSerializer } from '@ngrx/router-store';\nimport { RouterStateSnapshot } from '@angular/router';\n\ninterface MyState {\n  url: string;\n queryParams;\n}\n\nexport class MySerializer implements RouterStateSerializer<MyState> {\n  serialize(routerState: RouterStateSnapshot): MyState {\n    const { url, root: { queryParams } } = routerState;\n    return { url, queryParams };\n  }\n}\n```", "```js\n// products/products.module.ts\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { EffectsModule } from '@ngrx/effects';\nimport { ProductEffects } from './products.effect';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ProductsComponent } from './products.component';\nimport { FormsModule } from '@angular/forms';\nimport { ProductsHttpActions } from './products-http.actions';\nimport { RouterModule } from '@angular/router';\nimport { ProductsDetailComponent } from './products-detail.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule,\n    EffectsModule.forFeature([ProductEffects]),\n    RouterModule.forChild([{\n      path: 'products',\n      component: ProductsComponent\n    }, {\n path: 'products/:id',\n      component: ProductsDetailComponent\n }])\n  ],\n  exports: [ProductsComponent],\n  declarations: [ProductsComponent, ProductsDetailComponent],\n  providers: [ProductsHttpActions]\n})\nexport class ProductsModule {}\n```", "```js\n// products-detail.component.ts\n\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\nselector: 'app-products-detail',\n  template: `\n  products detail\n`\n})\nexport class ProductsDetailComponent{\n  constructor() {}\n}\n\n```", "```js\n// routing-constants.ts\nexport const PRODUCTS = 'Navigation products';\nexport const TODOS = 'Navigation todos';\n\nexport interface RoutingAction implements Action {\n  type: string;\n  payload: { url: string, query: { page: number } ;}\n}\n```", "```js\n// router-actions.ts\nimport { PRODUCTS, TODOS } from './routing-constants';\n\nexport const gotoProducts = (pageNo) => ({ \n  type: PRODUCTS, \n  payload: { url: '/products', query: { page: pageNo } } \n});\n\nexport const gotoTodo = (pageNo) => ({\n  type: TODOS,\n  payload: { url: '/todos', query: { page: pageNo } }\n})\n```", "```js\n// routing-effects.ts\nimport { PRODUCTS, TODOS } from './routing-constants';\nimport { gotoProducts, gotoTodo }\n\nexport class RoutingEffects {\n  @Effect({ dispatch: false }) routingProducts$ = this.actions$\n  .ofType(PRODUCTS)\n  .tap(action => {\n    this.router.navigate('/products')  \n  })\n\n  @Effect({ dispatch: false }) routingTodos$ = this.actions$\n  .ofType(TODOS)\n  .tap(action => {\n    this.router.navigate('/todos');\n  }) \n\n  constructor(\n    private router: Router,\n    private actions$: Actions) {\n\n  }\n}\n```", "```js\n// NGRX-light/storeI.js\n\nclass Store {\n  constructor() {\n    this.state = {};\n  }\n  dispatch() {\n   // calculate the new state and replace the old one\n  }\n}\n```", "```js\n// NGRX-light/storeII.js\n\nclass Store {\n  constructor() {\n    this.state = {};\n  }\n\n  dispatch(newState) {\n    this.state = newState;\n  }\n}\n```", "```js\nthis.innerSubject.next(newState);\n```", "```js\nconst store = new Store();\nstore.subscribe(data => {\n  console.log('data', data);\n})\n```", "```js\n// NGRX-light/storeIII.js\n\nconst Rx = require('rxjs');\n\nclass Store extends Rx.Subject {\n  constructor() {\n    super();\n    this.state = {};\n    this.subscribe(data => this.state = data);\n  }\n\n  dispatch(newState) {\n    this.next(newState);\n  }\n}\n\nconst store = new Store();\nstore.subscribe(data => console.log('store', data));\n\nstore.dispatch({});\nstore.dispatch({ user: 'chris' });\n\n// store {}\n// store { user: 'chris' }\n```", "```js\nconst store = new Store();\nstore.subscribe(data => console.log('store', data));\n// desired behavior:  store { name: 'chris' }\n// desired behavior: store { name: 'chris', address: 'London' }\n\nstore.dispatch({ name : 'chris' });\nstore.dispatch({ address : 'London' });\n\n```", "```js\n// NGRX-light/storeIV.js\n\nconst Rx = require('rxjs');\n\nclass Store extends Rx.Subject {\n  constructor() {\n    super();\n    this.dispatcher = new Rx.Subject();\n    this.state = {};\n    this.dispatcher.subscribe(data => {\n      this.state = Object.assign({}, this.state, data);\n      this.next(this.state);\n    });\n  }\n\n  dispatch(newState) {\n    this.dispatcher.next(newState);\n  }\n}\n\nconst store = new Store();\nstore.subscribe(data => console.log('store', data));\n\n// store { name: 'chris' }\n// store { address: 'London' }\n\nstore.dispatch({ name: 'chris' });\nstore.dispatch({ address: 'London' });\n```", "```js\n// NGRX-light/storeV.js\n\nconst Rx = require('rxjs');\n\nclass Store extends Rx.Subject {\n  constructor() {\n    super();\n    this.dispatcher = new Rx.Subject();\n    this.dispatcher\n      .scan((acc, curr) => ({ ...acc, ...curr }))\n      .subscribe(data => this.next(data));\n  }\n\n  dispatch(newState) {\n    this.dispatcher.next(newState);\n  }\n}\n\nconst store = new Store();\nstore.subscribe(data => console.log('store', data));\n\nstore.dispatch({ name: 'chris' });\nstore.dispatch({ address: 'London' });\n```", "```js\n// example reducer\n\nfunction countReducer(state = 0, action) {\n  switch(action.type) {\n    case \"INCREMENT\":\n      return state + 1;\n    default:\n      return state;\n  }\n}\n\nlet state = countReducer(0, { type: \"INCREMENT\" });\n// 1\nstate = countReducer(state, { type: \"INCREMENT\" });\n// 2\n\n```", "```js\n{\n  counter: 1\n  products : []\n}\n```", "```js\n// calculate state\nfunction calcState(state, action) {\n  return {\n    counter: counterReducer(state.counter, action),\n    products: productsReducer(state.products, action)\n  }\n}\n```", "```js\n// NGRX-light/storeVI.js\n\nconst Rx = require('rxjs');\n\nfunction counterReducer(state = 0, action) {\n  switch(action.type) {\n    case \"INCREMENT\":\n      return state + 1;\n    default:\n      return state;\n  }\n}\n\nfunction productsReducer(state = [], action) {\n  switch(action.type) {\n    case 'ADD_PRODUCT':\n      return [ ...state, Object.assign({}, action.payload) ]\n    default:\n      return state;\n  }\n}\n\nclass Store extends Rx.BehaviorSubject {\n  constructor() {\n    super({ counter: 0, products: [] });\n    this.dispatcher = new Rx.Subject();\n    this.state = {};\n    this.dispatcher\n      .scan((acc, curr) => ({ ...acc, ...curr }))\n      .subscribe(data => this.next(data));\n  }\n\n  calcState(state, action) {\n return {\n      counter: counterReducer(state.counter, action),\n products: productsReducer(state.products, action)\n }\n }\n\n  dispatch(action) {\n    const newState = this.calcState(this.value, action);\n    this.dispatcher.next(newState);\n  }\n}\n\nconst store = new Store();\nstore.subscribe(data => console.log('store', data));\n\nstore.dispatch({ type: 'INCREMENT' });\nstore.dispatch({ type: 'INCREMENT' });\nstore.dispatch({ type: 'ADD_PRODUCT', payload: { id: 1, name: 'Yoda' } });\n\n```", "```js\n// NGRX-light/storeVII.js\n\nconst Rx = require('rxjs');\n\nfunction counterReducer(state = 0, action) {\n  switch(action.type) {\n    case \"INCREMENT\":\n      return state + 1;\n    default:\n      return state;\n  }\n}\n\nfunction productsReducer(state = [], action) {\n  switch(action.type) {\n    case 'ADD_PRODUCT':\n      return [ ...state, Object.assign({}, action.payload) ]\n    default:\n      return state;\n  }\n}\n\nclass Store extends Rx.BehaviorSubject {\n  constructor() {\n    super({ counter: 0, products: [] });\n    this.dispatcher = new Rx.Subject();\n    this.state = {};\n    this.dispatcher\n      .scan((acc, curr) => ({ ...acc, ...curr }))\n      .subscribe(data => this.next(data));\n  }\n\n  calcState(state, action) {\n    return {\n      counter: counterReducer(state.counter, action),\n      products: productsReducer(state.products, action)\n    }\n  } \n\n  dispatch(action) {\n    const newState = this.calcState(this.value, action);\n    this.dispatcher.next(newState);\n  }\n\n  select(slice) {\n return this.map(state => state[slice]);\n  }\n}\n\nconst store = new Store();\nstore\n  .select('products')\n  .subscribe(data => console.log('store using select', data));\n\n// store using select, []\n// store using select, [{ id: 1, name: 'Yoda' }]\n\nstore.subscribe(data => console.log('store', data));\nstore.dispatch({ type: 'INCREMENT' });\nstore.dispatch({ type: 'INCREMENT' });\n// store 0\n// store 1\n\nstore.dispatch({ type: 'ADD_PRODUCT', payload: { id: 1, name: 'Yoda' } });\n```", "```js\n// excerpt from the Store class\nselect(fn) {\n  return this.map(fn);\n}\n\n// usage - if there were such a state as 'state.products.list'\nstore\n  .select(state => state.products.list);\n\n```", "```js\n// pseudo code\n\nconst store = new Store();\n\nstore.effect( async(dispatch) => {\n  const products = await getProducts();\n  dispatch({ type: 'LOAD_PRODUCTS', payload: products });\n})\n```", "```js\n// NGRX-light/storeVIII.js\n\nconst Rx = require('rxjs');\n\nfunction counterReducer(state = 0, action) {\n  switch(action.type) {\n    case \"INCREMENT\":\n      return state + 1;\n    default:\n      return state;\n  }\n}\n\nfunction productsReducer(state = [], action) {\n  switch(action.type) {\n    case 'ADD_PRODUCT':\n      return [ ...state, Object.assign({}, action.payload) ];\n    case 'LOAD_PRODUCTS':\n      return action.payload.map(p => Object.assign({}, p));\n    default:\n      return state;\n  }\n}\n\nclass Store extends Rx.BehaviorSubject {\n  constructor() {\n    super({ counter: 0, products: [] });\n    this.dispatcher = new Rx.Subject();\n    this.state = {};\n    this.dispatcher\n      .scan((acc, curr) => ({ ...acc, ...curr }))\n      .subscribe(data => this.next(data));\n  }\n\n  calcState(state, action) {\n    return {\n      counter: counterReducer(state.counter, action),\n      products: productsReducer(state.products, action)\n    }\n  }\n\n  dispatch(action) {\n    const newState = this.calcState(this.value, action);\n    this.dispatcher.next(newState);\n  }\n\n  select(slice) {\n    return this.map(state => state[slice]);\n  }\n\n  effect(fn) {\n fn(this.dispatch.bind(this));\n  }\n}\n\nconst store = new Store();\nstore\n  .select('products')\n  .subscribe(data => console.log('store using select', data));\n\nstore.subscribe(data => console.log('store', data));\nstore.dispatch({ type: 'INCREMENT' });\nstore.dispatch({ type: 'INCREMENT' });\nstore.dispatch({ type: 'ADD_PRODUCT', payload: { id: 1, name: 'Yoda' } });\n\nconst getProducts = () => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve([{ id: 1, name: \"Vader\" }]);\n    }, 3000);\n  });\n}\n\nstore.effect(async(dispatch) => {\n  const products = await getProducts();\n  dispatch({ type: 'LOAD_PRODUCTS', payload: products });\n});\n```", "```js\nnpm install @ngrx/effects --save\nnpm install @ngrx/entity --save\nnpm install @ngrx/store --save\nnpm install @ngrx/store-devtools\n```", "```js\nnpm install @ngrx/schematics --save-dev\n```", "```js\nng generate <what> <name>\n```", "```js\nng generate action jedis\n```", "```js\n// jedis.actions.ts\n\nimport { Action } from '@ngrx/store';\n\nexport enum JedisActionTypes {\n  JedisAction = '[Jedis] Action'\n}\n\nexport class Jedis implements Action {\n  readonly type = JediActionTypes.JediAction;\n}\n\nexport type JediActions = Jedi;\n```", "```js\nng generate container jedis\n```", "```js\n// jedis.component.ts\n\nimport { Component, OnInit } from '@angular/core';\n@Component({\n  selector: 'app-jedis',\n  templateUrl: './jedis.component.html',\n  styleUrls: ['./jedis.component.css']\n})\nexport class JedisComponent implements OnInit {\n  constructor(private store: Store<any>) { } }\n  ngOnInit() {}\n}\n```", "```js\nng generate effect jedis\n```", "```js\nimport { Injectable } from '@angular/core';\nimport { Actions, Effect } from '@ngrx/effects';\n\n@Injectable()\nexport class JedisEffects {\n  constructor(private actions$: Actions) {}\n}\n\n```", "```js\nng generate entity product\n```", "```js\nng generate feature category\n```", "```js\nng generate reducer travel\n```", "```js\nng generate module country\nng generate store country\n```", "```js\nng generate store State --root --module app.module.ts\n```"]