- en: Chapter 7. Build Your Own jQuery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章. 制作自己的 jQuery
- en: With the 1.8 release of jQuery, something new was introduced that the development
    community as a whole had been wanting for a while – the ability to build custom
    versions of jQuery that contained only the functionality that was required for
    a given task.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 jQuery 1.8 发布中，引入了一项全体设计希望已久的新功能-能够构建只包含特定任务所需功能的自定义版本的 jQuery。
- en: Mission Briefing
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务简报
- en: In this project we'll set up the environment we need in order to use jQuery's
    build tool. We'll see what other software we need to use, how to run the build
    tool itself, and what we can expect as output of the build tool.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将设置我们需要使用 jQuery 构建工具的环境。我们将看到我们需要使用的其他软件，如何运行构建工具本身，以及我们可以期望构建工具的输出。
- en: Why Is It Awesome?
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么它很棒？
- en: While it's fairly common for someone to say that they use jQuery in every site
    they build (this is usually the case for me), I would expect it much rarer for
    someone to say that they use the exact same jQuery methods in every project, or
    that they use a very large selection of the available methods and functionality
    that it offers.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有人通常会说他们在构建的每个网站中都使用 jQuery（对我来说通常是这样），但我期望很少有人会说他们在每个项目中都使用完全相同的 jQuery 方法，或者他们使用了大量可用方法和功能。
- en: The need to reduce file size as aggressively as possible to cater for the mobile
    space, and the rise of micro-frameworks such as **Zepto** for example, which delivers
    a lot of jQuery functionality at a much-reduced size, have pushed jQuery to provide
    a way of slimming down.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 减少文件大小以满足移动空间的需求，以及诸如 **Zepto** 等微框架的兴起，它以更小的尺寸提供了大量 jQuery 功能，这促使 jQuery 提供了一种精简大小的方法。
- en: As of jQuery 1.8, we can now use the official jQuery build tool to build our
    own custom version of the library, allowing us to minimize the size of the library
    by choosing only the functionality we require.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 从 jQuery 1.8 开始，我们现在可以使用官方 jQuery 构建工具来构建我们自己的定制版本的库，从而只选择我们所需的功能来最小化库的大小。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on Zepto, see [http://zeptojs.com/](http://zeptojs.com/).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Zepto 的更多信息，请查看 [http://zeptojs.com/](http://zeptojs.com).
- en: Your Hotshot Objectives
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你的顶尖目标
- en: 'To successfully conclude this project we''ll need to complete the following
    tasks:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要成功完成这个项目，我们需要完成以下任务：
- en: Installing Git and Make
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Git 和 Make
- en: Installing Node.js
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Node.js
- en: Installing Grunt.js
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Grunt.js
- en: Configuring the environment
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置环境
- en: Building a custom jQuery
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建自定义 jQuery
- en: Running unit tests with QUnit
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 QUnit 单元测试
- en: Mission Checklist
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务清单
- en: We'll be using Node.js to run the build tool, so you should download a copy
    of this now. The Node website ([http://nodejs.org/download/](http://nodejs.org/download/))
    has an installer for both 64 and 32-bit versions of Windows, as well as a Mac
    OS X installer. It also features binaries for Mac OS X, Linux, and SunOS. Download
    and install the appropriate version for your operating system.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Node.js 来运行构建工具，所以你现在应该下载一个副本。Node 网站（[http://nodejs.org/download/](http://nodejs.org/download/)）提供了
    64 位和 32 位 Windows 的安装程序，以及 Mac OS X 的安装程序。它还为 Mac OS X、Linux 和 SunOS 提供了二进制文件。下载并安装适合你的操作系统的版本。
- en: The official build tool for jQuery (although it can do much more besides build
    jQuery) is **Grunt.js,** written by *Ben Alman*. We don't need to download this
    as it's installed via the **Node Package Manager** (**NPM**). We'll look at this
    process in detail later in the project.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 的官方构建工具（尽管它除了构建 jQuery 之外还可以做很多其他事情）是 **Grunt.js**，由 *Ben Alman* 编写。我们不需要下载它，因为它是通过
    **Node Package Manager** （**NPM**）安装的。我们将在项目后面详细看这个过程。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on Grunt.js, visit the official site at [http://gruntjs.com](http://gruntjs.com).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Grunt.js 的信息，请访问官方网站 [http://gruntjs.com](http://gruntjs.com).
- en: First of all we need to set up a local working area. We can create a folder
    in our root project folder called `jquery-source`. This is where we'll store the
    jQuery source when we clone the jQuery Github repository, and also where Grunt
    will build the final version of jQuery.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要设置一个本地工作区。我们可以在根项目文件夹中创建一个名为 `jquery-source` 的文件夹。当我们克隆 jQuery Github
    仓库时，我们会将 jQuery 源代码存储在这里，并且 Grunt 也会在这里构建最终版本的 jQuery。
- en: Installing Git and Make
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Git 和 Make
- en: The first thing we need to install is Git, which we'll need in order to clone
    the jQuery source from the Github repository to our own computer so that we can
    work with the source files. We also need something called Make, but we only need
    to actually install this on Mac platforms because it gets installed automatically
    on Windows when Git is installed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装的第一件事是Git，我们需要它来从Github存储库克隆jQuery源代码到我们自己的计算机，这样我们就可以处理源文件。我们还需要一个叫做Make的东西，但我们只需要在Mac平台上真正安装它，因为在Windows上安装Git时它会自动安装。
- en: Tip
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: As the file we'll create will be for our own use only and we don't want to contribute
    to jQuery by pushing code back to the repository, we don't need to worry about
    having an account set up on Github.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们将创建的文件仅供我们自己使用，并且我们不想通过将代码推送回存储库来为jQuery做出贡献，所以我们不需要担心在Github上创建账户。
- en: Prepare for Lift Off
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备起飞
- en: First we'll need to download the relevant installers for both Git and Make.
    Different applications are required depending on whether you are developing on
    Mac or Windows platforms.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要下载Git和Make的相关安装程序。根据你是在Mac还是Windows平台上开发，需要不同的应用程序。
- en: Mac developers
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mac开发者
- en: Mac users can visit [http://git-scm.com/download/mac](http://git-scm.com/download/mac)
    for Git.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Mac用户可以访问[http://git-scm.com/download/mac](http://git-scm.com/download/mac)获取Git。
- en: Next we can install Make. Mac developers can get this by installing XCode. This
    can be downloaded from [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们可以安装Make。Mac开发者可以通过安装XCode来获取。可以从[https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)下载。
- en: Windows developers
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows开发者
- en: Windows users can install **msysgit**, which can be obtained by visiting [https://code.google.com/p/msysgit/downloads/detail?name=msysGit-fullinstall-1.8.0-preview20121022.exe](https://code.google.com/p/msysgit/downloads/detail?name=msysGit-fullinstall-1.8.0-preview20121022.exe).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户可以安装**msysgit**，可以通过访问[https://code.google.com/p/msysgit/downloads/detail?name=msysGit-fullinstall-1.8.0-preview20121022.exe](https://code.google.com/p/msysgit/downloads/detail?name=msysGit-fullinstall-1.8.0-preview20121022.exe)获取。
- en: Engage Thrusters
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动推进器
- en: Once the installers have downloaded, run them to install the applications. The
    defaults selected by the installers should be fine for the purposes of this mission.
    First we should install Git (or msysgit on Windows).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成安装程序后，运行它们来安装应用程序。安装程序默认选择的设置对这个任务来说应该是合适的。首先我们应该安装Git（或者在Windows上安装msysgit）。
- en: Mac developers
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mac开发者
- en: Mac developers simply need to run the installer for Git to install it to the
    system. Once this is complete we can then install XCode. All we need to do is
    run the installer and Make, along with some other tools, will be installed and
    ready.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Mac开发者只需要运行Git的安装程序将其安装到系统中。安装完成后，我们可以安装XCode。我们只需要运行安装程序，Make以及一些其他工具将被安装并准备好。
- en: Windows developers
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows开发者
- en: Once the full installer for msysgit has finished, you should be left with a
    Command Line Interface (CLI) window (entitled MINGW32) indicating that everything
    is ready for you to hack. However, before we can hack, we need to compile Git.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: msysgit的完整安装程序完成后，你应该可以看到一个命令行界面（标题为MINGW32），表明一切准备就绪，你可以开始进行编码。但是，在我们开始编码之前，我们需要编译Git。
- en: 'To do this we need to run a file called `initialize.sh`. In the MINGW32 window,
    `cd` into the `msysgit` directory. If you allowed this to install to the default
    location, you can use the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要运行一个叫做`initialize.sh`的文件。在MINGW32窗口中，`cd`到`msysgit`目录。如果你允许它安装到默认位置，你可以使用以下命令：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once we are in the correct directory, we can then run `initialize.sh` in the
    CLI. Like the installation, this process can take some time, so be patient and
    wait for the CLI to return a flashing cursor at the `$` character.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在正确的目录中，就可以在CLI中运行`initialize.sh`。和安装一样，这个过程可能需要一些时间，所以请耐心等待CLI返回`$`字符的闪烁光标。
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: An Internet connection is required to compile Git in this way.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式编译Git需要互联网连接。
- en: Windows developers will need to ensure that the `Git.exe` and MINGW resources
    can be reached via the system's `PATH` variable. This can be updated by going
    to **Control Panel** | **System** | **Advanced system settings** | **Environment
    variables**.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Windows开发者需要确保`Git.exe`和MINGW资源可以通过系统的`PATH`变量访问。这可以通过转到**控制面板** | **系统** |
    **高级系统设置** | **环境变量**来更新。
- en: 'In the bottom section of the dialog box, double-click on **Path** and add the
    following two paths to the `git.exe` file in the `bin` folder, which is itself
    in a directory inside the `msysgit` folder wherever you chose to install it:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在对话框的底部部分，双击**路径**，并将以下两个路径添加到位于您选择安装位置内的`msysgit`文件夹中的`bin`文件夹中的`git.exe`文件中：
- en: '`;C:\msysgit\msysgit\bin;`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`;C:\msysgit\msysgit\bin;`'
- en: '`C:\msysgit\msysgit\mingw\bin;`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C:\msysgit\msysgit\mingw\bin;`'
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Update the path with caution!**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**谨慎更新路径！**'
- en: You must ensure that the path to `Git.exe` is separated from the rest of the
    Path variables with a semicolon. If the path does not end with a semicolon before
    adding the path to `Git.exe`, make sure you add one. Incorrectly updating your
    path variables can result in system instability and/or loss of data. I have shown
    a semicolon at the start of the previous code sample to illustrate this.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须确保`Git.exe`的路径与其余路径变量之间用分号分隔。如果在添加`Git.exe`路径之前路径不以分号结尾，请确保添加一个。错误地更新路径变量可能导致系统不稳定和/或数据丢失。我在上一个代码示例的开头显示了一个分号，以说明这一点。
- en: Once the path has been updated, we should then be able to use a regular command
    prompt to run Git commands.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 路径更新后，我们应该能够使用常规命令提示符来运行 Git 命令。
- en: Post-installation tasks
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装后的任务
- en: 'In a terminal or Windows Command Prompt (I''ll refer to both simply as the
    CLI from this point on for conciseness) window, we should first `cd` into the
    `jquery-source` folder we created at the start of the project. Depending on where
    your local development folder is, this command will look something like the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端或 Windows 命令提示符（我将两者简称为 CLI 以便简洁起见）窗口中，我们应该首先`cd`进入我们在项目开始时创建的`jquery-source`文件夹。根据您本地开发文件夹的位置不同，此命令看起来会像下面这样：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To clone the jQuery repository, enter the following command in the CLI:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要克隆 jQuery 仓库，请在 CLI 中输入以下命令：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Again, we should see some activity on the CLI before it returns to a flashing
    cursor to indicate that the process is complete.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在 CLI 返回到闪烁的光标以指示进程完成之前，我们应该看到一些活动。
- en: 'Depending on the platform you are developing on, you should see something like
    the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您所开发的平台不同，您应该会看到类似以下截图的内容：
- en: '![Post-installation tasks](img/9106OS_07_03.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![安装后的任务](img/9106OS_07_03.jpg)'
- en: Objective Complete - Mini Debriefing
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成目标 - 迷你总结
- en: We installed Git and then used it to clone the jQuery Github repository in to
    this directory in order to get a fresh version of the jQuery source. If you're
    used to SVN, cloning a repository is conceptually the same as checking out a repository.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们安装了 Git，然后使用它克隆了 jQuery 的 Github 仓库到这个目录，以获取 jQuery 源代码的最新版本。如果您习惯于 SVN，克隆仓库的概念上与检出仓库是相同的。
- en: Again, the syntax of these commands is very similar on Mac and Windows systems,
    but notice how we need to escape the backslashes in the path when using Windows.
    Once this is complete, we should end up with a new directory inside our `jquery-source`
    directory called `jquery`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，这些命令的语法在 Mac 和 Windows 系统上非常相似，但请注意，在 Windows 中使用路径时需要转义反斜杠。完成此操作后，我们应该会在`jquery-source`目录内看到一个名为`jquery`的新目录。
- en: 'If we go into this directory, there are some more directories including:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们进入此目录，会看到一些更多的目录，包括：
- en: '`build`: This directory is used by the build tool to build jQuery'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build`：此目录由构建工具用于构建 jQuery'
- en: '`speed`: This directory contains benchmarking tests'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`speed`：此目录包含基准测试'
- en: '`src`: This directory contains all of the individual source files that are
    compiled together to make jQuery'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`：此目录包含编译为 jQuery 的所有单个源文件'
- en: '`Test`: This directory contains all of the unit tests for jQuery'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`测试`：此目录包含 jQuery 的所有单元测试'
- en: 'It also has a range of various files, including:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 它还包含一系列各种文件，包括：
- en: Licensing and documentation, including jQuery's authors and a guide to contributing
    to the project
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 授权和文档，包括 jQuery 的作者和项目贡献指南
- en: Git-specific files such as `.gitignore` and `.gitmodules`
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git 特定文件，如`.gitignore`和`.gitmodules`
- en: Grunt-specific files such as `Gruntfile.js`
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Grunt 特定文件，如 `Gruntfile.js`
- en: JSHint for testing and code-quality purposes
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSHint 用于测试和代码质量目的
- en: Make is not something we need to use directly, but Grunt will use it when we
    build the jQuery source, so it needs to be present on our system.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要直接使用 Make，但是当我们构建 jQuery 源代码时，Grunt 会使用它，因此它需要存在于我们的系统中。
- en: Installing Node.js
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Node.js
- en: Node.js is a platform for running server-side applications built with JavaScript.
    It is trivial to create a web-server instance, for example, that receives and
    responds to HTTP requests using callback functions.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 是一个用 JavaScript 构建的运行服务器端应用程序的平台。例如，可以轻松创建一个接收和响应 HTTP 请求的网络服务器实例，使用回调函数。
- en: Server-side JS isn't exactly the same as its more familiar client-side counterpart,
    but you'll find a lot of similarities in the same comfortable syntax that you
    know and love. We won't actually be writing any server-side JavaScript in this
    project – all we need Node for is to run the Grunt.js build tool.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端 JS 与更熟悉的客户端对应物并不完全相同，但在您所熟悉和喜爱的舒适语法中，您会发现许多相似之处。在这个项目中，我们实际上不会编写任何服务器端
    JavaScript — 我们只需要 Node 来运行 Grunt.js 构建工具。
- en: Prepare for Lift Off
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为起飞做准备
- en: To get the appropriate installer for your platform, visit the Node.js website
    at [http://nodejs.org](http://nodejs.org) and hit the download button. The correct
    installer for your platform, if supported, should be auto-detected.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取适用于您平台的适当安装程序，请访问 Node.js 网站 [http://nodejs.org](http://nodejs.org) 并点击下载按钮。如果支持的话，应该会自动检测到适合您平台的正确安装程序。
- en: Engage Thrusters
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动推进器
- en: Installing Node is a straightforward procedure on either the Windows or Mac
    platforms as there are installers for both. This task will include running the
    installer, which is obviously simple, and testing the installation using a CLI.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 或 Mac 平台上，安装 Node 非常简单，因为两者都有安装程序。此任务将包括运行安装程序，这显然是简单的，并使用 CLI 测试安装。
- en: On Windows or Mac platforms, run the installer and it will guide you through
    the installation process. I have found that the default options are fine in most
    cases. As before, we also need to update the `Path` variable to include Node and
    Node's package manager NPM. The paths to these directories will differ between
    platforms.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 或 Mac 平台上，运行安装程序，它将指导您完成安装过程。我发现在大多数情况下默认选项都很好。与之前一样，我们还需要更新`Path`变量以包括
    Node 和 Node 的包管理器 NPM。这些目录的路径在不同平台上会有所不同。
- en: Mac
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mac
- en: Mac developers should check that the `$PATH` variable contains a reference to
    `usr/local/bin`. I found that this was already in my `$PATH`, but if you do find
    that it's not present, you should add it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Mac 开发者应检查 `$PATH` 变量是否包含对 `usr/local/bin` 的引用。我发现这已经在我的 `$PATH` 中了，但是如果您发现它不存在，您应该添加它。
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on updating your `$PATH` variable, see [http://www.tech-recipes.com/rx/2621/os_x_change_path_environment_variable/](http://www.tech-recipes.com/rx/2621/os_x_change_path_environment_variable/).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更新 `$PATH` 变量的更多信息，请参阅 [http://www.tech-recipes.com/rx/2621/os_x_change_path_environment_variable/](http://www.tech-recipes.com/rx/2621/os_x_change_path_environment_variable/)。
- en: Windows
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows
- en: 'Windows developers will need to update the `Path` variable, in the same way
    as before, with the following paths:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 开发者需要像以前一样更新`Path`变量，其中包括以下路径：
- en: '`C:\Program Files\nodejs\;`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C:\Program Files\nodejs\;`'
- en: '`C:\Users\Desktop\AppData\Roaming\npm;`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C:\Users\Desktop\AppData\Roaming\npm;`'
- en: Note
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Windows developers may find that the `Path` variable already contains an entry
    for Node so may just need to add the path to NPM.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 开发者可能会发现 `Path` 变量已经包含了一个 Node 条目，因此可能只需要添加 NPM 的路径。
- en: Objective Complete - Mini Debriefing
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标完成 - 迷你总结
- en: 'Once Node is installed, we will need to use a CLI to interact with it. To verify
    Node has installed correctly, type the following command into the CLI:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 Node，我们就需要使用 CLI 与其进行交互。要验证 Node 是否已正确安装，请在 CLI 中键入以下命令：
- en: '[PRE3]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The CLI should report the version in use, as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 应该报告使用的版本，如下所示：
- en: '![Objective Complete - Mini Debriefing](img/9106OS_07_04.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![目标完成 - 迷你总结](img/9106OS_07_04.jpg)'
- en: 'We can test NPM in the same way by running the following command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令来测试 NPM：
- en: '[PRE4]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Installing Grunt.js
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Grunt.js
- en: In this task we need to install Grunt.js, which is extremely quick and easy
    to do, just like the Node installation. We don't even need to download anything
    manually and as before the same commands should work on either Mac or Windows
    systems, with only very minor adjustments.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们需要安装 Grunt.js，这个过程非常快速且简单，就像安装 Node 一样。我们甚至不需要手动下载任何东西，就像以前一样，相同的命令应该在
    Mac 或 Windows 系统上都能工作，只需要非常小的调整。
- en: Engage Thrusters
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动推进器
- en: 'We need to use **Node Package Manager** **NPM** to install it, and can do this
    by running the following command (note that Node itself must not be running):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用**Node 包管理器 NPM**来安装它，可以通过运行以下命令来执行（注意，不能运行 Node 本身）：
- en: '[PRE5]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Mac users may need to use `superuser do` at the start of the command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Mac 用户可能需要在命令开头使用 `superuser do`：
- en: '[PRE6]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Be prepared to wait a few minutes. Again, we should see a lot of activity as
    the resources Grunt needs are downloaded and installed. The prompt will return
    to a flashing cursor once the installation is complete. The CLI should appear
    like the following screenshot, depending on which platform you are developing
    on:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 准备等待几分钟。同样，当 Grunt 需要的资源被下载和安装时，我们应该会看到大量活动。一旦安装完成，提示符将返回到闪烁的光标。CLI 应该会像以下截图一样显示，具体取决于您正在开发的平台：
- en: '![Engage Thrusters](img/9106OS_07_06.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![启动推进器](img/9106OS_07_06.jpg)'
- en: Objective Complete - Mini Debriefing
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成目标 - 迷你总结
- en: If all goes according to plan (which, unless you have problems with your system,
    it generally should), you should see a lot of activity in the CLI while Grunt
    and its dependencies are downloaded and installed globally via NPM, and once that
    finishes Grunt will be installed and ready to use.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利（通常情况下应该如此，除非您的系统出现问题），那么在 Grunt 及其依赖项通过 NPM 全局下载和安装完成时，CLI 中将会看到大量活动，一旦完成，Grunt
    将被安装并准备就绪。
- en: Tip
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: An Internet connection is required for packages to be downloaded and installed
    automatically using NPM.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 需要互联网连接才能使用 NPM 自动下载和安装软件包。
- en: 'To verify that Grunt has installed correctly, we can type the following command
    into the CLI:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证 Grunt 是否已正确安装，我们可以在 CLI 中输入以下命令：
- en: '[PRE7]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will output the current version of Grunt and should work from any directory
    as Grunt was installed globally.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出当前 Grunt 的版本，并且应该可以从任何目录中运行，因为 Grunt 已经全局安装了。
- en: Classified Intel
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机密情报
- en: 'As well as building custom versions of jQuery, Grunt can also be used to create
    a few different common projects. We start by choosing one of the following project
    types:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 除了构建自定义版本的 jQuery 外，Grunt 还可以用于创建几种不同的常见项目。我们首先选择以下项目类型之一：
- en: '`gruntfile`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gruntfile`'
- en: '`commonjs`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`commonjs`'
- en: '`jquery`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery`'
- en: '`node`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node`'
- en: We can run the built-in `init` task and specify one of these projects, and Grunt
    will go ahead and set up a skeleton project containing resources commonly used
    with that project.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以运行内置的 `init` 任务，并指定其中一个项目，Grunt 将继续设置包含该项目常用资源的骨架项目。
- en: For example, running the `jquery init` task will set up a working directory
    for creating a jQuery plugin. Inside the directory, Grunt will create folders
    for the source script files and the unit tests, as well as create a range of files
    including a `package.json` file.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，运行 `jquery init` 任务将设置一个工作目录，用于创建一个 jQuery 插件。在该目录中，Grunt 将创建源脚本文件和单元测试的文件夹，以及创建一系列文件，包括一个
    `package.json` 文件。
- en: It is likely that at some point all new jQuery plugins will need to be structured
    in the way that Grunt structures the working directory when creating this project
    type, so Grunt will become an invaluable, time-saving tool for any jQuery plugin
    developer.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能在某个时候，所有新的 jQuery 插件都需要按照 Grunt 创建此项目类型时的方式来构建结构，因此，对于任何 jQuery 插件开发者来说，Grunt
    将成为一款不可或缺的、节省时间的工具。
- en: Configuring the environment
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置环境
- en: There're just a couple of things left we need to do before we're ready to build
    our own version of jQuery. We can also test our installation and configuration
    by building the full version of jQuery in order to test that everything is working
    as it should.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们准备构建自己的 jQuery 版本之前，还有一些事情需要做。我们还可以通过构建 jQuery 的完整版本来测试我们的安装和配置，以确保一切都按预期工作。
- en: Prepare for Lift Off
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备起飞
- en: We'll need to install some additional Grunt dependencies so that we can create
    the jQuery Script files using the source files that we cloned from Github. There
    are also a range of NPM modules that the project uses, which also need to be installed.
    Fortunately the NPM can install everything for us automatically.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装一些额外的 Grunt 依赖项，以便我们可以使用从 Github 克隆的源文件来创建 jQuery 脚本文件。项目还使用了一系列 NPM 模块，这些模块也需要安装。幸运的是，NPM
    可以自动为我们安装所有内容。
- en: Engage Thrusters
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动推进器
- en: 'Before we can build the jQuery source, we need to install some additional Grunt
    dependencies in the `jquery` source folder. We can do this using NPM and so can
    enter the following command into the CLI:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建 jQuery 源码之前，我们需要在 `jquery` 源码文件夹中安装一些额外的 Grunt 依赖项。我们可以使用 NPM 来做到这一点，因此可以在
    CLI 中输入以下命令：
- en: '[PRE8]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure you have already used the `cd` command to navigate to the `jquery`
    directory before running the `install` command.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行 `install` 命令之前，请确保您已经使用 `cd` 命令导航到 `jquery` 目录。
- en: 'There should be a lot of activity in the CLI after running the `install` command,
    and by the end of the process, the CLI should appear something like the following
    screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行 `install` 命令后，CLI 应该会有很多活动，而在进程结束时，CLI 应该会显示类似以下截图的内容：
- en: '![Engage Thrusters](img/9106OS_07_05.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![启动推进器](img/9106OS_07_05.jpg)'
- en: 'To test that everything is working together as it should, we can build the
    full version of jQuery. Simply run the `grunt` command in the CLI:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试一切是否按预期进行，我们可以构建 jQuery 的完整版本。只需在 CLI 中运行 `grunt` 命令：
- en: '[PRE9]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you get any errors or warnings at this point, something has not been installed
    or configured correctly. There could be any number of reasons why the process
    has failed, so the best thing to do is to uninstall everything we have installed,
    and start the process again, ensuring that all steps are followed to the letter.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此时出现任何错误或警告，说明某些内容未安装或配置正确。失败的原因可能有很多，所以最好的做法是卸载我们安装的所有内容，然后重新开始整个过程，确保所有步骤都严格按照要求进行。
- en: 'Again, we should see a lot of activity on the CLI to indicate that things are
    happening:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们应该会在 CLI 上看到很多活动，以表明事情正在发生：
- en: '![Engage Thrusters](img/9106OS_07_01.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![启动推进器](img/9106OS_07_01.jpg)'
- en: Objective Complete - Mini Debriefing
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标完成 - 迷你总结
- en: Once the install process has completed, we should find that the Node dependencies
    have been installed into a directory within the `jquery` directory called `node_modules`.
    Within this folder are any additional files that Grunt needs for this specific
    project.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程完成后，我们应该会发现 Node 依赖项已经安装到 `jquery` 目录中的一个名为 `node_modules` 的目录中。在这个文件夹中是
    Grunt 针对这个特定项目所需要的任何其他文件。
- en: 'To test everything, we then ran the default build task for jQuery using the
    `grunt` command. This task will do the following things:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试一切，我们然后使用 `grunt` 命令运行 jQuery 的默认构建任务。此任务将执行以下操作：
- en: Read all of the jQuery source files
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读所有 jQuery 源文件
- en: Create a `/dist` directory for the output of the task
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为任务的输出创建一个 `/dist` 目录
- en: Build the `jquery.js` distribution file
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 `jquery.js` 分发文件
- en: Lint the distribution file with `jshint`
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `jshint` 对分发文件进行代码检查
- en: Run the units tests
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行单元测试
- en: Build a source map of the distribution file
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建分发文件的源映射
- en: Build the `jquery.min.js` distribution file
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 `jquery.min.js` 分发文件
- en: The script files should be 230 KB for the full file and 81 KB for the `.min`
    file, although these figures may differ as the jQuery version number increases.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本文件应该是完整文件 230 KB，`.min` 文件为 81 KB，尽管随着 jQuery 版本号的增加，这些数字可能会有所不同。
- en: Building a custom jQuery
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建自定义 jQuery
- en: In this task we'll build a custom version of jQuery, which will not consist
    of all of the different modules that make up the "full" version of jQuery combined
    into the single file which we would normally download from the jQuery site, just
    like the files we built at the end of the last task, instead it will contain only
    the core modules.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们将构建一个自定义版本的 jQuery，它不会包含构成 "完整" jQuery 的所有不同模块，这些模块会合并成一个文件，通常我们从 jQuery
    站点下载，就像上一个任务结束时我们构建的文件一样，而是仅包含核心模块。
- en: Engage Thrusters
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动推进器
- en: 'Now we can build a custom version of jQuery. To build a barebones version of
    jQuery, omitting all of the non-core components, we can enter the following command
    into the CLI:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '现在我们可以构建一个自定义版本的 jQuery。要构建一个精简版的 jQuery，省略所有非核心组件，我们可以在 CLI 中输入以下命令： '
- en: '[PRE10]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Objective Complete - Mini Debriefing
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标完成 - 迷你总结
- en: Once we have the source and have configured our local environment, we are able
    to build a custom version of jQuery containing only the core components and omitting
    all of the optional components.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们拥有源代码并配置好本地环境，我们就能够构建一个自定义版本的 jQuery，只包含核心组件，而省略了所有可选组件。
- en: In this case we've excluded all of the optional components, but we could exclude
    any one of them, or any combination of them to produce a script file that is only
    as large as it needs to be.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们排除了所有可选组件，但我们可以排除其中任何一个，或任意组合它们，以生成一个仅仅尽可能大的脚本文件。
- en: If we check the `/dist` directory at this point, we should find now that the
    full-fat script file is now 159 KB, while the `.min` version is just 57 KB, saving
    us approximately 30 percent of the file size; not bad for a few minutes work!
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此时检查 `/dist` 目录，我们应该会发现完整的脚本文件现在是 159 KB，而 `.min` 版本只有 57 KB，大约节省了文件大小的 30%；对于几分钟的工作来说，这还不错！
- en: Note
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Changes in the functionality or scope of your project may necessitate that the
    source file be rebuilt and previously excluded modules included. Once excluded,
    optional modules cannot be added to the built files without rebuilding.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 项目功能或范围的变化可能需要重新构建源文件并包括以前排除的模块。一旦排除，就无法将可选模块添加到构建的文件中而不重新构建。
- en: Classified Intel
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机密情报
- en: As jQuery evolves, especially once the 2.0 milestone is passed, more and more
    of jQuery's components will be exposed to the build tool as optional components,
    so that it will become possible to exclude a wider portion of the library.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 jQuery 的发展，特别是在 2.0 里程碑之后，越来越多的 jQuery 组件将被公开到构建工具作为可选组件，因此将有可能排除更广泛的库部分。
- en: While at the time of writing the savings we make in file size may well be offset
    by the fact that the majority of our visitors won't have our custom version of
    jQuery in their cache and will therefore have to download it, there may come a
    time when we are able to shrink the size of the file so much that it will still
    be more efficient to download our super-light script file than it is to load the
    full source from the cache.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在撰写时我们节省的文件大小可能会被我们的大多数访问者不会在其缓存中拥有我们的自定义版本的 jQuery 而需要下载的事实所抵消，但可能会有一天我们能够将文件大小缩小到这样的程度，以至于下载我们的超轻量级脚本文件仍然比从缓存中加载完整源文件更有效率。
- en: Running unit tests with QUnit
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 QUnit 运行单元测试
- en: QUnit is the official test suite for jQuery and is included in the source that
    we cloned from Git earlier in the project. If we take a look in the test folder
    inside the `jquery` folder, we should find that there are a lot of unit tests
    written to test the different components that make jQuery.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: QUnit 是 jQuery 的官方测试套件，并包含在我们在项目早期从 Git 克隆的源代码中。如果我们在`jquery`文件夹内的测试文件夹中查找，我们应该会发现有很多单元测试，用于测试构成
    jQuery 的不同组件。
- en: We can run these tests against the individual components of jQuery in order
    to look at the environment that QUnit needs, and to see how easy testing JavaScript
    files using it can be. For this task we'll need to install a web server and PHP.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以针对 jQuery 的各个组件运行这些测试，以查看 QUnit 需要的环境，并查看使用它测试 JavaScript 文件有多容易。为此任务，我们需要安装一个
    web 服务器和 PHP。
- en: Note
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on QUnit, see the documentation at [http://qunitjs.com](http://qunitjs.com).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 QUnit 的更多信息，请参阅[http://qunitjs.com](http://qunitjs.com)上的文档。
- en: Prepare for Lift Off
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为起飞做好准备
- en: Mac developers should already have everything required in order to run QUnit
    through a web server, because Mac computers come with Apache and PHP already installed.
    Windows developers will probably have some setup to do however.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Mac 开发者应该已经拥有运行 QUnit 所需的一切，因为 Mac 计算机已经预装了 Apache 和 PHP。然而，Windows 开发者可能需要做一些设置。
- en: There are two options for the web server in this case, Apache or IIS. Both support
    PHP. Those developers wishing to use Apache can install something like **WAMP**
    (**Windows Apache Mysql PHP**) to have Apache installed and configured, and MySQL
    and PHP installed as modules.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，web 服务器有两个选择，Apache 或者 IIS。两者都支持 PHP。那些希望使用 Apache 的开发者可以安装像**WAMP**（**Windows
    Apache Mysql PHP**）这样的东西，以便安装和配置 Apache，并将 MySQL 和 PHP 安装为模块。
- en: To download and install WAMP, visit the **Download** section of the Wamp Server
    website ([http://www.wampserver.com/en/](http://www.wampserver.com/en/)).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载并安装 WAMP，请访问 Wamp Server 网站的**下载**部分（[http://www.wampserver.com/en/](http://www.wampserver.com/en/)）。
- en: Pick the appropriate installer for your platform and run it. This should install
    and configure everything necessary.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 选择适合您平台的安装程序并运行它。这应该会安装和配置一切必要的内容。
- en: Those wishing to use IIS can install it via the **Add/Remove Windows Components**
    area of the **Programs and Features** page in the control panel (the Windows installation
    CD will be required in this case), or using the **Web Platform Installer** (**WPI**),
    which can be downloaded from [http://www.microsoft.com/web/downloads/platform.aspx](http://www.microsoft.com/web/downloads/platform.aspx).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 希望使用 IIS 的人可以通过控制面板中的**程序和功能**页面的**添加/删除 Windows 组件**区域安装它（在这种情况下需要 Windows
    安装光盘），或者使用**Web 平台安装程序**（**WPI**），可以从[http://www.microsoft.com/web/downloads/platform.aspx](http://www.microsoft.com/web/downloads/platform.aspx)下载。
- en: Download and run the installer. Once it has launched, search for IIS and let
    the application install it. Once this has installed, search for PHP and install
    that through the WPI also.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并运行安装程序。一旦启动，搜索 IIS 并让应用程序安装它。安装完成后，也通过 WPI 搜索 PHP 并进行安装。
- en: To run QUnit using a web server and PHP, you'll need to either copy the source
    files from the `jquery` directory inside our project folder into the folder used
    by the web server to serve files from, or configure the web server to serve files
    from the `jquery` directory.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 web 服务器和 PHP 运行 QUnit，你需要将项目文件夹内的`jquery`目录中的源文件复制到 web 服务器用于提供文件的目录中，或者配置
    web 服务器以提供`jquery`目录中的文件。
- en: On Apache, we can configure the default directory (the directory from which
    pages are served when requested by the browser) by editing the `httpd.conf` file
    (there should be an entry for this in the Start menu). Read down through the configuration
    file until you find the line for the default directory and change it so that it
    points to the `jquery` directory in your project folder.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Apache 上，我们可以通过编辑`httpd.conf`文件（在开始菜单中应该有一个条目）来配置默认目录（当浏览器请求时用于提供页面的目录）。向下阅读配置文件，直到找到默认目录的行，并更改它，使其指向项目文件夹中的`jquery`目录。
- en: On IIS, we can add a new website using the IIS Manager. Right-click on **Sites**
    in the **Connections** pane at the left and choose **Add Web Site…**. Fill out
    the details in the dialog that opens and we should be good to go.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IIS 上，我们可以使用 IIS 管理器添加一个新网站。在左侧的**连接**窗格中右键单击**站点**，然后选择**添加网站…**。填写打开的对话框中的详细信息，我们就可以开始了。
- en: Engage Thrusters
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动推进器
- en: 'To run the tests, all we need to do is visit the `/test` directory using `localhost:8080`
    (or whichever hostname/port is configured) in a browser:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行测试，我们只需要在浏览器中使用`localhost:8080`（或配置的任何主机名/端口号）访问`/test`目录：
- en: '[PRE11]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The tests should appear as shown in the following screenshot:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应该显示如下屏幕截图所示：
- en: '![Engage Thrusters](img/9106OS_07_02.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![启动推进器](img/9106OS_07_02.jpg)'
- en: Objective Complete - Mini Debriefing
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成目标 - 小结
- en: When the URL for the test suite is visited in a browser, QUnit will run all
    of the unit tests that have been written for jQuery. There are currently over
    6000 tests for the full build of jQuery, and around 4000 tests for a custom build
    with all optional modules excluded.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当在浏览器中访问测试套件的 URL 时，QUnit 将运行为 jQuery 编写的所有单元测试。目前对完整版本的 jQuery 有超过 6000 个测试，对所有可选模块都排除的自定义版本有约
    4000 个测试。
- en: You may find that some of the tests fail. Don't worry, this is normal and the
    reason for it is because the default version of jQuery we get from Git will be
    the latest development version. As I write this, the current version of jQuery
    is 1.8.3, but the version cloned from Git is 2.0.0pre.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现一些测试失败。别担心，这是正常的，原因是我们从 Git 获取的默认 jQuery 版本将是最新的开发版本。就我写作时而言，当前版本的 jQuery
    是 1.8.3，但从 Git 克隆的版本是 2.0.0pre。
- en: 'To fix this, we could switch to the current stable branch and do a build from
    there instead. So if I wanted to get version 1.8.3, I could use the following
    command in the CLI:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个问题，我们可以切换到当前稳定分支，然后从那里进行构建。所以如果我想获取版本 1.8.3，我可以在 CLI 中使用以下命令：
- en: '[PRE12]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We could then build the source again, run QUnit, and all the tests should pass.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以再次构建源码，运行 QUnit，所有测试应该都会通过。
- en: Note
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: After checking out another version of the jQuery source, we'll need to run `npm
    install` in the `jquery` directory to reinstall the node dependencies.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在检出 jQuery 源码的另一个版本后，我们需要在`jquery`目录中运行`npm install`来重新安装节点依赖项。
- en: Classified Intel
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机密情报
- en: Unit testing is a process not always followed religiously by front-end developers,
    but once your applications cross a rough threshold in size and complexity, or
    when working in a team environment, unit testing becomes essential for maintenance,
    so it is best to at least learn the basics.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试并不总是被前端开发者严格遵循，但是一旦你的应用程序跨越了一定的规模和复杂度阈值，或者在团队环境中工作时，单元测试就变得对于维护至关重要，所以至少学习基础知识是最好的。
- en: 'QUnit makes writing unit test for JavaScript easy. It features a simple API
    based around the concept of making assertions that we can prove with simple functions.
    QUnit''s API includes methods we can use to make these assertions including:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: QUnit 使得编写 JavaScript 单元测试变得容易。它采用了围绕着用简单函数证明的断言概念的简单 API。QUnit 的 API 包括我们可以使用的方法来进行这些断言，包括：
- en: '`equal()`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`equal()`'
- en: '`notEqual()`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`notEqual()`'
- en: '`ok()`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ok()`'
- en: This makes it easy to check that a variable is equal to a particular value,
    or the return value of a function does not equal a particular value, and so on.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以轻松检查变量是否等于特定值，或者函数的返回值是否不等于特定值，等等。
- en: 'A test in QUnit is built using the global `test()` method, which accepts two
    arguments; a string describing the test and a function which is invoked to perform
    the test:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在 QUnit 中，使用全局的 `test()` 方法构建测试，该方法接受两个参数：描述测试的字符串和执行测试的函数：
- en: '[PRE13]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Within the function we can then use one or more of the assertions to check
    the result of some operation performed by the method or function we''re testing:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数内部，我们可以使用一个或多个断言来检查我们正在测试的方法或函数执行的操作的结果：
- en: '[PRE14]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `equal()` method checks that the first and second arguments are equal and
    the final argument is a string which describes what we expect to happen.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`equal()` 方法检查第一个和第二个参数是否相等，最后一个参数是描述我们期望发生的情况的字符串。'
- en: Tip
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you open up some of the script files in the `jquery/test/unit` directory,
    it is easy to see how the tests can be structured.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果打开 `jquery/test/unit` 目录中的一些脚本文件，可以很容易地看出如何构造测试。
- en: The documentation on the QUnit site is excellent. It not only describes the
    API clearly and concisely, but it also has a lot of information about the concepts
    of unit testing, and so is a great place to start for those new to unit testing.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: QUnit 网站上的文档非常出色。它不仅清晰简洁地描述了 API，还提供了大量关于单元测试概念的信息，因此对于初学者来说是一个很好的起点。
- en: On the site you can also find the source files required to run QUnit outside
    of Grunt and a HTML template page you can use to run the test suite in a browser.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在该网站上，您还可以找到在 Grunt 之外运行 QUnit 所需的源文件以及一个 HTML 模板页面，您可以在浏览器中运行测试套件。
- en: Mission Accomplished
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务完成
- en: In this mission we've learned not just how to build a custom version of jQuery
    by excluding components that we don't require, and how to run jQuery's unit test
    suite, but also, perhaps more importantly, we've learned how to set up a decent
    build environment for writing clean, lint and error free, application-grade JavaScript.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们不仅学会了如何通过排除不需要的组件来构建自定义版本的 jQuery，以及如何运行 jQuery 的单元测试套件，而且，也许更重要的是，我们学会了如何设置一个体面的构建环境，用于编写干净、无错的应用级
    JavaScript。
- en: You Ready To Go Gung HO? A Hotshot Challenge
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你准备好了吗？挑战来了！
- en: We've learned how to build our own jQuery, and excluded the maximum number of
    components, so at the time of writing, there isn't much more we can do.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了如何构建我们自己的 jQuery，并排除了最大数量的组件，所以在撰写本文时，我们已经没有太多可以做的了。
- en: If you're reading this after version 1.9 of jQuery has been released, there
    may be more components that you can exclude, or other techniques for building
    jQuery, so to really cement your understanding of the build process, build a new
    custom build that also excludes any new optional components.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 jQuery 1.9 版本发布后阅读本文，则可能会有更多的组件可以排除，或者其他构建 jQuery 的技术，因此，为了真正巩固您对构建过程的理解，请构建一个新的自定义构建，也排除任何新的可选组件。
- en: If there aren't any new optional components, I'd recommend you to spend some
    time writing QUnit tests for any custom scripts that you've written. The idea
    is to write a test that replicates a bug. Then you can fix the bug and watch the
    test pass.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有任何新的可选组件，我建议您花些时间为您编写的任何自定义脚本编写 QUnit 测试。其思想是编写一个复制错误的测试。然后您可以修复错误并观察测试通过。
