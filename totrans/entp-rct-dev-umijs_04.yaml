- en: 'Chapter 3: Using Models, Services, and Mocking Data'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main features of a frontend web application is communication with
    the backend. Our application needs to collect user input and send it for processing.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to define data by creating typescript interfaces
    and column definitions for the `ProTable` component. You will learn how to simulate
    the backend logic and data using Umi **mock files**. You will know how to send
    HTTP requests using the **umi-request** library. You will also learn to share
    states and logic between components using **models**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining response types and column types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the opportunity details page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulating data and API responses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending HTTP requests with Umi request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using models for sharing states and logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned how the data flow works in Umi
    and how to organize your projects using the `services` and `models` folders. You'll
    also learn how to use the Umi features to simulate backend logic and send HTTP
    requests. You will also better understand how the `ProTable` component helps us
    to work with batches of data.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this chapter's exercises, you only need a computer with any OS (I
    recommend Ubuntu 20.04 or higher) and the software installed in [*Chapter 1*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014),
    *Environment Setup and Introduction to UmiJS* (Visual Studio Code, Node.js, and
    Yarn).
  prefs: []
  type: TYPE_NORMAL
- en: You can find the complete project in the `Chapter03` folder in the GitHub repository
    available at [https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs).
  prefs: []
  type: TYPE_NORMAL
- en: Defining response types and column types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create TypeScript interfaces to define the data that
    we'll receive from the backend and create column definitions for the `ProTable`
    component on each page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with the interfaces. Follow these steps to create the TypeScript
    interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's first create the folder for definition files. Under the `src` folder,
    create a new folder called `types`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, in the `types` folder, create a new file named `user.d.ts` and add the
    following interface code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `User` interface defines how we'll receive user information from the backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file in the `types` folder named `customer.d.ts` and add the following
    interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Customer` interface defines how we'll receive customer information from
    the backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''ll create two interfaces for the `opportunity` model. Create a new
    file named `opportunity.d.ts` in the `types` folder and add the interfaces as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Opportunity` interface defines how we'll receive the opportunity information
    from the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we imported the `Customer` interface and used it as the type of the
    `customer` property. An opportunity always relates to a specific customer registered
    in the CRM.
  prefs: []
  type: TYPE_NORMAL
- en: The `Activity` interface defines how we receive opportunities activity information
    from the backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the interfaces for the report''s data. In the `types` folder,
    create a new file called `analytics.d.ts` and add the following interfaces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These interfaces define how we'll receive the data for the top opportunities
    chart, the leads by source chart, and the opportunities won/lost by month chart.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's define how the `ProTable` component on each page should display the
    data received from the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Creating column definitions for ProTable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to set how the `ProTable` component will display data by defining the
    columns. I recommend you create column definitions in a separate file whenever
    possible to maintain the component code and keep it clean.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create the column definitions on each page:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with the `columns.tsx` in the `Customers` folder under the `src/pages`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `columns.tsx` file, define the table columns as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that we used the `Customer` interface to declare the data type. Each column
    definition has a `title` and a `dataIndex`. The latter needs to match a property
    of the `Customer` interface for `ProTable` to display that property value in its
    column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a column to display options in a specific row. Add this definition
    to the `columns.tsx` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `options` column, besides the properties we set to not display the column
    in settings and descriptions, we set the behavior of the `render` function. This
    allows you to access the React node, the row entity, the index, and the default
    `ProTable` actions. When the user clicks on this option, the `startEditable` action
    allows them to edit the row.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''ll use the column definitions in the `ProTable` component. Add the
    following line to the `index.tsx` file to import the `columns.tsx` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `ProTable` `columns` property with the imported file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the `Customer` interface to define the data type of the `ProTable`
    columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, let's create the column definitions for the `columns.tsx` in the `Opportunities`
    folder under the `src/pages` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the definitions to the `columns.tsx` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that we used the `Opportunity` interface we created previously to define
    the data type.
  prefs: []
  type: TYPE_NORMAL
- en: In the `status` column, we set the `valueType` property to `select`, and the
    `filters` and `onFilter` properties to `true`, so the user can choose and filter
    the table using this `column` value.
  prefs: []
  type: TYPE_NORMAL
- en: '`status` is a numeric value representing the opportunity''s progress in the
    sales flow. But, we want the user to see the title instead of a number, so let''s
    add the `enumType` property to the `status` column, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The status will appear as tags with different colors and the respective step
    title.
  prefs: []
  type: TYPE_NORMAL
- en: 'The opportunity relates to a customer, and we need to define columns for the
    customer properties. Let''s add these columns as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the only column in the table is the customer's name. In the other
    columns, we set `hideInTable` to `true`. We'll use these columns in the opportunity
    details page that we'll create later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll also add a column to display options to a specific row in this table.
    Add this definition to the `columns.tsx` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `options` column introduces two options â€“ `/opportunity/:id` path.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''ll use the column definitions in the `ProTable` component. Add the
    following line to the `index.tsx` file to import the `columns.tsx` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `ProTable` `columns` property with the imported file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the `Opportunity` interface, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the `Opportunity` interface to define the data type of the `ProTable`
    columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Follow these previous steps to add the column definitions to `ProTable` on
    the home page. We''ll reuse the `columns.tsx` file from the **Opportunities**
    page, so you need to import the file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to add the texts to the multi-language files. Add the texts to
    the `en-US.ts` file in the `src/locales` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We don't need to add these texts to the `pt-BR.ts` file because we already downloaded
    the complete file in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we created the TypeScript interfaces to define all the data
    we'll receive from the backend and the column definitions for the `ProTable` component
    on each page.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's create the opportunity details page, which will show the activities
    on the opportunity.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the opportunity details page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll create the opportunity details page. The opportunity
    details page allows the user to track and register opportunity activities.
  prefs: []
  type: TYPE_NORMAL
- en: The user can also change the opportunity step and edit the opportunity properties
    such as `title` and `expected revenue`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create the opportunity details page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to generate the opportunity detail page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll use a pro component called `ProDescriptions`. It''s similar to the `ProTable`
    component but intended for display properties instead of a batch of data. Run
    the following command to add the `ProDescriptions` component to the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, import these dependencies to the `index.tsx` file in the `OpportunityDetail`
    folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create the `page` component in the `index.tsx` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that we accessed the ID we got from the route parameters. We will use it
    to request a specific opportunity from the backend.
  prefs: []
  type: TYPE_NORMAL
- en: We also used the `ProDescriptions` component to show the opportunity details
    and `ProTable` to list the opportunity activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The opportunity details page will only be accessible in the `opportunities`
    table row option and not accessible in the menu, so let''s add a `header` property
    to the `PageContainer` component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we''ll add the `Steps` component from Ant Design to visually show the
    progress of the opportunity. Add the `Steps` component before the `ProDescriptions`
    component as the first child of the `Card` component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `current` property indicates the progress of the opportunity in the sales
    flow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the route definition to the opportunity details page in the `routes.ts`
    file in the `config` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that we don't add the `name` and `icon` properties because we don't want
    the opportunity details page listed in the side menu.
  prefs: []
  type: TYPE_NORMAL
- en: We are almost finishing building the opportunity details page. Now, we'll use
    the `Activity` interface we created previously to define the columns of the activities
    table.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the activities table columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The opportunity details page lists the activities taken on the opportunity using
    the `ProTable` component, so we also need to define the columns for this table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to define the columns for the `ProTable` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `columns.tsx` in the `OpportunityDetails` folder under
    the `src/pages` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, add the column definitions to the `columns.tsx` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `type` property is a numeric value representing the activity type.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want the user to see a title instead of a numeric value in the `type` column,
    so let''s add the `enumType` property to the `type` column, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, the `type` column will show a tag with the activity type title in different
    colors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''ll use the column definitions in the `ProTable` component. Add the
    following line to the `index.tsx` file to import the `columns.tsx` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define the `ProTable` `columns` property using the imported file, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To finish the opportunity details page, let''s add the texts to the `en-US.ts`
    file in the `src/locales` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this section, we created the opportunity details page. We added a breadcrumb
    to help the user navigate between interfaces and the `Steps` component to show
    the opportunity progress. We also defined the activities table columns by creating
    the `columns.tsx` file.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are ready to learn how to simulate backend logic and API responses by
    creating Umi mock files.
  prefs: []
  type: TYPE_NORMAL
- en: Simulating data and API responses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you'll learn how to create mock files to simulate backend logic
    and API responses.
  prefs: []
  type: TYPE_NORMAL
- en: Mock files are helpful to decouple frontend development from backend development,
    as you don't need the backend ready to make requests and populate your interface
    with data.
  prefs: []
  type: TYPE_NORMAL
- en: 'A mock file is simply a JavaScript object with endpoint route definitions and
    a response to each endpoint. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In this example, when the project is running, we can send an `HTTP` `GET` request
    to http://localhost:8000/api/products to receive the object defined in the mock
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Umi will registry all files with the `.js` and `.ts` extensions inside the `mock`
    folder as mock files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know how mock files work, let''s create mock files for our application.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the project root directory, create a new folder named `mock`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Instead of manually generating the data we want to send, we''ll use a library
    called `faker.js` library delivers various data categories we can choose from,
    such as user profiles, company contacts, and product information. Run the following
    command to install the `faker.js` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s also add the TypeScript declaration files for `faker.js` by running
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the TypeScript declaration files for **express** by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We'll use the `Response` and `Request` interfaces from `express` to define the
    requests and responses in our mock endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Now, in the `mock` folder, create a new file named `customer.ts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `customer.ts` file, create a list of customers, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We used the `faker.js` library to generate random customer properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create the endpoint route definitions in the `customer.ts` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We defined four endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: A mock endpoint to update the customer record (`PUT /api/customer`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mock endpoint to disable the customer record (`PUT /api/customer/disable`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mock endpoint to list all the customers (`/api/customer/list`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mock endpoint to create a new customer record (`POST /api/customer`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that we don't need to define the HTTP method when the endpoint uses the
    method `GET` as in the endpoint to list all customers (`/api/customer/list`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a new file in the `mock` folder named `analytics.ts` and add the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We'll create data to populate the charts on the **Reports** page in this file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `analytics.ts` file, create a new mock endpoint to deliver the top opportunities,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a mock endpoint to deliver the leads by source, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, create a mock endpoint to deliver the opportunities won/lost by month,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we''ll create a mock file for the opportunities. Create a new file in
    the `mock` folder called `opportunity.ts` and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We created two lists, `activities` and `opportunities`, and used the `faker.js`
    library to fill these lists with random data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create these two methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `listOpportunities` method slices the `opportunities` array using the number
    given in the `slice` request query parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The `getOpportunity` method accesses the `opportunity` array item at the index
    position provided by the `opportunityId` request query parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, create the definitions of the mock endpoints, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We defined six endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: A mock endpoint to list all the opportunities (`/api/opportunity/list`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mock endpoint to get an opportunity by ID (`/api/opportunity`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mock endpoint to get opportunity activities (`/api/opportunity/activities`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mock endpoint to create a new opportunity record (`POST /api/opportunity`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mock endpoint to disable an opportunity record (`PUT /api/opportunity/disable`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mock endpoint to update an opportunity record (`PUT /api/opportunity`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we created mock files to provide data for our interfaces using
    the `faker.js` library to generate random data.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we'll learn how to organize our project with the `services` folder and
    send requests to our simulated backend using the umi-request library.
  prefs: []
  type: TYPE_NORMAL
- en: Sending HTTP requests with Umi request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll develop the requests to the backend using the umi-request
    library.
  prefs: []
  type: TYPE_NORMAL
- en: We'll create all the requests in separate files inside the `services` folder
    for each context. This organization helps us clean the components' code and reuses
    the requests over the interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'For sending HTTP requests, we''ll use **Umi request**. This is a library based
    in the **fetch** and **axios** libraries that is simple to use and provides common
    features such as error handling and caching. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The `request` function requires two main parameters â€“ the `URL` parameter where
    we want to send the request, and the `options` parameter in which we can define
    the HTTP method, the request headers, the request parameters, and the request
    body in the `data` property. You can also determine the response type. In this
    example, we described the response type with the `Product` interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to develop the requests:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder named `services` in the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the `services` folder, create a new file named `analytics.ts` and the
    requests, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We created three functions â€“ `getTopOpportunities` to request the top opportunities,
    `getLeadsBySource` to request the leads by source, and `getHistoryByMonth` to
    request the opportunities won/lost by month.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can use the requests response to fill our charts data source on the
    `index.tsx` file in the `pages/Reports` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We created three states using the `useState` React hook to store our charts
    data and utilized the `useEffect` React hook to fill our charts with data when
    the page is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import all the React dependencies and functions from the `analytics.ts` file,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add each state to the `data` property of the corresponding `Chart` component.
    The result should look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.1 â€“ The Reports page charts filled with data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.01_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 â€“ The Reports page charts filled with data
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the requests for the customer page. In the `services` folder,
    create a new file named `customer.ts` and write the requests, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We created four functions â€“ `listCustomers` to list all the customers, `createCustomer`
    to post a new customer record, `disableCustomer` to disable a customer record,
    and `updateCustomer` to update a customer record.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can list a customer in the `ProTable` component on the customer page.
    Import the `listCustomers` function to the `index.tsx` file in the `pages/Customers`
    folder by adding the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the `listCustomers` function to the `request` property of the `ProTable`
    component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 â€“ The Customers list in the ProTable component'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.02_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 â€“ The Customers list in the ProTable component
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we'll create the requests on the opportunity page. Create a new file
    named `opportunity.ts` in the `services` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following functions in the `opportunity.ts` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We created three functions â€“ `listOpportunities` to get all the opportunities,
    `listActivities` to list all the opportunity activities, and `getOpportunity`
    to get an opportunity by ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create the other three functions in the `opportunity.ts` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We created three more functions â€“ `createOpportunity` to create a new opportunity
    record, `disableOpportunity` to disable an opportunity record, and `updateOpportunity`
    to update an opportunity record.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can list an opportunity in the `ProTable` component on the opportunity
    page. Add the following import to the `index.tsx` file in the `pages/Opportunity`
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the `listOpportunities` function to the `request` property of the
    `ProTable` component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 â€“ The Opportunity list on the ProTable component'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.03_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 â€“ The Opportunity list on the ProTable component
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s also get the opportunity and list the opportunity activities on the
    opportunity details page. Import the following to the opportunity details page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the state to store the opportunity and the effect to request it,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the `opportunity` state to the `dataSource` property of the `ProDescriptions`
    component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s also add the `listActivities` function to the `request` property of
    the `ProTable` components, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `opportunity` `status` property to the `current` property of the `Step`
    component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, the opportunity details page should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 â€“ Opportunity â€“ Details and the Activities list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.04_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 â€“ Opportunity â€“ Details and the Activities list
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we created the `services` folder and the request for each page
    using the umi-request library. We also used the request on each page to access
    the data to fill our interfaces. Next, we'll learn to share states and logic between
    components by creating model files.
  prefs: []
  type: TYPE_NORMAL
- en: Using models for sharing states and logic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll create models for sharing states and logic between components.
  prefs: []
  type: TYPE_NORMAL
- en: A model is a special custom React hook to centralize the states and logic for
    a specific context.
  prefs: []
  type: TYPE_NORMAL
- en: 'We must create the models'' files inside the `src/models` folder, and we can
    access these models using the `useModel` custom hook, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `user` namespace matches the model filename, so the model file must
    be named `user.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create the `customer` model and the `opportunity` model to demonstrate
    the use of models. These two models will contain the logic and result for creating,
    reading, and updating operations and share these operations between different
    interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create the models:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder called `models` inside the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create a new file named `customer.ts` under the `models` folder and add
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We created the `CustomerModel` interface to describe all the functions and states
    we want to share between components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create the functions and state, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We created a state to store the result and used the requests from the `services`
    files to execute the operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use the `customer` model functions in the `ProTable` component on the
    `index.tsx` file in the `pages/Customer` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We used the `result` state to determine whether the operation succeeded and
    showed a success message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `editable` property to the `ProTable` component using the `model` functions,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We used the `disable` and `update` functions to provide the editable feature
    in the `ProTable` component.
  prefs: []
  type: TYPE_NORMAL
- en: Now, repeat the previous steps to create the `opportunity` model and enable
    the editable feature in the `ProTable` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the text to the `en-US.ts` file under the `locales` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you can edit the records on both pages, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Feature 3.5 â€“ The ProTable editable feature on the Customers page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.05_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Feature 3.5 â€“ The ProTable editable feature on the Customers page
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how models work. We created the `customer` and
    `opportunity` models for sharing states and logic and used them in the `ProTable`
    editable feature.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created the definition files for all the backend data and
    created the `ProTable` column definitions on each page. We created the opportunity
    details page using the `ProDescritions` component and the `Activity` interface
    to describe the opportunity activities.
  prefs: []
  type: TYPE_NORMAL
- en: You learned how Umi mock files work and how to create mock endpoints to provide
    simulated backend data and logic by creating the mock files for our application.
    Next, you learned how to organize your application requests using the `services`
    folder and send requests using the umi-request library by creating the `services`
    files for our application. Finally, you learned how models work and created the
    `customer` and `opportunity` models to share logic and state between components.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to handle API error responses by configuring
    the umi-request library, protecting routes using **plugin-access**, and storing
    and globally accessing user information after login.
  prefs: []
  type: TYPE_NORMAL
