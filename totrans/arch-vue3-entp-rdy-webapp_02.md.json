["```js\nconst moduleA = {\n  state: () => ({ ... }),\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... }\n}\nconst moduleB = {\n  state: () => ({ ... }),\n  mutations: { ... },\n  actions: { ... }\n}\nconst store = createStore({\n  modules: {\n    a: moduleA,\n    b: moduleB\n  }\n})\nstore.state.a // -> `moduleA`'s state\nstore.state.b // -> `moduleB`'s state\n```", "```js\n// initial state\nconst state = () => ({\n  photos: [],\n})\n```", "```js\nconst Photos = {\n  template: `<div v-for=\"(photo, index) in photos\"\n              :key=\"index\"> <img :src=\"img/photo.url\"></div>`,\n  computed: {\n    photos () {\n      return this.$store.photos.state.photos\n    }\n  }\n}\n```", "```js\nimport { mapState } from 'vuex'\nconst Photos = {\n  template: `<div v-for=\"(photo, index) in photos\"\n              :key=\"index\"> <img :src=\"img/photo.url\"></div>`,\n  computed: mapState({\n    photos: state => state.photos.photos,\n    }\n  })\n}\n```", "```js\n  getters: {\n    getPhotoByID: (state) => (id) => {\n      return state.photos.find(photo => photo.id === id)\n    }\n  }\n```", "```js\n...mapGetters({\n  // map `this.getPhotoByID` to\n  // `this.$store.getters.getPhotoByID`\n  getPhotoByID: 'getPhotoByID'\n})\n```", "```js\nconst store = createStore({\n  state: {\n    photos: []\n  },\n  mutations: {\n    ADD_NEW_PHOTO (state, photo) {\n      // mutate state\n      state.photos.push(photo)\n    }\n  }\n})\n```", "```js\nimport { mapMutations } from 'vuex'\nexport default {\n  methods: {\n    ...mapMutations({\n      addPhoto: 'photos/ADD_NEW_PHOTO'\n    })\n  }\n}\n```", "```js\nconst store = createStore({\n  state: {\n    photos: []\n  },\n  mutations: {\n    ADD_NEW_PHOTO (state, photo) {\n      state.photos.push(photo)\n    }\n  },\n  actions: {\n   async getPhoto (context, id) {\n       const photo = await Axios.get('/photos/'+id);\n       context.commit('ADD_NEW_PHOTO', photo)\n    }\n  }\n})\n```", "```js\nimport { mapActions } from 'vuex'\nexport default {\n  methods: {\n    ...mapActions({\n      getPhoto: 'photos/getPhoto' // map `this.getPhoto()`\n      // to `this.$store.dispatch('photos/getPhoto')`\n    })\n  }\n}\n```", "```js\n  actions: {\n    async all({ commit }, { size = 20, page = 0 }) {\n      const response = await\n          Axios.get(`/photos?size=${size}&page=${page}`);\n      const { data } = response;\n      if (data.success) {\n        commit(\"STORE_PHOTOS\", data.photos);\n      } else {\n        commit(\"STORE_ERROR\", data.message);\n      }\n    },\n    async getPhoto({ commit }, id) {\n      const response = await Axios.get('/photos/'+id);\n      const { data } = response;\n      if (data.success) {\n        commit(\"STORE_PHOTO\", data.photo);\n      } else {\n        commit(\"STORE_ERROR\", data.message);\n      }\n    },\n  },\n```", "```js\nmkdir repositories\n```", "```js\ncd repositories && mkdir Clients\n```", "```js\ntouch AxiosClient.js\n```", "```js\nimport axios from \"axios\";\nconst baseDomain = \"https://localhost:1337\"; //For Strapi\nconst baseURL = `${baseDomain}`; // Incase of /api/v1;\n// ALL DEFAULT CONFIGURATION HERE\nexport default axios.create({\n  baseURL,\n  headers: {\n    // \"Authorization\": \"Bearer xxxxx\"\n  }\n});\n```", "```js\ncd repositories && touch PhotoRepository.js UserRepository.js\n```", "```js\nimport Axios from './Clients/AxiosClient';\nconst resource = '/photos;\nexport default {\n    get() {\n        return Axios.get(`${resource}`);\n    },\n    getPhoto(id) {\n        return Axios.get(`${resource}/${id}`);\n    },\n    create(payload) {\n        return Axios.post(`${resource}`, payload);\n    },\n    update(payload, id) {\n        return Axios.put(`${resource}/${id}`, payload);\n    },\n    delete(id) {\n        return Axios.delete(`${resource}/${id}`)\n    },\n    //b MANY OTHER RELATED ENDPOINTS.\n};\n```", "```js\nimport Axios from './Clients/AxiosClient';\nconst resource = '/users;\nexport default {\n    get() {\n        return Axios.get(`${resource}`);\n    },\n    getUser(id) {\n        return Axios.get(`${resource}/${id}`);\n    },\n    create(payload) {\n        return Axios.post(`${resource}`, payload);\n    },\n    update(payload, id) {\n        return Axios.put(`${resource}/${id}`, payload);\n    },\n    delete(id) {\n        return Axios.delete(`${resource}/${id}`)\n    },\n    //b MANY OTHER RELATED ENDPOINTS.\n};\n```", "```js\ntouch RepositoryFactory.js\n```", "```js\nimport PhotoRepository from './PhotoRepository';\nimport UserRepository from './UserRepository';\nconst repositories = {\n    'Photos': PhotoRepository,\n    'Users': UserRepository\n}\nexport default {\n    get: name => repositories[name]\n};\n```", "```js\nimport Repository from \"@/repositories/RepositoryFactory\";\nconst Photos = Repository.get(\"Photos\");\nconst Users = Repository.get(\"Users\");\nactions: {\n   async getPhoto (context, id) {\n     const photo = await Photos.getPhoto(id);\n     context.commit('ADD_NEW_PHOTO', photo)\n    }\n   async getUsers(context) {\n     const users = await Users.get();\n     context.commit('ADD_USERS', users)\n    }\n  }\n```", "```js\ncd src && mkdir router\ntouch index.js\nmkdir routes && cd routes\ntouch public.js private.js combine.js\n```", "```js\nimport { createRouter, createWebHistory } from \"vue-router\";\nimport routes from '@/router/routes/combine.js'\nconst routes = [\n    {\n      path: '/',\n      redirect: '/'\n    }\n  ].concat(routes)\nconst router = createRouter({ history: createWebHistory(), routes });\n// ....\n// BeforeEach code here\n//.....\nexport default router\n```", "```js\nimport publicRoutes from '@/router/routes/public.js'\nimport privateRoutes from '@/router/routes/private.js'\nexport default publicRoutes.concat(privateRoutes)\n```", "```js\nimport { createApp } from \"vue\"\nimport App from \"./App.vue\"\nimport router from \"./router/index.js\"\nimport store from \"./store\"\ncreateApp(App).use(router).use(store).mount(\"#app\")\n```"]