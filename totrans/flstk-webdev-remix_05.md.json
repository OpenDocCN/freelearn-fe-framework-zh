["```js\n    DATABASE_URL=\"file:./dev.db\"\n    ```", "```js\n    export async function loader() {  return {};}\n    ```", "```js\n    import { db } from '~/modules/db.server';\n    ```", "```js\n    import { db } from '~/modules/db.server';export async function loader() {json helper function from Remix and pass the expenses array to it:\n\n    ```", "```js\n\n    ```", "```js\n    const expenses = await db.expense.findMany({loader function. Performing as much logic as we can on the server minimizes the need for client-side state management. This is a best practice we should keep in mind.\n    ```", "```js\n    const expenses = useLoaderData();\n    ```", "```js\n    const expenses = useLoaderData<expenses (that is, by hovering over the variable name in your editor). The variable is now typed as an expense object array that is wrapped by JsonifyObject<{…}>.Remix co-locates your client and server code in the same file. This allows us to infer the types of fetched data across the network (from server to client). However, since we work with `Response` objects in `loader` functions, the returned data is serialized as JSON. This changes the shape of the data. For instance, JSON cannot manage `Date` objects but serializes them to `string`.`JsonifyObject` is a helper type from Remix that ensures that the expense object is correctly typed after being serialized to JSON. We will return to that later; for now, we are happy that we can easily access the `loader` data and have it fully typed.\n    ```", "```js\n    <ul className=\"flex flex-col\">  {createdAt property is of the string type. We turn it into a Date object by calling new Date(expense.createdAt). In the loader function, the expenses array carries createdAt properties of the Date type. On the client, we need to deserialize the data as it was parsed to JSON.\n    ```", "```js\n    404 Response if we cannot find an expense that matches the id parameter. This is a great way to stop further executions and show the user that something went wrong.\n    ```", "```js\n    import { json } from '@remix-run/node';import { db } from '~/modules/db.server';export async function loader() {  const firstExpense = await db.expense.findFirst({    orderBy: { createdAt: 'desc' },  });  return json({ firstExpense });}\n    ```", "```js\n    const { firstExpense } = useLoaderData<typeof loader>();\n    ```", "```js\n    <li className=\"mr-auto\">  <NavLink    to=NavLink component now navigates the user to the most recently created expense.\n    ```", "```js\n    const location = useLocation();\n    ```", "```js\n    <NavLink  to={firstExpense ? `/dashboard/expenses/${firstExpense.id}` : '/dashboard/expenses'}  /dashboard/expenses route.With these changes in place, let’s learn about parallel data fetching.\n    ```", "```js\n    export async function loader() {  const firstExpense = await db.expense.findFirst({    orderBy: { createdAt: 'desc' },  });loader function, we have the opportunity to execute the queries in parallel to reduce the response time.\n    ```", "```js\n    export async function loader() {  const Promise.all to execute them in parallel.\n    ```", "```js\n    export default function Component() {  return (    <form method and action attributes. method defines the submission method (POST or GET), and action sets the path name for the submission.We set the method to `POST` as we are mutating data.\n    ```", "```js\n    export default function Component() {  return (    <form method=\"post\" action=\"/dashboard/expenses/?index\">      <label className=\"w-full lg:max-w-md\">        Title:        <input type=\"text\" route module component now renders a simple HTML form with fields for the expense data. It doesn’t look pretty without CSS. We will solve this in the next step. For now, let’s focus on the content of the form.We add `name` attributes to the input and textarea elements. On form submission, the form data includes key-value pairs for every named input field. The `name` attributes are used as the keys of the form data. Finally, a button of the `submit` type is used to submit the form data on click.\n    ```", "```js\n    import type { loader functions to handle HTTP GET requests. Remix’s action function is called for all other HTTP requests to the route, including POST requests.Both functions receive a couple of parameters. You already know about the `params` parameter, which lets us access dynamic route segments. Now, we’re using the `request` parameter, which gives us access to the `Request` object ([https://developer.mozilla.org/en-US/docs/Web/API/Request](https://developer.mozilla.org/en-US/docs/Web/API/Request)).We type `loader` function parameters with the `LoaderFunctionArgs` type and `action` function parameters with the `ActionFunctionArgs` type.\n    ```", "```js\n    export async function action({ request }: ActionFunctionArgs) {  Request object.By calling the `formData` function, we parse the request body into a `FormData` object that provides us with access to the key-value pairs of the form input data. You can find more information about form data in the MDN Web Docs: [https://developer.mozilla.org/en-US/docs/Web/API/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData).\n    ```", "```js\n    import { redirect } from '@remix-run/node';import { db } from '~/modules/db.server';\n    ```", "```js\n    export async function action({ request }: ActionFunctionArgs) {  const formData = await request.formData();  const title = formData.get('title');  const description = formData.get('description');  const amount = formData.get('amount');zod library to help validate user input. For now, we keep it simple and manually validate the data using if stamtents.Note that, once again, we co-locate the server-side HTTP handler and the associated client-side UI together in one file.\n    ```", "```js\n    redirect(`/dashboard/expenses/${expense.id}`);\n    ```", "```js\n    FloatingActionLink component wraps Remix’s Link component. The quick link from the expense details page to the creation form allows for a convenient workflow:*   Expense creation redirects to the created expense.*   The expense details page offers a quick link back to expense creation.\n    ```", "```js\nfunction CreateExpenseForm() {  const [title, setTitle] = React.useState('');\n  const [description, setDescription] = React.useState('');\n  const [amount, setAmount] = React.useState(0);\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsSubmitting(true);\n    await fetch('/dashboard/expenses/?index', {\n      method: 'POST',\n      body: JSON.stringify({ title, description, amount }),\n    });\n    setIsSubmitting(false);\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <Input\n        label=\"Title:\"\n        placeholder=\"Dinner for Two\"\n        required\n        value={title}\n        onChange={(event) => setTitle(event.target.value)}\n      />\n      <Textarea label=\"Description:\" value={description}         onChange={(event) => setDescription(event.target.value)} />\n      <Input\n        label=\"Amount (in USD):\"\n        type=\"number\"\n        required\n        value={amount}\n        onChange={(e) => setAmount(e.target.valueAsNumber)}\n      />\n      <Button type=\"submit\" isPrimary disabled={isSubmitting}>\n        Create\n      </Button>\n    </form>\n  );\n}\n```", "```js\n    import { Form } from '@remix-run/react';\n    ```", "```js\n    export default function Component() {  return (Form component, Remix prevents the browser’s default behavior and executes a client-side fetch request to submit the form, avoiding the full-page reload. This works out of the box without us adding an onSubmit handler.\n    ```", "```js\n    import { Form, Input, Textarea } from '~/components/forms';\n    ```", "```js\n    export default function CreateExpensePage() {  return (    <Form method=\"post\" action=\"/dashboard/expenses/?index\">Button component from the components folder:\n\n    ```", "```js\n\n    ```", "```js\n    <Button type=\"submit\" isPrimary>  Create</Button>\n    ```"]