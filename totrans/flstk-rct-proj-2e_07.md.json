["```js\nabout: {\n    type: String,\n    trim: true\n  }\n```", "```js\n  <TextField\n     id=\"multiline-flexible\"\n     label=\"About\"\n     multiline\n     rows=\"2\"\n     value={values.about}\n     onChange={handleChange('about')}\n  />\n```", "```js\n<ListItem> <ListItemText primary={this.state.user.about}/> </ListItem>\n```", "```js\nphoto: {\n    data: Buffer,\n    contentType: String\n}\n```", "```js\n<input accept=\"image/*\" type=\"file\"\n       onChange={handleChange('photo')} \n       style={{display:'none'}} \n       id=\"icon-button-file\" />\n```", "```js\n<label htmlFor=\"icon-button-file\">\n   <Button variant=\"contained\" color=\"default\" component=\"span\">\n      Upload <FileUpload/>\n   </Button>\n</label>\n```", "```js\n<span className={classes.filename}>\n    {values.photo ? values.photo.name : ''}\n</span>\n```", "```js\nconst handleChange = name => event => {\n  const value = name === 'photo'\n ? event.target.files[0]\n : event.target.value\n  setValues({...values, [name]: value })\n}\n```", "```js\nconst clickSubmit = () => {\n    let userData = new FormData()\n    values.name && userData.append('name', values.name)\n    values.email && userData.append('email', values.email)\n    values.passoword && userData.append('passoword', values.passoword)\n    values.about && userData.append('about', values.about)\n    values.photo && userData.append('photo', values.photo)\n    ...\n}\n```", "```js\nupdate({\n      userId: match.params.userId\n    }, {\n      t: jwt.token\n    }, userData).then((data) => {\n      if (data && data.error) {\n        setValues({...values, error: data.error})\n      } else {\n        setValues({...values, 'redirectToProfile': true})\n      }\n})\n```", "```js\nconst update = async (params, credentials, user) => {\n  try {\n    let response = await fetch('/api/users/' + params.userId, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: user\n    })\n    return await response.json()\n  } catch(err) {\n    console.log(err)\n  }}\n```", "```js\nyarn add formidable\n```", "```js\nimport formidable from 'formidable'\nimport fs from 'fs'\nconst update = async (req, res) => {\n  let form = new formidable.IncomingForm()\n  form.keepExtensions = true\n  form.parse(req, async (err, fields, files) => {\n    if (err) {\n      return res.status(400).json({\n        error: \"Photo could not be uploaded\"\n      })\n    }\n    let user = req.profile\n    user = extend(user, fields)\n    user.updated = Date.now()\n    if(files.photo){\n user.photo.data = fs.readFileSync(files.photo.path)\n user.photo.contentType = files.photo.type\n }\n    try {\n      await user.save()\n      user.hashed_password = undefined\n      user.salt = undefined\n      res.json(user)\n    } catch (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n  })\n}\n```", "```js\nrouter.route('/api/users/photo/:userId')\n  .get(userCtrl.photo, userCtrl.defaultPhoto)\nrouter.route('/api/users/defaultphoto')\n  .get(userCtrl.defaultPhoto)\n```", "```js\nconst photo = (req, res, next) => {\n  if(req.profile.photo.data){\n    res.set(\"Content-Type\", req.profile.photo.contentType)\n    return res.send(req.profile.photo.data)\n  }\n  next()\n}\n```", "```js\nimport profileImage from './../../client/assets/images/profile-pic.png'\nconst defaultPhoto = (req, res) => {\n  return res.sendFile(process.cwd()+profileImage)\n}\n```", "```js\nconst photoUrl = values.user._id\n      ? `/api/users/photo/${values.user._id}?${new Date().getTime()}`\n      : '/api/users/defaultphoto'\n```", "```js\n  <Avatar src={photoUrl}/>\n```", "```js\nfollowing: [{type: mongoose.Schema.ObjectId, ref: 'User'}],\nfollowers: [{type: mongoose.Schema.ObjectId, ref: 'User'}]\n```", "```js\nconst userByID = async (req, res, next, id) => {\n  try {\n    let user = await User.findById(id)\n    .populate('following', '_id name')\n .populate('followers', '_id name')\n    .exec()\n    if (!user)\n      return res.status('400').json({\n        error: \"User not found\"\n      })\n    req.profile = user\n    next()\n  } catch (err) {\n    return res.status('400').json({\n      error: \"Could not retrieve user\"\n    })\n  }\n}\n```", "```js\nrouter.route('/api/users/follow')\n  .put(authCtrl.requireSignin, \n       userCtrl.addFollowing, \n       userCtrl.addFollower)\nrouter.route('/api/users/unfollow')\n  .put(authCtrl.requireSignin, \n       userCtrl.removeFollowing, \n       userCtrl.removeFollower)\n```", "```js\nconst addFollowing = async (req, res, next) => {\n  try{\n    await User.findByIdAndUpdate(req.body.userId, \n                   {$push: {following: req.body.followId}}) \n    next()\n  }catch(err){\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst addFollower = async (req, res) => {\n  try{\n    let result = await User.findByIdAndUpdate(req.body.followId, \n                            {$push: {followers: req.body.userId}}, \n                            {new: true})\n                            .populate('following', '_id name')\n                            .populate('followers', '_id name')\n                            .exec()\n      result.hashed_password = undefined\n      result.salt = undefined\n      res.json(result)\n    }catch(err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    } \n}\n```", "```js\nconst removeFollowing = async (req, res, next) => {\n  try{\n    await User.findByIdAndUpdate(req.body.userId, \n                   {$pull: {following: req.body.unfollowId}}) \n    next()\n  }catch(err) {\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\nconst removeFollower = async (req, res) => {\n  try{\n    let result = await User.findByIdAndUpdate(req.body.unfollowId, \n                                {$pull: {followers: req.body.userId}}, \n                                {new: true})\n                            .populate('following', '_id name')\n                            .populate('followers', '_id name')\n                            .exec() \n    result.hashed_password = undefined\n    result.salt = undefined\n    res.json(result)\n  }catch(err){\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n  }\n}\n```", "```js\nconst follow = async (params, credentials, followId) => {\n  try {\n    let response = await fetch('/api/users/follow/', {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify({userId:params.userId, followId: followId})\n    })\n    return await response.json()\n  } catch(err) {\n    console.log(err)\n  }\n}\n```", "```js\nconst unfollow = async (params, credentials, unfollowId) => {\n  try {\n    let response = await fetch('/api/users/unfollow/', {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify({userId:params.userId, unfollowId: unfollowId})\n    })\n    return await response.json()\n  } catch(err) {\n    console.log(err)\n  }\n}\n```", "```js\nexport default function FollowProfileButton (props) {\n const followClick = () => {\n props.onButtonClick(follow)\n }\n const unfollowClick = () => {\n props.onButtonClick(unfollow)\n }\n  return (<div>\n    { props.following\n       ? (<Button variant=\"contained\" color=\"secondary\" \n                  onClick={unfollowClick}>Unfollow</Button>)\n       : (<Button variant=\"contained\" color=\"primary\" \n                  onClick={followClick}>Follow</Button>)\n   }\n   </div>)\n}\nFollowProfileButton.propTypes = {\n following: PropTypes.bool.isRequired,\n onButtonClick: PropTypes.func.isRequired\n}\n```", "```js\n{auth.isAuthenticated().user && \n      auth.isAuthenticated().user._id == values.user._id \n    ? (edit and delete buttons) \n    : (follow button)\n}\n```", "```js\nlet following = checkFollow(data)\nsetValues({...values, user: data, following: following}) \n```", "```js\nconst checkFollow = (user) => {\n    const match = user.followers.some((follower)=> {\n      return follower._id == jwt.user._id\n    })\n    return match\n}\n```", "```js\n  const clickFollowButton = (callApi) => {\n    callApi({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, values.user._id).then((data) => {\n      if (data.error) {\n        setValues({...values, error: data.error})\n      } else {\n        setValues({...values, user: data, following: !values.following})\n      }\n    })\n  }\n```", "```js\n<FollowProfileButton following={this.state.following} onButtonClick={this.clickFollowButton}/>\n```", "```js\nexport default function FollowGrid (props) {\n  const classes = useStyles()\n    return (<div className={classes.root}>\n      <GridList cellHeight={160} className={classes.gridList} cols={4}>\n        {props.people.map((person, i) => {\n           return <GridListTile style={{'height':120}} key={i}>\n              <Link to={\"/user/\" + person._id}>\n                <Avatar src={'/api/users/photo/'+person._id} \n                        className={classes.bigAvatar}/>\n                <Typography className={classes.tileText}>\n                   {person.name}\n                </Typography>\n              </Link>\n            </GridListTile>\n        })}\n      </GridList>\n    </div>)\n}\n\nFollowGrid.propTypes = {\n  people: PropTypes.array.isRequired\n}\n\n```", "```js\n<FollowGrid people={props.user.followers}/>\n<FollowGrid people={props.user.following}/>\n```", "```js\nrouter.route('/api/users/findpeople/:userId')\n   .get(authCtrl.requireSignin, userCtrl.findPeople)\n```", "```js\nconst findPeople = async (req, res) => {\n  let following = req.profile.following\n  following.push(req.profile._id)\n  try {\n    let users = await User.find({ _id:{ $nin : following }})\n                          .select('name')\n    res.json(users)\n  }catch(err){\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst findPeople = async (params, credentials, signal) => {\n  try {\n    let response = await fetch('/api/users/findpeople/' + params.userId, {\n      method: 'GET',\n      signal: signal,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      }\n    }) \n    return await response.json()\n  } catch(err) {\n    console.log(err)\n  }\n}\n```", "```js\n useEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n\n    findPeople({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, signal).then((data) => {\n      if (data && data.error) {\n        console.log(data.error)\n      } else {\n        setValues({...values, users:data})\n      }\n    })\n    return function cleanup(){\n      abortController.abort()\n    }\n }, [])\n```", "```js\n<List>\n     {values.users.map((item, i) => {\n         return <span key={i}>\n            <ListItem>\n               <ListItemAvatar className={classes.avatar}>\n                  <Avatar src={'/api/users/photo/'+item._id}/>\n               </ListItemAvatar>\n               <ListItemText primary={item.name}/>\n               <ListItemSecondaryAction className={classes.follow}>\n                  <Link to={\"/user/\" + item._id}>\n                    <IconButton variant=\"contained\" color=\"secondary\" \n                                className={classes.viewButton}>\n                      <ViewIcon/>\n                    </IconButton>\n                  </Link>\n                  <Button aria-label=\"Follow\" variant=\"contained\" \n                          color=\"primary\" \n                          onClick={()=> {clickFollow(item, i)}}>\n                      Follow\n                  </Button>\n               </ListItemSecondaryAction>\n            </ListItem>\n          </span>\n        })\n      }\n</List>\n```", "```js\nconst clickFollow = (user, index) => {\n  follow({\n    userId: jwt.user._id\n  }, {\n    t: jwt.token\n  }, user._id).then((data) => {\n    if (data.error) {\n      console.log(data.error)\n    } else {\n      let toFollow = values.users\n      toFollow.splice(index, 1)\n      setValues({...values, users: toFollow, open: true, \n                            followMessage: `Following ${user.name}!`})\n    }\n  })\n}\n```", "```js\n<Snackbar\n   anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'right',\n     }}\n   open={values.open}\n   onClose={handleRequestClose}\n   autoHideDuration={6000}\n   message={<span className={classes.snack}>{values.followMessage}</span>}\n/>\n```", "```js\ntext: {\n  type: String,\n  required: 'Text is required'\n}\n```", "```js\nphoto: {\n  data: Buffer,\n  contentType: String\n}\n```", "```js\npostedBy: {type: mongoose.Schema.ObjectId, ref: 'User'}\n```", "```js\ncreated: { type: Date, default: Date.now }\n```", "```js\nlikes: [{type: mongoose.Schema.ObjectId, ref: 'User'}]\n```", "```js\ncomments: [{\n    text: String,\n    created: { type: Date, default: Date.now },\n    postedBy: { type: mongoose.Schema.ObjectId, ref: 'User'}\n  }]\n```", "```js\n<Card>\n   <Typography type=\"title\"> Newsfeed </Typography>\n   <Divider/>\n   <NewPost addUpdate={addPost}/>\n   <Divider/>\n   <PostList removeUpdate={removePost} posts={posts}/>\n</Card>\n```", "```js\nconst addPost = (post) => {\n    const updatedPosts = [...posts]\n    updatedPosts.unshift(post)\n    setPosts(updatedPosts)\n}\n```", "```js\nconst removePost = (post) => {\n    const updatedPosts = [...posts]\n    const index = updatedPosts.indexOf(post)\n    updatedPosts.splice(index, 1)\n    setPosts(updatedPosts)\n}\n```", "```js\nexport default function PostList (props) {\n    return (\n      <div style={{marginTop: '24px'}}>\n        {props.posts.map((item, i) => {\n            return <Post post={item} key={i} \n                         onRemove={props.removeUpdate}/>\n          })\n        }\n      </div>\n    )\n}\nPostList.propTypes = {\n  posts: PropTypes.array.isRequired,\n  removeUpdate: PropTypes.func.isRequired\n}\n```", "```js\nrouter.route('/api/posts/feed/:userId')\n  .get(authCtrl.requireSignin, postCtrl.listNewsFeed)\n```", "```js\nrouter.param('userId', userCtrl.userByID)\n```", "```js\napp.use('/', postRoutes)\n```", "```js\nconst listNewsFeed = async (req, res) => {\n  let following = req.profile.following\n  following.push(req.profile._id)\n  try {\n    let posts = await Post.find({postedBy:{ $in : req.profile.following }})\n                          .populate('comments.postedBy', '_id name')\n                          .populate('postedBy', '_id name')\n                          .sort('-created')\n                          .exec()\n    res.json(posts)\n  } catch(err) {\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst listNewsFeed = async (params, credentials, signal) => {\n  try {\n    let response = await fetch('/api/posts/feed/'+ params.userId, {\n      method: 'GET',\n      signal: signal,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      }\n    }) \n    return await response.json()\n  } catch(err) {\n    console.log(err)\n  }\n}\n```", "```js\n  useEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n\n    listNewsFeed({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, signal).then((data) => {\n      if (data.error) {\n        console.log(data.error)\n      } else {\n        setPosts(data)\n      }\n    })\n    return function cleanup(){\n      abortController.abort()\n    }\n\n  }, [])\n```", "```js\nrouter.route('/api/posts/by/:userId')\n    .get(authCtrl.requireSignin, postCtrl.listByUser)\n```", "```js\nconst listByUser = async (req, res) => {\n  try {\n    let posts = await Post.find({postedBy: req.profile._id})\n                          .populate('comments.postedBy', '_id name')\n                          .populate('postedBy', '_id name')\n                          .sort('-created')\n                          .exec()\n    res.json(posts)\n  } catch(err) {\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst listByUser = async (req, res) => {\n  try {\n    let posts = await Post.find({postedBy: req.profile._id})\n                          .populate('comments.postedBy', '_id name')\n                          .populate('postedBy', '_id name')\n                          .sort('-created')\n                          .exec()\n    res.json(posts)\n  } catch(err) {\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst loadPosts = (user) => {\n  listByUser({\n    userId: user\n  }, {\n    t: jwt.token\n  }).then((data) => {\n    if (data.error) {\n      console.log(data.error)\n    } else {\n      setPosts(data)\n    }\n    })\n}\n```", "```js\nrouter.route('/api/posts/new/:userId')\n  .post(authCtrl.requireSignin, postCtrl.create)\n```", "```js\nconst create = (req, res, next) => {\n  let form = new formidable.IncomingForm()\n  form.keepExtensions = true\n  form.parse(req, async (err, fields, files) => {\n    if (err) {\n      return res.status(400).json({\n        error: \"Image could not be uploaded\"\n      })\n    }\n    let post = new Post(fields)\n    post.postedBy= req.profile\n    if(files.photo){\n      post.photo.data = fs.readFileSync(files.photo.path)\n      post.photo.contentType = files.photo.type\n    }\n    try {\n      let result = await post.save()\n      res.json(result)\n    } catch (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n  })\n}\n```", "```js\nrouter.route('/api/posts/photo/:postId').get(postCtrl.photo)\n```", "```js\nconst photo = (req, res, next) => {\n    res.set(\"Content-Type\", req.post.photo.contentType)\n    return res.send(req.post.photo.data)\n}\n```", "```js\n  router.param('postId', postCtrl.postByID)\n```", "```js\nconst postByID = async (req, res, next, id) => {\n  try{\n    let post = await Post.findById(id)\n                         .populate('postedBy', '_id name')\n                         .exec()\n    if (!post)\n      return res.status('400').json({\n        error: \"Post not found\"\n      })\n    req.post = post\n    next()\n  }catch(err){\n    return res.status('400').json({\n      error: \"Could not retrieve use post\"\n    })\n  }\n}\n```", "```js\nconst create = async (params, credentials, post) => {\n  try {\n    let response = await fetch('/api/posts/new/'+ params.userId, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: post\n    })\n    return await response.json()\n  } catch(err) {\n    console.log(err)\n  }\n}\n```", "```js\nconst clickPost = () => {\n    let postData = new FormData()\n    postData.append('text', values.text)\n    postData.append('photo', values.photo)\n    create({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, postData).then((data) => {\n      if (data.error) {\n        setValues({...values, error: data.error})\n      } else {\n        setValues({...values, text:'', photo: ''})\n        props.addUpdate(data)\n      }\n    })\n}\n```", "```js\n<CardHeader\n   avatar={\n      <Avatar src={'/api/users/photo/'+props.post.postedBy._id}/>\n   }\n   action={ props.post.postedBy._id === auth.isAuthenticated().user._id &&\n              <IconButton onClick={deletePost}>\n                <DeleteIcon />\n              </IconButton>\n          }\n   title={<Link to={\"/user/\" + props.post.postedBy._id}>{props.post.postedBy.name}</Link>}\n   subheader={(new Date(props.post.created)).toDateString()}\n   className={classes.cardHeader}\n/>\n```", "```js\n<CardContent className={classes.cardContent}>\n  <Typography component=\"p\" className={classes.text}> \n    {props.post.text} \n  </Typography>\n  {props.post.photo && \n    (<div className={classes.photo}>\n       <img className={classes.media}\n            src={'/api/posts/photo/'+ props.post._id}/>\n    </div>)\n  }\n</CardContent>\n```", "```js\n<CardActions>\n   { values.like\n       ? <IconButton onClick={clickLike} className={classes.button} \n                     aria-label=\"Like\" color=\"secondary\">\n            <FavoriteIcon />\n         </IconButton>\n       : <IconButton onClick={clickLike} className={classes.button} \n                     aria-label=\"Unlike\" color=\"secondary\">\n            <FavoriteBorderIcon />\n         </IconButton> } <span>{values.likes}</span>\n         <IconButton className={classes.button} \n                     aria-label=\"Comment\" color=\"secondary\">\n            <CommentIcon/>\n         </IconButton> <span>{values.comments.length}</span>\n</CardActions>\n```", "```js\n<Comments postId={props.post._id} \n         comments={values.comments} \n          updateComments={updateComments}/>\n```", "```js\nrouter.route('/api/posts/:postId')\n      .delete(authCtrl.requireSignin, \n                postCtrl.isPoster, \n                  postCtrl.remove)\n```", "```js\nconst isPoster = (req, res, next) => {\n  let isPoster = req.post && req.auth &&\n  req.post.postedBy._id == req.auth._id\n  if(!isPoster){\n    return res.status('403').json({\n      error: \"User is not authorized\"\n    })\n  }\n  next()\n}\n```", "```js\nconst deletePost = () => { \n    remove({\n      postId: props.post._id\n    }, {\n      t: jwt.token\n    }).then((data) => {\n      if (data.error) {\n        console.log(data.error)\n      } else {\n        props.onRemove(props.post)\n      }\n    })\n}\n```", "```js\n  router.route('/api/posts/like')\n    .put(authCtrl.requireSignin, postCtrl.like)\n```", "```js\nconst like = async (req, res) => {\n  try {\n    let result = await Post.findByIdAndUpdate(req.body.postId, \n                                {$push: {likes: req.body.userId}}, \n                                {new: true})\n    res.json(result)\n  } catch(err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n  }\n}\n```", "```js\nconst like = async (params, credentials, postId) => {\n  try {\n    let response = await fetch('/api/posts/like/', {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify({userId:params.userId, postId: postId})\n    })\n    return await response.json()\n  } catch(err) {\n    console.log(err)\n  }\n}\n```", "```js\n  router.route('/api/posts/unlike')\n    .put(authCtrl.requireSignin, postCtrl.unlike)\n```", "```js\nconst unlike = async (req, res) => {\n  try {\n    let result = await Post.findByIdAndUpdate(req.body.postId, \n                                {$pull: {likes: req.body.userId}}, \n                                {new: true})\n    res.json(result)\n  } catch(err) {\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst checkLike = (likes) => {\n  let match = likes.indexOf(jwt.user._id) !== -1\n  return match\n}\n```", "```js\n const [values, setValues] = useState({\n    like: checkLike(props.post.likes),\n    likes: props.post.likes.length,\n    comments: props.post.comments\n  })\n```", "```js\n  const clickLike = () => {\n    let callApi = values.like ? unlike : like\n    const jwt = auth.isAuthenticated()\n    callApi({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, props.post._id).then((data) => {\n      if (data.error) {\n        console.log(data.error)\n      } else {\n        setValues({...values, like: !values.like, \n likes: data.likes.length})\n      }\n    })\n  }\n```", "```js\nrouter.route('/api/posts/comment')\n    .put(authCtrl.requireSignin, postCtrl.comment)\n```", "```js\nconst comment = async (req, res) => {\n  let comment = req.body.comment\n  comment.postedBy = req.body.userId\n  try {\n    let result = await Post.findByIdAndUpdate(req.body.postId, \n                                   {$push: {comments: comment}}, \n                                   {new: true})\n                            .populate('comments.postedBy', '_id name')\n                            .populate('postedBy', '_id name')\n                            .exec()\n    res.json(result)\n  } catch(err) {\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst comment = async (params, credentials, postId, comment) => {\n  try {\n    let response = await fetch('/api/posts/comment/', {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify({userId:params.userId, postId: postId, \n                            comment: comment})\n    })\n    return await response.json()\n  } catch(err) {\n    console.log(err)\n  }\n}\n```", "```js\n<CardHeader\n    avatar={\n            <Avatar className={classes.smallAvatar} \n               src=  {'/api/users/photo/'\n                  +auth.isAuthenticated().user._id}/>\n           }\n    title={ <TextField\n                onKeyDown={addComment}\n                multiline\n                value={text}\n                onChange={handleChange}\n                placeholder=\"Write something ...\"\n                className={classes.commentField}\n                margin=\"normal\"\n                />\n          }\n              className={classes.cardHeader}\n/>\n```", "```js\nconst addComment = (event) => {\n    if(event.keyCode == 13 && event.target.value){\n      event.preventDefault()\n      comment({\n        userId: jwt.user._id\n      }, {\n        t: jwt.token\n      }, props.postId, {text: text}).then((data) => {\n        if (data.error) {\n          console.log(data.error)\n        } else {\n          setText('')\n          props.updateComments(data.comments)\n        }\n      })\n    }\n}\n```", "```js\n{ props.comments.map((item, i) => {\n            return <CardHeader\n                      avatar={\n                        <Avatar className={classes.smallAvatar} \n                          src={'/api/users/photo/'+item.postedBy._id}/>\n                      }\n                      title={commentBody(item)}\n                      className={classes.cardHeader}\n                      key={i}/>\n            })\n}\n```", "```js\nconst commentBody = item => {\n      return (\n        <p className={classes.commentText}>\n          <Link to={\"/user/\" + item.postedBy._id}>\n              {item.postedBy.name} </Link><br/>\n          {item.text}\n          <span className={classes.commentDate}>\n            { (new Date(item.created)).toDateString()} |\n            { auth.isAuthenticated().user._id === item.postedBy._id &&\n              <Icon onClick={deleteComment(item)} \n                    className={classes.commentDelete}>delete</Icon> }\n          </span>\n        </p>\n      )\n}\n```", "```js\nrouter.route('/api/posts/uncomment')\n    .put(authCtrl.requireSignin, postCtrl.uncomment)\n```", "```js\nconst uncomment = async (req, res) => {\n  let comment = req.body.comment\n  try{\n    let result = await Post.findByIdAndUpdate(req.body.postId, \n                                  {$pull: {comments: {_id: comment._id}}},  \n                                  {new: true})\n                          .populate('comments.postedBy', '_id name')\n                          .populate('postedBy', '_id name')\n                          .exec()\n    res.json(result)\n  } catch(err) {\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst deleteComment = comment => event => {\n    uncomment({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, props.postId, comment).then((data) => {\n      if (data.error) {\n        console.log(data.error)\n      } else {\n        props.updateComments(data.comments)\n      }\n    })\n  }\n```", "```js\nconst updateComments = (comments) => {\n    setValues({...values, comments: comments})\n}\n```", "```js\n<IconButton aria-label=\"Comment\" color=\"secondary\">\n  <CommentIcon/>\n</IconButton> <span>{values.comments.length}</span>\n```"]