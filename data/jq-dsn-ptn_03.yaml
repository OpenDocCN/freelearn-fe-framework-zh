- en: Chapter 3. The Publish/Subscribe Pattern
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。发布/订阅模式
- en: In this chapter, we will showcase the Publish/Subscribe Pattern, a design pattern
    quite similar to the Observer Pattern but with a more distinct role that is a
    better fit for more complex use cases. We will see how it differs from the Observer
    Pattern and how jQuery adopted some of its concepts and brought them to its Observer
    Pattern implementation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将展示发布/订阅模式，这是一种设计模式，与观察者模式非常相似，但具有更明确的角色，更适合更复杂的用例。我们将看到它与观察者模式的区别，以及
    jQuery 如何采用其某些概念并将其带入其观察者模式实现。
- en: Later, we will proceed and rewrite our previous chapter's example using this
    pattern. We will use this pattern's benefits to add some extra features and also
    reduce the coupling of our code with the elements of the web page.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 后来，我们将继续并使用此模式重写我们上一章的示例。我们将利用此模式的优势来添加一些额外功能，并减少我们的代码与网页元素之间的耦合。
- en: 'In this chapter, we will:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Introduce the Publish/Subscribe Pattern
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入发布/订阅模式
- en: Learn how it differs and what advantages it has over the Observer Pattern
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解它与观察者模式的区别以及它的优势在哪里
- en: Learn how jQuery brings some of its features to its methods
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 jQuery 如何将一些特性带入其方法中
- en: Learn how to emit custom events with jQuery
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用 jQuery 发射自定义事件
- en: Rewrite and extend the example from [Chapter 2](part0018_split_000.html#H5A42-e8d3cd3d052d4ee0b4673af57a64ddef
    "Chapter 2. The Observer Pattern"), *The Observer Pattern*, using this pattern
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用此模式重写并扩展来自[第2章](part0018_split_000.html#H5A42-e8d3cd3d052d4ee0b4673af57a64ddef
    "第2章。观察者模式")的示例，*观察者模式*，
- en: Introducing the Publish/Subscribe Pattern
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍发布/订阅模式
- en: The Publish/Subscribe Pattern is a Messaging Pattern where the emitters of the
    messages, called the **publishers**, multicast messages to a number of recipients,
    called the **subscribers**, that have expressed their interest in receiving such
    messages. The key concept of this pattern, which is also commonly referred to
    as the Pub/Sub Pattern in short, is to provide a way to avoid dependencies between
    the publishers and their subscribers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 发布/订阅模式是一种消息模式，其中称为**发布者**的消息发射器向许多被称为**订阅者**的接收者多播消息，这些接收者已表达了对接收此类消息的兴趣。这种模式的关键概念，也常简称为Pub/Sub模式，是提供一种方法以避免发布者和订阅者之间的依赖关系。
- en: An extra concept of this pattern is the use of **topics** that are used by the
    subscribers in order to express that they are only interested in messages of a
    specific type. This way, publishers filter subscribers before sending a message
    and distribute that message only to the appropriate ones, thereby reducing the
    amount of traffic and work required on both sides.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式的一个额外概念是使用**主题**，订阅者使用这些主题来表示他们只对特定类型的消息感兴趣。这样一来，发布者在发送消息之前就可以对订阅者进行过滤，并且只将该消息分发给适当的订阅者，从而减少了双方所需的流量和工作量。
- en: '![Introducing the Publish/Subscribe Pattern](img/00013.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![介绍发布/订阅模式](img/00013.jpeg)'
- en: Another common variant is to use a central, application-wide object, known as
    the **broker**, that relays messages produced by the publishers to the relevant
    subscribers. The broker, in this case, acts as a well-known message handler to
    send and subscribe to message topics. This enables us, instead of coupling different
    application parts together, to only reference the broker itself and also the topic
    that our components are interested in. Even though topics might not be an absolute
    requirement in the first variant of this pattern, this variant plays an essential
    role in scalability since there will commonly exist way less brokers (if not just
    one) than publishers and subscribers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的变体是使用一个称为**代理**的中央，应用程序范围内的对象，它将由发布者产生的消息中继给相关的订阅者。在这种情况下，代理充当了一个众所周知的消息处理程序，用于发送和订阅消息主题。这使我们能够不将不同的应用程序部分耦合在一起，而只引用代理本身以及我们的组件感兴趣的主题。尽管主题可能不是该模式的第一变体中的绝对要求，但该变体在可扩展性方面起着至关重要的作用，因为通常会存在比发布者和订阅者少得多的代理（如果不只有一个）。
- en: '![Introducing the Publish/Subscribe Pattern](img/00014.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![介绍发布/订阅模式](img/00014.jpeg)'
- en: By following a subscription scheme, the code of the publisher is completely
    decoupled from the subscribers, meaning that the publisher does not have to know
    the objects depend on them. As a result, we do not need to hard code to the publisher
    each separate action that should be executed on the different parts of our application.
    Instead, the components of an application, and possibly third-party extensions,
    subscribe to be notified only about topics/events that they need to know. In such
    distributed architecture, adding a new feature to an existing application requires
    minimal to no changes to the application components it depends on.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循订阅方案，发布者的代码完全与订阅者解耦，这意味着发布者不必知道依赖于它们的对象。因此，我们不需要在发布者中硬编码每个应该在应用程序的不同部分执行的单独操作。相反，应用程序的组件以及可能的第三方扩展只订阅他们需要知道的主题/事件。在这样的分布式架构中，向现有应用程序添加新功能只需要对其依赖的应用程序组件进行最小到无需更改。
- en: How it differs from the Observer Pattern
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它与观察者模式的不同之处
- en: The most basic difference is that, by definition, the Pub/Sub Pattern is a one-way-Messaging
    Pattern that can also pass a message, unlike the Observer Pattern that just describes
    how to notify the observers about a specific state change on the subject.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的区别在于，根据定义，发布/订阅模式是一种单向消息模式，可以传递消息，而观察者模式只是描述如何通知观察者有关主题特定状态更改的方法。
- en: Moreover, unlike the Observer Pattern, the Pub/Sub Pattern with a broker results
    in more loosely coupled code for the different parts of an implementation. This
    is because the observers need to know their subject that is emitting the events;
    however, on the other hand, the publishers and their subscribers only need to
    know the broker that is used.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，与观察者模式不同，带有代理的发布/订阅模式导致实现的不同部分之间的代码更松散耦合。这是因为观察者需要知道发出事件的主题；然而，另一方面，发布者及其订阅者只需知道使用的代理。
- en: How it is adopted by jQuery
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何被 jQuery 应用
- en: Once again, the jQuery library provides us with a convenient way to take advantage
    of the Pub/Sub Pattern in our code. Instead of extending its API by adding new
    methods specifically named "publish" and "subscribe" and introducing new concepts,
    the developers decided to extend the `jQuery.fn.on()` and `jQuery.fn.trigger()`
    methods with the ability to handle and emit custom events. This way, jQuery can
    be used to implement a publisher/subscriber communication scheme using the already
    known convenient methods it provides.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，jQuery 库为我们提供了一种方便的方式来利用代码中的发布/订阅模式。开发人员决定通过扩展`jQuery.fn.on()`和`jQuery.fn.trigger()`方法的能力来处理和发出自定义事件，而不是通过添加名为"publish"和"subscribe"的新方法并引入新概念来扩展其
    API。这样，jQuery 可以使用它已经提供的方便的方法来实现使用发布者/订阅者通信方案。
- en: Custom events in jQuery
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jQuery 中的自定义事件
- en: Custom events allow us to use almost any user-defined string value as a common
    event that we can add listeners for, and also manually fire it on page elements.
    As an extra but a precious feature, custom events can also carry some extra data
    to be delivered to the listeners of the event.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义事件允许我们使用几乎任何用户定义的字符串值作为我们可以为其添加监听器的通用事件，并在页面元素上手动触发它。作为一个额外但宝贵的特性，自定义事件还可以携带一些额外的数据以传递给事件的监听器。
- en: The jQuery library added its own custom events implementation, before it was
    actually added to any web specification. This way, it was proved how useful they
    can be when used in web development. As we saw in the previous chapter, in jQuery,
    there is a specific part of the implementation that handles both the common element
    event and also custom events. The `jQuery.event` object holds all the internal
    implementations related to firing and listening to events. Also, the `jQuery.Event`
    class is a dedicated wrapper that jQuery uses for the needs of both the common
    element events and its custom events implementation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 库在任何网页规范实际添加之前就已经添加了自己的自定义事件实现。这样，就证明了在 web 开发中使用它们时可以有多么有用。正如我们在上一章中看到的，在
    jQuery 中，有一个特定的部分处理通用元素事件和自定义事件。`jQuery.event` 对象保存了与触发和监听事件相关的所有内部实现。此外，`jQuery.Event`
    类是 jQuery 为了满足通用元素事件和其自定义事件实现需要而专门使用的包装器。
- en: Implementing a Pub/Sub scheme using custom events
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用自定义事件实现发布/订阅模式
- en: In the previous chapter, we saw how the `jQuery.fn.on()` method can be used
    to add event listeners on elements. We also saw that its implementation is maintaining
    lists with the added handlers and notifying them when required. Moreover, the
    event name seems to have the same coordination purpose, just like the topic. This
    implementation semantics seem to match exactly with the Pub/Sub Pattern as well.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到 `jQuery.fn.on()` 方法可以用于在元素上添加事件侦听器。我们还看到它的实现在维护添加的处理程序列表并在需要时通知它们。此外，事件名称似乎具有与主题一样的协调目的。这种实现语义似乎与
    Pub/Sub 模式完全匹配。
- en: The `jQuery.fn.trigger()` method actually uses the internal `jQuery.event.trigger()`
    method that is used to fire events in jQuery. It iterates over the internal handlers
    list and executes them with the requested event along with any extra parameters
    that the custom event defines. Once again, this also matches the operation requirements
    of the Pub/Sub Pattern.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`jQuery.fn.trigger()` 方法实际上使用了内部的 `jQuery.event.trigger()` 方法，在 jQuery 中用于触发事件。它在内部处理程序列表上进行迭代，并使用所请求的事件以及自定义事件定义的任何额外参数执行它们。再次，这也符合
    Pub/Sub 模式的操作要求。'
- en: As a result, `jQuery.fn.trigger()` and `jQuery.fn.on()` seem to match the needs
    of the Pub/Sub Pattern and can be used instead of separate "publish" and "subscribe"
    methods, respectively. Since they are both available on the `jQuery.fn` object,
    we can use these methods on any jQuery object. This jQuery object will act as
    an intermediate entity between the publishers and the subscribers, in a way that
    perfectly aligns with the definition of the broker.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`jQuery.fn.trigger()` 和 `jQuery.fn.on()` 似乎符合 Pub/Sub 模式的需求，可以分别用于"publish"和"subscribe"方法。由于它们都可在
    `jQuery.fn` 对象上使用，因此我们可以在任何 jQuery 对象上使用这些方法。这个 jQuery 对象将作为发布者和订阅者之间的中间实体，完全符合代理的定义。
- en: A good common practice, which is also used by a lot of jQuery plugins, is to
    use the outermost page element that holds the implementation of the application
    or the plugin as the broker. On the other hand, jQuery actually allows us to use
    any object as a broker, since all that it actually needs is a target to emit an
    observe for our custom events. As a result, we could even use an empty object
    as our broker such as `$({})`, in case using a page element seems too restricting
    or not clean enough according to the Pub/Sub Pattern. This is actually what the
    jQuery Tiny Pub/Sub library does, along with some method aliasing, so that we
    actually use methods named "publish" and "subscribe" instead of jQuery's "on"
    and "trigger". For more information on Tiny, you can visit its repository page
    at [https://github.com/cowboy/jquery-tiny-pubsub](https://github.com/cowboy/jquery-tiny-pubsub).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的共同做法，也被很多 jQuery 插件所使用，是使用包含应用程序或插件实现的最外层页面元素作为代理。另一方面，jQuery 实际上允许我们使用任何对象作为代理，因为它实际上只需要一个目标来发出观察我们自定义事件的通知。因此，我们甚至可以使用一个空对象作为我们的代理，比如
    `$({})`，以防使用页面元素看起来太受限制或根据 Pub/Sub 模式不够清晰。这实际上就是 jQuery Tiny Pub/Sub 库所做的事情，还有一些方法别名，这样我们实际上使用的是名为
    "publish" 和 "subscribe" 的方法，而不是 jQuery 的 "on" 和 "trigger"。有关 Tiny 的更多信息，您可以访问其仓库页面[https://github.com/cowboy/jquery-tiny-pubsub](https://github.com/cowboy/jquery-tiny-pubsub)。
- en: Demonstrating a sample use case
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展示一个示例用例
- en: In order to see how the Pub/Sub Pattern is used, and make it easy to compare
    it with the Observer Pattern, we are going to rewrite the dashboard example from
    [Chapter 2](part0018_split_000.html#H5A42-e8d3cd3d052d4ee0b4673af57a64ddef "Chapter 2. The
    Observer Pattern"), *The Observer Pattern*, using this pattern. This will also
    clearly demonstrate how this pattern can help us decouple the individual parts
    of an implementation and make it more extendable and scalable.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解 Pub/Sub 模式的使用，并方便将其与观察者模式进行比较，我们将重新编写来自[第2章](part0018_split_000.html#H5A42-e8d3cd3d052d4ee0b4673af57a64ddef
    "Chapter 2. The Observer Pattern")中的仪表板示例，*The Observer Pattern*，并使用这种模式。这还将清楚地演示这种模式如何帮助我们解耦实现的各个部分，并使其更具扩展性和可伸缩性。
- en: Using Pub/Sub on the dashboard example
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在仪表板示例中使用 Pub/Sub
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Just like in our previous implementation, we use `$(document).ready()` in order
    to delay the execution of our code until the page has been fully loaded. First
    of all, we declare our broker and assign it to a new variable on the `window`
    object so that it is globally available on the page. For our application's broker,
    we are using a jQuery object with the outermost container of our implementation,
    which in our case is the `<div>` element with the `dashboardContainer` class.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们以前的实现一样，我们使用`$(document).ready()`来延迟执行我们的代码，直到页面完全加载。首先，我们声明我们的代理并将其分配给`window`对象上的一个新变量，以便在页面上全局可用。对于我们应用程序的代理，我们使用了一个具有我们实现的最外层容器的jQuery对象，我们的情况下是具有`dashboardContainer`类的`<div>`元素。
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Even though using global variables is generally an anti-pattern, we store the
    broker into a global variable since it is an important synchronization point of
    the whole application and must be available for every piece of our implementation,
    even to those that are stored in separate `.js` files. As we will discuss in the
    next chapter about the Module Pattern, the preceding code could be improved by
    storing the broker as a property of the application's namespace.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 即使使用全局变量通常是一个反模式，我们将代理存储为全局变量，因为它是整个应用程序的重要同步点，并且必须对我们实现的每一部分都可用，即使是存储在单独的`.js`文件中的部分也是如此。正如我们将在下一章关于模块模式的讨论中所讨论的，前面的代码可以通过将代理存储为应用程序命名空间的属性来改进。
- en: In order to implement the category selector, we are first observing the `<select>`
    element for the `change` event. When the selected category changes, we create
    our message using a plain JavaScript object with the `value` of the selected `<option>`
    stored in the `categoryID` property. Then, we publish it in the `dashboardCategorySelect`
    topic using the jQuery `jQuery.fn.trigger()` method on our broker. This way, we
    move from a UI element event to a message with application semantics that contains
    all the required information. Right below, in our subscriber's code, we are using
    the `jQuery.fn.on()` method on our broker with the `dashboardCategorySelect` topic
    as a parameter (our custom event), just like we would do to listen for a simple
    DOM event. The subscriber then uses the `categoryID` from the received message,
    just like we did in the implementation of the previous chapter, to display the
    appropriate category items.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现类别选择器，我们首先观察`<select>`元素的`change`事件。当所选类别更改时，我们使用一个简单的JavaScript对象创建我们的消息，并将所选`<option>`的`value`存储在`categoryID`属性中。然后，我们使用jQuery的`jQuery.fn.trigger()`方法在我们的代理上发布它到`dashboardCategorySelect`主题。这样，我们从UI元素事件移动到一个包含所有所需信息的具有应用程序语义的消息。在我们订阅者的代码中，我们使用`jQuery.fn.on()`方法在我们的代理上使用`dashboardCategorySelect`主题作为参数（我们的自定义事件），就像我们监听简单的DOM事件一样。然后订阅者使用从接收到的消息中的`categoryID`，就像我们在前一章的实现中所做的那样，来显示适当的类别项。
- en: Following the same approach, we split the code that handles adding and closing
    information boxes in our dashboard in publishers and subscribers. For the needs
    of this demonstration, the message of the `categoryItemOpen` topic contains just
    the name of the category we want to open. However, in an application where the
    box content is retrieved from a server, we would probably use a category item
    ID instead. The subscriber then uses the category item name from the message to
    create and insert the requested information box.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 按照相同的方法，我们将处理仪表板中添加和关闭信息框的代码分割成发布者和订阅者。为了这个演示的需要，`categoryItemOpen` 主题的消息只包含我们想要打开的类别的名称。然而，在一个从服务器检索框内容的应用程序中，我们可能会使用类别项
    ID。然后订阅者使用消息中的类别项名称创建并插入所请求的信息框。
- en: Similarly, the message for the `categoryItemClose` topic contains the index
    of the box that we want removed. Our publisher uses the `jQuery.fn.closest()`
    method to traverse the DOM and reach the child elements of our `boxContainer`
    element and then uses the `jQuery.fn.index()` method to find its position among
    its siblings. The subscriber then uses `jQuery.fn.eq()` and the `boxIndex` property
    from the received message to filter and remove only the requested information
    box from the dashboard.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`categoryItemClose`主题的消息包含我们要移除的框的索引。我们的发布者使用`jQuery.fn.closest()`方法遍历DOM并到达我们的`boxContainer`元素的子元素，然后使用`jQuery.fn.index()`方法在其同级元素中找到其位置。然后，订阅者使用从接收到的消息中的`boxIndex`属性和`jQuery.fn.eq()`方法来过滤并仅从仪表板中移除所请求的信息框。
- en: Tip
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In a more complex application, instead of the box index, we can associate each
    information box element with a newly retrieved `jQuery.guid` using a mapping object.
    This will allow our publisher to use that `guid` in the message instead of the
    (DOM-related) element index. The subscriber will then search the mapping object
    for that `guid` in order to locate and remove the appropriate box.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在更复杂的应用程序中，我们可以将每个信息框元素与一个新检索到的`jQuery.guid`关联起来，而不是使用框索引，使用一个映射对象。这样，我们的发布者就可以在消息中使用那个`guid`而不是（与DOM相关的）元素索引。订阅者将在映射对象中搜索该`guid`以定位并删除相应的框。
- en: Since we are trying to demonstrate the advantages of the Pub/Sub Pattern, this
    implementation change was not introduced in order to ease the comparison with
    the Observer Pattern and is instead left as a recommended exercise for the reader.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在试图展示Pub/Sub模式的优势，这种实现变化不是为了简化与观察者模式的比较而引入的，而是作为读者的推荐练习留下的。
- en: To summarize the above, we used the `dashboardCategorySelect`, `categoryItemOpen`,
    and `categoryItemClose` topics as our application-level events in order to decouple
    the handling of the user actions from their origin (the UI element). As a result,
    we now have dedicated reusable pieces of code that manipulate our dashboard's
    content, which is equivalent to abstracting them into separate functions. This
    allows us to programmatically publish a series of messages so that we can, for
    example, remove all the existing information boxes and add all the category items
    of the currently selected category. Alternatively, even better, make the dashboard
    show all the items of each category for 10 seconds and then move to the next one.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 总结以上内容，我们使用了`dashboardCategorySelect`、`categoryItemOpen`和`categoryItemClose`主题作为我们的应用级事件，以便将用户操作的处理与它们的来源（UI元素）解耦。因此，我们现在有了专门的可重用代码片段，用于操控我们仪表板的内容，这等同于将它们抽象为单独的函数。这使我们能够以编程方式发布一系列消息，以便我们可以，例如，删除所有现有的信息框并添加当前选择类别的所有类别项。或者，更好的是，让仪表板显示每个类别的所有项10秒，然后切换到下一个。
- en: Extending the implementation
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展实现
- en: In order to demonstrate the scalability that the Pub/Sub Pattern brings with
    it, we will extend our current example by adding a counter with the number of
    boxes that are currently open in the dashboard.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示Pub/Sub模式带来的可扩展性，我们将通过添加一个计数器来扩展我们当前的示例，用于显示当前在仪表板中打开的框的数量。
- en: '![Extending the implementation](img/00016.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![扩展实现](img/00016.jpeg)'
- en: 'For the counter implementation, we will need to add some extra HTML to our
    page and also create and reference a new JavaScript file to hold the counter implementation:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于计数器的实现，我们需要向我们的页面添加一些额外的HTML，并创建并引用一个新的JavaScript文件来保存计数器的实现：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the HTML page of the example, we will need to add an extra `<div>` element
    to hold our counter and some description text. For our counter, we are using an
    `<output>` element, which is a semantic HTML5 element ideal to present results
    of user actions. The browser will use it just like a normal `<span>` element,
    so it will appear right next to its description. Also, since there is initially
    a hint box open in our dashboard, we use a `1` for its initial content:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例的HTML页面中，我们需要添加一个额外的`<div>`元素来容纳我们的计数器和一些描述文本。对于我们的计数器，我们使用一个`<output>`元素，这是一个语义化的HTML5元素，用于呈现用户操作的结果。浏览器将像对待常规的`<span>`元素一样对待它，因此它将出现在其描述的旁边。此外，由于我们的仪表板中最初有一个提示框是打开的，我们使用`1`作为其初始内容：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For the counter implementation itself, all we need to do is add an extra subscriber
    to the dashboard's broker, which is globally available to other JavaScript files
    loaded in the page, since we have attached it to the `window` object. We are simultaneously
    subscribing to two topics, by passing them space delimited to the `jQuery.fn.on()`
    method. Right after this, we locate the counter `<output>` element that has the
    ID `dashboardItemCounter` and parse its text content as a number. In order to
    differentiate our action, based on the topic that the message has received, we
    use the `event` object that jQuery passes as the first parameter to our anonymous
    function, which is our subscriber. Specifically, we use the `type` property of
    the `event` object that holds the topic name of the message that was received
    and based on its value, we change the content of the counter.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于计数器实现本身，我们只需要向仪表板的代理添加一个额外的订阅者，该代理是全局可用的，因为我们将其附加到`window`对象上。我们通过将它们以空格分隔传递给`jQuery.fn.on()`方法来同时订阅两个主题。在此之后，我们定位具有
    ID `dashboardItemCounter` 的计数器`<output>`元素，并将其文本内容解析为数字。为了根据消息接收到的主题来区分我们的动作，我们使用
    jQuery 传递给我们匿名函数的第一个参数，即`event`对象，该对象是我们的订阅者。具体来说，我们使用`event`对象的`type`属性，该属性保存了接收到的消息的主题名称，并根据其值更改计数器的内容。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on the event object that jQuery provides, you can visit
    [http://api.jquery.com/category/events/event-object/](http://api.jquery.com/category/events/event-object/).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 jQuery 提供的事件对象的更多信息，请访问[http://api.jquery.com/category/events/event-object/](http://api.jquery.com/category/events/event-object/)。
- en: Similarly, we could also rewrite the code that prevents accidental double-clicks
    on the category item buttons. All that is needed is to add an extra subscriber
    for the `categoryItemOpen` topic and use the `categoryName` property of the message
    to locate the pressed button.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们也可以重写防止类别项按钮意外双击的代码。所需的一切就是为`categoryItemOpen`主题添加额外的订阅者，并使用消息的`categoryName`属性来定位按下的按钮。
- en: Using any object as a broker
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用任何对象作为代理
- en: While in our example we used the outermost container element of our dashboard
    for ourbroker, it is also common to use the `$(document)` object as a broker.
    Using the application's container element is considered a good semantic practice,
    which also scopes the emitted events.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将仪表板的最外层容器元素用作我们的代理，但通常也可以使用`$(document)`对象作为代理。使用应用程序的容器元素被认为是一种很好的语义实践，它还限定了发出的事件。
- en: As we described earlier in this chapter, jQuery actually allows us to use any
    object as a broker, even an empty one. As a result, we could instead use something
    such as `window.broker = $({});` for our broker, in case we prefer it over using
    a page element.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章前面所描述的，jQuery 实际上允许我们使用任何对象作为代理，甚至是一个空对象。因此，我们可以使用`window.broker = $({});`之类的东西作为我们的代理，以防我们更喜欢它而不是使用页面元素。
- en: By using newly constructed empty objects, we can also easily create several
    brokers, in case such a thing would be preferred for a specific implementation.
    Moreover, in case a centralized broker is not preferred, we could just make each
    publisher the broker of itself, leading to an implementation more like the first/basic
    variant of the Pub/Sub Pattern.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用新构造的空对象，我们还可以轻松创建几个代理，以防特定实现首选这样的情况。此外，如果不喜欢集中式代理，我们可以只将每个发布者作为自己的代理，从而导致实现更像发布/订阅模式的第一种/基本变体。
- en: Since in most cases, a declared variable is used to access the application's
    broker within a page, there is little difference between the above approaches.
    Just choose the one that better matches your team's taste, and in case you change
    your mind at a later point, all you have to do is use a different assignment on
    your `broker` variable.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在大多数情况下，声明的变量用于在页面内访问应用程序的代理，因此上述方法之间几乎没有什么区别。只需选择更符合您团队口味的方法，在以后改变主意时，您只需在`broker`变量上使用不同的赋值即可。
- en: Using custom event namespacing
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义事件命名空间
- en: As a closing note for this chapter, we will present, in short, the mechanism
    that jQuery provides for namespacing custom events. The main benefit of event
    namespacing is that it allows us to use more specific event names that better
    describe their purpose, while also helping us to avoid conflicts between different
    implementation parts and plugins. It also provides a convenient way to unbind
    all the events of a given namespace from any target (element or broker).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本章的结束语，我们将简要介绍 jQuery 提供的自定义事件命名空间机制。事件命名空间的主要好处是它允许我们使用更具体的事件名称来更好地描述它们的目的，同时还帮助我们避免不同实现部分和插件之间的冲突。它还提供了一种方便的方法，可以从任何目标（元素或代理）解绑定给定命名空间的所有事件。
- en: 'A simple example implementation will look as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的示例实现如下所示：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For more information, you can visit the documentation page at [http://docs.jquery.com/Namespaced_Events](http://docs.jquery.com/Namespaced_Events)
    and the article at [https://css-tricks.com/namespaced-events-jquery/](https://css-tricks.com/namespaced-events-jquery/)
    from the CSS-Tricks website.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请访问[http://docs.jquery.com/Namespaced_Events](http://docs.jquery.com/Namespaced_Events)文档页面和
    CSS-Tricks 网站上的文章[https://css-tricks.com/namespaced-events-jquery/](https://css-tricks.com/namespaced-events-jquery/)。
- en: Summary
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we were introduced to the Publish/Subscribe Pattern. We saw
    its similarities with the Observer Pattern and also learned its benefits by doing
    a comparison of the two. We analyzed how the more distinct roles and the extra
    features that the Publish/Subscribe Pattern offers make it an ideal pattern for
    more complex use cases. We saw how jQuery developers adopted some of its concepts
    and brought them to their Observer Pattern implementation as custom events. Finally,
    we rewrote the example from the previous chapter using the Publish/Subscribe Pattern,
    adding some extra features and also achieving greater decoupling between the different
    parts and page elements of our application.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了发布/订阅模式。我们看到了它与观察者模式的相似之处，并通过比较了解了它的好处。我们分析了发布/订阅模式提供的更明确的角色和额外功能如何使其成为更复杂用例的理想模式。我们看到了
    jQuery 开发人员是如何采用其中一些概念并将其带入到他们的观察者模式实现中作为自定义事件的。最后，我们使用发布/订阅模式重新编写了上一章的示例，添加了一些额外功能，并且在我们的应用程序的不同部分和页面元素之间实现了更大程度的解耦。
- en: Now that we have completed our introduction to how the Publish/Subscribe Pattern
    can be used as a first step to decouple the different parts of an implementation,
    we can move on to the next chapter where we will be introduced to the Module Pattern.
    In the next chapter, we will learn how to separate the different parts of an implementation
    into independent modules and how to use namespacing to achieve better code organization
    and define a strict API to achieve communication between the different modules.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了对发布/订阅模式如何作为解耦实现不同部分的第一步的介绍，我们可以继续下一章，在那里我们将介绍模块模式。在下一章中，我们将学习如何将实现的不同部分分离为独立模块，并如何使用命名空间来实现更好的代码组织，并定义严格的
    API 以实现不同模块之间的通信。
