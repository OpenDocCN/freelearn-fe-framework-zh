- en: Better Forms and Event Handling with TypeScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 TypeScript 优化表单和事件处理
- en: 'Let''s talk form. Since the beginning of the book, we have been avoiding form
    inputs in our examples. This is because I wanted to dedicate this entire chapter
    to just forms. We will cover as much as it takes to build business applications
    that collect user information. Here is a breakdown of what you should expect from
    this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈表单。从本书的开头，我们就避免在示例中使用表单输入。这是因为我想将整个章节都专门用于表单。我们将涵盖构建收集用户信息的企业应用所需的所有内容。以下是您应该从这个章节中期待的内容：
- en: Typed form input and output
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带类型表单输入和输出
- en: Form controls
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单控件
- en: Validation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证
- en: Form submission and handling
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单提交和处理
- en: Event handling
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件处理
- en: Control state
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制状态
- en: Creating types for forms
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为表单创建类型
- en: We want to try to utilize TypeScript as much as possible, as it simplifies our
    development process and makes our app behavior more predictable. For this reason,
    we will create a simple data class to serve as a type for the form values.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望尽可能多地使用 TypeScript，因为它简化了我们的开发过程，并使我们的应用行为更加可预测。因此，我们将创建一个简单的数据类来作为表单值的类型。
- en: 'First, create a new Angular project to follow along with the examples. Then,
    use the following command to create a new class:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个新的 Angular 项目以跟随示例。然后，使用以下命令创建一个新的类：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The class is generated in the `app` folder; replace its content with the following
    data class:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 类生成在 `app` 文件夹中；用以下数据类替换其内容：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This class represents all the values our form (yet to be created) will have.
    The properties that are succeeded by a question mark (`?`) are optional, which
    means that TypeScript will throw no errors when the respective values are not
    supplied.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此类代表我们的表单（尚未创建）将拥有的所有值。后面跟着问号（`?`）的属性是可选的，这意味着当相应的值未提供时，TypeScript 不会抛出错误。
- en: 'Before jumping into creating forms, let''s start with a clean slate. Replace
    the `app.component.html` file with the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始创建表单之前，让我们从一张白纸开始。用以下内容替换 `app.component.html` 文件：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the app and leave it running. You should see the following at port `4200`
    of localhost (remember to include Bootstrap):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用并保持其运行。您应该在本地主机的 `4200` 端口看到以下内容（请记住包括 Bootstrap）：
- en: '![](img/61c38bbd-b40e-433e-9ebd-75b6eed4d0a9.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/61c38bbd-b40e-433e-9ebd-75b6eed4d0a9.png)'
- en: The form module
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单模块
- en: 'Now that we have a contract that we want the form to follow, let''s now generate
    the form''s component:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个想要表单遵循的合约，现在让我们生成表单的组件：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The command also adds the component as a declaration to our `App` module:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 命令还将组件作为声明添加到我们的 `App` 模块中：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'What makes Angular forms special and easy to use are functionalities provided
    out-of-the-box, such as the `NgForm` directive. Such functionalities are not available
    in the core browser module but in the form module. Hence, we need to import them:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使 Angular 表单特别且易于使用的是开箱即用的功能，如 `NgForm` 指令。这些功能在核心浏览器模块中不可用，但在表单模块中可用。因此，我们需要导入它们：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Simply importing and adding `FormModule` to the `imports` array is all we needed
    to do.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地导入并将 `FormModule` 添加到 `imports` 数组中，这就是我们所需做的。
- en: Two-way binding
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 双向绑定
- en: 'The perfect time to start showing some form controls using the form component
    in the browser is right now. Keeping the state in sync between the data layer
    (model) and the view can be very challenging, but with Angular it''s just a matter
    of using one directive exposed from `FormModule`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是使用浏览器中的表单组件显示一些表单控件的最佳时机。在数据层（模型）和视图之间保持状态同步可能非常具有挑战性，但使用 Angular，这只是一个使用来自
    `FormModule` 的一个指令的问题：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Angular relies on the `name` attribute internally to carry out binding. For
    this reason, the `name` attribute is required.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 依赖于内部的 `name` 属性来执行绑定。因此，`name` 属性是必需的。
- en: 'Pay attention to `[(ngModel)]="flightModel.fullName"`; it''s trying to bind
    a property on the component class to the form. This model will be of the `Flight` type,
    which is the class we created earlier:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `[(ngModel)]="flightModel.fullName"`；它试图将组件类上的属性绑定到表单。此模型将是 `Flight` 类型，这是我们之前创建的类：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `flightModel` property is added to the component as a `Flight` type and
    initialized with some default values.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `flightModel` 属性添加到组件中，类型为 `Flight` 并初始化为一些默认值。
- en: 'Include the component in the app HTML, so it can be displayed in the browser:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用 HTML 中包含组件，以便它可以在浏览器中显示：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is what you should have in the browser:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您应该在浏览器中看到的内容：
- en: '![](img/7632cd3a-a1e3-4da8-b126-17290af51232.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7632cd3a-a1e3-4da8-b126-17290af51232.png)'
- en: 'To see two-way binding in action, use interpolation to display the value of
    `flightModel.fullName`. Then, enter a value and see the live update:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看双向绑定的实际效果，使用插值显示`flightModel.fullName`的值。然后，输入一个值并查看实时更新：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here is what it looks like:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它的样子：
- en: '![](img/26ef4055-66f5-4517-85ff-3f2508be6682.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/26ef4055-66f5-4517-85ff-3f2508be6682.png)'
- en: More form fields
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多表单字段
- en: Let's get hands-on and add the remaining form fields. After all, we can't book
    a flight by just supplying our names.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们动手添加剩余的表单字段。毕竟，我们不能只提供我们的名字就预订航班。
- en: 'The `from` and `to` fields are going to be *select boxes* with a list of cities
    we can fly into and out of. This list of cities will be stored right in our component
    class, and then we can iterate over it in the template and render it as a select
    box:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`from`和`to`字段将是一个带有可以飞入和飞出的城市列表的*选择框*。这个城市列表将直接存储在我们的组件类中，然后我们可以在模板中遍历它并将其渲染为选择框：'
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The array stores a few cities from around the world as strings. Let''s now
    use the `ngFor` directive to iterate over the cities and display them on the form
    using a select box:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 数组存储了来自世界各地的几个城市作为字符串。现在让我们使用`ngFor`指令遍历城市，并在表单中使用选择框显示它们：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Neat and clean! You can open the browser and see it right there:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 清晰整洁！您可以在浏览器中打开并直接看到它：
- en: '![](img/cc07e8d4-009d-479f-ab6d-e598fdbd6b3b.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cc07e8d4-009d-479f-ab6d-e598fdbd6b3b.png)'
- en: 'The select drop-down, when clicked, shows a list of cities, as expected:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击下拉选择框时，会显示城市列表，正如预期的那样：
- en: '![](img/74a07788-3491-415c-8cea-90ed0bd340ea.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/74a07788-3491-415c-8cea-90ed0bd340ea.png)'
- en: 'Next, let''s add the trip type field (radio buttons), the departure date field
    (date control), and the arrival date field (date control):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们添加行程类型字段（单选按钮）、出发日期字段（日期控件）和到达日期字段（日期控件）：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'How the data is bound to the controls is very similar to the text and select
    fields that we created previously. The major difference is the types of control
    (radio buttons and dates):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 数据绑定到控件的方式与之前创建的文本和选择字段非常相似。主要区别是控件类型（单选按钮和日期）：
- en: '![](img/93d3b746-b068-4e0b-9337-ac684ef5d492.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/93d3b746-b068-4e0b-9337-ac684ef5d492.png)'
- en: 'Lastly, add the number of passengers (adults, children, and infants):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，添加乘客数量（成人、儿童和婴儿）：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The passengers section are all of the number type because we are just expected
    to pick the number of passengers coming onboard from each category:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 乘客部分都是数字类型，因为我们只是预期从每个类别中挑选上船的乘客数量：
- en: '![](img/4f24bb9e-6103-4069-8780-86979a25aa23.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4f24bb9e-6103-4069-8780-86979a25aa23.png)'
- en: Validating the form and form fields
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证表单和表单字段
- en: Angular greatly simplifies form validation by using its built-in directives
    and state properties. You can use the state property to check whether a form field
    has been touched. If it's touched but violates a validation rule, you can use
    the `ngIf` directive to display associated errors.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Angular通过使用其内置指令和状态属性大大简化了表单验证。您可以使用状态属性来检查表单字段是否已被触摸。如果它已被触摸但违反了验证规则，您可以使用`ngIf`指令来显示相关错误。
- en: 'Let''s see an example of validating the full name field:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看验证全名字段的例子：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We just added three extra significant attributes to our form's full name field: `#name`,
    `required`, and `minlength`. The `#name` attribute is completely different from
    the `name` attribute in that the former is a template variable that holds information
    about this given field via the `ngModel` value while the latter is the usual form
    input name attribute.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是为表单的全名字段添加了三个额外的显著属性：`#name`、`required`和`minlength`。`#name`属性与`name`属性完全不同，前者是一个模板变量，通过`ngModel`值持有关于此特定字段的信息，而后者是常规表单输入名称属性。
- en: In Angular, validation rules are passed as attributes, which is why `required`
    and `minlength` are there.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular中，验证规则作为属性传递，这就是为什么会有`required`和`minlength`。
- en: 'Yes, the fields are validated, but there are no feedbacks to the user on what
    must have gone wrong. Let''s add some error messages to be shown when form fields
    are violated:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，字段已经进行了验证，但没有向用户反馈出什么出了问题。让我们添加一些错误消息，当表单字段违反时显示：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `ngIf` directive shows these `div` elements conditionally:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`ngIf`指令条件性地显示这些`div`元素：'
- en: If the form field has been touched but there's no value in it, the Name is required error
    is shown
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果表单字段已被触摸但没有值，则会显示“名称是必需的”错误
- en: Name must be at least 6 characters long is also shown when the field is touched
    but the content length is less than *6*.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当字段被触摸但内容长度小于*6*时，也会显示“名称至少为6个字符长”。
- en: 'The following two screenshots show these error outputs in the browser:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两个截图显示了这些错误输出在浏览器中的样子：
- en: '![](img/24770a2a-1b0f-4039-926b-abccb82b063a.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/24770a2a-1b0f-4039-926b-abccb82b063a.png)'
- en: 'A different error is shown when a value is entered but the value text count
    is not up to 6:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当输入值但值文本计数未达到6时，会显示不同的错误：
- en: '![](img/46db1233-a42c-45db-9ae2-739fb0952514.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/46db1233-a42c-45db-9ae2-739fb0952514.png)'
- en: Submitting forms
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提交表单
- en: 'We need to consider a few factors before submitting a form:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交表单之前，我们需要考虑几个因素：
- en: Is the form valid?
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单是否有效？
- en: Is there a handler for the form prior to submission?
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在提交之前是否有表单的处理程序？
- en: 'To make sure that the form is valid, we can disable the Submit button:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保表单有效，我们可以禁用提交按钮：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'First, we add a template variable called `flightForm` to the form and then
    use the variable to check whether the form is valid. If the form is invalid, we
    disable the button from being clicked:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在表单中添加一个名为`flightForm`的模板变量，然后使用该变量检查表单是否有效。如果表单无效，我们禁用按钮的点击：
- en: '![](img/99a2e768-93a1-436b-a474-ba333e7fb8ba.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/99a2e768-93a1-436b-a474-ba333e7fb8ba.png)'
- en: 'To handle the submission, add an `ngSubmit` event to the form. This event will
    be called when the button is clicked:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理提交，向表单添加一个`ngSubmit`事件。当按钮被点击时，将调用此事件：
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can now add a class method, `handleSubmit`, to handle the form submission.
    A simple log to the console may be just enough for this example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以添加一个名为`handleSubmit`的方法，用于处理表单提交。在这个例子中，简单的控制台日志可能就足够了：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Handling events
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理
- en: Forms are not the only way we receive values from users. Simple DOM interactions,
    mouse clicks, and keyboard interactions can raise events that could lead to a
    request from our users. Of course, we have to handle their requests one way or
    another. There are numerous events that we can't talk about in this book. What
    we can do is look at basic keyboard and mouse events.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 表单并不是我们接收用户输入的唯一方式。简单的DOM交互、鼠标点击和键盘交互都可以引发可能导致用户请求的事件。当然，我们必须以某种方式处理他们的请求。这本书中有很多我们无法讨论的事件。我们可以做的是查看基本的键盘和鼠标事件。
- en: Mouse events
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 鼠标事件
- en: 'To demonstrate the two popular mouse events, click and double-click, create
    a new Angular project and then add the following autogenerated `app.component.html`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示两种流行的鼠标事件，点击和双击，创建一个新的Angular项目，然后添加以下自动生成的`app.component.html`：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'A `counter` property is bound to the view using interpolation and Increment
    and Decrement buttons. The property is available on the app component and is initialized
    to zero:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用插值和递增和递减按钮将`counter`属性绑定到视图。该属性在app组件中可用，并初始化为零：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following is what it baically looks like:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是其基本外观：
- en: '![](img/b3831e47-a5b0-41ec-a37c-f9d5894d0061.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b3831e47-a5b0-41ec-a37c-f9d5894d0061.png)'
- en: 'Clicking the buttons does absolutely nothing. Let''s add a click event to the
    Increment button, so it adds 1 to the counter property every time it''s clicked:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 点击按钮没有任何作用。让我们给递增按钮添加一个点击事件，每次点击都会将计数属性加1：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We need to bind this event handler to the button in the template for us to
    actually increment the counter when the button is clicked:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将此事件处理程序绑定到模板中的按钮，以便在按钮被点击时实际增加计数器：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Events are bound to the template using attributes but wrapping the attribute
    in parentheses. The attribute value becomes the method on the component class
    that will serve as the event handler.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 事件通过属性绑定到模板上，但将属性包裹在括号中。属性值成为组件类上的方法，将作为事件处理程序。
- en: 'We need the same functionality for Decrement. Assuming that decrementing is
    an action you want to ensure that the user intended to implement, you can attach
    a double-click event:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为递减功能提供相同的功能。假设递减是一个你想要确保用户有意实施的操作，你可以附加一个双击事件：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As you can see, instead of using `click`, we use the `dblclick` event and then
    bind the decrement event handler to it. The handler is just an inverse of the
    increment handler with a check to see whether we have hit zero:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们不是使用`click`，而是使用`dblclick`事件，然后将递减事件处理程序绑定到它。处理程序只是递增处理程序的逆操作，并检查我们是否达到了零：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following shows the new events in action:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下展示了新事件的实际应用：
- en: '![](img/0afbe16e-d007-41f3-a927-ffd0c386fa24.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0afbe16e-d007-41f3-a927-ffd0c386fa24.png)'
- en: Keyboard events
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 键盘事件
- en: 'You can track keyboard interactions by listening to various keyboard events.
    The `keypress` event tells you that a button is clicked; if you have a listener
    attached to it, the listener is fired. You can attach keyboard events in the same
    way that we attached mouse events:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过监听各种键盘事件来跟踪键盘交互。`keypress`事件告诉你一个按钮被点击了；如果你有一个监听器附加到它上面，那么监听器就会被触发。你可以以与我们附加鼠标事件相同的方式附加键盘事件：
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The element with the `key-bg` class is shown when a key is pressed; it displays
    the exact key we pressed, which is held in the `key` property. The `keyPressed`
    property is a Boolean that we set to `true` when a key is pressed.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当按下键时，具有`key-bg`类的元素会被显示出来；它显示我们按下的确切键，该键存储在`key`属性中。`keyPressed`属性是一个布尔值，我们在按下键时将其设置为`true`。
- en: 'The event fires the `showKey` listener; let''s implement it:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 事件触发`showKey`监听器；让我们来实现它：
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `showKey` handler does the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`showKey`处理程序执行以下操作：'
- en: It sets the `key` property with the value of the pressed key
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将`key`属性设置为按下的键的值
- en: The pressed key is represented as a lowercase string, so we use the `toUpperCase`
    method to transform it to uppercase
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下的键被表示为一个小写字符串，所以我们使用`toUpperCase`方法将其转换为大写
- en: The `keyPressed` property is set to `true`, so it displays the pressed key,
    and is then set to `false` after 500 miliseconds, so the shown key is hidden
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keyPressed`属性被设置为`true`，因此它显示按下的键，然后在500毫秒后将其设置为`false`，所以显示的键会被隐藏'
- en: 'When you press a key (and the `container` div has focus), the following screenshot
    shows what happens:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当你按下键（并且`container` div 有焦点时），以下截图显示了会发生什么：
- en: '>![](img/865639ab-db68-4952-b736-2ee817c0ecc6.png)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '>![](img/865639ab-db68-4952-b736-2ee817c0ecc6.png)'
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You now have a great deal of knowledge about collecting user inputs either via
    forms or events. We also covered important features of forms, such as typed inputs,
    validation, two-way binding, submission, and so on. The event examples we saw
    covered both mouse and keyboard events and how to handle them. All these interesting
    encounters prepare you for building business applications.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在对通过表单或事件收集用户输入有了大量的了解。我们还涵盖了表单的重要特性，例如文本输入、验证、双向绑定、提交等。我们看到的示例事件涵盖了鼠标和键盘事件以及如何处理它们。所有这些有趣的遭遇都为你构建商业应用程序做好了准备。
