- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating Your First Web Application in Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Angular** is a popular and modern **JavaScript** framework that can run on
    different platforms, including the web, desktop, and mobile. Angular applications
    are written in **TypeScript**, a superset of JavaScript that provides syntactic
    sugar, such as strong typing and object-oriented techniques.'
  prefs: []
  type: TYPE_NORMAL
- en: Angular applications are created and developed using a command-line tool made
    by the Angular team called the **Angular CLI**. It automates many development
    tasks, such as scaffolding, testing, and deploying Angular applications, which
    would take much time to configure manually.
  prefs: []
  type: TYPE_NORMAL
- en: The popularity of the Angular framework is considerably reflected in its broad
    tooling support. The **Visual Studio Code (VS Code)** editor contains various
    extensions that enhance the development experience when working with Angular.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to the Angular CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the rich ecosystem of Angular tooling in VS Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first Angular application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with the Angular framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using **Nx Console** to automate Angular CLI commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Essential background theory and context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Angular framework is a cross-platform JavaScript framework that can run
    on various environments, including the web, server, mobile, and desktop. It consists
    of a collection of JavaScript libraries that we can use to build highly performant
    and scalable web applications. The architecture of an Angular application is based
    on a hierarchical representation of components. Components are the fundamental
    building blocks of an Angular application. They represent and control a particular
    portion of a web page called the **view**. Some examples of components are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of blog posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An issue reporting form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A weather display widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Components of an Angular application can be logically organized as a tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Component tree](img/B18465_01_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Component tree
  prefs: []
  type: TYPE_NORMAL
- en: An Angular application typically has one main component by convention, called
    `AppComponent`. Each component in the tree can communicate and interact with its
    siblings using an application programming interface, defined by each component.
  prefs: []
  type: TYPE_NORMAL
- en: 'An Angular application can have many features that are called **modules**.
    Each module serves a block of single functionality corresponding to a particular
    application domain or workflow. Angular modules are used to group Angular components
    that share similar functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Module hierarchy](img/B18465_01_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Module hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: In the previous diagram, the dashed line circles represent Angular modules.
    An Angular application typically has one main module by convention, called `AppModule`.
    Each module can import other modules in an Angular application if they wish to
    use part of their functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The functionality of a module can be further analyzed in the presentational
    and business logic of a feature. Angular components should only handle the presentational
    logic and delegate business logic tasks to services. The Angular framework provides
    Angular services to components using a built-in **dependency injection (DI)**
    mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular DI framework uses special-purpose objects, called **injectors**,
    to hide much of the complexity of providing dependencies to an Angular application.
    Components are not required to know the actual implementation of an Angular service.
    They only need to ask for it from an injector.
  prefs: []
  type: TYPE_NORMAL
- en: 'An Angular service should follow the **single responsibility principle** and
    not cross boundaries between different modules. Some examples of services are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing data from a backend API using the HTTP protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with the local storage of the browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data transformations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Angular developer does not need to remember how to create components, modules,
    and services by heart while building an Angular application. Luckily, the Angular
    CLI can assist us by providing a command-line interface to accomplish these tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the Angular CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Angular CLI is a tool created by the Angular team that improves the developer
    experience while building Angular applications. It hides the complexity of scaffolding
    and configuring an Angular application while allowing developers to concentrate
    on what they do best – coding! Before we can start using the Angular CLI, we need
    to set up the following prerequisites in our system:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js**: A JavaScript runtime that is built on the v8 engine of Chrome.
    You can download any **Long-Term Support (LTS)** version from [https://nodejs.org](https://nodejs.org).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**npm**: A package manager for the Node.js runtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can then install the Angular CLI using `npm` from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We use the `-g` option to install the Angular CLI globally, since we want to
    create Angular applications from any operating system path.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Angular CLI may require administrative privileges in some operating
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that the Angular CLI has been installed correctly, we can run the
    following from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will report the version of the Angular CLI installed in
    our system. The Angular CLI provides a command-line interface through the `ng`
    command, which is the binary executable of the Angular CLI. It can accept various
    options, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`serve`: Build and serve an Angular application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build`: Build an Angular application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test`: Run the unit tests of an Angular application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generate`: Generate a new Angular artifact, such as a component or module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add`: Install a third-party library compatible with the Angular framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`new`: Create a new Angular application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The previous options are the most common ones. If you want to view all the
    available commands, execute the following in the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will display a list of all the supported commands from
    the Angular CLI.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular tooling ecosystem is full of extensions and utilities that can help
    us when developing Angular applications. In the next section, we will learn some
    of those that work with VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the rich ecosystem of Angular tooling in VS Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many extensions available in the **VS Code Marketplace** that enhance
    the Angular tooling ecosystem. In this section, we will learn about the most popular
    ones that can significantly help us in Angular development:'
  prefs: []
  type: TYPE_NORMAL
- en: Nx Console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular Language Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular Snippets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular Evergreen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Material Icon Theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding list is not exhaustive; some extensions are already included in
    the **Angular Essentials** extension pack. However, you can browse more Angular
    extensions for VS Code at [https://marketplace.visualstudio.com/search?term=angular&target=VSCode](https://marketplace.visualstudio.com/search?term=angular&target=VSCode).
  prefs: []
  type: TYPE_NORMAL
- en: Nx Console
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Nx Console** is a VS Code extension developed by the Nrwl team that provides
    a graphical user interface over the Angular CLI. It contains most of the Angular
    CLI commands and uses the Angular CLI internally to execute each one. We will
    learn more about this extension in the *Building our application with Nx Console*
    section.'
  prefs: []
  type: TYPE_NORMAL
- en: Angular Language Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Angular Language Service** extension provides various enhancements while
    editing HTML templates in an Angular application, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Code autocompletion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile error messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go-to definition techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Code autocompletion is a feature that helps us find the right property or method
    to use while typing. It works by displaying a list of suggestions while we start
    typing in HTML content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18465_01_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Code completion
  prefs: []
  type: TYPE_NORMAL
- en: In the previous screenshot, the Angular Language Service suggests the **description**
    component property when we start typing the word `descr`. Notice that code completion
    only works for the public properties and methods in a component.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most common issues when developing web applications is detecting
    errors before the application reaches production. This problem can be solved partially
    by the Angular compiler, which is bootstrapped upon building an Angular application
    for production. Moreover, the Angular Language Service can take this further by
    displaying compilation error messages long before our application reaches the
    compilation process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_01_04.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – Compile error message
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we accidentally misspell the name of a property or method of
    the component, the Angular Language Service will display an appropriate error
    message.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Snippets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Angular Snippets** extension contains a collection of Angular code snippets
    for TypeScript and HTML. In TypeScript, we can use it to create components, modules,
    or services in a blank TypeScript file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_01_05.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – New Angular component snippet
  prefs: []
  type: TYPE_NORMAL
- en: 'In an HTML template, we can use the extension to create useful Angular artifacts,
    such as the ***ngFor** directive, to loop through a list in HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_01_06.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – *ngFor snippet
  prefs: []
  type: TYPE_NORMAL
- en: Due to the widespread popularity and capabilities of the Angular CLI, it looks
    more convenient to use it to generate Angular artifacts in TypeScript. However,
    Angular Snippets does a great job with the HTML part, where there are more things
    to remember by heart.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Evergreen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A primary factor that makes the Angular framework so stable is that it follows
    a regular release cycle based on semantic versioning. If we want our Angular applications
    to be packed with the latest features and fixes, we must update them regularly.
    But how can we stay up to date most efficiently? We can use the **Angular Evergreen**
    extension!
  prefs: []
  type: TYPE_NORMAL
- en: 'It compares the Angular and Angular CLI versions of an Angular CLI project
    with the latest ones and alerts you about whether you need to update it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_01_07.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – Angular Evergreen
  prefs: []
  type: TYPE_NORMAL
- en: 'It provides an easy-to-use user interface to execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading Angular dependencies to the *latest* version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading Angular dependencies to the *next* version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading all npm dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular Evergreen is the perfect extension to always stay updated with your
    Angular projects.
  prefs: []
  type: TYPE_NORMAL
- en: Material Icon Theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last extension in the list adds little value regarding the productivity
    of the developer. Instead, it focuses on the discoverability and aesthetic point
    of view by modifying the icon theme of VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: The **Material Icon Theme** contains a ton of icons that are based on **Google
    Material Design**. It can understand each file type in your project and display
    the related icon automatically. For example, Angular modules are indicated with
    a red Angular icon, whereas components are shown with a blue Angular icon.
  prefs: []
  type: TYPE_NORMAL
- en: 'VS Code has a default file icon theme called **Seti**. Once you’ve installed
    Material Icon Theme, it will prompt you to select which one you would like to
    activate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Selecting a file icon theme](img/B18465_01_08.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – Selecting a file icon theme
  prefs: []
  type: TYPE_NORMAL
- en: Selecting **Material Icon Theme** will automatically update the icons of your
    current Angular project.
  prefs: []
  type: TYPE_NORMAL
- en: Material Icon Theme is installed and applied globally to VS Code, so you do
    not need to activate it separately for each Angular CLI project.
  prefs: []
  type: TYPE_NORMAL
- en: Now, when you open your Angular project, you will understand the type of each
    file at a glance, even if its name is not displayed wholly on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we will use Angular CLI to create a new Angular application
    from scratch. Then, we will interact with the core functionality of the Angular
    framework to make a simple change to our application. Finally, we will learn how
    to use the Nx Console extension to build and serve our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build time: 15 minutes.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following software tools are required to complete this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Git**: A free and open-source distributed version control system. You can
    download it from [https://git-scm.com](https://git-scm.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VS Code**: A code editor that you can download from [https://code.visualstudio.com](https://code.visualstudio.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Angular CLI**: We introduced the command-line interface for Angular in the
    *Essential background theory and context* section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitHub material**: The code for this chapter, which you can find in the `Chapter01`
    folder at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first Angular application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a fresh new Angular application, we must execute the `ng new` command
    of the Angular CLI, passing the name of the application as an option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `ng new` command is used to create a new Angular application or a new Angular
    workspace. An Angular workspace is an Angular CLI project containing one or more
    Angular applications, some of which can be Angular libraries. So, when we execute
    the `ng new` command, we create an Angular workspace with an Angular application
    by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous command, the name of our Angular application is `my-app`. Upon
    executing the command, the Angular CLI will ask some questions to collect as much
    information as possible regarding the nature of the application we want to create:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Initially, it will ask if we want to enable Angular analytics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Angular CLI will only ask the previous question once, when we create our
    first Angular project, and apply it globally in your system. However, we can change
    the setting later in a specific Angular workspace.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, it will ask whether we want to enable routing in our Angular application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Routing in Angular is all about navigating between the components of an Angular
    application using a URL. We are not concerned with routing in this project, so
    press *Enter* to accept the default value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, the Angular CLI prompts us to select the style format that we want to
    use throughout the Angular application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Select a format from the list of available stylesheets and press *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Angular CLI initiates the creation process of your Angular application,
    which consists of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding the necessary folder structure of a typical Angular CLI project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the required npm dependencies and Angular packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initializing Git in the Angular CLI project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This process may take some time, depending on the speed of your network. Once
    it has finished, you should have a new folder named `my-app` in the path where
    you ran the `ng new` Angular CLI command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the time has finally come to run our Angular application and see it in
    action:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal window and navigate to the `my-app` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following Angular CLI command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding command will build the Angular application and start a built-in
    web server that we can use to preview it. The web server is started in watch mode;
    it automatically rebuilds the Angular application whenever we change the code.
    The first time an Angular application is built, it takes considerable time to
    complete, so we must be patient. We will know when the process has finished with
    no errors when we see the following message in the terminal window:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.11 – Angular build output](img/B18465_01_09.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 1.9 – Angular build output
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Fire up your favorite browser and navigate to `http://localhost:4200` to get
    a preview of your brand-new Angular application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18465_01_10.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 – Minimal Angular application
  prefs: []
  type: TYPE_NORMAL
- en: The Angular CLI creates a minimal Angular application by default to provide
    us with a starting point for our Angular project. It contains some ready-made
    CSS styles and HTML content, which we will learn how to change according to our
    specifications in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with the Angular framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with Angular, the real fun starts when we get our hands dirty with
    the framework itself. After all, understanding how Angular works and writing the
    application code is what matters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The application source code resides inside the `src\app` folder at the root
    of our Angular CLI project. It contains all the files needed to build and test
    our Angular application, including a component and a module. The component is
    the main component of the Angular application:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app.component.ts`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following properties characterize an Angular component:'
  prefs: []
  type: TYPE_NORMAL
- en: '`selector`: A unique name used to identify and declare the component inside
    HTML content. It is an HTML tag, just like any native HTML element, such as `<app-root></app-root>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Angular CLI provides the `app-` prefix by default in component selectors.
    We can use a custom one using the `--prefix` option when creating a new Angular
    CLI application from scratch. A custom prefix can be based on the name of an organization
    or a particular product, and it helps avoid collisions with other libraries or
    modules.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`templateUrl`: The path pointing to an HTML file that contains the HTML content
    of the component, which is called the component template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`styleUrls`: A list of paths where each one points to a stylesheet file containing
    the CSS styles of the component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding properties are defined using the `@Component` decorator. It is
    a function that decorates the TypeScript class of the component and recognizes
    it as an Angular component. The `title` property of the `AppComponent` class is
    a public property that contains a string value and can be used in the component
    template.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main module of our Angular application uses a similar decorator called
    `@NgModule` to define its properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app.module.ts`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The decorator of an Angular module defines a set of properties that can be
    used to configure the module. The most common ones are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`declarations`: Defines Angular components that are part of the Angular module.
    Every component that exists in the Angular module *must* be added to the `declarations`
    array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`imports`: Defines other Angular modules that contain the functionality the
    Angular module needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s get our feet wet now by modifying the code of our Angular application.
    We will change the following greeting message, which is displayed at application
    startup, to something more meaningful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_01_11.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 – Greeting message
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to find where the message in the previous screenshot is declared.
    The main component of an Angular application is the component that is loaded at
    application startup by default.
  prefs: []
  type: TYPE_NORMAL
- en: The `bootstrap` property of the main module of the application indicates the
    component that is displayed when an Angular application is bootstrapped. We rarely
    need to change this property. The selector of that component is used in the `index.html`
    file by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the message should be declared inside the `app.component.ts` file. Let’s
    take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the VS Code editor and select **File | Open folder…** from the main menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the `my-app` folder of the Angular application that we created and select
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `src\app` folder from the **EXPLORER** pane and select the `app.component.ts`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Locate the `title` property in the `AppComponent` class and change its value
    to `Angular Projects`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run `ng serve` from the terminal window if the application is not running,
    and navigate to `http://localhost:4200` using your browser. Our Angular application
    should now display the following greeting message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.14 – Greeting message](img/B18465_01_12.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.12 – Greeting message
  prefs: []
  type: TYPE_NORMAL
- en: 'The `title` property is bound to the template of the main component. If we
    open the `app.component.html` file and go to line 344, we will see the following
    HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `{{}}` syntax surrounding the `title` property is called **interpolation**.
    During interpolation, the Angular framework reads the enclosed component property
    value, converts it into text, and prints it on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular CLI provides a rich collection of commands to assist us during our
    daily development routine. However, many developers struggle to use the command
    line and prefer a more graphical approach. In the next section, we will learn
    how to use the Nx Console, a graphical user interface for the Angular CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Using Nx Console for automating Angular CLI commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Angular CLI is a command-line tool with a variety of commands. Each command
    can accept a wide range of options and parameters according to the task we want
    to accomplish. Remembering these commands and their options by heart is daunting
    and time-consuming. In such cases, the ecosystem of Angular tooling can come in
    handy. VS Code Marketplace contains many useful extensions that we can install
    to help us during Angular development. One of these extensions is the Nx Console,
    which provides a user interface over the Angular CLI. To install the Nx Console
    in your environment, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open VS Code and click on the **Extensions** menu in the sidebar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.15 – VSCode Extensions](img/B18465_01_13.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.13 – VS Code Extensions
  prefs: []
  type: TYPE_NORMAL
- en: In the **EXTENSIONS** pane that appears, type `Nx Console`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Install** button on the first item to install the Nx Console extension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Nx Console extension is now installed globally in our environment, so we
    can use it in any Angular project. It is a graphical representation of the most
    common Angular CLI commands. Currently, it supports the following commands (the
    related Angular CLI command is shown in parentheses):'
  prefs: []
  type: TYPE_NORMAL
- en: '**generate**: Generate new Angular artifacts, such as components and modules
    (`ng generate`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**run**: Run an architect target, as defined in the `angular.json` configuration
    file of the Angular CLI workspace (`ng run`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**build**: Build an Angular application (`ng build`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**serve**: Build and serve an Angular application (`ng serve`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**test**: Run the unit tests of an Angular application (`ng test`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Nx Console can almost achieve whatever we can do with the Angular CLI.
    The real benefit is that the developer does not need to remember all the Angular
    CLI command options, as they are all represented in a graphical interface. Let’s
    see how:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `my-app` folder using VS Code and click on the **Nx Console** menu
    in the sidebar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.16 – Nx Console](img/B18465_01_14.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.14 – Nx Console
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **serve** command from the **PROJECTS** pane and click the **play**
    button to execute it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18465_01_15.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.15 – The serve command
  prefs: []
  type: TYPE_NORMAL
- en: 'VS Code opens an integrated terminal at the bottom of the editor and executes
    the **ng serve** command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_01_16.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.16 – VS Code integrated terminal
  prefs: []
  type: TYPE_NORMAL
- en: It is the same command we run when using the Angular CLI from a terminal window.
  prefs: []
  type: TYPE_NORMAL
- en: The Nx Console uses **tasks** internally to run Angular CLI commands. Tasks
    are a built-in mechanism of VS Code that allow us to run scripts or start external
    processes without interacting directly with the command line.
  prefs: []
  type: TYPE_NORMAL
- en: The Nx Console extension does a fantastic job of removing the burden of remembering
    Angular CLI commands by heart. The VS Code Marketplace contains many more extensions
    for Angular developers that supplement the job of the Nx Console.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the basic principles of the Angular framework
    and provided a brief overview of the Angular architecture. We saw some popular
    extensions for VS Code that we can use to enhance our development experience while
    working with Angular.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we learned how to use the Angular CLI, a powerful tool of the Angular
    ecosystem, to scaffold and build a new Angular application from scratch. We also
    made our first interaction with Angular code by modifying the Angular component
    of a typical Angular CLI application. Finally, we installed the Nx Console extension
    and learned how to build our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at the Angular Router and learn how to use
    it to create a personal blog, using the Scully static website generator.
  prefs: []
  type: TYPE_NORMAL
- en: Practice questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s take a look at a few practice questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the basic building block of an Angular application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we group components of similar functionality?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Who handles business logic tasks in an Angular application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Angular CLI command can we use to create a new Angular application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Angular CLI command can we use to serve an Angular application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we declare an Angular component in HTML?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we declare Angular components in a module?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What syntax do we use to bind text on HTML templates?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the benefit of using the Nx Console?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which extension do we use to perform static analysis in our Angular code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some links to build upon what we learned in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Introduction to Basic Angular Concepts: [https://angular.io/guide/architecture](https://angular.io/guide/architecture)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Interpolation: [https://angular.io/guide/interpolation](https://angular.io/guide/interpolation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nx Console: [https://nx.dev/core-features/integrate-with-editors#vscode-plugin:-nx-console](https://nx.dev/core-features/integrate-with-editors#vscode-plugin:-nx-console)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular Essentials: [https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials](https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular Evergreen: [https://expertlysimple.io/get-evergreen](https://expertlysimple.io/get-evergreen)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
