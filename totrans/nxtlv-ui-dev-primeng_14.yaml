- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Responsive Web Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will apply your existing knowledge by building a responsive
    web application using Angular and PrimeNG components. The focus will be on creating
    an application that adapts seamlessly to different screen sizes and devices. By
    the end of this chapter, you will have a solid understanding of how to design
    and develop responsive web applications using Angular and PrimeNG.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this chapter is to provide you with the knowledge and skills necessary
    to build responsive web applications. You will observe how to create a project
    structure that implements responsive layouts that adapt to different screen sizes
    and leverage PrimeNG and PrimeFlex to enhance the user experience. Additionally,
    you will gain insights into deploying the application, ensuring that it reaches
    a wide audience.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to building a responsive web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing our responsive web application project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the layout of the website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting to develop the website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the responsive web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains code examples for an Angular application. You can find
    the related source code in the `chapter-14` folder of the following GitHub repository:
    [https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-14](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-14).'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to building a responsive web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Responsive web applications have become a necessity in today’s digital landscape.
    With users accessing websites and applications on various devices, it is crucial
    for you to create experiences that seamlessly adapt to different screen sizes
    and orientations. In this section, we will provide an overview of responsive web
    applications and explore why they are essential in delivering a satisfying user
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: Why responsive web applications matter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the past, websites were primarily designed for desktop computers with fixed
    screen sizes. However, with the rapid proliferation of smartphones, tablets, and
    other mobile devices, the landscape of web browsing has dramatically changed.
    Users now expect websites and applications to be accessible across a wide range
    of devices, from large desktop monitors to small smartphone screens. Here is an
    example of a broken website on mobile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – Example of broken layout on mobile](img/B18805_14_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1 – Example of broken layout on mobile
  prefs: []
  type: TYPE_NORMAL
- en: Based on the figure, it is evident that while the website functions properly
    on larger screens, the layout is broken on smaller devices, rendering the **Get
    Started** button unresponsive and hindering user interaction.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive web applications are designed to address this problem by dynamically
    adapting the layout and content based on the user’s device and screen size. With
    a responsive design, you can ensure that the applications are usable and visually
    appealing across different devices, improving user engagement and satisfaction.
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of responsive web applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From improved user experience to increased SEO rankings, responsive web applications
    offer numerous advantages that can greatly enhance your development efforts. Let’s
    review these benefits and understand their impact:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Improved user experience**: One of the primary benefits of responsive web
    applications is providing a consistent and optimized user experience across devices.
    By adapting the layout, content, and functionality to different screen sizes,
    users can easily navigate and interact with the application, regardless of the
    device they are using. This seamless experience enhances user satisfaction and
    encourages them to engage with the application for longer periods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Increased reach and accessibility**: Responsive web applications have a broader
    reach as they cater to users on multiple devices. By delivering a consistent experience
    across different platforms, you can ensure that the applications are accessible
    to a larger audience. This accessibility is particularly crucial for businesses
    targeting mobile users, as mobile devices have become the primary means of accessing
    the internet for many people worldwide.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search engine optimization (SEO) benefits**: Search engines, such as Google,
    prioritize mobile-friendly websites in the search results. Responsive web applications
    that provide a seamless user experience across devices are more likely to rank
    higher in **search engine results pages** (**SERPs**). By incorporating responsive
    design principles, you can improve the application’s visibility and attract more
    organic traffic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key principles of responsive web design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Responsive web design follows several key principles to ensure effective adaptation
    to different screen sizes and devices. Let’s see these principles:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Fluid grids*: Fluid grids are the foundation of responsive web design. Instead
    of using fixed pixel-based layouts, you can use proportional units, such as percentages,
    to define the width and height of elements. This allows content to flexibly adjust
    and fill the available screen space, creating a fluid and adaptable layout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Flexible images and media*: Images and media play a crucial role in web applications.
    To ensure they adapt to different screen sizes, you can utilize CSS techniques
    such as `max-width: 100%` to make images and media elements scale proportionally
    within the containers. This prevents images from overflowing or being too small
    on smaller screens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Media queries*: Media queries enable you to apply specific CSS rules based
    on the characteristics of the user’s device, such as screen size, resolution,
    and orientation. By defining breakpoints at certain screen widths, you can modify
    the layout, typography, and other elements to optimize the application’s appearance
    on different devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Mobile-first approach*: The mobile-first approach is a design philosophy that
    prioritizes designing for mobile devices first, then progressively enhancing the
    application for larger screens. By starting with a minimalistic and focused design
    for smaller screens, you can ensure that the core functionality and content are
    accessible to all users. As the screen size increases, additional features and
    layout enhancements can be introduced.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you’ve gained insights into building a responsive web application,
    let’s delve into the specifics of our project. Understanding the fundamentals
    sets the stage for creating an efficient project structure and crafting a visually
    appealing and user-friendly website.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing our responsive web application project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our project focuses on creating a responsive landing page that effectively
    showcases a **Software as a Service** (**SAAS**) product. The landing page consists
    of several key sections, including the header, hero, features, testimonials, pricing,
    and footer. Each section is strategically designed to engage visitors and drive
    conversions, whether by turning them into customers or capturing them as valuable
    leads. Let’s have a look at the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – Project initial sketch](img/B18805_14_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.2 – Project initial sketch
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the sketch, let’s examine the purpose of each section:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Header**: The gateway to our application, the header, will feature a clean
    and intuitive navigation menu, ensuring users can effortlessly explore the various
    facets of our landing page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hero**: Our hero section will be a visual delight, instantly grabbing attention
    with compelling imagery and a succinct message that communicates the essence of
    our product or service. Moreover, with a strategically placed and persuasive call-to-action
    button, we will encourage visitors to take the next step, such as signing up,
    requesting a demo, or exploring our offerings further.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Features**: Here, users will delve into the core features that make our offering
    stand out. Each feature will be elegantly presented, accompanied by captivating
    visuals and concise descriptions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testimonials**: Building trust is paramount, and the testimonials section
    will serve as a testament to the positive experiences of our users. Genuine quotes
    and perhaps even images will add a personal touch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pricing**: For users ready to take the next step, the pricing section will
    provide transparent details about our offerings. We’ll strive for clarity and
    simplicity, making it easy for users to choose the plan that suits them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Footer**: Closing the narrative, the footer will house essential links, contact
    information, and perhaps a call-to-action button, ensuring users can seamlessly
    navigate to other parts of our site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is a sneak peek of our final product:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3 – Finalized project](img/B18805_14_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.3 – Finalized project
  prefs: []
  type: TYPE_NORMAL
- en: This is the completed product that we’re going to build in this chapter. For
    a better understanding of the code, please check out our GitHub repository for
    this chapter. Please note that we will mainly focus on the UI, which means these
    features such as `Login`, `Register`, or `Purchase` will not be implemented.
  prefs: []
  type: TYPE_NORMAL
- en: With a clear project overview in mind, we’re ready to transition into the exciting
    phase of creating the foundational layout for our website.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the layout of the website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we have the initial idea for our website, it becomes relatively straightforward
    to transform those sections into Angular components. Let’s have a look at the
    following transformation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4 – Breaking down sections into Angular components](img/B18805_14_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.4 – Breaking down sections into Angular components
  prefs: []
  type: TYPE_NORMAL
- en: 'As depicted in the figure, each section is distinct and can be readily mapped
    to an Angular component. For instance, the `header` section can be assigned to
    `header.component.ts`. By following this approach, we can establish the following
    code structure as an illustrative example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Each selector represents the corresponding section in our sketch or design.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s pretty simple to get started to create those components by running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The command will generate a standalone `Header` component with inline styles
    and an inline template. If you prefer to generate separate files for `header.component.html`
    and `header.component.scss`, you can omit the `--inline-template` and `--inline-style`
    options. Once the `Header` component is generated, you can proceed to generate
    additional components such as `Hero`, `Features`, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have established the essential layout of our website, it’s time
    to delve into the hands-on development process. We’ll be translating the design
    into code, bringing life to each section.
  prefs: []
  type: TYPE_NORMAL
- en: Starting to develop the website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we’ve laid out the blueprint for our responsive web application. Now,
    let’s dive into the implementation details of each section. Remember, our goal
    is to create a seamless and visually appealing experience using Angular, PrimeFlex,
    PrimeIcons, and PrimeNG components.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before getting started, make sure that you have everything configured in your
    project such as `primeng`, `primeflex`, and `primeicons`. If not, you can run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, check that your styling and theming are updated. Here is an example
    of a `styles.scss` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The provided code imports style files from different libraries. By importing
    these files, you are incorporating the styles, class utilities, themes, and icons
    provided by `primeflex`, `primeng`, and `primeicons` into your application, enabling
    you to utilize their features and visual styles.
  prefs: []
  type: TYPE_NORMAL
- en: Header with navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The header section plays a vital role in providing users with easy navigation
    and a seamless user experience. To implement the header, we’ll start by creating
    the HTML structure and applying CSS class utilities. Here’s an example of how
    you can structure the header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<ul ...>...</ul>`: We’ve used a `<ul>` element to create an unordered list
    of navigation items. Each item is represented by an `<li>` element, and the corresponding
    links are wrapped in `<a>` tags. Here is the result of the navigation on desktop:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 14.5 – Navigation layout on desktop](img/B18805_14_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.5 – Navigation layout on desktop
  prefs: []
  type: TYPE_NORMAL
- en: '`<a class="... lg:hidden" pStyleClass="@next" ...>`: This is the line of code
    that makes the navigation responsive on smaller devices. Let’s break it down further:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lg:hidden`: This utilizes `primeflex` utilities, which will hide the hamburger
    menu on larger screens.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pStyleClass="@next"`: This `StyleClass` feature targets the next element,
    which is the `nav` element. In this case, when clicking on the hamburger menu
    on mobile devices, it will show or hide the navigation menu.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<nav class="hidden lg:flex ...>`: This represents a navigation menu that is
    hidden on small screens (`hidden`) and becomes visible on larger screens (`lg:flex`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the navigation on mobile devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.6 – Navigation on mobile devices](img/B18805_14_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.6 – Navigation on mobile devices
  prefs: []
  type: TYPE_NORMAL
- en: In the figure, it is noticeable that instead of displaying the complete navigation
    menu, only a hamburger icon is shown to toggle the visibility of the navigation
    menu, which will save space and provide a clean user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Hero section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The hero section is a visually prominent section that immediately captures
    the attention of visitors, often including a compelling headline, a concise subheading,
    and a visually appealing image or video. The hero section aims to create a strong
    first impression and effectively communicate the value proposition of the product
    or service. Here is the simplified code for our hero section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Overall, this code snippet represents a hero section with a heading, description,
    and a call-to-action PrimeNG button. It also includes an image that is displayed
    on medium-sized (`md:flex`) and larger screens, while hidden on smaller screens
    (`hidden`).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screen size breakpoints are used in PrimeFlex:'
  prefs: []
  type: TYPE_NORMAL
- en: '- `sm`: Small screens (576 px and above)'
  prefs: []
  type: TYPE_NORMAL
- en: '- `md`: Medium screens (768 px and above)'
  prefs: []
  type: TYPE_NORMAL
- en: '- `lg`: Large screens (992 px and above)'
  prefs: []
  type: TYPE_NORMAL
- en: '- `xl`: Extra-large screens (1,200 px and above)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.7 – Hero section (credit to Adobe Stock)](img/B18805_14_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.7 – Hero section (credit to Adobe Stock)
  prefs: []
  type: TYPE_NORMAL
- en: Features section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The features section highlights the key features or benefits of the product
    or service being promoted, aiming to showcase the unique selling points of the
    product or service and convince visitors of its value. It typically includes a
    set of visually appealing icons or images, accompanied by a brief description
    of each feature. Let’s have a look at the simplified code for our features section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The provided code represents an HTML structure for a section that showcases
    a set of features. It also includes an Angular directive (`*ngFor`) to dynamically
    generate feature elements based on an array of `feature` objects. Let’s break
    it down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<section id="features">`: This line defines a `<section>` element with an
    `id` attribute set to `"features"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<div class="grid justify-content-center">`: This code creates a grid-like
    layout and centers the content horizontally within the grid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<div class="col-12 md:col-12 lg:col-4" *ngFor="let feature of features">`:
    These classes define the column layout for different screen sizes, which will
    display three columns on larger screens (`lg:col-4`) and one column on medium
    and small screens (`col-12`). The `*ngFor` directive is used to iterate over the
    `features` array, rendering multiple instances of `feature`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`features = [...]`: This `features` array contains multiple `feature` objects.
    Each `feature` object represents an individual feature and includes properties
    such as `heading`, `content`, `icon`, and `bg`, which will be shown in the template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The 12-grid system is a widely used framework in web design and layout. It divides
    the screen into 12 equal columns, providing a flexible and responsive grid structure.
    This system allows designers and developers to easily create responsive designs
    by allocating and aligning elements across the grid. We discussed this, along
    with PrimeFlex, in [*Chapter 6*](B18805_06.xhtml#_idTextAnchor117).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.8 – Features section](img/B18805_14_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.8 – Features section
  prefs: []
  type: TYPE_NORMAL
- en: Testimonials section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The testimonials section provides social proof by showcasing positive feedback
    or reviews from satisfied customers. It includes testimonials in the form of quotes,
    customer names, and possibly their profile pictures. This section aims to build
    trust and credibility, reassuring potential customers that they are making the
    right choice. Here is the simplified code of our testimonials section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The provided code represents a structure for a testimonial section that utilizes
    the PrimeNG `Carousel` component. Let’s break it down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-carousel ...>`: This code will create a carousel and it accepts several
    input properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[value]` is set to the `testimonials` array, which provides the data for the
    testimonials displayed in the carousel'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[numVisible]` is set to `1`, indicating that only one testimonial item should
    be visible at a time'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[numScroll]` is set to `1`, indicating that the carousel should scroll one
    testimonial item at a time'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[circular]` is set to `true`, indicating that the carousel should wrap around
    and start from the beginning after reaching the end'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[autoplayInterval]` is set to `3000`, indicating that the carousel should
    automatically transition to the next testimonial every 3 seconds'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ng-template let-testimonial pTemplate="item">`: This code will set the value
    of each `testimonial` object to the `testimonial` variable and will be used to
    render the testimonial detail inside the item template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`testimonials = [...]`: This array contains multiple testimonial objects. Each
    testimonial object represents an individual testimonial and includes properties
    such as `name`, `title`, `content`, and `company`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.9 – Testimonials section](img/B18805_14_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.9 – Testimonials section
  prefs: []
  type: TYPE_NORMAL
- en: Pricing section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pricing section presents the different pricing options or packages available
    for the product or service. It typically includes a comparison table, outlining
    the features and pricing details of each package. The pricing section aims to
    help potential customers make an informed decision and choose the package that
    best suits their needs. Here is our simplified code for the pricing table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The provided code represents a pricing section that displays different plans
    using a grid layout. Let’s break it down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<div class="grid">`: This will create a grid-like layout for our `pricing`
    section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<div class="col-12 lg:col-4" *ngFor="let plan of plans">`: These classes define
    the column layout for different screen sizes, which will show one plan on small
    and medium screens and three pricing plans on larger screens. The `*ngFor` directive
    is used to iterate over the `plans` array, rendering our pricing table to the
    DOM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<li ... *ngFor="let feature of plan.features">`: This will loop the features
    in the plan and render each feature to the list under the unordered list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plans = [...]`: This code represents the `plans` array that contains multiple
    `plan` objects. Each `plan` object represents an individual plan and includes
    properties such as `name`, `price`, `features`, and the call-to-action button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s have a look at our pricing section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.10 – Pricing section](img/B18805_14_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.10 – Pricing section
  prefs: []
  type: TYPE_NORMAL
- en: Footer section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The footer section is the bottommost part of the landing page, usually containing
    additional navigation links, contact information, and copyright notices. It serves
    as a navigational aid, allowing users to access important links or contact the
    company for further inquiries. Here is the simplified code for our footer section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The provided code represents a footer section. Let’s break it down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<div class="grid justify-content-between">`: This line creates a grid-like
    layout with items aligned between the start and end of the container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<div class="col-12 md:col-2">`: This line defines the column layout for different
    screen sizes for the logo. In this case, it specifies that the column should occupy
    the entire width for small screens (`col-12`) and 2 columns out of 12 for medium-sized
    screens (`md:col-2`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<div class="col-12 md:col-10 lg:col-7">`: This line defines the column layout
    for different screen sizes for the navigation. In this case, it specifies that
    the column should occupy the entire width for small screens (`col-12`), 10 columns
    out of 12 for medium-sized screens (`md:col-10`), and 7 columns out of 12 for
    large screens (`lg:col-7`). Let’s also look into the navigation detail of the
    footer:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<div class="grid text-center md:text-left">`: This code creates a grid-like
    layout with text alignment centered for small screens (`text-center`) and left-aligned
    for medium-sized screens (`md:text-left`).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<div class="col-12 md:col-4">`: This line defines the layout for each navigation
    section. In small screens (`col-12`), the navigation will be full width; however,
    on medium to large-sized screens, the navigation will be divided into three sections
    (`md:col-4`).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s have a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.11 – Footer section](img/B18805_14_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.11 – Footer section
  prefs: []
  type: TYPE_NORMAL
- en: 'As we conclude the development phase, our responsive web application is now
    ready for its live deployment. Let’s embark on the final step of our journey:
    the production deployment process.'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the responsive web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You’ve successfully built a responsive web application using
    Angular, PrimeFlex, PrimeIcons, and PrimeNG components. Now, it’s time to share
    your creation with the world. Deploying a web application involves several crucial
    steps, from preparing the project for production to choosing the right deployment
    platform. Let’s explore each of these aspects to ensure a smooth deployment process.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the project ready for production
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before deploying your web application, it’s essential to ensure that everything
    is optimized and ready for production. Here are a few key steps to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Optimize assets*: Make sure to optimize your images to reduce their file size
    and improve loading times. You can use tools such as image compressors to achieve
    this. Here is an example of how to serve different images in different screen
    sizes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the code, the `<picture>` element is used to define a container for multiple
    image sources. Inside the `<picture>` element, the `<source>` elements are used
    to specify different image sources based on the media query conditions. For example,
    the `image-small.jpg` image source will be served when the screen width is at
    a maximum of 576 pixels.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Configure environment variables*: If your application relies on environment
    variables, ensure that they are properly configured for the production environment.
    This may include API keys, database connection strings, or other sensitive information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Set up error logging*: Implement error logging to capture and track any runtime
    errors that may occur in the production environment. Tools such as Sentry or Rollbar
    can help you track and diagnose issues effectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By following these steps, you can ensure that your web application is optimized
    and ready for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, you can run the following command to build your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can see that after running the build, we created 3 chunk files with a total
    time of 11.871 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Angular 17, your compiled files are likely under `dist/chapter-14/browser`,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.12 – Compiled project folder](img/B18805_14_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.12 – Compiled project folder
  prefs: []
  type: TYPE_NORMAL
- en: For an Angular version less than 17, it will be under `dist/chapter-14`.
  prefs: []
  type: TYPE_NORMAL
- en: Different options for deployment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once your project is production-ready, the next step is to choose a deployment
    platform. Several platforms offer seamless deployment for Angular applications.
    Let’s explore a few popular options:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Firebase Hosting*: Firebase Hosting ([https://firebase.google.com/docs/hosting](https://firebase.google.com/docs/hosting))
    provides a fast and secure way to host your web application. It supports continuous
    deployment, SSL, and custom domains. Here is how we start to initialize and deploy
    the project to Firebase:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Vercel*: Vercel ([https://vercel.com](https://vercel.com)) offers a zero-configuration
    platform for deploying frontend applications. It integrates with your version
    control system for automatic deployments. Here is how we deploy the project using
    the Vercel CLI:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Netlify*: Netlify ([https://www.netlify.com](https://www.netlify.com)) is
    a powerful platform that automates your build and deployment pipeline. It supports
    continuous integration and deploys directly from your Git repository. Here is
    an example of deploying to Netlify from your local machine:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*GitHub Pages*: If your code is hosted on GitHub, GitHub Pages is a straightforward
    option. It automatically deploys your app when you push changes to the `gh-pages`
    branch. You can learn more at [https://docs.github.com/en/pages/getting-started-with-github-pages](https://docs.github.com/en/pages/getting-started-with-github-pages).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are suggested hosting sites where you can deploy your Angular application,
    but you are free to deploy it anywhere you prefer. If you have your own hosting
    provider, simply upload the contents of the compiled files to your hosting provider,
    and it will serve your site seamlessly.
  prefs: []
  type: TYPE_NORMAL
- en: Final notes after deployment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Congratulations, your web application is live! Before celebrating, consider
    these final notes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Monitor performance*: Regularly monitor your application’s performance using
    tools such as Google Lighthouse or WebPageTest. Address any issues that may impact
    user experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Security considerations*: Ensure that your deployed application follows best
    practices for web security. Use HTTPS, keep dependencies updated, and implement
    secure authentication mechanisms if applicable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*User feedback*: Encourage users to provide feedback on your application. Monitor
    user reviews, comments, and error reports to continuously improve the user experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Documentation*: Update your project’s documentation to reflect any changes
    made during deployment. Include information on how others can contribute or report
    issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Stay updated*: Keep an eye on updates to Angular, PrimeNG, and any third-party
    libraries you’re using. Regularly update your dependencies to benefit from new
    features and security patches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In conclusion, deploying a web application involves careful preparation and
    the selection of an appropriate platform. By following best practices and choosing
    a reliable deployment option, you can ensure that your responsive web application
    reaches its audience seamlessly.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations on completing the journey of building a responsive web application
    with Angular and PrimeNG components! In this final chapter, you’ve acquired essential
    insights into creating an efficient project structure, implementing responsive
    layouts, integrating various PrimeNG elements, and deploying your application
    to share it with the world.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the chapter, we’ve learned that building responsive web applications
    is crucial in today’s digital landscape. Users access applications from various
    devices and responsiveness ensures a consistent and enjoyable user experience
    across desktops, tablets, and mobile devices. The knowledge gained in this chapter
    empowers you to create applications that adapt to different screen sizes, providing
    accessibility to a broader audience.
  prefs: []
  type: TYPE_NORMAL
- en: As you move forward, the journey offers opportunities for growth and exploration.
    Continuously enhance your application, stay updated on Angular and PrimeNG releases,
    and explore advanced topics such as PWAs and server-side rendering. Consider contributing
    to the open source community and expanding your skills into related technologies.
    Embrace the path of continuous learning and innovation in web development.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, building a responsive web application is a rewarding endeavor
    that opens doors to a myriad of possibilities. Whether you’re creating projects
    for clients, users, or personal satisfaction, the knowledge gained in this book
    equips you with the tools to deliver exceptional user experiences. As you move
    forward, embrace the journey of continuous learning and innovation in the dynamic
    field of web development. Happy coding!
  prefs: []
  type: TYPE_NORMAL
