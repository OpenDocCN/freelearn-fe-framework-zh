["```js\nng new mastering-angular-components --prefix=mac\n```", "```js\ncd mastering-angular-components\nng serve\n```", "```js\nmastering-angular-components\n├── node_modules\n├── package.json\n└── src\n ├── app\n │   ├── app.component.css\n │   ├── app.component.html\n │   ├── app.component.ts\n │   └── app.module.ts\n ├── index.html\n ├── styles.css\n └── main.ts\n```", "```js\nimport {Component} from '@angular/core';\n\n@Component({\n  selector: 'mac-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'mac';\n} \n```", "```js\nimport {Component, ViewEncapsulation} from '@angular/core';\n\n@Component({\n  selector: 'mac-root',\n  templateUrl: './app.component.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n  title = 'mac';\n}\n```", "```js\nimport {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {AppComponent} from './app.component';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule],\n  bootstrap: [AppComponent],\n  providers: []\n})\nexport class AppModule { }\n```", "```js\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\nimport {AppModule} from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n```", "```js\nng serve\n```", "```js\nng generate component --spec false -ve none tasks/task-list\n```", "```js\nimport {Component, ViewEncapsulation} from '@angular/core';\n\n@Component({ \n  selector: 'mac-task-list',\n  templateUrl: './task-list.component.html',\n  encapsulation: ViewEncapsulation.None \n})\nexport class TaskListComponent {\n  tasks = [\n    {id: 1, title: 'Task 1', done: false}, \n    {id: 2, title: 'Task 2', done: true}\n  ];\n}\n```", "```js\n<div *ngFor=\"let task of tasks\"> \n  <input type=\"checkbox\" [checked]=\"task.done\"> \n  <div>{{task.title}}</div> \n</div> \n```", "```js\n<mac-task-list></mac-task-list>\n```", "```js\nng generate component --spec false -ve none tasks/task\n```", "```js\n<input type=\"checkbox\" [checked]=\"task.done\"> \n<div>{{task.title}}</div> \n```", "```js\nimport {Component, Input, ViewEncapsulation} from '@angular/core'; \n\n@Component({ \n  selector: 'mac-task',\n  templateUrl: './task.component.html', \n  encapsulation: ViewEncapsulation.None \n}) \nexport class TaskComponent {\n  @Input() task: any; \n}\n```", "```js\n<mac-task *ngFor=\"let task of tasks\"\n          [task]=\"task\"></mac-task> \n```", "```js\nng generate component --spec false -ve none tasks/enter-task\n```", "```js\n<input type=\"text\"\n       placeholder=\"Enter new task title...\" \n       #titleInput> \n<button (click)=\"enterTask(titleInput)\"> \n  Add Task \n</button>\n```", "```js\nimport {Component, Output, ViewEncapsulation, EventEmitter} from '@angular/core'; \n\n@Component({ \n  selector: 'mac-enter-task',\n  templateUrl: './enter-task.component.html', \n  encapsulation: ViewEncapsulation.None \n}) \nexport class EnterTaskComponent {\n  @Output() outEnterTask = new EventEmitter<string>();\n  enterTask(titleInput: HTMLInputElement) { \n    this.outEnterTask.emit(titleInput.value); \n    titleInput.value = '';  \n    titleInput.focus();\n  } \n} \n```", "```js\n<my-comp (outputProp)=\"doSomething()\">   \n```", "```js\n<my-comp (out)= \"doSomething()\">   \n```", "```js\n<mac-enter-task (outEnterTask)=\"addTask($event)\"></mac-enter-task>\n<div class=\"tasks\">\n  <mac-task *ngFor=\"let task of tasks\"  \n            [task]=\"task\"></mac-task> \n</div>\n```", "```js\nimport {Component, ViewEncapsulation} from '@angular/core';\n\n@Component({\n  selector: 'mac-task-list',\n  templateUrl: './task-list.component.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class TaskListComponent {\n  tasks = [\n    {id: 1, title: 'Task 1', done: false},\n    {id: 2, title: 'Task 2', done: true}\n  ];\n\n  addTask(title: string) {\n    this.tasks.push({\n      title, done: false\n    });\n  }\n}\n```", "```js\nng generate component --spec false -ve none ui/checkbox\n```", "```js\n<label class=\"label\">\n  <input class=\"input\" type=\"checkbox\"\n         [checked]=\"checked\"\n         (change)=\"check($event.target.checked)\">\n  <span class=\"text\">{{label}}</span>\n</label>\n```", "```js\nimport {Component, Input, Output, ViewEncapsulation, EventEmitter} from '@angular/core';\n\n@Component({\n  selector: 'mac-checkbox',\n  templateUrl: './checkbox.component.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class CheckboxComponent {\n  @Input() label: string;\n  @Input() checked: boolean;\n  @Output() outCheck = new EventEmitter<boolean>();\n\n  check(checked: boolean) {\n    this.outCheck.emit(checked);\n  }\n}\n```", "```js\n<mac-checkbox [checked]=\"task.done\"\n              (outCheck)=\"task.done = $event\"></mac-checkbox>\n<div class=\"title\">{{task.title}}</div>\n```", "```js\n@HostBinding('class.done') \nget done() { \n  return this.task && this.task.done; \n}\n```", "```js\nexport interface Task {\n  id?: number;\n  title: string;\n  done: boolean;\n}\n```", "```js\nng generate service --spec false tasks/task\n```", "```js\nimport {Injectable} from '@angular/core';\nimport {Task} from '../model';\n\n@Injectable()\nexport class TaskService {\n  private tasks: Task[] = [\n    {id: 1, title: 'Task 1', done: false},\n    {id: 2, title: 'Task 2', done: false},\n    {id: 3, title: 'Task 3', done: true},\n    {id: 4, title: 'Task 4', done: false}\n  ];\n\n  getTasks(): Task[] {\n    return this.tasks.slice();\n  }\n\n  addTask(task: Task) {\n    this.tasks.push({\n      ...task,\n      id: this.tasks.length + 1\n    });\n  }\n\n  updateTask(task: Task) {\n    const index = this.tasks\n      .findIndex((t) => t.id === task.id);\n    this.tasks[index] = task;\n  }\n}\n```", "```js\n...\nimport {TaskService} from './tasks/task.service';\n...\n@NgModule({\n...\n providers: [TaskService],\n ...\n})\nexport class AppModule {\n}\n```", "```js\nimport {Component, ViewEncapsulation} from '@angular/core';\nimport {TaskService} from '../task-list.service';\nimport {Task} from '../../model';\n\n@Component({\n  selector: 'mac-task-list',\n  templateUrl: './task-list.component.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class TaskListComponent {\n tasks: Task[];\n\n constructor(private taskService: TaskService) {\n this.tasks = taskService.getTasks();\n }\n\n  addTask(title: string) {\n const task: Task = {\n title, done: false\n };\n this.taskService.addTask(task);\n this.tasks = this.taskService.getTasks();\n  }\n\n updateTask(task: Task) {\n this.taskService.updateTask(task);\n this.tasks = this.taskService.getTasks();\n }\n}\n```", "```js\n<mac-checkbox [checked]=\"task.done\"\n              (outCheck)=\"updateTask($event)\"></mac-checkbox>\n<div class=\"title\">{{task.title}}</div>\n```", "```js\n...\nexport class TaskComponent {\n  @Input() task: Task;\n  @Output() outUpdateTask = new EventEmitter<Task>();\n  ...\n\n  updateTask(done: boolean) {\n this.outUpdateTask.emit({\n ...this.task,\n done\n });\n }\n}\n```", "```js\n<mac-enter-task (outEnterTask)=\"addTask($event)\"></mac-enter-task>\n<div class=\"tasks\">\n  <mac-task *ngFor=\"let task of filteredTasks\"\n            [task]=\"task\"\n            (outUpdateTask)=\"updateTask($event)\"></mac-task>\n</div>\n```", "```js\nng generate component --spec false -ve none ui/toggle\n```", "```js\n<button class=\"toggle-button\" \n        *ngFor=\"let button of buttonList\" \n        [class.active]=\"button === activeButton\" \n        (click)=\"activate(button)\">{{button}}</button> \n```", "```js\nimport {Component, Input, Output, ViewEncapsulation, EventEmitter, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'mac-toggle',\n  templateUrl: './toggle.component.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class ToggleComponent implements OnInit {\n  @Input() buttonList: string[];\n  @Input() activeButton: string;\n  @Output() outActivate = new EventEmitter<string>();\n\n  ngOnInit() {\n    if (!this.activeButton) {\n      this.activeButton = this.buttonList[0];\n    }\n  }\n\n  activate(button: string) {\n    this.outActivate.emit(button);\n  }\n}\n```", "```js\nexport interface Task {\n  id?: number;\n  title: string;\n  done: boolean;\n}\n\nexport type TaskListFilterType = 'all' | 'open' | 'done';\n```", "```js\nimport {Component, ViewEncapsulation} from '@angular/core';\nimport {TaskService} from '../task.service';\nimport {Task, TaskListFilterType} from '../../model';\n\n@Component({\n  selector: 'mac-task-list',\n  templateUrl: './task-list.component.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class TaskListComponent {\n  tasks: Task[];\n  filteredTasks: Task[];\n taskFilterTypes: TaskListFilterType[] = ['all', 'open', 'done'];\n activeTaskFilterType: TaskListFilterType = 'all';\n\n  constructor(private taskService: TaskService) {\n    this.tasks = taskService.getTasks();\n this.filterTasks();\n  }\n\n  activateFilterType(type: TaskListFilterType) {\n this.activeTaskFilterType = type;\n this.filterTasks();\n }\n\n  filterTasks() {\n this.filteredTasks = this.tasks\n .filter((task: Task) => {\n if (this.activeTaskFilterType === 'all') {\n return true;\n } else if (this.activeTaskFilterType === 'open') {\n return !task.done;\n } else {\n return task.done;\n }\n });\n }\n\n  addTask(title: string) {\n    const task: Task = {\n      title, done: false\n    };\n    this.taskService.addTask(task);\n    this.tasks = this.taskService.getTasks();\n this.filterTasks();\n  }\n\n  updateTask(task: Task) {\n    this.taskService.updateTask(task);\n    this.tasks = this.taskService.getTasks();\n this.filterTasks();\n  }\n}\n```", "```js\n<mac-toggle [buttonList]=\"taskFilterTypes\"\n [activeButton]=\"activeTaskFilterType\"\n (outActivate)=\"activateFilterType($event)\">\n</mac-toggle>\n<mac-enter-task (outEnterTask)=\"addTask($event)\"></mac-enter-task>\n<div class=\"tasks\">\n  <mac-task *ngFor=\"let task of filteredTasks\"\n            [task]=\"task\"\n            (outUpdateTask)=\"updateTask($event)\"></mac-task>\n</div>\n```"]