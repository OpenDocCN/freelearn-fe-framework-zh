["```js\n    npm i\n    ```", "```js\ntest('your test name', () => {\n  // your test implementation\n});\n```", "```js\ntest('your test name', async () => {\n  // your test implementation\n});\n```", "```js\ntest('your test name', async () => {\n  const someResult = yourFunction('someArgument');\n  expect(someResult).toBe('something');\n});\n```", "```js\n    expect(someResult).toStrictEqual({\n    ```", "```js\n      field1: 'something',\n    ```", "```js\n      field2: 'something else'\n    ```", "```js\n    });\n    ```", "```js\n    expect(someResult).not.toBe('something');\n    ```", "```js\n    expect(someResult).toMatch(/error/);\n    ```", "```js\n    expect(someResult).toContain(99);\n    ```", "```js\n    import { isChecked } from './isChecked';\n    ```", "```js\n    test('', () => {\n    ```", "```js\n    });\n    ```", "```js\n    test('should return true when in checkedIds', () => {\n    ```", "```js\n    );\n    ```", "```js\n    test('should return true when in checkedIds', () => {\n    ```", "```js\n      const result = isChecked([1, 2, 3], 2);\n    ```", "```js\n    });\n    ```", "```js\n    test('should return true when in checkedIds', () => {\n    ```", "```js\n      const result = isChecked([1, 2, 3], 2);\n    ```", "```js\n      expect(result).toBe(true);\n    ```", "```js\n    });\n    ```", "```js\n    test('should return false when not in checkedIds', () => {\n    ```", "```js\n      const result = isChecked([1, 2, 3], 4);\n    ```", "```js\n      expect(result).toBe(false);\n    ```", "```js\n    });\n    ```", "```js\ntest('some test', () => {\n  expect(() => {\n    someAssertionFunction(someValue);\n  }).toThrow('some error message');\n});\n```", "```js\n    import { assertValueCanBeRendered } from './assertValueCanBeRendered';\n    ```", "```js\n    test('should raise exception when not a string or number', () => {\n    ```", "```js\n      expect(() => {\n    ```", "```js\n        assertValueCanBeRendered(\n    ```", "```js\n          true\n    ```", "```js\n        );\n    ```", "```js\n      }).toThrow(\n    ```", "```js\n        'value is not a string or a number'\n    ```", "```js\n      );\n    ```", "```js\n    });\n    ```", "```js\n    test('should not raise exception when string', () => {\n    ```", "```js\n      expect(() => {\n    ```", "```js\n        assertValueCanBeRendered(\n    ```", "```js\n          'something'\n    ```", "```js\n        );\n    ```", "```js\n      }).not.toThrow();\n    ```", "```js\n    });\n    ```", "```js\n    test('should not raise exception when number', () => {\n    ```", "```js\n      expect(() => {\n    ```", "```js\n        assertValueCanBeRendered(\n    ```", "```js\n          99\n    ```", "```js\n        );\n    ```", "```js\n      }).not.toThrow();\n    ```", "```js\n    });\n    ```", "```js\n    npm run test\n    ```", "```js\nnpm t\n```", "```js\n    test('should raise exception when not a string or number', () => {\n    ```", "```js\n      expect(() => {\n    ```", "```js\n        assertValueCanBeRendered(true);\n    ```", "```js\n      }).toThrow('value is not a string or a numberX');\n    ```", "```js\n    });\n    ```", "```js\ntest('should raise exception when not a string or number', () => {\n  expect(() => {\n    assertValueCanBeRendered(true);\n  }).toThrow('value is not a string or a number');\n});\n```", "```js\ntest('should render heading when content specified', () => {\n  render(<Heading>Some heading</Heading>);\n  const heading = screen.getByText('Some heading');\n  expect(heading).toBeInTheDocument();\n});\n```", "```js\n    import { render, screen } from '@testing-library/react';\n    ```", "```js\n    import { Checklist } from './Checklist';\n    ```", "```js\n    test('should render correct list items when data specified', () => {\n    ```", "```js\n    });\n    ```", "```js\n    test('should render correct list items when data specified', () => {\n    ```", "```js\n      render(\n    ```", "```js\n        <Checklist\n    ```", "```js\n          data={[{ id: 1, name: 'Lucy', role: 'Manager' }]}\n    ```", "```js\n          id=\"id\"\n    ```", "```js\n          primary=\"name\"\n    ```", "```js\n          secondary=\"role\"\n    ```", "```js\n        />\n    ```", "```js\n      );\n    ```", "```js\n    });\n    ```", "```js\n    test('should render correct list items when data specified', () => {\n    ```", "```js\n      render(\n    ```", "```js\n        <Checklist\n    ```", "```js\n          data={[{ id: 1, name: 'Lucy', role: 'Manager' }]}\n    ```", "```js\n          id=\"id\"\n    ```", "```js\n          primary=\"name\"\n    ```", "```js\n          secondary=\"role\"\n    ```", "```js\n        />\n    ```", "```js\n      );\n    ```", "```js\n      expect(screen.getByText('Lucy')).toBeInTheDocument();\n    ```", "```js\n    });\n    ```", "```js\n    test('should render correct list items when data specified', () => {\n    ```", "```js\n      render(\n    ```", "```js\n        <Checklist\n    ```", "```js\n          data={[{ id: 1, name: 'Lucy', role: 'Manager' }]}\n    ```", "```js\n          id=\"id\"\n    ```", "```js\n          primary=\"name\"\n    ```", "```js\n          secondary=\"role\"\n    ```", "```js\n        />\n    ```", "```js\n      );\n    ```", "```js\n      expect(screen.getByText('Lucy')).toBeInTheDocument();\n    ```", "```js\n      expect(screen.getByText('Manager')).    toBeInTheDocument();\n    ```", "```js\n    });\n    ```", "```js\n    test('should render correct list items when renderItem specified', () => {\n    ```", "```js\n      render(\n    ```", "```js\n        <Checklist\n    ```", "```js\n          data={[{ id: 1, name: 'Lucy', role: 'Manager' }]}\n    ```", "```js\n          id=\"id\"\n    ```", "```js\n          primary=\"name\"\n    ```", "```js\n          secondary=\"role\"\n    ```", "```js\n          renderItem={(item) => (\n    ```", "```js\n            <li key={item.id}>\n    ```", "```js\n              {item.name}-{item.role}\n    ```", "```js\n            </li>\n    ```", "```js\n          )}\n    ```", "```js\n        />\n    ```", "```js\n      );\n    ```", "```js\n      expect(\n    ```", "```js\n        screen.getByText('Lucy-Manager')\n    ```", "```js\n      ).toBeInTheDocument();\n    ```", "```js\n    });\n    ```", "```js\n    <input\n    ```", "```js\n      ...\n    ```", "```js\n      data-testid={`Checklist__input__${idValue.toString()}`}\n    ```", "```js\n    />\n    ```", "```js\n    test('should render correct checked items when specified', () => {\n    ```", "```js\n      render(\n    ```", "```js\n        <Checklist\n    ```", "```js\n          data={[{ id: 1, name: 'Lucy', role: 'Manager' }]}\n    ```", "```js\n          id=\"id\"\n    ```", "```js\n          primary=\"name\"\n    ```", "```js\n          secondary=\"role\"\n    ```", "```js\n          checkedIds={[1]}\n    ```", "```js\n        />\n    ```", "```js\n      );\n    ```", "```js\n    });\n    ```", "```js\n    test('should render correct checked items when specified', () => {\n    ```", "```js\n      render(\n    ```", "```js\n        <Checklist\n    ```", "```js\n          data={[{ id: 1, name: 'Lucy', role: 'Manager' }]}\n    ```", "```js\n          id=\"id\"\n    ```", "```js\n          primary=\"name\"\n    ```", "```js\n          secondary=\"role\"\n    ```", "```js\n          checkedIds={[1]}\n    ```", "```js\n        />\n    ```", "```js\n      );\n    ```", "```js\n      expect(\n    ```", "```js\n        screen.getByTestId('Checklist__input__1')\n    ```", "```js\n      ).toBeChecked();\n    ```", "```js\n    });\n    ```", "```js\nrender(<button>Save</button>);\nfireEvent.click(screen.getByText('Save'));\n```", "```js\nrender(<button>Save</button>);\nfireEvent.mouseDown(screen.getByText('Save'));\n```", "```js\nconst user = userEvent.setup();\nrender(<button>Save</button>);\nawait user.click(screen.getByText('Save'));\n```", "```js\n    npm i @testing-library/user-event@latest\n    ```", "```js\n    import userEvent from '@testing-library/user-event';\n    ```", "```js\n    test('should check items when clicked', async () => {\n    ```", "```js\n    });\n    ```", "```js\n    test('should check items when clicked', async () => {\n    ```", "```js\n      const user = userEvent.setup();\n    ```", "```js\n    });\n    ```", "```js\n    test('should check items when clicked', async () => {\n    ```", "```js\n      const user = userEvent.setup();\n    ```", "```js\n      render(\n    ```", "```js\n        <Checklist\n    ```", "```js\n          data={[{ id: 1, name: 'Lucy', role: 'Manager' }]}\n    ```", "```js\n          id=\"id\"\n    ```", "```js\n          primary=\"name\"\n    ```", "```js\n          secondary=\"role\"\n    ```", "```js\n        />\n    ```", "```js\n      );\n    ```", "```js\n      const lucyCheckbox = screen.getByTestId(\n    ```", "```js\n        'Checklist__input__1'\n    ```", "```js\n      );\n    ```", "```js\n      expect(lucyCheckbox).not.toBeChecked();\n    ```", "```js\n    });\n    ```", "```js\n    test('should check items when clicked', async () => {\n    ```", "```js\n      const user = userEvent.setup();\n    ```", "```js\n      render(\n    ```", "```js\n        <Checklist\n    ```", "```js\n          data={[{ id: 1, name: 'Lucy', role: 'Manager' }]}\n    ```", "```js\n          id=\"id\"\n    ```", "```js\n          primary=\"name\"\n    ```", "```js\n          secondary=\"role\"\n    ```", "```js\n        />\n    ```", "```js\n      );\n    ```", "```js\n      const lucyCheckbox = screen.getByTestId(\n    ```", "```js\n        'Checklist__input__1'\n    ```", "```js\n      );\n    ```", "```js\n      expect(lucyCheckbox).not.toBeChecked();\n    ```", "```js\n      await user.click(lucyCheckbox);\n    ```", "```js\n    });\n    ```", "```js\n    test('should check items when clicked', async () => {\n    ```", "```js\n      const user = userEvent.setup();\n    ```", "```js\n      render(\n    ```", "```js\n        <Checklist\n    ```", "```js\n          data={[{ id: 1, name: 'Lucy', role: 'Manager' }]}\n    ```", "```js\n          id=\"id\"\n    ```", "```js\n          primary=\"name\"\n    ```", "```js\n          secondary=\"role\"\n    ```", "```js\n        />\n    ```", "```js\n      );\n    ```", "```js\n      const lucyCheckbox = screen.getByTestId(\n    ```", "```js\n        'Checklist__input__1'\n    ```", "```js\n      );\n    ```", "```js\n      expect(lucyCheckbox).not.toBeChecked();\n    ```", "```js\n      await user.click(lucyCheckbox);\n    ```", "```js\n      expect(lucyCheckbox).toBeChecked();\n    ```", "```js\n    });\n    ```", "```js\n    test('should call onCheckedIdsChange when clicked', async () => {\n    ```", "```js\n      const user = userEvent.setup();\n    ```", "```js\n      let calledWith: IdValue[] | undefined = undefined;\n    ```", "```js\n      render(\n    ```", "```js\n        <Checklist\n    ```", "```js\n          data={[{ id: 1, name: 'Lucy', role: 'Manager' }]}\n    ```", "```js\n          id=\"id\"\n    ```", "```js\n          primary=\"name\"\n    ```", "```js\n          secondary=\"role\"\n    ```", "```js\n          onCheckedIdsChange={(checkedIds) =>\n    ```", "```js\n            (calledWith = checkedIds)\n    ```", "```js\n          }\n    ```", "```js\n        />\n    ```", "```js\n      );\n    ```", "```js\n      await user.click(screen.getByTestId('Checklist__input__1'));\n    ```", "```js\n      expect(calledWith).toStrictEqual([1]);\n    ```", "```js\n    });\n    ```", "```js\n    import { IdValue } from './types';\n    ```", "```js\nnpm run test -- --coverage --watchAll=false\n```", "```js\n    test('should check and uncheck items when clicked', async () => {\n    ```", "```js\n      ...\n    ```", "```js\n    });\n    ```", "```js\n    test('should check and uncheck items when clicked', async () => {\n    ```", "```js\n      const user = userEvent.setup();\n    ```", "```js\n      render(\n    ```", "```js\n        <Checklist\n    ```", "```js\n          data={[{ id: 1, name: 'Lucy', role: 'Manager' }]}\n    ```", "```js\n          id=\"id\"\n    ```", "```js\n          primary=\"name\"\n    ```", "```js\n          secondary=\"role\"\n    ```", "```js\n        />\n    ```", "```js\n      );\n    ```", "```js\n      const lucyCheckbox = screen.getByTestId(\n    ```", "```js\n        'Checklist__input__1'\n    ```", "```js\n      );\n    ```", "```js\n      expect(lucyCheckbox).not.toBeChecked();\n    ```", "```js\n      await user.click(lucyCheckbox);\n    ```", "```js\n      expect(lucyCheckbox).toBeChecked();\n    ```", "```js\n      await user.click(lucyCheckbox);\n    ```", "```js\n      expect(lucyCheckbox).not.toBeChecked();\n    ```", "```js\n    });\n    ```", "```js\n    npm run test -- --coverage --watchAll=false\n    ```", "```js\n    {\n    ```", "```js\n      ...,\n    ```", "```js\n      \"jest\": {\n    ```", "```js\n        \"coveragePathIgnorePatterns\": [\n    ```", "```js\n          \"types.ts\",\n    ```", "```js\n          \"index.ts\"\n    ```", "```js\n        ]\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    npm run test -- --coverage --watchAll=false\n    ```", "```js\n    expect({ name: 'Bob' }).toBe({ name: 'Bob' });\n    ```", "```js\n    expect(\n    ```", "```js\n      screen.getByText('Save').hasAttribute('disabled')\n    ```", "```js\n    ).toBe(true);\n    ```", "```js\n    expect(screen.findByText('Save')).toBeInTheDocument();\n    ```", "```js\n    expect(screen.getByText('Save')).toBe(null);\n    ```", "```js\n    expect({ name: 'Bob' }).toStrictEqual({ name: 'Bob' });\n    ```", "```js\n    expect(something).not.toBeNull();\n    ```", "```js\n    expect(screen.getByText('Save')).toBeDisabled();\n    ```", "```js\n    test('should remove id when already in checked ids', () => {\n    ```", "```js\n      const result = getNewCheckedIds([1, 2, 3], 2);\n    ```", "```js\n      expect(result).toStrictEqual([1, 3]);\n    ```", "```js\n    });\n    ```", "```js\n    expect(await screen.findByText('Save')).toBeInTheDocument();\n    ```", "```js\n    expect(screen.queryByText('Save')).not.toBeInTheDocument();\n    ```"]