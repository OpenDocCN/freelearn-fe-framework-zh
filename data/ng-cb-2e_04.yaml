- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Understanding Angular Animations
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Angular动画
- en: In this chapter, you’ll learn about working with **animations** in Angular.
    You’ll learn about multi-state animations, staggering animations, and keyframe
    animations, as well as how to implement animations for switching routes in your
    Angular apps and how to conditionally disable animations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何在Angular中处理**动画**。你将了解多状态动画、交错动画和关键帧动画，以及如何在Angular应用程序中实现切换路由的动画以及如何有条件地禁用动画。
- en: 'The following are the recipes that we’re going to cover in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将在本章中涵盖的菜谱：
- en: Creating your first two-state Angular animation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个两种状态的Angular动画
- en: Working with multi-state animations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与多状态动画一起工作
- en: Creating complex Angular animations using keyframes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用关键帧创建复杂的Angular动画
- en: Animating lists in Angular using stagger animations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用交错动画在Angular中动画化列表
- en: Sequential vs parallel animations in Angular
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular中的顺序动画与并行动画
- en: Route animations in Angular
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular中的路由动画
- en: Disabling Angular animations conditionally
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有条件地禁用Angular动画
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For the recipes in this chapter, ensure your setup is complete as per the ''Technical
    Requirements'' in the ''Angular-Cookbook-2E'' GitHub repository. For setup details,
    visit: [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md).
    The starter code for this chapter is located at [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter04](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter04).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章的菜谱，确保你的设置已按照'Angular-Cookbook-2E' GitHub仓库中的'技术要求'完成。有关设置详细信息，请访问：[https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md)。本章的起始代码位于[https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter04](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter04)。
- en: Creating your first two-state Angular animation
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个两种状态的Angular动画
- en: In this recipe, you’ll create a basic two-state Angular animation that has a
    fading effect. We’ll start with an Angular app with a UI already built into it.
    We’ll then enable animations in the app using Angular animations and will move
    toward creating our first animation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将创建一个基本的两种状态Angular动画，它具有淡入淡出效果。我们将从一个已经内置了UI的Angular应用程序开始。然后，我们将使用Angular动画在应用程序中启用动画，并逐步创建我们的第一个动画。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The app that we are going to work with resides in `start/apps/chapter04/ng-basic-animation`
    inside the cloned repository:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的应用程序位于克隆的仓库中的`start/apps/chapter04/ng-basic-animation`：
- en: Open the code repository in your code editor.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开代码仓库。
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到代码仓库目录，并运行以下命令以运行项目：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This should open the app in a new browser tab, and you should see the following:'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该在新的浏览器标签页中打开应用程序，你应该看到以下内容：
- en: '![](img/B18469_04_01.png)'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_04_01.png)'
- en: 'Figure 4.1: ng-basic-animation app running on http://localhost:4200'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.1：ng-basic-animation应用程序在http://localhost:4200上运行
- en: Now that we have the app running, we will move on to the steps for the recipe.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经运行了应用程序，我们将继续到菜谱的步骤。
- en: How to do it…
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We have an app that doesn’t have Angular animations configured at all. We will
    create a fading effect for the cards using Angular animations. Let’s continue
    with the steps as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个完全没有配置Angular动画的应用程序。我们将使用Angular动画为卡片创建淡入效果。让我们继续以下步骤：
- en: 'First, we’ll import the `provideAnimations` function from the `@angular/platform-browser/animations`
    package in our `src/app/app.config.ts` file so we can use animations in the app.
    We’ll use it in the `providers` array as follows:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将从`@angular/platform-browser/animations`包中导入`provideAnimations`函数到我们的`src/app/app.config.ts`文件中，这样我们就可以在应用程序中使用动画了。我们将在`providers`数组中使用它，如下所示：
- en: '[PRE1]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now modify the `app.component.ts` file to add the animations as follows:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在修改`app.component.ts`文件，添加以下动画：
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, add the `fadeInOut` animation on both the cards in the `app.component.html`
    file as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`app.component.html`文件中为两个卡片添加`fadeInOut`动画，如下所示：
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Great! You have now implemented a basic *fade-in* <=> *fade-out* animation for
    the cards. Simple, but pretty! Refer to the next section to understand how the
    recipe works.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！你现在已经为卡片实现了基本的*淡入* <=> *淡出*动画。简单，但很漂亮！参考下一节了解菜谱的工作原理。
- en: How it works…
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Angular provides its own animation API that allows you to animate any property
    that the CSS transitions work on. The benefit is that you can configure them dynamically
    based on the conditions required. If we were to create the same behavior in CSS,
    we would have to do the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 提供了自己的动画 API，允许您对 CSS 过渡支持的任何属性进行动画处理。好处是您可以根据所需条件动态配置它们。如果我们要在 CSS
    中创建相同的行为，我们必须执行以下操作：
- en: 'We would have to create the keyframes in CSS as follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在 CSS 中创建以下关键帧：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Creating the CSS classes to apply these animations:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建应用这些动画的 CSS 类：
- en: '[PRE5]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Then we would have to add and remove the CSS classes on each element as they
    are **created** on the DOM and are **removed**. However, Angular handles this
    process using the built-in `:enter` and `:leave` states, which get triggered once
    an item is added or removed from the DOM, respectively.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们必须在每个元素上添加和删除 CSS 类，因为它们在 DOM 中 **创建** 和 **移除** 时。然而，Angular 使用内置的 `:enter`
    和 `:leave` 状态来处理此过程，这些状态分别在项目被添加到或从 DOM 中移除时触发。
- en: Even with the steps above, more challenges can appear when working with such
    animations. Thanks to Angular animations, we can implement these a lot faster.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有上述步骤，当处理此类动画时，仍可能出现更多挑战。多亏了 Angular 动画，我们可以更快地实现这些功能。
- en: 'We first used the `trigger` function to register the animation named `fadeInOut`.
    Then we had the `:enter` and `:leave` transitions being registered with the `transition`
    function. Finally, we defined the styles and animations for those transitions
    using the `style` and `animate` functions. Note that we’re using `''200ms 100ms..''`
    in the `:enter` transition. `200ms` is the duration of the transition while `100ms`
    is the delay. We add this `delay` so we can wait for the `:leave` transition of
    the previously shown card to finish before we can move to the `:enter` transition
    of the next card to be shown. Let’s delve deeper into each of the functions we
    used:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用 `trigger` 函数注册名为 `fadeInOut` 的动画。然后我们使用 `transition` 函数注册 `:enter` 和
    `:leave` 过渡。最后，我们使用 `style` 和 `animate` 函数定义了这些过渡的样式和动画。请注意，我们在 `:enter` 过渡中使用
    `'200ms 100ms..'`。`200ms` 是过渡的持续时间，而 `100ms` 是延迟。我们添加这个延迟，以便在我们可以移动到下一个要显示的卡的
    `:enter` 过渡之前，等待之前显示的卡的 `:leave` 过渡完成。让我们深入了解我们使用的每个函数：
- en: 'The `trigger` function: The `trigger` function is used to define an animation
    trigger in Angular. The first argument is the name of the trigger, which will
    be used in the template to bind the animation to a specific element. The second
    argument is an array of state and transition definitions. For example, `trigger(''fadeInOut'',
    [...])` registers an animation trigger named `''fadeInOut`''.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`trigger` 函数：`trigger` 函数用于在 Angular 中定义动画触发器。第一个参数是触发器的名称，它将在模板中使用以将动画绑定到特定元素。第二个参数是状态和过渡定义的数组。例如，`trigger(''fadeInOut'',
    [...])` 注册了一个名为 `''fadeInOut''` 的动画触发器。'
- en: 'The `:enter` and `:leave` transitions: `:enter` is an alias for the `void =>
    *` state transition. It represents the state of an element that is being added
    to the DOM. `:leave` is an alias for the `* => void` state transition. It represents
    the state of an element that is being removed from the DOM. These aliases are
    useful for animations that are common to elements entering or leaving the view,
    such as fade-in and fade-out animations.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`:enter` 和 `:leave` 过渡：`:enter` 是 `void => *` 状态转换的别名。它表示一个元素被添加到 DOM 中的状态。`:leave`
    是 `* => void` 状态转换的别名。它表示一个元素被从 DOM 中移除的状态。这些别名对于元素进入或离开视图时常见的动画非常有用，例如淡入和淡出动画。'
- en: 'The `transition` function: The `transition` function is used to define the
    states between which transitions will occur. It accepts two arguments: the first
    is a string that defines the state change expression, and the second is an array
    of animation steps to run when the transition is triggered. For example, `transition('':enter'',
    [...])` defines the animation steps that will be executed when an element enters
    the view.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`transition` 函数：`transition` 函数用于定义过渡将发生的状态。它接受两个参数：第一个是一个字符串，定义了状态更改表达式；第二个是一个数组，当过渡被触发时将运行动画步骤。例如，`transition('':enter'',
    [...])` 定义了当元素进入视图时将执行的动画步骤。'
- en: '`style`: The `style` function is used to define a set of CSS styles that will
    be used in the animation. It accepts an object where the keys are CSS properties
    and the values are the desired values for those properties. For example, `style({
    opacity: 0, scale: 0.85 })` sets the opacity to `0` and scales the element down
    to 85% of its original size.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`style`：`style`函数用于定义在动画中将使用的CSS样式集。它接受一个对象，其中键是CSS属性，值是这些属性的期望值。例如，`style({
    opacity: 0, scale: 0.85 })`将透明度设置为`0`并将元素缩小到原始大小的85%。 '
- en: '`animate`: The `animate` function is used to define the timing and easing for
    the transition between styles. The first argument is a string that defines the
    duration, delay, and easing curve. For instance, `200ms 100ms` means the animation
    will last 200 ms and will start after a delay of 100 ms. The second argument is
    the style or a set of styles that the animation will transition to. For example,
    `animate(''200ms 100ms'', style({ opacity: 1, scale: 1 }))` will transition the
    element to full opacity and original scale over 300 ms, after waiting for 100
    ms.'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`animate`：`animate`函数用于定义样式之间的转换的计时和缓动。第一个参数是一个字符串，定义了持续时间、延迟和缓动曲线。例如，`200ms
    100ms`意味着动画将持续200毫秒，并在延迟100毫秒后开始。第二个参数是动画将过渡到的样式或一组样式。例如，`animate(''200ms 100ms'',
    style({ opacity: 1, scale: 1 }))`将在等待100毫秒后，在300毫秒内将元素过渡到全透明度和原始大小。'
- en: See also
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Animations in Angular: [https://angular.io/guide/animations](https://angular.io/guide/animations)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular中的动画：[https://angular.io/guide/animations](https://angular.io/guide/animations)
- en: '*Angular Animations Explained with Examples*: [https://www.freecodecamp.org/news/angular-animations-explained-with-examples/](https://www.freecodecamp.org/news/angular-animations-explained-with-examples/)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用示例解释Angular动画*：[https://www.freecodecamp.org/news/angular-animations-explained-with-examples/](https://www.freecodecamp.org/news/angular-animations-explained-with-examples/)'
- en: Working with multi-state animations
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多状态动画的制作
- en: In this recipe, we’ll work with Angular animations containing multiple states.
    This means that we’ll work with more than two states for a particular item. We’ll
    be using the same Facebook and Twitter cards example for this recipe as well.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将处理包含多个状态的Angular动画。这意味着我们将为特定项目处理超过两个状态。我们也将使用相同的Facebook和Twitter卡片示例来完成这个食谱。
- en: 'We’ll configure the following states for both cards:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为两张卡片配置以下状态：
- en: The state when a card appears on the screen.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卡片出现在屏幕上的状态。
- en: The state when the user hovers over a card.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户悬停在卡片上时的状态。
- en: The state when the user moves the mouse away from the card.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户将鼠标从卡片移开时的状态。
- en: Getting ready
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The app that we are going to work with resides in `start/apps/chapter04/ng-multi-state-animations`
    inside the cloned repository:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的应用程序位于克隆的仓库中的`start/apps/chapter04/ng-multi-state-animations`目录内：
- en: Open the code repository in your code editor.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开代码仓库。
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到代码仓库目录，并运行以下命令以运行项目：
- en: '[PRE6]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This should open the app in a new browser tab, and you should see the following:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会在新浏览器标签页中打开应用程序，你应该会看到以下内容：
- en: '![](img/B18469_04_02.png)'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/B18469_04_02.png)'
- en: 'Figure 4.2: ng-multi-state-animations app running on http://localhost:4200'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.2：ng-multi-state-animations应用程序在http://localhost:4200上运行
- en: Now that we have the app running locally, let’s look at the steps of the recipe
    in the next section.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在本地上运行了应用程序，接下来让我们看看下一节中食谱的步骤。
- en: How to do it…
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'We already have a working app that has a single animation built for the reach
    of social cards. When you tap either the Facebook or Twitter button, you’ll see
    the respective card appearing with a slide-in animation from left to right. To
    keep the recipe simple, we’ll implement two more states and two animations for
    when the user moves the mouse cursor over the card and when the user moves away
    from the card. Let’s add the relevant code in the following steps:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有一个工作中的应用程序，它为社交卡片制作了一个动画。当你点击Facebook或Twitter按钮时，你会看到相应的卡片从左到右出现滑动动画。为了保持食谱简单，我们将实现两个更多状态和两个动画，用于当用户将鼠标光标移至卡片上以及当用户从卡片移开时。让我们在以下步骤中添加相关代码：
- en: 'We’ll start by adding two `@HostListener` instances to `FbCardComponent` in
    the `components/fb-card/fb-card.component.ts` file, one for the `mouseenter` event
    on the card and one for the `mouseleave` event. We’ll name the states `hovered`
    and `active`, respectively. The code should look as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先在 `components/fb-card/fb-card.component.ts` 文件中的 `FbCardComponent` 上添加两个
    `@HostListener` 实例，一个用于卡片的 `mouseenter` 事件，另一个用于 `mouseleave` 事件。我们将这些状态分别命名为
    `hovered` 和 `active`。代码应如下所示：
- en: '[PRE7]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we’ll do the same for `TwitterCardComponent` in the `components/twitter-card/twitter-card-component.ts`
    file. The code should look as follows:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将在 `components/twitter-card/twitter-card-component.ts` 文件中为 `TwitterCardComponent`
    做同样的事情。代码应如下所示：
- en: '[PRE8]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There should be no visual change so far since we’re only updating the `cardState`
    variable to have the hover and active states. We haven’t defined the transitions
    yet for the animation.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到目前为止，应该没有视觉变化，因为我们只是更新了 `cardState` 变量以拥有悬停和活动状态。我们还没有为动画定义过渡。
- en: 'We’ll now define our state for when the user’s cursor enters the card, that
    is, the `mouseenter` event. The state is called `hovered` and should look as follows
    in the `animation.ts` file:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将定义当用户的鼠标进入卡片时我们的状态，即 `mouseenter` 事件。这个状态被称为 `hovered`，在 `animation.ts`
    文件中应如下所示：
- en: '[PRE9]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you refresh the app now, tap either the Facebook or Twitter button, and hover
    the mouse over the card, you’ll see the card’s UI changing. That’s because we
    changed the state to `hovered`. However, there’s no animation yet between the
    style changes. Let’s add the animation in the next step.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你现在刷新应用，点击 Facebook 或 Twitter 按钮，并将鼠标悬停在卡片上，你会看到卡片的 UI 发生变化。这是因为我们将状态更改为 `hovered`。然而，在样式更改之间还没有动画效果。让我们在下一步添加动画。
- en: 'We’ll add the `active => hovered` transition now in the `animations.ts` file
    so that we can smoothly navigate from `active` to the `hovered` state:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将在 `animations.ts` 文件中添加 `active => hovered` 过渡，这样我们就可以从 `active` 状态平滑地导航到
    `hovered` 状态：
- en: '[PRE10]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You should now see the smooth transition on the `mouseenter` event if you refresh
    the app.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你刷新应用，现在你应该会看到 `mouseenter` 事件上的平滑过渡。
- en: 'Finally, we’ll add the final transition, `hovered =>` `active`, so when the
    user leaves the card, we revert to the active state with a smooth animation. The
    code should look as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将添加最终的过渡，`hovered => active`，这样当用户离开卡片时，我们可以通过平滑动画恢复到活动状态。代码应如下所示：
- en: '[PRE11]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Ta-da! You now know how to implement different states and different animations
    on a single element using **Angular animations**.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！你现在知道如何使用 **Angular 动画** 在单个元素上实现不同的状态和不同的动画。
- en: How it works…
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Angular uses triggers to understand what state the animation is in. An example
    syntax looks as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 使用触发器来理解动画处于哪种状态。一个示例语法如下：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `expression` can be a valid JavaScript expression, and it evaluates to
    the name of the state. In our case, we bind it to the `cardState` property, which
    contains either `active` or `hovered`. Therefore, we end up with three transitions
    for our cards:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`expression` 可以是一个有效的 JavaScript 表达式，并计算为状态的名称。在我们的例子中，我们将其绑定到 `cardState`
    属性，它包含 `active` 或 `hovered`。因此，我们最终为我们的卡片得到三个过渡：'
- en: '`void => active` (when the element is added to the DOM and is rendered)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void => active`（当元素被添加到 DOM 中并渲染时）'
- en: '`active => hovered` (when the `mouseenter` event triggers on the card)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`active => hovered`（当卡片上的 `mouseenter` 事件触发时）'
- en: '`hovered => active` (when the `mouseleave` event triggers on the card)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hovered => active`（当卡片上的 `mouseleave` 事件触发时）'
- en: See also
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Triggering the animation: [https://angular.io/guide/animations#triggering-the-animation](https://angular.io/guide/animations#triggering-the-animation)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发动画：[https://angular.io/guide/animations#triggering-the-animation](https://angular.io/guide/animations#triggering-the-animation)
- en: 'Reusable animations: [https://angular.io/guide/reusable-animations](https://angular.io/guide/reusable-animations)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可重用动画：[https://angular.io/guide/reusable-animations](https://angular.io/guide/reusable-animations)
- en: Creating complex Angular animations using keyframes
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用关键帧创建复杂的 Angular 动画
- en: Since you already know about Angular animations from the previous recipes, you
    might be thinking, “That’s easy enough.” Well, time to level up your animation
    skills in this recipe. You’ll create a complex Angular animation using `keyframes`
    in this recipe to get started with writing some advanced animations.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你已经从之前的菜谱中了解了 Angular 动画，你可能正在想，“这很简单。”好吧，现在是时候提升你的动画技能了。在这个菜谱中，你将使用 `keyframes`
    创建一个复杂的 Angular 动画，以开始编写一些高级动画。
- en: Getting ready
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The app that we are going to work with resides in `start/apps/chapter04/ng-animations-keyframes`
    inside the cloned repository:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的应用位于克隆的仓库中的`start/apps/chapter04/ng-animations-keyframes`：
- en: Open the code repository in your code editor.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开代码仓库。
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到代码仓库目录，并运行以下命令来启动项目：
- en: '[PRE13]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This should open the app in a new browser tab, and you should see the following:'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该在新浏览器标签页中打开应用，你应该看到以下内容：
- en: '![](img/B18469_04_03.png)'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/B18469_04_03.png)'
- en: 'Figure 4.3: ng-animations-keyframes app running on http://localhost:4200'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.3：ng-animations-keyframes应用在http://localhost:4200上运行
- en: Now that we have the app running locally, let’s look at the steps of the recipe
    in the next section.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在本地上运行了应用，让我们在下一节中查看食谱的步骤。
- en: How to do it…
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We have an app right now that has a single transition, that is, `void => active`,
    which triggers when the element enters the DOM. Right now, the animation is pretty
    simple. We’ll use the `keyframes` function to build a complex animation:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个应用，它有一个单一的过渡，即`void => active`，当元素进入DOM时触发。目前，动画非常简单。我们将使用`keyframes`函数来构建一个复杂动画：
- en: 'Let’s begin with adding the `keyframes` function from `@angular/animations`
    to the `animations.ts` file as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从向`animations.ts`文件添加`@angular/animations`中的`keyframes`函数开始，如下所示：
- en: '[PRE14]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we’ll convert the single-style animation for the `void => transition`
    to use keyframes as follows:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将把`void => transition`的单样式动画转换为使用关键帧，如下所示：
- en: '[PRE15]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Notice that previously we had to define the initial style and the `animate`
    function. Now we can define the same inside the `keyframes` function in chronological
    order. If you refresh the app now and try it, you’ll still see the same animation
    as before. But now we have it using `keyframes`.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，之前我们不得不定义初始样式和`animate`函数。现在我们可以在按时间顺序的`keyframes`函数内部定义相同的样式。如果你现在刷新应用并尝试，你仍然会看到之前的相同动画。但现在我们使用的是`keyframes`。
- en: 'Finally, let’s start adding some complex animations. Let’s start the animation
    with a scaled-down card by adding `scale3d` to the `transform` property of `style`
    at `offset: 0`. We’ll also increase the animation time to `1.5s`:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '最后，让我们开始添加一些复杂的动画。让我们通过在`style`的`transform`属性中添加`scale3d`到`offset: 0`来以缩小的卡片开始动画。我们还将增加动画时间为`1.5s`：'
- en: '[PRE16]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You should now see that the card animation starts with a small card that slides
    from the left and moves toward the right, increasing in size.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你现在应该看到卡片动画从一个小的卡片开始，它从左侧滑行并移动到右侧，逐渐增大。
- en: 'Now we’ll implement a *zig-zag-ish* animation for the appearance of the card
    instead of the slide-in animation. Let’s add the following keyframe elements to
    the `keyframes` array to add a bumpy effect to our animation:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将实现一个类似“之字形”的动画来代替卡片出现的滑动动画。让我们向`keyframes`数组添加以下关键帧元素，以给我们的动画添加一个颠簸效果：
- en: '[PRE17]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you refresh the app and tap any of the buttons, you should see the card
    bumping to the right wall, and then to the left wall of the card, before returning
    to the normal state:'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你刷新应用并点击任何按钮，你应该看到卡片向右墙壁弹跳，然后撞到卡片的左侧墙壁，最后返回到正常状态：
- en: '![](img/B18469_04_04.png)'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/B18469_04_04.png)'
- en: 'Figure 4.4: Card bumping to the right and then the left wall'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.4：卡片向右弹跳然后撞到左侧墙壁
- en: 'As the last step, we’ll spin the card clockwise before it returns to its original
    position. For that, we’ll use `offset: 0.75`, using the `rotate` function with
    some additional angles. The code should look as follows:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '作为最后一步，我们在卡片返回原始位置之前将其顺时针旋转。为此，我们将使用`offset: 0.75`，结合`rotate`函数和一些额外的角度。代码应该如下所示：'
- en: '[PRE18]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Awesome! You now know how to implement complex animations in Angular using the
    `keyframes` function. You will see in the next section how it works.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！你现在知道如何使用`keyframes`函数在Angular中实现复杂动画。你将在下一节中看到它是如何工作的。
- en: How it works…
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: For complex animations in Angular, the `keyframes` function from the `@angular/animations`
    package is an amazing way of providing different timing offsets for the animation
    throughout its journey. We can define the offsets using the `style` function,
    which returns an object of type `AnimationStyleMetadata`. The `style` function
    takes tokens as inputs, which are a key-value pair where the keys are of the string
    type and the value can be either a string or a number. Essentially, a token represents
    a CSS property. This allows us to pass the `offset` property as shown in the recipe,
    which can have a value between `0` and `1`, reflecting the timing from `0%` to
    `100%` of the animation. Thus, we can define different styles for different offsets
    to create advanced animations.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Angular中的复杂动画，`@angular/animations`包中的`keyframes`函数是提供动画整个旅程中不同时间偏移的绝佳方式。我们可以使用`style`函数来定义偏移量，它返回一个类型为`AnimationStyleMetadata`的对象。`style`函数接受标记作为输入，这些标记是一个键值对，其中键是字符串类型，值可以是字符串或数字。本质上，一个标记代表一个CSS属性。这允许我们传递`offset`属性，如菜谱中所示，其值介于`0`和`1`之间，反映了动画从`0%`到`100%`的时间。因此，我们可以为不同的偏移量定义不同的样式来创建高级动画。
- en: See also
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Animations in Angular: [https://angular.io/guide/animations](https://angular.io/guide/animations)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular中的动画：[https://angular.io/guide/animations](https://angular.io/guide/animations)
- en: 'Angular Animations Explained with Examples: [https://www.freecodecamp.org/news/angular-animations-explained-with-examples/](https://www.freecodecamp.org/news/angular-animations-explained-with-examples/)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用示例解释Angular动画：[https://www.freecodecamp.org/news/angular-animations-explained-with-examples/](https://www.freecodecamp.org/news/angular-animations-explained-with-examples/)
- en: Animating lists in Angular using stagger animations
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用交错动画在Angular中动画化列表
- en: No matter what kind of web application you build today, you are likely to implement
    some sort of list in it. And to make those lists even better, why not implement
    elegant animations for them? In this recipe, you’ll learn how to animate lists
    in Angular using stagger animations.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你今天构建什么类型的Web应用程序，你很可能会在其中实现某种类型的列表。为了使这些列表更加出色，为什么不给它们实现优雅的动画呢？在这个菜谱中，你将学习如何使用交错动画在Angular中动画化列表。
- en: Getting ready
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The app that we are going to work with resides in `start/apps/chapter04/ng-animating-lists`
    inside the cloned repository:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的应用程序位于克隆的仓库`start/apps/chapter04/ng-animating-lists`中：
- en: Open the code repository in your code editor.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开代码仓库。
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到代码仓库目录，并运行以下命令以提供项目：
- en: '[PRE19]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This should open the app in a new browser tab, and you should see the following:'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该在新的浏览器标签页中打开应用程序，你应该看到以下内容：
- en: '![](img/B18469_04_05.png)'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/B18469_04_05.png)'
- en: 'Figure 4.5: ng-animating-lists app running on http://localhost:4200'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.5：ng-animating-lists应用程序在http://localhost:4200上运行
- en: Now that we have the app running locally, let’s see the steps of the recipe
    in the next section.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在本地运行了应用程序，让我们在下一节中查看菜谱的步骤。
- en: How to do it…
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: We have an app right now that has a list of bucket items. We need to animate
    the list using staggering animations. We’ll be doing this step by step. I’m excited
    – are you?
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个应用程序，其中包含一个桶项目列表。我们需要使用交错动画来动画化这个列表。我们将一步步完成这个操作。我很兴奋——你呢？
- en: 'Cool. We’ll go through the following steps for the recipe:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。我们将按照以下步骤进行菜谱：
- en: 'First, let’s provide Angular Animations using the `provideAnimations` function
    from Angular in the `src/app/app.config.ts` file as follows:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们在`src/app/app.config.ts`文件中使用Angular的`provideAnimations`函数提供Angular动画，如下所示：
- en: '[PRE20]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, create a file named `animations.ts` in the project’s `app` folder and
    add the following code to register a basic list item animation named `listItemAnimation`:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在项目的`app`文件夹中创建一个名为`animations.ts`的文件，并将以下代码添加到注册一个名为`listItemAnimation`的基本列表项动画中：
- en: '[PRE21]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, we’ll add the animation to `BucketComponent` in the `app/bucket/bucket.component.ts`
    file as follows:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将动画添加到`app/bucket/bucket.component.ts`文件中的`BucketComponent`，如下所示：
- en: '[PRE22]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Since we have the animation imported into the component, we can use it in the
    template now.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们已经将动画导入到组件中，现在我们可以在模板中使用它了。
- en: 'Let’s add the animation to the `html` element, with the class `fruits__item`
    in the `bucket.component.html` file, as follows:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`bucket.component.html`文件中将动画添加到`html`元素，带有`fruits__item`类，如下所示：
- en: '[PRE23]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If you now refresh the app and add an item to the bucket list, you should see
    it appear with a fade-in effect. And if you delete an item, you should see it
    disappear with the animation as well.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你现在刷新应用程序并向桶列表中添加一个项目，你应该看到它以淡入效果出现。如果你删除一个项目，你应该看到它以动画消失。
- en: 'We’ll modify `LIST_ITEM_ANIMATION` now to use the `stagger` function. This
    is because the staggering animation is applied on the list, and not the list items.
    First, we need to import the `stagger` function from `@angular/animations`. Then
    we need to remove everything from the trigger array, and then create a wildcard
    transition for the list as follows:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将修改`LIST_ITEM_ANIMATION`以使用`stagger`函数。这是因为交错动画应用于列表，而不是列表项。首先，我们需要从`@angular/animations`中导入`stagger`函数。然后我们需要从触发器数组中删除所有内容，然后创建一个如下所示的列表通配符转换：
- en: '[PRE24]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now we’ll add a `query` for what happens when a new item is added to the list.
    We’ll use a staggering animation here. The code should look as follows:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将添加一个查询，用于当列表中添加新项目时的情况。这里我们将使用交错动画。代码应该如下所示：
- en: '[PRE25]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now we’ll add the query for when an item leaves the list. The code should look
    as follows:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将添加一个查询，用于当项目离开列表时的情况。代码应该如下所示：
- en: '[PRE26]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now we can apply the animation to the list itself. Update the `bucket.component.html`
    as follows to put the animation on the `div` with the class `fruits` instead:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以将动画应用到列表本身。按照以下方式更新`bucket.component.html`，将动画放置在具有`fruits`类的`div`上：
- en: '[PRE27]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Notice that we’re binding the `[@ listAnimationlistItemAnimation]` property
    to `bucket.length`. This will make sure that the animation triggers whenever the
    length of the bucket changes, that is, when an item is added or removed from the
    bucket. And this is possible because of the transition `('* <=> *')`.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，我们将`[@ listAnimationlistItemAnimation]`属性绑定到`bucket.length`。这将确保动画在桶的长度改变时触发，即当向桶中添加或从桶中删除项目时。这是由于`('*
    <=> *')`转换。
- en: Awesome! You now know how to implement staggering animations for lists in Angular.
    You’ll see in the next section how it works.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！你现在知道如何在Angular中实现列表的交错动画。你将在下一节中看到它是如何工作的。
- en: How it works…
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Stagger animations only work inside `query` functions and are applied on the
    list (containing the items) instead of the items themselves. To search or query
    the items, we first use the `query` function. Then we use the `stagger` function
    to define how many milliseconds of staggering we want before the animation starts
    for the next list item. We also use the animation in the `stagger` functions to
    define the animation for each element found in the query. Notice that we’re using
    `{` `optional: true` `}` for both the `:enter` query and the `:leave` query. We’re
    using it because if there is no item to animate, either when the app starts or
    if all items are removed, Angular throws an error because it can’t find anything
    to animate.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '交错动画仅在`query`函数内部工作，并且应用于列表（包含项目）而不是项目本身。为了搜索或查询项目，我们首先使用`query`函数。然后我们使用`stagger`函数来定义在动画开始之前我们想要多少毫秒的交错。我们还在`stagger`函数中使用动画来定义查询中找到的每个元素的动画。请注意，我们在`:enter`查询和`:leave`查询中都使用了`{`
    `optional: true` `}`。我们这样做是因为如果没有项目要动画化，无论是应用程序启动时还是所有项目都被删除时，Angular都会抛出一个错误，因为它找不到可以动画化的内容。'
- en: See also
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Animations in Angular: [https://angular.io/guide/animations](https://angular.io/guide/animations)'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular中的动画：[https://angular.io/guide/animations](https://angular.io/guide/animations)
- en: 'Angular animations stagger docs: [https://angular.io/api/animations/stagger](https://angular.io/api/animations/stagger
    )'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular动画交错文档：[https://angular.io/api/animations/stagger](https://angular.io/api/animations/stagger
    )
- en: Sequential vs parallel animations in Angular
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular中的顺序与并行动画
- en: In this recipe, you’ll learn how to run Angular animations in a sequence vs
    in parallel. This is handy for when we want to have one animation finished before
    we start the next one, or to run the animations simultaneously.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何在Angular中按顺序运行动画与并行运行动画。这在我们需要在开始下一个动画之前完成一个动画，或者同时运行动画时非常有用。
- en: Getting ready
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The app that we are going to work with resides in `start/apps/chapter04/ng-seq-parallel-animations`
    inside the cloned repository:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的应用程序位于克隆的仓库中的`start/apps/chapter04/ng-seq-parallel-animations`目录下：
- en: Open the code repository in your code editor.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开代码仓库。
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到代码仓库目录，并运行以下命令以启动项目：
- en: '[PRE28]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This should open the app in a new browser tab, and you should see the following:'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该在新的浏览器标签页中打开应用程序，你应该看到以下内容：
- en: '![](img/B18469_04_06.png)'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图4.6：ng-seq-parallel-animations应用程序在http://localhost:4200上运行](img/B18469_04_06.png)'
- en: 'Figure 4.6: ng-seq-parallel-animations app running on http://localhost:4200'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.6：ng-seq-parallel-animations应用程序在http://localhost:4200上运行
- en: Now that we have the app running locally, let’s see the steps of the recipe
    in the next section.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在本地运行了应用程序，让我们在下一节中查看菜谱的步骤。
- en: How to do it…
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We have an app that displays the two social cards we used in the previous recipes.
    One for Facebook and one for Twitter.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个应用程序，显示我们在前面的菜谱中使用的两个社交卡片。一个用于Facebook，一个用于Twitter。
- en: 'To run the animations sequentially and in parallel for both cards, we will
    use the `query` function to configure the animations sequentially. And then we
    will use the `group` function to run them in parallel. Let’s get started:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为了同时按顺序和并行运行两张卡片上的动画，我们将使用`query`函数来按顺序配置动画。然后我们将使用`group`函数来并行运行它们。让我们开始吧：
- en: 'First, let’s provide Angular animations using the `provideAnimations` function
    from Angular in the `src/app/app.config.ts` file as follows:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们在`src/app/app.config.ts`文件中使用Angular的`provideAnimations`函数提供Angular动画，如下所示：
- en: '[PRE29]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We will create a simple wrapper transition to handle the cards entering and
    leaving the DOM. Afterward, we’ll handle how they can be triggered together when
    the current card leaves the view. Create a new file named `animations.ts` in the
    `app` folder. Add the following code to it:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个简单的包装转换来处理卡片进入和离开DOM。之后，我们将处理当当前卡片离开视图时如何一起触发它们。在`app`文件夹中创建一个名为`animations.ts`的新文件。将以下代码添加到其中：
- en: '[PRE30]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now let’s add a query for when the card leaves the view. Inside the `transition`
    array, add the following `query` as follows:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们为卡片离开视图时添加一个查询。在`transition`数组内部，按照以下方式添加以下`query`：
- en: '[PRE31]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We will import the animation in the `app.component.ts` file and add it to the
    `animations` array as follows:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在`app.component.ts`文件中导入动画并将其添加到`animations`数组中，如下所示：
- en: '[PRE32]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now we’ll update the `app.component.html` to use the animation on the element
    with the `card-container` class. Update the file as follows:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将更新`app.component.html`文件以使用具有`card-container`类的元素的动画。按照以下方式更新文件：
- en: '[PRE33]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You should be able to see the animation now by clicking the Facebook and Twitter
    buttons. That is, the card slides from its position to the right of the screen.
    However, it doesn’t look pretty.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该可以通过点击Facebook和Twitter按钮看到动画了。也就是说，卡片从屏幕右侧的位置滑动到当前位置。然而，它看起来并不漂亮。
- en: 'Let’s add another query for when the next card enters the view. We’ll first
    make sure that the card is `invisible` when starting to enter the DOM. Replace
    the animation in the `animations.ts` file as follows:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为下一张卡片进入视图时添加另一个查询。我们首先确保卡片在开始进入DOM时是`不可见`的。按照以下方式替换`animations.ts`文件中的动画：
- en: '[PRE34]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now add the second `query` for the card to be entered in the screen. We’ll
    make sure it slides in from the left and becomes visible slowly. Update the `animations.ts`
    file as follows:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在为要进入屏幕的卡片添加第二个`query`。我们将确保它从左侧滑入并缓慢变得可见。按照以下方式更新`animations.ts`文件：
- en: '[PRE35]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: You’ll notice that the animations are working now. However, they are really
    slow. That is, the next card takes a lot of time to appear after the current card
    has left the screen. That’s because they are all running in sequence.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会注意到动画现在正在工作。然而，它们真的很慢。也就是说，在当前卡片离开屏幕后，下一张卡片需要很长时间才能出现。这是因为它们都是按顺序运行的。
- en: 'We can wrap the second and third queries in a `group` function to run them
    in parallel. Update the code in the `animations.ts` as follows:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以将第二个和第三个查询包裹在`group`函数中，以并行运行它们。按照以下方式更新`animations.ts`文件中的代码：
- en: '[PRE36]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: And boom! You can now see that the animations are running in parallel and are
    not waiting for the `:leave` transition to be finished before the `:enter` transition
    is executed.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，砰！你现在可以看到动画正在并行运行，并且在执行`:enter`转换之前不会等待`:leave`转换完成。
- en: How it works…
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Animations in Angular run in sequence by default. If a transition has more than
    one step, i.e., `style` and `animate` usages, the animations will run in sequence.
    The `group` function makes it possible for us to run animations in parallel. For
    this recipe, we wanted both `:enter` and `:leave` transitions to run at the same
    time so we grouped them to run in parallel at the end.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular中，动画默认按顺序运行。如果一个转换有多个步骤，即`style`和`animate`用法，动画将按顺序运行。`group`函数使我们能够并行运行动画。对于这个菜谱，我们希望`:enter`和`:leave`转换同时运行，所以我们把它们组合起来并行运行。
- en: See also
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Sequential vs parallel animations in Angular ([https://angular.io/guide/complex-animation-sequences#sequential-vs-parallel-animation](https://angular.io/guide/complex-animation-sequences#sequential-vs-parallel-animation))
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular中的顺序动画与并行动画对比 ([https://angular.io/guide/complex-animation-sequences#sequential-vs-parallel-animation](https://angular.io/guide/complex-animation-sequences#sequential-vs-parallel-animation))
- en: Angular animations `sequence` function ([https://angular.io/api/animations/sequence](https://angular.io/api/animations/sequence))
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular动画`sequence`函数 ([https://angular.io/api/animations/sequence](https://angular.io/api/animations/sequence))
- en: Route animations in Angular
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular中的路由动画
- en: In this recipe, you’ll learn how to implement route animations in Angular. You’ll
    learn how to configure route animations by passing the transition state name to
    the route as a data property. You’ll also learn how to use the `RouterOutlet`
    API to get the transition name and apply it to the animation to be executed. We’ll
    implement some 3D transitions, so it is going to be fun!
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何在Angular中实现路由动画。你将学习如何通过将过渡状态名称作为数据属性传递给路由来配置路由动画。你还将学习如何使用`RouterOutlet`
    API获取过渡名称并将其应用于要执行的动画。我们将实现一些3D过渡，这将很有趣！
- en: Getting ready
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'The app that we are going to work with resides in `start/apps/chapter04/ng-route-animations`
    inside the cloned repository:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的应用位于克隆的仓库中的`start/apps/chapter04/ng-route-animations`：
- en: Open the code repository in your code editor.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开代码仓库。
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到代码仓库目录，并运行以下命令以运行项目：
- en: '[PRE37]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This should open the app in a new browser tab, and you should see the following:'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该在新的浏览器标签页中打开应用，你应该看到以下内容：
- en: '![](img/B18469_04_07.png)'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_04_07.png)'
- en: 'Figure 4.7: ng-route-animations app running on http://localhost:4200'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.7：ng-route-animations应用在http://localhost:4200上运行
- en: Now that we have the app running locally, let’s see the steps of the recipe
    in the next section.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在本地上运行了应用，让我们在下一节中查看菜谱的步骤。
- en: How to do it…
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'We have a simple app with two lazy-loaded routes now. The routes are for the
    **Home** and the **About** pages, and we will now start configuring the animations
    for the app:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个简单的应用，包含两个懒加载的路由。这些路由是针对**主页**和**关于**页面的，我们现在将开始配置应用的动画：
- en: 'First, let us provide Angular animations using the `provideAnimations` function
    from Angular in the `src/app/app.config.ts` file as follows:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们在`src/app/app.config.ts`文件中使用Angular的`provideAnimations`函数提供Angular动画，如下所示：
- en: '[PRE38]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We will now create a new file named `animations.ts` inside the `app` folder.
    Let us put the following code in the `animations.ts` file to register a basic
    trigger to handle animations from a route to every other route:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将在`app`文件夹内创建一个名为`animations.ts`的新文件。让我们将以下代码放入`animations.ts`文件中，以注册一个基本的触发器来处理从路由到其他所有路由的动画：
- en: '[PRE39]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We’ll now register some queries and basic states for the animations. Let’s
    add the following items in the `transition` function’s array as follows:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将为动画注册一些查询和基本状态。让我们按照以下方式在`transition`函数的数组中添加以下项：
- en: '[PRE40]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Alright! We have the `routeAnimation` trigger registered now for transitioning
    from a route to every other route. Now, let’s provide those transition states
    in the routes.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 好的！我们已经注册了从路由到其他所有路由的`routeAnimation`触发器。现在，让我们在路由中提供这些过渡状态。
- en: 'We can provide the states for the transitions using a unique identifier for
    each route. There are many ways to do this, but the easiest way is to provide
    them using the `data` attribute in the route configuration as follows in the `app.routes.ts`
    file:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用每个路由的唯一标识符来提供过渡状态。有许多方法可以做到这一点，但最简单的方法是在`app.routes.ts`文件中使用路由配置中的`data`属性来提供它们，如下所示：
- en: '[PRE41]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, we need to provide this `transitionState` property from the current route
    to the route animation trigger in the `app.component.html` file. For this, create
    an `@ViewChild` property in the `app.component.ts` file. This `ViewChild` is going
    to target the `<router-outlet>` element in the `app.component.html` template.
    This is so we can get the current route’s `data` and the `transitionState` value
    provided. The code in the `app.component.ts` file should look as follows:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在`app.component.html`文件中提供这个`transitionState`属性，从当前路由到路由动画触发器。为此，在`app.component.ts`文件中创建一个`@ViewChild`属性。这个`ViewChild`将针对`app.component.html`模板中的`<router-outlet>`元素。这样我们就可以获取当前路由的`data`和提供的`transitionState`值。`app.component.ts`文件中的代码应该如下所示：
- en: '[PRE42]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We’ll also import `ROUTE_ANIMATION` from the `animations.ts` file into `app.component.ts`
    as follows:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将从`animations.ts`文件中导入`ROUTE_ANIMATION`到`app.component.ts`中，如下所示：
- en: '[PRE43]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We’ll now create a method named `getRouteAnimationState`, which will get the
    current route’s data and the `transitionState` value and return it. This function
    will later be used in `app.component.html`. Modify your code in `app.component.ts`
    as follows:'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在将创建一个名为`getRouteAnimationState`的方法，该方法将获取当前路由的数据和`transitionState`值，并返回它。这个函数将在`app.component.html`中使用。按照以下方式修改你的`app.component.ts`代码：
- en: '[PRE44]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Finally, let’s use the `getRouteAnimationState` method with the `@routeAnimation`
    trigger in `app.component.html` so we can see the animation in play:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们在`app.component.html`中使用`getRouteAnimationState`方法和`@routeAnimation`触发器，以便我们可以看到动画的播放效果：
- en: '[PRE45]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now that we have everything set up, let’s finalize the animations. We’ll add
    a query for when a route leaves the view. Update the `animations.ts` file as follows:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了一切，让我们最终确定动画。我们将为路由离开视图添加一个查询。更新`animations.ts`文件如下：
- en: '[PRE46]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: If you navigate between routes, you’ll notice the leaving route going out with
    animation behind the entering route. Let’s add the animation for the entering
    route as well.
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你在不同路由之间导航，你会注意到离开路由在进入路由之后以动画形式退出。让我们也为进入路由添加动画。
- en: 'We’ll add the animation for the route entering the view. Update the `animations.ts`
    as follows:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为进入视图的路由添加动画。更新`animations.ts`如下：
- en: '[PRE47]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: If you look at the animation route while navigating, you’ll notice that the
    entering route appears immediately, then we see the leaving route’s animation,
    and after that, we see the entering route’s animation. Let’s group the entering
    and leaving animations together to run them in parallel.
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你查看导航时的动画路由，你会注意到进入路由立即出现，然后我们看到离开路由的动画，之后我们看到进入路由的动画。让我们将进入和离开动画组合在一起，以并行运行它们。
- en: 'Update the `animations.ts` as follows to run the entering and leaving routes’
    animations in parallel:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`animations.ts`如下，以并行运行进入和离开路由的动画：
- en: '[PRE48]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Voilà! Refresh the app and see the magic. You should now see the 3D animation
    for both the entering and leaving routes as you navigate from the **Home** page
    to the **About** page and vice versa. The sky’s the limit when it comes to what
    you can do with keyframes and animations in Angular.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！刷新应用，看看魔法。现在，当你从**主页**导航到**关于**页面，反之亦然时，你应该会看到进入和离开路由的3D动画。在Angular中使用关键帧和动画，你可以做到的事情没有极限。
- en: How it works…
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In the `animations.ts` file, we first define our animation trigger named `routeAnimation`.
    Then we make sure that by default, the HTML element to which the trigger is assigned
    has `position: ''relative''` set as a style:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '在`animations.ts`文件中，我们首先定义了一个名为`routeAnimation`的动画触发器。然后我们确保默认情况下，触发器分配的HTML元素具有`position:
    ''relative''`样式：'
- en: '[PRE49]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Then we apply the styled `position: ''absolute''` to the children, as mentioned,
    using `:enter` and `:leave` as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '然后，我们按照所述，使用`:enter`和`:leave`将样式`position: ''absolute''`应用到子元素上：'
- en: '[PRE50]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This makes sure that these elements, that is, the routes to be loaded, have
    the `position: ''absolute''` style and a full width using `width: ''100%''` so
    they can appear on top of each other. You can always play around with it by commenting
    on either of the styles to see what happens (at your own risk, though!).'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '这样确保这些元素，即要加载的路由，具有`position: ''absolute''`样式和全宽使用`width: ''100%''`，以便它们可以相互叠加。你可以通过注释其中任何一个样式来随意尝试，看看会发生什么（尽管这样做有风险！）。'
- en: 'Then we defined our route transitions as a combination of two animations, the
    first for `query :leave` and the second for `query :enter`. For the route leaving
    the view, we set the `opacity` to `0` via the animation, and for the route entering
    the view, we set the `opacity` to `1` via the animation as well. Note that animations
    via Angular animations run in sequence:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们定义了我们的路由转换，作为两个动画的组合，第一个是`query :leave`，第二个是`query :enter`。对于离开视图的路由，我们通过动画将`opacity`设置为`0`，而对于进入视图的路由，我们也通过动画将`opacity`设置为`1`。请注意，Angular动画的动画是按顺序运行的：
- en: '[PRE51]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: You’ll notice that in our code, we’re using the `keyframes` function for animations.
    For the leaving route, The “`keyframes` function” starts with `opacity` `1`, and
    without any transformations initially. And then it ends with `opacity 0` but with
    the transform set to `'rotateY(180deg) translateX(0) translateZ(1200px) translateY(25%)'`.
    This is the opposite of the entering route.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到在我们的代码中，我们正在使用 `keyframes` 函数进行动画。对于离开路由，"`keyframes` 函数" 从 `opacity` `1`
    开始，最初没有任何变换。然后它结束于 `opacity 0`，但变换设置为 `'rotateY(180deg) translateX(0) translateZ(1200px)
    translateY(25%)'`。这与进入路由相反。
- en: Finally, we use the `group` function to wrap both the leaving and entering animations
    together so they can run in parallel instead of in sequence. This makes it so
    that the entering route comes in as the leaving route goes away.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用 `group` 函数将离开和进入动画一起包裹起来，这样它们可以并行运行而不是按顺序运行。这使得进入路由在离开路由消失时进入。
- en: See also
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Animations in Angular ([https://angular.io/guide/animations](https://angular.io/guide/animations))
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 中的动画 ([https://angular.io/guide/animations](https://angular.io/guide/animations))
- en: Angular route transition animations ([https://angular.io/guide/route-animations](https://angular.io/guide/route-animations))
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 路由过渡动画 ([https://angular.io/guide/route-animations](https://angular.io/guide/route-animations))
- en: Disabling Angular animations conditionally
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有条件地禁用 Angular 动画
- en: In this recipe, you’ll learn how to disable animations in Angular conditionally.
    This is useful for a variety of cases, including disabling animations on a particular
    device, for example.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何在 Angular 中有条件地禁用动画。这在各种情况下都很有用，例如在特定设备上禁用动画。
- en: 'Pro tip: Use `ngx-device-detector` to identify if your Angular app is running
    on a mobile, tablet, etc. (A little secret that is not so-secret anymore…I built
    it!)'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士：使用 `ngx-device-detector` 来识别你的 Angular App 是否在手机、平板电脑等设备上运行（一个不再是秘密的秘密……我创建了它！）
- en: Shameless plug aside, in this recipe, we’ll disable animations for employees
    in the application, considering we’re rolling out animations only for admins at
    the moment.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 不再是秘密的推广，在这个菜谱中，我们将禁用应用程序中员工的动画，考虑到我们目前只对管理员推出动画。
- en: Getting ready
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The app that we are going to work with resides in `start/apps/chapter04/ng-disable-animations`
    inside the cloned repository:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的 App 位于克隆的仓库中的 `start/apps/chapter04/ng-disable-animations` 目录内：
- en: Open the code repository in your code editor.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开代码仓库。
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到代码仓库目录，并运行以下命令来运行项目：
- en: '[PRE52]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'This should open the app in a new browser tab. Log in as an admin, add a few
    bucket items, and you should see the following:'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该在新的浏览器标签页中打开 App。以管理员身份登录，添加一些 bucket 项目，你应该会看到以下内容：
- en: '![](img/B18469_04_08.png)'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_04_08.png)'
- en: 'Figure 4.8: ng-disable-animations app running on http://localhost:4200'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.8：ng-disable-animations App 在 http://localhost:4200 上运行
- en: Now that we have the app running, we will move on to the steps for the recipe.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经让 App 运行起来，我们将继续进行下一步骤。
- en: How to do it…
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'We have an app that already has some Angular animations configured. You will
    notice that both the admin and employee pages have animations enabled. We will
    disable the animations for the employee page using a `config`. Let’s continue
    with the steps as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个已经配置了一些 Angular 动画的 App。你会注意到管理员和员工页面都启用了动画。我们将使用一个 `config` 来禁用员工页面的动画。接下来，我们按照以下步骤继续操作：
- en: 'First, we’ll add a new property named `disableAnimations` to our `IEmployeeConfig`
    interface and the `EMPLOYEE_CONFIG` variable in the `src/app/app.config.ts` file
    as follows:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将在 `src/app/app.config.ts` 文件中为我们的 `IEmployeeConfig` 接口和 `EMPLOYEE_CONFIG`
    变量添加一个名为 `disableAnimations` 的新属性，如下所示：
- en: '[PRE53]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: If you save the file, TypeScript will start throwing errors in the console as
    we need to add the same `disableAnimations` property in the `employee.config.ts`
    file as well.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你保存文件，TypeScript 将在控制台中开始抛出错误，因为我们还需要在 `employee.config.ts` 文件中添加相同的 `disableAnimations`
    属性。
- en: 'Update the `src/app/employee/employee.config.ts` file as follows:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式更新 `src/app/employee/employee.config.ts` 文件：
- en: '[PRE54]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Finally, add a `HostBinding` in the `bucket.component.ts` to disable the animations
    in the bucket component based on the config. Update the `bucket/bucket.component.ts`
    file as follows:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在 `bucket.component.ts` 中添加一个 `HostBinding` 来根据配置禁用 bucket 组件中的动画。更新 `bucket/bucket.component.ts`
    文件如下：
- en: '[PRE55]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Great! If you now refresh the app and view the **Admin** page, you’ll see the
    animations working. And if you go to the **Employee** page, you’ll see that the
    animations are disabled there. Magic! Check out the next section to understand
    how the recipe works.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！如果你现在刷新应用程序并查看 **Admin** 页面，你会看到动画正在工作。如果你转到 **Employee** 页面，你会看到那里的动画被禁用了。魔法！查看下一节以了解配方是如何工作的。
- en: How it works…
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Angular provides a way to disable animations using the `[@.disabled]` binding.
    You can put it anywhere in the template with an expression that evaluates a truth
    value. And in that case, all the child animations that are applied in its nested
    HTML tree will be disabled. We had an application-level config that is overridden
    in the `employee` component via the `EmployeeConfig` object. So first we created
    a `disableAnimations` property in the `IAppConfig` interface. This interface is
    used by both the `AppConfig` variable in the `app-config.ts` file and the `employeeConfig`
    variable in the `employee.config.ts` file. As you can see, we set the value of
    `disabledAnimations` to `false` for the configuration defined in the `app.config.ts`
    and `true` for the configuration defined in `employee.config.ts`. And then we
    used the `@HostBinding()` decorator in the `BucketComponent` class by assigning
    its value to the provided config’s `disabledAnimations` property. Since the `AdminComponent`
    class gets the configuration defined in the `app.config.ts` against the `EMPLOYEE_CONFIG`
    token, and the `EmployeeComponent` class gets the configuration defined in the
    `employee.config.ts` against the `EMPLOYEE_CONFIG` token, the animations are enabled
    and disabled, respectively, for these components.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 提供了一种使用 `[@.disabled]` 绑定来禁用动画的方法。你可以在模板的任何位置放置一个表达式，该表达式评估一个布尔值。在这种情况下，所有在其嵌套
    HTML 树中应用的子动画都将被禁用。我们有一个应用程序级别的配置，该配置通过 `EmployeeConfig` 对象在 `employee` 组件中被覆盖。因此，我们首先在
    `IAppConfig` 接口中创建了一个 `disableAnimations` 属性。此接口由 `app-config.ts` 文件中的 `AppConfig`
    变量和 `employee.config.ts` 文件中的 `employeeConfig` 变量使用。正如你所见，我们将 `disabledAnimations`
    的值设置为 `false`，用于 `app.config.ts` 中定义的配置，以及 `true`，用于 `employee.config.ts` 中定义的配置。然后，我们在
    `BucketComponent` 类中使用 `@HostBinding()` 装饰器，通过将其值分配给提供的配置的 `disabledAnimations`
    属性。由于 `AdminComponent` 类通过 `EMPLOYEE_CONFIG` 标记获取 `app.config.ts` 中定义的配置，而 `EmployeeComponent`
    类通过 `EMPLOYEE_CONFIG` 标记获取 `employee.config.ts` 中定义的配置，因此这些组件的动画分别被启用和禁用。
- en: See also
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: 'Animations in Angular: [https://angular.io/guide/animations](https://angular.io/guide/animations)'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 中的动画：[https://angular.io/guide/animations](https://angular.io/guide/animations)
- en: 'Angular Animations Explained with Examples: [https://www.freecodecamp.org/news/angular-animations-explained-with-examples/](https://www.freecodecamp.org/news/angular-animations-explained-with-examples/)'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '使用示例解释 Angular 动画: [https://www.freecodecamp.org/news/angular-animations-explained-with-examples/](https://www.freecodecamp.org/news/angular-animations-explained-with-examples/)'
- en: Learn more on Discord
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入此书的 Discord 社区——在那里你可以分享反馈、向作者提问，并了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/AngularCookbook2e](Chapter_4.xhtml)'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/AngularCookbook2e](Chapter_4.xhtml)'
- en: '![](img/QR_Code1388317275422265.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_Code1388317275422265.png)'
