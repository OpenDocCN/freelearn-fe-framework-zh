["```js\nfunction NestedChild() {\n  console.log('<NestedChild /> is called.');\n  return (\n    <p id=\"nested-child\">\n      A component, deeply nested into the component tree.\n    </p>\n  );\n}\nfunction Child() {\n  console.log('<Child /> is called.');\n  return (\n    <div id=\"child\">\n      <p>\n        A component, rendered inside another component, \n        containing yet another component.\n      </p>\n      <NestedChild />\n    </div>\n  );\n}\nfunction Parent() {\n  console.log('<Parent /> is called.');\n  const [counter, setCounter] = useState(0);\n  function handleIncCounter() {\n    setCounter((prevCounter) => prevCounter + 1);\n  }\n  return (\n    <div id=\"parent\">\n      <p>\n        A component, nested into App, \n        containing another component (Child).\n      </p>\n      <p>Counter: {counter}</p>\n      <button onClick={handleIncCounter}>Increment</button>\n      <Child />\n    </div>\n  );\n} \n```", "```js\nfunction App() {\n  const [counter, setCounter] = useState(0);\n  const [showCounter, setShowCounter] = useState(false);\n  function handleIncCounter() {\n    setCounter((prevCounter) => prevCounter + 1);\n    setShowCounter(true);\n  }\n  return (\n    <>\n      <p>Click to increment + show or hide the counter</p>\n      <button onClick={handleIncCounter}>Increment</button>\n      {showCounter && <p>Counter: {counter}</p>}\n    </>\n  );\n} \n```", "```js\nfunction Error({ message }) {\n  if (!message) {\n    return null;\n  }\n  return <p className={classes.error}>{message}</p>;\n}\nfunction Form() {\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [errorMessage, setErrorMessage] = useState();\n  function handleUpdateEmail(event) {\n    setEnteredEmail(event.target.value);\n  }\n  function handleSubmit(event) {\n    event.preventDefault();\n    if (!enteredEmail.endsWith('.com')) {\n      setErrorMessage('Email must end with .com.');\n    }\n  }\n  return (\n    <form className={classes.form} onSubmit={handleSubmit}>\n      <div className={classes.control}>\n        <label htmlFor=\"email\">Email</label>\n        <input\n          id=\"email\"\n          type=\"email\"\n          value={enteredEmail}\n          onChange={handleUpdateEmail}\n        />\n      </div>\n      <Error message={errorMessage} />\n      <button>Sign Up</button>\n    </form>\n  );\n} \n```", "```js\nfunction Error({ message }) {\n  console.log('<Error /> component function is executed.');\n  if (!message) {\n    return null;\n  }\n  return <p className={classes.error}>{message}</p>;\n} \n```", "```js\n**import** **{ memo }** **from****'react'****;**\nimport classes from './Error.module.css';\nfunction Error({ message }) {\n  console.log('<Error /> component function is executed.');\n  if (!message) {\n    return null;\n  }\n  return <p className={classes.error}>{message}</p>;\n}\nexport default **memo****(****Error****);** \n```", "```js\nmemo(SomeComponent, function(prevProps, nextProps) {\n  return prevProps.user.firstName !== nextProps.user.firstName;\n}); \n```", "```js\nfunction sortItems(items) {\n  console.log('Sorting');\n  return items.sort(function (a, b) {\n    if (a.id > b.id) {\n      return 1;\n    } else if (a.id < b.id) {\n      return -1;\n    }\n    return 0;\n  });\n}\nfunction List({ items, maxNumber }) {\n  const sortedItems = sortItems(items);\n  const listItems = sortedItems.slice(0, maxNumber);\n  return (\n    <ul>\n      {listItems.map((item) => (\n        <li key={item.id}>\n          {item.title} (ID: {item.id})\n        </li>\n      ))}\n    </ul>\n  );\n}\nexport default List; \n```", "```js\nimport { useMemo } from 'react';\nfunction List({ items, maxNumber }) {\n  const sortedItems = useMemo(\n    function() {\n      console.log('Sorting');\n      return items.sort(function (a, b) {\n        if (a.id > b.id) {\n          return 1;\n        } else if (a.id < b.id) {\n          return -1;\n        }\n        return 0;\n      });\n    },\n    [items]\n  );\n  const listItems = sortedItems.slice(0, maxNumber);\n  return (\n    <ul>\n      {listItems.map((item) => (\n        <li key={item.id}>\n          {item.title} (ID: {item.id})\n        </li>\n      ))}\n    </ul>\n  );\n}\nexport default List; \n```", "```js\nimport { memo } from 'react';\nimport classes from './Error.module.css';\nfunction Error({ message, onClearError }) {\n  console.log('<Error /> component function is executed.');\n  if (!message) {\n    return null;\n  }\n  return (\n    <div className={classes.error}>\n      <p>{message}</p>\n      <button className={classes.errorBtn} onClick={onClearError}>X</button>\n    </div>\n  );\n}\nexport default memo(Error); \n```", "```js\nfunction Form() {\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [errorMessage, setErrorMessage] = useState();\n  function handleUpdateEmail(event) {\n    setEnteredEmail(event.target.value);\n  }\n  function handleSubmit(event) {\n    event.preventDefault();\n    if (!enteredEmail.endsWith('.com')) {\n      setErrorMessage('Email must end with .com.');\n    }\n  }\n  function handleClearError() {\n    setErrorMessage(null);\n  }\n  return (\n    <form className={classes.form} onSubmit={handleSubmit}>\n      <div className={classes.control}>\n        <label htmlFor=\"email\">Email</label>\n        <input\n          id=\"email\"\n          type=\"email\"\n          value={enteredEmail}\n          onChange={handleUpdateEmail}\n        />\n      </div>\n      <Error message={errorMessage} onClearError={handleClearError} />\n      <button>Sign Up</button>\n    </form>\n  );\n} \n```", "```js\nconst handleClearError = useCallback(() => {\n  setErrorMessage(null);\n}, []); \n```", "```js\nnpm install babel-plugin-react-compiler \n```", "```js\n// vite.config.js\nconst ReactCompilerConfig = { /* ... */ };\nexport default defineConfig(() => {\n  return {\n    plugins: [\n      react({\n        babel: {\n          plugins: [\n            [\"babel-plugin-react-compiler\", ReactCompilerConfig],\n          ],\n        },\n      }),\n    ],\n    // ...\n  };\n}); \n```", "```js\nimport { useState } from 'react';\nimport { add, differenceInDays, format, parseISO } from 'date-fns';\nimport classes from './DateCalculator.module.css';\nconst initialStartDate = new Date();\nconst initialEndDate = add(initialStartDate, { days: 1 });\nfunction DateCalculator() {\n  const [startDate, setStartDate] = useState(\n    format(initialStartDate, 'yyyy-MM-dd')\n  );\n  const [endDate, setEndDate] = useState(\n    format(initialEndDate, 'yyyy-MM-dd')\n  );\n  const daysDiff = differenceInDays(\n    parseISO(endDate), \n    parseISO(startDate)\n  );\n  function handleUpdateStartDate(event) {\n    setStartDate(event.target.value);\n  }\n  function handleUpdateEndDate(event) {\n    setEndDate(event.target.value);\n  }\n  return (\n    <div className={classes.calculator}>\n      <p>Calculate the difference (in days) between two dates.</p>\n      <div className={classes.control}>\n        <label htmlFor=\"start\">Start Date</label>\n        <input\n          id=\"start\"\n          type=\"date\"\n          value={startDate}\n          onChange={handleUpdateStartDate}\n        />\n      </div>\n      <div className={classes.control}>\n        <label htmlFor=\"end\">End Date</label>\n        <input\n          id=\"end\"\n          type=\"date\"\n          value={endDate}\n          onChange={handleUpdateEndDate}\n        />\n      </div>\n      <p className={classes.difference}>\n        Difference: {daysDiff} days\n      </p>\n    </div>\n  );\n}\nexport default DateCalculator; \n```", "```js\nimport { useState } from 'react';\nimport DateCalculator from './components/DateCalculator.jsx';\nfunction App() {\n  const [showDateCalc, setShowDateCalc] = useState(false);\n  function handleOpenDateCalc() {\n    setShowDateCalc(true);\n  }\n  return (\n    <>\n      <p>This app might be doing all kinds of things.</p>\n      <p>\n        But you can also open a calculator which calculates \n        the difference between two dates.\n      </p>\n      <button onClick={handleOpenDateCalc}>Open Calculator</button>\n      **{showDateCalc &&** **<****DateCalculator** **/>****}**\n    </>\n  );\n}\nexport default App; \n```", "```js\nimport { lazy, useState } from 'react';\n**const****DateCalculator** **=** **lazy****(****() =>****import****(**\n**'./components/DateCalculator.jsx'**\n **)**\n**);**\nfunction App() {\n  const [showDateCalc, setShowDateCalc] = useState(false);\n  function handleOpenDateCalc() {\n    setShowDateCalc(true);\n  }\n  return (\n    <>\n      <p>This app might be doing all kinds of things.</p>\n      <p>\n        But you can also open a calculator which calculates \n        the difference between two dates.\n      </p>\n      <button onClick={handleOpenDateCalc}>Open Calculator</button>\n      {showDateCalc && <DateCalculator />}\n    </>\n  );\n}\nexport default App; \n```", "```js\nimport { lazy, **Suspense**, useState } from 'react';\nconst DateCalculator = lazy(() => import(\n    './components/DateCalculator.jsx'\n  )\n);\nfunction App() {\n  const [showDateCalc, setShowDateCalc] = useState(false);\n  function handleOpenDateCalc() {\n    setShowDateCalc(true);\n  }\n  return (\n    <>\n      <p>This app might be doing all kinds of things.</p>\n      <p>\n        But you can also open a calculator which calculates \n        the difference between two dates.\n      </p>\n      <button onClick={handleOpenDateCalc}>Open Calculator</button>\n      **<****Suspense****fallback****=****{****<****p****>****Loading...****</****p****>****}>**\n        {showDateCalc && <DateCalculator />}\n      **</****Suspense****>**\n    </>\n  );\n}\nexport default App; \n```", "```js\nimport React from 'react';\n// ... other code ...\nroot.render(<React.StrictMode><App /></React.StrictMode >); \n```"]