- en: Chapter 1. Introduction to Test-Driven Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。介绍测试驱动开发
- en: Angular is at the forefront of client-side JavaScript testing. Every Angular
    tutorial includes an accompanying test, and event test modules are a part of the
    core Angular package. The Angular team is focused on making testing fundamental
    to web development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Angular处于客户端JavaScript测试的前沿。每个Angular教程都包括相应的测试，甚至测试模块都是核心Angular包的一部分。Angular团队致力于使测试成为Web开发的基础。
- en: 'This chapter introduces you to the fundamentals of **test-driven development**
    (**TDD**) with Angular, including the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向您介绍了使用Angular进行**测试驱动开发**（**TDD**）的基础知识，包括以下主题：
- en: An overview of TDD
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TDD概述
- en: 'The TDD life cycle: test first, make it run, and make it better'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TDD生命周期：先测试，使其运行，然后改进
- en: Common testing techniques
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的测试技术
- en: An overview of TDD
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TDD概述
- en: TDD is an evolutionary approach to development, where you write a test before
    you write just enough production code to fulfill that test and its refactoring.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: TDD是一种演进式的开发方法，您在编写足够的生产代码来满足测试及其重构之前编写测试。
- en: This section will explore the fundamentals of TDD. Let's take a tailor as an
    example and see how he would apply TDD to his own process.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将探讨TDD的基础知识。让我们以裁缝为例，看看他如何将TDD应用到自己的流程中。
- en: Fundamentals of TDD
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TDD的基础知识
- en: Get an idea of what to write in your code before you start writing it. This
    may sound cliched, but this is essentially what TDD gives you. TDD begins by defining
    expectations, then makes you meet the expectations, and finally forces you to
    refine the changes after the expectations are met.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写代码之前就了解要写什么。这可能听起来陈词滥调，但这基本上就是TDD给您的。TDD从定义期望开始，然后让您满足期望，最后在满足期望后强迫您对更改进行精炼。
- en: 'Some of the clear benefits of practicing TDD are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 练习TDD的一些明显好处如下：
- en: '**No change is small**: Small changes can cause a lot of breaking issues in
    the entire project. Practicing TDD is the only way that can help, as the test
    suite will catch the breaking points and save the project after any change, and
    will thus save lives of developers.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有小改变**：小改变可能会在整个项目中引起许多破坏性问题。实践TDD是唯一可以帮助的方法，因为测试套件将捕捉破坏点并在任何更改后保存项目，从而拯救开发人员的生命。'
- en: '**Specifically identify the tasks**: A test suite specifically provides a clear
    vision of the tasks and the step-by-step workflow in order to be successful. Setting
    up the tests first allows you to focus on only the components that have been defined
    in the tests.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**明确定义任务**：测试套件明确提供了任务的清晰视野和逐步工作流程，以便取得成功。首先设置测试允许您只关注在测试中定义的组件。'
- en: '**Confidence in refactoring**: Refactoring involves moving, fixing, and changing
    a project. Tests protect the core logic from refactoring by ensuring that the
    logic behaves independently of the code structure.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重构的信心**：重构涉及移动、修复和更改项目。测试通过确保逻辑独立于代码结构的行为，保护核心逻辑免受重构的影响。'
- en: '**Upfront investment, benefits in the future**: Initially, it looks like testing
    takes extra time, but it actually pays off later when the project becomes bigger,
    it gives us confidence to extend the features as just running the test will identify
    the breaking issues, if any.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**前期投资，未来收益**：最初，测试似乎需要额外的时间，但当项目变得更大时，实际上会在以后得到回报，它让我们有信心扩展功能，只需运行测试就能识别出任何破坏性问题。'
- en: '**QA resources might be limited**: In most cases, there are some limitations
    on QA resources as it always takes extra time for everything to be manually checked
    by the QA team, but writing some test cases and running them successfully will
    definitely save some QA time.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**QA资源可能有限**：在大多数情况下，QA资源是有限的，因为让QA团队手动检查一切都需要额外的时间，但编写一些测试用例并成功运行它们肯定会节省一些QA时间。'
- en: '**Documentation**: Tests define the expectations that a particular object or
    function must meet. An expectation acts as a contract and can be used to see how
    a method should or can be used. This makes the code readable and easier to understand.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档化**：测试定义了特定对象或函数必须满足的期望。期望充当合同，可以用来查看方法应该或可以如何使用。这使得代码更易读和理解。'
- en: Measuring the success with different eyes
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用不同的眼光来衡量成功
- en: TDD is not just a software development practice--its fundamental principles
    are shared by other craftsmen as well. One of these craftsmen is a tailor, whose
    success depends on precise measurements and careful planning.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: TDD不仅是一种软件开发实践--它的基本原则也被其他工匠所共享。其中之一就是裁缝，他的成功取决于精确的测量和周密的计划。
- en: Breaking down the steps
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分解步骤
- en: 'Here are the high-level steps that a tailor performs to make a suit:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是裁缝制作西装的高级步骤：
- en: '**Testing first**:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**先测试**：'
- en: Determining the measurements for the suit
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定西装的尺寸
- en: Having the customer determine the style and material they want for their suit
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让客户确定他们想要西装的风格和材料
- en: Measuring the customer's arms, shoulders, torso, waist, and legs
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测量客户的手臂、肩膀、躯干、腰部和腿
- en: '**Making the cuts**:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**进行裁剪**：'
- en: Selecting the fabric based on the desired style
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据所需的风格选择面料
- en: Measuring the fabric based on the customer's body shape
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据客户的身形测量面料
- en: Cutting the fabric based on the measurements
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据测量裁剪面料
- en: '**Refactoring**:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**重构**：'
- en: Comparing the cut and look to the customer's desired style
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将裁剪和外观与客户所需的风格进行比较
- en: Making adjustments to meet the desired style
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行调整以满足所需的风格
- en: '**Repeating**:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**重复**：'
- en: '**Test first**: Determining the measurements for the suit'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**先测试**：确定西装的尺寸'
- en: '**Make the cuts**: Measuring the fabric and making the cuts'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进行裁剪**：测量面料并进行裁剪'
- en: '**Refactor**: Making changes based on the reviews'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重构**：根据审查进行更改'
- en: The preceding steps are an example of a TDD approach. The measurements must
    be taken before the tailor can start cutting the raw material. For a moment, imagine
    that the tailor didn't use a test-driven approach and didn't use a measuring tape
    (testing tool). It would be ridiculous if the tailor started cutting before measuring.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 上述步骤是TDD方法的一个例子。裁缝必须在开始裁剪原材料之前进行测量。想象一下，如果裁缝没有使用测试驱动的方法，也没有使用测量工具（尺寸），那将是荒谬的。如果裁缝在测量之前就开始裁剪会发生什么？如果面料被剪得太短会发生什么？裁缝需要多少额外时间来裁剪？因此，要多测量，少裁剪。
- en: As a developer, do you "cut before measuring"? Would you trust a tailor without
    a measuring tape? How would you feel about a developer who doesn't test?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，你是否会“在测量之前就剪裁”？你会相信一个没有测量工具的裁缝吗？你会如何看待一个不进行测试的开发者？
- en: Measure twice, cut once
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多次测量，一次裁剪
- en: The tailor always starts with measurements. What would happen if the tailor
    made cuts before measuring? What would happen if the fabric was cut too short?
    How much extra time would go into the tailoring? Thus, measure twice, cut once.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 裁缝总是从测量开始。如果裁缝在测量之前就开始裁剪会发生什么？如果面料被剪得太短会发生什么？裁缝需要多少额外时间来裁剪？因此，要多测量，少裁剪。
- en: Software developers can choose from an endless amount of approaches to use before
    starting development. One common approach is to work off a specification. A documented
    approach may help in defining what needs to be built; however, without tangible
    criteria for how to meet a specification, the actual application that gets developed
    may be completely different from the specification. With a TDD approach, every
    stage of the process verifies that the result meets the specification. Think about
    how a tailor continues to use a measuring tape to verify the suit throughout the
    process.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发人员可以在开始开发之前选择无数种方法。一个常见的方法是根据规范进行工作。文档化的方法可能有助于定义需要构建的内容；然而，如果没有明确的标准来满足规范，实际开发的应用可能与规范完全不同。采用TDD方法，过程的每个阶段都验证结果是否符合规范。想象一下裁缝在整个过程中继续使用卷尺来验证西装。
- en: TDD embodies a test-first methodology. TDD gives developers the ability to start
    with a clear goal and write code that will directly meet a specification, so you
    can develop like a professional and follow the practices that will help you write
    quality software.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: TDD体现了测试优先的方法论。TDD使开发人员能够以明确的目标开始，并编写直接满足规范的代码，因此您可以像专业人士一样开发，并遵循有助于编写高质量软件的实践。
- en: Practical TDD with JavaScript
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript实用TDD
- en: Let's dive into practical TDD in the context of JavaScript. This walk through
    will take us through the process of adding the multiplication functionality to
    a calculator.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解JavaScript环境中的实际TDD。这个演练将带领我们完成向计算器添加乘法功能的过程。
- en: 'Just keep the TDD life cycle, as follows, in mind:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 只需记住以下TDD生命周期：
- en: Test first
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先测试
- en: Make it run
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让它运行
- en: Make it better
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让它变得更好
- en: Point out the development to-do list
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指出开发待办事项清单
- en: A development to-do list helps organize and focus on tasks individually. It
    also helps provide a platform to list down ideas during the development process,
    which could be a single feature later on.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 开发待办事项清单有助于组织和专注于单独的任务。它还可以在开发过程中提供一个列出想法的平台，这些想法以后可能成为单一功能。
- en: 'Let''s add the first feature in the development to-do list--the add multiplication
    functionality:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在开发待办事项清单中添加第一个功能--添加乘法功能：
- en: '*3 * 3 = 9*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*3 * 3 = 9*'
- en: The preceding list describes what needs to be done. It also provides a clear
    example of how to verify the multiplication *3 * 3 = 9.*
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上述清单描述了需要做的事情。它还清楚地说明了如何验证乘法*3 * 3 = 9*。
- en: Setting up the test suite
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置测试套件
- en: 'To set up the test, let''s create the initial calculator in a file called `calculator.js`.
    It is initialized as an object as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置测试，让我们在一个名为`calculator.js`的文件中创建初始计算器。它初始化为一个对象，如下所示：
- en: '[PRE0]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The test will be run through a web browser as a simple HTML page. So for that,
    let's create an HTML page and import `calculator.js` to test it and save the page
    as `testRunner.html`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 测试将通过网页浏览器运行，作为一个简单的HTML页面。因此，让我们创建一个HTML页面，并导入`calculator.js`进行测试，并将页面保存为`testRunner.html`。
- en: To run the test, let's open the `testRunner.html` file in your web browser.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行测试，让我们在网页浏览器中打开`testRunner.html`文件。
- en: 'The `testRunner.html` file will look like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`testRunner.html`文件将如下所示：'
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The test suite is ready for the project and the development to-do list for the
    features is ready as well. The next step is to dive into the TDD life cycle based
    on the feature list one by one.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的测试套件已经准备就绪，功能的开发待办事项清单也已准备就绪。下一步是根据功能列表逐个深入TDD生命周期。
- en: Test first
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先测试
- en: Though it's easy to write a multiplication function and it will work as its
    a pretty simple feature, as a part of practicing TDD, it's time to follow the
    TDD life cycle. The first phase of the life cycle is to write a test based on
    the development to-do list.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然编写一个乘法函数很容易，并且它将像一个非常简单的功能一样工作，但作为练习TDD的一部分，现在是时候遵循TDD生命周期了。生命周期的第一阶段是根据开发待办事项编写测试。
- en: 'Here are the steps for the first test:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是第一次测试的步骤：
- en: Open `calculator.js`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`calculator.js`。
- en: 'Create a new function `multipleTest1` to test multiplying *3 * 3, *after that `calculator.js` file
    will look as follows:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的函数`multipleTest1`来测试乘法*3 * 3，之后`calculator.js`文件将如下所示：
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The test calls a `multiply` function, which still needs to be defined. It then
    asserts that the results are as expected by displaying a pass or fail message.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 测试调用一个尚未定义的`multiply`函数。然后通过显示通过或失败消息来断言结果是否符合预期。
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Keep in mind that in TDD, you are looking at the use of the method and explicitly
    writing how it should be used. This allows you to define the interface based on
    a use case, as opposed to only looking at the limited scope of the function being
    developed.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在TDD中，您正在考虑方法的使用，并明确编写它应该如何使用。这使您能够根据用例定义接口，而不仅仅是查看正在开发的功能的有限范围。
- en: The next step in the TDD life cycle is focused on making the test run.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: TDD生命周期中的下一步是使测试运行。
- en: Make the test run
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使测试运行
- en: In this step, we will run the test, just as the tailor did with the suite. The
    measurements were taken in the test step, and now the application can be molded
    to fit the measurements.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们将运行测试，就像裁缝对套装进行了测量一样。测试步骤中进行了测量，现在可以调整应用程序以适应这些测量。
- en: 'The following are the steps to run the test:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是运行测试的步骤：
- en: Open `testRunner.html` on a web browser.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Web浏览器上打开`testRunner.html`。
- en: Open the JavaScript developer **Console** window in the browser.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开JavaScript开发者**控制台**窗口。
- en: 'The test will throw an error, which will be visible in the browser''s developer
    console, as shown in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 测试将抛出错误，这将在浏览器的开发者控制台中可见，如下截图所示：
- en: '![Make the test run](graphics/5405_01_01.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![使测试运行](graphics/5405_01_01.jpg)'
- en: The error thrown is expected as the calculator application calls a function
    that hasn't been created yet--`calculator.multiply`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 抛出的错误是预期的，因为计算器应用程序调用了尚未创建的函数--`calculator.multiply`。
- en: In TDD, the focus is on adding the easiest change to get a test to pass. There
    is no need to actually implement the multiplication logic. This may seem unintuitive.
    The point is that once a passing test exists, it should always pass. When a method
    contains fairly complex logic, it is easier to run a passing test against it to
    ensure that it meets the expectations.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在TDD中，重点是添加最简单的更改以使测试通过。实际上不需要实现乘法逻辑。这可能看起来不直观。关键是一旦存在通过的测试，它应该始终通过。当一个方法包含相当复杂的逻辑时，更容易运行通过的测试来确保它符合预期。
- en: What is the easiest change that can be made to make the test pass? By returning
    the expected value of `9`, the test should pass. Although this won't add the multiply
    feature, it will confirm the application wiring. In addition, after we have passed
    the test, making future changes will be easy as we have to simply keep the test
    passing!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 可以做的最简单的更改是什么，以使测试通过？通过返回预期值`9`，测试应该通过。虽然这不会添加乘法功能，但它将确认应用程序的连接。此外，在我们通过了测试之后，未来的更改将变得容易，因为我们只需保持测试通过即可！
- en: 'Now, add the `multiply` function and have it return the required value of `9`,
    as illustrated:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，添加`multiply`函数，并使其返回所需的值`9`，如下所示：
- en: '[PRE3]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, let''s refresh the page to rerun the test and look at the JavaScript console.
    The result should be as shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们刷新页面重新运行测试，并查看JavaScript控制台。结果应该如下截图所示：
- en: '![Make the test run](graphics/image_01_002-1.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![使测试运行](graphics/image_01_002-1.jpg)'
- en: Yes! No more errors. There's a message showing that test has been passed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！没有错误了。有一条消息显示测试已经通过。
- en: Now that there is a passing test, the next step will be to remove the hard coded
    value from   the `multiply` function.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有了通过的测试，下一步将是从`multiply`函数中删除硬编码的值。
- en: Make the project better
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让项目变得更好
- en: The refactoring step needs to remove the hard coded `return` value from the
    `multiply` function, which we added as the easiest solution to pass the test,
    and add the required logic to get the expected result.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 重构步骤需要从`multiply`函数中删除硬编码的`return`值，这是我们为了通过测试而添加的最简单的解决方案，并添加所需的逻辑以获得预期的结果。
- en: 'The required logic is as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的逻辑如下：
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, let's refresh the browser to rerun the tests; It will pass the test as
    it did earlier. Excellent! Now the `multiply` function is complete.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们刷新浏览器重新运行测试；它将像之前一样通过测试。太棒了！现在`multiply`函数已经完成。
- en: 'The full code of the `calculator.js` file for the `calculator` object with
    its test will look as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`calculator.js`文件的完整代码，用于`calculator`对象及其测试，如下所示：'
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Mechanism of testing
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试机制
- en: To be a proper TDD-following developer, it is important to understand some fundamental
    mechanisms of testing techniques and approaches to testing. In this section, we
    will walk through a couple of examples of testing techniques and mechanisms that
    will be leveraged in this book.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要成为一个合格的TDD开发者，重要的是要了解一些测试技术的基本机制和测试方法。在本节中，我们将通过几个测试技术和机制的示例来介绍这本书中将要使用的。
- en: 'This will mostly include the following points:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这将主要包括以下几点：
- en: Testing doubles with **Jasmine** spies
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**Jasmine**间谍进行测试替身
- en: Refactoring the existing tests
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构现有测试
- en: Building patterns
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建模式
- en: 'Here are the additional terms that will be used:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将要使用的其他术语：
- en: '**Function under test**: This is the function that is being tested. It is also
    referred to as system under test, object under test, and so on.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**被测试的函数**：这是正在测试的函数。它也被称为被测试系统、被测试对象等。'
- en: '**The 3 As (Arrange, Act, and Assert)**: This is a technique used to set up
    tests, first described by Bill Wake ([http://xp123.com/articles/3a-arrange-act-assert/](http://xp123.com/articles/3a-arrange-act-assert/)).
    The 3 As will be discussed further in [Chapter 2](ch02.html "Chapter 2. Details
    of JavaScript Testing"), *Details of JavaScript Testing*.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**3A（安排、行动和断言）**：这是一种用于设置测试的技术，最初由Bill Wake描述（[http://xp123.com/articles/3a-arrange-act-assert/](http://xp123.com/articles/3a-arrange-act-assert/)）。3A将在[第2章](ch02.html
    "第2章。JavaScript测试的详细信息")中进一步讨论，*JavaScript测试的详细信息*。'
- en: Testing with a framework
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用框架进行测试
- en: We have already seen a quick and simple way to perform tests on the calculator
    application, where we have set the test for the `multiply` method. But in real
    life, it will be more complex and a way larger application, where the earlier
    technique will be too complex to manage and perform. In that case, it will be
    handy and easier to use a testing framework. A testing framework provides methods
    and structures to test. This includes a standard structure to create and run tests,
    the ability to create assertions/expectations, the ability to use test doubles,
    and a lot more. This book uses Jasmine as the test framework. Jasmine is a behavior-driven
    testing framework. It is highly compatible with testing Angular applications.
    In [Chapter 2](ch02.html "Chapter 2. Details of JavaScript Testing"), *Details
    of JavaScript Testing*, we will take an in-depth look at Jasmine.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了在计算器应用程序上执行测试的快速简单方法，我们已经为`multiply`方法设置了测试。但在现实生活中，这将会更加复杂，应用程序也会更大，早期的技术将会过于复杂，难以管理和执行。在这种情况下，使用测试框架会更方便、更容易。测试框架提供了测试的方法和结构。这包括创建和运行测试的标准结构，创建断言/期望的能力，使用测试替身的能力，以及更多。本书使用Jasmine作为测试框架。Jasmine是一个行为驱动的测试框架。它与测试Angular应用程序非常兼容。在[第2章](ch02.html
    "第2章。JavaScript测试的详细信息")中，*JavaScript测试的详细信息*，我们将深入了解Jasmine。
- en: The following example code is not exactly how it runs with the Jasmine test/spec
    runner, it's just about the idea of how the doubles work or how these doubles
    return the expected result. In [Chapter 2](ch02.html "Chapter 2. Details of JavaScript
    Testing"), *Details of JavaScript Testing,* we will demonstrate exactly how this
    double should be used with the Jasmine spec runner.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例代码并不完全是在Jasmine测试/规范运行时的运行方式，它只是关于测试替身如何工作或这些测试替身如何返回预期结果的想法。在[第2章](ch02.html
    "第2章。JavaScript测试的详细信息")中，*JavaScript测试的详细信息*，我们将准确展示这个测试替身应该如何与Jasmine规范运行器一起使用。
- en: Testing doubles with Jasmine spies
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Jasmine间谍进行测试替身
- en: A test double is an object that acts as and is used in place of another object.
    Jasmine has a test double function which is known as `spies`. A Jasmine spy is
    used with the `spyOn()` method.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 测试替身是一个充当并用于代替另一个对象的对象。Jasmine有一个测试替身函数，称为`spies`。Jasmine间谍与`spyOn()`方法一起使用。
- en: Let's take a look at the following `testableObject` object that needs to be
    tested. Using a test double, we can determine the number of times `testableFunction`
    gets called.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下需要进行测试的`testableObject`对象。使用测试替身，我们可以确定`testableFunction`被调用的次数。
- en: 'The following is an example of a test double:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是测试替身的示例：
- en: '[PRE6]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code creates a test double using a Jasmine spy (`jasmine.spyOn`).
    The following are some of the features that a Jasmine test double offers:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码使用Jasmine间谍(`jasmine.spyOn`)创建了一个测试替身。以下是Jasmine测试替身提供的一些功能：
- en: The count of calls on a function
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数调用次数
- en: The ability to specify a return value (stub a return value)
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定返回值的能力（存根返回值）
- en: The ability to pass a call to the underlying function (pass through)
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递给底层函数的调用能力（传递）
- en: Throughout this book, we will gain further experience in the use of test doubles.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将进一步学习测试替身的使用经验。
- en: Stubbing a return value
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 存根返回值
- en: The great thing about using a test double is that the underlying code of a method
    does not have to be called. With a test double, we can specify exactly what a
    method should return for a given test.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用测试替身的好处是方法的底层代码不必被调用。通过测试替身，我们可以准确指定方法在给定测试中应该返回什么。
- en: 'Consider the following example of an object and a function, where the function
    returns a string:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下对象和函数的示例，其中函数返回一个字符串：
- en: '[PRE7]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding object, `testableObject`, has a function, `testableFunction`,
    that needs to be stubbed.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 前述对象`testableObject`有一个需要存根化的函数`testableFunction`。
- en: So, to stub the single return value, it will need to chain the `and.returnValue`
    method and will pass the expected value as `param`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要存根化单个返回值，需要链式调用`and.returnValue`方法，并将预期值作为`param`传递。
- en: 'Here is how to spy chain the single return value to stub it:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何将单个返回值进行间谍链以进行存根化：
- en: '[PRE8]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, when `testableObject.testableFunction` is called, `stubbed value` will
    be returned.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当调用`testableObject.testableFunction`时，将返回`stubbed value`。
- en: 'Consider the following example of the preceding single `stubbed value`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑前述单个`stubbed value`的示例：
- en: '[PRE9]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Similarly, we can pass multiple returned values as in the preceding example.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以像前面的示例一样传递多个返回值。
- en: 'Here is how to spy chain the multiple return values to stub them one by one:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何将多个返回值进行间谍链以逐个进行存根化：
- en: '[PRE10]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: So, for every call of `testableObject.testableFunction`, it will return the
    stubbed value in order until it reaches the end of the return value list.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于每次调用`testableObject.testableFunction`，它将按顺序返回存根化的值，直到达到返回值列表的末尾。
- en: 'Consider the example of the preceding multiple stubbed values:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑前面多个存根化值的示例：
- en: '[PRE11]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Testing arguments
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试参数
- en: 'A test double provides insights into how a method is used in an application.
    As an example, a test might want to assert what arguments a method was called
    with or the number of times a method was called. Here is an example function:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 测试替身提供了关于应用程序中方法使用方式的见解。例如，测试可能希望断言方法被调用时使用的参数，或者方法被调用的次数。以下是一个示例函数：
- en: '[PRE12]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following are the steps to test the arguments with which the preceding
    function is called:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是测试调用前述函数时使用的参数的步骤：
- en: 'Create a spy so that the arguments called can be captured:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个间谍，以便捕获调用的参数：
- en: '[PRE13]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, to access the arguments, run the following:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，要访问参数，请运行以下命令：
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here is how the arguments can be displayed using `console.log`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用`console.log`显示参数：
- en: '[PRE15]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Refactoring
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重构
- en: Refactoring is the act of restructuring, rewriting, renaming, and removing code
    in order to improve the design, readability, maintainability, and overall aesthetics
    of a piece of code. The TDD life cycle step of *making the project   better* is
    primarily concerned with refactoring. This section will walk us through a refactoring
    example.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 重构是重构、重写、重命名和删除代码的行为，以改善代码的设计、可读性、可维护性和整体美感。TDD生命周期步骤*使项目变得更好*主要涉及重构。本节将通过一个重构示例引导我们。
- en: 'Take a look at the following example of a function that needs to be refactored:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下需要重构的函数的以下示例：
- en: '[PRE16]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This function works fine and does not contain any syntactical or logical issues.
    The problem is that the function is difficult to read and understand. Refactoring
    this function will improve its naming, structure, and definition. The exercise
    will remove the masquerading complexity and reveal the function's true meaning
    and intention.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数运行良好，没有包含任何语法或逻辑问题。问题在于这个函数很难阅读和理解。重构这个函数将改善其命名、结构和定义。这个练习将消除伪装的复杂性，揭示函数的真正含义和意图。
- en: 'Here are the steps:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是步骤：
- en: 'Rename the function and variable names to be more meaningful, that is, rename
    `x` and `z` so that they make sense:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重命名函数和变量名称以使其更有意义，即重命名`x`和`z`，使其有意义：
- en: '[PRE17]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, the function can easily be read and the naming makes sense.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，函数可以轻松阅读，命名也有意义。
- en: 'Remove any unnecessary complexity. In this case, the `if` conditional statement
    can be removed completely, as follows:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除任何不必要的复杂性。在这种情况下，`if`条件语句可以完全删除，如下所示：
- en: '[PRE18]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Reflect on the result.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 反思结果。
- en: 'At this point, the refactoring is complete, and the function''s purpose should
    jump out at you. The next question that should be asked is: "Why does this method
    exist in the first place?".'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，重构已经完成，函数的目的应该立即显现出来。接下来应该问的问题是：“为什么这个方法一开始就存在呢？”。
- en: This example only provided a brief walk-through of the steps that can be taken
    to identify the issues in code and how to improve them. Other examples will be
    given throughout this book.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子只是简要地介绍了如何识别代码中的问题以及如何改进它们的步骤。本书将在整个书中提供其他示例。
- en: Building with a builder
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用建造者构建
- en: These days, the design pattern is kind of a common practice, and we follow the
    design patterns to make life easier. For the same reason, the builder pattern
    will be followed here.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这些天，设计模式是一种常见的实践，我们遵循设计模式来使生活更轻松。出于同样的原因，这里将遵循建造者模式。
- en: The builder pattern uses a `builder` object to create another object. Imagine
    an object with 10 properties. How will test data be created for every property?
    Will the object have to be recreated in every test?
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 建造者模式使用`builder`对象来创建另一个对象。想象一个具有10个属性的对象。如何为每个属性创建测试数据？对象是否必须在每个测试中重新创建？
- en: 'A `builder` object defines an object to be reused across multiple tests. The
    following code snippet provides an example of the use of this pattern. This example
    will use the `builder` object in the `validate` method:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`builder`对象定义了一个可以在多个测试中重复使用的对象。以下代码片段提供了使用这种模式的示例。这个例子将在`validate`方法中使用`builder`对象：'
- en: '[PRE19]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `book` object has three properties: `id`, `author`, and `dateTime`. From
    a testing perspective, we would want the ability to create a valid object, that
    is, one that has all the fields defined. We may also want to create an invalid
    object with missing properties, or we may want to set certain values in the object
    to test the validation logic. Like here `dateTime` is an actual date time, which
    should assign by builder object.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`book`对象有三个属性：`id`，`author`和`dateTime`。从测试的角度来看，我们希望能够创建一个有效的对象，即所有字段都已定义的对象。我们可能还希望创建一个缺少属性的无效对象，或者我们可能希望设置对象中的某些值来测试验证逻辑。就像这里`dateTime`是一个实际的日期时间，应该由建造者对象分配。'
- en: 'Here are the steps to create a builder for the `bookBuilder` object:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为`bookBuilder`对象创建建造者的步骤：
- en: 'Create a builder function, as shown here:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个建造者函数，如下所示：
- en: '[PRE20]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a valid object within the builder, as follows:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在建造者中创建一个有效的对象，如下所示：
- en: '[PRE21]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a function to return the built object:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数来返回构建的对象：
- en: '[PRE22]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'As illustrated, create another function to set the `_resultBook` author field:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如图所示，创建另一个函数来设置`_resultBook`的作者字段：
- en: '[PRE23]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Change the function definition so that calls can be chained:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改函数定义，以便可以链接调用：
- en: '[PRE24]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'A setter function will also be created for `dateTime`, as shown here:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个设置器函数也将被创建用于`dateTime`，如下所示：
- en: '[PRE25]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, `bookBuilder` can be used to create a new book, as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`bookBuilder`可以用来创建一个新的书，如下所示：
- en: '[PRE26]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The preceding builder can now be used throughout our tests to create a single
    consistent object.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的建造者现在可以在我们的测试中被用来创建一个一致的对象。
- en: 'Here is the complete builder for reference:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的建造者供参考：
- en: '[PRE27]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let''s create the `validate` method to validate the created book object from
    the builder:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`validate`方法来验证从建造者创建的书对象：
- en: '[PRE28]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s start by creating a valid book object with the builder by passing all
    the required information, and if this is passed via the `validate` object, this
    should show a valid message:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先通过传递所有必需的信息，使用建造者创建一个有效的书对象，如果这是通过`validate`对象传递的，这应该显示一个有效的消息：
- en: '[PRE29]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the same way, let''s create an invalid book object via the builder by passing
    some null value in the required information. And by passing the object to the
    `validate` method, it should show the message explaining why it''s invalid:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，让我们通过构建器创建一个无效的书籍对象，通过在必要信息中传递一些空值。通过将对象传递给`validate`方法，它应该显示解释为什么无效的消息：
- en: '[PRE30]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Tip
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books that you have purchased. If you have purchased
    this book from elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt Publishing图书的示例代码文件。如果您从其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，文件将直接通过电子邮件发送给您。
- en: Self-test questions
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自测问题
- en: Q1\. A test double is another name for a duplicate test.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. 测试替身是重复测试的另一个名称。
- en: 'True'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: Q2\. TDD stands for test-driven development.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. TDD代表测试驱动开发。
- en: 'True'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: Q3\. The purpose of refactoring is to improve code quality.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Q3\. 重构的目的是提高代码质量。
- en: 'True'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: Q4\. A test object builder consolidates the creation of objects for testing.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Q4\. 测试对象构建器 consolida了用于测试的对象的创建。
- en: 'True'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: Q5\. The 3 As are a sports team.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Q5\. 三个A是一个体育队。
- en: 'True'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: Summary
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter provided an introduction to TDD. It discussed the TDD life cycle
    (test first, make it run, and make it better) and these steps can be used by anybody
    for TDD approach similar to how we have saw being used by a tailor. Finally, it
    looked over some of the testing techniques that will be discussed throughout this
    book, including test doubles, refactoring, and building patterns.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了TDD。它讨论了TDD生命周期（先测试，使其运行，然后改进）以及这些步骤可以被任何人用于TDD方法，类似于我们看到裁缝使用的方式。最后，它回顾了本书中将讨论的一些测试技术，包括测试替身，重构和构建模式。
- en: Although TDD is a huge topic, this book is solely focused on the TDD principles
    and practices to be used with Angular.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管TDD是一个庞大的主题，但本书仅专注于与Angular一起使用的TDD原则和实践。
- en: In the next chapter, we will know details about JavaScript testing.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解有关JavaScript测试的详细信息。
