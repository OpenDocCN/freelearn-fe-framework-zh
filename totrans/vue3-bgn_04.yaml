- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Utilizing Vue’s Built-In Directives for Effortless Development
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用 Vue 内置指令轻松开发
- en: In the previous chapter, we saw how Vue.js features, such as dynamic classes,
    props, and private state, help us simplify our development. In this chapter, we
    will continue to build on top of our previous topic by introducing you to the
    world of Vue.js built-in directives. These directives are the first real taste
    of Vue.js and will provide you with the tools necessary to make your code more
    dynamic. The main goal of these directives is to simplify your workflow and make
    your development easier. Throughout the chapter, we will introduce two new components
    called `TheHeader.vue` and `SocialPostComments.vue`, alongside continuing to work
    on existing components such as `SocialPost.vue` to make them more dynamic and
    ready for future chapters.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了 Vue.js 的特性，如动态类、属性和私有状态，如何帮助我们简化开发。在本章中，我们将继续探讨我们之前的话题，通过向您介绍 Vue.js
    内置指令的世界来构建。这些指令是 Vue.js 的第一次真正尝试，并将为你提供使你的代码更具动态性的工具。这些指令的主要目标是简化你的工作流程并使你的开发更加容易。在整个章节中，我们将介绍两个新的组件
    `TheHeader.vue` 和 `SocialPostComments.vue`，同时继续对现有的组件如 `SocialPost.vue` 进行工作，使其更具动态性和为未来的章节做好准备。
- en: 'We are going to break up the chapter into three different sections:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把本章分成三个不同的部分：
- en: Displaying text with `v-text` and `v-html`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `v-text` 和 `v-html` 显示文本
- en: Handling element visibility with `v-if` and `v-show`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `v-if` 和 `v-show` 处理元素可见性
- en: Simplifying your template with `v-for`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `v-for` 简化模板
- en: By the end of the chapter, you will have a basic understanding of some of the
    Vue.js built-in directives and be able to toggle component visibility with `v-if`
    and `v-show`, and will learn how to simplify your HTML templates by using `v-for`
    and render text or HTML with `v-text` and `v-html`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将基本了解一些 Vue.js 内置指令，并能够使用 `v-if` 和 `v-show` 切换组件的可见性，并学习如何通过使用 `v-for`
    来简化你的 HTML 模板，以及使用 `v-text` 和 `v-html` 渲染文本或 HTML。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The code required for you to complete the chapter can be found on GitHub within
    a branch called `CH04`. To pull this branch, run the following command or use
    your GUI of choice to support you in this operation:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章所需的代码可以在 GitHub 上的一个名为 `CH04` 的分支中找到。要拉取此分支，请运行以下命令或使用您选择的 GUI 来支持您进行此操作：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Do not forget that the repository can be found at [https://github.com/PacktPublishing/Vue.js-3-for-Beginners](https://github.com/PacktPublishing/Vue.js-3-for-Beginners).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记，仓库可以在 [https://github.com/PacktPublishing/Vue.js-3-for-Beginners](https://github.com/PacktPublishing/Vue.js-3-for-Beginners)
    找到。
- en: There are some small changes to the branch compared to the end of the previous
    chapter. These changes were added to simplify the book and allow us to focus on
    the learning material instead of spending too much time on setting things up.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章的结尾相比，分支有一些小的变化。这些变化是为了简化书籍，让我们能够专注于学习材料，而不是花太多时间在设置事情上。
- en: Displaying text with v-text and v-html
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 v-text 和 v-html 显示文本
- en: '**HTML** is a very powerful tool, but it does have its limitations that forces
    us to have very verbose and hard-to-maintain code. If you have ever worked on
    a fully static site without a framework, you may have encountered long HTML pages
    with many duplicated code blocks. This is where Vue directives come in handy.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTML** 是一个非常强大的工具，但它确实有其局限性，这迫使我们编写非常冗长且难以维护的代码。如果你曾经在没有框架的完全静态网站上工作过，你可能遇到过包含许多重复代码块的冗长
    HTML 页面。这就是 Vue 指令发挥作用的地方。'
- en: Vue’s directives are described on Vue School website as “special HTML attributes
    that allow us to manipulate the **Document Object** **Model** (**DOM**).”
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 的指令在 Vue School 网站上被描述为“特殊的 HTML 属性，允许我们操作 **文档对象模型** (**DOM**)。”
- en: In previous chapters, we have seen how Vue uses existing attribute syntax to
    add functionality such as component properties. Vue directives follow a similar
    approach that creates new functionality by using syntax that resembles existing
    HTML.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们看到了 Vue 如何使用现有的属性语法添加功能，如组件属性。Vue 指令采用类似的方法，通过使用类似于现有 HTML 的语法来创建新的功能。
- en: The preceding description says that Vue.js directives allow us to manipulate
    the **DOM**, but are there any native HTML attributes that do something similar?
    The answer is yes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的描述说 Vue.js 指令允许我们操作 **DOM**，但有没有任何原生的 HTML 属性做类似的事情？答案是肯定的。
- en: HTML provides us with attributes such as “value” in a `<input>` element that
    assigns the visible value. We also have “rows” and “column” in a `<textarea>`
    that define the size of our element. The list could go on for a long time, but
    I think it is good to illustrate what directives can help us achieve.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: HTML为我们提供了诸如`<input>`元素中的“value”这样的属性，用于分配可见值。我们还在`<textarea>`中有“rows”和“columns”，它们定义了元素的大小。这个列表可以很长，但我认为展示指令可以帮助我们实现什么是有益的。
- en: Vue’s built-in directives, allow us to modify the DOM and enhance the flexibility
    of a component with the use of the element attribute.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Vue的内置指令，允许我们通过使用元素属性来修改DOM并增强组件的灵活性。
- en: 'Following are the 15 built-in directives of Vue:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Vue的15个内置指令：
- en: '`v-text`: Sets the `innerText` of a given element'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-text`: 设置给定元素的`innerText`'
- en: '`v-html`: Sets the `innetHtml` of a given element'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-html`: 设置给定元素的`innerHTML`'
- en: '`v-show`: Toggles the element visibility (`display:hidden`)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-show`: 切换元素的可见性（`display: hidden`）'
- en: '`v-if`: Renders the element if a condition is met'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-if`: 当条件满足时渲染元素'
- en: '`v-else`: Displays the element if the previous condition (`v-if` or `v-else-if`)
    was not met'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-else`: 如果前面的条件（`v-if`或`v-else-if`）未满足，则显示元素'
- en: '`v-else-if`: Displays the element if the previous condition (`v-if`) was not
    met, and the current one is fulfilled.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-else-if`: 如果前面的条件（`v-if`）未满足，并且当前条件得到满足，则显示元素。'
- en: '`v-for`: Renders the element or template block multiple times based on the
    source data'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-for`: 根据源数据多次渲染元素或模板块'
- en: '`v-on`: Triggers a callback when an event is triggered'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-on`: 当事件被触发时触发回调'
- en: '`v-bind`: Dynamically binds one or more attributes or a component prop to an
    expression'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-bind`: 将一个或多个属性或组件属性动态绑定到表达式'
- en: '`v-model`: Creates a two-way binding on a form input element or a component'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-model`: 在表单输入元素或组件上创建双向绑定'
- en: '`v-slot`: Defines a placeholder used by the parent component to be replaced
    with arbitrary markup'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-slot`: 定义一个由父组件使用并替换为任意标记的占位符'
- en: '`v-pre`: Skips compilation for this element and all its children (usually used
    to display code blocks)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-pre`: 跳过此元素及其所有子元素的编译（通常用于显示代码块）'
- en: '`v-once`: Renders the element and component once only and skips future updates'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-once`: 只渲染元素和组件一次，并跳过未来的更新'
- en: '`v-memo`: Memoizes a sub-tree of the template'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-memo`: 缓存模板的子树'
- en: '`v-cloak`: Used to hide an uncompiled template until it is ready'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-cloak`: 用于在模板准备好之前隐藏未编译的模板'
- en: Some of the preceding directives, including `v-memo`, `v-once`, and `v-cloak`,
    are for more advanced users and will not be covered during the course of the book,
    but if you are interested, you can find more information about these in the Vue.js
    official documentation ([https://vuejs.org/api/built-in-directives.html#v-once](https://vuejs.org/api/built-in-directives.html#v-once)).
    The rest of the directives will be explained and accompanied by coding examples.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一些前面的指令，包括`v-memo`、`v-once`和`v-cloak`，是针对更高级用户，本书的讲解过程中不会涉及，但如果您感兴趣，可以在Vue.js官方文档中找到更多关于这些信息（[https://vuejs.org/api/built-in-directives.html#v-once](https://vuejs.org/api/built-in-directives.html#v-once)）。其余的指令将会有解释，并伴随代码示例。
- en: Good to know
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 值得了解
- en: All built-in directives start with a prefix of `v-`. This is done to be able
    to separate the framework attributes from native attributes available in the HTML.
    This standard is also used to create custom directives that should always start
    with the same prefix.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所有内置指令都以`v-`为前缀。这样做是为了能够将框架属性与HTML中可用的原生属性分开。此标准还用于创建应始终以相同前缀开始的自定义指令。
- en: Let’s start with our first directive, `v-text`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从我们的第一个指令`v-text`开始。
- en: Applying dynamic text to our component using v-text
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用v-text将动态文本应用到我们的组件上
- en: Vue.js directives are a very strong addition to Vue.js feature. Not only because
    they provide extra functionality, but also because they help to write cleaner
    and more readable code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js指令是Vue.js功能的一个非常强大的补充。不仅因为它们提供了额外的功能，而且因为它们有助于编写更干净、更易读的代码。
- en: 'When asked about how important code readability is, I always steer people into
    reading the book *Clean Code* by *Robert Martin* in which he states the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当被问及代码可读性有多重要时，我总是引导人们阅读罗伯特·马丁的《Clean Code》一书，他在书中指出以下内容：
- en: “Indeed, the ratio of time spent reading versus writing is well over 10 to 1\.
    …[Therefore,] making it easy to read makes it easier to write.”
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: “实际上，阅读与写作所花费的时间比例远远超过10比1……[因此，]使其易于阅读使得写作更容易。”
- en: Let’s start to work with some of these directives and see how they can be plugged
    in our Companion App.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用一些这些指令，看看它们如何被集成到我们的伴侣应用中。
- en: In this chapter, we are going to work on a new component that will be used as
    the header of our companion app. This component has already been created in the
    repository and you can find it within the `components/organisms/` folder.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将工作于一个新的组件，该组件将被用作我们伴侣应用的标题。这个组件已经在仓库中创建，您可以在 `components/organisms/`
    文件夹中找到它。
- en: As you can deduce from the folder in which the component is saved, this component
    is going to be an “organism” within our atomic design structure that we discussed
    in [*Chapter 1*](B21130_01.xhtml#_idTextAnchor015).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从保存组件的文件夹中推断出的那样，这个组件将成为我们之前在 [*第 1 章*](B21130_01.xhtml#_idTextAnchor015)
    中讨论的原子设计结构中的“有机体”。
- en: Before we move on, let’s explain why our component is going to be called `TheHeader.vue`.
    The file name of Vue components needs to always be unique and different from native
    HTML elements, and this prevented us from simply calling it `header` as it would
    have clashed with the HTML `header` native element. To avoid these issues, Vue.js
    component names should always be made up of two words written using Pascal case,
    where the first word and any additional words start with an uppercase letter.
    There are some cases in which finding two words to make up a component name can
    be hard. When this case arises, we can prefix the component with the word `the`.
    Using this approach for our header component will then produce a component name
    of `TheHeader`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们解释一下为什么我们的组件将被命名为 `TheHeader.vue`。Vue 组件的文件名需要始终唯一且与原生 HTML 元素不同，这阻止了我们简单地将其命名为
    `header`，因为它将与原生的 HTML `header` 元素冲突。为了避免这些问题，Vue.js 组件名称应该始终由两个单词组成，使用 Pascal
    大写格式编写，其中第一个单词和任何附加单词以大写字母开头。在某些情况下，找到两个单词来组成组件名称可能很困难。当这种情况发生时，我们可以用单词 `the`
    作为组件的前缀。使用这种方法为我们的标题组件生成组件名称为 `TheHeader`。
- en: 'This component is going to show a logo, a title, and a link to our user profile.
    If we run our application using the `npm run dev` command, we will see the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件将显示一个标志、一个标题以及指向我们用户资料的链接。如果我们使用 `npm run dev` 命令运行我们的应用程序，我们将看到以下内容：
- en: '![Figure 4.1: Companion app landing page displaying the new header](img/B21130_04_01.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1：显示新标题的伴侣应用登录页面](img/B21130_04_01.jpg)'
- en: 'Figure 4.1: Companion app landing page displaying the new header'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1：显示新标题的伴侣应用登录页面
- en: The code of our component is currently plain HTML with hardcoded data, and it
    is up to us to update it to make it dynamic.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们组件的代码目前是纯 HTML，带有硬编码的数据，而我们需要更新它以使其动态化。
- en: If you have ever used the internet, you will probably know that a username like
    the one displayed in the preceding screenshot should not be hardcoded, but rather
    should be dynamic.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您曾经使用过互联网，您可能知道像前一个屏幕截图显示的这样的用户名不应该硬编码，而应该是动态的。
- en: So, our first step is to remove this hardcoded value from the HTML and turn
    it into a Ref instance, just like we learned in the previous chapter.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的第一步是从 HTML 中删除这个硬编码的值，并将其转换为与我们在上一章中学到的 Ref 实例。
- en: 'First, we are going to create a `Ref` variable with the username in our script
    tag:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在脚本标签中创建一个带有用户名的 `Ref` 变量：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then we are going to use our first built-in directives to assign this variable
    to the HTML element, as shown in the snippets below:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将使用我们的第一个内置指令将此变量分配给 HTML 元素，如下面的代码片段所示：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Using the `v-text` built-in directive will automatically change the `innerText`
    of the element with the value of our JavaScript variable `username`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内置的 `v-text` 指令将自动更改元素的 `innerText`，其值为我们的 JavaScript 变量 `username`。
- en: Of course, in our example, the name is still hardcoded as the Ref is predefined
    in our script, but this will later be changed to dynamically be fetched from an
    API.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在我们的例子中，名称仍然是硬编码的，因为我们的脚本中预定义了引用，但稍后这将改为从 API 动态获取。
- en: 'If you remember from our previous chapter, we already managed to assign dynamic
    text to replace the post, name, and username in our `SocialPost.vue` file. We
    achieved that using the mustache interpolation syntax `{{ }}`, just as we did
    to display our post:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还记得我们之前的章节，我们已经成功地将动态文本分配给替换 `SocialPost.vue` 文件中的帖子、名称和用户名。我们使用类似于显示帖子的方式，通过
    mustache 插值语法 `{{ }}` 实现了这一点：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So, at this point, you may be asking yourself, what is the actual difference
    between these two methods?
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这个阶段，你可能想知道这两种方法之间实际的区别是什么？
- en: The answer is not going to be exciting—in fact, both of these methods will compile
    into the same code at render time. The two methods, even if they achieve the same
    goal, have different syntax, one defined as an attribute using `v-text` and the
    other directly written as part of element content using `{{ }}`, and will appeal
    to different developers to align with their coding style.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 答案不会令人兴奋——事实上，这两种方法在渲染时都会编译成相同的代码。这两种方法，即使达到相同的目标，语法也不同，一个定义为使用`v-text`的属性，另一个直接作为元素内容的一部分使用`{{
    }}`编写，并且会吸引不同风格的开发者。
- en: 'Another small difference is that `v-text` will replace the full content of
    `innerHTML`while using the mustache interpolation will allow you to replace just
    part of the text. Let’s see an example that illustrates these differences:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个小差异是，`v-text`将替换`innerHTML`的全部内容，而使用mustache插值将允许你只替换部分文本。让我们通过一个示例来展示这些差异：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the first example that uses `v-text`, we had to add a `<span>` element to
    be able to use the directives. In fact, if we had assigned the `v-text` directives
    directly to the `<a>` tag, the “Welcome” text would have been overridden.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个使用`v-text`的例子中，我们必须添加一个`<span>`元素才能使用指令。实际上，如果我们直接将`v-text`指令分配给`<a>`标签，"欢迎"文本就会被覆盖。
- en: In the second example that uses the double curly braces, we can see that we
    are able to change just part of the string without the need for extra markup,
    making it more flexible.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个使用双大括号的例子中，我们可以看到我们能够只更改字符串的一部分，而不需要额外的标记，这使得它更加灵活。
- en: In conclusion, the use of `v-text` or mustache interpolation can be interchanged
    and there is no right or wrong, it is totally a personal preference.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，使用`v-text`或mustache插值可以互换，没有对错之分，这完全取决于个人喜好。
- en: Modifying the inner HTML of an element with v-html
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`v-html`修改元素的内部HTML
- en: In the previous subsection, we used our first Vue.js directive, `v-text`. We
    learned that this directive replaces the `innerText` of a given component, but
    what if we would like to replace the text with a dynamic string that includes
    HTML? This is where `v-html` comes in handy. Let’s dig deeper into how this can
    be used and apply it in our application.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的子节中，我们使用了我们的第一个Vue.js指令`v-text`。我们了解到这个指令替换了给定组件的`innerText`，但如果我们想用包含HTML的动态字符串替换文本怎么办？这就是`v-html`派上用场的地方。让我们深入了解如何使用它，并将其应用于我们的应用程序。
- en: Rendering HTML can be dangerous
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染HTML可能很危险
- en: Rendering HTML dynamically needs to be done carefully as it can be very dangerous
    aand can lead to XSS vulnerabilities. Only use it for trusted content and never
    on user-provided content.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 动态渲染HTML需要谨慎处理，因为它可能非常危险，并可能导致XSS漏洞。仅用于可信内容，绝不要用于用户提供的内容。
- en: Before we explain *how* `v-html` is used, we should first try to understand
    *why* you would use this technique in your code. In fact, why would you add HTML
    within a variable when you can write it directly in the `<template>` section of
    your component?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在解释`v-html`如何使用之前，我们首先应该尝试理解为什么你会在代码中使用这种技术。实际上，为什么你会在变量中添加HTML，而不是直接在你的组件的`<template>`部分编写它呢？
- en: 'I asked myself this question at the start of my career, but I then realized
    that there are a couple of cases in which `v-html` can be useful, including the
    following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我在职业生涯的开始时就问过自己这个问题，但后来我意识到有几个情况下`v-html`可能很有用，包括以下情况：
- en: '`v-html` can be useful when developing an application that receives its content
    (such as blog posts) from a CMS. In some cases, this is received as HTML.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当开发一个从CMS接收内容（如博客文章）的应用程序时，`v-html`可能非常有用。在某些情况下，这些内容是以HTML的形式接收的。
- en: '**Third-party plugin output**: There are some third-party plugins such as code
    visualization and canvas visualization plugins that may require the use of HTML.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第三方插件输出**：有一些第三方插件，如代码可视化和画布可视化插件，可能需要使用HTML。'
- en: '**Hardcoded SVGs or icons**: It is very common for small projects to create
    a library of hardcoded assets such as icons and SVGs.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬编码的SVG或图标**：对于小型项目来说，创建一个包含图标和SVG等硬编码资源的库是非常常见的。'
- en: As you can see, the real uses of `v-html` are restricted to some very specific
    scenarios and it is not recommended for all string interpolation usage.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`v-html`的实际用途仅限于一些非常具体的场景，并且不建议在所有字符串插值使用中推荐。
- en: 'Our header component, `TheHeader.vue`, currently includes a hardcoded SVG to
    display our logo. We can use `v-html` to make the image dynamic:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的头组件`TheHeader.vue`目前包含一个硬编码的SVG来显示我们的标志。我们可以使用`v-html`使图像动态化：
- en: 'First, create a variable called `logo` to hold our SVG code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个名为 `logo` 的变量来保存我们的 SVG 代码：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Apply the `v-html` directives in our template:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的模板中应用 `v-html` 指令：
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: All done! Our application will now display a star as the logo, instead of our
    previous image, as shown in the following screenshot.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了！现在我们的应用程序将显示一个星形作为标志，而不是我们之前的图片，如下面的截图所示。
- en: '![Figure 4.2: Companion app header](img/B21130_04_02.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2：伴侣应用头部](img/B21130_04_02.jpg)'
- en: 'Figure 4.2: Companion app header'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2：伴侣应用头部
- en: This was a simple example that did not really make full use of the dynamic use
    of `v-html`. In fact, in a case like this, it may be more suitable to just place
    the SVG directly within the HTML as there is no need to create a dynamic property
    for something that is static.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的例子，并没有真正充分利用 `v-html` 的动态使用。实际上，在这种情况下，直接在 HTML 中放置 SVG 可能更合适，因为不需要为静态内容创建动态属性。
- en: It is time to move forward and cover how to toggle the visibility of our component.
    In the next section, we will learn all about `v-show` and `v-if` and start to
    see how using a framework such as Vue.js can really simplify our code.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候继续前进，介绍如何切换组件的可见性了。在下一节中，我们将了解所有关于 `v-show` 和 `v-if` 的内容，并开始看到使用如 Vue.js
    这样的框架如何真正简化我们的代码。
- en: Handling element visibility with v-if and v-show
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 v-if 和 v-show 处理元素可见性
- en: This section is all about element visibility. We are going to learn about two
    directives that can actually achieve the same result—toggling the element’s visibility—but
    with two underlying differences.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 本节全部关于元素可见性。我们将学习两个实际上可以实现相同结果——切换元素可见性——但有两个潜在差异的指令。
- en: Toggling an element’s visibility means the ability to show or hide an element
    in our rendered HTML. This is a very common feature on the web today. This may
    be as simple as a dropdown appearing, a modal showing when a button is clicked,
    or more data being shown when a “show more” link is clicked.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 切换元素的可见性意味着在渲染的 HTML 中显示或隐藏元素的能力。这是当今网络中一个非常常见的功能。这可能是简单的下拉菜单出现，当按钮被点击时显示模态框，或者当点击“显示更多”链接时显示更多数据。
- en: Toggling visibility is the first of many features that support the increased
    adoption of many frontend frameworks by making the user experience flawless and
    reactive. First, we are going to add a button in our `SocialPost.vue` file that
    will show only if the article has comments, then we are going to display a new
    component called `SocialPostsComments.vue` that will be toggled by the new button
    and will be used in later sections to display a list of posts.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 切换可见性是许多支持前端框架被广泛采用以实现无瑕和响应式用户体验的许多功能中的第一个。首先，我们将在 `SocialPost.vue` 文件中添加一个按钮，该按钮仅在文章有评论时显示，然后我们将显示一个名为
    `SocialPostsComments.vue` 的新组件，该组件将由新按钮切换，并在后续章节中用于显示帖子列表。
- en: Hiding elements from the DOM with v-show
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 v-show 从 DOM 中隐藏元素
- en: Having the ability to show or hide an element can be useful for extremely complex
    situations, but also for very simple cases such as the one that we are about to
    cover.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 能够显示或隐藏元素对于极其复杂的情况非常有用，但对于我们即将要讨论的非常简单的情况也同样有用。
- en: If you look at the structure of our posts in `TheWelcome.vue`, you will notice
    that the `posts` object now includes extra information such as comments and tags
    that are not displayed yet.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看 `TheWelcome.vue` 中的帖子结构，你会注意到 `posts` 对象现在包括一些尚未显示的额外信息，例如评论和标签。
- en: Our first step is to display a button in `SocialPost.vue` that the user will
    be able to click to show or hide post comments. Because not all posts have comments,
    we would like to show this button just for articles that include comments. To
    achieve this, we are going to use `v-show`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是在 `SocialPost.vue` 中显示一个按钮，用户可以点击以显示或隐藏帖子评论。由于并非所有帖子都有评论，我们只想为包含评论的文章显示此按钮。为了实现这一点，我们将使用
    `v-show`。
- en: 'As with all other directives, `v-show` is just an element attribute that accepts
    a value. In this case, the value that is accepted is a `true` or `false`. When
    `v-show` receives a Boolean, it will *show* the element if its value is truthy,
    as in `<button v-show="true" />`, or *hide* the value if the value is false, as
    in `<button` `v-show="false" />`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有其他指令一样，`v-show` 只是一个接受值的元素属性。在这种情况下，接受的值是 `true` 或 `false`。当 `v-show` 接收到布尔值时，如果其值为真（如
    `<button v-show="true" />`），则将显示元素，如果值为假（如 `<button v-show="false" />`），则将隐藏元素：
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code, we have accessed our `SocialPost.vue` file and added
    a new button element. Then since we just want to display this new element only
    for posts that have comments, we have used our newly introduced `v-show` directive
    and used the comments properties to define when to toggle the element visibility.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们已经访问了我们的`SocialPost.vue`文件并添加了一个新的按钮元素。然后，因为我们只想为有评论的帖子显示这个新元素，所以我们使用了我们新引入的`v-show`指令，并使用评论属性来定义何时切换元素的可见性。
- en: 'So, in our case, if our post has no comment, the value of `comments.length
    > 0` will be equal to `false`, and when `v-show` receives a `false` value, it
    will hide the element. On the other hand, if the post has comments, the value
    of `comments.length > 0` will be truthy and the button will be shown. The preceding
    code will display the following result:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我们的情况下，如果我们的帖子没有评论，`comments.length > 0`的值将等于`false`，当`v-show`接收到一个`false`值时，它将隐藏元素。另一方面，如果帖子有评论，`comments.length
    > 0`的值将是真值，按钮将被显示。前面的代码将显示以下结果：
- en: '![Figure 4.3: Companion app displaying the result of the preceding code snippet
    with one of the posts showing the “Show comments” button](img/B21130_04_03.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图4.3：伴随应用程序显示前面代码片段的结果，其中一条帖子显示了“显示评论”按钮](img/B21130_04_03.jpg)'
- en: 'Figure 4.3: Companion app displaying the result of the preceding code snippet
    with one of the posts showing the “Show comments” button'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3：伴随应用程序显示前面代码片段的结果，其中一条帖子显示了“显示评论”按钮
- en: Please note that when using `v-show` we do not actually remove the item from
    the DOM, but just hide it. In fact, if we analyze the DOM using the browser debugger,
    we can see that the button is available in the second post, but just hidden.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当使用`v-show`时，我们实际上并没有从DOM中移除项目，只是隐藏了它。实际上，如果我们使用浏览器调试器分析DOM，我们可以看到按钮在第二个帖子中是可用的，但只是被隐藏了。
- en: '![Figure 4.4: Chrome DevTools Elements tab showing the button in the DOM and
    its style defined as “display:none”](img/B21130_04_04.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图4.4：Chrome DevTools元素标签显示DOM中的按钮及其样式定义为“display:none”](img/B21130_04_04.jpg)'
- en: 'Figure 4.4: Chrome DevTools Elements tab showing the button in the DOM and
    its style defined as “display:none”'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4：Chrome DevTools元素标签显示DOM中的按钮及其样式定义为“display:none”
- en: Even if this seems to be of very little importance for now, it will make more
    sense after the next section where we will learn about `v-if`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然现在这似乎不太重要，但在下一节中，我们将学习`v-if`之后，它将更有意义。
- en: Keeping the DOM clean and performant with v-if
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用v-if保持DOM清洁和性能
- en: In the previous subsection, we added a button to show comments, but these comments
    are still not displayed on the screen. In this section, we are going to add these
    comments to our UI by working on a new component and then enhance the **Show comments**
    button to toggle the visibility of these components on and off.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的子节中，我们添加了一个按钮来显示评论，但这些评论仍然没有在屏幕上显示。在本节中，我们将通过工作一个新的组件并将“显示评论”按钮增强为切换这些组件的可见性来将这些评论添加到我们的UI中。
- en: The `v-if` directive works in the same way as `v-show` did. It accepts an argument
    that will either show or hide the given element depending on it being *truthy*
    or *falsy*.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-if`指令的工作方式与`v-show`相同。它接受一个参数，该参数将根据其是*真值*还是*假值*来显示或隐藏指定的元素。'
- en: In our case, we are going to create a new Ref called `showComments` and this
    is going to be used to toggle our element visibility. Let’s see how to achieve
    this step by step in our `SocialPost.vue` file.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们将创建一个新的Ref，名为`showComments`，这将用于切换元素的可见性。让我们一步一步地在我们的`SocialPost.vue`文件中看看如何实现这一点。
- en: 'We are going to define our new Ref in the <script> block of the **SFC** (**Single**
    **File Components**):'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在**SFC**（**单文件组件**）的`<script>`块中定义我们的新Ref：
- en: '[PRE8]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Import the new component at the top of the script tag:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本标签的顶部导入新的组件：
- en: '[PRE9]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add that component to our HTML. We do so by passing it a property containing
    the comments like so:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将该组件添加到我们的HTML中。我们这样做是通过传递一个包含评论的属性，如下所示：
- en: '[PRE10]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the `v-if` directives to make sure that the component is shown only when
    our showComments private data is true:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`v-if`指令以确保组件仅在showComments私有数据为true时显示：
- en: '[PRE11]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If we checked the application now, we would notice that the new component is
    not displayed yet. This is because the value of showComments is set to `false`
    and there is no way to change it. Let’s fix the problem by allowing our “Show
    Comments” button to change the value of our Ref:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在检查应用程序，我们会注意到新的组件还没有显示。这是因为showComments的值被设置为`false`，而且没有方法可以改变它。让我们通过允许我们的“显示评论”按钮改变我们的Ref的值来解决这个问题：
- en: '[PRE14]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As shown in the preceding code, we used the native `click` event that triggers
    some basic JavaScript to change the value of our Ref. Thanks to Vue reactivity,
    our UI will automatically re-render when the value of `showComments` changes.
    If you would like to be able to toggle the component on and off, you could write
    `showComment = !showComment` to make sure that the value of `showComment` will
    be the equal to the *opposite* of the current value of `showComment.`
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述代码所示，我们使用了原生的 `click` 事件，它触发了一些基本的 JavaScript 代码来改变我们 Ref 的值。多亏了 Vue 的响应性，当
    `showComments` 的值改变时，我们的 UI 将会自动重新渲染。如果你想要能够切换组件的开启和关闭，你可以写 `showComment = !showComment`
    来确保 `showComment` 的值将等于当前 `showComment` 值的相反。
- en: 'The component without its style should look like this:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 没有样式的组件应该看起来像这样：
- en: '[PRE18]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Before we move on to the next section, in which we are going to learn how to
    render a list of items, we need to clarify the difference between `v-if` and `v-show`.
    In fact, until now we have not defined what really makes them different and there
    seems to be no reason why we could not use `v-show` in the previous example.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入下一节之前，我们将学习如何渲染项目列表，我们需要明确 `v-if` 和 `v-show` 之间的区别。实际上，直到现在我们还没有定义究竟是什么让它们不同，似乎也没有理由我们不能在之前的例子中使用
    `v-show`。
- en: 'In the previous section, we emphasized the fact that when using `v-show`, the
    HTML element is rendered in the DOM but hidden. However, if we look at the same
    aspect of `v-if`, we would notice that the element is missing altogether and is
    replaced by an HTML comment of `<!--v-if-->`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们强调了使用 `v-show` 时，HTML 元素会被渲染到 DOM 中但保持隐藏。然而，如果我们观察 `v-if` 的相同方面，我们会注意到元素完全缺失，并被一个
    `<!--v-if-->` 的 HTML 注释所替代：
- en: '![Figure 4.5: DOM extract of the SocialPosts.vue component](img/B21130_04_05.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5：SocialPosts.vue 组件的 DOM 提取](img/B21130_04_05.jpg)'
- en: 'Figure 4.5: DOM extract of the SocialPosts.vue component'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5：SocialPosts.vue 组件的 DOM 提取
- en: 'As small as this difference may seem to a new set of eyes, this is actually
    very important for three main reasons:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新手来说，这个差异可能看起来很小，但实际上有三个主要原因非常重要：
- en: Without the ability to omit elements from HTML, we will encounter errors if
    we try to render a component (even if hidden) that requires a specific value.
    For example, in our case, if we had used `v-show` the Vue compiler would have
    tried to render the component, but this would have failed as in some cases the
    comments variable would not have been available.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有从 HTML 中省略元素的能力，当我们尝试渲染一个需要特定值的组件（即使它是隐藏的）时，我们将会遇到错误。例如，在我们的案例中，如果我们使用了
    `v-show`，Vue 编译器会尝试渲染组件，但这样做会失败，因为在某些情况下，评论变量可能不可用。
- en: Rendering lots of unused elements in the DOM can really affect your performance.
    Let’s say for example that we had 150 comments on each post, and we used `v-show`.
    Now the DOM would have hundreds and hundreds of hidden nodes that may never be
    used. Using `v-if` allows us to make sure that these nodes are only rendered when
    needed.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 DOM 中渲染大量未使用的元素确实会影响你的性能。比如说，如果我们每篇帖子有 150 条评论，并且使用了 `v-show`，那么 DOM 就会有成百上千的隐藏节点，这些节点可能永远不会被使用。使用
    `v-if` 允许我们确保这些节点只有在需要时才被渲染。
- en: It is time to move forward to our next section where we will be learning a new
    directive called `v-for`. This directive allows us to render a list of items,
    such as our comments, by automatically duplicating our HTML.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候前进到下一节了，我们将学习一个新的指令，称为 `v-for`。这个指令允许我们通过自动复制我们的 HTML 来渲染项目列表，例如我们的评论。
- en: Simplifying your template with v-for
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 v-for 简化模板
- en: The directive covered in this section is called `v-for` and will be used to
    render a list of elements. If you have learned any programming language, you have
    probably been exposed to the concept of a `for` loops are used in programming
    languages to iterate through a list one entry at a time, and the `v-for` directive
    is no different.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中介绍的指令称为 `v-for`，它将被用来渲染元素列表。如果你学习过任何编程语言，你可能已经接触到了编程语言中用于逐条遍历列表的 `for` 循环的概念，而
    `v-for` 指令与此类似。
- en: Using `v-for` allows us to render a specific list by re-rendering the same element
    (or set of elements) multiple times. Using `v-for` not only simplifies our **HTML**,
    but also allows us to render dynamic lists that would be impossible to render
    ahead of time unless we knew the actual number of entries.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `v-for` 允许我们通过多次重新渲染相同的元素（或元素集）来渲染特定的列表。使用 `v-for` 不仅简化了我们的 **HTML**，还允许我们渲染那些在事先不知道确切条目数量时无法渲染的动态列表。
- en: 'Let’s see how the native HTML implementation and a Vue.js implementation of
    a simple list compare:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看原生 HTML 实现和 Vue.js 实现的简单列表是如何比较的：
- en: '![Figure 4.6: Comparison of native HTML and Vue.js implementations of a list](img/B21130_04_06_BW.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6：原生 HTML 和 Vue.js 列表实现的比较](img/B21130_04_06_BW.jpg)'
- en: 'Figure 4.6: Comparison of native HTML and Vue.js implementations of a list'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6：原生 HTML 和 Vue.js 列表实现的比较
- en: As shown, the implementation of a `v-for` directive is very similar to other
    `for` loops that you may have seen before. The directive accepts a parameter in
    the format of “item in array” just as in major programming languages.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如所示，`v-for` 指令的实现与其他您可能之前见过的 `for` 循环非常相似。该指令接受一个参数，格式为“item in array”，就像在主要编程语言中一样。
- en: Even if the preceding example does not seem very impressive, this will change
    over time as `v-for` is going to become the go-to directive and will help you
    achieve complex requirements with elegant code.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 即使前面的例子看起来并不那么令人印象深刻，但随着 `v-for` 成为首选指令，并且将帮助您用优雅的代码实现复杂要求，这一切都将随着时间的推移而改变。
- en: Let’s continue the development of `SocialPostComments.vue` file and utilize
    `v-for` directive to display the different comments for a specific post.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续开发 `SocialPostComments.vue` 文件，并利用 `v-for` 指令来显示特定帖子的不同评论。
- en: 'The steps required for us to use a `v-for` directive are the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `v-for` 指令所需的步骤如下：
- en: Get access to a variable or property that is an object or array. In our case,
    it is available as a property.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取一个对象或数组类型的变量或属性。在我们的例子中，它作为一个属性可用。
- en: Create the HTML for the first element. This helps to speed up the HTML development.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建第一个元素的 HTML。这有助于加快 HTML 开发速度。
- en: Change the list to use `v-for` and automatically create duplicate entries.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将列表更改为使用 `v-for` 并自动创建重复条目。
- en: 'The first step is already set for us in the `SocialPostComments.vue` file as
    an array property using `defineProps()`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步已经在 `SocialPostComments.vue` 文件中设置好了，作为使用 `defineProps()` 定义的数组属性：
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, we are going to create the HTML that we want to display. As mentioned
    previously, we are going to hardcode the first entry of the array by accessing
    it using the array syntax:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建我们想要显示的 HTML。如前所述，我们将通过使用数组语法来硬编码数组的第一个条目：
- en: '[PRE20]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding code in which we hardcoded the first comment, may seem irrelevant,
    but in more complex development, creating `v-for` this way will save you lots
    of time. I use this process of rendering just one entry of the `v-for` list to
    focus on the design and development of the HTML. When the list element if fully
    designed I then move to the next step.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们硬编码第一个注释的上一段代码可能看起来不相关，但在更复杂的发展中，以这种方式创建 `v-for` 将为您节省大量时间。我使用这种仅渲染 `v-for`
    列表中的一个条目的过程来专注于 HTML 的设计和开发。当列表元素完全设计完成后，我然后进行下一步。
- en: 'Finally, it is time to implement our `v-for` directive:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是时候实现我们的 `v-for` 指令了：
- en: '[PRE21]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding code will render our `<div>` element as many times as the length
    of our array.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码将根据我们数组的长度渲染我们的 `<div>` 元素多次。
- en: Did you know?
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道吗？
- en: The body of a `v-for` directive can also be used to load other Vue components.
    This allows you to abstract complex code into its own components and make your
    application cleaner.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-for` 指令的主体也可以用来加载其他 Vue 组件。这允许您将复杂代码抽象为其自己的组件，使您的应用程序更简洁。'
- en: 'Before we move to our next chapter, we should point out that `v-for` can accept
    multiple elements and not just a single element as shown previously. To show this
    in real life, we are going to add a heading to each of the comments by using the
    `index` array:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入下一章之前，我们应该指出 `v-for` 可以接受多个元素，而不仅仅是之前显示的单个元素。为了在现实生活中展示这一点，我们将通过使用 `index`
    数组为每个评论添加一个标题：
- en: '[PRE22]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The preceding code shows two more additions.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码展示了两个额外的添加。
- en: First, we exposed the index of the array by using the `(comment, index)` syntax.
    Then we improved the HTML contained in our `v-for` loop by replacing a simple
    string with a multi-element structure.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们通过使用 `(comment, index)` 语法暴露了数组的索引。然后我们通过将简单字符串替换为多元素结构来改进 `v-for` 循环中的
    HTML。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter exposed you to the first Vue directives and started to add some
    magic to your HTML.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向您介绍了第一个 Vue 指令，并开始为您的 HTML 添加一些魔法。
- en: In total, you learned how to accomplish three different use cases. First, we
    showed you how to apply HTML and text with `v-text` and `v-html`. This is very
    useful to bind dynamic variables to our component template. Then, we found out
    how to handle element visibility with `v-if` and `v-show`. We discovered that
    even if they both achieve the same result visually, they are actually different
    behind the scenes. `v-show` hides the element using CSS while `v-if` removes it
    from the DOM altogether. Finally, we finished the chapter with a look at `v-for`
    and how it can be used to iterate within a list and simplify our HTML.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，你学习了如何完成三个不同的用例。首先，我们向你展示了如何使用 `v-text` 和 `v-html` 应用 HTML 和文本。这对于将动态变量绑定到组件模板中非常有用。然后，我们发现如何使用
    `v-if` 和 `v-show` 来处理元素的可见性。我们发现，尽管它们在视觉上都能达到相同的结果，但实际上它们在幕后是不同的。`v-show` 使用 CSS
    隐藏元素，而 `v-if` 则将元素从 DOM 中完全移除。最后，我们通过查看 `v-for` 以及它如何用于在列表中迭代并简化我们的 HTML 来结束本章。
- en: Your turn
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你的回合
- en: It is your turn to do some practice for this section. There are multiple places
    to practice directives, but these are some specific suggestions.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在轮到你了，来做一些本节的练习。有多个地方可以练习指令，但这里有一些具体的建议。
- en: 1\. Refactor `SocialPost.vue` to use `v-show` to display a post’s tags. (You
    need to add a new property for this.)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 将 `SocialPost.vue` 重新整理，使用 `v-show` 来显示帖子的标签。（你需要为此添加一个新的属性。）
- en: 2\. Refactor TheWelcome.vue to use v-for to load our posts instead of the hardcoded
    implementation.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 2. 将 `TheWelcome.vue` 重新整理，使用 `v-for` 来加载我们的帖子，而不是使用硬编码的实现方式。
- en: 3\. Go back to your footer implementation and replace the hardcoded links using
    v-text and v-for.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 回到你的页脚实现，并使用 `v-text` 和 `v-for` 替换硬编码的链接。
- en: In the next chapter, we return to the logical part of our component and enhance
    our Refs and props by introducing **computed properties**. The second part of
    the chapter will introduce **methods** that will hold our component logic and
    help clean up the HTML of our components further.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将回到组件的逻辑部分，通过引入 **计算属性** 来增强我们的 Refs 和 props。本章的第二部分将介绍 **方法**，这些方法将包含我们的组件逻辑，并有助于进一步清理组件的
    HTML。
