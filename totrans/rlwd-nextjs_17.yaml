- en: '*Chapter 14*: Example Projects and Next Steps for Learning More'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're about to reach the end of our journey, and it has been a crazy ride so
    far.
  prefs: []
  type: TYPE_NORMAL
- en: We've learned so many things about Next.js; we're now ready to create the next
    big website or just have fun on our own with a framework that gives us endless
    possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: In this concluding chapter, we will see what the next steps are for learning
    more about Next.js, and we will also give a brief recap of what we've discovered
    so far.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look at the following in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: A short recap of what we've learned in this book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the next steps for learning more?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some projects ideas for practicing with Next.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will know the next steps in your journey as
    a Next.js developer.
  prefs: []
  type: TYPE_NORMAL
- en: One framework, endless possibilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the beginning of our Next.js adventure, we've seen many different features
    that the framework gives us to build a better, faster web.
  prefs: []
  type: TYPE_NORMAL
- en: One thing we should consider when talking about a framework is that it is not
    just about the technology. The community, ideas, and ecosystem are essential and
    deserve to be discussed in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Next.js, in fact, is not just a web framework. We've already seen how it revolutionized
    the way we build our apps on the frontend and backend by providing exciting and
    unique features that make our lives easier without compromising our love for our
    work as developers.
  prefs: []
  type: TYPE_NORMAL
- en: It isn't easy to talk about Next.js without mentioning how good and clever Vercel
    has been in creating something so unique.
  prefs: []
  type: TYPE_NORMAL
- en: Not only does Vercel provide an incredible platform for deploying our applications,
    but it also puts a lot of effort into enhancing the web framework and its ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: With the announcement of Next.js 11, the Vercel team also announced Next.js
    Live, a web browser-based environment for collaborating in real time with your
    team while coding any Next.js application.
  prefs: []
  type: TYPE_NORMAL
- en: It is still in beta, but it's incredibly promising. I must admit that I was
    extremely excited the first time I tried it, as I can clearly see how this could
    boost a team's productivity when debugging, designing, and testing any Next.js-based
    website.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – Live coding with Next.js Live'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.01_B16985.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.1 – Live coding with Next.js Live
  prefs: []
  type: TYPE_NORMAL
- en: Other than Vercel, there's an entire community of companies and individual contributors
    creating incredible extensions and libraries to simplify our job when building
    real-world Next.js applications.
  prefs: []
  type: TYPE_NORMAL
- en: We have already used some of them in our journey, but there are many packages
    that can help us achieve great results with ease.
  prefs: []
  type: TYPE_NORMAL
- en: There are also great GitHub repositories listing a selection of tools, tutorials,
    and libraries, such as [https://github.com/unicodeveloper/awesome-nextjs](https://github.com/unicodeveloper/awesome-nextjs).
    Here, you can find an exhaustive list of high-quality packages for every need.
  prefs: []
  type: TYPE_NORMAL
- en: When browsing all those libraries, articles, and tutorials, you'll eventually
    see that the power of Next.js relies upon many different features. It might have
    been born as a "full-stack React.js framework," but now it's something more significant
    and diverse.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, we can clearly see how Next.js is more of a general-purpose framework
    that we can use for building any kind of application.
  prefs: []
  type: TYPE_NORMAL
- en: In the past, we used to distinguish web frameworks and technologies according
    to their main domain of interest. For example, if we needed to build a complex
    and interactive product, our choices usually boiled down to Ruby on Rails, Symphony,
    or Spring Boot, just to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we needed to build a simple company website. In that case, we might
    have chosen a static site generator, such as Jekyll, or a simple CMS, such as
    WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: I'm not saying that Next.js changed all of that. Still, it replaced a vast number
    of technologies and frameworks with a simple approach to web development, where
    an entire team can easily collaborate on a single project when building REST APIs
    (via API pages), React components, backend logic, **user interfaces** (**UIs**),
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing that we should consider when adopting Next.js as a web framework
    is its impact at the architecture level.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 11*](B16985_11_Final_SB_epub.xhtml#_idTextAnchor113), *Different
    Deployment Platforms*, we discussed how to make decisions regarding how to host
    a Next.js app depending on its features and purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Some years ago, standard practices mandated deploying any web application on
    a hosted server. Today, we have many different opportunities to enhance our users'
    browsing experiences by choosing several alternatives for serving our apps. With
    more classic tech stacks, such as Laravel or Ruby on Rails, we have just a few
    choices; we could deploy them on an AWS EC2 cluster or a virtual private server
    hosted by any company. Next.js allows us to consider many alternatives for creating
    better deployment pipelines and user experiences by statically rendering certain
    pages at build time or server-side rendering other pages at runtime. This is a
    game-changer.
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, there's not just a single kind of web application where Next.js
    can be a good fit. It can be used for building any app thanks to its flexibility,
    robustness, and vast ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: As of the time of writing, I can't tell you a single scenario where using Next.js
    is the wrong choice.
  prefs: []
  type: TYPE_NORMAL
- en: Talking about possible scenarios, it might be the right time to introduce some
    little projects for practicing our Next.js knowledge before diving into production
    website development. In the next section, we will see some excellent ideas for
    little projects that can help us to practice real-world scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Real-world applications for practicing with Next.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to learn is through first-hand experience. In this book, we have
    covered several topics of increasing complexity and described various approaches
    for building real-world Next.js applications.
  prefs: []
  type: TYPE_NORMAL
- en: Now it's time to get our hands dirty and start writing some great apps!
  prefs: []
  type: TYPE_NORMAL
- en: When I started my career as a software engineer, I had difficulty finding suitable
    example applications to build for further learning; now, I want to give you the
    opportunity to practice by creating something worth sharing with your colleagues
    or friends, or even in your next job interview.
  prefs: []
  type: TYPE_NORMAL
- en: Streaming website
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Streaming applications have become a massive part of our lives and changed the
    way we watch movies and TV shows forever. They're also an excellent use case for
    someone wanting to create a real-world application when learning more about a
    given technology.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a first real-world project, I''d like you to build a clone of your favorite
    streaming service. It must respect the following rules:'
  prefs: []
  type: TYPE_NORMAL
- en: 'It must show a list of movies taken from the [https://www.themoviedb.org](https://www.themoviedb.org)
    database. This website exposes some beautiful free REST APIs; you can find the
    documentation here: [https://www.themoviedb.org/documentation/api](https://www.themoviedb.org/documentation/api).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To complicate things (just like in real-world scenarios), a user must be authenticated
    to see all the movies available in the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a trailer is available, the user should be able to watch it on the movie
    page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the images must be served using Next.js' `<Image/>` component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users can log in and out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before starting to write the code for this application, I suggest you try to
    answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What kind of rendering strategy should I choose for the individual movie pages?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where should I deploy this application?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I ensure that the user is logged in when browsing the website?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How would the application perform if there were hundreds (or thousands) of concurrent
    users browsing it? Would that change my answer to the first question?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, there are many other things to consider when building an application,
    but this is a good starting point.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, we will see a different kind of application. You will
    have fixed technological requirements that you need to meet, as will be the case
    when you're working for any company.
  prefs: []
  type: TYPE_NORMAL
- en: Blogging platform
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's pretend that you're working for a company and you're required to build
    a blogging website by attaching Next.js to a headless CMS, in this case, GraphCMS.
  prefs: []
  type: TYPE_NORMAL
- en: 'You must observe the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: You must use TailwindCSS for styling the UI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You must use TypeScript for coding the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every blog page must be statically rendered at build time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The UI must be as similar as possible to your favorite blog.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users can log in and save articles into a reading list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the images must be served using Next.js' `<Image/>` component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SEO is essential. It must achieve a 100% Lighthouse SEO score.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're new to TypeScript, don't worry! Next.js allows you to adopt it gradually.
    Once you're used to it, you will never go back to vanilla JavaScript, I promise!
  prefs: []
  type: TYPE_NORMAL
- en: 'Bonus point: if you feel confident enough, you can also build a simple editing
    page where users can write their articles and share them on the website.'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you're supposed to follow some strict requirements (the CMS
    to use, styling methods, and the language). In the next one, you will have complete
    freedom over any decision regarding the tech stack.
  prefs: []
  type: TYPE_NORMAL
- en: Real-time chat website
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is probably one of the most compelling examples of how powerful Next.js
    can be. For this exercise, you''re required to build a real-time chat application
    with the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: There must be multiple chat rooms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: People can join any room by just inserting their name; no login is required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When people enter a room, they can access the full chat room history.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication must be in real time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bonus point: allow users to create new chat rooms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is a fascinating exercise because there are many different things to consider.
    For example, what if a user knows a given room URL and tries to join without entering
    their name? Where should all the messages be stored? How can those messages be
    sent and retrieved in real time?
  prefs: []
  type: TYPE_NORMAL
- en: To answer these last two questions, there are multiple great products that can
    help build secure, real-time software; the most interesting one is undoubtedly
    Google Firebase. It provides a free real-time database with end-to-end encryption
    that makes creating any chat app possible with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections, we've seen some tiny ideas that can contain everything
    you need to practice and enhance your Next.js knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: Even though we've covered many different topics, there's still so much to learn!
    But this time, you have all the information you need to bootstrap any Next.js
    project, and after reading an entire book on the topic, the best way to proceed
    is by implementing real-world applications.
  prefs: []
  type: TYPE_NORMAL
- en: From now on, you know how to start a Next.js project from scratch with TypeScript
    or vanilla JavaScript, how to customize its webpack configuration, how to add
    any external UI library, how to choose between rendering strategies, where to
    deploy it, and many other great concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Next.js is a fast-evolving framework, and the best advice I can give you right
    now is to follow any news regarding it by following the Next.js core developers
    and Vercel (and me, `@MicheleRivaCode`, of course!) on Twitter, by participating
    in the Next.js Conf (the online event), and by reading the official Next.js blog
    at [https://nextjs.org/blog](https://nextjs.org/blog).
  prefs: []
  type: TYPE_NORMAL
- en: You will be surprised to see how fast Next.js moves and transforms the web.
  prefs: []
  type: TYPE_NORMAL
- en: For that reason, once again, the best thing you can do when you start working
    with Next.js is to stay informed about its newest releases and features.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This summary marks the end of a book that I wish would never end. Not only because
    I truly enjoyed writing it, but also because I believe there is so much more to
    say regarding this beautiful framework.
  prefs: []
  type: TYPE_NORMAL
- en: This book covered all the essential knowledge needed to code real-world Next.js
    applications starting from scratch. As a result, I firmly believe you'll feel
    comfortable writing fast, reliable, and maintainable websites with Next.js, the
    React framework for production.
  prefs: []
  type: TYPE_NORMAL
- en: In this specific chapter, we've seen how Next.js is a game-changer in many different
    situations and how it has transformed the way we write web applications forever.
    Given that it is an ever-evolving framework, we also discussed how important it
    is to follow its latest and frequent releases and take advantage of its new features
    and enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: We've also seen three real-world applications that we can implement to practice
    with Next.js, which is an essential part of anyone's journey for learning how
    to write production-grade applications.
  prefs: []
  type: TYPE_NORMAL
- en: It's now time to close the book, start coding, and enjoy the time we're living
    in, where Next.js exists and makes our developer experience just beautiful.
  prefs: []
  type: TYPE_NORMAL
