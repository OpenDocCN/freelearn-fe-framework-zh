- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Advanced Hooks Provided by React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about implementing routes using React Router.
    Then, we learned about using the Params Hook for dynamic routes. Next, we learned
    about using the Link component to provide links to different routes. Finally,
    we learned how to programmatically redirect using the Navigation Hook.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn about the various built-in Hooks provided
    by React. We will start by giving an overview of the built-in React Hooks, and
    then learn about various utility Hooks. Next, we will learn how to use Hooks to
    optimize the performance of your app. Finally, we will learn about advanced Effect
    Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a full overview of all the built-in
    Hooks that React provides.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of built-in React Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using utility Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Hooks for performance optimizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Hooks for advanced effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A fairly recent version of Node.js should already be installed. The Node Package
    Manager (`npm`) also needs to be installed (it should come with Node.js). For
    more information on how to install Node.js, please check the official website:
    [https://nodejs.org/](https://nodejs.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to use **Visual Studio Code** (**VS Code**) for the guides in
    this book, but everything should work similarly in any other editor. For more
    information on how to install VS Code, please refer to the official website: [https://code.visualstudio.com](https://code.visualstudio.com).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we use the following versions:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js v22.14.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm` v10.9.2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VS Code v1.97.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While installing a newer version should not be an issue, please note that certain
    steps might work differently on a newer version. If you are having an issue with
    the code and steps provided in this book, please try using the mentioned versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter09](https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter09).'
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended that you write the code on your own. Do not simply
    run the code examples that are provided with the book. It is important to write
    the code yourself to be able to learn and understand it properly. However, if
    you run into any issues, you can always refer to the code example.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of built-in React Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'React provides certain built-in Hooks. We have already learned about the basic
    Hooks that React provides:'
  prefs: []
  type: TYPE_NORMAL
- en: '`useState` in [*Chapter 2*](Chapter_02.xhtml#_idTextAnchor048)*, Using the
    State Hook*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useEffect` in [*Chapter 4*](Chapter_04.xhtml#_idTextAnchor103)*, Using the
    Reducer and Effect Hooks*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useContext` in [*Chapter 5*](Chapter_05.xhtml#_idTextAnchor127)*, Implementing
    React Contexts*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, React provides more advanced Hooks, which can be very useful
    in certain use cases. We already covered the following advanced Hooks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`useReducer` in [*Chapter 4*](Chapter_04.xhtml#_idTextAnchor103)*, Using the
    Reducer and Effect Hooks*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useActionState` in [*Chapter 7*](Chapter_07.xhtml#_idTextAnchor169)*, Using
    Hooks for Handling Forms*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useFormStatus` (not covered yet, but similar to `useActionState`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useOptimistic` in [*Chapter 7*](Chapter_07.xhtml#_idTextAnchor169)*, Using
    Hooks for Handling Forms*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useTransition` in [*Chapter 7*](Chapter_07.xhtml#_idTextAnchor169)*, Using
    Hooks for Handling Forms*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, there are still more advanced Hooks that React provides:'
  prefs: []
  type: TYPE_NORMAL
- en: '`useRef`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useImperativeHandle`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useId`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useSyncExternalStore`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useDebugValue`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useDeferredValue`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useMemo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useCallback`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useLayoutEffect`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useInsertionEffect`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, letâ€™s recap and summarize the Hooks we have already learned about. Then,
    we are going to briefly cover all these advanced Hooks that React provides and
    learn why and how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: useState
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **State Hook** returns a value that will persist across re-renders and
    a function to update it. A value for `initialState` can be passed to it as an
    argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Calling `setState` updates the value and re-renders the component with the updated
    value. If the value does not change, React will not re-render the component.
  prefs: []
  type: TYPE_NORMAL
- en: 'A function can also be passed to the `setState` function, with the first argument
    being the current value. For example, consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, a function can be passed to the first argument of the Hook if
    the initial state is the result of a complex computation. In that case, the function
    will only be called once during initialization of the Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The State Hook is the most ubiquitous Hook provided by React.
  prefs: []
  type: TYPE_NORMAL
- en: We used this Hook in [*Chapter 2*](Chapter_02.xhtml#_idTextAnchor048)*, Using
    the State Hook*.
  prefs: []
  type: TYPE_NORMAL
- en: useEffect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Effect Hook** accepts a function that contains code with side effects,
    such as timers and subscriptions. The function passed to the Hook will run after
    the render is done and the component is on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'A cleanup function can be returned from the Hook, which will be called when
    the component unmounts and is used, for example, to clean up timers or subscriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The cleanup function will also be called if the component renders multiple times
    before the effect is activated again.
  prefs: []
  type: TYPE_NORMAL
- en: 'To avoid triggering the effect on every re-render, we can specify an array
    of values as the second argument to the Hook. When any of these values change,
    the effect will get triggered again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This array passed as the second argument is called the dependency array of the
    effect. If you want the effect to only trigger during mounting and the cleanup
    during unmounting, you can pass an empty array as the second argument.
  prefs: []
  type: TYPE_NORMAL
- en: We used this Hook in [*Chapter 4*](Chapter_04.xhtml#_idTextAnchor103)*, Using
    the Reducer and Effect Hooks*.
  prefs: []
  type: TYPE_NORMAL
- en: useContext
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Context Hook** accepts a context object and returns the current value
    for the context. When the context provider updates its value, the Hook will trigger
    a re-render with the latest value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We used this Hook in [*Chapter 5*](Chapter_05.xhtml#_idTextAnchor127)*, Implementing
    React Contexts*.
  prefs: []
  type: TYPE_NORMAL
- en: useReducer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Reducer Hook** is an advanced version of the `useState` Hook. It accepts
    a `reducer` as the first argument, which is a function with two arguments: `state`
    and `action`. The `reducer` function then returns the updated state computed from
    the current state and the action. If the `reducer` returns the same value as the
    previous state, React will not re-render components or trigger effects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We should use the `useReducer` Hook instead of the `useState` Hook when dealing
    with complex state changes. It is also easier to deal with a global state because
    we can simply pass down the `dispatch` function instead of multiple setter functions.
  prefs: []
  type: TYPE_NORMAL
- en: The `dispatch` function is stable and will not change on re-renders, so it is
    safe to omit it from `useEffect` or the `useCallback` dependency arrays.
  prefs: []
  type: TYPE_NORMAL
- en: We can specify the initial state by setting the `initialState` value or specifying
    an `initFn` function as the third argument. Specifying such a function makes sense
    when computing the initial state takes a long time or when we want to reuse the
    function to reset the state through an action.
  prefs: []
  type: TYPE_NORMAL
- en: We used this Hook in [*Chapter 4*](Chapter_04.xhtml#_idTextAnchor103)*, Using
    the Reducer and Effect Hooks*.
  prefs: []
  type: TYPE_NORMAL
- en: useActionState
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Action State Hook** is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To define an Action State Hook, we need to provide an `action` function as
    the first argument, which has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We then need to pass the `action` prop to a `<form>` element. When this form
    gets submitted, the action function is called with the current state of the Hook
    and the `FormData` submitted inside the form.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, it is possible to provide an `initialState` for the Hook and use
    the `isPending` value to show a loading state while the action is being processed.
  prefs: []
  type: TYPE_NORMAL
- en: We used this Hook in [*Chapter 7*](Chapter_07.xhtml#_idTextAnchor169)*, Using
    Hooks for Handling Forms*.
  prefs: []
  type: TYPE_NORMAL
- en: useFormStatus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Form Status Hook** is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: It is used in cases where the form submission is not handled by us. For example,
    if we have a backend that handles the form submission for us, or if we are using
    a server action for the form state (relevant when carrying out full-stack React
    development).
  prefs: []
  type: TYPE_NORMAL
- en: 'It returns a `status` object with the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pending`: Is set to `true` if the parent `<form>` is currently being submitted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data`: Contains the `FormData` that is being submitted by the parent form'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`method`: Set to either `''get''` or `''post''`, depending on which method
    was defined in the parent `<form>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`action`: If an action function was passed to the parent `<form>`, this will
    contain a reference to it. Otherwise, it will be `null`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, it can be used to implement a submit button that is disabled while
    the form is submitting to the server-side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The Form Status Hook can only be used in components rendered inside a `<form>`.
    Unlike other Hooks, at the time of writing, this is the only Hook that is exported
    from `react-dom`, and not `react`.
  prefs: []
  type: TYPE_NORMAL
- en: useOptimistic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Optimistic Hook** has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: It can be used to optimistically update a state while we are waiting for the
    remote state from the server to finish updating. It accepts a state (usually from
    an API request, such as a **Query Hook**) and an `update` function. The Hook then
    returns an optimistic state and a function to add an optimistic state.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the Optimistic Hook can be used to insert a new object into an
    array while we are waiting for the server to finish adding it. In that case, the
    update function would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This update function optimistically inserts a new object but adds a `pending:
    true` flag to it, so that we can later render pending objects in a different way
    (for example, slightly grayed out).'
  prefs: []
  type: TYPE_NORMAL
- en: We used this Hook in [*Chapter 7*](Chapter_07.xhtml#_idTextAnchor169)*, Using
    Hooks for Handling Forms*.
  prefs: []
  type: TYPE_NORMAL
- en: useTransition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Transition Hook** lets you handle asynchronous operations by updating
    the state without blocking the UI. This is especially useful for rendering computationally
    expensive component trees, such as rendering tabs and their (potentially complex)
    contents, or when making a client-side router. The Transition Hook has the following
    signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `isPending` state can be used to handle the loading state. The `startTransition`
    function allows us to pass a function to start the transition. This function needs
    to be synchronous. While the updates (for example, setting state) triggered inside
    the functions are being executed and their effects on components evaluated, `isPending`
    will be set to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: This does not block the UI, so other components still behave normally while
    the transition is executing.
  prefs: []
  type: TYPE_NORMAL
- en: We used this Hook in [*Chapter 7*](Chapter_07.xhtml#_idTextAnchor169)*, Using
    Hooks for Handling Forms*.
  prefs: []
  type: TYPE_NORMAL
- en: After recapping the built-in Hooks we have already learned about, letâ€™s now
    move on to learning about other advanced built-in Hooks, which we have not used,
    starting with built-in utility Hooks that React provides.
  prefs: []
  type: TYPE_NORMAL
- en: Using utility Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We start by learning about **utility Hooks**. These are Hooks that allow us
    to model certain use cases or help us when developing our own Hooks, as in [*Chapter
    12*](Chapter_12.xhtml#_idTextAnchor282)*, Building Your Own Hooks*.
  prefs: []
  type: TYPE_NORMAL
- en: We are now going to set up a demo page in our blog app to be able to test out
    the various utility Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâ€™s get started setting up the demo page to test out these Hooks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter08_2` folder to a new `Chapter09_1` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter09_1` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `src/components/demo/` folder. This is where we will put our demo
    components later to try out the various Hooks we will learn about.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new `src/pages/Demo.jsx` file, with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/App.jsx` and import the `Demo` page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a new `NavBarLink` for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, define a route for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the `dev` server and keep it running throughout the chapter, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Demo** link in the nav bar to open the demo page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have a demo page, we can get started learning about the other built-in
    advanced Hooks that React provides!
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 â€“ The Demo page in our blog app](img/B31327_09_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 â€“ The Demo page in our blog app
  prefs: []
  type: TYPE_NORMAL
- en: useRef
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Ref Hook** returns a `ref` object that can be assigned to a component
    or element via the `ref` prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: After assigning the ref object to an element or component, the ref object can
    be accessed via `refContainer.current`. If `initialValue` is set, `refContainer.current`
    will be set to this value before assignment.
  prefs: []
  type: TYPE_NORMAL
- en: 'ref objects can be used for various use cases, but the two main ones are:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting a reference to an element to access it on the **Document Object Model**
    (**DOM**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping mutable values around that should not be affected by the React lifecycle
    (e.g., not triggering a re-render when the value is mutated)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auto-focusing an input field using a Ref Hook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can use a Ref Hook to get a reference to an input field element and then
    access its `focus()` function via the DOM to implement an input field that automatically
    gets focused when it renders. While there is also an `autofocus` attribute that
    can be provided to elements via HTML, sometimes itâ€™s necessary to do it programmatically
    â€“ for example, if we want to focus a field after the user has finished doing something
    else.
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâ€™s now get started implementing an auto-focusing input field using a Ref
    Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/components/demo/useRef/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new `src/components/demo/useRef/AutoFocus.jsx` file. Inside it, import
    `useRef` and `useEffect`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define the component and a Ref Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define an Effect Hook that is called on render and causes the input field
    to be focused:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render the input field and pass the Ref to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, edit `src/pages/Demo.jsx` and import the `AutoFocus` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render it on the `Demo` page by adjusting the component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Refresh the page; you should see the input field getting focused automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 â€“ The input field is automatically being focused](img/B31327_09_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 â€“ The input field is automatically being focused
  prefs: []
  type: TYPE_NORMAL
- en: Changing state within a ref
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important to note that mutating the current value of a ref does not cause
    a re-render. If this is needed, we can use a `ref` callback function instead.
    This function will be called when the element is loaded. We can use this, for
    example, to get the initial size of an element in the DOM. We can then set the
    state of a State Hook inside this callback function to trigger a re-render.
  prefs: []
  type: TYPE_NORMAL
- en: If we do not just want to get the initial width of a component but also the
    current width (even when the component is resized later), we need to use a **Layout
    Effect Hook**. We are going to cover this use case later in this chapter, in the
    *Using Hooks for advanced effects* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâ€™s try out callback functions in refs to get the initial width of a component
    now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `src/components/demo/useRef/InitialWidthMeasure.jsx` file. Inside
    it, import the `useState` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define the component and a State Hook to store the width of the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, define a callback function for the `ref`, which accepts the DOM `node`
    as an argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether we successfully got a reference to the DOM node, then use the
    DOM API to get the current width of the element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render the component and add the callback function via the `ref` prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/pages/Demo.jsx` and import the `InitialWidthMeasure` component there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, render the component on the **Demo** page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Demo page should now automatically refresh in your browser and show the
    component and its initial width!
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 â€“ The component displaying its initial width](img/B31327_09_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 â€“ The component displaying its initial width
  prefs: []
  type: TYPE_NORMAL
- en: Using refs to persist mutable values across re-renders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refs can be used to access the DOM, but also to keep mutable values around even
    when the component is re-rendered, such as storing references to intervals.
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâ€™s try that out by implementing a timer that counts the seconds passed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `src/components/demo/useRef/Timer.jsx` file. Inside it, import
    the `useRef`, `useState`, and `useEffect` functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define and export a `Timer` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside it, define a Ref Hook to store the interval and a State Hook to store
    the current count:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a function that will increase the count:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, define an Effect Hook that defines a new interval and stores it in the
    ref:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now use this ref to clear the interval when the component unmounts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render the current count of the timer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, render a button to cancel the timer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we did not need to access the interval ID outside of the Effect Hook, we
    could simply use a `const` inside the effect instead of defining a Ref. While
    we could use a State Hook to store the interval ID, this would cause the component
    to re-render. As we can see, Refs are ideal for storing values that need to change
    but are not used for rendering.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/pages/Demo.jsx` and import the `Timer` component there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, render the component on the Demo page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Demo page should now automatically refresh in your browser and show the
    component counting seconds! Press the **Cancel** button to stop the timer.
  prefs: []
  type: TYPE_NORMAL
- en: Using refs as in the previous example makes them similar to instance variables
    in classes, such as `this.intervalRef`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows what the `Timer` component looks like on the
    Demo page after 42 seconds have elapsed since opening the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 â€“ The Timer component showing seconds elapsed since being rendered](img/B31327_09_04.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 â€“ The Timer component showing seconds elapsed since being rendered
  prefs: []
  type: TYPE_NORMAL
- en: Passing refs as props
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes, you may want to get a ref to an input field inside another component
    (for example, when dealing with custom input fields). In the past, this required
    the `forwardRef` helper. However, since React 19, we can simply pass refs as props.
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâ€™s try it out:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/components/demo/useRef/CustomInput.jsx` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, define the following custom input component, accepting a ref as
    a prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can use the ref as usual now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, edit the `src/components/demo/useRef/AutoFocus.jsx` file and import the
    `CustomInput` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the input field with our `CustomInput` component, and pass the ref
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Refresh the Demo page and you will see that the input field is still getting
    autofocused!
  prefs: []
  type: TYPE_NORMAL
- en: Creating ref contents only once
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have a complex algorithm that needs initialization, for example, a pathfinding
    algorithm, it is possible to store a reference to it in a ref to avoid creating
    it on every render. This should be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Generally, writing or reading `ref.current` in a render like that is not allowed
    in React. However, in this case, it is fine because the condition makes it only
    execute once when the component is initialized.
  prefs: []
  type: TYPE_NORMAL
- en: While React always only saves the initial value of a ref once, directly calling
    the function inside the Ref Hook, such as `useRef(createPathfinder())`, would
    unnecessarily execute the expensive function on every render.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have seen, there are many use cases for refs. Generally, refs are useful
    to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Store information between re-renders**, because â€“ unlike regular variables
    â€“ refs do not reset when re-rendering'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Change information without triggering a re-render**, because â€“ unlike State
    Hooks â€“ refs do not trigger a re-render'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Store information local to each copy of the component**, because â€“ unlike
    regular variables outside of components â€“ refs do not have a shared value between
    different instances of a component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: useImperativeHandle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Imperative Handle Hook** can be used to customize instance values that
    are exposed to other components when pointing a `ref` to it. Doing this should
    be avoided as much as possible, however, as it tightly couples components together,
    which harms reusability.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `useImperativeHandle` function has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use this Hook, for example, to expose a special `focus` function that
    not only focuses an input field but also highlights it. Other components can then
    trigger this function via a `ref` to the component. Letâ€™s try it out now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/components/demo/useImperativeHandle/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside it, create a new `src/components/demo/useImperativeHandle/HighlightFocusInput.jsx`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `useImperativeHandle`, `useRef`, and `useState` functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a component that accepts a `ref`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the component, we define a Ref Hook for the input field and a State
    Hook to store the `highlight` state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, define an Imperative Handle Hook, pass the `ref` to it, and pass a function
    that returns an object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This object contains a `focus` function, which will trigger the `focus` function
    on the `input` element, and then set the `highlight` state to `true` for a second:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, render an input field and pass `inputRef` to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If `highlight` is set to `true`, render the background in a `yellow` color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new `src/components/demo/useImperativeHandle/HighlightFocus.jsx` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, import the `useRef` function and the `HighlightFocusInput` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, define a component and a Ref Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render a button to trigger the `focus` function from the component, and then
    render the component and pass the `ref` to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/pages/Demo.jsx` and import the `HighlightFocus` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render the `HighlightFocus` component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, go to the **Demo** page and click the **focus it** button. You will see
    the input field getting focused and highlighted!
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 â€“ The component focusing and highlighting the input field](img/B31327_09_05.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 â€“ The component focusing and highlighting the input field
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, by using refs and the Imperative Handle Hook, we can access functions
    from other components. However, this should be used with caution, as it tightly
    couples components, which can become a problem when our app grows and we want
    to reuse the components somewhere else.
  prefs: []
  type: TYPE_NORMAL
- en: useId
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Id Hook** is used to generate unique IDs. This can be useful, for example,
    to provide IDs for elements for accessibility attributes (such as `aria-labelledby`
    or `aria-describedby`). The Id Hook has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Letâ€™s try it out now by providing a label for a checkbox field:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/components/demo/useId/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside it, create a new `src/components/demo/useId/AriaInput.jsx` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `useId` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a component that uses the Id Hook to generate an ID for a label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render a label with the `htmlFor` tag pointing to `inputId`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render a `checkbox` field with the generated ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/pages/Demo.jsx` and import the `AriaInput` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, render the component on the Demo page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, go to the **Demo** page and open the inspector on the input field; you
    will see that React generated an `:r0:` ID for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 â€“ A unique ID being generated automatically by React](img/B31327_09_06.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 â€“ A unique ID being generated automatically by React
  prefs: []
  type: TYPE_NORMAL
- en: In React 19.1, the format of IDs was changed from `:r123:` to `Â«r123Â»`, to ensure
    that they are valid CSS selectors.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to connecting the label to the input field for screen readers (improving
    accessibility), using a `<label>` element has the added advantage of allowing
    us to click on the label to check/uncheck the checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'While we could manually set an ID in this case, for example, `tos-check`, the
    ID needs to be unique across the whole page. So, if we wanted to render the same
    input field again, the ID would already be invalid, as it is reused. To prevent
    this issue, always prefer to use the Id Hook for these cases so that the component
    can be reused multiple times on the same page. If you have multiple input fields
    in a single component, it is best practice to only use a single Id Hook in the
    component and then extend IDs by adding tags to the generated ID â€“ for example:
    `` `${id}-tos-check` `` and `` `${id}-username` ``.'
  prefs: []
  type: TYPE_NORMAL
- en: useSyncExternalStore
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Sync External Store Hook** is used to subscribe to external stores, such
    as state management libraries or browser APIs. Its signature looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, the Sync External Store Hook accepts three parameters and returns
    the current snapshot of the store, which can be used to render information from
    it. The parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter, `subscribe`, is a function that takes a `callback` function
    as an argument and subscribes it to the store. When the store changes, the provided
    function should be called. The `subscribe` function should also return a function
    that cleans up the subscription.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second parameter, `getSnapshot`, is a function that returns a snapshot of
    the current state of the data in the store. If the store changes (the `callback`
    function in the `subscribe` function is called), React calls the `getSnapshot`
    function and checks whether the returned value is different. If it is, the component
    will re-render.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third parameter, `getServerSnapshot`, is an optional function that returns
    the initial snapshot of the current state of the data in the store. This function
    is only called during server rendering and used to hydrate server-rendered content
    on the client.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In most cases, you will be better off using State and Reducer Hooks instead
    of this Hook. Most state management libraries also provide their own Hooks. This
    Hook is mostly useful when integrating with existing non-React code, but it can
    also be useful when interacting with certain browser APIs, which is what we are
    going to try out now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâ€™s implement an indicator that checks whether a network connection is available
    or not, by subscribing to a browser API via the Sync External Store Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/components/demo/useSyncExternalStore/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside it, create a new `src/components/demo/useSyncExternalStore/OnlineIndicator.jsx`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `useSyncExternalStore` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a `subscribe` function that accepts a `callback` function as an argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add event listeners for the `online` and `offline` events from the browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return a function that will clean up those event listeners:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, define a `getSnapshot` function that returns the current online status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define the component and a Sync External Store Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the status based on the result from the browser API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render the status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/pages/Demo.jsx` and import the `OnlineIndicator` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render the component on the Demo page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, go to the **Demo** page and (if you are online) it should show **online**.
    Turn all network connections off to see it change to **offline**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 â€“ Detecting that the user has gone offline via an external store
    (browser APIs)](img/B31327_09_07.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 â€“ Detecting that the user has gone offline via an external store
    (browser APIs)
  prefs: []
  type: TYPE_NORMAL
- en: useDebugValue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Debug Value Hook is useful for developing custom Hooks that are part of
    shared libraries. It can be used to show certain values for debugging in React
    DevTools. Its signature is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter, `value`, is the value or message that should be logged.
    The second, optional `format` parameter is used to provide a format function that
    will format the value before being shown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâ€™s briefly try it out by defining a custom Hook for the `OnlineIndicator`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/components/demo/useSyncExternalStore/OnlineIndicator.jsx` and import
    the `useDebugValue` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a new Hook function before the component is defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the Debug Value Hook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return the status from the Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Adjust the component to use the custom Hook instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, go to the **Demo** page. If you havenâ€™t already installed the **React Developer
    Tools** extension, please install it for your browser (follow the instructions
    at [https://react.dev/learn/react-developer-tools](https://react.dev/learn/react-developer-tools)).
    Go to the **Components** tab in the inspector of your browser and select the `OnlineIndicator`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the debug value of the custom Hook being shown there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 â€“ The status of our custom Hook being shown in the React Developer
    Tools](img/B31327_09_08.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.8 â€“ The status of our custom Hook being shown in the React Developer
    Tools
  prefs: []
  type: TYPE_NORMAL
- en: After learning about the various built-in utility Hooks that React provides,
    letâ€™s move on to learning about using built-in Hooks for performance optimizations.
  prefs: []
  type: TYPE_NORMAL
- en: Using Hooks for performance optimizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Certain Hooks can be used to optimize the performance of your app. Generally,
    the rule of thumb is to not optimize prematurely. This is especially true with
    the React Compiler, introduced in React 19\. Nowadays, the React Compiler optimizes
    most cases for us automatically. So, keep in mind to only use these Hooks when
    you have identified a specific performance problem with your app. Generally, the
    rule of thumb is to not optimize prematurely unless you know it will be an expensive
    computation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The React Compiler is a Babel plugin that can be manually installed, and it
    also ships with certain frameworks, such as Next.js. For more information on the
    React Compiler, please read the following page in the React docs: [https://react.dev/learn/react-compiler](https://react.dev/learn/react-compiler).'
  prefs: []
  type: TYPE_NORMAL
- en: useDeferredValue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Deferred Value Hook** can be used to defer low-priority updates (such
    as filtering a list) so that higher-priority updates (such as updating the text
    entered in an input field) can be processed first.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you have a search where text can be entered to filter items,
    the Deferred Value Hook can be used to defer updates to the filter. Unlike debouncing,
    where we set a fixed time after which updates are persisted, deferring is dynamic
    and dependent on how fast the UI can be rendered. On faster machines, it will
    update more frequently, while on slower machines, updates will not slow down the
    rest of the UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'The signature of the `useDeferredValue` function looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter is a value to be deferred. For example, this value can be
    from a State Hook that handles user input.
  prefs: []
  type: TYPE_NORMAL
- en: The second parameter is an optional initial value used for the initial render
    of the component. If no initial value is defined, the Hook will not defer during
    the initial render because there is no value that it can render until `value`
    gets set (for example, by the user typing into an input field).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a search without deferred values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Letâ€™s first implement a search page where blog posts are searched, without
    using deferred values:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/api.js` and define a function to produce an artificial delay, so
    that we can simulate the search operation being slow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define a `searchPosts` API function, which fetches all posts (featured
    and non-featured):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, filter the posts using a simple search (making both the title and query
    lowercase and then checking whether the query is included in the title):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an artificial delay of one second:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, return the filtered posts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new `src/components/post/PostSearchResults.jsx` file. Inside it, import
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, define a component that will display the search results for a given query
    using the Suspense Query Hook, our API function, and the `PostList` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a new `src/components/post/PostSearch.jsx` file. Inside it, import
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a `PostSearch` component that uses a State Hook and an input field to
    handle the query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a `Suspense` boundary and, inside it, render the `PostSearchResults`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new `src/pages/Search.jsx` file. Inside it, import the `PostSearch`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render a page with the `PostSearch` component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/App.jsx` and import the `Search` page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a link to the page, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, define the route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now go to the **Search** page and enter a query into the search; you will see
    that it shows **loadingâ€¦** for a second before showing the new results.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9 â€“ Waiting for the new results to load](img/B31327_09_09.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.9 â€“ Waiting for the new results to load
  prefs: []
  type: TYPE_NORMAL
- en: While this search works, itâ€™s not a great user experience to replace all results
    with a **loadingâ€¦** message while the user is typing a query.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing deferred values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the Deferred Value Hook, we can improve this behavior by showing the old
    query results while the new results are being fetched, and then seamlessly replace
    them with the new results once they are ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâ€™s get started using the Deferred Value Hook now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/components/post/PostSearch.jsx` and import the `useDeferredValue`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the Deferred Value Hook inside the `PostSearch` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, replace the `query` for the `SearchResults` component with `deferredQuery`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to the **Search** page and enter a query into the search input field; you
    will see that the previous results are shown until the new results come in. The
    **loadingâ€¦** message is now only displayed initially before the first query is
    entered!
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10 â€“ Showing stale results while the new results are loading](img/B31327_09_10.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.10 â€“ Showing stale results while the new results are loading
  prefs: []
  type: TYPE_NORMAL
- en: useMemo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Memo Hook** takes the result of a function and memoizes it. This means
    that it will not be recomputed every time. This Hook can be used for performance
    optimizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, `computeVal` is a performance-heavy function that computes
    a result from `a`, `b`, and `c`.
  prefs: []
  type: TYPE_NORMAL
- en: '`useMemo` runs during rendering, so make sure the computation function does
    not cause any side effects, such as resource requests. Side effects should be
    put into a `useEffect` Hook.'
  prefs: []
  type: TYPE_NORMAL
- en: The array passed as the second argument specifies the dependencies of the function.
    If any of these values change, the function will be recomputed; otherwise, the
    stored result will be used. If no array is provided, a new value will be computed
    on every render. If an empty array is passed, the value will only be computed
    once.
  prefs: []
  type: TYPE_NORMAL
- en: Do not rely on `useMemo` to only compute things once. React may forget some
    previously memoized values if they are not used for a long time, for example,
    to free up memory. Use it only for performance optimizations.
  prefs: []
  type: TYPE_NORMAL
- en: Since React 19, the React Compiler attempts to memoize values as much as possible
    automatically. In most cases, it should not be necessary to manually wrap values
    with `useMemo` anymore. Only use this Hook if you find a performance problem that
    the React Compiler does not memoize in a satisfying way. As a rule of thumb, try
    not to prematurely optimize your components, and do not use Memo Hooks unless
    you have a very good reason for doing so.
  prefs: []
  type: TYPE_NORMAL
- en: useCallback
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `useCallback` Hook works similarly to the `useMemo` Hook. However, it returns
    a memoized callback function instead of a value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code is similar to the following `useMemo` Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: The function returned will only be redefined if one of the values passed in
    the dependency array changes.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly to the Memo Hook, the Callback Hook should only be used if you have
    identified a specific performance problem that the React Compiler does not handle
    in a satisfying way, such as infinite re-render loops or too many renders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have learned about using built-in Hooks for performance optimization,
    letâ€™s briefly cover the final few built-in Hooks provided by React: advanced versions
    of the Effect Hook.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Hooks for advanced effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two special versions of the Effect Hook: the **Layout Effect Hook**
    and the **Insertion Effect Hook**. These are only needed for very specific use
    cases, so we are only briefly covering them here.'
  prefs: []
  type: TYPE_NORMAL
- en: useLayoutEffect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Layout** **Effect Hook** is identical to the Effect Hook, but it fires
    synchronously after all DOM mutations are completed and before the component is
    rendered in the browser. It can be used to read information from the DOM and adjust
    the appearance of components before rendering. Updates inside this Hook will be
    processed synchronously before the browser renders the component.
  prefs: []
  type: TYPE_NORMAL
- en: Do not use this Hook unless it is really needed, which is only in certain edge
    cases. `useLayoutEffect` will block visual updates in the browser, and thus, is
    slower than `useEffect`.
  prefs: []
  type: TYPE_NORMAL
- en: The rule here is to use `useEffect` first. If your mutation changes the appearance
    of the DOM node, which can cause it to flicker, you should use `useLayoutEffect`
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: useInsertionEffect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Insertion Effect Hook** is similar to the Effect Hook, but it fires before
    any layout effects fire. This Hook is intended to be used only by CSS-in-JS library
    authors, so you will most likely not need it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this chapter can be found in the `Chapter09/Chapter09_1`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about all Hooks provided by React as of version
    19.1\. We started by giving an overview of the built-in Hooks and then learned
    about various utility Hooks. Next, we moved on to learning about Hooks for performance
    optimization. Finally, we learned about advanced Effect Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: We now have an overview of all the different built-in Hooks that React provides.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn about using various Hooks developed
    by the React community, as well as where to find more of them.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To recap what we have learned in this chapter, try to answer the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the different use cases of the Ref Hook?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which functionality does the Imperative Handle Hook add?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When should we use the Id Hook?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which use case does the Sync External Store Hook cover?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we use the Debug Value Hook?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What advantages does using the Deferred Value Hook give us?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When should we use Memo and Callback Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In most cases, is it still necessary to use Memo and Callback Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Built-in React Hooks section of the React docs: [https://react.dev/reference/react/hooks](https://react.dev/reference/react/hooks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More information about the React Compiler: [https://react.dev/learn/react-compiler](https://react.dev/learn/react-compiler)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book â€“ where you can share feedback,
    ask questions to the author, and learn about new releases â€“ follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/wnXT0](Chapter_09.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_%283%29.png)'
  prefs: []
  type: TYPE_IMG
