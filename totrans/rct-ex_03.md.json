["```js\nvar RecentChangesTables = React.createClass({\n  render: function(){\n    return(<table className = 'table'>\n             <Headings headings = {this.props.headings} />\n             <Rows changeSets = {this.props.changeSets} />\n           </table>);\n    }\n});\n```", "```js\nvar App = React.createClass({\n  propTypes: {\n   headings: React.PropTypes.array,\n   changeSets: React.PropTypes.array,\n   author: React.PropTypes.string.isRequired\n   },\n\n  render: function(){\n    return(<table className = 'table'>\n             <Headings headings = {this.props.headings} />\n             <Rows changeSets = {this.props.changeSets} />\n           </table>);\n    }\n});\n```", "```js\nvar App = React.createClass({\n  propTypes: {\n   headings: function(props, propName, componentName) {\n   if(propName === 'headings')\n     return Error('Failed Validation');\n   }\n  },\n\n  render: function(){\n    return(<table className = 'table'>\n             <Headings headings = {this.props.headings} />\n             <Rows changeSets = {this.props.changeSets} />\n           </table>);\n    }\n});\n```", "```js\nvar App = React.createClass({\n\n getDefaultProps: function() {\n    return {\n      headings: ['When happened ', 'Who did it', 'What they change']\n    };\n  },\n\n  render: function(){\n            …\n  }\n});\n\nvar data = [{ \"when\": \"2 minutes ago\",\n              \"who\": \"Jill Dupre\",\n              \"description\": \"Created new account\"\n            },\n            {\n              \"when\": \"1 hour ago\",\n              \"who\": \"Lose White\",\n              \"description\": \"Added first chapter\"\n            }];\n\nReact.render(<App changeSets={data}/>, document.body);\n```", "```js\nvar RecentChangesTable = React.createClass({\n  render: function(){\n          return(\n          <div>\n            <h1> Recent Changes </h1>\n            <table className='table'>\n               {this.props.children}\n            </table>\n          </div>\n          );\n  }\n});\n\nvar App = React.createClass({\n  render: function(){\n    return(<RecentChangesTable>\n             <Headings headings = {this.props.headings} />\n             <Rows changeSets = {this.props.changeSets} />\n           </RecentChangesTable>);\n    }\n});\n```", "```js\nvar App = React.createClass({\n  getInitialState: function() {\n    return {\n      changeSets: []\n    };\n  },\n\n  render: function(){\n    console.log(this.state.changeSets); // prints []  \n});\n```", "```js\nvar App = React.createClass({\n  getInitialState: function() {\n    return {\n      changeSets: [],\n      headings: ['Updated At', 'Author', 'Change']\n    };\n  },\n\n  handleEvent: function(data) {\n    this.setState({ changeSets: data.changeSets });\n  },\n\n  render: function(){\n    …    \n});\n```", "```js\nvar App = React.createClass({\n  getInitialState: function() {\n    return {\n      changeSets: this.props.changeSets\n    };\n  }\n});\n```", "```js\nconsole.log('Start') // Marks entry point of JS code.\nvar App = React.createClass({\n    componentWillMount: function(){\n      console.log('componentWillMount');\n    },\n\n    componentDidMount: function(){\n      console.log('componentDidMount');\n    },\n\n    getInitialState: function(){\n      return { status: true}\n    },\n\n    getDefaultProps: function(){\n      return {name: 'John'};\n    },\n\n    componentWillReceiveProps: function(nextProps){\n      console.log('componentWillReceiveProps');\n    },\n\n    shouldComponentUpdate: function(nextProps, nextState){\n      console.log('shouldComponentUpdate');\n      return true;\n    },\n\n    componentWillUpdate: function(){\n      console.log('componentWillUpdate');\n    },\n\n    render: function() {\n      console.log('render');\n      return <h1 onClick={this.toggleState}>    \n             {this.state.status.toString()}\n             </h1>\n    },\n\n    componentWillUnmount: function(){\n      console.log('componentWillUnmount')\n    },\n\n    toggleState: function() {\n      this.setState({status: !this.state.status})\n    }\n    });\n\n/* List of methods and signatures for reference\n* componentWillMount\n* componentDidMount\n* componentWillReceiveProps(object nextProps)\n* boolean shouldComponentUpdate(object nextProps, object nextState)\n* componentWillUpdate(object nextProps, object nextState)\n* componentDidUpdate(object prevProps, object prevState)\n* componentWillUnmount()\n/\n\nReact.render(<App name='Jane'/>, document.body);\n```", "```js\n\"Start\"\n\"componentWillMount\"\n\"render\"\n\"componentDidMount\"\n```", "```js\nReact.render(<App name='Jane'/>, document.body);\n```", "```js\n\"…\"\n\"shouldComponentUpdate\"\n\"componentWillUpdate\"\n\"render\"\n\"…\"\n```", "```js\n    shouldComponentUpdate: function(nextProps, nextState){\n      console.log('shouldComponentUpdate');\n      return false; // Will not re-render the component.\n    },\n```", "```js\n componentWillReceiveProps: function(nextProps){\n      console.log('componentWillReceiveProps');\n    },\n```", "```js\n  componentDidMount : function(){\n    $.ajax({\n      url: 'http://openlibrary.org/recentchanges.json?limit=10',\n      context: this,\n      dataType: 'json',\n      type: 'GET'\n    }).done(function (data) {\n      var changeSets = this.mapOpenLibraryDataToChangeSet(data);\n      this.setState({changeSets: changeSets});\n    });\n  }\n```", "```js\n[{\n     comment:   \"Added new cover\",\n     kind:      \"add-cover\",\n     author:    {\n         key: \"/people/fsrc\"\n     },\n     timestamp: \"2015-05-25T19:20:33.981700\",\n     changes:   [\n                    {\n                        key:      \"/books/OL25679864M\",\n                        revision: 2\n                    }\n                ],\n     ip:        null,\n     data:      { url: \"\" },\n     id:        \"49441324\"\n }, \n{\n…\n}\n]\n```", "```js\nmapOpenLibraryDataToChangeSet : function (data) {\n  return data.map(function (change, index) {\n    return {\n      \"when\": jQuery.timeago(change.timestamp),\n      \"who\": change.author.key,\n      \"description\": change.comment\n    }\n  });\n} \n```", "```js\n<script src=\"img/jquery.timeago.js\" type=\"text/javascript\"></script>\n```", "```js\nvar Heading = React.createClass({\n    render: function () {\n        var headingStyle = {\n            backgroundColor: 'FloralWhite',\n            fontSize: '19px'\n        };\n        return (<th style={headingStyle}> {this.props.heading} </th>);\n    }\n});\nvar Headings = React.createClass({\n    render: function () {\n        var headings = this.props.headings.map(function (name, index) {\n            return (<Heading key={\"heading-\" + index} heading={name}/>);\n        });\n\n        return (<tr className='table-th'> {headings} </tr>);\n    }\n});\nvar Row = React.createClass({\n    render: function () {\n        var trStyle = {backgroundColor: 'aliceblue'};\n        return (<tr style={trStyle}>\n            <td> {this.props.changeSet.when} </td>\n            <td> {this.props.changeSet.who} </td>\n            <td> {this.props.changeSet.description} </td>\n        </tr>);\n    }\n});\nvar Rows = React.createClass({\n    render: function () {\n        var rows = this.props.changeSets.map(function (changeSet, index) {\n            return (<Row key={index} changeSet={changeSet}/>);\n        });\n\n        return (<tbody>{rows}</tbody>);\n    }\n});\n\nvar App = React.createClass({\n    getInitialState: function () {\n        return {changeSets: [];\n    },\n    mapOpenLibraryDataToChangeSet: function (data) {\n        return data.map(function (change, index) {\n            return {\n                \"when\": jQuery.timeago(change.timestamp),\n                \"who\": change.author.key,\n                \"description\": change.comment\n            }\n        });\n    },\n    componentDidMount: function () {\n        $.ajax({\n            url: 'http://openlibrary.org/recentchanges.json?limit=10',\n            context: this,\n            dataType: 'json',\n            type: 'GET'\n        }).done(function (data) {\n            var changeSets = this.mapOpenLibraryDataToChangeSet(data);\n            this.setState({changeSets: changeSets});\n        });\n    },\n\n    render: function () {\n        return (<table className='table'>\n            <Headings headings={this.props.headings}/>\n            <Rows changeSets={this.state.changeSets}/>\n        </table>);\n    }\n});\n\nvar headings = ['Updated at ', 'Author', 'Change'];\nReact.render(<App headings={headings} />, document.body);\n```"]