- en: Enhance Angular App with Angular Material
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Angular Material 增强 Angular 应用
- en: In [Chapter 10](4628e6f3-23d6-4aa7-a842-d1df666718de.xhtml)*, Prepare Angular
    App for Production Release*, we mentioned the need to deliver a high-quality application.
    Currently, the app has a terrible look and feel to it, which is only fit for a
    website created in the late 1990s. The first impression a user or a client will
    get about your product or your work is very important, so we must be able to create
    a great looking application that also delivers a great user experience across
    mobile and desktop browsers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](4628e6f3-23d6-4aa7-a842-d1df666718de.xhtml)*，为生产发布准备 Angular 应用*中，我们提到需要提供高质量的应用程序。目前，这个应用程序看起来和感觉都很糟糕，仿佛只适用于上个世纪90年代末创建的网站。用户或客户对你的产品或工作的第一印象非常重要，所以我们必须创建一个外观出色、并且在移动和桌面浏览器中提供出色用户体验的应用程序。
- en: As full-stack developers, it is difficult to focus on the polish of your application.
    This gets worse, as the feature set of an application rapidly grows. It is no
    fun to write great and modular code backing your views, but then revert to CSS
    hacks and inline styles in a rush to improve your application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 作为全栈开发人员，很难专注于你的应用程序的完善。当应用程序的功能集迅速增长时，情况会变得更糟。在匆忙中使用 CSS hack 和内联样式，从而改善你的应用程序，这样做将会使你不再写出优质模块化的代码支持视图，而是沦为一名伟大的代码写手。
- en: Angular Material is an amazing library that is developed in close coordination
    with Angular. If you learn how to leverage Angular Material effectively, the features
    you create will look and work great from the get-go, whether you're working on
    small or large applications. Angular Material will make you a far more effective
    web developer because it ships with a wide variety of user controls that you can
    leverage, and you won't have to worry about browser compatibility. As an added
    bonus, writing custom CSS will become a rarity.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material 是与 Angular 紧密协作开发的惊人库。如果你学会如何有效地利用 Angular Material，你创建的功能将会从一开始就看起来和操作起来非常棒，无论你是在开发小型还是大型应用程序。Angular
    Material 会使你成为一名更加高效的网页开发人员，因为它附带了各种用户控件，你可以利用它们，而且你不必担心浏览器兼容性。作为额外的奖励，编写自定义 CSS
    将变得十分罕见。
- en: 'In this chapter, you will learn the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学到以下内容：
- en: How to configure Angular Material
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何配置 Angular Material
- en: Upgrade the UX with Angular Material
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Angular Material 升级 UX
- en: Adding Material Components to your app
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Material 组件添加到你的应用中
- en: Now that we have all the various dependencies installed, we can start modifying
    our Angular app to add Material components. We will add a toolbar, material design
    card element, and cover accessibility and typography concerns alongside basic
    layout techniques.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了各种依赖项，我们可以开始修改我们的 Angular 应用，以添加 Material 组件。我们将添加一个工具栏、Material 设计卡片元素，并涵盖基本布局技术，以及辅助功能和排版方面的问题。
- en: Angular Material schematics
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular Material 的生成器原理图
- en: With Angular 6 and the introduction of schematics, libraries like Material can
    provide their own code generators. At time of publication, Angular Material ships
    with three rudimentary generators to create Angular components with a side navigation,
    a dashboard layout, or a data table. You can read more about generator schematics
    at [https://material.angular.io/guide/schematics](https://material.angular.io/guide/schematics).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Angular 6 和引入原理图的推出，像 Material 这样的库可以提供自己的代码生成器。目前，Angular Material 随附三个基本生成器，用于创建带有侧边导航、仪表板布局或数据表的
    Angular 组件。你可以在[https://material.angular.io/guide/schematics](https://material.angular.io/guide/schematics)了解更多关于生成器原理图的信息。
- en: 'For example, you can create a side navigation layout by executing this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，你可以通过执行以下操作创建一个侧边导航布局：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command updates `app.module.ts`, directly importing Material modules into
    that file, breaking my suggested `material.module.ts` pattern from earlier. Further,
    a new `SideNavComponent` is added to the app as a separate component, but as mentioned
    in the *Side Navigation* section in [Chapter 14](c1386d03-1f04-49e0-a623-bc5c64be089c.xhtml),
    *Design Authentication and Authorization*, such a navigation experience needs
    to be implemented at the very root of your application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令会更新`app.module.ts`，直接在该文件中导入 Material 模块，打破了我之前提出的`material.module.ts`的模式。此外，一个新的`SideNavComponent`被添加到应用程序作为一个单独的组件，但如同在[第14章](c1386d03-1f04-49e0-a623-bc5c64be089c.xhtml)中的*侧边导航*部分中所提到的，*设计验证和授权*，这样的导航体验需要在你的应用程序的非常根本部分实现。
- en: In short, Angular Material Schematics hold a promise of making it a lot less
    cumbersome to add various Material modules and components to your Angular app;
    however, as provided, these schematics are not suitable for the purposes of creating
    a flexible, scalable, and well-architected code base, as pursued by this book.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Angular Material Schematics 承诺使向 Angular 应用程序添加各种 Material 模块和组件变得更加轻松；然而，就提供的功能而言，这些模式并不适合创建本书追求的灵活、可扩展和良好架构的代码库。
- en: For the time being, I would recommend using these schematics for rapid prototyping
    or experimentation purposes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我建议将这些模式用于快速原型设计或实验目的。
- en: Now, let's start manually adding some components to LocalCast Weather.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始手动向 LocalCast Weather 添加一些组件。
- en: Modifying landing page with Material Toolbar
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Material 工具栏修改着陆页
- en: Before we start making further changes to `app.component.ts`, let's switch the
    component to use inline templates and inline styles, so we don't have to switch
    back and forth between file for a relatively simple component.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始对`app.component.ts`进行进一步更改之前，让我们将组件切换为使用内联模板和内联样式，这样我们就不必在相对简单的组件上来回切换文件了。
- en: Update `app.component.ts` to use an inline template
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `app.component.ts` 以使用内联模板
- en: Remove `app.component.html` and `app.component.css`
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `app.component.html` 和 `app.component.css`
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s start improving our app by implementing an app-wide toolbar:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过实现全局工具栏来改进我们的应用程序：
- en: 'Observe the `h1` tag in `app.component.ts`:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察`app.component.ts`中的`h1`标签：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Update the `h1` tag with `mat-toolbar`:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `mat-toolbar` 更新`h1`标签：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Observe the result; you should see a toolbar, as illustrated:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察结果；您应该会看到一个工具栏，如图所示：
- en: '![](img/d828cd15-3717-4b09-8402-8a13e428257f.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d828cd15-3717-4b09-8402-8a13e428257f.png)'
- en: LocalCast Weather Toolbar
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: LocalCast 天气工具栏
- en: 'Update `mat-toolbar` with a more attention-grabbing color:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用更引人注目的颜色更新`mat-toolbar`：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For a more native feeling, it is important that the toolbar touches the edges
    of the browser. This works well both on large- and small-screen formats. In addition,
    when you place clickable elements such as a hamburger menu or a help button on
    the far-left or far-right side of the toolbar, you''ll avoid the potential that
    the user will click on empty space. This is why Material buttons actually have
    a larger hit-area than visually represented. This makes a big difference in crafting
    frustration-free user experiences:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更加原生的感觉，工具栏紧贴浏览器边缘非常重要。无论是在大屏幕还是小屏幕格式上都能很好地发挥作用。此外，当您将可点击的元素（例如汉堡菜单或帮助按钮）放在工具栏的最左侧或最右侧时，您将避免用户点击空白处的潜在可能性。这就是为什么
    Material 按钮的点击区域实际上比视觉上表示的要大。这在打造无需挫折的用户体验方面有很大的不同：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This won''t be applicable to this app, however, if you''re building a dense
    application; you''ll note that your content will go all the way to the edges of
    the application, which is not a desirable outcome. Consider wrapping your content
    area in a div and apply the appropriate margins using css, as shown:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这对这个应用程序不适用，然而，如果您正在构建一个密集的应用程序，您会注意到您的内容将延伸到应用程序的边缘，这不是一个理想的结果。考虑将内容区域包装在一个
    div 中，并使用 css 应用适当的边距，如图所示：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the next screenshot, you can see the edge-to-edge toolbar with the primary
    color applied to it:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个截图中，您可以看到应用了主要颜色的边到边工具栏：
- en: '![](img/4e2075cc-752b-48b4-bccb-c1870d9d1ff1.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e2075cc-752b-48b4-bccb-c1870d9d1ff1.png)'
- en: LocalCast Weather with Improved Toolbar
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 用改进后的工具栏的 LocalCast 天气
- en: Representing weather in Material Card
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 Material Card 表示天气
- en: 'Material card is a great container to represent the current weather information.
    The card element is surrounded by a drop-shadow that delineates the content from
    its surroundings:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Material card 是一个很好的容器，用于表示当前的天气信息。卡片元素周围有一个投影，将内容与周围的环境区分开来：
- en: 'Import `MatCardModule` in `material.module`:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `material.module` 中导入`MatCardModule`：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In `app.component`, surround `<app-current-weather>` with `<mat-card>`:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在 `app.component` 中，用 `<mat-card>` 包围`<app-current-weather>`:'
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Observe the barely distinguishable card element, as shown:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察几乎无法区分的卡片元素，如图所示：
- en: '![](img/7c7d644c-53ee-4076-8ce8-cff3ed4a939b.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c7d644c-53ee-4076-8ce8-cff3ed4a939b.png)'
- en: LocalCast Weather with Indistinguishable Card
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: LocalCast 天气的难以区分的卡片
- en: 'In order to lay out the screen better, we need to switch to the Flex Layout
    engine. Start by removing the training-wheels from the component template:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地布局屏幕，我们需要切换到 Flex 布局引擎。从组件模板中删除这些 "训练轮"：
- en: 'Remove `style="text-align:center"` from the surrounding `<div>`:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从周围的 `<div>` 中删除`style="text-align:center"`：
- en: 'To center an element in a page, we need to create row, assign a width to the
    center element, and create two additional columns on either side that can flex
    to take the empty space, such as this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要在页面中心放置一个元素，我们需要创建一行，对中心元素分配宽度，并在两侧创建两个额外的列，可以弹性伸展以占用空白部分，如下所示：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Surround `<mat-card>` with the preceding HTML
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用前面的HTML包围`<mat-card>`
- en: 'Observe that the card element is properly centered, as follows:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，卡片元素已正确居中，如下所示：
- en: '![](img/34bc57e0-cd3f-4551-914d-f526896d8bd4.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34bc57e0-cd3f-4551-914d-f526896d8bd4.png)'
- en: LocalCast Weather with Centered Card
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: LocalCast Weather与居中的卡片
- en: Reading through the Card documentation and looking through the examples on Material's
    documentation site at [https://material.angular.io/components/card/overview](https://material.angular.io/components/card/overview),
    you'll note that `mat-card` provides elements to house title and content. We will
    implement this in the upcoming sections.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通过阅读卡片文档并查看Material文档站点上的示例，您将注意到`mat-card`提供了容纳标题和内容的元素。我们将在接下来的部分实现这个。
- en: On [material.angular.io](https://material.angular.io), you can view the source
    code of any example by clicking on  the brackets icons or launch a working example
    in Plunker by clicking on the arrow icon.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在[material.angular.io](https://material.angular.io)上，您可以通过点击括号图标查看任何示例的源代码，或者点击箭头图标在Plunker上启动一个工作示例。
- en: Accessibility
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 辅助功能
- en: Leveraging such Material features may feel unnecessary; however, you must consider
    responsiveness, styling, spacing, and accessibility concerns when designing your
    app. The Material team has put in a lot of effort so that your code works correctly
    under most circumstances and can serve the largest possible user base with a high-quality
    user experience. This can include visually-impaired or keyboard-primary users,
    who must rely on specialized software or keyboard features such as tabs to navigate
    your app. Leveraging Material elements provides crucial metadata for these users
    to be able to navigate your app.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这样的Material功能可能会感到多余；然而，设计应用程序时，您必须考虑响应性、样式、间距和可访问性问题。Material团队已经付出了很多努力，以便您的代码在大多数情况下可以正确工作，并为尽可能多的用户群提供高质量的用户体验。这可能包括视障人士或以键盘为主的用户，他们必须依赖专门的软件或键盘功能（如标签）来浏览您的应用。利用Material元素为这些用户提供了关键的元数据，以便他们能够浏览您的应用。
- en: 'Material claims support for the following screen reader software:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Material声明支持以下屏幕阅读器软件：
- en: NVDA and JAWS with IE / FF / Chrome (on Windows)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在IE / FF / Chrome（Windows）上使用NVDA和JAWS
- en: VoiceOver with Safari on iOS and Safari / Chrome on OSX
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用iOS上的Safari和OSX上的Safari / Chrome的VoiceOver
- en: TalkBack with Chrome on Android
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Chrome上的TalkBack
- en: Card header and content
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卡片标题和内容
- en: 'Now, let''s implement the title and content elements of `mat-card`, as shown:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们实现`mat-card`的标题和内容元素，如下所示：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: With Material, less is always more. You'll note that we were able to remove
    the center `div` and directly apply the `fxFlex` on the center card. All material
    elements have native support for the Flex Layout engine, and this has tremendous
    positive maintainability implications in complicated UIs.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Material，少就是更多。您将注意到我们能够移除中心的`div`，并直接在居中卡片上应用`fxFlex`。所有材料元素都原生支持Flex布局引擎，这在复杂的UI中具有巨大的正面可维护性影响。
- en: 'After we apply `mat-card-header`, you can see this result:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们应用`mat-card-header`后，您可以看到以下结果：
- en: '![](img/043fdc09-4523-4514-b191-1819972288e5.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/043fdc09-4523-4514-b191-1819972288e5.png)'
- en: LocalCast Weather Card with Title and Content
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 带标题和内容的LocalCast Weather卡片
- en: Note that fonts within the card now match Material's Roboto font. However, Current
    Weather is no longer attention grabbing, like before. If you add back in the `h2`
    tag inside `mat-card-title`, Current Weather will visually look bigger; however,
    the font won't match the rest of your application. To fix this issue, you must
    understand Material's typography features.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，卡片内的字体现在与Material的Roboto字体匹配。然而，"Current Weather"现在不再那么引人注目。如果您在`mat-card-title`内重新添加`h2`标签，"Current
    Weather"在视觉上看起来会更大；但是，字体不会与您应用程序的其他部分匹配。要解决此问题，您必须了解Material的排版功能。
- en: Material typography
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Material排版
- en: 'Material''s documentation aptly puts it as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Material的文档恰如其分地表述如下：
- en: Typography is a way of arranging type to make text legible, readable, and appealing
    when displayed.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 排版是一种排列类型以在显示时使文本易读、可读和吸引人的方法。
- en: Material offers a different level of typography that has different font-size,
    line-height, and font-weight characteristics that you can apply to any HTML element,
    not just the components provided out of the box.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Material提供了一种不同水平的排版，具有不同的字体大小、行高和字重特性，您可以将其应用到任何HTML元素，而不仅仅是默认提供的组件。
- en: 'In the following table are CSS classes that you can use to apply Material''s
    typography, such as `<div class="mat-display-4">Hello, Material world!</div>`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在下表中是您可以使用的CSS类，用于应用Material的排版，比如`<div class="mat-display-4">Hello, Material
    world!</div>`：
- en: '| **Class Name** | **Usage** |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| **类名** | **用法** |'
- en: '| `display-4`, `display-3`, `display-2` and `display-1` | Large, one-off headers,
    usually at the top of the page (for example, a hero header) |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `display-4`、`display-3`、`display-2` 和 `display-1` | 大而独特的标题，通常位于页面顶部（例如，主标题）
    |'
- en: '| `headline ` | Section heading corresponding to the `<h1>` tag |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `headline ` | 对应`<h1>`标签的部分标题 |'
- en: '| `title ` | Section heading corresponding to the `<h2>` tag |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `title ` | 对应`<h2>`标签的部分标题 |'
- en: '| `subheading-2` | Section heading corresponding to the `<h3>` tag |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `subheading-2` | 对应`<h3>`标签的部分标题 |'
- en: '| `subheading-1` | Section heading corresponding to the `<h4>` tag |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `subheading-1` | 对应`<h4>`标签的部分标题 |'
- en: '| `body-1` | Base body text |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `body-1` | 基本正文文本 |'
- en: '| `body-2` | Bolder body text |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `body-2` | 更加粗体的正文文本 |'
- en: '| `caption ` | Smaller body and hint text |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `caption ` | 较小的正文和提示文本 |'
- en: '| `button` | Buttons and anchors |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `button` | 按钮和链接 |'
- en: You can read more about Material Typography at [https://material.angular.io/guide/typography](https://material.angular.io/guide/typography).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://material.angular.io/guide/typography](https://material.angular.io/guide/typography)了解更多关于Material排版的信息。
- en: Applying typography
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用排版
- en: 'There are multiple ways to apply typography. One way is to leverage the `mat-typography`
    class and use the corresponding HTML tag like `<h2>`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种应用排版的方式。一种方式是利用`mat-typography`类，并使用相应的HTML标签如`<h2>`：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Another way is to apply the specific typography directly on an element, like
    `class="mat-title"`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方式是直接在元素上应用特定的排版，比如`class="mat-title"`：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that `class="mat-title"` can be applied to `div`, `span` or an `h2` with
    the same results.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`class="mat-title"`可以应用于`div`、`span`或带有相同结果的`h2`。
- en: As a general rule of thumb, it is usually a better idea to implement the more
    specific and localized option, which is the second implementation.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，实现更具体和本地化的选项通常是更好的选择，也就是第二种实现方式。
- en: Updating the tagline as center-aligned caption
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将标语更新为居中对齐的标题排版
- en: 'We can center the tagline of the application using `fxLayoutAlign` and give
    it a subdued `mat-caption` typography, as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`fxLayoutAlign`将应用程序的标语居中，并赋予其一个柔和的`mat-caption`排版，如下所示：
- en: 'Implement the layout changes and caption typography:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现布局更改和标题排版：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Observe the results, as shown:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察结果，如下所示：
- en: '![](img/61aca5fe-b2cc-47e9-b988-0ea5d1d1fe48.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61aca5fe-b2cc-47e9-b988-0ea5d1d1fe48.png)'
- en: LocalCast Weather Centered Tagline
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本地天气中心标语
- en: Updating Current Weather card layout
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新当前天气卡片布局
- en: 'There''s still more work to do to make the UI look like the design, particularly
    the contents of the Current Weather card, which looks like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多工作要做，使UI看起来像设计一样，特别是当前天气卡片的内容，如下所示：
- en: '![](img/73911aa2-c33c-4fba-80da-fe4594b53b64.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73911aa2-c33c-4fba-80da-fe4594b53b64.png)'
- en: To design the layout, we'll leverage Angular Flex.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设计布局，我们将利用Angular Flex。
- en: You'll be editing `current-weather.component.html`, which uses the `<div>` and
    `<span>` tags to establish elements that live on separate lines or on the same
    line, respectively. With the switch over to Angular Flex, we need switch all elements
    to `<div>` and specify rows and columns using `fxLayout`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您将编辑`current-weather.component.html`，它使用`<div>`和`<span>`标签来建立各个元素，这些元素可以分别存在于不同行或同一行。随着切换到Angular
    Flex，我们需要将所有元素转换为`<div>`，并使用`fxLayout`指定行和列。
- en: Implementing Layout Scaffolding
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现布局脚手架
- en: We need to start by implementing the rough scaffolding.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要首先实现粗略的脚手架。
- en: 'Consider the current state of the template:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑模板的当前状态：
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s go through the file step by step and update it:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步步浏览文件并更新：
- en: Update `<span>` elements to `<div>` on lines 3, 4, and 8
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第3、4和8行更新`<span>`元素为`<div>`
- en: Wrap the `<img>` element with a `<div>`
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用`<div>`包裹`<img>`元素
- en: Add the `fxLayout="row"` property to the `<div>` element that has multiple child
    elements on lines 2 and 6
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第2和6行的有多个子元素的`<div>`元素中添加`fxLayout="row"`属性
- en: The City and Country column takes roughly 2/3rds of the screen, so add `fxFlex="66%"`
    to the `<div>` element on line 3
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 城市和国家列大约占据了屏幕的2/3，所以在第3行的`<div>`元素中添加`fxFlex="66%"`
- en: Add `fxFlex` to the next `<div>` element on line 4 to ensure that it takes up
    the rest of the horizontal space
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第4行的下一个`<div>`元素上添加`fxFlex`以确保它占据其余的水平空间
- en: Add `fxFlex="66%"` to the new `<div>` element, surrounding the `<img>` element
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的`<div>`元素（包围`<img>`元素）中添加`fxFlex="66%"`
- en: Add `fxFlex` to the next `<div>` element on line 4
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第4行的下一个`<div>`元素中添加`fxFlex`
- en: 'The final state of the template should look like this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 模板的最终状态应该如下所示：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can be more verbose in adding Angular Flex attributes; however, the more
    code you write, the more you'll need to maintain, making future changes more difficult.
    For example, the `<div>` element on line 12 doesn't need `fxLayout="row"`, since
    a `<div>` implicitly gets a new line. Similarly, on line 4 and line 7, the right-hand
    side column doesn't need an explicit `fxFlex` attribute, since it'll automatically
    be squeezed by the left-hand side element.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加Angular Flex属性时，你可以更详细一些；但是，你写的代码越多，未来的改动就会变得更加困难。例如，在第12行的`<div>`元素不需要`fxLayout="row"`，因为`<div>`会隐式换行。同样，在第4行和第7行，右侧的列不需要显式的`fxFlex`属性，因为它将自动被左侧元素压缩。
- en: 'From a grid placement perspective, all your elements are now in the correct *cell,* as
    shown:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 从网格布局的角度来看，你的元素现在都在正确的*单元格*中，如图所示：
- en: '![](img/4e654723-bc0e-46b4-84ee-58aea4c84fe9.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e654723-bc0e-46b4-84ee-58aea4c84fe9.png)'
- en: LocalCast Weather with layout scaffolding
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 使用布局脚手架的本地天气
- en: Aligning elements
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对齐元素
- en: 'Now, we need to align and style each individual cell to match the design. The
    date and temperature needs to be right aligned and the description centered:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要对齐和设计每个单独的单元格以匹配设计。日期和温度需要右对齐，描述需要居中：
- en: 'To right align the date and temperature, create a new css class named `.right`
    in `current-weather.component.css`:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要右对齐日期和温度，在`current-weather.component.css`中创建一个名为`.right`的新CSS类：
- en: '[PRE16]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Add `class="right"` to the `<div>` elements on lines 4 and 10
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第4行和第10行的`<div>`元素中添加`class="right"`
- en: Center the `<div>` element for description in the same way you centered the
    app's tagline earlier in the chapter
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以与本章前面居中应用标语相同的方式居中描述的`<div>`元素
- en: 'Observe that the elements are aligned correctly, as follows:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察元素的正确对齐方式如下：
- en: '![](img/7fe6ea79-5fcb-43bf-bea3-be0aa44eb4b8.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7fe6ea79-5fcb-43bf-bea3-be0aa44eb4b8.png)'
- en: LocalCast Weather with correct alignments
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 本地天气与正确的对齐方式
- en: Styling elements
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计元素
- en: 'Finalizing the styling of elements is usually the most time-consuming part
    of frontend development. I recommend doing multiple passes to achieve a close
    enough version of the design with minimal effort first and then have your client
    or team decide whether it''s worth the extra resources to spend more time to polish
    the design:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最终设计元素的调整通常是前端开发中最费时的部分。我建议首先进行多次尝试，以便用最少的工作量获得足够接近设计的版本，然后让你的客户或团队决定是否值得投入额外的资源来花费更多时间来完善设计：
- en: 'Add a new css property:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加新的CSS属性：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: For the city name, on line 3, add `class="mat-title no-margin"`
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于城市名称，在第3行，添加`class="mat-title no-margin"`
- en: For the date, on line 4, add `"mat-subheading-2 no-margin"` to `class="right"`
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于日期，在第4行，将`"mat-subheading-2 no-margin"`添加到`class="right"`中
- en: Change the format of the date from `'fullDate'` to `'EEEE MMM d'` to match the
    design
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将日期的格式从`'fullDate'`改为`'EEEE MMM d'`以匹配设计
- en: 'Modify `<img>,` on line 8 to add `style="zoom: 175%"`'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '修改`<img>`，在第8行添加`style="zoom: 175%"`'
- en: For the temperature, on line 10, append `"mat-display-3 no-margin"`
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于温度，在第10行，附加`"mat-display-3 no-margin"`
- en: For the description, on line 12, add `class="mat-caption"`
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于描述，在第12行，添加`class="mat-caption"`
- en: 'This is the final state of the template:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这是模板的最终状态：
- en: '[PRE18]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Observe that the styled output of your code changes, as illustrated:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察你的代码输出的样式变化，如图所示：
- en: '![](img/fea27c51-414f-4bf1-89c1-8e413c625610.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fea27c51-414f-4bf1-89c1-8e413c625610.png)'
- en: LocalCast Weather with styling
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 带有样式的本地天气
- en: Fine-tuning styles
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微调样式
- en: 'The tagline can benefit from some top and bottom margins. This is common CSS
    that we''re likely to use across the application, so let''s put it in `styles.css`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 标语可以受益于一些上下边距。这是我们可能会在整个应用程序中使用的常见CSS，因此让我们将它放在`styles.css`中：
- en: 'Implement `vertical-margin`:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`vertical-margin`：
- en: '[PRE19]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Apply `vertical-margin`:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用`vertical-margin`：
- en: '[PRE20]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Current Weather has the same style as the City Name; we need to distinguish
    between the two.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当前天气具有与城市名称相同的样式；我们需要区分这两者。
- en: 'In `app.component.ts`, update Current Weather with a `mat-headline` typography:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app.component.ts`中，使用`mat-headline`排版更新当前天气：
- en: '[PRE21]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The image and the temperature aren''t centered, so add `fxLayoutAlign="center
    center"` to the row surrounding those elements on line 6:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图像和温度没有居中，因此在围绕第6行上下文中包含这些元素的行中添加`fxLayoutAlign="center center"`：
- en: '[PRE22]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Observe the final design of your app, which should look like this:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察您的应用程序的最终设计，应该如下所示：
- en: '![](img/b4a8d03d-3a72-42bd-8e7b-76e3588061a8.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4a8d03d-3a72-42bd-8e7b-76e3588061a8.png)'
- en: LocalCast Weather final design
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: LocalCast天气的最终设计
- en: Tweaking to match design
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整以匹配设计
- en: 'This is an area where you may spend a significant amount of time. If we were
    following the 80-20 principal, pixel-perfect tweaks usually end up being the last
    20% that takes 80% of the time to complete. Let''s examine the differences between
    our implementation and the design and what it would take to bridge the gap:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个您可能会花费大量时间的领域。如果我们遵循80-20法则，像素完美的微调通常成为最后的20%，却需要花费80%的时间来完成。让我们来研究我们的实现和设计之间的差异，以及弥合这一差距需要什么：
- en: '![](img/752fe2d4-5f42-4db7-bf34-0f3e84dfd4b4.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/752fe2d4-5f42-4db7-bf34-0f3e84dfd4b4.png)'
- en: 'The date needs further customization. The numeric ordinal *th* is missing;
    to accomplish this, we will need to bring in a third-party library such as moment
    or implement our own solution and bind it next to the date on the template:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 日期需要进一步定制。数字序数*th*丢失了；为了实现这一点，我们需要引入第三方库，比如moment，或者实现我们自己的解决方案并将其绑定到模板上的日期旁边：
- en: 'Update `current.date` to append an ordinal to it:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`current.date`以附加序数：
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Implement a `getOrdinal` function:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个`getOrdinal`函数：
- en: '[PRE24]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note that the implementation of `getOrdinal` boils down to a complicated one-liner
    that isn't very readable and is very difficult to maintain. Such functions, if
    critical to your business logic, should be heavily unit tested.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`getOrdinal`的实现归结为一个复杂的单行代码，不太可读，而且很难维护。这样的函数，如果对您的业务逻辑至关重要，应该进行严格的单元测试。
- en: Angular 6, at the time of writing, doesn't support new line breaks in the date
    template; ideally, we should be able to specify the date format as `'EEEE\nMMM
    d'` to ensure that the line break is always consistent.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前为止，Angular 6不支持在日期模板中插入新的换行；理想情况下，我们应该能够将日期格式指定为`'EEEE\nMMM d'`，以确保换行始终一致。
- en: The temperature implementation needs to separate the digits from the unit with
    a `<span>` element, surrounded with a `<p>`, so the superscript style can be applied
    to the unit, such as `<span class="unit">℉</span>`, where unit is a CSS class
    to make it look like a superscript element.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 温度的实现需要使用`<span>`元素将数字与单位分隔开，并用`<span class="unit">℉</span>`将其包围起来，其中unit是一个CSS类，可以使其看起来像上标元素。
- en: 'Implement a `unit` CSS class:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个`unit`CSS类：
- en: '[PRE25]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Apply `unit`:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用`unit`：
- en: '[PRE26]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We need to experiment with how much of space the forecast image should have,
    by tweaking the `fxFlex` value on line 7\. Otherwise, the temperature overflows
    to the next line and your setting can further be affected by the size of your
    browser window. For example, `60%` works well with a small browser window, but
    when maximized, it forces an overflow. However, `55%` seems to satisfy both conditions:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要尝试调整第7行上的`fxFlex`值来确定预报图像应该占用多少空间。否则，温度将溢出到下一行，并且您的设置还会受到浏览器窗口大小的影响。例如，`60%`在小浏览器窗口下效果很好，但最大化时会造成溢出。然而，`55%`似乎满足了这两个条件：
- en: '![](img/90504375-02fa-479b-b7fe-cd6f267d516f.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/90504375-02fa-479b-b7fe-cd6f267d516f.png)'
- en: LocalCast Weather after tweaks
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 修正后的LocalCast天气
- en: As always, it is possible to further tweak margins and paddings to further customize
    the design. However, each deviation from the library will have maintainability
    consequences down the line. Unless you're truly building a business around displaying
    weather data, you should defer any further optimizations to the end of the project,
    as time permits, and if experience is any guide, you will not be making this optimization.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，进一步调整边距和填充以进一步定制设计是可能的。然而，每一次与库的偏离都会对维护性造成影响。除非您确实在建立一个以显示天气数据为中心的业务，否则您应该将进一步的优化推迟到项目的最后，如果时间允许的话。如果经验能够作为指导，您将不会进行这样的优化。
- en: 'With two negative margin-bottom hacks, you can attain a design fairly close
    to the original, but I will not include those hacks here and leave it as an exercise
    for the reader to discover on the GitHub repository. Such hacks are sometimes
    necessary evils, but in general, they point to a disconnect between design and
    implementation realities. The solution leading up to the tweaks section is the
    sweet spot, where Angular Material thrives:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 通过两个负的margin-bottom hack，您可以获得一个与原始设计相当接近的设计，但是我不会在这里包含这些hack，并留给读者在GitHub仓库中发现。这些hack有时是必要的恶，但一般来说，它们指向设计和实现现实之间的脱节。在调整部分之前的解决方案是甜蜜点，Angular
    Material在那里繁荣：
- en: '![](img/181ade0b-f684-4c00-975c-83d7f4f31da4.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/181ade0b-f684-4c00-975c-83d7f4f31da4.png)'
- en: LocalCast Weather after tweaks and hacks
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 经过调整和hack的LocalCast Weather
- en: Updating unit tests
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新单元测试
- en: 'In order to keep your unit tests running, you will need to import `MaterialModule`
    to any component''s `spec` file that uses Angular material:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持您的单元测试运行，您需要将`MaterialModule`导入到任何使用Angular Material的组件的`spec`文件中：
- en: '[PRE27]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You will also need to update any test, including e2e tests, that search for
    a particular HTML element.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要更新任何测试，包括e2e测试，以查找特定的HTML元素。
- en: 'For example, since the app''s title, LocalCast Weather, is not in an `h1` tag
    anymore, you must update the `spec` file to look for it in a `span` element:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，由于应用程序的标题LocalCast Weather不再在一个`h1`标签中，您必须更新`spec`文件以在`span`元素中查找它：
- en: '[PRE28]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Similarly, in e2e tests, you will need to update your page object function
    to retrieve the text from the correct location:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在e2e测试中，您需要更新您的页面对象函数以从正确的位置检索文本：
- en: '[PRE29]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Updating Angular Material
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新Angular Material
- en: 'You can use `ng update` for a quick and painless upgrade experience, which
    should look like below:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`ng update`来快速无痛升级体验，应该如下所示：
- en: '[PRE30]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In addition, I have discovered the `material-update-tool` published by the
    Angular team at [https://github.com/angular/material-update-tool](https://github.com/angular/material-update-tool).
    In its current form this tool is advertised as a specific Angular Material 5.x
    to 6.0 updater tool, so it may perhaps become part of `ng update` like the `rxjs-tslint`
    tool in the future. You may run the tool as shown below:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我发现了由Angular团队在[https://github.com/angular/material-update-tool](https://github.com/angular/material-update-tool)发布的`material-update-tool`。在当前形式下，该工具被宣传为一个特定的Angular
    Material 5.x到6.0的更新工具，因此它可能会成为未来`ng update`的一部分，就像`rxjs-tslint`工具一样。您可以按照下面的命令来运行该工具：
- en: '[PRE31]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: If you're lucky and everything goes well, feel free to skip the rest of this
    section. For the rest of the section I will go over a specific scenario involving
    release candidates and beta versions that I ran into during the development of
    this example, which highlights the need for a manual update. First, we will establish
    awareness of the current versions, then discover latest available versions, and,
    finally, update and test the upgrade, like we did while updating Angular manually.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果幸运的话，一切顺利，可以随意跳过本节剩下的内容。本节的其余部分我将介绍我在开发本示例过程中遇到的一个涉及发布候选版本和beta版本的特定情景，这突显了手动更新的需求。首先，我们将意识到当前版本，然后发现最新可用版本，并最后升级和测试升级，就像我们手动更新Angular时那样。
- en: Updating Angular Material
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新Angular Material
- en: 'Now that we know what version to upgrade to, let''s go ahead and do it:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道要升级到哪个版本，让我们继续进行升级：
- en: 'Execute the following command to update Material and its related components
    to their target versions:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令，将Material及其相关组件更新到目标版本：
- en: '[PRE32]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Verify your `package.json` to ensure that the versions match the expected version
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证您的`package.json`，确保版本与预期版本匹配
- en: Address any NPM Warnings
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理任何NPM警告
- en: In this specific instance, we receive impossible-to-meet peer dependency warnings
    from the `@angular/flex-layout` package. Further investigation on GitHub ([https://github.com/angular/flex-layout/issues/508](https://github.com/angular/flex-layout/issues/508))
    reveals that this is a known issue and in general to be expected from a Beta or
    RC package. This means it is safe to ignore these warnings.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种特定情况下，我们从`@angular/flex-layout`包收到了无法满足的对等依赖警告。在GitHub上的进一步调查([https://github.com/angular/flex-layout/issues/508](https://github.com/angular/flex-layout/issues/508))显示，这是一个已知问题，通常可以预期从Beta或RC包中出现。这意味着可以忽略这些警告是安全的。
- en: Summary
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned to apply specific Angular Material components to
    your application. You became aware of the pitfalls of overly-optimizing UI design.
    We also went over how you can keep Angular Material up-to-date.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了将特定的 Angular Material 组件应用到你的应用程序中。你意识到了过度优化 UI 设计的陷阱。我们还讨论了如何保持 Angular
    Material 的最新状态。
- en: In the next chapter, we will update the weather app to respond to user input
    with reactive forms and keep our components decoupled, while also enabling data
    exchange between them using `BehaviorSubject`. After the next chapter, we will
    be done with the weather app and shift our focus on building larger, line-of-business
    applications.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更新天气应用程序，以响应用户输入并使用响应式表单来保持我们的组件解耦，同时还可以使用`BehaviorSubject`在它们之间进行数据交换。在下一章之后，我们将完成天气应用程序，并把重点转向构建更大型的业务线应用。
