- en: Working with Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用组件
- en: 'In this chapter, we will discuss different techniques and strategies for working
    with Angular components:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论使用Angular组件的不同技术和策略：
- en: Initializing and configuring components
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化和配置组件
- en: Building with components
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建组件
- en: Component life cycle
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件生命周期
- en: Sharing data and communicating between components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据共享和组件间通信
- en: The chapter assumes that the reader has knowledge of JavaScript and TypeScript
    programming fundamentals and web development in general, and is familiar with
    the contents of [Chapter 1](ce100032-6082-4f73-94af-b50a56f63334.xhtml)*,* *Architectural
    Overview and Building a Simple App in Angular*, from this book. All the examples
    from this chapter use TypeScript and can also be found on GitHub, at [https://github.com/popalexandruvasile/mastering-angular2/tree/master/Chapter4](https://github.com/popalexandruvasile/mastering-angular2/tree/master/Chapter4).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章假设读者具有JavaScript和TypeScript编程基础以及网页开发的知识，并熟悉本书中的[第1章](ce100032-6082-4f73-94af-b50a56f63334.xhtml)*，*
    *Angular中的架构概述和构建简单应用*的内容。本章中的所有示例都使用TypeScript，并且也可以在GitHub上找到，网址为[https://github.com/popalexandruvasile/mastering-angular2/tree/master/Chapter4](https://github.com/popalexandruvasile/mastering-angular2/tree/master/Chapter4)。
- en: A telling sign of a successful open source project is excellent documentation,
    and Angular is no exception to this rule. I strongly recommend reading through
    all the available documentation from [https://angular.io/](https://angular.io/)
    and following the examples available there as well. As a general rule, all the
    examples from this chapter follow the format and conventions from the official
    documentation, and I have used a simplified version of the Angular example seed
    from [https://github.com/angular/quickstart](https://github.com/angular/quickstart)
    as an example. If you want to experiment or play with your own Angular creations,
    you can use the contents of the `Example1` folder from the code for this chapter
    as a starting point.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个成功的开源项目的一个明显标志是出色的文档，Angular也不例外。我强烈建议阅读来自[https://angular.io/](https://angular.io/)的所有可用文档，并在那里跟随可用的示例。作为一个一般规则，本章中的所有示例都遵循官方文档的格式和约定，我使用了来自[https://github.com/angular/quickstart](https://github.com/angular/quickstart)的Angular示例种子的简化版本作为示例。如果你想要尝试或玩自己的Angular创作，你可以使用本章代码中`Example1`文件夹的内容作为起点。
- en: Components 101
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件101
- en: Components are the building blocks of Angular applications, and any such application
    needs at least one component called the root component to be defined before it
    can be executed.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 组件是Angular应用程序的构建块，任何这样的应用程序在执行之前都需要至少定义一个称为根组件的组件。
- en: A basic root component
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本根组件
- en: 'A component is defined in Angular as a class with specific metadata that associates
    it with an HTML template and a jQuery-like HTML DOM selector:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular中，组件被定义为一个具有特定元数据的类，将其与HTML模板和类似于jQuery的HTML DOM选择器相关联：
- en: The component template can be bound to any properties or functions that belong
    to the component class
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件模板可以绑定到属于组件类的任何属性或函数
- en: The component selector (similar to a jQuery selector) can target an element
    tag, attribute, or style class that defines the component insertion point
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件选择器（类似于jQuery选择器）可以针对定义组件插入点的元素标签、属性或样式类进行定位。
- en: When executed within an Angular application, a component will usually render
    an HTML snippet in a specific page location that can react to user input and display
    dynamic data.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular应用程序中执行时，组件通常会在特定页面位置呈现HTML片段，可以对用户输入做出反应并显示动态数据。
- en: The component metadata is expressed as a TypeScript decorator and supports additional
    configuration that will be covered throughout the examples from this chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 组件元数据表示为TypeScript装饰器，并支持本章中示例中将介绍的其他配置。
- en: '`TypeScript` decorators are covered in [Chapter 1](ce100032-6082-4f73-94af-b50a56f63334.xhtml),
    *Architectural Overview and Building a Simple App in Angular*. They are essential
    for understanding how components are configured, and they are currently proposed
    to become part of the JavaScript specification (ECMAScript).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`TypeScript`装饰器在[第1章](ce100032-6082-4f73-94af-b50a56f63334.xhtml)中有介绍，*Angular中的架构概述和构建简单应用程序*。它们对于理解组件如何配置至关重要，并且目前已经提议成为JavaScript规范（ECMAScript）的一部分。'
- en: 'The first example from this chapter is for a basic component that is also a
    root component (of which any Angular app needs at least one to initialize its
    component tree):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第一个示例是一个基本组件，也是一个根组件（任何Angular应用程序都至少需要一个根组件来初始化其组件树）：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The component template relies on the Bootstrap frontend design framework ([http://getbootstrap.com/](http://getbootstrap.com/))
    for styling, and is bound to the properties of the component class to retrieve
    some of its displayed text. It contains template expressions that interpolate
    data from the properties of the component class, such as `{{title}}`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 组件模板依赖于Bootstrap前端设计框架（[http://getbootstrap.com/](http://getbootstrap.com/)）进行样式设置，并且绑定到组件类的属性以检索一些显示的文本。它包含模板表达式，用于从组件类的属性中插值数据，例如`{{title}}`。
- en: 'The root component uses an inline template (the template content resides in
    the same file with its component) and an element selector that will render the
    component template within the `index.html` page, replacing the highlighted text:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 根组件使用内联模板（模板内容与其组件在同一文件中）和一个元素选择器，该选择器将在`index.html`页面中呈现组件模板，替换高亮文本：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To view the example in action, you can run the following command line in the
    `Example1` folder from the source code for this chapter:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看示例的实际效果，您可以在本章的源代码中的`Example1`文件夹中运行以下命令行：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can view the rendered component in the next screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在下一个截图中查看呈现的组件：
- en: '![](assets/e1ce556c-854b-418a-9502-1e09dfb8f98b.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e1ce556c-854b-418a-9502-1e09dfb8f98b.png)'
- en: 'An Angular application needs at least one root module, and in the `main.ts`
    file, we are bootstrapping this module for our example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Angular应用程序至少需要一个根模块，在`main.ts`文件中，我们正在为我们的示例引导这个模块：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We used the `app.module.ts` module file to define the application root module:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`app.module.ts`模块文件来定义应用程序的根模块：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: A module can import other modules using the `imports` property, and a module
    can have one or more root components defined under the `bootstrap` property. Each
    such root component will initialize its own component tree, which in our example
    consists of only one component. Any component, directive, or pipe needs to be
    added in the `declarations` property before being used in the module.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 模块可以使用`imports`属性导入其他模块，并且模块可以在`bootstrap`属性下定义一个或多个根组件。在我们的示例中，每个这样的根组件都将初始化其自己的组件树，该组件树仅包含一个组件。在模块中使用任何组件、指令或管道之前，都需要将其添加到`declarations`属性中。
- en: Defining child components
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义子组件
- en: While a root component represents the container for an Angular app, you will
    also need other components that are direct or indirect descendants of a root component.
    When a root component is rendered, it will also render all its children components.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然根组件代表Angular应用程序的容器，但您还需要其他直接或间接是根组件后代的组件。当呈现根组件时，它还将呈现其所有子组件。
- en: 'These child components can receive data from their parent component and can
    also send data back. Let''s view some of these concepts at play in a more complex
    example that builds on the previous one. Note that, in the `Example1`, we suggested
    that a child component can be inserted within the root component template; one
    such child component is defined like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些子组件可以从其父组件接收数据，也可以发送数据回去。让我们在一个更复杂的示例中看到这些概念的运作，这个示例是在前一个示例的基础上构建的。请注意，在`Example1`中，我们建议子组件可以插入到根组件模板中；这样的一个子组件定义如下：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first highlighted code snippet shows the component selector using a custom
    element attribute rather than a custom element tag. When working with the existing
    CSS styles and HTML markup, more often than not you need to ensure that your Angular
    components integrate naturally with their contextual look and feel. This is where
    attributes or CSS selectors prove to be really useful.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个突出显示的代码片段显示了组件选择器使用自定义元素属性而不是自定义元素标记。在使用现有的CSS样式和HTML标记时，往往需要确保你的Angular组件与其上下文的外观和感觉自然地集成。这就是属性或CSS选择器真正有用的地方。
- en: At first glance, the component class structure looks somewhat similar to the
    one from `Example1`--with the exception of the two new decorators in the second
    highlighted code snippet. The first decorator is `@Input()`, and it should be
    applied to any component property that can receive data from the parent component.
    The second decorator is `@Output()`, and it should be applied to any property
    that can send data to the parent component. Angular 2 defines an `EventEmitter`
    class that facilitates generating and consuming events using a similar approach
    with Node.js `EventEmitter` or jQuery events. The output event of the `string`
    type is generated in the `onClick()` method, and any parent component can subscribe
    to this event to receive data from the child component.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，组件类结构看起来与`Example1`中的类似--除了第二个突出显示的代码片段中的两个新装饰器。第一个装饰器是`@Input()`，应该应用于可以从父组件接收数据的任何组件属性。第二个装饰器是`@Output()`，应该应用于可以向父组件发送数据的任何属性。Angular
    2定义了一个`EventEmitter`类，它使用类似Node.js `EventEmitter`或jQuery事件的方法来生成和消费事件。`string`类型的输出事件是在`onClick()`方法中生成的，任何父组件都可以订阅这个事件来从子组件接收数据。
- en: The EventEmitter class extends the RxJS Subject class, which in turn is a special
    type of RxJS Observable that allows multicasting. Further details about observables,
    subscribers, and other reactive programming concepts can be found in [Chapter
    7](8eacfd6f-0cc3-49d5-9c85-f823dad66ad6.xhtml), *Asynchronous Programming Using
    Observables*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: EventEmitter类扩展了RxJS Subject类，而RxJS Subject类又是RxJS Observable的一种特殊类型，允许多播。关于可观察对象、订阅者和其他响应式编程概念的更多细节可以在[第7章](8eacfd6f-0cc3-49d5-9c85-f823dad66ad6.xhtml)
    *使用可观察对象进行异步编程*中找到。
- en: 'We took advantage of the `static` class properties in TypeScript to generate
    a unique instance identifier, `instanceId`, that is used in the message sent by
    the child component via the `onChildMessage` output property. We will use this
    message to make it obvious that each child component instance sends a unique message
    to its subscribers, which is the `AppComponent` root component in our example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们利用了TypeScript中的`static`类属性来生成一个唯一的实例标识符`instanceId`，该标识符在子组件通过`onChildMessage`输出属性发送的消息中使用。我们将使用这条消息来明显地表明每个子组件实例向其订阅者发送一个唯一的消息，这在我们的示例中是`AppComponent`根组件。
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The highlighted code shows how the root component is referencing and binding
    the `ChildComponent` elements. The `onChildMessage` output property is bound to
    an `AppComponent` method using the same parenthesis notation that Angular 2 uses
    to bind native HTML DOM events; for example, `<button (click)="onClick($event)">`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 突出显示的代码显示了根组件如何引用和绑定`ChildComponent`元素。`onChildMessage`输出属性绑定到`AppComponent`方法，使用与Angular
    2用于绑定原生HTML DOM事件相同的括号表示法；例如，`<button (click)="onClick($event)">`。
- en: The input property is simply assigned to a static value for the first `ChildComponent`
    instance and is bound via the bracket notation to the `AppComponentsecondComponentText`
    property. The bracket notation is not required when we are simply assigning fixed
    values, and it is also used by Angular 2 when binding to native HTML element properties;
    for example, `<input type="text" [value]="myValue">`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 输入属性只是为第一个`ChildComponent`实例分配了一个静态值，并通过括号表示法绑定到`AppComponentsecondComponentText`属性。当我们仅分配固定值时，不需要使用括号表示法，Angular
    2在绑定到原生HTML元素属性时也会使用它；例如，`<input type="text" [value]="myValue">`。
- en: If you are not yet familiar with how Angular binds to a native HTML element
    properties and events, you can refer to [Chapter 6](a3ceef84-7c5a-4a37-9bd6-a401096f958e.xhtml),
    *Creating Directives and Implementing Change Detection*, for further reference.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还不熟悉Angular如何绑定到原生HTML元素属性和事件，您可以参考[第6章](a3ceef84-7c5a-4a37-9bd6-a401096f958e.xhtml)，*创建指令和实现变更检测*，以供进一步参考。
- en: For both the `ChildComponent` instances, we used the same `AppComponentonChildMessageReceived`
    method to bind to the `onChildMessage` event using a simple event handling approach
    that will display the last child component message on the application page. The
    root component selector was changed to use an element tag and CSS class selector,
    and this approach leads to a simpler structured `index.html` file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于两个`ChildComponent`实例，我们使用相同的`AppComponentonChildMessageReceived`方法，使用简单的事件处理方法绑定到`onChildMessage`事件，这将在应用程序页面上显示最后一个子组件消息。根组件选择器被更改为使用元素标签和CSS类选择器，这种方法导致`index.html`文件结构更简单。
- en: 'We had to modify the `AppModule` definition to ensure that `ChildComponent`
    can be referenced by `AppComponent` and any other component from the same module:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须修改`AppModule`的定义，以确保`ChildComponent`可以被`AppComponent`和同一模块中的任何其他组件引用：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can find this example in the `Example2` folder from the code for this chapter.
    The concepts covered here, such as component properties and events, component
    data flow, and component composition, can go a long way in building a relatively
    complex application, and we will explore them further throughout this chapter.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本章的代码中的`Example2`文件夹中找到此示例。本文涵盖的概念，如组件属性和事件、组件数据流和组件组合，在构建相对复杂的应用程序方面可以发挥重要作用，我们将在本章中进一步探讨它们。
- en: Alongside components, Angular has the concept of directives, which can also
    be found in Angular 1\. Each Angular component is also a directive, and we can
    roughly define a directive as a component without any template. The `@Component`
    decorator interface extends the `@Directive` decorator interface, and we will
    discuss more about directives in [Chapter 6](a3ceef84-7c5a-4a37-9bd6-a401096f958e.xhtml),
    *Creating Directives and Implementing Change Detection*.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除了组件，Angular还有指令的概念，这在Angular 1中也可以找到。每个Angular组件也是一个指令，我们可以粗略地将指令定义为没有任何模板的组件。`@Component`装饰器接口扩展了`@Directive`装饰器接口，我们将在[第6章](a3ceef84-7c5a-4a37-9bd6-a401096f958e.xhtml)中更多地讨论指令，*创建指令和实现变更检测*。
- en: Component life cycle
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件生命周期
- en: 'Each component rendered by Angular has its own life cycle: it is initialized,
    checked for changes, and destroyed (among other events). Angular provides a `hook`
    method, where we can insert application code to participate in the component life
    cycle. These methods are available through TypeScript function interfaces that
    can be optionally implemented by the component class, and they are as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Angular渲染的每个组件都有自己的生命周期：初始化、检查变化和销毁（以及其他事件）。Angular提供了一个`hook`方法，我们可以在其中插入应用代码以参与组件生命周期。这些方法通过TypeScript函数接口提供，可以选择性地由组件类实现，它们如下：
- en: '`ngOnChanges`: This is called once data-bound component properties get initialized
    before `ngOnInit` and each time data-bound component properties are changed. It
    is also part of the directive life cycle (the convention is that the interface
    implementation function name has the `ng` prefix added to the interface name;
    for example, `ngOnInit` and `OnInit`).'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngOnChanges`：在数据绑定的组件属性在`ngOnInit`之前初始化一次，并且每次数据绑定的组件属性发生变化时都会被调用。它也是指令生命周期的一部分（约定是接口实现函数名加上`ng`前缀，例如`ngOnInit`和`OnInit`）。'
- en: '`ngOnInit`: This is called once after the first `ngOnChanges` and when data-bound
    component properties and input properties are all initialized. It is also part
    of the directive life cycle.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngOnInit`：在第一次`ngOnChanges`之后调用一次，当数据绑定的组件属性和输入属性都被初始化时调用。它也是指令生命周期的一部分。'
- en: '`ngDoCheck`: This is called as part of the Angular change detection process
    and should be used to execute custom change detection logic. It is also part of
    the directive life cycle.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngDoCheck`：作为Angular变化检测过程的一部分被调用，应用于执行自定义变化检测逻辑。它也是指令生命周期的一部分。'
- en: '`ngAfterContentInit`: This is called once after the first call to `ngDoCheck`,
    and when the component template is fully initialized.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngAfterContentInit`：在第一次调用`ngDoCheck`之后调用一次，当组件模板完全初始化时调用。'
- en: '`ngAfterContentChecked`: This is called once after `ngAfterContentInit` and
    after every `ngDoCheck` call, when the component contents are verified.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngAfterContentChecked`：在`ngAfterContentInit`之后和每次`ngDoCheck`调用后都会被调用，用于验证组件内容。'
- en: '`ngAfterViewInit`: This is called once after the first `ngAfterContentChecked`
    and when all the component views and their children views are initialized.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngAfterViewInit`：在第一次`ngAfterContentChecked`之后调用一次，当所有组件视图及其子视图都被初始化时调用。'
- en: '`ngAfterViewChecked`: This is called once after `ngAfterViewInit` and after
    every `ngAfterContentChecked` call, when all the component views and their children
    views are verified.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngAfterViewChecked`：在`ngAfterViewInit`之后和每次`ngAfterContentChecked`调用后都会被调用，用于验证所有组件视图及其子视图。'
- en: '`ngOnDestroy`: This is called when the component is about to be destroyed and
    should be used for cleanup operations; for example, unsubscribing from observables
    and detaching from events.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngOnDestroy`：当组件即将被销毁时调用，应用于清理操作；例如，取消订阅可观察对象和分离事件。'
- en: 'We will adapt our earlier example to showcase some of these life cycle `hooks`,
    and we will use a parent and a child component that either displays or logs all
    their life cycle events to the console. The events triggered until a component
    is fully loaded are displayed/logged distinctly from the events that occur after
    the initial load, as per the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将调整我们之前的示例来展示一些这些生命周期`hook`，并且我们将使用一个父组件和一个子组件，它们要么显示要么记录所有它们的生命周期事件到控制台。直到组件完全加载的事件触发将被清晰地显示/记录，如下截图所示：
- en: '![](assets/2c60a3af-bf42-4fdb-bbba-b934b037a198.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2c60a3af-bf42-4fdb-bbba-b934b037a198.png)'
- en: 'The code for the parent component is pretty similar to the code for the child
    component, and the child component has a button that sends a message to the parent
    component on demand. When a message is sent, both the `child` component and the
    parent component respond to life cycle events that are generated by the change
    detection mechanism from Angular. You can see the code for the child component
    in the `child.component.ts` file found in the `Example3` folder from the source
    code for this chapter:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 父组件的代码与子组件的代码非常相似，子组件有一个按钮，可以根据需要向父组件发送消息。当发送消息时，`child`组件和父组件都会响应由Angular的变更检测机制生成的生命周期事件。您可以在本章的源代码中的`Example3`文件夹中找到`child.component.ts`文件中的子组件代码。
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'All the methods starting with `ng` are component life cycle hooks and when
    triggered, most of them log events that are stored in the component and displayed
    via data binding (see the highlighted code snippets from the previous code listing).
    Two of the life cycle hooks--`ngAfterViewInit` and `ngAfterViewChecked`--log events
    to the console instead of storing them as component data because any change in
    the component state at that point in the component life cycle will generate an
    exception in the Angular application. For example, let''s change the `ngAfterViewInit`
    method body with the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以`ng`开头的所有方法都是组件生命周期钩子，当触发时，大多数方法都会记录存储在组件中并通过数据绑定显示的事件（请参阅上一个代码清单中的突出显示的代码片段）。生命周期钩子中的两个--`ngAfterViewInit`和`ngAfterViewChecked`--会将事件记录到控制台，而不是将其存储为组件数据，因为在组件生命周期的那一点上组件状态的任何更改都会在Angular应用程序中生成异常。例如，让我们将`ngAfterViewInit`方法体更改为以下内容：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you look at the application page browser console, you should see this error
    message after making the change:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看应用程序页面浏览器控制台，在进行更改后，您应该会看到此错误消息：
- en: Expression has changed after it was checked.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 表达在检查后已经改变。
- en: On the initial run of the example, the `ngDoCheck` and `ngAfterContentChecked`
    methods (and `ngAfterViewChecked` if you look at the browser console output) were
    triggered twice already for each component before any user interaction. Also,
    each time we press the example button, the same three methods get triggered, once
    for each component. In practice, you may rarely use these life cycle hooks apart
    from `ngOnChanges`, `ngOnInit`, and `ngAfterViewInit` unless you are writing more
    advanced components or a library of components. We will revisit these core life
    cycle hooks in [Chapter 6](a3ceef84-7c5a-4a37-9bd6-a401096f958e.xhtml), *Creating
    Directives and Implementing Change Detection*, as they are really useful in the
    context of forms and other interactive components.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例的初始运行中，`ngDoCheck`和`ngAfterContentChecked`方法（如果查看浏览器控制台输出，则还有`ngAfterViewChecked`）在任何用户交互之前已经为每个组件触发了两次。此外，每次按下示例按钮时，相同的三种方法都会被触发，每个组件一次。在实践中，除了编写更高级的组件或组件库之外，您可能很少使用这些生命周期钩子，除了`ngOnChanges`，`ngOnInit`和`ngAfterViewInit`。我们将在[第6章](a3ceef84-7c5a-4a37-9bd6-a401096f958e.xhtml)中重新讨论这些核心生命周期钩子，*创建指令和实现变更检测*，因为它们在表单和其他交互式组件的上下文中非常有用。
- en: Communicating and sharing data between components
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在组件之间进行通信和共享数据
- en: 'We already used the simplest way to communicate and share data between components:
    the `Input` and `Output` decorators. Properties decorated with the `Input` decorator
    initialize a component by passing through data, and the `Output` decorator can
    be used to assign event listeners that will receive data out of the component.
    This approach can be observed with the components found in the `Example2` folder
    from the source code for this chapter.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用了最简单的方法来在组件之间通信和共享数据：`Input`和`Output`装饰器。使用`Input`装饰器装饰的属性通过传递数据来初始化组件，而`Output`装饰器可以用于分配事件监听器，以接收组件外部的数据。这种方法可以在本章源代码中的`Example2`文件夹中找到的组件中观察到。
- en: Referencing child components from a parent component
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从父组件引用子组件
- en: 'We can bypass the declarative binding to component properties and events using
    a template reference variable or by injecting the target component into the parent
    component via the `ViewChild` and `ViewChildren` property decorators. In both
    the scenarios, we get a reference to the target component and can assign its properties
    or invoke its methods programmatically. To demonstrate these capabilities in action,
    we will slightly alter the `ChildComponent` class from `Example2` and ensure that
    the `myText` property has a default text set. This can be seen in the highlighted
    code snippet within the `child.component.ts` file found in the `Example4` folder
    from the source code for this chapter:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过模板引用变量或通过使用`ViewChild`和`ViewChildren`属性装饰器将目标组件注入到父组件中，来绕过声明性绑定到组件属性和事件。在这两种情况下，我们都可以获得对目标组件的引用，并且可以以编程方式分配其属性或调用其方法。为了演示这些功能的实际应用，我们将稍微修改`Example2`中的`ChildComponent`类，并确保`myText`属性具有默认文本设置。这可以在本章源代码中的`Example4`文件夹中找到的`child.component.ts`文件中的突出显示的代码片段中看到。
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will then change the `app.component.ts` file to include the template reference
    approach for the first child component and the component injection approach for
    the second child component:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将更改`app.component.ts`文件，以包括模板引用方法来处理第一个子组件和组件注入方法来处理第二个子组件：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: First of all, the two child components from the third highlighted HTML snippet
    don't have any properties or event bindings. The first child component has a `#firstChildComponent`
    attribute, which represents a template reference variable.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，第三个突出显示的HTML片段中的两个子组件没有任何属性或事件绑定。第一个子组件有一个`#firstChildComponent`属性，它代表一个模板引用变量。
- en: Template reference variables
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板引用变量
- en: A template reference variable can be set in an Angular template against any
    component, directive, or DOM element and will make the reference available to
    the current template. In the first highlighted HTML snippet from the preceding
    example, we have two buttons that are using inline Angular expressions to set
    the `myText` property and bind to the `onChildMessage` event via the `firstChildComponent`
    template reference variable. When running the example, if we click on the Set
    first child component text button and then the Set first child component message
    output button, we will manipulate the first child component directly through the
    template reference variable, as seen in the first highlighted HTML snippet from
    the earlier example. This approach is suitable for initializing and reading component
    properties, but it proves to be cumbersome when we need to bind to component events.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 模板引用变量可以在Angular模板中针对任何组件、指令或DOM元素进行设置，并且将该引用可用于当前模板。在前面示例中的第一个突出显示的HTML片段中，我们有两个按钮，它们使用内联Angular表达式来设置`myText`属性，并通过`firstChildComponent`模板引用变量绑定到`onChildMessage`事件。运行示例时，如果我们单击“设置第一个子组件文本”按钮，然后单击“设置第一个子组件消息输出”按钮，我们将通过模板引用变量直接操作第一个子组件，就像在之前示例中的第一个突出显示的HTML片段中所看到的那样。这种方法适用于初始化和读取组件属性，但在需要绑定到组件事件时，它被证明是繁琐的。
- en: A template reference variable cannot be accessed in a component class; hence,
    the contrived way we have is to bind to the first child component event. However,
    this type of variable will prove very useful when working with forms, and we will
    revisit them in [Chapter 6](a3ceef84-7c5a-4a37-9bd6-a401096f958e.xhtml), *Creating
    Directives and Implementing Change Detection*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 模板引用变量无法在组件类中访问；因此，我们的做法是绑定到第一个子组件事件。然而，在处理表单时，这种类型的变量将非常有用，我们将在[第6章](a3ceef84-7c5a-4a37-9bd6-a401096f958e.xhtml)中重新讨论它们，*创建指令和实现变更检测*。
- en: Injecting child components
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注入子组件
- en: 'For the second child component, we used a technique based on injecting components
    via this property declaration from the `app.component.ts` file:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二个子组件，我们使用了一种基于在`app.component.ts`文件中的属性声明中注入组件的技术：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `ViewChildren` decorator takes a selector for the `ChildComponent` type
    that will identify and collect all the `ChildComponent` instances from the parent
    component template into a specialized list of the `QueryList` type. This list
    allows iterating through the child component instances, and we can get a reference
    for the second child component using the `QueryList.Last()` call in the `AppComponent.
    setSecondChildComponentProperties()` method. When running the code found in the
    `Example4` folder for the source code for this chapter, the second HTML snippet
    from the previous code listing will spring into action if you click on the Set
    second child component properties button.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`ViewChildren`装饰器采用了`ChildComponent`类型的选择器，该选择器将从父组件模板中识别和收集所有`ChildComponent`实例，并将其放入`QueryList`类型的专门列表中。这个列表允许迭代子组件实例，我们可以在`AppComponent.setSecondChildComponentProperties()`方法中使用`QueryList.Last()`调用来获取第二个子组件的引用。当运行本章源代码中`Example4`文件夹中找到的代码时，如果单击“设置第二个子组件属性”按钮，前一个代码清单中的第二个HTML片段将开始运行。'
- en: Injecting child components is a versatile technique, and we can access the referenced
    components from the parent component code in a more efficient manner.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注入子组件是一种多才多艺的技术，我们可以以更高效的方式从父组件代码中访问引用的组件。
- en: Using services with components
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用服务与组件
- en: We will now evolve `Example2` once again and refactor some of the code that
    was defined at the component level into an Angular service.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将再次演变`Example2`，并将一些在组件级别定义的代码重构为Angular服务。
- en: A service is a TypeScript class that has a decorator called `Injectable` without
    any parameters that allows the service to be part of the dependency injection
    (DI) mechanism in Angular 2\. DI will ensure that a service instance will be created
    only once per application, and this instance will be injected in any class that
    declares it as a dependency in their constructor declarations. Apart from the
    specific decorator, a service needs to be declared as a provider usually in a
    module definition, but it can also be declared in component, directive, or pipe
    definitions. Before jumping into our example for this section, you can find more
    information about services in [Chapter 12](998d521f-cf30-4688-9763-12878fcd23e9.xhtml),
    *Implementing Angular Services*.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 服务是一个TypeScript类，它有一个名为`Injectable`的装饰器，没有任何参数，允许服务成为Angular 2中依赖注入（DI）机制的一部分。DI将确保每个应用程序只创建一个服务实例，并且该实例将被注入到任何声明它为依赖项的类的构造函数声明中。除了特定的装饰器之外，服务通常需要在模块定义中声明为提供者，但也可以在组件、指令或管道定义中声明。在跳转到本节的示例之前，您可以在[第12章](998d521f-cf30-4688-9763-12878fcd23e9.xhtml)中找到有关服务的更多信息，*实现Angular服务*。
- en: Even if a service does not have other dependencies, it is a good practice to
    ensure that it is decorated with Injectable in case it has dependencies in the
    future and to simplify its usage when used as a dependency.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 即使一个服务没有其他依赖，也最好确保它被装饰为可注入的，以防将来有依赖，并简化其在作为依赖项时的使用。
- en: 'For our example, we will build upon the `Example2` code into a new example
    found in the `Example4` folder from the source code for this chapter. We will
    start by extracting most of the logic for the parent and `child` component into
    a new service class:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将在`Example2`代码的基础上构建一个新示例，该示例可以在本章的源代码中的`Example4`文件夹中找到。我们将首先将父组件和`child`组件的大部分逻辑提取到一个新的服务类中：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The service stores the description used by the child components in the `componentDescriptions`
    array and provides a message handler through the `sendMessage()` method that also
    stores any processed message in the `AppService.componentMessages` property. The
    child component `onChildMessage` property of the `EventEmitter` type from `Example2`
    is now moved to `AppService.appServiceMessage$`, and it is available to any component
    or service that requires it. The `child` component definition is now greatly simplified:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务将用于存储`componentDescriptions`数组中由子组件使用的描述，并通过`sendMessage()`方法提供消息处理程序，该方法还将任何处理过的消息存储在`AppService.componentMessages`属性中。`Example2`中`child`组件的`onChildMessage`属性现在移动到`AppService.appServiceMessage$`，并且可以供任何需要它的组件或服务使用。`child`组件的定义现在大大简化了。
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`Child` component messages are now sent via the `AppService`. `sendMessage()`
    method. Also, the only `@Input()` property, called `index`, stores the component
    index used to set the `myText` property via the `AppService.getComponentDescription()`
    method. Apart from the `index` property, the `ChildComponent` class relies solely
    on `AppService` to read and write data.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`Child`组件的消息现在通过`AppService`的`sendMessage()`方法发送。此外，唯一的`@Input()`属性称为`index`，它存储了用于通过`AppService.getComponentDescription()`方法设置`myText`属性的组件索引。除了`index`属性之外，`ChildComponent`类完全依赖于`AppService`来读取和写入数据。'
- en: 'The `AppComponent` class now has very little logic and although it displays
    all the messages provided by the `AppService` instance, it also registers a custom
    subscription in the `ngOnInit` method that stores the last received message. The
    `AppService.appServiceMessage$` property of the `EventEmitter` type provides a
    public subscription for any other Angular classes interested in consuming this
    event:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`AppComponent`类现在几乎没有逻辑，虽然它显示了`AppService`实例提供的所有消息，但它还在`ngOnInit`方法中注册了一个自定义订阅，用于存储最后接收到的消息。`AppService.appServiceMessage$`属性是`EventEmitter`类型，为任何对消费此事件感兴趣的其他Angular类提供了一个公共订阅：'
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this example, we started with a `ChildComponent` class that relied on the
    `@Input()` properties to get the data it needs; we switched to a class that needs
    just a key value to get its data from a service class. The two styles of writing
    components don't exclude each other, and using a service provides further support
    for writing modular components.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们从一个依赖`@Input()`属性来获取所需数据的`ChildComponent`类开始；我们转而使用一个只需要一个键值来从服务类获取数据的类。编写组件的两种风格并不互斥，使用服务可以进一步支持编写模块化组件。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we first looked at a basic component example and then we explored
    parent and child components. An exposure to the component's life cycle was followed
    by examples of how to communicate and share data between components.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先看了一个基本的组件示例，然后探讨了父子组件。对组件生命周期的了解之后，我们举例说明了如何在组件之间进行通信和共享数据。
