["```js\nnpx degit reduxjs/redux-templates/packages/vite-template-redux onestop-electronics\n```", "```js\nnpm install --save react-router-dom\nnpm install --save react-intl\n```", "```js\nnpm install --save styled-components\nnpm install --save-dev @types/styled-components\n```", "```js\nnpm install --save firebase\n```", "```js\n    rules_version = '2';\n    service cloud.firestore {\n      match /databases/{database}/documents {\n        match /{document=**} {\n          allow read, write: if true;\n        }\n      }\n    }\n    ```", "```js\nVITE_FIREBASE_API_KEY = \"yourfirebaseapikey\"\nVITE_FIREBASE_AUTH_DOMAIN = \"yourfirebaseauthdomain\"\nVITE_FIREBASE_PROJECT_ID = \"yourfirebaseprojectid\"\nVITE_FIREBASE_STORAGE_BUCKET = \"yourfirebasestoragebucket\"\nVITE_FIREBASE_MESSAGING_SENDER_ID =\n  \"yourfirebasemessagingsenderid\"\nVITE_FIREBASE_APP_ID = \"yourfirebaseappid\"\n```", "```js\nimport { initializeApp } from \"firebase/app\"\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: import.meta.env.\n    VITE_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: import.meta.env.\n    VITE_FIREBASE_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n}\nexport const firebaseApp = initializeApp(firebaseConfig)\n```", "```js\nimport { firebaseApp } from \"@/backend/firebase/config\"\nimport {\n  signInWithEmailAndPassword,\n  signInWithPopup,\n  signInWithRedirect,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n  updateProfile,\n  signOut,\n  getAuth,\n  onAuthStateChanged,\n  NextOrObserver,\n  User,\n} from \"firebase/auth\"\nconst auth = getAuth(firebaseApp)\nconst googleProvider = new GoogleAuthProvider()\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\",\n})\n```", "```js\nexport const signInEmailAndPassword = async (\n  email: string,\n  password: string,\n) => {\n  if (!email || !password) return\n  return await signInWithEmailAndPassword(auth,\n    email, password)\n}\nexport const signInGooglePopup = () => signInWithPopup\n  (auth, googleProvider)\nexport const signInGoogleRedirect = () =>\n  signInWithRedirect(auth, googleProvider)\nexport const signUpEmailAndPassword = async (\n  displayName: string,\n  email: string,\n  password: string,\n): Promise<User> => {\n  Const userInfo = await createUserWithEmailAndPassword\n    (auth, email, password)\n  await updateProfile(userInfo.user, { displayName })\n  return userInfo.user\n}\nexport const signOutUser = async () => await signOut(auth)\n```", "```js\nexport const onAuthStateChangedListener =\n  (callback: NextOrObserver<User>) =>\n  onAuthStateChanged(auth, callback)\n```", "```js\nimport {\n  getFirestore,\n  doc,\n  collection,\n  writeBatch,\n  query,\n  getDocs,\n  QueryDocumentSnapshot,\n} from \"firebase/firestore\"\nimport { Product } from \"@/app/store/product/product.types\"\nexport const db = getFirestore()\n```", "```js\nexport const insertProductsData = async <T extends Product>(\n  collectionKey: string,\n  productItems: T[],\n) => {\n  const collectionRef = collection(db, collectionKey)\n  const batch = writeBatch(db)\n  productItems.forEach((product) => {\n    const docRef = doc(collectionRef)\n    batch.set(docRef, product)\n  })\n  await batch.commit()\n}\nexport const fetchProductsData = async () => {\n  const collectionRef = collection(db, \"products\")\n  const queryRef = query(collectionRef)\n  const querySnapshot = await getDocs(queryRef)\n  return querySnapshot.docs.map((docSnapshot) =>\n    docSnapshot.data())\n}\n```", "```js\nexport type Product = {\n  id: number\n  productImageUrl: string\n  name: string\n  brand: string\n  price: number\n  category: string\n}\n//Holds the list of products,product category and boolean flag to indicate loading state\nexport type ProductsState = {\n  products: Product[]\n  category: string\n  isLoading: boolean\n}\nexport type ProductMap = {\n  [key: string]: Product[]\n}\n```", "```js\nimport { createSlice } from \"@reduxjs/toolkit\"\nimport { ProductsState } from \"./product.types\"\nconst INITIAL_STATE: ProductsState = {\n  products: [],\n  category: \"all\",\n  isLoading: true,\n}\nexport const productsSlice = createSlice({\n  name: \"products\",\n  initialState: INITIAL_STATE,\n  reducers: {\n    setProducts(state, action) {\n      state.products = action.payload\n      state.isLoading = false\n    },\n    setCategory(state, action) {\n      state.category = action.payload\n    },\n  },\n})\nexport const { setProducts, setCategory } =\n  productsSlice.actions\nexport const productsReducer = productsSlice.reducer\n```", "```js\nimport { createSelector } from \"reselect\"\nimport { RootState } from \"@/app/store/store\"\nimport { Product, ProductMap, ProductsState }\n  from \"./product.types\"\nconst selectProductReducer = (state: RootState):\n  ProductsState => state.products\nexport const selectProducts = createSelector(\n  [selectProductReducer],\n  (productsSlice) => productsSlice.products,\n)\nexport const selectCategory = createSelector(\n  [selectProductReducer],\n  (productsSlice) => productsSlice.category,\n)\nexport const selectProductsIsLoading = createSelector(\n  [selectProductReducer],\n  (productsSlice) => productsSlice.isLoading,\n)\n```", "```js\nexport const selectProductsMap = createSelector(\n  [selectProducts],\n  (products): ProductMap =>\n    products.reduce(\n      (acc, product) => {\n        const { category } = product\n        acc[category]\n          ? acc[category].push(product)\n          : (acc[category] = [product])\n        acc[\"all\"].push(product)\n        return acc\n      },\n      { all: [] } as ProductMap,\n    ),\n)\n```", "```js\nimport { combineReducers } from \"redux\"\nimport { userReducer } from \"./user/user.slice\"\nimport { productsReducer } from \"./product/product.slice\"\nimport { cartReducer } from \"./cart/cart.slice\"\nexport const rootReducer = combineReducers({\n  user: userReducer,\n  products: productsReducer,\n  cart: cartReducer,\n})\n```", "```js\nimport { configureStore } from \"@reduxjs/toolkit\"\nexport const store = configureStore({\n  reducer: rootReducer,\n})\n```", "```js\nimport styled from \"styled-components\"\nexport const BasicButton = styled.button`\n  min-width: 10rem;\n  width: auto;\n  height: 2.5rem;\n  line-height: 2.5rem;\n  letter-spacing: 0.5px;\n  padding: 0 2rem;\n  background-color: rgb(112, 76, 182);\n  color: white;\n  font-size: 0.7rem;\n  font-family: \"Barlow Condensed\";\n  font-weight: bolder;\n  text-transform: uppercase;\n  border: none;\n  border-radius: 0.2rem;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  &:hover {\n    background-color: white;\n    color: black;\n    border: 1px solid black;\n  }\n`\n```", "```js\nexport const InvertedButton = styled(BasicButton)`\n  background-color: white;\n  color: rgb(112, 76, 182);\n  border: 1px solid black;\n  &:hover {\n    background-color: rgb(112, 76, 182);\n    border: none;\n    border: 1px solid white;\n    color: white;\n  }\n`\nexport const SmallBasicButton = styled(BasicButton)`\n  width: 4rem;\n  height: 1.5rem;\n  min-width: 0rem;\n  padding: 0rem;\n  letter-spacing: 0.1rem;\n  line-height: 2rem;\n  font-size: 0.4rem;\n  align-items: center;\n  letter-spacing: 0rem;\n`\n```", "```js\nimport { FC, ButtonHTMLAttributes } from \"react\"\nimport { BasicButton, InvertedButton, SmallBasicButton }\n  from \"./button.styles\"\nexport enum BUTTON_TYPE_CLASSES {\n  basic = \"basic\",\n  inverted = \"inverted\",\n  small = \"small\",\n}\nconst getButton = (buttonType = BUTTON_TYPE_CLASSES.basic) =>\n  ({\n    [BUTTON_TYPE_CLASSES.basic]: BasicButton,\n    [BUTTON_TYPE_CLASSES.inverted]: InvertedButton,\n    [BUTTON_TYPE_CLASSES.small]: SmallBasicButton,\n  }[buttonType])\nexport type ButtonProps = {\n  buttonType?: BUTTON_TYPE_CLASSES\n} & ButtonHTMLAttributes<HTMLButtonElement>\nconst MyButton: FC<ButtonProps> = ({ children, buttonType,\n  ...otherProps }) => {\n  const CustomButton = getButton(buttonType)\n  return <CustomButton {...otherProps}>\n  {children}</CustomButton>\n}\nexport default MyButton\n```", "```js\nimport styled from \"styled-components\"\ntype ImageBackgroundProps = {\n  $hasWhiteBackgroundImage: boolean\n}\n```", "```js\nexport const ProductContainer = styled.div<ImageBackgroundProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: #f1f1f1;\n  padding: 1rem;\n  border-radius: 0.125rem;\n  img {\n    width: 7rem;\n    height: 5rem;\n    object-fit: fill;\n    background-color: #f1f1f1;\n    transition: 0.5s all ease-in-out;\n    mix-blend-mode: ${(props) =>\n      props.$hasWhiteBackgroundImage ? \"multiply\" :\n        \"normal\"};\n    &:hover {\n      transform: scale(1.1);\n    }\n  }\n  &:hover {\n    img {\n      opacity: 0.8;\n    }\n    button {\n      opacity: 0.85;\n      display: flex;\n    }\n  }\n`\n```", "```js\nexport const Footer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  font-size: 1rem;\n  padding-left: 1rem;\n`\n```", "```js\nexport const Name = styled.h2`\n  font-size: 0.8rem;\n  line-height: 1rem;\n  font-weight: 600;\n  text-transform: capitalize;\n  margin-bottom: 1rem;\n`\nexport const Brand = styled.div`\n  font-size: 0.6rem;\n  line-height: 1rem;\n  color: rgb(75 85 99);\n  margin-bottom: 0.5rem;\n  span {\n    font-weight: 600;\n    text-transform: capitalize;\n  }\n`\nexport const Price = styled.span`\n  font-size: 0.6rem;\n  line-height: 1rem;\n  color: rgb(75 85 99);\n  margin-bottom: 1rem;\n  span {\n    font-weight: 600;\n    text-transform: capitalize;\n    color: rgb(85, 118, 209);\n  }\n`\n```", "```js\nimport { FC } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport { useAppSelector } from \"@/app/store/hooks\"\nimport { selectCurrentUser } from\n  \"@/app/store/user/user.selector\"\nimport MyButton, { BUTTON_TYPE_CLASSES } from\n  \"@/components/button/button\"\nimport { Product } from \"@/app/store/product/product.types\"\nimport { addProductToCart } from\n  \"@/app/store/cart/cart.slice\"\nimport { BRAND_NAMES } from \"@/constants\"\nimport { ProductContainer, Footer, Name, Brand, Price }\n  from \"./product.styles\"\ntype ProductProps = {\n  product: Product\n}\nconst hasWhiteBackground = (brand: string) =>\n  BRAND_NAMES.includes(brand)\n```", "```js\nconst ProductItem: FC<ProductProps> = ({ product }) => {\n  const currentUser = useAppSelector(selectCurrentUser)\n  const { name, price, productImageUrl, brand } = product\n  const dispatch = useDispatch()\n  const addCartProduct = () => dispatch\n    (addProductToCart(product))\n  return (\n   //Markup goes here\n     )\n}\nexport default ProductItem\n```", "```js\n    <ProductContainer $hasWhiteBackgroundImage=\n      {hasWhiteBackground(brand)}>\n      <img src={productImageUrl} alt={`${name}`} />\n      <Footer>\n        <Name>{name}</Name>\n        <Brand>\n          Brand: <span>{brand}</span>\n        </Brand>\n        <Price>\n          Price:{\" \"}\n          <span>\n            ${price}\n          </span>\n        </Price>\n        {currentUser && (\n          <MyButton\n            buttonType={BUTTON_TYPE_CLASSES.small}\n            onClick={addCartProduct} >\n            Add to cart\n          </MyButton>\n        )}\n      </Footer>\n    </ProductContainer>\n```", "```js\nimport { useState, useEffect, Fragment } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport { useAppSelector } from \"@/app/store/hooks\"\nimport ProductItem from \"@/components/product/product\"\nimport MySpinner from \"@/components/spinner/spinner\"\nimport { insertProductsData } from\n  \"@/backend/firebase/api/db-utils\"\nimport { Product } from \"@/app/store/product/product.types\"\nimport {\n  selectProductsMap,\n  selectCategory,\n  selectProductsIsLoading,\n} from \"@/app/store/product/product.selector\"\nimport { Categories } from \"@/components/\n  categories/categories\"\nimport {\n  ProductsContainer,\n  Title,\n  LayoutContainer,\n  LoaderContainer,\n} from \"./products.styles\"\nconst Products = () => {\n     // The component code goes here\n}\nexport default Products\n```", "```js\nconst Products = () => {\n  const productsMap = useAppSelector(selectProductsMap)\n  const category = useAppSelector(selectCategory)\n  const isLoading = useAppSelector(selectProductsIsLoading)\n  const [products, setProducts] = useState\n    (productsMap[category])\n  useEffect(() => {\n    setProducts(productsMap[category])\n  }, [category, productsMap])\n  return (\n    // Markup goes here\n  )\n}\nexport default Products\n```", "```js\n    <Fragment>\n      <LayoutContainer>\n        <Categories></Categories>\n        <ProductsContainer>\n          {isLoading ? (\n            <LoaderContainer>\n              <MySpinner />\n            </LoaderContainer>\n          ) : (\n            products &&\n            products.map((product: Product) => (\n              <ProductItem key={product.id} product=\n                {product} />\n            ))\n          )}\n        </ProductsContainer>\n      </LayoutContainer>\n    </Fragment>\n```", "```js\nfunction App() {\n   return(\n     <Fragment>\n      <Header></Header>\n      <div className=\"app-content\">\n        <Routes>\n          <Route path=\"/\" element={<Products></Products>} />\n          <Route path=\"/signin\" element={<SignIn />} />\n          <Route path=\"/signup\" element={<SignUp />} />\n          <Route path=\"/cart\" element={<CartProducts />} />\n        </Routes>\n      </div>\n  <Footer></Footer>\n  </Fragment>\n )\n}\n```", "```js\nimport ENGLISH from \"./translations/en-US.json\"\nimport FRENCH from \"./translations/fr-FR.json\"\nimport GERMAN from \"./translations/de-DE.json\"\nexport const LOCALES = {\n  \"en-US\": ENGLISH,\n  \"fr-FR\": FRENCH,\n  \"de-DE\": GERMAN\n}\n```", "```js\nimport { IntlProvider } from \"react-intl\"\nimport { LOCALES } from \"@/i18n/locale\"\nimport { DEFAULT_LOCALE } from \"@/constants\"\nimport { useAppSelector } from \"./app/store/hooks\"\nimport { selectCurrentLocale } from\n  \"@/app/store/user/user.selector\"\nfunction App() {\n  const userLanguage = useAppSelector(selectCurrentLocale)\n  return (\n    <IntlProvider\n      messages={LOCALES[userLanguage]}\n      locale={userLanguage}\n      defaultLocale={DEFAULT_LOCALE}\n    >\n      // Main layout goes here\n    </IntlProvider>\n  )\n}\n```", "```js\nimport { FormattedMessage, FormattedNumber } from\n  \"react-intl\"\nconst CartProducts = () => {\n   return(\n     <CartContainer>\n      // UI markup goes here\n          <FormattedMessage id=\"cart.total\" />:\n            <FormattedNumber\n              value={cartProductsTotalCost}\n              style=\"currency\"\n              currency=\"USD\"\n            ></FormattedNumber>\n      // UI markup goes here\n   </CartContainer>\n   )\n}\n```", "```js\nimport { useIntl } from \"react-intl\"\nconst categories: Category[] = [\n  { type: \"all\", name: intl.formatMessage({ id: \"categories.all\" }) },\n  { type: \"laptop\", name: intl.formatMessage({ id: \"categories.\n    laptops\" }) },\n  { type: \"phone\", name: intl.formatMessage({ id: \"categories.phones\" \n    }) },\n    { type: \"tab\", name: intl.formatMessage({ id: \"categories.tabs\" }) },\n];\n```", "```js\ndescribe(\"Cart Reducer\", () => {\n  let initialState: CartState = {\n    cartProducts: [\n      {\n        id: 1,\n        productImageUrl: \"someurl.com\",\n        name: \"Inspiron 15\",\n        price: 1200,\n        quantity: 2,\n      },\n    ],\n  }\n});\n```", "```js\n  it(\"Should handle adding or incrementing products\n    quantity inside cart\", () => {\n    const productToAdd: Cart = {\n      id: 1,\n      productImageUrl: \"someurl.com\",\n      name: \"Inspiron 15\",\n      price: 1200,\n      quantity: 1,\n    }\n    const { cartProducts } = cartReducer(\n      initialState,\n      addProductToCart(productToAdd),\n    )\n    expect(cartProducts.length).toEqual(1)\n    expect(cartProducts[0].quantity).toEqual(3)\n  })\n```", "```js\n  it(\"Should handle removing or decreasing products\n    quantity inside cart\", () => {\n    const productToRemove: Cart = {\n      id: 1,\n      productImageUrl: \"someurl.com\",\n      name: \"Inspiron 15\",\n      price: 1200,\n      quantity: 1,\n    }\n    const state = cartReducer(\n      initialState,\n      removeProductFromCart(productToRemove),\n    )\n    expect(state.cartProducts.length).toEqual(1)\n    expect(state.cartProducts[0].quantity).toEqual(1)\n  })\n```", "```js\ngit init\ngit add .\ngit commit -m \"Add one stop electronics\"\ngit branch -M main\ngit remote add origin https://github.com/yourname/one-stop-electronics.git\ngit push -u origin main\n```"]