["```js\nnpm install cypress --save-dev\n```", "```js\nnpx cypress open\n```", "```js\nimport user from '../support/user'\ndescribe('Checkout Flow', () => {\n  it('allows a user to enter address and payment info and place         an order', () => {\n    cy.visit('/')\n```", "```js\n{\n  \"baseUrl\": \"http://localhost:3000\"\n}\n```", "```js\n    cy.get('input[name=\"firstName\"]').type(user.firstName)\n    cy.get('input[name=\"lastName\"]').type(user.lastName)\n    cy.get('input[name=\"address1\"]').type(user.address1)\n    cy.get('input[name=\"city\"]').type(user.city)\n    cy.get('input[name=\"state\"]').type(user.state)\n    cy.get('input[name=\"zipCode\"]').type(user.zipCode)\n    cy.get('input[name=\"country\"]').type(user.country)\n    cy.contains(/next/i).click()\n```", "```js\n    cy.get('input[name=\"cardType\"]').type(user.cardType)\n    cy.get('input[name=\"cardHolder\"]').type(user.cardHolder)\n    cy.get('input[name=\"cardNumber\"]').type(user.cardNumber)\n    cy.get('input[name=\"expiryDate\"]').type(user.expiryDate)\n    cy.get('input[name=\"cardCvv\"]').type(user.cardCvv)\n    cy.contains(/next/i).click()\n```", "```js\n    cy.contains(`${user.firstName} \n      ${user.lastName}`).should('be.visible')\n    cy.contains(user.address1).should('be.visible')\n    cy.contains(`${user.city}, ${user.state} \n     ${user.zipCode}`).should(\n      'be.visible'\n    )\n    cy.contains(user.country).should('be.visible')\n    cy.contains(user.cardType).should('be.visible')\n    cy.contains(user.cardHolder).should('be.visible')\n    cy.contains(user.cardNumber).should('be.visible')\n    cy.contains(user.expiryDate).should('be.visible')\n    cy.contains(/place order/i).click()\n```", "```js\n     cy.contains(/thank you for your \n       order/i).should('be.visible')\n```", "```js\n    \"cy:open\": \"cypress open\",\n```", "```js\n    \"cy:run\": \"cypress run\",\n```", "```js\nnpm install --save-dev @testing-library/cypress\n```", "```js\nimport '@testing-library/cypress/add-commands'\n```", "```js\n    cy.findByRole('textbox', { name: /first name/i \n      }).type(user.firstName)\n    cy.findByRole('textbox', { name: /last name/i \n      }).type(user.lastName)\n    cy.findByRole('textbox', { name: /address line 1/i \n      }).type(user.address1)\n    cy.findByRole('textbox', { name: /city/i \n      }).type(user.city)\n    cy.findByRole('textbox', { name: /state/i \n      }).type(user.state)\n    cy.findByRole('textbox', { name: /postal code/i \n      }).type(user.zipCode)\n    cy.findByRole('textbox', { name: /country/i \n      }).type(user.country)\n    cy.findByText(/next/i).click()\n```", "```js\n        cy.findByRole('heading', { name: /thank you for \n          your order/i }).should(\n      'be.visible'\n    )\n    cy.findByRole('heading', { name: /your order number is \n      #2001539/i }).should(\n      'be.visible'\n    )\n```", "```js\nimport fakePost from '../support/generateBlogPost'\n\ndescribe('Blog Flow', () => {\n    let post = {}\n  beforeEach(()=> (post = fakePost()))\n  it('allows a user to create a new blog post', () => {\n    cy.visit('/')\n    cy.findByRole('link', { name: /new post/i }).click()\n```", "```js\n    cy.findByRole('textbox', { name: /title/i \n      }).type(post.title)\n    cy.findByRole('textbox', { name: /category/i \n      }).type(post.category)\n    cy.findByRole('textbox', { name: /image link/i \n      }).type(post.image_url)\n    cy.findByRole('textbox', { name: /content/i \n      }).type(post.content)\n```", "```js\n    cy.findByRole('button', { name: /submit/i }).click()\n    cy.findByRole('link', { name: post.title \n     }).should('be.visible')\n  })\n})\n```", "```js\n<Link href=\"/add\">\n<a className=\"font-bold inline-block px-4 py-2 text-3xl\">\n  New Post\n</a>\n</Link>\n```", "```js\n<label htmlFor=\"title\">Title</label>\n <input\n   type=\"text\"\n   autoFocus\n   id=\"title\"\n   name=\"title\"\n   placeholder=\"Blog Title\"\n   value={newBlog.title}\n   onChange={handleChange}\n />\n```", "```js\n<button>Submit</button>\n```", "```js\n    cy.findByRole('link', { name: post.title }).click()\n    cy.findByText(/delete post>/i).click()\n    cy.findByRole('link', { name: post.title \n     }).should('not.exist')\n```", "```js\n<a onClick={handleDelete}>Delete post&#62;</a>;\n```", "```js\nclass HomePage {\n  navigateToHomePage() {\n    cy.visit('/')\n  }\n  navigateToAddPage() {\n    cy.findByRole('link', { name: /new post/i }).click()\n  }\n  getBlogPost(post) {\n    return cy.findByRole('link', { name: post.title })\n  }\n}\nexport const homePage = new HomePage()\n```", "```js\nclass AddPage {\n  createNewPost(newPost) {\n    cy.findByRole('textbox', { name: /title/i \n     }).type(newPost.title)\n    cy.findByRole('textbox', { name: /category/i \n     }).type(newPost.category)\n    cy.findByRole('textbox', { name: /image link/i \n     }).type(newPost.image_url)\n    cy.findByRole('textbox', { name: /content/i \n     }).type(newPost.content)\n    cy.findByRole('button', { name: /submit/i }).click()\n  }\n}\nexport const addPage = new AddPage()\n```", "```js\nimport post from '../support/generateBlogPost'\nimport { addPage } from './pages/AddPage'\nimport { homePage } from './pages/HomePage'\n```", "```js\n      it('POM: allows a user to create a new blog post', ()\n       => {\n    homePage.navigateToHomePage()\n    homePage.navigateToAddPage()\n    addPage.createNewPost(post)\n    homePage.getBlogPost(post).should('be.visible')\n  })\n```", "```js\nnavigateToPostDetail(post) {\n cy.findByRole('link', { name: post.title }).click()\n}\n```", "```js\nclass PostDetailPage {\n  deletePost() {\n    cy.findByText(/delete post>/i).click()\n  }\n}\nexport const postDetailPage = new PostDetailPage()\n```", "```js\nimport { postDetailPage } from './pages/PostDetailPage'\n```", "```js\n    homePage.navigateToPostDetail(post)\n    postDetailPage.deletePost()\n    homePage.getBlogPost(post).should('not.exist')\n```", "```js\n  it('POM: allows a user to create a new blog post', () => {\n    homePage.navigateToHomePage()\n    homePage.navigateToAddPage()\n    addPage.createNewPost(post)\n    homePage.getBlogPost(post).should('be.visible')\n  })\n```", "```js\n  it('POM: allows a user to delete a new blog post', () => {\n    homePage.navigateToHomePage()\n    homePage.navigateToAddPage()\n    addPage.createNewPost(post)\n    homePage.navigateToPostDetail(post)\n    postDetailPage.deletePost()\n    homePage.getBlogPost(post).should('not.exist')\n  })\n```", "```js\nCypress.Commands.add('createBlogPost', post => {\n  cy.visit('/')\n  cy.findByRole('link', { name: /new post/i }).click()\n  cy.findByRole('textbox', { name: /title/i \n   }).type(post.title)\n  cy.findByRole('textbox', { name: /category/i \n   }).type(post.category)\n  cy.findByRole('textbox', { name: /image link/i \n   }).type(post.image_url)\n  cy.findByRole('textbox', { name: /content/i \n   }).type(post.content)\n  cy.findByRole('button', { name: /submit/i }).click()\n   })\n```", "```js\n  it('Custom Command: allows a user to delete a new blog \n    post', () => {\n    cy.createBlogPost(post)\n    homePage.navigateToPostDetail(post)\n    postDetailPage.deletePost()\n    homePage.getBlogPost(post).should('not.exist')\n  })\n```", "```js\n  cy.request('POST', '/api/add', post).then(response => {\n    expect(response.body.message).to.equal(\n      `The blog \"${post.title}\" was successfully added`\n    )\n  })\n```", "```js\n    cy.createBlogPost(post)\n    homePage.navigateToHomePage()\n    homePage.navigateToPostDetail(post)\n    postDetailPage.deletePost()\n    homePage.getBlogPost(post).should('not.exist')\n```", "```js\nimport fakePost from '../support/generateBlogPost';\n  const post = fakePost()\n\nconst getAllPosts = () => cy.request('/api/posts').its('body.\nposts');\nconst deletePost = (post) =>\n  cy.request('DELETE', `/api/delete/${post.id}`, {\n    id: post.id,\n    name: post.title,\n  });\n\nconst deleteAllPosts = () => getAllPosts().each(deletePost);\nbeforeEach(deleteAllPosts);\n```", "```js\n    cy.request('POST', '/api/add', {\n      title: post.title,\n      category: post.category,\n      image_url: post.image_url,\n      content: post.content\n    })\n    cy.request('/api/posts').as('posts')\n    cy.get('@posts').its('status').should('equal', 200)\n    cy.get('@posts').its('body.posts.length').should('equal', \n  1)\n```", "```js\n    cy.request('POST', '/api/add', post).as('newPost')\n    cy.get('@newPost').its('status').should('equal', 200)\n    cy.get('@newPost')\n      .its('body.message')\n      .should('be.equal', `The blog \"${post.title}\" was \n        successfully added`)\n```", "```js\n    cy.request('POST', '/api/add', post)\ngetAllPosts().each(post =>\n  cy\n    .request('DELETE', `/api/delete/${post.id}`, {\n      id: post.id,\n      title: post.title\n    })\n    .then(response => {\n      expect(response.status).equal(200)\n      expect(response.body.message).equal(\n        `post \"${post.title}\" successfully deleted`\n      )\n    })\n)\n```", "```js\n    cy.request('POST', '/api/add', post)\n    getAllPosts().each(post =>\n      cy\n        .request(`/api/post/${post.id}`)\n        .its('body.post.title')\n        .should('equal', post.title)\n    )\n  })\n```", "```js\nFeature: Login\n  Scenario: A user can enter a username, password, and \n    click login to navigate to their profile page.\n    Given I am on the login page\n    When I enter a username\n    When I enter a password\n    When I click \"login\"\n    Then I am navigated to my profile page\n```", "```js\nnpm install --save-dev cypress-cucumber-preprocessor\n```", "```js\nconst cucumber = require('cypress-cucumber-\n  preprocessor').default\nmodule.exports = (on, config) => {\n  on('file:preprocessor', cucumber())\n}\n```", "```js\n{\n  \"testFiles\": \"**/*.feature\"\n}\n```", "```js\n  \"cypress-cucumber-preprocessor\": {\n    \"nonGlobalStepDefinitions\": true,\n    \"stepDefinitions\": \"./cypress/e2e\"\n  }\n```", "```js\nFeature: Blog Application\n  Scenario: A user can create a blog post. \n    Given I am on the home page\n    When I click the \"New Post\" link\n    When I fill out the new blog form\n    When I click \"Submit\"\n    Then I see the new post on the home page\n```", "```js\nimport { Given, Then, When } from 'cypress-cucumber-\n  preprocessor/steps'\nimport post from '../../support/generateBlogPost'\nconst currentPost = post\nGiven('I am on the home page', () => {\n  cy.visit('/')\n})\nWhen('I click the \"New Post\" link', () => {\n  cy.findByRole('link', { name: /new post/i }).click()\n})\n```", "```js\nWhen('I fill out the new blog form', () => {\n  cy.findByRole('textbox', { name: /title/i \n   }).type(currentPost.title)\n  cy.findByRole('textbox', { name: /category/i \n   }).type(currentPost.category)\n  cy.findByRole('textbox', { name: /image link/i \n   }).type(currentPost.image_url)\n  cy.findByRole('textbox', { name: /content/i \n   }).type(currentPost.content)\n})\nWhen('I click \"Submit\"', () => {\n  cy.findByRole('button', { name: /submit/i }).click()\n})\n```", "```js\nThen('I see the new post on the home page', () => {\n  cy.findByRole('link', { name: currentPost.title \n   }).should('be.visible')\n})\n```", "```js\n  Scenario: A user can delete a blog post. \n    Given I am on the home page\n    When I click the blog post name link\n    When I click the delete link\n    Then the post is removed from the home page\n```", "```js\nWhen('I click the blog post name link', () => {\n  cy.findByRole('link', { name: currentPost.title \n   }).click()\n})\nWhen('I click the delete link', () => {\n  cy.findByText(/delete post>/i).click()\n})\n```", "```js\nThen('the post is removed from the home page', () => {\n  cy.findByRole('link', { name: currentPost.title \n   }).should('not.exist')\n})\n```", "```js\nnpm install --save-dev react-devtools\n```", "```js\n<Head>\n  <script src=\"img/localhost:8097\"></script>\n</Head>\n```", "```js\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <script src=\"img/localhost:8097\"></script>\n```", "```js\n\"scripts\": {\n  \"devtools\": \"react-devtools\"\n```", "```js\nnpm run dev\n```", "```js\nnpm start\n```", "```js\nnpm run cy:open\n```", "```js\nnpm run devtools\n```"]