- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Optimizing Application Performance
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化应用程序性能
- en: As developers and technical professionals, we play a crucial role in building
    and deploying Angular applications, ensuring their continued performance and delivering
    a superior user experience. Our efforts are instrumental in the success of our
    applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员和技术专业人士，我们在构建和部署Angular应用程序中发挥着至关重要的作用，确保它们的持续性能并提供卓越的用户体验。我们的努力对于应用程序的成功至关重要。
- en: The behavior of a web application and how it performs during runtime are key
    considerations for monitoring and optimization. We should monitor and measure
    application performance in case our application starts to degrade. One of the
    most popular metrics for identifying issues in web applications is **Core Web
    Vitals** ( **CWV** ).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用程序的行为以及它在运行时的表现是监控和优化的关键考虑因素。如果我们的应用程序开始退化，我们应该监控和衡量应用程序的性能。用于识别网络应用程序问题的最流行指标之一是**核心网页关键指标**（**CWV**）。
- en: After determining the causes of degradation, we can apply various optimization
    techniques. The Angular framework provides various tools for optimizing Angular
    applications, including **Server-Side Rendering** ( **SSR** ), image optimization,
    and deferred view loading. If we know that the application will be performance
    intensive beforehand, using any of the preceding tools is also highly encouraged
    early in development.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 确定退化的原因后，我们可以应用各种优化技术。Angular框架提供了各种工具来优化Angular应用程序，包括**服务器端渲染**（**SSR**）、图像优化和延迟视图加载。如果我们事先知道应用程序将具有高性能，那么在开发早期使用上述任何工具也是高度推荐的。
- en: 'In this chapter, we will explore the following Angular concepts regarding optimization:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下关于优化的Angular概念：
- en: Introducing Core Web Vitals
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍核心网页关键指标
- en: Rendering SSR applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染SSR应用程序
- en: Optimizing image loading
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化图像加载
- en: Deferring components
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟组件
- en: Prerendering SSG applications
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预渲染SSG应用程序
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The chapter contains various code samples to walk you through the concept of
    optimizing Angular applications. You can find the related source code in the `ch15`
    folder of the following GitHub repository:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含各种代码示例，以指导您了解优化Angular应用程序的概念。您可以在以下GitHub仓库的`ch15`文件夹中找到相关源代码：
- en: '[https://github.com/PacktPublishing/Learning-Angular-Fifth-Edition](https://github.com/PacktPublishing/Learning-Angular-Fifth-Edition
    )'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Learning-Angular-Fifth-Edition](https://github.com/PacktPublishing/Learning-Angular-Fifth-Edition)'
- en: Introducing Core Web Vitals
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍核心网页关键指标
- en: 'CWV is a set of metrics that helps us measure the performance of a web application.
    It is part of **Web Vitals** , an initiative led by Google that unifies various
    guides and tools for measuring performance on web pages. Each metric focuses on
    a specific aspect of user experience, including the loading, interactivity, and
    visual stability of a web page:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: CWV是一组指标，帮助我们衡量网络应用程序的性能。它是**网页关键指标**（**Web Vitals**）的一部分，这是由Google领导的一项倡议，旨在统一各种用于衡量网页性能的指南和工具。每个指标都关注用户体验的特定方面，包括网页的加载、交互性和视觉稳定性：
- en: '**Largest Contentful Paint** ( **LCP** ): This measures the load speed of a
    web page by calculating how long it takes for the largest element on the page
    to render. A fast LCP value indicates that the page becomes available to the user
    quickly.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大内容绘制**（**LCP**）：这通过计算页面上的最大元素渲染所需的时间来衡量网页的加载速度。快速的LCP值表示页面能够快速对用户可用。'
- en: '**Interaction to Next Paint** ( **INP** ): This measures the responsiveness
    of a web page by calculating how long it takes to respond to user interactions
    and provide visual feedback. A low INP value indicates that the page responds
    to the user quickly.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交互到下一次绘制**（**INP**）：这通过计算对用户交互做出响应并提供视觉反馈所需的时间来衡量网页的响应性。低INP值表示页面能够快速响应用户。'
- en: '**Cumulative Layout Shift** ( **CLS** ): This measures the stability of the
    UI on a web page by calculating how often unwanted layout shifts occur. A layout
    shift usually happens when HTML elements are moved in the DOM due to dynamic or
    asynchronous loading. A low CLS value indicates that the page is visually stable.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**累积布局偏移**（**CLS**）：这通过计算不想要的布局偏移发生的频率来衡量网页UI的稳定性。布局偏移通常发生在由于动态或异步加载而导致HTML元素在DOM中移动时。低CLS值表示页面在视觉上是稳定的。'
- en: Web Vitals contains additional metrics that contribute to the existing CWV set
    by measuring a wider or more niche area of UX, such as **First Contentful Paint**
    ( **FCP** ) and **Time to First Byte** ( **TTFB** ).
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Web Vitals包含额外的指标，通过测量更广泛或更专业的用户体验领域（如**首次内容渲染**（**FCP**）和**首次字节时间**（**TTFB**））来补充现有的CWV集。
- en: 'The value of each CWV metric falls into the following categories:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 每个CWV指标的值都落入以下类别：
- en: '**GOOD** (green)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**良好**（绿色）'
- en: '**NEEDS IMPROVEMENT** (orange)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**需要改进**（橙色）'
- en: '**POOR** (red)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**差**（红色）'
- en: You can find out more about CWV categories and their thresholds at [https://web.dev/articles/vitals#core-web-vitals](https://web.dev/articles/vitals#core-web-vitals)
    .
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://web.dev/articles/vitals#core-web-vitals](https://web.dev/articles/vitals#core-web-vitals)了解更多关于CWV类别及其阈值的信息。
- en: 'We can measure CWV in the following ways:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式测量CWV：
- en: '**In the field** : We can use tools like **PageSpeed Insights** and **Chrome
    User Experience Report** while the web application runs in production.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在生产环境中**：当Web应用在生产环境中运行时，我们可以使用**PageSpeed Insights**和**Chrome用户体验报告**等工具。'
- en: '**Programmatically in JavaScript** : We can use standard web APIs or third-party
    libraries such as **web-vitals** .'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**以编程方式在JavaScript中**：我们可以使用标准Web API或第三方库，如**web-vitals**。'
- en: '**In the lab** : We can use tools such as **Chrome DevTools** and **Lighthouse**
    while building the web application during development.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在实验室中**：在开发过程中构建Web应用时，我们可以使用**Chrome DevTools**和**Lighthouse**等工具。'
- en: 'In this chapter, we will learn how to use Chrome DevTools to measure the performance
    of our e-shop application:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用Chrome DevTools来测量我们电商应用的性能：
- en: Copy the source code from *Chapter 12* , *Introduction to Angular Material*
    , into a new folder.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将*第12章*，*Angular Material简介*中的源代码复制到一个新文件夹中。
- en: 'Run the following command inside the new folder to install package dependencies:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新文件夹内运行以下命令以安装包依赖项：
- en: '[PRE0]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the following command to start the Angular application:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以启动Angular应用：
- en: '[PRE1]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Open **Google Chrome** and navigate to `http://localhost:4200` .
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**Google Chrome**并导航到`http://localhost:4200`。
- en: 'Toggle the developer tools and select the **Lighthouse** tab. Lighthouse is
    a tool for measuring various performance aspects of a web page, including CWV.
    Google Chrome has an embedded version of Lighthouse that we can use to benchmark
    our application:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换开发者工具并选择**Lighthouse**标签。Lighthouse是一个用于测量网页各种性能方面的工具，包括CWV。Google Chrome内置了Lighthouse版本，我们可以用它来基准测试我们的应用：
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, λογισμικό, εικονίδιο υπολογιστή  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_15_01.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本、屏幕截图、软件、计算机图标的图片，自动生成的描述](img/B21418_15_01.png)'
- en: 'Figure 15.1: Lighthouse tab'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1：Lighthouse标签页
- en: On the screen shown in the preceding image, we can generate a Lighthouse performance
    report by selecting various options, including the **Device** and **Categories**
    sections. The **Device** section allows us to specify the environment in which
    we want to measure our application. The **Categories** section allows us to evaluate
    different metrics, including **Performance** , related to CWV.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一张显示的屏幕上，我们可以通过选择各种选项（包括**设备**和**类别**部分）来生成Lighthouse性能报告。**设备**部分允许我们指定我们想要测量应用的环境。**类别**部分允许我们评估与CWV相关的不同指标，包括**性能**。
- en: 'Select the **Desktop** option in the **Device** section, check only the **Performance**
    option in the **Categories** section, and click the **Analyze page load** button:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**设备**部分选择**桌面**选项，在**类别**部分仅检查**性能**选项，然后点击**分析页面加载**按钮：
- en: '![img](img/B21418_15_02.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![img](img/B21418_15_02.png)'
- en: 'Figure 15.2: Lighthouse report'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.2：Lighthouse报告
- en: In the preceding image, we can see the individual score from CWV metrics and
    the overall performance score.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一张图片中，我们可以看到CWV指标的单个得分和总体性能得分。
- en: The overall performance score is an estimation and may vary depending on the
    capabilities of your computer or any installed browser extensions. It is preferable
    to run the benchmark in **incognito or private** mode to simulate an environment
    closer to a real-world scenario.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 总体性能评分是一个估计值，可能会根据您计算机的能力或任何已安装的浏览器扩展程序而有所不同。最好在**隐身或私人**模式下运行基准测试，以模拟更接近真实世界场景的环境。
- en: In the following sections, we will explore ways to improve the performance score
    by applying Angular best practices. We will start with SSR.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，我们将探讨通过应用Angular最佳实践来提高性能得分的方法。我们将从SSR开始。
- en: Rendering SSR applications
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染SSR应用
- en: 'SSR is a technique in web development that improves application performance
    and security in the following ways:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: SSR 是一种在 Web 开发中提高应用程序性能和安全的技巧，以下是一些方式：
- en: It improves the loading performance by rendering the application on the server
    and eliminating the initial HTML content delivered to the client. The server delivers
    the initial HTML to the client, which can parse and load while it waits for the
    JavaScript content to be downloaded.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过在服务器上渲染应用程序并消除发送给客户端的初始 HTML 内容来提高加载性能。服务器将初始 HTML 发送给客户端，客户端可以在等待 JavaScript
    内容下载的同时解析和加载。
- en: It improves **Search Engine Optimization** ( **SEO** ) by making the application
    discoverable and indexable by web crawlers. SEO provides meaningful content when
    shared in third-party applications such as social media platforms.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过使应用程序可被发现和可由网络爬虫索引来提高 **搜索引擎优化**（ **SEO** ）。SEO 在第三方应用程序（如社交媒体平台）中共享时提供有意义的内。
- en: It improves CWV metrics related to loading speed and UI stability, such as LCP,
    FCP, and CLS.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过提高与加载速度和 UI 稳定性相关的 CWV 指标（如 LCP、FCP 和 CLS）来提高性能。
- en: It improves security by adding CSP nonces to Angular applications.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过向 Angular 应用程序添加 CSP nonces 来提高安全性。
- en: 'As we saw in *Chapter 1* , *Building Your First Angular Application* , when
    we created a new application using the Angular CLI, it prompted us to enable SSR:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在 *第一章* 中所看到的，*构建您的第一个 Angular 应用程序*，当我们使用 Angular CLI 创建新应用程序时，它会提示我们启用
    SSR：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In our case, we have already created an Angular application using the Angular
    CLI. To add SSR in an existing Angular application, run the following command
    in a terminal window inside the Angular CLI workspace:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们已经使用 Angular CLI 创建了一个 Angular 应用程序。要在现有的 Angular 应用程序中添加 SSR，请在 Angular
    CLI 工作区内的终端窗口中运行以下命令：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding command will ask us the following question:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将询问我们以下问题：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Accept the default value, `No` , by pressing *Enter* and the Angular CLI will
    prompt us to install the `@angular/ssr` npm package.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按 *Enter* 键接受默认值 `No`，Angular CLI 将提示我们安装 `@angular/ssr` npm 包。
- en: A feature in **Developer Preview** means that it is not ready yet for production
    but you can test it in your development environment.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发者预览** 中的功能意味着它尚未准备好用于生产，但您可以在开发环境中对其进行测试。'
- en: 'After installation completes, the Angular CLI creates the following files:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，Angular CLI 将创建以下文件：
- en: '`main.server.ts` : This is used to bootstrap the application in the server
    using a specific configuration.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.server.ts`：这是在服务器上使用特定配置启动应用程序的文件。'
- en: '`app.config.server.ts` : This contains the configuration for the application
    rendered on the server. It exports a `config` variable, which contains a merged
    version of the client and server application configuration files.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.config.server.ts`：这包含在服务器上渲染的应用程序的配置。它导出一个 `config` 变量，其中包含客户端和服务器应用程序配置文件的合并版本。'
- en: '`server.ts` : This configures and starts a Node.js **Express** server that
    renders the Angular application on the server. It uses the `CommonEngine` class
    from the `@angular/ssr` package to start the Angular application.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server.ts`：它配置并启动一个 Node.js **Express** 服务器，在服务器上渲染 Angular 应用程序。它使用 `@angular/ssr`
    包中的 `CommonEngine` 类来启动 Angular 应用程序。'
- en: 'Additionally, the command will make the following modifications in the Angular
    CLI workspace:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，该命令将在 Angular CLI 工作区中进行以下修改：
- en: It will add the necessary options in the `build` section of the `angular.json`
    file to run the Angular application in SSR and SSG.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将在 `angular.json` 文件的 `build` 部分中添加必要的选项，以在 SSR 和 SSG 中运行 Angular 应用程序。
- en: It will add the necessary entries in the `files` and `types` property of the
    `tsconfig.app.json` file so that the TypeScript compiler can identify the files
    created for the server.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将在 `tsconfig.app.json` 文件的 `files` 和 `types` 属性中添加必要的条目，以便 TypeScript 编译器可以识别为服务器创建的文件。
- en: It will add the necessary scripts and dependencies in the `package.json` file.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将在 `package.json` 文件中添加必要的脚本和依赖项。
- en: It will add `provideClientHydration` in the `src\app\app.config.ts` file to
    enable **hydration** in the Angular application. Hydration is the process of restoring
    the server-side-rendered application to the client. We will learn more about hydration
    later in the chapter.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `src\app\app.config.ts` 文件中添加 `provideClientHydration` 以启用 Angular 应用程序中的
    ** hydration **。Hydration 是将服务器端渲染的应用程序恢复到客户端的过程。我们将在本章后面了解更多关于 hydration 的内容。
- en: 'Now that we have installed Angular SSR in our application, let’s see how to
    use it:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在我们的应用程序中安装了 Angular SSR，让我们看看如何使用它：
- en: 'Open the `app.config.ts` file and modify the `import` statement of the `@angular/common/http`
    namespace as follows:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.config.ts` 文件，并按如下方式修改 `@angular/common/http` 命名空间的 `import` 语句：
- en: '[PRE5]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `withFetch` method is used to configure the Angular HTTP client so that
    it uses the native `fetch` API for making requests.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`withFetch` 方法用于配置 Angular HTTP 客户端，使其使用原生的 `fetch` API 进行请求。'
- en: It’s strongly recommended to enable `fetch` for applications that use SSR for
    better performance and compatibility.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议为使用 SSR 的应用程序启用 `fetch`，以获得更好的性能和兼容性。
- en: 'Pass the `withFetch` method as a parameter in the `provideHttpClient` method:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `provideHttpClient` 方法中将 `withFetch` 方法作为参数传递：
- en: '[PRE6]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the following command to build the Angular application:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以构建 Angular 应用程序：
- en: '[PRE7]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding command generates `browser` and `server` bundles inside the `dist\my-app`
    folder and prerenders static routes. We will learn more about prerendering in
    the *Prerendering SSG applications* section.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令在 `dist\my-app` 文件夹内生成 `browser` 和 `server` 打包，并预渲染静态路由。我们将在 *预渲染 SSG 应用程序*
    部分了解更多关于预渲染的内容。
- en: 'Run the following command to run the SSR application:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以运行 SSR 应用程序：
- en: '[PRE8]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding command will start the Express server locally at port `4000` and
    serve the SSR application.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令将在本地端口 `4000` 启动 Express 服务器并服务 SSR 应用程序。
- en: Open Google Chrome and navigate to `http://localhost:4000` . You should see
    the e-shop application on the web page.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Google Chrome 并导航到 `http://localhost:4000`。你应该在网页上看到电子商务应用程序。
- en: 'Repeat the process we learned in the previous section to run a performance
    benchmark using Lighthouse. The overall score and CWV metrics should have been
    improved dramatically:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复上一节中我们学习的过程，使用 Lighthouse 运行性能基准测试。整体得分和 CWV 指标应该有显著提升：
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, λογισμικό, γραμματοσειρά  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_15_03.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本、屏幕截图、软件、字体的自动生成描述](img/B21418_15_03.png)'
- en: 'Figure 15.3: Lighthouse report (SSR)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.3：Lighthouse 报告（SSR）
- en: The performance of our application has been improved by more than 20% just by
    installing SSR in our Angular application! As we will learn later in the chapter,
    we can apply various Angular techniques to improve performance further more.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在我们的 Angular 应用程序中安装 SSR，我们的应用程序性能提高了超过 20%！正如我们将在本章后面学到的那样，我们可以应用各种 Angular
    技巧来进一步提高性能。
- en: Angular SSR is a good fit when we need to fetch data from the server and display
    it statically on a website. However, there are cases where SSR is not beneficial,
    such as when an application is based on data entry and has a lot of user inputs.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要从服务器获取数据并在网站上静态显示时，Angular SSR 是一个很好的选择。然而，在某些情况下，SSR 并没有好处，例如当应用程序基于数据输入并且有很多用户输入时。
- en: In the following section, we will learn how to override SSR or skip it completely
    for certain parts of an Angular application.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何覆盖 SSR 或完全跳过 Angular 应用程序的部分。
- en: Overriding SSR in Angular applications
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Angular 应用程序中覆盖 SSR
- en: 'Hydration is an important feature enabled by default in Angular SSR applications.
    It improves the overall performance of the application by handling the creation
    of the DOM on the client efficiently. The client can reuse the DOM structure of
    the server-side-rendered application instead of creating it from scratch and forcing
    a UI flicker, which affects CWV metrics such as LCP and CLS. The hydration process
    will fail in the following cases:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 湿化是 Angular SSR 应用程序默认启用的一个重要功能。它通过有效地处理客户端上 DOM 的创建来提高应用程序的整体性能。客户端可以重用服务器端渲染应用程序的
    DOM 结构，而不是从头创建它并强制 UI 闪烁，这会影响 CWV 指标，如 LCP 和 CLS。以下情况下， hydration 过程将失败：
- en: When we try to manipulate the DOM through a native browser API such as `window`
    or `document` either directly or using a third-party library
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们尝试通过原生浏览器 API（如 `window` 或 `document`）直接或使用第三方库来操作 DOM 时
- en: When our component templates do not have a valid HTML syntax
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们的组件模板没有有效的 HTML 语法时
- en: 'We can overcome the preceding problems by applying the following best practices:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过应用以下最佳实践来克服上述问题：
- en: Use Angular APIs to detect the platform on which our application is running
    before interacting with the DOM
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在与 DOM 交互之前，使用 Angular API 检测我们的应用程序正在运行的平台。
- en: Skip hydration for specific Angular components
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳过特定 Angular 组件的 hydration
- en: 'Let’s see how to use both with an example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个示例来看看如何同时使用这两个功能：
- en: Run the SSR version of the Angular application, as shown in the previous section.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行上一节中显示的 Angular 应用程序的 SSR 版本。
- en: 'Notice the text that is displayed in the application footer:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意在应用程序页脚中显示的文本：
- en: '**- v1.0**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**- v1.0**'
- en: The copyright information is not displayed correctly.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 版权信息显示不正确。
- en: 'Open the `copyright.directive.ts` file and focus on the `constructor` code:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`copyright.directive.ts`文件并关注`constructor`代码：
- en: '[PRE9]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding code uses the `nativeElement` property to manipulate the DOM by
    adding a CSS class and setting `textContent` of the HTML element. However, as
    mentioned, the code breaks our application because there is no DOM on the server.
    Let’s fix that!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码使用`nativeElement`属性通过添加CSS类和设置HTML元素的`textContent`来操作DOM。然而，正如之前提到的，这段代码破坏了我们的应用程序，因为服务器上没有DOM。让我们来修复它！
- en: 'Open the `app.component.html` file and add the `ngSkipHydration` attribute
    on the `<mat-toolbar>` element of the `<footer>` HTML tag:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.html`文件，并在`<footer>`HTML标签的`<mat-toolbar>`元素上添加`ngSkipHydration`属性：
- en: '[PRE10]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`ngSkipHydration` is an HTML attribute, not an Angular directive. It can only
    be used in other Angular components, not native HTML elements. It would not work
    if we had added it in the `<footer>` tag instead.'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ngSkipHydration`是一个HTML属性，而不是Angular指令。它只能在其他Angular组件中使用，不能用于原生HTML元素。如果我们将其添加到`<footer>`标签中，则不会起作用。'
- en: In the preceding snippet, the `<mat-toolbar>` component and its child components
    will not be hydrated. This effectively means that Angular will create them from
    scratch when the SSR version of the application is ready.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`<mat-toolbar>`组件及其子组件将不会被水合。这实际上意味着当SSR版本的应用程序准备就绪时，Angular将从头开始创建它们。
- en: 'Run step 1 again and observe the output in the application footer:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行步骤1，并观察应用程序页脚中的输出：
- en: '**Copyright ©2024 All Rights Reserved - v1.0**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**版权所有 ©2024 保留所有权利 - v1.0**'
- en: Skipping hydration should be considered a workaround. We use it temporarily
    in cases where hydration cannot be enabled. It is recommended to refactor your
    code so your application can benefit from hydration capabilities.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 跳过水合应该被视为一种权宜之计。我们暂时在无法启用水合的情况下使用它。建议重构你的代码，以便你的应用程序能够从水合功能中受益。
- en: 'An alternate and better approach is to refactor our code so that it executes
    client code conditionally:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种更好方法是重构我们的代码，使其有条件地执行客户端代码：
- en: 'Modify the `import` statements in the `copyright.directive.ts` file as follows:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式修改`copyright.directive.ts`文件中的`import`语句：
- en: '[PRE11]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `PLATFORM_ID` is an `InjectionToken` that indicates the type of platform
    our application is currently running on. The `isPlatformBrowser` function checks
    if a given platform ID is the browser.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`PLATFORM_ID`是一个`InjectionToken`，它指示我们的应用程序当前正在运行的平台类型。`isPlatformBrowser`函数检查给定的平台ID是否为浏览器。'
- en: 'Add the `OnInit` interface to the list of implemented interfaces of the `CopyrightDirective`
    class:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 将`OnInit`接口添加到`CopyrightDirective`类的实现接口列表中：
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the following class properties:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下类属性：
- en: '[PRE13]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Remove the `constructor` and add the following `ngOnInit` method:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`constructor`并添加以下`ngOnInit`方法：
- en: '[PRE14]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `isPlatformBrowser` function accepts the platform ID as a parameter.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`isPlatformBrowser`函数接受平台ID作为参数。'
- en: Angular also provides the `isPlatformServer` function, a counterpart of the
    `isPlatformBrowser` function, which checks if the current platform is the server.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Angular还提供了`isPlatformServer`函数，它是`isPlatformBrowser`函数的对立面，用于检查当前平台是否为服务器。
- en: Build and run the application in server-side mode to verify that the copyright
    message is still visible.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以服务器端模式构建和运行应用程序，以验证版权信息是否仍然可见。
- en: To sum up, it is recommended that you use Angular SSR throughout your application
    and refactor parts of the application code that must run on the browser. This
    will allow you to reap all the benefits of a server-side-rendered application.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，建议你在整个应用程序中使用Angular SSR，并对必须在浏览器上运行的代码部分进行重构。这将使你能够享受到服务器端渲染应用程序的所有好处。
- en: In the preceding section, we showed that adding SSR to an Angular application
    dramatically improves its overall performance score. As we will learn in the following
    section, we can do even better by applying optimization techniques to product
    images.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们展示了将SSR添加到Angular应用程序中可以显著提高其整体性能评分。正如我们将在下一节中学习的，通过应用优化技术到产品图片，我们可以做得更好。
- en: Optimizing image loading
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化图片加载
- en: The product list, which is the landing component of our application, displays
    an image of each product on the list. How images are loaded in an Angular application
    can affect CWV metrics such as LCP and CLS. Our application currently loads images
    as received from the Fake Store API. However, we can use specific Angular artifacts
    to enforce best practices while loading images.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 产品列表是我们应用程序的着陆组件，它会在列表中显示每个产品的图像。在 Angular 应用程序中图像的加载方式可能会影响 CWV 指标，如 LCP 和
    CLS。我们的应用程序目前以从 Fake Store API 收到的形式加载图像。然而，我们可以在加载图像时使用特定的 Angular 工具来强制执行最佳实践。
- en: 'The Angular framework provides us with the `NgOptimizedImage` directive, which
    we can attach to `<img>` HTML elements:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 框架为我们提供了 `NgOptimizedImage` 指令，我们可以将其附加到 `<img>` HTML 元素上：
- en: 'Open the `product-list.component.ts` file and import the `NgOptimizedImage`
    class from the `@angular/common` npm package:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `product-list.component.ts` 文件，并从 `@angular/common` npm 包中导入 `NgOptimizedImage`
    类：
- en: '[PRE15]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add the `NgOptimizedImage` class in the `imports` array of the `@Component`
    decorator:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `@Component` 装饰器的 `imports` 数组中添加 `NgOptimizedImage` 类：
- en: '[PRE16]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Open the `product-list.component.html` file and replace the binding of the
    `src` property with the `ngSrc` directive:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `product-list.component.html` 文件，并将 `src` 属性的绑定替换为 `ngSrc` 指令：
- en: '[PRE17]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `ngSrc` directive is insufficient to prevent layout shifts while loading
    the image. We must also set the image size by defining the `width` , `height`
    , or `fill` attributes. In this case, we will use the latter because the size
    of each image is not the same for all products:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`ngSrc` 指令在加载图像时不足以防止布局偏移。我们还必须通过定义 `width`、`height` 或 `fill` 属性来设置图像大小。在这种情况下，我们将使用后者，因为并非所有产品的图像大小都相同：'
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Open the `product-list.component.css` file and add the following CSS styles
    to position the image at the top right of the container:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `product-list.component.css` 文件，并添加以下 CSS 样式以将图像定位在容器的右上角：
- en: '[PRE19]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the following command to start the application:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以启动应用程序：
- en: '[PRE20]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Navigate to `http://localhost:4200` and verify that the product list is shown
    correctly.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `http://localhost:4200` 并验证产品列表是否正确显示。
- en: 'The benefits acquired from using the `NgOptimizedImage` directive are not noticeable
    in the UI at once. The directive works in the background and automatically improves
    the LCP metric of CWV by:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `NgOptimizedImage` 指令获得的好处不会立即在 UI 中显现。该指令在后台工作，并自动通过以下方式提高 CWV 的 LCP 指标：
- en: Setting fetch priority on the `<img>` HTML element
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `<img>` HTML 元素上设置获取优先级
- en: Lazy loading images
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 懒加载图像
- en: Setting `preconnect` link tags and preload hints in the case of SSR
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 SSR 的情况下设置 `preconnect` 链接标签和预加载提示
- en: Generating `srcset` attributes for responsive images
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为响应式图像生成 `srcset` 属性
- en: 'Additionally, it helps developers to follow best practices regarding image
    loading, such as:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它还帮助开发者遵循有关图像加载的最佳实践，例如：
- en: Setting the size of the image if it is known beforehand
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果事先知道图像大小，则设置图像大小
- en: Loading images through a CDN
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 CDN 加载图像
- en: Displaying appropriate warnings in the console window for different metrics
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在控制台窗口中显示针对不同指标的适当警告
- en: The `NgOptimizedImage` directive contains many other features we can enable
    to achieve powerful performance improvements, such as setting up image loaders,
    using placeholders, and defining priority images to load. You can find more information
    at [https://angular.dev/guide/image-optimization](https://angular.dev/guide/image-optimization)
    .
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`NgOptimizedImage` 指令包含许多其他我们可以启用的功能，以实现强大的性能改进，例如设置图像加载器、使用占位符以及定义优先加载的图像。更多信息请参阅
    [https://angular.dev/guide/image-optimization](https://angular.dev/guide/image-optimization)
    。'
- en: We have already learned about various tools for improving application performance.
    One of the most performant tools is **deferrable views** , which we will learn
    about in the following section.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了各种提高应用程序性能的工具。其中最有效的工具之一是**可延迟视图**，我们将在下一节中学习。
- en: Deferring components
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 延迟组件
- en: Introducing the new control flow syntax enabled Angular to integrate new primitives
    in the framework, improving the ergonomics, DX, and performance of Angular applications.
    One such primitive is deferrable views, which allow lazily loading an Angular
    component and its dependencies.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍新的控制流语法使 Angular 能够在框架中集成新的原语，从而提高了 Angular 应用程序的用户体验、开发体验和性能。其中一个这样的原语是可延迟视图，它允许懒加载
    Angular 组件及其依赖项。
- en: Introducing deferrable views
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍可延迟视图
- en: 'We have already learned how to use the Angular router for lazy loading a component
    based on a specific route. Deferrable views provide a new API that supplements
    the preceding one. Combining it with lazy-load routing guarantees the development
    of high-performance and powerful web applications. Deferrable views allow us to
    lazy load a component based on an event or the component state and have the following
    characteristics:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何使用 Angular 路由根据特定路由懒加载组件。可延迟视图提供了一个新的 API，补充了前面的 API。结合懒加载路由可以保证开发高性能和强大的
    Web 应用程序。可延迟视图允许我们根据事件或组件状态懒加载组件，并具有以下特性：
- en: They are simple to use and easy to reason about the enclosed code
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们易于使用，并且易于理解封装的代码
- en: We define them in a declarative way
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们以声明式的方式定义它们
- en: They minimize the initial application load and final bundle size, improving
    CWV metrics such as LCP and TTFB
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们最小化了初始应用程序加载和最终包的大小，提高了 CWV 指标，如 LCP 和 TTFB
- en: 'Each deferrable view is split into a separate chunk, similar to the individual
    chunk files generated by lazy-loaded routes. They consist of the following HTML
    blocks:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 每个可延迟视图都被分割成单独的块，类似于由懒加载路由生成的单个块文件。它们由以下 HTML 块组成：
- en: '`@defer` : Indicates the HTML content that will be loaded.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@defer`：指示将要加载的 HTML 内容。'
- en: '`@placeholder` : Indicates the HTML content shown before the `@defer` block
    starts loading. It is particularly useful when the application is loaded over
    a slow network or when we want to avoid UI flickering.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@placeholder`：指示在 `@defer` 块开始加载之前显示的 HTML 内容。它在应用程序通过慢速网络加载或我们想要避免 UI 闪烁时特别有用。'
- en: '`@loading` : Indicates the HTML content that will be visible while the `@defer`
    block is loading.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@loading`：指示在 `@defer` 块加载时可见的 HTML 内容。'
- en: '`@error` : Indicates the HTML content shown if an error occurs while the `@defer`
    block is loading.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@error`：指示在 `@defer` 块加载时发生错误时显示的 HTML 内容。'
- en: We will learn how to use each block in the following section.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节学习如何使用每个块。
- en: Using deferrable blocks
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用可延迟块
- en: 'We will integrate deferrable views in our e-shop application by creating a
    component that displays a featured product from the Fake Store API that is not
    currently in the product list. Let’s start:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建一个组件来在我们的电子商务应用中集成可延迟视图，该组件将显示来自 Fake Store API 的特色产品，而这些产品目前不在产品列表中。让我们开始：
- en: 'Run the following command to create the new component:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来创建新的组件：
- en: '[PRE21]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Open the `products.service.ts` file and add the following method, which gets
    a specific product with ID `20` from the Fake Store API:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `products.service.ts` 文件，并添加以下方法，该方法从 Fake Store API 获取 ID 为 `20` 的特定产品：
- en: '[PRE22]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Open the `featured.component.ts` file and modify the `import` statements as
    follows:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `featured.component.ts` 文件，并按照以下方式修改 `import` 语句：
- en: '[PRE23]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Modify the `imports` array of the `@Component` decorator as follows:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式修改 `@Component` 装饰器的 `imports` 数组：
- en: '[PRE24]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Modify the `FeaturedComponent` class as follows:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式修改 `FeaturedComponent` 类：
- en: '[PRE25]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In the preceding TypeScript class, we have declared the `product$` observable
    and assigned it to the returned value of the `getFeatured` method from the `ProductsService`
    class.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的 TypeScript 类中，我们已经声明了 `product$` 可观察对象，并将其分配给 `ProductsService` 类中 `getFeatured`
    方法的返回值。
- en: 'Open the `featured.component.html` file and replace its contents with the following
    HTML code:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `featured.component.html` 文件，并用以下 HTML 代码替换其内容：
- en: '[PRE26]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the preceding snippet, we use the `async` pipe to subscribe to the `product$`
    observable inside the `@if` block. The HTML content of the block displays product
    details as an Angular Material card component.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们使用 `async` 管道在 `@if` 块内部订阅 `product$` 可观察对象。该块的 HTML 内容以 Angular
    Material 卡组件的形式显示产品详情。
- en: 'Open the `featured.component.css` file and add the following CSS styles for
    the card and the button components:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `featured.component.css` 文件，并为卡片和按钮组件添加以下 CSS 样式：
- en: '[PRE27]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The new Angular component is in place. We must add it to the main component
    of the application and use a `@defer` block to load it:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 Angular 组件已经就位。我们必须将其添加到应用程序的主组件中，并使用 `@defer` 块来加载它：
- en: 'Open the `app.component.ts` file and add the following `import` statement:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.component.ts` 文件，并添加以下 `import` 语句：
- en: '[PRE28]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add the `FeaturedComponent` class in the `imports` array of the `@Component`
    decorator:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `@Component` 装饰器的 `imports` 数组中添加 `FeaturedComponent` 类：
- en: '[PRE29]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Open the `app.component.html` file and add the `<app-featured>` component inside
    the `<main>` HTML tag:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.component.html` 文件，并在 `<main>` HTML 标签内添加 `<app-featured>` 组件：
- en: '[PRE30]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the preceding snippet, we use the `@defer` block to declare the `<app-featured>`
    component using the self-enclosing tag syntax.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们使用`@defer`块通过自闭合标签语法声明了`<app-featured>`组件。
- en: 'Run the `ng serve` command to start the application and observe the **Lazy
    chunk files** section in the terminal window:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ng serve`命令以启动应用程序，并在终端窗口中观察**懒加载文件**部分：
- en: '[PRE31]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The source code of the featured component is split into a chunk file.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 特色组件的源代码被分割成一个块文件。
- en: 'Navigate to `http://localhost:4200` and observe the new component on the right
    side of the product list:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`http://localhost:4200`并观察产品列表右侧的新组件：
- en: '![img](img/B21418_15_04.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21418_15_04.png)'
- en: 'Figure 15.4: Featured product'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.4：特色产品
- en: 'Try to reload the browser, and you will notice a UI flickering while loading
    the featured product. We will use the `@placeholder` block to display an outline
    image before the featured component starts loading:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试重新加载浏览器，您将注意到在加载特色产品时会出现UI闪烁。我们将使用`@placeholder`块在特色组件开始加载之前显示轮廓图像：
- en: Copy the `placeholder.png` image from the `public` folder of the GitHub repository
    described in the *Technical requirements* section to the respective folder of
    your workspace.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将*技术要求*部分中描述的GitHub仓库的`public`文件夹中的`placeholder.png`图像复制到您的工作空间相应文件夹中。
- en: 'Add a `@placeholder` block following the `@defer` block as follows:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`@defer`块之后添加一个`@placeholder`块，如下所示：
- en: '[PRE32]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `@placeholder` block accepts an optional parameter defining the `minimum`
    time the placeholder will be visible. In this case, we have defined the minimum
    time as `1` second.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`@placeholder`块接受一个可选参数，定义占位符将可见的最短时间。在这种情况下，我们定义的最短时间为`1`秒。'
- en: 'Run the application using the `ng serve` command and verify that the following
    placeholder image is visible for 1 second before the actual content is loaded:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ng serve`命令运行应用程序，并验证在内容加载前，以下占位图是否可见1秒钟：
- en: '![Εικόνα που περιέχει ορθογώνιο παραλληλόγραμμο, στιγμιότυπο οθόνης  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_15_05.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![包含矩形、屏幕截图、自动生成的描述](img/B21418_15_05.png)'
- en: 'Figure 15.5: Placeholder image'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.5：占位图
- en: 'An alternate approach would be to use the `@loading` block and display a loading
    indicator, such as a spinner, while the featured component is loading:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是在`@loading`块中使用，并在特色组件加载时显示一个加载指示器，例如一个旋转器：
- en: 'Open the `app.component.ts` file and add the following `import` statement:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.ts`文件并添加以下`import`语句：
- en: '[PRE33]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `MatProgressSpinner` class is a spinner component from the Angular Material
    library.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`MatProgressSpinner`类是Angular Material库中的一个旋转器组件。'
- en: 'Add the `MatProgressSpinner` class in the `imports` array of the `@Component`
    decorator:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`@Component`装饰器的`imports`数组中添加`MatProgressSpinner`类：
- en: '[PRE34]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add the `@loading` block in the `app.component.html` file as follows:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app.component.html`文件中添加`@loading`块，如下所示：
- en: '[PRE35]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `@loading` block accepts the same optional parameters as the `@placeholder`
    block. In this case, we show the spinner component for `1` second minimum.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`@loading`块接受与`@placeholder`块相同的可选参数。在这种情况下，我们至少显示旋转器组件`1`秒。'
- en: We added the `ngSkipHydration` attribute because the spinner component interacts
    with the browser DOM and cannot be hydrated.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了`ngSkipHydration`属性，因为旋转器组件与浏览器DOM交互，不能进行水合。
- en: If we run the application using the `ng serve` command, we should see a spinner
    indication for 1 second while the featured component is loading.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们使用`ng serve`命令运行应用程序，我们应该在特色组件加载时看到一个旋转指示器，持续1秒钟。
- en: 'The `@error` block in deferrable views works similarly to the `@placeholder`
    and `@loading` blocks. The HTML content inside it will be visible when an error
    occurs while loading the `@defer` block contents:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 可延迟视图中的`@error`块与`@placeholder`和`@loading`块的工作方式类似。当加载`@defer`块内容时发生错误，其中的HTML内容将可见：
- en: '[PRE36]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: As we have seen, the contents of a `@defer` block start loading immediately
    when the component that it belongs to is rendered. However, the deferrable views
    API provides us with ergonomic tools to control when the block will be loaded,
    as we will see in the following section.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，`@defer`块的内容在所属组件渲染时立即开始加载。然而，可延迟视图API为我们提供了便于控制块何时加载的工具，我们将在下一节中看到。
- en: Loading patterns in @defer blocks
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在`@defer`块中加载模式
- en: 'Using **triggers** and **prefetch** mechanisms, we can control how and when
    a `@defer` block will load:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**触发器**和**预取**机制，我们可以控制`@defer`块何时以及如何加载：
- en: Triggers define when the block’s contents start loading
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发器定义了块的内容何时开始加载
- en: Prefetch defines whether Angular will fetch the contents beforehand so that
    they are available when needed
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prefetch定义了Angular是否会在需要时预先获取内容，以便它们在需要时可用
- en: 'We can define a trigger as an optional parameter inside the `@defer` block
    using the `on` keyword and the name of the trigger:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`@defer`块内部使用`on`关键字和触发器的名称来定义一个触发器作为可选参数：
- en: '[PRE37]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The Angular framework contains the following built-in triggers:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: Angular框架包含以下内置触发器：
- en: '`viewport` : This will trigger the block when the content enters the browser
    **viewport** , which is the part of the browser that is currently visible.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`viewport`：这将触发当内容进入浏览器**视口**时，即当前可见的浏览器部分。'
- en: You can learn more about the viewport at [https://developer.mozilla.org/docs/Glossary/Viewport](https://developer.mozilla.org/docs/Glossary/Viewport)
    .
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://developer.mozilla.org/docs/Glossary/Viewport](https://developer.mozilla.org/docs/Glossary/Viewport)上了解更多关于视口的信息。
- en: '`interaction` : This will trigger the block when the user interacts with the
    content.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`interaction`：这将触发当用户与内容交互时。'
- en: '`hover` : This will trigger the block when users hover over the area covered
    by the content with their mouse.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hover`：这将触发当用户将鼠标悬停在内容覆盖的区域上时。'
- en: '`idle` : This will trigger the block when the browser has entered an **idle**
    state, which is the default behavior of deferrable views. The idle state of the
    browser is triggered by the native `requestIdleCallback` API.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`idle`：这将触发当浏览器进入一个**空闲**状态时，这是可延迟视图的默认行为。浏览器空闲状态由原生的`requestIdleCallback`
    API触发。'
- en: You can learn more about the idle state at [https://developer.mozilla.org/docs/Web/API/Window/requestIdleCallback](https://developer.mozilla.org/docs/Web/API/Window/requestIdleCallback)
    .
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://developer.mozilla.org/docs/Web/API/Window/requestIdleCallback](https://developer.mozilla.org/docs/Web/API/Window/requestIdleCallback)上了解更多关于空闲状态的信息。
- en: '`immediate` : This will trigger the block when the client renders the page.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`immediate`：这将触发当客户端渲染页面时。'
- en: The difference between not using the block and using it with the `immediate`
    trigger is that we benefit from the code-splitting features of deferrable views
    and deliver less JavaScript to the client.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 不使用块与使用`immediate`触发器之间的区别在于，我们可以从可延迟视图的代码拆分功能中受益，并向客户端交付更少的JavaScript。
- en: '`timer` : This will trigger the block after a specified duration. The duration
    is a required parameter of the `timer` function:'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timer`：这将触发在指定持续时间后执行块。持续时间是`timer`函数的必需参数：'
- en: '[PRE38]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The preceding snippet will start loading the featured component after `2` seconds.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，将在`2`秒后开始加载特色组件。
- en: 'We can achieve better loading granularity by combining triggers:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 通过组合触发器，我们可以实现更好的加载粒度：
- en: '[PRE39]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The preceding snippet will load the featured component when the browser is `idle`
    *or* after `2` seconds.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，将在浏览器处于`idle`状态或`2`秒后加载特色组件。
- en: 'In addition to the built-in triggers, we can create custom triggers by ourselves
    using the `when` keyword. The `when` keyword is followed by an expression that
    evaluates to a boolean:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 除了内置触发器之外，我们可以使用`when`关键字自己创建自定义触发器。`when`关键字后面跟着一个评估为布尔值的表达式：
- en: '[PRE40]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In the preceding snippet, the featured component will be loaded when the `isActive`
    component property is `true` .
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，当`isActive`组件属性为`true`时，将加载特色组件。
- en: 'Triggers in deferrable views are powerful and ergonomic tools that can give
    amazing results in speed and performance. When combined with prefetching, they
    can achieve great performance improvements in Angular applications. Prefetching
    allows us to specify the condition in which we can prefetch a deferrable view
    to be ready when needed. Prefetching supports all built-in triggers of deferrable
    views:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 可延迟视图中的触发器是强大且人性化的工具，可以在速度和性能上带来惊人的结果。当与预取结合使用时，它们可以在Angular应用程序中实现巨大的性能提升。预取允许我们指定可以预取可延迟视图以备需要时使用的条件。预取支持所有可延迟视图的内置触发器：
- en: '[PRE41]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The preceding snippet will prefetch the content when the browser is `idle` and
    load it after `2` seconds. It can also define when it will prefetch the content
    using the `when` keyword or create custom triggers.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，当浏览器处于`idle`状态时，将预取内容，并在`2`秒后加载。它还可以使用`when`关键字定义预取内容的时间，或创建自定义触发器。
- en: Triggers and prefetching allow us to create sophisticated and complex scenarios
    for loading deferrable views. The versatility that the deferrable views API provides
    makes it a very useful tool in developing highly sophisticated and performant
    Angular applications.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 触发和预取允许我们创建加载可延迟视图的复杂场景。可延迟视图 API 提供的灵活性使其成为开发高度复杂和性能卓越的 Angular 应用程序的有用工具。
- en: Deferrable views should not be used for content that must be rendered immediately.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 不应将可延迟视图用于必须立即渲染的内容。
- en: In the following section, we will conclude our journey to optimizing application
    performance with Angular SSG.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将结束使用 Angular SSG 优化应用程序性能的旅程。
- en: Prerendering SSG applications
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预渲染 SSG 应用程序
- en: SSG or build-time prerendering is the process of creating static generated HTML
    files for an Angular application. It happens by default when we build an Angular
    SSR application using the `ng build` Angular CLI command.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: SSG 或构建时预渲染是创建 Angular 应用程序的静态生成 HTML 文件的过程。当我们使用 `ng build` Angular CLI 命令构建
    Angular SSR 应用程序时，它默认发生。
- en: The main benefit of an SSG application is that it does not require round-trip
    times between the server and client for each request. Instead, every page is served
    as static content, eliminating the time it takes to load the application, as measured
    by the TTFB CWV metric.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: SSG 应用程序的主要好处是它不需要在每个请求之间在服务器和客户端之间进行往返。相反，每个页面都作为静态内容提供，消除了 TTFB CWV 指标所衡量的应用程序加载时间。
- en: 'In the *Rendering SSR applications* section, the output of the Angular CLI
    build command included the following message:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *渲染 SSR 应用程序* 部分，Angular CLI 构建命令的输出包括以下信息：
- en: '[PRE42]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Let’s see how SSG works and what the preceding output means:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 SSG 的工作原理以及前面的输出意味着什么：
- en: 'Run the following command to build the Angular application:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来构建 Angular 应用程序：
- en: '[PRE43]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The `ng build` command will create the `dist\my-app\browser` folder.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ng build` 命令将创建 `dist\my-app\browser` 文件夹。'
- en: The preceding folder should not be confused with the `browser` folder generated
    when building a non-SSR Angular application.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的文件夹不应与构建非 SSR Angular 应用程序时生成的 `browser` 文件夹混淆。
- en: 'Navigate to the `dist\my-app` folder and open the `prerendered-routes.json`
    file:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `dist\my-app` 文件夹并打开 `prerendered-routes.json` 文件：
- en: '[PRE44]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: It lists the application routes that Angular SSG prerendered. It has also created
    one folder and `index.html` file for each route inside the `browser` folder.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 它列出了 Angular SSG 预渲染的应用程序路由。它还在 `browser` 文件夹内为每个路由创建了一个文件夹和 `index.html` 文件。
- en: Open the `products\index.html` file, and you will see that Angular has added
    all CSS and HTML files, and it has even rendered the product data as fetched from
    the Fake Store API.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `products\index.html` 文件，你会看到 Angular 已经添加了所有 CSS 和 HTML 文件，并且它甚至已经渲染了从 Fake
    Store API 获取的产品数据。
- en: To preview how SSG works, run the `ng serve` command to start the application
    and navigate to `http://localhost:4200/products` . The product list loads instantly
    without waiting for the application to fetch data from the Fake Store API.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要预览 SSG 的工作方式，运行 `ng serve` 命令以启动应用程序，并导航到 `http://localhost:4200/products`。产品列表会立即加载，无需等待应用程序从
    Fake Store API 获取数据。
- en: The `ng serve` command serves the SSG version of our application because it
    executes the `ng build` command under the hood. To disable SSG, open the `angular.json`
    file and set the `prerender` property to `false` inside the `build` section.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`ng serve` 命令提供我们应用程序的 SSG 版本，因为它在底层执行 `ng build` 命令。要禁用 SSG，打开 `angular.json`
    文件，并在 `build` 部分将 `prerender` 属性设置为 `false`。'
- en: SSG is enabled by default in Angular SSR applications and can dramatically improve
    their loading time and runtime performance. It can be particularly useful for
    low-end devices with poor performance.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular SSR 应用程序中，SSG 默认启用，可以显著提高它们的加载时间和运行时性能。对于性能较差的低端设备尤其有用。
- en: Summary
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned different ways to optimize and improve the performance
    of an Angular application. We introduced the concept of CWV and how it can affect
    a web application. We explored how to measure and improve CWV metrics using SSR
    and hydration in Angular applications. We also investigated different aspects
    of performance optimizations, such as the `NgOptimizedImage` directive and deferrable
    views. Finally, we saw an overview of SSG in Angular applications.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了不同的方法来优化和改进 Angular 应用程序的性能。我们介绍了 CWV 的概念以及它如何影响 Web 应用程序。我们探讨了如何使用
    Angular 应用程序中的 SSR 和激活来测量和改进 CWV 指标。我们还研究了性能优化的不同方面，例如 `NgOptimizedImage` 指令和可延迟视图。最后，我们概述了
    Angular 应用程序中的 SSG。
- en: Our journey with the Angular framework ends with this chapter. However, the
    possibilities of what we can do are endless. The Angular framework is updated
    with new features in each release, giving web developers a powerful tool for everyday
    development. We were delighted to have you on board, and we hope this book has
    helped you to broaden your ideas on what you can achieve with such an excellent
    tool!
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Angular框架之旅以本章结束。然而，我们能做的事情的可能性是无限的。Angular框架在每次发布中都更新了新功能，为网络开发者提供了强大的日常开发工具。我们很高兴您能加入我们，并希望这本书能帮助您拓宽对使用如此优秀工具所能实现的事情的看法！
- en: Join us on Discord
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的Discord空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/LearningAngular5e](https://packt.link/LearningAngular5e)'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/LearningAngular5e](https://packt.link/LearningAngular5e)'
- en: '![img](img/QR_Code1314413148229661500.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![img](img/QR_Code1314413148229661500.png)'
- en: '![img](img/New_Packt_Logo1.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![img](img/New_Packt_Logo1.png)'
- en: '[packt.com](https://www.packt.com)'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '[packt.com](https://www.packt.com)'
- en: Subscribe to our online digital library for full access to over 7,000 books
    and videos, as well as industry leading tools to help you plan your personal development
    and advance your career. For more information, please visit our website.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 订阅我们的在线数字图书馆，全面访问超过7,000本书籍和视频，以及领先的行业工具，帮助您规划个人发展并推进您的职业生涯。更多信息，请访问我们的网站。
- en: Why Subscribe?
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么订阅？
- en: Spend less time learning and more time coding with practical eBooks and Videos
    from over 4,000 industry professionals
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用来自4,000多名行业专业人士的实用电子书和视频，节省学习时间，多花时间编码
- en: Improve your learning with Skill Plans built especially for you
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用专为您量身定制的技能计划提高您的学习效果
- en: Get a free eBook or video every month
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每月免费获得一本电子书或视频
- en: Fully searchable for easy access to vital information
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全可搜索，便于轻松访问关键信息
- en: Copy and paste, print, and bookmark content
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制粘贴、打印和收藏内容
- en: At [www.packt.com](https://www.packt.com) , you can also read a collection of
    free technical articles, sign up for a range of free newsletters, and receive
    exclusive discounts and offers on Packt books and eBooks.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在[www.packt.com](https://www.packt.com) ，您还可以阅读一系列免费的技术文章，注册各种免费通讯，并享受Packt书籍和电子书的独家折扣和优惠。
- en: Other Books You May Enjoy
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你可能还会喜欢的其他书籍
- en: 'If you enjoyed this book, you may be interested in these other books by Packt:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这本书，你可能对Packt的这些其他书籍也感兴趣：
- en: '[![img](img/978-1-80512-553-2.jpg)](https://www.packtpub.com/en-us/product/effective-angular-9781805123002)'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '[![img](img/978-1-80512-553-2.jpg)](https://www.packtpub.com/en-us/product/effective-angular-9781805123002)'
- en: '**Effective Angular**'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '**有效的Angular**'
- en: Roberto Heckers
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: Roberto Heckers
- en: 'ISBN: 978-1-80512-553-2'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 'ISBN: 978-1-80512-553-2'
- en: Create Nx monorepos ready to handle hundreds of Angular applications
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建可以处理数百个Angular应用程序的Nx单仓库
- en: Reduce complexity in Angular with the standalone API, inject function, control
    flow, and Signals
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用独立的API、注入函数、控制流和信号在Angular中降低复杂性
- en: Effectively manage application state using Signals, RxJS, and NgRx
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用信号、RxJS和NgRx有效地管理应用程序状态
- en: Build dynamic components with projection, TemplateRef, and defer blocks
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用投影、TemplateRef和延迟块构建动态组件
- en: Perform end-to-end and unit testing in Angular with Cypress and Jest
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cypress和Jest在Angular中执行端到端和单元测试
- en: Optimize Angular performance, prevent bad practices, and automate deployments
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化Angular性能，防止不良做法，并自动化部署
- en: '[![img](img/978-1-83508-770-1.jpg)](https://www.packtpub.com/en-us/product/reactive-patterns-with-rxjs-and-angular-signals-9781835083185)'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '[![img](img/978-1-83508-770-1.jpg)](https://www.packtpub.com/en-us/product/reactive-patterns-with-rxjs-and-angular-signals-9781835083185)'
- en: '**Reactive Patterns with RxJS and Angular Signals**'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用RxJS和Angular信号构建响应式模式**'
- en: Lamis Chebbi
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: Lamis Chebbi
- en: 'ISBN: 978-1-83508-770-1'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 'ISBN: 978-1-83508-770-1'
- en: Get to grips with RxJS core concepts such as Observables, subjects, and operators
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 掌握RxJS核心概念，如Observables、subjects和operators
- en: Use the marble diagram in reactive patterns
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在响应式模式中使用宝石图
- en: Delve into stream manipulation, including transforming and combining them
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入研究流式处理，包括转换和组合它们
- en: Understand memory leak problems using RxJS and best practices to avoid them
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用RxJS和最佳实践了解内存泄漏问题，并避免它们
- en: Build reactive patterns using Angular Signals and RxJS
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Angular信号和RxJS构建响应式模式
- en: Explore different testing strategies for RxJS apps
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索针对RxJS应用程序的不同测试策略
- en: Discover multicasting in RxJS and how it can resolve complex problems
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现RxJS中的多播及其如何解决复杂问题
- en: Build a complete Angular app reactively using the latest features of RxJS and
    Angular
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用RxJS和Angular的最新功能构建完整的响应式Angular应用程序
- en: '[![img](img/978-1-80512-712-3.jpg)](https://www.packtpub.com/en-us/product/angular-for-enterprise-applications-9781805125037)'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '![img](img/978-1-80512-712-3.jpg)[(https://www.packtpub.com/en-us/product/angular-for-enterprise-applications-9781805125037)]'
- en: '**Angular for Enterprise Applications, Third Edition**'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '**《企业级应用 Angular，第三版》**'
- en: Doguhan Uluca
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 杜古汉·乌卢卡
- en: 'ISBN: 978-1-80512-712-3'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 'ISBN: 978-1-80512-712-3'
- en: Best practices for architecting and leading enterprise projects
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构和领导企业级项目的最佳实践
- en: Minimalist, value-first approach to delivering web apps
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交付 Web 应用的极简主义、价值优先方法
- en: How standalone components, services, providers, modules, lazy loading, and directives
    work in Angular
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 中独立组件、服务、提供者、模块、懒加载和指令是如何工作的
- en: Manage your app’s data reactivity using Signals or RxJS
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Signals 或 RxJS 管理你的应用数据响应性
- en: State management for your Angular apps with NgRx
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NgRx 为你的 Angular 应用进行状态管理
- en: Angular ecosystem to build and deliver enterprise applications
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Angular 生态系统构建和交付企业级应用
- en: Automated testing and CI/CD to deliver high quality apps
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化测试和 CI/CD 以交付高质量应用
- en: Authentication and authorization
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证和授权
- en: Building role-based access control with REST and GraphQL
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 REST 和 GraphQL 构建基于角色的访问控制
- en: Packt is searching for authors like you
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Packt 正在寻找像你这样的作者
- en: If you’re interested in becoming an author for Packt, please visit [authors.packtpub.com](https://authors.packtpub.com)
    and apply today. We have worked with thousands of developers and tech professionals,
    just like you, to help them share their insight with the global tech community.
    You can make a general application, apply for a specific hot topic that we are
    recruiting an author for, or submit your own idea.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对成为 Packt 的作者感兴趣，请访问 [authors.packtpub.com](https://authors.packtpub.com)
    并今天申请。我们已与成千上万的开发者和技术专业人士合作，就像你一样，帮助他们将见解分享给全球技术社区。你可以提交一个一般性申请，申请我们正在招募作者的特定热门话题，或者提交你自己的想法。
- en: Share your thoughts
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分享你的想法
- en: Now you’ve finished *Learning Angular, Fifth Edition* , we’d love to hear your
    thoughts! If you purchased the book from Amazon, please [click here to go straight
    to the Amazon review page](https://packt.link/r/1835087485) for this book and
    share your feedback or leave a review on the site that you purchased it from.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完成了 *《学习 Angular，第五版》*，我们很乐意听听你的想法！如果你在亚马逊购买了这本书，请[点击此处直接进入该书的亚马逊评论页面](https://packt.link/r/1835087485)并分享你的反馈或在该网站上留下评论。
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 你的评论对我们和整个技术社区都很重要，并将帮助我们确保我们提供高质量的内容。
