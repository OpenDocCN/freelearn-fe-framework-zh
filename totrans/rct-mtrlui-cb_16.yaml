- en: Menus - Display Actions That Pop Out
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Composing menus with state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Menu scrolling options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using menu transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing menu items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Menus are used to organize a set of commands that can be executed by the user.
    Typically, a menu has some context, such as a details screen for some resource
    in the application. Material-UI comes with a `Menu` component that enables you
    to organize commands for a given screen.
  prefs: []
  type: TYPE_NORMAL
- en: Composing menus with state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Menu` components are used to perform some actions. Think of menus as a
    combination of lists and buttons. Menus are best suited for scenarios when you
    only want to show the menu items temporarily. The visibility of the menu and the
    menu items can be controlled via the component state.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that a component in your application has a menu button that, when
    clicked, displays a menu with several options in it. The options could change
    based on other pieces of state in the application, such as permissions, or the
    state of another resource. Here''s the source to build this component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what you''ll see when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa8cf55e-2588-4753-a818-086a34dfa812.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on the MENU button, the menu is displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9c68268-cb1f-4e70-8664-b069123f4325.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by looking at the state of the `ComposingMenusWithState` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `anchorEl` state references the element that the menu is anchored to when
    the menu is open. When it''s null, the menu are closed. The `items` array contains
    the menu items. The `name` property is rendered as the menu item text. The `onClick`
    function is called when the menu item is selected. The `disabled` property disables
    the item when `true`. Next, let''s look at the `onOpen()` and `onClose()` handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user clicks on the menu button, the `anchorEl` state is set to `e.currentTarget`—this
    is the button that was clicked and is how the menu knows where to render itself.
    When the menu is closed, this is set to `null` and results in the menu being hidden.
    Finally, let''s look at the `Menu` markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `open` property expects a Boolean, which is why changing the `anchorEl`
    state results in `Boolean(anchorEL)` either opening or closing the menu as the
    user interacts with it. The `items` state is then mapped to the `MenuItem` components.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If your application has several screens you could make your own `Menu` component
    that takes care of mapping items to the `MenuItem` components. Let''s modify this
    example to build a menu abstraction and to further illustrate how menu items can
    change state as the application data changes over time. Here''s the modified example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `MyMenu` component takes the `onClose` handler, the `anchorEl` state, and
    the `items` array as properties. To show how you can update the menu item state
    and have them render (even while the menu is open), there''s a new `toggleFourth()`
    handler that''s applied to the `onClick` property of the first menu item. It''s
    applied inside of `useEffect()`, because this is the only way for `toggleFourth()`
    to get the new `items` value; when it changes, we have to redefine the function
    and then reassign it to `onClick`. This will toggle the text of the first menu
    item and the disabled state of the `Fourth` item. Here''s what the menu looks
    when it''s first opened:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b023b87-d175-44ca-a276-4d7c2582c957.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what the menu looks like after clicking on the first menu item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93b0018a-c01f-4c41-af7b-590d79afd72b.png)'
  prefs: []
  type: TYPE_IMG
- en: The text of the first item has been toggled, and the fourth item is now enabled.
    You can keep clicking on the first item to keep toggling the states of these two
    items.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Menu` demos: [https://material-ui.com/demos/menus/](https://material-ui.com/demos/menus/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Menu` API documentation: [https://material-ui.com/api/menu/](https://material-ui.com/api/menu/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Menu scrolling options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes menus have lots of options. This can pose a problem with regard to
    the height of the menu. Instead of having really long menus displayed, you can
    place a maximum height on the menu and have it scroll vertically.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you need to render a menu with more options than can reasonably
    be rendered at once on the screen. Also, one of the menu items can be in a selected
    state. Here''s some code that shows how to deal with this situation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Initially, no item is selected. Here''s what the menu looks like when it''s
    opened for the first time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c481fcdb-f151-49ff-89b6-c5f2c509076f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can scroll through the menu items. Here''s what the bottom of the menu
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd946b31-2f0f-4837-ab82-726c7e06fb68.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can make a selection that closes the menu. The selection is preserved,
    so that the next time you open the menu, you''ll see the selected item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/37fd8098-e122-4c46-995b-f6f9de59e7eb.png)'
  prefs: []
  type: TYPE_IMG
- en: When the menu has a selected item, the `Menu` component will scroll to the selected
    item automatically. You can test this by scrolling the selected item out of view
    before closing the menu then reopening it. You'll see the selected item in the
    middle of the menu.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by looking at the `menuPaper` style used in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ITEM_HEIGHT` value is an approximation of the height of each menu item.
    The multiplier (`4.5`) is an approximation of how many menu items should fit on
    the screen. Now, let''s jump into the `Menu` component markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `selected` property of each `MenuItem` component is set to `true` if the
    `selected` state matches the `index` of the current item. The `menuPaper` class
    is applied via the `PaperProps` property, but there's an `elevation8` property
    inside where the class is actually applied. This is because if you just assign
    the class via `className`, the `Menu` component will just override the `maxHeight`
    style. To get around this, you have to use a more specific CSS API. The `Paper`
    component has several elevation points—the higher the number, the more shadow
    that is applied (giving the element the appearance of being higher).
  prefs: []
  type: TYPE_NORMAL
- en: The default elevation of `Paper` is `2`. But the `Menu` component uses a `Popover`
    component to render `Paper` that changes the elevation to `8`. Long story short,
    the `elevation8` CSS API enabled you to apply styles from a class that override
    the defaults. This is how you get a scrollable menu.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Menu` demos: [https://material-ui.com/demos/menus/](https://material-ui.com/demos/menus/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Menu` API documentation: [https://material-ui.com/api/menu/](https://material-ui.com/api/menu/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using menu transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can change the transition that's used by the `Menu` component. By default,
    `Menu` uses the `Grow` transition component.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To demonstrate how to apply different transitions to the `Menu` component,
    we''ll add some transition options to Storybook for this example. You can change
    the transition component that''s used, as well as the duration of the transition
    using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You'll see the different transition options in the Storybook Knobs panel. When
    you change the transition, you'll notice the difference when you open and close
    the menu. Unfortunately, I can't capture a screenshot of these transitions.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `transition` property passed to the `UsingMenuTransitions` component comes
    from Storybook and is used to determine the transition used. Let''s take a closer
    look at the `TransitionComponent` property that''s used by `Menu` to determine
    which transition to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `transition` string maps to a Material-UI transition component that you
    can pass to `Menu`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Menu` demos: [https://material-ui.com/demos/menus/](https://material-ui.com/demos/menus/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Menu` API documentation: [https://material-ui.com/api/menu/](https://material-ui.com/api/menu/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Collapse` API documentation: [https://material-ui.com/api/collapse/](https://material-ui.com/api/collapse/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fade` API documentation: [https://material-ui.com/api/collapse/](https://material-ui.com/api/collapse/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Grow` API documentation: [https://material-ui.com/api/grow/](https://material-ui.com/api/grow/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Slide` API documentation: [https://material-ui.com/api/slide/](https://material-ui.com/api/slide/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing menu items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can change regular menu items that have `onClick` handlers into something
    more elaborate. For example, you might want a menu with links to other screens
    in your app.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you''re using `react-router` in your application to control
    the navigation from one screen to another, and you would like to use a `Menu`
    component to `render` links. Here''s an example that shows how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what you''ll see when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f07e1710-fdfb-47c3-ab7b-f32f9fa091a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what the MENU looks like when it''s opened:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f3436c8-fb11-4926-bd67-23dc7a1e7655.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Try clicking on Page 1\. This should close the MENU and change the content
    rendered below the MENU, because you just navigated to another screen, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25a82401-f003-4949-9ed0-7e67db9b4881.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The active link is reflected in the menu. Here''s what the menu looks like
    if you open it from Page 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b88c3780-f3f1-417c-9aa3-1db217741c2c.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by looking at the `NavMenuItem` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This will render a `MenuItem` component based on the current route. If the
    `to` property value matches the current route, then the `selected` property will
    be `true`—this is how the menu item appears to be selected when you open the menu.
    Next, let''s look at the `Menu` markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Instead of rendering the `MenuItem` components, you can render the `NavMenuItem`
    components. These result in links being rendered with the selected property set
    to `true` for the current route. Note that the `to` property is required here
    in order to link to another page, and the `onClick` handler is necessary in order
    to close the menu as the page transition happens.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Menu` demos: [https://material-ui.com/demos/menus/](https://material-ui.com/demos/menus/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Menu` API documentation: [https://material-ui.com/api/menu/](https://material-ui.com/api/menu/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
