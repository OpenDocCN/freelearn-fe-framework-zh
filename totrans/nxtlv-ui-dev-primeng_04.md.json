["```js\n    npm install primeng\n    ```", "```js\n// angular.json\n\"options\": {\n   ...\n   \"styles\": [\n      \"apps/chapter-04/src/styles.scss\",\n      \"node_modules/primeng/resources/themes/lara-light-blue/theme.css\",\n      \"node_modules/primeng/resources/primeng.min.css\"\n   ],\n},\n```", "```js\n// styles.scss\n/* You can add global styles to this file, and also import other style files */\n@import 'primeng/resources/themes/lara-light-blue/theme.css';\n@import 'primeng/resources/primeng.css';\n```", "```js\n// styles.scss\nbody {\n      font-family: var(--font-family);\n}\n```", "```js\n// node_modules/primeng/resources/themes/lara-light-blue/theme.css\n:root {\n   ...\n   --font-family:-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol;\n   ...\n}\n```", "```js\nnpm install primeicons\n```", "```js\n// style.scss\n@import \"primeicons/primeicons.css\";\n```", "```js\n<i class=\"pi pi-user\"></i>\n<span class=\"pi pi-user\"></span>\n```", "```js\n<p-button label=\"Click me\" />\n```", "```js\n<button pButton type=\"button\" label=\"Click me\"></button>\n```", "```js\nimport { NgModule } from '@angular/core'\nimport { ButtonModule } from 'primeng/button'\n@NgModule({\n   imports: [\n      // Other module imports\n      ButtonModule\n   ],\n   // Other module configurations\n})\nexport class AppModule { }\n```", "```js\n    <p-button label=\"Click me\" />\n    ```", "```js\n    import { Component } from '@angular/core'\n    import { ButtonModule } from 'primeng/button'\n    @Component({\n       standalone: true,\n       imports: [ButtonModule],\n       selector: 'primengbook-root',\n       template: `\n          <h1>Welcome to chapter-04</h1>\n          <p-button label=\"Click me\" />\n       `\n    })\n    export class AppComponent {}\n    AppComponent, which utilizes ButtonModule from PrimeNG. p-button is an indicator that it’s a PrimeNG button component.\n    ```", "```js\n <p-button\n   label=\"Click me\"\n   icon=\"pi pi-check\"\n   iconPos=\"right\"\n   [disabled]=\"isDisabled\"\n/>\n```", "```js\n<button\n   pButton\n   label=\"Click me!\"\n   [loading]=\"loading\"\n   (click)=\"onClickEvent()\"\n></button>\n...\nonClickEvent() {\n   this.loading = true\n   setTimeout(() => {\n      this.loading = false\n   }, 2000)\n}\n```", "```js\n// shared/providers/primeng.provider.ts\nimport { APP_INITIALIZER } from '@angular/core'\nimport { PrimeNGConfig } from 'primeng/api'\nconst factory = (primengConfig: PrimeNGConfig) => {\n   return () => {\n      primengConfig.ripple = true\n      primengConfig.zIndex = {\n         modal: 1100,      // dialog, sidebar\n         overlay: 1000,   // dropdown, overlay panel\n         menu: 1000,       // overlay menus\n         tooltip: 1100,   // tooltip\n      }\n      // more configuration options\n   }\n}\nexport const primeNgProvider = {\n   provide: APP_INITIALIZER,\n   useFactory: factory,\n   deps: [PrimeNGConfig],\n   multi: true,\n}\n```", "```js\n// app.config.ts\nimport { ApplicationConfig } from '@angular/core'\nimport { primeNgProvider } from './shared/providers'\nexport const appConfig: ApplicationConfig = {\n   providers: [primeNgProvider],\n}\n```", "```js\n// app.config.ts\nimport { ApplicationConfig } from '@angular/core'\nimport { provideAnimations } from '@angular/platform-browser/animations'\nexport const appConfig: ApplicationConfig = {\n   providers: [\n      ...\n      provideAnimations()\n   ],\n}\n```", "```js\n// app.config.ts\nimport { ApplicationConfig } from '@angular/core'\nimport { provideNoopAnimations } from '@angular/platform-browser/animations'\nexport const appConfig: ApplicationConfig = {\n   providers: [\n      ...\n      provideNoopAnimations()\n   ],\n}\n```", "```js\nimport { CommonModule } from '@angular/common'\nimport { Component } from '@angular/core'\nimport { ButtonModule } from 'primeng/button'\n@Component({\n   selector: 'primengbook-button-override-styles',\n   standalone: true,\n   imports: [CommonModule, ButtonModule],\n   template: `\n      <h2>Button Override Styles</h2>\n      <button pButton type=\"button\" label=\"Custom styles\"></button>\n   `,\n   styles:\n      `\n         .p-button {\n            background-color: #696cff;\n            border-radius: 5px;\n         }\n      `,\n})\nexport class ButtonOverrideStylesComponent {}\n```", "```js\n     $primary-color: #5d738a;\n    .p-button {\n       background-color: $primary-color;\n    }\n    ```", "```js\n    nav {\n       ul {\n          margin: 0;\n          padding: 0;\n          list-style: none;\n       }\n       li {\n          display: inline;\n          margin-right: 5px;\n       }\n    }\n    ```", "```js\n    @mixin box-shadow($x, $y, $blur, $color) {\n          -webkit-box-shadow: $x $y $blur $color;\n              -moz-box-shadow: $x $y $blur $color;\n                      box-shadow: $x $y $blur $color;\n    }\n    button {\n          @include box-shadow(0, 0, 5px, #ccc);\n    }\n    ```", "```js\n    button {\n          -webkit-box-shadow: 0 0 5px #ccc;\n              -moz-box-shadow: 0 0 5px #ccc;\n                      box-shadow: 0 0 5px #ccc;\n    }\n    ```", "```js\n// styles.scss\n@import 'primeng/resources/themes/lara-light-blue/theme.css';\n@import 'primeng/resources/primeng.css';\n@import 'primeicons/primeicons.css';\n:root {\n   --font-family: ui-serif, Georgia, Cambria, 'Times New Roman', Times, serif;\n}\n// Define a variable for primary color\n$primary-color: #5d738a;\n$text-color: #f8f4ef;\n// Define box shadow\n@mixin box-shadow($x, $y, $blur, $color) {\n      -webkit-box-shadow: $x $y $blur $color;\n          -moz-box-shadow: $x $y $blur $color;\n                  box-shadow: $x $y $blur $color;\n}\n.p-button {\n   background-color: $primary-color;\n   color: $text-color;\n   @include box-shadow(0, 0, 5px, #ccc);\n}\n```", "```js\n// package.json\n...\n\"dependencies\": {\n      \"@angular/animations\": \"17.0.6\",\n      \"@angular/cdk\": \"17.0.3\",\n      \"@angular/common\": \"17.0.6\",\n      \"@angular/compiler\": \"17.0.6\",\n      \"@angular/core\": \"17.0.6\",\n      \"@angular/forms\": \"17.0.6\",\n      \"@angular/platform-browser\": \"17.0.6\",\n      \"@angular/platform-browser-dynamic\": \"17.0.6\",\n      \"@angular/router\": \"17.0.6\",\n      \"install\": \"^0.13.0\",\n      \"primeflex\": \"^3.3.1\",\n      \"primeicons\": \"^6.0.1\",\n      \"primeng\": \"17.0.0\",\n      \"rxjs\": \"~7.8.0\",\n      \"tslib\": \"^2.3.0\",\n      \"zone.js\": \"0.14.2\"\n},\n...\n```", "```js\nnpm install primeng@17.0.0\n```", "```js\n@Component({\n   selector: 'primengbook-button-override-styles',\n   standalone: true,\n   imports: [CommonModule],\n   template: `\n      <h2>Button Override Styles</h2>\n      <button pButton type=\"button\" label=\"Custom styles\"></button>\n   `\n})\nexport class ButtonOverrideStylesComponent {}\n```", "```js\nimport { ButtonModule } from 'primeng/button'\n...\n@Component({\n   selector: 'primengbook-button-override-styles',\n   standalone: true,\n   imports: [CommonModule, ButtonModule dependency is correctly added to the imports array in the component.\n\t\t\tIncorrect configuration or setup\n\t\t\tSometimes, issues arise due to incorrect configuration or setup of PrimeNG features. For example, if you’re using PrimeNG’s animation features, ensure that you have added the `provideAnimations` or `provideNoopAnimations` function as required.\n\t\t\tAdditionally, verify that any necessary configuration options are set correctly.\n\t\t\tDo refer to the PrimeNG documentation for detailed instructions on setting up and configuring specific features: [https://primeng.org/installation](https://primeng.org/installation)\n\t\t\tInspecting console errors and warnings\n\t\t\tWhen facing integration issues, the browser’s developer console is an invaluable tool for debugging. It provides error messages, warnings, and additional information that can help you identify the root cause of the problem. Inspect the console for any error messages related to PrimeNG components or modules. These error messages often provide valuable insights into the issue at hand. Let’s have a look at the following error:\n\t\t\t![Figure 4.7 – Sample error in the console log](img/B18805_04_07.jpg)\n\n\t\t\tFigure 4.7 – Sample error in the console log\n\t\t\tBased on the error displayed in the console, the issue appears to be on line 14 in the `app.component.ts` file. The error message indicates that `p-button` is not an Angular component and suggests that you add it to the `imports` array or include `CUSTOM_ELEMENTS_SCHEMA` in the `schemas` array. To resolve this issue, you should add the PrimeNG `ButtonModule` dependency to the component’s `imports` array.\n\t\t\tUsing the Angular CLI\n\t\t\tThe Angular CLI offers various helpful commands that can aid in troubleshooting. This includes using the `ng build` command to check for build errors or the `ng serve` command to run your application and observe any runtime issues.\n\t\t\tThe CLI also provides options for generating component and module schematics, which can assist in setting up PrimeNG components correctly:\n\n```", "```js\n\n\t\t\tThe previous output from the Angular CLI indicates that we forgot to import `ButtonModule` before using `p-button`.\n\t\t\tSeeking help from the community\n\t\t\tIn case you encounter an issue that seems difficult to resolve, don’t hesitate to seek help from the developer community. Online forums, discussion boards, and social media groups dedicated to Angular and PrimeNG are excellent resources for getting assistance. Many experienced developers are willing to share their insights and provide guidance on troubleshooting specific integration issues.\n\t\t\tYou can find the dedicated PrimeNG discussions at [https://github.com/orgs/primefaces/discussions](https://github.com/orgs/primefaces/discussions).\n\t\t\tSummary\n\t\t\tIn this chapter, we explored the process of integrating PrimeNG into an Angular project. We learned how to add PrimeNG components to our application, configure PrimeNG modules and dependencies, work with PrimeNG component APIs and directives, customize component styles and themes, and troubleshoot common integration issues. By successfully integrating PrimeNG, we can leverage its rich set of UI components and features to enhance our Angular applications.\n\t\t\tThrough the chapter, we gained valuable knowledge and skills that are essential for professional developers. Integrating PrimeNG into an Angular project opens up a world of possibilities for creating feature-rich and visually appealing web applications. By harnessing the power of PrimeNG, we can save development time and effort by utilizing pre-built, customizable components, and tapping into advanced functionalities.\n\t\t\tIn the next chapter, we will delve into the realm of input components and form controls provided by PrimeNG. We will explore how to work with text inputs, checkboxes, radio buttons, dropdowns, and more, enabling us to create interactive and user-friendly forms. Additionally, we will dive into form validation techniques and learn how to handle user input effectively.\n\n```"]