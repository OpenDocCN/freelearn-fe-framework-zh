- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up React and TypeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to use both React and TypeScript together.
    We will start by going through the steps for creating a React and TypeScript project
    using a tool called webpack. Then we will create another project, but this time
    using a tool called Create React App to show you how to speed up the process of
    creating a React and TypeScript project.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will then cover how to use TypeScript to make React props and states
    type-safe, extending the alert component built in the first chapter. Lastly, we
    will learn how to debug your app with React’s DevTools.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project with webpack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a project with Create React App
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a React and TypeScript component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the following technologies in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js** and **npm**: React and TypeScript are dependent on these. You can
    install them from [https://nodejs.org/en/download/](https://nodejs.org/en/download/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code**: We’ll use this editor to write code and execute terminal
    commands. You can install it from [https://code.visualstudio.com/](https://code.visualstudio.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the code snippets in this chapter can be found online at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter3](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter3).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project with webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up a React and TypeScript project is tricky because both JSX and TypeScript
    code needs to be transpiled into JavaScript. In this section, we will cover how
    to set up a React and TypeScript project step by step, with the help of a tool
    called webpack.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing webpack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webpack is a tool that bundles JavaScript source code files together. It can
    also bundle CSS and images. It can run other tools such as Babel to transpile
    React and the TypeScript type checker as it scans the files. It is a mature and
    incredibly popular tool used in the React community that powers many React projects.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack is incredibly flexible but, unfortunately, it requires a lot of configuration.
    We will witness this as we create our project with webpack.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to understand that webpack isn’t a project creation tool. For
    example, it won’t install React or TypeScript – we have to do that separately.
    Instead, webpack brings tools such as React and TypeScript together once installed
    and configured. So, we won’t use webpack until later in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the folder structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will start by creating a simple folder structure for the project. The structure
    will separate the project’s configuration files from the source code. Carry out
    the following steps to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio Code in the folder where you want the project to be.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `src`. A folder can be created by right-clicking in the `src` is short
    for source code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, the `src` folder will hold all the source code for the app. The project
    configuration files will be placed at the root of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will define the critical information about the project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating package.json
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `package.json` file defines our project name, description, npm scripts,
    dependent npm modules, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `package.json` file at the root of the project with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This file contains minimal information at the moment. However, it will eventually
    contain other details, such as React and TypeScript as the app’s dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'More information can be found on `package.json` at the following link: [https://docs.npmjs.com/cli/v8/configuring-npm/package-json](https://docs.npmjs.com/cli/v8/configuring-npm/package-json).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will add the web page that will host the React app.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a web page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An HTML page is going to host the app. In the `src` folder, create a file called
    `index.html` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This code snippet can be copied and pasted from [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/src/index.html](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/src/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: The React app will be injected into the `div` element with an `id` attribute
    value of `"root"`. We will cover the injection of the React app in a later section,
    *Adding React*.
  prefs: []
  type: TYPE_NORMAL
- en: Adding TypeScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we will install TypeScript into the project. To do this, carry out the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by opening the Visual Studio Code terminal by opening the **Terminal**
    menu and clicking **New Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We know from the last chapter that using `npm install` without specifying any
    options will install the dependencies listed inside `package.json`. The `install`
    command has options for the specific packages to be installed that aren’t in `package.json`
    yet. Execute the following command in the terminal to install `typescript`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have also included a `--save-dev` option to specify that `typescript` should
    be installed as a **development-only** dependency. This is because TypeScript
    is only required during development and not at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the command has finished, open `package.json`. You will see that `typescript`
    is now listed as a development dependency in the `devDependencies` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the version (`4.6.4`) of `typescript` in the preceding code snippet
    will probably be different in your example. This is because `npm install` installs
    the latest version of the dependency unless a version is specified in the command.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will create a TypeScript configuration file. Note that we aren’t going
    to configure TypeScript to do any transpilation – we will use Babel for that,
    which is covered later. So, the TypeScript configuration will be focused on type
    checking.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To do this, create a file called `tsconfig.json` in the `root` folder and enter
    the following content into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This code snippet can be copied and pasted from [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/tsconfig.json](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/tsconfig.json).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an explanation of each setting that has been configured that wasn’t
    explained in the last chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting `noEmit` to `true` suppresses the TypeScript compiler from doing any
    transpilation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Setting `allowSyntheticDefaultImports` and `esModuleInterop` to `true` allows
    React to be imported as a default import, like the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Without these settings set to `true`, React would have to be imported like
    this:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Setting `forceConsistentCasingInFileNames` to `true` enables the type-checking
    process to check the casing of referenced filenames in import statements are consistent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on the TypeScript compiler options, see the following
    link: [https://www.typescriptlang.org/docs/handbook/compiler-options.html](https://www.typescriptlang.org/docs/handbook/compiler-options.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding React
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we will install React and its TypeScript types into the project. We will
    then add a React root component. To do this, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command in the terminal to install React:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reacts comes in two libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: The core library is called `react`, which is used in all variants of React.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The specific React variant, which is the variant used to build web apps, is
    called `react-dom`. An example of a different variant would be the React Native
    variant used to build mobile apps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'React doesn’t include TypeScript types – instead, they are in a separate npm
    package. Let’s install these now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The root component will be in a file called `index.tsx` in the `src` folder.
    Create this file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code snippet can be copied and pasted from [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/src/index.tsx](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/src/index.tsx).
  prefs: []
  type: TYPE_NORMAL
- en: The structure of this file is similar to the `index.js` file in the alert component
    project from the first chapter. It injects the React app into a DOM element with
    an `id` of `'root'`. The app is straightforward – it displays a heading called
    **My React and** **TypeScript App!**.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the file extension for `index` is `.tsx` rather than `.js`. This
    allows Babel and TypeScript to detect TypeScript files containing JSX in the transpilation
    and type-checking processes. A `.ts` extension can be used for TypeScript code
    that doesn’t contain any JSX.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, notice `as HTMLElement` in the call to `createRoot`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This is called a `HTMLElement | null` because `document.getElementById` may
    not find an element and return `null`. However, we are confident that the element
    will be found because we specified it in the `index.html` file, so it is safe
    to narrow the type to `HTMLElement` using a type assertion.
  prefs: []
  type: TYPE_NORMAL
- en: React is now installed in the project, and the project also contains a simple
    React app.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Babel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned earlier, Babel will transpile both React and TypeScript code into
    JavaScript in this project. Carry out the following steps to install and configure
    Babel:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by installing the core Babel library using the following command in Visual
    Studio Code’s terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Babel is installed as a development dependency because it is only needed during
    development to transpile code and not when the app runs.
  prefs: []
  type: TYPE_NORMAL
- en: 'A shortened version of this command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '`i` is short for `install`, and `-D` is short for `--save-dev`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, install a Babel plugin called `@babel/preset-env` that allows the latest
    JavaScript features to be used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, install a Babel plugin called `@babel/preset-react` that enables React
    code to be transformed into JavaScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Similarly, install a Babel plugin called `@babel/preset-typescript` that enables
    TypeScript code to be transformed into JavaScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last two plugins to install allow the use of the async and await features
    in JavaScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Babel can be configured in a file called `.babelrc.json`. Create this file
    at the root of the project with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code snippet can be found at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/.babelrc.json](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/.babelrc.json).
  prefs: []
  type: TYPE_NORMAL
- en: The preceding configuration tells Babel to use the installed plugins. Babel
    is now installed and configured.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about Babel, see the following link: [https://babeljs.io/](https://babeljs.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will glue everything together with webpack.
  prefs: []
  type: TYPE_NORMAL
- en: Adding webpack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Webpack is a popular tool that primarily bundles JavaScript source code files
    together. It can run other tools, such as Babel, as it scans the files. So, we
    will use webpack to scan all the source files and transpile them into JavaScript.
    The output from the webpack process will be a single JavaScript bundle that is
    referenced in `index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing webpack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Carry out the following steps to install webpack and its associated libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by installing webpack using the following command in the terminal in
    Visual Studio Code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This installs the core webpack library as well as its command-line interface.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack has TypeScript types in the `webpack` package, so we don’t need to install
    them separately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, run the following command to install webpack’s development server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Webpack’s development server is used during developments to host the web app
    and automatically updates as changes are made to the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'A webpack plugin is required to allow Babel to transpile the React and TypeScript
    code into JavaScript. This plugin is called `babel-loader`. Install this using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Webpack can create the `index.html` file that hosts the React app. We want
    webpack to use the `index.html` file in the `src` folder as a template and add
    the React app’s bundle to it. A plugin called `html-webpack-plugin` is capable
    of doing this. Install this plugin using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Webpack and its associated libraries are now installed.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring webpack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, we will configure webpack to do everything we need. Separate configurations
    for development and production can be created because the requirements are slightly
    different. However, we will focus on a configuration for development in this chapter.
    Carry out the following steps to configure webpack:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install a library called `ts-node`, which allows the configuration to
    be defined in a TypeScript file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can add the development configuration file. Create a file called `webpack.dev.config.ts`
    in the project root. The code to go in this file is lengthy and can be copied
    and pasted from the following link: [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/webpack.dev.config.ts](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/webpack.dev.config.ts).
    In the following steps, we will explain the different parts of this file.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The configure file starts with various import statements and a type for the
    configuration object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s review the most important points:'
  prefs: []
  type: TYPE_NORMAL
- en: The `path` node library will tell webpack where to place the bundle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HtmlWebpackPlugin` will be used to create `index.html`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The webpack configuration TypeScript types come from both the `webpack` and
    `webpack-dev-server` packages. So, we combine them using an intersect type, creating
    a type called `Configuration`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The configuration object is then defined as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s review the most important points here:'
  prefs: []
  type: TYPE_NORMAL
- en: The `mode` property tells webpack the configuration is for development, meaning
    that the React development tools are included in the bundle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `output.publicPath` property is the root path in the app, which is important
    for deep linking in the dev server to work correctly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `entry` property tells webpack where the React app’s entry point is, which
    is `index.tsx` in our project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webpack expects the configuration object to be a default export, so we export
    the `config` object as a default export
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Further configuration is highlighted by the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `module` property informs webpack how different modules should be processed.
    We need to tell webpack to use `babel-loader` for files with `.js`, `.ts`, and
    `.``tsx` extensions.
  prefs: []
  type: TYPE_NORMAL
- en: The `resolve.extensions` property tells webpack to look for TypeScript files
    and JavaScript files during module resolution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, a couple of plugins are defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As mentioned earlier, `HtmlWebpackPlugin` creates the HTML file. It has been
    configured to use `index.html` in the `src` folder as a template.
  prefs: []
  type: TYPE_NORMAL
- en: '`HotModuleReplacementPlugin` allows modules to be updated while an application
    is running, without a full reload.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, the following properties complete the configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `devtool` property tells webpack to use full inline source maps, which allow
    the original source code to be debugged before transpilation.
  prefs: []
  type: TYPE_NORMAL
- en: The `devServer` property configures the webpack development server. It configures
    the web server root to be the `dist` folder and to serve files on port `4000`.
    Now, `historyApiFallback` is required for deep links to work, and we have also
    specified to open the browser after the server has been started.
  prefs: []
  type: TYPE_NORMAL
- en: The development configuration is now complete. But before we try to run the
    app in development mode, we need to create an npm script to run webpack.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open `package.json` and add a `scripts` section with a `start` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can run the app in development mode by running the following command
    in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `npm run` command executes a script in the `scripts` section of `package.json`.
    The `start` script is commonly used to run a program in development mode. It is
    so common that npm recognizes this without the `run` part. So, the command can
    be shortened to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'After a few seconds, the app opens in the default browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – The app running in a browser in development mode](img/B19051_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – The app running in a browser in development mode
  prefs: []
  type: TYPE_NORMAL
- en: 'Leave the app running and open the `index.tsx` file. Change the content of
    the `h1` element to something slightly different:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the file is saved, notice that the running app automatically refreshes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – The app is automatically refreshed](img/B19051_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – The app is automatically refreshed
  prefs: []
  type: TYPE_NORMAL
- en: 'That completes the setup of the React and TypeScript project using webpack.
    Here’s a recap of the key points of the setup:'
  prefs: []
  type: TYPE_NORMAL
- en: An HTML file is required to host the React app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webpack transpiles the app’s React and TypeScript code into JavaScript with
    the help of Babel and then references it in the HTML file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webpack has a development server that automatically refreshes the app as we
    write code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'More information about webpack is available at the following link: [https://webpack.js.org/](https://webpack.js.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: That was an incredible amount of work to set up a React and TypeScript app,
    and it only does a fraction of what we will need to build a real app. For example,
    CSS can’t be used, and the setup doesn’t support unit testing. Luckily, there
    is a much easier way to create React and TypeScript projects, which we will learn
    in the next section. What you have learned in this section is really important
    though, because the tool we are about to use also uses webpack under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project with Create React App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create React App is a popular tool for creating React projects. It is based
    on webpack, so the knowledge from the last section will give you an understanding
    of how Create React App works. In this section, we will use Create React App to
    create a React and TypeScript project.
  prefs: []
  type: TYPE_NORMAL
- en: Using Create React App
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike the setup in the last section, Create React App generates a React and
    TypeScript project with all the common tools we will likely require, including
    CSS and unit testing support.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use Create React App, open Visual Studio Code in a blank folder of your
    choice and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '`npx` allows npm packages to temporarily be installed and run. It is a common
    method of running project scaffolding tools such as Create React App.'
  prefs: []
  type: TYPE_NORMAL
- en: '`create-react-app` is the package for the Create React App tool that creates
    the project. We have passed it the app name, `myapp`. We have also specified that
    the `typescript` template should be used to create the project.'
  prefs: []
  type: TYPE_NORMAL
- en: It takes a minute or so for the project to be created, but this is much quicker
    than creating it manually with webpack!
  prefs: []
  type: TYPE_NORMAL
- en: When the command has finished creating the project, reopen the project in Visual
    Studio Code in the `myapp` folder. Note that your directory might be slightly
    different if you called the app something different. It is important to be in
    the app name folder; otherwise, the dependencies may be installed in the wrong
    location.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will understand what linting is and add an extension for it into Visual
    Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: Adding linting to Visual Studio Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Linting** is the process of checking code for potential problems. It is common
    practice to use linting tools to catch problems early in the development process
    as code is written. **ESLint** is a popular tool that can lint React and TypeScript
    code. Fortunately, Create React App has already installed and configured ESLint
    in our project.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Editors such as Visual Studio Code can be integrated with ESLint to highlight
    potential problems. Carry out the following steps to install an ESLint extension
    into Visual Studio Code:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up the **Extensions** area in Visual Studio Code. The **Extensions** option
    is in the **Preferences** menu in the **File** menu on Windows *or* in the **Preferences**
    menu in the **Code** menu on a Mac.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A list of extensions will appear on the left-hand side and the search box above
    the extensions list can be used to find a particular extension. Enter `eslint`
    into the extensions list search box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.3 – The Visual Studio Code ESLint extension](img/B19051_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – The Visual Studio Code ESLint extension
  prefs: []
  type: TYPE_NORMAL
- en: An extension by Microsoft called ESLint should appear at the top of the list.
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Install** button to install the extension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we need to make sure the ESLint extension is configured to check React
    and TypeScript. So, open the **Settings** area in Visual Studio Code. The **Settings**
    option is in the **Preferences** menu in the **File** menu on Windows or in the
    **Preferences** menu in the **Code** menu on a Mac.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the settings search box, enter `eslint: probe` and select the **Workspace**
    tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Visual Studio Code ESLint Probe settings](img/B19051_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – Visual Studio Code ESLint Probe settings
  prefs: []
  type: TYPE_NORMAL
- en: This setting defines the languages to use when ESLint checks code.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that **typescript** and **typescriptreact** are on the list. If not,
    add them using the **Add** **Item** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The ESLint extension for Visual Studio Code is now installed and configured
    in the project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about ESLint, see the following link: [https://eslint.org/](https://eslint.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will add automatic code formatting to the project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding code formatting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next tool we will set up automatically formats code. Automatic code formatting
    ensures code is consistently formatted, which helps its readability. Having consistently
    formatted code also helps developers see the important changes in a code review
    – rather than differences in formatting.
  prefs: []
  type: TYPE_NORMAL
- en: '**Prettier** is a popular tool capable of formatting React and TypeScript code.
    Unfortunately, Create React App doesn’t install and configure it for us. Carry
    out the following steps to install and configure Prettier in the project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Prettier using the following command in the terminal in Visual Studio
    Code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Prettier is installed as a development dependency because it is only used during
    development time and not at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prettier has overlapping style rules with ESLint, so install the following
    two libraries to allow Prettier to take responsibility for the styling rules from
    ESLint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`eslint-config-prettier` disables conflicting ESLint rules, and `eslint-plugin-prettier`
    is an ESLint rule that formats code using Prettier.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The ESLint configuration needs to be updated to allow Prettier to manage the
    styling rules. Create React App allows ESLint configuration overrides in an `eslintConfig`
    section in `package.json`. Add the Prettier rules to the `eslintConfig` section
    in `package.json` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Prettier can be configured in a file called `.prettierrc.json`. Create this
    file with the following content in the root folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have specified the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Lines wrap at 100 characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String qualifiers are single quotes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Semicolons are placed at the end of statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The indentation level is two spaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A trailing comma is added to multi-line arrays and objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Existing line endings are maintained
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'More information on the configuration options can be found at the following
    link: [https://prettier.io/docs/en/options.html](https://prettier.io/docs/en/options.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Prettier is now installed and configured in the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Visual Studio Code can integrate with Prettier to automatically format code
    when source files are saved. So, let’s install a Prettier extension into Visual
    Studio Code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `prettier` into the extensions list search box. An extension called
    **Prettier – Code formatter** should appear at the top of the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.5 – The Visual Studio Code Prettier extension](img/B19051_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – The Visual Studio Code Prettier extension
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Install** button to install the extension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, open the **Settings** area in Visual Studio Code. Select the **Workspace**
    tab and make sure the **Format On Save** option is ticked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Visual Studio Code “Format On Save” setting](img/B19051_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – Visual Studio Code “Format On Save” setting
  prefs: []
  type: TYPE_NORMAL
- en: This setting tells Visual Studio Code to automatically format code in files
    that are saved.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one more setting to set. This is the default formatter that Visual
    Studio Code should use to format code. Click the **Workspace** tab and make sure
    **Default Formatter** is set to **Prettier -** **Code formatter**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Setting Default Formatter to Prettier - Code formatter](img/B19051_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – Setting Default Formatter to Prettier - Code formatter
  prefs: []
  type: TYPE_NORMAL
- en: The Prettier extension for Visual Studio Code is now installed and configured
    in the project. Next, we will run the app in development mode.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the app in development mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to start the app in development mode:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create React App has already created an npm script called `start`, which runs
    the app in development mode. Run this script in the terminal as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After a few seconds, the app will appear in the default browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – The React app running in development mode](img/B19051_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – The React app running in development mode
  prefs: []
  type: TYPE_NORMAL
- en: If your app reports Prettier formatting issues, open the file in question and
    save it. This will correctly format the file and resolve the errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `App.tsx` and change the **Learn React** link to **Learn React** **and
    TypeScript**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the file is saved, the running app is automatically refreshed with the
    updated link text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – The updated React app](img/B19051_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – The updated React app
  prefs: []
  type: TYPE_NORMAL
- en: 'Experiment with the code in `App.tsx`. Add a used variable and pass an invalid
    prop in a JSX element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As expected, the problems are caught and reported in Visual Studio Code. The
    issues are also reported in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – Problems caught by Visual Studio Code](img/B19051_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – Problems caught by Visual Studio Code
  prefs: []
  type: TYPE_NORMAL
- en: Remove the invalid code and stop the app from running before continuing. The
    shortcut key for stopping the app is *Ctrl* + *C*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have now seen how Create React App provides a productive development experience.
    Next, we will produce a production build.
  prefs: []
  type: TYPE_NORMAL
- en: Producing a production build
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to produce a build of the app that can be deployed
    into production:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create React App has already created an npm script called `build` that produces
    all the artifacts for deployment to production. Run this script in the terminal
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After a few seconds, the deployment artifacts are placed in a `build` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `build` folder – it contains many files. The root file is `index.html`,
    which references the other JavaScript, CSS, and image files. All the files are
    optimized for production with whitespace removed and the JavaScript minified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This completes the production build and the React and TypeScript project set
    up with Create React App. Here’s a recap of the key points of the setup:'
  prefs: []
  type: TYPE_NORMAL
- en: The `npx` tool can execute the Create React App library, specifying the `typescript`
    template to create a React and TypeScript project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create React App sets up many useful project features, such as linting, CSS
    support, and SVG support.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create React App also sets up npm scripts to run the app in development mode
    and produce a production build.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One feature that Create React App doesn’t set up is automatic code formatting.
    However, Prettier can be installed and configured manually to provide this capability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep this project safe because we will continue to use it in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn how to create a React component that uses TypeScript for
    type checking.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a React and TypeScript component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B19051_01.xhtml#_idTextAnchor015)*, Introducing React*, we
    built an alert component using React. In this section, we will use TypeScript
    to make the component strongly typed and experience the benefits. We start by
    adding a type to the alert component’s props and then experiment with defining
    a type for its state. After completing the alert component, we will inspect the
    component using React’s DevTools.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a props type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will continue using the React and TypeScript project created in the last
    section with Create React App. Take the following steps to add a strongly typed
    version of the alert component:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code if it isn’t already open. Make sure you
    open the project in the app name folder so that `package.json` is at the root.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file in the `src` folder called `Alert.tsx`. Paste in the JavaScript
    version of the alert component, which can be found on GitHub at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter1/Section7-Using-events/Alert.js](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter1/Section7-Using-events/Alert.js).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that type errors are reported on some of the props because they can only
    be inferred as having the `any` type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following type just above the component. This will be the type for
    the component props:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `heading` and `children` props are required but the rest of the props are
    optional.
  prefs: []
  type: TYPE_NORMAL
- en: The `children` prop is given a special type called `React.ReactNode`. This allows
    it to accept JSX elements as well as strings.
  prefs: []
  type: TYPE_NORMAL
- en: The name of the type can be anything, but it is common practice to call it `Props`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember from the *Creating interfaces* section in [*Chapter 2*](B19051_02.xhtml#_idTextAnchor044)*,
    Introducing TypeScript*, that the interface syntax can be used to create types
    as an alternative to type aliases. An interface version of the `Props` type is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned in the last chapter, it is largely personal preference whether
    you choose type aliases or interfaces for the type of component props.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, assign the `Props` type to the alert component after the destructed parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The alert props are now strongly typed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `App.tsx` and replace the header element with the alert component. Don’t
    forget to import the alert component before using it in the JSX. Don’t pass any
    props into `Alert` to test the type checking:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As expected, a type error is raised on `Alert`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Type error on the Alert component](img/B19051_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.11 – Type error on the Alert component
  prefs: []
  type: TYPE_NORMAL
- en: 'Pass in a `header` prop to `Alert`, and give it some content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The type errors will disappear.
  prefs: []
  type: TYPE_NORMAL
- en: Start the app in development mode if not already running (`npm start`). After
    that, the app component appears on the page as expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will learn how to explicitly give the React component state a type.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a state type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to experiment with the `visible` state type in the alert
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Alert.tsx` and hover over the `visible` state variable to determine its
    inferred type. It has been inferred to be `boolean` because it has been initialized
    with the `true` value. The `boolean` type is precisely what we want.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As an experiment, remove the initial value of `true` passed into `useState`.
    Then, hover over the `visible` state variable again. It has been inferred to be
    `undefined` because no default value has been passed into `useState`. This obviously
    isn’t the type we want.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Sometimes, the `useState` type isn’t inferred to be the type we want, like
    in the previous step. In these cases, the type of the state can be explicitly
    defined using a `useState`. Explicitly give the `visible` state a `boolean` type
    by adding the following generic argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A generic argument is like a regular function argument but defines a type for
    the function. A generic argument is specified using angled brackets after the
    function name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Restore the `useState` statement to what it originally was, with it initialized
    as `true` and no explicit type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Stop the app from running by pressing *Ctrl* + *C*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In summary, always check the inferred state type from `useState` and use its
    generic argument to explicitly define the type if the inferred type is not what
    is required.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn how to use the React browser development tools.
  prefs: []
  type: TYPE_NORMAL
- en: Using React DevTools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'React DevTools is a browser extension available for Chrome and Firefox. The
    tools allow React apps to be inspected and debugged. The links to the extensions
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chrome: [https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi/](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Firefox: [https://addons.mozilla.org/en-GB/firefox/addon/react-devtools/](https://addons.mozilla.org/en-GB/firefox/addon/react-devtools/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To install the extension, click the **Add to Chrome** or **Add to Firefox**
    button. You will need to reopen the browser for the tools to be available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps to explore the tools:'
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio Code, start the app in development mode by running `npm start`
    in a terminal. After a few seconds, the app will appear in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the browser’s development tools by pressing *F12*. React DevTools adds
    two panels called **Components** and **Profiler**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we will explore the **Components** panel, so select this panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.12 – The React DevTools Components panel](img/B19051_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.12 – The React DevTools Components panel
  prefs: []
  type: TYPE_NORMAL
- en: The React component tree appears on the left-hand side. Selecting a React component
    reveals the current props and state values on the right-hand side.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the state isn’t named – it has a generic name, **State**. Click
    the wand icon at the right of the **hooks** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The name of the state now appears in brackets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – State variable name after wand is clicked](img/B19051_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.13 – State variable name after wand is clicked
  prefs: []
  type: TYPE_NORMAL
- en: 'In Visual Studio Code, open `App.tsx` and pass the `closable` prop to `Alert`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The app refreshes and the close button appears.
  prefs: []
  type: TYPE_NORMAL
- en: Click the close button and notice that the `visible` state changes to `false`
    in DevTools.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Components** panel is useful when debugging a large component tree to
    quickly understand the values of the props and state.
  prefs: []
  type: TYPE_NORMAL
- en: Refresh the browser so that the alert appears again. While still in the **Components**
    panel in React DevTools, open the settings by clicking the cog icon. Tick the
    **Highlight updates when components render.** option in the **General** section,
    if not already ticked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Re-render highlight option](img/B19051_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.14 – Re-render highlight option
  prefs: []
  type: TYPE_NORMAL
- en: This option will highlight when a component is re-rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we try the re-render highlight, open `Alert.tsx` and update it to render
    `visible` state is `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Before this change, the re-render highlight would have no element to highlight.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click the close button on the alert in the browser. The re-rendered alert
    component will be highlighted with a green border:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Re-render highlight](img/B19051_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.15 – Re-render highlight
  prefs: []
  type: TYPE_NORMAL
- en: This completes our exploration of the **Components** panel. Press *F5* to refresh
    the browser so that the alert component reappears before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will explore the **Profiler** panel, so select this panel. This tool
    allows interactions to be profiled, which is useful for tracking performance problems.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Start profiling** option, which is the blue circle icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the close button in the alert.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Stop profiling** option, which is the red circle icon. A timeline
    appears of all the component re-renders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.16 – React DevTools components](img/B19051_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.16 – React DevTools components
  prefs: []
  type: TYPE_NORMAL
- en: This shows that `Alert` was re-rendered when the close button was clicked, taking
    0.7 milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: This tool is helpful in quickly spotting the slow components for a particular
    user interaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'This completes our exploration of React DevTools. Undo the change we made to
    the `Alert` component so that it renders `null` again when invisible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That completes this section. Here’s a recap:'
  prefs: []
  type: TYPE_NORMAL
- en: A type can be added to component props to make them type-safe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A state can be inferred from its initial value but can be explicitly defined
    using a generic argument on `useState`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React DevTools can be installed in a browser to inspect the component tree in
    a running app and help track down performance problems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That brings us to the end of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started the chapter by creating a React and TypeScript project with the help
    of webpack and Babel. Lots of steps were involved and we only set up a fraction
    of what we would need for a real project. For example, we have not set up the
    ability to produce an optimized bundle for production.
  prefs: []
  type: TYPE_NORMAL
- en: We moved on to use Create React App for creating a React and TypeScript project.
    We saw how this approach is a much faster and more thorough way of creating a
    project. Then, we used ESLint for linting and Prettier for automatic code formatting.
    As a result of that exercise, we now understand how TypeScript, ESLint, and Prettier
    can be used together to create a high-quality React and TypeScript project environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the final section, we learned how to create React components with strongly
    typed props and states. We experienced how this helps to catch problems quickly.
    We also played with React’s DevTools, which allows a React component tree to be
    inspected and the performance profiled.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about React’s common hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following questions will check what you have learned in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What type will the `name` prop have in the following component, which has no
    type annotation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What type will the `firstName` state have in the following `useState` statement?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A `ContactDetails` component has the following type for its props:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding component is referenced in another component’s JSX as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: Will a type error be raised?
  prefs: []
  type: TYPE_NORMAL
- en: 'A `status` state variable can hold the `"Good"` and `"Bad"` values and is initially
    `"Good"`. It is defined in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What is the type given to `status`? How can its type be narrowed to only `"Good"`
    or `"Bad"`?
  prefs: []
  type: TYPE_NORMAL
- en: 'A `FruitList` component takes in an array of fruit names and displays them
    in a list. It is referenced in another component’s JSX as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What type would you define for the `FruitList` component?
  prefs: []
  type: TYPE_NORMAL
- en: An `email` state variable can hold `null` or an email address and is initially
    `null`. How would you define this state using the `useState` hook?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following component allows the user to agree:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What would you define as the type definition for `Props`?
  prefs: []
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are the answers to the questions in the preceding section.
  prefs: []
  type: TYPE_NORMAL
- en: The `name` prop will have the `any` type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `firstName` state will be given the `string` type because `string` will
    be inferred from the initial value `""`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There will be no type error even though `firstName` is not passed because it
    is defined as optional.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The inferred type of `status` is `string`. An explicit type can be defined
    for the state using a generic type argument as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The type for the `FruitList` component could be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, it could be defined using an interface as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: 'The `email` state could be defined as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: An explicit type needs to be defined; otherwise, an initial value of `null`
    would give `email` a type of `null`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The type for `Props` could be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, it could be defined using an interface as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
