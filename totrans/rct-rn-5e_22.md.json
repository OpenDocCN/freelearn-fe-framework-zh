["```js\nconst data = new Array(100)\n  .fill(null)\n  .map((v, i) => ({ key: i.toString(), value: `Item ${i}` }));\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={data}\n        renderItem={({ item }) => <Text style={styles.item}>{item.value}</Text>}\n      />\n    </View>\n  );\n} \n```", "```js\nimport { StyleSheet } from \"react-native\";\nexport default StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"column\",\n    paddingTop: 40,\n  },\n  item: {\n    margin: 5,\n    padding: 5,\n    color: \"slategrey\",\n    backgroundColor: \"ghostwhite\",\n    textAlign: \"center\",\n  },\n}); \n```", "```js\nfunction mapItems(items: string[]) {\n  return items.map((value, i) => ({ key: i.toString(), value }));\n}\nconst array = new Array(100).fill(null).map((v, i) => `Item ${i}`);\nfunction filterAndSort(text: string, asc: boolean): string[] {\n  return array\n    .filter((i) => text.length === 0 || i.includes(text))\n    .sort(\n      asc\n        ? (a, b) => (a > b ? 1 : a < b ? -1 : 0)\n        : (a, b) => (b > a ? 1 : b < a ? -1 : 0)\n    );\n} \n```", "```js\nexport default function ListContainer() {\n  const [asc, setAsc] = useState(true);\n  const [filter, setFilter] = useState(\"\");\n  const data = useMemo(() => {\n    return filterAndSort(filter, asc);\n  }, [filter, asc]); \n```", "```js\nreturn (\n  <List\n    data={mapItems(data)}\n    asc={asc}\n    onFilter={(text) => {\n      setFilter(text);\n    }}\n    onSort={() => {\n      setAsc(!asc);\n    }}\n  />\n); \n```", "```js\nexport default function List({ data, ...props }: Props) {\n  return (\n    <FlatList\n      data={data}\n      ListHeaderComponent={<ListControls {...props}/>}\n      renderItem={({ item }) => <Text style={styles.item}>{item.value}</Text>}\n    />\n  );\n} \n```", "```js\ntype Props = {\n  onFilter: (text: string) => void;\n  onSort: () => void;\n  asc: boolean;\n};\nexport default function ListControls({ onFilter, onSort, asc }: Props) {\n  return (\n    <View style={styles.controls}>\n      <ListFilter onFilter={onFilter} />\n      <ListSort onSort={onSort} asc={asc} />\n    </View>\n  );\n} \n```", "```js\ntype Props = {\n  onFilter: (text: string) => void;\n};\nexport default function ListFilter({ onFilter }: Props) {\n  return (\n    <View>\n      <TextInput\n        autoFocus\n        placeholder=\"Search\"\n        style={styles.filter}\n        onChangeText={onFilter}\n      />\n    </View>\n  );\n} \n```", "```js\nconst arrows = new Map([\n  [true, \"▼\"],\n  [false, \"▲\"],\n]);\ntype Props = {\n  onSort: () => void;\n  asc: boolean;\n};\nexport default function ListSort({ onSort, asc }: Props) {\n  return <Text onPress={onSort}>{arrows.get(asc)}</Text>;\n} \n```", "```js\nconst items = new Array(100).fill(null).map((v, i) => `Item ${i}`);\nfunction filterAndSort(data: string[], text: string, asc: boolean) {\n  return data\n    .filter((i) => text.length === 0 || i.includes(text))\n    .sort(\n      asc\n        ? (a, b) => (b > a ? -1 : a === b ? 0 : 1)\n        : (a, b) => (a > b ? -1 : a === b ? 0 : 1)\n    );\n}\nexport function fetchItems(\n  filter: string,\n  asc: boolean\n): Promise<{ json: () => Promise<{ items: string[] }> }> {\n  return new Promise((resolve) => {\n    resolve({\n      json: () =>\n        Promise.resolve({\n          items: filterAndSort(items, filter, asc),\n        }),\n    });\n  });\n} \n```", "```js\nexport default function ListContainer() {\n  const [asc, setAsc] = useState(true);\n  const [filter, setFilter] = useState(\"\");\n  const [data, setData] = useState<MappedList>([]);\n  useEffect(() => {\n    fetchItems(filter, asc)\n      .then((resp) => resp.json())\n      .then(({ items }) => {\n        setData(mapItems(items));\n      });\n  }, []); \n```", "```js\n return (\n    <List\n      data={data}\n      asc={asc}\n      onFilter={(text) => {\n        fetchItems(text, asc)\n          .then((resp) => resp.json())\n          .then(({ items }) => {\n            setFilter(text);\n            setData(mapItems(items));\n          });\n      }}\n      onSort={() => {\n        fetchItems(filter, !asc)\n          .then((resp) => resp.json())\n          .then(({ items }) => {\n            setAsc(!asc);\n            setData(mapItems(items));\n          });\n      }}\n    />\n  );\n} \n```", "```js\nfunction* genItems() {\n  let cnt = 0;\n  while (true) {\n    yield `Item ${cnt++}`;\n  }\n}\nlet items = genItems();\nexport function fetchItems({ refresh }: { refresh?: boolean }) {\n  if (refresh) {\n    items = genItems();\n  }\n  return Promise.resolve({\n    json: () =>\n      Promise.resolve({\n        items: new Array(30).fill(null).map(() => items.next().value as string),\n      }),\n  });\n} \n```", "```js\nimport React, { useState, useEffect } from \"react\";\nimport * as api from \"./api\";\nimport List from \"./List\";\nexport default function ListContainer() {\n  const [data, setData] = useState([]);\n  function fetchItems() {\n    return api\n      .fetchItems({})\n      .then((resp) => resp.json())\n      .then(({ items }) => {\n        setData([\n          ...data,\n          ...items.map((value) => ({\n            key: value,\n            value,\n          })),\n        ]);\n      });\n  }\n  useEffect(() => {\n    fetchItems();\n  }, []);\n  return <List data={data} fetchItems={fetchItems} />;\n} \n```", "```js\ntype Props = {\n  data: { key: string; value: string }[];\n  fetchItems: () => Promise<void>;\n  refreshItems: () => Promise<void>;\n  isRefreshing: boolean;\n};\nexport default function List({\n  data,\n  fetchItems\n}: Props) {\n  return (\n    <FlatList\n      data={data}\n      renderItem={({ item }) => <Text style={styles.item}>{item.value}</Text>}\n      onEndReached={fetchItems}\n    />\n  );\n} \n```", "```js\ntype Props = {\n  data: { key: string; value: string }[];\n  fetchItems: () => Promise<void>;\n  refreshItems: () => Promise<void>;\n  isRefreshing: boolean;\n};\nexport default function List({\n  data,\n  fetchItems,\n  refreshItems,\n  isRefreshing,\n}: Props) {\n  return (\n    <FlatList\n      data={data}\n      renderItem={({ item }) => <Text style={styles.item}>{item.value}</Text>}\n      onEndReached={fetchItems}\n      onRefresh={refreshItems}\n      refreshing={isRefreshing}\n    />\n  );\n} \n```", "```js\n const [isRefreshing, setIsRefreshing] = useState(false);\n  function fetchItems() {\n    return api\n      .fetchItems({})\n      .then((resp) => resp.json())\n      .then(({ items }) => {\n        setData([\n          ...data,\n          ...items.map((value) => ({\n            key: value,\n            value,\n          })),\n        ]);\n      });\n  } \n```"]