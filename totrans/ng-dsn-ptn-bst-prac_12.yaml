- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Packaging Everything – Best Practices for Deployment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包一切 – 部署最佳实践
- en: After architecting, developing, and testing your application, it’s time to deploy
    it to your users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在架构、开发和测试完您的应用程序后，是时候将其部署给用户了。
- en: In this chapter, we will learn the best practices for generating production
    packages and how to use automation tools to maximize the team’s productivity and
    effectiveness at this point in the project.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习生成生产包的最佳实践以及如何使用自动化工具在项目此阶段最大化团队的生产力和效率。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Deploying the backend
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署后端
- en: Differentiating environments
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区分环境
- en: Preparing the production bundle
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备生产包
- en: Mounting a Docker image with Nginx
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挂载带有 Nginx 的 Docker 镜像
- en: Deploying a page to Azure Static Web Apps
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将页面部署到 Azure 静态 Web 应用
- en: By the end of this chapter, you will be able to use the Angular CLI to generate
    a package optimized for production and CI/CD tools to automate this process for
    your team.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够使用 Angular CLI 生成针对生产优化的包，并使用 CI/CD 工具自动化团队的过程。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the instructions in this chapter, you’ll need the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章中的说明，您需要以下内容：
- en: '**Visual Studio Code** (**VSCode**) ([https://code.visualstudio.com/Download](https://code.visualstudio.com/Download))'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code** (**VSCode**) ([https://code.visualstudio.com/Download](https://code.visualstudio.com/Download))'
- en: Node.js 18 or higher ([https://nodejs.org/en/download/](https://nodejs.org/en/download/))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 18 或更高版本 ([https://nodejs.org/en/download/](https://nodejs.org/en/download/))
- en: Docker ([https://www.docker.com/](https://www.docker.com/))
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker ([https://www.docker.com/](https://www.docker.com/))
- en: Docker for VSCode ([https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker))
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker for VSCode ([https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker))
- en: An Azure account ([https://azure.microsoft.com](https://azure.microsoft.com))
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 账户 ([https://azure.microsoft.com](https://azure.microsoft.com))
- en: The Azure CLI ([https://learn.microsoft.com/en-us/cli/azure/](https://learn.microsoft.com/en-us/cli/azure/))
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure CLI ([https://learn.microsoft.com/en-us/cli/azure/](https://learn.microsoft.com/en-us/cli/azure/))
- en: Azure Functions Core Tools ([https://learn.microsoft.com/en-us/azure/azure-functions/functions-run-local](https://learn.microsoft.com/en-us/azure/azure-functions/functions-run-local))
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Functions Core Tools ([https://learn.microsoft.com/en-us/azure/azure-functions/functions-run-local](https://learn.microsoft.com/en-us/azure/azure-functions/functions-run-local))
- en: Azure Tools for VSCode ([https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack))
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Tools for VSCode ([https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack))
- en: The NestJS CLI ([https://docs.nestjs.com/cli/overview](https://docs.nestjs.com/cli/overview))
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NestJS CLI ([https://docs.nestjs.com/cli/overview](https://docs.nestjs.com/cli/overview))
- en: The code files for this chapter are available at [https://github.com/PacktPublishing/Angular-Design-Patterns-and-Best-Practices/tree/main/ch12](https://github.com/PacktPublishing/Angular-Design-Patterns-and-Best-Practices/tree/main/ch12).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可在 [https://github.com/PacktPublishing/Angular-Design-Patterns-and-Best-Practices/tree/main/ch12](https://github.com/PacktPublishing/Angular-Design-Patterns-and-Best-Practices/tree/main/ch12)
    找到。
- en: Deploying the backend
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署后端
- en: Before preparing our gym diary project for production, let’s first upload the
    backend to a cloud service so that our page has access to the data.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在为我们的健身房日记项目准备生产之前，我们首先将后端上传到云服务，以便我们的页面能够访问数据。
- en: We chose the Azure service for this book, but the concepts in this chapter can
    also be applied to other cloud services, such as AWS ([https://aws.amazon.com](https://aws.amazon.com))
    and GCP ([https://cloud.google.com](https://cloud.google.com)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为这本书选择了 Azure 服务，但本章中的概念也可以应用于其他云服务，例如 AWS ([https://aws.amazon.com](https://aws.amazon.com))
    和 GCP ([https://cloud.google.com](https://cloud.google.com))。
- en: 'The backend of this example does not use a database and was built using the
    NestJS framework ([https://nestjs.com/](https://nestjs.com/)), which actually
    has an architecture completely inspired by Angular, but for the backend! This
    framework allows you to add cloud deployment capabilities with Azure. To prepare
    your backend for deployment, in the command line of your operating system, in
    the `project` folder (`/gym-diary-backend`), run the following commands:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的后端不使用数据库，并使用NestJS框架（[https://nestjs.com/](https://nestjs.com/))构建，该框架实际上有一个完全受Angular启发的架构，但用于后端！此框架允许您通过Azure添加云部署功能。为了准备您的后端进行部署，在您的操作系统命令行中，在`project`文件夹（`/gym-diary-backend`）中，运行以下命令：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first command installs the Angular Schematic package, which will be used
    to build the application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令安装Angular Schematic包，该包将被用于构建应用程序。
- en: The `nest add` command has the same functionality as Angular’s `ng add` command,
    and here, in addition to installing the dependencies for deployment on Azure,
    it also configures and creates the necessary files for this task.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`nest add`命令与Angular的`ng add`命令具有相同的功能，在这里，除了安装部署到Azure的依赖项外，它还配置并创建了执行此任务所需的必要文件。'
- en: 'With the tools from the *Technical requirements* section installed, we first
    need to create an Azure Functions project. To do this, let’s go to the Azure portal
    in the **Function App** menu option:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了*技术要求*部分提供的工具后，我们首先需要创建一个Azure Functions项目。为此，让我们转到Azure门户中的**函数应用**菜单选项：
- en: '![Figure 12.1 – Function App menu option](img/B19562_12_1.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1 – 函数应用菜单选项](img/B19562_12_1.jpg)'
- en: Figure 12.1 – Function App menu option
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – 函数应用菜单选项
- en: Azure has several ways to run a backend service, and one of the simplest is
    through Azure Functions. With it, we can upload our service without needing to
    configure a server, as the provider will take care of these details.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Azure有几种运行后端服务的方式，其中最简单的一种是通过Azure Functions。使用它，我们可以在不需要配置服务器的情况下上传我们的服务，因为提供商将负责这些细节。
- en: 'We then need to perform some basic configurations. To do this, we will click
    on **+ Create**. Once done, we will be presented with the following screen:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要进行一些基本配置。为此，我们将点击**+ 创建**。完成后，我们将看到以下屏幕：
- en: '![Figure 12.2 – Azure Functions service configuration](img/B19562_12_2.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图12.2 – Azure Functions服务配置](img/B19562_12_2.jpg)'
- en: Figure 12.2 – Azure Functions service configuration
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – Azure Functions服务配置
- en: In the **Subscription** field, you need to choose your Azure subscription. In
    the **Resource Group** field, you can select a group that you already have; if
    you don’t have one, you can create a new one and enter its name. The **Function
    App name** field is important as it will initially be the address of your endpoint.
    It is possible to buy a specific URL or place this API behind an Azure API gateway
    (https://azure.microsoft.com/en-us/products/api-management), although this is
    not required for our example. We will deploy directly from the code, so leave
    **Do you want to deploy code or container image?** as **Code**. The project’s
    runtime stack should be set to **NodeJS**, version **18 LTS**. For the project
    region, select one close to you, or **East US**, which is the default option.
    Finally, **Operating System** should be set to **Linux**. The **Hosting options
    and plans** option should be set to **Consumption (Serverless)** as we do not
    need any more specific features in this case.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在**订阅**字段中，您需要选择您的Azure订阅。在**资源组**字段中，您可以选择您已经拥有的组；如果您没有，您可以创建一个新的组并输入其名称。**函数应用名称**字段很重要，因为它将最初是您端点的地址。您可以选择购买一个特定的URL或将此API放在Azure
    API网关（https://azure.microsoft.com/en-us/products/api-management）后面，尽管在我们的示例中这不是必需的。我们将直接从代码部署，所以将**您想部署代码还是容器镜像？**设置为**代码**。项目的运行时堆栈应设置为**NodeJS**，版本**18
    LTS**。对于项目区域，选择离您较近的区域，或**东US**，这是默认选项。最后，**操作系统**应设置为**Linux**。**托管选项和计划**选项应设置为**消费（无服务器）**，因为我们在此情况下不需要任何更具体的功能。
- en: '![Figure 12.3 – Hosting options and plans](img/B19562_12_3.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图12.3 – 托管选项和计划](img/B19562_12_3.jpg)'
- en: Figure 12.3 – Hosting options and plans
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – 托管选项和计划
- en: 'Once we are done filling in all the necessary information, click on **Review
    + Create**. On the next screen, confirm your information and execute the creation:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们填写了所有必要的信息，点击**审查 + 创建**。在下一个屏幕上，确认您的信息并执行创建：
- en: '![Figure 12.4 – Azure Functions service created](img/B19562_12_4.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图12.4 – Azure Functions服务创建](img/B19562_12_4.jpg)'
- en: Figure 12.4 – Azure Functions service created
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4 – Azure Functions服务创建
- en: 'To publish our backend to the created service, we will use the VS plugin. Open
    the backend project, left-click, and select **Deploy to Function App…**, as shown
    in the following figure:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要将我们的后端发布到创建的服务中，我们将使用 VS 插件。打开后端项目，左键单击，并选择**部署到函数应用…**，如图所示：
- en: '![Figure 12.5 – VSCode extension for publishing Azure Functions](img/B19562_12_5.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.5 – VSCode 发布 Azure 函数扩展](img/B19562_12_5.jpg)'
- en: Figure 12.5 – VSCode extension for publishing Azure Functions
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5 – VSCode 发布 Azure 函数扩展
- en: The extension will get the list of services created from your account, so select
    the one we created from the **AZURE** panel.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展程序将获取您账户中创建的服务列表，因此请从**AZURE**面板中选择我们创建的那个。
- en: '![Figure 12.6 – VSCode AZURE panel](img/B19562_12_6.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.6 – VSCode AZURE 面板](img/B19562_12_6.jpg)'
- en: Figure 12.6 – VSCode AZURE panel
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.6 – VSCode AZURE 面板
- en: After publication, the Azure service will point you to a public URL with your
    service. Access it in a browser with the `/exercise` endpoint to check whether
    the service is live.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 发布后，Azure 服务将指向一个包含您服务的公共 URL。使用 `/exercise` 端点在浏览器中访问它，以检查服务是否处于活动状态。
- en: 'The return of the published URL should be a list similar to the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 发布的 URL 返回应类似于以下列表：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'One last configuration we must do is configure the service’s CORS to enable
    our local application to connect to the cloud service. In the Azure console, click
    on the created service and then on the `*`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须做的最后一个配置是配置服务的 CORS，以使我们的本地应用程序能够连接到云服务。在 Azure 控制台中，单击创建的服务，然后点击`*`：
- en: '![Figure 12.7 – CORS configuration](img/B19562_12_7.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.7 – CORS 配置](img/B19562_12_7.jpg)'
- en: Figure 12.7 – CORS configuration
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.7 – CORS 配置
- en: With our backend service online, we will focus on how to access it from our
    application in the next section. An important point is to always remember to turn
    off the service in Azure so as not to incur unnecessary costs when going through
    this book’s examples in your Azure account.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的后端服务上线后，我们将专注于如何在下一节中从我们的应用程序中访问它。一个重要点是始终记得在 Azure 中关闭服务，以避免在通过这本书的示例在您的
    Azure 账户中产生不必要的费用。
- en: Differentiating environments
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区分环境
- en: After finishing the task of deploying our backend, we need to change our frontend
    project to make requests to our cloud infrastructure. But here, a problem arises.
    We want to access our published backend when we are in production, but the team
    needs to continue accessing the API locally to develop new features in a more
    practical way. How can we have the best of both worlds?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后端部署的任务后，我们需要更改我们的前端项目以向我们的云基础设施发送请求。但在这里，出现了一个问题。我们希望在生产环境中访问我们发布的后端，但团队需要继续本地访问
    API 以更实际的方式开发新功能。我们如何才能两者兼得？
- en: The answer to this, once again, was thought up by the Angular team and is the
    creation of configuration files for each development environment.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的答案，再次，是由 Angular 团队想出来的，即为每个开发环境创建配置文件。
- en: Until version 14 of Angular, these files were already standard when creating
    the project (the `ng new` command). However, to simplify new projects and reduce
    the learning curve, these files were removed for new projects.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular 的第 14 版之前，这些文件在创建项目（`ng new` 命令）时已经是标准配置。然而，为了简化新项目并降低学习曲线，这些文件在新项目中已被移除。
- en: 'But we shouldn’t worry because to add them, we can use the Angular CLI. On
    the command line, use the following command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们不必担心，因为要添加它们，我们可以使用 Angular CLI。在命令行中，使用以下命令：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After executing the preceding command, the Angular CLI creates the `environments`
    folder, and inside it, we have the `environment.development.ts` and `environment.ts`
    files.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，Angular CLI 创建了`environments`文件夹，并在其中我们有`environment.development.ts`和`environment.ts`文件。
- en: 'These TypeScript files have only one object, and this object is where we will
    place all the settings that we need to differentiate between production and development
    environments. We will first change the `environment.development.ts` file like
    so:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 TypeScript 文件只有一个对象，而这个对象就是我们放置所有需要区分生产环境和开发环境的设置的地点。我们首先将`environment.development.ts`文件修改如下：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In these objects, we declare a flag to indicate that this is a configuration
    of the development environment and the URL of our local backend service. We will
    now change the `environment.ts` file like so:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些对象中，我们声明一个标志来指示这是一个开发环境的配置以及我们本地后端服务的 URL。现在我们将`environment.ts`文件修改如下：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we are doing the same but indicating the production environment of our
    application. The backend address will be the one created in the previous section.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们做的是同样的事情，但指示我们的应用程序的生产环境。后端地址将是上一节中创建的那个。
- en: 'To use these files, we must import them and refactor the `HostInterceptor`
    service to use it:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这些文件，我们必须导入它们，并重构`HostInterceptor`服务以使用它：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In our interceptor service, which is responsible for adding the URL to our
    requests (for more details, see [*Chapter 8*](B19562_08.xhtml#_idTextAnchor225),
    *Improving Backend Integrations: the Interceptor Pattern*), we use the `environment`
    object property to determine the URL.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的拦截器服务中，该服务负责将URL添加到我们的请求中（更多详情，见[*第8章*](B19562_08.xhtml#_idTextAnchor225)，*改进后端集成：拦截器模式*），我们使用`environment`对象属性来确定URL。
- en: A point of attention here is that we must import the `environment.ts` file for
    this variable because Angular makes the change when generating the build.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一个点是，我们必须导入`environment.ts`文件，因为Angular在生成构建时会进行更改。
- en: 'To make it clear which environment we are in, we will change the `AppComponent`
    component like so:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清楚地表明我们处于哪个环境，我们将按照以下方式更改`AppComponent`组件：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this change, we are using the toaster service (for more details, refer to
    [*Chapter 8*](B19562_08.xhtml#_idTextAnchor225), *Improving Backend Integrations:
    the Interceptor Pattern*) to indicate, when the user enters the page, which environment
    they are in.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个更改中，我们使用toaster服务（更多详情，请参阅[*第8章*](B19562_08.xhtml#_idTextAnchor225)，*改进后端集成：拦截器模式*）来指示，当用户进入页面时，他们处于哪个环境。
- en: 'Let’s run our application using the `ng serve` command, and we will get the
    following result:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`ng serve`命令运行我们的应用程序，我们将得到以下结果：
- en: '![Figure 12.8 – Application in development mode](img/B19562_12_8.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图12.8 – 开发模式下的应用](img/B19562_12_8.jpg)'
- en: Figure 12.8 – Application in development mode
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.8 – 开发模式下的应用
- en: 'If we log in to our application, we can see, by looking at the developer tools
    in the **Networks** tab, that the application is making requests to our local
    backend. To run our Angular project as a production build, we can use the following
    command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们登录到我们的应用程序，我们可以通过查看**网络**标签中的开发者工具，看到应用程序正在向我们的本地后端发送请求。要作为生产构建运行我们的Angular项目，我们可以使用以下命令：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When accessing our application, we can see in the message on the screen that
    requests are made to the service published in our cloud service:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问我们的应用程序时，我们可以在屏幕上的消息中看到请求是针对我们云服务中发布的服务发出的：
- en: '![Figure 12.9 – Application in production mode](img/B19562_12_9.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图12.9 – 生产模式下的应用](img/B19562_12_9.jpg)'
- en: Figure 12.9 – Application in production mode
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.9 – 生产模式下的应用
- en: With our service prepared for multiple environments, we can now see how we can
    better prepare it for deployment in the next section.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的服务已为多个环境做好准备，我们现在可以看看如何在下一节中更好地为部署做准备。
- en: Preparing the production bundle
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备生产包
- en: The environmental needs of a frontend application running in production are
    different from the development environment we have seen so far in the book.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中运行的前端应用程序的环境需求与我们在书中看到的开发环境不同。
- en: When we are developing, we look for speed in compilation, powerful debugging,
    and profiling tools to analyze our code, as well as generating boilerplate code,
    among other features.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开发时，我们寻求编译速度、强大的调试和性能分析工具来分析我们的代码，以及生成样板代码等功能。
- en: Even though it costs more to process on our local machine, requires more space
    to generate instrumented bundles to be able to perform debugging, and requires
    greater network consumption to download development tools, all of this is important
    for the team’s productivity, and the Angular framework delivers it in a robust
    ecosystem.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在我们的本地机器上处理成本更高，需要更多空间来生成用于调试的仪器化包，以及需要更大的网络消耗来下载开发工具，但所有这些对于团队的生产力来说都是重要的，Angular框架通过一个强大的生态系统提供了这些功能。
- en: When we are talking about frontend web code running in production, the objective
    is almost the opposite. We want our code to be as small and optimized as possible,
    to be downloaded and executed by our users in the most performant way possible.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论在生产环境中运行的客户端网络代码时，目标几乎相反。我们希望我们的代码尽可能小和优化，以便以最高效的方式下载和执行。
- en: With this objective in mind, the Angular framework has a robust and simple build
    tool for generating the production package.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 带着这个目标，Angular框架有一个强大且简单的构建工具，用于生成生产包。
- en: 'To run it, we need to use the following command in our `project` folder:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行它，我们需要在我们的 `project` 文件夹中使用以下命令：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This command will create the package that we will run in production in the `dist`
    folder of our project.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在我们项目的 `dist` 文件夹中创建我们将要运行的生产包。
- en: 'But to deepen our knowledge of the Angular framework, let’s understand what
    the basis for this build process is. The answer is in the `angular.json` file.
    Let’s analyze some important properties of the build:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 但为了深化我们对 Angular 框架的了解，让我们了解这个构建过程的基础是什么。答案是 `angular.json` 文件。让我们分析一些构建的重要属性：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `configurations` property, we have definitions of the types of environments
    that we can have in our project. Initially, the Angular CLI creates two configurations:
    production and development.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `configurations` 属性中，我们有我们项目中可以拥有的环境类型的定义。最初，Angular CLI 创建了两个配置：生产模式和开发模式。
- en: In the production configuration, we have the `budgets` property, which determines
    the maximum size that our package must have in addition to defining the maximum
    size that a unitary component must have.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产配置中，我们有 `budgets` 属性，它确定我们的包必须具有的最大大小，除了定义单元组件必须具有的最大大小。
- en: If your project exceeds this size, Angular may show a warning in the production
    console or even not build your project.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的项目超过这个大小，Angular 可能会在生产控制台中显示警告，甚至可能不构建您的项目。
- en: This is important because we need to generate the smallest file possible as
    this results in a greater perception of performance for our users, especially
    if they are using a device on a 3G network.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这很重要，因为我们需要生成尽可能小的文件，因为这会导致用户对我们性能的感知更高，尤其是如果他们正在使用 3G 网络上的设备。
- en: One way to reduce file sizes is to use Angular’s lazy-loading capabilities (for
    more details on this feature, see [*Chapter 2*](B19562_02.xhtml#_idTextAnchor081),
    *Organizing* *Your Application*).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 减少文件大小的一种方法是通过使用 Angular 的懒加载功能（有关此功能的更多详细信息，请参阅[*第 2 章*](B19562_02.xhtml#_idTextAnchor081)，*组织*
    *您的应用程序*)。
- en: The `outputHashing` attribute ensures that the files generated by the application
    have their names added to a hash.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`outputHashing` 属性确保应用程序生成的文件名称被添加到哈希中。'
- en: This is important because most public clouds and **Content Delivery Networks**
    (**CDNs**) cache the application based on the name of the files. When we generate
    a new version of our app, we want this cache to be invalidated to deliver the
    new version to our users.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这很重要，因为大多数公共云和 **内容分发网络**（**CDNs**）根据文件名缓存应用程序。当我们生成我们应用程序的新版本时，我们希望这个缓存被无效化，以便将新版本提供给我们的用户。
- en: Finally, the `defaultConfiguration` property determines that if no parameter
    is passed, the `ng build` command will execute with the configuration indicated
    in it, in this case, production.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`defaultConfiguration` 属性确定如果没有传递参数，`ng build` 命令将执行其中指示的配置，在这种情况下，是生产模式。
- en: These configurations can be expanded and new ones created depending on your
    project needs. In our case, we will leave it with the default configuration.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这些配置可以根据项目需求进行扩展和创建新配置。在我们的案例中，我们将保留默认配置。
- en: 'When running the build in production configurations, Angular performs the following
    processes:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产配置中运行构建时，Angular 执行以下过程：
- en: '**Ahead-of-Time (AOT) compilation**: Angular compiles templates and CSS files
    in addition to TypeScript files.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提前编译（AOT）**：Angular 除了 TypeScript 文件外，还编译模板和 CSS 文件。'
- en: '**Production mode**: The application has some validations optimized for running
    in production.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产模式**：应用程序有一些针对在生产环境中运行的验证进行了优化。'
- en: '**Bundling**: It bundles all component files, templates, services and libraries
    in files separated by modules.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打包**：它将所有组件文件、模板、服务和库打包到按模块分隔的文件中。'
- en: '**Minification**: From the files generated by TypeScript, it concatenates and
    eliminates whitespace and comments to generate the smallest files possible.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**压缩**：从 TypeScript 生成的文件中，它连接并消除空白和注释，以生成尽可能小的文件。'
- en: '**Uglification**: It rewrites generated code for variables, function names,
    and small, cryptic modules to make it difficult to reverse engineer the frontend
    code delivered to the user’s browser.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**丑化**：它重新编写生成的代码，包括变量、函数名称和小的、神秘的模块，使其难以逆向工程用户浏览器接收到的前端代码。'
- en: '**Dead code elimination**: Also known as **tree shaking**, this is the process
    of not including components in bundles that are not referenced in the code and
    do not need to be present in the production package.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**死代码消除**：也称为 **摇树**，这是不包括在代码中未引用且不需要在生产包中存在的组件的过程。'
- en: All these processes are done with the `ng build` command and with the configuration
    that was set when your project was created. It is important to note that this
    process improves with each new version of Angular and is another reason to always
    keep your project up to date with the latest versions.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些过程都是通过 `ng build` 命令以及创建项目时设置的配置来完成的。重要的是要注意，这个过程会随着 Angular 每个新版本的发布而改进，这也是始终使用最新版本保持项目更新的另一个原因。
- en: In the next section, we will create a Docker image with our code built and run
    by the Nginx web server.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将创建一个由 Nginx 网络服务器构建和运行的 Docker 镜像。
- en: Mounting a Docker image with Nginx
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挂载带有 Nginx 的 Docker 镜像
- en: Until this chapter, we have been using the web server included in the Angular
    package to run our application locally. Although very competent, it focuses purely
    on the developer’s experience and does not have the performance and scalability
    capabilities required by the production environment.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用 Angular 包中包含的网络服务器来在本地运行我们的应用程序。虽然非常胜任，但它纯粹关注开发者的体验，并且没有生产环境所需的表现力和可扩展性能力。
- en: For this purpose, we use production-grade web servers. One of the most popular
    is Nginx (pronounced *Engine X*).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个目的，我们使用生产级别的网络服务器。其中最受欢迎的是 Nginx（发音为 *Engine X*）。
- en: 'To configure it, we need to create a file in the root of our project called
    `nginx.default.conf` and add the following to it:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置它，我们需要在项目的根目录下创建一个名为 `nginx.default.conf` 的文件，并将其添加以下内容：
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this configuration file, the first three properties (`listen`, `sendfile`,
    and `default_type`) aim to configure the exposed port and prepare the server to
    send our project’s package files.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配置文件中，前三个属性（`listen`、`sendfile` 和 `default_type`）旨在配置暴露的端口并准备服务器发送我们的项目包文件。
- en: The properties starting with `gzip` configure the delivery of files with the
    native web compression data `gzip`, further reducing the files delivered to our
    user’s browser.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以 `gzip` 开头的属性配置了使用本地压缩数据 `gzip` 交付文件，从而进一步减少发送到用户浏览器的文件。
- en: The last part of the file determines the first page to be served. As we are
    in a `index.html`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的最后部分决定了要服务的第一个页面。因为我们处于 `index.html`。
- en: With this configuration, we can run Nginx, but instead of installing it natively
    on our local machine, we will use Docker to run it.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个配置，我们可以运行 Nginx，但不是在本地机器上原生安装它，而是使用 Docker 来运行它。
- en: Docker is a tool widely used in today’s modern systems and aims to compartmentalize
    an application’s environment. In other words, by configuring a file, we can create
    an environment for our application where it can be run both on our local machine
    and on a cloud provider with the same dependencies and versions.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 是当今现代系统中广泛使用的工具，旨在将应用程序的环境隔离开来。换句话说，通过配置一个文件，我们可以为我们的应用程序创建一个环境，它可以在我们的本地机器上运行，也可以在具有相同依赖项和版本的云服务提供商上运行。
- en: 'Let’s exemplify its use by first creating a file called `.dockerignore` in
    our project’s root and adding the following to it:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过首先在项目的根目录下创建一个名为 `.dockerignore` 的文件并添加以下内容来举例说明其使用：
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Using the `.gitignore` file as an example, we are ensuring that the `node_modules`
    folder will not be copied to the image . Keep in mind that the image and the service
    that will be run from it (called a container in the Docker ecosystem) is as if
    it were a new machine and we will only copy what our application needs to run.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以 `.gitignore` 文件为例，我们确保 `node_modules` 文件夹不会被复制到镜像中。请记住，这个镜像以及从中运行的（在 Docker
    生态系统中称为容器）就像是一台新机器，我们只会复制应用程序运行所需的内容。
- en: 'The next step is to create the `dockerfile` file and add the following code
    to it:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建 `dockerfile` 文件，并将其以下代码添加到其中：
- en: '[PRE12]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this file, we are using the multi-stage build technique to create our image.
    First, we build the application and then use the result of this build to create
    the final image. This way, our image becomes smaller and more optimized.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，我们使用多阶段构建技术来创建我们的镜像。首先，我们构建应用程序，然后使用这个构建的结果来创建最终的镜像。这样，我们的镜像变得更小，更优化。
- en: The first stage, which we call `build` here, is based on the `node:18-alpine`
    image, which is a minimal image with the `Alpine` Linux distribution and version
    18 of Node.js included.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里称之为 `build` 的第一个阶段基于 `node:18-alpine` 镜像，这是一个包含 `Alpine` Linux 发行版和 Node.js
    18 版本的精简镜像。
- en: Then, the `package.json` and `package-lock.json` files are copied and the `npm
    ci` command is run to install the package.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，复制 `package.json` 和 `package-lock.json` 文件，并运行 `npm ci` 命令来安装包。
- en: Then, with the `COPY . .` command, all project code is copied (except the `node_module`
    folder).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用 `COPY . .` 命令，复制所有项目代码（除了 `node_module` 文件夹）。
- en: At the end of this stage, our application bundle is generated using the `npm
    run` `build` command.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段的最后，我们的应用程序包是通过 `npm run build` 命令生成的。
- en: The next stage, which will be production, is based on the `nginx:1.25-alpine`
    image because to run the web server, we only need a Linux distribution such as
    Nginx installed.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个阶段，即生产阶段，基于 `nginx:1.25-alpine` 镜像，因为运行 Web 服务器，我们只需要安装一个像 Nginx 这样的 Linux
    发行版。
- en: The next task is to copy the configuration file for the Nginx installation,
    delete the example file that comes with the tool, and copy the files generated
    in the previous stage to this one.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个任务是复制 Nginx 安装的配置文件，删除工具附带示例文件，并将上一阶段生成的文件复制到这一阶段。
- en: The line `["nginx", "-g", "daemon off;"]` runs Nginx and makes it ready to deliver
    our application.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这行 `["nginx", "-g", "daemon off;"]` 运行 Nginx 并使其准备好交付我们的应用程序。
- en: To mount the image, right-click on the `dockerfile` file in VSCode and select
    the **Build** **Image** option.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要挂载镜像，在 VSCode 中右键单击 `dockerfile` 文件，并选择 **构建** **镜像** 选项。
- en: 'To run the Docker container locally, use the following command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地运行 Docker 容器，请使用以下命令：
- en: '[PRE13]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: By accessing the `http://localhost:8080` URL, we have our application running
    in production mode. Another way to put our project on the web is by using Azure
    Static Web Apps. We will work on this in the next section.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问 `http://localhost:8080` URL，我们可以在生产模式下运行我们的应用程序。将我们的项目放在网络上的另一种方式是使用 Azure
    Static Web Apps。我们将在下一节中处理这个问题。
- en: Deploying a page to Azure Static Web Apps
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署页面到 Azure Static Web Apps
- en: With the Docker image we created, we can run our project on any cloud provider
    that offers container services. However, there are other ways to deploy our Angular
    project.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们创建的 Docker 镜像，我们可以在提供容器服务的任何云服务提供商上运行我们的项目。然而，还有其他方法来部署我们的 Angular 项目。
- en: One of these alternatives is Azure Static Web Apps, a service that specializes
    in web page design and allows automatic integration with GitHub. Let’s see it
    in practice in our project.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这些替代方案之一是 Azure Static Web Apps，这是一项专注于网页设计的专业服务，并允许与 GitHub 自动集成。让我们在我们的项目中实际看看。
- en: 'The first requirement is that your project is on GitHub, as shown in the following
    screenshot:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个要求是您的项目位于 GitHub 上，如下截图所示：
- en: '![Figure 12.10 – GitHub repository for frontend project](img/B19562_12_10.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.10 – 前端项目的 GitHub 存储库](img/B19562_12_10.jpg)'
- en: Figure 12.10 – GitHub repository for frontend project
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.10 – 前端项目的 GitHub 存储库
- en: If you have copied the project repository, place the `gym-diary` folder in your
    own GitHub project.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已复制项目存储库，请将 `gym-diary` 文件夹放置在您的 GitHub 项目中。
- en: To configure the Azure service, go to the account portal and search for `Static`
    `Web Apps`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置 Azure 服务，请转到账户门户并搜索 `Static` `Web Apps`。
- en: Click on the **Create Static Web App** button and the service form will be presented
    to you.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **创建静态 Web App** 按钮，服务表单将呈现给您。
- en: 'In the first part, we have the following fields:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分，我们有以下字段：
- en: '**Subscription**: Select your Azure subscription.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订阅**：选择您的 Azure 订阅。'
- en: '**Resource Group**: Create or define a group for this service. In Azure, every
    resource must be linked to a resource group.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源组**：为该服务创建或定义一个组。在 Azure 中，每个资源都必须链接到一个资源组。'
- en: '**Name**: Provide a name for your frontend project.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：为您的前端项目提供一个名称。'
- en: '**Plan type**: Select the tier of your environment. The more resources, the
    higher the cost, but for our example, we will just use the free plan.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计划类型**：选择您环境的层级。资源越多，成本越高，但在这个例子中，我们只会使用免费计划。'
- en: '![Figure 12.11 – Azure Static Web App creation](img/B19562_12_11.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.11 – Azure Static Web App 创建](img/B19562_12_11.jpg)'
- en: Figure 12.11 – Azure Static Web App creation
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.11 – Azure Static Web App 创建
- en: '**Source**: In this field, we identify whether our project is on GitHub or
    in the Azure repository.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源**：在这个字段中，我们确定我们的项目是在 GitHub 上还是在 Azure 存储库中。'
- en: '**Organization**: The name of the GitHub user or organization that you want
    to select the repository from. It is important that your user has high access
    permission, such as maintainer or admin.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织**：您想要从中选择存储库的 GitHub 用户或组织的名称。重要的是您的用户具有高访问权限，例如维护者或管理员。'
- en: '**Repository**: Azure will list all the repositories that you have access to
    in the selected organization..'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储库**：Azure 将列出您在所选组织中有访问权限的所有存储库。'
- en: '**Branch**: The branch of the repository that you want to deploy.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分支**：您想要部署的存储库分支。'
- en: '![ Figure 12.12 – Deployment details configuration](img/B19562_12_12.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.12 – 部署详情配置](img/B19562_12_12.jpg)'
- en: Figure 12.12 – Deployment details configuration
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.12 – 部署详情配置
- en: 'In the second part, we have the specific configuration for our project using
    Angular:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二部分，我们使用 Angular 为我们的项目配置了特定的设置：
- en: '**Build Presets**: The Azure service supports several frontend technologies.
    Here, in this case, we will choose **Angular**.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建预设**：Azure 服务支持多种前端技术。在这种情况下，我们将选择 **Angular**。'
- en: '`/`.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/`.'
- en: '**Api location**: This is an optional field if you want to point to a backend
    service deployed in Azure. Here, in this example, we are going to leave it blank.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API 位置**：如果您想指向在 Azure 中部署的后端服务，这是一个可选字段。在这里，在这个例子中，我们将将其留空。'
- en: '`dist/gym-diary/`.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dist/gym-diary/`.'
- en: '![Figure 12.13 – Preset settings](img/B19562_12_13.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.13 – 预设设置](img/B19562_12_13.jpg)'
- en: Figure 12.13 – Preset settings
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.13 – 预设设置
- en: 'Once done, click on **Review and Create**, and on the next screen, confirm
    the operation. Azure will begin processing, and once ready, it will display the
    created service dashboard:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，点击 **审查和创建**，然后在下一屏幕上确认操作。Azure 将开始处理，一旦准备好，它将显示创建的服务仪表板：
- en: '![Figure 12.14 – Service dashboard created](img/B19562_12_14.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.14 – 创建的服务仪表板](img/B19562_12_14.jpg)'
- en: Figure 12.14 – Service dashboard created
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.14 – 创建的服务仪表板
- en: In the **URL** field, you will see the URL created by Azure for our project.
    Select it and our system will be presented as soon as the deploy status is **Ready**.
    So, we have our project up and running in the cloud. You can configure other settings,
    such as adding your own URL, although remember that some settings are not available
    in the free plan.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **URL** 字段中，您将看到 Azure 为我们的项目创建的 URL。选择它，一旦部署状态为 **Ready**，我们的系统就会立即呈现。因此，我们的项目已经在云端运行。您可以配置其他设置，例如添加您自己的
    URL，但请记住，某些设置在免费计划中不可用。
- en: 'The most interesting thing about this feature is that it implements a GitHub
    action in our repository:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能最有趣的地方是它在我们仓库中实现了一个 GitHub Action：
- en: '![Figure 12.15 – GitHub action](img/B19562_12_15.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.15 – GitHub Action](img/B19562_12_15.jpg)'
- en: Figure 12.15 – GitHub action
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.15 – GitHub Action
- en: What is a GitHub action? It is a GitHub feature that allows the creation and
    execution of scripts to automate tasks, such as, in our example, deploying to
    the Azure service.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是 GitHub Action？这是一个 GitHub 功能，允许创建和执行脚本来自动化任务，例如，在我们的例子中，部署到 Azure 服务。
- en: With our configuration, the Azure wizard created and ran the script in our GitHub
    repository.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的配置，Azure 向导在我们的 GitHub 仓库中创建并运行了脚本。
- en: A bonus is that our generated script is configured to execute and deploy with
    each push we make to the repository, updating our application deployed in the
    cloud.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 奖励是，我们生成的脚本配置为在每次向仓库推送时执行和部署，更新我们在云端部署的应用程序。
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the techniques and capabilities of Angular when
    deploying our application to production.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了将我们的应用程序部署到生产环境时 Angular 的技术和功能。
- en: We started by uploading our backend to the cloud, where it will be available
    for our frontend application.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将后端上传到云端，在那里它将为我们的前端应用程序可用。
- en: Then, we adapted our application to differentiate the development environment
    and the production environment using the Angular feature of `environment.ts` files.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过使用 Angular 的 `environment.ts` 文件功能来区分开发环境和生产环境来调整我们的应用程序。
- en: We explored the `ng build` command and all the tasks that Angular performs for
    us to make our application as lean as possible to be faster for our users.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了 `ng build` 命令和 Angular 为我们执行的所有任务，以使我们的应用程序尽可能精简，以便为我们的用户提供更快的速度。
- en: We learned about Docker and how we can package our Angular application to run
    on a web server such as Nginx regardless of the type of machine our application
    runs on.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了 Docker 以及我们如何将我们的 Angular 应用程序打包以在 Nginx 等网络服务器上运行，而不管我们的应用程序运行在哪种类型的机器上。
- en: Finally, we learned about another way to deploy to the cloud with the Azure
    Static Web Apps service and saw how it automates this process by creating a GitHub
    action script.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们了解了一种使用 Azure 静态 Web 应用服务将应用程序部署到云端的另一种方法，并看到它是如何通过创建 GitHub Action 脚本来自动化此过程的。
- en: In the next chapter, we will explore the latest Angular innovations, including
    Angular Signals.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索最新的 Angular 创新，包括 Angular Signals。
