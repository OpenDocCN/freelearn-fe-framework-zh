- en: Creating a Login Component
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建登录组件
- en: In this chapter, we will build our second component. We will create a login
    page, which will be similar to the signup page. We will also add more functionalities
    to services. We will use Email/Password authentication to log in the user in.
    User details are already added to the Firebase database during the signup process.
    We will retrieve the user details from Firebase and pass them to the user profile
    page. We will also handle common error scenarios, as this will reinforce the concept.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建我们的第二个组件。我们将创建一个登录页面，该页面将与注册页面类似。我们还将向服务中添加更多功能。我们将使用电子邮件/密码身份验证来登录用户。用户详情已在注册过程中添加到Firebase数据库中。我们将从Firebase检索用户详情并将它们传递到用户个人资料页面。我们还将处理常见的错误场景，因为这将加强这一概念。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Adding login functionalities to existing services
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将登录功能添加到现有服务中
- en: Reusing the domain model
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重复使用域模型
- en: Creating a login template
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建登录模板
- en: Error handling for login
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录错误处理
- en: Creating login components
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建登录组件
- en: Resetting password
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重置密码
- en: Adding login functionalities to existing services
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将登录功能添加到现有服务中
- en: In the preceding chapter, we used Email/Password authentication and also added
    our user to the Firebase database. We acquired basic knowledge about pushing data
    to Firebase. In this section, we will log the user and retrieve the user details
    from Firebase. We will add login functionalities in the authentication and user
    service.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用了电子邮件/密码身份验证并将我们的用户添加到Firebase数据库中。我们获得了将数据推送到Firebase的基本知识。在本节中，我们将登录用户并从Firebase检索用户详情。我们将在身份验证和用户服务中添加登录功能。
- en: Authentication service
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证服务
- en: During signup, the user is registered to Firebase. `AngularFireAuth` has the `signInWithEmailAndPassword`
    method to login the user. This method returns `firebase.Promise<any>`. This class
    has `then` and `catch` methods to handle success and failure scenarios. On success,
    we redirect the user to the user-profile case, and we show the error message on
    failure.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在注册过程中，用户注册到Firebase。`AngularFireAuth`有`signInWithEmailAndPassword`方法来登录用户。此方法返回`firebase.Promise<any>`。此类有`then`和`catch`方法来处理成功和失败场景。成功时，我们将用户重定向到用户个人资料页面，并在失败时显示错误消息。
- en: 'Considering the following methods:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下方法：
- en: '**Login**: This method validates the user and passes user information on successful
    login, as follows:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**登录**：此方法验证用户并在登录成功时传递用户信息，如下所示：'
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Reset**: `AngularFireAuth` provides an API to reset the password. Firebase
    provides the infrastructure for password resets, such as password email notification.
    We just need to call the `resetPassword` API in the authentication service, as
    follows:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重置**：`AngularFireAuth`提供了一个重置密码的API。Firebase提供了密码重置的基础设施，例如密码电子邮件通知。我们只需在身份验证服务中调用`resetPassword`API，如下所示：'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here''s the complete `authentication.service.ts` as of now:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这是完整的`authentication.service.ts`：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: User service
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户服务
- en: 'Here, we cover how to retrieve value from the Firebase by performing a read
    operation. `AngularFire2` has the `AngularFireDatabase` class, which provides
    the following two methods to read the data from Firebase:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们介绍如何通过执行读取操作从Firebase检索值。`AngularFire2`有`AngularFireDatabase`类，该类提供了以下两种方法从Firebase读取数据：
- en: '`object`: This retrieves the JSON object. It returns `AngularFireObject<T>`,
    which provides the `valueChanges` method to return the Observable. For example,
    if we want to get a user object from Firebase, then we use this method.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object`：此方法检索JSON对象。它返回`AngularFireObject<T>`，该对象提供了`valueChanges`方法以返回Observable。例如，如果我们想从Firebase获取用户对象，则使用此方法。'
- en: '`list`: This retrieves an array of JSON objects. It returns `AngularFireList<T>`,
    which provides the `valueChanges` method to return the Observable with an array
    of objects. For example, if we want to get all the users registered in our application,
    then this method is handful.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list`：此方法检索JSON对象的数组。它返回`AngularFireList<T>`，该对象提供了`valueChanges`方法以返回包含对象的Observable。例如，如果我们想获取在我们应用程序中注册的所有用户，则此方法非常有用。'
- en: Once the user types their correct credentials, then we retrieve the user details
    using the `object` method of `AngularFireDatabase`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户输入正确的凭据，我们就使用`AngularFireDatabase`的`object`方法检索用户详情。
- en: 'The list of methods in the `AngularFireDatabase` class, as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`AngularFireDatabase`类中的方法列表如下：'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Mostly in our application we use the `list` and `object` methods of `AngularFireDatabase`.
    These methods accept the `pathOrRef` parameters. The `list` method accepts an
    additional `QueryFn` as a parameter. The objective of these parameters is as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们主要使用`AngularFireDatabase`的`list`和`object`方法。这些方法接受`pathOrRef`参数。`list`方法接受一个额外的`QueryFn`参数。这些参数的目的是如下：
- en: '`pathOrRef`: This parameter accepts the path of data in the Firebase database.
    As shown in the following example, to access user data we provide the path till
    the user `uid`.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pathOrRef`：此参数接受Firebase数据库中数据的路径。如下例所示，要访问用户数据，我们提供直到用户`uid`的路径。'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For example, suppose we want to retrieve user information for user id `qu3bXn9tTJR7j4PBp9LzBGKxHAe2`,
    then the path in this case is `/users/qu3bXn9tTJR7j4PBp9LzBGKxHAe2`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想检索用户ID为`qu3bXn9tTJR7j4PBp9LzBGKxHAe2`的用户信息，那么在这种情况下路径是`/users/qu3bXn9tTJR7j4PBp9LzBGKxHAe2`：
- en: '![](img/00014.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00014.jpeg)'
- en: '`QueryFn`: This optional parameter in the `list` method, filters the list based
    on the filter criteria. For example, suppose we want the first three registered
    users, then we use `limitToFirst` query.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QueryFn`：这是`list`方法中的可选参数，根据过滤条件过滤列表。例如，如果我们想获取前三个注册的用户，那么我们使用`limitToFirst`查询。'
- en: 'Here''s the complete `user.service.ts` as of now:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是完整的`user.service.ts`：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Reusing the domain model
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新使用域模型
- en: 'Once the user is successfully logged in, we will retrieve the user object from
    our Firebase database. On successful log in, we get the string `uid` of the user
    and use this `uid` to retrieve the user details from the user''s node in the Firebase
    database. As discussed in the preceding section, we get the data in the JSON format
    as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户成功登录，我们将从我们的Firebase数据库中检索用户对象。在成功登录后，我们获取用户的字符串`uid`，并使用这个`uid`从Firebase数据库中用户节点检索用户详细信息。正如前文所述，我们以以下JSON格式获取数据：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This JSON object needs to be mapped to the user object. When we retrieve the
    JSON object from Firebase using `AngularFireDatabase`, we provide the type object
    in angle brackets, `<User>` and this maps the JSON to the user object:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此JSON对象需要映射到用户对象。当我们使用`AngularFireDatabase`从Firebase检索JSON对象时，我们在尖括号中提供类型对象`<User>`，这会将JSON映射到用户对象：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The constructor accepts all the parameters assigned to its member variable
    as shown in the following code; here''s the complete `user.ts`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数接受分配给其成员变量的所有参数，如下所示；以下是完整的`user.ts`：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Creating a login template
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建登录模板
- en: 'A login template is the view and this part is similar to the signup template.
    We have reused the email and password elements of signup. It has the following
    three parts:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 登录模板是视图，这部分与注册模板相似。我们重用了注册中的电子邮件和密码元素。它包含以下三个部分：
- en: '**Input form**: This is a textbox and takes a user-typed value'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**输入表单**：这是一个文本框，接受用户输入的值'
- en: '**Submit action**: It triggers the `onLogin()` method with login form data
    as its parameter to the component'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**提交操作**：它触发带有登录表单数据的`onLogin()`方法到组件'
- en: '**Navigation**: This will be covered in detail in [Chapter 4](part0071.html#23MNU0-bb7c6bfbc452460584038b7864f000f7),
    *Routing and Navigation between Components*, so I will not touch on this part
    here'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导航**：这部分将在第4章中详细说明，即[组件之间的路由和导航](part0071.html#23MNU0-bb7c6bfbc452460584038b7864f000f7)，因此在这里我不会涉及这部分内容。'
- en: 'The following is the complete `login.component.html`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为完整的`login.component.html`：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Error handling for login
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录错误处理
- en: As discussed in the preceding chapter, we will handle user input and server
    errors. In the login component, the user input error remains the same as with
    the signup component. In this component, we used the same in-built Angular error.
    This error message helps the user enter correct information.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，我们将处理用户输入和服务器错误。在登录组件中，用户输入错误与注册组件中的相同。在这个组件中，我们使用了相同的内置Angular错误。此错误消息有助于用户输入正确信息。
- en: Firebase error
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firebase错误
- en: 'Login Firebase APIs throw an error when a user logs in to a friend''s application.
    We use the `signInWithEmailAndPassword()` method of `AngularFireAuth` to sign
    up the user. This API throws the following errors:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户登录到朋友的应用程序时，登录Firebase API会抛出错误。我们使用`AngularFireAuth`的`signInWithEmailAndPassword()`方法来注册用户。此API会抛出以下错误：
- en: '`auth/invalid-email`: As the name implies, this error occurs when a user provides
    an invalid email address.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auth/invalid-email`：正如其名所示，当用户提供一个无效的电子邮件地址时，会发生此错误。'
- en: '`auth/user-disabled`: This error occurs when the registered user account is
    disabled in Firebase. This feature is required when the registered user is not
    complying with the terms and conditions of the application. Then, we can show
    a meaningful message to the user.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auth/user-disabled`：当注册用户账户在Firebase中被禁用时，将发生此错误。当注册用户不遵守应用程序的条款和条件时，需要此功能。然后，我们可以向用户显示有意义的消息。'
- en: 'You can disable the user account in the following three steps:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下三个步骤禁用用户账户：
- en: Go to Firebase.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往Firebase。
- en: Go to DEVELOP|Authentication on the left panel.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧面板转到 DEVELOP|认证。
- en: Highlight the user on the right panel. Click on the overflow icon and then on
    the Disable account option.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧面板上突出显示用户。点击溢出图标，然后选择禁用账户选项。
- en: 'Take a look at the following Disable account option in Firebase:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下Firebase中的禁用账户选项：
- en: '![](img/00015.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00015.jpeg)'
- en: '`auth/user-not-found`: This error occurs when the user has not signed up in
    our application. In this case, we can direct the user to the signup page.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auth/user-not-found`：当用户未在我们的应用程序中注册时，将发生此错误。在这种情况下，我们可以将用户直接导向注册页面。'
- en: '`auth/wrong-password`: This error occurs when the password is not correct.
    In this case, the user has two options: either provide the correct password or
    reset the password.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auth/wrong-password`：当密码不正确时，将发生此错误。在这种情况下，用户有两个选择：提供正确的密码或重置密码。'
- en: The login method in the authentication service returns `Promise<any>`. We handle
    the error in the `catch` block.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 认证服务中的登录方法返回`Promise<any>`。我们在`catch`块中处理错误。
- en: A promise is a result of any asynchronous operation. After a success or fail
    operation, we use the promise object to retrieve the stored data.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Promise是任何异步操作的结果。在成功或失败操作之后，我们使用Promise对象检索存储的数据。
- en: 'We will then reuse the error alert created in [Chapter 2](part0040.html#164MG0-bb7c6bfbc452460584038b7864f000f7),
    *Creating a Signup Component* and show the error :'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将重用[第2章](part0040.html#164MG0-bb7c6bfbc452460584038b7864f000f7)中创建的“创建注册组件”错误警报，并显示错误：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When a user provides a wrong password, the customized error message will be
    shown as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户输入错误密码时，将显示以下自定义错误消息：
- en: '![](img/00016.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00016.jpeg)'
- en: Creating a login component
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建登录组件
- en: 'The login component handles the user interaction with the UI. It is injected
    with three services to perform various actions:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 登录组件处理用户与UI的交互。它注入了三个服务以执行各种操作：
- en: '**Authentication service**: It provides the login API for signing in following
    the registered user.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证服务**：它提供登录API以供注册用户登录。'
- en: '**User service**: It provides a method to retrieve the user details from the
    Firebase database.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户服务**：它提供了一种从Firebase数据库中检索用户详细信息的方法。'
- en: '**Router**: This service is required to route to different pages in the application.
    In the login component, we will use this service to route the user to the signup
    page. This will be covered in more detail in the next chapter.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由器**：此服务用于在应用程序的不同页面之间进行路由。在登录组件中，我们将使用此服务将用户路由到注册页面。这将在下一章中详细介绍。'
- en: 'Services are injected in the `constructor` of the login component, as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 服务被注入到登录组件的`constructor`中，如下所示：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The login component also handles user click events. When the user clicks on
    the LOGIN button, the `onLogin` method is called. This method accepts login form
    data as a parameter, that has user-typed data. We retrieve the email and password
    as `loginFormData.value.email` and `loginFormData.value.password`. This data is
    passed to the authentication service for login. On successful log in, we get the
    `uid` of the user and then use this `uid` to retrieve the user details from our
    Firebase database. We also cache these user details in User Service for future
    reference in other pages:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 登录组件也处理用户点击事件。当用户点击登录按钮时，将调用`onLogin`方法。此方法接受登录表单数据作为参数，包含用户输入的数据。我们通过`loginFormData.value.email`和`loginFormData.value.password`检索电子邮件和密码。这些数据被传递给认证服务进行登录。登录成功后，我们获取用户的`uid`，然后使用此`uid`从我们的Firebase数据库中检索用户详细信息。我们还在用户服务中缓存这些用户详细信息，以便在其他页面中将来参考：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Finally, we saw how to log in as a registered user. Now, the only part missing
    is password recovery, which we will cover in the next section.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看到了如何以注册用户身份登录。现在，唯一缺少的部分是密码恢复，我们将在下一节中介绍。
- en: 'Here''s the complete `login.component.ts` as of now:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的完整`login.component.ts`如下所示：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally we register `LoginComponent` in authentication routing modules:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在认证路由模块中注册`LoginComponent`：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'So paste the URL, `http://localhost:4200/app-friends-login` in the browser
    and our login component looks like the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，将 URL `http://localhost:4200/app-friends-login` 粘贴到浏览器中，我们的登录组件看起来如下：
- en: '![](img/00017.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片 00017](img/00017.jpeg)'
- en: Resetting the password
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重置密码
- en: It is good to provide a password recovery option in our application and this
    process increases the usability of our application. The excellent thing is that
    Firebase provides all the infrastructure required to perform this action. We will
    add this feature in our application step by step.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中提供密码恢复选项是个好主意，这个过程提高了我们应用程序的可用性。令人兴奋的是，Firebase 提供了执行此操作所需的所有基础设施。我们将逐步在我们的应用程序中添加此功能。
- en: Adding modal template
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加模态模板
- en: The first step in the password a reset action is to take a user email address,
    and we will use a modal in this scenario. A modal is a popup/dialog that appears
    on top of the current page view. We will use a modal to display the popup to take
    the user email address.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 密码重置动作的第一步是获取用户电子邮件地址，我们将在此场景中使用模态框。模态框是一个出现在当前页面视图之上的弹出窗口/对话框。我们将使用模态框来显示弹出窗口以获取用户的电子邮件地址。
- en: '**Adding the modal template in the login html**: We have modified the `login.component.html` file
    to add the Reset password button, as shown in the following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**在登录 html 中添加模态模板**：我们已经修改了 `login.component.html` 文件以添加重置密码按钮，如下面的代码所示：'
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When the user clicks on Reset Password, the following modal appears:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击重置密码时，以下模态框会出现：
- en: '![](img/00018.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图片 00018](img/00018.jpeg)'
- en: 'Here''s the complete `login.component.html` as of now:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这是完整的 `login.component.html`：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Adding the onReset() functionality
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加 onReset() 功能
- en: The next step is to add reset method in the login component. The `onReset()`
    method in the login component resets the password and sends the reset instruction
    to the registered email. This email contains the reset link; when we click on
    the link, it opens another browser tab with an alert dialog to provide the new
    password.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在登录组件中添加重置方法。登录组件中的 `onReset()` 方法重置密码并将重置指令发送到注册的电子邮件。此电子邮件包含重置链接；当我们点击链接时，它会在另一个浏览器标签页中打开一个警报对话框以提供新密码。
- en: 'We add  the `onReset()` method in the login component as shown here:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在登录组件中添加了 `onReset()` 方法，如下所示：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Editing the password-reset template in Firebase
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Firebase 中编辑密码重置模板
- en: 'Firebase provides the option to change the template for the email. We can customize
    the email body. In this application, we are using the default template, even though
    you can change it through this process:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase 提供了更改电子邮件模板的选项。我们可以自定义电子邮件正文。在此应用程序中，我们使用默认模板，尽管您可以通过此过程进行更改：
- en: Go to Firebase authentication
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 Firebase 身份验证
- en: On the right panel, click on the TEMPLATES tab
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧面板上，点击 TEMPLATES 选项卡
- en: Click on the Password reset option on the left panel
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧面板上的密码重置选项
- en: Click on the pencil icon to edit it
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击铅笔图标进行编辑
- en: 'Consider the following password reset template in Firebase:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下 Firebase 中的密码重置模板：
- en: '![](img/00019.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图片 00019](img/00019.jpeg)'
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we implemented the login component and enhanced the authentication
    and user services. The login template and component look similar to the sign-in
    template and component. We then implemented password reset features in our application. Firebase
    provides the ingredient to implement reset password functionality. We also implemented
    our first modal in our application.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们实现了登录组件并增强了身份验证和用户服务。登录模板和组件看起来与登录模板和组件相似。然后我们在应用程序中实现了密码重置功能。Firebase
    为实现重置密码功能提供了必要的元素。我们还实现了我们应用程序中的第一个模态框。
- en: In the next chapter, we will be covering navigation flow between different components.
    We will also add Angular guard to restrict or enable navigation to a component
    based on a guard condition.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍不同组件之间的导航流程。我们还将添加 Angular 守卫以根据守卫条件限制或启用对组件的导航。
