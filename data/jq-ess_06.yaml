- en: Chapter 6. Better Forms with jQuery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章. 使用 jQuery 创建更好的表单
- en: In the last chapter, we looked at animations and how they can bring your site
    to life. In this chapter, we will look at one of the most important functions
    of any website – forms. A well-crafted form can be the difference between a new
    customer and a missed opportunity. So forms deserved to be examined closely.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了动画以及它们如何使您的网站生动起来。在本章中，我们将研究任何网站最重要的功能之一——表单。一个精心制作的表单可能是获取新客户和错失机会之间的区别。所以表单值得仔细研究。
- en: Getting users to complete a form and submit it can be challenging. If our site
    frustrates a user at any time, they may abandon the form and our site. So we provide
    the user with gentle cues letting them know what each input element of the form
    needs by using tool tips, placeholder text, and visual indicators letting them
    know whether an input is valid or invalid.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让用户完成表单并提交可能是具有挑战性的。如果我们的网站在任何时候让用户感到沮丧，他们可能会放弃填写表单和离开我们的网站。因此，我们通过使用工具提示、占位符文本和视觉指示器为用户提供温和的提示，让他们知道表单的每个输入元素需要什么。
- en: jQuery doesn't have too many methods dealing specifically with forms. The first
    of them are all shortcut methods; they replace using `.on()` with the name of
    the event as the first parameter. Let's examine them and learn how to put them
    to use.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 并没有太多专门处理表单的方法。其中的第一个都是快捷方式方法；它们用事件的名称作为第一个参数替换了`.on()`的使用。让我们来看看它们，并学习如何使用它们。
- en: Employing form methods
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用表单方法
- en: Let's have a look at a number of jQuery methods used with forms.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看一些与表单一起使用的 jQuery 方法。
- en: .submit()
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .submit()
- en: The most important of the form methods is `.submit()`. It binds a handler to
    the browser submit event. When the user has, hopefully, filled out your form and
    clicks the submit button, the event handler here gets activated. If you want to
    handle this event yourself without the form actually being submitted, you must
    either call `event.preventDefault()` or return `false` from the method. If you
    don't do one of these things, the form will be submitted to your server.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的表单方法之一是`.submit()`。它将处理程序绑定到浏览器提交事件。当用户已经（希望）填写了您的表单并单击提交按钮时，此处的事件处理程序将被激活。如果您想要自己处理此事件，而不实际提交表单，则必须调用`event.preventDefault()`或从方法中返回`false`。如果您没有执行其中一项操作，表单将被提交到您的服务器。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding event handler, we return `false` to keep the browser from
    submitting our form. We could have also called `event.preventDefault()`. We could
    have written the preceding as:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述事件处理程序中，我们返回`false`来阻止浏览器提交我们的表单。我们也可以调用`event.preventDefault()`。我们可以将上述内容写成：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This example works identically to the first, but uses a bit more text. We replaced
    the submit shortcut method with its long form, the `.on()` method, and we also
    replaced the return false by directly calling the `preventDefault()` method of
    the event object.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例的工作方式与第一个示例完全相同，但使用了更多的文本。我们用长格式的`.on()`方法替换了提交的快捷方式方法，并且我们还用事件对象直接调用了`preventDefault()`方法来替换了`return
    false`。
- en: .focus()
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .focus()
- en: When the user either tabs or clicks on a form element, the browser fires a focus
    event. The focus method creates a handler for this event. This could be handy
    if you would like to create some kind of indication for your users that this is
    the active element. Check out the `.blur()` method's code example to see how to
    use it with `.focus()`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在表单元素上切换或单击时，浏览器会触发一个焦点事件。焦点方法为此事件创建了一个处理程序。如果您希望为用户创建某种指示，表明这是活动元素，则这可能很方便。查看`.blur()`方法的代码示例，了解如何与`.focus()`一起使用。
- en: 'It is important to note that only form elements can receive focus. All of the
    following are form elements:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，只有表单元素才能接收焦点。以下所有内容都是表单元素：
- en: '`<input>`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<input>`'
- en: '`<select>`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<select>`'
- en: '`<textarea>`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<textarea>`'
- en: '`<button>`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<button>`'
- en: .blur()
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .blur()
- en: The `.blur()` method is the companion to the `.focus()` method. It creates a
    handler that is triggered when the user tabs off of or otherwise leaves this element
    causing it to lose focus. This event could also be used to run a validation of
    the element, but the change event is actually a better choice and it will be explained
    shortly with the `.change()` method.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`.blur()`方法是`.focus()`方法的伴侣。它创建了一个处理程序，当用户切换或离开此元素时触发，导致它失去焦点。此事件也可以用于对元素进行验证，但实际上使用变化事件更好，并且将在稍后使用`.change()`方法进行解释。'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can use the `.focus()` and `.blur()` methods together to add a class to the
    active element and remove it once it loses focus to offer a better visual cue
    to our users. Note that we are hooking both the input elements and the text area
    element by separating the tag names with a comma.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以一起使用`.focus()`和`.blur()`方法，为活动元素添加一个类，并在失去焦点时移除它，以为我们的用户提供更好的视觉提示。请注意，我们通过用逗号分隔标签名称来挂接输入元素和文本区域元素。
- en: One potential problem with the `.focus()` and `.blur()` methods is that they
    don't bubble up. If you place a child element that is to receive focus within
    a parent element and hook the focus event of the parent, the event will never
    be triggered. This means that you can't delegate these events to their parent.
    You will also have trouble if you need to hook the focus/blur events of dynamically
    generated input tags.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`.focus()`和`.blur()`方法的一个潜在问题是它们不会冒泡。如果将要接收焦点的子元素放置在父元素中，并挂接父元素的焦点事件，那么事件将永远不会触发。这意味着您无法将这些事件委托给它们的父级。如果您需要挂接动态生成的输入标签的焦点/失焦事件，您也会遇到麻烦。
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code we hook the focus and blur events of the `fieldset`, `fiOne`,
    which is the parent element for all of the radio buttons. There is no handler
    for those events on any of the radio button children. Unfortunately, since neither
    event bubbles up to its parent element, no event is ever triggered.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们挂接了`fieldset`，即所有单选按钮的父元素`fiOne`的焦点和失焦事件。在任何单选按钮子元素上都没有这些事件的处理程序。不幸的是，由于这两个事件都不会冒泡到其父元素，因此永远不会触发任何事件。
- en: .focusin() and .focusout()
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.focusin()`和`.focusout()`'
- en: 'So now we know that neither the focus nor the blur events bubble up to their
    parent. We''ve also learned in previous chapters how bubbling can help us to create
    more dynamic applications. Is there any way that we can get around the lack of
    bubbling? Luckily, there is a solution: the `.focusin()` and `.focusout()` methods.
    The `.focusin()` method creates a handler for the `focusin` event, which is triggered
    when an element is about to receive focus. The `.focusout()` method is the same
    as the `.focusin()` method except it works with the `focusout` event, which is
    triggered when an element is about to lose focus. Both of these methods will bubble
    up to their parent element.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道焦点和失焦事件都不会冒泡到它们的父级。我们还在之前的章节中了解了冒泡如何帮助我们创建更具动态性的应用程序。有没有办法规避冒泡的缺乏呢？幸运的是，有一个解决方案：`.focusin()`和`.focusout()`方法。`.focusin()`方法为`focusin`事件创建一个处理程序，当元素即将获得焦点时触发。`.focusout()`方法与`.focusin()`方法相同，只是它与`focusout`事件一起工作，当元素即将失去焦点时触发。这两种方法都会冒泡到它们的父元素。
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code sample is nearly identical to the previous sample, except the focus
    and blur events have been replaced with the `focusin` and `focusout` events, respectively.
    We again hook the parent `fieldset` element. This time, however, the events bubble
    up to their parent. We add the active class to the `fieldset` and even display
    which element generated the event by getting its ID from the target property of
    the event object.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码示例与前一个示例几乎相同，只是焦点和失焦事件分别替换为`focusin`和`focusout`事件。我们再次挂接父级`fieldset`元素。但是，这次，事件会冒泡到它们的父级。我们将活动类添加到`fieldset`，甚至通过从事件对象的目标属性获取其ID来显示生成事件的元素。
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, we use jQuery to dynamically create new input tags. Please
    note how we use chaining to both append the new input tag and set its attributes.
    Even though these tags don't exist at the time their parent hooks the `focusin`
    and `focusout` events, they nonetheless bubble their events to it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们使用jQuery动态创建新的输入标签。请注意我们如何使用链式操作来附加新的输入标签并设置其属性。即使这些标签在它们的父级挂接`focusin`和`focusout`事件时并不存在，它们仍然会将它们的事件冒泡到它。
- en: .change()
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.change()`'
- en: The `.change()` method creates a handler for the change event. What is nice
    about the change event is it fire only when the value of the input or text element
    has changed and the field no longer has focus. This makes it better for validation
    than using the blur event since the blur event always fires when the element loses
    focus, whether or not its value has changed. By using the change event, we save
    ourselves from doing some unnecessary processing.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`.change()`方法为change事件创建一个处理程序。change事件的好处是只有在输入或文本元素的值发生更改并且字段不再具有焦点时才触发。这使其比使用失焦事件更适合用于验证，因为失焦事件总是在元素失去焦点时触发，无论其值是否已更改。通过使用change事件，我们可以避免进行一些不必要的处理。'
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: .select()
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.select()`'
- en: 'The last of the event handler methods that we will examine in this chapter
    is the `.select()` method. It binds to the select event. This event is only triggered
    on the two elements that allow you to type in text: `<textarea>` and `<input type=''text''>`.
    The select event only occurs when the user selects some text.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章将要检查的事件处理程序方法中的最后一个是`.select()`方法。它绑定到select事件。此事件仅在允许输入文本的两个元素上触发：`<textarea>`和`<input
    type='text'>`。当用户选择某些文本时才会发生select事件。
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, we simply hook the select event and display the name of the
    tag when it is received. Like most events, we can also trigger the select event
    by using the `.trigger()` method.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们简单地挂接了select事件，并在接收到该事件时显示标签的名称。像大多数事件一样，我们也可以使用`.trigger()`方法触发select事件。
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tooltips
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具提示
- en: The title attribute has been available since HTML 4.01 for all elements except
    `<base>`, `<basefont>`, `<head>`, `<html>`, `<meta>`, `<param>`, `<script>`, and
    `<title>`. It defines a string that most browsers will render above and near the
    element when the cursor is above the element. The displayed string is commonly
    referred to as a tooltip.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 自HTML 4.01以来，除了`<base>`、`<basefont>`、`<head>`、`<html>`、`<meta>`、`<param>`、`<script>`和`<title>`元素之外，title属性可用。它定义了一个字符串，大多数浏览器在鼠标位于元素上方时会在元素上方附近渲染。显示的字符串通常称为工具提示。
- en: Standard HTML tooltips leave a lot to be desired. Out of the box they are usually
    styled in a very plain fashion that may clash with your site. If your site, for
    example, uses a large font to aid your users, a standard tooltip will look very
    awkward. Luckily, jQuery has a solution, although it is not in the core library.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的HTML工具提示留下了很多问题。默认情况下，它们的样式通常很简单，可能与您的网站不搭配。例如，如果您的网站使用大号字体来帮助用户，标准的工具提示看起来会非常尴尬。幸运的是，jQuery有解决方案，尽管它不在核心库中。
- en: jQuery UI is a library that contains a set of user interface components. The
    set is designed to be customizable. One of the members of the set is the tooltip.
    For browsers that lack a native tooltip (title attribute support), it adds support.
    For browsers that have native support for tooltips, it enhances them by make them
    customizable and animated.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI是一个包含一组用户界面组件的库。设计该组是为了可定制。该组的成员之一是工具提示。对于缺乏本机工具提示（title属性支持）的浏览器，它提供支持。对于具有本机工具提示支持的浏览器，它通过使它们可定制和动画化来增强它们。
- en: All of the components of jQuery UI require the jQuery core library plus a CSS
    and a JavaScript file in order to work. The CSS file must be added to your HTML
    file before jQuery, and the JavaScript file must be added afterwards.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI的所有组件都需要jQuery核心库以及CSS和JavaScript文件才能正常工作。CSS文件必须在jQuery之前添加到您的HTML文件中，JavaScript文件必须在jQuery之后添加。
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding markup shows how to correctly add jQuery UI support to a website.
    First, we add the CSS file, then jQuery, and finally we add jQuery UI.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的标记显示了如何正确地将jQuery UI支持添加到网站中。首先，我们添加CSS文件，然后是jQuery，最后我们添加jQuery UI。
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding code is using a content delivery network, CDN, to host the files.
    You can also host the files on your own server, but by using a CDN, you can get
    a potential performance boost because user browsers may have already cached your
    files the first time they ever came to your site.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，使用内容交付网络（CDN）来托管文件。您也可以将文件托管在您自己的服务器上，但是使用CDN，您可以获得潜在的性能提升，因为用户浏览器可能已经在第一次访问您的网站时缓存了您的文件。
- en: Once we have the jQuery library loaded, using the tooltip is pretty simple.
    We need to hook the jQuery document ready event and set up our tooltip during
    it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们加载了jQuery库，使用工具提示就很简单。我们需要挂接jQuery文档准备事件并在其中设置我们的工具提示。
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding sample, we wait for the document ready event. In the event
    handler, we bind the tooltip to the document. This makes it available to our entire
    site. The final step is to add an animation. The tooltip can be customized to
    animate onto and off of the page. Here, we have the tooltip animate onto the page
    after a 150 millisecond delay. It uses the `slideDown` animation effect.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们等待文档准备事件。在事件处理程序中，我们将工具提示绑定到文档上。这样就可以在整个网站上使用它。最后一步是添加动画效果。工具提示可以定制为在页面上以及页面外播放动画。在这里，我们让工具提示在150毫秒延迟后以`slideDown`的动画效果进入页面。
- en: Placeholder
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 占位符
- en: Another feature that modern browsers have that older ones lack is placeholder
    text. It is the slightly grayed text that appears inside of input elements and
    disappears once the user begins to type. Placeholders are important to forms.
    They provide the user with a hint about the format of the content unlike the `<label>`
    element, which is what kind of information is expected. The placeholder attribute
    has only been around since HTML5\. There are still plenty of browsers lacking
    support for it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个现代浏览器具有但旧版本浏览器缺少的功能是占位符文本。它是出现在输入元素内部的略微灰色的文本，一旦用户开始输入就会消失。占位符对于表单很重要。它们为用户提供关于内容格式的提示，不像
    `<label>` 元素，它提供了什么类型的信息是预期的。占位符属性自 HTML5 以来才有。仍然有很多浏览器不支持它。
- en: 'In order to add support for the placeholder attribute to older browsers, we
    will again use a plugin, but not one from the jQuery team. Instead, we will use
    the excellent jquery-placeholder, from Mathias Bynens. It is available for download
    from both bower and npm, but we will download it directly from its GitHub repo
    at: [http://mathiasbynens.github.io/jquery-placeholder/](http://mathiasbynens.github.io/jquery-placeholder/).
    Since we aren''t concerned with how it works, only with how to use it, we will
    install the minified version in our site. In order to do that, we add the following
    line to our HTML file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在旧版本浏览器中添加对占位符属性的支持，我们将再次使用一个插件，但不是来自 jQuery 团队的插件。相反，我们将使用出色的 jquery-placeholder，来自
    Mathias Bynens。可以从 bower 和 npm 下载，但我们将直接从其 GitHub 仓库下载：[http://mathiasbynens.github.io/jquery-placeholder/](http://mathiasbynens.github.io/jquery-placeholder/)。由于我们不关心它的工作原理，只关心如何使用它，我们将在我们的网站上安装缩小版。为此，我们在
    HTML 文件中添加以下行：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The placeholder is a type of plugin referred to as a polyfill. This means that
    its goal is only to give a browser missing a standard feature that feature. And
    if the browser already supports that standard, it does nothing. In order to activate
    the plugin, we add it to the jQuery document ready event, the same way we did
    earlier with the tooltip.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 占位符是一种称为 polyfill 的插件类型。这意味着它的目标只是给缺少标准功能的浏览器提供该功能。如果浏览器已经支持该标准，它将不起作用。为了激活插件，我们将其添加到
    jQuery 文档就绪事件中，方式与之前处理工具提示相同。
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Enabling and disabling elements
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用和禁用元素
- en: Elements in your form that are not valid should be disabled. A disabled element
    is usually shown dimmed-out with gray text. A disabled element can't be focused,
    doesn't respond to the user, and won't be sent when the form is submitted.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 表单中无效的元素应该被禁用。禁用的元素通常显示为灰色文本。禁用的元素无法聚焦，不响应用户，并且在提交表单时不会被发送。
- en: The odd thing about the disabled attribute is that its presence inside of an
    element disables it. It doesn't need to be set to `true` or `false`. In fact,
    setting it `true` or `false` has no effect. To disable the element, add the disabled
    attribute. To enable the element, remove the disabled attribute. Luckily, jQuery
    understands this odd behavior and takes care of this detail for us.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 关于禁用属性的奇怪之处在于，它在元素内的存在就会禁用它。它不需要设置为 `true` 或 `false`。实际上，将其设置为 `true` 或 `false`
    没有任何效果。要禁用元素，请添加禁用属性。要启用元素，请移除禁用属性。幸运的是，jQuery 理解这种奇怪的行为并为我们处理了这个细节。
- en: 'We can use the jQuery `.prop()` method to help us out. When we want to disable
    the element, we do the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 jQuery 的 `.prop()` 方法来帮助我们。当我们想要禁用元素时，我们执行以下操作：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And when we want to enable the element, we do the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要启用元素时，我们执行以下操作：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In spite of the way things look, jQuery will do exactly what we said. The first
    line of code will add the disabled attribute to the element and the second will
    remove it. Here is a more full-featured snippet of code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管事情看起来很奇怪，但 jQuery 将会按照我们说的那样执行。第一行代码将向元素添加禁用属性，第二行将其移除。这里是一个更全面的代码片段：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We begin by wiring up an event listener for the click event of the `disableEnable`
    button. Once the event is received, we check to see if the button is currently
    disabled. If it is, we enable it and change the button's text label. If the element
    is not disabled, we disable it and change the text message.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过为 `disableEnable` 按钮的点击事件绑定事件监听器。一旦接收到事件，我们检查按钮当前是否已禁用。如果是，则启用它并更改按钮的文本标签。如果元素未禁用，则禁用它并更改文本消息。
- en: Validation
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证
- en: 'So far, we''ve learned how to hook form events, how to provide modern browser
    features like placeholder and tooltips to older browsers, and how to use jQuery
    form methods to gather all of our form data. But we are not doing something really
    important: validating the data.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们学会了如何挂钩表单事件，如何为旧版浏览器提供现代浏览器功能，如占位符和工具提示，以及如何使用 jQuery 表单方法来收集所有的表单数据。但是我们没有做一件非常重要的事情：验证数据。
- en: Validation is important both for the user and for us as the site's creators.
    For users, validation can be used to let them know how to correctly fill out the
    form. We can gently nudge them when they make a mistake instead of allowing them
    to submit a bad form and telling them afterwards that the form contained errors.
    As the site's maintainers, it can be frustrating to find an address in a field
    that should have a phone number. HTML5 added a lot of validation features to the
    web. Before we take a look at what jQuery has to offer, let's see what we get
    for free in a modern browser.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对用户和我们作为站点创建者来说，验证都很重要。对于用户，验证可以用来告诉他们如何正确填写表单。当他们犯错时，我们可以轻轻地提醒他们，而不是让他们提交一个错误的表单，然后告诉他们表单中包含错误。作为站点的维护者，发现一个应该有电话号码的字段中却找到了地址，这可能会令人沮丧。HTML5
    为 Web 添加了许多验证功能。在我们看看 jQuery 提供了什么之前，让我们先看看现代浏览器中免费提供了什么。
- en: 'The first HTML5-added attribute that we will look at seems so simple and trivial
    it is a bit hard to imagine that it didn''t exist already: `autofocus`. The `autofocus`
    attribute declares which form element should have the focus when the form is loaded.
    Before it existed, the user had to click an element in order to select it or we
    had to use a bit of jQuery code like the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到的第一个 HTML5 新添加的属性似乎如此简单和微不足道，以至于很难想象它以前并不存在：`autofocus`。`autofocus` 属性声明了在加载表单时应该拥有焦点的表单元素。在它出现之前，用户必须点击一个元素才能选择它，或者我们必须使用一点
    jQuery 代码，如下所示：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'With HTML5, the preceding code is replaced with:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 HTML5，先前的代码被替换为：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `autofocus` attribute declares that this element gets the focus. Only one
    element should have the attribute at any given time.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`autofocus` 属性声明该元素获得焦点。在任何给定时间，只应该有一个元素具有该属性。'
- en: 'HTML5 also added to the number of `<input>` element types. Previously, the
    only available types were:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5 还增加了 `<input>` 元素类型的数量。以前，唯一可用的类型是：
- en: '| Type | Purpose |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 用途 |'
- en: '| --- | --- |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Button | A push-down button |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 按钮 | 按钮 |'
- en: '| Checkbox | A checkbox |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 复选框 | 复选框 |'
- en: '| File | File selection |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 文件 | 文件选择 |'
- en: '| Hidden | Not displayed but is submitted to server |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 隐藏 | 不显示但提交到服务器 |'
- en: '| Image | A graphical version of the submit button |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 图片 | 提交按钮的图形版本 |'
- en: '| Password | Text field with an obscured value |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 密码 | 值被隐藏的文本字段 |'
- en: '| Radio | A radio button |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 单选按钮 | 单选按钮 |'
- en: '| Reset | Resets the form''s content to the default values |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 重置 | 将表单内容重置为默认值 |'
- en: '| submit | Submits the form |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 提交 | 提交表单 |'
- en: '| Text | Single line text field |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 文本 | 单行文本字段 |'
- en: 'HTML5 added the following new types of `<input>`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5 添加了以下新的 `<input>` 类型：
- en: '| Type | Purpose |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 用途 |'
- en: '| --- | --- |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Color | A color picker |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 颜色 | 颜色选择器 |'
- en: '| Date | A date picker (no time) |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 日期 | 日期选择器（不含时间） |'
- en: '| datetime | A date/time picker for UTC |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 日期/时间 | UTC 的日期/时间选择器 |'
- en: '| datetime-local | A date/time picker for the local time zone |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 本地日期/时间 | 本地时区的日期/时间选择器 |'
- en: '| email | An e-mail address |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 电子邮件 | 电子邮件地址 |'
- en: '| month | A month/year picker |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 月份 | 月份/年份选择器 |'
- en: '| number | A text field for a floating point number |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 数字 | 浮点数的文本字段 |'
- en: '| range | A range slider |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 范围 | 范围滑块 |'
- en: '| search | A text field for search strings |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 搜索 | 用于搜索字符串的文本字段 |'
- en: '| Tel | A text field for a telephone number |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 电话 | 用于电话号码的文本字段 |'
- en: '| Time | A time picker with no time zone |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 时间 | 无时区的时间选择器 |'
- en: '| url | A text field for a URL |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 链接 | 用于URL的文本字段 |'
- en: '| week | A week/year picker |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 周 | 周/年选择器 |'
- en: 'It is important to state that there is very little checking on the different
    types. As an example, the Tel type allows for the entry of characters that are
    not normally part of a telephone number. Three HTML5 attributes can help: `minlength`,
    `maxlength`, and `pattern`. The `minlength` attribute states the minimum number
    of characters that can be entered in order for the string to be considered valid.
    The `maxlength` attribute does the same except for the maximum number of characters.
    The final attribute is `pattern`; it states a regular expression that the inputted
    string is checked against. In order for the string to be considered valid, it
    must pass. Regular expressions are super-handy for validation purposes, but they
    can be tricky to write correctly. Be sure to thoroughly test any regular expression
    that you add to your site. I also highly recommend using a site that has recipes
    for popular validation. One such site is the very popular regular expression site
    at: [http://www.regular-expressions.info](http://www.regular-expressions.info).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的一点是，对不同类型的检查非常少。例如，Tel 类型允许输入通常不是电话号码的字符。HTML5 提供了三个属性可以帮助：`minlength`、`maxlength`
    和 `pattern`。`minlength` 属性表示输入的字符串必须包含的最小字符数才能被视为有效。`maxlength` 属性也是如此，只不过是最大字符数。最后一个属性是
    `pattern`；它指定了要检查输入字符串的正则表达式。为了使字符串被视为有效，它必须通过。正则表达式在验证目的上非常方便，但编写正确的正则表达式可能会有些棘手。请务必对你网站中添加的任何正则表达式进行彻底测试。我还强烈建议使用一个有流行验证方案的网站。其中一个很受欢迎的正则表达式网站是：[http://www.regular-expressions.info](http://www.regular-expressions.info)。
- en: 'HTML5 also adds a very simple but important validation attribute: required.
    The required attribute simply states that an input element must be filled out
    in order for the form to be considered valid. If it is left empty or filled but
    not valid, compliant browsers will flag the error when the user attempts to submit
    the form. Unfortunately, the error message and style vary per browser. So once
    again, if we really want to be in charge of our site''s styling, we must turn
    to our good friend jQuery.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5 还添加了一个非常简单但重要的验证属性：required。required 属性简单地表示输入元素必须填写才能使表单被视为有效。如果它为空或填写但无效，符合规范的浏览器在用户尝试提交表单时会标记错误。不幸的是，错误消息和样式因浏览器而异。所以，如果我们真的想要掌控我们网站的样式，我们必须再次求助于我们的好朋友
    jQuery。
- en: 'Validation is not part of jQuery or jQuery UI, but it is the primary function
    of the jquery-validate plugin. It is written and maintained by a member of the
    jQuery, jQuery UI, and QUnit teams, Jörn Zaefferer. It began in 2006 and is still
    being maintained today, making it one of the oldest jQuery plugins. The home of
    jquery-validate is: [http://jqueryvalidation.org/](http://jqueryvalidation.org/).
    It can be downloaded as a zip file there or via bower or nuget package managers.
    The core of the plugin is in the file `jquery.validate.js`. It is all you need
    for most installations.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 验证并不是 jQuery 或 jQuery UI 的一部分，而是 jquery-validate 插件的主要功能。该插件由 jQuery、jQuery
    UI 和 QUnit 团队成员 Jörn Zaefferer 编写和维护。它始于 2006 年，至今仍在维护，是最古老的 jQuery 插件之一。jquery-validate
    的主页是：[http://jqueryvalidation.org/](http://jqueryvalidation.org/)。你可以在那里下载 zip
    文件，也可以通过 bower 或 nuget 包管理器下载。该插件的核心在文件 `jquery.validate.js` 中。对于大多数安装来说，这就是你所需要的。
- en: 'Once you have the plugin added to your script files, next you need to add the
    call to the validate method on the forms you would like to validate to your jQuery
    document ready event handler. In order to minimize validation, just enhancing
    what HTML5 provides, all you need to add is something like the following line:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将插件添加到你的脚本文件中，接下来你需要在你的 jQuery 文档准备好的事件处理器中，对你想要验证的表单添加调用验证方法。为了最小化验证，仅增强
    HTML5 提供的内容，你只需添加如下一行代码：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This line tells the plugin to validate the form named `personalInfo`. Nothing
    else further is required. The plugin will behave in accordance with the validation
    attributes you placed on your form elements, even with browsers that are not HTML5
    compliant.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行告诉插件验证名为 `personalInfo` 的表单。不需要其他进一步的操作。该插件将根据你在表单元素上放置的验证属性的行为进行操作，即使是不符合
    HTML5 规范的浏览器也是如此。
- en: 'If you would like more customization, you will need to pass an initialization
    object to the plugin. The two most important properties are rules and messages.
    The rules property defines how the plugin will validate each form element. The
    messages property defines which message the plugin will display when an element
    fails validation. Here is the code for our validation sample:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要更多自定义，您将需要将一个初始化对象传递给插件。最重要的两个属性是 rules 和 messages。rules 属性定义插件将如何验证每个表单元素。messages
    属性定义了当元素验证失败时插件将显示哪个消息。以下是我们验证示例的代码：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In addition to adding the validate plugin, we need to include jQuery and since
    we are still using the jQuery tooltip and placeholder plugins, we include them
    as well. Next, we add a bit of inline CSS to give us a little style.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 除了添加验证插件之外，我们还需要包含 jQuery，因为我们仍然使用 jQuery 的提示和占位符插件，我们也将它们包含在内。接下来，我们添加了一点内联
    CSS 来为我们增加一些样式。
- en: 'Our form is pretty standard except for one thing: we are no longer adding any
    inline validation attributes. Instead, we define the validation rules in the JavaScript
    object that we pass into the validation method, which we will see next:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的表单相当标准，除了一件事：我们不再添加任何内联验证属性。相反，我们在传递给验证方法的 JavaScript 对象中定义验证规则，接下来我们将看到：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The first part of this code sample is fairly straightforward. We bind to jQuery's
    ready event and then enable the placeholder polyfill and tooltips.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码示例的第一部分相当直接了当。我们绑定到 jQuery 的就绪事件，然后启用占位符 polyfill 和工具提示。
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the rules property of the validation object, we pass the names of all the
    elements we wish to validate. We can tell the validator which elements are required,
    their minimum lengths, whether they should match another element, and so on. The
    validator can do much more than shown in the code, so be sure to read the documentation
    to learn more.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在验证对象的 rules 属性中，我们传递了我们希望验证的所有元素的名称。我们可以告诉验证器哪些元素是必需的，它们的最小长度，它们是否应该与另一个元素匹配等等。验证器可以做的远远超出了代码所示的内容，因此一定要阅读文档以了解更多信息。
- en: '[PRE23]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the message property of the validation object, we pass all of the messages
    we wish to display. Any element or state not defined here will simply be assigned
    a default validation error message, which in many cases may be sufficient.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在验证对象的 message 属性中，我们传递了我们希望显示的所有消息。这里未定义的任何元素或状态将简单地分配一个默认的验证错误消息，这在许多情况下可能已经足够了。
- en: The final property passed to the validation method is the submit handler. This
    is the method that is called once the user has successfully submitted his form.
    You must use the submit handler and not the jQuery submit handler.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给验证方法的最后一个属性是 submit 处理程序。这是用户成功提交表单后调用的方法。您必须使用 submit 处理程序，而不是 jQuery 的
    submit 处理程序。
- en: Filtering out unwanted characters
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤掉不需要的字符
- en: 'It is our job as web developers to keep the user from doing something bad accidentally.
    Validation lets the user know when they''ve entered something wrong. Filtering
    helps keep the user from entering invalid characters. In order to filter characters
    being entered into a text field, we will need to hook two events: "keypress" and
    "paste".'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 web 开发人员，我们的工作是防止用户意外做出一些不好的事情。验证可以让用户知道他们输入了错误的内容。过滤有助于防止用户输入无效字符。为了过滤输入到文本字段中的字符，我们需要挂钩两个事件："keypress"
    和 "paste"。
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Hooking the `keypress` event allows us to see each key as it is pressed and
    decide whether or not we want this character in our text field. We hook the paste
    key to stop the user from cutting and pasting strings into our text field. Most
    of the work is done by the regular expression. It filters out everything except
    numbers and letters.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 挂钩 `keypress` 事件允许我们在按下每个键时查看每个键，并决定我们是否希望这个字符出现在我们的文本字段中。我们挂钩粘贴键以阻止用户将字符串剪切并粘贴到我们的文本字段中。大部分工作由正则表达式完成。它过滤掉除数字和字母之外的所有内容。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: Forms are very important to most websites. They are the primary way in which
    our site's users communicate with the site. Helping our user to fill out our forms
    and making sure that the data we get is good. We've seen many of the ways that
    jQuery helps us with forms. The tooltip plugin helps us to add the tooltips to
    browsers lacking it and to style the tooltips to match our site's look. The placeholder
    polyfill gives the placeholder attribute to older browsers and quietly steps out
    of the way for browsers that already support it.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 表单对于大多数网站来说非常重要。它们是我们网站用户与网站交流的主要方式。帮助我们的用户填写表单，并确保我们获得的数据是良好的。我们已经看到了 jQuery
    如何帮助我们处理表单的许多方式。工具提示插件帮助我们向缺乏它的浏览器添加工具提示，并将工具提示样式设置为与我们网站外观相匹配。占位符填充为较旧的浏览器提供占位符属性，并对已支持该属性的浏览器静默地退出。
- en: jQuery also provides us with easy ways to hook the submit, change, and other
    form events. These events also provide points to validate the data before we submit
    it or once it has changed.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 也为我们提供了简单的方法来挂钩提交、更改和其他表单事件。这些事件还提供了在我们提交数据之前或数据更改后验证数据的点。
- en: In the next chapter, we will learn about Ajax and how jQuery makes it almost
    trivial to send and receive data from our server.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于 Ajax 以及 jQuery 如何使得从我们的服务器发送和接收数据几乎变得轻而易举。
