- en: '22'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Collecting User Input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In web applications, you can collect user input from standard HTML form elements
    that look and behave similarly on all browsers. With native UI platforms, collecting
    user input is more nuanced.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn how to work with the various React Native components
    that are used to collect user input. These include text input, selecting from
    a list of options, checkboxes, and date/time selectors. All of these are used
    in every app in cases of register or login flow, as well as the purchase form.
    The experience of creating such forms is very valuable and this chapter will help
    you to know how to create any form in your future apps. You’ll learn the differences
    between iOS and Android and how to implement the appropriate abstractions for
    your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Collecting text input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting from a list of options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toggling between on and off
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collecting date/time input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the code files for this chapter on GitHub at [https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter2](https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter23)2.
  prefs: []
  type: TYPE_NORMAL
- en: Collecting text input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It turns out that there’s a lot to think about when it comes to implementing
    text inputs. For example, should it have placeholder text? Is this sensitive data
    that shouldn’t be displayed on the screen? Should you process text as it’s entered
    or when the user moves to another field?
  prefs: []
  type: TYPE_NORMAL
- en: 'In web apps, there is a special `<input>` HTML element that allows you to collect
    user inputs. In React Native, for that purpose, we use the `TextInput` component.
    Let’s build an example that renders several instances of the `<TextInput>` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We have implemented the `Input` component that we will reuse several times.
    Let’s take a look at a few use cases of text inputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'I won’t go into depth about what each of these `<TextInput>` components is
    doing; there are labels in the `Input` components that explain this. Let’s see
    what these components look like on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Picture 1](img/B19636_22_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.1: Text input variations'
  prefs: []
  type: TYPE_NORMAL
- en: The plain text input shows the text that’s been entered. The **Password Input**
    field doesn’t reveal any characters. **Placeholder Text** is displayed when the
    input is empty. The **Changed** text state is also displayed. You can’t see the
    **Submitted** text state because I didn’t press the **Submitted** button on the
    virtual keyboard before I took the screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at the virtual keyboard for the input element where you changed
    the **Return Key** text via the `returnKeyType` prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Picture 2](img/B19636_22_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.2: Keyboard with changed Return key text'
  prefs: []
  type: TYPE_NORMAL
- en: When the keyboard **Return key** reflects what’s going to happen when the user
    presses it, the user feels more in tune with the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'One more common use case is changing the keyboard type. By providing the `keyboardType`
    prop to the `TextInput` component, you will see different variations of keyboards.
    This is convenient when you need to enter a PIN code or email address. Here is
    an example of a `numeric` keyboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Picture 3](img/B19636_22_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.3: Numeric keyboard type'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’re familiar with collecting text input, it’s time to learn how
    to select a value from a list of options.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting from a list of options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In web applications, you typically use the `<select>` element to let the user
    choose from a list of options. React Native comes with a `Picker` component, which
    works on both iOS and Android, but in terms of reducing the React Native app size,
    the Meta team decided to delete it in future releases and extract `Picker` to
    its own package. To use that package, firstly, we install it in a clean project
    by running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'There is some trickery involved with styling this component based on which
    platform the user is on, so let’s hide all of this inside a generic `Select` component.
    Here’s the `Select.ios.js` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: That’s a lot of overhead for a simple `Select` component. It turns out that
    it’s quite hard to style the React Native `Picker` component, because it looks
    completely different on iOS and Android. Despite that, we want to make it more
    cross-platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the `Select.android.js` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what the styles look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As usual with the `container` and `pickersBlock` styles, we define the base
    layout of the screen. Next, let’s take a look at the styles of the `Select` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can render your `Select` component. Here is what the `App.js` file
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we defined the default values for our `Select` component. Let’s take
    a look at the final `SelectingOptions` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'With these hooks, we’ve implemented states of selectors. Next, we will use
    and pass them into components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The basic idea of this example is that the selected option in the first selector
    changes the available options in the second selector. When the second selector
    changes, the label shows `selectedSize` and `selectedGarment` as a string. Here’s
    how the screen looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Picture 4](img/B19636_22_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.4: Selecting from the list of options'
  prefs: []
  type: TYPE_NORMAL
- en: The **Size** selector is shown on the left-hand side of the screen. When the
    **Size** value changes, the available values in the **Garment** selector on the
    right-hand side of the screen change to reflect size availability. The current
    selection is displayed as a string after the two selectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how our `app` looks on an Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19636_22_05.PNG.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.5: Selecting from the list of options on Android'
  prefs: []
  type: TYPE_NORMAL
- en: When the iOS version of the `Picker` component renders a scrollable list of
    options, the Android one gives only buttons that open a dialog modal for selecting
    options.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, you’ll learn about the buttons that toggle between
    on and off states.
  prefs: []
  type: TYPE_NORMAL
- en: Toggling between on and off
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another common element you’ll see in web forms is checkboxes. For example,
    think of toggling Wi-Fi or Bluetooth on your device. React Native has a `Switch`
    component that works on both iOS and Android. Thankfully, this component is a
    little easier to style than the `Picker` component. Let’s look at a simple abstraction
    you can implement to provide labels for your switches:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s learn how we can use a couple of switches to control application
    state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: These two switches toggle the `disabled` property of one another. When the first
    switch is toggled, the `setFirst()` function is called, which will update the
    value of the first state. Depending on the current value of `first`, it will either
    be set to `true` or `false`. The second switch works the same way, except it uses
    `setSecond()` and the second state value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Turning on one switch will disable the other because we’ve set the `disabled`
    property value for each switch to the state of the other switch. For example,
    the second switch has `disabled={first}`, which means that it is disabled whenever
    the first switch is turned on. Here’s what the screen looks like on iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Picture 5](img/B19636_22_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.6: Switch toggles on iOS'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the same screen looks like on Android:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Picture 6](img/B19636_22_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.7: Switch toggles on Android'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, our `CustomSwitch` component enables the same functionality
    on Android and iOS while using one component for both platforms. In the following
    section, you’ll learn how to collect date/time input.
  prefs: []
  type: TYPE_NORMAL
- en: Collecting date/time input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final section of this chapter, you’ll learn how to implement date/time
    pickers. React Native docs suggest using `@react-native-community/datetimepicker`
    independent date/time picker components for iOS and Android, which means that
    it is up to you to handle the cross-platform differences between the components.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install `datetimepicker`, run the following command in the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'So, let’s start with a `DatePicker` component for iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'There’s not a lot to this component; it simply adds a label to the `DateTimePicker`
    component. The Android version works a bit differently; the better approach would
    be to use an **imperative API**. Let’s take a look at the implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The key difference between the two date pickers is that the Android version
    doesn’t use a React Native component like D`ateTimePicker` in iOS. Instead, we
    have to use the imperative `DateTimePickerAndroid.open()` API. This is triggered
    when the user presses the date text that our component renders and opens a date
    picker dialog. The good news is that this component of ours hides this API behind
    a declarative component.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve also implemented a time picker component that follows this exact pattern.
    So, rather than listing that code here, I suggest that you download the code for
    this book from [https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter2](https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter22)2
    so that you can see the subtle differences and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s learn how to use our date and time picker components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! Now, we have `DatePicker` and `TimePicker` components that can help
    us select dates and times in our app. Also, they both work on iOS and Android.
    Let’s see how the pickers look on iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Picture 7](img/B19636_22_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.8: iOS date and time pickers'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, the iOS date and time pickers use the `Picker` component that
    you learned about earlier in this chapter. The Android picker looks a lot different;
    let’s look at it now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Picture 8](img/B19636_22_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.9: Android date picker'
  prefs: []
  type: TYPE_NORMAL
- en: The Android version follows a completely different approach from the iOS date/time
    picker, yet we can use the same `DatePicker` component that we’ve created on both
    platforms. This brings us to the end of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the various React Native components that resemble
    the form elements from the web that we’re used to. We started off by learning
    about text input and how each text input has its own virtual keyboard to take
    into consideration. Next, we learned about `Picker` components, which allow the
    user to select an item from a list of options. Then, we learned about the `Switch`
    component, which is kind of like a checkbox. With these components, you will be
    able to build a form of any complexity.
  prefs: []
  type: TYPE_NORMAL
- en: In the final section, we learned how to implement generic date/time pickers
    that work on both iOS and Android. In the next chapter, we’ll learn about modal
    dialogs in React Native.
  prefs: []
  type: TYPE_NORMAL
