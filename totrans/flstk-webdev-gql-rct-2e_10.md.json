["```js\nnpm install --save react-router-dom\n```", "```js\ndevServer: {\n  port: 3000,\n  open: true,\n  historyApiFallback: true,\n},\n```", "```js\noutput: {\n  path: path.join(__dirname, buildDirectory),\n  filename: 'bundle.js',\n  publicPath: '/',\n},\n```", "```js\n    import React from 'react';\n    import Feed from './Feed';\n    import Chats from './Chats';\n    import Bar from './components/bar';\n    export const Main = ({ changeLoginState }) => {\n      return (\n        <>\n          <Bar changeLoginState={changeLoginState} />\n          <Feed />\n          <Chats />\n        </>\n      );\n    }\n    export default Main;\n    ```", "```js\n    return (\n      <div className=\"container\">\n        <Helmet>\n          <title>Graphbook - Feed</title>\n          <meta name=\"description\" content=\"Newsfeed of\n            all your friends on Graphbook\" />\n        </Helmet>\n        <Router loggedIn={loggedIn}\n          changeLoginState={handleLogin}/>\n      </div>\n    )\n    ```", "```js\n    import Router from './router';\n    ```", "```js\n    import React from 'react';\n    import { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\n    import LoginRegisterForm from './components/loginregister';\n    import Main from './Main';\n    export const routing = ({ changeLoginState, loggedIn }) => {\n      return (\n        <Router>\n          <Switch>\n            <Route path=\"/app\" component={() => <Main\n              changeLoginState= {changeLoginState}/>}/>\n          </Switch>\n        </Router>\n      )\n    }\n    export default routing;\n    ```", "```js\n    const PrivateRoute = ({ component: Component, ...rest }) => (\n      <Route {...rest} render={(props) => (\n        rest.loggedIn === true\n          ? <Component {...props} />\n          : <Redirect to={{\n              pathname: '/',\n            }} />\n      )} />\n    )\n    ```", "```js\n    <PrivateRoute path=\"/app\" component={() => <Main changeLoginState={changeLoginState} />} loggedIn={loggedIn}/>\n    ```", "```js\n    const LoginRoute = ({ component: Component, ...rest }) => (\n      <Route {...rest} render={(props) => (\n        rest.loggedIn === false\n          ? <Component {...props} />\n          : <Redirect to={{\n              pathname: '/app',\n            }} />\n      )} />\n    )\n    ```", "```js\n    <LoginRoute exact path=\"/\" component={() => <LoginRegisterForm changeLoginState={changeLoginState}/>} loggedIn={loggedIn}/>\n    ```", "```js\nconst NotFound = () => {\n  return (\n    <Redirect to=\"/\"/>\n  );\n}\n```", "```js\n<Route component={NotFound} />\n```", "```js\n<PrivateRoute path=\"/user/:username\" component={props => <User {...props} changeLoginState={changeLoginState}/>} loggedIn={loggedIn}/>\n```", "```js\nimport User from './User';\n```", "```js\nimport React from 'react';\nimport UserProfile from './components/user';\nimport Chats from './Chats';\nimport Bar from './components/bar';\nexport const User = ({ changeLoginState, match }) => {\n  return (\n    <>\n      <Bar changeLoginState={changeLoginState} />\n      <UserProfile username={match.params.username}/>\n      <Chats />\n    </>\n  );\n}\nexport default User\n```", "```js\n    import React, { useState } from 'react';\n    import InfiniteScroll from 'react-infinite-scroll-component';\n    import Post from './';\n    ```", "```js\n    export const FeedList = ({fetchMore, posts}) => {\n      const [hasMore, setHasMore] = useState(true);\n      const [page, setPage] = useState(0);\n      return (\n        <div className=\"feed\">\n          <InfiniteScroll\n            dataLength={posts.length}\n            next={() => loadMore(fetchMore)}\n            hasMore={hasMore}\n            loader={<div className=\"loader\"\n              key={\"loader\"}>Loading ...</div>}\n          >\n          {posts.map((post, i) =>\n              <Post key={post.id} post={post} />\n          )}\n          </InfiniteScroll>\n        </div>\n      );\n    }\n    export default FeedList;\n    ```", "```js\n    const loadMore = (fetchMore) => {\n        fetchMore({\n          variables: {\n              page: page + 1,\n          },\n          updateQuery(previousResult, { fetchMoreResult })\n            {\n            if(!fetchMoreResult.postsFeed.posts.length) {\n              setHasMore(false);\n              return previousResult;\n            }\n            setPage(page + 1);\n            const newData = {\n              postsFeed: {\n                __typename: 'PostFeed',\n                posts: [\n                  ...previousResult.postsFeed.posts,\n                  ...fetchMoreResult.postsFeed.posts\n                ]\n              }\n            };\n            return newData;\n          }\n        });\n      }\n    ```", "```js\n    return (\n      <div className=\"container\">\n        <div className=\"postForm\">\n          <form onSubmit={handleSubmit}>\n            <textarea value={postContent} onChange={(e) =>\n              setPostContent(e.target.value)} \n                placeholder=\"Write your custom post!\"/>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n        </div>\n        <FeedList posts={posts} fetchMore={loadMore}/>\n      </div>\n    )\n    ```", "```js\n    import React from 'react';\n    import FeedList from '../post/feedlist';\n    import UserHeader from './header';\n    import Loading from '../loading';\n    import Error from '../error';\n    import { useGetPostsQuery } from '../../apollo/queries/getPosts';\n    import { useGetUserQuery } from '../../apollo/queries/getUser'; \n    ```", "```js\n    const UserProfile = ({ username }) => {\n      const { data: user, loading: userLoading } = \n        useGetUserQuery({ username });\n      const { loading, error, data: posts, fetchMore } = \n        useGetPostsQuery({ username });\n      if (loading || userLoading) return <Loading />;\n      if (error) return <Error><p>{error.message}</p>\n        </Error>;\n      return (\n        <div className=\"user\">\n          <div className=\"inner\">\n            <UserHeader user={user.user} />\n          </div>\n          <div className=\"container\">\n            <FeedList posts={posts.postsFeed.posts}\n              fetchMore={fetchMore}/>\n          </div>\n        </div>\n      )\n    }\n    export default UserProfile;\n    ```", "```js\n    query postsFeed($page: Int, $limit: Int, $username: String) { \n      postsFeed(page: $page, limit: $limit, username:\n        $username) { \n    ```", "```js\n    export const useGetPostsQuery = (variables) => useQuery(GET_POSTS, { pollInterval: 5000, variables: { page: 0, limit: 10, ...variables } });\n    ```", "```js\n    import { gql, useQuery } from '@apollo/client';\n    import { USER_ATTRIBUTES } from '../fragments/userAttributes';\n    export const GET_USER = gql'\n      query user($username: String!) {\n        user(username: $username) {\n          ...userAttributes\n        }\n      }\n      ${USER_ATTRIBUTES}\n    ';\n    export const useGetUserQuery = (variables) => useQuery(GET_USER, { variables: { ...variables }});\n    ```", "```js\n    import React from 'react';\n    export const UserProfileHeader = ({user}) => {\n      const { avatar, username } = user;\n      return (\n        <div className=\"profileHeader\">\n          <div className=\"avatar\">\n            <img src={avatar}/>\n          </div>\n          <div className=\"information\">\n            <p>{username}</p>\n            <p>You can provide further information here\n               and build your really personal header \n               component for your users.</p>\n          </div>\n        </div>\n      )\n    }\n    export default UserProfileHeader;\n    ```", "```js\n    postsFeed(page: Int, limit: Int, username: String): PostFeed @auth\n    ```", "```js\n    postsFeed(root, { page, limit, username }, context) {\n    ```", "```js\n    if(username) {\n      query.include = [{model: User}];\n      query.where = { '$User.username$': username };\n    }\n    ```", "```js\n    user(username: String!): User @auth\n    ```", "```js\n    user(root, { username }, context) {\n      return User.findOne({\n        where: {\n          username: username\n        }\n      });\n    },\n    ```", "```js\nimport { Link } from 'react-router-dom';\n```", "```js\n<Link to={'/user/'+post.user.username}>\n  <img src={post.user.avatar} />\n  <div>\n    <h2>{post.user.username}</h2>\n  </div>\n</Link>\n```", "```js\n.post .header a > * {\n  display: inline-block;\n  vertical-align: middle;\n}\n```", "```js\nimport React from 'react';\nimport { withRouter } from 'react-router';\nconst Home = ({ history }) => {\n  const goHome = () => {\n    history.push('/app');\n  }\n  return (\n    <button className=\"goHome\" onClick={goHome}>Home\n    </button>\n  );\n}\nexport default withRouter(Home);\n```", "```js\n    import Home from './home';\n    ```", "```js\n    <div className=\"buttons\">\n      <Home/>\n      <Logout changeLoginState={changeLoginState}/>\n    </div>\n    ```", "```js\n    .topbar .buttons {\n      position: absolute;\n      right: 5px;\n      top: 5px;\n      height: calc(100% - 10px);\n    }\n    .topbar .buttons > * {\n      height: 100%;\n      margin-right: 5px;\n      border: none;\n      border-radius: 5px;\n    }\n    ```", "```js\n<Redirect to={{\n  pathname: '/',\n  state: { from: props.location }\n}} />\n```", "```js\n<Redirect to={{\n  pathname: (typeof props.location.state !== typeof \n    undefined) ? \n  props.location.state.from.pathname : '/app',\n}} />\n```"]