["```js\nimport React from 'react';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nconst styles = theme => ({\n  container: {\n    margin: theme.spacing(1)\n  }\n});\n\nconst ButtonVariants = withStyles(styles)(({ classes }) => (\n  <Grid\n    container\n    direction=\"column\"\n    spacing={2}\n    className={classes.container}\n  >\n    <Grid item>\n      <Button variant=\"text\">Text</Button>\n    </Grid>\n    <Grid item>\n      <Button variant=\"outlined\">Outlined</Button>\n    </Grid>\n    <Grid item>\n      <Button variant=\"contained\">Contained</Button>\n    </Grid>\n  </Grid>\n));\n\nexport default ButtonVariants;\n```", "```js\nimport React from 'react';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n  container: {\n    margin: theme.spacing(1)\n  }\n});\n\nconst ButtonEmphasis = withStyles(styles)(({ classes, disabled }) => (\n  <Grid\n    container\n    direction=\"column\"\n    spacing={16}\n    className={classes.container}\n  >\n    <Grid item>\n      <Typography variant=\"h6\">Default</Typography>\n    </Grid>\n    <Grid item>\n      <Grid container spacing={16}>\n        <Grid item>\n          <Button variant=\"text\" disabled={disabled}>\n            Text\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"outlined\" disabled={disabled}>\n            Outlined\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" disabled={disabled}>\n            Contained\n          </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n    <Grid item>\n      <Typography variant=\"h6\">Primary</Typography>\n    </Grid>\n    <Grid item>\n      <Grid container spacing={16}>\n        <Grid item>\n          <Button variant=\"text\" color=\"primary\" disabled={disabled}>\n            Text\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            disabled={disabled}\n          >\n            Outlined\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={disabled}\n          >\n            Contained\n          </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n    <Grid item>\n      <Typography variant=\"h6\">Secondary</Typography>\n    </Grid>\n    <Grid item>\n      <Grid container spacing={16}>\n        <Grid item>\n          <Button\n            variant=\"text\"\n            color=\"secondary\"\n            disabled={disabled}\n          >\n            Text\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"outlined\"\n            color=\"secondary\"\n            disabled={disabled}\n          >\n            Outlined\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            disabled={disabled}\n          >\n            Contained\n          </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n  </Grid>\n));\n\nexport default ButtonEmphasis;\n```", "```js\n<AppBar color={appBarColor}>\n  <Toolbar>\n    <Grid container spacing={16}>\n      <Grid item>\n        <Button variant=\"text\" disabled={disabled}>\n          Text\n        </Button>\n      </Grid>\n      <Grid item>\n        <Button variant=\"outlined\" disabled={disabled}>\n          Outlined\n        </Button>\n      </Grid>\n      <Grid item>\n        <Button variant=\"contained\" disabled={disabled}>\n          Contained\n        </Button>\n      </Grid>\n    </Grid>\n  </Toolbar>\n</AppBar>\n```", "```js\n<AppBar color={appBarColor}>\n  <Toolbar>\n    <Grid container spacing={16}>\n      <Grid item>\n        <Button\n          variant=\"text\"\n          disabled={disabled}\n          color=\"inherit\"\n        >\n          Text\n        </Button>\n      </Grid>\n      <Grid item>\n        <Button\n          variant=\"outlined\"\n          disabled={disabled}\n          color=\"inherit\"\n        >\n          Outlined\n        </Button>\n      </Grid>\n      <Grid item>\n        <Button\n          variant=\"contained\"\n          disabled={disabled}\n          color=\"inherit\"\n        >\n          Contained\n        </Button>\n      </Grid>\n    </Grid>\n  </Toolbar>\n</AppBar>\n```", "```js\nfunction buttonColor(parentColor) {\n  if (parentColor === 'primary') {\n    return 'secondary';\n  }\n\n  if (parentColor === 'secondary') {\n    return 'primary';\n  }\n\n  return 'default';\n}\n```", "```js\n<Button\n  variant=\"contained\"\n  disabled={disabled}\n  color={buttonColor(appBarColor)}\n>\n  Contained\n</Button>\n```", "```js\nimport React from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n  content: {\n    margin: theme.spacing(2)\n  }\n});\n\nconst LinkButtons = withStyles(styles)(({ classes }) => (\n  <Grid container direction=\"column\" className={classes.container}>\n    <Grid item>\n      <Grid container>\n        <Grid item>\n          <Button component={Link} to=\"/\">\n            Home\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button component={Link} to=\"/page1\">\n            Page 1\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button component={Link} to=\"/page2\">\n            Page 2\n          </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n    <Grid item className={classes.content}>\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={() => <Typography>home content</Typography>}\n        />\n        <Route\n          path=\"/page1\"\n          render={() => <Typography>page 1 content</Typography>}\n        />\n        <Route\n          path=\"/page2\"\n          render={() => <Typography>page 2 content</Typography>}\n        />\n      </Switch>\n    </Grid>\n  </Grid>\n));\n\nexport default LinkButtons;\n```", "```js\n<Button component={Link} to=\"/\">\n  Home\n</Button>\n```", "```js\nconst NavButton = ({ color, ...props }) => (\n  <Switch>\n    <Route\n      exact\n      path={props.to}\n      render={() => (\n        <Button color=\"primary\" component={Link} {...props} />\n      )}\n    />\n    <Route\n      path=\"/\"\n      render={() => <Button component={Link} {...props} />}\n    />\n  </Switch>\n);\n```", "```js\n<Grid container>\n  <Grid item>\n    <NavButton to=\"/\">Home</NavButton>\n  </Grid>\n  <Grid item>\n    <NavButton to=\"/page1\">Page 1</NavButton>\n  </Grid>\n  <Grid item>\n    <NavButton to=\"/page2\">Page 2</NavButton>\n  </Grid>\n</Grid>\n```", "```js\nimport React, { Fragment } from 'react';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst styles = theme => ({\n  fab: {\n    margin: 0,\n    top: 'auto',\n    left: 'auto',\n    bottom: 20,\n    right: 20,\n    position: 'fixed'\n  }\n});\n\nconst FloatingActions = withStyles(styles)(({ classes, fabColor }) => (\n  <Fragment>\n    <Fab className={classes.fab} color={fabColor}>\n      <AddIcon />\n    </Fab>\n  </Fragment>\n));\n\nexport default FloatingActions;\n```", "```js\nconst ExtendedFab = withStyles(styles)(({ classes, ...props }) => {\n  const isExtended = React.Children.toArray(props.children).find(\n    child => typeof child === 'string'\n  );\n\n  return (\n    <Fab\n      className={classes.fab}\n      variant={isExtended && 'extended'}\n      {...props}\n    />\n  );\n});\n```", "```js\nexport default ({ fabColor }) => (\n  <ExtendedFab color={fabColor}>\n    Add\n    <AddIcon />\n  </ExtendedFab>\n);\n```", "```js\nimport React, { useState } from 'react';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\n\nimport MicIcon from '@material-ui/icons/Mic';\nimport MicOffIcon from '@material-ui/icons/MicOff';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\n\nexport default function IconButtons({ iconColor }) {\n  const [mic, setMic] = useState(true);\n  const [volume, setVolume] = useState(true);\n\n  return (\n    <Grid container>\n      <Grid item>\n        <IconButton color={iconColor} onClick={() => setMic(!mic)}>\n          {mic ? <MicIcon /> : <MicOffIcon />}\n        </IconButton>\n      </Grid>\n      <Grid item>\n        <IconButton\n          color={iconColor}\n          onClick={() => setVolume(!volume)}\n        >\n          {volume ? <VolumeUpIcon /> : <VolumeOffIcon />}\n        </IconButton>\n      </Grid>\n    </Grid>\n  );\n}\n```", "```js\nconst [mic, setMic] = useState(true);\nconst [volume, setVolume] = useState(true);\n```", "```js\n<Grid item>\n  <IconButton color={iconColor} onClick={() => setMic(!mic)}>\n    {mic ? <MicIcon /> : <MicOffIcon />}\n  </IconButton>\n</Grid>\n<Grid item>\n  <IconButton\n    color={iconColor}\n    onClick={() => setVolume(!volume)}\n  >\n    {volume ? <VolumeUpIcon /> : <VolumeOffIcon />}\n  </IconButton>\n</Grid>\n```", "```js\nimport React from 'react';\n\nimport Button from '@material-ui/core/Button';\n\nexport default function ButtonSizes({ size, color }) {\n  return (\n    <Button variant=\"contained\" size={size} color={color}>\n      Add\n    </Button>\n  );\n}\n```", "```js\nimport React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Fab from '@material-ui/core/Fab';\n\nimport AddIcon from '@material-ui/icons/Add';\n\nconst MyButton = ({ fab, ...props }) => {\n  const [child] = React.Children.toArray(props.children);\n  let ButtonComponent;\n\n  if (React.isValidElement(child) && fab) {\n    ButtonComponent = Fab;\n  } else if (React.isValidElement(child)) {\n    ButtonComponent = IconButton;\n  } else {\n    ButtonComponent = Button;\n  }\n\n  return <ButtonComponent {...props} />;\n};\n\nexport default function ButtonSizes({ size, color }) {\n  return (\n    <Grid container spacing={16} alignItems=\"center\">\n      <Grid item>\n        <MyButton variant=\"contained\" size={size} color={color}>\n          Add\n        </MyButton>\n      </Grid>\n      <Grid item>\n        <MyButton size={size} color={color}>\n          <AddIcon />\n        </MyButton>\n      </Grid>\n      <Grid item>\n        <MyButton fab size={size} color={color}>\n          <AddIcon />\n        </MyButton>\n      </Grid>\n    </Grid>\n  );\n}\n```", "```js\nconst [child] = React.Children.toArray(props.children);\n```", "```js\nif (React.isValidElement(child) && fab) {\n  ButtonComponent = Fab;\n} else if (React.isValidElement(child)) {\n  ButtonComponent = IconButton;\n} else {\n  ButtonComponent = Button;\n}\n```"]