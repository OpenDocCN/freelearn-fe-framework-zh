- en: Chapter 13. Enhancing Performance in jQuery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 13 章。在 jQuery 中增强性能
- en: 'In the book so far, we''ve covered an array of different topics: from customizing
    jQuery to the use of animation, and even a little on the use of jQuery within
    Node-WebKit.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在书中涵盖了一系列不同的主题：从定制 jQuery 到使用动画，甚至是在 Node-WebKit 中使用 jQuery。
- en: 'However, there is one key topic we have not yet covered. While working with
    jQuery can be very fulfilling, we must be mindful of optimizing our code where
    practical, to ensure a positive user experience. Many developers might simply
    eyeball the code, but this is time-consuming. In this chapter, we will look at
    ways of optimizing your jQuery code, introduce the use of tools that can supplement
    existing workflow, and help give real feedback on your changes. We will cover
    a number of topics in this chapter, which will include:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，有一个关键的主题我们还没有涉及。虽然使用 jQuery 可能非常令人满意，但我们必须注意在实际情况下优化我们的代码，以确保用户体验良好。许多开发人员可能只是目测代码，但这是耗时的。在本章中，我们将探讨优化
    jQuery 代码的方法，介绍可以补充现有工作流程并帮助实际反馈你的更改的工具。我们将在本章中涵盖一些主题，其中将包括：
- en: Understanding why performance is important
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解为什么性能很重要
- en: Monitoring performance when adding elements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加元素时监视性能
- en: Monitoring the speed of jQuery
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监视 jQuery 的速度
- en: Automating performance monitoring
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化性能监控
- en: Using Node to lint our code automatically
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Node 自动清理我们的代码
- en: Implementing best practices for enhancing performance
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施增强性能的最佳实践
- en: Considering the case of using jQuery
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用 jQuery 的情况
- en: Ready to get started?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好开始了吗？
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Throughout this chapter we will concentrate on using jQuery – you will find
    that many of the tips given can also be applied to pure JavaScript using it more
    in your code (as we will discuss later in the chapter).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将集中讨论使用 jQuery——你会发现很多给出的建议也可以应用于纯 JavaScript，在你的代码中更多地使用它（正如我们稍后在本章中将讨论的那样）。
- en: Understanding why performance is critical
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解为什么性能至关重要
- en: Picture the scene if you will – your team has created a killer web-based application
    using the latest techniques, which does everything under the sun, and you're ready
    to sit back and enjoy the laurels of your success. Except for one small but rather
    critical thing…
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下情景——你的团队使用最新技术创建了一个杀手级的基于 Web 的应用程序，可以做任何事情，你准备坐下来享受成功的荣誉。除了一个小但相当关键的事情……
- en: No one is buying. Not one copy of your application is being sold – the reason
    why? Simple – it's really slow and hasn't been properly optimized. No amount of
    selling will get over the fact that in this age of mobile devices, a slow application
    will turn off the users.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 没有人购买。你的应用程序没有一个副本被售出——原因是什么？简单——它非常缓慢，而且没有经过适当的优化。在这个移动设备时代，一个慢速的应用程序将会让用户失去兴趣，无论你怎么推销。
- en: 'Should we be concerned with the performance of our application? Absolutely!
    There are good reasons for being critical of our application''s performance; let''s
    take a look at a few:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该关注应用程序的性能吗？绝对是！有很多理由要对我们应用程序的性能持批评态度；让我们来看几个：
- en: The advent of mobile devices with the associated costs of surfing means that
    our content must be optimized to ensure the site displays quickly, before the
    connection times out
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动设备的出现以及与之相关的上网成本意味着我们的内容必须经过优化，以确保网站在连接超时之前快速显示
- en: It's all too easy to focus on development instead of fixing cross-browser issues
    – each quirk in itself may not be much, but the cumulative effect will soon add
    up
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将注意力集中在开发上而不是解决跨浏览器问题是非常容易的——每个怪癖本身可能并不多，但累积起来的影响很快就会显现出来。
- en: Once you start writing considered code, then it will soon become second nature
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦你开始编写经过深思熟虑的代码，那么它很快就会成为第二天性
- en: Of course, it has to be said that there is a risk of **premature optimization**,
    where we spend lots of time optimizing code for little gain, and may even cause
    ourselves problems later if we remove code that is subsequently needed!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，必须说的是，存在过早优化的风险，即我们花费大量时间为小收益优化代码，甚至在以后删除后可能会给自己带来问题的代码！
- en: Okay – so assuming there is scope to optimize our code, what should we do? Well,
    there are a few tricks we can use; while we may have the desire to optimize our
    code ad nausea, it is not always worth the effort. The smarter approach is to
    always consider the bigger picture, to make sure that the benefits of optimizing
    scripts are not lost through badly written style sheets or large pictures, for
    example!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，假设我们有优化代码的余地，我们应该怎么做呢？嗯，我们可以使用一些技巧；虽然我们可能渴望不辞劳苦地优化我们的代码，但并不总是值得这样做。更明智的方法是始终考虑整体情况，确保通过糟糕的样式表或大图像而失去了优化脚本的好处，例如！
- en: 'Let''s take a moment to consider some of the options available to us – they
    include:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花一点时间考虑一下我们可用的一些选项——它们包括：
- en: Building custom versions of jQuery
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建自定义版本的 jQuery
- en: Minifying our scripts
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对我们的脚本进行最小化处理
- en: Fine-tuning the use of selectors
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整选择器的使用
- en: Being prudent with event bubbling
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在事件冒泡中谨慎行事
- en: Continuous use of appropriate tools to lint our code
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续使用适当的工具来检查我们的代码
- en: Minimizing manipulation of the DOM
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化 DOM 操作
- en: These are some of the options available to us. Our first stop though is to benchmark
    our code, to see how it performs prior to making any changes. The first step in
    this is to run a performance check on our scripts. Let's take a moment to see
    what is involved, and how this works in action.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们可用的一些选项。不过，我们首先要做的是对我们的代码进行基准测试，以了解在进行任何更改之前它的性能如何。这个过程的第一步是对我们的脚本运行性能检查。让我们花一点时间来看看涉及到什么以及这是如何运作的。
- en: Monitoring the speed of jQuery using Firebug
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Firebug 监控 jQuery 速度
- en: We can wax lyrical about how critical performance is, but nothing beats seeing
    it in action and working out how we can improve our code to gain that extra edge.
    Manually working out where to make the changes is time-consuming and inefficient.
    Instead, we can avail ourselves of a number of tools to help get a clearer indication
    of where the issues lie in our code.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以大谈性能的重要性，但没有什么比亲眼看到它并弄清楚我们如何改进代码以获得额外优势更好。手动确定何处进行更改是耗时且低效的。相反，我们可以利用一些工具来更清晰地指示我们代码中的问题所在。
- en: There are dozens of tools available to help with benchmarking performance of
    our pages, which include interactions with jQuery or jQuery-based scripts and
    plugins. Over the next few pages, we're going to look at a selection of different
    methods. Let's start with a simple visual check, using Firebug, from [http://www.getfirebug.com](http://www.getfirebug.com).
    Once installed, click on **Net** | **JavaScript**, then load your page to get
    statistics on each plugin or script that is loaded on the page.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有数十种工具可用于帮助我们对页面性能进行基准测试，其中包括与 jQuery 或基于 jQuery 的脚本和插件的交互。在接下来的几页中，我们将介绍一系列不同的方法。让我们从一个简单的可视检查开始，使用
    Firebug，从 [http://www.getfirebug.com](http://www.getfirebug.com)。安装完成后，单击 **Net**
    | **JavaScript**，然后加载您的页面以获取有关加载到页面上的每个插件或脚本的统计信息。
- en: 'In the following image, we can see the results from the Packt Publishing website:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图像中，我们可以看到来自 Packt Publishing 网站的结果：
- en: '![Monitoring the speed of jQuery using Firebug](img/image00471.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Firebug 监控 jQuery 速度](img/image00471.jpeg)'
- en: 'In comparison, following is the image showing the results from [http://www.jquery.com](http://www.jquery.com):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，以下是从 [http://www.jquery.com](http://www.jquery.com) 显示的结果的图像：
- en: '![Monitoring the speed of jQuery using Firebug](img/image00472.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Firebug 监控 jQuery 速度](img/image00472.jpeg)'
- en: Tip
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Before loading the page, clear your cache to avoid skewing the results.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载页面之前，清除缓存以避免结果出现偏差。
- en: 'Viewing the statistics returned from Firebug gives us a good start, but to
    get a better indication as to where the bottlenecks are, we need to profile our
    code. Thankfully, it''s a cinch to do with console. Let''s take a look at how
    we can use console to optimize code, using a copy of the `tooltipv2.html` demo
    we created in [Chapter 11](part0098.xhtml#aid-2TEN41 "Chapter 11. Authoring Advanced
    Plugins"), *Authoring Advanced Plugins*. For the purpose of this little demo,
    we will run it from a local web server, such as WAMP:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从Firebug返回的统计信息为我们提供了一个良好的开端，但要更好地了解瓶颈在哪里，我们需要对我们的代码进行分析。幸运的是，使用控制台来优化代码非常简单。让我们看看如何使用控制台来优化代码，使用我们在[第
    11 章](part0098.xhtml#aid-2TEN41 "Chapter 11. Authoring Advanced Plugins")中创建的
    `tooltipv2.html` 演示的副本为例，*Authoring Advanced Plugins*。为了这个小演示的目的，我们将从本地 Web 服务器（如
    WAMP）运行它：
- en: From the code download, extract a copy of the tooltip demo folder and store
    it in the `www` folder of WAMP.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从代码下载中提取一个 tooltip 演示文件夹的副本，并将其存储在 WAMP 的 `www` 文件夹中。
- en: 'In `tooltipv2.js`, alter the first few lines as shown next – this adds in the
    call to profile our code:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tooltipv2.js`中，按照下面的示例修改前几行代码 - 这样可以添加调用以分析我们的代码：
- en: '[PRE0]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We need to tell the browser when to stop profiling, so go ahead and alter the
    code as shown next:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要告诉浏览器何时停止分析，所以请继续按照下面的代码进行修改：
- en: '[PRE1]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the browser, load `tooltipv2.html`, and then open Firebug. If all is well,
    we should see something akin to the following screenshot, where we see the first
    few lines of the profile report:![Monitoring the speed of jQuery using Firebug](img/image00473.jpeg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中加载`tooltipv2.html`，然后打开 Firebug。如果一切顺利，我们应该会看到类似以下屏幕截图的内容，在其中我们看到了简要的配置文件报告的前几行：![使用
    Firebug 监控 jQuery 速度](img/image00473.jpeg)
- en: Profiling our site using a tool such as Firebug can be very revealing. To give
    a flavor of how, imagine if we had added more selectors; some of the figures shown
    would have been much higher then.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用诸如 Firebug 这样的工具分析我们的网站可能会非常有启发性。想象一下，如果我们添加了更多的选择器会怎样，其中一些数字可能会比现在高得多。
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you want to focus just on time taken, an alternative to using `console .profile()`
    is to use `console.time()` and `console.timeEnd()` instead.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想关注花费的时间，与其使用`console .profile()`，不如改用`console.time()`和`console.timeEnd()`。
- en: 'There are many more tools available for profiling our sites. Not all are specific
    to jQuery, but they can still be used to gain insight into how our scripts are
    performing. Following are a few examples you can try, in addition to the classic
    sites such as [JSPerf.com](http://JSPerf.com) ([http://www.jsperf.com](http://www.jsperf.com)):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多工具可用于分析我们的网站。并非所有工具都专用于 jQuery，但它们仍然可以用于了解我们的脚本执行情况。以下是一些你可以尝试的示例，除了经典网站如[JSPerf.com](http://JSPerf.com)
    ([http://www.jsperf.com](http://www.jsperf.com))之外：
- en: JSLitmus, from [http://code.google.com/p/jslitmus/](http://code.google.com/p/jslitmus/)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSLitmus，来自[http://code.google.com/p/jslitmus/](http://code.google.com/p/jslitmus/)
- en: BenchmarkJS, available at [http://benchmarkjs.com/](http://benchmarkjs.com/),
    or from the NPM site at [https://www.npmjs.com/package/benchmark](https://www.npmjs.com/package/benchmark)
    – an example of how to use it is available at [https://gist.github.com/brianjlandau/245674](https://gist.github.com/brianjlandau/245674)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BenchmarkJS，位于[http://benchmarkjs.com/](http://benchmarkjs.com/)，或者从 NPM 站点
    [https://www.npmjs.com/package/benchmark](https://www.npmjs.com/package/benchmark)获取
    - 一个如何使用它的示例可在[https://gist.github.com/brianjlandau/245674](https://gist.github.com/brianjlandau/245674)找到
- en: Online services such as SpeedCurve ([http://www.speedcurve.com](http://www.speedcurve.com)),
    or Calibreapp ([https://calibreapp.com/](https://calibreapp.com/))
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在线服务，例如 SpeedCurve ([http://www.speedcurve.com](http://www.speedcurve.com))
    或 Calibreapp ([https://calibreapp.com/](https://calibreapp.com/))
- en: FireQuery Reloaded, from [https://github.com/firebug/firequery/wiki](https://github.com/firebug/firequery/wiki)
    is coming; note that this is still in beta at the time of writing
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FireQuery Reloaded，来自[https://github.com/firebug/firequery/wiki](https://github.com/firebug/firequery/wiki)，即将推出；请注意，写作时仍处于测试版阶段
- en: DeviceTiming, from [https://github.com/etsy/DeviceTiming](https://github.com/etsy/DeviceTiming)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DeviceTiming，来自[https://github.com/etsy/DeviceTiming](https://github.com/etsy/DeviceTiming)
- en: There are definitely plenty of options available – not all will suit everyone's
    needs; the key though is to understand what you are testing, and learn how to
    interpret it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对有大量选择可供使用 - 并非所有选择都适合每个人的需求；关键是要了解你正在测试什么，并学会如何解释它。
- en: Dave Methin, part of the core team for jQuery, wrote a brilliant article that
    outlines the dangers of blindly trying to optimize code, without properly interpreting
    the results from using something such as JSPerf. The developer Fionn Kelleher
    puts it perfectly when he states that your code should be a work of art – there
    is no need to optimize everything for the sake of doing so; it is far more important
    that code should be readable and work well.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 核心团队成员 Dave Methin 写了一篇精彩的文章，概述了在没有正确解释来自诸如 JSPerf 使用结果的情况下盲目尝试优化代码的危险。开发者
    Fionn Kelleher 在他指出，你的代码应该是一种艺术品 - 没有必要为了做而优化所有东西；更重要的是代码应该是可读的并且运行良好。
- en: Okay – time to move on. We've covered the basics of monitoring, but at the expense
    of requiring manual effort. A much better option is to automate it. We can use
    a number of tools to do this with our old friend Grunt, so let's dig in and see
    what is involved in automating our monitoring.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧 - 是时候继续了。我们已经介绍了监控的基础知识，但这是以手动方式为代价的。一个更好的选择是自动化。我们可以使用许多工具来实现这一点，与我们的老朋友
    Grunt 一起，所以让我们深入了解一下，看看自动化监控涉及哪些内容。
- en: Automating performance monitoring
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化性能监控
- en: Hands up – as a developer, how many of you have used YSlow? Good – a fair few;
    have you thought about automating those checks though?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 举手之劳，作为一名开发者，有多少人使用过 YSlow？很好——相当多；不过，你有没有考虑过自动化这些检查呢？
- en: 'That''s right! We can always perform manual checks to get a feel for where
    performance bottlenecks are showing; however, the smarter way is to automate those
    checks using our good friend, Grunt. A module, created by the developer Andy Shora,
    is available for this purpose; we can get the source code for it from [https://github.com/andyshora/grunt-yslow](https://github.com/andyshora/grunt-yslow).
    Let''s take a moment to get it up and running, to see how it works:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 没错！我们总是可以手动检查以了解性能瓶颈出现的位置；然而，更聪明的方法是使用我们的好朋友 Grunt 自动化这些检查。开发者 Andy Shora 创建了一个模块，专门用于此目的；我们可以从[https://github.com/andyshora/grunt-yslow](https://github.com/andyshora/grunt-yslow)获取它的源代码。让我们花点时间来让它运行起来，看看它是如何工作的：
- en: Let's kick off by creating a project folder for our files. For the purpose of
    this exercise, I will assume it is called `chapter13` (yes, I know – highly original);
    change the name if yours is different.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们开始创建一个用于存放文件的项目文件夹。为了本练习的目的，我假设它叫做`chapter13`（是的，我知道——非常原创）；如果你的名称不同，请更改。
- en: For this exercise, we need to use NodeJS. I will assume you already have it
    installed from previous exercises; if not, then head over to [http://www.nodejs.org](http://www.nodejs.org)
    to download and install the version appropriate for your platform.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于本练习，我们需要使用 NodeJS。我假设你已经从之前的练习中安装了它；如果没有，请访问[http://www.nodejs.org](http://www.nodejs.org)下载并安装适合你平台的版本。
- en: 'Next, add the following to a blank file, saving it as `gruntfile.js` within
    our project folder – you will notice that our test will be for jQuery''s website
    (as highlighted):'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下内容添加到一个空文件中，并将其保存为我们项目文件夹内的`gruntfile.js`——你会注意到我们的测试将针对 jQuery 的网站进行（如下所示）：
- en: '[PRE2]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In a NodeJS command prompt window, enter the following command to install the
    `grunt-yslow` package:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 NodeJS 命令提示符窗口中，输入以下命令以安装`grunt-yslow`包：
- en: '[PRE3]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Node will run through the installation. When completed, enter the following
    command at the command prompt to perform the test:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Node 将进行安装。完成后，在命令提示符处输入以下命令以执行测试：
- en: '[PRE4]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If all is well, Node will display something akin to the following screenshot,
    where it shows a fail:![Automating performance monitoring](img/image00474.jpeg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切正常，Node 将显示类似于以下截图的内容，其中显示了一个失败：![自动化性能监控](img/image00474.jpeg)
- en: 'The results shown in the command prompt window are a little basic. To get a
    better feel for where the issues are, we can install the YSlow plugin. Let''s
    do that now:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 命令提示符窗口中显示的结果有点基本。为了更好地了解问题所在，我们可以安装 YSlow 插件。现在让我们来做这个：
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: At the time of writing, there were ongoing issues with running YSlow in Firefox;
    please use Chrome to view the results instead. If you are a Mac user, then you
    can try the YSlow plugin from [http://yslow.org/safari/](http://yslow.org/safari/).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，使用 Firefox 运行 YSlow 存在持续问题；请改用 Chrome 查看结果。如果你是 Mac 用户，那么你可以尝试从[http://yslow.org/safari/](http://yslow.org/safari/)获取
    YSlow 插件。
- en: Browse to [http://www.yslow.org](http://www.yslow.org), then click **Chrome**
    under **Availability**, and then **Add** to add the plugin to Chrome:![Automating
    performance monitoring](img/image00475.jpeg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览至[http://www.yslow.org](http://www.yslow.org)，然后在**可用性**下点击 **Chrome**，然后点击
    **添加** 将插件添加到 Chrome：![自动化性能监控](img/image00475.jpeg)
- en: Once installed, we can run the report within YSlow. If we do it for the main
    jQuery site, then we will end up with results similar to those seen in the following
    screenshot:![Automating performance monitoring](img/image00476.jpeg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以在 YSlow 中运行报告。如果我们对主要的 jQuery 网站进行测试，那么我们将得到类似于以下截图中所见的结果：![自动化性能监控](img/image00476.jpeg)
- en: If we take a look through the various grades given, we can clearly see that
    there is room for improvement. Focusing on the scripts, a check will show that
    at least five scripts should be moved to the bottom of the page, as the browser
    cannot start any other downloads until these have been completed.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们浏览各个给定的等级，我们可以清楚地看到还有改进的空间。专注于脚本，检查将显示至少有五个脚本应移至页面底部，因为在这些脚本完成之前，浏览器无法开始任何其他下载。
- en: To see what impact this would have, take a look at the same page within Firebug.
    Click **Net** | **JavaScript**, then refresh the page to view all the scripts
    being called from the page. Hover over the jQuery link – this is proof that the
    bigger the file, the longer it takes to load:![Automating performance monitoring](img/image00477.jpeg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 若要查看这将产生什么影响，请在 Firebug 中查看相同页面。单击 **Net** | **JavaScript**，然后刷新页面以查看从页面调用的所有脚本。将鼠标悬停在
    jQuery 链接上 - 这证明了文件越大，加载时间越长：![自动化性能监控](img/image00477.jpeg)
- en: In the previous screenshot, we can clearly see a number of scripts, all of which
    show long times. In this instance, minifying those scripts that are not already
    compressed will improve these times.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以清楚地看到许多脚本，所有这些脚本都显示出长时间。在这种情况下，缩小那些尚未压缩的脚本将改善这些时间。
- en: We can always spend time trying to optimize jQuery, but this should be taken
    in the context of the bigger picture; we will clearly lose any benefit of optimizing
    jQuery, if we're still loading large scripts elsewhere in our code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以花时间尝试优化 jQuery，但这应该放在更大的背景下来考虑；如果我们的代码中仍然加载大型脚本，那么我们清楚地失去了优化 jQuery 的任何好处。
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It's worth noting that the threshold has been set higher than normal within
    `gruntfile.js.` In this age of mobile devices, it is important to ensure that
    the page content can be downloaded quickly; in both examples, we will see that
    there is definitely room for improvement!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在 `gruntfile.js` 中的阈值已设置得比平常要高。在移动设备时代，确保页面内容可以快速下载非常重要；在这两个示例中，我们都会看到肯定有改进的空间！
- en: 'Let''s take a look at a second example, to see how this compares. In this case,
    we will use the Packt Publishing website, at [http://www.packtpub.com](http://www.packtpub.com):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看第二个示例，看看它与之前的有什么区别。在这种情况下，我们将使用 Packt Publishing 网站，网址为 [http://www.packtpub.com](http://www.packtpub.com)：
- en: 'Let''s go back to the `gruntfile.js` file that we created at the beginning
    of this section. We need to modify the following line:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回到我们在本节开头创建的 `gruntfile.js` 文件。我们需要修改以下行：
- en: '[PRE5]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Save the file, then switch to NodeJS command prompt and enter the following
    command:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件，然后切换到 NodeJS 命令提示符，并输入以下命令：
- en: '[PRE6]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If all is well, Node will display the results of our assessment of `http://www.packtpub.com`,
    where we see another failure, as shown in the following screenshot:![Automating
    performance monitoring](img/image00478.jpeg)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，Node 将显示我们对 `http://www.packtpub.com` 评估的结果，我们会看到另一个失败，如下面的截图所示：![自动化性能监控](img/image00478.jpeg)
- en: 'If we take a look using YSlow, as we did before, then we can see a number of
    suggestions made, which will improve the performance. The key one for us is to
    condense six scripts into a smaller number of files (and minify them). Refer to
    the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们像之前那样使用 YSlow 来查看，那么我们可以看到提出了一些建议，这些建议将改善性能。对我们来说，关键的建议是将六个脚本压缩为更少的文件（并对其进行缩小）。参考以下截图：
- en: '![Automating performance monitoring](img/image00479.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![自动化性能监控](img/image00479.jpeg)'
- en: 'In the previous screenshot, we see similar issues noted by YSlow, although
    the numbers are not quite as high as on the jQuery website. The real issues show
    up when we check the timings for loading the scripts called by the main page:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的截图中，我们看到 YSlow 提到了类似的问题，尽管数字没有在 jQuery 网站上那么高。当我们检查由主页面调用的脚本的加载时间时，真正的问题就出现了：
- en: '![Automating performance monitoring](img/image00480.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![自动化性能监控](img/image00480.jpeg)'
- en: Although we are making fewer requests, which is good, only one of the scripts
    is minified. This will cancel out the benefits of minimization. We can go some
    way in rectifying this by minifying the code. We will take a look at how this
    can be automated later in this chapter, in *Minifying code using NodeJS*.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们发出的请求较少，这是好事，但只有一个脚本被缩小了。这将抵消缩小的好处。我们可以通过缩小代码在一定程度上纠正这个问题。我们将在本章稍后的部分看看如何自动化此过程，在
    *使用 NodeJS 缩小代码* 中会详细介绍。
- en: Gaining insight using Google PageSpeed
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Google PageSpeed 获取见解
- en: So far, we've seen how to monitor pages, but at a very technical level. Our
    checks have concentrated on the sizes and return times of scripts being called
    from our page.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何监控页面，但是在非常技术性的层面上。我们的检查集中在从我们的页面调用的脚本的大小和返回时间上。
- en: 'A better option is to run a test such as Google PageSpeed, using the Grunt
    package available from [https://github.com/jrcryer/grunt-pagespeed](https://github.com/jrcryer/grunt-pagespeed);
    we can see the results in this screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的选择是运行一个测试，比如Google PageSpeed，使用Grunt包，可以从[https://github.com/jrcryer/grunt-pagespeed](https://github.com/jrcryer/grunt-pagespeed)获取；我们可以在这个截图中看到结果：
- en: '![Gaining insight using Google PageSpeed](img/image00481.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![使用Google PageSpeed获取洞察力](img/image00481.jpeg)'
- en: It doesn't look at specific scripts or elements on the page, but gives what
    I would consider to be a more realistic view of how well our page is performing.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 它不会查看页面上的特定脚本或元素，但会给出我认为更真实的页面性能视图。
- en: Note
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This demo requires the use of Node and Grunt, so make sure you have both installed
    before continuing.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个演示需要使用Node和Grunt，所以在继续之前确保你已经安装了它们两个。
- en: 'Let''s now see it working in action, against the Packt Publishing website:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看它在Packt Publishing网站上的实际应用：
- en: We'll start by firing up a NodeJS command prompt, and then changing to our project
    folder area.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先启动一个NodeJS命令提示符，然后切换到我们的项目文件夹区域。
- en: 'Enter the following to install the `grunt-pagespeed` package:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容以安装`grunt-pagespeed`包：
- en: '[PRE7]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In a new file, add the following, saving it as `gruntfile.js` in the same folder
    – there is a copy of this file in the code download; extract and rename `gruntfile-pagespeed.js`
    to `gruntfile.js`:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新文件中，添加以下内容，并将其保存为`gruntfile.js`，保存在相同的文件夹中 - 在代码下载中有一个此文件的副本；提取并将`gruntfile-pagespeed.js`重命名为`gruntfile.js`：
- en: '[PRE8]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'At the NodeJS command prompt, enter the following command to generate the report:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在NodeJS命令提示符下，输入以下命令以生成报告：
- en: '[PRE9]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If all is well, we should see a report appear, similar to that shown at the
    start of our exercise.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切正常，我们应该会看到一个类似于我们练习开始时显示的报告。
- en: 'The `grunt-pagespeed` plugin is just one example of several that can be run
    using Grunt. There are other benchmarking tasks available that we can integrate
    to continuously monitor our sites. These include the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`grunt-pagespeed`插件只是使用Grunt运行的几个示例中的一个。还有其他可用的基准任务，我们可以集成到持续监视我们网站的过程中。这些包括以下内容：'
- en: '`grunt-topcoat-telemetry`: Get smoothness, load time, and other stats from
    Telemetry as part of CI. This could help you set up a performance benchmarking
    dashboard similar to the one used by Topcoat ([http://bench.topcoat.io](http://bench.topcoat.io)).'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`grunt-topcoat-telemetry`: 从遥测中获取流畅性、加载时间和其他统计数据作为CI的一部分。这可以帮助您设置一个性能基准仪表板，类似于Topcoat使用的仪表板（[http://bench.topcoat.io](http://bench.topcoat.io)）。'
- en: '`grunt-wpt`: The grunt plugin for measuring WebPageTest scores.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`grunt-wpt`: 用于测量WebPageTest分数的Grunt插件。'
- en: '`grunt-phantomas`: Response times for requests, responses, time to first `image`/`CSS`/`JS`,
    on `DOM Ready` and more.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`grunt-phantomas`: 请求的响应时间，响应的响应时间，首个`image`/`CSS`/`JS`的时间，在`DOM Ready`上等等。'
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you prefer to use Gulp, then the previous Grunt plugins can be run using
    `gulp-grunt`, available from [https://npmjs.org/package/gulp-grunt](https://npmjs.org/package/gulp-grunt).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢使用Gulp，那么之前的Grunt插件可以使用`gulp-grunt`来运行，可以从[https://npmjs.org/package/gulp-grunt](https://npmjs.org/package/gulp-grunt)获取。
- en: Now that we know our baseline, it's time to explore how we can optimize our
    code; most developers will either eyeball the code manually, or potentially use
    a site such as [www.jshint.com](http://www.jshint.com) (or even [jslint.com](http://jslint.com)).
    There's nothing wrong in this approach. However, it's not the best approach to
    take, as it is an inefficient use of our time, which risks missing an opportunity
    to improve our code.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了我们的基准，是时候探索如何优化我们的代码了；大多数开发者要么手动查看代码，要么可能使用网站如[www.jshint.com](http://www.jshint.com)（甚至[jslint.com](http://jslint.com)）。这种方法没有错。但是，这不是最好的方法，因为这是对我们时间的低效使用，有可能错过改进我们代码的机会。
- en: The smarter way to lint code is to automate the process – while it may not alert
    you to any earth-shattering changes that need to be made, it will at least ensure
    that our code doesn't fail optimization due to errors. It will, of course, also
    give us a solid basis upon which we can make further optimizations. We will cover
    more of this later in the chapter.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 对代码进行代码检查的更聪明的方法是自动化这个过程 - 虽然它可能不会警告你需要进行重大更改，但它至少会确保我们的代码不会由于错误而无法优化。当然，它还会为我们提供一个坚实的基础，以便我们可以进一步进行优化。我们将在本章后面更多地介绍这个。
- en: Time for a demo, I think! Let's take a moment to go through setting up the automatic
    check using NodeJS.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候进行演示了！让我们花一点时间设置使用NodeJS进行自动检查。
- en: Linting jQuery code automatically
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动对jQuery代码进行代码检查
- en: Linting code, or checking it for errors, is an essential part of jQuery development.
    Not only does it help get rid of the errors, it also helps identify the code that
    isn't being used within the script.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 对代码进行清理，或者检查它是否存在错误，是jQuery开发的一个重要部分。它不仅有助于消除错误，还有助于识别脚本中未使用的代码。
- en: Don't forget – optimizing isn't just about adjusting selectors or even replacing
    jQuery code with CSS equivalent (as we saw in [Chapter 6](part0056.xhtml#aid-1LCVG1
    "Chapter 6. Animating in jQuery"), *Animating with jQuery*). We need to first
    ensure that we have a solid base to work from – we can always do this manually,
    but the smarter option is to automate the process using a task runner such as
    Grunt.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记 - 优化不仅仅是调整选择器，甚至用CSS等效替换jQuery代码（正如我们在[第6章](part0056.xhtml#aid-1LCVG1 "Chapter 6. Animating
    in jQuery")中看到的那样，*用jQuery进行动画*）。我们首先需要确保有一个坚实的基础来工作 - 我们始终可以手动完成这个过程，但更明智的选择是使用像Grunt这样的任务运行器来自动化该过程。
- en: 'Let''s take a moment to see how this works in action – note that this assumes
    you still have NodeJS installed from previous exercises. This time around, we
    will use it to install the `grunt-contrib-jshint` package, available from [https://github.com/gruntjs/grunt-contrib-jshint](https://github.com/gruntjs/grunt-contrib-jshint):'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间看看这是如何运作的 - 请注意，这假设你之前的练习中仍然安装了NodeJS。这一次，我们将用它来安装`grunt-contrib-jshint`包，可从[https://github.com/gruntjs/grunt-contrib-jshint](https://github.com/gruntjs/grunt-contrib-jshint)获取：
- en: 'Setting up the automatic check is very easy. To start, we need to download
    and install `grunt-contrib-jshint`. Open up a NodeJS command prompt, and enter
    the following from within the project folder area:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置自动检查非常容易。首先，我们需要下载并安装`grunt-contrib-jshint`。打开NodeJS命令提示符，并在项目文件夹区域内输入以下内容：
- en: '[PRE10]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once the installation has completed, go ahead and add the following to a new
    file, saving it as `gruntfile.js` within the project folder:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，继续在新文件中添加以下内容，并将其保存为`gruntfile.js`，保存在项目文件夹中：
- en: '[PRE11]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: From the code download, we need to extract our target JavaScript file. Go ahead
    and save a copy of `script.js` within a `js` subfolder in our project area.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从代码下载中，我们需要提取我们的目标JavaScript文件。继续并在我们的项目区域的`js`子文件夹中保存`script.js`的副本。
- en: 'Revert back to the NodeJS command prompt, and then enter the following command
    to run the `jshint` check over our code:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到NodeJS命令提示符，并输入以下命令，对我们的代码运行`jshint`检查：
- en: '[PRE12]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If all is well, we should see it pop up three errors that need fixing, as shown
    in the next screenshot:![Linting jQuery code automatically](img/image00482.jpeg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们应该会看到它弹出三个需要修复的错误，如下一张截图所示：![自动检查jQuery代码](img/image00482.jpeg)
- en: Note
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The observant of you may spot that this is the code from the quicktip plugin
    we created back in [Chapter 11](part0098.xhtml#aid-2TEN41 "Chapter 11. Authoring
    Advanced Plugins"), *Authoring Advanced Plugins*.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你们中注意力集中的人可能会注意到，这是我们在[第11章](part0098.xhtml#aid-2TEN41 "Chapter 11. Authoring
    Advanced Plugins")中创建的快速提示插件的代码，*编写高级插件*。
- en: 'We can take this even further! Instead of manually running the check when code
    has been updated, we can ask Grunt to do this automatically for us. To make this
    happen, we need to install the `grunt-contrib-watch` package, and alter the Grunt
    file accordingly. Let''s do that now:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以更进一步！我们可以让Grunt在代码更新时自动运行检查，而不是手动运行检查。为实现这一点，我们需要安装`grunt-contrib-watch`包，并相应地更改Grunt文件。现在就来做吧：
- en: 'Open a copy of `gruntfile.js`, and then add the following code immediately
    before the closing `});` of the `grunt.initConfig` object:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`gruntfile.js`的副本，然后在`grunt.initConfig`对象的结束`});`之前立即添加以下代码：
- en: '[PRE13]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'At the end of the file, add the following line, to register the additional
    task:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件末尾添加以下行，以注册额外的任务：
- en: '[PRE14]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We need to alter the `registerTask` call to make Grunt aware of our new task.
    Go ahead and modify as shown:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要修改`registerTask`调用以使Grunt意识到我们的新任务。继续按照下面的修改：
- en: '[PRE15]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Switch back to the command prompt window, and then enter the following at the
    command line:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回命令提示符窗口，然后在命令行中输入以下内容：
- en: '[PRE16]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Switch back to `script.js`, and make a change somewhere in the code. If all
    is well, Node will kick in and recheck our code.![Linting jQuery code automatically](img/image00483.jpeg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回`script.js`，并在代码中的某处进行更改。如果一切顺利，Node将启动并重新检查我们的代码。![自动检查jQuery代码](img/image00483.jpeg)
- en: Running the code clearly shows that we have some issues we need to fix. At this
    stage, we would spend time fixing them. As soon as changes are made, Node will
    kick in and show an updated list of errors (or a pass!).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码清楚地显示我们有一些问题需要解决。在这个阶段，我们会花时间来解决它们。一旦更改完成，Node将启动并显示更新后的错误列表（或通过！）。
- en: Assuming our code is fit for purpose, we can really start with optimizing it.
    An easy win is to minify the code, to help keep file sizes low. We can of course
    manually compress it, but that is so old-school; time to dig out Node again!
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的代码适合用途，我们可以真正开始优化它。一个简单的方法是压缩代码，以帮助保持文件大小的低水平。当然，我们可以手动压缩它，但那是老掉牙的做法；是时候再次挖掘Node了！
- en: Minifying code using NodeJS
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NodeJS压缩代码
- en: A key part of any developer's workflow should be a process to minify the scripts
    used in a site. This has the benefit of reducing the size of the downloaded content
    to a page.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者工作流程中的关键部分应该是一个用于压缩站点中使用的脚本的过程。这样做有助于减少页面下载内容的大小。
- en: We can of course do this manually, but it's a time consuming process which adds
    little benefit; a smarter way is to let NodeJS take care of this for us. The beauty
    of doing this means that we can configure Node to run with a package such as `grunt-contrib-watch`;
    any changes we make would be minified automatically. There may even be occasions
    when we decide not to produce a minified file; if we're unsure that the code we
    are writing is going to work. At times like this, we can instead fire off Grunt
    from within our text editor, if we're using a package such as Sublime Text.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们也可以手动执行此操作，但这是一个耗时的过程，几乎没有什么好处；一个更聪明的方法是让NodeJS为我们处理这个问题。这样做的美妙之处在于，我们可以配置Node以运行一个诸如`grunt-contrib-watch`之类的包；我们所做的任何更改都将自动被压缩。甚至可能会有一些情况，我们决定不生成一个压缩文件；如果我们不确定我们正在编写的代码是否会起作用。在这种时候，我们可以从我们的文本编辑器中启动Grunt，如果我们正在使用Sublime
    Text等包。
- en: Tip
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you want to implement that level of control within Sublime Text, then take
    a look at `sublime-grunt`, available from [https://github.com/tvooo/sublime-grunt](https://github.com/tvooo/sublime-grunt).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在Sublime Text中实现这种级别的控制，请查看`sublime-grunt`，可以从[https://github.com/tvooo/sublime-grunt](https://github.com/tvooo/sublime-grunt)获取。
- en: 'Okay, let''s start with setting up our minification process. For this, we''ll
    use the well-known package, UglifyJS (from [https://github.com/mishoo/UglifyJS2](https://github.com/mishoo/UglifyJS2)),
    and get Node to automatically check for us:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们开始设置我们的压缩过程。为此，我们将使用著名的包，UglifyJS（来自[https://github.com/mishoo/UglifyJS2](https://github.com/mishoo/UglifyJS2)），并让Node自动检查：
- en: We will be using NodeJS for this demo, so if you haven't already done so, go
    ahead and download the appropriate version for your platform from [http://www.nodejs.org](http://www.nodejs.org),
    accepting all defaults.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个演示，我们将使用NodeJS，所以如果你还没有这样做，可以从[http://www.nodejs.org](http://www.nodejs.org)下载适合你平台的相应版本，接受所有默认值。
- en: 'For this demo, we need to install two packages. UglifyJS provides support for
    source maps, so we need to install this first. From a NodeJS command prompt, change
    to the project folder, enter the following command, and then press *Enter*:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个演示，我们需要安装两个包。UglifyJS提供了对源映射的支持，所以我们首先需要安装它。从NodeJS命令提示符，切换到项目文件夹，输入以下命令，然后按*Enter*：
- en: '[PRE17]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, enter the following command, and press *Enter*:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，输入以下命令，然后按*Enter*：
- en: '[PRE18]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'When the installation has completed, we can run UglifyJS. At the command prompt,
    enter the following command carefully:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以运行UglifyJS。在命令提示符处，小心输入以下命令：
- en: '[PRE19]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If all is well, Node will run through the process, similar to this next screenshot:![Minifying
    code using NodeJS](img/image00484.jpeg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切正常，Node将按照这个下一个屏幕截图所示的过程进行：![使用NodeJS压缩代码](img/image00484.jpeg)
- en: At the end, we should have three files in our project area, as shown in the
    following screenshot:![Minifying code using NodeJS](img/image00485.jpeg)
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在我们的项目区域中应该有三个文件，如下面的屏幕截图所示：![使用NodeJS压缩代码](img/image00485.jpeg)
- en: We're now free to use the minified version of our code within a production environment.
    While in this instance we've not made much of a saving, you can imagine the results
    if we were to scale these figures up to cover larger scripts!
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以在生产环境中自由使用我们代码的压缩版本。虽然在这个例子中我们没有节省太多，但你可以想象如果我们扩大这些数字来覆盖更大的脚本时的结果！
- en: Exploring some points of note
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索一些值得注意的点
- en: 'The process of compressing scripts should become a de facto part of any developer''s
    workflow. NodeJS makes it easy to add, although there are some tips that will
    help make compressing files easier and more productive:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 压缩脚本的过程应该成为任何开发人员工作流程的一部分。NodeJS 使添加它变得容易，尽管有一些提示可以帮助使压缩文件更容易和更高效：
- en: The default configuration for UglifyJS will only produce files that show little
    compression. Getting better results requires careful reading of all the options
    available, to get an understanding of which one may suit your needs and is likely
    to produce the best results.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UglifyJS 的默认配置将只生成显示很少压缩的文件。要获得更好的结果，需要仔细阅读所有可用的选项，了解哪个选项可能适合您的需求，并且可能会产生最佳结果。
- en: We've included the source map option within our compression process. We can
    use this to relate issues appearing to the original source code. Enabling source
    map support will differ between browsers (for those that support it); in Firefox
    for example, press *F12* to show the Developer Toolbar, then click on the cog
    and select **Show Original Sources**:![Exploring some points of note](img/image00486.jpeg)
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在压缩过程中包含了源映射选项。我们可以使用它来将出现的问题与原始源代码关联起来。启用源映射支持在不同的浏览器中会有所不同（对于支持它的浏览器）；例如，在
    Firefox 中，按下 *F12* 键显示开发者工具栏，然后点击齿轮图标并选择 **显示原始源代码**：![探索一些值得注意的点](img/image00486.jpeg)
- en: It is worth checking to see if minified versions of files used in your project
    are already available. For example, does your project use plugins where minified
    versions have already been provided? If so, then all we need to do is concatenate
    them into one file; minifying them again is likely to cause problems, and break
    functionality in the file.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值得检查一下，您的项目中是否已经存在所使用文件的最小化版本。例如，您的项目是否使用了提供了最小化版本的插件？如果是这样的话，我们所需要做的就是将它们连接到一个文件中；再次对它们进行最小化可能会导致问题，并且破坏文件中的功能。
- en: Minifying files is not a black art, but is equally not an exact science too.
    It is difficult to know what improvement you will get in terms of file size, before
    compressing them. You may get some results that you didn't expect to see. It's
    worth exploring one such example now.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 对文件进行最小化并不是一门黑魔法，但也不是一门精确的科学。在压缩文件之前，很难知道在文件大小方面会得到多大的改进。你可能会得到一些意想不到的结果。现在就值得探索一个这样的例子。
- en: Working through a real example
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过一个真实的示例来理解
- en: While researching material for this book, I tried minifying one of the Drupal
    files used on the Packt Publishing site as a test. The original weighed in at
    590 KB; a compressed version using the same configuration options as in our demo,
    produced a file that was 492 KB.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在为这本书研究材料时，我尝试将 Packt Publishing 网站上使用的 Drupal 文件之一进行最小化，作为一个测试。原始文件大小为 590
    KB；使用与我们演示中相同配置选项的压缩版本，生成了一个文件大小为 492 KB 的文件。
- en: 'What does this tell us? Well, there are a couple of things to note:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们什么？嗯，有几点需要注意：
- en: It is important to maintain a realistic sense of expectation. Compressing files
    is a useful trick we use, but it will not always produce the results we need.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持合理的期望是很重要的。压缩文件是我们使用的一种有用的技巧，但它并不总能产生我们需要的结果。
- en: We've used UglifyJS (version 2). This is really easy to use, but comes with
    a trade-off in terms of raw compression ability. There will be some instances
    where it won't suit our requirements, but this shouldn't be seen as a failing.
    There are dozens of compressors available; we simply will have to choose a different
    alternative!
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用了 UglifyJS（版本 2）。这个工具非常易于使用，但在原始压缩能力方面存在一些折衷。在某些情况下，它可能不适合我们的需求，但这并不意味着它有缺陷。目前有几十种压缩工具可供选择；我们只需选择另一种替代方案即可！
- en: To really get a significant reduction in size, it may be necessary to use `gzip`
    to compress the file, and configure the server to decompress on the fly. This
    will add an overhead to processing the page, which needs to be factored into our
    optimization work.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要真正实现显著的大小减小，可能需要使用`gzip`来压缩文件，并配置服务器以动态解压缩。这将增加处理页面的开销，需要将其纳入我们的优化工作中。
- en: 'Instead, it may be a better alternative to work through each script to determine
    what is and isn''t being used. We can of course do this manually, but hey – you
    know me by now: why do it yourself when you can put it off to something else to
    do it for you (to badly misquote a phrase)? Enter Node! Let''s take a look at
    `unusedjs`, which we can use to give us an indication of exactly how much extra
    code our scripts contain.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，逐个检查每个脚本以确定哪些正在使用、哪些可以安全地删除可能是更好的选择。当然，我们可以手动执行此操作，但是嘿——您现在已经认识我了：为什么自己做当您可以将其推迟到其他事情去做呢（错误引用一个短语）？进入
    Node！让我们来看看`unusedjs`，它可以帮助我们了解我们的脚本中有多少额外的代码。
- en: Tip
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We've concentrated on minifying one file, but it is a cinch to change the configuration
    to minify any file automatically, by using wildcard entries instead.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经集中在压缩一个文件上，但是通过使用通配符条目，自动压缩任何文件的配置变得非常简单。
- en: Working out unused JavaScript
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 找出未使用的 JavaScript
- en: So far, we've seen how we can easily minify code without any effort – but what
    if minifying isn't enough, and we need to remove redundant code?
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何轻松地压缩代码而不需要任何努力——但是如果仅仅压缩还不够，我们需要删除多余的代码怎么办呢？
- en: Well, we can manually eyeball the code – nothing wrong with that. It's a perfectly
    acceptable way of working out what we can remove. The key thing though is that
    it is a manual process, which requires a lot of time and effort – not to mention
    the frequent attempts to find code that we can remove without breaking something
    else!
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们可以手动检查代码——这没什么错。这是一种完全可以接受的工作方式，但关键是这是一个手动过程，需要大量时间和精力——更不用说频繁尝试查找可以删除的代码而不会破坏其他代码了！
- en: A smarter move is to set Node to work out for us what is being used, and what
    could be safely dropped. The web performance expert Gaël Métais has created unused
    JS to help with this. It works with Node, and is available at [https://www.npmjs.com/package/unusedjs](https://www.npmjs.com/package/unusedjs).
    It's a work in progress, but as long as it is used as a guideline, it can produce
    a useful basis for us to work out where we can make changes.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 更明智的做法是设置 Node 为我们解决哪些代码正在使用以及哪些可以安全丢弃。网页性能专家 Gaël Métais 创建了 unused JS 来帮助解决此问题。它与
    Node 一起工作，并且可以在 [https://www.npmjs.com/package/unusedjs](https://www.npmjs.com/package/unusedjs)
    上获得。这是一个正在进行中的工作，但只要它被用作指南，它就可以为我们提供一个有用的基础，让我们知道在哪里可以进行更改。
- en: Let's take a moment to dig in and see how it works. For this demo, we'll use
    the Tooltip plugin demo we created in [Chapter 12](part0108.xhtml#aid-36VSO1 "Chapter 12. Using
    jQuery with the Node-WebKit Project"), *Using jQuery with the Node-WebKit Project*.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间深入了解它是如何工作的。对于此演示，我们将使用我们在 [第 12 章](part0108.xhtml#aid-36VSO1 "第 12 章。使用
    jQuery 与 Node-WebKit 项目") 中创建的 Tooltip 插件演示，*使用 jQuery 与 Node-WebKit 项目*。
- en: '![Working out unused JavaScript](img/image00487.jpeg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![找出未使用的 JavaScript](img/image00487.jpeg)'
- en: 'There are a few things that we need to bear in mind when using this functionality:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用此功能时，有几件事情需要记住：
- en: At the time of writing, the status of this plugin is still very much alpha –
    the usual risks around using alpha software apply! It is not perfect; it should
    be used as a guideline only, and at your own risk. It doesn't work well with really
    long scripts (such as the jQuery UI library), but will manage around 2,500-3000
    lines.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在撰写时，此插件的状态仍然处于非常初期阶段——使用 alpha 版软件的常见风险仍然存在！它并不完美；它应该只作为指南使用，并且需自担风险。它不能很好地处理长脚本（比如
    jQuery UI 库），但可以处理大约 2,500-3000 行。
- en: You will need to clear your browsing history, so don't go and use it in a browser
    where maintaining history is important.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要清除浏览历史记录，因此不要在对浏览历史记录至关重要的浏览器中使用它。
- en: The plugin uses Node. If you don't have this installed, then head over to the
    Node site at [http://www.nodejs.org](http://www.nodejs.org) to download and install
    the version appropriate for your platform.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该插件使用 Node。如果您没有安装它，请转到 Node 网站 [http://www.nodejs.org](http://www.nodejs.org)
    下载并安装适合您平台的版本。
- en: We also need to use a local web server such as WAMP (for PC – [http://www.wampserver.com/de](http://www.wampserver.com/de)
    or [http://www.wampserver.com/en/](http://www.wampserver.com/en/)), or MAMP (for
    Mac – [http://www.mamp.info](http://www.mamp.info)) for the demo. Make sure you
    have something set up and configured for use.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还需要使用本地 Web 服务器，如 WAMP（用于 PC - [http://www.wampserver.com/de](http://www.wampserver.com/de)
    或 [http://www.wampserver.com/en/](http://www.wampserver.com/en/)），或 MAMP（用于 Mac
    - [http://www.mamp.info](http://www.mamp.info)）进行演示。确保您已经设置和配置了某些内容以供使用。
- en: 'Assuming we have Node and a local web server installed and configured for use,
    let''s start with setting the `unusedjs` script. We will use Firefox for the purpose
    of running the demo, so adjust accordingly if you prefer to use a different browser.
    Let''s begin:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经安装并配置了 Node 和本地 Web 服务器供使用，让我们从设置 `unusedjs` 脚本开始。我们将使用 Firefox 运行演示，如果你更喜欢使用其他浏览器，请相应调整。让我们开始：
- en: 'We need to start somewhere. The first step is to install `unusedjs.` Run the
    following command at the NodeJS prompt:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要从某个地方开始。第一步是安装 `unusedjs.`，在 NodeJS 提示符下运行以下命令：
- en: '[PRE20]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Start the server by writing the following in your console:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在控制台中输入以下内容启动服务器：
- en: '[PRE21]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Click on the three bar icon and then **Options**, to show the options dialog.
    Make sure the following entries are set as shown in this next image:![Working
    out unused JavaScript](img/image00488.jpeg)
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击三条杠图标，然后点击 **选项**，以显示选项对话框。确保以下条目设置如下图所示：![清除未使用的 JavaScript](img/image00488.jpeg)
- en: Make sure the **No Proxy** field is empty. Then click **OK** to confirm the
    settings.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保 **No Proxy** 字段为空。然后点击 **OK** 确认设置。
- en: Next, we need to clear the cache in the browser session. This is critical, as
    we will likely get skewed results if the cache is not cleared.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要清除浏览器会话中的缓存。这一点至关重要，如果不清除缓存，我们可能会得到扭曲的结果。
- en: At this stage, open a copy of `tooltipv2.html` from the code download that accompanies
    this book, and wait until the page is fully loaded.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个阶段，从随书代码下载中打开 `tooltipv2.html` 的副本，并等待页面完全加载。
- en: 'Press *F12* to display Firefox''s console, and enter the following at the prompt:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *F12* 显示 Firefox 的控制台，并在提示符处输入以下内容：
- en: '[PRE22]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If all is well, we should see something akin to the following screenshot, when
    viewing the console results:![Working out unused JavaScript](img/image00489.jpeg)
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切正常，当查看控制台结果时，我们应该看到类似以下截图的内容：![清除未使用的 JavaScript](img/image00489.jpeg)
- en: 'Try entering `_unusedjs.file(2)` in the console. This function shows a copy
    of the code, with unused sections highlighted in red, as shown in this screenshot:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在控制台中输入 `_unusedjs.file(2)`。这个函数会显示代码的副本，并用红色突出显示未使用的部分，如下截图所示：
- en: '![Working out unused JavaScript](img/image00490.jpeg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![清除未使用的 JavaScript](img/image00490.jpeg)'
- en: We can now concentrate on the highlighted sections to remove redundant code
    from our own scripts. How much will of course depend on our own requirements,
    and whether redundant code will later be used as part of any forthcoming changes
    to our work.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以集中精力在突出显示的部分上，从我们自己的脚本中删除冗余代码。当然，这将取决于我们自己的要求，以及冗余代码是否将作为即将到来的工作的一部分而被使用。
- en: Tip
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It goes without saying that we can't simply yank out code from a library such
    as jQuery. We would need to build a custom version of jQuery – we covered this
    in detail in [Chapter 1](part0014.xhtml#aid-DB7S1 "Chapter 1. Installing jQuery"),
    *Installing jQuery*.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，我们不能简单地从诸如 jQuery 这样的库中删除代码。我们需要构建 jQuery 的自定义版本——我们在[第1章](part0014.xhtml#aid-DB7S1
    "Chapter 1. Installing jQuery")中详细讨论了这一点，*安装 jQuery*。
- en: Now that we've established our baseline, and worked out if any of our scripts
    contain unused code, it's time to look at optimizing it. Let's take a look at
    some of the tips and tricks we can use in our code; as a basis for embedding best
    practice into our normal development workflow.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了基准，并确定了我们的脚本中是否包含未使用的代码，现在是时候来优化它了。让我们看看我们的代码中可以使用的一些技巧和窍门；作为将最佳实践嵌入到我们的正常开发工作流程的基础。
- en: Implementing best practices
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施最佳实践
- en: Imagine the scenario – we've written our code and checked it to ensure that
    all files are minimized where possible, and that we've not included lots of redundant
    code. At this point, some might think that we're ready to release the code and
    put our efforts out for public consumption, right?
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下情景——我们已经编写了我们的代码，并检查了以确保所有文件在可能的情况下都被最小化，而且我们没有包含大量冗余代码。此时，有些人可能会认为我们已经准备好发布代码，并将我们的努力提供给公众使用，对吗？
- en: 'Wrong! It would be remiss to release code at this stage, without reviewing
    our code for both speed and efficiency. Larry Page, cofounder and CEO of Google,
    put it perfectly, when he stated that :'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 错误！在这个阶段发布代码而不检查我们的代码的速度和效率，是不负责任的。谷歌的联合创始人兼首席执行官拉里·佩奇在他说到这一点时表达得很完美：
- en: '|   | *"As a product manager you should know that speed is product feature
    number one."* |   |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '|   | *"作为产品经理，你应该知道速度是产品功能的第一要素。"* |   |'
- en: '|   | --*Larry Page, co-founder and CEO of Google* |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '|   | --*Google 联合创始人兼首席执行官拉里·佩奇* |'
- en: 'Speed is absolutely king! We''ve gone some way towards satisfying Larry''s
    comment, but we can do more. So far, we''ve looked at minifying our code and producing
    custom versions of jQuery. We can take this further by assessing the code we''ve
    written, to ensure it is being executed efficiently. Each person''s requirements
    will naturally be different, so we would need to use a mix of tricks to ensure
    efficient execution. Let''s take a look at a few:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 速度绝对是王道！我们已经在满足Larry的评论方面有了一些进展，但我们可以做得更多。到目前为止，我们已经看过了将我们的代码最小化和生成自定义版本的jQuery。我们可以通过评估我们编写的代码来进一步确保它被有效执行。每个人的需求自然会有所不同，所以我们需要使用一些技巧的组合来确保有效的执行。让我们看看其中的一些：
- en: 'It goes without saying, but we should execute a task against the DOM only when
    absolutely necessary. Each hit on the DOM can potentially be expensive on resources,
    making your application slower. For example, consider the following code:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 毫无疑问，我们应该只在绝对必要时针对DOM执行任务。对DOM的每次命中可能对资源是昂贵的，使您的应用程序变慢。例如，考虑以下代码：
- en: '[PRE23]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: On an empty `<body>` tag, the time taken to load the jQuery library and make
    it available for use, is relatively less; as soon as we add elements to our page,
    that value will increase. To see the difference, I ran a small demo using this
    code. In the following image, the results of loading jQuery on empty `<body>`
    tags is on the left, while the results of using `tooltipv2.html` from an earlier
    demo, on the right:![Implementing best practices](img/image00491.jpeg)
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在空的`<body>`标签上，加载jQuery库并使其可用所花费的时间相对较少；一旦我们在页面上添加元素，这个值就会增加。为了看到差异，我使用了这段代码运行了一个小演示。在下面的图像中，加载空的`<body>`标签上的jQuery的结果在左侧，而在之前演示中使用`tooltipv2.html`的结果在右侧：![实施最佳实践](img/image00491.jpeg)
- en: If version 1.11 of jQuery is used, then the effect is even more acute, as a
    result of the code incorporated to support older browsers. To see the effects
    for yourself, try running `test loading jquery.html`, and then switch to **Console**
    within the Developer Toolbar of your browser to see the results of the test. Change
    the version of jQuery to `1.11` to really see the difference!
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果使用的是jQuery的1.11版本，那么由于包含了支持旧版浏览器的代码，其效果甚至更加明显。要亲自看到效果，请尝试运行`test loading jquery.html`，然后切换到您的浏览器的开发者工具栏中的**Console**来查看测试结果。将jQuery版本更改为`1.11`以真正看到差异！
- en: 'To maintain performance, DOM elements should be cached in variables, then append
    it only after it has been manipulated:'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了保持性能，DOM元素应该被缓存在变量中，然后在被操作后才添加：
- en: '[PRE24]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Tip
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can see the results in action by running the test on JSPerf, at [http://jsperf.com/append-on-loop/2](http://jsperf.com/append-on-loop/2).
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以通过在JSPerf上运行测试来查看结果的实际情况，网址为[http://jsperf.com/append-on-loop/2](http://jsperf.com/append-on-loop/2)。
- en: The flip side to this is if we need to modify several properties that relate
    to a single element. In some respects, creating an object makes it easier to manipulate
    it, but at the same time undoes all our effort!
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一方面，如果我们需要修改与单个元素相关的几个属性，则使用对象会使操作变得更容易，但同时也会撤销我们的所有努力！
- en: 'It is imperative that you check your selectors. jQuery reads them from right
    to left. Where possible, use IDs as they are faster to access than standard class
    selectors. Also, make sure that you are not using rules such as `.myClass1 #container`,
    where an ID follows a class selector. This is inefficient – we lose the benefit
    of specifying what can only be a single value, by having to constantly iterate
    through code to ensure we''ve covered all instances of the class that we have
    used in our code.'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '检查选择器非常重要。jQuery是从右向左读取它们的。尽可能使用ID，因为它们比标准类选择器更快。还要确保您没有使用诸如`.myClass1 #container`之类的规则，其中ID跟在类选择器后面。这是低效的
    - 我们失去了指定只能是单个值的好处，因为不断地迭代代码以确保我们已经涵盖了我们在代码中使用的类的所有实例。'
- en: 'It goes without saying that any selector used should be cached. When referencing
    selectors that go several levels deep, best practice states that we should be
    as specific as possible on the left side (that is, `.data`), and less specific
    on the right:'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 毫无疑问，所使用的任何选择器都应该被缓存。当引用多级深度的选择器时，最佳实践规定我们应该在左侧尽可能具体（即`.data`），在右侧尽可能不太具体：
- en: '[PRE25]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Above all, avoid using the universal selector in the form of a `*` or type,
    such as `:radio`, without making your selector reference as explicit as possible
    – these are both very slow!
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最重要的是，避免使用`*`或类型等形式的通用选择器，例如`:radio`，除非您使您的选择器引用尽可能明确 - 这两者都非常慢！
- en: Although this book is about jQuery, there may be instances where we need to
    use classic JavaScript methods if performance is such that jQuery is not up to
    the mark. For instance, a `for` loop will be more efficient than the jQuery `.each()`
    method, and using the `querySelector` API is better than using a jQuery selector.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽管这本书是关于jQuery的，但在性能不够时，可能需要使用经典JavaScript方法。例如，`for`循环比jQuery的`.each()`方法更有效，使用`querySelector`
    API比使用jQuery选择器更好。
- en: If you are loading a number of scripts, consider loading them at the end of
    the page, once all the content has been loaded above the fold (or what is displayed
    before scrolling down the page). jQuery should always be used to progressively
    enhance pages, not run a code that will break a page if jQuery is disabled. Perception
    can play a big part – your page may not be doing a great deal, but still be perceived
    as slow. Reordering scripts (and content) can help alter this perception.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您正在加载多个脚本，请考虑在页面末尾加载它们，一旦在页面上方（或在页面向下滚动之前显示的内容）加载了所有内容。jQuery应始终用于逐步增强页面，而不是运行一段代码，如果禁用jQuery，则会破坏页面。感知力可能起很大作用
    - 您的页面可能没有做很多事情，但仍然被感知为慢。重新排序脚本（和内容）可以帮助改变这种感知。
- en: 'Some developers may still use jQuery''s AJAX object to handle asynchronous
    HTTP requests. Although it works, it is not the cleanest way to manage such requests:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有些开发者可能仍然使用jQuery的AJAX对象来处理异步HTTP请求。虽然它能够运行，但不是处理此类请求的最干净的方式：
- en: '[PRE26]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'A smarter option is to use jQuery `promises()`, where we can defer code into
    functions that are cleaner to read and easier to debug. It matters not one jot
    where the code is then stored; `promises()` will allow us to call it at the appropriate
    point in the code:'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更明智的选择是使用jQuery `promises()`，在那里我们可以将代码延迟到更容易阅读和调试的函数中。代码存储在何处并不重要；`promises()`将允许我们在代码的适当位置调用它：
- en: '[PRE27]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If we're calling whole scripts, then it makes sense to explore the use of conditional
    loaders such as RequireJS (using plain JavaScript), or `grunt-requirejs` (if our
    preference is to use Node).
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们正在调用整个脚本，则探索使用条件加载器是有意义的，比如RequireJS（使用纯JavaScript），或`grunt-requirejs`（如果我们更喜欢使用Node）。
- en: Tip
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It goes without saying that the same principle of lazy loading our code will
    also apply to elements on the page, such as images; `jquery-lazy` is a perfect
    example of a module for Node, which will help with this. It's available at [https://www.npmjs.com/package/jquery-lazy](https://www.npmjs.com/package/jquery-lazy).
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 毫无疑问，懒加载我们的代码的同样原则也适用于页面上的元素，例如图像；`jquery-lazy`是一个完美的Node模块示例，可以帮助实现这一点。它可在[https://www.npmjs.com/package/jquery-lazy](https://www.npmjs.com/package/jquery-lazy)找到。
- en: The previous tip mentioning the use of `promises()` illustrated a perfect example
    of where we can still make improvements. Some developers extol the virtues of
    chaining code, which can appear to shorten the code. However, it makes it harder
    to read and therefore debug; the resulting code spaghetti will lead to mistakes
    and time wasting, ultimately requiring a partial or complete code refactor. The
    example from the previous tip also highlights the need to ensure that a good naming
    convention is used, as we can't be specific with our callback function names,
    when chaining commands.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 先前提到使用`promises()`的提示展示了一个完美的例子，说明我们仍然可以做出改进。有些开发者赞美代码链的优点，这样做似乎可以缩短代码。然而，这使得代码更难阅读，因此也更难调试；由此产生的代码混乱将导致错误和浪费时间，最终需要部分或完全重构代码。先前提示中的例子还突显了需要确保使用良好的命名约定，因为当链式命令时，我们无法具体指定回调函数的名称。
- en: This next tip may seem a little contradictory, given we are talking about jQuery
    throughout this book, but use less JavaScript – anything that can be offloaded
    onto HTML or CSS will have a positive impact on our performance. Although it is
    fun to use jQuery, it is based on JavaScript which is the most brittle layer of
    the web stack, and will impact performance. A classic example of this is creating
    animations. Take a look at [https://css-tricks.com/myth-busting-css-animations-vs-javascript/](https://css-tricks.com/myth-busting-css-animations-vs-javascript/)
    to understand why it is foolish to use jQuery (or JavaScript) to power our animations
    unless necessary.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个下一个提示可能看起来有点矛盾，因为我们在本书中始终在谈论jQuery，但是要使用更少的JavaScript - 可以转移到HTML或CSS的任何内容都会对我们的性能产生积极影响。虽然使用jQuery很有趣，但它是基于JavaScript的，而JavaScript是Web堆栈中最脆弱的层，会影响性能。这的经典例子是创建动画。查看[https://css-tricks.com/myth-busting-css-animations-vs-javascript/](https://css-tricks.com/myth-busting-css-animations-vs-javascript/)，了解为什么在不必要时使用jQuery（或JavaScript）来驱动我们的动画是愚蠢的。
- en: Consider cutting the mustard, or dropping functionality for less capable browsers.
    This will make for a much better experience when using jQuery-based sites on less
    capable or mobile browsers. On some sites that have lots of polyfills running
    to support functionality such as CSS3 styling, the impact of dropping these polyfills
    could be substantial!
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 考虑削减芥末，或者为能力较弱的浏览器放弃功能。当在能力较弱或移动浏览器上使用基于jQuery的站点时，这将带来更好的体验。在一些具有许多polyfill运行以支持功能（例如CSS3样式）的站点上，放弃这些polyfill的影响可能很大！
- en: To get a feel for the difference in times for loading and parsing jQuery, check
    out the tests performed by developer Tim Kadlec, at [http://timkadlec.com/2014/09/js-parse-and-execution-time/](http://timkadlec.com/2014/09/js-parse-and-execution-time/).
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要了解加载和解析jQuery所需时间的差异，请查看开发人员Tim Kadlec在[http://timkadlec.com/2014/09/js-parse-and-execution-time/](http://timkadlec.com/2014/09/js-parse-and-execution-time/)进行的测试。
- en: 'There are many more tips and tricks we can use in our code. For more sources
    of inspiration, take a look at the following links as a starting point:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在我们的代码中使用许多更多的技巧和诀窍。有关更多灵感来源，请参考以下链接作为起点：
- en: '[http://www.slideshare.net/MatthewLancaster/automated-perf-optimization-jquery-conference](http://www.slideshare.net/MatthewLancaster/automated-perf-optimization-jquery-conference):
    Presented at the jQuery Conference by developer Matthew Lancaster in 2014, this
    covers some useful tips; he particularly makes a point of emphasizing that we
    can make some serious gains with little effort, although we should always be wary
    of over-optimizing our code!'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.slideshare.net/MatthewLancaster/automated-perf-optimization-jquery-conference](http://www.slideshare.net/MatthewLancaster/automated-perf-optimization-jquery-conference)：由开发人员Matthew
    Lancaster于2014年在jQuery会议上演讲，这涵盖了一些有用的技巧；他特别强调我们可以在不费吹灰之力的情况下取得一些严重的收益，尽管我们应该始终警惕过度优化我们的代码！'
- en: '[http://crowdfavorite.com/blog/2014/07/javascript-profiling-and-optimization/](http://crowdfavorite.com/blog/2014/07/javascript-profiling-and-optimization/):
    This article goes through the process used by the authors to help optimize performance;
    this gives a flavor of what is involved.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://crowdfavorite.com/blog/2014/07/javascript-profiling-and-optimization/](http://crowdfavorite.com/blog/2014/07/javascript-profiling-and-optimization/)：本文介绍了作者用来帮助优化性能的过程；这给出了所涉及的味道。'
- en: '[http://chrisbailey.blogs.ilrt.org/2013/08/30/improving-jquery-performance-on-element-heavy-pages/](http://chrisbailey.blogs.ilrt.org/2013/08/30/improving-jquery-performance-on-element-heavy-pages/):
    This article is a little older, but still contains some useful pointers for optimizing
    our code.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://chrisbailey.blogs.ilrt.org/2013/08/30/improving-jquery-performance-on-element-heavy-pages/](http://chrisbailey.blogs.ilrt.org/2013/08/30/improving-jquery-performance-on-element-heavy-pages/)：这篇文章有点老，但仍然包含了一些优化我们代码的有用指针。'
- en: '[http://joeydehnert.com/2014/04/06/9-development-practices-that-helped-me-write-more-manageable-and-efficient-javascript-and-jquery/](http://joeydehnert.com/2014/04/06/9-development-practices-that-helped-me-write-more-manageable-and-efficient-javascript-and-jquery/):
    This contains some very useful tips on optimizing jQuery, with some similar to
    the ones we''ve covered in this chapter.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://joeydehnert.com/2014/04/06/9-development-practices-that-helped-me-write-more-manageable-and-efficient-javascript-and-jquery/](http://joeydehnert.com/2014/04/06/9-development-practices-that-helped-me-write-more-manageable-and-efficient-javascript-and-jquery/)：这里包含了一些非常有用的优化jQuery的技巧，有些与我们在本章中介绍的类似。'
- en: The key point through all of this is that performance optimization should never
    be considered a one-off exercise; we must consider it an ongoing process during
    the life of the code. To help with this, we can design a strategy to stay on top
    of optimization. Let's use some of these tips as a basis for what we need to consider
    as part of this strategy.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 通过所有这些的关键点是，性能优化永远不应被视为一次性的活动；我们必须将其视为代码生命周期中的持续过程。为了帮助实现这一点，我们可以设计一个策略来掌握优化。让我们以这些提示作为我们需要考虑的策略的基础。
- en: Designing a strategy for performance
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计一个性能策略
- en: So far, we've concentrated on tips and tricks we can use to improve performance.
    Taking a reactive approach will work, but requires extra time to be spent when
    we can instead build in these tips and tricks at the time of creating the code.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们集中在可以用来改善性能的技巧和窍门上。采取一种反应式的方法是可行的，但需要额外的时间来投入，而我们可以在编写代码时就将这些技巧和窍门融入其中。
- en: 'With this in mind, having a strategy to help encourage such a mindset will
    help. Let''s take a look at a few key points that can form the basis for such
    a strategy:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，制定一项策略来鼓励这种思维方式将是有益的。让我们来看看可以形成这样一项策略基础的几个关键点：
- en: Always use the latest version of jQuery – you benefit from improvements in code,
    speed, and bug fixes for known issues.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终使用最新版本的jQuery - 您将从代码改进、速度和已知问题的错误修复中受益。
- en: Combine and minify scripts where possible, to reduce bandwidth usage.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在可能的情况下，合并和压缩脚本，以减少带宽使用。
- en: Use native functions instead of jQuery equivalents – a perfect example is to
    use `for()` instead of `.each()`.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用原生函数而不是jQuery的等效函数 - 一个完美的例子是使用`for()`而不是`.each()`。
- en: Use IDs instead of classes – IDs can only be assigned once, whereas jQuery will
    hit the DOM multiple times looking for each class, even if only one instance exists.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ID而不是类 - ID只能分配一次，而jQuery将多次命中DOM以查找每个类，即使只有一个实例存在也是如此。
- en: 'Give selectors a context. Refer to the following code simply specifying a single
    class:'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给选择器一个上下文。参考以下代码，简单指定一个类：
- en: '[PRE28]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Instead, a smarter way is to use contextualized selectors in the form of `$(expression,
    context)`, thus yielding:'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 相反，更明智的做法是使用上下文化的选择器，形式为`$(expression, context)`，从而产生：
- en: '[PRE29]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The second option runs much faster, as it only has to traverse the #class-container
    element and not the entire DOM.'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二个选项运行速度更快，因为它只需要遍历#class-container元素而不是整个DOM。
- en: Cache values wherever possible, to avoid manipulating the DOM directly.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在可能的情况下，缓存值，以避免直接操作DOM。
- en: Use `join()` instead of `concat()` to join longer strings.
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`join()`而不是`concat()`来连接较长的字符串。
- en: Always add return false, or use `e.preventDefault()` on click events on links
    where `#` is used as the source link – not adding it will jump you to the top
    of the page, which is irritating on a long page.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用`#`作为源链接的链接的点击事件上始终添加`return false`，或者使用`e.preventDefault()` - 如果不添加，将会跳转到页面顶部，在长页面上会很烦人。
- en: Set yourself a budget in terms of page weight, requests, and render time – see
    [http://timkadlec.com/2014/11/performance-budget-metrics/](http://timkadlec.com/2014/11/performance-budget-metrics/).
    It gives purpose to optimizing, and encourages a longer term performance monitoring
    spirit.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在页面重量、请求和渲染时间方面为自己设定预算 - 请参阅[http://timkadlec.com/2014/11/performance-budget-metrics/](http://timkadlec.com/2014/11/performance-budget-metrics/)。这给优化提供了目的，并鼓励更长期的性能监控精神。
- en: Use a performance monitoring service such as SpeedCurve to help monitor your
    sites, and alert you to any issues when they appear.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用诸如SpeedCurve之类的性能监控服务来帮助监视您的网站，并在出现问题时提醒您。
- en: Put performance on display in your office – this helps encourage a team spirit.
    If someone in the team comes up with a change that has a positive impact on performance,
    then credit them and make the rest of the team aware; it will help encourage a
    healthy sense of competition amongst the team.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在办公室展示性能 - 这有助于鼓励团队精神。如果团队中的某人提出的更改对性能产生了积极影响，则表彰他们并让其余团队成员知晓；这将有助于激励团队之间的健康竞争意识。
- en: If however a change breaks the performance, then don't punish the culprit; this
    will discourage them from taking part. Instead, try to foster a culture of owning
    a problem, then learning how to prevent it from happening again. How about running
    tests such as PhantomJS to help check and minimize the risk of issues appearing?
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但是，如果一个改变破坏了性能，那么不要惩罚罪犯；这将使他们不愿参与。相反，试着培养解决问题的文化，然后学会如何防止它再次发生。如何运行像PhantomJS这样的测试来帮助检查和减少问题出现的风险呢？
- en: Automate everything. There are services that will compress images or shrink
    scripts, but there is something to be said for investing time in developing similar
    processes in-house that will save you time and money. The key here is that there
    is no point in manually performing tasks such as optimizing images or minifying
    scripts; it's up to you to work out what best suits your needs.
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化一切。有服务可以压缩图像或缩小脚本，但投入时间开发类似的内部流程可以节省时间和金钱。关键在于，手动执行诸如优化图像或压缩脚本的任务是没有意义的；你需要自己找出最适合你需求的方法。
- en: A key consideration is if you decide to use Grunt or Gulp – will either provide
    additional functionality that is useful, or are they simply an overhead that can
    be reduced or eliminated with careful use of NPM? The developer Keith Cirkel put
    together a valid argument for just using NPM at [http://blog.keithcirkel.co.uk/why-we-should-stop-using-grunt/](http://blog.keithcirkel.co.uk/why-we-should-stop-using-grunt/);
    it's a thought-provoking read!
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否决定使用Grunt或Gulp是一个关键考虑因素——它们是否提供了有用的附加功能，还是只是一个可以通过谨慎使用NPM来减少或消除的额外负担？开发者Keith
    Cirkel在[http://blog.keithcirkel.co.uk/why-we-should-stop-using-grunt/](http://blog.keithcirkel.co.uk/why-we-should-stop-using-grunt/)提出了一个有力的理由，认为只使用NPM就足够了；这是一个发人深省的观点！
- en: Spend time influencing your colleagues and those higher up the chain – often
    they may not be aware of the pain you might be experiencing on an issue, but may
    actually be in a position to help you in your fight!
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 花时间影响你的同事和那些更高层的人——他们通常可能不知道你在某个问题上可能遇到的困难，但实际上可能有能力帮助你解决问题！
- en: Spend time learning. All too often we spend too much time on client work, and
    don't build in enough time for self-development; put aside some time to rectify
    this. If it means having to alter prices to cover lost earnings as a result of
    time not spent on client work, then this is something that needs to be considered.
    It's all about setting a work/play/learning balance, which will pay off in the
    long term.
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 花时间学习。我们往往花太多时间在客户工作上，而没有为自我发展留出足够的时间；花一些时间来纠正这一点。如果这意味着需要调整价格来弥补由于未花时间在客户工作上而导致的收入损失，那么这是需要考虑的事情。这一切都关乎于建立工作/娱乐/学习的平衡，这将在长期内得到回报。
- en: There is plenty of food for thought – not every trick will apply. There will
    be instances where a blend of one or more will produce the results you need. It
    is worth spending time on this though, as it will pay off in spades in the longer
    term, and hopefully will become embedded in existing work culture within your
    team.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多值得深思的东西——并不是每个技巧都适用。在某些情况下，一个或多个技巧的融合会产生你需要的结果。然而，花费时间在这上面是值得的，因为长期来看会得到丰厚的回报，并且有望在你的团队现有的工作文化中获得融入。
- en: 'Let''s move on. We''re almost at the end of the chapter, but before we finish
    and take a look at testing for jQuery, I want to ask a simple question: do we
    really need to use jQuery at all, and if so, why should we?'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续。我们快要完成本章了，但在我们结束之前，让我们来看看如何为jQuery进行测试，我想问一个简单的问题：我们真的需要使用jQuery吗，如果需要，为什么？
- en: Staying with the use of jQuery
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于使用jQuery
- en: At this point, you would be forgiven for thinking that I've completely lost
    the plot, particularly when we've just been examining ways of optimizing it, only
    to suggest that we completely remove its use from our code. Why, I hear you ask,
    would I even consider dropping jQuery?
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，如果你认为我完全失去了理智，那是可以理解的，特别是当我们刚刚在考虑优化代码的方法时，却建议完全将其从我们的代码中删除。你可能会问，为什么我会考虑放弃jQuery呢？
- en: 'Well, there are several good reasons for this. Anyone can write jQuery code,
    but the smart developer should always consider if they should use jQuery to solve
    a problem:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，有几个充分的理由。任何人都可以编写jQuery代码，但聪明的开发者应该始终考虑他们是否应该使用jQuery来解决问题：
- en: jQuery is an abstraction library. It needs JavaScript, and was built at a time
    when developing for browsers of the day could be a real challenge. The need to
    abstract away browser inconsistencies is becoming less and less. It's important
    to remember that we should use jQuery to progressively enhance plain JavaScript;
    jQuery was first and foremost designed to make writing JavaScript easier, and
    is not a language in its own right.
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery是一个抽象库，它需要JavaScript，并且是在开发当时的浏览器可能是一个真正的挑战的时候构建的。需要抽象掉浏览器的不一致性正在变得越来越少。重要的是要记住，我们应该使用jQuery来逐步增强普通的JavaScript；jQuery首先是为了让编写JavaScript更容易而设计的，并不是一种独立的语言。
- en: Browsers are closer than they've ever been, in terms of offering functionality.
    With Firefox having ditched most vendor prefixes, there is little need for libraries
    to smooth out inconsistencies. If something works in IE10 or the latest version
    of Firefox, then it is likely the same will apply for Google Chrome or Opera.
    Granted, there will be some differences, but this is really only for some of the
    more esoteric CSS3 styles that have yet to make it into mainstream use. So - if
    browsers are this close, why use jQuery?
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器在功能上比以往任何时候都更接近。随着 Firefox 放弃了大部分厂商前缀，库几乎不再需要消除不一致性。如果某个功能在 IE10 或最新版本的 Firefox
    中可行，那么很可能在 Google Chrome 或 Opera 中也适用。当然，会有一些差异，但这实际上仅适用于一些尚未被广泛使用的更为深奥的 CSS3
    样式。那么 - 如果浏览器如此接近，为什么还要使用 jQuery？
- en: Using plain JavaScript will always be faster than jQuery, no matter how much
    we try – it has the added bonus that JavaScript code will produce a smaller file
    than equivalent JavaScript code (not including the library itself). If we're only
    using a small amount of JavaScript code, then why reference a whole library? Absolutely,
    we can always try to build a custom version of jQuery, as we saw back in [Chapter
    1](part0014.xhtml#aid-DB7S1 "Chapter 1. Installing jQuery"), *Installing jQuery*
    – but we're still going to be pulling in more than we need, no matter how much
    we try to trim unnecessary code from the library! We can of course use `gzip`
    to compress jQuery code even further, but it will still be more than plain JavaScript.
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用纯 JavaScript 总是比使用 jQuery 快，无论我们如何努力 - 这还有一个额外的好处，即 JavaScript 代码将产生比等效 JavaScript
    代码（不包括库本身）更小的文件。如果我们只使用少量 JavaScript 代码，那么为什么要引用一个完整的库呢？当然，我们总是可以尝试构建 jQuery 的自定义版本，就像我们在
    [第 1 章](part0014.xhtml#aid-DB7S1 "第 1 章。安装 jQuery") 中看到的那样，*安装 jQuery* - 但无论我们如何尝试修剪库中的不必要代码，我们仍然会引入比我们需要的更多的代码！当然，我们当然可以使用
    `gzip` 进一步压缩 jQuery 代码，但它仍然会比纯 JavaScript 多。
- en: jQuery is all too easy to write – it has a huge community, and the learning
    curve is low. This creates the perfect conditions for writing lots of low-quality
    code, where we only use a small subset of the features available in jQuery. It
    will be much better in the long run to learn how to use plain JavaScript effectively,
    and then use jQuery to provide the metaphorical icing on the cake.
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写 jQuery 实在太容易了 - 它拥有庞大的社区，学习曲线很低。这为编写大量低质量的代码创造了完美的条件，我们只使用了 jQuery 中提供的一小部分功能。从长远来看，学习如何有效地使用纯
    JavaScript，然后使用 jQuery 为其提供象征性的锦上添花将会更好。
- en: The key point here though is that we shouldn't completely drop jQuery – the
    time has come though to really consider if we need to use it.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 但这里的关键点是我们不应完全放弃 jQuery - 现在是时候真正考虑是否需要使用它了。
- en: Granted – if we're using a significant amount of functionality that would otherwise
    be awkward at best, or positively awful in plain JavaScript, then it will be necessary
    to use jQuery. However, I'll leave you with a challenge, using taking photos as
    an analogy. Compose your photo as normal. Then stop, close your eyes for ten seconds,
    and take a couple of deep breaths. Now ask yourself if you are ready to still
    take the same photo. Chances are you will change your mind. The same thing applies
    to using jQuery. If you stopped and really considered your code, how many of you
    would still decide to continue using it, I wonder?
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 当然 - 如果我们使用了大量在纯 JavaScript 中要么很难实现，要么根本无法实现的功能，那么就必须使用 jQuery。然而，我给你留下一个挑战，用拍照作为类比。像平常一样构图。然后停下来，闭上眼睛十秒钟，深吸几口气。现在问问自己，你是否还准备拍同样的照片。很可能你会改变主意。同样的道理也适用于使用
    jQuery。如果你停下来认真考虑了自己的代码，我想你们中有多少人仍然决定继续使用它呢？
- en: Personally, I think jQuery will still have a part to play, but we're at a point
    where we should not simply use it blindly or out of habit, but make a conscious
    decision about when and where we use it in place of plain JavaScript.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 就个人而言，我认为 jQuery 仍将发挥作用，但我们已经到了一个不应该盲目或出于习惯使用它的时候，而是要在何时何地使用它代替纯 JavaScript
    做出有意识的决定的时候。
- en: To get a feel for how to switch from jQuery to JavaScript for the simple requirements,
    take a look at the article by Todd Motto at [http://toddmotto.com/is-it-time-to-drop-jquery-essentials-to-learning-javascript-from-a-jquery-background/](http://toddmotto.com/is-it-time-to-drop-jquery-essentials-to-learning-javascript-from-a-jquery-background/).
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何从 jQuery 切换到 JavaScript 来满足简单的需求，请参阅 Todd Motto 的文章 [http://toddmotto.com/is-it-time-to-drop-jquery-essentials-to-learning-javascript-from-a-jquery-background/](http://toddmotto.com/is-it-time-to-drop-jquery-essentials-to-learning-javascript-from-a-jquery-background/)。
- en: Summary
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Maintaining performant sites is a key part of development. There is more to
    it than just optimizing code, so let's take a moment to review what we've learnt
    in this chapter.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 维护高性能的网站是开发的关键部分。除了优化代码之外，还有更多内容，让我们花点时间回顾一下本章学到的东西。
- en: We kicked off with a look at the reasons for understanding why performance is
    critical, before going through various ways to monitor performance, from the simple
    eyeballing of statistics in Firebug to automating our checks using Grunt.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先了解了为何理解性能的重要性，并通过各种监视性能的方式，从在 Firebug 中查看统计数据到使用 Grunt 自动化我们的检查，进行了深入研究。
- en: We then moved on to understand how we can lint our code automatically, as one
    of the many ways of optimizing our code, before minifying it for production use.
    We then dived off to take a look at how we can work out if our code contains any
    unused code, which can be safely removed as part of streamlining our code.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们继续了解如何自动地对我们的代码进行代码检查，作为优化代码的众多方式之一，然后对其进行缩小以供生产使用。然后，我们深入研究了如何判断我们的代码是否包含任何未使用的代码，这些代码可以安全地删除，以简化我们的代码。
- en: We then rounded up the chapter with a look at implementing best practices. The
    focus here was less on providing specific examples, and more on sharing some tips
    and tricks that can be applied to any site. We then used this as a basis for designing
    a strategy to help maintain performant sites.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过实施最佳实践来结束本章。这里的重点不是提供具体的例子，而是分享一些可应用于任何网站的技巧和窍门。然后，我们以此为基础设计了一种策略，帮助维护高性能的网站。
- en: We're almost through our journey in mastering jQuery, but before we finish,
    we need to take a quick look at testing our code. Developers are likely to use
    QUnit, given it is part of the same jQuery family of projects; we'll take a look
    at how we can take things further in the next chapter.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将完成精通 jQuery 的旅程，但在结束之前，我们需要快速看一下如何测试我们的代码。开发者可能会使用 QUnit，因为它是 jQuery 家族项目的一部分；我们将在下一章中进一步探讨如何更深入地使用它。
