- en: Using Angular CLI to Generate Angular Apps with Best Practices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular CLI生成遵循最佳实践的Angular应用程序
- en: Angular CLI is a command-line interface for Angular that helps you kick-start
    your application development with the boilerplate code that follows all the necessary
    best practices. By executing the commands in Angular CLI, you can generate services,
    components, routes, and pipes for your application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI是用于Angular的命令行界面，它可以帮助您使用遵循所有必要最佳实践的样板代码快速启动应用程序开发。通过在Angular CLI中执行命令，您可以为应用程序生成服务、组件、路由和管道。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing Angular CLI
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Angular CLI
- en: Installing and setting up Angular CLI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和设置Angular CLI
- en: Generating code for new applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为新应用程序生成代码
- en: Generating components and routes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成组件和路由
- en: Generating services
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成服务
- en: Generating directives and pipes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成指令和管道
- en: Creating builds targeting various environment
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建针对各种环境的构建
- en: Running tests for your application
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行应用程序的测试
- en: Updating Angular CLI
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新Angular CLI
- en: Introducing Angular CLI
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Angular CLI
- en: Angular CLI is a command-line interface available as a node package. Angular
    CLI, introduced with Angular, helps you develop applications faster by generating
    the boilerplate code for a new application and adding features such as services,
    pipes, components, and directives to existing applications. Angular CLI is very
    powerful and handy in scaffolding your application easily. With the help of Angular
    CLI, we can create, build, test, and run our application, which will be a great
    relief to the developers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI是一个作为节点包可用的命令行界面。Angular CLI是与Angular一起推出的，它通过为新应用程序生成样板代码并向现有应用程序添加服务、管道、组件和指令等功能，帮助您更快地开发应用程序。Angular
    CLI在轻松搭建应用程序方面非常强大和方便。借助Angular CLI的帮助，我们可以创建、构建、测试和运行我们的应用程序，这将极大地减轻开发人员的负担。
- en: Angular CLI runs under node and is dependent on many packages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI在node下运行，并依赖于许多包。
- en: Installing and setting up Angular CLI
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和设置Angular CLI
- en: 'To install Angular CLI, we must have the latest version of node and npm installed
    in our system. Make sure the required packages are installed already and then
    start installing Angular CLI globally. The minimum required npm version is 3.x.x
    and the node version is 4.x.x. Sometimes, you may get an error when installing
    Angular CLI. In such cases, make sure you have the latest version of node.js installed.
    We can verify the version of node by executing the following command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Angular CLI，我们必须在系统中安装最新版本的node和npm。确保所需的包已经安装，并开始全局安装Angular CLI。最低要求的npm版本是3.x.x，node版本是4.x.x。有时，在安装Angular
    CLI时可能会出现错误。在这种情况下，请确保您已安装了最新版本的node.js。我们可以通过执行以下命令验证node的版本：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can check the version of npm by executing the following command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行以下命令检查npm的版本：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we know the versions of node and npm installed in our development machine.
    Let''s install Angular CLI globally by executing the following command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们知道了在我们的开发机器上安装的node和npm的版本。让我们通过执行以下命令全局安装Angular CLI：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Angular CLI has been installed and is available globally to use in our development
    machine.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI已安装并可全局在我们的开发机器上使用。
- en: Generating code for a new application
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为新应用程序生成代码
- en: 'We have Angular CLI ready to use now. Let''s generate a boilerplate code for
    an Angular application that displays the list of books. We will call the name
    of the application as `BookList`. Execute the following command in the node.js
    command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好使用Angular CLI了。让我们为一个显示书籍列表的Angular应用程序生成样板代码。我们将应用程序的名称命名为`BookList`。在node.js命令中执行以下命令：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This command will create a folder named `BookList` and generate the boilerplate
    code to get started with the Angular application. The following image shows the
    file structure organized in the generated code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将创建一个名为`BookList`的文件夹，并生成样板代码，以便开始使用Angular应用程序。以下图显示了生成代码中组织的文件结构：
- en: '![](assets/cb0c2311-7712-431d-afa5-5751739e71c5.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cb0c2311-7712-431d-afa5-5751739e71c5.png)'
- en: 'To make sure the generated code works fine, let''s run the application by executing
    the following commands. First navigate to the application folder by executing
    this statement:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保生成的代码正常工作，让我们通过执行以下命令来运行应用程序。首先通过执行此语句导航到应用程序文件夹：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, execute the following code to launch the application in the development
    server :'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，执行以下代码来在开发服务器中启动应用程序：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, let''s browse to `http://localhost:4200/` and the following page will
    be rendered in the browser with the default text if the generated code is fine.
    If you get an error, make sure the firewall is not blocking the port 4200 and
    Angular CLI did not throw any error while generating the boilerplate code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们浏览到`http://localhost:4200/`，如果生成的代码正确，浏览器将呈现以下页面的默认文本。如果出现错误，请确保防火墙没有阻止端口4200，并且在生成样板代码时Angular
    CLI没有抛出任何错误：
- en: '![](assets/f8829f1e-1720-4523-a364-5b49c5c2d77d.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f8829f1e-1720-4523-a364-5b49c5c2d77d.png)'
- en: Generating components and routes
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成组件和路由
- en: A component is a logical grouping of functionalities, views, and styles applicable
    to the view and a class associated to the component that deals with these artifacts.
    Components take responsibility for rendering the view as per the business logical
    requirements.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 组件是功能、视图和样式的逻辑组合，适用于视图和与组件相关的处理这些构件的类。组件负责根据业务逻辑要求呈现视图。
- en: 'We can generate code for components using Angular CLI. This tool is very handy
    in scaffolding the components. Let''s generate a component named `booklist` for
    our application by executing the following statement. Navigate to the Angular
    project folder by executing the command here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Angular CLI生成组件的代码。这个工具在搭建组件时非常方便。让我们通过执行以下语句为我们的应用程序生成一个名为`booklist`的组件。通过执行以下命令导航到Angular项目文件夹：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, execute the following Angular CLI command to generate the component `Booklist`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，执行以下Angular CLI命令来生成组件`Booklist`：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Executing the preceding statement creates the `booklist.component.css`, `booklist.component.html`,
    `booklist.component.spec.ts` and the `booklist.component.ts`, as shown in the
    following image:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述语句会创建`booklist.component.css`、`booklist.component.html`、`booklist.component.spec.ts`和`booklist.component.ts`，如下图所示：
- en: '![](assets/e3923ee1-aa83-4bde-802d-4bfd2ba9db35.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e3923ee1-aa83-4bde-802d-4bfd2ba9db35.png)'
- en: 'The `booklist.component.ts` file takes care of rendering the associated view
    according to the business logic needs. The code snippet generated by the book
    component is given here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`booklist.component.ts`文件负责根据业务逻辑需求呈现相关视图。书籍组件生成的代码片段如下：'
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notice that the `BooklistComponent` class is decorated with the `@Component`
    directive along with the metadata such as the selector, `templateUrl`, and `styleUrls`.
    The metadata selector enables Angular to instantiate the component `BooklistComponent`
    when it encounters the `app-booklist` selector.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`BooklistComponent`类使用`@Component`指令进行修饰，以及选择器、`templateUrl`和`styleUrls`等元数据。元数据选择器使得Angular在遇到`app-booklist`选择器时实例化组件`BooklistComponent`。
- en: 'The Angular CLI also generated the template file `booklist.component.html`
    with the following content. Angular will parse and render this content according
    to the instructions given in the component:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI还生成了模板文件`booklist.component.html`，内容如下。Angular将根据组件中给定的指令解析和呈现此内容：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We can also add styles specific to this template in the generated file `booklist.component.css`
    and the component will pick these styles, as the metadata `styleUrls` is mapped
    with the path of `booklist.component.css`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在生成的文件`booklist.component.css`中添加特定于此模板的样式，组件将会应用这些样式，因为元数据`styleUrls`与`booklist.component.css`的路径进行了映射。
- en: '`booklist.component.spec.ts` is generated to add the test methods to assert
    the functionalities of `BooklistComponent`. The code snippet of `booklist.component.spec.ts`
    is shown here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 生成`booklist.component.spec.ts`以添加测试方法来断言`BooklistComponent`的功能。`booklist.component.spec.ts`的代码片段如下所示：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Routes
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由
- en: Routes instruct Angular on navigating the application. Routing enables Angular
    to load only the views specific to routes without reloading the entire page or
    application. At the time of writing this chapter, generating a route using Angular
    CLI is disabled and will be enabled soon.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 路由指示Angular导航应用程序。路由使得Angular能够仅加载特定路由的视图，而无需重新加载整个页面或应用程序。在撰写本章时，使用Angular
    CLI生成路由被禁用，但将很快启用。
- en: Generating services
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成服务
- en: Services are user-defined classes to solve some purposes. Angular recommends
    having only template-specific codes in components. A component's responsibility
    is to enrich the UI/UX in an Angular application and it delegates business logic
    to services. Components are the consumers of services.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 服务是用户定义的类，用于解决一些目的。Angular建议在组件中只有特定于模板的代码。组件的责任是丰富Angular应用程序中的UI/UX，并将业务逻辑委托给服务。组件是服务的消费者。
- en: 'We have the component in place that helps render the `Booklist` template. Now,
    let''s run a CLI command to generate a service to serve the list of books. Execute
    the following command to generate `booklist.services.ts` and `booklist.services.spec.ts`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了帮助渲染`Booklist`模板的组件。现在，让我们运行一个CLI命令来生成一个服务，以提供书籍列表。执行以下命令生成`booklist.services.ts`和`booklist.services.spec.ts`：
- en: '![](assets/859ac249-25ad-4414-bb59-2f676782f5d5.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/859ac249-25ad-4414-bb59-2f676782f5d5.png)'
- en: 'The code snippet of the generated `booklist.service.ts` is shown here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的`booklist.service.ts`的代码片段如下所示：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Notice that `BooklistService` is decorated with `@Injectible` so that this booklist
    service will be available to the components. Also there is a warning message,
    Service is generated but not provided, it must be provided to be used. It means
    that to consume `BooklistService`; it needs to be provided to a component that
    is going to consume it. Providers in Angular will be discussed in detail in the
    [Chapter 13](2636ff55-fe1e-4e22-995c-ce0f83eea7f8.xhtml), *Applying Dependency
    Injection*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`BooklistService`被装饰为`@Injectible`，以便该书单服务将可用于组件。还有一个警告消息，服务已生成但未提供，必须提供才能使用。这意味着要使用`BooklistService`，它需要提供给将要使用它的组件。Angular中的提供者将在[第13章](2636ff55-fe1e-4e22-995c-ce0f83eea7f8.xhtml)中详细讨论，*应用依赖注入*。
- en: 'Angular CLI also generated a file to write test methods to assert `BooklistService`
    and the code snippet of `booklist.service.spec.ts` is shown here:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI还生成了一个文件，用于编写测试方法来断言`BooklistService`，`booklist.service.spec.ts`的代码片段如下所示：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Generating directives and pipes
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成指令和管道
- en: A class decorated with `@Directive` to attach metadata is called a directive.
    It is an instruction or guideline to render the template.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一个使用`@Directive`装饰的类来附加元数据被称为指令。它是一个渲染模板的指示或指导方针。
- en: 'We have seen generating components and services. Now, let''s generate directives
    and pipes using Angular CLI. We will start with creating a directive named book.
    Run the following command to generate the directive:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了生成组件和服务。现在，让我们使用Angular CLI生成指令和管道。我们将从创建一个名为book的指令开始。运行以下命令生成指令：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The outcome of executing the command is shown here:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令的结果如下所示：
- en: '![](assets/8dda0309-762f-45d9-9aac-17c4ec73c6f3.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8dda0309-762f-45d9-9aac-17c4ec73c6f3.png)'
- en: 'Executing this command creates two files, namely, `book.directive.spec.ts`
    and `book.directive.ts` respectively. Here is the code snippet of `book.directive.ts`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令会分别创建两个文件，即`book.directive.spec.ts`和`book.directive.ts`。以下是`book.directive.ts`的代码片段：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The code snippet of `book.directive.spec.ts` is shown here:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`book.directive.spec.ts`的代码片段如下所示：'
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Pipes
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道
- en: A pipe instructs Angular in filtering or rendering the input data. A pipe transforms
    the input data according to the logic given in the pipe.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 管道指示Angular在过滤或渲染输入数据时的操作。管道根据管道中给定的逻辑转换输入数据。
- en: 'Now, let''s generate a pipe using Angular CLI by executing the following statement:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过执行以下语句使用Angular CLI生成一个管道：
- en: '![](assets/3abd8478-f105-4d2d-9c08-c00603b70577.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3abd8478-f105-4d2d-9c08-c00603b70577.png)'
- en: 'Here, I created a pipe named `bookfilter` using Angular CLI. Note that it also
    created a test file, `bookfilter.pipe.spec.ts`, for writing test methods to assert
    the pipes. The code snippet of the `bookfilter.pipe.ts` is shown here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我使用Angular CLI创建了一个名为`bookfilter`的管道。请注意，它还创建了一个名为`bookfilter.pipe.spec.ts`的测试文件，用于编写测试方法来断言管道。`bookfilter.pipe.ts`的代码片段如下所示：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The code snippet generated for the test file `bookfilter.pipe.spec.ts` is shown
    here:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为测试文件`bookfilter.pipe.spec.ts`生成的代码片段如下所示：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Creating builds targeting various environments
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建针对各种环境的构建
- en: Using Angular CLI, we can also create builds for our application targeting various
    environments, such as development and production. The application will be configured
    specific to environments. For example, an application may be configured to use
    staging URLs for APIs in development or staging environments and production URLs
    of APIs will be configured in a LIVE or production environment. Developers will
    be manually updating the configuration of the URL as per the environment the application
    is built on. Angular facilitates to automate this process of creating builds by
    targeting various environments.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Angular CLI，我们还可以为应用程序创建针对各种环境的构建，例如开发和生产。应用程序将根据环境进行特定配置。例如，应用程序可以配置为在开发或暂存环境中使用暂存API的URL，并在LIVE或生产环境中配置API的生产URL。开发人员将手动根据应用程序构建的环境更新URL的配置。Angular可以简化通过针对各种环境创建构建的过程。
- en: A constant variable environment is maintained in a file named `environment.ts`.
    This file will help to override the default values as per the parameter passed
    when executing the build command.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为`environment.ts`的文件中维护了一个常量变量环境。此文件将帮助根据执行构建命令时传递的参数来覆盖默认值。
- en: 'To use the production file, we need to execute the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用生产文件，我们需要执行以下命令：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This command will make use of the settings in `environment.prod.ts`. The mapping
    to identify the environment file is instructed in `angular-cli.json`, as shown
    here:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将使用`environment.prod.ts`中的设置。用于识别环境文件的映射在`angular-cli.json`中指定，如下所示：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Running tests for your application
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为您的应用程序运行测试
- en: Testing the application is the essential process to be carried out before moving
    it to production. Developers can write tests to assert the behavior of the application.
    Writing proper tests will protect the application from deviating away from the
    requirement.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在将应用程序移至生产环境之前，测试应用程序是必不可少的过程。开发人员可以编写测试来断言应用程序的行为。编写适当的测试将保护应用程序免受偏离要求的影响。
- en: Jasmine is a test framework that facilitates to write tests to assert the behavior
    of the application and execute the tests in the browser using the HTML test runner.
    Karma is a test runner, which enables the developer to write unit tests simultaneously
    during the development phase. Once the build process is completed, tests will
    be executed using Karma. Protractor can be used to run end-to-end tests that assert
    the workflow of the application as an end-user experience.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Jasmine是一个测试框架，它方便编写测试来断言应用程序的行为，并使用HTML测试运行器在浏览器中执行测试。Karma是一个测试运行器，它使开发人员能够在开发阶段同时编写单元测试。一旦构建过程完成，将使用Karma执行测试。Protractor可以用于运行端到端测试，以断言应用程序的工作流程，就像最终用户的体验一样。
- en: 'The following command runs the tests in the application:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令在应用程序中运行测试：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The end-to-end test can be executed by running the command here, and it will
    run successfully only when the application is served by the command ng serve.
    This end-to-end test is run by Protractor:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端测试可以通过在此处运行命令来执行，并且只有在应用程序由命令ng serve提供服务时才能成功运行。这个端到端测试是由Protractor运行的：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: I am not going into detail on the content of each of files generated as there
    are chapters to explain in detail about them.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会详细介绍每个生成的文件的内容，因为有章节会详细解释它们。
- en: Updating Angular CLI
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新Angular CLI
- en: 'We can update the Angular CLI version in a global package and in your local
    project. To update the Angular CLI package globally, run the following command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在全局包和本地项目中更新Angular CLI版本。要全局更新Angular CLI包，请运行以下命令：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To update the CLI in your local project folder, run the command here:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地项目文件夹中更新CLI，请运行此命令：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: That was smooth and easy, wasn't it? Angular CLI makes the life of the developer
    easier by generating the boilerplate code for various artifacts of an Angular
    application. You started learning about the powerful tool Angular CLI and how
    it helps you to kick-start your application with the boilerplate code. Then, you
    learned to generate components, directives, pipes, routes, and services using
    the Angular command line interface. Finally, you also learned about building an
    Angular application using the Angular CLI. In the next chapter, we will discuss
    about working with Angular components.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 那很顺利和简单，不是吗？Angular CLI通过为Angular应用程序的各种构件生成样板代码，使开发人员的生活更加轻松。您开始学习强大的工具Angular
    CLI以及它如何帮助您使用样板代码启动应用程序。然后，您学会了使用Angular命令行界面生成组件、指令、管道、路由和服务。最后，您还了解了如何使用Angular
    CLI构建Angular应用程序。在下一章中，我们将讨论如何使用Angular组件。
