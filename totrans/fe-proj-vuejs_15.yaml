- en: Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 1\. Starting Your First Vue Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1.01: Building a Dynamic Shopping List App Using Vue.js'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this activity, refer to [https://packt.live/35Tkzau](https://packt.live/35Tkzau).
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Vue project using the Vue CLI by running the `vue create new-activity-app`
    command. Manually select the features via the command prompts for `dart-sass`,
    `babel`, and `eslint`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scaffold an input field with a placeholder, `Press enter to add new item`,
    which has a `v-model` bound to a data object called input and a `ref` attribute
    with the value of the input. Bind the *Enter* key to the `addItem` method, which
    will be created in the next step, by using `@keyup.enter` and referencing the
    `addItem` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Introduce a button with a bound click event to `addItem` and include the corresponding
    method, `addItem()`, in the `methods` object. In the `addItem()` method, push
    the data prop `input` string into `shoppingList` and add a check to ensure the
    `input` prop exists. Optionally, add some styling to your buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output the shopping list items in the DOM. When you click the `add item` button,
    it should be added to `shoppingList` and be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot displays the shopping list:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.44: The shopping list should be displayed based on user input'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_01_44.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.44: The shopping list should be displayed based on user input'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To match the last requirement to remove items from the list, create a new method
    called `deleteItem`, and allow one argument to be passed in, called `i`. If there
    is an argument passed into the method, filter out that array item and update the
    `shoppingList` prop; otherwise replace the data prop with an empty array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `Delete all` button element and bind it to the `deleteItem` method
    using the click event, `@click`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `remove` button in the list loop, which will delete individual shopping
    list items by passing in the `v-for` prop `i`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Figure 1.45* displays the final output with all the details for the shopping
    list before adding the items:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.45: Final output'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_01_45.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.45: Final output'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot displays the output after adding items to the shopping list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.46: Final output with items added to the shopping list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_01_46.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.46: Final output with items added to the shopping list'
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you tested your knowledge of Vue by using all the basic functions
    of an **SFC**, such as expressions, loops, two-way binding, and event handling.
    You built a shopping list application that could let users add and delete individual
    list items or clear the total list in one click using Vue methods.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Working with Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 2.01: Creating a Blog List Using the Contentful API'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Perform the following steps to complete the activity.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this activity, refer to [https://packt.live/33ao1f5](https://packt.live/33ao1f5).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Vue project using the Vue CLI `vue create activity` command and
    select the following presets: Babel, SCSS pre-processor (you can choose either
    of the pre-processor), and the prettier formatter.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `contentful` dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `App.vue`, remove the default content and import `contentful` into the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `async` methods to `getPeople` and `getBlogPosts` on the created life cycle,
    and assign the response of the calls to the `authors` and `posts` data props respectively
    in the template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Loop over articles using the `posts` object, and output `publishDate`, `title`,
    `description`, and `image`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add some `scss` styling to `articles-list`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use computed props to output the author''s information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot displays the author information along with a list
    of their blog posts:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.16: Expected outcome with Contentful blog posts'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_02_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.16: Expected outcome with Contentful blog posts'
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you built a blog that lists articles from an API source using
    the basic functions of a Vue SFC, using `async` methods to fetch remote data from
    an API, and using computed properties to organize deep nested object structures.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Vue CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 3.01: Building a Vue Application Using the Vue-UI and the Vuetify
    Component Library'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Perform the following steps to complete the activity.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this activity, refer to [https://packt.live/35WaCJG](https://packt.live/35WaCJG).
  prefs: []
  type: TYPE_NORMAL
- en: Open a command line, and run `vue create activity-app`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose the last selection, `Manually select features`, by pressing the *Down
    arrow key* once and pressing *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Choose `Babel`, `CSS Pre-processors`, and `Linter / Formatter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Choose `Sass/SCSS (with dart-sass)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will choose `Eslint+ Prettier` to format the code as we proceed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will then choose the options `Lint on save` and `Lint and fix on commit`
    to pick additional lint features and save them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To place the configurations in the dedicated files, we will choose the `In
    dedicated config files` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Skip saving by pressing *Enter*. `npm` packages will automatically be installed.
    You should see the following output in your terminal:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the packages are installed, run the `yarn serve` command. Next, go to
    your browser and navigate to `http://localhost:8080`. You should see the output
    as follows:![Figure 3.43: The default Vue project screen'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_43.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.43: The default Vue project screen'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Stop the `serve` task, and run `vue ui` in the command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Vue-UI, go to the project selection screen (found at `http://localhost:8000/project/select`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the `Import` button and navigate to the folder your newly created
    Vue project is stored in. The following screenshot displays what your screen should
    look like:![Figure 3.44: The Vue-UI project manager'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_44.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.44: The Vue-UI project manager'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the big green `Import this folder` button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `Projects` dashboard, navigate to the `Plugins` tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the `+ Add plugin` button. Your screen should look like the following screenshot:![Figure
    3.45: The Vue-UI plugins manager, where you can add, remove,'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: and modify Vue plugins
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_03_45.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.45: The Vue-UI plugins manager, where you can add, remove, and modify
    Vue plugins'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Search for `vuetify` and install `vue-cli-plugin-vuetify`, then choose the
    default configuration settings, as shown in *Figure 3.46*:![Figure 3.46: The App.vue
    default configuration when the Vuetify CLI is installed'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_46.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.46: The App.vue default configuration when the Vuetify CLI is installed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Navigate to the `Tasks` page and click on `Start Tasks`. When the app initializes,
    click on the `Open App` button. On the localhost URL, you should see a Vuetify
    styled page as follows:![Figure 3.47: What you see in your browser when the Vuetify
    CLI plugin is installed'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_47.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.47: What you see in your browser when the Vuetify CLI plugin is installed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the `Select a layout` hyperlink in your Vuetify page layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the code link for the `Baseline` theme (or any other theme that interests
    you) from the options shown in the following screenshot:![Figure 3.48: The Vuetify
    website has multiple premade layouts available'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_48.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.48: The Vuetify website has multiple premade layouts available'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Copy the contents of the `baseline.vue` file from the Vuetify repo and replace
    your `App.vue` file content with this content. Your `localhost:8080` should reload
    with the new content you copied in and the browser should appear as follows:![Figure
    3.49: The final outcome for the template as seen from your browser'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_49.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.49: The final outcome for the template as seen from your browser'
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this activity, you saw how to prepare a Vue.js project using the
    Vue-UI, selecting and organizing valuable presets used in the production of enterprise
    Vue applications. You installed and utilized the `Vuetify` framework utilizing
    Vuetify components to create a layout that you could then preview inside your
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Nesting Components (Modularity)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 4.01: A Local Message View with Reusable Components'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: Perform the following steps to complete the activity.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this activity, refer to [https://packt.live/36ZxyH8](https://packt.live/36ZxyH8).
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need a way to capture messages from the user:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `MessageEditor` component that displays a `textarea`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Adding a reactive instance property can be done using the `data` component method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On `change` of `textarea`, we will store the state in a `message` reactive
    instance variable that we have set to null in the `data` component method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A `Send` operation should result in the latest content of the `textarea` being
    emitted as the payload of a `send` event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To display `MessageEditor`, we need to import it, register it in `components`,
    and reference it in the `template` section of `src/App.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To display messages, we will listen to `send` events using `@send` and add
    each payload to a new `messages` array reactive instance variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`MessageFeed` supports being passed through a `messages` array as a `prop`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will use `v-for` to iterate through the `messages` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To display the messages that we are storing, we will render `MessageFeed` in
    `App`, binding the `messages` app instance variable as the `messages` prop of
    `MessageFeed`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `MessageEditor`, we will refactor the `send` button click `handler` so that
    we also set `this.message` to `''''` when it''s clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The expected output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.34: Message app with Hello World! and Hello JavaScript! sent'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_04_34.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.34: Message app with Hello World! and Hello JavaScript! sent'
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have learned how to use components, props, events, and refs to
    render a chat interface.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Global Component Composition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 5.01: Building a Vue.js Application with Plugins and Reusable Components'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this activity, refer to [https://packt.live/35UlWpj](https://packt.live/35UlWpj).
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `axios` into the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To inject `axios` as a property on `this` component instances, create a `src/plugins/axios.js`
    plugin file that, on `install`, will mean component instances have an `axios`
    property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the plugin to work, import and register it in `src/main.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also want to inject our API''s `baseUrl` into all our components. We will
    create a plugin inline of the `src/main.js` file to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Those familiar with `axios` know we could have injected this URL as the `axios`
    `baseURL`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we need to fetch all `todos` from our `src/App.vue`. A good place to do
    this is inside the `mounted` life cycle method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To display the `todo` list, we will create a `TodoList` functional component
    in `src/components/TodoList.vue`. This will take a `todos` prop, loop through
    the items, and defer rendering of our `todo` under a `todo` scoped slot that binds
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now use the `TodoList` component to render out the `todos` prop we have
    already fetched in `src/App.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will generate the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.23: Todos loading and titles displaying'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_05_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 5.23: Todos loading and titles displaying'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The link to this dataset, which has been exposed as a JSON API, can be found
    at [https://jsonplaceholder.typicode.com/](https://jsonplaceholder.typicode.com/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s create a `TodoEntry` component where we will implement the majority
    of our todo-specific logic. A good practice for components is to have the props
    be very specific to the component''s role. In this case, the properties of the
    `todo` object we will tackle are `id`, `title`, and `completed`, so those should
    be the props that our `TodoEntry` component receives. We will not make `TodoEntry`
    a functional component since we will need a component instance to create HTTP
    requests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update `src/App.vue` so that it consumes `TodoEntry` as follows (make sure
    to bind `id`, `title`, and `completed`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.24: TodoEntry rendering data that has been fetched from the API'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_05_24.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 5.24: TodoEntry rendering data that has been fetched from the API'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we need to add the ability to toggle the `src/components/TodoEntry.vue`.
    We will listen to the `input` change event; on change, we will read the new value
    and send a `PATCH` request to `/todos/{todoId}` with an object containing `completed`
    set to the new value. We will also emit a `completedChange` event in Vue.js so
    that the `App` component can update the data that''s in-memory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `App.vue`, we need to update the relevant `todo` when `completeChange` is
    triggered. Since `completeChange` does not include the ID of our `todo`, we will
    need to read that from the context when we set the `handleCompleteChange` function
    so that it listens to `completeChange`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At this stage, we should see the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.25: Our to-do app using JSON placeholder data'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_05_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 5.25: Our to-do app using JSON placeholder data'
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have learned how to use plugins and reusable components to build
    a `todo` app that consumes `JSONPlaceholder` data.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 6.01: Creating a Message SPA with Dynamic, Nested Routing, and Layouts'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this activity, refer to [https://packt.live/2ISxml7](https://packt.live/2ISxml7).
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `MessageEditor.vue` file in the `src/views/` folder as the main
    component to interact with the user when writing a message. We use `textarea`
    as a message input field and attach the `listener` method `onChange` to the `DOM`
    event change to capture any input change regarding the message typed by the user.
    Also, we add `ref` to keep a pointer record to the rendered HTML `textarea` element
    for modifying our saved messages at a later stage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Besides this, we also attach another `listener` method, `onSendClick`, to the
    `click` event on the `Submit button` to capture the user's confirmation for sending
    the message. The actual logic implementation of both `onChange` and `onSendClick`
    is shown in *Step 3*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `<template>` section should look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And in `script`, in addition to the previous code, we will also receive a `list`
    of messages to update with the new message after submitting, and emit the updated
    list back to the parent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to define a parent route as a default route with the `path` of `/`
    and `name` of `messages` in the routes array in `./src/router/index.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then add a new route as a nested route called `editor` under the `children`
    property of this route configuration:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We create a new view component called `MessageList.vue` with `v-for` to render
    the list of messages into the `router-link` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And, similarly to *Step 2*, register the `MessageList.vue` component with the
    `children` routes array of the `messages` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now our `messages` view needs a UI. We define the `Messages.vue` view with
    the use of `router-link` to allow navigation between `editor` and `list` and a
    `router-view` component for rendering the nested view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And, of course, we need to receive a `list` of messages from `props`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since we don''t have a global state or proper database, we need to mock a global
    list of messages in `./src/router/index.js`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then pass it as default `props` for the `messages` route, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In order to catch whether the user is leaving the current editor view, we will
    add a Hook on the `beforeRouteLeave` in-component navigation guard, which will
    allow us to display a warning and abort or continue per the user''s decision.
    This is done within `MessageEditor.vue` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Creating `messageLayout.vue` is simple, with a header text, the `content` from
    `props`, and a `Back button`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `goBack` logic should be simple: if there is a previous route saved, let''s
    go back one step in the navigation stack with `this.$routes.go(-1)`. Otherwise,
    we will just push the `messages` navigation route to the stack with `this.$router.push({
    name: ''message''})`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: But then we still need to pass the previous route, `this.$route.params.from`,
    from the tracking. It should be done at the route registration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We add the `message` route configuration inside `routes`, and we will use the
    `beforeEnter` component guard to save and pass the `from` previous navigation
    route to the `params` of the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also, since it is a dynamic route with the `message/:id` pattern, we need to
    retrieve the content of the message and map that content to the related prop accordingly:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, to code-split the UI layouts from `Message.vue` and `Messages.vue`,
    in the `./src/layouts` folder, we create both a `default.vue` layout and `messageLayout.vue`
    layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As we learned in this chapter, in `App.vue`, we will wrap `router-view` with
    a component that renders according to a layout variable. And, certainly, `router-view`
    needs to have a synchronous `layout` property to dynamically change the layout
    according to the current view:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `default.vue`, we will simply just have the header text for the `messages`
    section and a `slot`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `messageLayout.vue`, we will extract the header text and the button logic
    from `Message.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And the final step is to make sure an `update:layout` event will be triggered
    to update the view layout upon component creation for both `Message.vue` and `Messages.vue`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Messages.vue`, this will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To ensure you''ve completed the steps correctly, you will need to visit each
    route and ensure the content renders as shown in the corresponding figure. First,
    ensure that the `/list` view renders a message feed as shown in *Figure 6.47*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.47: The /list view in the Messages app'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_06_47.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.47: The /list view in the Messages app'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, ensure that the `/editor` view allows a user to send a new message, as
    shown in *Figure 6.48*:![Figure 6.48: The /editor view in the Messages app'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_06_48.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.48: The /editor view in the Messages app'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, ensure the `/message/:id` dynamic route is working by going to the `/message/0`
    route. You should see message content similar to that shown in *Figure 6.49*:![Figure
    6.49: The /message/0 view in the Message app'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_06_49.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.49: The /message/0 view in the Message app'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Ensure that when the user is composing a message, if they try to navigate away
    without having a saved message, an alert is triggered, as shown in *Figure 6.50*:![Figure
    6.50: The /editor view when the user tries to navigate away with an unsaved message'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_06_50.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.50: The /editor view when the user tries to navigate away with an
    unsaved message'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Our `messages` data is not saved upon refresh, as we don't have global state
    management. We can use `localStorage` to help to save the data while exploring
    the application.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, we put together several of the topics covered in this chapter,
    including setting up views, making use of templates and dynamic routes, and the
    use of Hooks to prompt a confirmation alert before the user navigates away with
    unsaved content. These tools can be used for many common SPA use cases and will
    be helpful in your future projects.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Animations and Transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 7.01: Building a Messages App with Transition and GSAP'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this activity, visit [https://packt.live/399tZ3Y](https://packt.live/399tZ3Y).
  prefs: []
  type: TYPE_NORMAL
- en: We will reuse the code created in *Chapter 6*, *Routing* for the `Message` app
    so we have all the routing setup accordingly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `template` section of `src/views/MessageEditor.vue` will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, the `script` section of `src/views/MessageEditor.vue` should contain
    logic for both clicking on and leaving the route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will need our `template` code for `MessageList.vue`. The code will
    be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will need a `script` section in our `MessageList.vue` file. To add
    the `script` section, the code will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll also create a `style` section in `MessageList.vue` and define the `.flip-move`
    class with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Message.vue` should contain the rendered content inside a `p` element. We''ll
    also define the `content` prop and emit an update signal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure your `src/router/index.js` file is the same as the one created in *Activity
    6.01*, *Creating a Message SPA with Dynamic, Nested Routing, and Layouts* in *Chapter
    6*, *Routing*, which can be found at [https://packt.live/2ISxml7](https://packt.live/2ISxml7):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now wrap `router-view` in the `<template>` section of `App.vue` with
    a `transition` component that has two attributes, `name="fade"` and `mode="out-in"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `src/views/Messages.vue`, we will wrap `router-view` with a `transition`
    component. This time, we will use a custom `enter-active-class` transition class
    attribute in addition to the `fade` name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `zoom-in` and `fade-enter` animation effects in the `style` section
    of `src/views/Messages.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `transition-group` as the wrapper for the list of message links in `src/views/MessageList.vue`,
    with JavaScript hooks for programmatic animation. But we have to specify that
    transition on the initial render of the page, as the list is supposed to animate
    when appearing. We will add the `appear` attribute and bind `enter` to `appear`,
    as well as add the `move-class` flip (an animation to be created later in the
    `style` section):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add GSAP as a dependency and implement the bounce-in effect on the `appear`
    transition event handler (hook) in `src/views/MessageList.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to create the `flip-move` class that we defined in our HTML.
    We''ll do that by adding a `style` section with our new `flip-move` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the `yarn serve` command and you should see the following
    in your browser at `localhost:8080`:![Figure 7.19: Fade out when navigating from
    message list view to editor view'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_07_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 7.19: Fade out when navigating from message list view to editor view'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now see a fade out when navigating from the message list view to
    the editor view, as shown in *Figure 7.19*, and also a fade out when going from
    the editor view to the list view, as shown in *Figure 7.20*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.20: Fade out when navigating from editor view to message list view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_07_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.20: Fade out when navigating from editor view to message list view'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the messages are in the feed, you should see a bouncing effect during
    the flipping motion, as shown in *Figure 7.21*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.21: Bouncing effect when displaying the message feed in the message
    list view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_07_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.21: Bouncing effect when displaying the message feed in the message
    list view'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, when clicking on a specific message in the list, it should render
    the content as shown in *Figure 7.22*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.22: Single message view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_07_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.22: Single message view'
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, we put together several different animations and combined
    them with routing to create custom page transitions. We used several different
    animation types to demonstrate the many possibilities animations can provide.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. The State of Vue.js State Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 8.01: Adding Email and Phone Number to a Profile Card Generator'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to compete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this activity, refer to [https://packt.live/3m1swQE](https://packt.live/3m1swQE).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can start by adding a new `email` input field and label to `src/components/AppProfileForm`
    for the `Email` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can then add a new `phone` input field (of type `tel`) and a label to `AppProfileForm`
    for the `Phone Number` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The new fields look as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.35: Application with new Email and Phone Number fields'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_08_35.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.35: Application with new Email and Phone Number fields'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can then add the `email` and `phone` fields to the initial state and mutations
    in `src/store.js` so that `organization` gets initialized, set during `profileUpdate`,
    and reset during `profileClear`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to track `email` in the local state of the `src/components/AppProfileForm.vue`
    component using `v-model` and initialize it in the `data()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to track `phone` in the local state of the `src/components/AppProfileForm.vue`
    component using `v-model` and initialize it in the `data()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the payload of the mutation to contain `email` and `phone`, we''ll need
    to add it to the `$store.commit(''profileUpdate'')` payload. We''ll also want
    to reset it on the form when a component triggers a `profileClear` mutation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For `email` to display, we need to render it in `src/components/AppProfileDisplay.vue`
    using a conditional paragraph (to hide the `Email` label when there is no email
    set):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For `phone` to display, we need to render it in `src/components/AppProfileDisplay.vue`
    using a conditional span (to hide the `Phone Number` label when there is no phone
    set):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The application should look as follows when the form is filled out and submitted:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.36: Application with Email and Phone Number fields'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_08_36.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.36: Application with Email and Phone Number fields'
  prefs: []
  type: TYPE_NORMAL
- en: We have now seen how to add new fields to a Vuex-managed application. Next,
    we will see how to decide whether to put something into global or local state.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Working with Vuex – State, Getters, Actions, and Mutations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 9.01: Creating a Simple Shopping Cart and Price Calculator'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this activity, refer to [https://packt.live/2KpvBvQ](https://packt.live/2KpvBvQ).
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Vue application with Vuex support via the CLI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the products and empty `cart` to the store located in `store/index.js`.
    Note that the product names and prices are arbitrary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new `Products` component (`components/Products.vue`) that iterates
    over each product and includes the name and price for each product. It will also
    include buttons to add or remove items from the cart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In order for products to be used without prepending `$store`, include `mapState`
    and define its use within the `computed` property of the `Products` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next include the methods for adding and removing items from the cart. This
    will simply call the mutations in the store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define your mutations to handle working with the cart in the `store/index.js`
    file. When adding a new item to the cart, you first need to see if it was previously
    added and if so, simply increment the quantity. When removing items from the cart,
    if the quantity hits 0, the item should be removed completely:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a `Cart` component (`components/Cart.vue`) that iterates over the cart
    and shows the quantity of each item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As with the previous component, add `mapState` and alias the cart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the final component, `Checkout` (`components/Checkout.vue`), and have
    it display a property named `cartTotal`. This will be defined via a getter that
    will be created in the store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Map the getter in the script block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a checkout button. It should only show up when there is a total and should
    run a method named `checkout`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define `checkout` to simply alert the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Back in the Vuex store, define the getter for `cartTotal`. It needs to iterate
    over the cart and determine the sum by multiplying price by quantity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use all three components in the main `App.vue` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start your application as you have done before (`npm run serve`) and open the
    URL in your browser. You should get the following output initially, showing an
    empty cart:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.9: Initial display of the cart'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_09_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.9: Initial display of the cart'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you add and remove items, you''ll see the cart and totals update in real
    time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10: The cart with items of multiple quantities added'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_09_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.10: The cart with items of multiple quantities added'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding figure displays the products and their prices, along with a cart
    containing multiple quantities of different products and the final checkout amount.
    You've now got a fully built, albeit simple, e-commerce cart product driven by
    Vue and Vuex.
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Working with Vuex – Fetching Remote Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 10.01: Using Axios and Vuex with Authentication'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Perform the following steps to complete the activity.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this activity, refer to [https://packt.live/3kVox6M](https://packt.live/3kVox6M).
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the CLI to scaffold a new application and be sure to enable both Vuex and
    Vue Router. When done, then use `npm` to install `Axios`. Now that you have got
    the app scaffolded, let''s begin building it. First, open `App.vue`, the core
    component in the application, and modify it so that the entire template is the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'By default, the CLI will scaffold two `views`: `Home` and `About`. We are going
    to change `About` to be the view that displays cats, but for now, open `Home.vue`
    and add the login form. Use a button to run a method to perform the (fake) login:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `data` for the login form and a `handler` for the login button. This
    will then fire off a dispatch to the store. On a successful login (and it will
    always be successful), `$router.replace` is used to navigate to the next page.
    This is done instead of `$router.go` so that the user cannot hit their back button
    to return to the login form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let''s build the `Cats` component in `views/Cats.vue`. This will simply
    iterate over the cats from the store and dispatch a call to the store to load
    them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now build the Vuex store by editing `store/index.js`. Begin by importing Vuex
    and defining constants for the two endpoints. Remember that we are *faking* a
    real API here, so the endpoints just return static JSON:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The store needs to keep two things: the authentication `token` and `cats`.
    Set up the `state` and define `mutations` for them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now add the `actions`. The login action stores the result as a `token` and
    the `cats` action passes the `token` as an `authorization` header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final piece of the application is the router, and there is a pretty interesting
    aspect to it. Think about the `cats` page. What happens if a user goes to that
    page first? With no token, the call to the endpoint will fail to return valid
    data. (Again, in a *real* server, that is.) Luckily, Vue Router provides a very
    simple way to handle this—route guards. Make use of `beforeEnter` to handle this
    call in the `cats` route. Edit your `router/index.js` file to look like the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the application with `npm run serve`, copy the URL to your browser, and
    you should get the following output initially:![Figure 10.8: Initial login screen'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_10_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.8: Initial login screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'After logging in, you will see the data displayed as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.9: Successfully displaying the data after login'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_10_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.9: Successfully displaying the data after login'
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you have seen what an authentication system would look like
    when using Vuex and `Axios`. While the backend was fake, the code used here could
    easily be connected to a real authentication system.
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Working with Vuex – Organizing Larger Stores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 11.01: Simplifying a Vuex Store'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Perform the following steps to complete the activity.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the initial code file for this activity, visit [https://packt.live/3kaqBHH](https://packt.live/3kaqBHH).
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by creating a new file, `src/store/state.js`, that will store the state
    values for everything but the `cat` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make a new file, `src/store/getters.js`, and move the getter for `desiredPet`
    into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, make `src/store/mutations.js` and copy over the `mutations` not related
    to the cat name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the store (`src/store/index.js`) file to import the new files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the existing `state`, `mutations`, and `getters` block to use the included values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now move the cat-related values into the `modules` block of the store. Create
    a `state`, `getters`, and `mutations` block and move all the values over, updating
    them to refer to the state values, not `state.cat`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the application and confirm that the `App.vue` component continues to work
    as it did before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.4: Final output of the activity'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_11_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 11.4: Final output of the activity'
  prefs: []
  type: TYPE_NORMAL
- en: You now have a Vuex store modified to be more approachable, easier to edit,
    and simpler to debug in the future. To access the solution for this activity,
    visit [https://packt.live/3l4Lg0x](https://packt.live/3l4Lg0x).
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Unit Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 12.01: Adding a Simple Search by Title Page with Tests'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this activity, refer to [https://packt.live/2UVF28c](https://packt.live/2UVF28c).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the search form with an input and a button in a new file in `src/components/SearchForm.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll now get the form to display by importing, registering, and rendering
    it in `src/App.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''re now ready to add a snapshot test for the search form. In `__tests__/SearchForm.test.js`,
    we should add `SearchForm should match expected HTML`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We want to track the contents of the search form input using `v-model` to two-way
    bind the `searchTerm` instance variable and the contents of the input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the search form is submitted, we'll need to update the URL with the right
    parameter. This can be done with `this.$router.push()`. We will store the search
    in a `q` query parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will want to reflect the state of the `q` query parameter in the search
    form input. Read `q` from `this.$route.query` and set it as the initial value
    for the `searchTerm` data field in the `SearchForm` component state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll want to filter the posts passed to `PostList` on the home page.
    We''ll use `this.$route.query.q` in a computed property that filters posts by
    their title. This new computed property will then be used instead of `posts` in
    `src/App.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we should add a test that changes the search query parameter and check
    that the app shows the right result. To do this, we can import `src/App.vue`,
    `src/store.js`, and `src/router.js`, and render the app with the store and the
    router. We can then update the search field contents by using the fact that the
    placeholder for the field is `Search`. Finally, we can submit the form by clicking
    the element where `test id` is `Search` (which is the `search` button):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are now in a state where we have passing tests. The following screenshot
    shows this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.29: Passing tests for routing'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_12_29.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 12.29: Passing tests for routing'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have also got an application that is able to filter by search term, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.30: Searching for "react" filters posts relevant to that search
    term'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_12_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.30: Searching for "react" filters posts relevant to that search term'
  prefs: []
  type: TYPE_NORMAL
- en: We've seen how to create and test a Vue.js application with multiple pages,
    Vuex, and a slew of components.
  prefs: []
  type: TYPE_NORMAL
- en: 13\. End-to-End Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 13.01: Adding the Ability to Set a User''s Email and Tests'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this activity, refer to [https://packt.live/2IZP4To](https://packt.live/2IZP4To).
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to keep track of the email, we''ll set it as a piece of reactive state
    in `data()` and add an email type input to the page, which will be two-way bound
    to `email` using `v-model`. We also add a label and the corresponding markup.
    Note that we''ll have a `data-test-id` attribute on the email input set to `"email-input"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll now add a `beforeEach` hook to set up the Cypress mock server and stub
    out the `GET` comments (list) request. The comments list request should be aliased
    as `getComments`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll add our first test that checks whether typing into the email input works
    correctly. We''ll go to the app, type an email, and check that what we typed is
    now the input value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When run using the Cypress UI, we get the following passing test:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.24: Cypress running "enter-email" tests, with the email input test'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_13_24.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 13.24: Cypress running "enter-email" tests, with the email input test'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `email` property existing is a pre-requisite to adding comments, so we''ll
    disable the `add new comment` button while `email` is empty (`!email`). We''ll
    bind to the `disabled` attribute and toggle some classes based on whether or not
    the `email` field is populated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With this new `disable add new comment button while email is empty` functionality,
    we should add a new E2E test. We''ll load up the page and on initial load, we''ll
    check that the `email` input is empty and that the `new comment` button is disabled.
    We''ll then type an email into the email input field and check that the `new comment`
    button is now *not* disabled, which means it is enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output from the test run after the updates is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.25: Cypress running "enter-email" tests, with the disabled'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: add comment button test
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_13_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 13.25: Cypress running "enter-email" tests, with the disabled add comment
    button test'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that we''ve got a way to capture the email, we should pass it to the backend
    API when making the POST comments call (that is, when submitting a new comment).
    In order to do this, we should modify the spot in `methods.submitNewComment` where
    `email` is hardcoded as `evan@vuejs.org`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we''re using the email that''s been input by the user, we should write
    an E2E test to check that it''s being sent. We''ll stub out the `POST` request,
    alias it to `newComment`, and send back an arbitrary value. We can then visit
    the page, fill out the email input, open the comment editor, fill that out, and
    submit it. We''ll then wait on the `newComment` request and assert on the request
    body that the body and email are as they were when we completed them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When run using the Cypress UI, we get the following test run output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.26: Cypress running "enter-email" tests, with the email input test'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_13_26.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 13.26: Cypress running "enter-email" tests, with the email input test'
  prefs: []
  type: TYPE_NORMAL
- en: We've now seen how to effectively build and test (with an E2E test) a Vue.js
    application with Cypress.
  prefs: []
  type: TYPE_NORMAL
- en: 14\. Deploying Your Code to the Web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 14.01: Adding CI/CD with GitLab to a Book Search App and Deploying
    to Amazon S3 and CloudFront'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this activity, refer to [https://packt.live/36ZecBT](https://packt.live/36ZecBT).
  prefs: []
  type: TYPE_NORMAL
- en: To start, we'll want to run a production build locally. We can use the regular
    command used to build all Vue CLI projects for production. We'll also want to
    check that the relevant assets (JavaScript, CSS, and HTML) are generated correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The production build command is `npm run build`, as seen in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 14.65: The npm run build output for the initial book-search Vue CLI
    project'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_14_65.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.65: The npm run build output for the initial book-search Vue CLI
    project'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `npm run build` command builds a `dist` directory with contents as in the
    following screenshot. It contains `CSS`, `JavaScript`, and `HTML` assets, as well
    as `sourcemaps` (`.js.map` files) and `favicon`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 14.66: Sample contents of the dist folder (generated using the tree
    command)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: after a Vue CLI production build run
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_14_66.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.66: Sample contents of the dist folder (generated using the tree
    command) after a Vue CLI production build run'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In order to run GitLab CI/CD, we will need a `.gitlab-ci.yml` file. We will
    add a job to`.gitlab-ci.yml` in which we run an install of the packages followed
    by the production build in a Node.js LTS Docker container, at the `build` stage.
    We''ll also make sure to cache the output of the production build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once we use `git add .gitlab-ci.yml` and commit and push the changes, we should
    see the following GitLab CI/CD pipeline run, which includes the `build` job in
    the running state:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 14.67: The GitLab CI/CD pipeline with the build job running'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_14_67.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.67: The GitLab CI/CD pipeline with the build job running'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following screenshot displays the GitLab CI/CD pipeline with the `build`
    job completed successfully:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 14.68: The GitLab CI/CD pipeline with the build job passed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_14_68.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.68: The GitLab CI/CD pipeline with the build job passed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we will want to add a code quality job to the `test` stage on GitLab
    CI/CD (by updating `.gitlab-ci.yml`). We''ll call the job `lint` and it will run
    an install of the dependencies as well as linting through the Vue CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once we use `git add .gitlab-ci.yml` and commit and push the changes, we should
    see the following GitLab CI/CD pipeline run, which includes the `lint` job in
    the running state:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 14.69: The GitLab CI/CD pipeline with the lint job running'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_14_69.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.69: The GitLab CI/CD pipeline with the lint job running'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following screenshot displays the GitLab CI/CD pipeline with the `lint`
    job completed successfully:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 14.70: The GitLab CI/CD pipeline with the lint job passed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_14_70.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.70: The GitLab CI/CD pipeline with the lint job passed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In order to deploy our application, we'll need to create a `vue-workshop-book-search`
    S3 bucket with public access enabled using the S3 console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The S3 bucket creation page should look as shown in the following screenshots:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 14.71: The S3 bucket creation page with vue-workshop-book-search'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: entered as the bucket name
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_14_71.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.71: The S3 bucket creation page with vue-workshop-book-search entered
    as the bucket name'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Figure 14.72* displays the S3 bucket creation page with the public access
    and disclaimer information:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 14.72: The S3 bucket creation page with public access enabled'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: and the relevant disclaimer accepted
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_14_72.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.72: The S3 bucket creation page with public access enabled and the
    relevant disclaimer accepted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To access the S3 bucket contents over the web, we'll also need to configure
    it for web hosting. We can configure the web hosting property through the S3 console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It should be configured as follows, with the index and error page set to `index.html`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 14.73: The S3 bucket properties page with web hosting enabled and
    configured with the index and error page set to index.html'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_14_73.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.73: The S3 bucket properties page with web hosting enabled and configured
    with the index and error page set to index.html'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For GitLab CI/CD to be able to create and update files on S3, we''ll need to
    add the relevant AWS secrets to our GitLab repo CI/CD settings. The secrets are
    found in the AWS management console at the `Username` dropdown | `My Security
    Credentials` | `Access keys` (access key ID and secret access key) | `Create New
    Access Key` (or pick a key to reuse). The following screenshot displays the `CI/CD
    Settings` page:![Figure 14.74: The GitLab CI/CD Settings page with the Variables
    section open'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_14_74.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.74: The GitLab CI/CD Settings page with the Variables section open'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once the `Expand` button is clicked for the `Variables` section, we add the
    relevant AWS environment variables: `AWS_ACCESS_KEY_ID`, `AWS_DEFAULT_REGION`,
    and `AWS_SECRET_ACCESS_KEY`. The `Variables` section will then look as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 14.75: The GitLab CI/CD Settings page with the required AWS environment'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: variables added (with values masked)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_14_75.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.75: The GitLab CI/CD Settings page with the required AWS environment
    variables added (with values masked)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we will want to add a `deploy` job to the `deploy` stage on GitLab CI/CD
    (by updating `.gitlab-ci.yml`). We will call the job `deploy`; it will need to
    download the `awscli` `pip` package (Python package manager), which means the
    Docker image that makes the most sense is `python:latest`. The `deploy` job will
    load the built production build from cache, install `awscli` with `pip`, and run
    `aws s3 sync <build_directory> s3://<s3-bucket-name> --acl=public-read`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once we use `git add .gitlab-ci.yml` and commit and push the changes, we should
    see the following GitLab CI/CD pipeline run, which includes the `deploy` job in
    the running state:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 14.76: The GitLab CI/CD pipeline with the deploy job running'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_14_76.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.76: The GitLab CI/CD pipeline with the deploy job running'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Figure 14.77* displays the GitLab CI/CD pipeline with the `deploy` job completed successfully:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 14.77: The GitLab CI/CD pipeline with the deploy job passed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_14_77.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.77: The GitLab CI/CD pipeline with the deploy job passed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once the pipeline completes, our application should be available through the
    S3 web endpoint, as in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 14.78: Book search accessed through the S3 web endpoint URL'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_14_78.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.78: Book search accessed through the S3 web endpoint URL'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we''ll create a CloudFront distribution that acts as a CDN for the
    S3 web endpoint. We''ll want to set `origin` to the origin of our S3 bucket''s
    web endpoint and also make sure that we''ve enabled `Redirect HTTP to HTTPS`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.79: The CloudFront Distribution creation page with the origin'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: domain set to the S3 bucket
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_14_79.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.79: The CloudFront Distribution creation page with the origin domain
    set to the S3 bucket'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the CloudFront distribution is deployed, our application should be accessible
    through the CloudFront distribution''s domain, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.80: Book search accessed through the CloudFront domain,'
  prefs: []
  type: TYPE_NORMAL
- en: displaying results for a harry potter query
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_14_80.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.80: Book search accessed through the CloudFront domain, displaying
    results for a harry potter query'
  prefs: []
  type: TYPE_NORMAL
- en: With that, we've used GitLab CI/CD to add CI/CD to an existing Vue CLI project.
    We then deployed it to S3 using CloudFront as our CDN.
  prefs: []
  type: TYPE_NORMAL
