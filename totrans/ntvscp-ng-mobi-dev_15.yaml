- en: Deploying to the Apple App Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will focus on how to deploy our app to the Apple App Store.
    There are several important steps we will want to follow, so pay close attention
    to all the details presented here.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you need to work with Signing Certificates to build a release target
    of our app, generate app icons and splash screens, or work within XCode to archive
    our app for upload to the App Store, we will cover all these topics in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: TJ VanToll, a NativeScript expert and developer advocate for Progress, wrote
    an excellent article detailing deployment steps titled *8 Steps to Publish Your
    NativeScript App to the App Stores* ([https://www.nativescript.org/blog/steps-to-publish-your-nativescript-app-to-the-app-stores](https://www.nativescript.org/blog/steps-to-publish-your-nativescript-app-to-the-app-stores)).
    We will take excerpts from that article and expand on sections wherever possible
    here in this chapter and the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: There's no point in lying to you—releasing an iOS app to the iOS App Store is
    one of the most painful processes you'll go through in your software development
    career. So, in case you get stuck or confused in these steps, just know that it's
    not just you—everyone gets frustrated when releasing iOS apps the first time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: How to create an App ID and production certificate to sign your app release
    target with
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to configure a NativeScript app with the appropriate metadata needed for
    a release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to handle app icons and splash screens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading your build to iTunes Connect using the NativeScript CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing for App Store distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To deploy iOS apps to the iOS App Store, you absolutely must have an active
    Apple Developer account. It costs $99 USD per year to be a part of the program,
    and you can sign up at [developer.apple.com/register](https://developer.apple.com/register).
  prefs: []
  type: TYPE_NORMAL
- en: App ID, certificates, and profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you create an Apple Developer account, you''ll need to create an App ID,
    Production Certificate, and a Distribution Provisioning Profile on the Apple Developer
    portal. This is the most tedious part of the entire process, as it takes some
    time to learn what each of these various files do and how to use them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For our app, we will begin by creating the App ID with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we create this App ID, we can now create a Production certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Continue. Then, the next screen will provide instructions on how to
    sign your production certificate, which we will walk through next. First, open
    `/Applications/Utilities/Keychain Access.app` and then go to the top-left menu
    and select Certificate Assistant | Request a Certificate from a Certificate Authority
    using a setup like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This will save a signing request file wherever you choose, which you will need
    in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, select that signing request file at this step in the portal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, it''s very important to download and then double-click
    the file that you need to install into your keychain as it specifies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When double-clicking the file to install into the keychain, it may prompt you
    to provide the keychain to install the file into; using the *login* keychain will
    work fine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You should now see something similar to the following screenshot in your keychain
    access app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can now quit keychain access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we want to create a Distribution Provisioning Profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, just ensure that you select the App ID that you created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, on the next screen, you should be able to select the Distribution certificate
    you created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, you will be able to give the profile a name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can download the profile and just place it alongside your `ios_distribution.cer`
    file; however, there is no need to open that provisioning profile file, as XCode
    will handle everything else.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the app metadata such as App ID and Display Name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: iOS and Android apps have a lot of information that you will need to configure
    before you deploy your apps to their respective stores. NativeScript provides
    intelligent defaults for many of these values, but there are a few that you'll
    want to review before you deploy.
  prefs: []
  type: TYPE_NORMAL
- en: App ID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The App ID configured in the Apple developer portal moments ago is a unique
    identifier for your app that uses something called reverse domain name notation.
    Our NativeScript app''s metadata must match. Our App ID for this app is `io.nstudio.nStudio`.
    The NativeScript CLI has a convention for setting the App ID during app creation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We did not use this option when we created our app; however, it's easy enough
    to change our App ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the app''s root `package.json` file and find the `nativescript` key. Ensure
    that the `id` attribute contains the value you''d like to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Display name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You app's display name is the name the user sees next to your icon on their
    screen. By default, NativeScript sets your app's display name based on the value
    you passed to `tns create`, which is oftentimes not exactly what you want the
    user to see. For example, running `tns create my-app` results in an app with a
    display name of `myapp`.
  prefs: []
  type: TYPE_NORMAL
- en: To change that value on iOS, first open your app's `app/App_Resources/iOS/Info.plist`
    file. The `Info.plist` file is iOS's main configuration file, and here you'll
    find a number of values you may want to tinker with before releasing your app.
    For display name, you'll want to alter the `CFBundleDisplayName` value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what this value looks like for `nStudio`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Although there's no real character limit to display names, both iOS and Android
    will truncate your display names after somewhere around 10–12 characters.
  prefs: []
  type: TYPE_NORMAL
- en: Create your app icons and splash screens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your app's icon is the first thing your users notice about your app. When you
    start a new NativeScript app, you will get a placeholder icon, which is fine for
    development; however, for production, you will need to replace the placeholder
    icon with the image you'll want to go to the stores with.
  prefs: []
  type: TYPE_NORMAL
- en: To get your production-ready app icon files in place, you will need to first
    create a 1024 x 1024 pixel `.png` image asset that represents your app.
  prefs: []
  type: TYPE_NORMAL
- en: To make your life difficult, both iOS and Android require you to provide a variety
    of icon images in a wide array of sizes. Don't worry though; once you have a 1024
    x 1024 image, there are a few sites that will generate images in the various dimensions
    that Android and iOS require. For the NativeScript development, I recommend that
    you use the Nathanael Anderson's NativeScript Image Builder, which is available
    at `images.nativescript.rocks`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will build our icon in Photoshop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can then export that as a `.png` and upload it to `images.nativescript.rocks`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When you click on Go, a zip file will be downloaded, and the contents will include
    your app icons and splash screens. You can copy these images into your `app/App_Resources`
    folder, respectively, for iOS (we will cover Android in the next chapter).
  prefs: []
  type: TYPE_NORMAL
- en: We now have our app icon and splash screens in place.
  prefs: []
  type: TYPE_NORMAL
- en: Build the app for release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since we have already covered webpack bundling issues in the preceding chapter,
    we are now ready to build the final releasable bundle with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `--teamId` will be different for you. It is the prefix on the
    App ID provided in the preceding command.
  prefs: []
  type: TYPE_NORMAL
- en: After this command finishes, you'll have the `.ipa` file you'll need in your
    `platforms/ios/build/device` folder. Make a note of the location of that file,
    as you'll need it in the final step of this guide.
  prefs: []
  type: TYPE_NORMAL
- en: Phew! Hopefully, you've made it to this point in one piece. You're now ready
    for the final step, iTunes Connect.
  prefs: []
  type: TYPE_NORMAL
- en: Upload to iTunes Connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing you''ll need to do is register your app. To do that, visit
    [https://itunesconnect.apple.com/](https://itunesconnect.apple.com/), click on
    My Apps, and, click on the + button (currently in the top-left corner of the screen),
    and then select New App. In the screen that follows, ensure that you select the
    correct Bundle ID, and the SKU can be any number you''d like to identify your
    app; we like to use the current date:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After providing this information, you'll be taken to your app's dashboard where
    we need to provide more metadata about our app. Most of this information is pretty
    straightforward, such as descriptions and pricing, but there are a few *fun* pieces
    we'll have to deal with, such as screenshots.
  prefs: []
  type: TYPE_NORMAL
- en: iTunes Connect now requires you to upload two sets of screenshots, one for the
    largest iPhone devices (5.5-inch displays), and another for the largest iPad devices
    (12.9-inch devices). Apple still gives you the ability to provide optimized screenshots
    for each and every iOS device dimension, but if you provide only 5.5-inch and
    12.9-inch screenshots, Apple will rescale your provided screenshots for smaller
    display devices automatically.
  prefs: []
  type: TYPE_NORMAL
- en: To get those screenshots we could run the app on a physical iPhone Plus and
    iPad Pro device, but we find it far easier to get these screenshots from iOS simulators.
  prefs: []
  type: TYPE_NORMAL
- en: With the correct simulated device running, we can use the simulator's *Cmd*
    + *S* keyboard shortcut to take a screenshot of the app, which will save the appropriate
    image to our desktop.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we're all set. We will use a service such as DaVinci ([https://www.davinciapps.com](https://www.davinciapps.com/))
    to polish our image files, but when we are ready, we'll drag our images into the
    App Preview and Screenshots area of iTunes Connect.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading your .ipa file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're almost there! Once all the information has been entered into iTunes Connect,
    the final step is to associate the built `.ipa` file with all the information
    we just typed out.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the NativeScript CLI to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that your .ipa file is in your app's `platforms/ios/build/device` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to publish your app to iTunes Connect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: That's it. One important note, though, for whatever crazy reason, there's a
    nontrivial delay between the time you upload your iOS app and the time that your
    app shows up in iTunes Connect. We saw that the delay can be as short as 30 seconds
    and as long as an hour. Once the build shows up there, we can go ahead and click
    on the big Submit for Review button, and cross our fingers.
  prefs: []
  type: TYPE_NORMAL
- en: Apple has a notoriously sporadic delay for reviewing the iOS apps that you submit.
    At the time of writing this book, the average time to review for the iOS App Store
    was around 2 days.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we highlighted the critical steps that must be taken to release
    an app to the Apple App Store, including signing certificates, app id, app icons,
    and splash screens. The process may seem heavily involved at first, but once you
    understand the various steps better, it becomes more clear.
  prefs: []
  type: TYPE_NORMAL
- en: We now have an app pending review in the store and are well on our way to making
    our app available for users around the world.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, let's finish this by deploying our app to the Google Play
    Store to broaden our audience.
  prefs: []
  type: TYPE_NORMAL
