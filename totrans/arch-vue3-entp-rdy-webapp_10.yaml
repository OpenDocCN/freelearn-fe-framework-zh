- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integration Testing in Vue.js 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about everything related to unit testing.
    We learned how to unit-test a Vue.js 3 component and the components and pages’
    methods. We also learned about unit testing tools such as Jest and Mocha and used
    them to effectively unit-test an enterprise project.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore everything related to integration testing.
    We will learn in depth how to perform an integration test on a Vue.js 3 component
    and pages. We will also learn about integration testing tools such as Vue Test
    Library ([https://github.com/testing-library/vue-testing-library](https://github.com/testing-library/vue-testing-library))
    and how to use them to test an enterprise project effectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following key topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to integration testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is integration testing?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importance of integration testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of integration testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices when creating integration tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript integration testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing a basic Vue app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started with this chapter, I recommend you read through [*Chapter 9*](B17237_09.xhtml#_idTextAnchor322),
    *Best Practices in Unit Testing*, where we explored the benefits, importance,
    and best practices in writing and executing effective unit testing strategies.
    We will rely heavily on the knowledge acquired from that chapter in this one to
    learn about Vue 3 enterprise integration testing.
  prefs: []
  type: TYPE_NORMAL
- en: All the code files for this chapter can be found at [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-10](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-10).
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to integration testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Engineers in a team develop applications in isolation, and after development
    and unit testing each unit during development, the next phase in the software
    testing phase is integration testing. This form of testing involves testing the
    modules/components when they are combined/integrated to make sure that they work
    according to the requirement.
  prefs: []
  type: TYPE_NORMAL
- en: It is a type of testing where the units of software modules are integrated logically
    and tested completely as a group.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will examine the definition of integration testing and explore
    how developers can create and manage integration test cases within their enterprise-ready
    Vue 3 application.
  prefs: []
  type: TYPE_NORMAL
- en: What is integration testing?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Integration testing is a type of testing in which the different units, modules,
    or components of the **software under test** (**SUT**) are combined and tested
    as a single entity. In addition, these modules or units are independent of the
    developers or team and can be coded by different programmers.
  prefs: []
  type: TYPE_NORMAL
- en: It is also known as component testing or **integration and** **testing** (**I&T**).
  prefs: []
  type: TYPE_NORMAL
- en: Integration testing is the first stage of combining individual modules to form
    components or combined entities, and it is aimed at testing the interfaces between
    the modules to expose any defects that may arise when these components are integrated
    and interact with each other.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will examine the importance and benefits of integration
    testing for agile and enterprise-level teams.
  prefs: []
  type: TYPE_NORMAL
- en: Importance of integration testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Integration testing is a critical phase of the software testing process. It
    is the process of testing the interactions and interfaces between different components
    or modules of a system. It is important for several reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It helps to ensure that different system components work together seamlessly
    and as expected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It helps to identify and resolve conflicts between different system components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It helps to identify and resolve bugs that may not have been uncovered during
    unit testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It helps to identify and resolve performance bottlenecks that may not have been
    uncovered during unit testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It helps ensure the system can handle the expected load and usage patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It helps ensure the system is secure and can protect sensitive data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It helps to ensure that the system can be integrated with other systems or external
    components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It helps to ensure that the system meets the requirements and specifications
    defined in the design phase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It helps to identify and resolve issues with data flow and data integrity between
    different system components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can help to identify and resolve issues with **user interfaces** (**UIs**)
    and user interactions between different system components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can help to identify and resolve issues with third-party APIs and services
    that the system may need to interact with
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can help ensure the system can handle different environments and configurations,
    such as different operating systems or different hardware configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can help ensure the system is compatible with other systems it may need to
    interact with, such as databases or external services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall, integration testing is an essential step in the software development
    process that helps to ensure the quality and reliability of the final product.
    It is important to conduct integration testing early in the development process
    so that any issues can be identified and resolved as soon as possible.
  prefs: []
  type: TYPE_NORMAL
- en: It’s also important to note that integration testing is not limited to testing
    between the different components of the system. It also includes testing the system
    as a whole with other external systems it will integrate with. It’s good practice
    to test the integration of the system with other systems before releasing it to
    production.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, let’s look at some of the benefits of integration testing.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of integration testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Integration testing is particularly important for enterprise software systems,
    as they are often complex, multi-faceted systems that need to integrate with other
    systems and handle large amounts of data and transactions. Some of the benefits
    of integration testing for enterprise software include the following.
  prefs: []
  type: TYPE_NORMAL
- en: Improved system reliability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By testing the interactions and interfaces between different components of the
    system, integration testing helps to ensure that the system is reliable and can
    handle the expected load and usage patterns. This can help to reduce downtime
    and improve the system’s overall performance.
  prefs: []
  type: TYPE_NORMAL
- en: Reduced risk of data loss
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Enterprise systems often handle large amounts of sensitive data, and integration
    testing can help ensure that data is properly protected and that data integrity
    is maintained between different system components.
  prefs: []
  type: TYPE_NORMAL
- en: Increased scalability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Integration testing can help to identify and resolve performance bottlenecks
    that may not have been uncovered during unit testing, making it easier to scale
    the system as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Improved security
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Integration testing can help to ensure that the system is secure and can protect
    sensitive data, reducing the risk of data breaches and other security incidents.
  prefs: []
  type: TYPE_NORMAL
- en: Better integration with other systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Testing a system’s integration with other systems before it is released to production
    can help to ensure that the system is compatible and able to communicate with
    other systems that it may need to interact with.
  prefs: []
  type: TYPE_NORMAL
- en: Better compliance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By conducting integration testing, you can ensure that the system meets the
    requirements and specifications defined in the design phase, which can help to
    ensure compliance with industry standards and regulations.
  prefs: []
  type: TYPE_NORMAL
- en: Better customer satisfaction and ROI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By ensuring that the system is reliable, secure, and easy to use, integration
    testing can help to improve customer satisfaction and increase system adoption.
    Ensuring that all the system components are working seamlessly and without bugs
    can help to reduce development costs, improve the system’s performance, and increase
    the overall **return on investment** (**ROI**) of the system.
  prefs: []
  type: TYPE_NORMAL
- en: Improved testing efficiency
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Integration testing can identify issues early in the development process, which
    can help to reduce the overall time and cost of testing.
  prefs: []
  type: TYPE_NORMAL
- en: Improved software quality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By thoroughly testing the interactions and interfaces between different components
    of the system, integration testing can help to ensure that the software is of
    high quality and free of defects.
  prefs: []
  type: TYPE_NORMAL
- en: Improved team collaboration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Integration testing often involves collaboration between different teams, such
    as development, testing, and operations teams. This can help to improve communication
    and collaboration between teams and ensure that the system is developed and tested
    to meet the needs of all stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: Improved documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The integration testing process can lead to better documentation of test cases
    and test results, which can be used to improve the system and for future reference.
  prefs: []
  type: TYPE_NORMAL
- en: Improved business continuity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By ensuring that the system is reliable and can handle the expected load and
    usage patterns, integration testing can help to ensure that the system can continue
    to operate in case of unexpected events, such as hardware failures or power outages,
    which can help to improve business continuity and minimize disruption.
  prefs: []
  type: TYPE_NORMAL
- en: Improved data governance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By thoroughly testing the interactions and interfaces between different system
    components, integration testing can help ensure that data is properly protected
    and that data integrity is maintained between different components of the system,
    which can help improve data governance and compliance with data protection regulations.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we explored the benefits of integration testing to enterprise
    projects and how it improves development teams’ workflows. In the next section,
    we will learn about some of the best practices to put in place during integration
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices when creating integration tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s look are some best practices for creating effective integration tests.
  prefs: []
  type: TYPE_NORMAL
- en: Starting early
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Integration testing should be started as early as possible in the development
    process, ideally during the design phase. This will help to identify and resolve
    issues early on and ensure that the system is developed and tested to meet the
    needs of all stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: Defining clear objectives
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before starting integration testing, it’s important to define the objectives
    of the testing clearly. This includes identifying what the system is supposed
    to do, the system’s interfaces and interactions, and the expected outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a test plan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a test plan that outlines the scope of the testing, the test cases to
    be executed, and the resources and tools needed. The test plan should also include
    a schedule for testing, including when testing will be completed and when the
    results will be reviewed.
  prefs: []
  type: TYPE_NORMAL
- en: Using a modular approach
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Divide the system into smaller, more manageable modules and test them separately.
    This will help to identify and resolve issues more quickly and efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Using automated testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Automated testing can help to improve testing efficiency and reduce the time
    and cost of testing. Automated testing can also be used to test the system under
    different conditions, such as different environments and configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the system as a whole
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Test the system as a whole with the other external systems it will integrate
    with; this will ensure that the system is compatible and able to communicate with
    other systems that it may need to interact with.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for security vulnerabilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Test the system for security vulnerabilities, such as SQL injection or cross-site
    scripting attacks. This will help ensure the system is secure and can protect
    sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for performance bottlenecks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Test the system for performance bottlenecks and identify and resolve any issues
    that may arise. This will help ensure the system can handle the expected load
    and usage patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Documenting and reviewing the results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Document the results of the testing, including any issues that were identified
    and how they were resolved. Review the results and use them to improve the system
    and the testing process.
  prefs: []
  type: TYPE_NORMAL
- en: Continuously testing and monitoring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Continuously test and monitor the system after it’s been released to production;
    this will help to ensure that the system is reliable and that any issues are identified
    and resolved quickly.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we explored the best practices to put in place when making
    use of integration testing into an enterprise. In the next section, we will learn
    how to implement integration testing within the demo project using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript integration testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several tools that can be used to perform integration testing in JavaScript.
    Some popular choices include the following.
  prefs: []
  type: TYPE_NORMAL
- en: Mocha
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mocha is a widely used JavaScript testing framework well suited for integration
    testing. It is highly customizable and can be used in conjunction with other libraries,
    such as Chai and Sinon, to perform various types of testing.
  prefs: []
  type: TYPE_NORMAL
- en: Cypress
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cypress is a JavaScript-based end-to-end testing framework that can be used
    for integration testing. It allows developers to test the entire flow of an application
    from the user’s perspective, and it has built-in support for real-time debugging,
    automatic waiting, and time-traveling.
  prefs: []
  type: TYPE_NORMAL
- en: TestCafe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TestCafe is an end-to-end testing tool that runs on top of Node.js. It allows
    you to run tests in a real browser and is easy to set up and use. It also offers
    the ability to test the UI of your application, which is useful in integration
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Selenium is a browser automation tool that can be used for integration tests
    for web applications. Selenium WebDriver allows you to interact with web browsers
    and perform tasks such as clicking buttons, filling out forms, and navigating
    through pages.
  prefs: []
  type: TYPE_NORMAL
- en: Vue Test Utils
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Vue Test Utils is an official testing library provided by the Vue.js team. It
    is a lightweight library that provides a set of utilities for testing Vue components.
    It can be used in conjunction with other testing frameworks, such as Jest or Mocha,
    to perform integration testing.
  prefs: []
  type: TYPE_NORMAL
- en: Avoriaz
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Avoriaz is a testing library specifically designed for Vue.js components. It
    provides a set of tools for testing Vue components and allows you to easily mount
    and interact with your components in a testing environment.
  prefs: []
  type: TYPE_NORMAL
- en: Vue Testing Library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a library built for testing Vue 3 applications. It provides a set of
    utilities for testing Vue 3 components and allows you to easily mount and interact
    with your components in a testing environment.
  prefs: []
  type: TYPE_NORMAL
- en: Nightwatch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nightwatch is an automated testing framework for web applications and websites.
    It can be used for integration tests for Vue 3 applications, and it allows you
    to write integration tests that simulate user interactions with an application.
  prefs: []
  type: TYPE_NORMAL
- en: As with any other tool, you can pick the one that best suits your needs and
    the structure of your application. Keep in mind that some tools may be better
    suited for certain types of testing or certain types of applications.
  prefs: []
  type: TYPE_NORMAL
- en: These are some of the most popular tools available; you can use any depending
    on your needs and what you are trying to test.
  prefs: []
  type: TYPE_NORMAL
- en: It’s also important to note that most of these tools can be integrated with
    other libraries and frameworks to extend their functionality.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore how to write your integration test with
    JavaScript and how to run your test manually. We will also explore how to automate
    your testing suite during a deployment pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Testing a basic Vue app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we created a Pinterest application using Strapi for
    the backend and Vue 3 for the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we added internationalization, structured the project, implemented unit
    and integration testing, and built a complete Pinterest clone. In this section,
    we will continue by using the official project we created for this book to set
    up integration testing to make up a full-blown enterprise-ready Pinterest clone
    application.
  prefs: []
  type: TYPE_NORMAL
- en: You can clone the project from the GitHub link mentioned in the *Technical*
    *requirements* section.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore more advanced ways of implementing integration
    testing within the Pinterest clone application we use throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a basic integration test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will start by installing the new testing library for Vue 3\. Since
    we are using Vite in the project, we will also install the Vitest library for
    our test runner. You can read more about the new Vue 3 test library at [https://vitest.dev/guide/](https://vitest.dev/guide/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing the test library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As of the time of writing, `@testing-library/vue` ([https://github.com/testing-library/vue-testing-library](https://github.com/testing-library/vue-testing-library))
    and `vitest` ([https://vitest.dev/guide/](https://vitest.dev/guide/)) are recommended
    for integration testing, and we will install the test libraries using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open your `vite.config.js` file and add the following configuration.
    Note that `happy-dom` is a JavaScript implementation of a web browser without
    its graphical UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we configured the testing library to accommodate both
    unit and integration testing using the Vite library. This means that if we want
    to run unit and integration testing, we only need to use a single command, as
    shown when running the test.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s create a simple integration test.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic component test
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is a simple integration test snippet to demonstrate. This is a general
    integration testing example that tests the `Button` component inside the Pinterest
    demo application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The test simply renders `Button` with a custom label value and also checks whether
    we can retrieve the custom label added during the rendering process.
  prefs: []
  type: TYPE_NORMAL
- en: Running the test
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Running the test will result in four passed test cases, including the unit
    test we created earlier. Here’s a command to run this test sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]bash'
  prefs: []
  type: TYPE_NORMAL
- en: yarn test
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 10.1 – A screenshot of the general test result](img/Figure_10.01_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – A screenshot of the general test result
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have demonstrated how to configure and structure integration
    testing, also known as component testing, with Vue 3 using the latest Vitest testing
    library for Vue 3\. We have also written basic component tests to help us understand
    the process of writing integration tests. In the next section, we will explore
    testing integrated components with Vue 3 using Vitest.
  prefs: []
  type: TYPE_NORMAL
- en: Testing integrated components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous example, we tested a simple `Button` component to make it render
    properly with the required properties. In this section, we will test a completely
    integrated component that combines different individual components. Let’s get
    started with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file inside the `tests/components` directory called `HomeOverivew.vue`
    since we want to test the integration of the home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the file and add the following testing code or clone the repository using
    the GitHub link mentioned in the *Technical* *requirements* section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In each test case, we are testing components that were added to the `HomeOverview`
    component to demonstrate how we can use integration testing to test integrated
    components as one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, make sure the `HomeOverivew` page has been rendered correctly before
    testing for other test cases:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, test whether the `Button` component renders correctly and also check
    whether we can perform some actions with it. For instance, when the button is
    clicked, the app is supposed to create a new pin with photos. We will test to
    make sure that this functionality is implemented correctly even after integration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, test the notification display component found inside the `Header` component.
    We are testing it to make sure the users can dismiss notifications, and that it
    is also rendered correctly both inside the `Header` component and the `HomeOverview`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, also test the `Card` component to make sure that it displays the total
    amount of pins on the home page, and also that it renders the components correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, we will test the `Search` component to make sure it was properly rendered
    for users and is available for users to search for pins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s run the test by running the following command in our root terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]bash'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: yarn test:component
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After successfully performing running the test, you should be greeted with
    green passes for your test, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – A screenshot of the integration test result](img/Figure_10.02_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – A screenshot of the integration test result
  prefs: []
  type: TYPE_NORMAL
- en: With all these test cases successful, we can easily see how integration testing
    helps developers to test out integrated and combined components instead of testing
    these components in isolation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explored everything related to integration testing. You also learned
    about integration testing tools such as Cypress, Mocha, and Vue Testing Library
    and used Vue Testing Library to effectively test an enterprise project.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explored the benefits, importance, and best practices in
    writing and executing effective integration testing strategies. In addition, you
    also learned how to write integration test cases.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about everything related to end-to-end testing.
    You will learn in depth how to perform end-to-end testing on a Vue.js 3 component
    and pages. In addition, you will also learn about end-to-end testing tools such
    as Cypress and Puppeteer and how to use them to test an enterprise project effectively
    from end to end.
  prefs: []
  type: TYPE_NORMAL
