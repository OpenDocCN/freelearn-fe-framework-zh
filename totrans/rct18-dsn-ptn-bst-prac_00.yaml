- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**React** is a revolutionary, open-source JavaScript library that breathes
    life into web applications by constructing intricate user interfaces from small,
    isolated chunks known as components. This book serves as a roadmap, guiding you
    through the wonders of React and enhancing your productivity by introducing an
    efficient workflow without compromising on quality.'
  prefs: []
  type: TYPE_NORMAL
- en: Our journey begins by delving deep into the core of React, gaining a thorough
    understanding of its internal mechanisms and architecture. With this strong foundation
    in place, we will guide you towards writing clean and maintainable code, breaking
    down complex concepts into digestible and manageable chunks.
  prefs: []
  type: TYPE_NORMAL
- en: Continuing our journey, we will uncover the art of building components that
    aren’t just one-off entities but reusable pieces across your application. We’ll
    illuminate the path to structuring your applications, making them more organized
    and manageable. The seemingly daunting task of creating functional forms will
    become a breeze as we equip you with strategies and techniques to do so effectively.
  prefs: []
  type: TYPE_NORMAL
- en: As we ascend further, we’ll immerse ourselves in styling React components. You’ll
    learn how to bring your applications to life with aesthetic appeal while ensuring
    they remain swift and responsive. Moreover, you’ll discover the secrets of enhancing
    application performance, fine-tuning your components for speed and efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: In the final phase of our journey, we’ll delve into testing methodologies effectively,
    refining the quality and reliability of your applications. You’ll also gain insight
    into contributing to React and its thriving ecosystem, joining the ranks of developers
    who continually drive its evolution.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this book, the trial-and-error process, the developmental hurdles,
    and guesswork will be things of the past. You will have harnessed the power of
    React, equipped with the skills necessary to construct and deploy real-world React
    web applications with confidence and finesse.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for web developers who want to increase their understanding of
    React and apply it to real-life app development. Intermediate-level experience
    with React and JavaScript is assumed.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Chapter 1*, *Taking Your First Steps with React*, we start our journey to
    understand React by learning to write declarative code and distinguishing between
    our components and React’s elements. We also discuss why we combine logic and
    templates in React, a decision that was controversial initially but ultimately
    beneficial. Recognizing the potential for feeling overwhelmed in the rapidly evolving
    world of JavaScript, we suggest taking small, manageable steps to avoid fatigue.
    We wrap up by introducing the new `create-vite` tool, preparing you for hands-on
    coding experience in React.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 2*, *Introducing TypeScript*, we’ll learn the basics of TypeScript,
    including creating simple types, interfaces, using enums, namespaces, and template
    literals. We’ll also figure out how to set up our first TypeScript configuration
    file (`tsconfig.json`) and divide it into two parts - a common part and a specific
    part, which is particularly handy when working with MonoRepos. After this chapter,
    you’ll be all set to delve into using JSX/TSX code and explore ways to make your
    code better in the next chapter. Get ready to use TypeScript to make your React
    apps easy to work with and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 3*, *Cleaning Up Your Code*, we’ll get to know JSX, including how
    it’s written and what it can do. We’ll also set up Prettier and ESLint to keep
    our code neat and prevent mistakes. Plus, we’ll learn about functional programming,
    which makes our code easier to manage and test. After tidying up our code, we’ll
    be prepared to go deeper into React and learn how to make components that we can
    use repeatedly in the next chapter. By adopting good habits, we can build React
    apps that are simple to manage, grow, and check.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Chapter 4*, *Exploring Popular Composition Patterns*, we’ll learn how to
    use “props” to make our reusable components work together better. Using props
    helps keep our components separate and welldefined. We’ll look at two common ways
    to organize components: the container and presentational pattern, which keeps
    the rules and looks of our components separate. We’ll also learn about **Higher
    Order Components** (**HOCs**) for dealing with context without making our components
    too dependent, and the Function as Child pattern for creating components on-the-fly.'
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 5*, *Writing Code for the Browser*, we’ll look at how React can
    be used in a web browser to create forms, handle events, and animate SVGs. We’ll
    learn about the `useRef` Hook, which is an easy way to reach DOM nodes.
  prefs: []
  type: TYPE_NORMAL
- en: With React’s simple, straightforward approach, managing complex web apps becomes
    easier. Plus, React allows us to access DOM nodes directly if we need to, which
    makes it simple to use React with other libraries.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 6*, *Making Your Components Look Beautiful*, we’ll dive into styling
    in React. We’ll start by looking at the problems with making CSS work for big
    projects, using the experiences of Meta as an example. We’ll learn about how we
    can write styles directly inside our React components, which keeps our code tidy
    and easy to read. But we’ll also learn about the limitations of this method and
    explore another way of styling, called CSS modules, that lets us write CSS in
    separate files but keep the styles scoped to individual components. Finally, we’ll
    get to know `styled-components`, a popular library for styling in React. By the
    end of this chapter, you’ll have many tools for making your React apps look great.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 7*, *Anti-Patterns to Be Avoided*., we’ll talk about four ways of
    using components that could slow down or mess up our web apps. For each problem,
    we’ll use an example to show what goes wrong and how to fix it. We’ll learn why
    using properties to set up the state can cause problems between the state and
    the properties. We’ll also see how using the wrong “key” attribute can mess up
    the way React updates components. Lastly, we’ll learn why spreading non-standard
    properties to DOM elements is a bad idea. Understanding these issues will help
    us use React more effectively and avoid common mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 8*, *React Hooks*, we’ll have a lot of fun learning about the new
    React Hooks. We’ll learn how they work, how to use them to get data, and how to
    change a class component into a Hooks one. We’ll also learn about effects and
    the differences between `memo`, `useMemo`, and `useCallback`. Finally, we’ll see
    how the `useReducer` Hook works and how it’s different from `react-redux`. All
    of this will help us make our React components faster and better.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 9*, *React Router*, we’ll learn about React Router, a tool we use
    with React to move between pages in a single-page application. React doesn’t do
    this on its own, so we use React Router. We’ll find out how to use it to make
    our app respond to different URLs and manage navigation. By the end of this chapter,
    you’ll know how React Router works and how to use it in your projects. We’ll learn
    the differences between the `react-router`, `react-router-dom`, and `react-router-native`
    packages, how to set up React Router, how to add the `<Routes>` component, and
    how to add parameters to the routes.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 10*, *React 18 New Features*, we’ll explore the new and improved
    React 18\. It has loads of features that make building cool, interactive apps
    even easier.
  prefs: []
  type: TYPE_NORMAL
- en: With automatic state update grouping, concurrent rendering, Suspense for getting
    data, better error handling, and new component types, you can create engaging
    and fast apps. If you work with React, it’s a good idea to consider upgrading
    to React 18\. We’ll also look at some of the big new features in Node 18 and 19,
    which can make our web projects even better.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 11*, *Managing Data*, we’ll learn about the React Context API and
    how to use React Suspense with SWR. We’ll learn the basics of the Context API,
    including creating and using contexts and how the `useContext` hook makes this
    even easier. We’ll also look at React Suspense and how it helps us handle loading
    states better for a smoother user experience. We’ll also learn about SWR, which
    makes it easier to fetch and cache data with React Suspense. Lastly, we’ll learn
    how to use the new Redux Toolkit. All these tools will help us build faster and
    more user-friendly React apps.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 12*, *Server Side Rendering*, we’ll finish our journey through **server-side
    rendering** (**SSR**) with React. Now you’ll know how to create an app that uses
    SSR, and why it can be useful for things like **search engine optimization** (**SEO**),
    social sharing, and improving performance. We’ll learn how to load data on the
    server and put it into the HTML template so it’s ready for the client-side app
    when it starts up in the browser. Lastly, we’ll see how tools like Next.js can
    make setting up SSR in React a lot easier by reducing the amount of extra code
    and hiding some of the tricky parts.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 13*, *Understanding GraphQL with a Real Project*, we’re going to
    learn about GraphQL, a cool tool that helps us work with APIs and our data more
    efficiently. Unlike regular REST APIs, GraphQL lets us ask for exactly what we
    need and nothing more. We’re going to use it to make a simple login and user registration
    system for a real project. We’ll learn how to install PostgreSQL, set up environment
    variables with an `.env` file, set up Apollo Server, make GraphQL queries and
    mutations, work with resolvers, create Sequelize models, use JWTs, play with the
    GraphQL Playground, and do authentication. By the end, you’ll know how to use
    GraphQL in your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 14*, *MonoRepo Architecture*, we’ll talk about something called
    a “MonoRepo.” Normally, when we build apps, we have one app, one git repository,
    and one build output. But many organizations use a single repository for all their
    apps, components, and libraries to make development easier. This is what we call
    a monorepository. It’s like keeping all your code in one big basket instead of
    having many little baskets. This makes it easier to keep everything updated and
    it can save time. We’ll also discuss how a MonoRepo can make it easier to refactor
    code, improve teamwork, and speed up the process of updating a package dependency
    without having to publish a new version every time there’s an update.
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 15*, *Improving the Performance of Your Applications*, we will explore
    techniques to make your apps run smoother and quicker for a better user experience.
    We’ll delve into how React updates your app’s display and how using keys can aid
    in this process for improved efficiency. We will discover the importance of well-structured,
    task-focused components in boosting app performance. We will discuss the concept
    of immutability and its significance in helping `React.memo` and `shallowCompare`
    work effectively. Toward the end, we will introduce various tools and libraries
    that can further speed up your applications. This chapter aims to equip you with
    valuable knowledge to enhance the speed and performance of your apps.'
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 16*, *Testing and Debugging*, we’re going to learn all about testing.
    You’ll find out why testing is important and explore different tools and techniques
    for checking if our React components are working as they should. We’ll work with
    libraries like React Testing Library and Jest to write and run tests, and even
    see how to test complex parts of our application like high-order components or
    forms with lots of fields. Plus, we’ll learn how to use tools like React DevTools
    and Redux DevTools to help us develop better apps. By the end of this chapter,
    you’ll have a solid grasp of how to keep your app working well through effective
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 17*, *Deploying to Production*, we’re going to take the React app
    you’ve built and share it with the world! We’ll use a cloud service called DigitalOcean
    to do this. You’ll learn how to use Node.js and nginx to get your app up and running
    on a server, and we’ll use an Ubuntu server from DigitalOcean for this purpose.
    We’ll walk you through how to set up a DigitalOcean Droplet, configure it, and
    link it to your domain. We’re also going to introduce you to CircleCI, which is
    a tool that helps you automatically make sure your app is always ready for users,
    no matter how many changes you make. By the end of this chapter, you’ll have your
    app live on the internet for everyone to see!
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To master React, you need to have a fundamental knowledge of JavaScript and
    Node.js. This book is mostly targeted at web developers, and, at the time of writing,
    the following assumptions were made of the reader:'
  prefs: []
  type: TYPE_NORMAL
- en: The reader knows how to install the latest version of Node.js.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reader is an intermediate developer who can understand JavaScript ES6 syntax.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reader has some experience of CLI tools and Node.js syntax.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code bundle for the book is hosted on GitHub at [https://github.com/PacktPublishing/React-18-Design-Patterns-and-Best-Practices-Fourth-Edition/](https://github.com/PacktPublishing/React-18-Design-Patterns-and-Best-Practices-Fourth-Edition/).
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://packt.link/o1WtB](https://packt.link/o1WtB).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    For example: “After you create this `util`, you need to create the `index.ts`
    file at `packages/utils/src/index.ts."`'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see on
    the screen. For instance, words in menus or dialog boxes appear in the text like
    this. For example: “The first package we need to create to be able to compile
    other packages is called **devtools**.”'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: Email `feedback@packtpub.com` and mention the book’s
    title in the subject of your message. If you have questions about any aspect of
    this book, please email us at `questions@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you reported this to us. Please visit [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    click **Submit Errata**, and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packtpub.com` with a
    link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [http://authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share your thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *React 18 Design Patterns and Best Practices, Fourth Edition*,
    we’d love to hear your thoughts! Please [click here to go straight to the Amazon
    review page](https://packt.link/r/1803233109) for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?Is
    your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18414_Free_PDF_QR.png)'
  prefs: []
  type: TYPE_IMG
- en: '[https://packt.link/free-ebook/978-1-80323-310-9](https://packt.link/free-ebook/978-1-80323-310-9)'
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
