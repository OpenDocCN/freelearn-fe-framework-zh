["```js\n    projects/ch4 \n    ```", "```js\n    npx ng serve ch4 \n    ```", "```js\n    npx ng test ch4 --watch=false \n    ```", "```js\n    npx ng e2e ch4 \n    ```", "```js\n    npx ng build ch4 --prod \n    ```", "```js\n**Sample Jasmine Test**\ndescribe('Converters', () => {\n  describe('convertCtoF', () => {\n    it('should convert 0c to 32f', () => {\n      ...\n    })\n  })\n}) \n```", "```js\n**Jasmine Matchers**\nexpect(expected).toBe(actual)\n                .toEqual(actual)\n                .toBeDefined()\n                .toBeFalsy()\n                .toThrow(exception)\n                .nothing() \n```", "```js\n**src/app/current-weather/current-weather.component.spec.ts**\ndescribe('CurrentWeatherComponent', () => {\n  let component: CurrentWeatherComponent\n  let fixture: ComponentFixture<CurrentWeatherComponent>\n  beforeEach(\n    async(() => {\n      TestBed.configureTestingModule({\n        declarations: [CurrentWeatherComponent],\n      }).compileComponents()\n    })\n  )\n  beforeEach(() => {\n    fixture = TestBed.createComponent(CurrentWeatherComponent)\n    component = fixture.componentInstance\n    fixture.detectChanges()\n  })\n  it('should create', () => {\n    expect(component).toBeTruthy()\n  })\n}) \n```", "```js\n**src/app/weather/weather.service.spec.ts**\ndescribe('WeatherService', () => { \n  let service: WeatherService\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({})\n    service = TestBed.inject(WeatherService);\n  })\n  it('should be created', () => {\n      expect(service).toBeTruthy()\n    })\n  )\n}) \n```", "```js\n$ npm test \n```", "```js\nERROR in src/app/app.component.spec.ts:21:16 - error TS2339:\nProperty 'title' does not exist on type 'AppComponent'.\n21     expect(app.title).toEqual('local-weather-app') \n```", "```js\n    **src/app/app.component.spec.ts**\n    it('should render title', () => {\n      ... \n      expect(compiled.querySelector('h1').textContent)\n        .toContain('LocalCast Weather') \n    }) \n    ```", "```js\n**src/app/app.component.spec.ts**\n...\nTestBed.configureTestingModule({\n  declarations: [AppComponent, CurrentWeatherComponent],\n}).compileComponents()\n... \n```", "```js\nWARN: ''app-current-weather' is not a known element \n```", "```js\nCurrentWeatherComponent > should create\nNullInjectorError: R3InjectorError(DynamicTestModule)[WeatherService -> HttpClient -> HttpClient]: \n  NullInjectorError: No provider for HttpClient! \n```", "```js\n**src/app/current-weather/current-weather.component.spec.ts**\n...\nbeforeEach(async(() => { \n  TestBed.configureTestingModule({ \n    declarations: [...], \n    providers: [WeatherService], \n  })\n  ...\n})\n... \n```", "```js\nproviders: [{ provide: WeatherService, useClass: FakeWeatherService }] \n```", "```js\nproviders: [{ provide: WeatherService, useValue: mockWeatherService }] \n```", "```js\n**src/app/current-weather/current-weather.component.spec.ts**\nimport { HttpClientTestingModule } from '@angular/common/http/testing'\n...\n  describe(' CurrentWeatherComponent', () => { \n    beforeEach(() => { \n      TestBed.configureTestingModule({ \n        imports: [HttpClientTestingModule], \n        ...\n      })\n    ...\n  })\n... \n```", "```js\n    **src/app/weather/weather.service.ts**\n    export interface IWeatherService {\n      getCurrentWeather(\n      city: string, \n      country: string\n      ): Observable<ICurrentWeather> \n    } \n    ```", "```js\n    **src/app/weather/weather.service.ts**\n    export class WeatherService implements IWeatherService \n    ```", "```js\n    **src/app/weather/weather.service.fake.ts**\n    import { Observable, of } from 'rxjs'\n    import { IWeatherService } from './weather.service'\n    import { ICurrentWeather } from '../interfaces'\n    export const fakeWeather: ICurrentWeather = {\n      city: 'Bethesda',\n      country: 'US',\n      date: 1485789600,\n      image: '',\n      temperature: 280.32,\n      description: 'light intensity drizzle',\n    }\n    export class WeatherServiceFake implements IWeatherService {\n      public getCurrentWeather(\n        city: string,\n        country: string): Observable<ICurrentWeather> { \n          return of(fakeWeather)\n      }\n    } \n    ```", "```js\n    **src/app/current-weather/current-weather.component.spec.ts**\n      ...\n      beforeEach( \n        async(() => {\n          TestBed.configureTestingModule({\n            ...\n            providers: [{\n              provide: WeatherService, useClass: WeatherServiceFake\n            }],\n            ... \n    ```", "```js\n@Component({\n  selector: 'app-current-weather',\n  template: ``,\n})\nclass MockCurrentWeatherComponent {} \n```", "```js\ncreateComponentMock('CurrentWeatherComponent') \n```", "```js\n    **src/app/app.component.spec.ts**\n    import { createComponentMock } from 'angular-unit-test-helper'\n      TestBed.configureTestingModule({\n        declarations: [ ...,\n          createComponentMock('CurrentWeatherComponent')\n        ],\n        ...\n      }) \n    ```", "```js\n    **src/app/current-weather/current-weather.component.spec.ts**\n    import {\n      ComponentFixture,\n      TestBed,\n      async\n    } from '@angular/core/testing'\n    import { injectSpy } from 'angular-unit-test-helper'\n    import { WeatherService } from '../weather/weather.service'\n    import {\n      CurrentWeatherComponent\n    } from './current-weather.component'\n    describe('CurrentWeatherComponent', () => {\n      ...\n      let weatherServiceMock: jasmine.SpyObj<WeatherService>\n      beforeEach(async(() => {\n        const weatherServiceSpy =\n          jasmine.createSpyObj(\n            'WeatherService',\n            ['getCurrentWeather']\n          )\n\n        TestBed.configureTestingModule({ ... })\n      }) \n    ```", "```js\n    **src/app/current-weather/current-weather.component.spec.ts**\n        beforeEach(async(() => { \n          ...\n          TestBed.configureTestingModule({\n          ...,\n           providers: [{\n             provide: WeatherService, useValue: weatherServiceSpy\n           }]\n        }).compileComponents()\n        weatherServiceMock = injectSpy(WeatherService)\n    } \n    ```", "```js\nTypeError: Cannot read property 'subscribe' of undefined \n```", "```js\n**src/app****/current-weather/current-weather.component.spec.ts**\n  import { of } from 'rxjs'\n  ...\n  beforeEach(() => {\n    fixture = TestBed.createComponent(CurrentWeatherComponent)\n    component = fixture.componentInstance\n  })\n  it('should create', () => {\n    // Arrange\n    weatherServiceMock.getCurrentWeather.and.returnValue(of())\n    // Act\n    fixture.detectChanges() // triggers ngOnInit\n    // Assert\n    expect(component).toBeTruthy()\n  }) \n```", "```js\n**src/app/current-weather/current-weather.component.spec.ts**\n  it('should get currentWeather from weatherService', () => {\n    // Arrange\n    weatherServiceMock.getCurrentWeather.and.returnValue(of())\n    // Act\n    fixture.detectChanges() // triggers ngOnInit()\n    // Assert\n    expect(weatherServiceMock.getCurrentWeather)\n      .toHaveBeenCalledTimes(1)\n  }) \n```", "```js\n**src/app/current-weather/current-weather.component.spec.ts**\nimport { By } from '@angular/platform-browser'\nimport { fakeWeather } from '../weather/weather.service.fake'\n...\n  it('should eagerly load currentWeather in Bethesda from weatherService', () => {\n    // Arrange\n    weatherServiceMock.getCurrentWeather\n      .and.returnValue(of(fakeWeather))\n    // Act\n    fixture.detectChanges() // triggers ngOnInit()\n    // Assert\n    expect(component.current).toBeDefined()\n    expect(component.current.city).toEqual('Bethesda')\n    expect(component.current.temperature).toEqual(280.32)\n    // Assert on DOM\n    const debugEl = fixture.debugElement\n    const titleEl: HTMLElement = debugEl.query(By.css('span'))\n      .nativeElement\n    expect(titleEl.textContent).toContain('Bethesda')\n  }) \n```", "```js\nTOTAL: 7 SUCCESS \n```", "```js\n**e2e/src/app.e2e-spec.ts**\nimport { browser, logging } from 'protractor'\nimport { AppPage } from './app.po'\ndescribe('workspace-project App', () => {\n  let page: AppPage\n  beforeEach(() => {\n    page = new AppPage()\n  })\n  it('should display welcome message', () => {\n    page.navigateTo()\n    expect(page.getTitleText())\n      .toEqual('local-weather-app app is running!')\n  })\n  afterEach(async () => {\n    // Assert that there are no errors emitted from the browser\n    const logs = await browser\n      .manage()\n      .logs()\n      .get(logging.Type.BROWSER)\n    expect(logs).not.toContain(\n      jasmine.objectContaining({\n        level: logging.Level.SEVERE,\n      } as logging.Entry)\n    )\n  })\n}) \n```", "```js\n**e2e/src/app.po.ts**\nimport { browser, by, element } from 'protractor'\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>\n  }\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root div h1'))\n      .getText() as Promise<string>\n  }\n} \n```", "```js\n$ npm run e2e \n```", "```js\n**************************************************\n*                    Failures                    *\n**************************************************\n1) web-app App should display welcome message\n  - Failed: No element found using locator: By(css selector, app-root .content span)\nExecuted 1 of 1 spec (1 FAILED) in 0.659 sec. \n```", "```js\n    e2e/src/app.po.ts\n      getTitleText(): Promise<string> {\n        return element(by.css('app-root div h1')).\n          getText() as Promise<string>\n      } \n    ```", "```js\n    - Expected 'LocalCast Weather' to equal 'local-weather-app app is running!'. \n    ```", "```js\n    e2e/src/app.e2e-spec.ts\n      it('should display welcome message', () => {\n        page.navigateTo()\n        expect(page.getTitleText()).toEqual('LocalCast Weather')\n      }) \n    ```", "```js\n    Jasmine started\n    web-app App\n    √ should display welcome message\n    Executed 1 of 1 spec SUCCESS in 0.676 sec. \n    ```", "```js\n    **package.json**\n    \"scripts\": {\n      ...\n      \"build:prod\": \"ng build --prod\"\n    } \n    ```", "```js\n    $ npm run build:prod \n    ```", "```js\n    **src/environments/environment.prod.ts**\n    export const environment = {\n      production: true,\n      appId: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\n      baseUrl: 'https://',\n    } \n    ```", "```js\n    **.circleci/config.yml**\n    version: 2.1\n    jobs:\n      build:\n        docker:\n          - image: circleci/node:lts-browsers\n        working_directory: ~/repo\n        steps:\n          - checkout\n          - restore_cache:\n              keys:\n                - v1-dependencies-{{ checksum \"package-lock.json\" }}\n          - run: npm ci\n          # force update the webdriver\n          - run: cd ./node_modules/protractor && npm i webdrivermanager@latest\n          # because we use \"npm ci\" to install NPM dependencies\n          # we cache \"~/.npm\" folder\n          - save_cache:\n              key: v1-dependencies-{{ checksum \"package-lock.json\" }}\n              paths:\n                - ~/.npm\n          - run: npm run style\n          - run: npm run lint\n          - run: npm run build:prod\n          - run: npm run test:coverage -- --watch=false\n          - run: npm run e2e\n          - run:\n              name: Tar & Gzip compiled app\n              command: tar zcf dist.tar.gz dist/local-weather-app\n          - store_artifacts:\n              path: dist.tar.gz\n    workflows:\n      version: 2\n      build-and-test:\n        jobs:\n          - build \n    ```", "```js\n    **package.json**\n    ...\n    \"scripts\": {\n      ...\n      \"prenow:publish\": \"npm run build:prod\",\n      \"now:publish\": \"now --platform-version 2 dist/local-weather-app\"\n    } \n    ```", "```js\n    $ npm run now:publish\n    > localcast-weather@9.0.0 prenow:publish C:\\dev\\local-weather-app\n    > npm run build:prod\n    > localcast-weather@9.0.0 build:prod C:\\dev\\local-weather-app\n    > ng build --prod\n    Generating ES5 bundles for differential loading...\n    ES5 bundle generation complete.\n    chunk {2} polyfills-es2015.ca64e4516afbb1b890d5.js (polyfills) 35.6 kB [initial] [rendered]\n    chunk {3} polyfills-es5.1d087d4db6b105875851.js (polyfills-es5) 128 kB [initial] [rendered]\n    chunk {1} main-es2015.941dc398feac35a1a67d.js (main) 485 kB [initial] [rendered]\n    chunk {1} main-es5.941dc398feac35a1a67d.js (main) 577 kB [initial] [rendered]chunk {0} runtime-es2015.0811dcefd377500b5b1a.js (runtime) 1.45 kB [entry] [rendered]\n    chunk {0} runtime-es5.0811dcefd377500b5b1a.js (runtime) 1.45 kB [entry] [rendered]\n    chunk {4} styles.1938720bb6985e81892f.css (styles) 62 kB [initial] [rendered]Date: 2020-03-24T00:14:52.939Z - Hash: 4d78a666345c6761dc95 - Time: 14719ms  \n    > localcast-weather@9.0.0 now:publish C:\\dev\\local-weather-app\n    > now --platform-version 2 --prod dist/local-weather-app\n    > UPDATE AVAILABLE Run `npm i now@latest` to install Now CLI 17.1.1\n    > Changelog: https://github.com/zeit/now/releases/tag/now@17.1.1\n    Now CLI 17.0.4\n    ? Set up and deploy \"C:\\dev\\local-weather-app\\dist\\local-weather-app\"? [Y/n] y\n    ? Which scope do you want to deploy to? Doguhan Uluca\n    ? Found project \"duluca/local-weather-app\". Link to it? [Y/n] y\n    ![](img/B14094_04_15.png)  Linked to duluca/local-weather-app (created .now and added it to .gitigre)\n    ![](img/B14094_04_16.png)  Inspect: https://zeit.co/duluca/local-weather-app/jy2k1szdi [2s]       \n    ![](img/B14094_04_17.png)  Production: https://local-weather-app.duluca.now.sh [copied to clipboard] [4s] \n    ```"]