- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nesting Components (Modularity)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to initialize, build, and debug a simple
    Vue application. In this chapter, you will discover how to modularize a Vue application
    using component hierarchies and nesting. This chapter introduces concepts such
    as props, events, prop validation, and slots. It also covers how to use refs to
    access DOM elements during runtime.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to define communication interfaces
    between components using props, events, and validators, and be ready to build
    components for your Vue component library or a Vue application.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Passing props
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding prop types and validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding slots, named slots, and scoped slots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Vue refs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using events for child-parent communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you need to set up a basic Vue project following the instructions
    in [*Chapter 1*](B18645_01.xhtml#_idTextAnchor015), *Starting Your First Vue Project*.
    It’s recommended to create a Vue component in a single file to practice the examples
    and concepts covered here with ease.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete code for this chapter is available on GitHub at: [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter04).'
  prefs: []
  type: TYPE_NORMAL
- en: Passing props
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`this`) and in the component’s `template`.'
  prefs: []
  type: TYPE_NORMAL
- en: The value of a prop depends on what the parent passes in its `template` to the
    child component at render time.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a simple component that accepts props
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s look at a simple `HelloWorld` single-file component. You can find this
    at `./src/components/HelloWorld.vue`, generated automatically when you create
    a Vue project with Vite.
  prefs: []
  type: TYPE_NORMAL
- en: Note how the `msg` value is set in the `props` array and that it is interpolated
    as a value using `{{` `msg }}`.
  prefs: []
  type: TYPE_NORMAL
- en: The `props` property of a Vue component can be an array of strings or an object
    literal, each property field of which is a component’s prop definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a value is defined in `props`, it is then accessible as an instance variable
    in the `template` section of the Vue component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will now learn how to render a component using props.
  prefs: []
  type: TYPE_NORMAL
- en: Passing props to a component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What follows is a demonstration of how to use the `HelloWorld` component in
    our Vue application.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to import `HelloWorld` in our `App.vue` file using `<``script
    setup>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the `template` section, we need to render `<HelloWorld>` with the
    `msg` attribute set to `"Vue.js"`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will render the following on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We have seen how to use a component with props from its parent. This is useful
    for code reuse and for abstracting application behavior into component-sized chunks.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at a practical example of a `Greeting` component.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4.01 – Implementing a Greeting component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will create a component that lets you customize both the
    `greeting` (for example, `Hello`, `Hey`, or `Hola`) and `who` to greet (for example,
    `World`, `Vue.js`, or `JavaScript developers`) using what we’ve just learned about
    passing props from parent to child.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter04/Exercise4.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter04/Exercise4.01).
  prefs: []
  type: TYPE_NORMAL
- en: 'Work through the following steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate to the `Chapter04/Exercise4.01`
    folder using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory), or alternatively in your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file named `Greeting.vue` in the `./src/components` directory.
    This will be our single-file component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start by scaffolding the component with empty `template` and `script` tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to tell Vue that our component expects props. For this, we will
    add a `props` property to our component options object as an array with two fields,
    `greeting` and `who`, as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we want to render `greeting` and `who` in the template as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Greeting` component is now ready to be used from `App.vue`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `src/App.vue` file and import the `Greeting` component from `./src/components/Greeting.vue`
    into the `script` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can use `Greeting` in `template`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see the following when visiting your app in the browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `greeting` and `who` props using the attribute values in `template`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open a Vue tab in the browser DevTools and you will see the values of the two
    `greeting` and `who` props have been updated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Output in a Vue tab for the Greeting component](img/B18645_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – Output in a Vue tab for the Greeting component
  prefs: []
  type: TYPE_NORMAL
- en: 'And the browser now displays the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In this exercise, we have learned how we can use props to enable communication
    between parent and child while keeping the component reusable. Instead of the
    component rendering static data, its parent passes it the data to render.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to set prop values dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: Binding reactive data to props
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, we saw how to pass static data as props to a component.
    What if we want to pass reactive data from the parent to the child?
  prefs: []
  type: TYPE_NORMAL
- en: This is where `v-bind:` (or `:` for short) to enable **one-way binding** of
    a parent’s reactive data to the child component’s props.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code example, we bind the `appWho` data to the `msg` prop
    of the `HelloWorld` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s add two buttons that change the value of `appWho`, one to `JavaScript`
    and the other to `Everyone`, by triggering a `setWho` method with the appropriate
    value as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The browser now displays the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Browser displays the component with two buttons](img/B18645_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – Browser displays the component with two buttons
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click the `appWho` value and then re-renders the `HelloWorld` child
    component with the new value passed to the `msg` prop. Thus, `Hello JavaScript`
    is displayed, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Hello JavaScript displayed after clicking the JavaScript button](img/B18645_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – Hello JavaScript displayed after clicking the JavaScript button
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, when you click the `Hello Everyone`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Hello Everyone displayed after clicking the Everyone button](img/B18645_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – Hello Everyone displayed after clicking the Everyone button
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen, we are able to bind reactive data to props so that any data
    updated in the parent will be reflected in the child component’s data accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4.02 – Passing reactive data that changes frequently to props
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will implement a component that allows users to change
    the name of the person to greet and pass it to the `Greeting` component we built
    in *Exercise 4.01*.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter04/Exercise4.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter04/Exercise4.02).
  prefs: []
  type: TYPE_NORMAL
- en: 'Work through the following steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application built in *Exercise 4.01* or navigate to the `Chapter04/Exercise4.02`
    folder using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or in your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `script` section of `App.vue`, let’s remove the `setup` attribute from
    the `script` tag, and register `Greeting` as a child component in the `components`
    field as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then create a `data` top-level method that returns an initial `greeting` and
    `who`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The browser should display the same output as in *Exercise 4.01*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now create an `input` field that accepts a string value for `who` from
    users and binds the `who` data to the `who` prop of `Greeting`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now when you type any name in the input field, the greeting message will change
    accordingly, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Output of greeting value updated according to users’ inputs](img/B18645_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 – Output of greeting value updated according to users’ inputs
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn how to add type hints and validation to our component’s
    props to ensure they are used correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding prop types and validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We use props to define the interfaces of Vue components and ensure other developers
    use our components correctly. We need to define their interfaces with types and
    validation. Vue offers that capability out of the box by changing how we pass
    the props as string elements to the `props` property in an object form.
  prefs: []
  type: TYPE_NORMAL
- en: Primitive prop validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Assume we want a `Repeat.vue` component that takes a `times` prop and a `content`
    prop and then calculates the array of `repetitions` using `computed` based on
    the `times` value. We can define the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'In `App.vue`, we can consume our `Repeat` component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will lead to the following output in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Output of the repeat example in action (no clicks)](img/B18645_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.6 – Output of the repeat example in action (no clicks)
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever clicking the `Repeat` button, the `Repeat` component will display
    the content one more time, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.7 – Output of the repeat example after five clicks](img/B18645_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.7 – Output of the repeat example after five clicks
  prefs: []
  type: TYPE_NORMAL
- en: Now, for this component to work properly, we need `times` to be a `Number` type
    and, ideally, `content` to be a `String` type.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Props type in Vue can be any type including `String`, `Number`, `Boolean`, `Array`,
    `Object`, `Date`, `Function`, and `Symbol`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s define the `times` prop as a `Number` and the `content` props as a `String`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s see what happens if we update `App` to pass the wrong prop type to `Repeat`
    – for example, let’s say `times` is a `String` and `content` is a `Number`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the `Repeat` component will fail to render, and the following
    errors will be logged to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Mistyping prop errors](img/B18645_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.8 – Mistyping prop errors
  prefs: []
  type: TYPE_NORMAL
- en: 'The `times` prop check fails with a message that explains that we passed a
    `String` to a prop that expects to receive a `Number`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'The same occurs with the `content` prop check, with a message that explains
    that we passed a `Number` as a prop that was supposed to be a `String`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Next, let’s explore custom prop types and union types.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding union and custom prop types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Vue supports union types. A `[String, Number]`. We declare a prop to accept
    a union type by using the `type` field of that data prop object. For example,
    we set `content` to accept a union type that will be either a number or a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we can consume the `Repeat` component as follows without errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use any valid JavaScript constructor as a prop’s `type`, such as
    a `Promise` or a custom `User` class constructor, as in the following example
    with the `TodoList` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Note here we import the `User` custom type from another file. We can use this
    `TodoList` component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we only fetch `todosPromise` once Vue mounts the component
    instance, and create a new instance of `User` using `new User()`.
  prefs: []
  type: TYPE_NORMAL
- en: We have now seen how to use the union and custom types to validate Vue props.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Vue uses `instanceof` validation internally, so make sure any custom types are
    instantiated using the relevant constructor.
  prefs: []
  type: TYPE_NORMAL
- en: Passing `null` or `undefined` will fail the check for `Array` and `Object`.
  prefs: []
  type: TYPE_NORMAL
- en: Passing an array will pass the check for `Object` since an array is also an
    instance of `Object` in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will explore how to enable validation for props on certain types.
  prefs: []
  type: TYPE_NORMAL
- en: Custom validation of arrays and objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Vue allows custom validators to be used as props using the `validator` property.
    This allows us to implement deep checks regarding object and collection types.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at a `CustomSelect` component.
  prefs: []
  type: TYPE_NORMAL
- en: On a basic level, the prop interface for `select` comprises an array of `options`
    and a `selected` option.
  prefs: []
  type: TYPE_NORMAL
- en: Each option should have a `label` that represents what is displayed in `select`,
    and a `value` representing its actual value. The `selected` option’s value can
    be empty or be equal to the `value` field for one of our `options`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can implement `CustomSelect` in a naive way (no validation of the inputs)
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Then use `CustomSelect` to display a list of British crisp flavors (in `src/App.vue`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding example outputs a `select` element where `Salt & Vinegar` is
    the default selected option, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.9 – Collapsed CustomSelect with Salt & Vinegar selected](img/B18645_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.9 – Collapsed CustomSelect with Salt & Vinegar selected
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the three flavor options displayed when the
    dropdown is opened:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.10 – Open CustomSelect with flavor options and Salt & Vinegar selected](img/B18645_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.10 – Open CustomSelect with flavor options and Salt & Vinegar selected
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can implement a prop `validator` method to enable further validation
    for our component’s logic, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'If we pass an option with a missing `value` or `label`, we will get the following
    message in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.11 – Console warning when a custom validator fails](img/B18645_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.11 – Console warning when a custom validator fails
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have learned how to use a custom validator to do in-depth validation
    for complex props. Next, we will learn how the `required` property of a prop works.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding required props
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To mark a prop as required, we can use the `required` prop type property.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `CustomSelect` example, we can make `selected` a required prop by adding
    `required: true` to its prop definition, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we don’t pass a value to the `selected` prop of `CustomSelect` on the
    parent component, we will see the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.12 – Console warning when the selected required prop is missing](img/B18645_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.12 – Console warning when the selected required prop is missing
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have learned how to mark props as required and saw what happens
    when we don’t pass a value to a required prop. Next, we will learn how to set
    the default value for a prop and see why it is a good practice to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the default props value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are situations where setting the default value for a prop is good practice
    to follow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a `PaginatedList` component, for instance. This component takes a list
    of `items`, a `limit` number of items to display, and an `offset` number. Then
    it will display a subset of items – `currentWindow` – based on the `limit` and
    `offset` values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Instead of passing the values of `limit` and `offset` every time, it might be
    better to set `limit` to a default value (like `2`) and `offset` to `0` (this
    means that by default, we show the first page, which contains `2` results).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can implement this change using the default property for each prop definition
    object as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Then in `App.vue`, we can use `PaginatedList` without passing `limit` and `offset`.
    Vue automatically falls back to the default values in case no value is passed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'The browser will display only the first two items, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.13 – Output of a snack list with first two items only by default](img/B18645_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.13 – Output of a snack list with first two items only by default
  prefs: []
  type: TYPE_NORMAL
- en: When you pass values for `offset` or `limit`, Vue will use these values instead
    of the defaults and render the component accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In cases where a prop is an array or an object, we can’t assign its `default`
    value with a static array or object. Instead, we need to assign it a function
    that returns the desired default value. We can set the `default` value of `items`
    from the `PaginatedList` component to an empty array, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have learned how to set default values for component props.
    Note here that once you set a `default` value, you don’t need to set `required`
    field anymore. We can use a `default` value to ensure our props are always with
    values, regardless of whether this is required or optional.
  prefs: []
  type: TYPE_NORMAL
- en: Registering props in <script setup> (setup hook)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you use `<script setup>`, since there is no options object, we can’t define
    the component’s props using the `props` field. Instead, we use the `defineProps()`
    function from the `vue` package and pass all the relevant props’ definitions to
    it, just as we did with the `props` field. For example, in the `MessageEditor`
    component, we can rewrite the event registering with `defineEmits()` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '`defineProps()` returns an object containing all the props’ values. We can
    then access a prop such as `items` using `props.items` instead within the `script`
    section, and `items` as usual in the `template` section. In the previous example,
    we also use `computed()` to declare a reactive data `currentWindow` for this component,
    the usage of which we will discuss further in [*Chapter 5*](B18645_05.xhtml#_idTextAnchor193),
    *The* *Composition API*.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s practice writing component props with defaults, types, and validators
    in the next exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4.03 – Validating an Object property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will write a `Repeat` component that accepts a `config`
    data prop for passing `times`, which is a `Number`, and `content`, which is a
    `String`.
  prefs: []
  type: TYPE_NORMAL
- en: We will write a custom validator to make sure `times` and `content` exist and
    are of the correct type.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter04/Exercise4.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter04/Exercise4.03).
  prefs: []
  type: TYPE_NORMAL
- en: 'Work through the following steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point. Otherwise,
    within the root folder of the code repository, navigate to the `Chapter04/Exercise4.03`
    folder using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (using the `code .` command within the
    project directory) or in your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file named `Repeat.vue` in the `./``src/components` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define a prop `config` for `Repeat.vue`. This prop will be of the `Object`
    type, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Config` contains two fields – `times` and `content`. We compute a reactive
    data array called `repetitions` for the `Repeat` component with its length based
    on `config.times`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up `<template>` so that it renders `config.content` for each of the `repetitions`
    items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to ensure that `content` and `times` will receive the correct value
    by implementing a `validator` for `config`. The `validator` will check whether
    the received value’s `times` and `content` `typeof` are of `number` and `string`,
    respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we import and use `Repeat` in `src/App.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Unfortunately, this will not render anything since `config` is an empty object.
    You will observe a warning in the console, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.14 – Console warning due to the config prop’s custom validator check
    failing](img/B18645_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.14 – Console warning due to the config prop’s custom validator check
    failing
  prefs: []
  type: TYPE_NORMAL
- en: 'We will see this same error in the following cases:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We only add a `times` property, that is, `<Repeat :config="{ times: 3 }" />`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We only add a `content` property, that is, `<Repeat :config="{ content: ''Repeat
    me.'' }" />`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`times` is of the wrong type, that is, `<Repeat :config="{ times: ''3'', content:
    ''Repeat me.'' }" />`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content` is of the wrong type property, that is, `<Repeat :config="{ times:
    3, content: 42 }" />`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For `Repeat` to work correctly, we can amend the line consuming it in `template`
    to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This shows no errors in the console and renders `Repeat me.` three times, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: We have demonstrated how we use a validator to better define components with
    props.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will have a deep dive into slots, a mechanism we use
    to compose our components by deferring template logic.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding slots, named slots, and scoped slots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Slots** are sections of a component where the template/rendering is delegated
    back to the parent of the component. We can consider slots as templates or markup
    that are passed from a parent to a child for rendering in its main template.'
  prefs: []
  type: TYPE_NORMAL
- en: Passing markup to a component for rendering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The simplest type of slot is the default child slot.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can define a `Box` component with a slot as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: 'The following markup is for the parent component (`src/App.vue`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will render the following text in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is no template content passed to `Box`, Vue will fall back to the
    default template defined in the `Box` component, which is the following text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: Behind the scenes, Vue compiles the `template` section of `Box` and replaces
    `<slot />` with the content wrapped inside `<Box />` from the parent (`App`).
    The scope of the replaced content, however, stays within the parent’s scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will render `count` per its value in the parent component.
    It does not have access to the `Box` instance data or props and will generate
    the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.15 – Initial h3 with a count of 0, per the initial data in the parent
    component](img/B18645_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.15 – Initial h3 with a count of 0, per the initial data in the parent
    component
  prefs: []
  type: TYPE_NORMAL
- en: 'Incrementing the `count` from the parent updates the template content, since
    the `count` variable in the template passed to `Box` was bound to data on the
    parent. This will generate the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.16 – h3 with a count of 5 after five increments of the count in
    the parent component’s scope](img/B18645_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.16 – h3 with a count of 5 after five increments of the count in the
    parent component’s scope
  prefs: []
  type: TYPE_NORMAL
- en: Slots are a way to let the parent have control over rendering a section of a
    child’s template. Any references to instance properties, data, or methods will
    use the parent component instance. This type of slot does not have access to the
    child component’s properties, props, or data.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at how to use named slots to render multiple
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Using named slots to delegate rendering of multiple sections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use named slots when a child component wants to allow its parent to customize
    the multiple sections in its template.
  prefs: []
  type: TYPE_NORMAL
- en: For example, an `Article` component might delegate rendering of `title` and
    `excerpt` to its parent.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we will use multiple `slot` and assign each with an appropriate
    `name` attribute value, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: By doing so, we allow the parent of `article` to override the slots named `title`
    and `excerpt` with its desired UI templates.
  prefs: []
  type: TYPE_NORMAL
- en: To pass content to the desired slot, we use `template` with the `v-slot:name`
    directive (where `name` should be replaced with the slot’s name).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, for the slot named `title`, we will use `v-slot:title`, while
    for the `excerpt` slot, we will use `v-slot:excerpt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: 'When the preceding application is seen in the browser, it will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.17 – Article using named slots to render templates defined by the
    parent](img/B18645_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.17 – Article using named slots to render templates defined by the parent
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the named slots do indeed render the expected content.
  prefs: []
  type: TYPE_NORMAL
- en: 'The shorthand syntax for `v-slot:slot-name` is `#slot-name`. We can refactor
    our template that consumes `Article` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'Note here that `v-slot` cannot be used with native elements. You can only use
    it with `template` and /or with the component itself. For example, the following
    `<template>` section attempts to set a `v-slot` on a `h3` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'This template will fail with a compilation error of `v-slot can only be used
    on components or <template>`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.18 – v-slot on a native element – compilation error](img/B18645_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.18 – v-slot on a native element – compilation error
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Everything that applies to the default slot applies to named slots. In fact,
    the default slot is a named slot called `default`. This means that named slots
    also have access to the parent instance but not the child instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default slot is just a slot named `default` and we can define it with no
    name. The `default` slot is implicitly inferred as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also denote the default slot with shorthand slot notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'Or we can denote the default slot with longhand slot notation as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: We have now seen how named slots allow components to delegate templating of
    certain sections to a consumer, as well as how these named slots can have a default
    template to cater for cases where a named slot is optional.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how scoped slots are used to wrap prop-passing
    logic.
  prefs: []
  type: TYPE_NORMAL
- en: Using scoped slots to wrap prop-passing logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The types of slots we have explored so far only have access to the component
    instance where slot template content is passed – the parent component.
  prefs: []
  type: TYPE_NORMAL
- en: In many scenarios, it is handier to let the parent component decide how to render
    the UI while letting the child component handle the data and pass it to the slot.
    We use scoped slots for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: A `slot` element receives props and passes them to the related template content
    by using `v-bind` or the shorthand, `:`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code example, we bind the slot’s `item` prop to `el`, which
    is an element of the `currentWindow` data in the `PaginatedList` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'On the consumer side (the parent component), Vue renders the template for that
    slot with a props object containing all the data props passed to the slot from
    the child component. We need to let Vue know what data prop we want to access
    within a template content by specifying it with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, we can specify the name of the props object to be used within the template
    content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: Then within the template content, we can access a data prop by using `propName`
    or `slotProps.propName`, depending on which approach you use. Note here that you
    can change the `propName` value to any prop’s name, and the same goes for `slotProps`.
    If the slot doesn’t have a name, we will use `default` to denote `slot-name` instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to access the `item` data prop passed to the slot in `PaginatedList`,
    we add the following to its parent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `template` section in `App.vue` with the parent of `PaginatedList` will
    now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 'The `script` section (with snacks to render) will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.19 – Snacks displayed using a scoped slot](img/B18645_04_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.19 – Snacks displayed using a scoped slot
  prefs: []
  type: TYPE_NORMAL
- en: And we have learned how scoped slots give components increased flexibility to
    delegate templating logic to consumers.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s learn how to implement a card component with the help of these named
    slots.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4.04 – Implementing a card component using named slots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will implement a card component using named slots. The
    card will have a title, image, and description sections. We will use slots to
    allow `title`, `image`, and `description` to be defined by a parent component.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter04/Exercise4.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter04/Exercise4.04).
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate to the `Chapter04/Exercise4.04`
    folder using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory), or in your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will start by creating a new `src/components/Card.vue` component that has
    a template that supports three named slots – `title`, `image`, and `description`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will then import our `Card.vue` component into the `script` section of a
    new `src/App.vue` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now use `Card` in our `template`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the app, and the output will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.20 – Card component with an image, title, and description](img/B18645_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.20 – Card component with an image, title, and description
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have learned how different types of slots can help to create more
    generic components. Slots allow child components to defer the rendering of certain
    parts of themselves to their parent component (consumer).
  prefs: []
  type: TYPE_NORMAL
- en: As we learned, Vue provides an abstraction layer over the actual DOM. When it’s
    crucial to access the DOM’s elements directly, such as to integrate a DOM library,
    Vue provides a first-class way to do so with refs. We will learn about Vue references
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Vue refs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Vue, **refs** are references to DOM elements or other component instances
    that have been mounted to the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: One of the major use cases for refs is direct DOM manipulation and integration
    with DOM-based libraries (that usually take a DOM node they should mount to),
    such as an animation library.
  prefs: []
  type: TYPE_NORMAL
- en: 'We define refs by using the syntax `ref="name"` on a native element or child
    component in the template. In the following example, we will add a reference to
    the input element under the name `theInput`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: Refs can be accessed from the Vue component instance through `this.$refs[refName]`.
    So, in the preceding example, where we had a ref defined as `ref="theInput"`,
    it can be accessed through `this.$refs.theInput`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s programmatically focus on the `input` field when clicking the **Focus
    Input** button, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: 'When clicking the **Focus Input** button, the input field will be focused,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.21 – Input focused on a button click](img/B18645_04_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.21 – Input focused on a button click
  prefs: []
  type: TYPE_NORMAL
- en: Note here that we can only access `$refs` once the component is mounted to the
    DOM. Hence `this.$refs.theInput` in our example is only available in the `mounted()`
    life cycle hook. Also, if you use `<script setup>`, there is no `$refs` available
    since there is no `this` and `setup` runs before the component instance is created.
    Hence to use DOM references with `<script setup>` or the setup hook, we use the
    `ref()` function from the Composition API instead, which we will discuss further
    in [*Chapter 5*](B18645_05.xhtml#_idTextAnchor193), *The* *Composition API*.
  prefs: []
  type: TYPE_NORMAL
- en: We have learned how to use `$refs` to access the DOM elements from the component.
    When you need select a DOM node directly, we recommend you use a `ref` instead
    of using the DOM API (`querySelector`/`querySelectorAll`).
  prefs: []
  type: TYPE_NORMAL
- en: In the following exercise, we will learn how the `Countable` library helps increase
    interactivity in a project.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4.05 – Wrapping Countable.js in Vue application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Countable` is a library that, given an element (usually an HTML `textarea`
    or input), will add live counts of paragraphs, words, and characters. Live metrics
    on the text being captured can be quite useful to increase interactivity in a
    project where editing text is a core concern.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the large use cases of refs in Vue is to be able to integrate with libraries
    that act directly on the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we will create a component with paragraph/word/character-counting
    functionality for content in a `textarea` by using `Countable.js` and Vue refs.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter04/Exercise4.05](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter04/Exercise4.05).
  prefs: []
  type: TYPE_NORMAL
- en: 'Work through the following steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate to the `Chapter04/Exercise4.05`
    folder using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (using the `code .` command within the
    project directory), or in your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new `src/components/TextEditorWithCount.vue` component with a `textarea`
    that we will have a `ref` to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will import and render the component in `src/App.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The application renders a `textarea` field, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.22 – A bare textarea field, as rendered by the application](img/B18645_04_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.22 – A bare textarea field, as rendered by the application
  prefs: []
  type: TYPE_NORMAL
- en: 'We now need to integrate `Countable`. We will import it and initialize it with
    `this.$refs.textArea`. We will also store the counts on the instance as `this.count`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With a small update to `template`, we can display the counts we care about:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can see the counts set to `0` when `textarea` is empty, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.23 – textarea with counts set to 0 when empty](img/B18645_04_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.23 – textarea with counts set to 0 when empty
  prefs: []
  type: TYPE_NORMAL
- en: 'If we drop some *Lorem ipsum* filler text into our `textarea`, the counts will
    update accordingly, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.24 – textarea with counts updated when filled](img/B18645_04_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.24 – textarea with counts updated when filled
  prefs: []
  type: TYPE_NORMAL
- en: 'One last thing we need to do is remove the `Countable` event listener when
    the component is unmounted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE267]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This integration of a JavaScript/DOM library inside a Vue app is a key application
    of Vue refs. Refs allow us to pick from the existing ecosystem of libraries and
    wrap or integrate them into a component.
  prefs: []
  type: TYPE_NORMAL
- en: Vue refs are useful for integrating DOM libraries or for accessing DOM APIs
    directly.
  prefs: []
  type: TYPE_NORMAL
- en: To round off our examination of component composition, we need to know how to
    pass data from child components back to their parents, which we will explore next.
  prefs: []
  type: TYPE_NORMAL
- en: Using events for child-parent communication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already seen that props are used to pass data from a parent component
    to a child component. To pass data from a child component back to a parent component,
    Vue offers custom events.
  prefs: []
  type: TYPE_NORMAL
- en: In a component, we can emit an event using the `$emit` method; with `this.$emit('eventName',
    payload)` within `<script>`; or just with `$emit` within the `template` section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming we have got a reactive instance property, `this.message`, we could
    emit a `send` event with the `message` value in the `script` section using `this.$emit`.
    This could be the basis for a `MessageEditor` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same scenario, we could trigger a `send` event from the `template` section
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: From a parent component, we can use `v-on:event-name` or the shorthand `@event-name`.
    `event-name` must match the name passed to `$emit`. Note `eventName` and `event-name`
    are not equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, in the parent component we want to listen to the `send` event
    and modify some data accordingly. We bind `@send` with some event handler logic,
    which can be a JavaScript expression or a method declared using `methods`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Vue will trigger this event handler and pass the event’s payload object to
    it when applicable. You can use `$event` in the JavaScript expression of the template
    as the payload, as shown in the following example of the `template` section in
    `App`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also extract the JavaScript expression to a component’s `updateParentMessage`
    method and bind it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: 'Using either approach yields the same result. The full app should look as follows
    in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.25 – Hello World! message being emitted from child-parent](img/B18645_04_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.25 – Hello World! message being emitted from child-parent
  prefs: []
  type: TYPE_NORMAL
- en: Custom events support passing any JavaScript type as the payload. The event
    name, however, must be a `String`.
  prefs: []
  type: TYPE_NORMAL
- en: Registering events with <script setup> (or setup hook)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you use `<script setup>`, since there is no component’s options object, we
    can’t define custom events using the `emits` field. Instead, we use the `defineEmits()`
    function from the `vue` package and pass all the relevant events’ definitions
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in the `MessageEditor` component, we can rewrite the event-registering
    functionality with `defineEmits()` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '`defineEmits()` returns a function that we can trigger in the same concept
    with `this.$emits`. We will certainly need to use `ref()` to declare a reactive
    data `message` for this component, the usage of which we will discuss further
    in [*Chapter 5*](B18645_05.xhtml#_idTextAnchor193), *The* *Composition API*.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s complete an activity based on everything we’ve learned so far.
  prefs: []
  type: TYPE_NORMAL
- en: Activity 4.01 – A local message view with reusable components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To access the code file for this activity, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter04/Activity4.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter04/Activity4.01)
  prefs: []
  type: TYPE_NORMAL
- en: This activity aims to leverage components, props, events, and refs to render
    a chat interface where the user can add messages and have them displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `MessageEditor` component (in `src/components/MessageEditor.vue`) that
    displays a `textarea` field to the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `message` reactive instance variable to `MessageEditor`, defaulted to
    `''`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Listen to `change` events for `textarea` and set the value of `message` to the
    value of the content of `textarea` (it is exposed as the value of the event).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `Send` button that, on `click`, emits a `send` event with `message` as
    the payload.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `main` component to `src/App.vue` that renders `MessageEditor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `App`, listen to `send` events from `MessageEditor` and store each message
    in a `messages` reactive data variable (`messages` is an array).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `MessageFeed` (in `src/components/MessageFeed.vue`) that has a required
    `messages` prop, which is an array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `MessageFeed`, render each passed message from the `messages` prop in a paragraph
    (the `p` element).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import and render `MessageFeed` into `App`, binding the `messages` app instance
    variable as the `messages` prop of `MessageFeed`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Improve `MessageEditor` so that the message is reset and focused after the message
    is sent. To do this, we will need to set `textarea.value` using a ref, reset the
    `message` instance variable accordingly, and use `textarea.focus()` to focus on
    `textarea` programmatically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The easier way to reset `textarea` would have been to use `v-model="message"`
    in the first place instead of binding `@change` and manually syncing `textarea.value`
    to `message`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The expected output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.26 – Message app with Hello World! and Hello JavaScript! sent](img/B18645_04_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.26 – Message app with Hello World! and Hello JavaScript! sent
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we have explored how to enable data communication between
    components using props and custom events. We explored slots and saw how we enable
    UI template customization for a component from its parent. We also learned how
    to use refs to unlock integration opportunities with third-party JavaScript or
    DOM libraries by allowing us to access DOM elements directly.
  prefs: []
  type: TYPE_NORMAL
- en: We’re now able to create and compose components that clearly define their interfaces
    with inputs (props and slots) and outputs (rendered templates and events), while
    also visiting commonly faced use cases (such as wrapping a DOM library).
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll look at advanced component composition patterns and
    techniques that enable better code reuse.
  prefs: []
  type: TYPE_NORMAL
