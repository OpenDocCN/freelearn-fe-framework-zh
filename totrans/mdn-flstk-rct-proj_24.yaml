- en: '19'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '19'
- en: Deploying a Next.js App
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署Next.js应用
- en: After learning about advanced Next.js concepts, it’s time to learn how to deploy
    a Next.js app. The easiest way to deploy Next.js apps is by using the Vercel platform,
    provided by the company that develops the Next.js framework. After learning how
    to deploy our app on the Vercel platform, we are going to learn how to create
    a custom deployment setup using Docker.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习完高级Next.js概念之后，现在是时候学习如何部署Next.js应用了。部署Next.js应用最简单的方式是使用由Next.js框架开发公司提供的Vercel平台。在学会如何在Vercel平台上部署我们的应用之后，我们将学习如何使用Docker创建自定义部署设置。
- en: 'In this chapter, we are going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Deploying a Next.js app with Vercel
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vercel部署Next.js应用
- en: Creating a custom deployment setup for Next.js apps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Next.js应用创建自定义部署设置
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Before we start, please install all requirements from [*Chapter 1*](B19385_01.xhtml#_idTextAnchor016)*,
    Preparing for Full-Stack Development*, and [*Chapter 2*](B19385_02.xhtml#_idTextAnchor028)*,
    Getting to Know Node.js* *and MongoDB*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，请安装[*第1章*](B19385_01.xhtml#_idTextAnchor016)“为全栈开发做准备”和[*第2章*](B19385_02.xhtml#_idTextAnchor028)“了解Node.js和MongoDB”中提到的所有要求。
- en: The versions listed in those chapters are the ones used in the book. While installing
    a newer version should not be an issue, please note that certain steps might work
    differently on a newer version. If you are having an issue with the code and steps
    provided in this book, please try using the versions mentioned in [*Chapter 1*](B19385_01.xhtml#_idTextAnchor016)and
    *2.*
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 列出那些章节中的版本是书中使用的版本。虽然安装较新版本通常不会有问题，但请注意，某些步骤在较新版本上可能工作方式不同。如果你在使用本书提供的代码和步骤时遇到问题，请尝试使用[*第1章*](B19385_01.xhtml#_idTextAnchor016)和*第2章*中提到的版本。
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch19](https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch19).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在GitHub上找到本章的代码：[https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch19](https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch19)。
- en: 'The CiA video for this chapter can be found at: [https://youtu.be/ERBFy5mHwek](https://youtu.be/ERBFy5mHwek).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的CiA视频可以在以下网址找到：[https://youtu.be/ERBFy5mHwek](https://youtu.be/ERBFy5mHwek)。
- en: Deploying a Next.js app with Vercel
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vercel部署Next.js应用
- en: 'We are going to start by deploying our app on Vercel, a platform where we can
    deploy our apps for free in a simple and convenient way. Follow these steps to
    get started deploying our Next.js app with Vercel:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先在Vercel上部署我们的应用，这是一个我们可以免费简单方便地部署应用的平台。按照以下步骤开始部署我们的Next.js应用：
- en: 'Copy the existing **ch18** folder to a new **ch19** folder by running the following
    command:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令将现有的**ch18**文件夹复制到新的**ch19**文件夹：
- en: '[PRE0]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Open the **ch19** folder in VS Code.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code中打开**ch19**文件夹。
- en: 'Install the Vercel CLI tool as a global package with the following command:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令将Vercel CLI工具作为全局包安装：
- en: '[PRE1]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Run the Vercel CLI:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行Vercel CLI：
- en: '[PRE2]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You will be asked to log in to Vercel. Select either of the login methods and
    follow the steps provided by Vercel to log in.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将被要求登录到Vercel。选择任意一种登录方式，并按照Vercel提供的步骤进行登录。
- en: After successfully logging in, you will be asked questions about the deployment
    of your project, confirm all of them with the default values provided by pressing
    *Enter*/*Return* until the Vercel CLI attempts to build your project.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录成功后，你将被询问有关项目部署的问题，通过按*Enter*/*Return*键确认所有问题，直到Vercel CLI尝试构建你的项目。
- en: '![Figure 19.1 – Attempting to deploy our app to Vercel](img/B19385_19_1.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图19.1 – 尝试将我们的应用部署到Vercel](img/B19385_19_1.jpg)'
- en: Figure 19.1 – Attempting to deploy our app to Vercel
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.1 – 尝试将我们的应用部署到Vercel
- en: 'While the project is building, you can visit the URL provided in the CLI to
    see the current state of the build process (make sure you are logged in to Vercel
    in the same browser), as shown in the following screenshot:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目构建过程中，你可以访问CLI提供的URL查看构建过程的当前状态（确保你在同一浏览器中登录到Vercel），如下截图所示：
- en: '![Figure 19.2 – Monitoring the build process in the browser](img/B19385_19_2_new.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图19.2 – 在浏览器中监控构建过程](img/B19385_19_2_new.jpg)'
- en: Figure 19.2 – Monitoring the build process in the browser
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.2 – 在浏览器中监控构建过程
- en: Unfortunately, the build fails because the **DATABASE_URL** environment variable
    is set to **mongodb://localhost:27017/blog**.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 很遗憾，构建失败是因为**DATABASE_URL**环境变量设置为**mongodb://localhost:27017/blog**。
- en: We now need to adjust this environment variable in Vercel.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要调整 Vercel 中的这个环境变量。
- en: Setting environment variables in Vercel
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Vercel 中设置环境变量
- en: 'Follow these steps to set up the necessary environment variables in Vercel:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在 Vercel 中设置必要的环境变量：
- en: Re-use the existing database cluster created in MongoDB Atlas or follow the
    steps in the *Creating a MongoDB Atlas database* section of [*Chapter 5*](B19385_05.xhtml#_idTextAnchor090)
    to create a new database cluster. You should now have a connection string for
    your database.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新使用在 MongoDB Atlas 中创建的现有数据库集群，或者按照[*第 5 章*](B19385_05.xhtml#_idTextAnchor090)中“创建
    MongoDB Atlas 数据库”部分的步骤创建一个新的数据库集群。你现在应该已经有了数据库的连接字符串。
- en: 'Verify that the connection string works by executing the following command:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令来验证连接字符串是否有效：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you are re-using the existing database cluster, make sure to clear the database/collections,
    as the posts and users used to have a slightly different format in [*Chapter 5*](B19385_05.xhtml#_idTextAnchor090)!
    Run the following commands inside the MongoDB Shell to clear the collections:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你正在重新使用现有的数据库集群，请确保清除数据库/集合，因为帖子和使用者在[*第 5 章*](B19385_05.xhtml#_idTextAnchor090)中略有不同的格式！在
    MongoDB Shell 中运行以下命令以清除集合：
- en: '[PRE4]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Go to [https://vercel.com/](https://vercel.com/) and log in with the same login
    provider you used earlier.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 [https://vercel.com/](https://vercel.com/) 并使用你之前使用的相同登录提供者登录。
- en: 'You should see an overview of your projects, including the **ch19** project
    we created earlier via the Vercel CLI, as shown in the following screenshot:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该能看到你项目的概览，包括我们之前通过 Vercel CLI 创建的**ch19**项目，如下面的截图所示：
- en: '![Figure 19.3 – The Vercel dashboard](img/B19385_19_3.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 19.3 – Vercel 控制台](img/B19385_19_3.jpg)'
- en: Figure 19.3 – The Vercel dashboard
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.3 – Vercel 控制台
- en: 'Click on the **ch19** project, then go to the **Settings** tab, select **Environment
    Variables** on the sidebar, and create a new environment variable by entering
    **DATABASE_URL** as the **Key** and the previously obtained connection string
    as **Value**, as shown in the following screenshot:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**ch19**项目，然后转到**设置**标签，在侧边栏中选择**环境变量**，通过输入**DATABASE_URL**作为**键**和之前获得的连接字符串作为**值**来创建一个新的环境变量，如下面的截图所示：
- en: '![Figure 19.4 – Adding an environment variable in Vercel](img/B19385_19_4.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 19.4 – 在 Vercel 中添加环境变量](img/B19385_19_4.jpg)'
- en: Figure 19.4 – Adding an environment variable in Vercel
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.4 – 在 Vercel 中添加环境变量
- en: Note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For production apps, you would also set the **JWT_SECRET** environment variable
    to a random secret here. Additionally, you would set the **BASE_URL** environment
    variable to the URL of the production deployment of your app. For example, if
    the public URL of your blog is going to be **https://ch19-omnidan.vercel.app/**,
    you would set the **BASE_URL** to that.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于生产应用，你还会在这里设置**JWT_SECRET**环境变量为一个随机密钥。此外，你还会设置**BASE_URL**环境变量为你应用的部署生产 URL。例如，如果你的博客的公开
    URL 将是**https://ch19-omnidan.vercel.app/**，你将设置**BASE_URL**为该 URL。
- en: Click the **Save** button below the environment variables to save your changes.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击环境变量下方的**保存**按钮以保存你的更改。
- en: 'Run the Vercel CLI again to attempt another deployment:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行 Vercel CLI 以尝试另一次部署：
- en: '[PRE5]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Alternatively, you can trigger a rebuild from the Vercel web UI.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，你可以从 Vercel 网页界面触发重建。
- en: 'You will see that it deploys successfully now, visit the **Preview** URL provided
    by the Vercel CLI in your browser to see our blog application loading successfully:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到现在部署成功，访问 Vercel CLI 提供的**预览** URL，在你的浏览器中查看我们的博客应用成功加载：
- en: '![Figure 19.5 – Working “Preview” deployment of our app](img/B19385_19_5.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 19.5 – 我们应用的“预览”部署工作情况](img/B19385_19_5.jpg)'
- en: Figure 19.5 – Working “Preview” deployment of our app
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.5 – 我们应用的“预览”部署工作情况
- en: Interestingly, Vercel CLI now made a **Preview** deployment for us. This is
    the default behavior in Vercel. It will first deploy to a **Preview** environment,
    where we can test everything out to make sure our app works fine. The **Preview**
    environment is only accessible if you are logged in via Vercel. We can also invite
    others to test our app here and add comments to it via the Vercel toolbar at the
    bottom.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，Vercel CLI 现在为我们提供了**预览**部署功能。这是 Vercel 的默认行为。它首先将应用部署到**预览**环境，在那里我们可以测试一切以确保我们的应用运行正常。**预览**环境只有通过
    Vercel 登录才能访问。我们还可以邀请其他人来测试我们的应用，并通过 Vercel 底部的工具栏添加评论。
- en: 'Now that we have confirmed our app works, we can deploy it to production, as
    follows:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 既然我们已经确认了我们的应用可以工作，我们可以将其部署到生产环境，如下所示：
- en: '[PRE6]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following screenshot shows a **Preview** and a **Production** deployment
    being made with the Vercel CLI:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了使用 Vercel CLI 进行的 **预览** 和 **生产** 部署：
- en: '![Figure 19.6 – Deploying our app to “Preview” and “Production” environments
    with the Vercel CLI](img/B19385_19_6.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图 19.6 – 使用 Vercel CLI 将我们的应用部署到“预览”和“生产”环境](img/B19385_19_6.jpg)'
- en: Figure 19.6 – Deploying our app to “Preview” and “Production” environments with
    the Vercel CLI
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 19.6 – 使用 Vercel CLI 将我们的应用部署到“预览”和“生产”环境
- en: Now our app is deployed on the **Production** environment and is accessible
    to anyone, without having to log in via Vercel!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的应用已部署在 **生产** 环境中，任何人都可以访问，无需通过 Vercel 登录！
- en: Note
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The URL provided in the Vercel CLI output is not accessible to anyone; you need
    to use one of the domains specified in the **Domains** section on the Vercel dashboard.
    The default should be **https://ch19-<vercel-username>.vercel.app/**.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Vercel CLI 输出的 URL 对任何人都不可用；您需要使用 Vercel 控制台 **域名** 部分中指定的域名之一。默认应该是 **https://ch19-<vercel-username>.vercel.app/**。
- en: As we can see, deploying our app with Vercel is very easy and convenient. However,
    in some cases, we want to deploy our app on our own infrastructure. Let’s learn
    how to create a custom deployment setup for Next.js apps now.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，使用 Vercel 部署我们的应用非常简单方便。然而，在某些情况下，我们想在自有的基础设施上部署我们的应用。现在让我们学习如何为 Next.js
    应用创建自定义部署设置。
- en: Creating a custom deployment setup for Next.js apps
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Next.js 应用创建自定义部署设置
- en: 'We are now going to learn how to set up a custom deployment for Next.js apps
    using Docker. We have already learned the basics of deploying apps using Docker
    in [*Chapter 5*](B19385_05.xhtml#_idTextAnchor090), so please refer to that chapter
    if anything is unclear, or if you need a refresher on Docker. Let’s get started
    setting up our Next.js app for a Docker deployment now:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将学习如何使用 Docker 为 Next.js 应用设置自定义部署。我们已经在 [*第 5 章*](B19385_05.xhtml#_idTextAnchor090)
    中学习了使用 Docker 部署应用的基础知识，所以如果任何内容不清楚，或者需要 Docker 的复习，请参考该章节。现在让我们开始设置我们的 Next.js
    应用以进行 Docker 部署：
- en: 'First, we need to change the output format for Next.js to **standalone**. This
    option tells Next.js to create a **.next/standalone** folder that only contains
    the necessary files for a production deployment, including only the necessary
    **node_modules**. This folder can then be deployed without having to install **node_modules**
    again. Edit **next.config.mjs** and adjust the config, as follows:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要将 Next.js 的输出格式更改为 **standalone**。此选项告诉 Next.js 创建一个仅包含生产部署所需文件的 **.next/standalone**
    文件夹，包括必要的 **node_modules**。然后，此文件夹可以部署而无需再次安装 **node_modules**。编辑 **next.config.mjs**
    并调整配置，如下所示：
- en: '[PRE7]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we create a **.dockerignore** file to ignore certain files that should
    not be included in our image:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们创建一个 **.dockerignore** 文件来忽略不应包含在我们的镜像中的某些文件：
- en: '[PRE8]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a new **Dockerfile**, start by defining a **base** image from **node:20**:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 **Dockerfile**，首先定义一个来自 **node:20** 的 **base** 镜像：
- en: '[PRE9]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, define a new image for building the app, based on the **base** image:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，定义一个基于 **base** 镜像构建应用的新镜像：
- en: '[PRE10]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Set the working directory to the **/app** folder and copy over the **package.json**
    and **package-lock.json** files:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将工作目录设置为 **/app** 文件夹，并复制 **package.json** 和 **package-lock.json** 文件：
- en: '[PRE11]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, install all dependencies, and additionally install **sharp**, which is
    used by Next.js to resize and optimize images in production:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，安装所有依赖项，并额外安装 **sharp**，这是 Next.js 在生产中用于调整大小和优化图像的库：
- en: '[PRE12]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Copy over all files from our project:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制我们项目中的所有文件：
- en: '[PRE13]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, define the arguments for the build process. We are going to define all
    environment variables here because Next.js also uses them during the build process
    to statically build certain routes:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义构建过程的参数。我们将在这里定义所有环境变量，因为 Next.js 在构建过程中也会使用它们来静态构建某些路由：
- en: '[PRE14]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can now run the **build** command, as follows:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以运行 **build** 命令，如下所示：
- en: '[PRE15]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Define a new image for the final app, based on the **base** image as well:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据基础镜像定义一个新的最终应用镜像：
- en: '[PRE16]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We also define the working directory:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还定义了工作目录：
- en: '[PRE17]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We set up the permissions to run our app as a special **nextjs** user instead
    of root:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们设置了权限，使我们的应用以特殊的 **nextjs** 用户身份运行而不是 root：
- en: '[PRE18]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, copy over the necessary files to run a standalone Next.js server from
    the **build** image:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从 **build** 镜像复制运行独立 Next.js 服务器所需的必要文件：
- en: '[PRE19]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We define the **PORT**, **HOSTNAME**, and **NODE_ENV** variables:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了 **PORT**、**HOSTNAME** 和 **NODE_ENV** 变量：
- en: '[PRE20]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, we execute the standalone Next.js server as the **nextjs** user we defined
    earlier:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们以之前定义的 **nextjs** 用户身份执行独立 Next.js 服务器：
- en: '[PRE21]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Make sure the database server is running in a Docker container.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保数据库服务器正在 Docker 容器中运行。
- en: 'Now we can build the Docker image by running the following command:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以通过运行以下命令来构建 Docker 镜像：
- en: '[PRE22]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can check out the official example **Dockerfile** from Next.js for an up-to-date
    version: [https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile](https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看 Next.js 的官方示例 **Dockerfile** 以获取最新版本：[https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile](https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile)
- en: 'Finally, run a new Docker container, as follows:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，运行一个新的 Docker 容器，如下所示：
- en: '[PRE23]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Visit **http://localhost:3000** and you will see the blog running successfully!
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 **http://localhost:3000**，您将看到博客成功运行！
- en: Now that we have a Docker container, we could deploy it to a cloud service (or
    our own server), just like we did in [*Chapter 5*](B19385_05.xhtml#_idTextAnchor090).
    While it is slightly more effort to set up a custom deployment for a Next.js app,
    it is still quite straightforward to do a simple setup!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了 Docker 容器，我们可以将其部署到云服务（或我们自己的服务器）上，就像我们在[*第 5 章*](B19385_05.xhtml#_idTextAnchor090)中所做的那样。虽然为
    Next.js 应用程序设置自定义部署需要稍微多一点努力，但进行简单的设置仍然相当直接！
- en: 'For more advanced setups, such as multiple instances, you would need to set
    up a shared volume between the instances so the cache and optimized images can
    be shared (on Vercel, this is done automatically behind the scenes). However,
    such a setup is out of the scope of this book. You can check out the Next.js docs
    on self-hosting for more information on how to do this: [https://nextjs.org/docs/app/building-your-application/deploying#self-hosting](https://nextjs.org/docs/app/building-your-application/deploying#self-hosting).'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更高级的设置，例如多个实例，您需要在实例之间设置共享卷，以便缓存和优化后的镜像可以共享（在 Vercel 上，这会在幕后自动完成）。然而，这种设置超出了本书的范围。您可以查看
    Next.js 关于自托管的文档以获取更多关于如何进行此操作的信息：[https://nextjs.org/docs/app/building-your-application/deploying#self-hosting](https://nextjs.org/docs/app/building-your-application/deploying#self-hosting)。
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we first learned how to deploy a Next.js app using Vercel.
    Then, we learned how to create a custom deployment setup using Docker.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先学习了如何使用 Vercel 部署 Next.js 应用程序。然后，我们学习了如何使用 Docker 创建自定义部署设置。
- en: In the next and final chapter, [*Chapter 20*](B19385_20.xhtml#_idTextAnchor350)*,
    Diving Deeper into Full-stack Development*, we are going to briefly cover various
    advanced full-stack development topics that have been left out of this book so
    far, giving you an idea of how to continue your journey of learning full-stack
    web development with React.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章和最后一章，[*第 20 章*](B19385_20.xhtml#_idTextAnchor350)“深入全栈开发”，我们将简要介绍本书迄今为止未涉及的各种高级全栈开发主题，让您了解如何继续使用
    React 学习全栈 Web 开发的旅程。
