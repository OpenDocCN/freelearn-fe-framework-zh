["```js\n  \"dependencies\": {\n    \"@material-ui/core\": \"^1.4.2\",\n    \"@material-ui/icons\": \"^2.0.1\",\n    \"react\": \"^16.4.2\",\n    \"react-dom\": \"^16.4.2\",\n    \"recharts\": \"^1.1.0\",\n    \"uuid\": \"^3.3.2\"\n  },\n```", "```js\n  function setOneDollarIncome() {\n    user.click(screen.getByText(/set income/i));\n    user.type(screen.getByRole('spinbutton'), '1');\n    user.click(screen.getByText(/submit/i));\n  }\n```", "```js\n  test('SetIncome, given income amount, sets income', () => {\n    render(<App />);\n    setOneDollarIncome();\n    const leftOverBudget = screen.getByText(/left over:/i);\n    const leftOverBudgetAmount = within(leftOverBudget).       getByText(/\\$1/i);\n    expect(leftOverBudgetAmount).toBeInTheDocument();\n    expect(\n      screen.getByRole('heading', { name: /income: \\$1/i })\n    ).toBeInTheDocument();\n  });\n```", "```js\n<p class=\"MuiTypography-root BudgetSummary-leftoverText-4   MuiTypography-body1\">\n  Left over: <span class=\"BudgetSummary-profit-6\">$1</span>\n</p>\n```", "```js\n  function createCarBudget(amount = '5') {\n    user.click(screen.getByText(/create new budget/i));\n    user.selectOptions(screen.getByRole('combobox', { name: /       category/i }), [\n      screen.getByText('Auto'),\n    ]);\n    user.type(screen.getByRole('spinbutton'), amount);\n    user.click(screen.getByText(/add budget/i));\n  }\n```", "```js\n    test.each`\n      budgetAmount | spending           | leftOver\n      ${'4'}       | ${'Spending: $5'}  | ${'$-4'}\n      ${'5'}       | ${'Spending: $5'}  | ${'$-4'}\n      ${'6'}       | ${'Spending: $10'} | ${'$-9'}\n    `(\n      'given budget, updates budget summary',\n      ({ budgetAmount, spending, leftOver }) => {\n```", "```js\n        render(<App />);\n        setOneDollarIncome();\n        createCarBudget(budgetAmount);\n        const leftOverBudget = screen.getByText(/left over:/i);\n        const leftOverBudgetAmount = within(leftOverBudget).           getByText(leftOver);\n```", "```js\n        expect(leftOverBudgetAmount).toBeInTheDocument();\n        expect(\n          screen.getByRole('heading', { name: spending })\n        ).toBeInTheDocument();\n      }\n    );\n```", "```js\n  test('DeleteBudget, given deleted budget, budget removed from      DOM', () => {\n    render(<App />);\n    setOneDollarIncome();\n    createCarBudget();\n    user.click(screen.getByLabelText(/trash can/i));\n    expect(screen.queryByRole('listitem')).not.       toBeInTheDocument();\n  });\n```", "```js\n    test('given budget expense, updates budget progress', async        () => {\n      render(<App />);\n      setOneDollarIncome();\n      createCarBudget();\n      user.click(screen.getByRole('button', { name: /         arrowright/i }));\n      expect(\n        screen.getByRole('heading', { name: /\\$5 of \\$5/i })\n      ).toBeInTheDocument();\n    });\n```", "```js\nIntegration: Budget App › SetIncome, given income amount, sets income\n    TestingLibraryElementError: Unable to find an accessible       element with the role \"heading\" and name `/income: \\$1/i`\nIntegration: Budget App › Budget › given budget, displays details\n    TestingLibraryElementError: Unable to find an accessible       element with the role \"heading\" and name `/\\$0 of \\$5/i`\nIntegration: Budget App › Budget › given budget expense, updates budget progress\n    TestingLibraryElementError: Unable to find an accessible       element with the role \"heading\" and name `/\\$5 of \\$5/i`\nIntegration: Budget App › CreateNewBudget › given budget, updates budget summary\n    TestingLibraryElementError: Unable to find an accessible       element with the role \"heading\" and name \"Spending: $10\"\n    TestingLibraryElementError: Unable to find an accessible       element with the role \"heading\" and name \"Spending: $5\"\n```", "```js\nWarning: Failed prop type: Invalid prop `spacing` of value `24` supplied to `ForwardRef(Grid)`, expected one of [0,1,2,3,4,5,6,7,8,9,10].\nWarning: Failed prop type: Invalid prop `variant` of value `title` supplied to `ForwardRef(Typography)`, expected one of [\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"subtitle1\",\"subtitle2\",\"body1\",\"body2\",\"caption\",\"button\",\"overline\",\"srOnly\",\"inherit\"].\nWarning: Failed prop type: Invalid prop `variant` of value `subheading` supplied to `ForwardRef(Typography)`, expected one of [\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"subtitle1\",\"subtitle2\",\"body1\",\"body2\",\"caption\",\"button\",\"overline\",\"srOnly\",\"inherit\"].\nMaterial-UI: theme.spacing.unit usage has been deprecated.\nIt will be removed in v5.\nYou can replace `theme.spacing.unit * y` with `theme.spacing(y)`.\n```", "```js\n(src/components/SetIncome.js:27:26)\n```", "```js\n  test('SetIncome, given income amount, sets income', () => {\n    const wrapper = mount(<App />);\n    wrapper.find('SetIncome').props().setIncome(1);\n    expect(wrapper.find('h3#income').text()).toEqual('Income:       $1');\n  });\n```", "```js\ntest('SetIncome, given income amount, sets income', () => {\n    render(<App />);\n    setOneDollarIncome();\n    const leftOverBudget = screen.getByText(/left over:/i);\n    const leftOverBudgetAmount = within(leftOverBudget).      getByText(/\\$1/i);\n    expect(leftOverBudgetAmount).toBeInTheDocument();\n```", "```js\n      test('given budget, updates budget summary', () => {\n        const wrapper = mount(<App />);\n        const budgetAmount = Math.ceil(parseInt(5, 10) / 5) * 5;\n        wrapper.find('CreateNewBudget').props().addNewBudget({\n          id: '1',\n          category: 'Auto',\n          amount: budgetAmount,\n          amtSpent: 0,\n        });\n  wrapper.find('CreateNewBudget').props().     setTotalSpending(budgetAmount);\n```", "```js\nexpect(wrapper.find('h3#spending').text()).toEqual('Spending:   $5');\nexpect(wrapper.find('span#leftover').text()).toEqual(\"$-5\");\n```", "```js\ntest('given budget, updates budget summary', () => {\n  render(<App />);\n  setOneDollarIncome();\n  createCarBudget(5);\n  const leftOverBudget = screen.getByText(/left over:/i);\n  const leftOverBudgetAmount = within(leftOverBudget).     getByText('df');\n  expect(leftOverBudgetAmount).toBeInTheDocument();\n  expect(screen.getByRole('heading', { name: 'Spending: $5'\n})).toBeInTheDocument();\n});\n```", "```js\n    test('given budget, displays budget chart', () => {\n      const wrapper = mount(<App />);\n      const budgetAmount = Math.ceil(parseInt(5, 10) / 5) * 5;\n      wrapper.find('CreateNewBudget').props().addNewBudget({\n        id: '1',\n        category: 'Auto',\n        amount: budgetAmount,\n        amtSpent: 0,\n      });\n      wrapper.find('CreateNewBudget').props().         setTotalSpending(budgetAmount);\n      wrapper.update();\n```", "```js\n      expect(wrapper.find('div#chart')).toBeTruthy();\n    });\n```", "```js\nimport Enzyme from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nEnzyme.configure({ adapter: new Adapter() });\n```", "```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { act } from 'react-dom/test-utils';\nimport App from './App';\n```", "```js\n  it('SetIncome, given initial render, displays budget summary       values', () => {\n    let container = document.createElement('div');\n    document.body.appendChild(container);\n    act(() => {\n      ReactDOM.render(<App />, container);\n    });\n```", "```js\n    const income = container.querySelector('h3#income');\n    const spending = container.querySelector('#spending');\n    const leftover = container.querySelector('#leftover');\n    expect(income.textContent).toBe('Income: $0');\n    expect(spending.textContent).toBe('Spending: $0');\n    expect(leftover.textContent).toBe('$0');\n```", "```js\n    document.body.removeChild(container);\n```", "```js\nit('SetIncome, given initial render, displays budget summary   values', () => {\n  render(<App />);\n  const income = screen.getByRole('heading', { name: /income:     \\$0/i });\n  const spending = screen.getByRole('heading', { name: /    spending: \\$0/i });\n  const leftover = screen.getByText(/left over:/i);\n  expect(income).toHaveTextContent('Income: $0');\n  expect(spending).toHaveTextContent('Spending: $0');\n  expect(leftover).toHaveTextContent('$0');\n});\n```", "```js\ntest.each`\n  value\n  ${'a'}\n  ${'a@b'}\n  ${'a@b.c'}\n`('displays error message', async ({ value }) => {\n```", "```js\n  'Form, given invalid email value \"$value\", displays error       message',\n```", "```js\n  async ({ value }) => {\n    const { getByRole, getByText } = render(<App />)\n    const emailInput = getByRole('textbox', { name: /email/i })\n    user.click(emailInput)\n    user.tab()\n    user.type(emailInput, value)\n    await waitFor(() => {\n      const errorMessage = getByText(/invalid email address/i)\n      expect(errorMessage).toBeInTheDocument()\n    })\n  }\n)\n```", "```js\n  async ({ value }) => {\n    render(<App />)\n    const emailInput = screen.getByRole('textbox', { name: /      email/i })\n    user.click(emailInput)\n    user.tab()\n    user.type(emailInput, value)\n    const errorMessage = await screen.findByText(/invalid email       address/i)\n    expect(errorMessage).toBeInTheDocument()\n  }\n)\n```", "```js\ntest('Form, given blank input value, displays error message',   async () => {\n  render(<App />)\n  const nameInput = screen.getByRole('textbox', { name: /name/i })\n  const emailInput = screen.getByRole('textbox', { name: /    email/i })\n  const ratingSelect = screen.getByRole('combobox', { name: /    rating/i })\n  const commentsInput = screen.getByRole('textbox', { name: /    comments/i })\n```", "```js\n  user.click(nameInput)\n  user.click(emailInput)\n  user.click(ratingSelect)\n  user.click(commentsInput)\n  user.tab()\n```", "```js\n  expect(await screen.findByText(/name required/i)).    toBeInTheDocument()\n  expect(await screen.findByText(/email required/i)).    toBeInTheDocument()\n  expect(await screen.findByText(/rating required/i)).    toBeInTheDocument()\n  expect(await screen.findByText(/comments required/i)).    toBeInTheDocument()\n```", "```js\n  test.each`\n  inputLabel\n  ${'Name'}\n  ${'Email'}\n  ${'Rating'}\n  ${'Comments'}\n`(\n  'Form, given blank $inputLabel input value, displays error message',\n```", "```js\n  async ({ inputLabel }) => {\n    render(<App />)\n    user.click(screen.getByText(`${inputLabel} *`))\n    user.tab()\n    const errorMessage = await screen.findByText(`${inputLabel}         Required`)\n    expect(errorMessage).toBeInTheDocument()\n  }\n)\n```"]