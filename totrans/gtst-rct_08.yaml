- en: Chapter 8. Testing React Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we have explored React's components lifecycle, properties, state,
    validations, and ECMAScript with respect to React 0.1.13 and future versions.
    In this chapter, we will explore the testing of JavaScript and ReactJS-related
    stuffs. First, we will be going through the testing as a whole using different
    JavaScript test frameworks and how we can run the tests, followed by testing views
    build with the ReactJS library.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the things we will be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing in JavaScript using Chai and Mocha
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ReactTestUtils to test React components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Jest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing React-based app using Expect, Mocha, and Shallow rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are various ways that you can mix and match while testing JavaScript.
    Let's have a brief overview of the various things such as frameworks, assertion
    libraries, and testing tools. The list given here is not an exhaustive one, and
    covering all of them in detail is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: '**Mocha** and **Jasmine** are testing frameworks. They can be used with various
    testing assertion libraries as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`should.js` which is an assertion library. It is framework agnostic and works
    from IE9 and higher. The details of the library can be found from [https://www.npmjs.com/package/should](https://www.npmjs.com/package/should).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chaijs` is also an assertion library, where we add plugins. It also works
    with the testing framework(s). The details of the library can be found online
    from [http://chaijs.com/karma](http://chaijs.com/karma). It is a JavaScript testing
    tool, which enables to test JavaScript codes in browsers. It''s framework agnostic
    (can be used to run Mocha, Jasmine, Qunit, and so on). The details can be found
    at [https://www.npmjs.com/package/karma](https://www.npmjs.com/package/karma).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should be remembered that karma is neither a JavaScript framework like Jasmine
    or Mocha nor an assertion library like `chaijs` or `should.js`. This, we should
    use the assertion library and the framework as required along with karma in order
    to launch the HTTP server so that we can test the JS code in browsers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Jest** is also a framework on Jasmine framework. The Facebook developer team
    suggests the use of Jest for testing React-based applications. According to the
    Jest website ([https://facebook.github.io/jest/](https://facebook.github.io/jest/)),
    these are some advantages of using Jest instead of vanilla jasmine for testing
    purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: Jest provides multiple layers on top of Jasmine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It automatically searches and finds tests for you to execute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It mocks dependencies for you while you run the tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It runs tests in parallel, hence finishing executing them faster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows you to test asynchronous code synchronously
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It enables you to run tests on the command line with the fake DOM implementation
    via jsdom
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing in JavaScript using Chai and Mocha
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed earlier, in order to write test cases for the React code, we will
    be installing some testing libraries to run tests and write assertions. Let's
    walk through the setup for the Chai assertion library and the Mocha testing framework.
    We need to install the libraries with the help of `npm`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the terminal type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`install` shortform: `i`'
  prefs: []
  type: TYPE_NORMAL
- en: '`devDependencies` shortform: `D` (the package will be installed only in a development
    environment)'
  prefs: []
  type: TYPE_NORMAL
- en: After the Chai and Mocha libraries are installed by the previously mentioned
    command, they can be found under the `node_modules` directory.
  prefs: []
  type: TYPE_NORMAL
- en: We need to add the Mocha and Chai entries in our `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: '**Package.json code**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: According to [https://docs.nodejitsu.com/articles/getting-started/npm/what-is-the-file-package-json](https://docs.nodejitsu.com/articles/getting-started/npm/what-is-the-file-package-json)
  prefs: []
  type: TYPE_NORMAL
- en: All `npm` packages contain a file named `package.json`. This file is usually
    found in the project root. This file holds all metadata relevant to the project.
    A `package.json` file is used to offer information to `npm` thus allowing it to
    identify the project as well as handle the project's dependencies efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This depicts the name of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: This is a version of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: This is general description of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`main`: This is the main JavaScript file, which may internally call other JS
    files. In this example, it''s `index.js` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scripts`: This is the script to be executed when we call `npm` start. It should
    execute the test (mocha `test.js` file).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`devDependencies`: These are the packages that are installed in the same directory
    as in `package.json`, unless the `–production` flag is passed on it. The packages
    are not installed on any other directory unless the `–dev` option is passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a `test.js` file. In order to check the setup working properly, we are adding
    a simple single test assertion.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`assertions` are called from Chai.'
  prefs: []
  type: TYPE_NORMAL
- en: '`describe` is called from Mocha framework to describe the tests.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we run the test, from the app''s root directory in terminal, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Testing in JavaScript using Chai and Mocha](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A console screenshot using the Mocha and Chai setup
  prefs: []
  type: TYPE_NORMAL
- en: Testing using ReactTestUtils
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ReactTestUtils is used to test React-based components. It can simulate all the
    JavaScript-based events, which ReactJS supports. The documentation is cited in
    the Facebook developer site ([https://facebook.github.io/react/docs/test-utils.html](https://facebook.github.io/react/docs/test-utils.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The code is as shown for the stimulate function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Installing React and JSX
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned earlier, while installing the Chai and mocha, we are here installing
    React- and JSX-specific test tools (ReactTestUtils) in order to ease our task.
    Let's explore the ReactTestUtils with help from some React-based components and
    stimulate them to test the behavior and functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The following is an example of such a code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to install the `jest` package via `npm` with the following code in
    the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'sudo/root access to the machine/server where the node packages has to be installed
    is required. This is particularly required as the directory where the node is
    installed. We can check the installed directory, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As per the screenshot here, it's installed in the `/usr` directory, which has
    the permissions set to root. Hence, we need to install the `npm` packages using
    the `sudo` option.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing React and JSX](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A console screenshot of the /usr directory file owner/permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way is to set the permission of the `/usr` directory to the user, which
    can have permissions to own and modify the files in the directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Let's try to have a approach of **test-driven development** (**TDD**) , whereby
    we will be creating a failing test case following the actual code to pass.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a JS file, which will greet any name with `hi`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create the `test` file within a directory named `__test__`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s recap about some jest properties, from the earlier-mentioned code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`jest.dontMock` is explicitly mentioned here, as jest by default mocks everything.
    Thus in order to test the actual code without mocking we need to ask jest not
    to mock the code which has to be tested (`greetings.js`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`describe(''greetings'', function())` each describe block is the test suite
    which gets executed when the test runs (`npm test`/`jest`). One describe block
    can have multiple test cases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`it(''greets the name'', function()`, it block the actual test spec/case within
    the describe block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to execute the tests within the _`_test__/` directory, we need to
    have the `package.json` file with the following entries:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will be covering more about packaging in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code for `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Let's have a quick recap of the this code within `package.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once all are ready, we can run the test in the terminal, using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown as here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing React and JSX](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The TDD console screenshot, showing failing tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add the code so that the name is greeted with the name and the
    test passes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we execute the test, we will be seeing a passing test case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing React and JSX](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The TDD console screenshot, using npm test, showing passing tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the other ways to execute the tests is by installing `jest` and executing
    them by calling the jest from the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing React and JSX](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The TDD console screenshot, using jest, showing passing tests.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, we can see with either of the commands `npm test`/`jest`, we are getting
    the same output.
  prefs: []
  type: TYPE_NORMAL
- en: The jestTypical example of a Testsuite with Mocha, expect, ReactTestUtils and
    Babel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see a typical example of `package.json`, which is using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Mocha as a testing framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expect as an assertion library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ReactTestUtils to test react-based JavaScript components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Babel used as a transcompiler, which changes the ES6 codes into currently compatible
    (ES5) JavaScript code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The example of `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As in the previous examples, within the script object, we keep the the test
    files and all the test files follow the convention of ending with the `.test.js`
    extension. Any extension for the test files can be used. For compilation from
    ES6 code to browser compatible JS code, the `–compiler` tag is added in the script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install all the following packages, as here, mentioned in `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Here is the definition of a transpiler. Source [https://en.wikipedia.org/wiki/Source-to-source_compiler](https://en.wikipedia.org/wiki/Source-to-source_compiler)
  prefs: []
  type: TYPE_NORMAL
- en: '*"A source-to-source compiler, transcompiler, or transpiler is a type of compiler
    that takes the source code of a program written in one programming language as
    its input and produces the equivalent source code in another programming language."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The `.babelrc` file contains all the Babel API options. The following is the
    screenshot of the file structures of the app with test suite setup. The details
    can be found in the Babel documentation at [https://babeljs.io/docs/usage/babelrc/](https://babeljs.io/docs/usage/babelrc/).
  prefs: []
  type: TYPE_NORMAL
- en: '![The jestTypical example of a Testsuite with Mocha, expect, ReactTestUtils
    and Babel](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The screenshot showing the dir structure of a typical JS Application with the
    __test__ , node_modules, package.json, and .babelrc
  prefs: []
  type: TYPE_NORMAL
- en: Using the same `greetings.js` file as before but testing with the new ES6 syntax
    in the `greetings.test.js` and `index.test.js` files, let's test the testsuite.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code __test__/greetings.test.js (using ES6 syntax)**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Code __test__/index.test.js (using ES6 syntax)**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![The jestTypical example of a Testsuite with Mocha, expect, ReactTestUtils
    and Babel](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A screenshot showing tests using ES6 syntaxes, mocha, and babel
  prefs: []
  type: TYPE_NORMAL
- en: Executing this test file using ES6 syntaxes with the mocha testing framework,
    expect assertion library and after been transpiled by Babel yielded the same result
    as before.
  prefs: []
  type: TYPE_NORMAL
- en: Testing with shallow rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Shallow rendering** is a method used while testing React components in which
    the component is "one level deep". Such a shallow-rendered test component has
    the facts regarding the returned things with respect to the `render` methods.
    Such components do not have the child components attached to it, and it does not
    require DOM.'
  prefs: []
  type: TYPE_NORMAL
- en: Thus, while testing with a shallow rendering method, it should be remembered
    that any changes in the parent component that has the DOM changes and/or any child
    components been changed may require in rewriting the test.
  prefs: []
  type: TYPE_NORMAL
- en: Let's explore this with help of some code. In the following example, we will
    be creating a React component (`GreetingComponent`) where the `render` method
    will return a `div` with two children (`h2` and `span` elements).
  prefs: []
  type: TYPE_NORMAL
- en: 'The code of `greeting.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Let's write the test for this React code using the shallow rendering method.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code of __test__/greeting.test.js**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The output value is printed in the console. Based on that, we can see the different
    hierarchy and values of the concerned react component. The following is output
    from `console.log` (output)
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing with shallow rendering](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The screenshot showing the renderedOutput() method in the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go a level deep and check the value of the following: `const output
    = renderer.getRenderOutput().props.children`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, we can see the exact two children with their types and values of the
    `GreetingComponent` React `div` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing with shallow rendering](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The screenshot showing the renderedOutput() method of the children in the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the output, we can test both the children (`h2` and `span`) of the
    `div` element of the React `GreetingComponent` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that there are several lines of codes that are common between the
    two `it` blocks. Hence, we can separate these common codes and refactor it as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'While executing the code, we can get the output in a file, with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The following is the output in the `test_output.txt` file. You can play and
    check the different properties of the React elements. The explanation of each
    of them is beyond the scope of this book. But we can see that all React components
    are nothing but JavaScript objects.
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing with shallow rendering](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw how we can test the different components in a React-based application
    and JavaScript as whole. In order to test a JavaScript code, we used chai and
    expect as assertion libraries, jasmine and jest as testing frameworks. To test
    a React application, we used ReactTestUtils and shallow rendering. In the following
    chapter, you will be learning about the deployment process of a React application.
    We will be exploring more about `package.json`, which we touched on in this chapter.
  prefs: []
  type: TYPE_NORMAL
