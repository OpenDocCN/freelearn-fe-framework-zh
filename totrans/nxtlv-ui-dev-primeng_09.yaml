- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Customizing PrimeNG Components with Theming
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用主题定制PrimeNG组件
- en: Every application has its own unique identity, and its visual appeal plays a
    significant role in defining that identity. While functionality is crucial, the
    look and feel of an application can significantly influence user experience. PrimeNG
    offers a robust theming system that allows you to tailor the appearance of components,
    ensuring that the application not only works well but also looks the part.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序都有自己的独特身份，其视觉吸引力在定义该身份方面发挥着重要作用。虽然功能至关重要，但应用程序的外观和感觉可以显著影响用户体验。PrimeNG提供了一个强大的主题系统，允许您定制组件的外观，确保应用程序不仅运行良好，而且看起来也符合要求。
- en: In this chapter, you will explore the process of customizing the appearance
    of PrimeNG components in Angular applications using theming. By mastering those
    techniques, you will gain the ability to tailor the visual presentation of PrimeNG
    components to align with the application’s unique brand and design requirements.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将探索使用主题在Angular应用程序中定制PrimeNG组件外观的过程。通过掌握这些技术，您将能够根据应用程序的独特品牌和设计要求定制PrimeNG组件的视觉表现。
- en: We will also delve into various topics such as working with pre-built themes,
    creating custom themes, leveraging the Theme Designer tool, and overriding component
    styles. You will discover the power and flexibility of theming in PrimeNG and
    learn how to achieve a cohesive and personalized user interface.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将深入探讨各种主题，如使用预构建主题、创建自定义主题、利用主题设计工具以及覆盖组件样式。您将发现PrimeNG主题的强大和灵活性，并学习如何实现统一且个性化的用户界面。
- en: 'The chapter will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introducing PrimeNG theming
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍PrimeNG主题
- en: Working with pre-built themes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用预构建主题
- en: Creating your own custom themes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您自己的自定义主题
- en: Overriding component styles and other tips
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 覆盖组件样式和其他技巧
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter contains various working code samples on PrimeNG theming. You
    can find the related source code in the `chapter-09` folder of the following GitHub
    repository: [https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-09](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-09).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含有关PrimeNG主题的各种工作代码示例。您可以在以下GitHub仓库的`chapter-09`文件夹中找到相关源代码：[https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-09](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-09)。
- en: Introducing PrimeNG theming
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍PrimeNG主题
- en: '**Theming** plays a crucial role in creating visually appealing and consistent
    user interfaces, allowing you to customize the appearance of components to match
    the application’s branding and design requirements. PrimeNG offers a comprehensive
    theming system that empowers you to create personalized and cohesive user interfaces.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**主题**在创建视觉吸引力和一致的用户界面中起着至关重要的作用，允许您根据应用程序的品牌和设计要求自定义组件的外观。PrimeNG提供了一个全面的主题系统，使您能够创建个性化的统一用户界面。'
- en: PrimeNG theming isn’t just about changing colors or fonts, though. It involves
    modifying various aspects of the component’s appearance, such as colors, typography,
    spacing, and other design elements. PrimeNG provides a wide range of tools, resources,
    and guidelines to facilitate the theming process, enabling developers to create
    unique and visually appealing user interfaces.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然PrimeNG主题不仅仅是改变颜色或字体，但它涉及修改组件外观的各个方面，如颜色、字体、间距和其他设计元素。PrimeNG提供了一系列的工具、资源和指南，以简化主题过程，使开发者能够创建独特且视觉上吸引人的用户界面。
- en: 'PrimeNG theming is used in various scenarios, depending on the specific requirements
    of the application. Here are a few common use cases where PrimeNG theming proves
    valuable:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 根据应用程序的具体要求，PrimeNG主题被用于各种场景。以下是一些PrimeNG主题证明非常有价值的使用案例：
- en: '**Branding and customization**: When you need to align the appearance of PrimeNG
    components with your application’s branding guidelines, theming allows you to
    create a consistent and personalized look and feel.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**品牌和定制**：当您需要将PrimeNG组件的外观与您应用程序的品牌指南保持一致时，主题允许您创建一致且个性化的外观和感觉。'
- en: '**Application-specific design**: In some cases, the default styles of PrimeNG
    components may not align with the specific design requirements of your application.
    Theming enables you to modify the appearance of components to match your application’s
    visual design language, ensuring a cohesive and harmonious user interface.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用特定设计**：在某些情况下，PrimeNG 组件的默认样式可能不符合您应用程序特定的设计要求。主题化使您能够修改组件的外观，以匹配您应用程序的视觉设计语言，确保用户界面的一致性和和谐。'
- en: '**Consistent styling**: When building large-scale applications with multiple
    developers or teams, theming ensures consistency in the visual styles across different
    components. By adhering to a unified theming approach, you can maintain a coherent
    user experience throughout the application.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致的样式**：在构建由多个开发者或团队参与的大型应用程序时，主题化确保了不同组件之间的视觉样式一致性。通过遵循统一的主题化方法，您可以在整个应用程序中保持一致的用户体验。'
- en: Having grasped the foundational knowledge of PrimeNG theming, it’s time to delve
    into the practical aspects. One of the quickest ways to kickstart your theming
    journey is by leveraging PrimeNG’s vast array of pre-built themes, which we’ll
    explore next.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在掌握了 PrimeNG 主题的基础知识后，是时候深入了解实际方面了。快速启动主题之旅的最快方法之一是利用 PrimeNG 丰富的预建主题，我们将在下一节中探讨。
- en: Working with pre-built themes
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用预建主题
- en: PrimeNG **Pre-Built Themes** are a collection of predefined style sheets that
    define the visual appearance of PrimeNG components. These themes are based on
    popular design frameworks such as Bootstrap and Material Design, and they come
    with a wide range of color schemes and variations. Each theme provides consistent
    styling for all PrimeNG components, ensuring a cohesive and polished look for
    your application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG **预建主题**是一系列预定义的样式表，定义了 PrimeNG 组件的视觉外观。这些主题基于流行的设计框架，如 Bootstrap 和
    Material Design，并附带一系列颜色方案和变体。每个主题都为所有 PrimeNG 组件提供一致的样式，确保您的应用程序具有一致和精致的外观。
- en: The pre-built themes are shipped with PrimeNG as part of the `npm` distribution,
    are easily importable, and can be applied to your application with a few simple
    steps. These themes are also highly customizable, allowing you to tweak the colors,
    fonts, and other visual properties according to your project’s requirements.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 预建主题作为 `npm` 分发的一部分随 PrimeNG 一起提供，易于导入，并且可以通过几个简单的步骤应用到您的应用程序中。这些主题也高度可定制，允许您根据项目需求调整颜色、字体和其他视觉属性。
- en: When to use PrimeNG pre-built themes
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用 PrimeNG 预建主题
- en: 'While customization offers a unique identity, there are scenarios where pre-built
    themes can really save the day:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然定制化提供了独特的身份，但在某些情况下，预建主题确实可以挽救局面：
- en: '**Rapid prototyping**: When you’re in the initial stages of application development
    and need a quick design to visualize the functionality'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速原型设计**：当您处于应用程序开发的初期阶段，需要快速设计来可视化功能时'
- en: '**Consistent design language**: For projects where a consistent design across
    multiple applications or modules is essential'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致的设计语言**：对于需要跨多个应用程序或模块保持一致设计的项目'
- en: '**Reduced development time**: When the project timeline is tight, and there’s
    no room for extensive design iterations'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少开发时间**：当项目时间表紧张，没有时间进行广泛的设计迭代时'
- en: Example of PrimeNG pre-built themes
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PrimeNG 预建主题示例
- en: In previous chapters, we had a chance to work with PrimeNG theming. In this
    chapter, let’s refresh our minds on how to integrate PrimeNG theming into our
    Angular application.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们有机会使用 PrimeNG 主题。在本章中，让我们回顾一下如何将 PrimeNG 主题集成到我们的 Angular 应用程序中。
- en: 'To use a pre-built theme, it’s as simple as importing it into your project.
    Let’s see how:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用预建主题，只需将其导入到您的项目中即可。让我们看看如何：
- en: Navigate to the PrimeNG Built-in Themes ([https://primeng.org/theming#builtinthemes](https://primeng.org/theming#builtinthemes))
    and pick a theme that resonates with your project’s vibe.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 PrimeNG 内置主题（[https://primeng.org/theming#builtinthemes](https://primeng.org/theming#builtinthemes)），并选择与您的项目氛围产生共鸣的主题。
- en: 'Once you’ve chosen a theme, integrate it into your project. For instance, if
    you’ve selected the `lara-light-blue` theme, add the following lines to `styles.scss`
    or `styles.css`:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您选择了主题，将其集成到您的项目中。例如，如果您选择了 `lara-light-blue` 主题，请将以下行添加到 `styles.scss` 或
    `styles.css`：
- en: '[PRE0]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This import statement ensures that the styles defined in the `lara-light-blue`
    theme are applied to your application. Once the theme is imported, all PrimeNG
    components will automatically adopt the styling defined by the theme.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个导入语句确保了 `lara-light-blue` 主题中定义的样式被应用到你的应用程序中。一旦主题被导入，所有 PrimeNG 组件将自动采用主题定义的样式。
- en: Next, you can start using PrimeNG components in your application, such as the
    `p-button`, `p-card`, and `p-table` components. These components will inherit
    the styles defined by the pre-built theme, giving them a consistent and visually
    appealing appearance.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你可以在应用程序中使用 PrimeNG 组件，例如 `p-button`、`p-card` 和 `p-table` 组件。这些组件将继承预构建主题定义的样式，使它们具有一致且视觉上吸引人的外观。
- en: Note
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Your applications might have custom fonts or stylings. Always ensure that the
    theme’s CSS is loaded after the default PrimeNG CSS to ensure the theme styles
    take precedence.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序可能有自定义字体或样式。始终确保主题的 CSS 在默认 PrimeNG CSS 之后加载，以确保主题样式具有优先权。
- en: We have explored the convenience of PrimeNG’s pre-built themes, which offer
    a wide selection of visually appealing styles out of the box. Now, let’s dive
    into the topic of switching themes, where we’ll learn how to seamlessly switch
    between different PrimeNG themes to suit our application’s design requirements
    and preferences.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了 PrimeNG 预构建主题的便利性，它们提供了大量视觉上吸引人的样式。现在，让我们深入探讨切换主题的话题，我们将学习如何无缝地在不同的
    PrimeNG 主题之间切换，以满足我们应用程序的设计需求和偏好。
- en: Switching themes
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切换主题
- en: One of the key advantages of PrimeNG pre-built themes is that you can switch
    between different themes on the fly. This feature allows users of your application
    to choose their preferred theme, providing them with a personalized and customizable
    experience.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 预构建主题的一个关键优势是你可以即时切换到不同的主题。这个特性允许你的应用程序用户选择他们偏好的主题，为他们提供个性化的可定制体验。
- en: To switch themes, you typically need to replace the theme CSS file reference
    in your project. For instance, if you are currently using the `lara-blue-light`
    theme and wish to switch to the `bootstrap4-light-purple` theme, you’d replace
    the CSS file reference in your `index.html` file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要切换主题，通常需要替换项目中主题 CSS 文件的引用。例如，如果你目前使用的是 `lara-blue-light` 主题，并希望切换到 `bootstrap4-light-purple`
    主题，你将在 `index.html` 文件中替换 CSS 文件引用。
- en: 'Here is a step-by-step guide on how to do it:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是如何一步步操作的指南：
- en: 'In order to switch themes, you need to have all your themes ready in the `assets`
    folder. You can find a full list of the built-in PrimeNG themes under the `node_modules/primeng/resources/themes`
    folder:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了切换主题，你需要将所有主题准备在 `assets` 文件夹中。你可以在 `node_modules/primeng/resources/themes`
    文件夹下找到内置 PrimeNG 主题的完整列表：
- en: '![Figure 9.1 – PrimeNG built-in themes](img/B18805_09_01.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1 – PrimeNG 内置主题](img/B18805_09_01.jpg)'
- en: Figure 9.1 – PrimeNG built-in themes
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1 – PrimeNG 内置主题
- en: 'After that, you can copy the themes that you want to use in your application
    to your `assets` folder:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你可以将你想要在应用程序中使用的主题复制到你的 `assets` 文件夹中：
- en: '![Figure 9.2 – Copied built-in themes](img/B18805_09_02.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2 – 复制的内置主题](img/B18805_09_02.jpg)'
- en: Figure 9.2 – Copied built-in themes
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – 复制的内置主题
- en: 'In this example, I copied four built-in themes to our application: `bootstrap4-light-blue`,
    `lara-light-blue`, `md-dark-indigo`, and `viva-dark`.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我将四个内置主题复制到我们的应用程序中：`bootstrap4-light-blue`、`lara-light-blue`、`md-dark-indigo`
    和 `viva-dark`。
- en: 'Add your default theme reference to `index.html`. So, instead of having your
    default in the `style.scss` file, you will have it in the `index.html` file:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的默认主题引用添加到 `index.html` 文件中。因此，你将不再在 `style.scss` 文件中设置默认值，而是在 `index.html`
    文件中设置：
- en: '[PRE1]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this code, we added a reference to the `lara-light-blue` theme with the `theme-link`
    ID.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这段代码中，我们添加了对 `lara-light-blue` 主题的 `theme-link` ID 的引用。
- en: 'Now, it’s time to add switch-theme functionality to our component. Here is
    the code:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是时候给我们的组件添加切换主题的功能了。以下是代码：
- en: '[PRE2]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s break down the code:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们分解一下代码：
- en: '`<div class="flex align-items-center" *ngFor="let theme of themes">`: This
    code iterates over the `themes` array using the `ngFor` directive. For each theme
    in the array, it creates a radio button input using the `p-radioButton` component.'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<div class="flex align-items-center" *ngFor="let theme of themes">`: 这段代码使用
    `ngFor` 指令遍历 `themes` 数组。对于数组中的每个主题，它使用 `p-radioButton` 组件创建一个单选按钮输入。'
- en: '`themes = [...]`: This defines the `themes` array, which contains objects representing
    different themes. Each theme object has a `name` property that represents the
    display name of the theme and a `value` property that represents the unique identifier
    of the theme.'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`themes = [...]`：这定义了 `themes` 数组，它包含代表不同主题的对象。每个主题对象都有一个 `name` 属性，表示主题的显示名称，以及一个
    `value` 属性，表示主题的唯一标识符。'
- en: '`selectedTheme`: This indicates the initially selected theme value.'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selectedTheme`：这表示最初选择的主题值。'
- en: '`changeTheme() {...}`: This method is called when a radio button is clicked.
    It retrieves the `link` element with the `theme-link` ID. After that, it will
    update the `href` attribute of the `link` element to point to the CSS file of
    the selected theme.'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`changeTheme() {...}`：当点击单选按钮时调用此方法。它检索具有 `theme-link` ID 的 `link` 元素。之后，它将
    `link` 元素的 `href` 属性更新为指向所选主题的 CSS 文件。'
- en: 'Let’s take a look at the result:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看结果：
- en: '![Figure 9.3 – Switching themes](img/B18805_09_03.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3 – 切换主题](img/B18805_09_03.jpg)'
- en: Figure 9.3 – Switching themes
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – 切换主题
- en: We have set up a theme switcher that allows users to select a theme using radio
    buttons. When a radio button is clicked, we will be able to switch to the desired
    theme. You can see that on the left we’re using the `Lara Light Blue` theme, and
    on the right, we’re using `Bootstrap4 Light Purple`, which will give a different
    experience to our users.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经设置了一个主题切换器，允许用户使用单选按钮选择主题。当点击单选按钮时，我们将能够切换到所需的主题。您可以看到，在左侧我们正在使用 `Lara Light
    Blue` 主题，而在右侧，我们正在使用 `Bootstrap4 Light Purple`，这将给我们的用户带来不同的体验。
- en: In general, working with pre-built themes in PrimeNG provides you with a convenient
    and efficient way to style applications. In the next section, we will explore
    the process of creating custom themes in PrimeNG, empowering you to craft a truly
    personalized and distinctive user experience.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在 PrimeNG 中使用预构建主题为您提供了方便且高效的方式来设计应用程序。在下一节中，我们将探讨在 PrimeNG 中创建自定义主题的过程，让您能够打造真正个性化且独特的用户体验。
- en: Creating your own custom themes
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您自己的自定义主题
- en: While PrimeNG offers plenty of pre-built themes, there might be situations where
    you want a unique look and feel that aligns more closely with your brand or specific
    design requirements. That’s where custom themes come into play. These themes allow
    you to tailor the appearance of PrimeNG components to your exact specifications.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 PrimeNG 提供了大量的预构建主题，但可能存在一些情况，您希望拥有一个独特的外观和感觉，更紧密地与您的品牌或特定的设计要求相匹配。这就是自定义主题发挥作用的地方。这些主题允许您根据您的确切规格定制
    PrimeNG 组件的外观。
- en: What are PrimeNG custom themes?
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 PrimeNG 自定义主题？
- en: A **custom theme** in PrimeNG is essentially a set of CSS styles that override
    the default styles of PrimeNG components. By creating a custom theme, you have
    the flexibility to define colors, fonts, spacings, and other design elements that
    match your brand’s identity or the specific design language of your project.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 中的**自定义主题**本质上是一组 CSS 样式，它覆盖了 PrimeNG 组件的默认样式。通过创建自定义主题，您有灵活性来定义颜色、字体、间距和其他设计元素，这些元素与您的品牌身份或项目的特定设计语言相匹配。
- en: When are PrimeNG custom themes used?
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用 PrimeNG 自定义主题？
- en: 'Custom themes are particularly beneficial in the following situations:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义主题在以下情况下特别有益：
- en: You’re building a branded application where the visual identity needs to be
    consistent with other digital assets of your brand
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您正在构建一个品牌应用程序，其视觉身份需要与其他品牌数字资产保持一致
- en: The pre-built themes don’t align with the specific design requirements of your
    project
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预构建主题与您项目的特定设计要求不匹配
- en: You’re aiming for a unique user interface that stands out from typical applications
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的目标是创建一个独特的用户界面，使其与众不同于典型应用
- en: There’s a need to adhere to specific accessibility guidelines that might not
    be covered by the default themes
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要遵守特定的可访问性指南，这些指南可能不在默认主题中涵盖
- en: How to create PrimeNG custom themes
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何创建 PrimeNG 自定义主题
- en: 'Creating a custom theme might sound daunting, but with PrimeNG’s structure,
    it’s quite straightforward. You have three alternatives to choose from, each offering
    its own advantages and flexibility. Let’s delve into each option:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 PrimeNG 自定义主题可能听起来有些令人畏惧，但有了 PrimeNG 的结构，它相当简单。您有三个选择，每个选择都提供其自身的优点和灵活性。让我们深入了解每个选项：
- en: '**Visual Editor**: The Visual Editor is a user-friendly tool provided by PrimeNG
    that allows you to visually customize and style your theme'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视觉编辑器**：视觉编辑器是 PrimeNG 提供的一个用户友好的工具，允许您直观地自定义和设计您的主题'
- en: '**Command-line Sass compilation**: If you prefer a more hands-on approach,
    you can choose to compile your theme using the command-line Sass tool'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令行Sass编译**：如果你更喜欢更手动的方法，你可以选择使用命令行Sass工具来编译你的主题'
- en: '**Embedding SCSS files in your project**: The third alternative involves embedding
    the SCSS files directly within your project’s directory structure'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在项目中嵌入SCSS文件**：第三种选择是将SCSS文件直接嵌入到你的项目目录结构中'
- en: Note
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: As of the book's release, the Visual Editor is currently disabled. However,
    there is good news - the PrimeTek team has made the decision to open-source the
    Designer, making it freely available to use. The anticipated release for this
    exciting development is scheduled for Q1 2024\. For the most up-to-date information,
    please visit the official PrimeTek website.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本书发布时，视觉编辑器目前处于禁用状态。然而，有一个好消息——PrimeTek团队已经决定开源设计师，使其免费可用。这一激动人心的开发的预期发布时间定于2024年第一季度。有关最新信息，请访问官方PrimeTek网站。
- en: In all three options, it is crucial to import the generated theme file into
    your project. This ensures that the customized theme is properly applied to the
    PrimeNG components, allowing you to enjoy the benefits of your personalized visual
    style.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有三种选项中，将生成的主题文件导入到你的项目中至关重要。这确保了自定义主题被正确应用于PrimeNG组件，让你能够享受到个性化视觉风格的好处。
- en: Choose the option that aligns best with your preferences and project requirements,
    and embark on the journey of creating a unique and visually appealing theme for
    your PrimeNG-powered application.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 选择与你的偏好和项目要求最匹配的选项，开始为你的PrimeNG应用程序创建独特且视觉吸引人的主题之旅。
- en: Creating a custom theme via the Visual Editor
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过视觉编辑器创建自定义主题
- en: The world of theming in PrimeNG has been revolutionized with the introduction
    of the **Visual Editor**. No longer do you need to dive deep into lines of Sass
    or CSS to get the perfect look for your components. With the Visual Editor, creating
    a custom theme is as intuitive as dragging a slider or picking a color from a
    palette.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG的主题世界随着**视觉编辑器**的引入而发生了革命性的变化。你再也不需要深入到Sass或CSS的代码行中去，以获得组件的完美外观。使用视觉编辑器，创建一个自定义主题就像拖动滑块或从调色板中选择颜色一样直观。
- en: With its intuitive interface, you can modify various aspects of the theme, such
    as colors, typography, spacing, and more. The Visual Editor provides real-time
    previews, making it easy to see the changes as you customize your theme. Once
    you are satisfied with the modifications, you can export the theme file, which
    can be directly imported into your project.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过其直观的界面，你可以修改主题的各个方面，如颜色、字体、间距等。视觉编辑器提供实时预览，使你在自定义主题时能够轻松看到变化。一旦你对修改满意，你可以导出主题文件，该文件可以直接导入到你的项目中。
- en: 'Creating a custom theme with the Visual Editor is a breeze. Here’s a step-by-step
    guide:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用视觉编辑器创建自定义主题非常简单。以下是一个逐步指南：
- en: Navigate to the PrimeNG theming page and launch the Visual Editor.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到PrimeNG主题页面并启动视觉编辑器。
- en: Start with a pre-built theme that’s closest to your desired look. This serves
    as a foundation upon which you can make further customizations. In this example,
    I will choose the `lara-light` theme.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从与你期望的外观最接近的预构建主题开始。这为你提供了一个基础，你可以在此基础上进行进一步的定制。在这个例子中，我将选择`lara-light`主题。
- en: '![Figure 9.4 – Choose a base theme](img/B18805_09_04.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图9.4 – 选择基本主题](img/B18805_09_04.jpg)'
- en: Figure 9.4 – Choose a base theme
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 – 选择基本主题
- en: Use the Visual Editor’s intuitive controls to adjust colors, fonts, and other
    design elements. As you make changes, you’ll see a real-time preview of how components
    look.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用视觉编辑器的直观控件来调整颜色、字体和其他设计元素。随着你的更改，你将看到组件的实时预览。
- en: '![Figure 9.5 – Customize your theme](img/B18805_09_05.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图9.5 – 定制你的主题](img/B18805_09_05.jpg)'
- en: Figure 9.5 – Customize your theme
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 – 定制你的主题
- en: On the left panel, you have the ability to modify the base theme. There are
    plenty of options for you to customize.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧面板中，你可以修改基本主题。有许多选项供你自定义。
- en: Note
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing this book, the current Visual Editor is deemed to be
    in a legacy state. A new advanced UI-based Theme Designer will be released soon.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，当前的视觉编辑器被认为处于遗留状态。一个基于新先进UI的Theme Designer将很快发布。
- en: Once satisfied with your custom theme, simply export it. The Visual Editor will
    generate all the necessary CSS files for you.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你对自定义主题满意，只需导出它即可。视觉编辑器将为你生成所有必要的CSS文件。
- en: '![Figure 9.6 – Download your custom theme](img/B18805_09_06.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图9.6 – 下载您的自定义主题](img/B18805_09_06.jpg)'
- en: Figure 9.6 – Download your custom theme
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6 – 下载您的自定义主题
- en: After finishing your customization, you can start to download your custom theme
    by clicking on the `Download` folder with the name `theme.css`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成自定义后，您可以通过点击名为`Download`的文件夹来开始下载您的自定义主题`theme.css`。
- en: After downloading the exported files, you can start to include them in your
    Angular project. Make sure they’re loaded after the default PrimeNG styles to
    ensure your customizations take precedence.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载导出的文件后，您可以将它们包含到您的Angular项目中。请确保它们在默认PrimeNG样式之后加载，以确保您的自定义设置优先。
- en: 'If you only have one theme in your app, you can just put it in the `styles.scss`
    file or in `index.html`:'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您的应用程序中只有一个主题，您可以直接将其放入`styles.scss`文件或`index.html`中：
- en: '[PRE3]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is the result:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是结果：
- en: '![Figure 9.7 – Apply your custom theme](img/B18805_09_07.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图9.7 – 应用您的自定义主题](img/B18805_09_07.jpg)'
- en: Figure 9.7 – Apply your custom theme
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7 – 应用您的自定义主题
- en: Now, your application has the desired look and feel of your custom theme.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的应用程序已经具有了您自定义主题的期望外观和感觉。
- en: Creating a custom theme via Sass compilation
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过Sass编译创建自定义主题
- en: The second method, using Sass compilation, gives you full control over the theme
    customization process. You can manually edit the theme’s SCSS files, adjusting
    variables to achieve the desired visual style. Once you have made the necessary
    modifications, you can use the command-line Sass compiler to generate the CSS
    output. The compiled CSS file can then be imported into your project, ensuring
    that your custom theme is applied to the PrimeNG components.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法，使用Sass编译，让您完全控制主题自定义过程。您可以手动编辑主题的SCSS文件，调整变量以实现所需的视觉风格。一旦您进行了必要的修改，您可以使用命令行Sass编译器生成CSS输出。然后，可以将编译后的CSS文件导入到您的项目中，确保您的自定义主题应用于PrimeNG组件。
- en: 'Here is how we do it:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是如何操作的：
- en: 'Clone the `primeng-sass-theme` repository from GitHub:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从GitHub克隆`primeng-sass-theme`仓库：
- en: '[PRE4]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Install the NPM packages:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装NPM包：
- en: '[PRE5]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After installing the necessary packages, we can find all of the SCSS files
    under the `themes` | `mytheme` directory:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装必要的包后，我们可以在`themes` | `mytheme`目录下找到所有的SCSS文件：
- en: '![Figure 9.8 – mytheme folder](img/B18805_09_08.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图9.8 – mytheme文件夹](img/B18805_09_08.jpg)'
- en: Figure 9.8 – mytheme folder
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8 – mytheme文件夹
- en: 'Under the `mytheme` folder, you have a few options to customize your custom
    theme:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在`mytheme`文件夹下，您有几个选项来自定义您的自定义主题：
- en: '`variables`: You can customize the CSS variables under this folder, changing
    the button background, primary text color, border radius, and so on'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`variables`：您可以在该文件夹下自定义CSS变量，更改按钮背景、主要文本颜色、边框半径等'
- en: '`_extension.scss`: Update this file if you want to override the component designs'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_extension.scss`：如果您想覆盖组件设计，请更新此文件'
- en: '`_font.scss`: This is where you can define a custom font for your project'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_font.scss`：这是您可以定义项目自定义字体的地方'
- en: '`theme.scss`: This file imports theme files, along with the `theme-base` folder,
    in order to combine everything'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`theme.scss`：此文件导入主题文件，以及`theme-base`文件夹，以便将所有内容合并'
- en: 'After making changes to your custom theme, compile your changes by running
    the following command:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对您的自定义主题进行更改后，通过运行以下命令来编译您的更改：
- en: '[PRE6]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can see that, after compiling, we created a `theme.css` file under the `mytheme`
    folder, which now can be added to our project.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，在编译后，我们在`mytheme`文件夹下创建了一个`theme.css`文件，现在可以将其添加到我们的项目中。
- en: Creating a custom theme by embedding SCSS files
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过嵌入SCSS文件创建自定义主题
- en: This third approach allows you to integrate the theme customization seamlessly
    into your existing build environment. By placing the theme SCSS files in a designated
    location within your project, such as the `assets` or `styles` folder, you can
    leverage your build tools to automatically compile the SCSS files into CSS during
    the build process.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这种第三种方法允许您将主题自定义无缝集成到现有的构建环境中。通过将主题SCSS文件放置在项目中的指定位置，例如`assets`或`styles`文件夹，您可以在构建过程中利用您的构建工具自动将SCSS文件编译成CSS。
- en: 'Here are the steps:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是步骤：
- en: Copy the `mytheme` and `theme-base` folder to our `assets` folder. This option
    grants you the flexibility to incorporate the Angular CLI default process.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`mytheme`和`theme-base`文件夹复制到我们的`assets`文件夹。此选项使您能够结合Angular CLI默认流程。
- en: '![Figure 9.9 – mytheme in the Angular project](img/B18805_09_09.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图9.9 – Angular项目中的mytheme](img/B18805_09_09.jpg)'
- en: Figure 9.9 – mytheme in the Angular project
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.9 – Angular项目中的mytheme
- en: 'Then, all we need to do is import `theme.scss` from `mytheme` to `styles.scss`:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们只需要从 `mytheme` 导入 `theme.scss` 到 `styles.scss`：
- en: '[PRE7]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Finally, when we modify anything under `mytheme`, the Angular CLI will handle
    the compilation for us naturally without any manual work.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，当我们修改 `mytheme` 下的任何内容时，Angular CLI 会为我们自然地处理编译，无需任何手动工作。
- en: In the journey of mastering PrimeNG theming, we’ve seen the power and flexibility
    of creating custom theme methods, making theme customization a straightforward
    and enjoyable process. Let’s now shift our focus to overriding component styles
    and other advanced styling techniques to truly make our UIs stand out.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在掌握 PrimeNG 主题化的旅程中，我们看到了创建自定义主题方法的强大功能和灵活性，使主题定制变得简单且愉快。现在，让我们将重点转移到覆盖组件样式和其他高级样式技术，以真正使我们的
    UI 独具特色。
- en: Overriding component styles and other tips
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 覆盖组件样式和其他技巧
- en: While PrimeNG offers plenty of themes and customization options, there will
    always be scenarios where we need to tweak certain styles to fit our application’s
    unique requirements. This section will guide you through the process of overriding
    component styles and share some additional tips and tricks to enhance your theming
    experience.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 PrimeNG 提供了大量的主题和定制选项，但总会有一些场景需要我们调整某些样式以适应我们应用程序的独特需求。本节将指导您通过覆盖组件样式的流程，并分享一些额外的技巧和窍门来增强您的主题体验。
- en: How to override component styles
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何覆盖组件样式
- en: 'Overriding component styles in PrimeNG is similar to styling any other Angular
    component. The key is to understand the structure of the component you’re trying
    to style and use specific CSS selectors. Here is how we do it:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PrimeNG 中覆盖组件样式与样式任何其他 Angular 组件类似。关键是理解您想要样式的组件的结构并使用特定的 CSS 选择器。以下是我们的做法：
- en: '**Inspect the component**: Before you can override a style, you need to know
    what you’re targeting. Use your browser’s developer tools to inspect the component
    and understand its structure. Here is an example of inspecting the browser:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**检查组件**：在您覆盖样式之前，您需要知道您正在针对什么。使用您浏览器的开发者工具检查组件并了解其结构。以下是检查浏览器的一个示例：'
- en: '![Figure 9.10 – Browser inspection example](img/B18805_09_10.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.10 – 浏览器检查示例](img/B18805_09_10.jpg)'
- en: Figure 9.10 – Browser inspection example
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.10 – 浏览器检查示例
- en: In the screenshot provided, you can observe the detailed HTML element structure
    of the **Panels** menu located on the left side.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供的屏幕截图中，您可以观察到位于左侧的 **Panels** 菜单的详细 HTML 元素结构。
- en: '`p-menuitem-link-active` class, allowing you to selectively apply CSS styling
    to it.'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`p-menuitem-link-active` 类，允许您选择性地应用 CSS 样式到它上。'
- en: '`styles.scss` in order to apply styles to your component. For example, in order
    to apply underline to the active router link, you can add the following CSS to
    `style.scss`:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`styles.scss` 以将样式应用到您的组件上。例如，为了给活动的路由链接添加下划线，您可以在 `style.scss` 中添加以下 CSS：'
- en: '[PRE8]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`::ng-deep` pseudo-class ensures that styles penetrate into child components.
    This is especially useful when trying to style the inner parts of a PrimeNG component.
    Here’s an example:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`::ng-deep` 伪类确保样式渗透到子组件中。这在尝试样式化 PrimeNG 组件的内部部分时特别有用。以下是一个示例：'
- en: '[PRE9]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, we can override the style of the PrimeNG button in our component,
    which makes it easier to locate and maintain. The changes only apply a different
    color and background color to our button, differentiating it from other buttons
    in your app.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此示例中，我们可以在我们的组件中覆盖 PrimeNG 按钮的样式，这使得定位和维护变得更加容易。这些更改仅将不同的颜色和背景颜色应用到我们的按钮上，使其与您的应用程序中的其他按钮区分开来。
- en: Note
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Angular team decided to deprecate `::ng-deep` in future versions of Angular,
    so please use it sparingly. You can find more information about this at [https://angular.io/guide/component-styles#deprecated-deep--and-ng-deep](https://angular.io/guide/component-styles#deprecated-deep--and-ng-deep).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 团队决定在 Angular 的未来版本中弃用 `::ng-deep`，因此请谨慎使用。您可以在 [https://angular.io/guide/component-styles#deprecated-deep--and-ng-deep](https://angular.io/guide/component-styles#deprecated-deep--and-ng-deep)
    找到更多相关信息。
- en: Note
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Avoid using `!important`. While it might be tempting to use `!important` to
    force a style, it’s a practice we should avoid. It makes future changes harder
    and can lead to unpredictable results.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 避免使用 `!important`。虽然使用 `!important` 来强制样式可能很有吸引力，但我们应避免这种做法。它会使未来的更改变得困难，并可能导致不可预测的结果。
- en: Using PrimeNG common utils
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 PrimeNG 公共工具
- en: 'PrimeNG **Utils** are a set of utility classes provided by PrimeNG to help
    you with common styling tasks. These utility classes offer a quick way to apply
    specific styles or behaviors to elements without having to write custom CSS. Here’s
    a brief overview of some of the PrimeNG utils:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG **Utils** 是 PrimeNG 提供的一组实用类，用于帮助您完成常见的样式任务。这些实用类提供了一种快速将特定样式或行为应用于元素的方法，而无需编写自定义
    CSS。以下是一些 PrimeNG utils 的简要概述：
- en: '![Figure 9.11 – Common PrimeNG util classes](img/B18805_09_11.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.11 – 常见的 PrimeNG 工具类](img/B18805_09_11.jpg)'
- en: Figure 9.11 – Common PrimeNG util classes
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.11 – 常见的 PrimeNG 工具类
- en: Working with PrimeNG CSS variables
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 PrimeNG CSS 变量
- en: In modern web development, CSS variables (also known as CSS custom properties)
    have become a powerful tool for creating more flexible and maintainable style
    sheets. PrimeNG harnesses this power by providing a comprehensive set of CSS variables
    that define colors, making it easier for you to customize the application’s theme.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代网络开发中，CSS 变量（也称为 CSS 自定义属性）已成为创建更灵活和可维护的样式表的有力工具。PrimeNG 通过提供一组定义颜色的 CSS
    变量来利用这种力量，这使得您更容易自定义应用程序的主题。
- en: PrimeNG’s color system is built around a set of predefined CSS variables. These
    variables represent a wide range of colors, from primary and secondary colors
    to various shades and tints. By leveraging these variables, you can ensure consistent
    color usage across your application and easily tweak the appearance as needed.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 的颜色系统是基于一组预定义的 CSS 变量构建的。这些变量代表了一系列颜色，从主色和辅助色到各种色调和色调。通过利用这些变量，您可以在整个应用程序中确保颜色使用的统一性，并轻松地根据需要调整外观。
- en: For instance, PrimeNG defines primary colors such as `--primary-color` and primary
    color text such as `--primary-color-text`. These are just the tip of the iceberg,
    as there are variables for text color, surface, and highlight, among others.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，PrimeNG 定义了如 `--primary-color` 这样的主颜色以及如 `--primary-color-text` 这样的主颜色文本。这只是冰山一角，因为还有用于文本颜色、表面和突出显示等变量的变量。
- en: Note
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For a full list of color variables, please visit [https://primeng.org/colors](https://primeng.org/colors).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 有关颜色变量的完整列表，请访问 [https://primeng.org/colors](https://primeng.org/colors)。
- en: Using these color variables is straightforward. Instead of hardcoding color
    values in your styles, you reference the PrimeNG color variables. This not only
    ensures consistency but also makes future color changes a breeze.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些颜色变量很简单。您不需要在样式表中硬编码颜色值，而是引用 PrimeNG 颜色变量。这不仅确保了一致性，还使得未来的颜色更改变得容易。
- en: 'Here’s a simple example:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单的示例：
- en: '[PRE10]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the code, the button’s background color is set to PrimeNG’s `--primary-color`,
    and the border radius is set to `--border-radius`. If you ever decide to change
    the primary color or border radius in the future, the button’s appearance will
    automatically update, without any need to modify the `.``my-custom-button` styles.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，按钮的背景颜色设置为 PrimeNG 的 `--primary-color`，边框半径设置为 `--border-radius`。如果您将来决定更改主颜色或边框半径，按钮的外观将自动更新，无需修改
    `.my-custom-button` 样式。
- en: Customizing PrimeNG color variables
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义 PrimeNG 颜色变量
- en: One of the major advantages of CSS variables is the ability to be overridden.
    If you wish to customize the default colors provided by PrimeNG, you can easily
    do so by redefining the variables in your styles.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 变量的一个主要优点是它们可以被覆盖。如果您希望自定义 PrimeNG 提供的默认颜色，您可以通过在样式表中重新定义变量轻松地做到这一点。
- en: 'For example, here’s how to change the primary color:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是更改主颜色的方法：
- en: '[PRE11]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: By setting this at the root level, you effectively change the primary color
    across all components and elements that use the `--``primary-color` variable.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在根级别设置，您实际上更改了所有使用 `--primary-color` 变量的组件和元素的主颜色。
- en: Other tips and tricks
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他技巧和窍门
- en: 'In this section, we will get to know some valuable tips, techniques, and best
    practices that will be helpful when working with theming:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解一些有价值的技巧、技术和最佳实践，这些将在使用主题时非常有帮助：
- en: '**Global styles**: If you want to apply styles globally across your application,
    you can define them in a global CSS file and include it in your application. This
    way, you can customize common elements such as typography, colors, and layout.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局样式**：如果您想在应用程序中全局应用样式，您可以在全局 CSS 文件中定义它们，并将其包含在您的应用程序中。这样，您可以自定义诸如排版、颜色和布局等常见元素。'
- en: '**Stay up to date**: PrimeNG is actively developed. New versions might introduce
    changes. Always check the documentation and update your styles accordingly.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持更新**：PrimeNG正在积极开发。新版本可能会引入变化。始终检查文档并相应地更新你的样式。'
- en: '**Use a base theme**: When starting a new project, consider using one of the
    pre-built themes as a base. It gives you a solid foundation, and you can then
    override specific parts as needed. You can check the list of built-in themes at
    [https://primeng.org/theming#builtinthemes](https://primeng.org/theming#builtinthemes).'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用基础主题**：在开始一个新项目时，考虑使用预构建的主题作为基础。它为你提供了一个坚实的基础，然后你可以根据需要覆盖特定的部分。你可以查看内置主题的列表：[https://primeng.org/theming#builtinthemes](https://primeng.org/theming#builtinthemes)。'
- en: '`theme-base`:'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`theme-base`:'
- en: '[PRE12]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'From the code, you can see that the button utilizes the `$buttonHoverBorderColor`
    variable on the border color when the button is hovered over. This variable is
    declared in `variables/_button.scss` under `mytheme`:'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从代码中，你可以看到当按钮被悬停时，按钮使用了`$buttonHoverBorderColor`变量来设置边框颜色。这个变量在`mytheme`下的`variables/_button.scss`中声明：
- en: '[PRE13]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When updating the value of `$buttonHoverBorderColor` under `_button.scss`, it
    will reflect in all components that utilize this `$buttonHoverBorderColor` variable,
    such as the button hover state.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在`_button.scss`中更新`$buttonHoverBorderColor`的值时，它将反映在所有使用此`$buttonHoverBorderColor`变量的组件中，例如按钮悬停状态。
- en: Note
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The provided button component variable examples are just a small subset. For
    more information and comprehensive code associated with the buttons, you can check
    out the following links: [https://github.com/primefaces/primeng-sass-theme/blob/main/theme-base/components/button/_button.scss](https://github.com/primefaces/primeng-sass-theme/blob/main/theme-base/components/button/_button.scss)
    and [https://github.com/primefaces/primeng-sass-theme/blob/main/themes/mytheme/variables/_button.scss](https://github.com/primefaces/primeng-sass-theme/blob/main/themes/mytheme/variables/_button.scss).'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的按钮组件变量示例只是一个小子集。更多信息和与按钮相关的完整代码，你可以查看以下链接：[https://github.com/primefaces/primeng-sass-theme/blob/main/theme-base/components/button/_button.scss](https://github.com/primefaces/primeng-sass-theme/blob/main/theme-base/components/button/_button.scss)
    和 [https://github.com/primefaces/primeng-sass-theme/blob/main/themes/mytheme/variables/_button.scss](https://github.com/primefaces/primeng-sass-theme/blob/main/themes/mytheme/variables/_button.scss)。
- en: '**Test across browsers**: Always test your styles across different browsers
    to ensure consistency. Some components might have browser-specific styles.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨浏览器测试**：始终在不同的浏览器中测试你的样式以确保一致性。某些组件可能有浏览器特定的样式。'
- en: In short, the most important thing is to stay updated with the changes from
    the PrimeNG and Angular teams. It will be beneficial if we can utilize the latest
    practices to improve our applications. Now, let’s summarize the key points we
    covered throughout this chapter and reflect on the essential takeaways.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，最重要的是要跟上PrimeNG和Angular团队的变化。如果我们能利用最新的实践来改进我们的应用程序，这将是有益的。现在，让我们总结本章涵盖的关键点，并反思重要的收获。
- en: Summary
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Throughout this chapter, we delved deep into the world of PrimeNG theming, embarking
    on a journey that took us from understanding the basics of PrimeNG theming to
    mastering the art of customizing components to fit our unique needs.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了PrimeNG主题的世界，从理解PrimeNG主题的基础到掌握定制组件以适应我们独特需求的艺术。
- en: We began by introducing the concept of PrimeNG theming, emphasizing its significance
    in creating cohesive and visually appealing Angular applications. By leveraging
    PrimeNG’s theming capabilities, we can ensure a consistent look and feel across
    our applications, enhancing the user experience.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先介绍了PrimeNG主题的概念，强调了它在创建统一且视觉上吸引人的Angular应用程序中的重要性。通过利用PrimeNG的主题功能，我们可以确保应用程序的一致外观和感觉，从而提升用户体验。
- en: We then explored the vast array of pre-built themes provided by PrimeNG. These
    themes, ranging from light to dark and everything in between, offer a quick and
    easy way to give our applications a professional appearance without the need for
    extensive customization. Venturing beyond the pre-built options, we learned how
    to craft our own custom themes using the visual editor. This powerful tool allows
    us to tweak every aspect of our application’s appearance, ensuring it aligns perfectly
    with our brand or desired aesthetic.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后探索了PrimeNG提供的丰富多样的预构建主题。这些主题从浅色到深色，应有尽有，提供了一种快速简单的方式，让我们的应用程序看起来专业，无需进行大量定制。在预构建选项之外，我们学习了如何使用可视化编辑器创建自己的自定义主题。这个强大的工具允许我们调整应用程序外观的每一个细节，确保它与我们的品牌或期望的美学完美契合。
- en: As we progressed, we discussed the importance of overriding component styles
    and the utility classes provided by PrimeNG. These tools give us the flexibility
    to fine-tune our application’s appearance, ensuring every detail is just right.
    Theming isn’t just about making an application “look pretty.” It’s about creating
    a consistent, intuitive, and engaging user experience. By understanding and effectively
    utilizing PrimeNG’s theming capabilities, we can craft applications that not only
    look stunning but also resonate with our target audience. This knowledge empowers
    us to elevate our applications, setting them apart in a crowded marketplace.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们不断进步，我们讨论了覆盖组件样式和PrimeNG提供的实用类的重要性。这些工具为我们提供了调整应用程序外观的灵活性，确保每一个细节都恰到好处。主题化不仅仅是让应用程序“看起来漂亮”。它关乎创造一个一致、直观且引人入胜的用户体验。通过理解和有效利用PrimeNG的主题化功能，我们可以打造出不仅外观惊艳，而且能与目标受众产生共鸣的应用程序。这种知识使我们能够提升我们的应用程序，在竞争激烈的市场中脱颖而出。
- en: As we transition to the next chapter, we’ll shift our focus to performance optimization
    techniques. Here, we’ll uncover strategies and best practices to ensure our Angular
    applications run smoothly and efficiently. With the foundation of theming now
    solidly under our belt, we’re ready to tackle the intricacies of performance and
    scalability.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们过渡到下一章节，我们将把焦点转向性能优化技术。在这里，我们将揭示确保我们的Angular应用程序运行顺畅和高效的战略和最佳实践。在主题化的基础现在稳固地掌握在我们手中后，我们准备好应对性能和可扩展性的复杂性。
