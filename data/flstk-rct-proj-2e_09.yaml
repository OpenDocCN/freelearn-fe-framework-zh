- en: Building a Web-Based Classroom Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建基于Web的教室应用程序
- en: As the world is moving to the internet, so are our tools for learning and acquiring
    knowledge in different disciplines. Right now on the web, there is a plethora
    of online platforms that offer both educators and students options to teach and
    learn different topics remotely, without the necessity to be physically co-located
    in a classroom.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着世界向互联网发展，我们在不同学科领域学习和获取知识的方式也在改变。目前，在网络上，有大量的在线平台为教师和学生提供了远程教学和学习的选项，无需在教室中物理上聚集。
- en: In this chapter, we will build a simple online classroom application, by extending
    the MERN stack skeleton application. This classroom application will support multiple
    user roles, the addition of course content and lessons, student enrollments, progress
    tracking, and course enrollment statistics. While building out this application,
    we will uncover more capabilities of this stack, such as how to implement role-based
    access to resources and actions, how to combine multiple schemas, and how to run
    different query operations in order to gather stats. By the end of this chapter,
    you will be familiar with the techniques that are needed to easily integrate new
    full-stack features in any MERN-based application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过扩展MERN堆栈骨架应用程序来构建一个简单的在线教室应用程序。这个教室应用程序将支持多个用户角色，课程内容和课程的添加，学生报名，进度跟踪和课程报名统计。在构建这个应用程序的过程中，我们将揭示这个堆栈的更多功能，例如如何实现基于角色的资源访问和操作，如何组合多个模式，以及如何运行不同的查询操作以收集统计数据。到本章结束时，您将熟悉在基于MERN的任何应用程序中轻松集成新全栈功能的所需技术。
- en: 'We will build out the online classroom application by covering the following
    topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中涵盖以下主题，以构建在线教室应用程序：
- en: Introducing MERN Classroom
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍MERN教室
- en: Adding an educator role to users
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为用户添加教育者角色
- en: Adding courses to the classroom
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将课程添加到教室
- en: Updating courses with lessons
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新课程中的课程
- en: Publishing courses
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布课程
- en: Enrolling in courses
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报名参加课程
- en: Tracking progress and enrollment stats
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪进度和报名统计
- en: Introducing MERN Classroom
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍MERN教室
- en: 'MERN Classroom is a simple online classroom application, which allows educators
    to add courses that are made up of various lessons, while students can enroll
    on these courses. Additionally, the application will allow students to track their
    progress throughout the course, whereas instructors can monitor how many students
    have enrolled in/on a course, and how many have completed each course. The completed
    application, with all these features, will end up with a home page as shown in
    the following screenshot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: MERN教室是一个简单的在线教室应用程序，允许教育者添加由各种课程组成的课程，而学生可以报名参加这些课程。此外，该应用程序将允许学生跟踪他们在课程中的进度，而讲师可以监控有多少学生报名参加了某个课程，以及有多少学生完成了每个课程。包含所有这些功能的完成应用程序将最终拥有以下截图所示的首页：
- en: '![](img/9a0f61eb-7fe0-494b-ab32-f1a3e10736e0.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9a0f61eb-7fe0-494b-ab32-f1a3e10736e0.png)'
- en: The code for the complete MERN Classroom application is available on GitHub
    in the repository at [https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter06/mern-classroom](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter06/mern-classroom).
    You can clone this code and run the application as you go through the code explanations
    for the rest of this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的MERN教室应用程序的代码可在GitHub上的[https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter06/mern-classroom](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter06/mern-classroom)仓库中找到。您可以将此代码克隆并运行，以在阅读本章其余部分的代码解释时运行应用程序。
- en: 'The views needed for the MERN Classroom application will be developed by extending
    and modifying the existing React components in the MERN skeleton application.
    The component tree in the following diagram lays out all the custom React components
    that make up the MERN Classroom frontend, and also exposes the composition structure
    that we will use to build out the views in the rest of the chapter:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: MERN教室应用程序所需的视图将通过扩展和修改MERN骨架应用程序中的现有React组件来开发。以下图表中的组件树展示了构成MERN教室前端的所有自定义React组件，并揭示了我们将用于构建本章其余部分视图的组成结构：
- en: '![](img/fdd3351a-8071-4d24-9dcd-9613f12b396a.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fdd3351a-8071-4d24-9dcd-9613f12b396a.png)'
- en: We will add new React components that are related to courses, lessons, and enrollments;
    and we will also modify existing components such as the EditProfile, Menu, and
    Home components as we build out the different features of the MERN Classroom application
    in the rest of the chapter. Most of these features in the Classroom application
    will depend on the user's ability to become an educator. In the next section,
    we will begin implementing the MERN Classroom application by updating the user
    in order to give them the option to choose an educator role.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加与课程、课程和注册相关的新React组件；我们还将修改现有的组件，如EditProfile、Menu和Home组件，正如我们在本章的其余部分构建MERN
    Classroom应用程序的不同功能时一样。在Classroom应用程序中的大多数这些功能都将取决于用户成为教育者的能力。在下一节中，我们将通过更新用户来开始实现MERN
    Classroom应用程序，以便他们可以选择教育者角色。
- en: Updating the user with an educator role
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新用户的教育者角色
- en: 'Users who sign up to the MERN Classroom application will have the choice to
    become an educator on the platform by selecting this option in the `EditProfile`
    form component. This option in the form will look as follows—showing when the
    user isn''t an educator, versus when they choose to be an educator:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Classroom应用程序注册的用户将有机会通过在`EditProfile`表单组件中选择此选项来成为平台上的教育者。此选项在表单中的外观如下——显示当用户不是教育者时，以及当他们选择成为教育者时：
- en: '![](img/ffc9060b-799a-4479-bfe3-57365f5da18d.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ffc9060b-799a-4479-bfe3-57365f5da18d.png)'
- en: 'When a user chooses to be an educator, in contrast to being a regular user,
    they will be allowed to create and manage their own courses. As pictured in the
    following screenshot, MERN Classroom will display a TEACH option in the navigation
    menu for educators only, that is, it won''t be shown to regular users:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择成为教育者时，与普通用户相比，他们将被允许创建和管理自己的课程。如下面的截图所示，MERN Classroom将为教育者显示导航菜单中的TEACH选项，即它不会显示给普通用户：
- en: '![](img/81570225-e6d1-4cbd-9a56-459173144b09.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81570225-e6d1-4cbd-9a56-459173144b09.png)'
- en: In the following sections, we will add this educator feature, by first updating
    the user model, then the EditProfile view, and finally by adding a TEACH link
    to the menu that will only be visible to educators.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将通过首先更新用户模型，然后是`EditProfile`视图，最后是将仅对教育者可见的TEACH链接添加到菜单中，来添加此教育者功能。
- en: Adding a role to the user model
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向用户模型添加角色
- en: The existing user model in the MERN skeleton application will need an educator
    value that will be set to `false` by default in order to represent regular users,
    but that can be set to `true` to represent the users who are also educators. To
    add this new field to the user schema, we will add the following code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: MERN骨架应用程序中的现有用户模型需要一个表示教育者的值，默认设置为`false`以表示普通用户，但可以设置为`true`以表示同时也是教育者的用户。为了将此新字段添加到用户模式中，我们将添加以下代码。
- en: '`mern-classroom/server/models/user.model.js`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/models/user.model.js`:'
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This `educator` value must be sent to the frontend, with the user details received
    once the user has successfully signed in, so that the view can be rendered accordingly
    to show information that is relevant to the educator. To make this change, we
    need to update the response that was sent back in the `signin` controller method
    as highlighted in the following code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此`educator`值必须发送到前端，一旦用户成功登录，就会收到用户详情，以便视图可以根据显示与教育者相关的信息相应地渲染。为了进行此更改，我们需要更新在`signin`控制器方法中发送回的响应，如下面的代码所示：
- en: '`mern-classroom/server/controllers/auth.controller.js`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/auth.controller.js`'
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By sending this `educator` field value back in the response, we can render the
    frontend views with role-specific authorization considerations.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在响应中发送此`educator`字段值，我们可以根据角色特定的授权考虑因素渲染前端视图。
- en: But before getting to these conditionally rendered views, we first need to implement
    the option to select an educator role in the `EditProfile` view, as discussed
    in the next section.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在到达这些条件渲染视图之前，我们首先需要在`EditProfile`视图中实现选择教育者角色的选项，正如下一节所讨论的。
- en: Updating the EditProfile view
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新EditProfile视图
- en: In order to become an educator in the MERN Classroom application, a signed-in
    user will need to update their profile. They will see a toggle in the EditProfile
    view, which will either activate or deactivate the educator feature. To implement
    this, first, we will update the `EditProfile` component in order to add a Material-UI `Switch` component
    in `FormControlLabel`, as shown in the following code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要成为MERN Classroom应用程序中的教育者，已登录的用户需要更新他们的个人资料。他们将在编辑个人资料视图中看到一个切换按钮，该按钮可以激活或停用教育者功能。为了实现这一点，首先，我们将更新`EditProfile`组件，以便在`FormControlLabel`中添加一个Material-UI
    `Switch`组件，如下面的代码所示。
- en: '`mern-classroom/client/user/EditProfile.js`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/user/EditProfile.js`:'
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Any changes to the switch will be set to the value of the `educator` variable in
    the state by calling the `handleCheck` method, as defined in the following code.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 任何对开关的更改都将通过调用以下代码中定义的`handleCheck`方法，将值设置为状态中的`educator`变量。
- en: '`mern-classroom/client/user/EditProfile.js`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/user/EditProfile.js`:'
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `handleCheck` method receives the `checked` Boolean value to indicate whether
    the switch has been selected or not, and this value is set to `educator`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`handleCheck`方法接收一个表示开关是否被选中的`checked`布尔值，并将此值设置为`educator`。'
- en: On form submit, the `educator` value is added to the details that were sent
    in the update to the server, as highlighted in the following code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单提交时，`educator`值被添加到发送到服务器的更新详细信息中，如下面的代码所示。
- en: '`mern-classroom/client/user/EditProfile.js`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/user/EditProfile.js`:'
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Once the EditProfile view has been successfully updated, the user details that
    are stored in `sessionStorage` for auth purposes should also be updated. The `auth.updateUser` method
    is called to do this `sessionStorage` update. It is defined with the other `auth-helper.js` methods,
    and the parameters that are passed are the updated user data and a callback function
    that updates the view. This `updateUser` method is defined as follows.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦成功更新了编辑个人资料视图，存储在`sessionStorage`中以供身份验证目的的用户详细信息也应更新。通过调用`auth.updateUser`方法来完成此`sessionStorage`更新。它与其他`auth-helper.js`方法一起定义，并传递更新的用户数据和更新视图的回调函数。此`updateUser`方法定义如下。
- en: '`mern-classroom/client/auth/auth-helper.js`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/auth/auth-helper.js`:'
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Once the updated educator role is available in the frontend, we can use it to
    render the frontend accordingly. In the next section, we will see how to render
    the menu differently, based on whether an educator or a regular user is viewing
    the application.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦更新的教育者角色在前端可用，我们就可以用它来相应地渲染前端。在下一节中，我们将看到如何根据教育者或普通用户查看应用程序来不同地渲染菜单。
- en: Rendering an option to teach
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染一个教学选项
- en: In the frontend of the classroom application, we can render different options
    based on whether an educator is currently browsing the application. In this section,
    we will add the code to conditionally display a link to *TEACH* on the navigation
    bar, which will only be visible to the signed-in users who are also educators.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在教室应用程序的前端，我们可以根据教育者是否正在浏览应用程序来渲染不同的选项。在本节中，我们将添加代码以有条件地显示导航栏上的*TEACH*链接，该链接仅对已登录且也是教育者的用户可见。
- en: We will update the `Menu` component, as follows, within the previous code that
    only renders when a user is signed in.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在之前仅对已登录用户渲染的代码中更新`Menu`组件，如下所示。
- en: '`mern-classroom/client/core/Menu.js`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/core/Menu.js`:'
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This link, which is only visible to educators, will take them to the educator
    dashboard view, where they can manage the courses that they are instructing.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个链接仅对教育者可见，将他们带到教育者仪表板视图，在那里他们可以管理他们正在教授的课程。
- en: This section has taught us how to update a user role to an educator role in
    the application, and we can now begin incorporating features that will allow an
    educator to add courses to the classroom.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 本节教会了我们如何在应用程序中将用户角色更新为教育者角色，现在我们可以开始集成允许教育者向教室添加课程的功能。
- en: Adding courses to the classroom
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向教室添加课程
- en: Educators in the MERN Classroom can create courses and add lessons to each course.
    In this section, we will walk through the implementations of the course-related
    features, such as adding new courses, listing courses by a specific instructor,
    and displaying the details of a single course. To store the course data and enable
    course management, we will start by implementing a Mongoose schema for courses,
    then backend APIs to create and list the courses, along with frontend views for
    both authorized educators and for regular users interacting with courses in the
    application.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Classroom中的教育工作者可以创建课程并为每个课程添加课程。在本节中，我们将介绍与课程相关的功能实现，例如添加新课程、按特定讲师列出课程以及显示单个课程的详细信息。为了存储课程数据并启用课程管理，我们首先将实现一个用于课程的Mongoose模式，然后是创建和列出课程的后端API，以及为授权的教育工作者和与应用程序中的课程交互的普通用户的前端视图。
- en: Defining a Course model
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义课程模型
- en: 'The Course schema—defined in `server/models/course.model.js`—will have simple
    fields to store course details, along with with an image, a category, whether
    the course is published or not, and a reference to the user who created the course.
    The code defining the course fields are given in the following list with explanations:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 定义课程模式——在`server/models/course.model.js`中定义——将具有简单的字段来存储课程详情，包括图片、类别、课程是否已发布以及创建课程的用户的引用。定义课程字段的代码如下，并附有说明：
- en: '**Course name and description**: `name` and `description` fields will have
    string types, with `name` as a required field:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**课程名称和描述**：`name`和`description`字段将具有字符串类型，其中`name`为必填字段：'
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Course image**: The `image` field will store the course image file to be
    uploaded by the user as binary data in the MongoDB database:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**课程图片**：`image`字段将存储用户上传的课程图片文件，以二进制数据形式存储在MongoDB数据库中：'
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Course category**: The `category` field will store the category value of
    the course as a string, and it will be a required field:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**课程类别**：`category`字段将存储课程类别值作为字符串，并且它是一个必填字段：'
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Course published state**: The `published` field will be a Boolean value,
    indicating whether the course is published or not:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**课程发布状态**：`published`字段将是一个布尔值，表示课程是否已发布：'
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Course instructor**: The `instructor` field will reference the user who created
    the course:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**课程讲师**：`instructor`字段将引用创建课程的用户：'
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Created and updated at times**: The `created` and `updated` fields will be `Date` types,
    with `created` generated when a new course is added, and `updated` changed when
    any course details are modified:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建和更新时间**：`created`和`updated`字段将具有`Date`类型，其中`created`在添加新课程时生成，而`updated`在修改任何课程详细信息时更改：'
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The fields in this schema definition will enable us to implement the course-related
    features in MERN Classroom. To start off these features, in the next section,
    we will implement the full-stack slice that will allow educators to create new
    courses.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式定义中的字段将使我们能够在MERN Classroom中实现与课程相关的功能。为了开始这些功能，在下一节中，我们将实现一个全栈切片，允许教育工作者创建新课程。
- en: Creating a new course
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新课程
- en: In MERN Classroom, a user who is signed in—and who is also an educator—will
    be able to create new courses. To implement this feature, in the following sections
    we will add a create course API in the backend, along with a way to fetch this
    API in the frontend, and a create new course form view that takes user input for
    course fields.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Classroom中，一个已登录的用户——同时也是教育工作者——将能够创建新课程。为了实现此功能，在以下章节中，我们将添加一个创建课程API到后台，以及在前端获取此API的方法，以及一个创建新课程表单视图，该视图接受用户输入的课程字段。
- en: The create course API
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建课程API
- en: 'In order to start the implementation of the create course API in the backend,
    we will add a `POST` route that verifies that the current user is an educator,
    and then creates a new course with the course data passed in the request body.
    The route is defined as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在后台开始创建课程API的实现，我们将添加一个`POST`路由，该路由验证当前用户是否为教育工作者，然后使用请求体中传递的课程数据创建一个新的课程。该路由定义如下：
- en: '`mern-classroom/server/routes/course.routes.js`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/routes/course.routes.js`：'
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `course.routes.js` file will be very similar to the `user.routes` file,
    and to load these new routes in the Express app, we need to mount the course routes
    in `express.js`, in the same way that we did for the auth and user routes, as
    shown in the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`course.routes.js`文件将与`user.routes`文件非常相似，为了将这些新路由加载到Express应用程序中，我们需要在`express.js`中挂载课程路由，就像我们为auth和用户路由所做的那样，如下面的代码所示：'
- en: '`mern-classroom/server/express.js`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/express.js`：'
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, we will update the user controller to add the `isEducator` method—which
    will ensure that the current user is actually an educator—before creating the
    new course. The `isEducator` method is defined as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更新用户控制器以在创建新课程之前添加`isEducator`方法——这将确保当前用户实际上是一名教育工作者。`isEducator`方法定义如下：
- en: '`mern-classroom/server/controllers/user.controller.js`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/user.controller.js`:'
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `create` method, in the course controller, uses the `formidable` Node module
    to parse the multipart request that may contain an image file that has been uploaded
    by the user for the course image. If there is a file, `formidable` will store
    it temporarily in the filesystem, and we will read it using the `fs` module to
    retrieve the file type and data, and then it will be stored to the `image` field
    in the course document. The `create` controller method will look as shown in the
    following code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 课程控制器中的`create`方法使用`formidable`Node模块来解析可能包含用户上传的课程图片的文件的多部分请求。如果有文件，`formidable`将暂时将其存储在文件系统中，然后我们使用`fs`模块读取它以检索文件类型和数据，然后将其存储在课程文档的`image`字段中。`create`控制器方法将如下所示：
- en: '`mern-classroom/server/controllers/course.controller.js`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/course.controller.js`:'
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The image file for the course, if uploaded by the user, is stored in MongoDB
    as data. Then, in order to be shown in the views, it is retrieved from the database
    as an image file at a separate `GET` API route. The `GET` API is set up as an
    Express route at `/api/courses/photo/:courseId`, which gets the image data from
    MongoDB and sends it as a file in the response. The implementation steps for file
    upload, storage, and retrieval are outlined in detail in the *Upload profile photo* section
    in Chapter 5, *Starting with a Simple Social Media Application*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户上传了课程图片，该图片文件将作为数据存储在MongoDB中。然后，为了在视图中显示，它将从数据库中作为单独的`GET`API路由中的图片文件检索。`GET`API被设置为Express路由在`/api/courses/photo/:courseId`，它从MongoDB获取图像数据并将其作为文件发送响应。文件上传、存储和检索的实现步骤在第五章“从简单的社交媒体应用程序开始”的*上传个人照片*部分中详细说明。
- en: With the create course API endpoint ready on the server, next, we can add a
    `fetch` method in the frontend in order to utilize it.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器上的创建课程API端点准备就绪后，接下来，我们可以在前端添加一个`fetch`方法来利用它。
- en: Fetching the create API in the view
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中获取创建API
- en: 'In order to use the create API in the frontend, we will set up a `fetch` method
    on the client- side to make a `POST` request to the create API, by passing the
    multipart form data, as shown in the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端使用创建API，我们将在客户端设置一个`fetch`方法，通过传递多部分表单数据，向创建API发送`POST`请求，如下所示：
- en: '`mern-classroom/client/course/api-course.js`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/api-course.js`'
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This method will be used in the new course form view to submit the user-entered
    course details to the backend to create a new course in the database. In the next
    section, we will implement this new course form view in a React component.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将在新课程表单视图中用于将用户输入的课程详细信息提交到后端以在数据库中创建新课程。在下一节中，我们将实现这个新课程表单视图的React组件。
- en: The NewCourse component
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新课程组件
- en: 'In order to allow educators to create new courses, we will add a React component
    that contains a form to the frontend of the application. This form view will look
    as shown in the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让教育工作者能够创建新的课程，我们将在应用程序的前端添加一个包含表单的React组件。这个表单视图将看起来如下所示：
- en: '![](img/fc891e11-0c2b-4764-bf1d-cd1f167a3ef1.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc891e11-0c2b-4764-bf1d-cd1f167a3ef1.png)'
- en: The form will contain an option to upload the course image, input fields for
    entering the course Name, Description, and Category; and the SUBMIT button, which
    will save the details that have been entered into the database.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 表单将包含一个上传课程图片的选项，输入字段用于输入课程名称、描述和类别；以及提交按钮，该按钮将保存已输入的详细信息到数据库中。
- en: We will define the `NewCourse` React component in order to implement this form.
    As shown next, we first initialize the state by using the `useState` hook; with
    empty input field values, an empty error message, and a `redirect` variable that
    is initialized to `false`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将定义`NewCourse`React组件来实现这个表单。如下所示，我们首先使用`useState`钩子初始化状态；使用空输入字段值、空错误消息和一个初始化为`false`的`redirect`变量。
- en: '`mern-classroom/client/course/NewCourse.js`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/NewCourse.js`:'
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the form view, we first give the user an option to upload a course image
    file. To render this option, we will add the file upload elements using a Material-UI button
    and an HTML5 file input element in the return function for `NewCourse`, as shown
    in the following code.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单视图中，我们首先给用户一个上传课程图片文件的选项。为了呈现这个选项，我们将在`NewCourse`的返回函数中使用Material-UI按钮和HTML5文件输入元素添加文件上传元素，如下面的代码所示。
- en: '`mern-classroom/client/course/NewCourse.js`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/NewCourse.js`:'
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Then, we add the `name`, `description`, and `category` form fields using the
    `TextField` components from Material-UI.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用Material-UI的`TextField`组件添加`name`、`description`和`category`表单字段。
- en: '`mern-classroom/client/course/NewCourse.js`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/NewCourse.js`:'
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We will define a handler function in `NewCourse` so that we can track changes
    to these fields in the form view.  The `handleChange` function will be defined
    as shown in the following code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`NewCourse`中定义一个处理函数，以便我们可以跟踪表单视图中这些字段的变化。`handleChange`函数将定义如下：
- en: '`mern-classroom/client/course/NewCourse.js`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/NewCourse.js`'
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This `handleChange` function takes the new value that has been entered into
    the input field and sets it to state, including the name of the file if one is
    uploaded by the user.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`handleChange`函数接受输入字段中输入的新值，并将其设置为状态，包括如果用户上传了文件，则包括文件名。
- en: Finally, in the view, you can add the Submit button, which, when clicked, should
    call a click-handling function. We will define a function for this purpose in
    `NewCourse` as follows.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在视图中，你可以添加提交按钮，当点击时，应该调用一个点击处理函数。我们将在`NewCourse`中定义一个函数来完成这个目的，如下所示。
- en: '`mern-classroom/client/course/NewCourse.js`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/NewCourse.js`:'
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This `clickSubmit` function will be called when the form is submitted. It first
    takes the input values from the state and sets it to a `FormData` object. This
    ensures that the data is stored in the correct format that is needed for the `multipart/form-data` encoding
    type that is necessary for sending requests containing file uploads. Then, the `create` fetch
    method is called to create a new course in the backend. Finally, depending on
    the response from the server, either an error message is shown, or the user is
    redirected to the `MyCourses` view with the following code.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单提交时，将调用此`clickSubmit`函数。它首先从状态中获取输入值并将其设置为`FormData`对象。这确保了数据以正确的格式存储，这是发送包含文件上传请求所需的`multipart/form-data`编码类型。然后，调用`create`fetch方法在后端创建一个新的课程。最后，根据服务器的响应，要么显示错误消息，要么使用以下代码将用户重定向到`MyCourses`视图。
- en: '`mern-classroom/client/course/NewCourse.js`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/NewCourse.js`:'
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `NewCourse` component can only be viewed by a signed-in user who is also
    an educator. So, we will add a `PrivateRoute` to the `MainRouter` component, which
    will render this form only for authorized users at `/teach/course/new`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`NewCourse`组件只能由已登录的也是讲师的用户查看。因此，我们将向`MainRouter`组件添加一个`PrivateRoute`，这将只为授权用户在`/teach/course/new`渲染此表单。'
- en: '`mern-classroom/client/MainRouter.js`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/MainRouter.js`:'
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This link can be added to any of the view components that may be accessed by
    the educator, such as the `MyCourses` view, which will be implemented in the next
    section in order to list the courses that have been created by an educator.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此链接可以添加到任何可能由教育者访问的视图组件中，例如将在下一节中实现的`MyCourses`视图，以列出由教育者创建的课程。
- en: Listing courses by educator
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按教育者列出课程
- en: Authorized educators will be able to see a list of the courses that they have
    created on the platform. In order to implement this feature, in the following
    sections we will add a backend API that retrieves the list of courses for a specific
    instructor, and then we will call this API in the frontend to render this data
    in a React component.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 授权的教育者将能够看到他们在平台上创建的课程列表。为了实现此功能，在以下章节中，我们将添加一个后端API来检索特定讲师的课程列表，然后我们将在前端调用此API以在React组件中渲染这些数据。
- en: The list course API
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出课程API
- en: In order to implement the API to return the list of courses that have been created
    by a specific instructor, first, we will add a route in the backend to retrieve
    all the courses that have been created by a given user when the server receives
    a `GET` request at `/api/courses/by/:userId`. This route will be declared as shown
    next.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现返回由特定讲师创建的课程列表的API，首先，我们将在后端添加一个路由来检索当服务器在`/api/courses/by/:userId`接收`GET`请求时由给定用户创建的所有课程。此路由将声明如下。
- en: '`mern-classroom/server/routes/course.routes.js`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/routes/course.routes.js`:'
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: To process the `:userId` param in the route and retrieve the associated user
    from the database, we will utilize the `userByID` method in our user controller.
    We will add the following code to the Course routes in `course.routes.js`, so
    that the user is available in the `request` object as `profile`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理路由中的`:userId`参数并从数据库检索关联的用户，我们将在用户控制器中使用`userByID`方法。我们将在`course.routes.js`中的课程路由中添加以下代码，以便用户在`request`对象中作为`profile`可用。
- en: '`mern-classroom/server/routes/course.routes.js`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/routes/course.routes.js`:'
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `listByInstructor` controller method in `course.controller.js` will query
    the `Course` collection in the database in order to get the matching courses,
    as shown next.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在`course.controller.js`中的`listByInstructor`控制器方法将查询数据库中的`Course`集合以获取匹配的课程，如下所示。
- en: '`mern-classroom/server/controllers/course.controller.js`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/course.controller.js`:'
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the query to the Course collection, we find all the courses that have an
    `instructor` field that matches the user specified with the `userId` param. Then,
    the resulting courses are sent back in the response to the client. In the next
    section, we will see how to call this API from the frontend.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在查询课程集合时，我们找到所有具有与用户指定的`userId`参数匹配的`instructor`字段的课程。然后，将这些课程作为响应发送给客户端。在下一节中，我们将看到如何从前端调用此API。
- en: Fetching the list API in the view
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中获取列表API
- en: In order to use the list API in the frontend, we will define a `fetch` method
    that can be used by the React components to load this list of courses. The `fetch`
    method that is needed in order to retrieve a list of courses by a specific instructor
    will be defined as follows.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端使用列表API，我们将定义一个`fetch`方法，该方法可以被React组件用来加载这些课程列表。需要用来通过特定讲师检索课程列表的`fetch`方法将定义如下。
- en: '`mern-classroom/client/course/api-course.js`'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/api-course.js`'
- en: '[PRE28]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This `listByInstructor` method will take the `userId` value in order to generate
    the API route to be called, and will receive the list of courses that were created
    by the user associated with the provided `userId` value. In the classroom application,
    we will utilize this method in the `MyCourses` component, which is discussed in
    the next section.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此`listByInstructor`方法将获取`userId`值以生成要调用的API路由，并将接收与提供的`userId`值关联的用户创建的课程列表。在教室应用程序中，我们将在下一节讨论的`MyCourses`组件中使用此方法。
- en: The MyCourses component
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MyCourses组件
- en: 'In the `MyCourses` component, we will render the list of courses in a Material-UI
    `List`, after fetching the data from the server using the `listByInstructor` API.
    This component, as pictured in the following image, will function as the educator''s
    dashboard, where their courses are listed and they have an option to add new courses:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MyCourses`组件中，我们将使用`listByInstructor` API从服务器获取数据后，在Material-UI `List`中渲染课程列表。如图所示，此组件将作为教育者的仪表板，其中列出他们的课程，并有一个选项添加新课程：
- en: '![](img/6c44b751-0834-4c07-8dd9-41679c40d520.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6c44b751-0834-4c07-8dd9-41679c40d520.png)'
- en: In order to implement this component, we first need to fetch and render the
    list of courses. We will make the fetch API call in the `useEffect` hook, and
    set the received courses array in the state, as shown next.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现此组件，我们首先需要获取和渲染课程列表。我们将在`useEffect`钩子中执行获取API调用，并将接收到的课程数组设置在状态中，如下所示。
- en: '`mern-classroom/client/course/MyCourses.js`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/MyCourses.js`'
- en: '[PRE29]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: When the `listByInstructor` API is fetched, we pass the currently signed-in
    user's auth token to check for authorization on the server- side. Users should
    only be able to see their own courses, and if the current user is not authorized
    to make this fetch call, the view will be redirected to the sign-in page. Otherwise,
    the list of courses will be returned and displayed in the view.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当`listByInstructor` API被获取时，我们将传递当前登录用户的认证令牌以在服务器端检查授权。用户应该只能看到他们自己的课程，如果当前用户没有权限进行此获取调用，视图将被重定向到登录页面。否则，将返回并显示在视图中的课程列表。
- en: 'In this `MyCourses` component''s view, we will render the retrieved courses
    array by iterating over it using `map`, with each course data rendered in the
    view in a Material-UI `ListItem`. Each `ListItem` will also be linked to the individual
    course view, as shown in the following code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在此`MyCourses`组件的视图中，我们将通过使用`map`迭代检索到的课程数组，在视图中渲染每个课程数据，每个`ListItem`都将链接到单个课程视图，如下所示：
- en: '`mern-classroom/client/course/MyCourses.js`'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/MyCourses.js`'
- en: '[PRE30]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `MyCourses` component can only be viewed by a signed-in user who is also
    an educator. So, we will add a `PrivateRoute` in the `MainRouter` component, which
    will render this component only for authorized users, at `/seller/courses`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyCourses`组件只能由已登录且也是教育者的用户查看。因此，我们将在`MainRouter`组件中添加一个`PrivateRoute`，这样只有授权用户才能在`/seller/courses`渲染此组件。'
- en: '`mern-classroom/client/MainRouter.js`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/MainRouter.js`:'
- en: '[PRE31]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We use this frontend route in the <q>TEACH</q> link on the menu, which directs
    a signed-in educator to this `MyCourses` view. In this view, users can click on
    each course in the list, and go to the page that shows the details of a specific
    course. In the next section, we will implement the feature to render an individual
    course.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在菜单上的<q>TEACH</q>链接中使用这个前端路由，该链接将已登录的教育者导向此`MyCourses`视图。在这个视图中，用户可以点击列表中的每一门课程，并转到显示特定课程详情的页面。在下一节中，我们将实现渲染单个课程的功能。
- en: Display a course
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示课程
- en: Users on the MERN Classroom application, including visitors, signed-in students,
    and educators alike, will all be able to browse through course pages, with interactions
    that are specific to their authorization level. In the following sections, we
    will start implementing the individual course view feature by adding a read course
    API to the backend, a way to call this API from the frontend, and the React component
    that will house the course detail view.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Classroom应用程序的用户，包括访客、已登录的学生和教育者，都将能够浏览课程页面，并具有与其授权级别相关的交互。在接下来的几节中，我们将通过在后台添加读取课程API、从前端调用此API的方法以及将容纳课程详情视图的React组件来实现单个课程视图功能。
- en: A read course API
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个读取课程API
- en: In order to implement a read course API in the backend, we will start by declaring
    the `GET` route and the parameter-handling trigger, as shown in the following
    code.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在后台实现一个读取课程API，我们首先声明`GET`路由和参数处理触发器，如下面的代码所示。
- en: '`mern-classroom/server/routes/course.routes.js`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/routes/course.routes.js`:'
- en: '[PRE32]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We are adding this `GET` route to query the `Course` collection with an ID and
    return the corresponding course in the response. The `:courseId` param in the
    route URL will call the `courseByID` controller method, which is similar to the `userByID` controller
    method. It retrieves the course from the database, and attaches it to the request
    object that is to be used in the `next` method, as shown in the following code.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加这个`GET`路由来查询具有ID的`Course`集合，并在响应中返回相应的课程。路由URL中的`:courseId`参数将调用`courseByID`控制器方法，该方法与`userByID`控制器方法类似。它从数据库中检索课程，并将其附加到用于`next`方法的请求对象中，如下面的代码所示。
- en: '`mern-classroom/server/controllers/course.controller.js`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/course.controller.js`:'
- en: '[PRE33]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The course object that is queried from the database will also contain the name
    and ID details of the instructor, as we specified in the `populate()` method.
    The call to `next()` after this course object is attached to the request object
    invokes the `read` controller method. The `read` controller method then returns
    this `course` object in the response to the client, as shown in the following
    code.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库查询的课程对象还将包含讲师的名称和ID详情，正如我们在`populate()`方法中指定的。在将此课程对象附加到请求对象后调用`next()`将调用`read`控制器方法。然后`read`控制器方法将此`course`对象作为响应返回给客户端，如下面的代码所示。
- en: '`mern-classroom/server/controllers/course.controller.js`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/course.controller.js`:'
- en: '[PRE34]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: We are removing the image field before sending the response, since images will
    be retrieved as files in separate routes. With this API ready in the backend,
    you can now add the implementation in order to call it in the frontend, by adding
    a `fetch` method in `api-course.js`, which is similar to other `fetch` methods
    that have already been added. We will use the `fetch` method to call the read
    course API in the React component that will render the course details, as discussed
    in the next section.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在发送响应之前，我们将移除图片字段，因为图片将通过单独的路由作为文件检索。随着后端这个API的准备好，你现在可以添加实现，以便在前端调用它，通过在`api-course.js`中添加一个`fetch`方法，该方法与其他已经添加的`fetch`方法类似。我们将使用`fetch`方法来调用将在渲染课程详情的React组件中读取课程API，正如下一节所讨论的。
- en: The Course component
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 课程组件
- en: 'The `Course` component will render the individual course-specific details and
    user interactions, as pictured in the following screenshot:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`Course`组件将渲染单个课程特定的细节和用户交互，如下面的截图所示：'
- en: '![](img/fffdec46-3596-46b0-b702-846913f132cd.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fffdec46-3596-46b0-b702-846913f132cd.png)'
- en: 'The completed `Course` component will contain the following parts:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的 `Course` 组件将包含以下部分：
- en: A section showing course details, which is visible to all visitors to this page.
    We will implement this part in this section.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个显示课程详情的部分，对所有访问者可见。我们将在这个部分实现这一部分。
- en: A <q>Lessons</q> section, which contains a list of lessons and is visible to
    all visitors, and the option to add a new lesson, which will be visible only to
    the instructor of this course. We will implement the lessons part in the next
    section.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 <q>课程</q> 部分，包含课程列表，对所有访问者可见，以及添加新课程的选项，这个选项只对这门课程的讲师可见。我们将在下一节实现课程部分。
- en: Edit, delete, and publish options, which are visible only to the instructor.
    This will be discussed later in the chapter.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑、删除和发布选项，只有讲师可见。这部分将在本章后面讨论。
- en: An <q>Enroll</q> option, not pictured in the previous image,  which will only
    be visible after the course has been published by the instructor. This will be
    implemented later in the chapter.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个未在上一张图片中显示的 <q>报名</q> 选项，只有在课程被讲师发布后才会可见。这部分将在本章后面实现。
- en: To start off the implementation of this `Course` component, we will first retrieve
    the course details with a fetch call to the read API in a `useEffect` hook, and
    then we will set the received values to state, as shown in the following code.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始实现此 `Course` 组件，我们首先将使用 `useEffect` 钩子通过读取 API 的 fetch 调用检索课程详情，然后我们将设置接收到的值到状态中，如下面的代码所示。
- en: '`mern-classroom/client/course/Course.js`'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/Course.js`'
- en: '[PRE35]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`useEffect` will only run when `courseId` changes in the route params.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`useEffect` 只会在路由参数中的 `courseId` 发生变化时运行。'
- en: 'In the view, we will render the received details, such as course name, description,
    category, image, and a link to the instructor''s user profile in a Material-UI
    `Card` component, as shown in the following code:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图中，我们将渲染接收到的详情，例如课程名称、描述、类别、图片以及链接到讲师用户资料的 Material-UI `Card` 组件，如下面的代码所示：
- en: '`mern-classroom/client/course/Course.js`'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/Course.js`'
- en: '[PRE36]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '`imageUrl` consists of the route that will retrieve the course image as a file
    response, and it is constructed as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`imageUrl` 包含检索课程图片作为文件响应的路由，并且它被构建如下：'
- en: '`mern-classroom/client/course/Course.js`'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/Course.js`'
- en: '[PRE37]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'When the course instructor is signed in and views the course page, we will
    render the edit and other course data-modifying options in the Course component.
    For now, we will only look at how the `edit` option is added conditionally to
    the view code:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当课程讲师登录并查看课程页面时，我们将在 `Course` 组件中渲染编辑和其他课程数据修改选项。目前，我们只关注如何有条件地将 `edit` 选项添加到视图代码中：
- en: '`mern-classroom/client/course/Course.js`'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/Course.js`'
- en: '[PRE38]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: If the current user is signed in, and their ID matches with the course instructor's
    ID, only then will the <q>Edit</q> option be rendered. This part will be edited
    further in upcoming sections, in order to show the publish and delete options.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前用户已登录，并且他们的 ID 与课程讲师的 ID 匹配，那么只有在这种情况下才会渲染 <q>编辑</q> 选项。这部分将在接下来的章节中进一步编辑，以便展示发布和删除选项。
- en: 'In order to load this Course component in the frontend, we will add a route
    to `MainRouter` as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端加载此 `Course` 组件，我们将在 `MainRouter` 中添加一个路由，如下所示：
- en: '[PRE39]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This route URL (`/course/:courseId`) can now be added into any component to
    link to a specific course, with the `:courseId` param replaced with the course's
    ID value. Clicking on the link will take the user to the corresponding Course
    view.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由 URL (`/course/:courseId`) 现在可以添加到任何组件中，以链接到特定的课程，其中 `:courseId` 参数将被课程 ID
    值替换。点击链接将用户带到相应的课程视图。
- en: We now have the relevant backend model and API endpoints integrated with the
    frontend views, meaning that we have a functioning implementation of the new course
    creation, a course listing by the instructor, and single-course display features.
    We can now move on to extending these implementations further, giving instructors
    the ability to add lessons to each course and update the course as desired, before
    publishing it.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经将相关的后端模型和 API 端点与前端视图集成，这意味着我们已经实现了新课程创建、讲师课程列表和单课程显示功能的运行实现。我们现在可以继续扩展这些实现，让讲师能够为每个课程添加课程，并根据需要更新课程，然后再发布。
- en: Updating courses with lessons
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新带有课程的课程
- en: Each course in the MERN Classroom will contain a list of lessons that make up
    the course content and what the students need to cover when they enroll. We will
    keep the lesson structure simple for this application, putting more emphasis on
    the implementation of managing lessons and allowing students to go through lessons
    in order to complete a course. In the following sections, we will focus on the
    implementation of managing lessons for a course, and we will also look at how
    to update an existing course—either to edit details or to delete the course. First,
    we will look into how to store lesson details, then we will implement the full-stack
    features to allow instructors to add lessons, update lessons, update details of
    the course, and delete a course.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Classroom 中的每个课程都将包含一个课程内容的课程列表，以及学生在注册时需要覆盖的内容。我们将保持课程结构简单，在这个应用程序中，我们将更多关注课程管理实现，并允许学生按顺序完成课程。在接下来的几节中，我们将专注于课程管理的实现，我们还将探讨如何更新现有课程——无论是编辑详情还是删除课程。首先，我们将探讨如何存储课程详情，然后我们将实现全栈功能，允许讲师添加课程、更新课程、更新课程详情以及删除课程。
- en: Storing lessons
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储课程
- en: We need to define the lesson data structure and associate it with the course
    data structure before we can store and retrieve lesson details for each course.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够存储和检索每个课程的课程详情之前，我们需要定义课程数据结构并将其与课程数据结构关联。
- en: We will start by defining the Lesson model, with a schema containing the title,
    the content, and the resource URL fields of the string type, as shown in the following
    code.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先定义课程模型，其中包含标题、内容和资源 URL 字段，这些字段都是字符串类型，如下面的代码所示。
- en: '`mern-classroom/server/models/course.model.js`'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/models/course.model.js`'
- en: '[PRE40]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'These schemas will let educators create and store basic lessons for their courses.
    To integrate lessons with the course structure, we will add a field called `lessons`
    in the Course model, which will store an array of lesson documents, as shown in
    the following code:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这些架构将允许教育者为他们自己的课程创建和存储基本的课程。为了将课程与课程结构集成，我们将在课程模型中添加一个名为 `lessons` 的字段，该字段将存储一个课程文档数组，如下面的代码所示。
- en: '`mern-classroom/server/models/course.model.js`'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/models/course.model.js`'
- en: '[PRE41]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: With this updated Course schema and model, we can now proceed with the implementations
    that will allow educators to add lessons to their course, as discussed in the
    next section.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个更新的课程架构和模型，我们现在可以继续实施允许教育者向他们的课程添加课程的实现，如下一节所述。
- en: Adding new lessons
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新课程
- en: Educators on the MERN Classroom application will be able to add new lessons
    to the courses that they are still building and have not yet published. In the
    following sections, we will make this feature possible, first by implementing
    a backend API that adds lessons to an existing course, then by creating a frontend
    form view for entering and sending the new lesson details, and finally, by displaying
    the newly added lessons on the Course page.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Classroom 应用程序上的教育者将能够向他们仍在构建且尚未发布的课程中添加新课程。在接下来的几节中，我们将实现这一功能，首先通过实现一个添加课程到现有课程的后端
    API，然后创建一个前端表单视图来输入和发送新课程详情，最后在课程页面上显示新添加的课程。
- en: Adding a lesson API
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加课程 API
- en: 'In order to implement a backend API that will allow us to add and store new
    lessons for a given course, we first need to declare a `PUT` route as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现一个允许我们为特定课程添加和存储新课程的后端 API，我们首先需要声明如下所示的 `PUT` 路由：
- en: '`mern-classroom/server/routes/course.routes.js`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/routes/course.routes.js`:'
- en: '[PRE42]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'When this route gets a `PUT` request with the course ID in the URL, we will
    first use the `isInstructor` method to check whether the current user is the instructor
    for the course, and then we will save the lesson in the database with the `newLesson`
    method. The `isInstructor` controller method will be defined as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个路由接收到一个包含课程 ID 的 URL 的 `PUT` 请求时，我们首先将使用 `isInstructor` 方法检查当前用户是否是该课程的讲师，然后我们将使用
    `newLesson` 方法将课程保存在数据库中。`isInstructor` 控制器方法定义如下：
- en: '`mern-classroom/server/controllers/course.controller.js`:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/course.controller.js`:'
- en: '[PRE43]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'With the `isInstructor` method, we first check whether the signed-in user has
    the same user ID as the instructor of the given course. If the user is not authorized,
    an error is returned in the response, otherwise the `next()` middleware is invoked
    in order to execute the `newLesson` method. This `newLesson` controller method
    is defined as follows:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `isInstructor` 方法，我们首先检查已登录用户是否有与给定课程讲师相同的用户 ID。如果用户未授权，则响应中返回错误，否则调用 `next()`
    中间件以执行 `newLesson` 方法。此 `newLesson` 控制器方法定义如下：
- en: '`mern-classroom/server/controllers/course.controller.js`:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/course.controller.js`:'
- en: '[PRE44]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: In this `newLesson` controller method, we use `findByIdAndUpdate` (from MongoDB)
    to find the corresponding course document, and we update its `lessons` array field
    by pushing the new lesson object that was received in the request body.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在此 `newLesson` 控制器方法中，我们使用 MongoDB 的 `findByIdAndUpdate` 来查找相应的课程文档，并通过将请求体中接收的新课程对象推送到其
    `lessons` 数组字段来更新它。
- en: In order to access this API to add a new lesson in the frontend, you will also
    need to add a corresponding fetch method, as we did for other API implementations.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端访问此 API 以添加新课程，您还需要添加相应的 fetch 方法，就像我们为其他 API 实现所做的那样。
- en: This API will be used in a form-based component that will take input from the
    user for each new lesson and then send it to the backend. We will implement this
    form-based component in the next section.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 此 API 将用于基于表单的组件，该组件将接收用户对每门新课程的输入，并将其发送到后端。我们将在下一节实现此基于表单的组件。
- en: The NewLesson component
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新课程组件
- en: 'In each course, while it is still unpublished, the instructor will be able
    to add a lesson by filling out a form. In order to implement this form view to
    add new lessons, we will create a React component called `NewLesson`, which will
    be added to the `Course` component. This component will render the following form
    in a dialog box in the Course page:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在每门课程中，当课程尚未发布时，讲师可以通过填写表格来添加课程。为了实现添加新课程的表单视图，我们将创建一个名为 `NewLesson` 的 React
    组件，并将其添加到 `Course` 组件中。此组件将在课程页面上的对话框中渲染以下表单：
- en: '![](img/0e088ba9-d2de-4436-8286-8d24dd7d0cc0.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0e088ba9-d2de-4436-8286-8d24dd7d0cc0.png)'
- en: While defining the `NewLesson` component, we will first initialize the form
    values in the state with the `useState` hook. This component will also receive
    `props` from the Course component, as shown in the following code.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义 `NewLesson` 组件时，我们首先使用 `useState` 钩子初始化状态中的表单值。此组件还将从 `Course` 组件接收 `props`，如下所示。
- en: '`mern-classroom/client/course/NewLesson.js`'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/NewLesson.js`'
- en: '[PRE45]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The `NewLesson` component will receive the `courseId` value and an `addLesson`
    function as `props` from the parent component to which it will be added; in this
    case from the `Course` component. We make these required props by adding `PropTypes`
    validation to `NewLesson`. These `props` will be needed in this component when
    the form is submitted.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`NewLesson` 组件将从要添加的父组件（在这种情况下为 `Course` 组件）接收 `courseId` 值和 `addLesson` 函数作为
    `props`。我们通过向 `NewLesson` 添加 `PropTypes` 验证来使这些 `props` 成为必需。在表单提交时，这些 `props`
    将在本组件中使用。'
- en: Next, we will add the button to toggle the dialog that will contain the form,
    as shown in the following code.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加一个按钮来切换包含表单的对话框，如下所示。
- en: '`mern-classroom/client/course/NewLesson.js`'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/NewLesson.js`'
- en: '[PRE46]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The Material-UI `Dialog` component stays open or closed, depending on the state
    of the `open` variable. We update the `open` value in the following functions,
    which are called on dialog open and close actions.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 根据状态变量 `open` 的状态，Material-UI 的 `Dialog` 组件保持打开或关闭。我们在以下函数中更新 `open` 值，这些函数在对话框打开和关闭操作时被调用。
- en: '`mern-classroom/client/course/NewLesson.js`'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/NewLesson.js`'
- en: '[PRE47]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The form fields for entering the new lesson''s title, content, and resource
    URL values are added inside the `Dialog` component using `TextFields` in `DialogContent`,
    as shown with the following code:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Dialog` 组件内部使用 `TextFields` 在 `DialogContent` 中添加了输入新课程标题、内容和资源 URL 值的表单字段，如下所示。
- en: '`mern-classroom/client/course/NewLesson.js`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/NewLesson.js`'
- en: '[PRE48]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Values that are entered in the input fields are captured with the `handleChange`
    function, which is defined as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 输入字段中输入的值将通过以下定义的 `handleChange` 函数进行捕获：
- en: '`mern-classroom/client/course/NewLesson.js`'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/NewLesson.js`'
- en: '[PRE49]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Finally, when the form is submitted, we will send the new lesson details to
    the server in the `clickSubmit` function, as shown in the following code.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当表单提交时，我们将在`clickSubmit`函数中将新的课程详情发送到服务器，如下面的代码所示。
- en: '`mern-classroom/client/course/NewLesson.js`'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/NewLesson.js`'
- en: '[PRE50]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The lesson details are sent in the request to the add lesson API with the course
    ID received as a prop from the Course component.  On a successful update response
    from the server, besides emptying the form fields, the `addLesson` update function,
    which was passed as a prop, is executed to render the latest lessons in the Course
    component. The `addLesson` function to be passed in from the `Course` component
    is defined as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 课程详情将通过带有从课程组件接收的课程ID作为属性的请求发送到添加课程API。在服务器成功更新响应后，除了清空表单字段外，还执行了作为属性传递的`addLesson`更新函数，以在课程组件中渲染最新的课程。从`Course`组件传递的`addLesson`函数定义如下：
- en: '`mern-classroom/client/course/Course.js`'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/Course.js`'
- en: '[PRE51]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The `NewLesson` component that is added to the Course component should only
    render if the current user is the instructor of the course, and if the course
    is still unpublished. To do this check and conditionally render the `NewLesson`
    component, we can add the following code to the Course component:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到课程组件中的`NewLesson`组件应该仅在当前用户是课程的讲师且课程尚未发布时才渲染。为了执行此检查和条件渲染`NewLesson`组件，我们可以在课程组件中添加以下代码：
- en: '`mern-classroom/client/course/Course.js`'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/Course.js`'
- en: '[PRE52]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: This will allow educators on the application to add lessons to their courses.
    Next, we will add the code to render these lessons on the Course page.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许应用程序上的教育工作者向他们的课程添加课程。接下来，我们将添加代码以在课程页面上渲染这些课程。
- en: Displaying lessons
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示课程
- en: 'The lessons for a specific course will be rendered in a list—along with a tally
    of the total number of lessons—on the Course page below the other course details,
    as pictured in the following screenshot:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 特定课程的课程将在课程页面下方以列表形式呈现，包括课程总数，如下面的截图所示：
- en: '![](img/08138368-6b29-470f-906c-6496f7bee367.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/08138368-6b29-470f-906c-6496f7bee367.png)'
- en: To render this list of lessons, we will update the `Course` component to iterate
    over the array of lessons with a `map` function, and each lesson will be displayed
    in a Material-UI `ListItem` component, as shown in the following code.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 为了渲染这个课程列表，我们将更新`Course`组件，使用`map`函数遍历课程数组，每个课程将在Material-UI的`ListItem`组件中显示，如下面的代码所示。
- en: '`mern-classroom/client/course/Course.js`'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/Course.js`'
- en: '[PRE53]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The number beside each list item is calculated using the current index value
    of the array. The total number of lessons can also be displayed by accessing `course.lessons.length`.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 每个列表项旁边的数字是使用数组的当前索引值计算的。也可以通过访问`course.lessons.length`来显示课程总数。
- en: Now that instructors can add and view lessons for each course, in the next section we
    will implement the ability to update these added lessons, besides modifying other
    course details.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 既然讲师可以添加和查看每门课程的课程，那么在下一节中，我们将实现更新这些添加的课程的能力，同时修改其他课程详情。
- en: Editing a course
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑课程
- en: Once a course has been added by an educator and there are more updates to be
    incorporated, the educator will be able to edit the details of the course as its
    instructor. Editing a course includes the ability to update its lessons, as well.
    To implement this capability in the application, first, we will have to create
    a backend API that allows the update operation on a given course.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦教育工作者添加了课程并且有更多更新要合并，教育工作者将能够以讲师的身份编辑课程的详情。编辑课程包括更新其课程的能力。为了在应用程序中实现这一功能，首先，我们必须创建一个后端API，允许对特定课程执行更新操作。
- en: Then, this updated API needs to be accessed in frontend with the changed details
    of the course and its lessons. In the following sections, we will build this backend
    API and the `EditCourse` React component, which will allow instructors to change
    the course details and lessons.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，需要在前端使用课程及其课程更改后的详细信息来访问这个更新的API。在接下来的章节中，我们将构建这个后端API和`EditCourse` React组件，这将允许讲师更改课程详情和课程。
- en: Updating the course API
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新课程API
- en: 'In the backend, we will need an API that allows an existing course to be updated
    if the user who is making the request is the authorized instructor of the given
    course. We will first declare the PUT route that accepts the update request from
    the client, as follows:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，我们需要一个API，允许如果请求用户是给定课程的授权讲师，则更新现有课程。我们首先声明接受客户端更新请求的PUT路由，如下所示：
- en: '`mern-classroom/server/routes/course.routes.js`:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/routes/course.routes.js`:'
- en: '[PRE54]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: A `PUT` request that is received at the `/api/courses/:courseId` route first
    checks if the signed-in user is the instructor of the course that is associated
    with the `courseId` provided in the URL. If the user is found to be authorized,
    the `update` controller is invoked. The `update` method in the course controller
    is defined as shown in the following code.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 接收到 `/api/courses/:courseId` 路由的 `PUT` 请求首先检查已登录用户是否是URL中提供的 `courseId` 关联的课程讲师。如果发现用户是授权的，则调用
    `update` 控制器。课程控制器中的 `update` 方法定义如下所示。
- en: '`mern-classroom/server/controllers/course.controller.js`:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/course.controller.js`:'
- en: '[PRE55]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: As the request body may contain a file upload, we are using `formidable` here
    to parse the multipart data. The lessons array is an array of nested objects,
    and we need to specifically parse and assign the lessons array to the course before
    saving it. As we will see in the next section, the lessons array that is sent
    from the frontend will be stringified before sending, so in this controller, we
    need to additionally check whether the lessons field was received, and assign
    it separately after parsing it.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 由于请求体可能包含文件上传，我们在这里使用 `formidable` 来解析多部分数据。课程数组是一个嵌套对象的数组，我们需要在保存之前将课程数组特别解析并分配给课程。正如我们将在下一节中看到的那样，从前端发送的课程数组在发送之前将被字符串化，因此在这个控制器中，我们需要额外检查是否收到了
    `lessons` 字段，并在解析后单独分配它。
- en: To use this API in the frontend, you will need to define a fetch method that
    takes the course ID, user auth credentials, and the updated course details, in
    order to make the fetch call to this update course API—as we have done for other
    API implementations.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 要在前端使用此API，您需要定义一个fetch方法，该方法接受课程ID、用户认证凭据和更新的课程详情，以便对更新课程API进行fetch调用——就像我们对其他API实现所做的那样。
- en: We now have a course update API that can be used in the frontend to update details
    of a course. We will use this in the `EditCourse` component, which is discussed
    next.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个可以在前端使用的课程更新API，我们可以使用它来更新课程的详细信息。我们将在 `EditCourse` 组件中使用它，接下来将讨论该组件。
- en: The EditCourse component
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The EditCourse component
- en: 'In the frontend, we will add a view for editing a course and it will have two
    sections. The first part will let the user change the course details, including
    the name, category, description, and image; and the second part will allow the
    modification of the lessons for the course. The first part of this course is pictured
    in the following screenshot:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，我们将添加一个用于编辑课程的视图，它将包含两个部分。第一部分将允许用户更改课程详情，包括名称、类别、描述和图片；第二部分将允许修改课程的课程。以下截图显示了课程的第一个部分：
- en: '![](img/e38bfc81-5f6a-4667-a47b-3c28cbb33443.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e38bfc81-5f6a-4667-a47b-3c28cbb33443.png)'
- en: To implement this view, we will define a React component named `EditCourse`.
    This component will first load the course details by calling the `read` fetch
    method in the `useEffect` hook, as shown in the following code.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现此视图，我们将定义一个名为 `EditCourse` 的React组件。此组件将首先通过在 `useEffect` 钩子中调用 `read` fetch方法来加载课程详情，如下面的代码所示。
- en: '`mern-classroom/client/course/EditCourse.js`'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/EditCourse.js`'
- en: '[PRE56]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: After successfully receiving the course data in the response, it will be set
    to the `course` variable in the state by calling `setCourse`, and it will be used
    to populate the view. The first part of this view will render the course details
    similar to the Course view but using `TextFields` instead, with an option to upload
    a new image and a Save button to make the update call, as shown in the following
    code.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功接收到响应中的课程数据后，将通过调用 `setCourse` 将其设置为状态中的 `course` 变量，并将其用于填充视图。视图的第一部分将渲染与课程视图类似但使用
    `TextFields` 的课程详情，并提供上传新图片和保存按钮以进行更新调用，如下面的代码所示。
- en: '`mern-classroom/client/course/EditCourse.js`'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/EditCourse.js`'
- en: '[PRE57]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The changes to the input fields will be handled in order to capture the newly
    entered values with the `handleChange` method, which is defined as follows.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 输入字段的更改将通过 `handleChange` 方法来处理，该方法定义如下。
- en: '`mern-classroom/client/course/EditCourse.js`'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/EditCourse.js`'
- en: '[PRE58]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'When the Save button is clicked, we will get all the course details and set
    it to `FormData`, which will be sent in the multipart format to the backend using
    the course update API. The `clickSubmit` function that is called on saving will
    be defined as follows:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击保存按钮时，我们将获取所有课程详情并将其设置为`FormData`，然后使用课程更新API以多部分格式发送到后端。在保存时调用的`clickSubmit`函数将定义如下：
- en: '`mern-classroom/client/course/EditCourse.js`'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/EditCourse.js`'
- en: '[PRE59]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The course lessons are also sent in this `FormData`, but as lessons are stored
    as an array of nested objects and `FormData` only accepts simple key-value pairs,
    we stringify the `lessons` value before assigning it.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 课程课程也通过这个`FormData`发送，但由于课程是以嵌套对象的数组形式存储的，而`FormData`只接受简单的键值对，所以在分配之前我们需要将`lessons`值进行字符串化。
- en: In order to load `EditCourse` in the frontend of the application, we need to
    declare a frontend route for it. This component can only be viewed by a signed-in
    user who is also the instructor of the course. So, we will add a `PrivateRoute` in
    the `MainRouter` component, which will render this view only for authorized users
    at `/teach/course/edit/:courseId`.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端加载`EditCourse`，我们需要为其声明一个前端路由。此组件只能由已登录且也是课程讲师的用户查看。因此，我们将在`MainRouter`组件中添加一个`PrivateRoute`，这将只为授权用户在`/teach/course/edit/:courseId`渲染此视图。
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`:'
- en: '[PRE60]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: This link is added in the Course view in order to allow access to the `EditCourse`
    page.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 此链接添加到课程视图中，以便允许访问`EditCourse`页面。
- en: We have looked at how to update and send the course details, along with all
    the lessons to the backend on saving, but we are left with the interface for editing
    the course lessons. In the following section, we will finish up the `EditCourse`
    component by looking into the implementation for updating course lessons.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了如何在保存时更新并发送课程详情以及所有课程到后端，但我们还剩下编辑课程课程的接口。在接下来的章节中，我们将通过查看更新课程课程的实现来完成`EditCourse`组件。
- en: Updating lessons
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新课程
- en: 'In order to allow instructors to update the lessons that they have added to
    a course, we will add the following section in the `EditCourse` component, which
    will allow the user to edit the lesson details, rearrange the order of the lessons,
    and delete a lesson:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许讲师更新他们添加到课程中的课程，我们将在`EditCourse`组件中添加以下部分，这将允许用户编辑课程详情、重新排列课程的顺序以及删除课程：
- en: '![](img/ba607512-7c5f-4c46-a33c-602a1c8e0601.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ba607512-7c5f-4c46-a33c-602a1c8e0601.png)'
- en: The implementation of these lesson update features will mostly rely on array
    manipulation techniques. In the following sections, we will add the interface
    for an individual lesson in the list, and discuss how the edit, move, and delete
    functionalities are implemented.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 这些课程更新功能的实现主要依赖于数组操作技术。在接下来的章节中，我们将添加列表中单个课程的接口，并讨论如何实现编辑、移动和删除功能。
- en: Editing lesson details
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑课程详情
- en: Users will be able to edit the details of each field in a lesson in the `EditCourse`
    component. In the view, each item in the list of lessons will contain three `TextFields` for
    each of the fields in a lesson. These will be prepopulated with the existing values
    of the fields as shown in the following code.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将能够在`EditCourse`组件中编辑每个字段的课程详情。在视图中，课程列表中的每个项目将包含三个`TextFields`，用于课程中的每个字段。这些字段将预先填充现有值，如下面的代码所示。
- en: '`mern-classroom/client/course/EditCourse.js`'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/EditCourse.js`'
- en: '[PRE61]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'In order to handle the changes made to the values in each field, we will define
    a `handleLessonChange` method, which will take the field name and the corresponding
    lesson''s index in the array. The `handleLessonChange` method will be defined
    as follows:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理每个字段中值的变化，我们将定义一个`handleLessonChange`方法，它将接受字段名称和数组中相应课程的索引。`handleLessonChange`方法将定义如下：
- en: '`mern-classroom/client/course/EditCourse.js`'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/EditCourse.js`'
- en: '[PRE62]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The lessons array in the course is updated in the state, after setting the value
    in the specified field of the lesson at the provided index. This updated course
    with the modified lesson will get saved to the database when the user clicks Save
    in the `EditCourse` view. Next, we will look at how we can allow the user to rearrange
    the order of the lessons.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在课程中，课程数组在设置指定字段中提供的索引的值后更新状态。当用户在`EditCourse`视图中点击保存时，这个经过修改的课程将包含修改后的课程并保存到数据库。接下来，我们将看看我们如何允许用户重新排列课程的顺序。
- en: Moving the lessons to rearrange the order
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动课程以重新排列顺序
- en: 'While updating lessons, the user will also be able to reorder each lesson on
    the list. There will be an up arrow button for each lesson, except for the very
    first lesson. This button will be added to each lesson item in the view as follows:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新课程时，用户还将能够重新排列列表中的每个课程。除了第一个课程外，每个课程都将有一个向上箭头按钮。此按钮将按以下方式添加到视图中的每个课程项：
- en: '`mern-classroom/client/course/EditCourse.js`'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/EditCourse.js`'
- en: '[PRE63]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'When the user clicks this button, the lesson in the current index will be moved
    up, and the lesson above it will be moved to its place in the array. The `moveUp`
    function will implement this behavior as follows:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击此按钮时，当前索引的课程将被向上移动，而上面的课程将移动到数组中的该位置。`moveUp`函数将按以下方式实现此行为：
- en: '`mern-classroom/client/course/EditCourse.js`'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/EditCourse.js`'
- en: '[PRE64]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The rearranged lessons array is then updated in the state, and will be saved
    to the database when the user saves the changes in the `EditCourse` page. Next,
    we will implement the option to delete a lesson from the list.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 重新排列的课程数组随后更新到状态中，当用户在`EditCourse`页面保存更改时，它将被保存到数据库中。接下来，我们将实现从列表中删除课程的功能。
- en: Deleting a lesson
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除课程
- en: 'In the `EditCourse` page, each item rendered in the lessons list will have
    a delete option. The Delete button will be added in the view to each list item
    as follows:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在`EditCourse`页面，渲染在课程列表中的每个项目都将有一个删除选项。删除按钮将按以下方式添加到视图中的每个列表项：
- en: '`mern-classroom/client/course/EditCourse.js`'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/EditCourse.js`'
- en: '[PRE65]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'When the Delete button is clicked, we will take the index of the lesson that
    is being deleted and remove it from the `lessons` array. The `deleteLesson` function,
    which is called when the button is clicked, is defined as follows:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击删除按钮时，我们将获取正在被删除的课程索引，并将其从`lessons`数组中移除。当按钮被点击时调用的`deleteLesson`函数定义如下：
- en: '`mern-classroom/client/course/EditCourse.js`'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/EditCourse.js`'
- en: '[PRE66]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: In this function, we are splicing the array to remove the lesson from the given
    index, then adding the updated array in the course in the state. This new lesson
    array will be sent to the database with the course object when the user clicks
    the Save button in the `EditCourse` page.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在此函数中，我们正在通过从给定索引中删除课程来切割数组，然后将更新后的数组添加到状态中的课程中。当用户在`EditCourse`页面点击保存按钮时，这个新的课程数组将与课程对象一起发送到数据库。
- en: This wraps up the three different ways an instructor can change the lessons
    for their course. With these implementations using array manipulation techniques
    integrated with the React component's features, the users can now edit the details,
    rearrange the order, and delete a lesson. In the next section, we will discuss
    the only remaining feature for modifying a course, which is the ability to delete
    it from the database.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 这总结了讲师可以改变其课程的三种不同方式。通过使用与React组件特性集成的数组操作技术，用户现在可以编辑细节、重新排列顺序以及删除课程。在下一节中，我们将讨论修改课程所剩下的唯一功能，即从数据库中删除课程的能力。
- en: Deleting a course
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除课程
- en: In the MERN Classroom application, instructors will be able to permanently delete
    courses if the course has not been published already. In order to allow an instructor
    to delete a course, first, we will define a backend API for course deletion from
    the database, and then implement a React component that makes use of this API
    when the user interacts with the frontend to perform this deletion.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Classroom应用程序中，如果课程尚未发布，讲师将能够永久删除课程。为了允许讲师删除课程，首先，我们将定义一个从数据库中删除课程的后端API，然后实现一个React组件，当用户与前端交互以执行此删除时，将使用此API。
- en: The delete course API
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除课程API
- en: In order to implement a backend API that takes a request to delete a specified
    course from the database, we will first define a DELETE route as shown in the
    following code.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现一个后端API，该API接受从数据库中删除指定课程的请求，我们首先定义一个如下所示的DELETE路由。
- en: '`mern-classroom/server/routes/course.routes.js`:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/routes/course.routes.js`:'
- en: '[PRE67]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: This DELETE route takes the course ID as a URL parameter and checks if the current
    user is signed in and authorized to perform this delete, before proceeding to
    the `remove` controller method, which is defined in the following code.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 此DELETE路由接受课程ID作为URL参数，并在继续到以下代码中定义的`remove`控制器方法之前，检查当前用户是否已登录并有权执行此删除操作。
- en: '`mern-classroom/server/controllers/course.controller.js`:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/course.controller.js`:'
- en: '[PRE68]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The `remove` method simply deletes the course document that corresponds to the
    provided ID from the Courses collection in the database. To access this backend
    API in the frontend, you will also need a fetch method with this route; similar
    to other API implementations. The fetch method will need to take the course ID
    and current user's auth credentials, then call the delete API with these values.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`remove`方法简单地从数据库中对应提供的ID的课程集合中删除课程文档。要在前端访问此后端API，你还需要一个具有此路由的fetch方法；类似于其他API实现。fetch方法需要接受课程ID和当前用户的认证凭据，然后使用这些值调用删除API。'
- en: The fetch method will be used when the user performs the delete operation by
    clicking a button on the interface. In the next section, we will discuss a React
    component called `DeleteCourse`, which is where this interaction will take place.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户通过界面上的按钮点击执行删除操作时，将使用fetch方法。在下一节中，我们将讨论一个名为`DeleteCourse`的React组件，这是此交互发生的地方。
- en: The DeleteCourse component
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`DeleteCourse`组件'
- en: 'The instructor for a course will see a delete option on the Course page when
    they are logged in and they are viewing an unpublished course. This delete option
    will be implemented in its own React component called `DeleteCourse`, and this
    component will be added to the `Course` component. The `DeleteCourse` component
    is basically a button, which, when clicked, opens a `Dialog` component asking
    the user to confirm the `delete` action, as shown in the following screenshot:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 当讲师登录并查看未发布的课程时，他们将在课程页面上看到一个删除选项。此删除选项将在名为`DeleteCourse`的独立React组件中实现，并将此组件添加到`Course`组件中。`DeleteCourse`组件基本上是一个按钮，当点击时，会打开一个`Dialog`组件，提示用户确认`删除`操作，如下面的截图所示：
- en: '![](img/68180458-7c68-41a3-b3c3-36ddb3099636.png)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/68180458-7c68-41a3-b3c3-36ddb3099636.png)'
- en: 'The implementation of the `DeleteCourse` component is similar to the `DeleteUser`
    component, as discussed in [Chapter 4](6f2ca10a-8079-4e3a-9d42-a3db8e85b9d9.xhtml),
    *Adding a React Frontend to Complete MERN*. Instead of a user ID, the `DeleteCourse`
    component will take the course ID and the `onRemove` function definition from
    the `Course` component as props, when it is added to `Course`, as shown in the
    following code:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`DeleteCourse`组件的实现与第4章中讨论的`DeleteUser`组件类似，即添加React前端以完成MERN。当`DeleteCourse`组件添加到`Course`组件中时，它将接受课程ID和从`Course`组件中获取的`onRemove`函数定义作为props，而不是用户ID，如下面的代码所示：'
- en: '`mern-classroom/client/course/Course.js`'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/Course.js`'
- en: '[PRE69]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: With this implementation, course instructors will be able to remove a course
    from the platform.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此实现，课程讲师将能够从平台上删除课程。
- en: In this section, we added the ability to add lessons to a course by extending
    the Course model and implementing a Lesson model. Then, we added the necessary
    backend APIs and user interface updates to be able to add lessons, modify course
    details and lessons, and delete lessons and courses. The course module is now
    ready for us to implement the ability to publish a course and make it available
    on the application for enrollment. We will discuss this publishing feature in
    the next section.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们通过扩展课程模型并实现课程模型，增加了向课程添加课程的能力。然后，我们添加了必要的后端API和用户界面更新，以便添加课程、修改课程详情和课程，以及删除课程和课程。现在课程模块已经准备好，我们可以实现发布课程并使其在应用程序中可供报名的能力。我们将在下一节讨论此发布功能。
- en: Publishing courses
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布课程
- en: In the MERN Classroom, only courses that are published will be available to
    other users on the platform for enrollment. Once an instructor has created the
    course and updated it with lessons, they will have the option to publish it. Published
    courses will be listed on the home page, and all visitors will be able to view
    them. In the rest of this section, we will look into the implementation of allowing
    instructors to publish a course and listing these published courses in the frontend.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Classroom中，只有已发布的课程才可供平台上的其他用户报名。一旦讲师创建了课程并更新了课程内容，他们将有发布课程的选择。发布的课程将列在主页上，所有访客都可以查看。在本节的其余部分，我们将探讨允许讲师发布课程并在前端列出这些发布课程的实施。
- en: Implementing the publish option
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现发布选项
- en: Instructors for each course will be given the option to publish their course
    after they have added at least one lesson to the course. Publishing a course will
    also mean that the course can no longer be deleted, new lessons cannot be added,
    and existing lessons cannot be deleted. So, when the instructors choose to publish,
    they will be asked to confirm the action. In this section, we will look at how
    to use and extend the existing course module in order to integrate this publishing
    feature.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 每个课程的讲师在至少向课程添加一个课时后，将有权发布他们的课程。发布课程还意味着课程将不能再被删除，无法添加新课时，也无法删除现有课时。因此，当讲师选择发布时，他们将被要求确认此操作。在本节中，我们将探讨如何使用和扩展现有的课程模块以集成此发布功能。
- en: Publish button states
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布按钮状态
- en: 'In the course view, when the instructor is logged in, they will see the PUBLISH
    button in three states, depending on whether the course can be published or not,
    and whether it is already published, as shown in the following screenshot:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在课程视图中，当讲师登录时，他们将根据课程是否可以发布以及是否已经发布，看到“发布”按钮的三个状态，如下所示截图：
- en: '![](img/69f3873d-af19-467c-8b4c-b4fbf2bba923.png)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/69f3873d-af19-467c-8b4c-b4fbf2bba923.png)'
- en: 'The states of this button will primarily depend on whether the `published`
    attribute of the course document is set to `true` or `false`, and on the length
    of the `lessons` array. The button will be added to the `Course` component, as
    shown in the following code:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 此按钮的状态主要取决于课程文档的`published`属性是否设置为`true`或`false`，以及`lessons`数组的长度。按钮将被添加到`Course`组件中，如下所示代码：
- en: '`mern-classroom/client/course/Course.js`'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/Course.js`'
- en: '[PRE70]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The delete option will only be rendered if the course is not already published.
    When the PUBLISH button is clicked, we will open a dialog asking the user for
    confirmation. The `clickPublish` function will be called when the button is clicked,
    and is defined as follows:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 删除选项只有在课程尚未发布时才会渲染。当点击“发布”按钮时，我们将打开一个对话框，要求用户确认。当按钮被点击时，将调用`clickPublish`函数，定义如下：
- en: '`mern-classroom/client/course/Course.js`'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/Course.js`'
- en: '[PRE71]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The `clickPublish` function will only open the dialog box if the length of the
    lessons array is more than zero; preventing the instructor from publishing a course
    without any lessons. Next, we will add the dialog box, which will let the instructor
    publish the course after confirmation.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`clickPublish` 函数只有在课程数组长度大于零时才会打开对话框；防止讲师在没有课程的情况下发布课程。接下来，我们将添加对话框，让讲师在确认后发布课程。'
- en: Confirm to publish
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确认发布
- en: 'When the instructor clicks on the PUBLISH button, they will see a dialog box
    informing them of the consequences of this action, and giving them the options
    to PUBLISH the course or CANCEL the action. The dialog box will look as follows:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 当讲师点击“发布”按钮时，他们将看到一个对话框，告知他们此操作的结果，并给他们提供发布课程或取消操作的选择。对话框将如下所示：
- en: '![](img/1b3f4aba-d4f8-4ed4-bb24-f3b8fa232b18.png)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1b3f4aba-d4f8-4ed4-bb24-f3b8fa232b18.png)'
- en: To implement this dialog box, we will use the Material-UI `Dialog` component
    with the title and content text, and the PUBLISH and CANCEL buttons, as shown
    in the following code.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现此对话框，我们将使用Material-UI的`Dialog`组件，包括标题和内容文本，以及发布和取消按钮，如下所示代码。
- en: '`mern-classroom/client/course/Course.js`'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/Course.js`'
- en: '[PRE72]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'When the PUBLISH button on the dialog is clicked by the user as confirmation
    to publish the course, we will make an update API call to the backend, with the
    `published` attribute of the course set to `true`. The `publish` function to make
    this update will be defined as follows:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击对话框中的“发布”按钮作为确认发布课程时，我们将向后端发出更新API调用，将课程的`published`属性设置为`true`。定义此更新的`publish`函数如下：
- en: '`mern-classroom/client/course/Course.js`'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/Course.js`'
- en: '[PRE73]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: In this function, we are using the same update API that has already been defined
    and used for saving modifications to other course details from the `EditCourse`
    view. Once the backend is successfully updated with the `published` value, it
    is also updated in the state of the `Course` component.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在此函数中，我们使用的是已经定义并用于从“编辑课程”视图保存其他课程细节修改的相同更新API。一旦后端成功更新了`published`值，它也会在`Course`组件的状态中更新。
- en: This `published` attribute in the course can be used to conditionally hide the
    options to add a new lesson, delete a course, and delete a lesson in both the
    `Course` and `EditCourse` components, in order to prevent the instructor from
    performing these actions after the course is already published. As courses are
    published by instructors, these courses will be listed in a view for all users
    on the platform, as discussed in the following section.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 在课程中，这个`published`属性可以用来在`Course`和`EditCourse`组件中条件性地隐藏添加新课程、删除课程和删除课程的选项，以防止讲师在课程发布后执行这些操作。由于课程是由讲师发布的，因此这些课程将在平台上的所有用户视图中被列出，如以下章节所述。
- en: Listing published courses
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出已发布课程
- en: All visitors to the MERN Classroom application will be able to access the published
    courses. In order to present these published courses, we will add the feature
    to retrieve all the published courses from the database, and display the courses
    in a list on the home page. In the following sections, we will implement this
    feature by first defining the backend API, which will take a request and return
    the list of published courses. Then, we will implement the frontend component
    that will fetch this API and render the courses.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 访问MERN Classroom应用程序的所有访客都将能够访问已发布的课程。为了展示这些已发布的课程，我们将添加一个功能来从数据库中检索所有已发布的课程，并在主页上以列表形式显示课程。在接下来的章节中，我们将通过首先定义后端API来实现这个功能，该API将接收请求并返回已发布课程的列表。然后，我们将实现前端组件，该组件将获取此API并渲染课程。
- en: The published courses API
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 已发布课程API
- en: 'In order to retrieve the list of published courses from the database, we will
    implement an API in the backend, by first declaring the route that will take a
    GET request at `''/api/courses/published''`, as shown in the following code:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从数据库中检索已发布课程的列表，我们将在后端实现一个API，首先声明一个接收GET请求的路径`'/api/courses/published'`，如下面的代码所示：
- en: '`mern-classroom/server/routes/course.routes.js`:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/routes/course.routes.js`:'
- en: '[PRE74]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'A GET request to this route will invoke the `listPublished` controller method,
    which initiates a query to the Course collection for courses that have the `published`
    attribute''s value as `true`. Then, the resulting courses are returned in the
    response. The `listPublished` controller method is defined as follows:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 向此路由发送GET请求将调用`listPublished`控制器方法，该方法启动对具有`published`属性值为`true`的课程的查询。然后，结果课程在响应中返回。`listPublished`控制器方法定义如下：
- en: '`mern-classroom/server/controllers/course.controller.js`:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/course.controller.js`:'
- en: '[PRE75]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: To use this list API in the frontend, we also need to define a fetch method
    on the client- side, as we did for all the other API calls. Then, the fetch method
    will be used in the component, which will retrieve and display the published courses. In
    the next section, we will look into the implementation of rendering the retrieved
    course list in a React component.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端使用这个列表API，我们还需要在客户端定义一个fetch方法，就像我们为所有其他API调用所做的那样。然后，这个fetch方法将在组件中使用，用于检索并显示已发布的课程。在下一节中，我们将探讨在React组件中渲染检索到的课程列表的实现。
- en: The Courses component
  id: totrans-372
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 课程组件
- en: 'For displaying the list of published courses, we will design a component that
    takes the array of courses as props from the parent component that it is added
    to. In the MERN Classroom application, we will render the published courses on
    the home page, as pictured in the next screenshot:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示已发布课程的列表，我们将设计一个组件，该组件从它所添加的父组件接收课程数组作为props。在MERN Classroom应用程序中，我们将在主页上渲染已发布的课程，如下一张截图所示：
- en: '![](img/c58f4d6c-3188-4561-82f7-7f7a7e54e7cf.png)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c58f4d6c-3188-4561-82f7-7f7a7e54e7cf.png)'
- en: 'In the `Home` component, we will retrieve the list of published courses from
    the backend in a `useEffect` hook, as shown in the following code:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Home`组件中，我们将使用`useEffect`钩子从后端检索已发布课程的列表，如下面的代码所示：
- en: '`mern-classroom/client/core/Home.js`'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/core/Home.js`'
- en: '[PRE76]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Once the list of courses is received, it is set to the `courses` variable in
    the state. We will pass this `courses` array to the `Courses` component as props
    when it is added to the `Home` component, as follows:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦收到课程列表，它就被设置到状态中的`courses`变量。当它被添加到`Home`组件时，我们将这个`courses`数组作为props传递给`Courses`组件，如下所示：
- en: '`mern-classroom/client/core/Home.js`'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/core/Home.js`'
- en: '[PRE77]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'This `Courses` component will take these props and iterate through the array
    to render each course in a `GridList` component from Material-UI. The `Courses`
    component is defined as shown in the following code:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 此`Courses`组件将接受这些属性并遍历数组，使用Material-UI的`GridList`组件渲染每个课程。`Courses`组件的定义如下所示：
- en: '`mern-classroom/client/course/Courses.js`'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/Courses.js`'
- en: '[PRE78]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Each course in the list will display its name, category, and image, and will
    be linked to the individual course page. The Enroll option, which will be implemented
    in its own component, will also be shown for each course, but only to the users
    who are signed in, and are browsing through the home page.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的每个课程将显示其名称、类别和图片，并将链接到单个课程页面。将实现一个独立的组件来显示每个课程的注册选项，但仅对已登录并浏览主页的用户显示。
- en: With courses now publishable by instructors and viewable by all visitors to
    the application, we can now start the implementation for enrollment on courses.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 由于现在讲师可以发布课程，所有应用程序的访客都可以查看，我们可以开始实施课程注册功能。
- en: Enrolling on courses
  id: totrans-386
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册课程
- en: All visitors to the MERN Classroom application will have the option to sign
    in and then enroll on any of the published courses. Enrolling on a course would
    give them access to the lesson details and would allow them to go through the
    lessons systematically to complete the course. In order to implement this feature,
    in this section, we will first define an Enrollment model to store enrollment
    details in the database. Then, we will add the backend API to create new enrollments
    when end users interact with the `Enroll` component that will be added to the
    frontend. Finally, we will implement the view that enables a student to see and
    interact with the content from the course on which they are enrolled.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Classroom应用程序的所有访客都有登录并注册任何已发布课程的选项。注册课程将使他们能够访问课程详情，并允许他们系统地学习课程。为了实现此功能，在本节中，我们首先定义一个注册模型来在数据库中存储注册详情。然后，我们将添加后端API，以便当最终用户与将要添加到前端的前端`Enroll`组件交互时创建新的注册。最后，我们将实现一个视图，使学生能够查看和与其注册的课程内容进行交互。
- en: Defining an Enrollment model
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义注册模型
- en: 'We will define an Enrollment schema and model in order to store the details
    of each enrollment in the application. It will have fields to store the reference
    to the course being enrolled in and the user who is enrolling as a student. It
    will also store an array corresponding to the lessons in the associated course,
    which will store the completion status of each of the lessons for this student.
    Additionally, we will store three timestamp values; the first value will signify
    when the student enrolled, the second value will indicate the last time that they
    completed a lesson or updated the enrollment, and finally, when they completed
    the course. This enrollment model will be defined in `server/models/enrollment.model.js`,
    and the code defining the enrollment fields are given in the following list with
    explanations:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将定义一个注册模式（schema）和模型来存储应用程序中每个注册的详情。它将包含存储正在注册的课程引用和作为学生注册的用户引用的字段。它还将存储与相关课程中的课程相对应的数组，该数组将存储每个课程对该学生的完成状态。此外，我们还将存储三个时间戳值；第一个值将表示学生何时注册，第二个值将表示他们上次完成课程或更新注册的时间，最后，当他们完成课程时。此注册模型将在`server/models/enrollment.model.js`中定义，以下列表中给出了定义注册字段的代码及其说明：
- en: '**Course reference**: The `course` field will store the reference to the course
    document with which this enrollment is associated:'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**课程引用**：`course`字段将存储与此次注册关联的课程文档的引用：'
- en: '[PRE79]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '**Student reference**: The `student` field will store the reference to the
    user who created this enrollment by choosing to enroll on a course:'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学生引用**：`student`字段将存储创建此注册的用户引用，该用户通过选择注册课程来完成注册：'
- en: '[PRE80]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '**Lesson status**: The `lessonStatus` field will store an array with references
    to each lesson that is stored in the associated course in the `lessons` array.
    For each object in this `lessonStatus` array, we will add a `complete` field that
    will store a Boolean value that indicates whether the corresponding lesson has
    been completed or not:'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**课程状态**：`lessonStatus`字段将存储一个数组，其中包含对存储在相关课程`lessons`数组中每个课程的引用。对于`lessonStatus`数组中的每个对象，我们将添加一个`complete`字段，该字段将存储一个布尔值，表示相应的课程是否已完成：'
- en: '[PRE81]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '**Enrolled at**: The `enrolled` field will be a `Date` value indicating the
    time that the enrollment was created; in other words, when the student enrolled
    on the course:'
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册时间**：`enrolled` 字段将是一个表示注册创建时间的 `Date` 值；换句话说，当学生注册课程时：'
- en: '[PRE82]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '**Updated at**: The `updated` field will be another `Date` value, which will
    be updated every time a lesson is completed, indicating when was the last time
    that the user worked on the course lessons:'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新时间**：`updated` 字段将是另一个 `Date` 值，每次完成一个课时都会更新，指示用户上次在课程课时上工作的日期：'
- en: '[PRE83]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '**Completed at**: The `completed` field will also be a `Date` type, which will
    only be set when all the lessons in the course have been completed:'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完成时间**：`completed` 字段也将是 `Date` 类型，它只会在课程中的所有课程都完成时设置：'
- en: '[PRE84]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: The fields in this schema definition will enable us to implement all the enrollment-related
    features in MERN Classroom. In the next section, we will implement the user's
    ability to enroll on a course, and store details of the enrollment using this
    Enrollment model.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 在此模式定义中的字段将使我们能够实现 MERN Classroom 中的所有注册相关功能。在下一节中，我们将实现用户注册课程的 功能，并使用此注册模型存储注册的详细信息。
- en: The create Enrollment API
  id: totrans-403
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建注册 API
- en: 'When a user chooses to enroll in a course, we will create a new enrollment
    and store it in the backend. To implement this feature, we need to define a create
    enrollment API on the server, by first declaring a route that accepts a `POST`
    request at `''/api/enrollment/new/:courseId''`, as shown in the following code:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择注册课程时，我们将创建一个新的注册并将其存储在后端。为了实现此功能，我们需要在服务器上定义一个创建注册的 API，首先声明一个接受 `POST`
    请求的路线 `'/api/enrollment/new/:courseId'`，如下面的代码所示：
- en: '`mern-classroom/server/routes/enrollment.routes.js`:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/routes/enrollment.routes.js`：'
- en: '[PRE85]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: This route takes the course ID as a parameter in the URL. Hence, we also add
    the `courseByID` controller method from the course controllers in order to process
    this parameter and retrieve the corresponding course from the database. The user
    who initiates the request from the client- side is identified from the user auth
    credentials sent in the request. A `POST` request received at this route will
    first check whether the user is authenticated, and then check whether they are
    already enrolled on this course, before creating a new enrollment for this user
    in this course.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由在 URL 中接受课程 ID 作为参数。因此，我们还添加了来自课程控制器的 `courseByID` 控制器方法，以处理此参数并从数据库中检索相应的课程。从客户端请求中发起请求的用户通过请求中发送的用户身份验证凭据进行识别。在此路由接收到的
    `POST` 请求将首先检查用户是否已认证，然后检查他们是否已经注册了此课程，在为该用户在此课程中创建新的注册之前。
- en: The `findEnrollment` controller method will query the `Enrollments` collection
    in the database in order to check whether there is already an enrollment with
    the given course ID and user ID. The `findEnrollment` method is defined as follows.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '`findEnrollment` 控制器方法将查询数据库中的 `Enrollments` 集合，以检查是否存在具有给定课程 ID 和用户 ID 的注册。`findEnrollment`
    方法定义如下。'
- en: '`mern-classroom/server/controllers/enrollment.controller.js`:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/enrollment.controller.js`：'
- en: '[PRE86]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: If a matching result is returned from the query, then the resulting enrollment
    will be sent back in the response, otherwise, the `create` controller method will
    be invoked to create a new enrollment.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查询返回匹配的结果，则将返回的结果注册发送回响应，否则将调用 `create` 控制器方法来创建一个新的注册。
- en: The `create` controller method generates a new enrollment object to be saved
    into the database from the course reference, user reference, and the lessons array
    in the given course. The `create` method is defined as shown in the following
    code.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '`create` 控制器方法从给定的课程引用、用户引用和课程中的课程数组生成要保存到数据库中的新注册对象。`create` 方法定义如下。'
- en: '`mern-classroom/server/controllers/enrollment.controller.js`:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/enrollment.controller.js`：'
- en: '[PRE87]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: The `lessons` array in `course` is iterated over to generate the `lessonStatus`
    array of objects for the new enrollment document. Each object in the `lessonStatus`
    array has the `complete` value initialized to `false`. On successful saving of
    the new enrollment document based on these values, the new document is sent back
    in the response.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `course` 中的 `lessons` 数组被迭代以生成新注册文档的 `lessonStatus` 对象数组。`lessonStatus` 数组中的每个对象都将
    `complete` 值初始化为 `false`。基于这些值成功保存新注册文档后，新文档将发送回响应。
- en: All the routes that are defined for enrollment APIs, such as this create API,
    are declared in the `enrollment.routes.js` file, and it will be similar to the
    other route files that have already been created in our application. As with the
    other routes, we need to load these new routes in the Express app by mounting
    the enrollment routes in `express.js`. The enrollment-related routes are mounted
    as follows.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 为注册 API 定义的 所有路由，例如此创建 API，都在 `enrollment.routes.js` 文件中声明，并且它将类似于我们应用程序中已经创建的其他路由文件。与其他路由一样，我们需要通过在
    `express.js` 中挂载注册路由来将这些新路由加载到 Express 应用中。注册相关路由的挂载方式如下。
- en: '`mern-social/server/express.js`:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-social/server/express.js`:'
- en: '[PRE88]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: To access the create API in the frontend, you will also need to define a fetch
    method similar to other fetch methods that have been defined in the application.
    Using this fetch method, the `Enroll` component that is discussed in the next
    section will be able to call this create enrollment API.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 要在前端访问创建 API，您还需要定义一个类似于应用程序中已定义的其他 fetch 方法的 fetch 方法。使用此 fetch 方法，下一节中讨论的
    `Enroll` 组件将能够调用此创建注册 API。
- en: The Enroll component
  id: totrans-420
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册组件
- en: The `Enroll` component will simply contain a button that initiates the enrollment
    call to the backend, and redirects the user if the server returns successfully
    with the new enrollment document's ID. This component takes the ID of the associated
    course as a prop from the parent component from where it is added. This prop will
    be used while making the create enrollment API call. The `Enroll` component is
    defined as shown in the following code.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '`Enroll` 组件将简单地包含一个按钮，该按钮将启动对后端的注册调用，并在服务器成功返回新的注册文档 ID 时重定向用户。此组件从添加它的父组件接收相关课程的
    ID 作为属性。此属性将在创建注册 API 调用时使用。`Enroll` 组件的定义如下所示。'
- en: '`mern-classroom/client/enrollment/Enroll.js`:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/enrollment/Enroll.js`:'
- en: '[PRE89]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'When the ENROLL button is clicked, the create enrollment API will be fetched
    with the provided course ID to either retrieve an existing enrollment, or to create
    a new enrollment and receive it in the response. The `clickEnroll` function to
    be invoked when the button is clicked is defined as follows:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击 ENROLL 按钮时，将使用提供的课程 ID 获取创建注册 API，以检索现有注册或创建新的注册并在响应中接收它。当按钮被点击时将调用的 `clickEnroll`
    函数定义如下：
- en: '`mern-classroom/client/enrollment/Enroll.js`:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/enrollment/Enroll.js`:'
- en: '[PRE90]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: When the server sends back an enrollment successfully, the user will be redirected
    to the view that will display the details of the specific enrollment.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器成功返回注册时，用户将被重定向到将显示特定注册详情的视图。
- en: Since the `Enroll` component receives the course ID as a prop from the parent
    component, we also add `PropType` validation (as shown in the following code)
    for the component, as its functionality and implementation relies on this prop
    being passed.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `Enroll` 组件从父组件接收课程 ID 作为属性，因此我们还在组件中添加了 `PropType` 验证（如下所示），因为其功能和实现依赖于传递此属性。
- en: '`mern-classroom/client/enrollment/Enroll.js`:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/enrollment/Enroll.js`:'
- en: '[PRE91]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: When a server responds successfully on the API call, the user is redirected
    to the enrolled course view, where they can go through the lesson content. We
    will work on implementing this view in the next section.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器在 API 调用中成功响应时，用户将被重定向到已注册课程视图，在那里他们可以浏览课程内容。我们将在下一节中实现此视图。
- en: The Enrolled Course view
  id: totrans-432
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 已注册课程视图
- en: For each course on which the user is enrolled, they will see a view that lists
    the details of the course, and each lesson in the course; with the option to complete
    each lesson. In the following sections we will implement this view, by first adding
    a backend API that returns a given enrollment's details, and then using this API
    in the frontend to build the enrolled course view.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用户注册的每门课程，他们都会看到一个视图，列出课程的详细信息以及课程中的每个课程；并可以选择完成每个课程。在以下章节中，我们将通过首先添加返回给定注册详情的后端
    API 来实现此视图，然后在前端使用此 API 构建已注册课程视图。
- en: The read enrollment API
  id: totrans-434
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取注册 API
- en: 'The backend API which will return the enrollment details from the database
    will be defined as a GET route that accepts the request at `''/api/enrollment/:enrollmentId''`,
    and will be declared as follows:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 将返回数据库中注册详情的后端 API 将被定义为接受请求在 `'/api/enrollment/:enrollmentId'` 的 GET 路由，并如下声明：
- en: '`mern-classroom/server/routes/enrollment.routes.js`'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/routes/enrollment.routes.js`'
- en: '[PRE92]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'A GET request at this route will first invoke the `enrollmentByID` method,
    since it contains the `enrollmentId` param in the URL declaration. The `enrolmentByID`
    method will query the `Enrollments` collection by the provided ID, and if a matching
    enrollment document is found, we ensure that the referenced course, the nested
    course instructor, and the referenced student details are also populated using
    the `populate` method from Mongoose. The `enrollmentByID` controller method is
    defined as shown in the following code:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 在此路由上的GET请求将首先调用`enrollmentByID`方法，因为它在URL声明中包含`enrollmentId`参数。`enrolmentByID`方法将根据提供的ID查询`Enrollments`集合，如果找到匹配的注册文档，我们将使用Mongoose的`populate`方法确保引用的课程、嵌套的课程讲师和引用的学生详情也被填充。`enrollmentByID`控制器方法定义如下所示：
- en: '`mern-classroom/server/controllers/enrollment.controller.js`:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/enrollment.controller.js`:'
- en: '[PRE93]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: The resulting enrollment object is attached to the request object and passed
    on to the next controller method. Before returning this enrollment object in the
    response to the client, we will check whether the currently signed-in user is
    the student who is associated with this specific enrollment in the `isStudent`
    method, as defined in the following code.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的注册对象附加到请求对象，并传递给下一个控制器方法。在将此注册对象返回给客户端之前，我们将在`isStudent`方法中检查当前登录的用户是否与该特定注册关联的学生，正如以下代码中定义的那样。
- en: '`mern-classroom/server/controllers/enrollment.controller.js`:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/enrollment.controller.js`:'
- en: '[PRE94]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'The `isStudent` method checks whether the user who is identified by the auth
    credentials that were sent in the request matches the student who is referenced
    in the enrollment. If the two users don''t match, a 403 status is returned with
    an error message, otherwise, the next controller method is invoked in order to
    return the enrollment object. The next controller method is the `read` method,
    and it is defined as follows:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '`isStudent`方法检查通过请求中发送的认证凭据识别的用户是否与注册中引用的学生匹配。如果两个用户不匹配，则返回带有错误信息的403状态，否则，将调用下一个控制器方法以返回注册对象。下一个控制器方法是`read`方法，其定义如下：'
- en: '`mern-classroom/server/controllers/enrollment.controller.js`:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/enrollment.controller.js`:'
- en: '[PRE95]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: To use this read enrollment API in the frontend, you will also need to define
    a corresponding fetch method, as implemented for all other APIs in this application.
    Then, this fetch method will be used to retrieve the enrollment details to be
    rendered in a React component that the student will interact with. We will implement
    this `Enrollment` component in the next section.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 要在前端使用此读取注册API，您还需要定义一个相应的fetch方法，如在本应用程序中实现的所有其他API一样。然后，此fetch方法将用于检索要在学生交互的React组件中渲染的注册详情。我们将在下一节中实现此`Enrollment`组件。
- en: The Enrollment component
  id: totrans-448
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册组件
- en: 'The `Enrollment` component will load the details of the course and the lessons
    that were received from the read enrollment API. In this view, students will be
    able to go through each lesson in the course and mark each as complete. The lesson
    titles will be listed in a drawer, giving the student an overall idea of what
    the course contains, and how far they have progressed. Each item in the drawer
    will extend to reveal the details of the lesson, as pictured in the following
    screenshot:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '`Enrollment`组件将加载从读取注册API接收到的课程和课程详情。在这个视图中，学生将能够遍历课程中的每一课，并标记为完成。课程标题将列在抽屉中，给学生一个关于课程包含的内容以及他们已经进展到哪里的整体概念。抽屉中的每一项都会展开以显示课程的详细信息，如下面的截图所示：'
- en: '![](img/c917496f-4f45-4ee3-b968-6592b78183a5.png)'
  id: totrans-450
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c917496f-4f45-4ee3-b968-6592b78183a5.png)'
- en: To implement this view, first, we need to make a fetch call to the read enrollment
    API in the `useEffect` hook in order to retrieve the details of the enrollment
    and set it to state, as shown in the following code.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现此视图，首先，我们需要在`useEffect`钩子中调用读取注册API的fetch调用，以检索注册详情并将其设置到状态中，如下面的代码所示。
- en: '`mern-classroom/client/enrollment/Enrollment.js`:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/enrollment/Enrollment.js`:'
- en: '[PRE96]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: We will implement the drawer layout using Material-UI's `Drawer` component.
    In the drawer, we keep the first item as the Course Overview, which will give
    the user an overview of the course details, similar to the single course page.
    When the user enters this enrollment view, they will see the Course Overview first.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Material-UI的`Drawer`组件来实现抽屉布局。在抽屉中，我们保留第一个项目为课程概览，这将使用户了解课程详情，类似于单个课程页面。当用户进入此报名视图时，他们将首先看到课程概览。
- en: In the following code, after adding this first drawer item, we create a separate
    section for the lessons, where the `lessonStatus` array is iterated over to list
    the lesson titles in the drawer.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，在添加此第一个抽屉项目后，我们为课程创建了一个单独的章节，其中遍历`lessonStatus`数组以在抽屉中列出课程标题。
- en: '`mern-classroom/client/enrollment/Enrollment.js`:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/enrollment/Enrollment.js`:'
- en: '[PRE97]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Each of the items in the Lessons section of the drawer will also give the user
    a visual indication of whether the lesson has been completed, or is still incomplete.
    These check or uncheck icons will be rendered based on the Boolean value of the
    `complete` field in each item in the `lessonStatus` array.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 抽屉中“课程”部分的每个项目也将使用户能够直观地了解课程是否已完成，或者是否尚未完成。这些勾选或未勾选的图标将根据`lessonStatus`数组中每个项目的`complete`字段的布尔值进行渲染。
- en: 'To determine which drawer is currently selected, we will utilize the initialized
    `drawer` value to state with a -1\. The -1 value will be associated with the Course
    Overview drawer item and view, whereas the index of each `lessonStatus` item will
    determine which lesson is displayed when selected from the drawer. When a drawer
    item is clicked, we will call the `selectDrawer` method, giving it either -1 or
    the index of the lesson clicked as its argument. The `selectDrawer` method is
    defined as follows:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定当前选中的抽屉，我们将使用初始化的`drawer`值到状态中，值为-1。-1值将与课程概览抽屉项目和视图相关联，而`lessonStatus`中每个项目的索引将确定从抽屉中选择时显示哪个课程。当点击抽屉项目时，我们将调用`selectDrawer`方法，将其-1或被点击课程的索引作为其参数。`selectDrawer`方法定义如下：
- en: '`mern-classroom/client/enrollment/Enrollment.js`:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/enrollment/Enrollment.js`:'
- en: '[PRE98]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'This `selectDrawer` method sets the `drawer` value in the state according to
    the item clicked on the drawer. The actual content view will also render conditionally,
    depending on this `drawer` value, according to the following structure:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 此`selectDrawer`方法根据抽屉中点击的项目设置状态中的`drawer`值。实际的内容视图也将根据以下结构有条件地渲染：
- en: '[PRE99]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'The course overview section can be designed and implemented according to the
    Course page. In order to render the individual lesson details, we can use a `Card`
    component as follows:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 课程概览部分可以根据课程页面进行设计和实现。为了渲染单个课程的详细信息，我们可以使用以下`Card`组件：
- en: '`mern-classroom/client/enrollment/Enrollment.js`:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/enrollment/Enrollment.js`:'
- en: '[PRE100]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: This will render the details of the lesson that has been selected, which are
    the title, content, and resource URL values. With this implementation, we now
    have a way to let users enroll on courses and view the details of their enrollment.
    This enrollment data is initially created from the course details, but will also
    store details that are specific to the student who enrolled, and their progress
    in the lessons and the course overall. In order to be able to record and track
    this progress, and then display the related statistical information to both students
    and instructors, we will update this implementation further in the following section
    in order to add these capabilities.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 这将渲染所选课程的详细信息，包括标题、内容和资源URL值。通过这种实现，我们现在有了一种让用户报名课程并查看他们报名详情的方法。这种报名数据最初是从课程详情创建的，但也会存储特定于报名学生的详细信息，以及他们在课程和课程整体中的进度。为了能够记录和跟踪这种进度，并向学生和教师显示相关的统计信息，我们将在下一节进一步更新此实现以添加这些功能。
- en: Tracking progress and enrollment stats
  id: totrans-468
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪进度和报名统计
- en: In a classroom application such as MERN Classroom, it can be valuable to let
    students visualize their progress in enrolled courses, and let instructors see
    how many students enrolled and completed their courses.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Classroom这样的教室应用程序中，让学生可视化他们在报名课程中的进度，并让教师看到有多少学生报名并完成了他们的课程，这可能非常有价值。
- en: In this application, once a student is enrolled on a course, they will be able
    to go through each lesson in it, and mark it complete until all the lessons are
    done, and the whole course is complete. The application will leave visual cues
    to let a student know the state of their enrollments in courses. For instructors,
    once they publish a course, we will show the total number of students who enrolled
    on the course, and the total number of students who completed the course.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用中，一旦学生报名参加一门课程，他们就能逐个完成课程中的每一课，并标记为完成，直到所有课程都完成，整个课程才算完成。应用会提供视觉提示，让学生知道他们在课程中的报名状态。对于讲师来说，一旦他们发布了一门课程，我们会显示报名该课程的学生总数，以及完成该课程的学生总数。
- en: In the following sections, we will implement these capabilities, starting with
    letting users complete lessons and track their progress in a course, then listing
    their enrollments with indicators for which ones are complete and which are in
    progress, and finally, showing the enrollment stats for each published course.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，我们将实现这些功能，从让用户完成课程并跟踪他们在课程中的进度开始，然后列出他们的报名，带有哪些已完成和哪些正在进行中的指示，最后显示每个发布的课程的报名统计数据。
- en: Completing lessons
  id: totrans-472
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成课程
- en: We will have to extend both the enrollment APIs and the enrollment view implementation
    to allow students first to complete lessons, and then the whole course. We will
    add a lesson complete API in the backend and use this API in the frontend to mark
    a lesson as complete when the user performs this action. In the following sections,
    we will add this API, then modify the `Enrollment` component to use this API,
    and visually indicate which lessons are complete.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须扩展报名API和报名视图实现，以便学生首先完成课程，然后完成整个课程。我们将在后端添加一个课程完成API，并在前端使用这个API在用户执行此操作时标记课程为完成。在以下章节中，我们将添加这个API，然后修改`Enrollment`组件以使用这个API，并视觉上指示哪些课程已完成。
- en: Lessons completed API
  id: totrans-474
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成的课程API
- en: 'We will add a `complete` API endpoint in the backend for enrollments, which
    will mark specified lessons as complete, and will also mark the enrolled course
    as completed when all the lessons are done. To implement this API, we will start
    by declaring a PUT route, as shown in the following code:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后端为报名添加一个`complete` API端点，该端点将标记指定的课程为完成，当所有课程都完成时，也会标记报名的课程为完成。为了实现这个API，我们将首先声明一个PUT路由，如下面的代码所示：
- en: '`mern-classroom/server/routes/enrollment.routes.js`'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/routes/enrollment.routes.js`'
- en: '[PRE101]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'When a PUT request is received at the `''/api/enrollment/complete/:enrollmentId''`
    URL, we will first make sure that the signed-in user is the student who is associated
    with this enrollment record, and then we will call the `complete` enrollment controller
    method. The `complete` method is defined as follows:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 当接收到`'/api/enrollment/complete/:enrollmentId'` URL的PUT请求时，我们首先确保已登录的用户是与这个报名记录关联的学生，然后我们将调用`complete`报名控制器方法。`complete`方法定义如下：
- en: '`mern-classroom/server/controllers/enrollment.controller.js`'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/enrollment.controller.js`'
- en: '[PRE102]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: In this `complete` method, we use the `updateOne` action from MongoDB to update
    the enrollment document, which contains the `lessonStatus` object with the corresponding `lessonStatusId` value
    provided in the request.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`complete`方法中，我们使用MongoDB的`updateOne`操作来更新包含对应于请求中提供的`lessonStatusId`值的`lessonStatus`对象的报名文档。
- en: In the resulting enrollment document, we update the `complete` field of the
    specific object in the `lessonStatus` array, and the `updated` field of the enrollment
    document. If a `courseCompleted` value is sent in the request, we also update
    the `completed` field in the enrollment document. Once the enrollment document
    is updated successfully, it is sent back in the response.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成的报名文档中，我们更新`lessonStatus`数组中特定对象的`complete`字段和报名文档的`updated`字段。如果请求中发送了`courseCompleted`值，我们也会更新报名文档中的`completed`字段。一旦报名文档更新成功，它就会作为响应发送回去。
- en: To use this `complete` API endpoint in the frontend, you also need to define
    a corresponding fetch method like we did for other API implementations. This fetch
    method should make a PUT request to the complete enrollment route with related
    values sent in the request. As discussed in the next section, we will use this
    implemented API in the `Enrollment` component in order to allow students to complete
    lessons.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 要在前端使用这个 `complete` API 端点，你还需要定义一个相应的获取方法，就像我们为其他 API 实现所做的那样。这个获取方法应该向完成注册路由发送一个
    PUT 请求，并将相关值作为请求发送。如下一节所述，我们将在这个 `Enrollment` 组件中使用这个实现的 API，以便允许学生完成课程。
- en: Completed lessons from the view
  id: totrans-484
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视图中的完成课程
- en: 'In the `Enrollment` component, in which we are rendering each lesson''s details
    in the drawer view, we will give the student the option to mark the lesson as
    completed. This option will render conditionally, depending on whether the given
    lesson is already completed or not. This option will be added to the `action`
    property in `CardHeader`, as shown in the following code:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Enrollment` 组件中，我们在抽屉视图中渲染每个课程的详细信息，我们将给学生提供标记课程为完成的选项。这个选项将根据给定的课程是否已经完成而条件性地渲染。这个选项将被添加到
    `CardHeader` 的 `action` 属性中，如下面的代码所示：
- en: '`mern-classroom/client/enrollment/Enrollment.js`:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/enrollment/Enrollment.js`:'
- en: '[PRE103]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'If the given `lessonStatus` object has the `complete` attribute set to `true`,
    then we render a filled-out button with the text Completed, otherwise an outlined
    button is rendered with the text Mark as complete. Clicking on this button makes
    a call to the `markComplete` function, which will make the API call to update
    the enrollment in the database. This `markComplete` function is defined as follows:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的 `lessonStatus` 对象中的 `complete` 属性设置为 `true`，则渲染一个填充的按钮，上面写着“已完成”，否则渲染一个带有“标记为完成”文本的轮廓按钮。点击此按钮将调用
    `markComplete` 函数，该函数将发出 API 调用来更新数据库中的注册。这个 `markComplete` 函数定义如下：
- en: '`mern-classroom/client/enrollment/Enrollment.js`:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/enrollment/Enrollment.js`:'
- en: '[PRE104]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: In this function, before making the API call to the backend, we prepare the
    values to be sent with the request in the `updatedData` object. We send the `lessonStatus`
    details, including the ID value and `complete` value set to `true` for the lesson
    that was completed by the user. We also calculate if the total number of completed
    lessons is equal to the total number of lessons, so that we can set and send the `courseCompleted`
    value in the request, as well.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，在向后端发出 API 调用之前，我们在 `updatedData` 对象中准备要随请求发送的值。我们发送 `lessonStatus` 的详细信息，包括用户完成的课程的
    ID 值和设置为 `true` 的 `complete` 值。我们还计算完成课程的总数是否等于课程总数，这样我们就可以在请求中设置并发送 `courseCompleted`
    值。
- en: 'The total number of completed lessons is calculated using the `totalCompleted`
    function, which is defined as follows:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 完成课程的总数是通过 `totalCompleted` 函数计算的，该函数定义如下：
- en: '`mern-classroom/client/enrollment/Enrollment.js`:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/enrollment/Enrollment.js`:'
- en: '[PRE105]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'We use the array `reduce` function to find and tally the count for the completed
    lessons in the `lessonStatus` array. This count value is also stored in the state,
    so that it can be rendered in the view at the bottom of the drawer, as shown in
    the following screenshot:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用数组 `reduce` 函数来查找并统计 `lessonStatus` 数组中完成课程的计数。这个计数值也存储在状态中，以便可以在抽屉底部的视图中渲染，如下面的截图所示：
- en: '![](img/444a45f8-bc19-4b3a-88c2-ff62cbf78852.png)'
  id: totrans-496
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/444a45f8-bc19-4b3a-88c2-ff62cbf78852.png)'
- en: The student's lessons will have a check icon next to them, as an indication
    of which lessons are either complete or incomplete. We also give the student a
    number tally of how many were completed out of the total. The course is considered
    completed when all the lessons are done. This gives the student an idea of their
    progress in the course. Next, we will add a feature that will allow users to see
    the state of all the courses on which they are enrolled.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 学生的课程旁边将有一个勾选图标，作为指示哪些课程已完成或未完成。我们还给学生一个总数，显示完成课程的数量。当所有课程都完成时，课程被认为是完成的。这让学生对自己的课程进度有一个概念。接下来，我们将添加一个功能，允许用户查看他们注册的所有课程的状况。
- en: Listing all enrollments for a user
  id: totrans-498
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出用户的全部注册
- en: Once they are signed in to MERN Classroom, students will be able to view a list
    of all their enrollments on the home page. In order to implement this feature,
    we will first define a backend API, which returns the list of enrollments for
    a given user, and then use it in the frontend to render the list of enrollments
    to the user.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦学生登录到 MERN Classroom，他们就能在主页上查看他们所有注册的列表。为了实现这个功能，我们首先定义一个后端 API，它返回给定用户的注册列表，然后在前端使用它来向用户渲染注册列表。
- en: The list of enrollments API
  id: totrans-500
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册列表 API
- en: 'The list of enrollments API will take a GET request and query the `Enrollments`
    collection in order to find enrollments that have a student reference that matches
    with the user who is currently signed in. To implement this API, we will first
    declare the GET route for `''/api/enrollment/enrolled''`, as shown in the following
    code:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 注册列表 API 将接收一个 GET 请求并查询 `Enrollments` 集合，以找到具有与学生参考匹配的当前登录用户的注册。为了实现这个 API，我们首先声明
    `'/api/enrollment/enrolled'` 的 GET 路由，如下面的代码所示：
- en: '`mern-classroom/server/routes/enrollment.routes.js`'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/routes/enrollment.routes.js`'
- en: '[PRE106]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'A GET request to this route will invoke the `listEnrolled` controller method,
    which will query the database and return the results in the response to the client.
    The `listEnrolled` method is defined as follows:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个路由的 GET 请求将调用 `listEnrolled` 控制器方法，该方法将查询数据库并将结果作为响应返回给客户端。`listEnrolled`
    方法定义如下：
- en: '`mern-classroom/server/controllers/enrollment.controller.js`'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/enrollment.controller.js`'
- en: '[PRE107]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: The query to the `Enrollments` collection finds all enrollments with the student
    reference that matches the user ID that was received in the auth credentials of
    the currently signed-in user. The resulting enrollments will be populated with
    the referenced course's name and category values, and the list will be sorted
    so that the completed enrollments are placed after the incomplete enrollments.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 对 `Enrollments` 集合的查询将找到所有与学生参考匹配的用户 ID 相匹配的注册。结果注册将被填充有引用课程的名称和类别值，并且列表将被排序，以便完成的注册放在未完成的注册之后。
- en: By defining a corresponding fetch method for this API on the client- side, we
    can call it in the React component that will render these enrollments. We will
    look at the implementation of this component in the next section.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在客户端为这个 API 定义相应的获取方法，我们可以在将渲染这些注册的 React 组件中调用它。我们将在下一节中查看这个组件的实现。
- en: The Enrollments component
  id: totrans-509
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册组件
- en: 'The `Enrollments` component will be rendered on the Home page, and it will
    take the list of enrollments as props from the `Home` component. The received
    list of enrollments will be rendered in this component in order to show the user
    the courses on which they are enrolled. We will also indicate if an enrolled course
    in the list has been completed, or is in progress, using representative icons
    for each state, as shown in the following screenshot:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '`Enrollments` 组件将在主页上渲染，并且它将从 `Home` 组件接收注册列表作为属性。接收到的注册列表将在这个组件中按顺序渲染，以便向用户展示他们已注册的课程。我们还将使用每个状态的代表性图标来指示列表中的注册课程是否已完成，或正在进行中，如下面的截图所示：'
- en: '![](img/e9467437-d39f-4b02-ade4-9e4d5dc8bc5b.png)'
  id: totrans-511
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e9467437-d39f-4b02-ade4-9e4d5dc8bc5b.png)'
- en: 'This view for listing enrollments will be very similar to the `Courses` component,
    which lists the published courses. In `Enrollments`, instead of courses, the enrollments
    received from the `Home` component will be iterated over to render each enrollment,
    as shown in the following code:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列出注册的视图将非常类似于 `Courses` 组件，该组件列出已发布的课程。在 `Enrollments` 中，而不是课程，将迭代从 `Home`
    组件接收到的注册以渲染每个注册，如下面的代码所示：
- en: '`mern-classroom/client/enrollment/Enrollments.js`:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/enrollment/Enrollments.js`'
- en: '[PRE108]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Based on whether the individual enrollment already has a `complete` date value
    or not, we will render the icons conditionally. This will give the users an idea
    of which enrolled courses they have completed, and which they are yet to finish.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 根据单个注册是否已经有一个 `complete` 日期值，我们将有条件地渲染图标。这将使用户了解他们已经完成的注册课程，以及他们尚未完成的课程。
- en: Now that we have implemented the features to allow students in this application
    to enroll on courses, complete lessons, and also track their progress, we can
    also provide enrollment stats about courses by extending on these implementations,
    as we will see next.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经实现了允许应用程序中的学生注册课程、完成课程和跟踪进度的功能，我们也可以通过扩展这些实现来提供关于课程的注册统计信息，正如我们接下来将要看到的。
- en: Enrollment stats
  id: totrans-517
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报名统计信息
- en: Once the instructor publishes a course, and other users in the application start
    enrolling and completing lessons in the course, we will show the total number
    of enrollments and course completions as simple enrollment statistics for the
    course. To implement this feature, in the following sections we will first implement
    an API that returns the enrollment stats, and then show these stats in the view.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦讲师发布课程，并且应用程序中的其他用户开始报名并完成课程中的课程，我们将显示课程的报名总数和课程完成数作为简单的报名统计信息。为了实现此功能，在以下章节中，我们首先实现一个返回报名统计信息的API，然后展示这些统计信息在视图中的显示。
- en: The enrollment stats API
  id: totrans-519
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报名统计API
- en: In order to implement a backend API that will query the `Enrollments` collection
    in the database to calculate the stats for a specific course, we first need to
    declare a GET route at `'/api/enrollment/stats/:courseId'`, as shown in the following
    code.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现一个将查询数据库中的`Enrollments`集合以计算特定课程统计信息的后端API，我们首先需要在`'/api/enrollment/stats/:courseId'`上声明一个GET路由，如下所示。
- en: '`mern-classroom/server/routes/enrollment.routes.js`'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/routes/enrollment.routes.js`'
- en: '[PRE109]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: A GET request at this URL will return a `stats` object containing the total
    enrollments and total completions for the course, as identified by the `courseId` provided
    in the URL parameter. This implementation is defined in the `enrollmentStats`
    controller method, as shown in the following code.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 在此URL上的GET请求将返回一个`stats`对象，其中包含课程的全部报名和全部完成数，这些是通过URL参数中提供的`courseId`确定的。此实现定义在`enrollmentStats`控制器方法中，如下所示。
- en: '`mern-classroom/server/controllers/enrollment.controller.js`'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/server/controllers/enrollment.controller.js`'
- en: '[PRE110]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: In this `enrollmentStats` method, we run two queries against the `Enrollments`
    collection using the course ID that is provided in the request. In the first query,
    we simply find all the enrollments for the given course, and count these results
    using MongoDB's `countDocuments()`. In the second query, we find all the enrollments
    for the given course, and also check whether the `completed` field exists in these
    enrollments. Then we finally get the count of these results. These numbers are
    sent back in the response to the client.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`enrollmentStats`方法中，我们使用请求中提供的课程ID对`Enrollments`集合执行两个查询。在第一个查询中，我们简单地找到给定课程的全部报名，并使用MongoDB的`countDocuments()`对这些结果进行计数。在第二个查询中，我们找到给定课程的全部报名，并检查这些报名中是否存在`completed`字段。然后我们最终得到这些结果的计数。这些数字将作为响应发送回客户端。
- en: Similar to other API implementations, you will also need to define a corresponding
    fetch method on the client that will make the GET request to this route. Using
    this fetch method, we will retrieve and display these stats for each published
    course, as discussed in the next section.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他API实现类似，您还需要在客户端定义相应的fetch方法，该方法将向此路由发出GET请求。使用此fetch方法，我们将检索并显示每个已发布课程的这些统计信息，如下一节所述。
- en: Displaying enrollment stats for a published course
  id: totrans-528
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示已发布课程的报名统计信息
- en: 'The enrollment stats can be retrieved from the backend and rendered in the
    Course view, as shown in the following image:'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 报名统计信息可以从后端检索并在课程视图中渲染，如下所示：
- en: '![](img/ed43fbdb-ca66-4cc9-8a4b-ec1e5238dd9b.png)'
  id: totrans-530
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed43fbdb-ca66-4cc9-8a4b-ec1e5238dd9b.png)'
- en: 'To retrieve these enrollment stats, we will add a second `useEffect` hook in
    the `Course` component in order to make a fetch call to the enrollment stats API,
    as shown in the following code:'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检索这些报名统计信息，我们将在`Course`组件中添加第二个`useEffect`钩子，以便对报名统计API进行fetch调用，如下所示：
- en: '`mern-classroom/client/course/Course.js`'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/Course.js`'
- en: '[PRE111]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'This will receive the enrollment stats for the given course and set it to the
    `stats` variable in state, and we can render it in the view, as shown in the following
    code:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 这将接收给定课程的报名统计信息，并将其设置到状态中的`stats`变量，我们可以在视图中渲染它，如下所示：
- en: '`mern-classroom/client/course/Course.js`'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-classroom/client/course/Course.js`'
- en: '[PRE112]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'With this feature added to the Course component, to any visitor who is browsing
    through courses in the MERN Classroom application, a published course in the application
    will look as shown in the following image:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 在将此功能添加到课程组件后，任何正在浏览MERN Classroom应用程序中课程的访客，应用程序中的已发布课程将看起来如下所示：
- en: '![](img/a6f50642-a427-407d-82d7-7ebd783295af.png)'
  id: totrans-538
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6f50642-a427-407d-82d7-7ebd783295af.png)'
- en: This screenshot of the Course page with the course details, enroll option, and
    enrollment stats, manages to capture all the features that we have implemented
    in this chapter in order to make this view possible. A user who signed up to the
    classroom application became an educator to create and publish this course with
    lessons. Then, other users enrolled in the course and completed the course lessons
    to generate the enrollment stats. We simply extended the MERN skeleton application
    to add more models, APIs, and React frontend components, which retrieved and then
    rendered the data received in order to build a complete classroom application.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 这张课程页面截图，包含了课程详情、报名选项和报名统计信息，成功地捕捉了我们为了实现这一视图而在本章中实现的所有功能。一个注册了教室应用的用户成为了教育者，创建并发布了这个课程，其中包含课程内容。然后，其他用户报名参加了课程并完成了课程内容，从而生成了报名统计信息。我们只是简单地扩展了MERN框架应用，添加了更多模型、API和React前端组件，这些组件检索并渲染了接收到的数据，以构建一个完整的教室应用。
- en: Summary
  id: totrans-540
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we developed a simple online classroom application called MERN
    Classroom, by extending the skeleton application. We incorporated functionality
    that allowed users to have multiple roles, including educator and student; to
    add and publish courses with lessons as an instructor; to enroll on courses and
    complete lessons as a student; and to keep track of course completion progress
    and enrollment statistics.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过扩展框架应用开发了名为MERN Classroom的简单在线教室应用。我们集成了允许用户拥有多个角色的功能，包括教育者和学生；作为讲师添加和发布包含课程内容的课程；作为学生报名课程并完成课程内容；以及跟踪课程完成进度和报名统计信息。
- en: While implementing these features, we practiced how to extend the full-stack
    component slices that make up the frontend–backend-synced application. We added
    new features by simply implementing data schemas and models, adding new backend
    APIs, and integrating these with new React components in the frontend to complete
    the full-stack slice. By building this application up gradually from smaller units
    of implementation to complex and combined features, you should now have a better
    grasp of how to combine the different parts of a MERN-based full-stack application.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现这些功能的过程中，我们练习了如何扩展构成前端-后端同步应用的全栈组件切片。我们通过实现数据架构和模型、添加新的后端API以及将这些API与前端的新React组件集成来添加新功能，从而完成全栈切片。通过逐步构建这个应用，从较小的实现单元到复杂和组合功能，你现在应该对如何结合MERN基础的全栈应用的不同部分有了更好的理解。
- en: In order to learn how to integrate even more complex features, and find solutions
    to the tricky problems that you may face when developing advanced real-world applications
    with this stack, we will start building a MERN-based, feature-rich online marketplace
    application in the next chapter.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习如何整合更加复杂的功能，并找到在使用此堆栈开发高级现实世界应用时可能遇到的棘手问题的解决方案，我们将在下一章开始构建一个基于MERN的、功能丰富的在线市场应用。
