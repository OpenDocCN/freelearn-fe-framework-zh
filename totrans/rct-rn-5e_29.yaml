- en: '27'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Controlling Image Display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, the examples in this book haven’t rendered any images on mobile screens.
    This doesn’t reflect the reality of mobile applications. Web applications display
    lots of images. If anything, native mobile applications rely on images even more
    than web applications because images are a powerful tool when you have a limited
    amount of space.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn how to use the React Native `Image` component,
    starting with loading images from different sources. Then, you’ll learn how you
    can use the `Image` component to resize images, and how you can set placeholders
    for lazily loaded images. Finally, you’ll learn how to implement icons using the
    `@expo/vector-icons` package. These sections cover the most common use cases for
    using images and icons in apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resizing images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lazy image loading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the code and image files for this chapter on GitHub at [https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter27](https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter27).
  prefs: []
  type: TYPE_NORMAL
- en: Loading images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s get started by figuring out how to load images. You can render the `<Image>`
    component and pass its properties just like any other React component. But this
    particular component needs image blob data to be of any use. A **BLOB** (short
    for **Binary Large Object**) is a data type used to store large, unstructured
    binary data. BLOBs are commonly used to store multimedia files like images, audio,
    and video.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at some code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: There are two ways to load the blob data into an `<Image>` component. The first
    approach loads the image data from the network. This is done by passing an object
    with a **URI** property to the `source` code. The second `<Image>` component in
    this example is using a local image file. It does this by calling `require()`
    and passing the result to the `source` code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s see what the rendered result looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Picture 1](img/B19636_27_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 27.1: Image loading'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the style that was used with these images:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that without the `width` and `height` style properties, images will not
    render. In the next section, you’ll learn how image resizing works when the `width`
    and `height` values are set.
  prefs: []
  type: TYPE_NORMAL
- en: Resizing images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `width` and `height` style properties of `Image` components determine the
    size of what’s rendered on the screen. For example, you’ll probably have to work
    with images at some point that have a larger resolution than you want to be displayed
    in your React Native application. Simply setting the `width` and `height` style
    properties on the `Image` is enough to properly scale the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at some code that lets you dynamically adjust the dimensions of
    an image using controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s what the image looks like if you’re using the default 100 x 100 dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Picture 2](img/B19636_27_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 27.2: 100 x 100 image'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a scaled-down version of the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Picture 3](img/B19636_27_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 27.3: 50 x 50 image'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, here’s a scaled-up version of the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Picture 4](img/B19636_27_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 27.4: 150 x 150 image'
  prefs: []
  type: TYPE_NORMAL
- en: There’s a `resizeMode` property that you can pass to `Image` components. This
    determines how the scaled image fits within the dimensions of the actual component.
    You’ll see this property in action in the *Rendering icons* section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the dimensions of the images are controlled by the `width` and
    `height` style properties. Images can even be resized while the app is running
    by changing these values. In the next section, you’ll learn how to lazily load
    images.
  prefs: []
  type: TYPE_NORMAL
- en: Lazy image loading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you don’t necessarily want an image to load at the exact moment that
    it’s rendered; for example, you might be rendering something that’s not visible
    on the screen yet. Most of the time, it’s perfectly fine to fetch the image source
    from the network before it’s actually visible. But if you’re fine-tuning your
    application and discover that loading lots of images over the network causes performance
    issues, you can use the lazy loading strategy.
  prefs: []
  type: TYPE_NORMAL
- en: I think the more common use case in a mobile context is handling a scenario
    where you’ve rendered one or more images where they’re visible, but the network
    is slow to respond. In this case, you will probably want to render a placeholder
    image so that the user sees something right away, rather than an empty space.
    So, let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, you can implement an abstraction that wraps the actual image that
    you want to show once it’s loaded. Here’s the code for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, here, you can see the placeholder image will be rendered only while the
    original image isn’t loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This component renders a `View` component with two `Image` components inside
    it. It also has a loaded state, which is initially `false`. When `loaded` is `false`,
    the placeholder image is rendered. The `loaded` state is set to `true` when the
    `onLoad()` handler is called. This means that the placeholder image is removed
    and the main image is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s use the `LazyImage` component that we’ve just implemented. You’ll
    render the image without a `source`, and the placeholder image should be displayed.
    Let’s add a button that gives the lazy image a `source`. When it loads, the placeholder
    image should be replaced. Here’s what the main `app` module looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what the screen looks like initially:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Picture 5](img/B19636_27_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 27.5: Initial state of the image'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, click the **Load Remote** button to eventually see the image that we
    actually want:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Picture 6](img/B19636_27_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 27.6: Loaded image'
  prefs: []
  type: TYPE_NORMAL
- en: You might notice that, depending on your network speed, the placeholder image
    remains visible, even after you click the **Load Remote** button. This is by design
    because you don’t want to remove the placeholder image until you know for sure
    that the actual image is ready to be displayed. Now, let’s render some icons in
    our React Native application.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering icons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the final section of this chapter, you’ll learn how to render icons in React
    Native components. Using icons to indicate meaning makes web applications more
    usable. So, why should native mobile applications be any different?
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll use the `@expo/vector-icons` package to pull various vector font packages
    into your React Native app. This package is already part of the Expo project that
    we’re using as the base of the app, and now, you can import `Icon` components
    and render them. Let’s implement an example that renders several **FontAwesome**
    icons based on a selected icon category:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have defined all necessary logic to store and update the icon data.
    Next, we will apply it to the layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run this example, you should see something that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Picture 7](img/B19636_27_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 27.7: Rendering icons'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we learned about handling images in our React Native applications.
    Images in a native application are just as important in a native mobile context
    as they are in a web context: they improve the user experience.'
  prefs: []
  type: TYPE_NORMAL
- en: We learned about the different approaches to loading images, as well as how
    to resize them. We also learned how to implement a lazy image, which displays
    a placeholder image while the actual image is loading. Finally, we learned how
    to use icons in a React Native app. These skills will help you manage images and
    make your app more informative.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll learn about local storage in React Native, which
    is handy when our app goes offline.
  prefs: []
  type: TYPE_NORMAL
