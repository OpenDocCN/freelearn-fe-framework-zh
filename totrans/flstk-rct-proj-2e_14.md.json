["```js\ntitle: { \n    type: String, \n    trim: true, \n    required: 'Title is required' \n},\n```", "```js\namount: { \n    type: Number, \n    min: 0,\n    required: 'Amount is required' \n},\n```", "```js\ncategory: {\n    type: String,\n    trim: true,\n    required: 'Category is required'\n},\n```", "```js\nincurred_on: {\n    type: Date,\n    default: Date.now\n},\n```", "```js\nnotes: {\n    type: String,\n    trim: true\n},\n```", "```js\nrecorded_by: {\n    type: mongoose.Schema.ObjectId, \n    ref: 'User'\n}\n```", "```js\nupdated: Date,\ncreated: { \n    type: Date, \n    default: Date.now \n},\n```", "```js\nrouter.route('/api/expenses')\n  .post(authCtrl.requireSignin, expenseCtrl.create)\n```", "```js\nconst create = async (req, res) =  {\n  try {\n    req.body.recorded_by = req.auth._id\n    const expense = new Expense(req.body)\n    await expense.save()\n    return res.status(200).json({\n      message: \"Expense recorded!\"\n    })\n  } catch (err) {\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\napp.use('/', expenseRoutes)\n```", "```js\nyarn add @material-ui/pickers @date-io/date-fns@1.x date-fns\n\n```", "```js\nimport DateFnsUtils from '@date-io/date-fns'\nimport { DateTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\"\n...\n <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <DateTimePicker\n           label=\"Incurred on\"\n           views={[\"year\", \"month\", \"date\"]}\n           value={values.incurred_on}\n           onChange={handleDateChange}\n           showTodayButton\n       /> \n </MuiPickersUtilsProvider> \n```", "```js\n  const handleDateChange = date =  {\n    setValues({...values, incurred_on: date })\n  }\n```", "```js\n PrivateRoute path=\"/expenses/new\" component={NewExpense}/ \n```", "```js\nrouter.route('/api/expenses')\n  .get(authCtrl.requireSignin, expenseCtrl.listByUser)\n```", "```js\nconst listByUser = async (req, res) =  {\n  let firstDay = req.query.firstDay\n  let lastDay = req.query.lastDay\n  try {\n    let expenses = await Expense.find({'$and':[ {'incurred_on': \n       { '$gte': firstDay, '$lte':lastDay }}, \n           {'recorded_by': req.auth._id } }).sort('incurred_on')\n             .populate('recorded_by', '_id name')\n    res.json(expenses)\n  } catch (err){\n    console.log(err)\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\n  const listByUser = async (params, credentials, signal) =  {\n    const query = queryString.stringify(params)\n    try {\n      let response = await fetch('/api/expenses?'+query, {\n        method: 'GET',\n        signal: signal,\n        headers: {\n          'Accept': 'application/json',\n          'Authorization': 'Bearer ' + credentials.t\n        }\n      })\n      return await response.json()\n    }catch(err){\n      console.log(err)\n    }\n  }\n```", "```js\nexport default function Expenses() {\n    const date = new Date(), y = date.getFullYear(), m = date.getMonth()\n    const [firstDay, setFirstDay] = useState(new Date(y, m, 1))\n    const [lastDay, setLastDay] = useState(new Date(y, m + 1, 0))\n\n    const jwt = auth.isAuthenticated()\n    const [redirectToSignin, setRedirectToSignin] = useState(false)\n    const [expenses, setExpenses] = useState([])\n\n    useEffect(() =  {\n        const abortController = new AbortController()\n        const signal = abortController.signal\n        listByUser({firstDay: firstDay, lastDay: lastDay}, \n                   {t: jwt.token}, signal)\n        .then((data) =  {\n           if (data.error) {\n                setRedirectToSignin(true)\n              } else {\n                setExpenses(data)\n              }\n           })\n        return function cleanup(){\n          abortController.abort()\n        }\n    }, [])\n...\n}\n```", "```js\n div className={classes.search} \n    <MuiPickersUtilsProvider utils={DateFnsUtils} \n        <DatePicker\n          disableFuture\n          format=\"dd/MM/yyyy\"\n          label=\"SHOWING RECORDS FROM\"\n          views={[\"year\", \"month\", \"date\"]}\n          value={firstDay}\n          onChange={handleSearchFieldChange('firstDay')}\n       />\n        <DatePicker\n          format=\"dd/MM/yyyy\"\n          label=\"TO\"\n          views={[\"year\", \"month\", \"date\"]}\n          value={lastDay}\n          onChange={handleSearchFieldChange('lastDay')}\n       /> \n    </MuiPickersUtilsProvider> \n    Button variant=\"contained\" color=\"secondary\" \n       onClick= {searchClicked} GO </Button>\n </div>\n```", "```js\nconst handleSearchFieldChange = name =  date =  {\n    if(name=='firstDay'){\n        setFirstDay(date)\n    }else{\n        setLastDay(date)\n    }\n}\n```", "```js\nconst searchClicked = () =  {\n    listByUser({firstDay: firstDay, lastDay: lastDay},{t: jwt.token}).then((data) =  {\n        if (data.error) {\n          setRedirectToSignin(true)\n        } else {\n          setExpenses(data)\n        }\n    })\n}\n```", "```js\n{expenses.map((expense, index) = {\n  return  span key={index} \n     <ExpansionPanel className={classes.panel}>\n        <ExpansionPanelSummary \n           expandIcon={ Edit / } >\n          <div className={classes.info} \n            Typography className={classes.amount} $ {expense.amount} </Typography>\n            <Divider style={{marginTop: 4, marginBottom: 4}}/>\n            <Typography  {expense.category}  </Typography>\n            <Typography className={classes.date} \n                {new Date(expense.incurred_on).toLocaleDateString()}\n            </Typography>  \n          </div> \n          <div> \n            <Typography className={classes.heading} {expense.title} </Typography> \n            <Typography className={classes.notes}  {expense.notes}  </Typography>\n          </div> \n        </ExpansionPanelSummary>\n        <Divider/>\n        <ExpansionPanelDetails style={{display: 'block'}} \n           ...\n        </ExpansionPanelDetails>\n     </ExpansionPanel> \n    </span> \n })\n}\n```", "```js\n <ExpansionPanelDetails style={{display: 'block'}}>\n   <div> \n     <TextField label=\"Title\" value={expense.title} \n               onChange={handleChange('title', index)}/> \n     <TextField label=\"Amount ($)\" value={expense.amount} \n               onChange={handleChange('amount', index)} type=\"number\"/>\n   </div> \n   <div>\n     <MuiPickersUtilsProvider utils={DateFnsUtils}> \n       <DateTimePicker\n          label=\"Incurred on\"\n          views={[\"year\", \"month\", \"date\"]}\n          value={expense.incurred_on}\n          onChange={handleDateChange(index)}\n          showTodayButton\n      />\n     </MuiPickersUtilsProvider \n     <TextField label=\"Category\" value={expense.category} \n        onChange={handleChange('category', index)}/>\n   </div> \n   <TextField label=\"Notes\" multiline rows=\"2\"\n      value={expense.notes}\n      onChange={handleChange('notes', index)}\n  />\n   <div className={classes.buttons} \n    { error && ( Typography component=\"p\" color=\"error\" \n        <Icon color=\"error\" className={classes.error} error </Icon> \n                    {error}\n                 </Typography> )\n    }\n    { saved && Typography component=\"span\" color=\"secondary\" Saved </Typography>  }\n     <Button color=\"primary\" variant=\"contained\" \n            onClick={()=  clickUpdate(index)} Update </Button> \n     DeleteExpense expense={expense} onRemove={removeExpense}/ \n   </div>  \n </ExpansionPanelDetails> \n```", "```js\nconst handleChange = (name, index) =  event =  {\n    const updatedExpenses = [...expenses]\n    updatedExpenses[index][name] = event.target.value\n    setExpenses(updatedExpenses)\n}\n```", "```js\nconst clickUpdate = (index) =  {\n    let expense = expenses[index]\n    update({\n            expenseId: expense._id\n        }, {\n            t: jwt.token\n        }, expense)\n    .then((data) =  {\n        if (data.error) {\n           setError(data.error)\n        } else {\n           setSaved(true)\n           setTimeout(()= {setSaved(false)}, 3000)\n    }\n}\n```", "```js\nrouter.route('/api/expenses/:expenseId')\n  .put(authCtrl.requireSignin, expenseCtrl.hasAuthorization, expenseCtrl.update)\n  .delete(authCtrl.requireSignin, expenseCtrl.hasAuthorization, expenseCtrl.remove)\nrouter.param('expenseId', expenseCtrl.expenseByID)\n```", "```js\nconst expenseByID = async (req, res, next, id) =  {\n    try {\n      let expense = await Expense.findById(id).populate\n           ('recorded_by', '_id name').exec()\n      if (!expense)\n        return res.status('400').json({\n          error: \"Expense record not found\"\n        })\n      req.expense = expense\n      next()\n    } catch (err){\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n}\n```", "```js\nconst hasAuthorization = (req, res, next) =  {\n  const authorized = req.expense && req.auth && \n      req.expense.recorded_by._id == req.auth._id\n  if (!(authorized)) {\n    return res.status('403').json({\n      error: \"User is not authorized\"\n    })\n  }\n  next()\n}\n```", "```js\nconst update = async (req, res) =  {\n    try {\n      let expense = req.expense\n      expense = extend(expense, req.body)\n      expense.updated = Date.now()\n      await expense.save()\n      res.json(expense)\n    } catch (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n}\n```", "```js\nconst remove = async (req, res) =  {\n    try {\n      let expense = req.expense\n      let deletedExpense = await expense.remove()\n      res.json(deletedExpense)\n    } catch (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n}\n```", "```js\nrouter.route('/api/expenses/current/preview')\n  .get(authCtrl.requireSignin, expenseCtrl.currentMonthPreview)\n```", "```js\nconst currentMonthPreview = async (req, res) =  {\n  const date = new Date(), y = date.getFullYear(), m = date.getMonth()\n  const firstDay = new Date(y, m, 1)\n  const lastDay = new Date(y, m + 1, 0)\n\n  const today = new Date()\n  today.setUTCHours(0,0,0,0)\n\n  const tomorrow = new Date()\n  tomorrow.setUTCHours(0,0,0,0)\n  tomorrow.setDate(tomorrow.getDate()+1)\n\n  const yesterday = new Date()\n  yesterday.setUTCHours(0,0,0,0)\n  yesterday.setDate(yesterday.getDate()-1)\n\n  try {\n      /* ... Perform aggregation operations on the Expense collection \n             to compute current month's numbers ... */\n      /* ... Send computed result in response ... */\n  } catch (err){\n    console.log(err)\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n\n}\n```", "```js\nlet currentPreview = await Expense.aggregate([\n  { $facet: { month: [\n    { $match: { incurred_on: { $gte: firstDay, $lt: lastDay }, \n      recorded_by: mongoose.Types.ObjectId(req.auth._id)}},\n    { $group: { _id: \"currentMonth\" , totalSpent: {$sum: \"$amount\"} }},\n       ],\n    today: [\n      { $match: { incurred_on: { $gte: today, $lt: tomorrow }, \n        recorded_by: mongoose.Types.ObjectId(req.auth._id) }},\n      { $group: { _id: \"today\" , totalSpent: {$sum: \"$amount\"} } },\n        ],\n\n    yesterday: [\n      { $match: { incurred_on: { $gte: yesterday, $lt: today }, \n        recorded_by: mongoose.Types.ObjectId(req.auth._id) }},\n      { $group: { _id: \"yesterday\" , totalSpent: {$sum: \"$amount\"} } \n        },\n       ]\n    }\n  }])\nlet expensePreview = {month: currentPreview[0].month[0], today: currentPreview[0].today[0], yesterday: currentPreview[0].yesterday[0] }\nres.json(expensePreview)\n```", "```js\n  useEffect(() =  {\n      const abortController = new AbortController()\n      const signal = abortController.signal\n      currentMonthPreview({t: jwt.token}, signal).then((data) =  {\n        if (data.error) {\n          setRedirectToSignin(true)\n        } else {\n          setExpensePreview(data)\n        }\n      })\n      return function cleanup(){\n        abortController.abort()\n      }\n  }, [])\n```", "```js\n <Typography variant=\"h4\" color=\"textPrimary\" You've spent </Typography> \n <div>  \n<Typography component=\"span\" \n        ${expensePreview.month ? expensePreview.month.totalSpent : '0'} \n          span so far this month  </span> \n     </Typography>\n     <div> \n       <Typography variant=\"h5\" color=\"primary\" \n         ${expensePreview.today ? expensePreview.today.totalSpent :'0'} \n             span today </span> \n         </Typography>\n         <Typography variant=\"h5\" color=\"primary\" \n            ${expensePreview.yesterday \n               ? expensePreview.yesterday.totalSpent: '0'}     \n             <span className={classes.day} yesterday  </span> \n         </Typography> \n         <Link to=\"/expenses/all\"  Typography variant=\"h6\"> See more            </Typography>  </Link> \n     </div> \n </div> \n```", "```js\nrouter.route('/api/expenses/by/category')\n  .get(authCtrl.requireSignin, expenseCtrl.expenseByCategory)\n```", "```js\nconst expenseByCategory = async (req, res) =  {\n  const date = new Date(), y = date.getFullYear(), m = date.getMonth()\n  const firstDay = new Date(y, m, 1)\n  const lastDay = new Date(y, m + 1, 0)\n\n  try {\n    let categoryMonthlyAvg = await Expense.aggregate([/*... aggregation ... */]).exec()\n    res.json(categoryMonthlyAvg)\n  } catch (err) {\n    console.log(err)\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\n[\n  { $facet: {\n     average: [\n      { $match: { recorded_by: mongoose.Types.ObjectId(req.auth._id) }},\n      { $group: { _id: {category: \"$category\", month: {$month: \"$incurred_on\"}}, \n                  totalSpent: {$sum: \"$amount\"} } },\n      { $group: { _id: \"$_id.category\", avgSpent: { $avg: \"$totalSpent\"}}},\n      { $project: {\n         _id: \"$_id\", value: {average: \"$avgSpent\"},\n        }\n      }\n     ],\n     total: [\n      { $match: { incurred_on: { $gte: firstDay, $lte: lastDay }, \n                  recorded_by: mongoose.Types.ObjectId(req.auth._id) }},\n      { $group: { _id: \"$category\", totalSpent: {$sum: \"$amount\"} } },\n      { $project: {\n         _id: \"$_id\", value: {total: \"$totalSpent\"},\n        }\n      }\n     ]\n    }\n  },\n  { $project: {\n     overview: { $setUnion:['$average','$total'] },\n   }\n  },\n  { $unwind: '$overview' },\n  { $replaceRoot: { newRoot: \"$overview\" } },\n  { $group: { _id: \"$_id\", mergedValues: { $mergeObjects: \"$value\" } } }\n]\n```", "```js\n  useEffect(() =  {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n    expenseByCategory({t: jwt.token}, signal).then((data) =  {\n      if (data.error) {\n        setRedirectToSignin(true)\n      } else {\n        setExpenseCategories(data)\n      }\n    })\n    return function cleanup(){\n      abortController.abort()\n    }\n  }, [])\n```", "```js\n{expenseCategories.map((expense, index) =  {\n    return( div key={index}  \n        <Typography variant=\"h5\" {expense._id} </Typography>\n        <Divider style={{ backgroundColor: \n            indicateExpense(expense.mergedValues)}}/>\n        <div> \n          <Typography component=\"span\" past average </Typography>\n          <Typography component=\"span\" this month </Typography> \n          <Typography component=\"span\"  {expense.mergedValues.total \n && expense.mergedValues.total-\n              expense.mergedValues.average > 0 ? \"spent extra\" : \"saved\" } \n          </Typography> \n        </div> \n        <div> \n          <Typography component=\"span\" ${expense.mergedValues.average}         </Typography> \n          <Typography component=\"span\" ${expense.mergedValues.total ? \n expense.mergedValues.total : 0}\n          </Typography> \n          <Typography component=\"span\" ${expense.mergedValues.total ? \n Math.abs(expense.mergedValues.total-\n             expense.mergedValues.average) : \n                expense.mergedValues.average}\n          </Typography>\n        </div> \n        <Divider/> \n     </div> ) \n  })\n}\n```", "```js\nconst indicateExpense = (values) =  {\n    let color = '#4f83cc'\n    if(values.total){\n      const diff = values.total - values.average\n      if( diff   0){\n        color = '#e9858b'\n      }\n      if( diff   0 ){\n        color = '#2bbd7e'\n      } \n    }\n    return color\n}\n```", "```js\nyarn add victory\n```", "```js\nrouter.route('/api/expenses/plot')\n  .get(authCtrl.requireSignin, expenseCtrl.plotExpenses)\n```", "```js\nconst plotExpenses = async (req, res) =  {\n\n    const date = new Date(req.query.month), y = date.getFullYear(), m =    date.getMonth()\n    const firstDay = new Date(y, m, 1)\n    const lastDay = new Date(y, m + 1, 0)\n\n    try {\n\n        let totalMonthly = await Expense.aggregate( [\n        { $match: { incurred_on: { $gte : firstDay, $lt: lastDay }, \n                    recorded_by: mongoose.Types.ObjectId(req.auth._id) }},\n        { $project: {x: {$dayOfMonth: '$incurred_on'}, y: '$amount'}}\n        ]).exec()\n\n        res.json(totalMonthly)\n\n    } catch (err){\n        console.log(err)\n        return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n        })\n    }\n}\n```", "```js\nconst [plot, setPlot] = useState([])\nconst [month, setMonth] = useState(new Date())\nconst [error, setError] = useState('')\nconst jwt = auth.isAuthenticated()\nuseEffect(() =  {\n        const abortController = new AbortController()\n        const signal = abortController.signal\n\n        plotExpenses({month: month},{t: jwt.token}, signal).then((data) =  {\n          if (data.error) {\n            setError(data.error)\n          } else {\n            setPlot(data)\n          }\n        })\n        return function cleanup(){\n          abortController.abort()\n        }\n    }, [])\n```", "```js\n <VictoryChart\n    theme={VictoryTheme.material}\n    height={400}\n    width={550}\n    domainPadding={40}\n\n     <VictoryScatter\n        style={{\n            data: { fill: \"#01579b\", stroke: \"#69f0ae\", strokeWidth: 2 },\n            labels: { fill: \"#01579b\", fontSize: 10, padding:8}\n        }}\n        bubbleProperty=\"y\"\n        maxBubbleSize={15}\n        minBubbleSize={5}\n        labels={({ datum }) =  `$${datum.y} on ${datum.x}th`}\n        labelComponent={ VictoryTooltip/ }\n        data={plot}\n        domain={{x: [0, 31]}}\n    />\n     <VictoryLabel\n        textAnchor=\"middle\"\n        style={{ fontSize: 14, fill: '#8b8b8b' }}\n        x={270} y={390}\n        text={`day of month`}\n    /> \n     <VictoryLabel\n        textAnchor=\"middle\"\n        style={{ fontSize: 14, fill: '#8b8b8b' }}\n        x={6} y={190}\n        angle = {270} \n        text={`Amount ($)`}\n    />\n </VictoryChart>\n```", "```js\nrouter.route('/api/expenses/yearly')\n  .get(authCtrl.requireSignin, expenseCtrl.yearlyExpenses)\n```", "```js\n  const yearlyExpenses = async (req, res) =  {\n  const y = req.query.year\n  const firstDay = new Date(y, 0, 1)\n  const lastDay = new Date(y, 12, 0)\n  try {\n    let totalMonthly = await Expense.aggregate( [\n      { $match: { incurred_on: { $gte : firstDay, $lt: lastDay } }},\n      { $group: { _id: {$month: \"$incurred_on\"}, totalSpent: {$sum: \"$amount\"} } },\n      { $project: {x: '$_id', y: '$totalSpent'}}\n    ]).exec()\n    res.json({monthTot:totalMonthly})\n  } catch (err){\n    console.log(err)\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst [year, setYear] = useState(new Date())\nconst [yearlyExpense, setYearlyExpense] = useState([])\nconst [error, setError] = useState('') \nconst jwt = auth.isAuthenticated()\nuseEffect(() =  {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n    yearlyExpenses({year: year.getFullYear()},{t: jwt.token}, signal).then((data) =  {\n        if (data.error) {\n        setError(data.error)\n        }\n        setYearlyExpense(data)\n    })\n    return function cleanup(){\n        abortController.abort()\n    }\n}, [])\n```", "```js\nconst monthStrings = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n <VictoryChart\n    theme={VictoryTheme.material}\n    domainPadding={10}\n    height={300}\n    width={450} \n     <VictoryAxis/> \n     <VictoryBar\n        categories={{\n            x: monthStrings\n        }}\n        style={{ data: { fill: \"#69f0ae\", width: 20 }, labels: {fill: \"#01579b\"} }}\n        data={yearlyExpense.monthTot}\n        x={monthStrings['x']}\n        domain={{x: [0, 13]}}\n        labels={({ datum }) =  `$${datum.y}`}\n    /> \n </VictoryChart>\n```", "```js\nrouter.route('/api/expenses/category/averages')\n  .get(authCtrl.requireSignin, expenseCtrl.averageCategories)\n```", "```js\nconst averageCategories = async (req, res) =  {\n  const firstDay = new Date(req.query.firstDay)\n  const lastDay = new Date(req.query.lastDay)\n\n  try {\n    let categoryMonthlyAvg = await Expense.aggregate([\n      { $match : { incurred_on : { $gte : firstDay, $lte: lastDay }, \n         recorded_by: mongoose.Types.ObjectId(req.auth._id)}},\n      { $group : { _id : {category: \"$category\"}, \n         totalSpent: {$sum: \"$amount\"} } },\n      { $group: { _id: \"$_id.category\", avgSpent: \n         { $avg: \"$totalSpent\"}}},\n      { $project: {x: '$_id', y: '$avgSpent'}}\n    ]).exec()\n    res.json({monthAVG:categoryMonthlyAvg})\n  } catch (err){\n    console.log(err)\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst [error, setError] = useState('')\nconst [expenses, setExpenses] = useState([])\nconst jwt = auth.isAuthenticated()\nconst date = new Date(), y = date.getFullYear(), m = date.getMonth()\nconst [firstDay, setFirstDay] = useState(new Date(y, m, 1))\nconst [lastDay, setLastDay] = useState(new Date(y, m + 1, 0))\nuseEffect(() =  {\n        const abortController = new AbortController()\n        const signal = abortController.signal\n        averageCategories({firstDay: firstDay, lastDay: lastDay}, \n        {t: jwt.token}, signal).then((data) =  {\n          if (data.error) {\n            setError(data.error)\n          } else {\n            setExpenses(data)\n          }\n        })\n        return function cleanup(){\n          abortController.abort()\n        }\n    }, [])\n```", "```js\n <div style={{width: 550, margin: 'auto'}}>\n     <svg viewBox=\"0 0 320 320\">\n         <VictoryPie standalone={false} data=\n            {expenses.monthAVG}    innerRadius={50} \n              theme={VictoryTheme.material} \n                labelRadius={({ innerRadius }) =  innerRadius + 14 }\n                labelComponent={ VictoryLabel angle={0} style={[{\n                    fontSize: '11px',\n                    fill: '#0f0f0f'\n                },\n                {\n                    fontSize: '10px',\n                    fill: '#013157'\n                }]} text={( {datum} ) =  `${datum.x}\\n $${datum.y}`}/ }\n        />\n         <VictoryLabel\n              textAnchor=\"middle\"\n              style={{ fontSize: 14, fill: '#8b8b8b' }}\n              x={175} y={170}\n              text={`Spent \\nper category`}\n         /> \n     </svg> \n </div> \n```"]