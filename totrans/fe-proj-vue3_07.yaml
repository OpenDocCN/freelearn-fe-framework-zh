- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Routing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由
- en: In the previous chapter, you learned about sharing common logic between components
    using mixins, creating app plugins, and other approaches to creating components,
    such as dynamic and functional components.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了使用mixins在组件之间共享公共逻辑、创建应用插件以及其他创建组件的方法，如动态和功能组件。
- en: This chapter will guide you through how routing and Vue Router work. You will
    learn how to set up, implement, and manage the routing system in your app with
    Vue Router. You will look at dynamic routing for passing parameter values and
    nested routes for better reusability in complex applications. In addition, we
    will also look at JavaScript Hooks, which are helpful for authentication and error
    handling.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将指导您了解路由和Vue Router是如何工作的。您将学习如何使用Vue Router在您的应用中设置、实现和管理路由系统。您将了解动态路由用于传递参数值和嵌套路由用于在复杂应用中提高复用性。此外，我们还将探讨JavaScript钩子，这些钩子对于身份验证和错误处理非常有帮助。
- en: By the end of this chapter, you will be ready to handle static and dynamic routing
    in any Vue application.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将准备好处理任何Vue应用中的静态和动态路由。
- en: 'This chapter covers the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: Understanding routing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解路由
- en: Understanding Vue Router
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Vue Router
- en: Exploring the `RouterView` element
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索`RouterView`元素
- en: Defining the routes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义路由
- en: Setting up a default layout for your app
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的应用设置默认布局
- en: Setting up navigation links with `RouterLink`
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`RouterLink`设置导航链接
- en: Passing route parameters
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递路由参数
- en: Understanding Router Hooks
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解路由钩子
- en: Decoupling params with props
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用props解耦参数
- en: Dynamic routing
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态路由
- en: Catching error paths
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获错误路径
- en: Nested routes
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套路由
- en: Using layouts
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用布局
- en: Technical requirements
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, you need to set up a basic Vue project following the instructions
    in [*Chapter 1*](B18645_01.xhtml#_idTextAnchor015), *Starting Your First Vue Project*.
    It’s recommended to create a single file Vue component to practice working with
    the examples and concepts mentioned easily.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您需要按照[*第一章*](B18645_01.xhtml#_idTextAnchor015)中“开始您的第一个Vue项目”的说明设置一个基本的Vue项目。建议创建一个单文件Vue组件来练习轻松地处理提到的示例和概念。
- en: 'You can find this chapter’s source code here: [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处找到本章的源代码：[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07)。
- en: Understanding routing
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解路由
- en: '`website.com/about` into their URL bar will be redirected to the **About**
    page.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在URL栏中输入`website.com/about`时，将被重定向到**关于**页面。
- en: In web development, routing is the matching mechanism by which we decide how
    to connect HTTP requests to the code that handles them. We use routing whenever
    there is a need for URL navigation in our application. Most modern web applications
    contain a lot of different URLs, even single-page ones.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web开发中，路由是我们决定如何将HTTP请求与处理它们的代码相连接的匹配机制。每当我们的应用需要URL导航时，我们都会使用路由。大多数现代Web应用都包含许多不同的URL，即使是单页应用也是如此。
- en: Thus, routing creates a navigation system and helps users quickly move around
    our application and the web. With **Single-Page Applications** (**SPAs**), routing
    allows you to smoothly navigate within an application without the need for page
    refreshing.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，路由创建了一个导航系统，并帮助用户快速在我们的应用和网络上移动。在**单页应用**（**SPAs**）中，路由允许您在应用内部平滑导航，无需刷新页面。
- en: In short, routing is a way for an application to interpret what resource users
    want based on the URL provided. It is a system for web-based resource navigation
    with URLs, such as paths to assets (images and videos), scripts, and stylesheets.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，路由是应用根据提供的URL解释用户想要什么资源的一种方式。它是一个基于URL的基于Web的资源导航系统，如资产（图像和视频）路径、脚本和样式表。
- en: Understanding Vue Router
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Vue Router
- en: As stated in the Vue.js documentation, **Vue Router** is the official router
    service for any Vue.js application. It provides a single-entry point for communication
    between components with routes and therefore effectively controls the application’s
    flow, regardless of the user’s behavior.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如Vue.js文档所述，**Vue Router**是任何Vue.js应用的官方路由服务。它提供了一个组件与路由之间的通信的单入口点，因此有效地控制了应用的流程，无论用户的行为如何。
- en: Installing Vue Router
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Vue Router
- en: 'Vue Router is not installed by default; however, it can easily be enabled when
    creating an application with Vite. Create a new application by running the following
    command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Router 默认未安装；然而，当使用 Vite 创建应用程序时，它可以很容易地被启用。通过运行以下命令创建一个新应用程序：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Select the `Yes` option for adding Vue Router to the project as shown in *Figure
    7**.1*:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 *图 7.1* 中所示的 `Yes` 选项，将 Vue Router 添加到项目中：
- en: '![Figure 7.1 – Adding Vue Router during creating a project](img/B18645_07_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 在创建项目时添加 Vue Router](img/B18645_07_01.jpg)'
- en: Figure 7.1 – Adding Vue Router during creating a project
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 在创建项目时添加 Vue Router
- en: Note
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you would like to add Vue Router to an existing Vue.js application, you
    can install it as an application’s dependency with the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将 Vue Router 添加到现有的 Vue.js 应用程序中，你可以使用以下命令将其作为应用程序的依赖项安装：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The next step is understanding how Vue Router synchronizes the browser URL and
    the application’s view.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是了解 Vue Router 如何同步浏览器 URL 和应用程序视图。
- en: First, let’s look at the `RouterView` element.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看 `RouterView` 元素。
- en: Exploring the RouterView element
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 `RouterView` 元素
- en: '`RouterView` is a Vue component whose job is to do the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`RouterView` 是一个 Vue 组件，其任务是以下内容：'
- en: Render different child components
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染不同的子组件
- en: Mount and unmount itself automatically at any nesting level, depending on the
    route’s given path
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据给定的路由路径，在任何嵌套级别自动挂载和卸载自身
- en: Without `RouterView`, it is almost impossible to render dynamic content correctly
    for users at runtime. For example, when a user navigates to the `RouterView` knows
    and only generates the content related to that page.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 没有使用 `RouterView`，在运行时正确渲染动态内容几乎是不可能的。例如，当用户导航到 `RouterView` 知道并只生成与该页面相关的内。
- en: Let’s see how we can pass props to the view through `RouterView`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们如何通过 `RouterView` 将属性传递给视图。
- en: Passing props to view
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将属性传递给视图
- en: Since `RouterView` is a component, it can also receive props. The only prop
    it receives is `name`, which is the same name registered in the corresponding
    route’s record defined in the `router` object at the initialization phase.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `RouterView` 是一个组件，它也可以接收属性。它接收的唯一属性是 `name`，这是在初始化阶段在 `router` 对象中定义的相应路由记录中注册的相同名称。
- en: The Vue engine automatically passes any other additional HTML attributes to
    any view component that `RouterView` renders.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 引擎自动将任何其他额外的 HTML 属性传递给 `RouterView` 渲染的任何视图组件。
- en: 'Take the following `RouterView` component with a `"main-app-view"` class, for
    instance:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以具有 `"main-app-view"` 类的以下 `RouterView` 组件为例：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s say we have a view component’s template with the following code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个视图组件的模板，其代码如下：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this case, the child component will receive the `"main-app-view"` attribute
    class when it’s the active view. The actual output after rendering will be as
    follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，当子组件是活动视图时，它将接收到 `"main-app-view"` 属性类。渲染后的实际输出如下：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next, let’s look at how `RouterView` works.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看 `RouterView` 是如何工作的。
- en: Working with RouterView
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与 `RouterView` 一起工作
- en: 'In your newly created application, let’s navigate to `App.vue` and replace
    the default code of `<template>` with the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在你新创建的应用程序中，让我们导航到 `App.vue` 并将 `<template>` 的默认代码替换为以下内容：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, go to `src/router/index.js` and comment out the generated code within
    the `routes` array, as shown in the following code block:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，转到 `src/router/index.js` 并注释掉 `routes` 数组中生成的代码，如下所示：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When you run the app locally and open the local server URL in the browser,
    the output will be as seen in *Figure 7**.2*:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在本地运行应用程序并在浏览器中打开本地服务器 URL 时，输出将如 *图 7.2* 所示：
- en: '![Figure 7.2 – Output of the app when there is no route defined](img/B18645_07_02.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – 未定义路由时应用程序的输出](img/B18645_07_02.jpg)'
- en: Figure 7.2 – Output of the app when there is no route defined
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – 未定义路由时应用程序的输出
- en: The output is an empty page because we have not set up any router configurations
    in our file, including mapping the paths with the related view. Without this step,
    the routing system cannot dynamically pick the suitable view component and render
    it into our `RouterView` element.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是一个空页面，因为我们没有在我们的文件中设置任何路由配置，包括将路径映射到相关视图。没有这一步，路由系统无法动态选择合适的视图组件并将其渲染到我们的
    `RouterView` 元素中。
- en: In the next section, we will see how to set up Vue Router.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将了解如何设置 Vue Router。
- en: Setting up Vue Router
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Vue Router
- en: When we add Vue Router to our project, Vite creates and adds a `router` folder
    to the `/src` directory with a single auto-generated `index.js` file. This file
    contains the necessary configurations for our router system, which we will explore
    in the next section.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将Vue Router添加到我们的项目中时，Vite会在`/src`目录中创建并添加一个名为`router`的文件夹，其中包含一个自动生成的`index.js`文件。此文件包含我们路由系统的必要配置，我们将在下一节中探讨。
- en: 'In the `src/main.js` file, we import the defined configuration object and uses
    the Vue instance method `use()` to install the router system into the application,
    as seen in the following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/main.js`文件中，我们导入定义的配置对象，并使用Vue实例方法`use()`将路由系统安装到应用程序中，如下所示：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`app.use` is an instance method with a built-in mechanism to prevent you from
    installing a plugin more than once.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.use`是一个实例方法，具有内置机制，防止您安装插件超过一次。'
- en: 'After executing `app.use(router)`, the following objects are available for
    access in any component:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`app.use(router)`后，以下对象可以在任何组件中访问：
- en: '`this.$router`: The global router object'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this.$router`：全局路由对象'
- en: '`this.$route`: The current route object points to the element in context'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this.$route`：当前路由对象指向上下文中的元素'
- en: If you are using `setup()` and Composition API (or `<script setup>`), you can
    import `useRoute()` and `useRouter()` functions from `vue-router` package and
    get the current route object (instead of `this.$route`), and global router object
    (instead of `this.$router`) respectively.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用`setup()`和组合式API（或`<script setup>`），您可以从`vue-router`包中导入`useRoute()`和`useRouter()`函数，并分别获取当前路由对象（而不是`this.$route`）和全局路由对象（而不是`this.$router`）。
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now that we have registered the use of Vue Router in our application, let’s
    move on to the next step – defining the routes for the configuration object of
    the router instance.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经在我们的应用程序中注册了Vue Router的使用，让我们继续下一步——定义路由实例的配置对象的路线。
- en: Defining the routes
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义路由
- en: In a web application, a route is a URL path pattern. Vue Router will map it
    to a specific handler. This handler is a Vue component, defined and located in
    a physical file. For example, when the user enters the `localhost:3000/home` route,
    if you map the `HomeView` component to this specific route, the routing system
    knows how to render `HomeView` content accordingly.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用程序中，路由是一个URL路径模式。Vue Router将其映射到特定的处理程序。此处理程序是一个Vue组件，定义并位于一个物理文件中。例如，当用户输入`localhost:3000/home`路由时，如果您将`HomeView`组件映射到该特定路由，路由系统就会知道如何相应地渲染`HomeView`内容。
- en: As seen in *Figure 7**.2*, it is crucial to set up `routes` (or paths) for navigation
    within the application; otherwise, your application will display as empty.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图7**.2所示，设置应用程序内的`routes`（或路径）对于导航至关重要；否则，您的应用程序将显示为空。
- en: 'Each route is an object literal that uses the `RouteRecordRaw` interface with
    the following properties:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 每个路由都是一个使用`RouteRecordRaw`接口的对象字面量，具有以下属性：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We define all the routes needed for an application as a list of `routes`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将应用程序所需的所有路由定义为一个`routes`列表：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We return to the `src/router/index.js` file and uncomment the code inside `routes`.
    For convenience, there will be two predefined routes called `home` and `about`,
    each being an object located in the `routes` array.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们回到`src/router/index.js`文件，取消注释`routes`内部的代码。为了方便，将有两个预定义的路由，分别称为`home`和`about`，每个都是位于`routes`数组中的对象。
- en: 'Let’s take a closer look at the first route as an example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以第一个路由为例，进行更详细的了解：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `path` property is a required string that indicates the path of the targeted
    route. Vue Router resolves this property to an absolute URL path for the browser’s
    navigation. For instance, the `/about` path will be translated into `<app domain>/about`
    (`localhost:8080/about` or `example.com/about`).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`path`属性是一个必需的字符串，表示目标路由的路径。Vue Router将此属性解析为浏览器导航的绝对URL路径。例如，`/about`路径将被转换为`<app
    domain>/about`（`localhost:8080/about`或`example.com/about`）。'
- en: 'In this case, Vue Router understands `/` – the empty path – as the default
    path for loading the application when there is no other indicator after the forward
    slash (`/`) – for example, when the user navigates to `<app-domain>` or `<app-domain>/`
    (without setting `strict: true`).'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '在这种情况下，Vue Router将`/`（空路径）视为默认路径，用于在没有其他指示符（例如，当用户导航到`<app-domain>`或`<app-domain>/`（未设置`strict:
    true`）时）加载应用程序。'
- en: The next property is `name`, a string indicating the name given to the targeted
    route. Even though it is optional, we recommend defining every path with a name
    for better code maintenance and route tracking purposes, which we will discuss
    later in this chapter in the *Passing route* *parameters* section.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个属性是`name`，它是一个字符串，表示分配给目标路由的名称。尽管它是可选的，但我们建议为每个路径定义一个名称，以利于代码维护和路由跟踪，我们将在本章后面的*传递路由*
    *参数*部分讨论这一点。
- en: The last property is `component`, which is a Vue component instance. `RouterView`
    uses this property to reference the view component to render the page content
    when the path is active.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个属性是`component`，它是一个Vue组件实例。`RouterView`使用此属性来引用视图组件，在路径处于活动状态时渲染页面内容。
- en: Here, the route is defined as the `home` route, mapped as the default path to
    the application, and tied to the `HomeView` component for content.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，路由被定义为`home`路由，映射为应用程序的默认路径，并与`HomeView`组件关联以显示内容。
- en: Vite also auto-generates two simple components for these two sample routes –
    `HomeView` and `AboutView`, located in the `src/views` folder.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Vite还自动为这两个示例路由生成两个简单的组件 – `HomeView`和`AboutView`，位于`src/views`文件夹中。
- en: In the next section, we’ll go over some tips that can be helpful when you use
    loading components with routes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍一些在使用带有路由的加载组件时可能有所帮助的技巧。
- en: Tips on loading components for route configuration
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于为路由配置加载组件的技巧
- en: 'Indeed, we need to import the component to tie it to the targeted route in
    the same `index.js` file. The classic and most popular way is to import it at
    the top of the file as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们需要在同一个`index.js`文件中导入组件，将其与目标路由关联起来。最经典和最受欢迎的方法是在文件顶部导入，如下所示：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Often, we add this code line under the main imports as shown in *Figure 7**.3*:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们会在主导入下添加此代码行，如图*7.3**所示：
- en: '![Figure 7.3 – Importing the HomeView component on line 2 – src/router/index.js](img/B18645_07_03.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3 – 在第2行导入HomeView组件 – src/router/index.js](img/B18645_07_03.jpg)'
- en: Figure 7.3 – Importing the HomeView component on line 2 – src/router/index.js
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3 – 在第2行导入HomeView组件 – src/router/index.js
- en: However, a more efficient way is to lazy-load the component.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一种更有效的方法是懒加载组件。
- en: '**Lazy loading**, also known as on-demand loading, is a technique that aims
    to optimize the content of a website or web application at runtime. It helps to
    reduce the time consumption and number of resources required to download an application
    on the first load.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**懒加载**，也称为按需加载，是一种旨在运行时优化网站或网络应用程序内容的技巧。它有助于减少首次加载应用程序所需的时间和资源消耗。'
- en: This optimization is critical to ensure the best user experience possible, where
    every millisecond of waiting matters. Besides this, lazy loading also enables
    better code-splitting at the route level and performance optimization in large
    or complex applications.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这种优化对于确保最佳的用户体验至关重要，因为每一毫秒的等待都很重要。除此之外，懒加载还能在路由级别实现更好的代码拆分，并在大型或复杂应用程序中进行性能优化。
- en: 'We can lazy-load the component by using Vite (and Rollup). Instead of importing
    the `AboutView` component into the top of the file, as we did with `HomeView`
    (see *Figure 7**.3*), we can dynamically add the following right after defining
    the name of the `about` route instead:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Vite（和Rollup）来懒加载组件。我们不需要将`AboutView`组件导入到文件顶部，就像我们导入`HomeView`（参见图*7.3*）那样，我们可以在定义`about`路由名称后动态添加以下内容：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, we dynamically lazy-load the `AboutView` view component for the `about`
    route. During compilation, Vite generates a separate chunk with the designated
    name (`about`) for the target route and only loads it when the user visits this
    route.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为`about`路由动态懒加载`AboutView`视图组件。在编译期间，Vite为目标路由生成一个具有指定名称（`about`）的单独块，并且只有在用户访问此路由时才加载它。
- en: In most cases, since the user will likely land on the default path on the first
    go, it is better not to lazy-load the default component (`HomeView` in our app)
    but to import it in the usual way. Hence, the tip here is to determine which elements
    should be lazily loaded when designing your routing and combine the two methods
    for the most benefit.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，由于用户很可能会在第一次访问时到达默认路径，因此最好不要懒加载默认组件（在我们的应用程序中是`HomeView`），而是以通常的方式导入它。因此，这里的建议是在设计路由时确定哪些元素应该被懒加载，并将两种方法结合起来以获得最大效益。
- en: We will now see how to set up the router instance.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看看如何设置路由实例。
- en: Setting up the router instance
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置路由实例
- en: 'After defining the routes, the final step is to create the `router` instance
    based on the given configuration options by using the `createRouter` method, as
    shown here:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了路由后，最后一步是根据给定的配置选项使用`createRouter`方法创建基于配置的`router`实例，如下所示：
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: A configuration is an object consisting of different properties that help to
    form the app’s router. We will now examine these properties in the following subsections.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 配置是一个包含不同属性的对象，这些属性有助于形成应用程序的router。我们现在将在以下小节中检查这些属性。
- en: routes
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: routes
- en: '`routes` is a required option. Without this, the router won’t be able to recognize
    the paths and direct users to the suitable view content accordingly.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`routes`是一个必需的选项。没有它，路由器将无法识别路径，并相应地将用户引导到合适的视图内容。'
- en: history
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: history
- en: '`history` determines the router’s mode. There are two modes in Vue Router for
    URLs:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`history`决定了路由器的模式。Vue Router中有两种URL模式：'
- en: '`createWebHistory()` method to leverage the default `history.pushState()` API,
    as well as the HTML5 History API. It allows us to achieve URL navigation without
    a page reload and makes the URL path human-readable – for example, `yourapplication.com/about`.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`createWebHistory()`方法利用默认的`history.pushState()` API以及HTML5历史API。它允许我们在不重新加载页面的情况下实现URL导航，并使URL路径易于阅读
    – 例如，`yourapplication.com/about`。
- en: '`createWebHashHistory()` method to create a hash mode, which allows you to
    use a hash symbol (`#`) to simulate a URL – for example, `yourapplication.com/#about`
    for an `youapplication.com/#/` for the **Home** URL of your application.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`createWebHashHistory()`方法创建hash模式，这允许你使用hash符号（`#`）来模拟URL – 例如，`yourapplication.com/#about`用于应用程序的“主页”URL，而`youapplication.com/#/`用于应用程序的“主页”URL。
- en: base
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: base
- en: '`base` determines the base URL for the app. For example, when we set it to
    `process.env.BASE_URL`, it allows developers to control the base URL from outside
    the application code, specifically from a `.env` file. Hence, developers can set
    the directory from which the hosting platform serves the code at runtime.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`base`决定了应用程序的基本URL。例如，当我们将其设置为`process.env.BASE_URL`时，它允许开发人员从应用程序代码外部控制基本URL，特别是从`.env`文件中。因此，开发人员可以在运行时设置托管平台提供代码的目录。'
- en: 'With `base` finally out of the way, we have created the `router` instance.
    All that is left is to export it:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在“base”配置最终确定后，我们创建了“router”实例。接下来要做的就是导出它：
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In `main.js`, we import the `router` instance and use it in the router plugin
    right after the creation of the main `app` instance received from `createApp`,
    as shown here:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.js`中，我们导入`router`实例，并在从`createApp`接收到的主`app`实例创建后立即使用它，如下所示：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In `App.vue`, replace `<template>` with the following code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在`App.vue`中，将`<template>`替换为以下代码：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Our application will now render as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序现在将如下渲染：
- en: '![Figure 7.4 – Home page in the browser](img/B18645_07_04.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图7.4 – 浏览器中的主页](img/B18645_07_04.jpg)'
- en: Figure 7.4 – Home page in the browser
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4 – 浏览器中的主页
- en: 'If we navigate to `/about`, let’s assume the content of the `about` component
    from the auto-generated code is as shown in the following code block:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们导航到`/about`，假设自动生成的代码中`about`组件的内容如下所示：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The website should look like that shown in *Figure 7**.5*:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 网站应该看起来像*图7.5*中所示的那样：
- en: "![Figure 7.5 – The About page of the applic\uFEFFation in the browser](img/B18645_07_05.jpg)"
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图7.5 – 浏览器中的应用程序“关于”页面](img/B18645_07_05.jpg)'
- en: Figure 7.5 – The About page of the application in the browser
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5 – 浏览器中的应用程序“关于”页面
- en: In this section, we looked at how we can lazy-load components to speed up large
    and complex SPAs. We also looked at some options for setting up your router systems,
    such as `routes`, `history`, and `base`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了如何通过懒加载组件来加速大型和复杂的SPAs。我们还探讨了设置路由系统的一些选项，例如`routes`、`history`和`base`。
- en: 'You also saw the Vue engine renders both pages, `/about` and `/home`, with
    the same header content, as shown in *Figure 7**.6*:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你还看到了Vue引擎渲染了两个页面，`/about`和`/home`，它们具有相同的标题内容，如*图7.6*所示：
- en: "![Figure 7.6 – The Home page with the same header displayed in the About \uFEFF\
    page in Figure 7.5](img/B18645_07_06.jpg)"
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图7.6 – 在图7.5的“关于”页面中显示相同标题的主页](img/B18645_07_06.jpg)'
- en: Figure 7.6 – The Home page with the same header displayed in the About page
    in Figure 7.5
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6 – 在图7.5的“关于”页面中显示相同标题的主页
- en: The reason is that Vue only replaces the placeholder component, `RouterView`,
    with the target view’s content, and whatever template is defined outside this
    scope will remain. In this way, we can create a default layout for all our views
    in the app.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 原因是 Vue 只替换了占位组件 `RouterView`，用目标视图的内容替换，而在此作用域之外定义的任何模板都将保持不变。这样，我们可以在应用的所有视图中创建一个默认布局。
- en: Setting up a default layout for your app
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为你的应用设置默认布局
- en: For our template to be functional, it should also contain the `<RouterView/>`
    element. One standard setup is to have a navigation menu, `<nav>`, within the
    template and `RouterView` underneath. That way, the content changes between pages
    while the `header` menu stays the same.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的模板功能正常，它还应该包含 `<RouterView/>` 元素。一个标准的设置是在模板中有一个导航菜单 `<nav>`，并在其下方放置 `RouterView`。这样，页面之间的内容会变化，而
    `header` 菜单保持不变。
- en: 'Navigate to `App.vue` and ensure that your template has the following code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到 `App.vue` 并确保你的模板有如下代码：
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Your output should now contain a static header with two navigation links –
    **Home** and **About** – while the content changes depending on the route:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你的输出现在应该包含一个静态的标题，其中包含两个导航链接 – **首页** 和 **关于** – 而内容会根据路由变化：
- en: '![Figure 7.7 – The Home page’s content](img/B18645_07_07.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.7 – 首页的内容](img/B18645_07_07.jpg)'
- en: Figure 7.7 – The Home page’s content
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – 首页的内容
- en: 'Once you navigate to the `/about` page, the header links will not change, while
    the content now become the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你导航到 `/about` 页面，标题链接不会改变，而内容现在变为以下内容：
- en: '![Figure 7.8 – The About page’s content](img/B18645_07_08.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.8 – 关于页面的内容](img/B18645_07_08.jpg)'
- en: Figure 7.8 – The About page’s content
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – 关于页面的内容
- en: By this point, you have learned how to create a default layout and render the
    target content view using `RouterView` dynamically. In the next section, we will
    learn how to implement and add a **Message Feed** page with the help of Vue Router.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经学会了如何创建默认布局，并使用 `RouterView` 动态渲染目标内容视图。在下一节中，我们将学习如何在 Vue Router 的帮助下实现和添加一个
    **消息推送** 页面。
- en: Exercise 7.01 – implementing a Message Feed page using Vue Router
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 7.01 – 使用 Vue Router 实现消息推送页面
- en: In this exercise, you will use `RouterView` to render a new view component that
    displays a message feed.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将使用 `RouterView` 渲染一个新的视图组件，该组件显示消息推送。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.01).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.01)。
- en: 'We are going to create a new page that displays a list of messages to the user.
    Users will be able to visit this page whenever they enter the `localhost:3000/messages`
    path in the browser. Perform the following steps:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新页面，向用户显示消息列表。用户可以在浏览器中输入 `localhost:3000/messages` 路径时访问此页面。执行以下步骤：
- en: 'Use the application generated by `npm init vue@3` as a starting point, or within
    the root folder of the code repository, navigate into the `Chapter07/Exercise7.01`
    folder by using the following commands in order:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用由 `npm init vue@3` 生成的应用程序作为起点，或者在你代码仓库的根目录中，使用以下命令按顺序导航到 `Chapter07/Exercise7.01`
    文件夹：
- en: '[PRE20]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 中打开练习项目（在项目目录中使用 `code .` 命令）或你的首选 IDE。
- en: 'Let’s create a new view component called `MessageFeed` by adding a `MessageFeed.vue`
    file to the `./``src/views/` folder:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个新的视图组件 `MessageFeed`，通过在 `./src/views/` 文件夹中添加一个 `MessageFeed.vue` 文件来实现：
- en: '![Figure 7.9 – The views directory hierarchy](img/B18645_07_09.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.9 – 视图目录层次结构](img/B18645_07_09.jpg)'
- en: Figure 7.9 – The views directory hierarchy
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9 – 视图目录层次结构
- en: 'This component will render a list of messages. We define `messages` – an array
    of strings – as our local data using `<script setup>` as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件将渲染一个消息列表。我们使用 `<script setup>` 定义 `messages` – 一个字符串数组 – 作为我们的本地数据，如下所示：
- en: '[PRE22]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a router file at `src/router/index.js` if it doesn’t exist. Make sure
    you import `createRoute` and `createWebHistory` from `''vue-router''` and the
    `HomeView` component, as shown in the following code:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不存在，在 `src/router/index.js` 创建一个路由文件。确保你从 `'vue-router'` 导入 `createRoute`
    和 `createWebHistory`，以及 `HomeView` 组件，如下面的代码所示：
- en: '[PRE23]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We declare a route designated to `MessageFeed`, named `messageFeed` with its
    path set to `/messages`. We will also lazy-load the component. This step will
    be completed by appending an object with the required information to the `routes`
    array:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们声明了一个指向 `MessageFeed` 的路由，命名为 `messageFeed`，其路径设置为 `/messages`。我们还将懒加载该组件。此步骤将通过将包含所需信息的对象附加到
    `routes` 数组来完成：
- en: '[PRE25]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Finally, within the same file, create a `router` instance using the `routes`
    array we defined and with the `createRouter` and `createWebHistory` functions
    we imported:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在同一文件中，使用我们导入的 `createRouter` 和 `createWebHistory` 函数以及我们定义的 `routes` 数组创建一个
    `router` 实例：
- en: '[PRE43]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Make sure that in `src/main.js`. we import the created `router` instance and
    attach it to the `app` instance as a plugin by using `app.use(router)`:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在 `src/main.js` 中导入创建的 `router` 实例，并通过使用 `app.use(router)` 将其作为插件附加到 `app`
    实例上：
- en: '[PRE48]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In `App.vue`, make sure `<template>` only contains the following code:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `App.vue` 中，确保 `<template>` 只包含以下代码：
- en: '[PRE52]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Run the application using the following command:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE55]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Upon visiting `localhost:3000/messages` in the browser (or any local server
    Vite has created), the page should appear with the correct content – the **Message
    Feed** page as shown in the following screenshot:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中访问 `localhost:3000/messages`（或 Vite 创建的任何本地服务器），页面应该显示正确的内容 – 如以下截图所示的
    **消息源** 页面：
- en: '![Figure 7.10 – The Message Feed Page](img/B18645_07_10.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.10 – 消息源页面](img/B18645_07_10.jpg)'
- en: Figure 7.10 – The Message Feed Page
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – 消息源页面
- en: This exercise demonstrates how simple it is to add a new page route to a Vue.js
    application using Vue Router, while keeping your code organized and easy to read.
    Now that we have our routes ready to use, we can allow users to navigate between
    pages without typing the full path.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习展示了使用 Vue Router 向 Vue.js 应用程序添加新页面路由是多么简单，同时保持代码组织良好且易于阅读。现在我们已经准备好了可用的路由，我们可以允许用户在页面之间导航，而无需输入完整的路径。
- en: Setting up navigation links with RouterLink
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 RouterLink 设置导航链接
- en: As we know, `RouterView` oversees rendering the correct active view content
    relative to the URL path; `RouterLink`, on the other hand, oversees mapping the
    routes to navigable links. `RouterLink` is a Vue component that helps users navigate
    within an app with routing enabled. `RouterLink` by default renders an anchor
    tag, `<a>`, with a valid `href` link generated by its `to` prop.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，`RouterView` 负责根据 URL 路径渲染正确的活动视图内容；另一方面，`RouterLink` 负责将路由映射到可导航的链接。`RouterLink`
    是一个 Vue 组件，它帮助用户在启用了路由的应用程序内进行导航。默认情况下，`RouterLink` 会渲染一个带有由其 `to` 属性生成的有效 `href`
    链接的锚标签 `<a>`。
- en: 'In our example app generated by Vite, since there are two routes pre-populated,
    there are also two `RouterLink` instances added to the `<template>` section of
    `App.vue` as the header navigation menu:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们由 Vite 生成的示例应用中，由于有两个预填充的路由，因此也在 `App.vue` 的 `<template>` 部分添加了两个 `RouterLink`
    实例，作为页眉导航菜单：
- en: '[PRE56]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Since we are using the web history mode with `createWebHistory()`, the `to`
    prop of each `RouterLink` should receive an identical value with the `path` property
    declared in the targeted route object (as in the list of routes defined in `src/router/index.js`).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用的是 `createWebHistory()` 的 web 历史模式，每个 `RouterLink` 的 `to` 属性应该接收与目标路由对象中声明的
    `path` 属性相同的值（如 `src/router/index.js` 中定义的路由列表）。
- en: 'Since we name our routes, an alternative way of using the `to` prop is to bind
    it with an object containing the route name instead of the path. Using the name
    is highly recommended to avoid complex link refactoring when we need to adjust
    the paths given to certain routes in our app. Hence, we can rewrite our links
    as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们命名了路由，使用 `to` 属性的另一种方法是将其绑定到一个包含路由名称的对象上，而不是路径。使用名称被高度推荐，以避免在需要调整应用中某些路由的路径时进行复杂的链接重构。因此，我们可以将链接重写如下：
- en: '[PRE57]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Also, Vue Router adds an extra CSS class, `router-link-active`, to the `<a>`
    tag when the route in question is active. We can customize this class selector
    through the `active-class` prop of the `RouterLink` component.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Vue Router 会在活动路由的 `<a>` 标签上添加一个额外的 CSS 类，`router-link-active`。我们可以通过 `RouterLink`
    组件的 `active-class` 属性来自定义这个类选择器。
- en: 'In the `RouterLink` component rendered as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下渲染的 `RouterLink` 组件中：
- en: '![Figure 7.11 – RouterLink in the browser’s Element tab](img/B18645_07_11.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.11 – 浏览器元素标签中的 RouterLink](img/B18645_07_11.jpg)'
- en: Figure 7.11 – RouterLink in the browser’s Element tab
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.11 – 浏览器元素标签中的 RouterLink
- en: 'The view in the browser will be as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器中的视图将如下所示：
- en: '![Figure 7.12 – The Home page with navigation links](img/B18645_07_12.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.12 – 带有导航链接的首页](img/B18645_07_12.jpg)'
- en: Figure 7.12 – The Home page with navigation links
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12 – 带有导航链接的首页
- en: 'Note that since we have access to `this.$router` within a component, we can
    trigger a navigation route programmatically by using `this.$router.push()` and
    pass a path or a router object in a similar way to using `to`:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，由于我们可以在组件内部访问 `this.$router`，我们可以通过使用 `this.$router.push()` 并传递一个路径或路由对象来编程触发导航路由，类似于使用
    `to`：
- en: '[PRE58]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Or within the <script setup>, we can perform the following alternative code:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在 `<script setup>` 中，我们可以执行以下替代代码：
- en: '[PRE59]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: In this section, we looked at how you can use the `<RouterLink/>` element to
    navigate between our views as with traditional HTML `<``a>` tags.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了如何使用 `<RouterLink/>` 元素在视图之间导航，就像使用传统的 HTML `<a>` 标签一样。
- en: Next, we will see how you can programmatically send a user to their last viewed
    route in a manner similar to the web browser’s **Back** button.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到如何以类似网页浏览器“后退”按钮的方式，通过编程将用户发送到他们最后查看的路由。
- en: Tip for implementing the Back button
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现后退按钮的技巧
- en: Sometimes, we want to navigate back to the previous page. Using `this.$router.push()`
    can achieve this, but it adds more routes in the history stack instead of going
    back. The correct technique is to use `this.$router.go(steps)`, in which `steps`
    is an integer that indicates the number of steps to go back or forward in the
    history stack. This functionality works similarly to `window.history.go(steps)`.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们希望导航回上一页。使用 `this.$router.push()` 可以实现这一点，但它会在历史记录栈中添加更多路由，而不是返回。正确的技术是使用
    `this.$router.go(steps)`，其中 `steps` 是一个整数，表示在历史记录栈中返回或前进的步数。此功能与 `window.history.go(steps)`
    类似。
- en: 'Consider the following example:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE60]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Besides this, you can also navigate forward to a page that was loaded before
    and still exists in the history stack by using the same method as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以使用相同的方法导航到之前加载且仍然存在于历史记录栈中的页面：
- en: '[PRE61]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Alternatively, we can rewrite the above code using useRouter() and <script
    setup>, as follows:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用 `useRouter()` 和 `<script setup>` 重新编写上述代码，如下所示：
- en: '[PRE62]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Next, we’ll make use of navigation links to add our new message feed page to
    our application’s `nav` menu.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将利用导航链接将我们的新消息源页面添加到应用程序的 `nav` 菜单中。
- en: Exercise 7.02 – adding the navigation link to the MessageFeed route
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 7.02 – 将导航链接添加到 MessageFeed 路由
- en: We will add a quick link to the `MessageFeed` route we created in *Exercise
    7.01*, using the `to` prop and `RouterLink` as explained in the preceding topic.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在练习 7.01 中创建的 `MessageFeed` 路由中添加一个快速链接，使用 `to` 属性和 `RouterLink`，如前文所述。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.02).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.02)。
- en: 'Let’s go through the following steps:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按以下步骤进行：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter07/Exercise7.02`
    folder by using the following commands in order:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以使用 `npm init vue@3` 生成的应用程序为起点，或在代码仓库的根目录下，使用以下命令进入 `Chapter07/Exercise7.02`
    文件夹：
- en: '[PRE63]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 中打开练习项目（在项目目录中使用 `code .` 命令）或您的首选 IDE。
- en: Follow the instructions in *Exercise 7.01* to create the `MessageFeed` component,
    register it to `/messages` path, and make sure your router is enabled in the application.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照练习 7.01 的说明创建 `MessageFeed` 组件，将其注册到 `/messages` 路径，并确保您的路由已在应用程序中启用。
- en: 'In the `./src/App.vue` file, besides the auto-generated `RouterLink` components
    for `home` and `about`, add another `RouterLink` component that points to `/messages`:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `./src/App.vue` 文件中，除了为 `home` 和 `about` 自动生成的 `RouterLink` 组件外，再添加一个指向 `/messages`
    的 `RouterLink` 组件：
- en: '[PRE65]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Run the application using the following command:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE76]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'We will see the navigation links available in any view – they will not disappear
    when users navigate away since they are not a part of the `RouterView` component.
    Our screen should look as follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到在任何视图中都可用导航链接 – 当用户导航离开时，它们不会消失，因为它们不是 `RouterView` 组件的一部分。我们的屏幕应该如下所示：
- en: '![Figure 7.13 – The Home page with updated navigation links](img/B18645_07_13.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.13 – 带有更新导航链接的首页](img/B18645_07_13.jpg)'
- en: Figure 7.13 – The Home page with updated navigation links
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13 – 带有更新导航链接的首页
- en: 'Within `App.vue`, let’s change the `to` value to point to the object named
    `messageFeed`. This is the `name` value given to this route defined in `./src/router/index.js`:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `App.vue` 中，让我们将 `to` 的值更改为指向名为 `messageFeed` 的对象。这是在 `./src/router/index.js`
    中定义的此路由的 `name` 值：
- en: '[PRE77]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The navigation should work as before; clicking on the `/messages`, as shown
    in the following screenshot:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航应该像以前一样工作；点击以下截图中的 `/messages`：
- en: '![Figure 7.14 – Active page changes to Message Feed after clicking on the Message
    Feed link](img/B18645_07_14.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.14 – 点击消息源链接后活动页面变为消息源页面](img/B18645_07_14.jpg)'
- en: Figure 7.14 – Active page changes to Message Feed after clicking on the Message
    Feed link
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.14 – 点击消息源链接后活动页面变为消息源页面
- en: 'Now, open the `index.js` file located in the `./src/router/` folder and change
    the path defined for the `messageFeed` route from `/messages/` to `/messagesFeed`:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开位于 `./src/router/` 文件夹中的 `index.js` 文件，并将 `messageFeed` 路由定义的路径从 `/messages/`
    更改为 `/messagesFeed`：
- en: '[PRE79]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Navigate to the app’s `Home` page and click on `/messagesFeed`:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到应用的 `Home` 页面并点击 `/messagesFeed`：
- en: "![Figure 7.1\uFEFF5 – The Message Feed page with a new URL path](img/B18645_07_15.jpg)"
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.15 – 带有新 URL 路径的消息源页面](img/B18645_07_15.jpg)'
- en: Figure 7.15 – The Message Feed page with a new URL path
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15 – 带有新 URL 路径的消息源页面
- en: Note how straightforward it is to set up the link to the `/messages` path with
    just one line of code and update the related path accordingly.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 注意设置到 `/messages` 路径的链接是多么简单，只需一行代码，并相应地更新相关路径。
- en: So far, we have defined some simple routes without additional parameters for
    the targeted route – this will be our next challenge.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已定义了一些简单的路由，针对目标路由没有额外的参数 – 这将是我们的下一个挑战。
- en: Passing route parameters
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传递路由参数
- en: Previously we learnt each route was a standalone view and did not need to pass
    or connect any data to the other routes. But Vue Router doesn’t limit the power
    of routing to only this. With named routes, we can also easily enable data communication
    between routes.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 以前我们了解到每个路由都是一个独立的视图，不需要传递或连接到其他路由的数据。但 Vue Router 并没有将路由的强大功能仅限于这一点。通过命名路由，我们还可以轻松地启用路由之间的数据通信。
- en: 'In our example app, we want our `about` page to be able to receive a data string
    called `user` as the user’s name from the link triggered. Prior to Vue Router
    4.1.4, we can achieve this feature by changing the `to` prop from a string literal
    to an object literal with a `name` and `params` properties, as shown below:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例应用中，我们希望 `about` 页面能够接收一个名为 `user` 的数据字符串，作为用户名从触发的链接中获取。在 Vue Router
    4.1.4 之前，我们可以通过将 `to` 属性从字符串字面量更改为具有 `name` 和 `params` 属性的对象字面量来实现此功能，如下所示：
- en: '[PRE97]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'This change informs the router to pass the desired parameters to the `About`
    page when users click on the targeted link. These additional parameters are not
    visible on the rendered `href` link, as shown in the following screenshot:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改通知路由器在用户点击目标链接时将所需的参数传递给 `About` 页面。这些附加参数在渲染的 `href` 链接中不可见，如下所示：
- en: '![Figure 7.16 - Generated href link is without parameters](img/B18645_07_16.jpg)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.16 - 生成的 href 链接没有参数](img/B18645_07_16.jpg)'
- en: Figure 7.16 - Generated href link is without parameters
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16 - 生成的 href 链接没有参数
- en: 'The output will be as follows:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: "![Figure 7.17 – The About pag\uFEFF\uFEFF\uFEFFe renders the user passed through\
    \ route params](img/B18645_07_17.jpg)"
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.17 – 关于页面渲染通过路由参数传递的用户](img/B18645_07_17.jpg)'
- en: Figure 7.17 – The About page renders the user passed through route params
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.17 – 关于页面渲染通过路由参数传递的用户
- en: However, there is one significant downside to this approach.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法的显著缺点是。
- en: 'Let’s refresh the page while you are still on the `./about` path. The output
    will be an page without user’s name, as seen below:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 当你仍然在 `./about` 路径上时，让我们刷新页面。输出将是一个没有用户名的页面，如下所示：
- en: '![Figure 7.18 – About page on refresh loses user’s details](img/B18645_07_18.jpg)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.18 – 刷新后关于页面丢失用户详情](img/B18645_07_18.jpg)'
- en: Figure 7.18 – About page on refresh loses user’s details
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.18 – 刷新后关于页面丢失用户详情
- en: Upon refresh, the Vue engine triggers route without any `user` passed to the
    route’s `params` field, unlike when the user clicked on a specific predefined
    link. And parameters passed using this approach was not saved or cached. We consider
    this an anti-pattern for Vue practice.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新时，Vue引擎触发路由而不向路由的`params`字段传递任何`user`，这与用户点击特定预定义链接时不同。使用这种方法传递的参数没有被保存或缓存。我们认为这是一种Vue实践的反模式。
- en: Starting from Vue Router 4.1.4, passing params directly on the `to` object is
    deprecated. for passing params to a route, we should use alternative approach
    such as using Pinia as the global’s data store, or to use the query params of
    the URL.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 从Vue Router 4.1.4版本开始，直接在`to`对象上传递参数已被弃用。为了将参数传递到路由，我们应该使用替代方法，例如使用Pinia作为全局数据存储，或者使用URL的查询参数。
- en: 'Query params for a URL route starts after the question mask - `?`, as seen
    in the syntax below:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: URL路由的查询参数从问号`-`开始，如下面的语法所示：
- en: '[PRE98]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'In the above syntax, each parameter field is separated by `&` symbol. For example,
    to pass the user parameter to our `/about` page, we will construct our URL as
    follows:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述语法中，每个参数字段由`&`符号分隔。例如，要将用户参数传递到我们的`/about`页面，我们将构造以下URL：
- en: '[PRE99]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: And in the `About` component, we will retrieve the `query` field from the `route`
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在`About`组件中，我们将从`route`中检索`query`字段
- en: 'object, and get the relevant field’s value, as shown in the following code:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 对象，并获取相关字段的值，如下面的代码所示：
- en: '[PRE100]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: In the `template` section, we can replace `$route.params.user` to `user`, and
    the output stays the same, even on refreshing the page.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在`template`部分，我们可以将`$route.params.user`替换为`user`，输出保持不变，即使在刷新页面时也是如此。
- en: '[PRE101]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: In the following section, we will learn how to intercept the navigation flow
    and dynamically assigning `params` between routes with **Router Hooks**.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下部分，我们将学习如何使用**路由钩子**拦截导航流程并在路由之间动态分配`params`。
- en: Understanding Router Hooks
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解路由钩子
- en: 'To understand Vue Router Hooks, first, we need to understand the general flow
    of route navigation as described in the following diagram:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解Vue Router钩子，首先，我们需要了解以下图中描述的路由导航的一般流程：
- en: '![Figure 7.19 – Navigation resolution flow diagram](img/B18645_07_19.jpg)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![图7.19 – 导航解析流程图](img/B18645_07_19.jpg)'
- en: Figure 7.19 – Navigation resolution flow diagram
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.19 – 导航解析流程图
- en: Once navigation is triggered for a certain route, Vue Router provides several
    primary navigation guards, or Hooks, for developers to guard or intercept that
    navigation process. These guards can be hooked either globally or in the component,
    depending on the type.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦触发某个路由的导航，Vue Router为开发者提供了几个主要的导航守卫或钩子，以保护或拦截该导航过程。这些守卫可以是全局的或组件内的，具体取决于类型。
- en: 'Some examples are as follows:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例：
- en: '`beforeEach`, `beforeResolve`, and `afterEach`'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beforeEach`、`beforeResolve`和`afterEach`'
- en: '`beforeEnter`'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beforeEnter`'
- en: '`beforeRouteUpdate`, `beforeRouteEnter`, and `beforeRouteLeave`'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beforeRouteUpdate`、`beforeRouteEnter`和`beforeRouteLeave`'
- en: For Composition API, those in-component Hooks are available as `onBeforeRouteUpdate`,
    and `onBeforeRouteLeave`. There is no `onBeforeRouteEnter` since this is equivalent
    to using the `setup()` (or `script` `setup`) itself.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 对于组合式API，组件内的钩子可用作`onBeforeRouteUpdate`和`onBeforeRouteLeave`。没有`onBeforeRouteEnter`，因为这相当于使用`setup()`（或`script
    setup`）本身。
- en: As seen in *Figure 7**.19*, the Vue engine considers navigation only after all
    the Hooks or guards have been resolved, including any asynchronous guard.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 如**图7.19**所示，Vue引擎仅在所有钩子或守卫都已解决之后才考虑导航，包括任何异步守卫。
- en: Now, let’s see how to set up `beforeEach` Hooks.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何设置`beforeEach`钩子。
- en: Setting up beforeEach Hooks
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置`beforeEach`钩子
- en: '`beforeEach` is a global Hook and is called at the very beginning of navigation,
    *before* the other global and in-component Hooks are triggered (except for `beforeRouteLeave`
    in the previous view component). It should be defined as a global method of the
    `router` instance during initialization in the `index.js` file and takes the following
    syntax:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`beforeEach`是一个全局钩子，在导航开始时被调用，即在触发其他全局和组件内钩子之前（除了前一个视图组件中的`beforeRouteLeave`）。它应该在`index.js`文件中的初始化期间定义为`router`实例的全局方法，并采用以下语法：'
- en: '[PRE102]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'In the preceding snippet, `beforeEachCallback` is a `hook` function that receives
    three arguments:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`beforeEachCallback`是一个接收三个参数的`hook`函数：
- en: '[PRE103]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'We could write this directly as follows:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接这样写：
- en: '[PRE104]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'For example, if we want to display a different page to display a generic message
    whenever a user navigates to `About` without a value for the `user` passed to
    query params, we can hook `beforeEach` as follows:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想在用户导航到`About`而没有传递查询参数的`user`值时显示不同的页面来显示通用消息，我们可以将`beforeEach`钩子配置如下：
- en: '[PRE105]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Here, we check whether the destination route is `about`, and if it doesn’t pass
    any additional parameters nor any value for the `user` parameter, we will navigate
    to an `error` route instead. Otherwise, we will just proceed as normal with `next()`.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们检查目标路由是否为`about`，如果没有传递任何额外的参数，也没有为`user`参数传递任何值，我们将导航到`error`路由。否则，我们将像往常一样使用`next()`正常进行。
- en: Note
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`next()` is required to be called *exactly once in any given non-overlapped
    flow logic* (once for `if` and once for `else`); otherwise, there will be errors.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何给定的非重叠流程逻辑中，`next()`必须恰好调用一次（一次用于`if`，一次用于`else`）；否则，将出现错误。
- en: 'We still need to create an `error` page with an `Error.vue` view component
    that displays a simple message:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要创建一个包含`Error.vue`视图组件的`error`页面，该组件显示一条简单的消息：
- en: '[PRE106]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Also, make sure to register the path accordingly:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请确保相应地注册路径：
- en: '[PRE107]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Now, in the default view, after clicking on the **About** link, the app will
    render the **Error** page instead of the **About** page, as seen in the following
    screenshot:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在默认视图中，点击**关于**链接后，应用将渲染**错误**页面而不是**关于**页面，如下面的截图所示：
- en: '![Figure 7.20 – The Error page displayed when About is clicked without param
    being passed](img/B18645_07_20.jpg)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![图7.20 – 点击关于时未传递参数显示的错误页面](img/B18645_07_20.jpg)'
- en: Figure 7.20 – The Error page displayed when About is clicked without param being
    passed
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.20 – 点击关于时未传递参数显示的错误页面
- en: Now, let’s go to the `App.vue` file and assign the `to` prop to the path `"/about?user=Adam":`
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转到`App.vue`文件，并将`to`属性分配给路径`"/about?user=Adam"`：
- en: '[PRE108]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'And in the About.vue file, we use the following template code:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在`About.vue`文件中，我们使用以下模板代码：
- en: '[PRE109]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Let’s navigate back to our app’s `user` passed, the output will be as follows:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导航回我们应用中传递的`user`，输出将如下所示：
- en: '![Figure 7.21 – The About page displayed when there is a user passed in query
    params](img/B18645_07_21.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![图7.21 – 当查询参数中传递了用户时显示的关于页面](img/B18645_07_21.jpg)'
- en: Figure 7.21 – The About page displayed when there is a user passed in query
    params
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.21 – 当查询参数中传递了用户时显示的关于页面
- en: We shall now look at a few key points that differentiate the `beforeEach` and
    `beforeResolve` Hooks.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将探讨一些区分`beforeEach`和`beforeResolve`钩子的关键点。
- en: Distinguishing between the beforeEach and beforeResolve Hooks
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区分beforeEach和beforeResolve钩子
- en: 'We can also register a global Hook with `beforeResolve` with the same syntax.
    Unlike `beforeEach`, which is triggered when navigation is set up, `beforeResolve`
    will be triggered just before the navigation is carried out and confirmed *after
    all the Hooks (both global and in-component)* *are resolved*:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用相同的语法注册一个全局钩子`beforeResolve`。与在设置导航时触发的`beforeEach`不同，`beforeResolve`将在执行和确认导航之前触发，并且在所有钩子（全局和组件内）都解析之后：
- en: '[PRE110]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: The output results will remain the same as in *Figure 7**.20* and *Figure 7**.21*.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果将与*图7.20*和*图7.21*中的相同。
- en: Let’s now look at the `afterEach` Hook in detail.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在详细看看`afterEach`钩子。
- en: The afterEach Hook
  id: totrans-361
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: afterEach钩子
- en: The `afterEach()` Hook is the last global navigation guard to be triggered after
    the navigation is confirmed (which means after `beforeResolve()`). Unlike the
    other global guards, the `hook` function to pass to `afterEach()` does not receive
    a `next` function – hence, it won’t affect the navigation.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`afterEach()`钩子是在导航确认后（这意味着在`beforeResolve()`之后）触发的最后一个全局导航守卫。与其他全局守卫不同，传递给`afterEach()`的`hook`函数不会接收一个`next`函数——因此，它不会影响导航。'
- en: In addition, the `to` and `from` parameters are read-only `Route` objects. Hence,
    the best use case for `afterEach` is to save data such as the last visited `Route`
    object for a `route` destination, or page view tracking.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`to`和`from`参数是只读的`Route`对象。因此，`afterEach`的最佳用途是保存数据，例如为`route`目标保存最后访问的`Route`对象或页面视图跟踪。
- en: 'For example, we can have a default value of `user`, assign it, and save it
    whenever needed:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以为`user`设置一个默认值，并在需要时分配和保存它：
- en: '[PRE111]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Now, in the `App.vue` file, let’s change the value of `user` to `Alex`:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`App.vue`文件中，让我们将`user`的值改为`Alex`：
- en: '[PRE112]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'The output when clicking on the **About** link now is as follows:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**关于**链接后的输出现在如下所示：
- en: '![Figure 7.22 – The About page displaying the new user’s name (Alex)](img/B18645_07_22.jpg)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.22 – 显示新用户名称（Alex）的“关于”页面](img/B18645_07_22.jpg)'
- en: Figure 7.22 – The About page displaying the new user’s name (Alex)
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.22 – 显示新用户名称（Alex）的“关于”页面](img/B18645_07_22.jpg)'
- en: 'However, on navigating to `"/about"` only, the **About** page renders with
    the default user – **Adam** – instead, as follows:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在导航到 `"/about"` 时，**关于** 页面现在渲染的是默认用户 – **Adam**，如下所示：
- en: '![Figure 7.23 – The About page displaying the default user value on reloading
    (Adam)](img/B18645_07_23.jpg)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.23 – 显示重新加载时默认用户值（Adam）的“关于”页面](img/B18645_07_23.jpg)'
- en: Figure 7.23 – The About page displaying the default user value on reloading
    (Adam)
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.23 – 显示重新加载时默认用户值（Adam）的“关于”页面](img/B18645_07_23.jpg)'
- en: In this section, we looked at the `afterEach` Hook. We used the `afterEach`
    Hook to pass data through to the `Back` button.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了 `afterEach` 钩子。我们使用 `afterEach` 钩子将数据传递到 `Back` 按钮。
- en: Personalizing Hooks per route
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按路由个性化钩子
- en: 'Instead of defining a global Hook, which can cause unseen bugs and requires
    a route check, we can define a `beforeEnter` guard directly in the targeted route’s
    configuration object – for example, our `about` route:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是定义一个全局钩子，这可能会引起未知的错误并需要路由检查，我们可以在目标路由的配置对象中直接定义一个 `beforeEnter` 守卫 – 例如，我们的
    `about` 路由：
- en: '[PRE113]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: With this approach, whether reloading the page or clicking on the link to navigate
    to the **About** page, the output is now consistent, but the URL doesn’t show
    the default params (*Figure 7**.24*)
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 采用这种方法，无论是重新加载页面还是点击链接导航到 **关于** 页面，输出现在是一致的，但 URL 不显示默认参数（*图 7**.24*）
- en: '![Figure 7.24 – The About page displaying the default user (Adam) without URL
    updated](img/B18645_07_24.jpg)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.24 – 显示未更新 URL 的默认用户（Adam）的“关于”页面](img/B18645_07_24.jpg)'
- en: Figure 7.24 – The About page displaying the default user (Adam) without URL
    updated
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.24 – 显示未更新 URL 的默认用户（Adam）的“关于”页面
- en: Note
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: With `beforeEnter()`, `to` is writeable and you will have access to `this` (which
    points to the specific route – `About`). It will only be triggered when users
    trigger navigation to the `About` page.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `beforeEnter()`，`to` 是可写的，你将能够访问 `this`（它指向特定的路由 – `About`）。它只会在用户触发导航到 `About`
    页面时被触发。
- en: In this section, we looked at the different Router Hooks available in Vue, including
    `beforeEach`, `beforeResolve`, and `afterEach`. We saw how each of these Hooks
    is called at a different point in the routing process. As a practical example,
    we looked at a route that, if not provided a parameter, instead directs the user
    to an **Error** page. These Hooks can be very useful, especially when setting
    up an authenticated route.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了 Vue 中可用的不同 Router 钩子，包括 `beforeEach`、`beforeResolve` 和 `afterEach`。我们看到了每个钩子在路由过程中的不同点被调用。作为一个实际例子，我们查看了一个路由，如果没有提供参数，则将用户重定向到
    **错误** 页面。这些钩子非常有用，尤其是在设置认证路由时。
- en: In the next section, we’ll look at setting up in-component Hooks.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨设置组件内钩子。
- en: Setting up in-component Hooks
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置组件内钩子
- en: Finally, we can also use in-component Hooks as component lifecycle Hooks when
    we want to scope those Hooks at the component level for better code maintenance
    or enhance the workflow when the same component needs to behave differently in
    a certain use case.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还可以在需要将钩子作用域限定在组件级别以更好地维护代码或增强工作流程时，将组件内钩子用作组件生命周期钩子。
- en: 'We can have the `about` component now with the `beforeRouteEnter()` Hook defined
    as follows:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以为 `about` 组件定义 `beforeRouteEnter()` 钩子如下：
- en: '[PRE114]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: As you can see, we don’t have access to the `this` scope of the component during
    `beforeRouteEnter` because the view component is still being created. Luckily,
    we can access the instance through a callback passed to `next()`. Whenever the
    navigation is confirmed, which means the component is created, the callback will
    be triggered, and the component instance will be available as the sole argument
    (`comp`) of the callback.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，在 `beforeRouteEnter` 期间我们没有访问组件的 `this` 作用域，因为视图组件仍在创建中。幸运的是，我们可以通过传递给
    `next()` 的回调函数来访问实例。每当导航被确认，即组件被创建时，回调函数将被触发，组件实例将作为回调函数的唯一参数（`comp`）可用。
- en: 'Alternatively, we can rewrite the above code using Composition API and the
    hook `useRoute` imported from `''vue-router''` package, as follows:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用 Composition API 和从 `'vue-router'` 包导入的钩子 `useRoute` 重新编写上述代码，如下所示：
- en: '[PRE115]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Note
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For `beforeRouteUpdate` and `beforeRouteLeave`, the component has been created
    – hence, this instance is available and there is no need for a callback for `next()`.
    In fact, a callback function is only supported in `next()` within the use of `beforeRouteEnter()`.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`beforeRouteUpdate`和`beforeRouteLeave`，组件已经被创建——因此，这个实例是可用的，不需要为`next()`设置回调。实际上，回调函数仅在`beforeRouteEnter()`的使用中支持`next()`。
- en: '`beforeRouteUpdate` (or `onBeforeRouteUpdate`) is called when the same component
    is reused for a different route. This applies when we use dynamic routing, which
    will be discussed in the next section.'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 当相同的组件用于不同的路由时，会调用`beforeRouteUpdate`（或`onBeforeRouteUpdate`）。这适用于我们使用动态路由的情况，将在下一节中讨论。
- en: '`beforeRouteLeave` (or `onBeforeRouteLeave`) is triggered when the component
    is deactivated or before the user navigates away from the current view. This is
    called right before the `beforeEach` guard of the new navigation and is usually
    used in editor components to prevent users from navigating away without saving.'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 当组件被停用或用户即将离开当前视图时，会触发`beforeRouteLeave`（或`onBeforeRouteLeave`）。这发生在新导航的`beforeEach`守卫之前，通常用于编辑组件以防止用户在不保存的情况下离开。
- en: In this guard, we can cancel the new navigation by passing `false` to the `next()`
    function.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个守卫中，我们可以通过向`next()`函数传递`false`来取消新的导航。
- en: 'For example, imagine that we add the following Hook to the component’s option
    in the `AboutView.vue` file:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们在`AboutView.vue`文件中的组件选项中添加以下钩子：
- en: '[PRE116]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'When we navigate away from the **About** page, a pop-up dialog will appear
    asking for confirmation, as shown in the following screenshot, and then continue
    navigating accordingly:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从**关于**页面导航离开时，会出现一个弹出对话框请求确认，如下面的截图所示，然后继续相应地导航：
- en: '![Figure 7.25 – Dialog asking to confirm before navigating away from the About
    page](img/B18645_07_25.jpg)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
  zh: '![图7.25 – 在离开关于页面前请求确认的对话框](img/B18645_07_25.jpg)'
- en: Figure 7.25 – Dialog asking to confirm before navigating away from the About
    page
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.25 – 在离开关于页面前请求确认的对话框
- en: In this section, we looked at setting up in-component Hooks – that is, Hooks
    that are scoped to specific components. We set up an in-component Hook for the
    `about` component that asks a user to confirm before leaving the page.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了设置组件内钩子——即作用域限定在特定组件内的钩子。我们为`about`组件设置了一个组件内钩子，该钩子在用户离开页面前会要求用户进行确认。
- en: We will now see how to decouple passed parameters into `props`.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将展示如何将传递的参数解耦到`props`中。
- en: Decoupling Params with Props
  id: totrans-404
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解耦参数与Props
- en: In the `index.js` file, let’s adjust the configuration of the `about` route
    with an additional property called `props`.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.js`文件中，让我们调整`about`路由的配置，添加一个名为`props`的额外属性。
- en: 'By setting this property’s value as a function which accepts a `route` and
    returns an object containing an `user` field of value based on `route.query.user`,
    the router will automatically understand and map any `route.query` parameters
    into the `props` of the view component accordingly:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将此属性的值设置为接受一个`route`并返回一个包含基于`route.query.user`的`user`字段的对象的函数，路由器将自动理解并将任何`route.query`参数相应地映射到视图组件的`props`中：
- en: '[PRE117]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'In the `AboutView.vue` file, we will define a prop type `user` as follows:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在`AboutView.vue`文件中，我们将定义一个名为`user`的prop类型，如下所示：
- en: '[PRE118]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'And in the `<template>` section, we will replace `$route.query.user` with `user`:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<template>`部分，我们将用`user`替换`$route.query.user`：
- en: '[PRE119]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'The output will still be the same, as shown in the following screenshot:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果仍然相同，如下面的截图所示：
- en: '![Figure 7.26 – The user is passed through route params and mapped to props](img/B18645_07_26.jpg)'
  id: totrans-413
  prefs: []
  type: TYPE_IMG
  zh: '![图7.26 – 用户通过路由参数传递并映射到props](img/B18645_07_26.jpg)'
- en: Figure 7.26 – The user is passed through route params and mapped to props
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.26 – 用户通过路由参数传递并映射到props
- en: 'Also, you can define a static data that you want to pass within the `props`
    property of the `route` configuration. Instead of a `Function` value, `props`
    can now be declared as an object with the required data, as in the following example:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以在`route`配置的`props`属性中定义要传递的静态数据。与`Function`值不同，现在`props`可以声明为一个包含所需数据的对象，如下面的示例所示：
- en: '[PRE120]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'With a similar step, we will declare `age` as a `props` component in `AboutView.vue`,
    and print it out to the screen as text:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 通过类似的步骤，我们将在`AboutView.vue`中将`age`声明为一个`props`组件，并将其作为文本打印到屏幕上：
- en: '[PRE121]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Now when the `About` page is clicked, the page will render as follows:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当点击`About`页面时，页面将按照以下方式渲染：
- en: '![Figure 7.27 – With the props preset in the router configuration](img/B18645_07_27.jpg)'
  id: totrans-420
  prefs: []
  type: TYPE_IMG
  zh: '![图7.27 – 在路由配置中预设了属性](img/B18645_07_27.jpg)'
- en: Figure 7.27 – With the props preset in the router configuration
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.27 – 在路由配置中预设了属性
- en: 'Exercise 7.03: Passing the content of the selected message to a new message
    page and having it printed out'
  id: totrans-422
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习7.03：将所选消息的内容传递到新消息页面并打印出来
- en: We shall continue from *Exercise 7.02*, *Adding the Navigation Link to the MessageFeed
    Route*, where we defined the `MessageFeed` route with a URL path to `messages`.
    This view will render a list of predefined messages in the `data` property of
    the `view` component’s options.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从*练习7.02*，*将导航链接添加到MessageFeed路由*继续，在那里我们定义了`MessageFeed`路由，其URL路径为`messages`。此视图将在视图组件选项的`data`属性中渲染预定义的消息列表。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.03).
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.03)。
- en: In this exercise, we will create a new `/message` page, designated to render
    the content of a message selected by the user. It should be reusable.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个新的`/message`页面，用于渲染用户选择的消息内容。它应该是可重用的。
- en: 'Do the following:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下操作：
- en: 'In the `./src/views/` folder, we create a new single-file component called
    `Message.vue`. This component receives a `content` prop of type `string` and renders
    it under a `<``p>` tag:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./src/views/`文件夹中，我们创建一个新的单文件组件`Message.vue`。该组件接收一个类型为`string`的`content`属性，并在`<p>`标签下渲染它：
- en: '[PRE122]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Let’s register a new route with the `Message` component to the existing `routes`
    in `./src/router/index.js`. We will define the new route as a `message` with the
    path to `/message`:'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`./src/router/index.js`中注册一个新的路由`Message`组件到现有的`routes`中。我们将新路由定义为`message`，路径为`/message`：
- en: '[PRE136]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: Since the route is registered and ready to be used, we need to make changes
    to the `<template>` section of `./src/views/MessageFeed.vue` to ensure each message
    line is now clickable and will redirect the user to the new route when clicked.
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于路由已注册并准备好使用，我们需要修改`./src/views/MessageFeed.vue`中的`<template>`部分，以确保每条消息现在都是可点击的，并且在点击时将用户重定向到新路由。
- en: Let’s replace the `<p>` tag with `router-click`. And because we have named our
    new route as `message`, we will set `to` of each `RouterLink` to bind to `/message`.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用`router-click`替换`<p>`标签。因为我们已经将新路由命名为`message`，所以我们将每个`RouterLink`的`to`属性设置为绑定到`/message`。
- en: '[PRE144]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'Under `template`, we’ll add a `<script setup>` tag containing some sample data
    for our `messages`:'
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`template`下，我们将添加一个包含我们`messages`的样本数据的`<script setup>`标签：
- en: '[PRE145]'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'Within the `message` route definition (`router/index.js`), we add `props: route
    => ({ content: route.query.content })` to map all `content` query passed to the
    route to the related prop.'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`message`路由定义（`router/index.js`）中，我们添加`props: route => ({ content: route.query.content
    })`以将传递给路由的所有`content`查询映射到相关的属性。'
- en: '[PRE153]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'When you open the `./messages` page, all the messages are now clickable as
    shown in the following screenshot:'
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您打开`./messages`页面时，所有消息现在都是可点击的，如下面的截图所示：
- en: '![Figure 7.28 – Each message now is a navigable link](img/B18645_07_28.jpg)'
  id: totrans-474
  prefs: []
  type: TYPE_IMG
  zh: '![图7.28 – 每条消息现在都是一个可导航的链接](img/B18645_07_28.jpg)'
- en: Figure 7.28 – Each message now is a navigable link
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.28 – 每条消息现在都是一个可导航的链接
- en: 'Now when the user clicks on a message, it will open a new page. However, the
    page content will be empty, as we have not passed any content parameter to the
    `<RouteLink>` component, as shown in the following screenshot:'
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在当用户点击一条消息时，它将打开一个新页面。然而，页面内容将是空的，因为我们没有向`<RouteLink>`组件传递任何内容参数，如下面的截图所示：
- en: '![Figure 7.29 – Empty message page](img/B18645_07_29.jpg)'
  id: totrans-477
  prefs: []
  type: TYPE_IMG
  zh: '![图7.29 – 空消息页面](img/B18645_07_29.jpg)'
- en: Figure 7.29 – Empty message page
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.29 – 空消息页面
- en: 'Let’s go back to `./src/views/MessageFeed.vue` and add `?content=${m}` to the
    route link of message, in which `m` is the `message` at index `i` in the `messages`
    list, in the `<``template>` section:'
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回到`./src/views/MessageFeed.vue`，并在消息的路由链接中添加`?content=${m}`，其中`m`是`messages`列表中索引为`i`的`message`，在`<template>`部分：
- en: '[PRE162]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'Now when you click on the first message, `Hello, how are you?`, the output
    will be the following:'
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在当您点击第一条消息`Hello, how are you?`时，输出将是以下内容：
- en: '![Figure 7.30 – Message page with the passed content](img/B18645_07_30.jpg)'
  id: totrans-490
  prefs: []
  type: TYPE_IMG
  zh: '![图7.30 – 包含传递内容的消息页面](img/B18645_07_30.jpg)'
- en: Figure 7.30 – Message page with the passed content
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.30 – 带有传递内容的消息页面
- en: 'Next, let’s extract the `messages` static data from `./src/views/MessageFeed.vue`
    and save it in `./src/assets/messages.js`:'
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们从`./src/views/MessageFeed.vue`中提取`messages`静态数据，并将其保存到`./src/assets/messages.js`中：
- en: '[PRE171]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'In `./src/views/MessageFeed.vue`, we will replace the local data property with
    `props` which has a `messages` array type, as follows:'
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./src/views/MessageFeed.vue`中，我们将用具有`messages`数组类型的`props`替换本地数据属性，如下所示：
- en: '[PRE178]'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'Now, we need to load the list of `messages` and assign it the `props` upon
    navigating to the `/messages` route. We will do this by using the Function `props`
    of the route definition, and the hook `beforeEnter()` to normalize the data into
    related `props` for rendering. You can do that by modifying your `messageFeed`
    route defined in `src/router/index.js` as follows:'
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在导航到`/messages`路由时加载`messages`列表并分配给其`props`。我们将通过使用路由定义的`props`函数和`beforeEnter()`钩子来将数据规范化为相关的`props`以进行渲染。您可以通过修改`src/router/index.js`中定义的`messageFeed`路由来实现这一点，如下所示：
- en: '[PRE187]'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: 'Within `beforeEnter`, we will lazy-load the list of messages with `import`:'
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`beforeEnter`中，我们将使用`import`懒加载消息列表：
- en: '[PRE200]'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: 'Then, we can retrieve the needed information as follows:'
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以按照以下方式检索所需的信息：
- en: '[PRE201]'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: 'The full code for the route in `src/router/index.js` should be the following:'
  id: totrans-531
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`src/router/index.js`中路由的完整代码应该是以下内容：'
- en: '[PRE205]'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: When viewing the website, we should see a message feed like in *Figure 7**.28*.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看网站时，我们应该看到类似于*图7.28*的消息源。
- en: At this point, we have learned and practiced how to configure routers, pass
    parameters, and intercept navigation between pages in the application using different
    routing Hooks. In the next section, we are going to look at a more advanced topic
    – **dynamic routing**.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习和实践了如何使用不同的路由钩子配置路由、传递参数以及拦截应用中页面之间的导航。在下一节中，我们将探讨一个更高级的主题——**动态路由**。
- en: Dynamic routing
  id: totrans-555
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态路由
- en: If there is a lot of data that follows the same format, such as a list of users
    or a list of messages, and it’s required to create a page for each of them, so
    we need to use a routing pattern. With a routing pattern, we can create a new
    route dynamically from the same component based on some additional information.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有大量遵循相同格式的数据，例如用户列表或消息列表，并且需要为每个数据创建一个页面，那么我们需要使用路由模式。使用路由模式，我们可以根据一些附加信息从相同的组件动态创建新路由。
- en: For example, we want to render the `User` view component for every user but
    with different `id` values. Vue Router provides us with the ability to use dynamic
    segments denoted by a colon (`:`) to achieve dynamic routing.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们想要为每个用户渲染`User`视图组件，但具有不同的`id`值。Vue Router为我们提供了使用冒号（`:`）表示的动态段来实现动态路由的能力。
- en: 'Instead of using `params`, which doesn’t persist its value when you refresh
    the page or appear in the URL, we define the required `params` directly in the
    path as follows:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用`params`不同，`params`在刷新页面或出现在URL中时不会持久化其值，我们直接在路径中定义所需的`params`，如下所示：
- en: '[PRE226]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: 'In the preceding code, `:id` means `params` here is not static. When the route
    matches the given pattern, Vue Router will render the corresponding component
    with the appropriate content while keeping the URL as it should be. The value
    of `:id` will be exposed as `$route.params.id` in that view component’s instance:'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`:id`表示这里的`params`不是静态的。当路由与给定的模式匹配时，Vue Router将渲染相应的组件，同时保持URL不变。`:id`的值将作为`$route.params.id`在该视图组件实例中暴露：
- en: '[PRE227]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: When users select URLs such as `/user/1` or `/user/2` (`./src/App.vue`), Vue
    will automatically generate sub-pages using our template.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择类似于`/user/1`或`/user/2`（`./src/App.vue`）的URL时，Vue将自动使用我们的模板生成子页面。
- en: 'Navigation paths will be mapped to the same route pattern and component but
    with different information, as shown in the following screenshot:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 导航路径将被映射到相同的路由模式和组件，但具有不同的信息，如下面的截图所示：
- en: '![Figure 7.31 – Navigating to /user/2](img/B18645_07_31.jpg)'
  id: totrans-564
  prefs: []
  type: TYPE_IMG
  zh: '![图7.31 – 导航到 /user/2](img/B18645_07_31.jpg)'
- en: Figure 7.31 – Navigating to /user/2
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.31 – 导航到 /user/2
- en: 'When you click on **User 1**, you will see the following:'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击**用户1**时，您将看到以下内容：
- en: '![Figure 7.32 – Navigating to /user/1](img/B18645_07_32.jpg)'
  id: totrans-567
  prefs: []
  type: TYPE_IMG
  zh: '![图7.32 – 导航到 /user/1](img/B18645_07_32.jpg)'
- en: Figure 7.32 – Navigating to /user/1
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.32 – 导航到 /user/1
- en: 'We can also normalize `id` to `props` of the `User` component with `props:
    true` and load the data of the selected user before the instance is created and
    rendered:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '我们也可以使用`props: true`将`id`规范化为`User`组件的`props`，并在实例创建和渲染之前加载数据：'
- en: '[PRE228]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: 'Now, we can adjust `<template>` to print out the details of the user:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以调整 `<template>` 来打印出用户的详细信息：
- en: '[PRE229]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: 'The output when selecting `/user/1` will now be as follows:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 `/user/1` 时的输出现在将如下所示：
- en: '![Figure 7.33 – Navigating to /user/1 with an updated UI](img/B18645_07_33.jpg)'
  id: totrans-574
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.33 – 使用更新后的 UI 导航到 /user/1](img/B18645_07_33.jpg)'
- en: Figure 7.33 – Navigating to /user/1 with an updated UI
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.33 – 使用更新后的 UI 导航到 /user/1
- en: In this section, we looked at dynamic routing by setting up a route that extracts
    a parameter from a given URL. This technique allows you to create user-friendly
    URLs and pass information to routes dynamically. In the next section, we will
    look at catching error paths.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们通过设置一个从给定 URL 提取参数的路由来探讨了动态路由。这项技术允许你创建用户友好的 URL 并动态地将信息传递给路由。在下一节中，我们将探讨捕获错误路径。
- en: Catching error paths
  id: totrans-577
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获错误路径
- en: Other important routes that we always need to remember to handle besides the
    `'/'`) include `error` routes, such as `404 Not found` when the URL path doesn’t
    match any registered path, among others.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `'/'` 之外，我们还需要记住处理的其他重要路由包括错误路由，例如当 URL 路径不匹配任何已注册路径时的 `404 Not found` 等。
- en: 'For `404 Not found`, we can use the Regex pattern, `/:pathMatch(.*)*`, which
    stands for *matching every other URLs,* to collect all the cases that don’t match
    the definted routes. The router’s configuration should be located at the end of
    the array routes to avoid matching the wrong path:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `404 Not found`，我们可以使用正则表达式 `/:pathMatch(.*)*`，它代表 *匹配所有其他 URL*，来收集所有不匹配定义的路由的情况。路由器的配置应位于数组
    routes 的末尾，以避免匹配错误的路径：
- en: '[PRE230]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: 'When we type the wrong path for `/users`, the output will be as follows:'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们输入错误的 `/users` 路径时，输出将如下所示：
- en: '![Figure 7.34 – Redirecting to 404 when the /users path is not found](img/B18645_07_34.jpg)'
  id: totrans-582
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.34 – 当找不到 /users 路径时重定向到 404](img/B18645_07_34.jpg)'
- en: Figure 7.34 – Redirecting to 404 when the /users path is not found
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.34 – 当找不到 /users 路径时重定向到 404
- en: In this section, we looked at how to use the Regex pattern to create a catch-all
    `404` page displayed to anyone that navigates to a non-existent route. Next, we
    will be implementing a message route that passes relevant data to the URL itself
    using the dynamic routing pattern.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了如何使用正则表达式模式创建一个显示给任何导航到不存在路由的人的 `404` 页面。接下来，我们将实现一个消息路由，使用动态路由模式将相关数据传递给
    URL 本身。
- en: Exercise 7.04 – implementing a message route for each message with the dynamic
    routing pattern
  id: totrans-585
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 7.04 – 使用动态路由模式为每个消息实现消息路由
- en: This exercise will get you familiar with creating and maintaining dynamic routes
    in combination with other navigation Hooks.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习将使你熟悉在与其他导航 Hook 结合使用的情况下创建和维护动态路由。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.04).
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.04)。
- en: 'Let’s go back to our message feed in *Exercise 7.03*, we will refactor our
    `Message` path to use routing patterns to dynamically navigate to a specific `message`
    path upon the user’s selection and perform the following steps:'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到 *练习 7.03* 的消息源，我们将重构 `Message` 路径以使用路由模式在用户选择时动态导航到特定的 `message` 路径，并执行以下步骤：
- en: 'Let’s open `./src/router/index.js` and change the path configuration of the
    message route to `/message/:id`, where `id` will be the index of a given `message`
    in the list of messages:'
  id: totrans-589
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打开 `./src/router/index.js` 并将消息路由的路径配置更改为 `/message/:id`，其中 `id` 将是给定 `message`
    在消息列表中的索引：
- en: '[PRE231]'
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: 'Now, navigate to `./src/views/MessageFeed.vue`, and change the `to` prop of
    `RouterLink` for each message to the following:'
  id: totrans-596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导航到 `./src/views/MessageFeed.vue`，并将每个消息的 `RouterLink` 的 `to` 属性更改为以下内容：
- en: '[PRE237]'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: 'Let’s go back to `./src/router/index.js`. Here, define `beforeEnter` as an
    asynchronous Hook for the `/message` route and lazy-load the content of the message
    into the `content` field of the route’s `query`:'
  id: totrans-598
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回到 `./src/router/index.js`。在这里，将 `beforeEnter` 定义为一个异步 Hook 用于 `/message`
    路径，并将消息内容懒加载到路由的 `query` 字段的 `content` 字段中：
- en: '[PRE238]'
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: Then we will define the props field as a function that returns an object containing
    the original params.id, and the query.content as id and content fields, respectively.
  id: totrans-612
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将 props 字段定义为返回一个对象的函数，该对象包含原始的 params.id 和 query.content，分别作为 id 和 content
    字段。
- en: '[PRE251]'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: 'The full routes should look like this:'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的路由应该看起来像这样：
- en: '[PRE255]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: 'Run the application using the following command:'
  id: totrans-619
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE256]'
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'When clicking on the first message in **Message Feed**, the next page will
    be as follows:'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击**消息流**中的第一条消息时，下一页将如下所示：
- en: '![Figure 7.35 – The page displayed when visiting the /message/0 path](img/B18645_07_35.jpg)'
  id: totrans-622
  prefs: []
  type: TYPE_IMG
  zh: '![图7.35 – 访问/message/0路径时显示的页面](img/B18645_07_35.jpg)'
- en: Figure 7.35 – The page displayed when visiting the /message/0 path
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.35 – 访问/message/0路径时显示的页面
- en: 'Alternatively, you can also set props: true, and instead of mapping the content
    to query.content in beforeEnter hook, you can also map it to the route.params
    directly, as seen below:'
  id: totrans-624
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '或者，你也可以设置props: true，而不是在beforeEnter钩子中将内容映射到query.content，你也可以直接将其映射到route.params，如下所示：'
- en: '[PRE257]'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-627
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE275]'
- en: The output should stay the same.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应保持不变。
- en: Now that you have learned how to use dynamic routing, you can play around even
    further with more layers of routing patterns, such as `message/:id/author/:aid`.
    For these scenarios, we normally use a better approach – **nested routes**.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了如何使用动态路由，你可以进一步使用更多层的路由模式进行实验，例如`message/:id/author/:aid`。对于这些场景，我们通常使用更好的方法——**嵌套路由**。
- en: Nested routes
  id: totrans-646
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套路由
- en: Many applications are composed of components that consist of several multiple-level
    nested components. For example, `/user/settings/general` indicates that a general
    view is nested in the `settings` view and this `settings` view is nested within
    the `user` view. It represents the **General information** section of a user’s
    settings page.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用程序由由多个多级嵌套组件组成的组件组成。例如，`/user/settings/general`表示一个通用视图嵌套在`settings`视图中，而这个`settings`视图又嵌套在`user`视图中。它代表用户设置页面的**通用信息**部分。
- en: 'Most of the time, we want the URL to correspond to such a structure, as demonstrated
    in the following screenshot:'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，我们希望URL与以下截图所示的结构相对应：
- en: '![Figure 7.36 – User with two nested views – Info and Extra](img/B18645_07_36.jpg)'
  id: totrans-649
  prefs: []
  type: TYPE_IMG
  zh: '![图7.36 – 具有两个嵌套视图（信息和额外信息）的用户](img/B18645_07_36.jpg)'
- en: Figure 7.36 – User with two nested views – Info and Extra
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.36 – 具有两个嵌套视图（信息和额外信息）的用户
- en: Vue Router makes it easy to achieve this structure using `nested` route configurations
    and the `RouterView` component.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Router通过使用`nested`路由配置和`RouterView`组件使实现这种结构变得容易。
- en: 'Let’s go back to the `User.vue` view in our previous example (located in `./src/views/`)
    and add a nested `RouterView` component in the `<``template>` section:'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到之前例子中的`User.vue`视图（位于`./src/views/`），并在`<template>`部分添加一个嵌套的`RouterView`组件：
- en: '[PRE276]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: To start rendering components to this `RouterView`, we will configure the `user`
    route to have the `children` option, which accepts an array of route configurations
    for the child routes. For our example, we’ll be adding an `info` and `extra` page
    for each user.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始将组件渲染到这个`RouterView`，我们将配置`user`路由以具有`children`选项，该选项接受一个子路由配置数组的路由配置。对于我们的例子，我们将为每个用户添加一个`info`和`extra`页面。
- en: 'These child routes will be accessed as `/user/:id/info` and `/user/:id/extra`
    giving each user a unique `info` and `extra` page:'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 这些子路由将作为`/user/:id/info`和`/user/:id/extra`访问，为每个用户提供唯一的`info`和`extra`页面：
- en: '[PRE277]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: 'Certainly, we must create two new views. The first one is `UserInfo`, which
    will render all the information about a user based on the `id` value received:'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们必须创建两个新的视图。第一个是`UserInfo`，它将根据接收到的`id`值渲染有关用户的所有信息：
- en: '[PRE278]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: 'We also create `UserExtra.vue`, which will render any extra information (if
    there is any). In this example, it will only render simple text:'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了`UserExtra.vue`，它将渲染任何额外信息（如果有）。在这个例子中，它将只渲染简单的文本：
- en: '[PRE279]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: 'The nested views are ready! Whenever the user clicks on the `UserInfo` view
    and update the URL as follows:'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套视图已准备好！每当用户点击`UserInfo`视图并更新URL如下所示：
- en: '![Figure 7.37 – The User page with the nested UserInfo view](img/B18645_07_37.jpg)'
  id: totrans-662
  prefs: []
  type: TYPE_IMG
  zh: '![图7.37 – 包含嵌套UserInfo视图的用户页面](img/B18645_07_37.jpg)'
- en: Figure 7.37 – The User page with the nested UserInfo view
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.37 – 包含嵌套UserInfo视图的用户页面
- en: 'When the user clicks on **Extra**, they will see the same, as is shown in the
    following screenshot:'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击**额外信息**时，他们将看到以下截图所示的内容：
- en: '![Figure 7.38 – The User page with the nested UserExtra view](img/B18645_07_38.jpg)'
  id: totrans-665
  prefs: []
  type: TYPE_IMG
  zh: '![图7.38 – 包含嵌套UserExtra视图的用户页面](img/B18645_07_38.jpg)'
- en: Figure 7.38 – The User page with the nested UserExtra view
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.38 – 包含嵌套UserExtra视图的用户页面
- en: In this section, we looked at nested routes – routes that have multiple children.
    In our example, the child routes were `/user/:id/info` and `/user/:id/extra`.
    This pattern allows us to create pages that extend their parent pages.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了嵌套路由——具有多个子路由的路由。在我们的示例中，子路由是 `/user/:id/info` 和 `/user/:id/extra`。这种模式允许我们创建扩展其父页面的页面。
- en: In the preceding example, we can now make edits to the **About a user** header
    and apply them to all child routes. As projects grow, making use of this pattern
    will allow you to avoid duplicating code across multiple views.
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们现在可以编辑 **关于用户** 的标题，并将其应用到所有子路由上。随着项目的增长，利用这种模式将有助于你避免在多个视图中重复代码。
- en: In the next section, we will use what we’ve learned so far to create navigation
    tabs for our message view component.
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将利用到目前为止所学的内容来创建消息视图组件的导航标签。
- en: Exercise 7.05 – building navigation tabs within the message view
  id: totrans-670
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 7.05 – 在消息视图中构建导航标签
- en: We will adapt the knowledge learned in the *Nested routes* section to build
    a `Message` view from *Exercise 7.04*.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把在 *嵌套路由* 部分学到的知识应用到从 *练习 7.04* 构建的 `Message` 视图中。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.05](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.05).
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.05](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.05)。
- en: 'Perform the following steps:'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Firstly, let’s make some changes to our `messages` database in `src/assets/messages.js`
    by adding the following `author` and `sent` fields:'
  id: totrans-674
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们通过添加以下 `author` 和 `sent` 字段来修改我们的 `messages` 数据库 `src/assets/messages.js`：
- en: '[PRE280]'
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-691
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: 'In `MessageFeed.vue`, we update the field to render as `message.content`, and
    not `message` since `message` is no longer a string:'
  id: totrans-696
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MessageFeed.vue` 中，我们将字段更新为渲染为 `message.content`，而不是 `message`，因为 `message`
    已不再是字符串：
- en: '[PRE301]'
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: 'Next, we will create a `MessageAuthor.vue` view that only renders the name
    of the creator of the message:'
  id: totrans-700
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个仅渲染消息创建者名称的 `MessageAuthor.vue` 视图：
- en: '[PRE304]'
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-709
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE320]'
- en: 'Then, we will create a `MessageInfo.vue` view that renders the `message.sent`
    value:'
  id: totrans-718
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个渲染 `message.sent` 值的 `MessageInfo.vue` 视图：
- en: '[PRE321]'
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-722
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-727
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-729
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-731
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-732
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-735
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE339]'
- en: 'Once we are done with the components, we need to register the new nested route
    under the children of the `message` route inside our router at `src/router/index.js`:'
  id: totrans-738
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们完成了组件，我们需要在我们的路由器 `src/router/index.js` 中 `message` 路由的子路由下注册新的嵌套路由：
- en: '[PRE340]'
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-741
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE359]'
- en: 'We need to move the logic of `beforeEnter` for the `message` route to a separate
    function – `beforeEnterMessage`:'
  id: totrans-759
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将 `message` 路由的 `beforeEnter` 逻辑移动到单独的函数 `beforeEnterMessage`：
- en: '[PRE360]'
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-764
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-765
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-768
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-770
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE370]'
- en: 'Then, bind it to the `message` route’s `beforeEnter`, and also to each of its
    child route’s `beforeEnter` Hook, as shown in the following code block:'
  id: totrans-771
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将其绑定到 `message` 路由的 `beforeEnter`，以及每个子路由的 `beforeEnter` 钩子，如下面的代码块所示：
- en: '[PRE371]'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-774
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-776
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-777
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-778
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-779
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-780
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-781
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-782
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-784
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-786
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE388]'
- en: '[PRE389]'
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-791
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-792
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE392]'
- en: 'Finally, in `Message.vue`, we will refactor the code to the following:'
  id: totrans-794
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在 `Message.vue` 中，我们将对代码进行重构，如下所示：
- en: '[PRE393]'
  id: totrans-795
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-796
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '[PRE396]'
  id: totrans-798
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-799
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '[PRE399]'
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-803
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-804
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-805
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-807
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-808
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-811
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '[PRE411]'
  id: totrans-813
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '[PRE412]'
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-816
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-817
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '[PRE416]'
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '[PRE417]'
  id: totrans-819
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE417]'
- en: 'Run the application using the following command:'
  id: totrans-820
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE418]'
  id: totrans-821
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE418]'
- en: 'You will see the following when you select the **Author** option:'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 当你选择 **作者** 选项时，你会看到以下内容：
- en: '![Figure 7.39 – Message page with Author selected](img/B18645_07_39.jpg)'
  id: totrans-823
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.39 – 已选择“作者”的消息页面](img/B18645_07_39.jpg)'
- en: Figure 7.39 – Message page with Author selected
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.39 – 已选择“作者”的消息页面
- en: 'When we navigate to the **Info** tab, the output becomes:'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们导航到 **信息** 标签时，输出变为：
- en: '![Figure 7.40 – The Message page with Info selected](img/B18645_07_40.jpg)'
  id: totrans-826
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.40 – 已选择“信息”的消息页面](img/B18645_07_40.jpg)'
- en: Figure 7.40 – The Message page with Info selected
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.40 – 已选择“信息”的消息页面
- en: With this exercise, we have covered almost all the basic functionalities of
    Vue Router, especially in terms of handling dynamic and nested routing. In the
    final section, we will go through how to create a reusable layout for the view
    by templating our application.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个练习，我们几乎涵盖了 Vue Router 的所有基本功能，特别是在处理动态和嵌套路由方面。在最后一节中，我们将介绍如何通过模板化我们的应用程序来创建视图的可重用布局。
- en: Using layouts
  id: totrans-829
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用布局
- en: There are many ways to implement layouts in a Vue application. One of them is
    using a slot and creating a static wrapper `layout` component on top of `RouterView`.
    Despite its flexibility, this approach results in a heavy performance cost, both
    in terms of the unnecessary recreation of the component and in the extra data
    fetching required for every route change.
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue应用程序中实现布局有许多方法。其中之一是使用槽和创建一个静态包装器`layout`组件在`RouterView`之上。尽管这种方法具有灵活性，但它会导致高昂的性能成本，包括不必要的组件重建以及每次路由变化所需的额外数据获取。
- en: 'In this section, we will discuss a better approach, which is to take advantage
    of the power of the dynamic component. The components are as follows:'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论一种更好的方法，即利用动态组件的强大功能。组件如下：
- en: '[PRE419]'
  id: totrans-832
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: 'Let’s create an `src/layouts` folder with a `default` layout component. This
    component has a simple header navigation, a `main` slot to render the actual content
    (which is whatever `<RouterView>` renders), and a footer:'
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`src/layouts`文件夹，并创建一个`default`布局组件。此组件具有简单的页眉导航，一个`main`槽来渲染实际内容（这是`<RouterView>`渲染的任何内容），以及页脚：
- en: '[PRE420]'
  id: totrans-834
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: 'In the `App.vue` file, we will change the default view generated by Vite to
    only `<RouterView>` and a wrapper around it. This wrapper is a dynamic component
    that will render whatever in the `layout` variable:'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 在`App.vue`文件中，我们将更改Vite生成的默认视图，使其仅包含`<RouterView>`及其周围的包装器。这个包装器是一个动态组件，它将渲染`layout`变量中的任何内容：
- en: '[PRE421]'
  id: totrans-836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: 'We will also initialize `layout` to be the `default.vue` component:'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将初始化`layout`为`default.vue`组件：
- en: '[PRE422]'
  id: totrans-838
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: Now, to render the `layout` component in response to corresponding route changes,
    `RouterView` should control which layout to render. In other words, `layout` should
    be updatable and decided by the view component rendered inside `RouterView`.
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了响应相应的路由变化来渲染`layout`组件，`RouterView`应该控制要渲染哪个布局。换句话说，`layout`应该是可更新的，并由`RouterView`内部渲染的视图组件决定。
- en: 'To achieve this, we will pass `layout` to the `currentLayout` prop and update
    `layout` with the `@update` event in `<RouterView>`:'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将`layout`传递给`currentLayout`属性，并在`<RouterView>`中使用`@update`事件更新`layout`：
- en: '[PRE423]'
  id: totrans-841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: 'In the `<script setup>` section, we change `layout` into a reactive variable
    using `shallowRef` as follows:'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<script setup>`部分，我们使用`shallowRef`将`layout`更改为一个响应式变量，如下所示：
- en: '[PRE424]'
  id: totrans-843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: 'Upon creating an instance of the `HomeView.vue` component, we will emit an
    `update:currentLayout` event to update and render the desired layout accordingly:'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建`HomeView.vue`组件的实例时，我们将发出一个`update:currentLayout`事件来更新并相应地渲染所需的布局：
- en: '[PRE425]'
  id: totrans-845
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: 'The output will be as follows:'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 7.41 – The Home page rendered with a layout](img/B18645_07_41.jpg)'
  id: totrans-847
  prefs: []
  type: TYPE_IMG
  zh: '![图7.41 - 使用布局渲染的首页](img/B18645_07_41.jpg)'
- en: Figure 7.41 – The Home page rendered with a layout
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.41 - 使用布局渲染的首页
- en: Since the `layout` component is not part of the `RouterView` component, it will
    only re-render whenever the layout changes from within the view. This will maintain
    the performance of the app during user navigation.
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`layout`组件不是`RouterView`组件的一部分，它只会在视图内部布局发生变化时重新渲染。这将保持应用程序在用户导航时的性能。
- en: In this section, we looked at how a dynamic component can be used to provide
    different layouts for different routes. This gives us the ability to have different
    common layouts – for example, one global menu for user-facing pages and another
    for admin pages, rendered based on the routes used.
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了如何使用动态组件为不同的路由提供不同的布局。这使我们能够拥有不同的通用布局 - 例如，一个用于面向用户的页面的全局菜单和另一个用于管理页面的菜单，这些菜单基于使用的路由进行渲染。
- en: In the next section, we’ll build on what we learned here by creating a message
    application with dynamic nested routing and layouts.
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将通过创建一个具有动态嵌套路由和布局的消息应用程序来构建我们在这里学到的内容。
- en: Activity 7.01 – creating a message SPA with dynamic, nested routing, and layouts
  id: totrans-852
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动七点零一 - 创建一个具有动态、嵌套路由和布局的消息SPA
- en: To access the code file for this activity, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Activity7.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Activity7.01)
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此活动的代码文件，请参阅[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Activity7.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Activity7.01)
- en: 'This activity aims to leverage your knowledge about Vue Router regarding registering
    routes and handling dynamic routes, nested routes, and route Hooks to create a
    **Message SPA**. This application will allow users to compose new messages, view
    a message feed, and navigate between messages to see their details:'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 该活动旨在利用您关于Vue Router的知识，包括注册路由和处理动态路由、嵌套路由和路由钩子，以创建**消息SPA**。此应用程序将允许用户编写新消息、查看消息源，并在消息之间导航以查看其详细信息：
- en: Create a `MessageEditor` view (at `src/views/MessageEditor.vue`), which will
    render a view with `textarea` to the user, and a `submit` button to save the message.
  id: totrans-855
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`MessageEditor`视图（在`src/views/MessageEditor.vue`），该视图将向用户渲染一个带有`textarea`的视图，以及一个`submit`按钮来保存消息。
- en: Register the `editor` route with `MessageEditor` as its view in `src/router/index.js`.
  id: totrans-856
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/router/index.js`中将`editor`路由与`MessageEditor`视图注册。
- en: Create a `MessageList` view (at `src/views/MessageList.vue`) that will render
    a list of `message id` values wrapped by an `a` tag, which will direct to the
    single message page with the given `id` upon selection.
  id: totrans-857
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`MessageList`视图（在`src/views/MessageList.vue`），该视图将渲染一个由`a`标签包裹的`message
    id`值列表，选择后将直接跳转到给定`id`的单个消息页面。
- en: Register the `list` route with `MessageList` as its view in `src/router/index.js`.
  id: totrans-858
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/router/index.js`中将`list`路由与`MessageList`视图注册。
- en: Add the `Messages` view (at `src/views/Messages.vue`), which will render links
    to either `editor` or `list` as its nested routes and render the nested view accordingly.
  id: totrans-859
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`Messages`视图（在`src/views/Messages.vue`），该视图将渲染到`editor`或`list`的链接作为其嵌套路由，并相应地渲染嵌套视图。
- en: When the user navigates away from `editor`, should some content not yet have
    been submitted, display a message asking whether they want to save before navigating
    away. `Yes` will continue and `No` will abort the navigation.
  id: totrans-860
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户从`editor`导航离开时，如果某些内容尚未提交，应显示一个消息询问他们是否在导航离开前保存。`Yes`将继续，`No`将中止导航。
- en: Add a `Message` view (at `src/views/Message.vue`), which will render message
    content from `props`, and a `back` button to go back to the previous view. By
    default, it should go to `messages`.
  id: totrans-861
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`Message`视图（在`src/views/Message.vue`），该视图将渲染来自`props`的消息内容，以及一个`back`按钮返回到上一个视图。默认情况下，它应跳转到`messages`。
- en: Register the `Message` view with the dynamic route of `message/:id` in `src/router/index.js`.
  id: totrans-862
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/router/index.js`中将`Message`视图与`message/:id`动态路由注册。
- en: Improve the UI by creating two different simple layouts, one for `messages`
    (with the title only) and one for `message` (with both the title and the `back`
    button).
  id: totrans-863
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建两个不同的简单布局来改进UI，一个用于`messages`（仅包含标题）和一个用于`message`（包含标题和`back`按钮）。
- en: 'The expected output is as follows:'
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 预期输出如下：
- en: 'After adding messages via the editor route, the `/list` view that displays
    a feed of messages should look as follows:'
  id: totrans-865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过编辑器路由添加消息后，显示消息源流的`/list`视图应如下所示：
- en: '![Figure 7.42 – The /list view in the Messages app](img/B18645_07_42.jpg)'
  id: totrans-866
  prefs: []
  type: TYPE_IMG
  zh: '![图7.42 – 消息应用中的/list视图](img/B18645_07_42.jpg)'
- en: Figure 7.42 – The /list view in the Messages app
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.42 – 消息应用中的/list视图
- en: 'The `/editor` view that allows the user to compose and send a new message looks
    as follows:'
  id: totrans-868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许用户编写并发送新消息的`/editor`视图如下：
- en: '![Figure 7.43 – The /editor view in the Messages app](img/B18645_07_43.jpg)'
  id: totrans-869
  prefs: []
  type: TYPE_IMG
  zh: '![图7.43 – 消息应用中的/editor视图](img/B18645_07_43.jpg)'
- en: Figure 7.43 – The /editor view in the Messages app
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.43 – 消息应用中的/editor视图
- en: 'The `/message/:id` dynamic route (here, `/message/0` for a message with an
    `id` value of `0`) in the **Message** app looks as follows:'
  id: totrans-871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息**应用中的`/message/:id`动态路由（此处为`/message/0`，表示`id`值为`0`的消息）如下所示：'
- en: '![Figure 7.44 – The /message/0 view in the Message app](img/B18645_07_44.jpg)'
  id: totrans-872
  prefs: []
  type: TYPE_IMG
  zh: '![图7.44 – 消息应用中的/message/0视图](img/B18645_07_44.jpg)'
- en: Figure 7.44 – The /message/0 view in the Message app
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.44 – 消息应用中的/message/0视图
- en: 'An alert will be displayed when the user tries to navigate away with an unsaved
    message as shown in the following screenshot:'
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户尝试在不保存消息的情况下导航离开时，将显示一个警告，如下截图所示：
- en: "![Figure 7.45 – The /editor view whe\uFEFFn the user tries to leave the page\
    \ with an unsaved message](img/B18645_07_45.jpg)"
  id: totrans-875
  prefs: []
  type: TYPE_IMG
  zh: '![图7.45 – 用户尝试在不保存消息的情况下离开页面时的/editor视图](img/B18645_07_45.jpg)'
- en: Figure 7.45 – The /editor view when the user tries to leave the page with an
    unsaved message
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.45 – 用户尝试在不保存消息的情况下离开页面时的/编辑器视图
- en: Summary
  id: totrans-877
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Throughout this chapter, we have learned about the most basic and useful functionalities
    offered by Vue Router for building routing for any Vue.js application in an effective
    and organized way.
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Vue Router提供的最基本和有用的功能，这些功能可以有效地以有组织的方式为任何Vue.js应用程序构建路由。
- en: '`RouterView` and `RouterLink` allow app developers to easily set up the navigation
    paths to their related views and maintain the SPA concept. The fact that they
    are Vue components themselves provides us as developers with the benefits of the
    Vue architecture, giving us flexibility in implementing nested views or layouts.'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: '`RouterView`和`RouterLink`允许应用开发者轻松设置导航路径到相关视图，并保持SPA概念。它们本身就是Vue组件的事实为我们开发者提供了Vue架构的好处，使我们能够在实现嵌套视图或布局时具有灵活性。'
- en: Defining the route as an object with different properties simplifies the architecture
    process, including refactoring existing paths and adding a new route to the system.
    Using router parameters and patterns provides dynamic routing with reusable views
    and enables communication and data preservation between pages.
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: 将路由定义为具有不同属性的对象简化了架构过程，包括重构现有路径和向系统中添加新路由。使用路由参数和模式提供了动态路由，具有可重用视图，并允许页面之间的通信和数据保留。
- en: Finally, with Hooks, we saw how we can intercept the navigation flow, set up
    authentication where needed, redirect to the desired path, or even load and keep
    certain important data before the user lands on the targeted page. There is an
    unlimited number of use cases in which these Hooks can be extremely useful, such
    as when implementing a back button, for instance. With Vue Router, we are now
    capable of composing a Vue.js application with a proper navigation system for
    users to explore.
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过Hooks，我们看到了如何拦截导航流程，在需要的地方设置身份验证，重定向到期望的路径，甚至在用户到达目标页面之前加载并保留某些重要数据。这些Hooks在无数的使用场景中都可以非常有用，例如在实现返回按钮时。有了Vue
    Router，我们现在能够为用户提供一个合适的导航系统，从而构建Vue.js应用程序。
- en: In the next chapter, we will explore how we can enhance the UI experience for
    users by adding transitions and animations to our application.
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何通过向我们的应用程序添加过渡和动画来增强用户体验。
