- en: Advanced Forms in Angular
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular中的高级表单
- en: In [Chapter 7](8eacfd6f-0cc3-49d5-9c85-f823dad66ad6.xhtml), *Asynchronous Programming*
    *Using Observables*, we used Observables to build a simple, yet easily extendable
    JSON API to query the Marvel Cinematic Universe. In this chapter, we will build
    the forms that will allow us to query our API in a more user-friendly way. These
    forms will help us to not only retrieve movies from the Marvel Cinematic Universe,
    but also to add movies. In addition to the forms themselves, we will obviously
    need to build on our API, so it supports the addition and modification of movies.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](8eacfd6f-0cc3-49d5-9c85-f823dad66ad6.xhtml) *异步编程* *使用Observables*中，我们使用Observables构建了一个简单但易于扩展的JSON
    API来查询漫威电影宇宙。在本章中，我们将构建表单，以更加用户友好的方式查询我们的API。这些表单将帮助我们不仅从漫威电影宇宙中检索电影，还可以添加电影。除了表单本身，我们显然需要在我们的API上进行构建，以支持添加和修改电影。
- en: 'In this chapter, we will see the following topics covered in detail:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将详细介绍以下主题：
- en: Reactive forms
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应式表单
- en: Control and ControlGroup
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控件和控件组
- en: Form directive
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单指令
- en: Using FormBuilder
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用FormBuilder
- en: Adding validations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加验证
- en: Custom validation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义验证
- en: Getting started
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始
- en: As stated in the introduction of this chapter, we will build upon our JSON API
    for the Marvel Cinematic Universe of [Chapter 7](8eacfd6f-0cc3-49d5-9c85-f823dad66ad6.xhtml),
    *Asynchronous Programming* *Using Observables*. To be a bit more precise, we will
    improve the Promise-based version. Why Promises instead of pure observers? Well,
    Promises are an extremely powerful tool, and they are used in the majority of
    Angular/Typescript projects I have seen so far. Consequently, a bit more practice
    with Promises won't hurt much.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章介绍中所述，我们将在[第7章](8eacfd6f-0cc3-49d5-9c85-f823dad66ad6.xhtml) *异步编程* *使用Observables*中构建我们的漫威电影宇宙的JSON
    API。更准确地说，我们将改进基于Promise的版本。为什么使用Promise而不是纯观察者？嗯，Promise是一个非常强大的工具，在我迄今为止看到的大多数Angular/Typescript项目中都在使用。因此，多练习一下Promise不会有太大的坏处。
- en: You can find the code of the Promises part here [http://bit.ly/mastering-angular2-chap7-part3](http://bit.ly/mastering-angular2-chap7-part3).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里找到Promises部分的代码[http://bit.ly/mastering-angular2-chap7-part3](http://bit.ly/mastering-angular2-chap7-part3)。
- en: 'To clone this code into a new repo called `advanced-forms`, use the following
    command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此代码克隆到名为`advanced-forms`的新存储库中，请使用以下命令：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These commands pull the latest version of the GitHub repository containing the
    code for this book to a folder named `advanced-forms`. Then, we go into the `advanced-forms`
    folder and prune everything that is not inside the `chap7/angular-promise` subdirectory.
    Magically enough, Git rewrites the history of the repository to keep only the
    files that were inside the `chap7/angular-promise` subdirectory. Finally, `npm
    install` will have all our dependencies ready to fire.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将最新版本的GitHub存储库中包含本书代码的文件夹命名为`advanced-forms`。然后，我们进入`advanced-forms`文件夹，并清除不在`chap7/angular-promise`子目录中的所有内容。神奇的是，Git会重写存储库的历史，只保留在`chap7/angular-promise`子目录中的文件。最后，`npm
    install`将准备好所有我们的依赖项。
- en: As a result, you will have the behavior we achieved in [Chapter 7](8eacfd6f-0cc3-49d5-9c85-f823dad66ad6.xhtml),
    *Asynchronous Programming* *Using Observables* (for example querying movies from
    the Marvel Cinematic Universe) inside a new project named advanced-forms. Now,
    it won't be much fun if we use forms to create, read, update and delete movies
    from the Marvel Cinematic Universe, and these changes are not reflected in the
    querying part. As a reminder, the querying API we built in [Chapter 7](8eacfd6f-0cc3-49d5-9c85-f823dad66ad6.xhtml),
    *Asynchronous Programming* *Using Observables* is a static JSON file as a backend
    mock. To save the changes coming from our forms, we will have to modify the JSON
    file. While this is possible, it means that we will build a whole new functionality
    (that is editing a file) only for the purpose of our mock. This new functionality
    won't help us at all, when we go ahead with a real backend. Consequently, we will
    use an in-memory reference for our movies from the Marvel Cinematic Universe.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您将在名为advanced-forms的新项目中实现我们在《第7章》*使用可观察对象进行异步编程*中实现的行为（例如从漫威电影宇宙查询电影）。现在，如果我们使用表单来创建、读取、更新和删除漫威电影宇宙中的电影，并且这些更改不反映在查询部分，那将不会有太多乐趣。提醒一下，我们在《第7章》*使用可观察对象进行异步编程*中构建的查询API是一个静态的JSON文件作为后端模拟。为了保存来自我们表单的更改，我们将不得不修改JSON文件。虽然这是可能的，但这意味着我们将为我们的模拟构建一个全新的功能（即编辑文件）只是为了这个目的。这个新功能在我们继续使用真正的后端时将毫无帮助。因此，我们将使用漫威电影宇宙中的电影的内存引用。
- en: 'The `app.component.ts` file looks like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.component.ts`文件如下所示：'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And the related HTML template is as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的HTML模板如下：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `IMDBAPIService` didn''t change from [Chapter 7](8eacfd6f-0cc3-49d5-9c85-f823dad66ad6.xhtml),
    *Asynchronous Programming* *Using Observables* and an `ng start` will have the
    following result:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`IMDBAPIService`与《第7章》*使用可观察对象进行异步编程*中的内容相同，执行`ng start`将得到以下结果：'
- en: '![](assets/2018ccc8-c331-4d24-af00-0c0de5466ec9.png)State at the end of [chapter
    7](8eacfd6f-0cc3-49d5-9c85-f823dad66ad6.xhtml), *Asynchronous Programming* *Using
    Observables.*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在《第7章》*使用可观察对象进行异步编程*结束时的状态。
- en: Reactive forms
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式表单
- en: In [Chapter 8](1dfecab5-25d2-47a0-88a2-eac2cece692e.xhtml), *Template and Data
    Binding Syntax*, we learned how to leverage Data Binding and templating in Angular.
    Here, we'll combine these new notions with forms. Anyone with two hours, of HTML
    experience knows what `<form>` means and how to use them. With a couple of hours
    of HTML behind you, you know how to identify the different information in your
    forms and choose a method (that is `GET`, `POST`, `PUT`, and `DELETE`) to send
    everything to the backend of your choice.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在《第8章》*模板和数据绑定语法*中，我们学习了如何在Angular中利用数据绑定和模板化。在这里，我们将把这些新概念与表单结合起来。任何有两个小时HTML经验的人都知道`<form>`的含义以及如何使用它们。在您掌握了几个小时的HTML之后，您就知道如何识别表单中的不同信息，并选择一种方法（即`GET`、`POST`、`PUT`和`DELETE`）将所有内容发送到您选择的后端。
- en: "In this recipe, however, we will build forms using imperative TypeScript code\
    \ instead of good old HTML. Why, you ask? Well, this allows us to test our forms\
    \ without relying on end-to-end tests that need the DOM to be generated. With\
    \ reactive forms, we can test our form with classical unit tests as described\
    \ in [\uFEFFChapter 16](38580b89-29c5-4657-819c-7260b6ce7ab4.xhtml), *Testing\
    \ Angular Apps Using Jasmine and Protractor Frameworks*."
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: "然而，在这个示例中，我们将使用命令式的TypeScript代码构建表单，而不是传统的HTML。你可能会问，为什么？嗯，这样可以让我们在不依赖生成DOM的端到端测试的情况下测试我们的表单。使用响应式表单，我们可以像在[\uFEFF\
    第16章](38580b89-29c5-4657-819c-7260b6ce7ab4.xhtml)中描述的那样，使用经典的单元测试来测试我们的表单。"
- en: 'Let''s start by building the underlying HTML structure for a form, aiming at
    adding a new movie to the Marvel Cinematic Universe as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从为表单构建基础的HTML结构开始，旨在向漫威电影宇宙添加一部新电影，如下所示：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding form, we have one couple label-input for each attribute of
    the `Movie` model. Now, there are some directives that are definitively not pure
    HTML in this form. Namely, `[formGroup]="movieForm"` and `formControlName=""`.
    The first directive (`[formGroup]="movieForm"`) is used to bind this particular
    form with an instance of `FormGroup`. Then, `formControlName` refers to instances
    of the `FormControl` class that comprises the `FormGroup`. In other words, `movieForm`
    is a `FormGroup` comprised of `FormControl`, `FormGroup`, and `FormControl` are
    in the `@angular/forms` package both. Consequently, we''ll have to import this
    package in our `app.component.ts` file: `import { FormGroup, FormControl }` from
    `@angular/forms`; after updating the `app.component.html` file with our form.
    In addition, we need to import the `ReactiveFormsModule` and add it to our application
    module.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述表单中，我们为`Movie`模型的每个属性都有一个标签-输入对。现在，这个表单中有一些明显不是纯HTML的指令。即`[formGroup]="movieForm"`和`formControlName=""`。第一个指令(`[formGroup]="movieForm"`)用于将这个特定表单与`FormGroup`的实例绑定。然后，`formControlName`指的是`FormControl`类的实例，它包括`FormGroup`。换句话说，`movieForm`是由`FormControl`、`FormGroup`和`FormControl`组成的，`@angular/forms`包中都有。因此，我们需要在`app.component.ts`文件中导入这个包：`import
    { FormGroup, FormControl }` from `@angular/forms`；在更新了`app.component.html`文件后。此外，我们需要导入`ReactiveFormsModule`并将其添加到我们的应用程序模块中。
- en: 'If you were to serve your application right now, it would transpile without
    a hitch. At runtime, however, it''ll complain, as the `movieForm` form group does
    not exist in your component yet. Let''s create it:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在就启动你的应用程序，它会毫无问题地转译。然而，在运行时，它会抱怨，因为`movieForm`表单组在你的组件中还不存在。让我们创建它：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, we have a private member of the `AppComponent` component that
    is an instance of `FormGroup`. This `FormGroup` instance is composed of many `FormControl`
    instances, one per field to be precise.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`AppComponent`组件有一个`FormGroup`的私有成员实例。这个`FormGroup`实例由许多`FormControl`实例组成，每个字段都是精确的一个。
- en: 'Also, the value of each field can be accessed via `this.movieForm.value.my_field`.
    Consequently, if we add a submit button to our form:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，每个字段的值可以通过`this.movieForm.value.my_field`来访问。因此，如果我们在表单中添加一个提交按钮：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And the corresponding `submit()` function in the `AppComponent` component, then
    we can display the values of each one of our fields.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`AppComponent`组件中对应的`submit()`函数，然后我们可以显示每个字段的值。
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It''s as simple as that; we got a communication between our HTML template and
    our component:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这么简单；我们在HTML模板和组件之间建立了通信：
- en: '![](assets/2a659178-4ae0-4628-95de-27588d0c3131.png)Displaying the rather crude
    HTML form and the console output of the submit function.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/2a659178-4ae0-4628-95de-27588d0c3131.png)显示相当粗糙的HTML表单和提交函数的控制台输出。'
- en: Then, we can create an instance of the `Movie` model and send it to the `IMDBAPI`
    for persistence. The only thing missing is a working backend.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以创建`Movie`模型的实例并将其发送到`IMDBAPI`进行持久化。唯一缺少的是一个可用的后端。
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the following screenshot, we can see the displayed HTML form and the console
    output for the improved `submit` function:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们可以看到显示的HTML表单和改进的`submit`函数的控制台输出：
- en: '![](assets/6f8ce37d-dc19-4504-86f1-9e8e20c20e40.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6f8ce37d-dc19-4504-86f1-9e8e20c20e40.png)'
- en: 'Now that''s great; we have retrieved the values from the HTML form into the
    component side of our application, and we have created a `Movie` object that can
    be moved around and persisted. There are at least two different things to improve
    in this form:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在很好；我们已经从HTML表单中检索到了值，并在应用程序的组件端创建了一个可以移动和持久化的`Movie`对象。这个表单中至少有两个不同的改进之处：
- en: The wordiness of the form creation (`new FormControl() much ?`)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单创建的冗长（`new FormControl()`太多了？）
- en: The verifications on the different input
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对不同输入的验证
- en: Using FormBuilder
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用FormBuilder
- en: '`FormBuilder` is an injectable helper class of the `@angular/forms` package
    of Angular. This class helps to reduce the wordiness of form creation as demonstrated
    in the following code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`FormBuilder`是Angular的`@angular/forms`包中的可注入辅助类。这个类有助于减少表单创建的冗长，如下面的代码所示：'
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see, using the group method of the `FormBuilder` class, the declaration
    of `FormGroup` and `FormControl` is now implicit. We only need to have the field
    name followed by its default value. Here, all the default values are blank.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，使用`FormBuilder`类的`group`方法，`FormGroup`和`FormControl`的声明现在是隐式的。我们只需要有字段名称，后面跟着它的默认值。在这里，所有的默认值都是空白的。
- en: 'To use the `FormBuilder` class, we first have to import it:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`FormBuilder`类，我们首先必须导入它：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We then inject it using the constructor of our `AppComponent` component:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们在`AppComponent`组件的构造函数中注入它：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that we still have the injection of `IMDBAPIService` from [Chapter 7](8eacfd6f-0cc3-49d5-9c85-f823dad66ad6.xhtml),
    *Asynchronous Programming* *Using Observables*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们仍然从[第7章](8eacfd6f-0cc3-49d5-9c85-f823dad66ad6.xhtml)注入了`IMDBAPIService`，*使用可观察对象进行异步编程*。
- en: 'Consequently, `AppComponent` now looks like the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`AppComponent`现在看起来像下面这样：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We''ve solved the first one of our two problems: the wordiness of the form
    creation. In the next section, we''ll tackle the validation part of this chapter
    where we learn how to validate incoming inputs.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解决了我们两个问题中的第一个：表单创建的冗长。在下一节中，我们将解决本章的验证部分，学习如何验证传入的输入。
- en: Adding validations
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加验证
- en: Dealing with forms is often a pain for developers because you obviously can't
    trust the inputs provided by the user. It is either because they are just not
    paying attention to what you expect in your forms or because they want to break
    things. Validating inputs incoming from a form is painful in every language, both
    server and client-side.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 处理表单对开发人员来说通常是一种痛苦，因为显然你不能信任用户提供的输入。这要么是因为他们只是没有注意到你在表单中期望的内容，要么是因为他们想要破坏事情。验证来自表单的输入在每种语言中都是痛苦的，无论是服务器端还是客户端。
- en: 'Now, the Angular team came up with a rather simple way to validate inputs by
    defining what is expected from each field right at the form''s creation using
    `Validators`. Angular contains the following built-in `Validators` that we can
    use:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Angular团队提出了一种相当简单的方法，通过在表单创建时定义对每个字段的期望来验证输入，使用`Validators`。Angular包含以下内置的`Validators`，我们可以使用：
- en: '`required`: Requires a non-empty value'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`required`: 要求非空值'
- en: '`minLength(minLength: number)`: Requires the control value to have a minimum
    length of `minLength`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minLength(minLength: number)`: 要求控件值的最小长度为`minLength`'
- en: '`maxLength(maxLength: number)`: Requires the control value to have a maximum
    length of `maxLength`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maxLength(maxLength: number)`: 要求控件值的最大长度为`maxLength`'
- en: '`pattern(pattern: string)`: Requires that the control value matches the provided
    pattern'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern(pattern: string)`: 要求控件值与提供的模式匹配'
- en: 'Adding these built-in `validators` to our form is straightforward:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 向我们的表单添加这些内置的`validators`很简单：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In addition to a blank default value for each field, we add the required `validator`,
    which is a static of the `Validators` class contained in the `@angular/forms`
    package. We can read the validity of the form (that is, if all the validators
    are OK''d) using the valid property of our `FormGroup`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了每个字段的空白默认值之外，我们还添加了必需的`validator`，这是`@angular/forms`包中包含的`Validators`类的静态属性。我们可以使用`FormGroup`的valid属性来读取表单的有效性（即，如果所有验证器都通过了）：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the previous modification of the `submit` method, if the user does not fill
    in one of the fields, then the `Movie` object won't be created. Also, we'll display
    a `console.error("Form not valid")`; and, if we add a conditional `<p></p>` block
    accompanied by some rudimentary CSS, we can provide some feedback to the user.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在`submit`方法的上一个修改中，如果用户没有填写其中一个字段，则`Movie`对象将不会被创建。此外，我们将显示`console.error("表单无效")`；如果我们添加一个条件`<p></p>`块，并附带一些基本的CSS，我们可以为用户提供一些反馈。
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the following screenshot, we can see the displayed HTML form with feedback
    on the form''s validity:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕截图中，我们可以看到显示的HTML表单，并对表单的有效性进行了反馈。
- en: '![](assets/4a308388-9826-4170-b858-2a40d3f7193b.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4a308388-9826-4170-b858-2a40d3f7193b.png)'
- en: We can go a bit further and provide a visual feedback per field. The status
    of each field is accessible through the `valid` property of each sub `FormControl`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以再进一步，为每个字段提供可视化反馈。通过每个子`FormControl`的`valid`属性可以访问每个字段的状态。
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This produces the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下结果：
- en: '![](assets/760e8212-8c78-4687-984c-d85a00b521f7.png)Displaying HTML form with
    feedback on each field''s validity.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/760e8212-8c78-4687-984c-d85a00b521f7.png)显示带有每个字段有效性反馈的HTML表单。'
- en: As you can see, each form except the `movid_id` one, displays the This field
    is required error as they are empty. The `*ngIf` structural directive listens
    to any changes in the associated variable and will show/hide the paragraph when
    the field becomes invalid/valid. Another useful property of the form is pristine.
    It defines whether or not a given field has been modified by a user. In our case,
    it could be used to avoid displaying errors, even when no editing occurred.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，除了`movid_id`之外的每个表单都显示了“此字段为必填项”错误，因为它们为空。`*ngIf`结构指令监听与关联变量的任何更改，并在字段变得无效/有效时显示/隐藏段落。表单的另一个有用属性是pristine。它定义了给定字段是否已被用户修改。在我们的情况下，即使没有进行编辑，它也可以用来避免显示错误。
- en: 'Another handy thing to know about `validators` is that they can be composed
    using the compose method of the `Validators` class. In the following example,
    We will compose a validator for the `movie_id` field from four distinct validators:
    `Validators.required`, `Validators.minLength`, `Validators.maxLength`, and `Validators.pattern`.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`validators`的另一个方便的事情是，它们可以使用`Validators`类的compose方法进行组合。在以下示例中，我们将从四个不同的验证器：`Validators.required`、`Validators.minLength`、`Validators.maxLength`和`Validators.pattern`，组合一个`movie_id`字段的验证器。
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The resulting composite validator will henceforth ensure that the `movie_id`
    is a number that is between `1` and `4` digits long. The following screenshot
    displays an HTML form with feedback on the movide_id field. The field is valid
    because it''s composed of four digits:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，生成的复合验证器将确保`movie_id`是一个介于`1`和`4`位数字之间的数字。以下屏幕截图显示了带有movide_id字段反馈的HTML表单。该字段有效，因为它由四个数字组成：
- en: '![](assets/9ee66d91-894e-4aea-a083-32cecaded17d.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9ee66d91-894e-4aea-a083-32cecaded17d.png)'
- en: Custom validation
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义验证
- en: In the previous section, we saw how to use validators and combine validators
    together to create more complex validation. The `Validators.required`, `Validators.minLength`,
    `Validators.maxLength`, and `Validators.pattern` combinations can cover a lot
    of validation cases that can arise during the development of your Angular application.
    If the time comes where you can't handle your validation needs with the built-in
    validator, then you can build your very own validator.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们看到了如何使用验证器并将验证器组合在一起以创建更复杂的验证。`Validators.required`、`Validators.minLength`、`Validators.maxLength`和`Validators.pattern`的组合可以涵盖在开发Angular应用程序过程中可能出现的许多验证情况。如果有时候您无法使用内置验证器处理验证需求，那么您可以构建自己的验证器。
- en: 'In this section, we''ll see how to validate that the movie_id field contains
    a valid entry (that is a number that is between one and four digits long) and
    that another movie does not already use the id. To do so, we can create the following
    class:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何验证`movie_id`字段包含有效的条目（即一个介于一到四位数之间的数字），并且另一个电影尚未使用该ID。为此，我们可以创建以下类：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here, we can see that the validation results are, in fact, a simple `[key:string]:boolean`
    structure. If the Boolean is true, then, it means that the validator failed (that
    is, the field is not valid). Moving on to the `MovieIDValidator` class itself,
    we have a static method returning a `ValidationResult` and accepting as a parameter
    a `FormControl`. Inside this method, we pull all the movies from our JSON file
    containing the Marvel Cinematic Universe. Then, we iterate over all the movies
    and check if the current value of the `movie_id` field matches an existing id.
    If so, we return `{ "idNotTaken": true }`, meaning that there is a problem with
    the `idNotTaken` validator. Combining this new custom validator with the other
    four (that is `Validators.required`, `Validators.minLength`, `Validators.maxLength`,
    and `Validators.pattern`) is a piece of cake:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '在这里，我们可以看到验证结果实际上是一个简单的`[key:string]:boolean`结构。如果布尔值为true，则意味着验证器失败（即字段无效）。接下来是`MovieIDValidator`类本身，我们有一个静态方法返回`ValidationResult`，并接受`FormControl`作为参数。在这个方法中，我们从包含漫威电影宇宙的JSON文件中提取所有电影。然后，我们遍历所有电影，并检查`movie_id`字段的当前值是否与现有ID匹配。如果是，我们返回`{
    "idNotTaken": true }`，这意味着`idNotTaken`验证器存在问题。将这个新的自定义验证器与其他四个（即`Validators.required`、`Validators.minLength`、`Validators.maxLength`和`Validators.pattern`）结合起来非常容易：'
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We can also add an asynchronous form validator that returns a Promise (for example
    `Promise<ValidationResult>` instead of `ValidationResult`). This is very handy
    when you have to do your validation using a remote API.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以添加一个异步表单验证器，它返回一个Promise（例如`Promise<ValidationResult>`而不是`ValidationResult`）。当您必须使用远程API进行验证时，这非常方便。
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, we build a Promise that simulates a remote API call with a 1-second timeout.
    What the Promise does is the same thing as `idNotTaken`, where we check if an
    id for a movie is already taken. After the Promise creation, we return it so it
    can be used in the related component.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们构建了一个模拟远程API调用的Promise，超时为1秒。Promise的作用与`idNotTaken`相同，我们检查电影的ID是否已经被使用。创建Promise后，我们将其返回，以便在相关组件中使用。
- en: Two-way Data Binding with ngModel
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ngModel进行双向数据绑定
- en: 'A very convenient process when creating or updating the model of your Angular
    application through forms is Two-way Data Binding with `ngModel`. In the previous
    application, we had the following `submit()` method:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过表单创建或更新Angular应用程序的模型时，使用`ngModel`进行双向数据绑定非常方便。在前一个应用程序中，我们有以下`submit()`方法：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: To the experimented eye, this looks clumsy. Indeed, we knew that we'd ask the
    user for a new movie. Hence, all the fields will be displayed and their value
    used to create the aforementioned movie. Using Two-way Data Binding, you can specify
    a binding between each HTML input and an attribute of your model. In our case,
    this is an attribute of the `Movie` object.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于经验丰富的人来说，这看起来很笨拙。事实上，我们知道我们会要求用户输入一个新电影。因此，所有字段都将被显示，并且它们的值将用于创建上述电影。使用双向数据绑定，您可以指定每个HTML输入与模型属性之间的绑定。在我们的情况下，这是`Movie`对象的一个属性。
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Have a look at the `[(ngModel)]` directive. Here, we bind one way using `[]`
    and the other way using `()`. One way is the model of the form and the other way
    is from the form to the model. It means that any modification made to the form
    will impact the model and any modification made to the model will be reflected
    on the form.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下`[(ngModel)]`指令。在这里，我们使用`[]`单向绑定，使用`()`另一种方式。一种方式是表单的模型，另一种方式是从表单到模型。这意味着对表单所做的任何修改都会影响模型，对模型所做的任何修改都会反映在表单上。
- en: 'Now, our submit method can be reduced to the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的提交方法可以简化为以下内容：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: One important thing to keep in mind is that the values of the form will be transferred
    to the model even if the validators are not valid. For example, if you were to
    enter `ABC` into the `movie_id` field, then the `validators` will not be valid
    but `console.log(this.movie.movie_id)` will display `ABC`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要牢记的一点是，即使验证器无效，表单的值也会传递到模型。例如，如果您在`movie_id`字段中输入`ABC`，则`validators`将无效，但`console.log(this.movie.movie_id)`将显示`ABC`。
- en: Keeping things neat (extra credit)
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持整洁（额外学分）
- en: 'I have always found that forms are the bane of clean, neat, organized HTML
    templates. Even small forms, well indented and separated by comments, look cluttered
    to my eyes. To solve this problem in an Angular way, we can create directives
    that keep forms input organized. Here''s an example of what I use when creating
    a form for `Toolwatch.io`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直发现表单是干净、整洁、有组织的HTML模板的大敌。即使是小型表单，也经过良好的缩进和注释分隔，但在我看来，它们看起来也很凌乱。为了以Angular的方式解决这个问题，我们可以创建指令来保持表单输入的有序。以下是我在为`Toolwatch.io`创建表单时使用的示例：
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you can see, the directive accepts a different `@Input` parameter that controls
    how the input will look and behave.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，该指令接受一个不同的`@Input`参数，控制输入的外观和行为。
- en: 'Here''s the related component:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相关的组件：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This component accepts, as inputs, the following attributes:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件接受以下属性作为输入：
- en: '`id`: The `id` for the input'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：输入的`id`'
- en: '`control`: `FormControl` controlling this input'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`control`：控制此输入的`FormControl`'
- en: '`model`: Bound model field'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model`：绑定的模型字段'
- en: '`type`: Input type'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`：输入类型'
- en: '`label`: Label to display'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`：要显示的标签'
- en: '`errorLabel`: Error label to display'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`errorLabel`：要显示的错误标签'
- en: '`formControlName`: Name of the form control'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`formControlName`：表单控件的名称'
- en: '`submitAttempt`: If the form has been submitted once'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`submitAttempt`：如果表单已经提交过一次'
- en: '`autoCapitalize`: HTML attribute for `autoCapitalize` on/off'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoCapitalize`：`autoCapitalize`的HTML属性开/关'
- en: '`autoCorrect`: HTML attribute for `autoCorrect` on/off'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoCorrect`：`autoCorrect`的HTML属性开/关'
- en: '`autoComplete`: HTML attribute for `autoComplete` on/off'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoComplete`：`autoComplete`的HTML属性开/关'
- en: '`spellCheck`: HTML attribute for `spellCheck` on/off'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spellCheck`：`spellCheck`的HTML属性开/关'
- en: Also, it initializes the value of `label`,`errorLabel`, and `formControlName`
    with the value of `id` if they are not provided. Finally, the component also has
    a `@Output` attribute named `update` that emits an event when the `value` changes,
    so you can register for it.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 它还使用`id`的值初始化了`label`、`errorLabel`和`formControlName`的值，如果它们没有提供。最后，该组件还有一个名为`update`的`@Output`属性，在`value`更改时会触发事件，因此您可以注册它。
- en: 'On the HTML side, we have something like the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML端，我们有类似以下的内容：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The main advantage is that HTML and CSS class managements are encapsulated away
    and I don't have to copy and paste them every time I want an input.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 主要优势在于HTML和CSS类管理被封装起来，我不必每次想要输入时都复制粘贴它们。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to take advantages of reactive forms. Reactive
    forms can be created manually or programmatically using `FormBuilder`. Moreover,
    we tackled the reactive part of reactive forms by emphasizing the relationship
    between your HTML models and your `ngModel`, so every change on a given form is
    propagated to the model. We also saw how to customize validations and embed our
    newly acquired knowledge about forms in clean, reusable directives.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何利用响应式表单的优势。响应式表单可以手动创建，也可以使用`FormBuilder`进行程序化创建。此外，我们强调了响应式表单的响应式部分，强调了HTML模型和`ngModel`之间的关系，因此给定表单上的每个更改都会传播到模型上。我们还看到了如何自定义验证并将我们新获得的关于表单的知识嵌入到清晰、可重用的指令中。
- en: In the next chapter, we will learn how to integrate material design with Angular
    in order to create dashing and responsive applications.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何将Material Design与Angular集成，以创建出色且响应灵敏的应用程序。
