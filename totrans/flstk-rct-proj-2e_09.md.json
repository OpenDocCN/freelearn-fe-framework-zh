["```js\neducator: {\n    type: Boolean,\n    default: false\n}\n```", "```js\n...\nl\n      token,\n      user: {\n        _id: user._id,\n        name: user.name,\n        email: user.email,\n        educator: user.educator\n      }\n    })\n...\n} \n```", "```js\n<Typography variant=\"subtitle1\" className={classes.subheading}>\n     I am an Educator\n</Typography>\n<FormControlLabel\n     control={\n             <Switch classes={{\n                                checked: classes.checked,\n                                bar: classes.bar,\n                              }}\n                      checked={values.educator}\n                      onChange={handleCheck}\n             />}\n     label={values.educator? 'Yes' : 'No'}\n/>\n```", "```js\nconst handleCheck = (event, checked) => {\n   setValues({...values, 'educator': checked})\n} \n```", "```js\nclickSubmit = () => {\n    const jwt = auth.isAuthenticated() \n    const user = {\n      name: this.state.name || undefined,\n      email: this.state.email || undefined,\n      password: this.state.password || undefined,\n      educator: values.educator || undefined\n    }\n    update({\n      userId: this.match.params.userId\n    }, {\n      t: jwt.token\n    }, user).then((data) => {\n      if (data.error) {\n        this.setState({error: data.error})\n      } else {\n        auth.updateUser(data, ()=> {\n setValues({...values, userId: data._id, redirectToProfile: true})\n })\n      }\n    })\n  }\n```", "```js\nupdateUser(user, cb) {\n  if(typeof window !== \"undefined\"){\n    if(sessionStorage.getItem('jwt')){\n       let auth = JSON.parse(sessionStorage.getItem('jwt'))\n       auth.user = user\n       sessionStorage.setItem('jwt', JSON.stringify(auth))\n       cb()\n     }\n  }\n}\n```", "```js\n{auth.isAuthenticated() && (<span>\n    {auth.isAuthenticated().user.educator && \n       (<Link to=\"/teach/courses\">\n           <Button style={isPartActive(history, \"/teach/\")}>\n               <Library/> Teach </Button>\n        </Link>)\n    }\n    ...\n}\n```", "```js\nname: { \n    type: String, \n    trim: true, \n    required: 'Name is required' \n},\ndescription: { \n    type: String, \n    trim: true \n},\n```", "```js\nimage: { \n    data: Buffer, \n    contentType: String \n},\n```", "```js\ncategory: {\n  type: String,\n  required: 'Category is required'\n},\n```", "```js\npublished: {\n  type: Boolean,\n  default: false\n},\n```", "```js\ninstructor: {\n    type: mongoose.Schema.ObjectId, \n    ref: 'User'\n}\n```", "```js\nupdated: Date,\ncreated: { \n    type: Date, \n    default: Date.now \n},\n```", "```js\nrouter.route('/api/courses/by/:userId')\n  .post(authCtrl.requireSignin, authCtrl.hasAuthorization, \n         userCtrl.isEducator, \n          courseCtrl.create)\n```", "```js\napp.use('/', courseRoutes)\n```", "```js\nconst isEducator = (req, res, next) => {\n  const isEducator = req.profile && req.profile.educator\n  if (!isEducator) {\n     return res.status('403').json({\n        error: \"User is not an educator\"\n     })\n  }\n  next()\n}\n```", "```js\nconst create = (req, res) => {\n  let form = new formidable.IncomingForm()\n  form.keepExtensions = true\n  form.parse(req, async (err, fields, files) => {\n    if (err) {\n      return res.status(400).json({\n        error: \"Image could not be uploaded\"\n      })\n    }\n    let course = new Course(fields)\n    course.instructor= req.profile\n    if(files.image){\n      course.image.data = fs.readFileSync(files.image.path)\n      course.image.contentType = files.image.type\n    }\n    try {\n      let result = await course.save()\n      res.json(result)\n    }catch (err){\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n  })\n}\n```", "```js\nconst create = async (params, credentials, course) => {\n    try {\n        let response = await fetch('/api/courses/by/'+ params.userId, {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Bearer ' + credentials.t\n          },\n          body: course\n        })\n          return response.json()\n        } catch(err) { \n          console.log(err)\n        }\n}\n```", "```js\nexport default function NewCourse() {\n  ...  \n  const [values, setValues] = useState({\n    name: '',\n    description: '',\n    image: '',\n    category: '',\n    redirect: false,\n    error: ''\n  })\n  ...\n}\n```", "```js\n<input accept=\"image/*\" onChange={handleChange('image')} \n                        type=\"file\" style={display:'none'} />\n<label htmlFor=\"icon-button-file\">\n     <Button variant=\"contained\" color=\"secondary\" component=\"span\">\n         Upload Photo <FileUpload/>\n     </Button>\n</label> \n<span>{values.image ? values.image.name : ''}</span>\n\n```", "```js\n<TextField \n    id=\"name\" \n    label=\"Name\" \n    value={values.name} onChange={handleChange('name')}/> <br/>\n<TextField\n    id=\"multiline-flexible\"\n    label=\"Description\"\n    multiline\n    rows=\"2\"\n    value={values.description}\n    onChange={handleChange('description')}/> <br/>\n<TextField \n    id=\"category\" \n    label=\"Category\" \n    value={values.category} \n    onChange={handleChange('category')}/> \n```", "```js\nconst handleChange = name => event => {\n    const value = name === 'image'\n      ? event.target.files[0]\n      : event.target.value\n    setValues({...values, [name]: value })\n}\n```", "```js\nconst clickSubmit = () => {\n    let courseData = new FormData()\n    values.name && courseData.append('name', values.name)\n    values.description && courseData.append('description',\n       values.description)\n    values.image && courseData.append('image', values.image)\n    values.category && courseData.append('category', values.category)\n    create({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, courseData).then((data) => {\n      if (data.error) {\n        setValues({...values, error: data.error})\n      } else {\n        setValues({...values, error: '', redirect: true})\n      }\n    })\n}\n```", "```js\nif (values.redirect) {\n      return (<Redirect to={'/teach/courses'}/>)\n}\n```", "```js\n<PrivateRoute path=\"/teach/course/new\" component={NewCourse}/>\n```", "```js\nrouter.route('/api/courses/by/:userId')\n  .get(authCtrl.requireSignin, \n            authCtrl.hasAuthorization, \n               courseCtrl.listByInstructor)\n```", "```js\nrouter.param('userId', userCtrl.userByID) \n```", "```js\nconst listByInstructor = (req, res) => {\n  Course.find({instructor: req.profile._id}, (err, courses) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(courses)\n  }).populate('instructor', '_id name')\n}\n```", "```js\nconst listByInstructor = async (params, credentials, signal) => {\n    try {\n      let response = await fetch('/api/courses/by/'+params.userId, {\n        method: 'GET',\n        signal: signal,\n        headers: {\n          'Accept': 'application/json',\n          'Authorization': 'Bearer ' + credentials.t\n        }\n      })\n      return response.json()\n    } catch(err) {\n      console.log(err)\n    }\n}\n```", "```js\nexport default function MyCourses(){\n  const [courses, setCourses] = useState([])\n  const [redirectToSignin, setRedirectToSignin] = useState(false)\n  const jwt = auth.isAuthenticated()\n\n  useEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n    listByInstructor({\n      userId: jwt.user._id\n    }, {t: jwt.token}, signal).then((data) => {\n      if (data.error) {\n        setRedirectToSignin(true)\n      } else {\n        setCourses(data)\n      }\n    })\n    return function cleanup(){\n      abortController.abort()\n    }\n  }, [])\n  if (redirectToSignin) {\n    return <Redirect to='/signin'/>\n  }\n  ...\n}\n```", "```js\n{courses.map((course, i) => {\n   return <Link to={\"/teach/course/\"+course._id} key={i}>\n            <ListItem button>\n              <ListItemAvatar>\n                <Avatar src={'/api/courses/photo/'+course._id+\"?\" + \n                                        new Date().getTime()}/>\n              </ListItemAvatar>\n              <ListItemText primary={course.name} \n                            secondary={course.description}/>\n            </ListItem>\n            <Divider/>\n          </Link>}\n       )\n}\n```", "```js\n<PrivateRoute path=\"/seller/courses\" component={MyCourses}/>\n```", "```js\nrouter.route('/api/courses/:courseId')\n  .get(courseCtrl.read)\nrouter.param('courseId', courseCtrl.courseByID)\n```", "```js\nconst courseByID = async (req, res, next, id) => {\n  try {\n    let course = await Course.findById(id)\n                             .populate('instructor', '_id name')\n    if (!course)\n      return res.status('400').json({\n        error: \"Course not found\"\n      })\n    req.course = course\n    next()\n  } catch (err) {\n    return res.status('400').json({\n      error: \"Could not retrieve course\"\n    })\n  }\n}\n```", "```js\nconst read = (req, res) => {\n  req.course.image = undefined\n  return res.json(req.course)\n}\n```", "```js\nexport default function Course ({match}) {  \n  const [course, setCourse] = useState({instructor:{}})\n  const [values, setValues] = useState({\n      error: ''\n  }) \n  useEffect(() => {\n      const abortController = new AbortController()\n      const signal = abortController.signal\n\n      read({courseId: match.params.courseId}, signal).then((data) => {\n        if (data.error) {\n          setValues({...values, error: data.error})\n        } else {\n          setCourse(data)\n        }\n      })\n    return function cleanup(){\n      abortController.abort()\n    }\n  }, [match.params.courseId])\n...\n}\n```", "```js\n<Card>\n    <CardHeader\n          title={course.name}\n          subheader={<div>\n                        <Link to={\"/user/\"+course.instructor._id}>\n                           By {course.instructor.name}\n                        </Link>\n                        <span>{course.category}</span>\n                     </div>\n                    }\n    />\n    <CardMedia image={imageUrl} title={course.name} />\n    <div>\n         <Typography variant=\"body1\">\n              {course.description}\n         </Typography>\n    </div>\n</Card>\n```", "```js\nconst imageUrl = course._id\n          ? `/api/courses/photo/${course._id}?${new Date().getTime()}`\n          : '/api/courses/defaultphoto'\n```", "```js\n{auth.isAuthenticated().user && auth.isAuthenticated().user._id == course.instructor._id &&\n    (<span><Link to={\"/teach/course/edit/\" + course._id}>\n               <IconButton aria-label=\"Edit\" color=\"secondary\">\n                  <Edit/>\n               </IconButton>\n           </Link>\n     </span>)\n}\n```", "```js\n<Route path=\"/course/:courseId\" component={Course}/>\n```", "```js\nconst LessonSchema = new mongoose.Schema({\n  title: String,\n  content: String,\n  resource_url: String\n})\nconst Lesson = mongoose.model('Lesson', LessonSchema)\n```", "```js\nlessons: [LessonSchema]\n```", "```js\nrouter.route('/api/courses/:courseId/lesson/new')\n  .put(authCtrl.requireSignin, \n                    courseCtrl.isInstructor,         \n                          courseCtrl.newLesson)\n```", "```js\nconst isInstructor = (req, res, next) => {\n    const isInstructor = req.course && req.auth &&     \n                         req.course.instructor._id == req.auth._id\n    if(!isInstructor){\n      return res.status('403').json({\n        error: \"User is not authorized\"\n      })\n    }\n    next()\n}\n```", "```js\nconst newLesson = async (req, res) => {\n  try {\n    let lesson = req.body.lesson\n    let result = await Course.findByIdAndUpdate(req.course._id, \n                                              {$push: {lessons: lesson}, \n                                                updated: Date.now()}, \n                                                {new: true})\n                            .populate('instructor', '_id name')\n                            .exec()\n    res.json(result)\n  } catch (err) {\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nexport default function NewLesson(props) {\n  const [open, setOpen] = useState(false)\n  const [values, setValues] = useState({\n    title: '',\n    content: '',\n    resource_url: ''\n  })\n...\n}\nNewLesson.propTypes = {\n    courseId: PropTypes.string.isRequired,\n    addLesson: PropTypes.func.isRequired\n}\n```", "```js\n<Button aria-label=\"Add Lesson\" color=\"primary\" variant=\"contained\" \n        onClick={handleClickOpen}>\n   <Add/> New Lesson\n</Button>\n<Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-   title\">\n   <div className={classes.form}>\n      <DialogTitle id=\"form-dialog-title\">Add New Lesson</DialogTitle>\n            ...\n      <DialogActions>\n        <Button onClick={handleClose} \n           color=\"primary\" variant=\"contained\">\n            Cancel\n        </Button>\n        <Button onClick={clickSubmit} \n            color=\"secondary\" variant=\"contained\">\n            Add\n        </Button>\n      </DialogActions>\n   </div>\n</Dialog>\n```", "```js\nconst handleClickOpen = () => {\n   setOpen(true)\n}\n\nconst handleClose = () => {\n   setOpen(false)\n}\n```", "```js\n<DialogContent>\n     <TextField label=\"Title\" type=\"text\" fullWidth\n                value={values.title} onChange={handleChange('title')} />\n     <br/>\n     <TextField label=\"Content\" type=\"text\" multiline rows=\"5\" fullWidth\n             value={values.content} onChange={handleChange('content')}/>\n     <br/>\n     <TextField label=\"Resource link\" type=\"text\" fullWidth\n                value={values.resource_url} \n                onChange={handleChange('resource_url')} />\n     <br/>\n</DialogContent>\n```", "```js\nconst handleChange = name => event => {\n    setValues({ ...values, [name]: event.target.value })\n}\n```", "```js\nconst clickSubmit = () => {\n    const jwt = auth.isAuthenticated()\n    const lesson = {\n      title: values.title || undefined,\n      content: values.content || undefined,\n      resource_url: values.resource_url || undefined\n    }\n    newLesson({\n      courseId: props.courseId\n    }, {\n      t: jwt.token\n    }, lesson).then((data) => {\n      if (data && data.error) {\n        setValues({...values, error: data.error})\n      } else {\n          props.addLesson(data)\n          setValues({...values, title: '',\n          content: '',\n          resource_url: ''})\n          setOpen(false)\n      }\n    })\n  }\n```", "```js\nconst addLesson = (course) => {\n    setCourse(course)\n}\n```", "```js\n{ auth.isAuthenticated().user && \n  auth.isAuthenticated().user._id == course.instructor._id && \n  !course.published &&\n            (<NewLesson courseId={course._id} addLesson={addLesson}/>)\n}\n```", "```js\n<List>\n    {course.lessons && course.lessons.map((lesson, index) => {\n       return(<span key={index}>\n                   <ListItem>\n                      <ListItemAvatar>\n                        <Avatar> {index+1} </Avatar>\n                      </ListItemAvatar>\n                      <ListItemText primary={lesson.title} />\n                   </ListItem>\n                   <Divider variant=\"inset\" component=\"li\" />\n              </span>)\n    })}\n</List>\n```", "```js\nrouter.route('/api/courses/:courseId')\n  .put(authCtrl.requireSignin, courseCtrl.isInstructor, \n            courseCtrl.update)\n```", "```js\nconst update = (req, res) => {\n  let form = new formidable.IncomingForm()\n  form.keepExtensions = true\n  form.parse(req, async (err, fields, files) => {\n    if (err) {\n      return res.status(400).json({\n        error: \"Photo could not be uploaded\"\n      })\n    }\n    let course = req.course\n    course = extend(course, fields)\n    if(fields.lessons){\n course.lessons = JSON.parse(fields.lessons)\n }\n    course.updated = Date.now()\n    if(files.image){\n      course.image.data = fs.readFileSync(files.image.path)\n      course.image.contentType = files.image.type\n    }\n    try {\n      await course.save()\n      res.json(course)\n    } catch (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n  })\n}\n\n```", "```js\n  useEffect(() => {\n      const abortController = new AbortController()\n      const signal = abortController.signal\n\n      read({courseId: match.params.courseId}, signal).then((data) => {\n        if (data.error) {\n          setValues({...values, error: data.error})\n        } else {\n          setCourse(data)\n        }\n      })\n    return function cleanup(){\n      abortController.abort()\n    }\n  }, [match.params.courseId])\n```", "```js\n<CardHeader title={<TextField label=\"Title\" type=\"text\" fullWidth\n    value={course.name} onChange={handleChange('name')}/>}\n            subheader={<div><Link to={\"/user/\"+course.instructor._id}>\n                               By {course.instructor.name}\n                            </Link>\n  {<TextField label=\"Category\" type=\"text\" fullWidth\n      value={course.category} \n        onChange={handleChange('category')}/>}\n                       </div>}\n            action={<Button variant=\"contained\" color=\"secondary\" \n                            onClick={updateCourse}>Save</Button>}\n/>\n<div className={classes.flex}>\n   <CardMedia image={imageUrl} title={course.name}/>\n   <div className={classes.details}>\n      <TextField multiline rows=\"5\" label=\"Description\" type=\"text\"\n                 value={course.description} \n                 onChange={handleChange('description')} /><br/>\n      <input accept=\"image/*\" \n         onChange={handleChange('image')}  type=\"file\" />\n      <label htmlFor=\"icon-button-file\">\n        <Button variant=\"outlined\" color=\"secondary\" component=\"span\">\n          Change Photo\n          <FileUpload/>\n        </Button>\n      </label> <span>{course.image ? course.image.name : ''}</span><br/>\n   </div>\n</div>\n```", "```js\n  const handleChange = name => event => {\n    const value = name === 'image'\n    ? event.target.files[0]\n    : event.target.value\n    setCourse({ ...course, [name]: value })\n  }\n```", "```js\nconst clickSubmit = () => {\n    let courseData = new FormData()\n    course.name && courseData.append('name', course.name)\n    course.description && courseData.append('description'\n        , course.description)\n    course.image && courseData.append('image', course.image)\n    course.category && courseData.append('category', course.category)\n    courseData.append('lessons', JSON.stringify(course.lessons))\n    update({\n        courseId: match.params.courseId\n      }, {\n        t: jwt.token\n      }, courseData).then((data) => {\n        if (data && data.error) {\n            console.log(data.error)\n          setValues({...values, error: data.error})\n        } else {\n          setValues({...values, redirect: true})\n        }\n      })\n  }\n```", "```js\n<PrivateRoute path=\"/teach/course/edit/:courseId\" component={EditCourse}/>\n```", "```js\n<ListItemText\n  primary={<><TextField label=\"Title\" type=\"text\" fullWidth\n                        value={lesson.title} \n                        onChange={handleLessonChange('title', index)} />\n                        <br/>\n            <TextField multiline rows=\"5\" label=\"Content\" type=\"text\"\n                       fullWidth value={lesson.content} \n                       onChange={handleLessonChange('content', index)}/>\n                       <br/>\n             <TextField label=\"Resource link\" type=\"text\" fullWidth\n                        value={lesson.resource_url} \n                  onChange={handleLessonChange('resource_url', index)}/>\n                  <br/>\n          </>}\n/>\n```", "```js\nconst handleLessonChange = (name, index) => event => {\n    const lessons = course.lessons\n    lessons[index][name] = event.target.value\n    setCourse({ ...course, lessons: lessons })\n}\n```", "```js\n{ index != 0 && \n    <IconButton color=\"primary\" onClick={moveUp(index)}>\n         <ArrowUp />\n    </IconButton>\n}\n```", "```js\nconst moveUp = index => event => {\n      const lessons = course.lessons\n      const moveUp = lessons[index]\n      lessons[index] = lessons[index-1]\n      lessons[index-1] = moveUp\n      setCourse({ ...course, lessons: lessons })\n}\n```", "```js\n<ListItemSecondaryAction>\n     <IconButton edge=\"end\" aria-label=\"up\" color=\"primary\" \n                onClick={deleteLesson(index)}>\n           <DeleteIcon />\n     </IconButton>\n</ListItemSecondaryAction>}\n```", "```js\nconst deleteLesson = index => event => {\n    const lessons = course.lessons\n    lessons.splice(index, 1)\n    setCourse({...course, lessons:lessons})\n}\n```", "```js\nrouter.route('/api/courses/:courseId')\n  .delete(authCtrl.requireSignin, courseCtrl.isInstructor, \n            courseCtrl.remove)\n```", "```js\nconst remove = async (req, res) => {\n  try {\n    let course = req.course\n    let deleteCourse = await course.remove()\n    res.json(deleteCourse)\n  } catch (err) {\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\n<DeleteCourse course={course} onRemove={removeCourse}/>\n```", "```js\n{ !course.published ? \n            (<> <Button color=\"secondary\" variant=\"outlined\" \n                        onClick={clickPublish}>\n                   { course.lessons.length == 0 ? \n                           \"Add atleast 1 lesson to publish\" \n                           : \"Publish\" }\n                </Button>\n                <DeleteCourse course={course} onRemove={removeCourse}/>\n            </>) : (\n                  <Button color=\"primary\" \n                          variant=\"outlined\">Published</Button>\n            )\n}\n```", "```js\nconst clickPublish = () => {\n    if(course.lessons.length > 0){ \n      setOpen(true)\n    }\n  }\n```", "```js\n<Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n   <DialogTitle id=\"form-dialog-title\">Publish Course</DialogTitle>\n   <DialogContent>\n      <Typography variant=\"body1\">\n         Publishing your course will make it live to students \n            for enrollment.            \n      </Typography>\n      <Typography variant=\"body1\">\n         Make sure all lessons are added and ready for publishing.\n      </Typography>\n   </DialogContent>\n   <DialogActions>\n      <Button onClick={handleClose} color=\"primary\" variant=\"contained\">\n         Cancel\n      </Button>\n      <Button onClick={publish} color=\"secondary\" variant=\"contained\">\n          Publish\n      </Button>\n   </DialogActions>\n</Dialog>\n```", "```js\n  const publish = () => {\n    let courseData = new FormData()\n      courseData.append('published', true)\n      update({\n          courseId: match.params.courseId\n        }, {\n          t: jwt.token\n        }, courseData).then((data) => {\n          if (data && data.error) {\n            setValues({...values, error: data.error})\n          } else {\n            setCourse({...course, published: true})\n            setOpen(false)\n          }\n      })\n  }\n```", "```js\nrouter.route('/api/courses/published')\n  .get(courseCtrl.listPublished)\n```", "```js\nconst listPublished = (req, res) => {\n  Course.find({published: true}, (err, courses) => {\n    if (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n    res.json(courses)\n  }).populate('instructor', '_id name')\n}\n```", "```js\n  useEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n    listPublished(signal).then((data) => {\n      if (data.error) {\n        console.log(data.error)\n      } else {\n        setCourses(data)\n      }\n    })\n    return function cleanup(){\n      abortController.abort()\n    }\n  }, [])\n```", "```js\n<Courses courses={courses} />\n```", "```js\nexport default function Courses(props){\n  return (\n    <GridList cellHeight={220} cols={2}>\n       {props.courses.map((course, i) => {\n          return (\n            <GridListTile key={i} style={{padding:0}}>\n              <Link to={\"/course/\"+course._id}>\n                <img src={'/api/courses/photo/'+course._id} \n                            alt={course.name} />\n              </Link>\n              <GridListTileBar \n                 title={<Link to={\"/course/\"+course._id}>\n                            {course.name}</Link>}\n                 subtitle={<span>{course.category}</span>}\n                 actionIcon={auth.isAuthenticated() ? \n                                <Enroll courseId={course._id}/> : \n                                <Link to=\"/signin\">\n                                    Sign in to Enroll</Link>\n                            }\n              />\n            </GridListTile>)\n       })}\n    </GridList>\n  )\n}\nCourses.propTypes = {\n  courses: PropTypes.array.isRequired\n}\n```", "```js\ncourse: {\n    type: mongoose.Schema.ObjectId, \n    ref: 'Course'\n}\n```", "```js\nstudent: {\n    type: mongoose.Schema.ObjectId, \n    ref: 'User'\n}\n```", "```js\nlessonStatus: [{\n      lesson: {type: mongoose.Schema.ObjectId, ref: 'Lesson'}, \n      complete: Boolean\n}]\n```", "```js\nenrolled: {\n    type: Date,\n    default: Date.now\n}\n```", "```js\nupdated: Date\n```", "```js\ncompleted: Date\n```", "```js\nrouter.route('/api/enrollment/new/:courseId')\n  .get(authCtrl.requireSignin, enrollmentCtrl.findEnrollment, enrollmentCtrl.create)\nrouter.param('courseId', courseCtrl.courseByID)\n```", "```js\nconst findEnrollment = async (req, res, next) => {\n  try {\n    let enrollments = await Enrollment.find({course:req.course._id, \n                                             student: req.auth._id})\n    if(enrollments.length == 0){\n      next()\n    }else{\n      res.json(enrollments[0])\n    }\n  } catch (err) {\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst create = async (req, res) => {\n  let newEnrollment = {\n    course: req.course,\n    student: req.auth,\n  }\n  newEnrollment.lessonStatus = req.course.lessons.map((lesson)=>{\n    return {lesson: lesson, complete:false}\n  })\n  const enrollment = new Enrollment(newEnrollment)\n  try {\n    let result = await enrollment.save()\n    return res.status(200).json(result)\n  } catch (err) {\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\napp.use('/', enrollmentRoutes)\n```", "```js\nexport default function Enroll(props) {\n  const [values, setValues] = useState({\n    enrollmentId: '',\n    error: '',\n    redirect: false\n  })\n  if(values.redirect){\n     return (<Redirect to={'/learn/'+values.enrollmentId}/>)\n  }\n  return (\n      <Button variant=\"contained\" color=\"secondary\" \n              onClick={clickEnroll}> Enroll </Button>\n  )\n```", "```js\n const clickEnroll = () => {\n    const jwt = auth.isAuthenticated()\n    create({\n      courseId: props.courseId\n    }, {\n      t: jwt.token\n    }).then((data) => {\n        console.log(data)\n      if (data && data.error) {\n        setValues({...values, error: data.error})\n      } else {\n        setValues({...values, enrollmentId: data._id, redirect: true})\n      }\n    })\n  }\n```", "```js\nEnroll.propTypes = {\n  courseId: PropTypes.string.isRequired\n}\n```", "```js\nrouter.route('/api/enrollment/:enrollmentId')\n  .get(authCtrl.requireSignin, enrollmentCtrl.isStudent, \n               enrollmentCtrl.read)\nrouter.param('enrollmentId', enrollmentCtrl.enrollmentByID)\n```", "```js\nconst enrollmentByID = async (req, res, next, id) => {\n  try {\n    let enrollment = await Enrollment.findById(id)\n                          .populate({path: 'course', populate:{ \n                                                   path: 'instructor'}})\n .populate('student', '_id name')\n    if (!enrollment)\n      return res.status('400').json({\n        error: \"Enrollment not found\"\n      })\n    req.enrollment = enrollment\n    next()\n  } catch (err) {\n    return res.status('400').json({\n      error: \"Could not retrieve enrollment\"\n    })\n  }\n}\n```", "```js\nconst isStudent = (req, res, next) => {\n  const isStudent = req.auth && req.auth._id == \n                                req.enrollment.student._id\n  if (!isStudent) {\n    return res.status('403').json({\n      error: \"User is not enrolled\"\n    })\n  }\n  next()\n}\n```", "```js\nconst read = (req, res) => {\n  return res.json(req.enrollment)\n}\n```", "```js\nexport default function Enrollment ({match}) {\n  const [enrollment, setEnrollment] = useState({course:{instructor:[]}, \n                                                lessonStatus: []})\n  const [values, setValues] = useState({\n      redirect: false,\n      error: '',\n      drawer: -1\n    })\n  const jwt = auth.isAuthenticated()\n  useEffect(() => {\n      const abortController = new AbortController()\n      const signal = abortController.signal\n      read({enrollmentId: match.params.enrollmentId}, \n           {t: jwt.token}, signal).then((data) => {\n             if (data.error) {\n              setValues({...values, error: data.error})\n             } else {\n              setEnrollment(data)\n             }\n      })\n      return function cleanup(){\n          abortController.abort()\n      }\n  }, [match.params.enrollmentId])\n....\n```", "```js\n<Drawer variant=\"permanent\">\n    <div className={classes.toolbar} />\n    <List>\n      <ListItem button onClick={selectDrawer(-1)} \n        className={values.drawer == -1 ? \n                    classes.selectedDrawer : classes.unselected}>\n        <ListItemIcon><Info /></ListItemIcon>\n        <ListItemText primary={\"Course Overview\"} />\n      </ListItem>\n    </List>\n    <Divider />\n    <List>\n      <ListSubheader component=\"div\">\n          Lessons\n      </ListSubheader>\n      {enrollment.lessonStatus.map((lesson, index) => (\n          <ListItem button key={index} onClick={selectDrawer(index)} \n                    className={values.drawer == index ? \n                           classes.selectedDrawer : classes.unselected}>\n            <ListItemAvatar> \n                <Avatar> {index+1} </Avatar> \n            </ListItemAvatar>\n            <ListItemText \n                primary={enrollment.course.lessons[index].title} />\n            <ListItemSecondaryAction> { lesson.complete ? \n                <CheckCircle/> : <RadioButtonUncheckedIcon />}\n            </ListItemSecondaryAction>\n          </ListItem>\n      ))}\n    </List>\n    <Divider />\n</Drawer>\n```", "```js\nconst selectDrawer = (index) => event => {\n   setValues({...values, drawer:index})\n}\n```", "```js\n{ values.drawer == - 1 && (Overview of course) }\n{ values.drawer != - 1 && (Individual lesson content based on the index value represented in drawer) }\n```", "```js\n{values.drawer != -1 && (<>\n     <Typography variant=\"h5\">{enrollment.course.name}</Typography>\n     <Card> <CardHeader \n              title={enrollment.course.lessons[values.drawer].title} \n            />\n            <CardContent> \n               <Typography variant=\"body1\">            \n                      {enrollment.course.lessons[values.drawer].content}\n               </Typography>\n            </CardContent>\n            <CardActions>\n               <a href={enrollment.course.lessons[values.drawer].resource_url}>                       \n                    <Button variant=\"contained\" color=\"primary\">\n                        Resource Link</Button>\n               </a>\n            </CardActions>\n     </Card>\n  </>\n)}\n```", "```js\nrouter.route('/api/enrollment/complete/:enrollmentId')\n  .put(authCtrl.requireSignin, \n        enrollmentCtrl.isStudent, \n            enrollmentCtrl.complete)\n```", "```js\nconst complete = async (req, res) => {\n  let updatedData = {}\n  updatedData['lessonStatus.$.complete']= req.body.complete \n  updatedData.updated = Date.now()\n  if(req.body.courseCompleted)\n    updatedData.completed = req.body.courseCompleted\n    try {\n      let enrollment = await \n                        Enrollment.updateOne({'lessonStatus._id':                                                \n                                               req.body.lessonStatusId}, \n                                             {'$set': updatedData})\n      res.json(enrollment)\n    } catch (err) {\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n}\n```", "```js\naction={<Button \n          onClick={markComplete} \n          variant={enrollment.lessonStatus[values.drawer].complete ?                                         \n                            'contained' : 'outlined'} color=\"secondary\">\n          {enrollment.lessonStatus[values.drawer].complete ?\n                            \"Completed\" : \"Mark as complete\"}\n         </Button>}\n```", "```js\nconst markComplete = () => {\n   if(!enrollment.lessonStatus[values.drawer].complete){\n     const lessonStatus = enrollment.lessonStatus\n     lessonStatus[values.drawer].complete = true\n     let count = totalCompleted(lessonStatus)\n     let updatedData = {}\n     updatedData.lessonStatusId = lessonStatus[values.drawer]._id\n     updatedData.complete = true\n     if(count == lessonStatus.length){\n       updatedData.courseCompleted = Date.now()\n     }\n     complete({\n       enrollmentId: match.params.enrollmentId\n      }, {\n        t: jwt.token\n      }, updatedData).then((data) => {\n      if (data && data.error) {\n        setValues({...values, error: data.error})\n      } else {\n        setEnrollment({...enrollment, lessonStatus: lessonStatus})\n      }\n     })\n   }\n}\n```", "```js\nconst totalCompleted = (lessons) => {\n  let count = lessons.reduce((total, lessonStatus) => {\n                   return total + (lessonStatus.complete ? 1 : 0)}, 0)\n  setTotalComplete(count)\n  return count\n}\n```", "```js\nrouter.route('/api/enrollment/enrolled')\n  .get(authCtrl.requireSignin, enrollmentCtrl.listEnrolled)\n```", "```js\nconst listEnrolled = async (req, res) => {\n  try {\n    let enrollments = await Enrollment.find({student: req.auth._id})\n                                            .sort({'completed': 1})\n                                            .populate('course', '_id name category')\n    res.json(enrollments)\n  } catch (err) {\n    console.log(err)\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\n{props.enrollments.map((course, i) => (\n  <GridListTile key={i}>\n     <Link to={\"/learn/\"+course._id}>\n       <img src={'/api/courses/photo/'+course.course._id} \n           alt= {course.course.name} />\n     </Link>\n     <GridListTileBar\n       title={<Link to={\"/learn/\"+course._id}>{course.course.name}</Link>}\n       actionIcon={<div> {course.completed ? \n (<CompletedIcon color=\"secondary\"/>)\n : (<InProgressIcon/>)\n }\n                   </div>}\n     />\n  </GridListTile>\n))}\n```", "```js\nrouter.route('/api/enrollment/stats/:courseId')\n  .get(enrollmentCtrl.enrollmentStats)\n```", "```js\nconst enrollmentStats = async (req, res) => {\n  try {\n    let stats = {}\n    stats.totalEnrolled = await Enrollment.find({course:req.course._id})\n                                          .countDocuments()\n    stats.totalCompleted = await Enrollment.find({course:req.course._id})\n                                         .exists('completed', true)\n                                          .countDocuments()\n    res.json(stats)\n  } catch (err) {\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n} \n```", "```js\n  useEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n    enrollmentStats({courseId: match.params.courseId}, \n                    {t:jwt.token}, signal).then((data) => {\n                      if (data.error) {\n                        setValues({...values, error: data.error})\n                      } else {\n                        setStats(data)\n                      }\n                   })\n    return function cleanup(){\n      abortController.abort()\n    }\n  }, [match.params.courseId])\n```", "```js\n{course.published && \n    (<div> <span> <PeopleIcon /> {stats.totalEnrolled} enrolled </span>\n           <span> <CompletedIcon/> {stats.totalCompleted} completed </span>\n     </div>)\n}\n```"]