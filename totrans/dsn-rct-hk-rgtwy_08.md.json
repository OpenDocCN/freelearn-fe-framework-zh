["```js\n<body>\n  <h1 id=\"title\"></h1>\n</body>\n<script>\n  const el = document.getElementById('#title')\n  el.textContent = \"Hello World\"\n</script>\n```", "```js\nconst Title = () => {\n  const [title, setTitle] = useState(\"\")\n  useEffect(() => { setTitle(\"Hello World\") }, [])\n  return <h1>{title}</h1>\n}\n```", "```js\nconst Title = () => {\n  return <h1 id=\"title\">{title}</h1>\n}\n```", "```js\n  return <h1>{title}</h1>\n```", "```js\nreturn createElement('h1', null, title)\n```", "```js\n  return <h1 ref={ref}>Hello World</h1>\n```", "```js\n  ref = { current: null }\n```", "```js\nfunction commitAttachRef(fiber, instance) {\n  const ref = fiber.ref\n  if (ref !== null) {\n    ref.current = instance\n  }\n}\n```", "```js\nfunction commitDetachRef(fiber) {\n  var ref = fiber.ref\n  if (ref !== null) {\n    ref.current = null\n  }\n}\n```", "```js\nconst Title = () => {\n  const ref = useRef(null)\n  return <h1 ref={ref}>Hello World</h1>\n}\n```", "```js\nfunction useRef(initialValue) {\n  if (isFiberMounting) {\n    return mountRef(initialValue)\n  } else {\n    return updateRef()\n  }\n}\n```", "```js\nfunction mountRef(initialValue) {\n  const hook = mountHook()\n  const ref = { current: initialValue }\n  hook.state = ref\n  return ref\n}\n```", "```js\nfunction updateRef() {\n  const hook = updateHook()\n  return hook.state\n}\n```", "```js\n  ref.current = ...\n```", "```js\nconst Title = () => {\n  const ref = useRef(null)\n  const onClick = () => {\n    ref.current = 'white'\n  }\n  return <Child color={ref} onClick={onClick} />\n}\n```", "```js\nconst Title = () => {\n  const [color, setColor] = useState('')\n  const onClick = () => {\n    setColor('white')\n  }\n  return <Child color={color} onClick={onClick} />\n}\n```", "```js\n  // ref version\n  ref.current = 'white'\n  // state version\n  setColor('white')\n```", "```js\nconst Title = () => {\n  const [obj] = useState({ color: '' })\n  const onClick = () => {\n    obj.color = 'white'    \n  }\n  return <Child color={obj} onClick={onClick} />\n}\n```", "```js\n  obj.color = 'white'\n```", "```js\nconst Title = () => {\n  const ref = useRef()\n  const onClick = () => { \n    ref.current.focus()\n  }\n  return (\n    <>\n      <input ref={ref} />\n      <button onClick={onClick}>focus</button>\n    </>\n  )\n}\n```", "```js\nif (ref.current) ref.current.focus()\n```", "```js\nref.current && ref.current.focus()\n```", "```js\nconst Title = () => {\n  const [focused, setFocused] = useState(false)\n  const ref = useRef()\n  const onClick = () => {\n    ref.current.focus()\n    setFocused(true)\n  }\n  ...\n}\n```", "```js\nconst Child = ({ childRef }) => {\n  return <input ref={childRef} />\n}\n```", "```js\nconst Title = () => {\n  const ref = useRef()\n  const onClick = () => { \n    ref.current.focus()\n  }\n  return (\n    <>\n      <Child childRef={ref} />\n      <button onClick={onClick}>focus</button>\n    </>\n  )\n}\n```", "```js\n  <Child ref={ref} />\n```", "```js\nconst Menu = () => {\n  const [on, setOOn] = useState(true)\n  if (!on) return null\n  return (\n    <ul>\n      <li>Home</li>\n      <li>Price</li>\n      <li>Produce</li>\n      <li>Support</li>\n      <li>About</li>\n    </ul>\n  )\n}\n```", "```js\nconst Menu = () => {\n  const [on, setOn] = useState(true)\n  const ref = useRef()\n  if (!on) return null\n  return (\n    <ul ref={ref}> \n      ...\n    </ul>\n  )\n}\n```", "```js\nconst Menu = () => {\n  const ref = useRef()\n  useEffect(() => {\n    const listener = e => { ... }\n    window.addEventListener('mousedown', listener)\n    return () => {\n      window.removeEventListener('mousedown', listener)\n    }\n  }, [])\n  ...\n}\n```", "```js\n    const listener = e => {\n      if (!ref.current) return\n      if (!ref.current.contains(e.target)) {\n        setOn(false)\n      }\n    }\n```", "```js\nconst Title = () => {\n  const [text, setText] = useState(\"\")\n  useEffect(() => {\n    fetch(\"https://google.com\").then(res => {\n      setText(res.title)\n    })\n  }, [])\n  return <h1>{text}</h1>\n}\n```", "```js\nconst App = ({ flag }) => {\n  if (flag) return <Title />\n  return null\n}\n```", "```js\nconst Title = () => {\n  const [text, setText] = useState(\"\")\n  const mountedRef = useRef(true)\n  useEffect(() => {\n    fetch(\"https://google.com\").then(res => {\n      if (!mountedRef.current) return\n      setText(res.title)\n    })\n    return () => {\n      mountedRef.current = false \n    }\n  }, [])\n}\n```", "```js\nconst Title = () => {\n  const [mounted, setMounted] = useState(true)\n  useEffect(() => {\n    ...\n    return () => {\n      setMounted(false)\n    }\n  }, [])\n}\n```", "```js\nconst App = () => {\n  const [value, setValue] = useState(0)\n  return (\n    <AppContext.Provider value={{ value, setValue }}>\n      ...\n    </AppContext.Provider>\n  )\n}\n```", "```js\nconst App = () => {\n  const value = useRef({\n    count: 1 \n  })\n  const onIncrement = () => {\nvalue.current.count++\n  }\n  return (\n    <AppContext.Provider value={value}>\n      <button onClick={onIncrement}>+<button>\n      <Title />\n    </AppContext.Provider>\n  )\n}\n```", "```js\nconst Title = () => {\n  const { current } = useContext(AppContext)\n  return <div>{current.count}</div>\n}\n```", "```js\nconst Title = () => {\n  const { current } = useContext(AppContext)\n  const [number, setNumber] = useState(current.count) \n  const onClick = () => {\n    setNumber(current.count)\n  }\n  return <button onClick={onClick}>{number}</button>\n}\n```", "```js\nfunction Title() {\n  const [count, setCount] = useState(0)\n  const onClick = () => {\n    setTimeout(() => {\n      console.log('clicked', count) ➀\n      setCount(count + 1)\n    }, 3000)\n  }\n  console.log('updated', count)     ➁\n  return <button onClick={onClick}>+</button>\n} \n```", "```js\n|--------------0-0--0----> clicked  ➀\n0---------------1-1--1---> updated  ➁\n```", "```js\n      0.5s     3.5s\n|-----x-x--x-------------> click\n|--------------0-0--0----> clicked  ➀\nR---------------R-R------> update\n0---------------1-1------> updated  ➁\n```", "```js\n  const onClick = () => {    \n    setTimeout(() => {\n      setCount(0 + 1)        // count = 0\n    }, 3000)\n  }\n```", "```js\nfunction Title() {\n  const [count, setCount] = useState(0)\n  const ref = useRef(0)\n  const onClick = () => {\n    setTimeout(() => {\n      ref.current++\n      setCount(ref.current)\n      console.log('clicked', ref.current) ➀\n    }, 3000)\n  }\n  console.log('updated', count)    ➁\n  ...\n} \n```", "```js\n|-----0.5s-----3.5s------> time\n|-----x-x--x-------------> click\n|--------------1-2--3----> clicked  ➀\nR---------------R-R--R---> update\n0---------------1-2--3---> updated  ➁\n```", "```js\n  const onClick = () => {\n    setTimeout(() => {\n      setCount(v => v + 1)\n    }, 3000)\n  }\n```", "```js\n      setCount(v => { \n        // perform some action\n        // based on the current v\n        return v\n      })\n```", "```js\nfunction commitAttachRef(fiber, instance) {\n  var ref = fiber.ref;\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      ref(instance)\n    } else {\n      ref.current = instance\n    }\n  }\n}\n```", "```js\nfunction commitDetachRef(fiber) {\n  var ref = fiber.ref\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n       ref(null)\n    } else {\n      ref.current = null\n    }\n  }\n}\n```", "```js\nconst Title = () => {\n  const ref = useRef()\n  const onRef = (instance) => {\n    ref.current = instance\n  }\n  return <h1 ref={onRef}>...</h1>\n}\n```", "```js\n  const ref = useRef()\n  const setRef = (r) => {\n    if (...) {\n      ref.current = r\n    } else {\n      …\n    }\n  }\n  return <h1 ref={setRef}>...</h1>\n```", "```js\nfunction Title = () {\n  return ...\n}\n// Not valid declaration\nconst ATitle = new Title()\n// Not valid operation\nATitle.doSomething()\n```", "```js\nreturn <Title ref={ref} />\n```", "```js\nconst Title = React.forwardRef((props, ref) => {\n  return (\n    <h1 ref={ref}>\n      {props.children}\n    </h1>\n  )\n})\n```", "```js\nconst App = () => {\n  const ref = useRef()\n  const onClick = () => {\n    ref.current.textContent = \"Hello\"\n  }\n  return <Title ref={ref} />\n}\n```", "```js\nconst Title = React.forwardRef((props, ref) => {\n  useImperativeHandler(ref, () => ({\n    go: () => { ref.current.focus() }\n  }))\n  return (\n    <h1 ref={ref}>\n      {props.children}\n    </h1>\n  )\n})\n```", "```js\nconst App = () => {\n  const ref = useRef()\n  const onClick = () => {\n    ref.current.go()\n  }\n  return <Title ref={ref} />\n}\n```"]