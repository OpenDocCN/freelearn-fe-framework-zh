- en: Chapter 10. Animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we took a look at react-router and performed routing
    at different levels. We also looked at nested routing, passing around parameters,
    and how react-router maintains history when performing the routing tasks. We learned
    about passing around context and using context to render React components. We
    explored data models and mixed and matched them with other frameworks to use as
    data models in React-like Backbone, and were introduced to Flux.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to explore a fun React add-on, Animation. We will
    start off by continuing with our Cat Pinterest application and enhancing it to
    support starring and sharing the data to update the views. We will then explore
    adding handlers for animation. We will see how components get wrapped for animation
    and how React adds the handlers for different events. We will also explore different
    events and how we can easily enhance our application in order to create stunning
    effects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Making changes to the data flow and passing data from react-router links
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animation in React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transition groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transition handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating our dynamic component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of chapter, we will be able to start animating our React components
    for different actions such as adding new content, changing data and position,
    and so on. We will also be able to add handlers for different types of events
    and explore different animation options out there, other than core animation add-on.
  prefs: []
  type: TYPE_NORMAL
- en: Fun stuff at Adequate LLC!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Hi Shawn and Mike!" Carla joined Mike and Shawn in their conversation.'
  prefs: []
  type: TYPE_NORMAL
- en: The day before, Carla had asked them to build a Pinterest-style application
    for cats for one of their clients.
  prefs: []
  type: TYPE_NORMAL
- en: '"How are things going today?" she enquired.'
  prefs: []
  type: TYPE_NORMAL
- en: '"All good, Carla. Shawn, do you want to show Carla what we built yesterday?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Sure."'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fun stuff at Adequate LLC!](img/4730_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"That looks nice! Are we adding button for faving/starring of cats next?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yes, we were just getting ready for that."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Cool. The client called yesterday. What they want along with displaying the
    cats is to show a stream of cats being updated on the screen. This is going to
    happen when someone faves a cat so that we show it to other users."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it. We will start working on it and simulate addition of cats to appear
    on the screen to start with."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Awesome, I will leave you both to it."'
  prefs: []
  type: TYPE_NORMAL
- en: Model updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"So Shawn, instead of using the Backbone collection in an isolated fashion,
    let''s move it to a class to manage adding of new cats randomly and provide it
    with some other utilities, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '"Our `PictureModel` stays the same. We are adding a new `faved` attribute here
    to maintain state about whether the cat was faved by the user or not.'
  prefs: []
  type: TYPE_NORMAL
- en: '"We will call this new class of ours `CatGenerator`, which will provide the
    component that we use to display the cats, with the data to display, fetch, and
    add new cats."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it. Want me to give it a try?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Sure."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '"Nice Shawn."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Thanks. I moved `createCat` as a method of its own so that we can add cats
    to the collection on the fly. I am just adding a random one right now, taking
    a random height of 600-650 and a random width to create a new `PictureModel` instance."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Also, to start with, I am creating `cats` collection as an attribute on the
    class. Next, I have added six cats to begin with."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Cool. We are now going to start changing its use in our Components."'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that we are going to update the components when new data comes in.
    Easy way to do this is to start storing the `CatGenerator` as a state object on
    the `Home` component.
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s start defining and changing our `Home` component, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '"So, what we are doing here is creating a timer to track time intervals. We
    are going to use a random time interval to simulate the addition of a new stream
    of cats here."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it," followed up Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"To do this, I have added the `generateCats()` method. In our `componentDidMount`,
    we are adding and setting the timer to call this method after the first creation."'
  prefs: []
  type: TYPE_NORMAL
- en: '"In the method itself, I have added clearing of the old interval and we are
    calling the `catGenerator.createCat()` method to actually create the cat from
    our `CatGenerator` class."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We are then resetting the timer and setting a new one, based on a random time
    interval. I added the `catGenerator.randRange()` method to generate the random
    time interval. Here''s how it looks in the `CatGenerator` class:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '"Got it. This should be creating a new stream of cats in the range of 5-10
    seconds."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Next, let''s take a look at how our render method looks. I am going to add
    a star next to the cats."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '"There are two changes that I am doing here. First of all, I added the star,
    which is unfaved by default."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '"Secondly, I started passing the cat object on the modal link''s state."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '"In our `PictureModel` box, we previously had the access to the global collection
    of cats. From now on, that won''t be the case and we would need the cat object
    to be passed to the `Picture` component."'
  prefs: []
  type: TYPE_NORMAL
- en: '"That''s neat, we are able to pass the objects too, to the component from a
    router `<Link/>` object."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yup, let''s go ahead and change the picture component in order for it to work
    properly with this new change in passing the data. Our `Modal` stays the same:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '"The `Picture` component now starts using the cat object."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '"As you can see, the cat object is received on the `location.state` object
    from props."'
  prefs: []
  type: TYPE_NORMAL
- en: '"I have extended the picture to display more details about the cat, such as
    the name and so on, instead of showing it on a separate page. Previously, it looked
    pretty blank."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Cool, let''s take a look at how it looks, shall we?"'
  prefs: []
  type: TYPE_NORMAL
- en: '![Model updates](img/4730_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Nice, the stars look good. We will need to check the styles that I added for
    this soon."'
  prefs: []
  type: TYPE_NORMAL
- en: '"The modal seems to be looking good as well, and look at all these cats being
    generated as a stream!"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Nice!" Mike and Shawn rejoiced.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Model updates](img/4730_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Animate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"React allows us to animate objects easily with its react-addons-css-transition-group
    add-on."'
  prefs: []
  type: TYPE_NORMAL
- en: '"This gives us a handle to the `ReactCSSTransitionGroup` object, which is what
    we will be using to animate changes in data, such as addition of cats, faving/unfaving,
    and so on."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s start by animating the addition of new cats to the stream, shall we?"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, I changed our render method and simply wrapped the display of the collection
    of cats in a `ReactCSSTransitionGroup` element, like so."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '"Let''s go through them one by one in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`transitionName`: This property is used to define the class name prefix used
    for the CSS classes applied for different events, such as element enter, leave,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transitionEnterTimeout`: This is the timeout for an element to be displayed
    freshly after rendering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transitionLeaveTimeout`: This is similar to `transitionEnterTimeout`, but
    it is used when the element is removed from the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transitionAppear`: Sometimes, we want to animate the addition of the collection
    of elements, in our case cats, when they are first rendered. We can do this by
    setting this property to true.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the elements, which are added after the first elements are displayed,
    are applied the `transitionEnter` property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`transitionAppearTimeout`: This is similar to the other timeout values, but
    for `transitionAppear`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transitionEnter`: This is, by default, set to `true`. It can be set to `false`
    if we don''t want to animate the element-enter transition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transitionLeave`: This is, by default, set to `true`. It can be set to `false`
    if we don''t want to animate the element-leave transition animation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"Now, based on the transition and transition name, classes are applied to the
    elements within the `<ReactCSSTransitionGroup/>` component. For example, for enter
    transition, and our `cats` prefix, `cats-enter` would be applied to the elements."'
  prefs: []
  type: TYPE_NORMAL
- en: '"In the next cycle, `cats-enter-active` will be applied to the final class
    that the element should be in."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s check all the different transitions that we can define based on this."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '"The animation transitions are pretty simple here. When a new element is added
    in the beginning, to start with the six cats that we initialized with, the .cats-appear
    class is applied. In the next tick, the .`cats-appear-active` class is added to
    the element."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Next, the classes are removed after a successful transition, as shown in the
    following screenshot:"'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animate](img/4730_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Shawn, if you can see, you will notice how the cats fade in and then show
    up in their end state in full opacity."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Cool. That looks nice. A nice effect for when the new elements are added,
    as well."'
  prefs: []
  type: TYPE_NORMAL
- en: '"True. Do you want to try animating the stars?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Sure!"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let me first check the classes that we have for the stars. I can see that
    you have made use of the font-beautiful star and added style to them."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '"Yup, that''s it right there."'
  prefs: []
  type: TYPE_NORMAL
- en: '"First, let me handle fave and unfave on the stars."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '"Change the element to add `data-cid` and `handler`, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '"Firstly, I am passing `faveUnfave` as the `onClick` event, which is bound
    to the class context here. Next, I am passing `cat.cid` value for `data-cid`"'
  prefs: []
  type: TYPE_NORMAL
- en: '"In the `faveUnfave` method, I will then pull the cat ID for the faved element.
    Based on this, I will pull the cat object from the catGenerator''s cat collection.
    Later, I will toggle the state of the current fave value and reset the state of
    the collection."'
  prefs: []
  type: TYPE_NORMAL
- en: '"This looks good."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Next, I will display either the faved or unfaved star, based on the current
    fave status and wrap this as a CSS transition so that we can start showing animation
    to display and hide the star, change the color, and so on."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '"Perfect," followed Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Now let''s add the styling for this fave."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, I added animation such that, on clicking the star, it will scale up,
    similar to Twitter''s fave functionality. Then, it will scale back and remain
    in faved state."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Similarly on unfave it will scale up and back to its original size."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Looks good, let''s check it out," followed Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Umm, I think all elements are here, but it doesn''t seem to be working, Mike?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let me see. Ah, so the culprit is this:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice the key value that we have used here? It's identical. The `TransitionGroup`
    keeps track of the changes to the elements and performs animation tasks based
    on key values. The `TransitionGroup` needs to know what has changed in the element
    in order to perform animation tasks and it also needs the key to identify the
    element.
  prefs: []
  type: TYPE_NORMAL
- en: '"In the case here, the key will remain `cat.cid` in case of fave or unfave,
    and therefore the element stays the same."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s add a suffix or prefix to the key, along with the fave status."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '"Perfect. It works now, Mike."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yup. Nice work on the CSS animation, Shawn. The star looks good. Let''s see
    how it looks now."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Here''s how it looks when we fave a cat:"'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animate](img/4730_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"This one is after the fave transition is complete."'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animate](img/4730_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Finally, the same animation takes place when we try to unfave the cat."'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animate](img/4730_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Perfect, Carla will love this!"'
  prefs: []
  type: TYPE_NORMAL
- en: It had been a fun day at Adequate LLC. Shawn and Mike worked on refactoring
    their app in order to allow data changes to reflect the view changes and animating
    the cats being added and removed. They also worked on how stars were faved/unfaved.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we worked around changing the data flow and passing data directly
    from react-router links. We took a look at animating a collection of objects being
    added/removed or as they appear. We saw different transition events supported
    by `ReactCSSTransitionGroup` and how to use relevant classes to animate our objects.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to test our app using Jest and React
    TestUtils.
  prefs: []
  type: TYPE_NORMAL
