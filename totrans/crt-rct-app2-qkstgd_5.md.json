["```js\nconst Example = () => {\n  return (\n    <div className=\"Example\" style=\"border: 1px solid red;\">\n      Hello\n    </div>\n  );\n};\n```", "```js\nimport \"./someStyle.css\";\n```", "```js\n  render() {\n    return (\n      <div className={this.cssClasses()}>\n        {this.state.description}\n        <br />\n        <hr />\n        <button className=\"MarkDone\" onClick={this.markAsDone}>\n          Mark as Done\n        </button>\n        <button className=\"RemoveTodo\" onClick={this.removeTodo}>\n          Remove Me\n        </button>\n      </div>\n    );\n  }\n```", "```js\nhr {\n  border: 2px solid red;\n}\n```", "```js\ndiv {\n  border: 2px solid red;\n}\n```", "```js\nhr {\n  border: 2px solid red !important;\n}\n```", "```js\nimport App from \"./App\";\nexport default App;\n```", "```js\nimport Todo from \"./Todo\";\nexport default Todo;\n```", "```js\nimport TodoList from \"../TodoList\";\n```", "```js\nimport Todo from \"../Todo\";\nimport NewTodo from \"../NewTodo\";\nimport Divider from \"../Divider\";\n```", "```js\nimport TodoList from \"./TodoList\";\nimport NewTodo from \"../NewTodo\";\nimport Todo from \"../Todo\";\n```", "```js\nsrc/\n  App/\n    App.css\n    App.js\n    App.test.js\n    index.js\n  Divider/\n    Divider.css\n    Divider.js\n    index.js\n  NewTodo/\n    NewTodo.css\n    NewTodo.js\n    NewTodo.test.js\n    index.js\n  Todo/\n    Todo.css\n    Todo.js\n    Todo.test.js\n    index.js\n  TodoList/\n    TodoList.css\n    TodoList.js\n    TodoList.test.js\n    index.js\n  index.css\n  index.js\n  setupTests.js\n  ... etc ...\n```", "```js\n.todo {\n  border: 2px solid black;\n  text-align: center;\n  background: #f5f5f5;\n  color: #333;\n  margin: 20px;\n  padding: 20px;\n}\n\n.done {\n  background: #f5a5a5;\n}\n```", "```js\nimport styles from \"./Todo.module.css\";\n```", "```js\n  cssClasses() {\n    let classes = [styles.todo];\n    if (this.state.done) {\n      classes = [...classes, styles.done];\n    }\n    return classes.join(' ');\n  }\n```", "```js\n.redDivider {\n  border: 2px solid red;\n}\n```", "```js\n<hr className={styles.redDivider} />\n```", "```js\n  constructor(props) {\n    super(props);\n    this.state = {\n      done: false,\n      critical: false\n    };\n\n    this.markAsDone = this.markAsDone.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n    this.markCritical = this.markCritical.bind(this);\n  }\n```", "```js\n  markCritical() {\n    this.setState({ critical: true });\n  }\n```", "```js\n  cssClasses() {\n    let classes = [];\n    if (this.state.critical) {\n      classes = [styles.critical];\n    } else {\n      classes = [styles.todo];\n    }\n    if (this.state.done) {\n      classes = [...classes, styles.done];\n    }\n    return classes.join(' ');\n  }\n```", "```js\n  render() {\n    return (\n      <div className={this.cssClasses()}>\n        {this.props.description}\n        <br />\n        <hr className={styles.hr} />\n        <button className=\"MarkDone\" onClick={this.markAsDone}>\n          Mark as Done\n        </button>\n        <button className=\"RemoveTodo\" onClick={this.removeTodo}>\n          Remove Me\n        </button>\n        <button className=\"MarkCritical\" onClick={this.markCritical}>\n          Mark as Critical\n        </button>\n      </div>\n    );\n  }\n```", "```js\n.critical {\n  composes: todo;\n  border: 4px dashed red;\n}\n```", "```js\n.critical {\n  text-align: center;\n  background: #f5f5f5;\n  color: #333;\n  margin: 20px;\n  padding: 20px;\n  border: 4px dashed red;\n}\n```", "```js\n$ yarn add node-sass\n```", "```js\n$todo-critical: #f5a5a5;\n$todo-normal: #a5a5f5;\n$todo-complete: #a5f5a5;\n$fancy-gradient: linear-gradient(\n  to right,\n  rgba(0, 0, 0, 0),\n  rgba(0, 0, 0, 0.8),\n  rgba(0, 0, 0, 0)\n);\n```", "```js\nimport \"./Divider.scss\";\n```", "```js\n@import \"../shared\";\n\nhr {\n  border: 0;\n  height: 1px;\n  background-image: $fancy-gradient;\n}\n```", "```js\nimport styles from \"./Todo.module.scss\";\n```", "```js\n@import '../shared';\n```", "```js\n.todo {\n  border: 2px solid black;\n  text-align: center;\n  background: $todo-normal;\n  color: #333;\n  margin: 20px;\n  padding: 20px;\n}\n\n.done {\n  background: $todo-complete;\n}\n\n.hr {\n  border: 2px solid red;\n}\n\n.critical {\n  composes: todo;\n  background: $todo-critical;\n}\n```", "```js\n$ yarn add bootstrap@4 reactstrap@6.5.0\n```", "```js\nimport 'bootstrap/dist/css/bootstrap.css';\n```", "```js\nimport { Navbar, NavbarBrand } from \"reactstrap\";\n```", "```js\nconst headerTitle = \"Todoifier\";\n```", "```js\nconst headerDisplay = (title) => (\n  <Navbar color=\"dark\" dark expand=\"md\">\n    <NavbarBrand href=\"/\">{title}</NavbarBrand>\n  </Navbar>\n);\n```", "```js\nconst App = () => (\n  <div className=\"App\">\n    {headerDisplay(headerTitle)}\n    <br />\n    <TodoList />\n  </div>\n);\n```", "```js\nimport { Button, Input, InputGroup } from \"reactstrap\";\n```", "```js\n  render() {\n    return (\n      <div className=\"NewTodo\">\n        <InputGroup>\n          <Input\n            type=\"text\"\n            onChange={this.handleUpdate}\n            value={this.state.item}\n            placeholder=\"Input item name here...\"\n          />\n          <Button onClick={this.addTodo} \n          color=\"primary\">Add</Button>\n        </InputGroup>\n      </div>\n    );\n  }\n```", "```js\nimport { Button, ButtonGroup } from \"reactstrap\";\n```", "```js\n  render() {\n    return (\n      <div className={this.cssClasses()}>\n        {this.props.description}\n        <br />\n        <hr className={styles.hr} />\n        <ButtonGroup>\n          <Button className=\"MarkDone\" onClick={this.markAsDone}\n          color=\"success\">\n            Mark as Done\n          </Button>\n          <Button className=\"RemoveTodo\" onClick={this.removeTodo}\n          color=\"warning\">\n            Remove Me\n          </Button>\n          <Button className=\"MarkCritical\" onClick={this.markCritical}  \n           color=\"danger\">\n            Mark as Critical\n          </Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n```", "```js\n  it(\"contains the form\", () => {\n    expect(component.find(\"Input\")).toHaveLength(1);\n    expect(component.find(\"Button\")).toHaveLength(1);\n  });\n```", "```js\n  it(\"calls the passed in addTodo function when add button is clicked\", () => {\n    component.find(\"Button\").simulate(\"click\");\n    expect(mockAddTodo).toBeCalled();\n  });\n```", "```js\n  it(\"blanks out the Todo Name when the button is clicked\", () => {\n    const updateKey = \"I should be empty\";\n    component.instance().handleUpdate({ target: { value: updateKey } });\n    expect(component.state(\"item\")).toEqual(updateKey);\n    component.find(\"Button\").simulate(\"click\");\n    expect(component.state(\"item\")).toHaveLength(0);\n  });\n```", "```js\n FAIL src/Todo/Todo.test.js\n - Todo › marks the Todo as done\n\n Method “simulate” is meant to be run on 1 node. 0 found instead.\n\n 34 |\n 35 | it(\"marks the Todo as done\", () => {\n > 36 | component.find(\"button.MarkDone\").simulate(\"click\");\n | ^\n 37 | expect(component.state(\"done\")).toEqual(true);\n 38 | });\n 39 |\n\n at ShallowWrapper.single (node_modules/enzyme/build/ShallowWrapper.js:1875:17)\n at ShallowWrapper.simulate (node_modules/enzyme/build/ShallowWrapper.js:1080:21)\n at Object.simulate (src/Todo/Todo.test.js:36:39)\n\n - Todo › calls the mock remove function\n\n Method “simulate” is meant to be run on 1 node. 0 found instead.\n\n 39 |\n 40 | it(\"calls the mock remove function\", () => {\n > 41 | component.find(\"button.RemoveTodo\").simulate(\"click\");\n | ^\n 42 | expect(mockRemoveTodo).toHaveBeenCalled();\n 43 | });\n 44 | });\n\n at ShallowWrapper.single (node_modules/enzyme/build/ShallowWrapper.js:1875:17)\n at ShallowWrapper.simulate (node_modules/enzyme/build/ShallowWrapper.js:1080:21)\n at Object.simulate (src/Todo/Todo.test.js:41:41)\n\n PASS src/TodoList/TodoList.test.js\n PASS src/App/App.test.js\n\nTest Suites: 1 failed, 3 passed, 4 total\nTests: 2 failed, 19 passed, 21 total\n```", "```js\n  it(\"marks the Todo as done\", () => {\n    component.find(\"Button.MarkDone\").simulate(\"click\");\n    expect(component.state(\"done\")).toEqual(true);\n  });\n\n  it(\"calls the mock remove function\", () => {\n    component.find(\"Button.RemoveTodo\").simulate(\"click\");\n    expect(mockRemoveTodo).toHaveBeenCalled();\n  });\n```", "```js\n PASS src/Todo/Todo.test.js\n PASS src/NewTodo/NewTodo.test.js\n PASS src/App/App.test.js\n PASS src/TodoList/TodoList.test.js\n\nTest Suites: 4 passed, 4 total\nTests: 21 passed, 21 total\nSnapshots: 3 passed, 3 total\nTime: 4.386s\nRan all test suites.\n\nWatch Usage: Press w to show more.\n```", "```js\n it(\"marks the Todo as critical\", () => {\n expect(component.state(\"critical\")).toEqual(false);\n component.find(\"Button.MarkCritical\").simulate(\"click\");\n expect(component.state(\"critical\")).toEqual(true);\n });\n```", "```js\n PASS src/NewTodo/NewTodo.test.js\n PASS src/TodoList/TodoList.test.js\n PASS src/Todo/Todo.test.js\n PASS src/App/App.test.js\n\nTest Suites: 4 passed, 4 total\nTests: 22 passed, 22 total\nSnapshots: 3 passed, 3 total\nTime: 4.969s\nRan all test suites.\n\nWatch Usage: Press w to show more.\n```"]