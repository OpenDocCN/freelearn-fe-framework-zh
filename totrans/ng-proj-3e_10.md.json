["```js\nnpm install -g @angular-devkit/schematics-cli \n```", "```js\nschematics blank my-schematics \n```", "```js\n`collection.json`\n{\n  \"$schema\": \"../node_modules/@angular-devkit/schematics/collection-schema.json\",\n  \"schematics\": {\n    \"my-schematics\": {\n      \"description\": \"A blank schematic.\",\n      \"factory\": \"./my-schematics/index#mySchematics\"\n    }\n  }\n} \n```", "```js\nexport function mySchematics(_options: any): Rule {\n  return (tree: Tree, _context: SchematicContext) => {\n    return tree;\n  };\n} \n```", "```js\n    schematics blank tailwind-container \n    ```", "```js\n    {\n      \"$schema\": \"http://json-schema.org/schema\",\n      \"$id\": \"TailwindContainerSchema\",\n      \"title\": \"My Tailwind Container Schema\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"description\": \"The name of the component.\",\n          \"type\": \"string\"\n        },\n        \"path\": {\n          \"type\": \"string\",\n          \"format\": \"path\",\n          \"description\": \"The path to create the component.\",\n          \"visible\": false\n        }\n      },\n      \"required\": [\"name\"]\n    } \n    ```", "```js\n    \"tailwind-container\": {\n      \"description\": \"**Generate a Tailwind container component.**\",\n      \"factory\": \"./tailwind-container/index#tailwindContainer\",\n      **\"schema\"****:****\"./tailwind-container/schema.json\"**\n    } \n    ```", "```js\n    export interface Schema {\n        name: string;\n        path: string;\n    } \n    ```", "```js\n    <div class=\"container mx-auto\"></div> \n    ```", "```js\n    import { Component } from '@angular/core';\n    @Component({\n        selector: 'my-<%= dasherize(name) %>',\n        templateUrl: './<%= dasherize(name) %>.component.html'\n    })\n    export class My<%= classify(name) %>Component {} \n    ```", "```js\n    import { Rule, SchematicContext, Tree } from '@angular-devkit/schematics';\n    import { Schema } from './schema';\n    export function tailwindContainer(_options: Schema): Rule {\n      return (_tree: Tree, _context: SchematicContext) => {\n      };\n    } \n    ```", "```js\n    **import** **{ normalize, strings }** **from****'@angular-devkit/core'****;**\n    import { **apply, applyTemplates, chain, mergeWith, move**, Rule, SchematicContext, Tree, **url** } from '@angular-devkit/schematics';\n    import { Schema } from './schema'; \n    ```", "```js\n    _options.path = _options.path ?? normalize('src/app/' + _options.name as string);\n        const templateSource = apply(url('./files'), [\n          applyTemplates({\n            classify: strings.classify,\n            dasherize: strings.dasherize,\n            name: _options.name\n          }),\n          move(normalize(_options.path as string))\n        ]); \n    ```", "```js\n    return chain([\n      mergeWith(templateSource)\n    ]); \n    chain method to execute our schematic, passing the result of the mergeWith function, which uses the templateSource variable we created in the previous step.\n    ```", "```js\n    npm run build \n    ```", "```js\n    npm link \n    ```", "```js\n    ng new my-app --defaults \n    ```", "```js\n    npm link my-schematics \n    ```", "```js\n    ng generate my-schematics:tailwind-container --name=dashboard \n    ```", "```js\n    schematics blank crud-service \n    ```", "```js\n    npm install @schematics/angular \n    ```", "```js\n    \"crud-service\": {\n      \"description\": \"**Generate a CRUD HTTP service.**\",\n      \"factory\": \"./crud-service/index#crudService\",\n      **\"schema\"****:****\"../node_modules/@schematics/angular/service/schema.json\"**\n    } \n    ```", "```js\n    import { Injectable } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    import { Observable } from 'rxjs';\n    @Injectable({\n      providedIn: 'root'\n    })\n    export class <%= classify(name) %>Service {\n      constructor(private http: HttpClient) { }\n    } \n    ```", "```js\n    apiUrl = '/api'; \n    ```", "```js\n    create(obj) {\n      return this.http.post(this.apiUrl, obj);\n    }\n    read() {\n      return this.http.get(this.apiUrl);\n    }\n    update(obj) {\n      return this.http.put(this.apiUrl, obj);\n    }\n    delete(id) {\n      return this.http.delete(this.apiUrl + id);\n    } \n    ```", "```js\n    **import** **{ normalize, strings }** **from****'@angular-devkit/core'****;**\n    import { **apply, applyTemplates, chain, externalSchematic,** **MergeStrategy****, mergeWith, move**, Rule, SchematicContext, Tree, **url** } from '@angular-devkit/schematics'; \n    ```", "```js\n    export function crudService(_options: any): Rule {\n      return (_tree: Tree, _context: SchematicContext) => {};\n    } \n    ```", "```js\n    const templateSource = apply(url('./files'), [\n      applyTemplates({\n        ..._options,\n        classify: strings.classify,\n        dasherize: strings.dasherize\n      }),\n      move(normalize(_options.path ?? normalize('src/app/')))\n    ]); \n    main differences are that the default path is the src\\app folder and that we pass all available options using the _options parameter to the schematic.\n    ```", "```js\n    return chain([\n      externalSchematic('@schematics/angular', 'service', _options),\n      mergeWith(templateSource, MergeStrategy.Overwrite)\n    ]); \n    ```", "```js\n    npm run build \n    ```", "```js\n    ng generate my-schematics:crud-service --name=customers \n    ```"]