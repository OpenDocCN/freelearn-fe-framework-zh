- en: Chapter 10. Making a Game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we're going to create the most complex blueprint yet.
    We're going to create a game engine and a single screen action game. When you're
    finished with this chapter, you'll appreciate why developing with ReactJS is often
    compared to developing games. When we make games in HTML5, we use the canvas.
    Drawing on canvas is very similar to how we render the browser in ReactJS. We
    update the canvas continuously, discarding the previous content and render the
    new content immediately.
  prefs: []
  type: TYPE_NORMAL
- en: We'll be making an action game with a playable wizard character facing a horde
    of monsters while on a picnic. Armed with a fireball spell, the player must defeat
    all the enemies before he's able to relax and enjoy his lunch.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the topics we''ll cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The optimal Webpack configuration with dynamic SCSS transpiling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripting with ShellJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static type checking with Flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an HTML5 canvas game engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responding to keyboard events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and drawing image entities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving computer-controlled entities on the screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute force collision detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a game title and a game over scenario
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: The optimal Webpack configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to implement a few of the newer technologies, and once again, we're
    going to modify our Webpack configuration and build process. We're going to add
    type checking with Flow, a better solution for copying our assets and creating
    our production `index.html` file. Finally, we'll add support for inline import
    and instant transpiling of SCSS.
  prefs: []
  type: TYPE_NORMAL
- en: SCSS is an extension to CSS that allows you to write CSS with features that
    don't exist in regular CSS, such as nesting, mixins, inheritance, and variables.
    It's called a **preprocessor**, which is like a transpiler where you write code
    in one language and convert it into another language before use. In this case,
    we will write code in SCSS and convert it into regular CSS before the browser
    parses it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do all of this, we''ll need to add a few new packages from `npm`
    and make changes to our Webpack configuration. Note, we''re going to start with
    the production Webpack scaffold we made in [Chapter 8](ch08.html "Chapter 8. Deploying
    Your App to the Cloud"), *Deploying Your App to the Cloud*. This scaffold has
    the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In both `Webpack-development.config.js` and `Webpack-production.config.js`,
    add this code inside the `loader` section (between the square brackets):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that we're going to keep the Babel loader and then add another loader beneath,
    which will make sure Webpack understands the `scss` prefix.
  prefs: []
  type: TYPE_NORMAL
- en: 'In both the `configuration` files, add this import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'And, add this plugin code to the `plugins` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This plugin will take a template `index.ejs` file and copy it to the output
    path defined earlier in the configuration file as `index.html`. It will also insert
    the generated script files created with Webpack.
  prefs: []
  type: TYPE_NORMAL
- en: 'For `Webpack-development.config.js`, the output section should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'For `Webpack-production.config.js`, it should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to add the `index.ejs` file and its contents. Add them using this
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we've skipped both the *CSS* and the scripts and that we've added
    the page title by injecting `htmlWebpackPlugin`.
  prefs: []
  type: TYPE_NORMAL
- en: 'With these two changes, we can remove the `cpFile` plugin and the `cpFile`
    code in our `server-production.js` file. The `cpFile` plugin did two things: it
    copied `assets/index.prod.html` to `public/assets/index.html` and `app.css` in
    `assets` to `public/assets`. We''ll still need to copy the assets content, but
    since we''ll be copying a lot of files, we''ll need a smarter way to do this than
    simply copying file after file.'
  prefs: []
  type: TYPE_NORMAL
- en: Scripting with ShellJS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to employ **ShellJS** to copy our assets instead. This `npm` package
    is an alternative to ordinary bash scripts with the added benefit of support across
    environments. This means that the scripts we make will work for Windows users
    as well as for Mac/Linux users.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll need to add a script to copy our files, so add a new folder called `scripts`
    and add a file called `assets.js` to it. Then, add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to update our `package.json` file with a run script so that we
    can run ShellJS when packaging our app. Open the file and replace the `start`
    command with the following three lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to update our `server` file, so open `server-production.js` and
    replace it with this content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to add all the packages we''ve been importing. Do this by executing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can remove the two packages we don''t need anymore using this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You also need a complete set of assets for the game. You can clear out the current
    `assets` folder and use the contents available at [http://reactjsblueprints-chapter10.herokuapp.com/assets.zip](http://reactjsblueprints-chapter10.herokuapp.com/assets.zip).
    The graphics in our game contain a selection of tiles from a public domain roguelike
    tileset called **RLTiles**. You can find the original tileset at [http://rltiles.sf.net](http://rltiles.sf.net).
  prefs: []
  type: TYPE_NORMAL
- en: Phew! That was a lot of changes, but we're finally ready to start programming
    the game. You should be able to run `npm run dev` to run the development server
    and `npm start` to build and run the production server.
  prefs: []
  type: TYPE_NORMAL
- en: Static typechecking with Flow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to type check our code with **Flow**. This is not part of our code
    base, but you'll see the syntax everywhere in our engine and game code.
  prefs: []
  type: TYPE_NORMAL
- en: Flow is designed to find type errors in JavaScript programs. It has one major
    benefit when compared to a fully typed language, such as **TypeScript**. You have
    the freedom to use it when you feel like. This means that you can mix typed code
    with non-typed code and keep on programming generally, as you've always done with
    the added benefit of being able to automatically spot type errors.
  prefs: []
  type: TYPE_NORMAL
- en: The downside is that the Flow binary is only available on Mac and Linux. There's
    an experimental Windows binary available, but it's not always up to date. The
    upside is that if you're on Windows, your code will still execute, but you won't
    be able to find any potential errors.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Install Flow by visiting [http://flowtype.org/docs/getting-started.html](http://flowtype.org/docs/getting-started.html)
    and following the instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need a special configuration file in the root of your project called `.flowconfig`
    (no name before the dot). Add the file with this content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This configuration tells *Flow* to check the contents of the `source` folder
    while ignoring a few selected dependencies in `node_modules`, which it picks up
    through the reference in the `source` folder files.
  prefs: []
  type: TYPE_NORMAL
- en: When Flow is installed and the configuration file is added, you can start checking
    your code by executing `flow` from your command line. It will initialize a server
    on the first run and then report errors for every run after that.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical error looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here, Flow has figured out that the call to shuffle is called with an array,
    but the `shuffle` function is defined to expect an array with objects. The error
    is easy to fix because shuffle should expect an array with a collection of values
    and not an array with an object.
  prefs: []
  type: TYPE_NORMAL
- en: By using annotations, you code with intent, and Flow makes it easy to spot whether
    you're using functions the way you intended, as witnessed by the preceding error.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an HTML5 canvas engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The game is divided into two parts: the engine and the game. For projects like
    these, it''s worthwhile to have a plan for how the app is going to look at the
    final stage. It''s natural to separate the pure game engine parts from the game
    parts because this makes it easier to repurpose them later and use them for other
    games.'
  prefs: []
  type: TYPE_NORMAL
- en: Usually, when you make a game, you base it off a premade engine, but we're not
    going to do that. We're going to make an engine all by ourselves. We'll implement
    just the features that we need, but feel free to extend and add engine pieces
    of your own when we're done.
  prefs: []
  type: TYPE_NORMAL
- en: 'The engine should be placed as a subfolder inside `source`. This is the structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The main file is `index.js`, which simply acts as a central import/export hub.
    Let''s start by creating the `engine` folder and `index.js`. It should have this
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We'll be using all of these components in our game. Let's create each one and
    look at what they do.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with the `video` folder and `loadImage.js`. Add this code to the
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding a comment line with `@flow` tells *Flow* to use its type-checking ability
    on this file. The `setImage` function is then defined with two arguments: `ctx`
    and `image`. The `ctx` argument is cast to an object and `image` to an image.
    If we had cast the image to a string, *Flow* would immediately have told us that
    the type was incompatible with the `setImage` function call.'
  prefs: []
  type: TYPE_NORMAL
- en: Enough with Flow; let's examine what this file does. It has two functions, but
    only one is exported. The `loadImage` function takes an image and fetches it to
    the `image` variable, namely `bgImage`. This is a network call so the module can't
    return the image immediately, but we tell the function to execute the `setImage`
    function as soon as the image is loaded. This function will then draw the image
    on to the canvas that we passed in.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next file is `clear.js`, which needs to be added to the `source/engine/video`
    folder as well. Add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: When called, this completely clears the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next file is `shuffle.js` in the `source/engine/math` folder. Add it with
    this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This line fetches a random number between `0` and the number of remaining items
    in the counter. The single pipe is a bitwise `or` operator, which in this case
    removes the fraction. It works much in the same way as `Math.floor()` but is faster
    because bitwise operators are primitive. It''s arguably more convoluted and harder
    to understand, so wrapping the math operation with `Math.floor()` is a good idea
    if you want the code to be more readable. We''ll then assign the item to the `temp`
    variable in sequence, and move the current item at the random number to the current
    counter in the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll set the array at the random number to the item in sequence.
    This ensures that all items are accounted for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As the name suggests, the `shuffle` function accepts an array collection and
    then shuffles it using a loop over all the items in the input array.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second file in the `math` folder is `sign.js`. Add this code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Sign is a mathematical expression that returns an integer that indicates the
    sign of a number. We'll use the built-in `sign` function if available, or our
    own if not. We'll use this when setting up movement for enemy entities targeting
    the player.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next is the `input` folder. Add `keyboard.js` with this code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This file adds an event listener that registers keys when the player pushes
    any keys on the keyboard and deletes them from the key array when the event listener
    detects that the key is being released (the user is no longer pressing the key
    down).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the `entity` folder. Here we''ll add five files. The first one is
    `targetEntity.js`. Add this code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We'll use this file to set one entity on the path towards the position of another
    entity. In the game we're making, we will use this code to direct an enemy entity
    to the player or vice versa. The entity is an object that has a certain size,
    position, and velocity, and the code works by changing the `x` and `y` position
    of the `entityA` object.
  prefs: []
  type: TYPE_NORMAL
- en: We'll use the `sign` method to set the correct sign. If we don't do this, it
    will most likely move away from the entity instead of moving towards it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up is `randomMove.js`. Add the file and this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'When `entity.tick` reaches zero, a new direction will be calculated. Now check
    this out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to make the direction recalculation a little more random, the new
    tick value is set between a value of `0` and `50`. Let''s move on to another function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This function implements a random direction for computer-controlled entities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next file we''ll create is `drawEntity.js`. Add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This file is similar to `loadImage`, except that we''ll add a state to the
    entity by setting two variables: `_creating` and `_sprite`. We''ll use this in
    the game later by only actually drawing entities that have a proper `ImageData`
    object (contained in `_sprite`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The final file in the `entity` folder is `createEntity.js`. Add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This provides the entity with an ID, take a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Flag it so we don''t try to create the entity twice. Let''s take a look at
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re almost done with the engine. We''ll need to add one more folder and
    file, `collision` and `bruteForce.js`, respectively. Add it with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This function will compare the positions of two entities and determine whether
    they're occupying the same space. For small canvases and a limited number of entities
    on screen, it's the fastest collision detection you can conceivably implement.
  prefs: []
  type: TYPE_NORMAL
- en: You now have a small working game engine. Let's move on and start implementing
    the game.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The game itself is going to be larger than the engine. This is not uncommon,
    especially for HTML5 games, but brace yourself because we''re going to add a lot
    of files. Let''s take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the game](img/B04943_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the file structure for the game (excluding the engine):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Let's start with the `root` source files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add this to `index.jsx`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Config` file is where we''ll provide the game with all of the content,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: We display either the title or the game screen when the player starts the game.
    We implement the switch by providing the components with a `setState` callback,
    which means that anytime we want to switch to a scene, we can use `this.props.cb(scene)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add `polyfills.js` with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This is a shim to provide support for `requestAnimationFrame` for the browsers
    that don't support it yet. As you can see in the code, it will implement `setTimeOut`
    if `requestAnimationFrame` is not supported. We want to use `requestAnimationFrame`
    because it's more efficient than `setTimeOut`, which is less accurate and also
    wastes a lot of cycles by rendering when it's not necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add `title.jsx`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the game if the player hits space on the keyboard. The next is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'This avoids updating the game if the canvas has not yet been initialized. The
    following code tells the game to listen for keyboard input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the main game loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Even though this is a title scene, we treat it as a mini game and update it
    accordingly. This enables us to easily animate the title screen using entities
    and game logic and use the same input methods as in the game, let''s take a look
    at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add `style.scss` with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, we add the game itself. Add `game.jsx` with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll need to create all of these components in order for the game to work.
    When developing a game, it''s quite common to inline these components. When iterating
    the game, you''ll get a feel for how to separate them into distinct components
    and how you can shape them for reuse, let''s take a look at the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a countdown that will be used when the game is over and the player
    is returned to the title screen, take a look at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This is another countdown. It''s used whenever the player is shooting and prevents
    the player from spamming the board with projectiles, let''s take a look at the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The game board is 512 x 512 pixels and each individual entity is 32 x 32 pixels.
    It''s easier to visualize the placement on the board by dividing the board size
    by the entity size. By looking at this value, it''s easy to understand that the
    current player is placed in the middle of the board. It might be a little harder
    if we had used the precise pixel value, which is 256 x 256\. Now, let''s look
    at the next step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Whenever the `gameOver` flag has been set to `true`, we tell the game to pause
    and start the counter that will return the player to the title screen when the
    counter hits zero, take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a single player game, but you could add more players to the game by
    extending the `players` array in `config` and switch them by iterating the `current_player_no`
    variable. This function is responsible for drawing the player and any enemies
    and projectiles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'This function draws the score and the player health at the top of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a rather advanced function that handles all the key input in the game:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'It requires the `Config` object for calculating the position of the projectiles,
    the keys for handling the moving and shooting actions, the `player` object, and
    a modifier that can be used to speed up or down the movement. It also requires
    that you pass the function that creates a projectile and two callbacks: the first
    for adding the projectile to the `entities` array and the second a setter for
    the `coolDown` variable. The higher this last value is, the fewer projectiles
    the player can fire. For every iteration, the projectile moves according to its
    velocity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The following loop is necessary to check whether any of the projectiles collide
    with any of the monsters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s a loop within a loop, which is something we generally should be careful
    with because it can be a major source of slowdown. Now check out the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'As illustrated, if the projectile collides with an enemy, the enemy loses 20
    health points and we remove the projectile from the entities array. This makes
    sure it''s not drawn in the next run of the game loop. The next check removes
    the enemy if its health is less than zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'This function takes care of removing projectiles that have escaped the canvas.
    This is important because we don''t want to keep the list of elements that we
    calculate as small as possible. We move on to the next loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: This loop checks whether the enemies are close to or are colliding with the
    player. If they are close, it should head straight for the player. Try increasing
    the range to make the game more difficult.
  prefs: []
  type: TYPE_NORMAL
- en: If they collide, the player loses health.
  prefs: []
  type: TYPE_NORMAL
- en: 'If none of these occur, we provide a random direction for the entity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Any time a player clears out the current set of enemies, they advance to the
    next level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Each level comes with more enemies. This check makes sure that we add as many
    `enemy` entities as the current level dictates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'If the player is out of health, we store the current canvas image and use that
    as the game over screen. We then clear out the entities and set the `gameOver`
    flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'When mounting the game, we reset the score, level, and current enemy. This
    lets us start fresh when the player has hit game over and presses space to play
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the game with the player visible, with enemy
    entities swarming the player and a score and a health bar in the title bar. At
    the bottom of the screen, you see the player name (randomly picked from the `name`
    array) and the current difficulty level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the game](img/B04943_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'That''s it for the game file, but as you noticed, we have several more files
    to add. We''ll need to add two new folders: `components` and `config`. Let''s
    start with `config`. Add this folder and the `index.js` file. Then, add this content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'We haven''t added any pickups to the game, but it''d be a good idea to do this
    and add various items such as health, different weapons, and so on, let''s take
    a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll add a single player and give them a random name from the list of names
    and a random image from the list of players, let''s take a look at the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add `config/players.js` with this content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: This file adds variety to the game. It can also be useful if and when we add
    more players to the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, add `config/beasts.js` with this content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: We're done with the configuration, so let's add all the game components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `components/addEntity.js` with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: We add variety with `shuffle` and `Math.random`. We want their movement to be
    erratic, and we want some to move faster than others.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `components/addProjectile.js` with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: This code is quite similar to the previous one, so it's worth considering whether
    the two files can be joined. There's a popular acronym in computer science called
    **DRY**, which stands for **Don't Repeat Yourself**. The intention is to identify
    code that is conceptually repetitive, such as `addEntity` and `addProjectile`,
    and then make an effort to make one single function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next file we''re going to add is `checkCollision.js`. Add it with this
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: We'll reuse the `bruteForce` collision check and display a little **Ouch** over
    the player's entity whenever it collides with something.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add `components/drawEntities.js` and add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: This is used in the game loop to draw all the entities on the screen. The order
    is important because the entity that is drawn first will be overlapped by the
    next entity that is drawn. If you draw the player first, the projectiles and the
    enemies will appear on top of the player in collisions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add `components/drawGameOver.js` with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Then add `components/drawGameWon.js` with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: They're both similar and will display different text depending on whether it's
    a regular game over event or whether the player has completed the game. You can
    add colors and use different fonts and font sizes to make the text more appealing.
    It works much in the same way as CSS, by cascading downwards. Notice that the
    second line of text in the win condition has a smaller font size than the first
    one and how it's arranged to make this happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add `components/drawHud.js` and add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Note that the primary difference between this and the other text functions is
    the positioning of the text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `components/clearCanvas.js` with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: This component will replace the current canvas with the provided image. We'll
    use a snapshot from the game just after the `gameOver` flag is set for the game
    over screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `components/outOfBunds.js` with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: This will return `true` if an entity is outside the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `components/removeEntity.js` with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: This file will execute the callback before returning a filtered `entity` array.
    In our code, the callback either contains an empty function or a function that
    updates the score.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add `components/setupGame.js` with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we add the player entities. Note that we set the position by multiplying
    with the tile size to set the real position on the board:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: We're almost done with the `components` folder. All we need to do now is add
    one more file and a subfolder with a few `keypress` files.
  prefs: []
  type: TYPE_NORMAL
- en: Responding to keyboard events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, add `components/keyInput.js` with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'This function will make sure a projectile is added, but it won''t do anything
    until the `coolDown` variable is at or below zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Next, add the `keypress` folder to the `components` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'For each file, add the corresponding code, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for `a.js` is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For `d.js`, refer to the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here''s the code for `s.js`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For `w.js`, refer to the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The code for `down.js`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the `up.js` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We move on to the `left.js` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, the `right.js` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For `space.js`, refer to the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And finally, the `index.js` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our game is now complete and ready to be played. At the current setting, the
    game is probably too difficult, but with a little bit of balancing, it should
    be possible to make it easier for the player to win. Let''s take a look at the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Responding to keyboard events](img/B04943_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Further improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can improve the game in a number of ways. Here''s a list of things you
    can add:'
  prefs: []
  type: TYPE_NORMAL
- en: Add sound with WebAudio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restrict the number of fireballs the player can fire at one time, or add a limit
    to how many fireballs the player has and add pickups to increase that limit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilize resource caching to preload all assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sprite animation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bonus pickups for increased playability, for instance, hearts for increasing
    health or new weapons for wielding more damage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have the enemies fire at the player
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide the reader with alternate controls (moving with arrow keys and shoot
    with `wsad`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add more screens and a better progression between levels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a transition effect between the levels, rewarding the player with encouraging
    text saying that progress has been made, and then introduce the next enemy entity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a possibility to pause the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a fullscreen option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've made a game engine and a game in ReactJS. That's quite an achievement.
    We started using Flowtype and we optimized the way we create `React.js` projects
    with Webpack.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to check out what we just created, visit [https://reactjsblueprints-chapter10.herokuapp.com/](https://reactjsblueprints-chapter10.herokuapp.com/).
  prefs: []
  type: TYPE_NORMAL
- en: I sincerely hope you enjoyed this chapter and the book, and I hope that by completing
    all these projects, you now have a solid foundation for creating your own projects
    in ReactJS.
  prefs: []
  type: TYPE_NORMAL
