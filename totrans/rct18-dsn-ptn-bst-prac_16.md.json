["```js\nnpm init \n```", "```js\nnpm install --save-dev jest \n```", "```js\n\"scripts\": {\n  \"build\": \"webpack\",\n  \"start\": \"node ./dist/server\",\n  \"test\": \"jest\",\n  \"test:coverage\": \"jest --coverage\"\n} \n```", "```js\nnpm install --save-dev @babel/core @babel/preset-env @babel/preset-react ts-jest \n```", "```js\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"]\n} \n```", "```js\nnpm install --save react react-dom \n```", "```js\nnpm install @testing-library/jest-dom @testing-library/react jest-environment-jsdom \n```", "```js\nmodule.exports = {\n  preset: 'ts-jest',\n  setupFilesAfterEnv: ['<rootDir>/setUpTests.ts'],\n  testEnvironment: 'jsdom'\n} \n```", "```js\nimport '@testing-library/jest-dom/extend-expect' \n```", "```js\nimport React, { FC } from 'react'\ntype Props = {\n  name?: string\n}\nfunction Hello({ name }: Props) { \n  return <h1 className=\"Hello\">Hello {name || 'World'}</h1>\n}\n Hello.defaultProps = {\n  name: ''\n}\nexport default Hello \n```", "```js\nimport React from 'react'\nimport { render, cleanup } from '@testing-library/react'\nimport Hello from './index'\n describe('Hello Component', () => {\n  it('should render Hello World', () => {\n   const wrapper = render(<Hello />)\n   expect(wrapper.getByText('Hello World')).toBeInTheDocument()\n  })\n  it('should render the name prop', () => {\n   const wrapper = render(<Hello name=\"Carlos\" />)\n   expect(wrapper.getByText('Hello Carlos')).toBeInTheDocument()\n  })\n  it('should has .Home classname', () => {\n   const wrapper = render(<Hello />)\n   expect(wrapper.container.firstChild).toHaveClass('Hello')\n  })\n  afterAll(cleanup)\n}) \n```", "```js\nnpm test \n```", "```js\nit('should render the name prop', () => {\n  const wrapper = render(<Hello name=\"Carlos\" />)\n  expect(wrapper.getByText('Hello World')).toBeInTheDocument()\n}) \n```", "```js\nnpm run test:coverage \n```", "```js\nimport { useState, ChangeEvent } from 'react'\n\n function ShowInformation() {\n  const [state, setState] = useState({ name: '', age: 0, show: false })\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n   const { name, value } = e.target\n   setState({\n    ...state,\n    [name]: value\n   })\n  }\n  const handleShowInformation = () => {\n   setState({\n    ...state,\n    show: true\n   })\n  }\n  if (state.show) {\n   return (\n    <div className=\"ShowInformation\">\n    <h1>Personal Information</h1>\n     <div className=\"personalInformation\">\n      <p><strong>Name:</strong> {state.name}</p>\n      <p><strong>Age:</strong> {state.age}</p>\n     </div>\n    </div>\n   )\n  }\n\n  return (\n   <div className=\"ShowInformation\">\n    <h1>Personal Information</h1>\n    <p><strong>Name:</strong></p>\n    <p>\n     <input name=\"name\" type=\"text\" value={state.name} onChange={handleOnChange} />\n    </p>\n    <p>\n     <input name=\"age\" type=\"number\" value={state.age} onChange={handleOnChange} />\n    </p>\n    <p><button onClick={handleShowInformation}>Show Information</button></p>\n   </div>\n  )\n}\nexport default ShowInformation \n```", "```js\nimport { render, cleanup, fireEvent } from '@testing-library/react'\nimport ShowInformation from './index'\ndescribe('Show Information Component', () => {\n  let wrapper\n  beforeEach(() => {\n   wrapper = render(<ShowInformation />)\n  })\n  it ('should modify the name', () => {\n   const nameInput = wrapper.container.querySelector('input[name=\"name\"]') as HTMLInputElement\n   const ageInput = wrapper.container.querySelector('input[name=\"age\"]') as HTMLInputElement\n   fireEvent.change(nameInput, { target: { value: 'Carlos' } })\n   fireEvent.change(ageInput, { target: { value: 34 } })\n   expect(nameInput.value).toBe('Carlos')\n   expect(ageInput.value).toBe('34')\n  })\n  it ('should show the personal information when user clicks on the button', () => {\n   const button = wrapper.container.querySelector('button')\n   fireEvent.click(button)\n   const showInformation = wrapper.container.querySelector('.personalInformation')\n   expect(showInformation).toBeInTheDocument()\n})\n  afterAll(cleanup)\n}) \n```", "```js\nnpm install vite -g \n```", "```js\nnpm create vite@latest \n```", "```js\n npm install -D vitest @test-library/react \n```", "```js\n/// <reference types=\"vitest\" />\nimport react from '@vitejs/plugin-react'\nimport { defineConfig } from 'vite'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n   environment: 'jsdom'\n  }\n}) \n```", "```js\nnpm install -D jsdom \n```", "```js\nnpm install -D @vitest/ui \n```", "```js\n\"scripts\": {\n  \"dev\": \"vite\",\n  \"build\": \"tsc && vite build\",\n  \"preview\": \"vite preview\",\n  \"test\": \"vitest --ui\"\n} \n```", "```js\n import React, { FC } from 'react'\n type Props = {\n  name?: string\n }\n const Hello: FC<Props> = ({ name }) => <h1 className=\"Hello\">Hello {name || \"World\"}</h1>\n export default Hello \n```", "```js\n import { cleanup, render } from '@testing-library/react'\n import { afterAll, describe, expect, it } from 'vitest'\n import Hello from './index'\n describe(\"Hello Component\", () => {\n  it(\"should render Hello World\", () => {\n   const wrapper = render(<Hello />)\n   expect(wrapper.getByText(\"Hello World\")).toBeDefined()\n  })\n\n  it(\"should render the name prop\", () => {\n   const wrapper = render(<Hello name=\"Carlos\" />)\n   expect(wrapper.getByText(\"Hello Carlos\")).toBeDefined()\n  })\n\n  it(\"should has .Home classname\", () => {\n   const wrapper = render(<Hello />)\n   const firstChild = wrapper.container.firstChild as HTMLElement\n   expect(firstChild?.classList.contains(\"Hello\")).toBe(true)\n  })\n\n  afterAll(cleanup)\n }) \n```", "```js\n/// <reference types=\"vitest\" />\n/// <reference types=\"vite/client\" />\nimport react from '@vitejs/plugin-react'\nimport { defineConfig } from 'vite'\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n   environment: \"jsdom\",\n   globals: true\n  }\n}) \n```", "```js\n\"compilerOptions\": {\n  \"types\": [\"vitest/globals\"]\n} \n```", "```js\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n   environment: \"jsdom\",\n   globals: true,\n   includeSource: [\"src/**/*.{ts,tsx}\"]\n  }\n}) \n```", "```js\n\"compilerOptions\": {\n  \"types\": [\"vitest/globals\", \"vitest/importMeta\"]\n} \n```", "```js\nimport React, { FC } from 'react'\n  type Props = {\n  name?: string;\n}\nconst Hello: FC<Props> = ({ name }) => <h1 className=\"Hello\">Hello {name || \"World\"}</h1>\nexport default Hello;\nif (import.meta.vitest) {\n  const { cleanup, render } = require('@testing-library/react')\n\n  describe(\"Hello Component\", () => {\n   it(\"should render Hello World\", () => {\n    const wrapper = render(<Hello />)\n    expect(wrapper.getByText(\"Hello World\")).toBeDefined()\n   })\n\n   it(\"should render the name prop\", () => {\n    const wrapper = render(<Hello name=\"Carlos\" />)\n    expect(wrapper.getByText(\"Hello Carlos\")).toBeDefined()\n   })\n   it(\"should has .Home classname\", () => {\n    const wrapper = render(<Hello />)\n    const firstChild = wrapper.container.firstChild as HTMLElement\n    expect(firstChild?.classList.contains(\"Hello\")).toBe(true)\n   })\n\n   afterAll(cleanup)\n  })\n} \n```", "```js\nnpm install --save-dev redux-devtools-extension \n```", "```js\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '@reducers';\n\nexport default function configureStore({\n  initialState,\n  reducer\n}) {\nconst middleware = [thunk];\nreturn createStore(\n   rootReducer,\n   initialState,\n   composeWithDevTools(applyMiddleware(...middleware))\n  );\n} \n```"]