["```js\n    npm install -D jest babel-jest @testing-library/jest-\n    dom @testing-library/react babel-preset-gatsby\n    identity-obj-proxy\n    ```", "```js\n    module.exports = {\n      transform: {\n        \"^.+\\\\.jsx?$\": '<rootDir>/jest-preprocess.js',\n      },\n      moduleNameMapper: {\n        \".+\\\\.(css|styl|less|sass|scss)$\": 'identity-obj-\n          proxy',\n        \".+\\\\.(jpg|jpeg|png|gif|eot|otf|webp\n          |svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac\n          |oga)$\": '<rootDir>/__mocks__/file-mock.js',\n      },\n      testPathIgnorePatterns: ['node_modules', '.cache'],\n      transformIgnorePatterns:\n        ['node_modules/(?!(gatsby)/)'],\n        testEnvironment: \"jsdom\",\n        globals: {__PATH_PREFIX__: '',\n      },\n      setupFiles: ['<rootDir>/loadershim.js'],\n      setupFilesAfterEnv: ['<rootDir>/jest.setup.js']\n    };\n    ```", "```js\n    const babelOptions = {\n      presets: [\"babel-preset-gatsby\"],\n    };\n    module.exports = require(\"babel-\n      jest\").default.createTransformer(babelOptions);\n    ```", "```js\n    global.___loader = {\n        enqueue: jest.fn(),\n     }\n    ```", "```js\n    module.exports = \"test-file-mock\"\n    ```", "```js\n    const React = require(\"react\")\n    const gatsby = jest.requireActual(\"gatsby\")\n    module.exports = {\n      ...gatsby,\n      graphql: jest.fn(),\n      Link: jest.fn().mockImplementation(\n        ({\n          activeClassName,\n          activeStyle,\n          getProps,\n          innerRef,\n          partiallyActive,\n          ref,\n          replace,\n          to,\n          ...rest\n        }) =>\n          React.createElement(\"a\", {\n            ...rest,\n            href: to,\n          })\n      ),\n      StaticQuery: () => React.createElement(\"div\", {\n        id: \"StaticQuery\",\n      }),\n      useStaticQuery: jest.fn(),\n    }\n    ```", "```js\n    const React = require(\"react\")\n    const gatsbyPluginImage = jest.requireActual(\"gatsby-\n      plugin-image\")\n    module.exports = {\n      ...gatsbyPluginImage,\n      StaticImage: () => React.createElement(\"div\", {\n        id: \"StaticImage\",\n      }),\n    }\n    ```", "```js\n    require('@testing-library/jest-dom/extend-expect');\n    const { useStaticQuery } = require(\"gatsby\");\n    beforeAll(() => {\n      useStaticQuery.mockReturnValue({\n        site: {\n          siteMetadata: {\n            siteUrl: \"test.url.com\",\n            social: { twitter: \"@slarsendisney\" },\n          },\n        },\n      });\n    });\n    ```", "```js\n    import React from 'react'\n    import {render} from '@testing-library/react'\n    import { HelmetProvider } from \"react-helmet-async\";\n    const Wrapper = ({children}) => {\n      return (\n        <HelmetProvider>\n            {children}\n        </HelmetProvider>\n      )\n    }\n    const customRender = (ui, options) =>\n      render(ui, {wrapper: Wrapper, ...options})\n    export {customRender as render}\n    ```", "```js\n    \"scripts\": {\n        \"build\": \"gatsby build\",\n        \"develop\": \"gatsby develop\",\n        \"start\": \"npm run develop\",\n        \"serve\": \"gatsby serve\",\n        \"clean\": \"gatsby clean\",\n        npm run test command, it will start Jest and begin testing.\n    ```", "```js\nimport React from \"react\";\nimport {render, screen} from '@testing-library/react'\nimport '@testing-library/jest-dom'\nimport Header from \"./Header\";\ntest(\"Renders header\", async () => {\n  render(<Header />);\n  expect(screen.getByText('Site Header'))\n});\n```", "```js\nimport React from \"react\";\nimport { render } from \"@testing-library/react\";\nimport \"@testing-library/jest-dom\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport SEO from \"../SEO\";\nHelmetProvider.canUseDOM = false;\ntest(\"Correctly Adds Meta Tags to Header\", async () => {\n  const mockTitle = \"Elevating React with Gatsby\";\n  const mockDescription = \"A starter blog demonstrating\n    what Gatsby can do.\";\n  const context = {};\n  render(\n   <HelmetProvider context={context}>\n    <SEO title={mockTitle} description={mockDescription} />\n   </HelmetProvider>\n  );\n  const head = context.helmet;\n  expect(head.meta.toString()).toMatchSnapshot();\n});\n```", "```js\nimport React from \"react\";\nimport { screen } from \"@testing-library/react\";\nimport {render} from \"../../test-utils\"\nimport \"@testing-library/jest-dom\";\nimport Index from \"../pages/index\";\ntest(\"Renders Index Page with correct name\", async () => {\n const data = {\n site: {\n siteMetadata: { name: \"My Name\", role: \"My Role\" },\n },\n };\n  render(<Index data={data} />);\n  expect(screen.getByText(data.site.siteMetadata.name));\n});\n```", "```js\n    npm install husky --save-dev\n    ```", "```js\n    npm set-script postinstall \"husky install\"\n    ```", "```js\n    npm run postinstall\n    ```", "```js\n    npx husky add .husky/pre-push \"npm run test\"\n    ```", "```js\n    npm install web-vitals\n    ```", "```js\n    import { getCLS, getFID, getLCP } from \"web-vitals\";\n    export default async function webVitals() {\n      try {\n        getFID((metric) => console.log(metric));\n        getLCP((metric) => console.log(metric));\n        getCLS((metric) => console.log(metric));\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    ```", "```js\n    import \"./src/styles/global.css\"\n    import webVitals from \"./src/utils/web-vitals\"\n    webVitals()\n    ```"]