["```js\nconst inputComponent = ({ inputRef, ...props }) => (\n  <div ref={inputRef} {...props} />\n);\n\nconst Control = props => (\n  <TextField\n    fullWidth\n    InputProps={{\n      inputComponent,\n      inputProps: {\n        className: props.selectProps.classes.input,\n        inputRef: props.innerRef,\n        children: props.children,\n        ...props.innerProps\n      }\n    }}\n    {...props.selectProps.textFieldProps}\n  />\n);\n```", "```js\nconst Menu = props => (\n  <Paper\n    square\n    className={props.selectProps.classes.paper}\n    {...props.innerProps}\n  >\n    {props.children}\n  </Paper>\n);\n```", "```js\nconst NoOptionsMessage = props => (\n  <Typography\n    color=\"textSecondary\"\n    className={props.selectProps.classes.noOptionsMessage}\n    {...props.innerProps}\n  >\n    {props.children}\n  </Typography>\n);\n```", "```js\nconst Option = props => (\n  <MenuItem\n    buttonRef={props.innerRef}\n    selected={props.isFocused}\n    component=\"div\"\n    style={{\n      fontWeight: props.isSelected ? 500 : 400\n    }}\n    {...props.innerProps}\n  >\n    {props.children}\n  </MenuItem>\n);\n```", "```js\nconst Placeholder = props => (\n  <Typography\n    color=\"textSecondary\"\n    className={props.selectProps.classes.placeholder}\n    {...props.innerProps}\n  >\n    {props.children}\n  </Typography>\n);\n```", "```js\nconst SingleValue = props => (\n  <Typography\n    className={props.selectProps.classes.singleValue}\n    {...props.innerProps}\n  >\n    {props.children}\n  </Typography>\n);\n```", "```js\nconst ValueContainer = props => (\n  <div className={props.selectProps.classes.valueContainer}>\n    {props.children}\n  </div>\n);\n```", "```js\nconst IndicatorSeparator = () => null;\n```", "```js\nconst ClearIndicator = props => (\n  <IconButton {...props.innerProps}>\n    <CancelIcon />\n  </IconButton>\n);\n```", "```js\nconst DropdownIndicator = props => (\n  <IconButton {...props.innerProps}>\n    <ArrowDropDownIcon />\n  </IconButton>\n);\n```", "```js\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    height: 250\n  },\n  input: {\n    display: 'flex',\n    padding: 0\n  },\n  valueContainer: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    flex: 1,\n    alignItems: 'center',\n    overflow: 'hidden'\n  },\n  noOptionsMessage: {\n    padding: `${theme.spacing(1)}px ${theme.spacing(2)}px`\n  },\n  singleValue: {\n    fontSize: 16\n  },\n  placeholder: {\n    position: 'absolute',\n    left: 2,\n    fontSize: 16\n  },\n  paper: {\n    position: 'absolute',\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0\n  }\n}));\n```", "```js\nexport default function Autocomplete(props) {\n  const classes = useStyles();\n  const [value, setValue] = useState(null);\n\n  return (\n    <div className={classes.root}>\n      <Select\n        value={value}\n        onChange={v => setValue(v)}\n        textFieldProps={{\n          label: 'Team',\n          InputLabelProps: {\n            shrink: true\n          }\n        }}\n        {...{ ...props, classes }}\n      />\n    </div>\n  );\n}\n\nAutocomplete.defaultProps = {\n  isClearable: true,\n  components: {\n    Control,\n    Menu,\n    NoOptionsMessage,\n    Option,\n    Placeholder,\n    SingleValue,\n    ValueContainer,\n    IndicatorSeparator,\n    ClearIndicator,\n    DropdownIndicator\n  },\n  options: [\n    { label: 'Boston Bruins', value: 'BOS' },\n    { label: 'Buffalo Sabres', value: 'BUF' },\n    { label: 'Detroit Red Wings', value: 'DET' },\n    { label: 'Florida Panthers', value: 'FLA' },\n    { label: 'Montreal Canadiens', value: 'MTL' },\n    { label: 'Ottawa Senators', value: 'OTT' },\n    { label: 'Tampa Bay Lightning', value: 'TBL' },\n    { label: 'Toronto Maple Leafs', value: 'TOR' },\n    { label: 'Carolina Hurricanes', value: 'CAR' },\n    { label: 'Columbus Blue Jackets', value: 'CBJ' },\n    { label: 'New Jersey Devils', value: 'NJD' },\n    { label: 'New York Islanders', value: 'NYI' },\n    { label: 'New York Rangers', value: 'NYR' },\n    { label: 'Philadelphia Flyers', value: 'PHI' },\n    { label: 'Pittsburgh Penguins', value: 'PIT' },\n    { label: 'Washington Capitals', value: 'WSH' },\n    { label: 'Chicago Blackhawks', value: 'CHI' },\n    { label: 'Colorado Avalanche', value: 'COL' },\n    { label: 'Dallas Stars', value: 'DAL' },\n    { label: 'Minnesota Wild', value: 'MIN' },\n    { label: 'Nashville Predators', value: 'NSH' },\n    { label: 'St. Louis Blues', value: 'STL' },\n    { label: 'Winnipeg Jets', value: 'WPG' },\n    { label: 'Anaheim Ducks', value: 'ANA' },\n    { label: 'Arizona Coyotes', value: 'ARI' },\n    { label: 'Calgary Flames', value: 'CGY' },\n    { label: 'Edmonton Oilers', value: 'EDM' },\n    { label: 'Los Angeles Kings', value: 'LAK' },\n    { label: 'San Jose Sharks', value: 'SJS' },\n    { label: 'Vancouver Canucks', value: 'VAN' },\n    { label: 'Vegas Golden Knights', value: 'VGK' }\n  ]\n};\n```", "```js\nconst MultiValue = props => (\n  <Chip\n    tabIndex={-1}\n    label={props.children}\n    className={clsx(props.selectProps.classes.chip, {\n      [props.selectProps.classes.chipFocused]: props.isFocused\n    })}\n    onDelete={props.removeProps.onClick}\n    deleteIcon={<CancelIcon {...props.removeProps} />}\n  />\n);\n```", "```js\ncomponents: {\n  Control,\n  Menu,\n  NoOptionsMessage,\n  Option,\n  Placeholder,\n  SingleValue,\n  MultiValue,\n  ValueContainer,\n  IndicatorSeparator,\n  ClearIndicator,\n  DropdownIndicator\n},\n```", "```js\nisMulti: true,\n```", "```js\nconst someAPI = searchText =>\n  new Promise(resolve => {\n    setTimeout(() => {\n      const teams = [\n        { label: 'Boston Bruins', value: 'BOS' },\n        { label: 'Buffalo Sabres', value: 'BUF' },\n        { label: 'Detroit Red Wings', value: 'DET' },\n        ...\n      ];\n\n      resolve(\n        teams.filter(\n          team =>\n            searchText &&\n            team.label\n              .toLowerCase()\n              .includes(searchText.toLowerCase())\n        )\n      );\n    }, 1000);\n  });\n```", "```js\nconst LoadingIndicator = () => <CircularProgress size={20} />;\n\nconst LoadingMessage = props => (\n  <Typography\n    color=\"textSecondary\"\n    className={props.selectProps.classes.noOptionsMessage}\n    {...props.innerProps}\n  >\n    {props.children}\n  </Typography>\n);\n```", "```js\nimport AsyncSelect from 'react-select/lib/Async';\n```", "```js\n<AsyncSelect\n  value={value}\n  onChange={value => setValue(value)}\n  textFieldProps={{\n    label: 'Team',\n    InputLabelProps: {\n      shrink: true\n    }\n  }}\n  {...{ ...props, classes }}\n/>\n```", "```js\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\n```", "```js\nconst ValueLabel = ({ label, search }) => {\n  const matches = match(label, search);\n  const parts = parse(label, matches);\n\n  return parts.map((part, index) =>\n    part.highlight ? (\n      <span key={index} style={{ fontWeight: 500 }}>\n        {part.text}\n      </span>\n    ) : (\n      <span key={index}>{part.text}</span>\n    )\n  );\n};\n```", "```js\nconst Option = props => (\n  <MenuItem\n    buttonRef={props.innerRef}\n    selected={props.isFocused}\n    component=\"div\"\n    style={{\n      fontWeight: props.isSelected ? 500 : 400\n    }}\n    {...props.innerProps}\n  >\n    <ValueLabel\n      label={props.children}\n      search={props.selectProps.inputValue}\n    />\n  </MenuItem>\n);\n```", "```js\nimport React, { useState } from 'react';\n\nimport { makeStyles } from '@material-ui/styles';\nimport ChipInput from 'material-ui-chip-input';\n\nconst useStyles = makeStyles(theme => ({\n  chipInput: { minWidth: 300 }\n}));\n\nexport default function StandaloneChipInput() {\n  const classes = useStyles();\n  const [values, setValues] = useState([]);\n\n  const onAdd = chip => {\n    setValues([...values, chip]);\n  };\n\n  const onDelete = (chip, index) => {\n    setValues(values.slice(0, index).concat(values.slice(index + 1)));\n  };\n\n  return (\n    <ChipInput\n      className={classes.chipInput}\n      helperText=\"Type name, hit enter to type another\"\n      value={values}\n      onAdd={onAdd}\n      onDelete={onDelete}\n    />\n  );\n}\n```", "```js\nconst onAdd = chip => {\n  setValues([...values, chip]);\n};\n\nconst onDelete = (chip, index) => {\n  setValues(values.slice(0, index).concat(values.slice(index + 1)));\n};\n```", "```js\n<ChipInput\n  className={classes.chipInput}\n  helperText=\"Type name, hit enter to type another\"\n  value={values}\n  onAdd={onAdd}\n  onDelete={onDelete}\n/>\n```"]