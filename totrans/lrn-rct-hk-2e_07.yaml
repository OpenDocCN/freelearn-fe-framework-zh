- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implementing React Contexts
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we learned about the State Hook, the Reducer Hook,
    and the Effect Hook. We developed a small blog application using these Hooks.
    As we noticed during the development of our blog app, we had to pass down the
    `username` state from the `App` component to the `UserBar` component, and from
    the `UserBar` component to the `Login`, `Register`, and `Logout` components. To
    avoid having to pass down the state like this, we are now going to learn about
    React Context and Context Hooks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: We are going to begin by learning what React Context is, and what providers
    and consumers are, by implementing themes as an example for contexts. Then, we
    are going to use Hooks as a context consumer and discuss when contexts should
    be used. Finally, we are going to implement global state using contexts.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Introducing React Context
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing themes via context
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternatives to contexts
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using context for global state
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A fairly recent version of Node.js should already be installed. The Node Package
    Manager (`npm`) also needs to be installed (it should come with Node.js). For
    more information on how to install Node.js, please check out the official website:
    [https://nodejs.org/](https://nodejs.org/).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to use **Visual Studio Code** (**VS Code**) for the guides in
    this book, but everything should work similarly in any other editor. For more
    information on how to install VS Code, please refer to the official website: [https://code.visualstudio.com](https://code.visualstudio.com).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we use the following versions:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Node.js v22.14.0
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm` v10.9.2'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VS Code v1.97.2
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While installing a newer version should not be an issue, please note that certain
    steps might work differently on a newer version. If you are having an issue with
    the code and steps provided in this book, please try using the mentioned versions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter05](https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter05).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended that you write the code on your own. Do not simply
    run the code examples that are provided with the book. It is important to write
    the code yourself to be able to learn and understand it properly. However, if
    you run into any issues, you can always refer to the code example.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Introducing React Context
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we passed down the `username` state and `setUsername`
    function from the `App` component to the `UserBar` component; and then from the
    `UserBar` component to the `Logout`, `Login`, and `Register` components. React
    Context provides a solution to this cumbersome way of passing down props over
    multiple levels of components, by allowing us to share values between components
    without having to explicitly pass them down via props. As we are going to see,
    contexts are perfect for sharing global state across the whole application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Passing down props
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before learning about React Context in depth, let’s recap what we implemented
    in the earlier chapters to get a feeling for the problem that contexts solve.
    You do not need to edit any code at this point; these steps are just a recap of
    what we have already done. Just read along for the following steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/App.jsx`, we defined the `username` state and `setUsername` function
    using a State Hook:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, we passed the `username` state and `setUsername` function to the `UserBar`
    component:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the `src/user/UserBar.jsx` file, we defined a `UserBar` component that takes
    the `username` state as a prop and then passes it down to the `Logout` component.
    We also passed down the `setUsername` function to the `Logout`, `Login`, and `Register`
    components:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, we used the `setUsername` function and the `username` state in the
    `Logout`, `Login`, and `Register` components:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: React Context allows us to skip *steps 2* and *3* and jump straight from *step
    1* to *step 4*. As you can imagine, in larger apps, context becomes even more
    useful because we might have to pass down props over many levels.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are first going to learn how context works by implementing
    a theme system for our blog. Then, we will use React Context to deal with the
    `username` global state in our blog app.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Implementing themes via context
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**React Context** is used to share values across a tree of React components.
    Usually, we want to share global values, such as the `username` state, the theme
    of our app, or the chosen language (if the app supports multiple languages).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'React Context consists of three parts:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: The **context** itself, which defines a default value and allows us to provide
    and consume values
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **provider**, which provides (sets) the value
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **consumer**, which consumes (uses) the value
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the context
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we have to define the context. The way this works has not changed since
    Hooks were introduced. We simply use the `createContext(defaultValue)` function
    from React to create a new context object. In this case, we will set the default
    value to `{ primaryColor: ''maroon'' }`, so our default primary color, when no
    provider is defined, will be maroon.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s get started defining the context:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter04_2` folder to a new `Chapter05_1` folder by executing the
    following command:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Open the new `Chapter05_1` folder in VS Code.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To keep our project clean as it grows, we are now extending the folder structure
    by grouping by base primitives first, then grouping by features within that folder.
    Create a new `src/contexts/` folder now.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, create a new `src/components/` folder.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the `src/post/` and `src/user/` folders into the `src/components/` folder.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `src/App.jsx` and adjust the imports, as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a new `src/contexts/ThemeContext.js` file. Inside it, import the `createContext`
    function:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, define the context with the aforementioned default value:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When the context is consumed but no provider is defined, then it will return
    this default value.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Note how we are exporting `ThemeContext` here because we are going to need to
    import it later to create the provider and consume it using a Context Hook.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: That’s all we need to do to define a context with React.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Quick detour – absolute imports
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we were to import the context in a component now, we would have to import
    from `../../contexts/ThemeContext.js`. Besides the fact that it becomes hard to
    read when files are deeply nested, it can cause issues when organizing files into
    subfolders later. To avoid these problems, we can use **absolute imports**. Absolute
    imports allow us to import from the root of a project. They are implemented using
    **resolve aliases** in Vite. Basically, we can tell Vite to resolve a special
    character, such as an `@` symbol, to an absolute path to the `src` folder. This
    means that we can import the context from `@/contexts/ThemeContext.js` instead.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started configuring absolute imports now:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `vite.config.js` and import the `path` utils:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `config` object, add a `resolve` alias, as follows:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Additionally, we can improve autocompletion in our code editor or IDE by creating
    a `jsconfig.json` file. This file will tell the editor about our absolute import
    configuration and let us easily import files from it. Create a new `jsconfig.json`
    file now.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, add the following config:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now that we can use absolute imports, let’s continue defining the consumer.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Defining the consumer
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use a context, we need a consumer. Let’s first revisit the traditional way
    of defining a consumer before we get started using Hooks:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/components/post/Post.jsx` and import `ThemeContext` there:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Wrap the whole component with a `ThemeContext.Consumer` component and a **render
    function** as its `children` prop, to make use of the context value:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The render function allows us to pass values down to the children of a component.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the render function, we can now make use of the context value to set
    the color of the title of a blog post, as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Using contexts like this works, but as we have learned in the first chapter,
    using components with render functions in this way clutters the React tree and
    makes our app harder to debug and maintain.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Using Hooks to consume a context
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A better way to consume contexts is using a Context Hook! That way, we can use
    context values like any other value.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to change the consumer to a Context Hook:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/components/post/Post.jsx` and add the following import:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, define a Context Hook, as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, *remove* the following highlighted parts of the code:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see, using a Context Hook allows us to directly consume the value
    from the context and simply render the post without needing a wrapper component.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the blog app by executing the following command:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can see that the title of blog posts is now maroon colored:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Using a Context Hook to change the theme of our app](img/B31327_05_01.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – Using a Context Hook to change the theme of our app
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the theme context successfully provides the color for the post
    title.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Defining the provider
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Contexts use the default value that is passed to `createContext` when there
    is no provider defined. For example, let’s imagine our component uses `ThemeContext`
    and is rendered as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Then, `primaryColor` will be set to `maroon` (we defined this earlier). This
    can be used as a fallback, for example, when the component is not embedded in
    the app but instead embedded in an interactive style guide (such as Storybook).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'When there is a provider defined, they will use the value of the provider.
    Let’s render the component like this instead:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Then, `primaryColor` will be set to `black`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'If there are multiple providers in the tree, the components will use the value
    from the closest parent provider. For example, let’s say we render components
    like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Then, `primaryColor` in the component will be set to `red`, as that is the provider
    closest to the component in the tree. However, `OtherComponent` in this example
    will still have `primaryColor` set to `black`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, a context without a provider is just a static value; the provider
    (especially in combination with other Hooks, such as a State Hook for the value)
    is what allows us to dynamically change the value of a context.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s define the provider now. Follow these steps to get started:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/App.jsx` and import `ThemeContext`:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, wrap the contents of the `App` component with the `ThemeContext.Provider`
    component, and provide a value:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As we can see, the post titles are now back to being rendered in black. If we
    want to change the value of our context, we can simply adjust the `value` prop
    that is passed to the `provider` component. We could also, for example, use a
    State Hook to dynamically change the value of a context. We will try this later
    when we use a context for the global state.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: If we do not pass a `value` prop to the provider, the default value of a context
    will *not* be used! If we define a provider without a `value` prop, then the value
    of the context will be `undefined`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have defined a single provider for the context, let’s move on to
    defining multiple nested providers.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Nesting providers
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With React Context, it is also possible to define multiple providers for the
    same context. Using this technique, we can override the context value in certain
    parts of our app. For example, let’s say we want to implement a featured posts
    section for our blog app. Then, we could do the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/App.jsx` and define a new `featuredPosts` array:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, inside the `App` component, render a new `PostList` component rendering
    the `featuredPosts` array, but wrap it inside another `ThemeContext.Provider`:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You will now see that the featured post has a different color from the other
    posts:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Implementing featured posts by overriding context values with
    nested providers](img/B31327_05_02.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – Implementing featured posts by overriding context values with nested
    providers
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter05/Chapter05_1`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Alternatives to contexts
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We should be careful not to use React Context too often, as it makes reusing
    components more difficult. We should only use context when we need to access data
    in many components, which are at different nesting levels. Additionally, we need
    to make sure that we only use contexts for non-frequently changing data. Frequently
    changing values of contexts, especially contexts that are used high up in the
    component tree, may cause large parts of the component tree to re-render, resulting
    in performance problems. That is why, for frequently changing values, we should
    use a state management solution such as Jotai, Redux, or MobX instead. These state
    management solutions allow us to access small parts of the state in a fine-grained
    way and thus reduce the amount of re-renders. Good candidates for contexts are
    features such as theming and translation (i18n) systems.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'If we only want to avoid having to pass down props, in some cases, we can pass
    down the rendered component instead of the data. For example, let’s say we have
    a `Page` component that renders a `Header` component, which renders a `Profile`
    component, which then renders an `Avatar` component. We get a `headerSize` prop
    passed to the `Page` component, which we need in the `Header` component, but also
    in the `Avatar` component:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Instead of passing down props through multiple levels, we could do the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now, only the `Page` component needs to know about the props, and there is no
    need to pass them down further in the tree. In this case, contexts are not necessary.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Such a pattern is called **inversion of control**, and it can make your code
    much cleaner than passing down props or using a context. However, we should not
    always use this pattern either because it makes the higher-level component more
    complicated.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s continue by learning about using context for global state.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Using context for global state
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After learning how to use React Context to implement themes in our blog app,
    we are now going to use a context to avoid having to manually pass down the `username`
    and `setUsername` props. The user state is a global state, which means it is used
    across the whole app. It also does not change frequently. As such, it is a good
    candidate for using a context. Like we did before, we start by defining the context.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Defining the context
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To define the context, we need to use the `createContext` function again. In
    this case, we set the default value to an array with an empty string and a **no-op
    function** (a function that does nothing). Later, when defining the provider,
    we will provide this array by using the result from the State Hook. Remember,
    the State Hook returns an array like this: `[value, setValue]`.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s get started defining the context:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter05_1` folder to a new `Chapter05_2` folder by executing the
    following command:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Open the new `Chapter05_2` folder in VS Code.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new `src/contexts/UserContext.js` file. Inside it, import the `createContext`
    function:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, define the context with the aforementioned default value, which imitates
    the return value of a State Hook, but with an empty string and a **no-op function**
    (a function that does nothing):'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: When the context is consumed but no provider is defined, then it will return
    this default value.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s continue with defining the context provider.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Defining the context provider
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already created a State Hook for the `username` state. We can now use
    the result from this State Hook and pass it to the context provider so that any
    component in our app can make use of it.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started defining the context provider now:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/App.jsx` and import `UserContext`, as follows:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then, wrap the result of the `App` component with `UserContext.Provider`:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, we can *remove* the following props we previously passed down:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Do not forget to add the closing tag for `UserContext.Provider`:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Of course, it is also possible to use a similar pattern to pass the result of
    a Reducer Hook into a context.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: The context provider now provides the `username` value and the `setUsername`
    function to the rest of our app.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the app to use UserContext
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have a context provider, we can refactor the rest of our app to
    use the context instead of props.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to get started:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'First, edit `src/components/user/UserBar.jsx` and add imports to the `useContext`
    function and `UserContext`:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then, *remove* the props passed to the component:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Next, define the Context Hook and get the `username` value from it:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We can now *remove* the props passed down to the other components:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Edit `src/components/user/Login.jsx` and add an import of `useContext` and
    `UserContext`:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then, *remove* the props from the component:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Add the Context Hook:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: If we do not need the first element of an array, we can skip it when destructuring
    by simply putting a comma without specifying the name of the first variable.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit `src/components/user/Logout.jsx` and add an import of `useContext` and
    `UserContext`:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Then, *remove* the props from the component:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add the Context Hook:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Edit `src/components/user/Register.jsx` and add an import of `useContext` and
    `UserContext`:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Then, *remove* the props from the component:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Add the Context Hook:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Edit `src/components/post/CreatePost.jsx` and add an import of `useContext`
    and `UserContext`:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Then, *remove* the `username` prop from the component:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Add the Context Hook, as follows:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Start the app, as follows:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Now, the app works the same way as before, but our code is a lot cleaner and
    more concise, all thanks to React Context and the Context Hook!
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter05/Chapter05_2`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first learned about React Context as an alternative to passing
    down props over multiple levels of React components. We then learned about context
    providers and consumers, and the new way to define consumers via Hooks. We used
    what we learned in practice, by implementing theme support in our blog app. Next,
    we learned when it does not make sense to use contexts, and when we should use
    inversion of control instead. Finally, we used a context for the global `username`
    state in our blog app.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn how to request data from a server,
    using React and Hooks. Then, we are going to learn about React Suspense, so that
    we do not have to wait for the requests to finish before rendering our app.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To recap what we have learned in this chapter, try to answer the following
    questions:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: What problem do contexts avoid?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the three parts that contexts consist of?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are all parts required to be defined in order to use contexts?
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the advantage of using Hooks instead of traditional context consumers?
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is an alternative to contexts and when should we use it?
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we implement dynamically changing contexts?
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When does it make sense to use contexts for state?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following links:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'Official docs on React Context: [https://react.dev/learn/passing-data-deeply-with-context](https://react.dev/learn/passing-data-deeply-with-context)'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'List of HTML color codes (if you want to adjust your theme): [https://www.rapidtables.com/web/color/html-color-codes.html](https://www.rapidtables.com/web/color/html-color-codes.html)'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example of contexts for local state used by `react-aria`: [https://react-spectrum.adobe.com/react-aria/advanced.html#contexts](https://react-spectrum.adobe.com/react-aria/advanced.html#contexts)'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example of contexts for global state used by `react-i18next`: [https://react.i18next.com/latest/i18nextprovider](https://react.i18next.com/latest/i18nextprovider)'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`react-i18next` 用于全局状态的上下文示例：[https://react.i18next.com/latest/i18nextprovider](https://react.i18next.com/latest/i18nextprovider)'
- en: Learn more on Discord
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入这本书的 Discord 社区——在那里您可以分享反馈、向作者提问，并了解新书发布——请扫描下面的二维码：
- en: '[https://packt.link/wnXT0](Chapter_05.xhtml)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/wnXT0](Chapter_05.xhtml)'
- en: '![](img/image_%283%29.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_%283%29.png)'
