- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Preparing for Full-Stack Development
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备进行全栈开发
- en: In this chapter, I am first going to give a brief overview of the contents of
    the book and explain why the skills taught in this book are important in a modern
    development environment. Then, we will jump into action and set up a project that
    will be used as a basis for the development of our full-stack projects. At the
    end of this chapter, you will have an **integrated development environment** (**IDE**)
    and project set up and ready for full-stack development and will understand which
    tools can be used for setting up such projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我首先将简要概述本书的内容，并解释为什么本书中教授的技能在现代开发环境中很重要。然后，我们将开始行动，设置一个将作为我们全栈项目开发基础的项目。在本章结束时，你将拥有一个**集成开发环境**（**IDE**）和项目，它们已设置好并准备好进行全栈开发，并且将了解哪些工具可以用于设置此类项目。
- en: 'In this chapter, we are going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Motivation to become a full-stack developer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成为全栈开发者的动机
- en: What is new in the third edition?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三版的新内容是什么？
- en: Getting the most out of this book
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 充分利用本书
- en: Setting up the development environment
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter will guide you through setting up all the necessary technologies
    needed for developing full-stack web applications throughout this book. Before
    we start, please install the following, if you do not already have them installed:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将指导你设置本书中开发全栈网络应用程序所需的所有必要技术。在我们开始之前，如果你还没有安装以下内容，请安装它们：
- en: Node.js v20.10.0
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js v20.10.0
- en: Git v2.43.0
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git v2.43.0
- en: Visual Studio Code v1.84.2
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code v1.84.2
- en: Those versions are the ones used in the book. While installing a newer version
    should not be an issue, please note that certain steps might work differently
    on a newer version. If you are having an issue with the code and steps provided
    in this book, please try using the mentioned versions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些版本是书中使用的版本。虽然安装较新版本通常不会有问题，但请注意，某些步骤在较新版本上可能有所不同。如果你在使用本书中提供的代码和步骤时遇到问题，请尝试使用提到的版本。
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch1](https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch1).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 上找到本章的代码：[https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch1](https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch1)。
- en: 'The CiA video for this chapter can be found at: [https://youtu.be/dyf3nECvKAE](https://youtu.be/dyf3nECvKAE).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 CiA 视频可以在以下网址找到：[https://youtu.be/dyf3nECvKAE](https://youtu.be/dyf3nECvKAE)。
- en: Important
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 重要
- en: If you cloned the full repository for the book, Husky may not find the **.git**
    directory when running **npm install**. In that case, just run **git init** in
    the root of the corresponding chapter folder.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你克隆了本书的完整仓库，当运行 **npm install** 时，Husky 可能找不到 **.git** 目录。在这种情况下，只需在相应章节文件夹的根目录下运行
    **git init**。
- en: Motivation to become a full-stack developer
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成为全栈开发者的动机
- en: Understanding full-stack development is becoming increasingly important, as
    companies seek to increase the cooperation – and reduce the gap – between the
    frontend and the backend. The frontend is becoming more deeply integrated with
    the backend, using technologies such as server-side rendering. Throughout this
    book, we are going to learn about the development, integration, testing, and deployment
    of full-stack projects.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 随着公司寻求增加前端和后端之间的合作并缩小差距，理解全栈开发变得越来越重要。前端正越来越深入地与后端集成，使用如服务器端渲染等技术。在本书中，我们将学习全栈项目的开发、集成、测试和部署。
- en: What is new in this release of Full-Stack React Projects?
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Full-Stack React Projects 本次发布的新内容是什么？
- en: Unlike previous releases of Full-Stack React Projects, this new release focuses
    more on the integration of the frontend with the backend than the previous two
    editions, and thus intentionally does not focus so much on creating a **user interface**
    (**UI**) or using UI libraries, such as **Material UI** (**MUI**), on the frontend.
    This edition gives the essential knowledge for integrating and deploying full-stack
    web applications. The deployment of apps was missing completely from previous
    editions, and testing was only briefly introduced. This edition focuses more on
    these essential parts of full-stack development such that, after reading this
    book, you will be able to develop, integrate, test, and deploy a full-stack web
    application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Getting the most out of this book
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To keep the book short and to the point, we are going to use specific technologies
    and tools. The concepts, however, apply to other technologies as well. We will
    attempt to briefly introduce alternatives so that if something is not a good fit
    for your project, you can pick and choose different tools. I recommend first trying
    out the technologies introduced in this book to be able to follow the instructions,
    but do not hesitate to try out the alternatives on your own later.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended that you write the code on your own. Do not simply
    run the code examples that are provided. It is important to write the code yourself
    in order to learn and understand it properly. However, if you run into any issues,
    you can always refer to the code examples.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: With that said, let’s start with setting up our development environment in the
    next section.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the development environment
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we are going to use **Visual Studio Code** (**VS Code**) as our
    code editor. Feel free to use whichever editor you prefer, but keep in mind that
    the extensions used and settings configured may be slightly different in the editor
    of your choice.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now install VS Code and useful extensions, and then continue setting up
    all the tools needed for our development environment.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Installing VS Code and extensions
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we can get started developing and setting up the other tools, we need
    to set up our code editor by following these steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Download VS Code for your operating system from the official website (at the
    time of writing, the URL is [https://code.visualstudio.com/](https://code.visualstudio.com/)).
    We are going to use version *1.84.2* in this book.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After downloading and installing the application, open it, and you should see
    the following window:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.1 – A fresh installation of VS Code (on macOS)](img/B19385_01_1.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – A fresh installation of VS Code (on macOS)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'To make things easier later, we are going to install some extensions, so click
    on the **Extensions** icon, which is the fifth icon from the top on the left in
    the screenshot. A sidebar should open, where you will see **Search Extensions
    in Marketplace** at the top. Enter an extension name here and click on **Install**
    to install it. Let’s start by installing the **Docker** extension:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Installing the Docker extension in VS Code](img/B19385_01_2.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Installing the Docker extension in VS Code
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the following extensions:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker (by Microsoft)
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ESLint (by Microsoft)
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Prettier – Code formatter (by Prettier)
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB for VS Code (by MongoDB)
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for JavaScript and Node.js already comes built-in with VS Code.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a folder for the projects made in this book (for example, you can call
    it **Full-Stack-React-Projects**). Inside this folder, create a new folder called
    **ch1**.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Files** tab (first icon from top) and click the **Open Folder**
    button to open the empty **ch1** folder.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you get a dialog asking **Do you trust the authors of the files in this folder?**,
    check **Trust the authors of all files in the parent folder ‘Full-Stack-React-Projects’**
    and then click on the **Yes, I trust the** **authors** button.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Allowing VS Code to execute files in our project folder](img/B19385_01_3.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Allowing VS Code to execute files in our project folder
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: You can safely ignore this warning in your own projects, as you can be sure
    that those do not contain malicious code. When opening folders from untrusted
    sources, you can press **No, I don’t trust the authors**, and still browse the
    code. However, when doing so, some features of VS Code will be disabled.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: We have now successfully set up VS Code and are ready to start setting up our
    project! If you have cloned the folder from the GitHub code examples provided,
    a notification telling you that a Git repository was found will also pop up. You
    can simply close this one, as we only want to open the `ch1` folder.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Now that VS Code is ready, let’s continue by setting up a new project with Vite.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a project with Vite
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this book, we are going to use **Vite** to set up our project, as it is
    the most popular and liked according to *The State of JS 2022* survey ([https://2022.stateofjs.com/](https://2022.stateofjs.com/)).
    Vite also makes it easy to set up a modern frontend project, while still making
    it possible to extend the configuration later if needed. Follow these steps to
    set up your project with Vite:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: In the VS Code menu bar, go to **Terminal** | **New Terminal** to open a new
    Terminal.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the Terminal, run the following command:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Make sure there is a period at the end of the command to create the project
    in the current folder instead of creating a new folder.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: To keep the instructions in this book working even when new versions are released,
    we pin all packages to a fixed version. Please follow the instructions with the
    given versions. After finishing this book, when starting new projects on your
    own, you should always try using the latest versions but keep in mind that changes
    might be needed to get them working. Consult the documentation of the respective
    packages and follow the migration path from the book version to the latest version.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: When asked if **create-vite** should be installed, simply type **y** and press
    the *Return/Enter* key to proceed.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When asked about the framework, use the arrow keys to select **React** and press
    *Return*. If you are being asked for a project name, press *Ctrl* + *C* to cancel,
    then run the command again, making sure there is a period at the end to select
    the current folder.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When asked about the variant, select **JavaScript**.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, our project is set up and we can run **npm install** to install the dependencies.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Afterward, run **npm run dev** to start the dev server, as shown in the following
    screenshot:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 1.4 – The \uFEFFTerminal after setting up a project with Vite and\
    \ before starting the dev server](img/B19385_01_4.jpg)"
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – The Terminal after setting up a project with Vite and before starting
    the dev server
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: For simplicity in setting up, we just used **npm** directly. If you prefer **yarn**
    or **pnpm**, you can instead run **yarn create vite** or **pnpm create** **vite**,
    respectively.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: In the Terminal, you will see a URL telling you where your app is running. You
    can either hold *Ctrl* (*Cmd* on macOS) and click on the link to open it in your
    browser, or manually enter the URL in a browser.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To test whether your app is interactive, click the button with the text **count
    is 0**, and it should increase the count every time it is pressed.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Our first React app running with Vite](img/B19385_01_5.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Our first React app running with Vite
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Alternatives to Vite
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Alternatives to Vite are bundlers, such as webpack, Rollup, and Parcel. These
    are highly configurable but often do not offer a great experience for dev servers.
    They first must bundle all our code together before serving it to the browser.
    Instead, Vite natively supports the **ECMAScript module** (**ESM**) standard.
    Furthermore, Vite requires very little configuration to get started. A downside
    of Vite is that it can be hard to configure certain more complex scenarios with
    it. An upcoming bundler that is promising is Turbopack; however, it is still very
    new at the time of writing. For full-stack development with server-side rendering,
    we will later get to know Next.js, which is a React framework that also provides
    a dev server out of the box.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Now that our boilerplate project is up and running, let’s spend some time setting
    up tools that will enforce best practices and a consistent code style.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Setting up ESLint and Prettier to enforce best practices and code style
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that our React app is set up, we are going to set up **ESLint** to enforce
    coding best practices with JavaScript and React. We are also going to set up **Prettier**
    to enforce a code style and automatically format our code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Installing the necessary dependencies
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, we are going to install all the necessary dependencies:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: In the Terminal, click on the **Split Terminal** icon at the top right of the
    **Terminal** pane to create a new **Terminal** pane. This will keep our app running
    while we run other commands.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on this newly opened pane to focus it. Then, enter the following command
    to install ESLint, Prettier, and the relevant plugins:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The packages installed are the following:'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**prettier**: Formats our code automatically according to a defined code style'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eslint**: Analyzes our code and enforces best practices'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eslint-config-react:** Enables rules in ESLint relevant to React projects'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eslint-config-prettier:** Disables rules relating to code style in ESLint
    so that Prettier can handle them instead'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eslint-plugin-jsx-a11y**: Allows ESLint to check for accessibility (**a11y**)
    issues in our JSX code'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: The **--save-dev** flag in **npm** saves those dependencies as **dev** dependencies,
    which means that they will only be installed for development. They will not be
    installed and included in a deployed app. This is important in order to keep the
    size of our containers as small as possible later.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: After the dependencies are installed, we need to configure Prettier and ESLint.
    We will start with configuring Prettier.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Prettier
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Prettier will format the code for us and replace the default code formatter
    for JavaScript in VS Code. It will allow us to spend more time writing code, automatically
    formatting it for us properly when we save the file. Follow these steps to configure
    Prettier:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Right-click below the files list in the left sidebar of VS Code (if it is not
    opened, click the **Files** icon) and press **New file...** to create a new file.
    Call it **.prettierrc.json** (do not forget the period at the beginning of the
    file name!).
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The newly created file should open automatically, so we can start writing the
    following configuration into it. We first create a new object and set the **trailingComma**
    option to **all** to make sure objects and arrays that span over multiple lines
    always have a comma at the end, even for the last element. This reduces the number
    of touched lines when committing a change via Git:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, we set the **tabWidth** option to **2** spaces:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Set the **printWidth** to **80** characters per line to avoid long lines in
    our code:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Set the **semi** option to **false** to avoid semicolons where not necessary:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, we enforce the use of single quotes instead of double quotes:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: These settings for Prettier are just an example of a coding style convention.
    Of course, you are free to adjust these to your own preferences. There are many
    more options, all of which can be found in the Prettier docs ([https://prettier.io/docs/en/options.html](https://prettier.io/docs/en/options.html)).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Prettier extension
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have a configuration file for Prettier, we need to make sure the
    VS Code extension is properly configured to format the code for us:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Open the VS Code settings by going to **File** | **Preferences...** | **Settings**
    on Windows/Linux, or **Code** | **Settings...** | **Settings** on macOS.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the newly opened settings editor, click on the **Workspace** tab. This ensures
    that we save all our settings in a **.vscode/settings.json** file in our project
    folder. When other developers open our project, they will automatically be using
    those settings as well.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for **editor format on save** and check the checkbox to enable formatting
    code on save.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for **editor default formatter** and select **Prettier - Code formatter**
    from the list.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To verify that Prettier works, open the **.prettierrc.json** file, add some
    extra spaces to the beginning of a line, and save the file. You should notice
    that Prettier reformatted the code to adhere to the defined code style. It will
    reduce the number of spaces for indentation to two.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that Prettier is set up properly, we do not need to worry about formatting
    our code manually anymore. Feel free to just type in code as you go and save the
    file to get it formatted for you!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Prettier ignore file
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To improve performance and avoid running Prettier on files that should not
    be automatically formatted, we can ignore certain files and folders by creating
    a Prettier ignore file. Follow these steps:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called **.prettierignore** in the root of our project, similar
    to how we created the **.****prettierrc.json** file.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following contents to it to ignore the transpiled source code:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `node_modules/` folder is automatically ignored by Prettier.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have successfully set up Prettier, we are going to configure ESLint
    to enforce coding best practices.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Configuring ESLint
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While Prettier focuses on the style and formatting of our code, ESLint focuses
    on the actual code, avoiding common mistakes or unnecessary code. Let’s configure
    it now:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Delete the automatically created **.****eslintrc.cjs** file.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new **.eslintrc.json** file and start writing the following configuration
    into it. First, we set **root** to **true** to make sure ESLint does not look
    at parent folders for more configuration:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Define an **env** object, in which we set the browser environment to **true**
    so that ESLint understands browser-specific globals such as **document** and **window**:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Define a **parserOptions** object, where we specify that we are using the latest
    ECMAScript version and ESM:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Define an **extends** array to extend from recommended configurations. Specifically,
    we extend from ESLint’s recommended rules and the recommended rules for the plugins
    we installed:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As the last element of the array, we use **prettier** to disable all code style-related
    rules in ESLint and let Prettier handle it:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, we define settings for the plugins. First, we tell the **react** plugin
    to detect our installed React version automatically:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, outside of the **settings** section, we define an **overrides** array,
    in which we specify that ESLint should only lint **.js** and **.****jsx** files:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a new **.eslintignore** file, with the following contents:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `node_modules/` folder is automatically ignored by ESLint.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save the files and run **npx eslint src** in the Terminal to run the linter.
    You will see that there are some errors already due to our configured rules not
    matching the source provided by the default project in Vite:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.6 – When running ESLint for the first time, we get some errors about
    rule violations](img/B19385_01_6.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – When running ESLint for the first time, we get some errors about
    rule violations
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, all these issues are automatically fixable by ESLint. Run **npx
    eslint src --fix** to fix the issues automatically. Now, when you run **npx eslint
    src** again, you will not get any output. This means that there were no linter
    errors!
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: The **npx** command allows us to execute commands provided by **npm** packages,
    in a similar context as running them in **package.json** scripts would do. It
    can also run remote packages without installing them permanently. If the package
    is not installed yet, it will ask you whether it should do this.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new script to run our linter
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the previous section, we have been calling the linter by running `npx eslint
    src` manually. We are now going to add a `lint` script to `package.json`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Terminal, run the following command to define a **lint** script in the
    **package.json** file:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, run **npm run lint** in the Terminal. This should execute **eslint src**
    successfully, just like **npx eslint** **src** did:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 1.7 – \uFEFFThe linter running successfully, with no errors](img/B19385_01_7.jpg)"
  id: totrans-154
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – The linter running successfully, with no errors
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: After setting up ESLint and Prettier, we still need to make sure that they run
    before we commit code. Let’s set up Husky to make sure we commit proper code now.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Husky to make sure we commit proper code
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After setting up Prettier and ESLint, we will now get our code automatically
    formatted on save by Prettier and see errors from ESLint in VS Code when we make
    mistakes or ignore best practices. However, we might miss some of these errors
    and accidentally commit code that is invalid. To avoid this, we can set up **Husky**
    and **lint-staged**, which run before we commit our code to Git and ensure that
    Prettier and ESLint are executed successfully on the source code before it is
    committed.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Important
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: If you cloned the full repository for the book, Husky may not find the **.git**
    directory when running **npm install**. In that case, just run **git init** in
    the root of the corresponding chapter folder.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s set Husky and lint-staged up by following these steps:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to install Husky and lint-staged as **dev** dependencies:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Open the **package.json** file and add the following **lint-staged** configuration
    to it in a new object after **devDependencies**, then save the file. This will
    run Prettier and ESlint on all committed **.js** and **.jsx** files and attempt
    to automatically fix code style and linter errors, if possible:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Initialize a Git repository in the **ch1** folder and make an initial commit
    with just the **package.json** file, as lint-staged does not get executed on the
    initial commit:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the **husky install** script to a **prepare** script in **package.json**,
    so that Husky gets installed automatically when the project is cloned and **npm
    install** is executed:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Since we do not need to run **npm install** again right now, we need to manually
    run the **prepare** script this time:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add a **pre-commit** hook for lint-staged, so that ESLint and Prettier run
    every time we do **git commit**:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, add all files to Git and attempt to make a commit:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If everything worked successfully, you should see `husky` running `lint-staged`,
    which, in turn, runs `prettier` and `eslint`, after you run `git commit`. If you
    are getting a configuration error, ensure that all files are saved properly and
    then run `git` `commit` again.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Husky and lint-staged successfully enforcing code style and
    best practices before we commit](img/B19385_01_8.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – Husky and lint-staged successfully enforcing code style and best
    practices before we commit
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Setting up commitlint to enforce a standard for our commit messages
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In addition to linting our code, we can also lint our commit messages. You
    may have noticed that we were prefixing our commit messages with a type already
    (the `chore` type). Types make it easier to follow what was changed in a commit.
    To enforce the use of types, we can set up **commitlint**. Follow these steps
    to set it up:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'Install commitlint and a conventional config for commitlint:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a new **.commitlintrc.json** file in the root of our project and add
    the following contents:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add a **commit-msg** hook to Husky:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, if we try adding our changed files and committing without a type or a
    wrong type, we will get an error from commitlint and will not be able to make
    such a commit. If we add the correct type, it will succeed:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following figure shows Husky in action. If we write an incorrect commit
    message, it will reject it and not let us commit the code. Only if we enter a
    properly formatted commit message will the commit go through:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – commitlint working successfully and preventing commits without
    a type and with wrong types](img/B19385_01_9.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 – commitlint working successfully and preventing commits without
    a type and with wrong types
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'Commit messages in the commitlint conventional config ([https://www.conventionalcommits.org/](https://www.conventionalcommits.org/))
    are structured in a way where a type must be listed first, then an optional scope
    follows, and then the description follows, such as `type(scope): description`.
    Possible types are as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '**fix**: For bug fixes'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**feat**: For new features'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**refactor**: For restructuring the code without adding features or fixing
    bugs'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**build**: For changes in the build system or dependencies'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ci**: For changes in the CI/CD configuration'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**docs**: For changes in the documentation only'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**perf**: For performance optimizations'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**style**: For fixing code formatting'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**test**: For adding or adjusting tests'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The scope is optional and best used in a monorepo to specify that changes were
    made to a certain app or library within it.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have successfully set up our project and started enforcing standards,
    we can continue working on our project without worrying about a consistent code
    style, consistent commit messages, or making small mistakes. ESLint, Prettier,
    Husky, and commitlint have got us covered.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, [*Chapter 2*](B19385_02.xhtml#_idTextAnchor028), *Getting
    to Know Node.js and MongoDB*, we are going to learn how to write and run small
    Node.js scripts and how MongoDB, a database system, works.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
