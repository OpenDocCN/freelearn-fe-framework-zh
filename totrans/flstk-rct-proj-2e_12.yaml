- en: Adding Real-Time Bidding Capabilities to the Marketplace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a world more connected than ever before, instant communication and real-time
    updates are expected behaviors in any application that enables interaction between
    users. Adding real-time features to your application can keep your users engaged,
    and because of that, they will be spending more time on your platform. In this
    chapter, we will learn how to use the MERN stack technologies, along with Socket.IO,
    to easily integrate real-time behavior in a full-stack application. We will do
    this by incorporating an auctioning feature with real-time bidding capabilities in
    the MERN Marketplace application that we developed in [Chapter 7](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Exercising
    MERN Skills with an Online Marketplace*, and [Chapter 8](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Extending
    the Marketplace for Orders and Payments*. After going through the implementation
    of this auction and bidding feature, you will know how to utilize sockets in a
    MERN stack application to add real-time features of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will extend the online marketplace application by covering
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing real-time bidding in the MERN Marketplace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding auctions to the marketplace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the auction view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing real-time bidding with Socket.IO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing real-time bidding in the MERN Marketplace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MERN Marketplace application already allows its users to become sellers
    and maintain shops with products that can be bought by regular users. In this
    chapter, we will extend these functionalities to allow sellers to create auctions
    for items that other users can place bids on in a fixed duration of time. The
    auction view will describe the item for sale and let signed in users place bids
    when the auction is live. Different users can place their own bids, and also see
    other users placing bids in real-time, with the view updating accordingly. The
    completed auction view, with an auction in a live state, will render as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/189a06af-d342-43f7-904d-83e8c9bd52cd.png)'
  prefs: []
  type: TYPE_IMG
- en: The code for the complete MERN Marketplace application is available on GitHub
    at [https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter09/mern-marketplace-bidding](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter09/mern-marketplace-bidding). The
    implementations discussed in this chapter can be accessed in the *bidding* branch
    of the repository. You can clone this code and run the application as you go through
    the code explanations in the rest of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following component tree diagram shows the custom components that make
    up the entire MERN Marketplace frontend, including components for the auction
    and bidding-related features that will be implemented in the rest of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3fb0636e-bf13-40b3-afeb-d2f4b2e6a46a.png)'
  prefs: []
  type: TYPE_IMG
- en: The features that will be discussed in this chapter modify some of the existing
    components, such as `Profile` and `Menu`, and also add new components, such as `NewAuction`, `MyAuctions`, `Auction`,
    and `Bidding`. In the next section, we will begin extending this online marketplace
    by integrating the option to add auctions to the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Adding auctions to the marketplace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the MERN Marketplace, we will allow a user who is signed in and has an active
    seller account to create auctions for items that they want other users to place
    bids on. To enable the features of adding and managing auctions, we will need
    to define how to store auction details and implement the full-stack slices that
    will let users create, access and update auctions on the platform. In the following
    sections, we will build out this auction module for the application. First, we
    will define the auction model with a Mongoose Schema for storing details about
    each auction. Then, we will discuss implementations for the backend APIs and frontend
    views that are needed to create new auctions, list auctions that are ongoing,
    created by the same seller and bid on by the same user, and modify existing auctions
    by either editing details of, or deleting an auction from the application.
  prefs: []
  type: TYPE_NORMAL
- en: Defining an Auction model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will implement a Mongoose model that will define an Auction model for storing
    the details of each auction. This model will be defined in `server/models/auction.model.js`,
    and the implementation will be similar to other Mongoose model implementations
    we''ve covered in previous chapters, such as the Shop model we defined in [Chapter
    7](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Exercising MERN Skills with an
    Online Marketplace*. The Auction Schema in this model will have fields to store
    auction details such as the name and description of the item being auctioned,
    along with an image and a reference to the seller creating this auction. It will
    also have fields that specify the start and end time for bidding on this auction,
    a starting value for bids, and the list of bids that have been placed for this
    auction. The code for defining these auction fields is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Item name and description**: The auction item name and description fields
    will be string types, with `itemName` as a required field:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Item image**: The `image` field will store the image file representing the
    auction item so that it can be uploaded by the user and stored as data in the
    MongoDB database:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Seller**: The `seller` field will reference the user who is creating the
    auction:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Created and updated at times**: The `created` and `updated` fields will be `Date` types,
    with `created` generated when a new auction is added, and `updated` changed when
    any auction details are modified:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Bidding start time**: The `bidStart` field will be a `Date` type that will
    specify when the auction goes live so that users can start placing bids:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Bidding end time**: The `bidEnd` field will be a `Date` type that will specify
    when the auction ends, after which the users cannot place bids on this auction:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Starting bid**: The `startingBid` field will store values of the `Number` type,
    and it will specify the starting price for this auction:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**List of bids**: The `bids` field will be an array containing details of each
    bid placed against the auction. When we store bids in this array, we will push
    the latest bid to the beginning of the array. Each bid will contain a reference
    to the user placing the bid, the bid amount the user offered, and the timestamp
    when the bid was placed:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: These auction-related fields will allow us to implement auction and bidding-related
    features for the MERN Marketplace application. In the next section, we will start
    developing these features by implementing the full-stack slice, which will allow
    sellers to create new auctions.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new auction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a seller to be able to create a new auction on the platform, we will need
    to integrate a full-stack slice that allows the user to fill out a form view in
    the frontend, and then save the entered details to a new auction document in the
    database in the backend. To implement this feature, in the following sections,
    we will add a create auction API in the backend, along with a way to fetch this
    API in the frontend, and a create new auction form view that takes user input
    for auction fields.
  prefs: []
  type: TYPE_NORMAL
- en: The create auction API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the implementation of the backend API, which will allow us to create a new
    auction in the database, we will declare a POST route, as shown in the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/auction.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: A POST request to this route at `/api/auctions/by/:userId` will ensure the requesting
    user is signed in and is also authorized. In other words, it is the same user
    associated with the `:userId` specified in the route param. Then, before creating
    the auction, it is checked if this given user is a seller using the `isSeller`
    method that's defined in the user controller methods.
  prefs: []
  type: TYPE_NORMAL
- en: To process the `:userId` parameter and retrieve the associated user from the
    database, we will utilize the `userByID` method from the user controller methods.
    We will add the following to the `Auction` routes in `auction.routes.js` so that
    the user is available in the `request` object as `profile`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/auction.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `auction.routes.js` file, which contains the auction routes, will be very
    similar to the `user.routes` file. To load these new auction routes in the Express
    app, we need to mount the auction routes in `express.js`, as we did for the auth
    and user routes.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `create` method in the auction controller, which is invoked after a seller
    is verified, uses the `formidable` node module to parse the multipart request
    that may contain an image file uploaded by the user for the item image. If there
    is a file, `formidable` will store it temporarily in the filesystem, and we will
    read it using the `fs` module to retrieve the file type and data so that we can
    store it in the `image` field in the auction document.
  prefs: []
  type: TYPE_NORMAL
- en: The `create` controller method will look as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/auction.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The item image file for the auction is uploaded by the user and stored in MongoDB
    as data. Then, in order to be shown in the views, it is retrieved from the database
    as an image file at a separate GET API. The GET API is set up as an Express route
    at `/api/auctions/image/:auctionId`, which gets the image data from MongoDB and
    sends it as a file in the response. The implementation steps for file upload, storage,
    and retrieval are outlined in detail in the *Upload profile photo* section in Chapter
    5, *Growing the Skeleton into a Social Media Application*.
  prefs: []
  type: TYPE_NORMAL
- en: This create auction API endpoint can now be used in the frontend to make a POST
    request. Next, we will add a fetch method on the client-side to make this request
    from the application's client interface.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching the create API in the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the frontend, to make a request to this create API, we will set up a `fetch` method
    on the client-side to make a POST request to the API route and pass it the multipart
    form data containing details of the new auction in the `body`. This fetch method
    will be defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/api-auction.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The response that's received from the server will be returned to the component
    calling this fetch method. We will use this method in the new auction form view
    to send the user-entered auction details to the backend and create a new auction
    in the database. In the next section, we will implement this new auction form
    view in a React component.
  prefs: []
  type: TYPE_NORMAL
- en: The NewAuction component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sellers in the marketplace application will interact with a form view to enter
    details of a new auction and create the new auction. We will render this form
    in the `NewAuction` component, which will allow a seller to create an auction
    by entering an item name and description, uploading an image file from their local
    filesystem, specifying the starting bid value, and creating date-time values for
    starting and ending bidding on this auction.
  prefs: []
  type: TYPE_NORMAL
- en: 'This form view will render as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19aea77e-b908-4f59-96a4-9bde18416c82.png)'
  prefs: []
  type: TYPE_IMG
- en: The implementation for this `NewAuction` component is similar to other create
    form implementations that we have discussed previously, such as the `NewShop`
    component implementation from [Chapter 7](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Exercising
    MERN Skills with an Online Marketplace*. The fields that are different in this
    form component are the date-time input options for the auction start and end timings.
    To add these fields, we'll use Material-UI `TextField` components with `type`
    set to `datetime-local`, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/NewAuction.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We also assign default date-time values for these fields in the format expected
    by this input component. We set the default start time to the current date-time
    and the default end time to an hour after the current date-time, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/NewAuction.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `TextField` with the type as `datetime-local` takes dates in the format
    `yyyy-mm-ddThh:mm`. So, we define a `getDateString` method that takes a JavaScript
    date object and formats it accordingly. The `getDateString` method is implemented
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/NewAuction.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In order to ensure the user has entered the dates correctly, with the start
    time set to a value before the end time, we need to add a check before submitting
    the form details to the backend. The validation of the date combination can be
    confirmed with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/NewAuction.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If the date combination is found to be invalid, then the user will be informed
    and form data will not be sent to the backend.
  prefs: []
  type: TYPE_NORMAL
- en: This `NewAuction` component can only be viewed by a signed-in user who is also
    a seller. Therefore, we will add a `PrivateRoute` in the `MainRouter` component.
    This will render this form for authenticated users at `/auction/new`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This link can be added to any of the view components that may be accessed by
    the seller, for example, in a view where a seller manages their auctions in the
    marketplace. Now that it is possible to add new auctions in the marketplace, in
    the next section, we will discuss how to fetch these auctions from the database
    in the backend so that they can be listed in the views in the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Listing auctions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the MERN Marketplace application, we will display three different lists
    of auctions to the users. All users browsing through the platform will be able
    to view the currently open auctions, in other words, auctions that are live or
    are going to start at a future date. The sellers will be able to view a list of
    auctions that they created, while signed in users will be able to view the list
    of auctions they placed bids in. The list displaying the open auctions to all
    the users will render as follows, providing a summary of each auction, along with
    an option so that the user can view further details in a separate view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f829cd9-fb7b-4971-bb87-2a068bd76d3c.png)'
  prefs: []
  type: TYPE_IMG
- en: In the following sections, in order to implement these different auction lists so
    that they're displayed in the application, we will define the three separate backend
    APIs to retrieve open auctions, auctions by a seller, and auctions by a bidder,
    respectively. Then, we will implement a reusable React component that will take
    any list of auctions provided to it as a prop and render it to the view. This
    will allow us to display all three lists of auctions while utilizing the same
    component.
  prefs: []
  type: TYPE_NORMAL
- en: The open Auctions API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To retrieve the list of open auctions from the database, we will define a backend
    API that accepts a GET request and queries the Auction collection to return the
    open auctions that are found in the response. To implement this open auctions
    API, we will declare a route, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/auction.routes.js:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: A GET request that's received at the `/api/auctions` route will invoke the `listOpen`
    controller method, which will query the Auction collection in the database so
    that it returns all the auctions with ending dates greater than the current date.
    The `listOpen` method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/auction.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The auctions that are returned by the query in this `listOpen` method will be
    sorted by the starting date, with auctions that start earlier shown first. These
    auctions will also contain the ID and name details of the seller and each bidder.
    The resulting array of auctions will be sent back in the response to the requesting
    client.
  prefs: []
  type: TYPE_NORMAL
- en: To fetch this API in the frontend, we will add a corresponding `listOpen` method
    in `api-auction.js`, similar to other API implementations. This fetch method will
    be used in the frontend component that displays the open auctions to the user. Next,
    we will implement another API to list all the auctions that a specific user placed
    bids in.
  prefs: []
  type: TYPE_NORMAL
- en: The Auctions by bidder API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To be able to display all the auctions that a given user placed bids in, we
    will define a backend API that accepts a GET request and queries the Auction collection
    so that it returns the relevant auctions in the response. To implement this auctions
    by bidder API, we will declare a route, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/auction.routes.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: A GET request, when received at the `/api/auctions/bid/:userId` route, will
    invoke the `listByBidder` controller method, which will query the Auction collection
    in the database so that it returns all the auctions that contain bids with a bidder
    matching the user specified by the `userId` parameter in the route. The `listByBidder` method
    is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/auction.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This method will return the resulting auctions in response to the requesting
    client, and each auction will also contain the ID and name details of the seller
    and each bidder. To fetch this API in the frontend, we will add a corresponding `listByBidder` method
    in `api-auction.js`, similar to other API implementations. This fetch method will
    be used in the frontend component that displays the auctions related to a specific
    bidder. Next, we will implement an API that will list all the auctions that a
    specific seller created in the marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: The Auctions by seller API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sellers in the marketplace will see a list of auctions that they created. To
    retrieve these auctions from the database, we will define a backend API that accepts
    a GET request and queries the Auction collection so that it returns the auctions
    by a specific seller. To implement this auctions by seller API, we will declare
    a route, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/auction.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: A GET request, when received at the `/api/auctions/by/:userId` route, will invoke
    the `listBySeller` controller method, which will query the Auction collection
    in the database so that it returns all the auctions with sellers matching the
    user specified by the `userId` parameter in the route. The `listBySeller` method
    is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/auction.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This method will return the auctions for the specified seller in response to
    the requesting client, and each auction will also contain the ID and name details
    of the seller and each bidder.
  prefs: []
  type: TYPE_NORMAL
- en: To fetch this API in the frontend, we will add a corresponding `listBySeller` method
    in `api-auction.js`, similar to other API implementations. This fetch method will
    be used in the frontend component that displays the auctions related to a specific
    seller. In the next section, we will look at the implementation of the Auctions
    component, which will take any of these lists of auctions and display it to the
    end user.
  prefs: []
  type: TYPE_NORMAL
- en: The Auctions component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The different auction lists in the application will be rendered using a React
    component that takes an array of auction objects as props. We will implement this
    reusable `Auctions` component and add it to the views that will retrieve and display
    either the open auctions, auctions by a bidder, or auctions by a seller. The view
    that retrieves and renders the list of auctions created by a specific seller using
    the `Auctions` component will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0400d64d-72a2-4491-8200-def898660ab8.png)'
  prefs: []
  type: TYPE_IMG
- en: The `Auctions` component will iterate over the array of auctions received as
    a prop and display each auction in a Material-UI `ListItem` component, as shown
    in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/Auctions.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: For each auction item, besides displaying some basic auction details, we give
    the users an option to open each auction in a separate link. We also conditionally
    render details such as when an auction will start, whether bidding has started
    or ended, how much time is left, and what the latest bid is. These details of
    each auction's state are determined and rendered with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/Auctions.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: To calculate and render the time left for auctions that have already started,
    we define a `showTimeLeft` method, which takes the end date as an argument and
    uses the `calculateTimeLeft` method to construct the time string rendered in the
    view. The `showTimeLeft` method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/Auctions.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This method uses the `calculateTimeLeft` method to determine the breakdown of
    the time left in days, hours, minutes, and seconds.
  prefs: []
  type: TYPE_NORMAL
- en: The `calculateTimeLeft` method takes the end date and compares it with the current
    date to calculate the difference and makes a `timeLeft` object that records the
    remaining days, hours, minutes, and seconds, as well as a `timeEnd` state. If
    the time has ended, the `timeEnd` state is set to true. The `calculateTimeLeft` method
    is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/Auctions.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This `Auctions` component, which renders a list of auctions with the details
    and a status of each, can be added to other views that will display different
    auction lists. If the user who's currently viewing an auction list happens to
    be a seller for a given auction in the list, we also want to render the option
    to edit or delete the auction to this user. In the next section, we will learn
    how to incorporate these options to edit or delete an auction from the marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Editing and deleting auctions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A seller in the marketplace will be able to manage their auctions by either
    editing or deleting an auction that they've created. The implementations of the
    edit and delete features will require building backend APIs that save changes
    to the database and remove an auction from the collection. These APIs will be
    used in frontend views to allow users to edit auction details using a form and
    initiate delete with a button click. In the following sections, we will learn
    how to add these options conditionally to the auction list and discuss the full-stack
    implementation to complete these edit and delete functions.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the list view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will update the code for the auctions list view to conditionally show the
    edit and delete options to the seller. In the `Auctions` component, which is where
    a list of auctions is iterated over to render each item in `ListItem`, we will
    add two more options in the `ListItemSecondaryAction` component, as shown in the
    following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/Auctions.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The link to the edit view and the delete component are rendered conditionally
    if the currently signed in user's ID matches the ID of the auction seller. The
    implementation for the Edit view component and Delete component is similar to
    the `EditShop` component and `DeleteShop` component we discussed in  [Chapter
    7](7514f26d-29e1-46e2-ac46-7515b2c3a6d0.xhtml), *Exercising MERN Skills with an
    Online Marketplace*. These same components will call backend APIs to complete
    the edit and delete actions. We will look at the required backend APIs in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Edit and delete auction APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete the edit auction and delete auction operations initiated by sellers
    from the frontend, we need to have the corresponding APIs in the backend. The
    route for these API endpoints, which will accept the update and delete requests,
    can be declared as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/auction.routes.js:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `:auctionId` param in the `/api/auctions/:auctionId` route URL will invoke
    the `auctionByID` controller method, which is similar to the `userByID` controller
    method. It retrieves the auction from the database and attaches it to the request
    object so that it can be used in the `next` method. The `auctionByID` method is
    defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/auction.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The auction object that's retrieved from the database will also contain the
    name and ID details of the seller and bidders, as we specified in the `populate()` methods.
    For these API endpoints, the `auction` object is used next to verify that the
    currently signed-in user is the seller who created this given auction by invoking
    the `isSeller` method, which is defined in the auction controller as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/auction.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Once the seller has been verified, the `next` method is invoked to either update
    or delete the auction, depending on whether a PUT or DELETE request was received.
    The controller methods for updating and deleting auctions are similar to the previous
    implementations for update and delete, as we discussed for the edit shop API and
    delete shop API in [Chapter 7](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Exercising
    MERN Skills with an Online Marketplace*.
  prefs: []
  type: TYPE_NORMAL
- en: We have the auction module for the marketplace ready with an Auction model for
    storing auction and bidding data and backend APIs and frontend views for creating
    new auctions, displaying different auction lists, and modifying an existing auction.
    In the next section, we will extend this module further and implement a view for
    individual auctions where, besides learning more about the auction, users will
    also be able to see live bidding updates.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the auction view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The view for displaying a single auction will contain the core functionality
    of the real-time auction and bidding features for the marketplace. Before getting
    into the implementation of real-time bidding, we will set up the full-stack slice
    for retrieving details of a single auction and display these details in a React
    component that will house the auction display, timer, and bidding capabilities.
    In the following sections, we will start by discussing the backend API for fetching
    a single auction. Then, we will look at the implementation of an Auction component,
    which will use this API to retrieve and display the auction details, along with
    the state of the auction. To give users a real-time update of the state of the
    auction, we will also implement a timer in this view to indicate the time left
    until a live auction ends.
  prefs: []
  type: TYPE_NORMAL
- en: The read auction API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To display the details of an existing auction in a view of its own, we need
    to add a backend API that will receive a request for the auction from the client
    and return its details in the response. Therefore, we will implement a read auction
    API in the backend that will accept a GET request with a specified auction ID
    and return the corresponding auction document from the `Auction` collection in
    the database. We will start adding this API endpoint by declaring a GET route,
    as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/auction.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The `:auctionId` param in the route URL invokes the `auctionByID` controller
    method when a GET request is received at this route. The `auctionByID` controller
    method retrieves the auction from the database and attaches it to the request
    object to be accessed in the `read` controller method, which is called next. The `read` controller
    method, which returns this auction object in response to the client, is defined
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/auction.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: We are removing the image field before sending the response, since images will
    be retrieved as files in separate routes. With this API ready in the backend,
    we can now add the implementation to call it in the frontend by adding a fetch
    method in `api-auction.js`, similar to the other fetch methods we've discussed
    for completing API implementations. We will use the fetch method to call the read
    auction API in a React component that will render the retrieved auction details.
    The implementation of this React component is discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The Auction component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will implement an Auction component to fetch and display the details of
    a single auction to the end user. This view will also have real-time update functionalities
    that will render based on the current state of the auction and on whether the
    user viewing the page is signed in. For example, the following screenshot shows
    how the Auction component renders to a visitor when a given auction has not started
    yet. It only displays the description details of the auction and specifies when
    the auction will start:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b1f16e6-a054-48b3-94c3-d170299cc18a.png)'
  prefs: []
  type: TYPE_IMG
- en: The implementation of the `Auction` component will retrieve the auction details
    by calling the read auction API in a `useEffect` hook. This part of the component
    implementation is similar to the `Shop` component we discussed in [Chapter 7](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Exercising
    MERN Skills with an Online Marketplace*.
  prefs: []
  type: TYPE_NORMAL
- en: The completed `Auction` component will be accessed in the browser at the `/auction/:auctionId` route,
    which is defined in `MainRouter` as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This route can be used in any component to link to a specific auction, as we
    did in the auction lists. This link will take the user to the corresponding Auction
    view with the auction details loaded.
  prefs: []
  type: TYPE_NORMAL
- en: In the component view, we will render the auction state by considering the current
    date and the given auction's bidding start and end timings. The code to generate
    these states, which will be shown in the view, can be added as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/Auction.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, if the current date is before the `bidStart` date, we
    show a message indicating that the auction has not started yet. If the current
    date is between the `bidStart` and `bidEnd` dates, then the auction is live. If
    the current date is after the `bidEnd` date, then the auction has ended.
  prefs: []
  type: TYPE_NORMAL
- en: The `Auction` component will also conditionally render a timer and a bidding
    section, depending on whether the current user is signed in, and also on the state
    of the auction at the moment. The code to render this part of the view will be
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/Auction.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: If the current date happens to be after the bid starting time, instead of showing
    the start time, we render the `Timer` component to show the time remaining until
    bidding ends. Then, we show the last bid amount, which will be the first item
    in the auction `bids` array if some bids were already placed. If the current user
    is signed in when the auction is in this state, we also render a `Bidding` component,
    which will allow them to bid and see the bidding history. In the next section,
    we will learn how to implement the Timer component we added in this view to show
    the remaining time for the auction.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Timer component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the auction is live, we will give the users a real-time update of how
    long they have before bidding ends on this given auction. We will implement a
    `Timer` component and conditionally render it in the `Auction` component to achieve
    this feature. The timer will count down the seconds and show how much time is
    left to the users viewing the live auction. The following screenshot shows what
    the Auction component looks like when it renders a live auction to a user who
    is not signed in yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7822370-cdcb-491a-853a-ffc36f126acf.png)'
  prefs: []
  type: TYPE_IMG
- en: The remaining time decreases per second as the user is viewing the live auction.
    We will implement this countdown feature in the `Timer` component, which is added
    to the `Auction` component. The `Auction` component provides it with props containing
    the auction end time value, as well as a function to update the auction view when
    the time ends, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/Auction.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The `update` function that's provided to the `Timer` component will help set
    the value of the `justEnded` variable from `false` to `true`. This `justEnded`
    value is passed to the `Bidding` component so that it can be used to disable the
    option to place bids when the time ends. The `justEnded` value is initialized
    and the `update` function is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/Auction.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: These props will be used in the `Timer` component to calculate time left and
    to update the view when time is up.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Timer` component definition, we will initialize the `timeLeft` variable
    in the state, using the end time value sent in the props from the `Auction` component,
    as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/Timer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: To calculate the time left until the auction ends, we utilize the `calculateTimeLeft`
    method we discussed previously in the *The Auctions component* section of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: To implement the time countdown functionality,  we will use `setTimeout` in
    a `useEffect` hook in the `Timer` component, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/Timer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: If the time has not ended already, we will use `setTimeout` to update the `timeLeft`
    value after 1 second has passed. This `useEffect` hook will run after every render
    caused by the state update with `setTimeLeft`.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, the `timeLeft` value will keep updating every second until the
    `timeEnd` value is `true`. When the `timeEnd` value does become `true` as the
    time is up, we will execute the `update` function that's sent in the props from
    the `Auctions` component.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid a memory leak and to clean up in the `useEffect` hook, we will use
    `clearTimeout` to stop any pending `setTimeout` calls. To show this updating `timeLeft`
    value, we just need to render it in the view, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/Timer.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: If there is time left, we render the days, hours, minutes, and seconds remaining
    until the auction ends using the `timeLeft` object. We also indicate the exact
    date and time when the auction ends. If the time is up, we just indicate that
    the auction ended.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Auction` component we've implemented so far, we are able to fetch the
    auction details from the backend and render it along with the state of the auction.
    If an auction is in a live state, we are able to indicate the time left until
    it ends. When an auction is in this live state, users will also be able to place
    bids against the auction and see the bids being placed by other users on the platform
    from within this view in real-time. In the next section, we will discuss how to
    use Socket.IO to integrate this real-time bidding feature for all live auctions
    on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing real-time bidding with Socket.IO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users who are signed in to the marketplace platform will be able to take part
    in live auctions. They will be able to place their bids and get real-time updates
    in the same view while other users on the platform are countering their bids.
    To implement this functionality, we will integrate Socket.IO with our full-stack
    MERN application before implementing the frontend interface to allow users to
    place their bids and see the changing bidding history.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Socket.IO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Socket.IO will allow us to add the real-time bidding feature to auctions in
    the marketplace application. Socket.IO is a JavaScript library with a client-side
    module that runs in the browser and a server-side module that integrates with
    Node.js. Integrating these modules with our MERN-based application will enable
    bidirectional and real-time communication between the clients and the server.
  prefs: []
  type: TYPE_NORMAL
- en: The client-side part of Socket.IO is available as the Node module `socket.io-client`,
    while the server-side part is available as the Node module `socket.io`. You can
    learn more about Socket.IO and try their getting started tutorials at [https://socket.io](https://socket.io).
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we can start using `socket.io` in our code, we will install the client
    and server libraries with Yarn by running the following command from the command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: With the Socket.IO libraries added to the project, we will update our backend
    to integrate Socket.IO with the server code. We need to initialize a new instance
    of `socket.io` using the same HTTP server that we are using for our application.
  prefs: []
  type: TYPE_NORMAL
- en: In our backend code, we are using Express to start the server. Therefore, we
    will update the code in `server.js` to get a reference to the HTTP server that
    our Express app is using to listen for requests from clients, as shown in the
    following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Then, we will pass the reference for this server to a bidding controller function.
    This `bidding.controller` function will contain the Socket.IO code that's needed
    on the server-side to implement real-time features. The `bidding.controller` function
    will initialize `socket.io` and then listen on the `connection` event for incoming
    socket messages from clients, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/bidding.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: When a new client first connects and then disconnects to the socket connection,
    we will subscribe and unsubscribe the client socket to a given channel. The channel
    will be identified by the auction ID that will be passed in the `data.room` property
    from the client. This way, we will have a different channel or room for each auction.
  prefs: []
  type: TYPE_NORMAL
- en: With this code, the backend is ready to receive communication from clients over
    sockets, and we can now add the Socket.IO integration to our frontend. In the
    frontend, only the auction view – specifically, the bidding section – will be
    using sockets for real-time communication. Therefore, we will only integrate Socket.IO
    in the `Bidding` component that we add to the Auction component in the frontend,
    as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/Auction.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The Bidding component takes the `auction` object, the `justEnded` value, and
    an `updateBids` function as props from the Auction component, and uses these in
    the bidding process. To start implementing the Bidding component, we will integrate
    sockets using the Socket.IO client-side library, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/Bidding.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we require the `socket.io-client` library and initialize
    the `socket` for this client. Then, in our `Bidding` component definition, we
    utilize the `useEffect` hook and the initialized `socket` to emit the *auction
    room joining* and *auction room leaving* socket events when the component mounts
    and unmounts, respectively. We pass the current auction's ID as the `data.room` value
    with these emitted socket events.
  prefs: []
  type: TYPE_NORMAL
- en: These events will be received by the server socket connection, resulting in
    subscription or unsubscription of the client to the given auction room. Now that
    the clients and the server are able to communicate in real-time over sockets,
    in the next section, we will learn how to use this capability to let users place
    instant bids on the auction.
  prefs: []
  type: TYPE_NORMAL
- en: Placing bids
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a user on the platform is signed in and viewing an auction that is currently
    live, they will see an option to place their own bid. This option will be rendered
    within the `Bidding` component, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c00aa8b9-2ec8-4744-bcae-260ac078a652.png)'
  prefs: []
  type: TYPE_IMG
- en: To allow users to place their bids, in the following sections, we will add a
    form that lets them enter a value more than the last bid and submit it to the
    server using socket communication. Then, on the server, we will handle this new
    bid that's been sent over the socket so that the changed auction bids can be saved
    in the database and the view can be updated instantly for all connected users
    when the server accepts this bid.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a form to enter a bid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will add the form to place a bid for an auction in the `Bidding` component
    that we started building in the previous section. Before we add the form elements
    in the view, we will initialize the `bid` value in the state, add a change handling
    function for the form input, and keep track of the minimum bid amount allowed,
    as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/Bidding.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The minimum bid amount is determined by checking the latest bid placed. If any
    bids were placed, the minimum bid needs to be higher than the latest bid; otherwise,
    it needs to be higher than the starting bid that was set by the auction seller.
  prefs: []
  type: TYPE_NORMAL
- en: The form elements for placing a bid will only render if the current date is
    before the auction end date. We also check if the `justEnded` value is `false` so
    that the form can be hidden when the time ends in real-time as the timer counts
    down to 0\. The form elements will contain an input field, a hint at what minimum
    amount should be entered, and a submit button, which will remain disabled unless
    a valid bid amount is entered. These elements will be added to the `Bidding` component
    view as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/Bidding.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user clicks on the submit button, the `placeBid` function will be
    called. In this function, we construct a bid object containing the new bid''s
    details, including the bid amount, bid time, and the bidder''s user reference.
    This new bid is emitted to the server over the socket communication that''s already
    been established for this auction room, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Once the message has been emitted over the socket, we will empty the input field
    with `setBid('')`. Then, we need to update the bidding controller in the backend
    to receive and handle this new bid message that's been sent from the client. In
    the next section, we will add the socket event handling code to complete this
    process to place a bid.
  prefs: []
  type: TYPE_NORMAL
- en: Receiving a bid on the server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a new bid is placed by a user and emitted over a socket connection, it
    will be handled on the server so that it's stored in the corresponding auction
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: In the bidding controller, we will update the socket event handlers in the socket
    connection listener code in order to add a handler for the *new bid* socket message,
    as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/bidding.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, when the socket receives the emitted *new bid* message,
    we use the attached data to update the specified auction with the new bid information
    in a function called `bid`. The bid function is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/bidding.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The bid function takes the new bid details and the auction ID as arguments and
    performs a `findOneAndUpdate` operation on the Auction collection. To find the
    auction to be updated, besides querying with the auction ID, we also ensure that
    the new bid amount is larger than the last bid placed at position `0` of the `bids`
    array in this auction document. If an auction is found that matches the provided
    ID and also meets this condition of the last bid being smaller than the new bid,
    then this auction is updated by pushing the new bid into the first position of
    the `bids` array.
  prefs: []
  type: TYPE_NORMAL
- en: After the update to the auction in the database, we emit the *new bid* message
    over the `socket.io` connection to all the clients currently connected to the
    corresponding auction room. On the client-side, we need to capture this message
    in a socket event handler code and update the view with the latest bids. In the
    next section, we will learn how to handle and display this updated list of bids
    for all the clients viewing the live auction.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the changing bidding history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After a new bid is accepted on the server and stored in the database, the new
    array of bids will be updated in the view for all the clients currently on the
    auctions page. In the following sections, we will extend the `Bidding` component
    so that it handles the updated bids and displays the complete bidding history
    for the given auction.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the view state with a new bid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the placed bid has been handled on the server, the updated auction containing
    the modified array of bids is sent to all the clients connected to the auction
    room. To handle this new data on the client-side, we need to update the `Bidding`
    component to add a listener for this specific socket message.
  prefs: []
  type: TYPE_NORMAL
- en: We will use an `useEffect` hook to add this socket listener to the `Bidding`
    component when it loads and renders. We will also remove the listener with `socket.off()`
    in the `useEffect` cleanup when the component unloads. This `useEffect` hook with
    the socket listener for receiving the new bid data will be added as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auction/Bidding.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'When the new auction with updated bids is received from the server in the socket
    event, we execute the `updateBids` function that was sent as a prop from the `Auction`
    component. The `updateBids` function is defined in the `Auction` component as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: This will update the auction data that was set in the state of the Auction component
    and, as a result, rerender the complete auction view with the updated auction
    data. This view will also include the bidding history table, which we'll discuss
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering the bidding history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `Bidding` component, we will render a table that displays the details
    of all the bids that were placed for the given auction. This will inform the user
    of the bids that were already placed and are being placed in real-time as they
    are viewing a live auction. The bidding history for an auction will render in
    the view as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eab51643-f372-448f-886f-02dccfbd046e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This bidding history view will basically iterate over the `bids` array for
    the auction and display the bid amount, bid time, and bidder name for each bid
    object that''s found in the array. The code for rendering this table view will
    be added as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: We added table headers using Material-UI `Grid` components, before iterating
    over the `bids` array to generate the table rows with individual bid details.
  prefs: []
  type: TYPE_NORMAL
- en: When a new bid is placed by any user viewing this auction and the updated auction
    is received in the socket and set to state, this table containing the bidding
    history will update for all its viewers and show the latest bid at the top of
    the table. By doing this, it gives all the users in the auction room a real-time
    update of bidding. With that, we have a complete auction and real-time bidding
    feature integrated with the MERN Marketplace application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we extended the MERN Marketplace application and added an auctioning
    feature with real-time bidding capabilities. We designed an auction model for
    storing auction and bidding details and implemented the full-stack CRUD functionalities
    that allow users to create new auctions, edit and delete auctions, and see different
    lists of auctions, along with individual auctions.
  prefs: []
  type: TYPE_NORMAL
- en: We added an auction view representing a single auction where users can watch
    and participate in the auction. In the view, we calculated and rendered the current
    state of the given auction, along with a countdown timer for live auctions. While
    implementing this timer that counts down seconds, we learned how to use `setTimeout`
    in a React component with the `useEffect` hook.
  prefs: []
  type: TYPE_NORMAL
- en: For each auction, we implemented real-time bidding capabilities using Socket.IO.
    We discussed how to integrate Socket.IO on both the client-side and the server-side
    of the application to establish real-time and bidirectional communication between
    clients and servers. With these approaches for extending the MERN stack to incorporate
    real-time communication functionalities, you can implement even more exciting
    real-time features using sockets in your own full-stack applications.
  prefs: []
  type: TYPE_NORMAL
- en: Using the experiences you've gained here building out the different features
    for the MERN Marketplace application, you can also grow the auctioning feature
    that was covered in this chapter and integrate it with the existing order management
    and payment processing functionalities in this application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will expand our options with the MERN stack technologies
    by building an expense tracking application with data visualization features by
    extending the MERN skeleton.
  prefs: []
  type: TYPE_NORMAL
