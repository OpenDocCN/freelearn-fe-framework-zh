["```js\nnpm i -D mocha chai\n\n```", "```js\n{\n  \"name\": \"JSApp\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Get random numbers\",\n  \"main\": \"index.js\",\n \"scripts\": {\n \"test\": \"mocha test.js\"\n },\n \"devDependencies\": {\n \"chai\": \"3.2.0\",\n \"mocha\": \"2.2.5\"\n }\n}\n```", "```js\nTest.js file code\nvar expect = require('chai').expect\n, name = 'my Name';\n\nvar random = require('./index');\n\ndescribe('random', function() {\n  it('should work!', function() {\n    expect(false).to.be.false;\n  });\n\n  it ('return my Name', function() {\n        expect(name).to.be.a('string');\n        expect(name).to.equal('my Name');\n        expect(name).to.have.length(7);\n        })\n});\n```", "```js\nnpm test\n\n```", "```js\nSimulate.{eventName}(\n  DOMElement element,\n  [object eventData]\n)\n```", "```js\nsudo npm install jest-cli â€“save-dev\n\n```", "```js\nnpm config get prefix\n\n```", "```js\nsudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}\n\n```", "```js\n// greeting.js\n\nmodule.exports = greetings;\n```", "```js\n// __tests__/greeting-test.js\n\n jest.dontMock('../greetings');\n\n//executed when the test runs\n describe('greetings', function() {\n it('greets the name', function() {\n var greet = require('../greetings');\n expect(greet(\"react\")).toBe(\"hi react\");\n });\n });\n```", "```js\n{\n  \"dependencies\": {\n    \"react\": \"~0.14.0\",\n    \"react-dom\": \"~0.14.0\"\n  },\n  \"devDependencies\": {\n    \"jest-cli\": \"^0.8.2\",\n    \"react-addons-test-utils\": \"~0.14.0\"\n  },\n  \"scripts\": {\n    \"test\": \"jest\"\n  },\n  \"jest\": {\n    \"unmockedModulePathPatterns\": [\n      \"<rootDir>/node_modules/react\",\n      \"<rootDir>/node_modules/react-dom\",\n      \"<rootDir>/node_modules/react-addons-test-utils\",\n      \"<rootDir>/node_modules/fbjs\"\n    ]\n  }\n}\n```", "```js\nnpm test\n\n```", "```js\n// greeting.js\n\nfunction greetings(name) {\n  return \"hi \"+name;\n}\nmodule.exports = greetings;\n```", "```js\nsudo npm install -g jest-cli\n\n```", "```js\n\"scripts\": {\n \"test\": \"mocha './src/**/*.test.js' --compilers js:babel-core/register\",\n  },\n  \"devDependencies\": {\n \"babel-core\": \"6.1.4\",\n \"babel-loader\": \"6.1.0\",\n \"babel-preset-es2015\": \"6.1.4\",\n \"babel-preset-react\": \"6.1.4\",\n \"babel-preset-stage-2\": \"6.1.2\",\n    \"mocha\": \"2.3.3\",\n    \"react-addons-test-utils\": \"0.14.3\",\n  }\n}\n```", "```js\nnpm install babel-loader babel-preset-es2015 babel-preset-react babel-preset-stage-2 react-addons-test-utilsBabel being the transpiler, we need to add the following entry to enable the import (reserver keyword) in the following .babelrc file:\n\n```", "```js\n{\n    \"presets\": [\"es2015\"]\n}\n```", "```js\nimport expect from 'expect';\ndescribe('greetings', () => {\n   it('greets the name', () => {\n     var greet = require('../greetings');\n     expect(greet(\"react\")).toBe(\"hi react\");\n   });\n});\n```", "```js\nimport expect from 'expect';\n  describe('setup',() => {\n    it('testing the setup is working', () => {\n      expect(true).toEqual(true);\n   });\n      });\n```", "```js\n// greeting.js\n\nimport React from 'react';\n\nconst { div, h2, span} = React.DOM;\n\nexport default React.createClass({\n\n  displayName: 'GreetingComponent',\n\n  render(){\n\n    return(\n\n    div({classname: 'Greeting'},\n\n      h2({classname: \"heading2\"}, \"Hi\"),\n\n      span({classname: \"like\"},\"ReactJs\")\n\n    )\n\n    );\n\n  }\n\n});\n```", "```js\n// Importing the necessary libraries and JavaScript code to be tested\nimport expect from 'expect';\nimport React from 'react';\nimport TestUtils from 'react-addons-test-utils';\nimport GreetingComponent from '../greetings.js';\ndescribe('GreetingComponent', () => {\n  it('should greet with the name', () => {\n\n// Creating a shallow rendered object and stored within  renderer\n    const renderer = TestUtils.createRenderer();\n\n/*creating the react element (GreetingComponent, declared in the greeting.js code). This might be comparable to the \"place\" where the component to be tested is rendered. This component can respond to events and update itself\n*/\n    renderer.render(React.createElement(GreetingComponent));\n/* method is called on the renderer (TestUtils.createRenderer()) and stored within output. We can inspect this output in the console */\n    const output = renderer.getRenderOutput();\n    console.log(output);\n    expect(output.type).toBe('div');\n```", "```js\nCode of __test__/greeting.test.js\nimport React from 'react';\nimport TestUtils from 'react-addons-test-utils';\nimport GreetingComponent from '../greetings.js';\n\ndescribe('GreetingComponent', () => {\n\n  it('should greet with the greeting Hi', () => {\n\n    const renderer = TestUtils.createRenderer();\n    renderer.render(React.createElement(GreetingComponent));\n    const output = renderer.getRenderOutput();\n    console.log(output);\n    expect(output.type).toBe('div');\n\n expect(output.props.children[0].type).toBe('h2');\n expect(output.props.children[0].props.classname).toBe('heading2');\n expect(output.props.children[0].props.children).toBe('Hi');\n\n  });\n\n  it('should return the like as ReactJs', () => {\n\n    const renderer = TestUtils.createRenderer();\n\n    renderer.render(React.createElement(GreetingComponent));\n\n    const output = renderer.getRenderOutput();\n\n    console.log(output);\n\n expect(output.type).toBe('div');\n\n expect(output.props.children[1].type).toBe('span');\n\n expect(output.props.children[1].props.classname).toBe('like');\n\n expect(output.props.children[1].props.children).toBe('ReactJs');\n\n  });\n\n});\n```", "```js\n// __tests__/sum-test.js\n\n//jest.dontMock('../greetings.js');\n\nimport expect from 'expect';\nimport React from 'react';\nimport TestUtils from 'react-addons-test-utils';\nimport GreetingComponent from '../greetings.js';\n\ndescribe('GreetingComponent', () => {\n  describe('Common code', () => {\n    const renderer = TestUtils.createRenderer();\n    renderer.render(React.createElement(GreetingComponent));\n    const output = renderer.getRenderOutput();\n//    console.log(renderer);\n    console.log(\"From Common Code\");\n    console.log(output);\n\n  it('should greet with the greeting Hi', () => {\n//    console.log(renderer);\n    console.log(\"h2 component\");\n    console.log(output);\n    expect(output.props.children[0].type).toBe('h2');\n  expect(output.props.children[0].props.classname).toBe('heading2');\n    expect(output.props.children[0].props.children).toBe('Hi');\n  });\n\n  it('should return the like as ReactJs', () => {\n//    console.log(renderer);\n    console.log(\"span component\");\n    console.log(output);\n\n    expect(output.props.children[1].type).toBe('span');\n\n    expect(output.props.children[1].props.classname).toBe('like');\n\n    expect(output.props.children[1].props.children).toBe('ReactJs');\n\n  });\n\n});\n\n});\n```", "```js\nnpm test > test_output.txt\n\n```"]