- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Recipe App with Vuetify
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ll leverage the power of a third-party component library
    to quickly scaffold out a user interface and explore the powers and usage of a
    store in the context of an app. We will build a meal planner where a user can
    browse recipes to add them to a weekly calendar. The state of the week planner
    will be stored on the user’s machine to make sure it’s available on returning
    visits.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Applying and customizing Vuetify to scaffold out views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speeding up development using a component library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactoring strategies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The usefulness of structuring stores using Pinia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll be using **Vuetify** ([https://vuetifyjs.com/en/](https://vuetifyjs.com/en/))
    in this chapter, a popular component library for Vue.js 3 applications. We also
    need to register for an API key at [https://spoonacular.com/](https://spoonacular.com/)
    to retrieve recipe data.
  prefs: []
  type: TYPE_NORMAL
- en: To manage our applications’ state, we’ll use `localStorage` in our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for this chapter can be found in this book’s GitHub repository: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/tree/main/05.mealplanner](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/tree/main/05.mealplanner).'
  prefs: []
  type: TYPE_NORMAL
- en: A new Vue project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’re ready to initialize a new project, but we’ll use the Vuetify installer
    this time. Vuetify is a wrapper around the Vue installer, with presets for common
    Vuetify project configurations. In the CLI, type the following command to proceed
    to the next steps of the installer wizard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose `vue-meal-planner` as the project’s name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the **Base** (Vuetify, VueRouter) installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **TypeScript** using the arrow keys.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **npm** option to install the dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you navigate to the new projects folder, you can run the local development
    server with `npm run dev`. The result should look very similar to what’s shown
    in *Figure 5**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – The initialized Vuetify application](img/B19563_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – The initialized Vuetify application
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we continue, we also need an API key to make the example a bit closer
    to reality. This will also allow us to search for actual recipes. To register
    at Spoonacular, you can follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://spoonacular.com/](https://spoonacular.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Food** API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign up via **Email** and choose a password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm your email address to complete the registration process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After logging in, go to **Profile** to reveal the API key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `.env` file in the root of your project and add the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We are now ready to create a meal planner application.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get cooking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we’ll make sure we have a decent boilerplate project to begin with and
    start by replacing the contents of `App.vue` with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll expand on this later. Note that in the generated Vue component, the order
    of the `<template>` and `<script>` tags is different. I prefer starting with the
    `<script>` tag because that holds the logic that ties to the `<template>` tag,
    but both are valid:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – The template and script tag have a different order than in our
    examples](img/B19563_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – The template and script tag have a different order than in our
    examples
  prefs: []
  type: TYPE_NORMAL
- en: On the home view, we will build our meal planner as a representation of the
    upcoming 7 days. First, we’ll start with a component that can render several days
    based on a given date.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll create a component in the `components` folder called `CalendarDays.vue`:
    [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/05.mealplanner/.notes/5.1-CalendarDays.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/05.mealplanner/.notes/5.1-CalendarDays.vue).'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s take a look at the `script` tag. It accepts props so that it can
    execute the `generateCards` function, which generates an array of *cards* with
    a `date` property for each card. We’ve added the following content just to have
    something to show in the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the template, we’re using the Vuetify `table` component to render a table.
    The Vuetify components are prefixed with the `v-` identifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'We render the table rows using the generated entries from the cards array.
    We’ll expose the component to the view by creating a `MealPlanner.vue` component
    where we import our component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We’re not doing anything special here other than instantiating the `CalendarDays`
    component with our desired number of plannable days. While we’re in this folder,
    we can delete `HelloWorld.vue`, and replace the reference in the `views\Home.vue`
    component so that our application shows `MealPlanner` on the home page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s improve it by showing formatted dates. We’ll create a small composable
    for this in a to-be-created `composables` folder. Let’s call the file `formatters.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, we’re just adding some clever code that spells out the first, second,
    or third suffixes based on the given date. We’re leveraging bits of the browser’s
    built-in APIs, but with a bit of extra formatting. We can now print out the dates
    in a readable format for our generated cards, but we’ll get to that in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s also create a composable to help us interact with the Spoonacular API.
    We’ll create a file called `recipeApi.ts` in the `composables` folder. The contents
    should be familiar and resemble the functions we used in the previous chapter:
    [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/05.mealplanner/.notes/5.2-recipeApi.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/05.mealplanner/.notes/5.2-recipeApi.ts).'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the default installation of Vuetify, we ended up with a default `AppBar.vue`
    component in the `src/layouts/default` folder. Let’s modify it so that it fits
    the purpose of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The Vuetify components make it relatively easy to build an app with sensible
    defaults. In the next section, we will learn how to quickly expand our application
    using the available components.
  prefs: []
  type: TYPE_NORMAL
- en: Quick development with Vuetify
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The app we’ve built so far isn’t much use to us yet. Let’s turn this into a
    working meal planner! Since we are going to want to abstract and compartmentalize,
    we’ll start by splitting some of the code of the `CalendarDays.vue` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we’ll create a new component, called `CalendarCard.vue`. We will use
    this to represent a calendar item and use the date formatter we’ve created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In `CalendarDays.vue`, we can replace the inline representation by importing
    our newly created `CalendarCard` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we’ll add the component to the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We also need to add a new route that will be able to display all planned recipes.
    We’ll add the recipes later. First, we’ll create a table to display recipes. We’ll
    feed it recipes via a prop from another component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create `RecipeTable.vue`: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/05.mealplanner/.notes/5.3-RecipeTable.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/05.mealplanner/.notes/5.3-RecipeTable.vue).'
  prefs: []
  type: TYPE_NORMAL
- en: We’re using the Vuetify components to create a table representation of the list
    of recipes that will be provided in the property. The `openPreview` function (*lines
    2, 14-16, and 34*) is one of the features that the table will support in the future.
    When we’re implementing this, we will make sure that the emitted event will be
    picked up by the parent component. Let’s quickly build the parent component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a `RecipesList.vue` component. It will feature the table for displaying
    past and future recipes, using Vuetify components: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/05.mealplanner/.notes/5.4-RecipesList.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/05.mealplanner/.notes/5.4-RecipesList.vue).'
  prefs: []
  type: TYPE_NORMAL
- en: I’ve added a little bit of code to generate some mock data (*lines 12-24*).
    It can sometimes be helpful to focus on the template, and in those cases, it’s
    helpful to be able to have granular control over the data and support multiple
    scenarios. When writing the unit tests to match this file, you could even reuse
    this code!
  prefs: []
  type: TYPE_NORMAL
- en: The other part is how we’re listening to the event that gets emitted from the
    `RecipeTable` component (*lines 69 and 76*). We trigger the `openPreview` function
    (*lines 26-28*) on the click event. We’ll also need a view and a route to be able
    to navigate to these components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a `RecipeView.vue` component in the `src/views` folder that simply
    loads our component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we’ll expand the route configuration, which Vuetify generated for us
    in `src/router/index.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can update `src/layouts/default/AppBar.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'With these lines of code, we’ve added a hamburger menu with a toggle. It just
    works! This is a very powerful feature of using a component library: it not only
    provides styled components but also provides commonly used patterns for interaction.'
  prefs: []
  type: TYPE_NORMAL
- en: I highly recommend checking out the Vuetify documentation as it provides an
    extensive list of the available components and examples of how to use them. In
    the app we’re building, we’re only touching lightly upon the usage of the component
    library, but you also have the option of optimizing the components so that they
    fit a more specific goal or purpose.
  prefs: []
  type: TYPE_NORMAL
- en: We can now navigate to two different views and build a limited version of the
    final app. In the next section, we’ll connect the Spoonacular recipes to our app!
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the recipes to our app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll connect the API to our app, which allows users to start
    planning meals for upcoming days. We’ll explore patterns to interact with an app
    using the Vuetify components.
  prefs: []
  type: TYPE_NORMAL
- en: A bit of additional setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Because we are going to deal with asynchronous data, we’ll add some helper
    components. First, we’ll create an `AppLoader.vue` component in the `src/components`
    folder, which acts as a loading indicator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'And while we’re at it, we can also add a dedicated component to handle our
    links. We’ll name it `AppLink.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We can insert `AppLink` into `AppBar.vue` immediately by replacing `router-link`
    with our new component. This component adds style across our applications’ links.
    Note that we’re keeping the markup deliberately close to the original `router-link`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now that we can navigate, let’s continue by exposing the data from the API in
    our application.
  prefs: []
  type: TYPE_NORMAL
- en: Our API connection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll now focus on the `CalendarCard.vue` and `CalendarDays.vue` components.
    We’ll add functionalities to search for a recipe and add it to a day, view it,
    and remove it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll start in `CalendarCard.vue` by adding an event to signal that a user
    selected a certain date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the user interface, we’ve added a button that emits the current card when
    it’s clicked. Now, let’s modify `CalendarDays.vue` so that it picks up this event
    and shows a dialog to search for recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the updated code, we’re storing the state of the dialog in a newly created
    variable and using a component provided by Vuetify to open a dialog, where we
    can also close and restore the variables to their initial values.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a recipe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we’ll build a small search component to display in the dialog. This will
    allow users to search for a recipe. When selected, we’ll pass the details of the
    recipe to the `CalendarDays.vue` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `RecipeSearch.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We’re making use of a debounced watcher, the same as with the Marvel search
    component. We can use the composable to retrieve the results based on a simple
    text-based search query and display the results in a list.
  prefs: []
  type: TYPE_NORMAL
- en: When a user clicks on a list item, we’ll emit the event and send the corresponding
    recipe as context to the parent component.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s implement the addition and removal of recipes on a day!
  prefs: []
  type: TYPE_NORMAL
- en: Adding and removing a meal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Implementing the search functionality is now very easy! We can import the component
    in the setup tag and then place the components’ tags in the template. We do have
    to add a listener since we’re emitting an event on the search component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'With that, we’ve added the `recipe-search` component to the page. With the
    `insertRecipeOnDay` function, we can modify our cards collection by adding the
    selected recipe (which was emitted through the search component) and adding it
    to a new property on a card: today.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we display recipes for a day, let’s also add a method for removing a
    recipe on a day based on a recipe ID and the date (this way, we can support multiple
    recipes on one day and similar recipes across multiple days). We can add the following
    function to the script tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This function simply modifies the `today` collection by filtering out any recipe
    that matches the given ID and date. In the template, we’ll add a listener for
    an event on the `CalenderCard.vue` component, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: <script setup lang="ts">import { useFormatDate } from "@/composables/formatters";
  prefs: []
  type: TYPE_NORMAL
- en: import AppLink from "./AppLink.vue";
  prefs: []
  type: TYPE_NORMAL
- en: const emits = defineEmits(["daySelected", "recipeRemoved"]);
  prefs: []
  type: TYPE_NORMAL
- en: 'const addRecipeToDay = (card: Card): void => {'
  prefs: []
  type: TYPE_NORMAL
- en: emits("daySelected", card);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'const recipeRemoved = (recipe: Today, date: Date): void => {'
  prefs: []
  type: TYPE_NORMAL
- en: emits("recipeRemoved", recipe, date);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: interface Today {
  prefs: []
  type: TYPE_NORMAL
- en: 'id: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'title: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'readyInMinutes: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: interface Card {
  prefs: []
  type: TYPE_NORMAL
- en: 'date: Date;'
  prefs: []
  type: TYPE_NORMAL
- en: 'today: Today[];'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: const props = defineProps<{
  prefs: []
  type: TYPE_NORMAL
- en: 'card: Card;'
  prefs: []
  type: TYPE_NORMAL
- en: '}>();'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: <template>
  prefs: []
  type: TYPE_NORMAL
- en: <v-sheet class="d-flex justify-space-between">
  prefs: []
  type: TYPE_NORMAL
- en: <v-sheet class="ma-2 pa-2">
  prefs: []
  type: TYPE_NORMAL
- en: <h2 class="text-h2">{{ useFormatDate(card.date) }}</h2>
  prefs: []
  type: TYPE_NORMAL
- en: </v-sheet>
  prefs: []
  type: TYPE_NORMAL
- en: <v-sheet class="ma-2 pa-2">
  prefs: []
  type: TYPE_NORMAL
- en: <v-btn text @click="addRecipeToDay(card)" icon="mdi-plus"></v-btn>
  prefs: []
  type: TYPE_NORMAL
- en: </v-sheet>
  prefs: []
  type: TYPE_NORMAL
- en: </v-sheet>
  prefs: []
  type: TYPE_NORMAL
- en: <v-col>
  prefs: []
  type: TYPE_NORMAL
- en: <v-card v-for="today in card.today" :key="today.id" class="my-4">
  prefs: []
  type: TYPE_NORMAL
- en: <v-card-title>
  prefs: []
  type: TYPE_NORMAL
- en: <app-link :to="/recipe/${today.id}">{{ today.title }}</app-link>
  prefs: []
  type: TYPE_NORMAL
- en: </v-card-title>
  prefs: []
  type: TYPE_NORMAL
- en: <v-card-text>{{ today.readyInMinutes }} minutes</v-card-text>
  prefs: []
  type: TYPE_NORMAL
- en: <v-card-actions>
  prefs: []
  type: TYPE_NORMAL
- en: <v-spacer></v-spacer>
  prefs: []
  type: TYPE_NORMAL
- en: <v-btn
  prefs: []
  type: TYPE_NORMAL
- en: text
  prefs: []
  type: TYPE_NORMAL
- en: icon="mdi-trash-can-outline"
  prefs: []
  type: TYPE_NORMAL
- en: '@click="recipeRemoved(today, card.date)"'
  prefs: []
  type: TYPE_NORMAL
- en: '></v-btn>'
  prefs: []
  type: TYPE_NORMAL
- en: </v-card-actions>
  prefs: []
  type: TYPE_NORMAL
- en: </v-card>
  prefs: []
  type: TYPE_NORMAL
- en: </v-col>
  prefs: []
  type: TYPE_NORMAL
- en: </template>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: <script setup lang="ts">import { ref, onMounted } from "vue";
  prefs: []
  type: TYPE_NORMAL
- en: import type { Ref } from "vue";
  prefs: []
  type: TYPE_NORMAL
- en: import type { Recipe } from "@/types/spoonacular";
  prefs: []
  type: TYPE_NORMAL
- en: import { useRecipeInformation } from "@/composables/recipeApi";
  prefs: []
  type: TYPE_NORMAL
- en: import AppLoader from "./AppLoader.vue";
  prefs: []
  type: TYPE_NORMAL
- en: const props = defineProps({
  prefs: []
  type: TYPE_NORMAL
- en: 'id: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: Number,'
  prefs: []
  type: TYPE_NORMAL
- en: 'required: true,'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: 'activePanel: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: Number,'
  prefs: []
  type: TYPE_NORMAL
- en: 'default: 0,'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: 'const recipe: Ref<Recipe | null> = ref(null);'
  prefs: []
  type: TYPE_NORMAL
- en: 'const getRecipeDetails = async (id: number): Promise<void> => {'
  prefs: []
  type: TYPE_NORMAL
- en: const data = (await useRecipeInformation(id.toString())) as Recipe;
  prefs: []
  type: TYPE_NORMAL
- en: recipe.value = data;
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: const panel = ref<number | null>(1);
  prefs: []
  type: TYPE_NORMAL
- en: onMounted(() => {
  prefs: []
  type: TYPE_NORMAL
- en: getRecipeDetails(props.activePanel);
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: <template>
  prefs: []
  type: TYPE_NORMAL
- en: <AppLoader v-if="!recipe" />
  prefs: []
  type: TYPE_NORMAL
- en: <v-container v-else fluid>
  prefs: []
  type: TYPE_NORMAL
- en: <v-col>
  prefs: []
  type: TYPE_NORMAL
- en: <v-img height="200" :src="img/recipe.image" cover v-if="recipe.image" />
  prefs: []
  type: TYPE_NORMAL
- en: <h1 class="text-h3 ma-4">{{ recipe.title }}</h1>
  prefs: []
  type: TYPE_NORMAL
- en: <v-chip
  prefs: []
  type: TYPE_NORMAL
- en: class="ma-2 my-4"
  prefs: []
  type: TYPE_NORMAL
- en: color="primary"
  prefs: []
  type: TYPE_NORMAL
- en: :key="cuisine"
  prefs: []
  type: TYPE_NORMAL
- en: v-for="cuisine in recipe.cuisines"
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '{{ cuisine }}'
  prefs: []
  type: TYPE_NORMAL
- en: </v-chip>
  prefs: []
  type: TYPE_NORMAL
- en: <v-expansion-panels variant="accordion" v-model="panel">
  prefs: []
  type: TYPE_NORMAL
- en: <v-expansion-panel>
  prefs: []
  type: TYPE_NORMAL
- en: <v-expansion-panel-title class="text-h5"
  prefs: []
  type: TYPE_NORMAL
- en: '>Summary</v-expansion-panel-title'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <v-expansion-panel-text>
  prefs: []
  type: TYPE_NORMAL
- en: <div v-html="recipe.summary" class="text-body-1"></div>
  prefs: []
  type: TYPE_NORMAL
- en: </v-expansion-panel-text>
  prefs: []
  type: TYPE_NORMAL
- en: </v-expansion-panel>
  prefs: []
  type: TYPE_NORMAL
- en: <v-expansion-panel>
  prefs: []
  type: TYPE_NORMAL
- en: <v-expansion-panel-title class="text-h5"
  prefs: []
  type: TYPE_NORMAL
- en: '>Instructions</v-expansion-panel-title'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <v-expansion-panel-text>
  prefs: []
  type: TYPE_NORMAL
- en: <div v-html="recipe.instructions" class="text-body-1"></div>
  prefs: []
  type: TYPE_NORMAL
- en: </v-expansion-panel-text>
  prefs: []
  type: TYPE_NORMAL
- en: </v-expansion-panel>
  prefs: []
  type: TYPE_NORMAL
- en: </v-expansion-panels>
  prefs: []
  type: TYPE_NORMAL
- en: </v-col>
  prefs: []
  type: TYPE_NORMAL
- en: </v-container>
  prefs: []
  type: TYPE_NORMAL
- en: </template>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: <script setup lang="ts">import { useRouter } from "vue-router";
  prefs: []
  type: TYPE_NORMAL
- en: import CookingInstructions from "@/components/CookingInstructions.vue";
  prefs: []
  type: TYPE_NORMAL
- en: const router = useRouter();
  prefs: []
  type: TYPE_NORMAL
- en: const recipeId = Number(router.currentRoute.value.params.id);
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: <template>
  prefs: []
  type: TYPE_NORMAL
- en: <cooking-instructions :id="recipeId" :active-panel="1" />
  prefs: []
  type: TYPE_NORMAL
- en: </template>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: import { createRouter, createWebHistory } from 'vue-router'const routes = [
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'path: ''/'','
  prefs: []
  type: TYPE_NORMAL
- en: 'component: () => import(''@/layouts/default/Default.vue''),'
  prefs: []
  type: TYPE_NORMAL
- en: 'children: ['
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'path: '''','
  prefs: []
  type: TYPE_NORMAL
- en: 'name: ''Home'','
  prefs: []
  type: TYPE_NORMAL
- en: // route level code-splitting
  prefs: []
  type: TYPE_NORMAL
- en: // this generates a separate chunk (about.[hash].js) for this route
  prefs: []
  type: TYPE_NORMAL
- en: // which is lazy-loaded when the route is visited.
  prefs: []
  type: TYPE_NORMAL
- en: 'component: () => import(/* webpackChunkName: "home" */ ''@/views/Home.vue''),'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'path: ''recipes'','
  prefs: []
  type: TYPE_NORMAL
- en: 'name: ''recipes'','
  prefs: []
  type: TYPE_NORMAL
- en: 'component: () => import(''@/views/RecipesView.vue'')'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'path: ''/recipe/:id'','
  prefs: []
  type: TYPE_NORMAL
- en: 'name: ''recipe'','
  prefs: []
  type: TYPE_NORMAL
- en: 'component: () => import(''../views/RecipeView.vue'')'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: const router = createRouter({
  prefs: []
  type: TYPE_NORMAL
- en: 'history: createWebHistory(process.env.BASE_URL),'
  prefs: []
  type: TYPE_NORMAL
- en: routes,
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: export default router
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: npm install pinia
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: /** * main.ts
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '* Bootstraps Vuetify and other plugins then mounts the App'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: // Components
  prefs: []
  type: TYPE_NORMAL
- en: import App from './App.vue'
  prefs: []
  type: TYPE_NORMAL
- en: // Pinia
  prefs: []
  type: TYPE_NORMAL
- en: import { createPinia } from 'pinia'
  prefs: []
  type: TYPE_NORMAL
- en: // Composables
  prefs: []
  type: TYPE_NORMAL
- en: import { createApp } from 'vue'
  prefs: []
  type: TYPE_NORMAL
- en: // Plugins
  prefs: []
  type: TYPE_NORMAL
- en: import { registerPlugins } from '@/plugins'
  prefs: []
  type: TYPE_NORMAL
- en: const pinia = createPinia()
  prefs: []
  type: TYPE_NORMAL
- en: const app = createApp(App)
  prefs: []
  type: TYPE_NORMAL
- en: registerPlugins(app)
  prefs: []
  type: TYPE_NORMAL
- en: app.use(pinia)
  prefs: []
  type: TYPE_NORMAL
- en: app.mount('#app')
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: import { defineStore } from "pinia";export const useCacheStore = defineStore('cache',
    () => {
  prefs: []
  type: TYPE_NORMAL
- en: return { }
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: import { defineStore } from "pinia";export const useCacheStore = defineStore('cache',
    () => {
  prefs: []
  type: TYPE_NORMAL
- en: 'const cachedData = (): void => {}'
  prefs: []
  type: TYPE_NORMAL
- en: 'const cacheData = (): void => {}'
  prefs: []
  type: TYPE_NORMAL
- en: return { cachedData, cacheData }
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: import { ref } from "vue";import { defineStore } from "pinia";
  prefs: []
  type: TYPE_NORMAL
- en: export const useCacheStore = defineStore('cache', () => {
  prefs: []
  type: TYPE_NORMAL
- en: const cache = ref<any>([]);
  prefs: []
  type: TYPE_NORMAL
- en: 'const cachedData = (key: string): any => {'
  prefs: []
  type: TYPE_NORMAL
- en: try {
  prefs: []
  type: TYPE_NORMAL
- en: return cache.value[key]
  prefs: []
  type: TYPE_NORMAL
- en: '} catch (e) {'
  prefs: []
  type: TYPE_NORMAL
- en: return undefined;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'const cacheData = (key: string, data: any): void => {'
  prefs: []
  type: TYPE_NORMAL
- en: cache.value[key] = data
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return { cachedData, cacheData }
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: import { useCacheStore } from "@/stores/cache";const store = useCacheStore();
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: <script setup lang="ts">import { ref, onMounted } from "vue";
  prefs: []
  type: TYPE_NORMAL
- en: import type { Ref } from "vue";
  prefs: []
  type: TYPE_NORMAL
- en: import type { Recipe } from "@/types/spoonacular";
  prefs: []
  type: TYPE_NORMAL
- en: import { useRecipeInformation } from "@/composables/recipeApi";
  prefs: []
  type: TYPE_NORMAL
- en: import AppLoader from "./AppLoader.vue";
  prefs: []
  type: TYPE_NORMAL
- en: import { useCacheStore } from "@/stores/cache";
  prefs: []
  type: TYPE_NORMAL
- en: const store = useCacheStore();
  prefs: []
  type: TYPE_NORMAL
- en: const props = defineProps({
  prefs: []
  type: TYPE_NORMAL
- en: 'id: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: Number,'
  prefs: []
  type: TYPE_NORMAL
- en: 'required: true,'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: 'const recipe: Ref<Recipe | null> = ref(null);'
  prefs: []
  type: TYPE_NORMAL
- en: 'const getRecipeDetails = async (id: number): Promise<void> => {'
  prefs: []
  type: TYPE_NORMAL
- en: const cacheKey = recipe-details-${props.id};
  prefs: []
  type: TYPE_NORMAL
- en: if (store.cachedData(cacheKey)) {
  prefs: []
  type: TYPE_NORMAL
- en: recipe.value = store.cachedData(cacheKey) as Recipe;
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: const data = (await useRecipeInformation(id.toString())) as Recipe;
  prefs: []
  type: TYPE_NORMAL
- en: store.cacheData(cacheKey, data);
  prefs: []
  type: TYPE_NORMAL
- en: recipe.value = data;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: const panel = ref<number | null>(1);
  prefs: []
  type: TYPE_NORMAL
- en: onMounted(() => {
  prefs: []
  type: TYPE_NORMAL
- en: getRecipeDetails(props.id);
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: import { defineStore } from "pinia";export const usePlannerStore = defineStore('planner',
    () => {
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: npm install @vueuse/core
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: import { ref } from "vue";import { defineStore } from "pinia";
  prefs: []
  type: TYPE_NORMAL
- en: import { useLocalStorage } from "@vueuse/core"
  prefs: []
  type: TYPE_NORMAL
- en: interface Recipe {
  prefs: []
  type: TYPE_NORMAL
- en: 'id: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: Date;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: export const usePlannerStore = defineStore('planner', () => {
  prefs: []
  type: TYPE_NORMAL
- en: const recipes = ref<Recipe[] | any>(useLocalStorage('planner', []));
  prefs: []
  type: TYPE_NORMAL
- en: return { recipes }
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: import { ref } from "vue";import { defineStore } from "pinia";
  prefs: []
  type: TYPE_NORMAL
- en: import { useLocalStorage } from "@vueuse/core"
  prefs: []
  type: TYPE_NORMAL
- en: interface Recipe {
  prefs: []
  type: TYPE_NORMAL
- en: 'id: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: Date;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: export const usePlannerStore = defineStore('planner', () => {
  prefs: []
  type: TYPE_NORMAL
- en: const recipes = ref<Recipe[] | any>(useLocalStorage('planner', []));
  prefs: []
  type: TYPE_NORMAL
- en: 'const addRecipe = (recipe: Recipe) => {'
  prefs: []
  type: TYPE_NORMAL
- en: recipes.value.push(recipe)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'const removeRecipeByIdDate = (options: { id: number, date: Date }) => {'
  prefs: []
  type: TYPE_NORMAL
- en: const { id, date } = options;
  prefs: []
  type: TYPE_NORMAL
- en: 'const recipeIndex: number = recipes.value.findIndex((recipe: Recipe) => recipe.id
    === id && new Date(recipe.date).setHours(0, 0, 0, 0) === new Date(date).setHours(0,
    0, 0, 0))'
  prefs: []
  type: TYPE_NORMAL
- en: recipes.value.splice(recipeIndex, 1)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return { recipes, addRecipe, removeRecipeByIdDate }
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: <script setup lang="ts">import { storeToRefs } from "pinia";
  prefs: []
  type: TYPE_NORMAL
- en: import CalendarDays from "./CalendarDays.vue";
  prefs: []
  type: TYPE_NORMAL
- en: import { usePlannerStore } from "@/stores/planner";
  prefs: []
  type: TYPE_NORMAL
- en: const store = usePlannerStore();
  prefs: []
  type: TYPE_NORMAL
- en: const { recipes } = storeToRefs(store);
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: <template>
  prefs: []
  type: TYPE_NORMAL
- en: <calendar-days
  prefs: []
  type: TYPE_NORMAL
- en: :date="new Date()"
  prefs: []
  type: TYPE_NORMAL
- en: :days="7"
  prefs: []
  type: TYPE_NORMAL
- en: :recipes="recipes"
  prefs: []
  type: TYPE_NORMAL
- en: :key="recipes-${recipes.length}"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </template>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'const props = defineProps({  date: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: Date,'
  prefs: []
  type: TYPE_NORMAL
- en: 'required: true,'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: 'days: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: Number,'
  prefs: []
  type: TYPE_NORMAL
- en: 'required: false,'
  prefs: []
  type: TYPE_NORMAL
- en: 'default: 7,'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: 'recipes: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'type: Array,'
  prefs: []
  type: TYPE_NORMAL
- en: 'required: false,'
  prefs: []
  type: TYPE_NORMAL
- en: 'value: [],'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: 'const generateCards = (startDate: Date, numberOfDays: number): Card[] => {'
  prefs: []
  type: TYPE_NORMAL
- en: 'const cards: Card[] = [];'
  prefs: []
  type: TYPE_NORMAL
- en: const currentDate = new Date(startDate);
  prefs: []
  type: TYPE_NORMAL
- en: for (let i = 0; i < numberOfDays; i++) {
  prefs: []
  type: TYPE_NORMAL
- en: const date = new Date(currentDate.getTime());
  prefs: []
  type: TYPE_NORMAL
- en: const content = Card ${i + 1};
  prefs: []
  type: TYPE_NORMAL
- en: 'const recipesThisDay = props.recipes?.filter((recipe: any) => {'
  prefs: []
  type: TYPE_NORMAL
- en: const recipeDate = new Date(recipe.date).setHours(0, 0, 0, 0);
  prefs: []
  type: TYPE_NORMAL
- en: return recipeDate === date.setHours(0, 0, 0, 0);
  prefs: []
  type: TYPE_NORMAL
- en: '}) as Today[];'
  prefs: []
  type: TYPE_NORMAL
- en: 'cards.push({ date, content, today: recipesThisDay });'
  prefs: []
  type: TYPE_NORMAL
- en: currentDate.setDate(currentDate.getDate() + 1);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return cards;
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'const insertRecipeOnDay = (recipe: RecipeResults): void => {  if (dateSelected.value)
    {'
  prefs: []
  type: TYPE_NORMAL
- en: 'store.addRecipe({ ...recipe, date: dateSelected.value });'
  prefs: []
  type: TYPE_NORMAL
- en: recipeDialogClose();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: <script setup lang="ts">import { ref } from "vue";
  prefs: []
  type: TYPE_NORMAL
- en: import type { Ref } from "vue";
  prefs: []
  type: TYPE_NORMAL
- en: import type { Recipe, RecipeResults } from "@/types/spoonacular";
  prefs: []
  type: TYPE_NORMAL
- en: import { useRecipeInformation } from "@/composables/recipeApi";
  prefs: []
  type: TYPE_NORMAL
- en: import { usePlannerStore } from "@/stores/planner";
  prefs: []
  type: TYPE_NORMAL
- en: const store = usePlannerStore();
  prefs: []
  type: TYPE_NORMAL
- en: import { useCacheStore } from "@/stores/cache";
  prefs: []
  type: TYPE_NORMAL
- en: const cacheStore = useCacheStore();
  prefs: []
  type: TYPE_NORMAL
- en: // …abbreviated
  prefs: []
  type: TYPE_NORMAL
- en: 'const preloadRecipe = async (id: number): Promise<void> => {'
  prefs: []
  type: TYPE_NORMAL
- en: const cacheKey = recipe-details-${id};
  prefs: []
  type: TYPE_NORMAL
- en: if (!cacheStore.cachedData(cacheKey)) {
  prefs: []
  type: TYPE_NORMAL
- en: const data = (await useRecipeInformation(id.toString())) as Recipe;
  prefs: []
  type: TYPE_NORMAL
- en: cacheStore.cacheData(cacheKey, data);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: 'const insertRecipeOnDay = (recipe: RecipeResults): void => {'
  prefs: []
  type: TYPE_NORMAL
- en: if (dateSelected.value) {
  prefs: []
  type: TYPE_NORMAL
- en: preloadRecipe(recipe.id);
  prefs: []
  type: TYPE_NORMAL
- en: 'store.addRecipe({ ...recipe, date: dateSelected.value });'
  prefs: []
  type: TYPE_NORMAL
- en: recipeDialogClose();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: // …abbreviated
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: <calendar-card  :card="card"
  prefs: []
  type: TYPE_NORMAL
- en: '@daySelected="recipeDialogOpen"'
  prefs: []
  type: TYPE_NORMAL
- en: '@recipeRemoved="removeRecipeFromDay"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: const emits = defineEmits(["daySelected", "recipeRemoved"]);// …abbreviated
  prefs: []
  type: TYPE_NORMAL
- en: 'const recipeRemoved = (recipe: Today, date: Date): void => {'
  prefs: []
  type: TYPE_NORMAL
- en: emits("recipeRemoved", recipe, date);
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: <script setup lang="ts">import { useFormatDate } from "@/composables/formatters";
  prefs: []
  type: TYPE_NORMAL
- en: const emits = defineEmits(["daySelected"]);
  prefs: []
  type: TYPE_NORMAL
- en: import { usePlannerStore } from "@/stores/planner";
  prefs: []
  type: TYPE_NORMAL
- en: const store = usePlannerStore();
  prefs: []
  type: TYPE_NORMAL
- en: import AppLink from "./AppLink.vue";
  prefs: []
  type: TYPE_NORMAL
- en: interface Today {
  prefs: []
  type: TYPE_NORMAL
- en: 'id: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'title: string;'
  prefs: []
  type: TYPE_NORMAL
- en: 'readyInMinutes: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: interface Card {
  prefs: []
  type: TYPE_NORMAL
- en: 'date: Date;'
  prefs: []
  type: TYPE_NORMAL
- en: 'today: Today[];'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: const props = defineProps<{
  prefs: []
  type: TYPE_NORMAL
- en: 'card: Card;'
  prefs: []
  type: TYPE_NORMAL
- en: '}>();'
  prefs: []
  type: TYPE_NORMAL
- en: 'const addRecipeToDay = (card: Card): void => {'
  prefs: []
  type: TYPE_NORMAL
- en: emits("daySelected", card);
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: 'const removeFromDay = (recipes: { id: number; date: Date }): void => {'
  prefs: []
  type: TYPE_NORMAL
- en: const { id, date } = recipes;
  prefs: []
  type: TYPE_NORMAL
- en: store.removeRecipeByIdDate({ id, date });
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: <v-card-actions>  <v-spacer></v-spacer>
  prefs: []
  type: TYPE_NORMAL
- en: <v-btn
  prefs: []
  type: TYPE_NORMAL
- en: text
  prefs: []
  type: TYPE_NORMAL
- en: icon="mdi-trash-can-outline"
  prefs: []
  type: TYPE_NORMAL
- en: '@click="removeFromDay({ id: today.id, date: card.date })"'
  prefs: []
  type: TYPE_NORMAL
- en: '></v-btn>'
  prefs: []
  type: TYPE_NORMAL
- en: </v-card-actions>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: import { ref, computed } from "vue";import { defineStore } from "pinia";
  prefs: []
  type: TYPE_NORMAL
- en: import { useLocalStorage } from "@vueuse/core"
  prefs: []
  type: TYPE_NORMAL
- en: import type { Recipe } from "@/types/spoonacular";
  prefs: []
  type: TYPE_NORMAL
- en: interface RecipeList extends Recipe {
  prefs: []
  type: TYPE_NORMAL
- en: 'date: Date;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: export const usePlannerStore = defineStore('planner', () => {
  prefs: []
  type: TYPE_NORMAL
- en: const recipes = ref<Recipe[] | any>(useLocalStorage('planner', []));
  prefs: []
  type: TYPE_NORMAL
- en: const recipesSortedByDate = () =>
  prefs: []
  type: TYPE_NORMAL
- en: 'recipes.value.sort((a: { date : Date }, b: { date: Date }) => new Date(a.date).getTime()
    < new Date(b.date).getTime() ? -1 : 1)'
  prefs: []
  type: TYPE_NORMAL
- en: const pastRecipes = computed(() => {
  prefs: []
  type: TYPE_NORMAL
- en: const sorted = recipesSortedByDate();
  prefs: []
  type: TYPE_NORMAL
- en: 'return sorted.filter((recipe: RecipeList) => {'
  prefs: []
  type: TYPE_NORMAL
- en: const date = new Date(recipe.date);
  prefs: []
  type: TYPE_NORMAL
- en: return date < new Date();
  prefs: []
  type: TYPE_NORMAL
- en: '}) as RecipeList[]'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: const futureRecipes = computed(() => {
  prefs: []
  type: TYPE_NORMAL
- en: const sorted = recipesSortedByDate();
  prefs: []
  type: TYPE_NORMAL
- en: 'return sorted.filter((recipe: RecipeList) => {'
  prefs: []
  type: TYPE_NORMAL
- en: const date = new Date(recipe.date);
  prefs: []
  type: TYPE_NORMAL
- en: return date >= new Date();
  prefs: []
  type: TYPE_NORMAL
- en: '}) as RecipeList[];'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: 'const addRecipe = (recipe: Recipe) => {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('addRecipe', recipe)
  prefs: []
  type: TYPE_NORMAL
- en: recipes.value.push(recipe)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'const removeRecipeByIdDate = (options: { id: number, date: Date }) => {'
  prefs: []
  type: TYPE_NORMAL
- en: const { id, date } = options;
  prefs: []
  type: TYPE_NORMAL
- en: 'const recipeIndex: number = recipes.value.findIndex((recipe: Recipe) => recipe.id
    === id && new Date(recipe.date).setHours(0, 0, 0, 0) === new Date(date).setHours(0,
    0, 0, 0))'
  prefs: []
  type: TYPE_NORMAL
- en: recipes.value.splice(recipeIndex, 1)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return { recipes, pastRecipes, futureRecipes, addRecipe, removeRecipeByIdDate
    }
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: <script setup lang="ts">import { ref, computed, onMounted } from "vue";
  prefs: []
  type: TYPE_NORMAL
- en: import type { Ref } from "vue";
  prefs: []
  type: TYPE_NORMAL
- en: import { storeToRefs } from "pinia";
  prefs: []
  type: TYPE_NORMAL
- en: import type { Recipe } from "@/types/spoonacular";
  prefs: []
  type: TYPE_NORMAL
- en: interface RecipeList extends Recipe {
  prefs: []
  type: TYPE_NORMAL
- en: 'date: Date;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: import RecipeTable from "./RecipeTable.vue";
  prefs: []
  type: TYPE_NORMAL
- en: const { pastRecipes, futureRecipes } = storeToRefs(store);
  prefs: []
  type: TYPE_NORMAL
- en: '// return a date in the future:'
  prefs: []
  type: TYPE_NORMAL
- en: 'const addDays = (days: number): Date => {'
  prefs: []
  type: TYPE_NORMAL
- en: const date = new Date();
  prefs: []
  type: TYPE_NORMAL
- en: date.setDate(date.getDate() + days);
  prefs: []
  type: TYPE_NORMAL
- en: return date;
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '// generate some mock data for now:'
  prefs: []
  type: TYPE_NORMAL
- en: const recipes = [
  prefs: []
  type: TYPE_NORMAL
- en: '{ id: 1, title: "test", date: addDays(1) },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ id: 2, title: "test2", date: addDays(1) },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ id: 2, title: "test3", date: addDays(-1) },'
  prefs: []
  type: TYPE_NORMAL
- en: '];'
  prefs: []
  type: TYPE_NORMAL
- en: 'const openPreview = (recipe: { title: string }): void => {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log(`opening recipe ${recipe.title}`);
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: const pastRecipes = computed(() =>
  prefs: []
  type: TYPE_NORMAL
- en: 'recipes.filter((recipe: RecipeList) => {'
  prefs: []
  type: TYPE_NORMAL
- en: const date = new Date(recipe.date);
  prefs: []
  type: TYPE_NORMAL
- en: return date < new Date();
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: const futureRecipes = computed(
  prefs: []
  type: TYPE_NORMAL
- en: () =>
  prefs: []
  type: TYPE_NORMAL
- en: 'recipes.filter((recipe: RecipeList) => {'
  prefs: []
  type: TYPE_NORMAL
- en: const date = new Date(recipe.date);
  prefs: []
  type: TYPE_NORMAL
- en: return date >= new Date();
  prefs: []
  type: TYPE_NORMAL
- en: '}) as RecipeList[]'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: 'const tab: Ref<string> = ref("upcoming");'
  prefs: []
  type: TYPE_NORMAL
- en: onMounted(() => {
  prefs: []
  type: TYPE_NORMAL
- en: if (futureRecipes.value.length === 0) {
  prefs: []
  type: TYPE_NORMAL
- en: tab.value = "past";
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: <script setup lang="ts">import { ref, onMounted } from "vue";
  prefs: []
  type: TYPE_NORMAL
- en: import type { Ref } from "vue";
  prefs: []
  type: TYPE_NORMAL
- en: import { storeToRefs } from "pinia";
  prefs: []
  type: TYPE_NORMAL
- en: import type { Recipe } from "@/types/spoonacular";
  prefs: []
  type: TYPE_NORMAL
- en: import { usePlannerStore } from "@/stores/planner";
  prefs: []
  type: TYPE_NORMAL
- en: const store = usePlannerStore();
  prefs: []
  type: TYPE_NORMAL
- en: import RecipeTable from "./RecipeTable.vue";
  prefs: []
  type: TYPE_NORMAL
- en: import CookingInstructions from "./CookingInstructions.vue";
  prefs: []
  type: TYPE_NORMAL
- en: import AppLink from "./AppLink.vue";
  prefs: []
  type: TYPE_NORMAL
- en: const { pastRecipes, futureRecipes } = storeToRefs(store);
  prefs: []
  type: TYPE_NORMAL
- en: 'const dialogVisible: Ref<boolean> = ref(false);'
  prefs: []
  type: TYPE_NORMAL
- en: 'const selectedRecipe: Ref<Recipe | null> = ref(null);'
  prefs: []
  type: TYPE_NORMAL
- en: 'const openPreview = (recipe: Recipe): void => {'
  prefs: []
  type: TYPE_NORMAL
- en: selectedRecipe.value = recipe;
  prefs: []
  type: TYPE_NORMAL
- en: dialogVisible.value = true;
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: 'const tab: Ref<string> = ref("upcoming");'
  prefs: []
  type: TYPE_NORMAL
- en: onMounted(() => {
  prefs: []
  type: TYPE_NORMAL
- en: if (futureRecipes.length === 0) {
  prefs: []
  type: TYPE_NORMAL
- en: tab.value = "past";
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: <template>  <div v-if="pastRecipes.length === 0 && futureRecipes.length ===
    0">
  prefs: []
  type: TYPE_NORMAL
- en: No recipes yet. Add some to your planner!
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: <div v-else>
  prefs: []
  type: TYPE_NORMAL
- en: <!-- abbreviated -–>
  prefs: []
  type: TYPE_NORMAL
- en: </v-window>
  prefs: []
  type: TYPE_NORMAL
- en: <v-dialog v-model="dialogVisible" class="dialog" scrollable>
  prefs: []
  type: TYPE_NORMAL
- en: <v-card v-if="selectedRecipe">
  prefs: []
  type: TYPE_NORMAL
- en: <cooking-instructions :id="selectedRecipe.id" />
  prefs: []
  type: TYPE_NORMAL
- en: <v-card-actions>
  prefs: []
  type: TYPE_NORMAL
- en: <v-btn text>
  prefs: []
  type: TYPE_NORMAL
- en: <app-link :to="/recipe/${selectedRecipe.id}"
  prefs: []
  type: TYPE_NORMAL
- en: '>Cooking instructions</app-link'
  prefs: []
  type: TYPE_NORMAL
- en: '></v-btn'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <v-spacer />
  prefs: []
  type: TYPE_NORMAL
- en: <v-btn @click="dialogVisible = false" icon="mdi-close"></v-btn>
  prefs: []
  type: TYPE_NORMAL
- en: </v-card-actions>
  prefs: []
  type: TYPE_NORMAL
- en: </v-card>
  prefs: []
  type: TYPE_NORMAL
- en: </v-dialog>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </template>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: import { ref } from "vue";import { defineStore } from "pinia";
  prefs: []
  type: TYPE_NORMAL
- en: import { useLocalStorage } from "@vueuse/core"
  prefs: []
  type: TYPE_NORMAL
- en: interface Rating {
  prefs: []
  type: TYPE_NORMAL
- en: 'id: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'rating: number;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: export const useRatingStore = defineStore('rating', () => {
  prefs: []
  type: TYPE_NORMAL
- en: const ratings = ref<Rating[] | any>(useLocalStorage('rating', []));
  prefs: []
  type: TYPE_NORMAL
- en: 'const getRatingById = (id: number) => {'
  prefs: []
  type: TYPE_NORMAL
- en: 'const rating = ratings.value.find((rating: Rating) => rating.id === id)'
  prefs: []
  type: TYPE_NORMAL
- en: return rating?.rating;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'const saveRating = (rating: Rating) => {'
  prefs: []
  type: TYPE_NORMAL
- en: 'const ratingIndex = ratings.value.findIndex((r: Rating) => r.id === rating.id)'
  prefs: []
  type: TYPE_NORMAL
- en: if (ratingIndex === -1) {
  prefs: []
  type: TYPE_NORMAL
- en: ratings.value.push(rating)
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: ratings.value[ratingIndex] = rating
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return { getRatingById, saveRating }
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: <script setup lang="ts">import { ref } from "vue";
  prefs: []
  type: TYPE_NORMAL
- en: import type { Ref } from "vue";
  prefs: []
  type: TYPE_NORMAL
- en: import { useRatingStore } from "@/stores/modules/rating";
  prefs: []
  type: TYPE_NORMAL
- en: const store = useRatingStore();
  prefs: []
  type: TYPE_NORMAL
- en: const props = defineProps<{
  prefs: []
  type: TYPE_NORMAL
- en: 'id: number;'
  prefs: []
  type: TYPE_NORMAL
- en: 'readonly?: boolean;'
  prefs: []
  type: TYPE_NORMAL
- en: '}>();'
  prefs: []
  type: TYPE_NORMAL
- en: 'const rating: Ref<number> = ref(store.getRatingById(props.id));'
  prefs: []
  type: TYPE_NORMAL
- en: const saveRating = () => {
  prefs: []
  type: TYPE_NORMAL
- en: 'store.saveRating({id: props.id, rating: rating.value});'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: <template>
  prefs: []
  type: TYPE_NORMAL
- en: <div class="flex items-center">
  prefs: []
  type: TYPE_NORMAL
- en: <v-rating
  prefs: []
  type: TYPE_NORMAL
- en: v-model="rating"
  prefs: []
  type: TYPE_NORMAL
- en: color="light-green"
  prefs: []
  type: TYPE_NORMAL
- en: :readonly="readonly"
  prefs: []
  type: TYPE_NORMAL
- en: half-increments
  prefs: []
  type: TYPE_NORMAL
- en: item-aria-label="This item is rated {0} of {1}"
  prefs: []
  type: TYPE_NORMAL
- en: hover
  prefs: []
  type: TYPE_NORMAL
- en: '@click="saveRating"'
  prefs: []
  type: TYPE_NORMAL
- en: '></v-rating>'
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </template>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: <script setup lang="ts">// …abbreviated
  prefs: []
  type: TYPE_NORMAL
- en: import AppLoader from "./AppLoader.vue";
  prefs: []
  type: TYPE_NORMAL
- en: import RecipeRating from "./RecipeRating.vue";
  prefs: []
  type: TYPE_NORMAL
- en: // …abbreviated
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: <template>
  prefs: []
  type: TYPE_NORMAL
- en: <app-loader v-if="!recipe" />
  prefs: []
  type: TYPE_NORMAL
- en: <v-container v-else fluid>
  prefs: []
  type: TYPE_NORMAL
- en: <v-col>
  prefs: []
  type: TYPE_NORMAL
- en: <v-img height="200" :src="img/recipe.image" cover v-if="recipe.image" />
  prefs: []
  type: TYPE_NORMAL
- en: <h1 class="text-h3 ma-4">{{ recipe.title }}</h1>
  prefs: []
  type: TYPE_NORMAL
- en: <recipe-rating :id="recipe.id" />
  prefs: []
  type: TYPE_NORMAL
- en: <!-- abbreviated -->
  prefs: []
  type: TYPE_NORMAL
- en: </v-col>
  prefs: []
  type: TYPE_NORMAL
- en: </v-container>
  prefs: []
  type: TYPE_NORMAL
- en: </template>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
