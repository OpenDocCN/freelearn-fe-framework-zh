- en: Exploring Firebase Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will move forward to explore the other features of Firebase. Nowadays,
    images, audios, and videos have become an integral part of any website development.
    Keeping this in mind, Firebase has introduced storage.
  prefs: []
  type: TYPE_NORMAL
- en: We will take a look at how to upload a profile picture using the Firebase storage
    API. We will upload some random pictures using the Firebase portal and download
    the uploaded images using API to be shown in our friends list. We will then take
    a look at how to delete the files in Firebase storage. Finally, we will cover
    error handling.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Firebase storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Firebase storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading the profile picture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading friends images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting the profile image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling errors in Firebase storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Firebase storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebase storage provides the flexibility for application developers to store
    various content types in the storage. It stores images, videos, and audios. The
    contents are stored in the Google Cloud storage bucket, and they can be accessed
    from both Firebase and Google Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Firebase storage integrates with Firebase authentication and allows strong security.
    We can also apply a declarative security model to control access to the content.
    We will study this in more detail in a later section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firebase storage provides the following key features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scale**: It is backed by Google Cloud Storage and can scale to petabytes
    of size. You can read more about Google Cloud Storage at [https://cloud.google.com/storage/](https://cloud.google.com/storage/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: Each of the uploaded files can be secured using storage security
    rules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The default security rules for Firebase storage are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Network**: Firebase storage automatically takes care of the network problem
    during uploads and downloads of files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Firebase storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To configure Firebase storage in our application, we need the storage bucket
    URL. This can be found within the Files tab under Storage in the header, as shown
    in the following screenshot; in our case, the storage bucket URL of our application
    friends is `gs://friends.4d4fa.appspot.com`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s the modified `environment.ts` file with the storage bucket URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Uploading the profile picture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will cover how to upload a file to Firebase storage. In
    the user profile page, we will add the user profile picture on the top of the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps involved in uploading and showing the user profile image are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding HTML properties in a user profile template**: We provide an `input` tag
    to take a user-selected image from the file chooser. Normally, in the `input`
    tag with a file type, we have a button to choose the file; however, in this case,
    we require the user to click on the default image. We have hidden the button in
    the `input` tag using the built in styles, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Adding a default image in style sheets**: Initially, we show the default
    image by declaring the default image path in the `user-profile.component.ts` file,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the modified `user-profile.component.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the modified `user-profile.component.scss` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Handling a click event in the user profile component**: We will implement
    the `onPersonEdit()` method, which accepts `event` as its parameter. As you can
    see from the following code, we need to retrieve the selected files from the event
    object and pass them to `UserService`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Adding a method in user service**: In `user.service.ts`, we initialize the
    instance of Firebase storage in the constructor, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now we implement the `addProfileImage()` method in our user service.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we create the path for storing the image in Firebase storage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Second, we call the `put()` method from the Firebase storage reference, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After a successful upload, we save the download URL in the user node of Firebase
    and refresh the cache user object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Refreshing the user profile image**: After a successful upload, we need to
    update the image in our user profile page. We subscribe to `user` observable in
    the user profile component and update the profile image, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After a successful refresh, the user profile page will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Downloading friends images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the user profile page, we have uploaded the profile image in Firebase storage.
    We have also stored a downloadable URL in the user node in Firebase, which can
    be accessed by friends using the UID. After fetching the friends list, we have
    to call another Firebase API to get the downloadable URL from our user node. The
    following is the downloadable URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In HTML, images are defined with an `<img>` tag. The `src` attribute specifies
    the URL address of the image, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In `user-friends.component.html`, we add the default image with a downloadable
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In `user-friends.component.scss`, we use `background-image` and also add `width`
    and `height` so that the image fits into the card layout, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Firebase provides an API to get the downloadable URL using Firebase storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Deleting the profile images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firebase storage provides an API to delete the file from Firebase. The `delete`
    operation is similar to other Firebase storage APIs. We have not implemented this
    use case in our application; however, you may require this concept in your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Handling errors in Firebase storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firebase storage throws an error based on different conditions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**storage/unknown**: This may occur because of any unknown error. This is similar
    to the default condition in the `switch...case` statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**storage/object_not_found**: This occurs when the file/image reference is
    not available in the Firebase storage location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**storage/bucket_not_found**: This error occurs when the Firebase bucket is
    not configured.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**storage/project_not_found**: This error occurs when the Firebase project
    has not configured Firebase storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**storage/quota_exceeded**: This error occurs when the free tier plan expires
    and is asked to be upgraded to the paid plan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**storage/unauthenticated**: This error occurs when the user is not authenticated
    but is still able to access files and images in Firebase storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**storage/unauthorized**: This error occurs when an unauthorized user accesses
    the files/images in Firebase storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**storage/retry_limit_exceeded**: This error occurs when a user exceeds the
    retry limit because of a slow network, or because of no network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**storage/invalid_checksum**: This error occurs when the checksum on the client
    does not match that of the server''s.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**storage/canceled**: This error occurs when a user intervenes an upload or
    a download operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**storage/invalid_event_name**: This error occurs when an invalid event name
    is provided to the Firebase storage API. The correct events are *running*, *progress*,
    and *pause*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**storage/invalid-argument**: The Firebase storage `put()` method accepts file,
    `Blob`, and `UInt8` as parameters. This error occurs when we pass a wrong argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we encounter an error within our application, we implement the `then()`
    method of Promise and retrieve the error message and show it in alert dialog.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a modified `addProfileImage()` method in the `user.service.ts` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed Firebase storage. We uploaded the profile picture
    to Firebase storage and stored the downloadable URL in the user node in our database.
    We showed the image in the `img` tag of HTML, as this helps in downloading the
    images from Firebase storage. We covered Firebase security where a user needs
    to be properly authenticated to access the images/files in Firebase storage. Finally,
    we discussed error handling in Firebase storage.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover a more interesting and exciting part of our
    application. We will create a chat application and we will also cover how Firebase
    supports real-time updates.
  prefs: []
  type: TYPE_NORMAL
