["```js\n    <p>Welcome, {{ username }}!</p>\n    ```", "```js\n    <input [value]=\"username\" />\n    ```", "```js\n    <button (click)=\"handleClick()\">Click me!</button>\n    ...\n    handleClick() {\n      // handle user click event\n    }\n    ```", "```js\n    // FormsModule needs to be imported for this work on form input\n    import { FormsModule } from '@angular/forms'\n    <input [(ngModel)]=\"username\" />\n    ```", "```js\n@Component({\n  selector: 'app-greeting',\n  template: `\n    <p>Welcome, {{ username }}!</p>\n    <input [value]=\"username\" />\n  `\n})\nexport class GreetingComponent {\n  username = 'John Doe';\n}\n```", "```js\n@NgModule({\n  declarations: [AppComponent, HeaderComponent, FooterComponent],\n  // Other module properties...\n})\nexport class AppModule { }\n```", "```js\nng g c alert\n...\nCREATE src/app/alert/alert.component.scss (0 bytes)\nCREATE src/app/alert/alert.component.html (20 bytes)\nCREATE src/app/alert/alert.component.spec.ts (547 bytes)\nCREATE src/app/alert/alert.component.ts (294 bytes)\n```", "```js\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n@Component({\n  selector: 'app-alert',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './alert.component.html',\n  styleUrls: ['./alert.component.scss']\n})\nexport class AlertComponent {}\n```", "```js\nimport { Injectable } from '@angular/core'\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  getUsers(): Observable<User[]> {\n    // Fetch user data from API\n  }\n}\n```", "```js\nimport { Component, inject } from '@angular/core'\nimport { UserService } from './user.service'\n@Component({\n  selector: 'app-user-list',\n  template: `\n    <ul>\n      <li *ngFor=\"let user of users$ | async\">{{ user.name }}</li>\n    </ul>\n  `\n})\nexport class UserListComponent {\n  private userService = inject(UserService)\n  users$ = this.userService.getUsers()\n}\n```", "```js\n<div *ngIf=\"showMessage\">\n  <p>This message is shown conditionally.</p>\n</div>\n```", "```js\nng g d fallback-image \n```", "```js\nimport { Directive, Input, ElementRef, HostListener, inject } from '@angular/core'\n@Directive({\n  selector: 'img[fallbackImage]',\n  standalone: true\n})\nexport class FallbackImageDirective {\n  private el = inject(ElementRef)\n  @Input() fallbackImage: string\n  @HostListener('error')\n  private onError() {\n    const img = new Image()\n    img.src = this.fallbackImage\n    img.onload = () => (this.el.nativeElement.src = this.fallbackImage)\n  }\n}\n```", "```js\n<img\n  src=\"img/does-not-exist.png\"\n  [fallbackImage]=\"'/default.png'\"\n/>\n```", "```js\n    <p>Today is {{ today | date: 'longDate' }}</p>\n    ```", "```js\n    <p>The price is {{ price | currency: 'USD' }}</p>\n    ```", "```js\n    <p>{{ greeting | uppercase }}</p>\n    ```", "```js\nng g p reverse\n```", "```js\nimport { Pipe, PipeTransform } from '@angular/core';\n@Pipe({\n  standalone: true,\n  name: 'reverse'\n})\nexport class ReversePipe implements PipeTransform {\n  transform(value: string): string {\n    return value.split('').reverse().join('');\n  }\n}\n```", "```js\n@Component({\n  selector: 'my-app',\n  standalone: true,\n  imports: [CommonModule, ReversePipe],\n  template: `\n    <p> Revere of 'abc' is {{'abc' | reverse}} </p>\n  `,\n})\n```", "```js\nimport { Component, effect, signal, WritableSignal } from '@angular/core'\n@Component({\n  standalone: true,\n  selector: 'my-app',\n  template: `\n    <p>Current count is: {{count()}}</p>\n    <button (click)=\"setRandomCount()\">Set random count</button>\n  `,\n})\nexport class App {\n  public count: WritableSignal<number> = signal<number>(4);\n  constructor() {\n    effect(() => {\n      console.log(`The current count is: ${this.count()}`);\n    });\n  }\n  setRandomCount() {\n    this.count.set(Math.floor(Math.random() * 10 + 1));\n  }\n}\n```", "```js\n<div *ngIf=\"products.length; else noProducts\">\n  Show product list\n</div>\n<ng-template #noProducts>\n  Products are empty!\n</ng-template>\n```", "```js\n@if (products.length) {\n  Show Product List\n} @else {\n  Products are empty!\n}\n```", "```js\nng generate @angular/core:control-flow\n```", "```js\n    app/\n      components/\n        product/\n          product.component.ts\n          product.component.html\n          product.component.scss\n          product.component.spec.ts\n      services/\n        product.service.ts\n      models/\n        product.model.ts\n    ```", "```js\n    // product.component.ts\n    export class ProductComponent {\n      // Component logic...\n    }\n    ```", "```js\n    app/\n      components/\n        product/\n          product.component.ts\n    ```", "```js\n    // shared/ui/loading-spinner.component.ts\n    @Component({\n      selector: 'app-loading-spinner',\n      template: `\n        <div class=\"loading-spinner\">\n          <!-- Loading spinner template -->\n        </div>\n      `,\n    })\n    export class LoadingSpinnerComponent {\n      // Component logic...\n    }\n    ```"]