- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Using Hooks for Routing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Hooks进行路由
- en: In the previous chapter, we learned how to use Hooks for handling form submission
    using the **Action State Hook**, how to avoid blocking UI with the **Transition
    Hook**, and how to use the **Optimistic Hook** to implement optimistic updates.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用**Action State Hook**处理表单提交，如何使用**Transition Hook**避免UI阻塞，以及如何使用**Optimistic
    Hook**实现乐观更新。
- en: In this chapter, we are going to learn how to implement client-side routing
    in our blog app by using **React Router**. First, we will learn how React Router
    works, and which features it offers. Then, we will be creating a new route for
    viewing a single post and using the **Param Hook** to get the post ID from the
    URL. Next, we will learn how to use the `Link` component to link to different
    routes. Finally, we will learn how to programmatically implement navigation to
    redirect to a newly created post using the **Navigation Hook**.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何在我们的博客应用中通过使用**React Router**实现客户端路由。首先，我们将学习React Router是如何工作的，以及它提供了哪些功能。然后，我们将创建一个新的路由来查看单个帖子，并使用**Param
    Hook**从URL中获取帖子ID。接下来，我们将学习如何使用`Link`组件链接到不同的路由。最后，我们将学习如何使用**Navigation Hook**编程式实现导航以重定向到新创建的帖子。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introducing React Router
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍React Router
- en: Creating a new route and using the Param Hook
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新路由并使用Param Hook
- en: Linking to routes using the Link component
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Link组件链接到路由
- en: Programmatically redirecting using the Navigation Hook
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Navigation Hook进行编程式重定向
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'A fairly recent version of Node.js should already be installed. The Node Package
    Manager (`npm`) also needs to be installed (it should come with Node.js). For
    more information on how to install Node.js, please check out their official website:
    [https://nodejs.org/](https://nodejs.org/).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 应该已经安装了相当新的Node.js版本。Node包管理器（`npm`）也需要安装（它应该随Node.js一起提供）。有关如何安装Node.js的更多信息，请查看他们的官方网站：[https://nodejs.org/](https://nodejs.org/)
- en: 'We are going to use **Visual Studio Code** (**VS Code**) for the guides in
    this book, but everything should work similarly in any other editor. For more
    information on how to install VS Code, please refer to their official website:
    [https://code.visualstudio.com](https://code.visualstudio.com)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的指南中使用**Visual Studio Code**（**VS Code**），但在任何其他编辑器中一切都应该类似。有关如何安装VS Code的更多信息，请参阅他们的官方网站：[https://code.visualstudio.com](https://code.visualstudio.com)
- en: 'In this book, we use the following versions:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们使用以下版本：
- en: Node.js v22.14.0
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js v22.14.0
- en: '`npm` v10.9.2'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm` v10.9.2'
- en: Visual Studio Code v1.97.2
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code v1.97.2
- en: The versions mentioned in the preceding list are the ones used in the book.
    While installing a newer version should not be an issue, please note that certain
    steps might work differently on a newer version. If you are having an issue with
    the code and steps provided in this book, please try using the mentioned versions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面列出的版本是书中使用的版本。虽然安装较新版本通常不会有问题，但请注意，某些步骤在较新版本上可能工作方式不同。如果您在使用本书提供的代码和步骤时遇到问题，请尝试使用提到的版本。
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter08](https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter08)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码：[https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter08](https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter08)
- en: It is highly recommended that you write the code on your own. Do not simply
    run the code examples that are provided with the book. It is important to write
    the code yourself to be able to learn and understand it properly. However, if
    you run into any issues, you can always refer to the code example.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议您自己编写代码。不要简单地运行书中提供的代码示例。自己编写代码对于正确学习和理解代码非常重要。然而，如果您遇到任何问题，您始终可以参考代码示例。
- en: Introducing React Router
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍React Router
- en: React Router started out as a simple, declarative routing library. It provides
    features to define and manage different routes for our app, as well as navigating
    between them. Recently, React Router can also be used as a React framework, providing
    ways to handle layouts and advanced server-side rendering. However, since this
    book focuses on Hooks, we will focus on React Router as a library.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: React Router 最初是一个简单、声明式的路由库。它为我们提供了定义和管理应用程序不同路由的功能，以及在这些路由之间导航。最近，React Router
    也可以用作 React 框架，提供处理布局和高级服务器端渲染的方法。然而，由于本书专注于 Hooks，我们将专注于将 React Router 作为库。
- en: 'The library consists of three main components:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 该库由三个主要组件组成：
- en: The `BrowserRouter` component, which provides a context to use routing in
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BrowserRouter` 组件，它提供了一个上下文来使用路由'
- en: The `Routes` component, which lets us define some routes and renders the component
    of the currently active route
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Routes` 组件，它允许我们定义一些路由并渲染当前活动路由的组件'
- en: The `Route` component, which lets us define a specific route and component to
    render
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Route` 组件，它允许我们定义一个特定的路由和要渲染的组件'
- en: Additionally, the library provides components to create links to certain routes
    (using the `Link` and `NavLink` components), as well as Hooks to get parameters
    from the URL (Param Hook) and to navigate (Navigation Hook).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，该库提供了创建指向特定路由的链接的组件（使用 `Link` 和 `NavLink` 组件），以及从 URL 获取参数（参数钩子）和导航（导航钩子）的钩子。
- en: Now, let’s get started setting up React Router and an index route (which will
    contain the home page of our blog, with the feed of blog posts). The index route
    will be what is served on the main URL of our server, also sometimes called the
    entry point or `/` route.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始设置 React Router 和索引路由（它将包含我们博客的主页，显示博客帖子的源）。索引路由将是我们的服务器主 URL 上提供的内容，有时也称为入口点或
    `/` 路由。
- en: Setting up React Router
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 React Router
- en: 'Follow these steps to get started setting up the React Router library and an
    index route:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤开始设置 React Router 库和索引路由：
- en: 'Copy the `Chapter07_4` folder to a new `Chapter08_1` folder by executing the
    following command:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令将 `Chapter07_4` 文件夹复制到新的 `Chapter08_1` 文件夹：
- en: '[PRE0]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Open the new `Chapter08_1` folder in VS Code.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 中打开新的 `Chapter08_1` 文件夹。
- en: 'Open a Terminal and install the `react-router` library, as follows:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端，并按照以下方式安装 `react-router` 库：
- en: '[PRE1]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Create a new `src/pages/` folder, in which we are going to put the various pages
    of our app.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 `src/pages/` 文件夹，我们将把应用程序的各种页面放在其中。
- en: Create a new `src/pages/Home.jsx` file to contain the home page of our blog
    app (which will show the feed of posts that we already had before).
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 `src/pages/Home.jsx` 文件来包含我们博客应用程序的主页（将显示我们之前已有的帖子源）。
- en: 'Inside it, import `Suspense`, the `PostFeed`, and the `ThemeContext`:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其中，导入 `Suspense`、`PostFeed` 和 `ThemeContext`：
- en: '[PRE2]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Define and export a `Home` component, which shows a fallback while loading
    posts, then shows the featured posts with a special color, and then the regular
    posts:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义并导出 `Home` 组件，该组件在加载帖子时显示回退，然后以特殊颜色显示特色帖子，然后显示常规帖子：
- en: '[PRE3]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Edit `src/App.jsx` and *remove* the import of `Suspense`, as we are not going
    to need it anymore:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `src/App.jsx` 并*删除* `Suspense` 的导入，因为我们不再需要它了：
- en: '[PRE4]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Also, *remove* the import of the `PostFeed` component:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，*删除* `PostFeed` 组件的导入：
- en: '[PRE5]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, import the `BrowserRouter`, `Routes`, and `Route` from `react-router`:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从 `react-router` 中导入 `BrowserRouter`、`Routes` 和 `Route`：
- en: '[PRE6]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Also, import the `Home` page component:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，导入 `Home` 页面组件：
- en: '[PRE7]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Inside the `App` component, define the `BrowserRouter`, making sure it wraps
    all of the components, so that we can make use of the Navigation Hook in the header
    components later:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `App` 组件内部，定义 `BrowserRouter`，确保它包装了所有组件，这样我们就可以在标题组件中使用导航钩子：
- en: '[PRE8]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Inside the `ErrorBoundary`, *replace* the `Suspense` component and all its
    children. Instead, render the `Routes` component, in which we can define routes
    for our app:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ErrorBoundary` 内部，*替换* `Suspense` 组件及其所有子组件。相反，渲染 `Routes` 组件，在其中我们可以为我们的应用程序定义路由：
- en: '[PRE9]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Define an index route which renders the `Home` page component:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个索引路由，用于渲染 `Home` 页面组件：
- en: '[PRE10]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the app, as follows:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式运行应用程序：
- en: '[PRE11]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When opening the app in a browser, you will see that it looks exactly the same
    way as before, but now the home page is rendered via React Router instead of being
    hardcoded!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当在浏览器中打开应用程序时，你会看到它看起来与之前完全一样，但现在主页是通过 React Router 而不是硬编码来渲染的！
- en: '**Example code**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例代码**'
- en: The example code for this section can be found in the `Chapter08/Chapter08_1`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的示例代码可以在`Chapter08/Chapter08_1`文件夹中找到。请检查文件夹内的`README.md`文件，以获取设置和运行示例的说明。
- en: Creating a new route and using the Param Hook
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的路由并使用Param Hook
- en: 'Now that we have React Router set up successfully, we can start creating a
    new route for viewing a single post. This route will look as follows: `/post/:id`,
    with `:id` being a URL param containing the id of a post to be viewed.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功设置了React Router，我们可以开始创建一个新的路由来查看单个帖子。这个路由看起来如下所示：`/post/:id`，其中`:id`是一个包含要查看的帖子ID的URL参数。
- en: A **URL param** is a parameter used in an URL to define dynamic content. For
    example, in the `/post/:id` route, the `/post/` part would be a static string,
    but the `:id` will be replaced with a dynamic post ID. Let’s assume you have an
    URL that ends with `/post/8`, that would mean that the route matches with the
    `id` param being set to `8`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL参数**是在URL中使用的参数，用于定义动态内容。例如，在`/post/:id`路由中，`/post/`部分将是一个静态字符串，但`:id`将被替换为动态帖子ID。假设你有一个以`/post/8`结尾的URL，这意味着该路由与设置为`8`的`id`参数匹配。'
- en: 'Let’s get started setting up the page and route:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始设置页面和路由：
- en: 'Copy the `Chapter08_1` folder to a new `Chapter08_2` folder by executing the
    following command:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令将`Chapter08_1`文件夹复制到一个新的`Chapter08_2`文件夹：
- en: '[PRE12]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Open the new `Chapter08_2` folder in VS Code.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code中打开新的`Chapter08_2`文件夹。
- en: 'Edit `src/api.js` and define a new function to fetch a single post:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/api.js`并定义一个新的函数来获取单个帖子：
- en: '[PRE13]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Edit `src/components/post/Post.jsx` and import the `useSuspenseQuery` and the
    `fetchPost` functions:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/components/post/Post.jsx`并导入`useSuspenseQuery`和`fetchPost`函数：
- en: '[PRE14]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Change the `Post` component to only accept an `id` prop:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Post`组件更改为仅接受`id`属性：
- en: '[PRE15]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Inside the `Post` component, add a **Suspense Query Hook** to fetch the post
    and get all data from it:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Post`组件内部，添加一个**Suspense Query Hook**来获取帖子并获取所有数据：
- en: '[PRE16]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a new `src/pages/ViewPost.jsx` file. Inside it, import `Suspense`, the
    `useParams` function from `react-router`, and the `Post` component:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`src/pages/ViewPost.jsx`文件。在文件内部，导入`Suspense`，从`react-router`导入`useParams`函数和`Post`组件：
- en: '[PRE17]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Define and export the `ViewPost` page component:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义并导出`ViewPost`页面组件：
- en: '[PRE18]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Use a Params Hook to get the `id` from the URL params:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Params Hook从URL参数中获取`id`：
- en: '[PRE19]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Use a `Suspense` boundary to provide a fallback while the post is fetching,
    then render the `Post` component:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Suspense`边界在帖子获取时提供回退，然后渲染`Post`组件：
- en: '[PRE20]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Edit `src/App.jsx` and import the `ViewPost` component:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/App.jsx`并导入`ViewPost`组件：
- en: '[PRE21]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, define a new route with the `:id` param for the `ViewPost` page:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，为`ViewPost`页面定义一个新的带有`:id`参数的路由：
- en: '[PRE22]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the app, as follows (leave it running throughout the rest of this chapter):'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式运行应用程序，在整个章节的其余部分保持运行状态：
- en: '[PRE23]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'It is now possible to manually go to the single post page by appending `/post/:id`
    to the URL in a browser (for example `/post/1`):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以通过在浏览器中的URL后附加`/post/:id`来手动访问单个帖子页面（例如`/post/1`）：
- en: '![Figure 8.1 – Viewing a single post on our newly defined route](img/B31327_08_01.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1 – 在我们新定义的路由上查看单个帖子](img/B31327_08_01.png)'
- en: Figure 8.1 – Viewing a single post on our newly defined route
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – 在我们新定义的路由上查看单个帖子
- en: However, it would be nice if we could visit this page by clicking on one of
    the posts in the main post feed on the home page. Let’s implement this in the
    next section by using the `Link` component.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们能通过点击主页上的主帖流中的某个帖子来访问这个页面，那就太好了。让我们在下一节中通过使用`Link`组件来实现这个功能。
- en: Linking to routes using the <Link> component
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用<Link>组件链接到路由
- en: When dealing with links that the user can click to visit a different page, it
    is best and easiest to use the `Link` component. This component will automatically
    create a simple link to a specific page for us.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理用户可以点击以访问不同页面的链接时，最好且最简单的方法是使用`Link`组件。这个组件将自动为我们创建一个指向特定页面的简单链接。
- en: 'Let’s get started using the `Link` component to provide a link to a single
    post:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用`Link`组件来提供一个指向单个帖子的链接：
- en: 'Create a new `src/components/post/PostListItem.jsx` file, in which we are going
    to define a simplified version of the `Post` component, which will be shown in
    the `PostList` component. Inside it, import the `useContext` function, the `ThemeContext`
    and the `Link` component from `react-router`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`src/components/post/PostListItem.jsx`文件，在其中我们将定义`Post`组件的简化版本，该版本将在`PostList`组件中显示。在文件内部，导入`useContext`函数，`ThemeContext`和`Link`组件从`react-router`：
- en: '[PRE24]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Define and export the `PostListItem` component, which accepts the post `id`,
    `title`, and `author` as props:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义并导出`PostListItem`组件，它接受帖子`id`、`title`和`author`作为props：
- en: '[PRE25]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Define a Context Hook to get the theme:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个Context Hook来获取主题：
- en: '[PRE26]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Render the title, as we did before:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染标题，就像我们之前做的那样：
- en: '[PRE27]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, render a `Link` component, which will go to `/post/:id` and show the `ViewPost`
    page:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，渲染一个`Link`组件，它将导航到`/post/:id`并显示`ViewPost`页面：
- en: '[PRE28]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, show the author, but no contents, to avoid cluttering the feed:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，显示作者，但不显示内容，以避免使信息过载：
- en: '[PRE29]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Edit `src/components/post/PostList.jsx` and *replace* the `Post` import with
    an import of the `PostListItem` component:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/components/post/PostList.jsx`并将`Post`导入替换为`PostListItem`组件的导入：
- en: '[PRE30]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Render the `PostListItem` component instead of the `Post` component:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`PostListItem`组件渲染代替`Post`组件：
- en: '[PRE31]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now it is possible to go from the home page to a single post:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以从首页跳转到单个帖子：
- en: '![Figure 8.2 – The Link component rendering a “View Post >” link to go to the
    single post page](img/B31327_08_02.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2 – 链接组件渲染“查看帖子 >”链接以跳转到单个帖子页面](img/B31327_08_02.png)'
- en: Figure 8.2 – The Link component rendering a “View Post >” link to go to the
    single post page
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – 链接组件渲染“查看帖子 >”链接以跳转到单个帖子页面
- en: But there is still no way to go back to the home page. Let’s implement this
    in the next section.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 但仍然没有返回首页的方法。让我们在下一节中实现它。
- en: Defining a navigation bar using <NavLink>
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`<NavLink>`定义导航栏
- en: If we want to add styling to the link, for example, to implement a navigation
    bar where we show which page we are currently on, we can use the `NavLink` component.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要给链接添加样式，例如，实现一个显示我们当前所在页面的导航栏，我们可以使用`NavLink`组件。
- en: 'Let’s use this component to implement a navigation bar with a link to go back
    to the home page:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这个组件来实现一个带有返回首页链接的导航栏：
- en: 'Create a new `src/components/NavBarLink.jsx` file. Inside it, import the `NavLink`
    component:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`src/components/NavBarLink.jsx`文件。在其内部，导入`NavLink`组件：
- en: '[PRE32]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Define and export a component that accepts a `to` prop, which defines which
    route we should link to, and a `children` prop to provide a text or component
    to put the link on:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义并导出一个组件，它接受一个`to`prop，用于定义我们应该链接到哪个路由，以及一个`children`prop来提供要放在链接上的文本或组件：
- en: '[PRE33]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Then, define a `style`, in which we check if the link is active (when we are
    currently on the page), and then render it in bold:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，定义一个`style`，在其中检查链接是否处于激活状态（当我们当前在页面上时），然后以粗体形式渲染它：
- en: '[PRE34]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Edit `src/App.jsx` and import the `NavBarLink` component, as follows:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/App.jsx`并导入`NavBarLink`组件，如下所示：
- en: '[PRE35]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the header section of our blog app, before the `UserBar`, define a `NavBarLink`
    back to the index/home page:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的博客应用的头部部分，在`UserBar`之前定义一个返回索引/首页的`NavBarLink`：
- en: '[PRE36]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now we have a way to go from the home page to a single post, and back to the
    home page again to view other posts:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一种从首页跳转到单个帖子，然后再回到首页查看其他帖子的方法：
- en: '![Figure 8.3 – Rendering a “Home” NavLink, which is currently active (bold)](img/B31327_08_03.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3 – 渲染一个“首页”`NavLink`，当前处于激活状态（粗体）](img/B31327_08_03.png)'
- en: Figure 8.3 – Rendering a “Home” NavLink, which is currently active (bold)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – 渲染一个“首页”`NavLink`，当前处于激活状态（粗体）
- en: Next, let’s look at a way to programmatically navigate to the single post page
    after creating a new post.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看在创建新帖子后如何程序化地导航到单个帖子页面。
- en: Programmatically navigating using the Navigation Hook
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Navigation Hook进行程序化导航
- en: Whenever we want to programmatically navigate instead of having a link for the
    user to click, we can use the Navigation Hook provided by React Router. The Navigation
    Hook provides a function to navigate programmatically.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们想要程序化导航而不是让用户点击链接时，我们可以使用React Router提供的Navigation Hook。Navigation Hook提供了一个用于程序化导航的函数。
- en: 'Let’s get started using the Navigation Hook now:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在开始使用Navigation Hook：
- en: 'Edit `src/components/post/CreatePost.jsx` and import the `useNavigate` function:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`src/components/post/CreatePost.jsx`并导入`useNavigate`函数：
- en: '[PRE37]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Define a Navigate Hook inside the `CreatePost` component:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`CreatePost`组件内部定义一个Navigate Hook：
- en: '[PRE38]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Inside the Action State Hook, get the result from the mutation and then redirect
    to the `ViewPost` page of the newly created post:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Action State Hook内部，从mutation中获取结果，然后重定向到新创建的帖子的`ViewPost`页面：
- en: '[PRE39]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Try creating a new post in the blog app, and you will see that you get redirected
    to the page of the newly created post!
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试在博客应用中创建一个新的帖子，你会看到你被重定向到新创建的帖子页面！
- en: We have successfully implemented routing in our blog application! As an exercise,
    you could now try to implement the login/signup and create post forms on separate
    pages. When doing so, I would recommend refactoring the home page link into a
    new `NavBar` component with links to the various pages.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在我们的博客应用程序中成功实现了路由！作为一个练习，你现在可以尝试在单独的页面上实现登录/注册表单和创建文章表单。在这样做的时候，我建议将主页链接重构为一个新的
    `NavBar` 组件，其中包含链接到各个页面。
- en: '**Example code**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例代码**'
- en: The example code for this section can be found in the `Chapter08/Chapter08_2`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 本节示例代码位于 `Chapter08/Chapter08_2` 文件夹中。请检查文件夹内的 `README.md` 文件，以获取设置和运行示例的说明。
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we first learned how the React Router library works and which
    components it consists of. Then, we set up the library and an index route for
    the home page of our blog (showing a feed of blog posts). Next, we defined a new
    route to show a single post on a separate page and used the Params Hook to get
    the `id` value from the URL. Then, we learned how to navigate to this new route
    and back to the home page using `Link` and `NavLink` components. Finally, we learned
    how to programmatically navigate after a post was successfully created by using
    the Navigation Hook.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先学习了 React Router 库的工作原理以及它由哪些组件组成。然后，我们设置了库以及博客主页的索引路由（显示博客文章的列表）。接下来，我们定义了一个新的路由来显示单独页面上的单个文章，并使用
    Params 钩子从 URL 中获取 `id` 值。然后，我们学习了如何使用 `Link` 和 `NavLink` 组件导航到这个新路由以及如何返回主页。最后，我们学习了如何通过使用导航钩子程序化地导航到在文章成功创建后的路由。
- en: In the next chapter, we are going to learn about advanced built-in Hooks that
    React provides.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习 React 提供的更高级的内置钩子。
- en: Questions
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'To recap what we have learned in this chapter, try to answer the following
    questions:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回顾本章学到的内容，尝试回答以下问题：
- en: Which components does the React Router library consist of?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React Router 库由哪些组件组成？
- en: How do we define a new route with the React Router library?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何使用 React Router 库定义一个新的路由？
- en: How can we read dynamic values (params) in URLs?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在 URL 中读取动态值（参数）？
- en: What are ways to define links with React Router and how do they differ?
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 React Router 定义链接有哪些方法，它们有何不同？
- en: Which Hook is used to programmatically navigate with React Router?
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个钩子用于使用 React Router 程序化导航？
- en: Further reading
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following link:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对本章学到的概念有更多兴趣，请查看以下链接：
- en: 'Official website of React Router: [https://reactrouter.com/](https://reactrouter.com/)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Router 的官方网站：[https://reactrouter.com/](https://reactrouter.com/)
- en: Learn more on Discord
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入本书的 Discord 社区——在那里你可以分享反馈、向作者提问以及了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/wnXT0](Chapter_08.xhtml)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/wnXT0](Chapter_08.xhtml)'
- en: '![](img/image_%283%29.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_%283%29.png)'
