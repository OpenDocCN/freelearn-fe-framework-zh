["```js\n    npm init\n\n    ```", "```js\n    npm install jspm --save-dev\n\n    ```", "```js\n    jspm init\n\n    ```", "```js\n    jspm install npm:@angular/core npm:@angular/common npm:@angular/compiler npm:@angular/platform-browser-dynamic npm:rxjs text\n\n    ```", "```js\n  \"jspm\": {\n    \"dependencies\": {\n      \"@angular/common\": \"npm:@angular/common@2.0.0-rc.1\",\n      \"@angular/compiler\": \"npm:@angular/compiler@2.0.0-rc.1\",\n      \"@angular/core\": \"npm:@angular/core@2.0.0-rc.1\",\n      \"@angular/platform-browser-dynamic\": \"npm:@angular/platform-browser-dynamic@2.0.0-rc.1\",\n      \"text\": \"github:SystemJS/plugin-text@0.0.7\"\n    },\n    \"devDependencies\": {\n      \"typescript\": \"npm:typescript@1.8.10\",\n    }\n  }\n```", "```js\n<!doctype html>\n<html>\n<head lang=\"en\">\n  <title>Angular 2 Components</title>\n</head>\n<body>\n\n<script src=\"img/es6-shim.min.js\"></script>\n<script src=\"img/angular2-polyfills.js\"></script>\n<script src=\"img/system.js\"></script>\n<script src=\"img/config.js\"></script>\n<script>\n System.import('lib/bootstrap.js');\n</script>\n</body>\n</html>\n```", "```js\n// We need the Component annotation as well as the \n// ViewEncapsulation enumeration\nimport {Component, ViewEncapsulation} from '@angular/core';\n\n// Using the text loader we can import our template\nimport template from './app.html!text';\n\n// This creates our main application component\n@Component({\n  // Tells Angular to look for an element <ngc-app> to create this \n  // component\n  selector: 'ngc-app',\n  // Let's use the imported HTML template string\n  template,\n  // Tell Angular to ignore view encapsulation\n  encapsulation: ViewEncapsulation.None\n})\nexport class App {}\n```", "```js\nimport template from './app.html!text';\n```", "```js\n<div>Hello World!</div>\n\n```", "```js\nangular-2-components\n├── node_modules/\n├── jspm_packages/\n├── config.js\n├── index.html\n├── lib\n│   ├── app.html\n│   └── app.js\n└── package.json\n\n```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n  <title>Angular 2 Components</title>\n</head>\n<body>\n<ngc-app></ngc-app>\n...\n```", "```js\n// Import Angular bootstrap function\nimport {bootstrap} from '@angular/platform-browser-dynamic'; \n// Import our main app component\nimport {App} from './app';\n// We are bootstrapping Angular using our main application\n// component\nbootstrap(App);\n\n```", "```js\nangular-2-components\n├── jspm_packages/\n├── node_modules/\n├── config.js\n├── index.html\n├── lib\n│   ├── app.html\n│   ├── app.js\n│   └── bootstrap.js\n└── package.json\n\n```", "```js\nlive-server\n\n```", "```js\nimport {Component, ViewEncapsulation} from '@angular/core';\nimport template from './task-list.html!text';\n\n@Component({\n  selector: 'ngc-task-list',\n  // The host property allows us to set some properties on the \n  // HTML element where our component is initialized\n  host: {\n    class: 'task-list'\n  },\n  template,\n  encapsulation: ViewEncapsulation.None\n})\nexport class TaskList {\n  constructor() {\n    this.tasks = [\n      {title: 'Task 1', done: false},\n      {title: 'Task 2', done: true}\n    ];\n  }\n}\n```", "```js\n<div *ngFor=\"let task of tasks\" class=\"task\">\n  <input type=\"checkbox\" [checked]=\"task.done\">\n  <div class=\"task__title\">{{task.title}}</div>\n</div>\n```", "```js\nangular-2-components\n└── lib\n ├── app.html\n ├── app.js\n ├── bootstrap.js\n └── task-list\n ├── task-list.html\n └── task-list.js\n\n```", "```js\nimport {TaskList} from './task-list/task-list';\n```", "```js\n...\n  // Tell Angular to ignore view encapsulation\n  encapsulation: ViewEncapsulation.None,\n directives: [TaskList]\n})\n...\n```", "```js\n<ngc-task-list></ngc-task-list>\n\n```", "```js\n<input type=\"checkbox\" [checked]=\"task.done\">\n<div class=\"task__title\">{{task.title}}</div>\n```", "```js\nimport {Component, Input, ViewEncapsulation} from '@angular/core';\nimport template from './task.html!text';\n\n@Component({\n  selector: 'ngc-task',\n  host: {\n    class: 'task'\n  },\n  template,\n  encapsulation: ViewEncapsulation.None\n})\nexport class Task {\n  // Our task model can be attached on the host within the view\n  @Input() task;\n}\n```", "```js\n<ngc-task *ngFor=\"let task of tasks\" \n [task]=\"task\"></ngc-task>\n\n```", "```js\n...\nimport {Task} from './task/task';\n\n@Component({\n  ...\n directives: [Task]\n})\n...\n```", "```js\n<input type=\"text\" class=\"enter-task__title-input\"\n       placeholder=\"Enter new task title...\"\n       #titleInput>\n<button class=\"button\" (click)=\"enterTask(titleInput)\">\n  Add Task\n</button>\n```", "```js\nimport {Component, Output, ViewEncapsulation, EventEmitter} from '@angular/core';\nimport template from './enter-task.html!text';\n\n@Component({\n  selector: 'ngc-enter-task',\n  host: { class: 'enter-task' },\n  template,\n  encapsulation: ViewEncapsulation.None\n})\nexport class EnterTask {\n // Event emitter that gets fired once a task is entered.\n @Output() taskEntered = new EventEmitter();\n // This function will fire the taskEntered event emitter \n // and reset the task title input field.\n enterTask(titleInput) {\n this.taskEntered.next(titleInput.value);\n titleInput.value = ''; \n titleInput.focus();\n }\n}\n```", "```js\n<my-comp (output-prop)= \"doSomething()\">\n```", "```js\n<my-comp (out)= \"doSomething()\">\n```", "```js\n<ngc-enter-task (taskEntered)=\"addTask($event)\">\n</ngc-enter-task>\n<ngc-task *ngFor=\"let task of tasks\" \n          [task]=\"task\"></ngc-task>\n```", "```js\n...\n// The component for entering new tasks\nimport {EnterTask} from './enter-task/enter-task';\n\n@Component({\n  ...\n directives: [Task, EnterTask]\n})\nexport class TaskList {\n  ...\n // Function to add a task from the view\n addTask(title) {\n this.tasks.push({\n title, done: false\n });\n }\n}\n```", "```js\n<input type=\"checkbox\"\n       [checked]=\"checked\"\n (change)=\"onChecke\ndChange($event.target.checked)\">\n {{label}}\n\n```", "```js\nimport {Component, Input, Output, ViewEncapsulation, EventEmitter} from '@angular/core';\nimport template from './checkbox.html!text';\n\n@Component({\n  selector: 'ngc-checkbox',\n  host: { class: 'checkbox' },\n  template,\n  encapsulation: ViewEncapsulation.None\n})\nexport class Checkbox {\n  // An optional label can be set for the checkbox\n  @Input() label;\n // If the checkbox is checked or unchecked\n @Input() checked;\n // Event emitter when checked is changed using the convention \n // for two way binding with [(checked)] syntax.\n @Output() checkedChange = new EventEmitter();\n\n // This function will trigger the checked event emitter\n onCheckedChange(checked) {\n this.checkedChange.next(checked);\n }\n}\n```", "```js\n  <input type=\"text\" (input)=\"value = $event.target.value\" \n                     [value]=\"value\">\n```", "```js\n<sc [text]=\"myText\"\n    (textOut)=\"myText = $event\">\n```", "```js\n<sc [(text)]=\"myText\">\n```", "```js\n<ngc-checkbox [(checked)]=\"task.done\"></ngc-checkbox>\n\n```", "```js\n...\nimport {..., HostBinding} from '@angular/core';\n// Each task has a checkbox component for marking tasks as done.\nimport {Checkbox} from '../../ui/checkbox/checkbox';\n\n@Component({\n  ...\n  // We need to specify that this component relies on the Checkbox \n  // component within the view.\n directives: [Checkbox]\n})\nexport class Task {\n  // Our task model can be attached on the host within the view\n  @Input() task;\n\n  @HostBinding('class.task--done')\n get done() {\n return this.task && this.task.done;\n }\n}\n```", "```js\n<button class=\"button button--toggle\"\n        *ngFor=\"let button of buttonList\"\n        [class.button--active]=\"button === selectedButton\"\n        (click)=\"onButtonActivate(button)\">{{button}}</button>\n```", "```js\nimport {Component, Input, Output, ViewEncapsulation, EventEmitter} from '@angular/core';\nimport template from './toggle.html!text';\n\n@Component({\n  selector: 'ngc-toggle',\n  host: {\n    class: 'toggle'\n  },\n  template,\n  encapsulation: ViewEncapsulation.None\n})\nexport class Toggle {\n  // A list of objects that will be used as button values.\n  @Input() buttonList;\n  // Input and state of which button is selected needs to refer to \n  // an object within buttonList\n  @Input() selectedButton;\n  // Event emitter when selectedButton is changed using the \n  // convention for two way binding with [(selected-button)] \n  // syntax.\n  @Output() selectedButtonChange = new EventEmitter();\n\n  // Callback within the component lifecycle that will be called \n  // after the constructor and inputs have been set.\n  ngOnInit() {\n    if (this.selectedButton === undefined) {\n      this.selectedButton = this.buttonList[0];\n    }\n  }\n\n  // Method to set selected button and trigger event emitter.\n  onButtonActivate(button) {\n    this.selectedButton = button;\n    this.selectedButtonChange.next(button);\n  }\n}\n```", "```js\n// Classes which we'd like to provide for dependency injection \n// need to be annotated using this decorator\nimport {Injectable} from '@angular/core';\n\n@Injectable()\nexport class TaskListService {\n  constructor() {\n    this.tasks = [\n      {title: 'Task 1', done: false},\n      {title: 'Task 2', done: false},\n      {title: 'Task 3', done: true},\n      {title: 'Task 4', done: false}\n    ];\n  }\n}\n```", "```js\nimport {..., Inject} from '@angular/core';\n// The dummy task service where we get our tasks from\nimport {TaskListService} from './task-list-service';\n...\n\n// We also need a Toggle UI component to provide a filter\nimport {Toggle} from '../ui/toggle/toggle';\n\n@Component({\n  ...\n  // Set the TaskListService as host provider\n providers: [TaskListService],\n  // Specify all directives / components that are used in the view\n  directives: [Task, EnterTask, Toggle]\n})\nexport class TaskList {\n  // Inject the TaskListService and set our filter data\n constructor(@Inject(TaskListService) taskListService) {\n this.taskListService = taskListService;\n this.taskFilterList = ['all', 'open', 'done'];\n this.selectedTaskFilter = 'all';\n }\n  // Method that returns a filtered list of tasks based on the \n  // selected task filter string.\n getFilteredTasks() {\n return this.taskListService.tasks ? this.taskListService.tasks.filter((task) => {\n if (this.selectedTaskFilter === 'all') {\n return true;\n } else if (this.selectedTaskFilter === 'open') {\n return !task.done;\n } else {\n return task.done;\n }\n }) : [];\n }\n  // Method to add a task from the view\n  addTask(title) {\n this.taskListService.tasks.push({\n title,\n done: false\n });\n  }\n}\n```", "```js\n<ngc-toggle [buttonList]=\"taskFilterList\"\n [(selectedButton)]=\"selectedTaskFilter\">\n</ngc-toggle>\n<ngc-enter-task (taskEntered)=\"addTask($event)\">\n</ngc-enter-task>\n<ngc-task *ngFor=\"let task of getFilteredTasks()\" \n [task]=\"task\"></ngc-task>\n\n```"]