- en: Client-Side Routing for SPA
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SPA的客户端路由
- en: '**Single Page Applications** (**SPA**) is a term used to refer to apps that
    are served from just one server route but have multiple client views. The single-server
    route is usually the default (`/` or `*`). Once the single-server route is loaded,
    the client (JavaScript) hijacks the page and starts controlling the route using
    the browser''s routing mechanisms.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**单页应用程序**（**SPA**）是一个用来指代仅从一个服务器路由提供服务但具有多个客户端视图的应用程序的术语。单一服务器路由通常是默认的（`/`或`*`）。一旦加载了单一服务器路由，客户端（JavaScript）就会接管页面，并开始使用浏览器的路由机制来控制路由。'
- en: Being able to control the routes from JavaScript gives developers the ability
    to build better user experiences. This chapter describes how this can be done
    in Angular using TypeScript-written classes, directives, and so on.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 能够从JavaScript控制路由使开发人员能够构建更好的用户体验。本章描述了如何在Angular中使用TypeScript编写的类、指令等来实现这一点。
- en: Just like every other chapter, we will be doing this with practical examples.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 就像每一章一样，我们将通过实际示例来做这个。
- en: RouterModule
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RouterModule
- en: 'Just like Forms, Angular doesn''t generate routing by default in the CLI scaffold.
    This is because you might not need it in the project you''re working on. To get
    routing working, you need to import it in the module that needs to make use of
    it:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 就像表单一样，Angular在CLI脚手架中默认不生成路由。这是因为你可能在你正在工作的项目中不需要它。要使路由工作，你需要在需要使用它的模块中导入它：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The module exposes a static `forRoot` method, which is passed in an array of
    routes. Doing so registers and configures those routes for the module importing
    `RouterModule`. Start with creating a `routes.ts` file in the `app` folder:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块公开了一个静态的`forRoot`方法，该方法传入一个路由数组。这样做会为导入`RouterModule`的模块注册和配置这些路由。首先创建一个`routes.ts`文件在`app`文件夹中：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The signature of the `Routes` class is an array that takes one or more objects.
    The object that is passed in should have a path and a component property. The
    path property defines the location while the component property defines the Angular
    component that should be mounted on the defined path.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`Routes`类的签名是一个数组，其中包含一个或多个对象。传入的对象应该有一个路径和一个组件属性。路径属性定义了位置，而组件属性定义了应该挂载在定义路径上的Angular组件。'
- en: 'You can then configure `RouterModule` with these arrays in `AppModule`. We
    have already imported `RouterModule`, so let''s import the `routes` file and configure
    the routes in the `imports` array:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以在`AppModule`中使用这些数组配置`RouterModule`。我们已经导入了`RouterModule`，所以让我们导入`routes`文件并在`imports`数组中配置路由：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'That''s all it takes to configure routes in Angular. The components for the
    routes are yet to be created, so if you try running the app, you will get errors
    in the terminal indicating the same:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是在Angular中配置路由所需的全部内容。路由的组件尚未创建，所以如果你尝试运行应用程序，你将在终端中看到相同的错误：
- en: '![](assets/885229f8-c052-470a-a72c-3335461f20af.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/885229f8-c052-470a-a72c-3335461f20af.jpg)'
- en: 'Let''s generate these components using the CLI:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用CLI生成这些组件：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, update the routes configuration to import the components:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，更新路由配置以导入组件：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the app one more time and see whether you got rid of the errors:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行应用程序，看看是否摆脱了错误：
- en: '![](assets/e245aa28-283f-4d3c-aad4-5d88b47d972b.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e245aa28-283f-4d3c-aad4-5d88b47d972b.jpg)'
- en: Router directives
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由指令
- en: I know you're itching to see the example in the browser, but if you try testing
    the app at port `4200`, you will still see the content of the `app` component.
    This is because we haven't told Angular where it should mount the route.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道你迫不及待地想在浏览器中看到示例，但是如果你尝试在端口`4200`上测试应用程序，你仍然会看到`app`组件的内容。这是因为我们还没有告诉Angular它应该在哪里挂载路由。
- en: 'Angular exposes two important route directives:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Angular公开了两个重要的路由指令：
- en: '**Router outlet**: This defines where the route configuration should be mounted.
    This is usually in an entry component for single-page apps.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由出口**：这定义了路由配置应该挂载的位置。这通常是单页应用程序的入口组件。'
- en: '**Router link**: This is used to define the navigation for Angular routes.
    Basically, it adds features to the anchor tag so as to work better with routes
    defined in an Angular app.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由链接**：这用于定义Angular路由的导航。基本上，它为锚标签添加功能，以便更好地与Angular应用程序中定义的路由一起工作。'
- en: 'Let''s replace the content of the app component''s template to utilize the
    router directives:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们替换应用组件模板的内容以利用路由指令：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The div with the class `container` is where each component will be displayed
    once we visit the respective route. We can navigate through each of the routes
    by clicking through the anchor tags that have the `routerLink` directive.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 具有`container`类的div是每个组件在我们访问相应路由时将显示的位置。我们可以通过点击具有`routerLink`指令的锚标签来浏览每个路由。
- en: 'Open your browser and visit the localhost at port `4200`. You should see the
    home page by default:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器，访问端口`4200`的本地主机。您应该默认看到主页：
- en: '![](assets/62a7adaf-1178-4a2a-853b-8436fc3952b2.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/62a7adaf-1178-4a2a-853b-8436fc3952b2.png)'
- en: 'Try clicking on the About or Contact link in the navigation bar. If you followed
    all the steps, you should see the app replace the home component with the Aboutor
    Contact component:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在导航栏中点击“关于”或“联系”链接。如果您按照所有步骤操作，您应该看到应用程序用“关于”或“联系”组件替换主页组件：
- en: '![](assets/aae21ff1-f2b3-4455-8fc0-cdc6d4ead19a.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aae21ff1-f2b3-4455-8fc0-cdc6d4ead19a.png)'
- en: 'Note how the address bar also updates with the path location we defined in
    the configuration:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意地址栏也会随着我们在配置中定义的路径位置更新：
- en: '![](assets/37d9804c-b80b-4f61-932a-e1694552599f.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/37d9804c-b80b-4f61-932a-e1694552599f.png)'
- en: Master-details view with routes
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有路由的主细节视图
- en: A very common UI pattern is to have a list of items without much information
    about the items. The detailed information about each of the items is shown when
    the item is selected, clicked, or a mouseover occurs.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常常见的UI模式是有一个项目列表，但关于项目的信息不多。当选择项目、点击或发生鼠标悬停时，会显示每个项目的详细信息。
- en: Each of the items is usually referred to as the master, while the content that
    is shown after interacting with the item is referred to as the child or details.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目通常被称为主项目，而与项目交互后显示的内容被称为子项目或详细信息。
- en: Let's build a simple blog that shows a list of articles on the home page, and
    when each article is clicked, the post page is revealed and you can read the selected
    article.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个简单的博客，在主页上显示文章列表，当点击每篇文章时，会显示文章页面，您可以阅读所选文章。
- en: Data source
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据源
- en: 'For a basic example, we don''t need a database or a server. A simple JSON file
    containing blog posts is enough. Create a file named `db.json` in your `app` folder
    with the following structure:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个基本的例子，我们不需要数据库或服务器。一个包含博客文章的简单JSON文件就足够了。在您的`app`文件夹中创建一个名为`db.json`的文件，结构如下：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The structure shows an array of posts. Each post has `imageID`, an author as
    collector, and a description as the post content.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 结构显示了一个帖子数组。每篇文章都有`imageID`，作者作为收集者，以及作为帖子内容的描述。
- en: 'TypeScript, by default, won''t understand the JSON file when you try importing
    it into a TypeScript file. To fix this, define `typings` with the following declarations:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，TypeScript在尝试将其导入到TypeScript文件中时不会理解JSON文件。为了解决这个问题，使用以下声明定义`typings`：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Blog service
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 博客服务
- en: 'Remember that we mentioned how having the business logic of our app in components
    is a bad idea. As much as possible, it''s not recommended to interact with the
    data source directly from the component. What we will rather do is create a service
    class to do the same for us:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们提到将应用程序的业务逻辑放在组件中是一个坏主意。尽可能地，不建议直接从组件与数据源进行交互。我们将创建一个服务类来代替我们执行相同的操作：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Update the generated empty service with the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下内容更新生成的空服务：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s talk about what''s happening in the service:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈服务中发生的事情：
- en: First, we import the data source we created.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们导入了创建的数据源。
- en: Next, we create a `getPosts` method, which returns all the posts after transforming
    each item in the post. We also generate an image URL with the image ID. This is
    done by appending the ID to a Cloudinary ([https://cloudinary.com/](https://cloudinary.com/))
    image server URL. The images were uploaded to Cloudinary prior to using them.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建了一个`getPosts`方法，该方法在转换每个帖子项后返回所有帖子。我们还使用图像ID生成图像URL。这是通过将ID附加到Cloudinary
    ([https://cloudinary.com/](https://cloudinary.com/))图像服务器URL来完成的。在使用它们之前，这些图像已上传到Cloudinary。
- en: The `byId` method takes the ID as an argument, finds the post with the ID using
    the filter method, and then transforms the retrieved post. After the transformation,
    we fetch the first and only item in the array.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`byId`方法以ID作为参数，使用filter方法找到具有该ID的帖子，然后转换检索到的帖子。转换后，我们获取数组中的第一个且唯一的项目。'
- en: 'To expose this service, you need to add it to the `providers` array in the
    `app` module:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要公开此服务，您需要将其添加到`app`模块中的`providers`数组中：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating routes
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建路由
- en: 'Now that we have a data source and a service to interact with this data source,
    it''s time to start working on the routes and components that will consume this
    data. Add a `routes.ts` file to the `app` folder with the following configuration:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了数据源和与该数据源交互的服务，是时候开始处理将使用这些数据的路由和组件了。在`app`文件夹中添加一个`routes.ts`文件，并进行以下配置：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The second route that points to `post` has a `:id` placeholder. This is used
    to define a dynamic route, which means that the value passed in as ID can be used
    to control the behavior of the mounted component.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 指向`post`的第二个路由具有一个`:id`占位符。这用于定义动态路由，这意味着传递的ID值可以用于控制挂载组件的行为。
- en: 'Create the two components that we imported previously:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 创建之前导入的两个组件：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Update the `app` module to import the configured route, using `RouterModule`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`app`模块以导入配置的路由，使用`RouterModule`：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To mount the router, replace the entire content of the app component''s template
    with the following markup:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了挂载路由器，用以下标记替换app组件模板的整个内容：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Listing posts in the home component
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在主页组件中列出帖子
- en: 'The home component that we are mounting on the home page is expected to show
    a list of posts. Therefore, it needs to interact with the blog service to do so.
    Update the class to the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在主页上挂载的主页组件预期显示帖子列表。因此，它需要与博客服务进行交互。将类更新为以下内容：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The component depends on the `BlogService` class, which is resolved in the constructor.
    The `blogService` instance is then used to get the list of posts and pass it to
    the `posts` property. This property is what will be bound to the view.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件依赖于`BlogService`类，该类在构造函数中解析。然后使用`blogService`实例获取帖子列表并将其传递给`posts`属性。该属性将绑定到视图。
- en: 'To show these posts in the browser, we need to iterate over each of them and
    display them in the component''s template:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在浏览器中显示这些帖子，我们需要遍历每个帖子并在组件模板中显示它们：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here is what it looks like when you run the app:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行应用程序时，它看起来像这样：
- en: '![](assets/a2075f80-0926-4465-b4da-026e2b6aee94.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a2075f80-0926-4465-b4da-026e2b6aee94.png)'
- en: 'We need to define the behavior of interacting with the article cards. When
    the card is clicked, we could use a router link directive to navigate to the post
    page. However, because we have already seen that, let''s use the second option,
    which is defining the behavior in a TypeScript method. First, add an event listener:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要定义与文章卡片交互的行为。当点击卡片时，我们可以使用路由链接指令导航到帖子页面。但是，因为我们已经看到了，让我们使用第二个选项，即在 TypeScript
    方法中定义行为。首先，添加一个事件监听器：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We intend to call the `showPost` method when the card is clicked. This method
    receives the ID of the clicked image. Here is the method implementation:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打算在点击卡片时调用 `showPost` 方法。这个方法接收被点击图片的 ID。以下是方法的实现：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `showPost` method uses the router's `navigate` method to move to a new route
    location.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`showPost` 方法使用路由器的 `navigate` 方法来移动到新的路由位置。'
- en: Reading an article with the post component
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用帖子组件阅读文章
- en: 'The post component just shows a single post with all the details. To display
    this single post, it receives the parameter from the URL and passes the parameter
    to the `byId` method in the blog service class:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 帖子组件只显示带有所有细节的单个帖子。为了显示这个单个帖子，它从 URL 接收参数并将参数传递给博客服务类中的 `byId` 方法：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `ActivatedRoute` class exposes a `params` property, which is an Observable.
    You can subscribe to this Observable to get the parameters passed to a given route.
    We are setting the `post` property to the filtered value returned by the `byId`
    method.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`ActivatedRoute` 类公开了一个 `params` 属性，它是一个 Observable。您可以订阅这个 Observable 来获取传递给给定路由的参数。我们将
    `post` 属性设置为 `byId` 方法返回的过滤值。'
- en: 'Now, you can display the post in the template:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以在模板中显示帖子：
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open the app, and click on each of the cards. It should take you to their respective
    details page:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 打开应用程序，然后单击每张卡片。它应该带您到它们各自的详细页面：
- en: '![](assets/bdddddc5-5bb8-4bb6-8faf-13ea73664895.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bdddddc5-5bb8-4bb6-8faf-13ea73664895.png)'
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Routing in Angular is important and can be a part of most of your everyday project.
    In such a case, it won't be a completely new concept to you. This is because this
    chapter has taught you some routing basics, building navigation and client routes,
    building a master-child view relationship, by developing a simple blogging system. In
    the next chapter, you will put some of what you have learned to build an app that
    actually uses a real and hosted data.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular 中进行路由设置非常重要，可能是你日常项目的一部分。在这种情况下，这对你来说不会是一个全新的概念。这是因为本章已经教会了你一些路由基础知识，构建导航和客户端路由，通过开发一个简单的博客系统来构建主-子视图关系。在下一章中，您将运用所学的知识来构建一个实际使用真实和托管数据的应用程序。
