- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding Angular Navigation and Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most amazing things about Angular is that it is an entire ecosystem
    (a framework) rather than a library. In this ecosystem, the Angular router is
    one of the most critical blocks to learn about and understand. In this chapter,
    you’ll learn some really cool techniques for routing and navigation in Angular.
    You’ll learn about how to guard your routes, listen to route changes, and configure
    global actions on route changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the recipes we’re going to cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating routes in an Angular (standalone) app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lazily loaded routes in Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preloading route strategies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorized access to routes using route guards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with route parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing a global loader between route changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the recipes in this chapter, ensure your setup is complete as per the ''Technical
    Requirements'' in the ''Angular-Cookbook-2E'' GitHub repository. For setup details,
    visit: [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md).
    The starter code for this chapter is located at [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter07](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter07).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating routes in an Angular (standalone) app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you ask me about how we used to create projects for web applications 7–8
    years ago, you’ll be astonished to learn how difficult it was. Luckily, the tools
    and standards have evolved in the software development industry and, when it comes
    to Angular, starting a project is super easy. With the Angular standalone apps,
    the configuration is much smaller for the application’s bootstrap process and
    for routing. In this recipe, you’re going to implement some routes in a fresh
    Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter07/ng-basic-routing`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab. You should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_07_01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.1: ng-basic-routes app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll configure routing in the app, add some routes, and add the links to those
    routes in the headers. Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a file named `app.routes.ts` inside the `app` folder and add
    the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now update the file `app.config.ts` in the `src` folder with the following
    changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let’s create some components (as pages). We’re going to create a home page
    and an `about` page. Running the following `npx` command in the terminal from
    the `start` folder in the workspace. If asked, you can use the `@nx/angular:component`
    schematics and choose the “As provided” action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should see two new folders created in the `app` folder of the project now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will configure the routes now. Update the `app.routes.ts` file that we created
    in *step 1* as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'All that remains is to hook the routes in the view using `<router-outlet>`
    in the template. Update the `app.component.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: But wait! That crashes the app. That’s because the `AppComponent` doesn’t understand
    routing yet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `app.component.ts` file to add the `RouterModule` in it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And voilà ! You should be able to see the `home` component now, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_07_02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.2: The home component in the ng-basic-routes app'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you look at the URL, it defaults to `http://localhost:4200/home` even if
    you try to go to `https://localhost:4200`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we’ll add the links for the routes in the header. Update `app.component.html`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, if you click the **About** link at the top, you should be able to see
    the `about` route, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_07_03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.3: The about component in the ng-basic-routes app'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Awesome! Within a few minutes, and with the help of Angular router and NX CLI,
    we were able to create a home page and an `about` page, and we configured routing
    as well. The wonders of the modern web!
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how basic routing is implemented, the next section will help
    you to understand how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we create an Angular app without the `--routing` flag, we don’t get the
    `app.routes.ts` file or have the configuration added in the `main.ts` file. For
    this example, we worked with an app that already had this flag set. If you were
    to start a new project, you might as well just use the `--routing` flag while
    creating the app to have routing set up in the app from the start. Then we created
    some standalone components using the `nx g c <component name> –standalone` command.
    If you were using the Angular CLI instead of an NX monorepo, you would just replace
    `nx` with `ng` in the preceding command, and the rest would be the same. Using
    `npx` allows us to use the `nx` package without globally installing it in our
    system. Since we have a standalone app, i.e., the `AppComponent` is a standalone
    component (notice the `standalone: true` in the `app.component.ts` file), we had
    to import the `RouterModule` to it to be able to use the `<router-outlet>` and
    the `routeLink` attribute on the links. We configured the routes by using the
    `provideRouter` function in the `main.ts` file with the routes since we don’t
    have an `AppModule` (because the app is a standalone app).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular router docs: [https://angular.io/guide/router](https://angular.io/guide/router)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular standalone components: [https://angular.io/guide/standalone-components](https://angular.io/guide/standalone-components)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lazily loaded routes in Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we learned how to create a basic routing app with eagerly
    loaded routes. In this recipe, you’ll learn how to work with feature modules to
    lazily load them instead of loading them when the app loads. For this recipe,
    we’ll assume that we already have the routes in place, and we just need to load
    them lazily.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter07/ng-lazy-routing`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab. If you open the **Network**
    tab, you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_07_04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.4: ng-lazy-routing app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let’s see the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As shown in *Figure 7.4*, we have all the components and modules inside the
    `main.js` file. Therefore, the `main.js` file is about 11.9 KB in size (this could
    change depending on how Angular further optimizes the framework). We’ll modify
    the code and the routing structure to achieve lazy loading. As a result, the files
    of the routes will load when we navigate to them. Before the *standalone components*
    era, this step was difficult. And even today, if you work with Angular applications
    using `NgModules`, you will find that it takes a lot more code to set up your
    routing. But since our application has only standalone components, see how easy
    it becomes to change it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `app.routes.ts` to use the `loadComponent` method instead of the
    `component` property in the routes, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Refresh the app and you’ll see that the bundle size for the `main.js` file
    is down to 8.3 KB, which was about 11.9 KB before. See the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_07_05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.5: Reduced size of main.js on app load'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'But what about the `Home` and `About` routes? And what about lazy loading?
    Well, tap the **About** route from the header and you’ll see a new JavaScript
    file being downloaded in the **Network** tab specifically for the route. That’s
    lazy loading in action! See the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_07_06.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.6: about route being lazily loaded'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Awesomesauce! You just became lazy! Just kidding. You just learned the art of
    lazily loading routes and feature components in your Angular app. You can now
    show this off to your friends as well.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular works with modules and components and, usually, the features are broken
    down into either `NgModules`, or with standalone components, the components themselves
    are lazily loaded. We’re going to look into the standalone components perspective.
    As we know, `AppComponent` serves as the entry point for the standalone Angular
    app and Angular will import and bundle anything that is imported in `AppComponent`
    during the build process, resulting in the `main.js` file. However, if we want
    to lazily load our routes/feature components, we need to avoid importing feature
    components in `AppComponent` directly or even importing them in the routes. Instead,
    we can use the `loadChildren` method for lazily loading other modules, or the
    `loadComponent` method to lazily load other standalone components. That’s what
    we did in this recipe. It is important to note that the routes stayed the same
    in the `app.routes.ts` file.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Lazily loading modules in Angular: [https://angular.io/guide/lazy-loading-ngmodules](https://angular.io/guide/lazy-loading-ngmodules)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lazily loading standalone components: [https://angular.io/guide/standalone-components#routing-and-lazy-loading](https://angular.io/guide/standalone-components#routing-and-lazy-loading)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preloading route strategies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re already familiar with how to lazily load different feature modules during
    navigation. Sometimes, though, you might want to preload subsequent routes to
    make the next route navigation instantaneous or might even want to use a custom
    preloading strategy based on your application’s business logic. In this recipe,
    you’ll learn about the `PreloadAllModules` strategy and also implement a custom
    strategy to cherry-pick which modules should be preloaded.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter07/ng-route-preload-strat`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab. If you log in as an admin, you
    should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_07_07.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.7: The ng-route-preload-strat app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open Chrome DevTools by pressing *Ctrl* + *Shift* + *C* on Windows or *Cmd*
    + *Shift* + *C* on Mac.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Network** tab and filter on JavaScript files only. You should
    see something like this:![](img/B18469_07_08.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7.8: JavaScript files loaded on app load'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let’s see the next section for this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Notice in *Figure 7.8* the first network call. It is the JavaScript bundle
    that contains the `admin` component and the `bucket` component. Although the routes
    in `app-routes.t`s are all configured to be lazily loaded, we can still look into
    what happens if we use the `PreloadAllModules` strategy and then a custom preload
    strategy:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re going to try out the `PreloadAllModules` strategy first. To use it, let’s
    modify the `app/app.config.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you refresh the app, you should see all the JavaScript bundles being downloaded
    for all components, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_07_09.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.9: All components being loaded eagerly using PreloadAllModules strategy'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This already provides huge performance benefits because the minimal `app` `shell`
    is loaded first, and then all the other bundles are preloaded in parallel. This
    means that whenever the user navigates to a page now, they will not have to download
    the route’s bundle and navigate right away (i.e., navigation will be faster).
    But what if we wanted to preload only the `admin` module, supposing our app is
    intended for admins mostly? We’ll create a custom preload strategy for that.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s create a service named `CustomPreloadStrategy` by running the following
    command from within the `start` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In order to use our preload strategy service with Angular, our service needs
    to implement the `PreloadingStrategy` interface from the `@angular/router` package.
    Modify the newly created service as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to implement the `preload` method from the `PreloadingStrategy`
    interface for our service to work properly. Let’s modify `CustomPreloadStrategyService`
    to implement the `preload` method, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Right now, our `preload` method returns `of(null)`. Instead, in order to decide
    which routes to preload, we’re going to add an object to our route definitions
    as the `data` object that has a Boolean value for `admin` routes and `employee`
    routes to preload. Let’s modify the `app-routes.ts` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let’s add the logic to our `preload` method in the `AppPreloadStrategyService`
    class to work with the properties added in *step 5*. We’re going to first inject
    the `AuthService` and will create some variables inside the `preload` method.
    Update the `app-preload-strategy.service.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s modify the `preload` method further to work with the `loadForAdmin` and
    `loadForEmployee` route data properties as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final step is to use our custom preloading strategy. In order to do so,
    modify the `app/app.config.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Voilà! If you refresh the app now and monitor the **Network** tab, you’ll notice
    when you’re logged in as `admin`, you can see in the console log that the `admin-campaign`
    route is preloaded, as shown in *Figure 7.10*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_07_10.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.10: Preloading the admin-campaign route when landing on the admin
    route using the custom preload strategy'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also have a look at the **Network** tab to see the bundles being downloaded:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_07_11.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.11: JavaScript bundle for admin-campaign route preloaded'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Try logging out and logging in as an employee. You’ll see the `employee-campaign`
    route being preloaded. Not only that, if you refresh the employee-campaign route,
    you’ll see the `employee` route being preloaded as well. The same goes for the
    admin-campaign and `admin` routes.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve finished the recipe, see the next section on how this works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular provides a great way to implement our own custom preloading strategy
    for our feature modules. We can decide easily which modules should be preloaded
    and which should not. In the recipe, we learned a very simple way to configure
    the preloading using the `data` object of the routes configuration by adding properties
    named `loadForAdmin` and `loadForEmployee`. We created our own custom preloading
    strategy service named `AppPreloadStrategyService`, which implements the `PreloadingStrategy`
    interface from the `@angular/router` package. The `PreloadingStrategy` class provides
    a method named `preload`, which has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The argument named `load` is a method from the Angular router that allows us
    to load the component/module by calling it. As a result, it provides an observable.
    Since the `preload` method must return an observable, we return `of(null)` when
    we do not want to preload a route, or we return `load` (which returns an observable)
    when we want to load the component associated with the route. The target in general
    is to have a custom preloading strategy that uses the `preload` method to decide
    whether a route should be preloaded. That is because Angular goes through each
    route using our custom preloading strategy and lets us decide which routes to
    preload. And that is it. We can see if the logged-in user is `admin` and has the
    `loadForAdmin` property in the route’s data, or if the logged-in user is an employee
    and has the `loadForEmployee` property in the route’s data. We then preload the
    route. Otherwise, we don’t. And there’s no preloading when the user is not logged
    in.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Route preloading strategies article on `web.dev`: [https://web.dev/route-preloading-in-angular/](https://web.dev/route-preloading-in-angular/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Route preloading strategies in Angular: [https://www.youtube.com/watch?v=RQGLcMnh9k8](https://www.youtube.com/watch?v=RQGLcMnh9k8)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorized access to routes using route guards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not all routes in your Angular app should be accessible to everyone in the world.
    In this recipe, we’ll learn how to create route guards in Angular to prevent unauthorized
    access to routes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter07/ng-route-guards`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab. You should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_07_12.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.12: ng-route-guards app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let’s see the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have an app with a couple of routes already set up. You can log in as either
    an employee or an admin to get to the bucket list of the app. However, if you
    tap any of the two buttons in the header, you’ll see that you can navigate to
    the **Admin** and **Employee** sections even without being logged in. This is
    what we want to prevent from happening. Notice in the `auth.service.ts` file that
    we already have a way for the user to log in, and we can check whether the user
    is logged in or not using the `isLoggedIn` method:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s create a route guard that will only allow the user to go to the
    particular routes if the user is logged in. We’ll name it `AuthGuard`. Let’s create
    a new file inside the `auth` folder and name it `auth.guards.ts`. Then add the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can add this guard to the routes. Update `app.routes.ts` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you try to go to the Admin or Employee pages without being logged in now,
    you’ll see you are not able to do that anymore thanks to the route guard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s make sure we can’t go to the `auth` page if we’re already logged in.
    Add a function guard in the `auth.guards.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you log in, and then click the browser’s **Back** button, you’ll see you
    can’t go back to the `/auth` page either. Even if you open a new tab and go to
    `http://localhost:4200`, you’ll see that it takes you to the correct page based
    on the logged-in user’s type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Great! You now are an authorization expert when it comes to guarding routes.
    With great power comes great responsibility. Use it wisely.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular has switched to functional route guards since Angular v14.2\. This makes
    it much easier to configure the routes compared to the previous version. There
    are many route guards, such as `CanActivate`, `CanDeactivate`, and `CanActivateChildren`.
    The `provideRouter` function used in `main.ts` makes it possible for us to provide
    the routes with functional route guards. A route can take the guards as an array
    against the guard property name. You can see how we provided our `canActivateAdminOrEmployee`
    guard against both the `/employee` and `/admin` routes in *step 2*. A functional
    guard is supposed to return a Boolean value or a `UrlTree`, a **promise** of Boolean
    or `UrlTree`, or an observable of Boolean or `UrlTree`. We’ve focused on the Boolean
    value’s usage in our recipe. In the `canActivateAdminOrEmployee` guard, we check
    if the user is logged in. If that’s true, we allow the route to be activated (i.e.,
    we allow the routing to happen), or we navigate to the `/auth` route. In the `canActivateLogin`
    guard, we do something a bit more complex. Since someone could land on the home
    page (the route is `/`, which redirects to `/auth`), we have to first check if
    the user is logged in, and if that’s the case, then which type of user this is.
    Based on evaluation, we route the user to either the `/employee` or `/admin` route.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Preventing unauthorized access in Angular routes: [https://angular.io/guide/router#preventing-unauthorized-access](https://angular.io/guide/router#preventing-unauthorized-access)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular `CanActivateFn` docs: [https://angular.io/api/router/CanActivateFn](https://angular.io/api/router/CanActivateFn
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with route parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether it is about building a REST API using Node.js or configuring routes
    in Angular, setting up routes is an absolute art, especially when it comes to
    working with parameters. In this recipe, you’ll create some routes with parameters
    and will learn how to get those parameters in your components once the route is
    active.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter07/ng-route-params`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab. You should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_07_13.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.13: The ng-route-params app running on localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let’s see the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The problem right now is that we have a route for opening the user details,
    but we don’t see anything, i.e., we have a blank page. That’s because this route
    doesn’t have any idea about which user to show. Wouldn’t it be nice to have a
    way to pass the clicked user’s information from the users list page to the user
    detail page? That’s exactly what we’re going to do in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to make our user route capable of accepting the `route` parameter.
    This is going to be a `required` parameter, which means the route will not work
    without passing this. Let’s modify `app.routes.ts` to add this required parameter
    to the route definition, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We’ll now update the `src/app/components/users-list/users-list.component.html`
    file to change the links to use the `uuid` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We’re now able to navigate to a particular user’s route using the `uuid`, and
    you should also be able to see it in the address bar as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_07_14.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.14: The UUID being shown in the address bar'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To get the user from `UserService` based on the `uuid`, we need to get the
    `uuid` value in `UserDetailsComponent` from the route parameters. Let’s update
    the `user-details.component.ts` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should be able to see the user we clicked from the `/users` page now. The
    only thing remaining is showing similar users.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Instead of creating another subscription, we can tap into the one we created
    in the previous step using the `tap` operator from RxJS. Update the `user-details.component.ts`
    file further, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And boom, you should be able to see both the clicked user and similar users,
    as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_07_15.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.15: The UUID being shown in the address bar'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Great! With this change, you can try refreshing the app on the home page and
    then click any user. You should see the current user as well as similar users
    being loaded. To understand all the magic behind the recipe, see the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It all begins when we change our route’s path to `user/:userId`. This makes
    `userId` a parameter for our route. The other piece of the puzzle is to retrieve
    this parameter in `UserDetailsComponent` and then use it to get the target user,
    as well as similar users. For that, we use the `ActivatedRoute` service. The `ActivatedRoute`
    service holds a lot of necessary information about the current route and, therefore,
    we were able to fetch the current route’s `uuid` parameter by subscribing to the
    `paramMap` observable, so even if the parameter changes while staying on a user’s
    page, we still execute the necessary operations. The `ActivatedRoute` also has
    a `queryParamMap` observable, but it works for query parameters instead of route
    parameters. And if you don’t want to subscribe to the `paramMap` observable and
    just want the value to appear once inside `ngOnInit` or in the constructor, you
    can also use the `snapshot` property on the `ActivatedRoute` object as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Notice that with the `paramMap` observable, we also use the `tap` operator to
    do something extra. That is assigning the value of similar users to the desired
    observable. Since both of the observables are only used in the template with the
    `async` pipe, there is no need to unsubscribe them ourselves as Angular takes
    care of it. Also, if you re-assign a new observable to a property being used by
    the `async` pipe, it automatically subscribes to the new one and cancels the previous
    subscription.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you can also provide resolved values from the route definition directly
    to the component as `@Input()` properties using the `bindToComponentInputs` or
    `withComponentInputBinding` properties introduced in v16 for the Angular Router
    for Angular modules and standalone components, respectively. See the next section
    for relevant links including an article explaining the use of `withComponentInputBinding`
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Accessing* *query parameters and fragments*: [https://angular.io/guide/router#accessing-query-parameters-and-fragments](https://angular.io/guide/router#accessing-query-parameters-and-fragments)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Getting route* *information* – Angular docs: [https://angular.io/guide/router#getting-route-information](https://angular.io/guide/router#getting-route-information)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bind Route Info* *to Component Inputs (New Router feature)*: [https://itnext.io/bind-route-info-to-component-inputs-new-router-feature-1d747e559dc4](https://itnext.io/bind-route-info-to-component-inputs-new-router-feature-1d747e559dc4)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing a global loader between route changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building user interfaces that are snappy and fast is key to winning users. The
    apps become much more enjoyable for the end users, and it could bring a lot of
    value to the owners/creators of the apps. One of the core experiences on the modern
    web is to show a loader when something is happening in the background. In this
    recipe, you’ll learn how to create a global user interface loader in your Angular
    app that shows whenever there is a route transition in the app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter07/ng-global-loader`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_07_16.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.16: ng-global-loader app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let’s see the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you try logging in or logging out, you’ll see that it takes a while before
    the route changes. We’re simulating a delay in route change manually in the `canActivateLogin`
    route guard in the `start/apps/chapter07/ng-global-loader/src/app/auth/auth.guard.ts`
    file, which uses the `delay` operator from RxJS in an observable chain before
    checking if the user is logged in, and the type of user. The intention is to simulate
    the use cases where you need to route based on an HTTP call. In this recipe, we
    have the `LoaderComponent` already created, which we must use during the route
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll begin by adding a new property in the `app.component.ts` that says `isRouting`.
    We’ll initialize it as `true` for now. We’ll also import the `LoaderComponent`
    class in the `AppComponent` class’s `imports` so we can use it in the template.
    Update the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we’ll add the loader in the `app.component.html` to show it conditionally,
    and we’ll wrap the entire app content in another variable. Update the file as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should be able to see the loader consistently on the screen now, on every
    route. However, we want to make it work with the Angular Router.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We’ll now update the `app.component.ts` file to listen to the router service’s
    `events` property, and take an action upon the `NavigationStart` event. Modify
    the code in the `app.component.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you refresh the app, you’ll notice that `<app-loader>` still never goes away.
    That’s because we’re not marking the `isRouting` property as `false` anywhere.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To mark `isRouting` as `false`, we need to check for three different events:
    `NavigationEnd`, `NavigationError`, and `NavigationCancel`. Let’s add some more
    logic to handle these three events and mark the property as `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We now have a global loader that shows during the route navigation among different
    pages.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Congrats on finishing the recipe. You now can implement a global loader in Angular
    apps, which will show from the navigation start to the navigation end.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The router service is a very powerful service in Angular. It has a lot of methods
    as well as observables that we can use for different tasks in our apps. For this
    recipe, we used the `events` observable. By subscribing to the `events` observable,
    we can listen to all the events that the `Router` service emits through the observable.
    One of the most common use cases for this (especially being a **Single-Page Application**
    (**SPA**)) is tracking page visits with Google Analytics or Mixpanel. For this
    recipe, we were only interested in the `NavigationStart`, `NavigationEnd`, `NavigationError`,
    and `NavigationCancel` events. The `NavigationStart` event is emitted when the
    router starts navigation. The `NavigationEnd` event is emitted when the navigation
    ends successfully. The `NavigationCancel` event is emitted when the navigation
    is canceled due to a route guard returning `false`, or redirects by using `UrlTree`
    due to some reason. The `NavigationError` event is emitted when there’s an error
    due to any reason during the navigation. All of these events are of the `Event`
    type and we can identify the type of the event by checking whether it is an instance
    of the target event, using the `instanceof` keyword. Notice that since we had
    the subscription to the `Router.events` property in `AppComponent`, we didn’t
    have to worry about unsubscribing the subscription because there’s only one subscription
    in the app, and `AppComponent` will not be destroyed throughout the life cycle
    of the app.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Router events docs: [https://angular.io/guide/router#router-events](https://angular.io/guide/router#router-events)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Router service docs: [https://angular.io/api/router/Router](https://angular.io/api/router/Router)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/AngularCookbook2e](Chapter_7.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code1388317275422265.png)'
  prefs: []
  type: TYPE_IMG
