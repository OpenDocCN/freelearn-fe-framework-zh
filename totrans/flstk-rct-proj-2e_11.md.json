["```js\n<AddToCart cartStyle={classes.addCart} item={product}/>\n```", "```js\n{ props.item.quantity >= 0 ?\n     <IconButton color=\"secondary\" dense=\"dense\" onClick={addToCart}>\n        <AddCartIcon className={props.cartStyle || classes.iconButton}/>\n     </IconButton> :\n     <IconButton disabled={true} color=\"secondary\" dense=\"dense\">\n        <DisabledCartIcon className={props.cartStyle || classes.disabledIconButton}/>\n     </IconButton>\n}\n```", "```js\nconst addToCart = () => {\n   cart.addItem(props.item, () => {\n     setRedirect({redirect:true})\n   })\n}\n```", "```js\naddItem(item, cb) {\n    let cart = []\n    if (typeof window !== \"undefined\") {\n      if (localStorage.getItem('cart')) {\n        cart = JSON.parse(localStorage.getItem('cart'))\n      }\n      cart.push({\n        product: item,\n        quantity: 1,\n        shop: item.shop._id\n      })\n      localStorage.setItem('cart', JSON.stringify(cart))\n      cb()\n    }\n}\n```", "```js\n<Link to=\"/cart\">\n    <Button color={isActive(history, \"/cart\")}>\n       Cart\n       <Badge invisible={false} color=\"secondary\" \n             badgeContent= {cart.itemTotal()}>\n           <CartIcon />\n       </Badge>\n    </Button>\n</Link>\n```", "```js\nitemTotal() {\n    if (typeof window !== \"undefined\") {\n      if (localStorage.getItem('cart')) {\n        return JSON.parse(localStorage.getItem('cart')).length\n      }\n    }\n    return 0\n}\n```", "```js\n<Grid container spacing={24}>\n      <Grid item xs={6} sm={6}>\n            <CartItems checkout={checkout}\n setCheckout={showCheckout}/>\n      </Grid>\n {checkout && \n      <Grid item xs={6} sm={6}>\n        <Checkout/>\n      </Grid>}\n</Grid>\n```", "```js\nconst showCheckout = val => {\n    setCheckout(val)\n}\n```", "```js\n<Route path=\"/cart\" component={Cart}/>\n```", "```js\n{cartItems.length > 0 ? <span>\n      {cartItems.map((item, i) => {\n          ...          \n            … Display product details\n              … Edit quantity\n              … Remove product option\n          ...\n        })\n      }\n     … Show total price and Checkout options … \n    </span> : \n    <Typography variant=\"subtitle1\" component=\"h3\" color=\"primary\">\n        No items added to your cart.    \n    </Typography>\n}\n```", "```js\ngetCart() {\n    if (typeof window !== \"undefined\") {\n      if (localStorage.getItem('cart')) {\n        return JSON.parse(localStorage.getItem('cart'))\n      }\n    }\n    return []\n}\n```", "```js\nconst [cartItems, setCartItems] = useState(cart.getCart())\n```", "```js\n<span key={i}>\n  <Card>\n    <CardMedia image={'/api/product/image/'+item.product._id}\n         title={item.product.name}/>\n         <CardContent>\n                <Link to={'/product/'+item.product._id}>\n                    <Typography type=\"title\" component=\"h3\" \n                    color=\"primary\">\n                      {item.product.name}</Typography>\n                </Link>\n                <Typography type=\"subheading\" component=\"h3\" \n               color=\"primary\">\n                      $ {item.product.price}\n                </Typography>\n                <span>${item.product.price * item.quantity}</span>\n                <span>Shop: {item.product.shop.name}</span>\n         </CardContent>\n         <div>\n          … Editable quantity …\n          … Remove item option ...\n         </div>\n  </Card>\n  <Divider/>\n</span> \n```", "```js\nQuantity: <TextField\n          value={item.quantity}\n          onChange={handleChange(i)}\n          type=\"number\"\n          inputProps={{ min:1 }}\n          InputLabelProps={{\n            shrink: true,\n          }}\n        />\n```", "```js\nconst handleChange = index => event => {\n  let updatedCartItems = cartItems\n  if(event.target.value == 0){\n     updatedCartItems[index].quantity = 1\n  }else{\n     updatedCartItems[index].quantity = event.target.value\n  }\n  setCartItems([...updatedCartItems])\n  cart.updateCart(index, event.target.value)\n}\n```", "```js\nupdateCart(itemIndex, quantity) {\n    let cart = []\n    if (typeof window !== \"undefined\") {\n      if (localStorage.getItem('cart')) {\n        cart = JSON.parse(localStorage.getItem('cart'))\n      }\n      cart[itemIndex].quantity = quantity\n      localStorage.setItem('cart', JSON.stringify(cart))\n    }\n}\n```", "```js\n<Button color=\"primary\" onClick={removeItem(i)}>x Remove</Button>\n```", "```js\nconst removeItem = index => event =>{\n    let updatedCartItems = cart.removeItem(index)\n    if(updatedCartItems.length == 0){\n      props.setCheckout(false)\n    }\n    setCartItems(updatedCartItems)\n}\n```", "```js\nremoveItem(itemIndex) {\n    let cart = []\n    if (typeof window !== \"undefined\") {\n      if (localStorage.getItem('cart')) {\n        cart = JSON.parse(localStorage.getItem('cart'))\n      }\n      cart.splice(itemIndex, 1)\n      localStorage.setItem('cart', JSON.stringify(cart))\n    }\n    return cart\n}\n```", "```js\n<span className={classes.total}>Total: ${getTotal()}</span>\n```", "```js\nconst getTotal = () => {\n    return cartItems.reduce((a, b) => {\n        return a + (b.quantity*b.product.price)\n    }, 0)\n}\n```", "```js\n{!props.checkout && (auth.isAuthenticated() ? \n    <Button onClick={openCheckout}>\n        Checkout\n    </Button> : \n    <Link to=\"/signin\">\n        <Button>Sign in to checkout</Button>\n    </Link>)\n}\n```", "```js\nconst openCheckout = () => {\n    props.setCheckout(true)\n}\n```", "```js\nstripe_seller: {}\n```", "```js\n{user.seller && (user.stripe_seller ? \n    (<Button variant=\"contained\" disabled className={classes.stripe_connected}>\n                Stripe connected\n     </Button>)\n  : (<a href={\"https://connect.stripe.com/oauth/authorize?                                 response_type=code&client_id=\"                                                                                   +config.stripe_connect_test_client_id+\"&scope=read_write\"} \n     className={classes.stripe_connect}>\n    <img src={stripeButton}/>\n     </a>)\n  )\n}  \n```", "```js\n<Route path=\"/seller/stripe/connect\" component={StripeConnect}/>\n```", "```js\n  useEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n    const jwt = auth.isAuthenticated()\n    const parsed = queryString.parse(props.location.search)\n    if(parsed.error){\n      setValues({...values, error: true})\n    }\n    if(parsed.code){\n      setValues({...values, connecting: true, error: false})\n      //post call to stripe, get credentials and update user data\n      stripeUpdate({\n        userId: jwt.user._id\n      }, {\n        t: jwt.token\n      }, parsed.code, signal).then((data) => {\n        if (data.error) {\n          setValues({...values, error: true, connected: false,\n             connecting: false})\n        } else {\n          setValues({...values, connected: true, \n             connecting: false, error: false})\n        }\n      })\n    }\n    return function cleanup(){\n      abortController.abort()\n    }\n  }, [])\n```", "```js\nconst stripeUpdate = async (params, credentials, auth_code, signal) => {\n  try {\n    let response = await fetch ('/api/stripe_auth/'+params.userId, {\n      method: 'PUT',\n      signal: signal,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify({stripe: auth_code})\n    })\n    return await response.json()\n  } catch(err) {\n    console.log(err)\n  }\n}\n```", "```js\nrouter.route('/api/stripe_auth/:userId')\n   .put(authCtrl.requireSignin, authCtrl.hasAuthorization,   \n    userCtrl.stripe_auth, userCtrl.update)\n```", "```js\nyarn add request \n```", "```js\nconst stripe_auth = (req, res, next) => {\n  request({\n    url: \"https://connect.stripe.com/oauth/token\",\n    method: \"POST\",\n    json: true,\n    body: { client_secret:config.stripe_test_secret_key,                                                               \n            code:req.body.stripe, \n            grant_type:'authorization_code'}\n  }, (error, response, body) => {\n    if(body.error){\n      return res.status('400').json({\n        error: body.error_description\n      })\n    }\n    req.body.stripe_seller = body\n    next()\n  })\n}\n```", "```js\nyarn add react-stripe-elements\n```", "```js\n<script id=\"stripe-js\" src=\"img/\"></script>\n```", "```js\n<StripeProvider apiKey={config.stripe_test_api_key}> \n     <Checkout/>\n</StripeProvider>\n```", "```js\nstripe_customer: {},\n```", "```js\nyarn add stripe \n```", "```js\nimport stripe from 'stripe'\nconst myStripe = stripe(config.stripe_test_secret_key)\n```", "```js\nmyStripe.customers.create({\n            email: req.profile.email,\n            source: req.body.token\n      }).then((customer) => {\n          User.update({'_id':req.profile._id},\n            {'$set': { 'stripe_customer': customer.id }},\n            (err, order) => {\n              if (err) {\n                return res.status(400).send({\n                  error: errorHandler.getErrorMessage(err)\n                })\n              }\n              req.body.order.payment_id = customer.id\n              next()\n        })\n})\n```", "```js\n myStripe.customers.update(req.profile.stripe_customer, {\n       source: req.body.token\n     }, \n       (err, customer) => {\n         if(err){\n           return res.status(400).send({\n             error: \"Could not update charge details\"\n           })\n         }\n         req.body.order.payment_id = customer.id\n         next()\n       })\n```", "```js\nconst createCharge = (req, res, next) => {\n  if(!req.profile.stripe_seller){\n    return res.status('400').json({\n      error: \"Please connect your Stripe account\"\n    })\n  }\n  myStripe.tokens.create({\n    customer: req.order.payment_id,\n  }, {\n    stripeAccount: req.profile.stripe_seller.stripe_user_id,\n  }).then((token) => {\n      myStripe.charges.create({\n        amount: req.body.amount * 100, //amount in cents\n        currency: \"usd\",\n        source: token.id,\n      }, {\n        stripeAccount: req.profile.stripe_seller.stripe_user_id,\n      }).then((charge) => {\n        next()\n      })\n  })\n}\n```", "```js\n const user = auth.isAuthenticated().user\n const [values, setValues] = useState({\n    checkoutDetails: {\n      products: cart.getCart(),\n      customer_name: user.name,\n      customer_email:user.email,\n      delivery_address: { street: '', city: '', state: '', \n          zipcode: '', country:''}\n    },\n    error: ''\n})\n```", "```js\n<TextField id=\"name\" label=\"Name\" value={values.checkoutDetails.customer_name} onChange={handleCustomerChange('customer_name')}/>\n<TextField id=\"email\" type=\"email\" label=\"Email\" value={values.checkoutDetails.customer_email} onChange={handleCustomerChange('customer_email')}/><br/>  \n```", "```js\nconst handleCustomerChange = name => event => {\n    let checkoutDetails = values.checkoutDetails\n    checkoutDetails[name] = event.target.value || undefined\n    setValues({...values, checkoutDetails: checkoutDetails})\n}\n```", "```js\n<TextField id=\"street\" label=\"Street Address\" value=          {values.checkoutDetails.delivery_address.street} onChange={handleAddressChange('street')}/>\n<TextField id=\"city\" label=\"City\" value={values.checkoutDetails.delivery_address.city} onChange={handleAddressChange('city')}/>\n<TextField id=\"state\" label=\"State\" value={values.checkoutDetails.delivery_address.state} onChange={handleAddressChange('state')}/>\n<TextField id=\"zipcode\" label=\"Zip Code\" value={values.checkoutDetails.delivery_address.zipcode} onChange={handleAddressChange('zipcode')}/>\n<TextField id=\"country\" label=\"Country\" value={values.checkoutDetails.delivery_address.country} onChange={handleAddressChange('country')}/> \n```", "```js\nconst handleAddressChange = name => event => {\n    let checkoutDetails = values.checkoutDetails\n    checkoutDetails.delivery_address[name] = \n          event.target.value || undefined\n    setValues({...values, checkoutDetails: checkoutDetails})\n}\n```", "```js\nconst PlaceOrder = (props) => { … } \nPlaceOrder.propTypes = {\n  checkoutDetails: PropTypes.object.isRequired\n}\nexport default injectStripe(PlaceOrder)\n```", "```js\n<Elements> <PlaceOrder checkoutDetails={values.checkoutDetails} /> </Elements>\n```", "```js\n<CardElement className={classes.StripeElement}\n      {...{style: {\n      base: {\n        color: '#424770',\n        letterSpacing: '0.025em',\n        '::placeholder': {\n          color: '#aab7c4',\n        },\n      },\n      invalid: {\n        color: '#9e2146',\n      },\n    }}}/>\n```", "```js\n<Button color=\"secondary\" variant=\"raised\" onClick={placeOrder}>Place Order</Button>\n```", "```js\nconst placeOrder = ()=>{\n    props.stripe.createToken().then(payload => {\n      if(payload.error){\n        setValues({...values, error: payload.error.message})\n      }else{\n        const jwt = auth.isAuthenticated()\n        create({userId:jwt.user._id}, {\n          t: jwt.token\n        }, props.checkoutDetails, payload.token.id).then((data) => {\n          if (data.error) {\n            setValues({...values, error: data.error})\n          } else {\n            cart.emptyCart(()=> {\n              setValues({...values, 'orderId':data._id,'redirect': true})\n            })\n          }\n        })\n      }\n  })\n}\n```", "```js\nemptyCart(cb) {\n  if(typeof window !== \"undefined\"){\n     localStorage.removeItem('cart')\n     cb()\n  }\n}\n```", "```js\nif (values.redirect) {\n      return (<Redirect to={'/order/' + values.orderId}/>)\n}\n```", "```js\ncustomer_name: { type: String,  trim: true, required: 'Name is required' },\ncustomer_email: { type: String, trim: true,\n    match: [/.+\\@.+\\..+/, 'Please fill a valid email address'],\n    required: 'Email is required' }\n```", "```js\nordered_by: {type: mongoose.Schema.ObjectId, ref: 'User'}\n```", "```js\ndelivery_address: {\n    street: {type: String, required: 'Street is required'},\n    city: {type: String, required: 'City is required'},\n    state: {type: String},\n    zipcode: {type: String, required: 'Zip Code is required'},\n    country: {type: String, required: 'Country is required'}\n  },\n```", "```js\npayment_id: {},\n```", "```js\nproducts: [CartItemSchema],\n```", "```js\nconst CartItemSchema = new mongoose.Schema({\n  product: {type: mongoose.Schema.ObjectId, ref: 'Product'},\n  quantity: Number,\n  shop: {type: mongoose.Schema.ObjectId, ref: 'Shop'},\n  status: {type: String,\n    default: 'Not processed',\n    enum: ['Not processed' , 'Processing', 'Shipped', 'Delivered', \n   'Cancelled']}\n}) \nconst CartItem = mongoose.model('CartItem', CartItemSchema)\n```", "```js\napp.use('/', orderRoutes)\n```", "```js\nrouter.route('/api/orders/:userId') \n    .post(authCtrl.requireSignin, userCtrl.stripeCustomer, \n          productCtrl.decreaseQuantity, orderCtrl.create)\n```", "```js\nrouter.param('userId', userCtrl.userByID)\n```", "```js\nconst decreaseQuantity = async (req, res, next) => {\n  let bulkOps = req.body.order.products.map((item) => {\n    return {\n        \"updateOne\": {\n            \"filter\": { \"_id\": item.product._id } ,\n            \"update\": { \"$inc\": {\"quantity\": -item.quantity} }\n        }\n    }\n   })\n   try {\n     await Product.bulkWrite(bulkOps, {})\n     next()\n   } catch (err){\n      return res.status(400).json({\n        error: \"Could not update product\"\n      })\n   }\n}\n```", "```js\nconst create = async (req, res) => {\n  try {\n    req.body.order.user = req.profile\n    let order = new Order(req.body.order)\n    let result = await order.save()\n    res.status(200).json(result)\n  } catch (err){\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nrouter.route('/api/orders/shop/:shopId') \n    .get(authCtrl.requireSignin, shopCtrl.isOwner, orderCtrl.listByShop)\nrouter.param('shopId', shopCtrl.shopByID)\n```", "```js\nconst listByShop = async (req, res) => {\n  try {\n    let orders = await Order.find({\"products.shop\": req.shop._id})\n      .populate({path: 'products.product', select: '_id name price'})\n      .sort('-created')\n      .exec()\n    res.json(orders)\n  } catch (err){\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\n<PrivateRoute path=\"/seller/orders/:shop/:shopId\" component={ShopOrders}/>\n```", "```js\nuseEffect(() => {\n  const jwt = auth.isAuthenticated()\n  const abortController = new AbortController()\n  const signal = abortController.signal\n  listByShop({\n    shopId: match.params.shopId\n  }, {t: jwt.token}, signal).then((data) => {\n     if (data.error) {\n       console.log(data)\n     } else {\n       setOrders(data)\n     }\n  })\n    return function cleanup(){\n       abortController.abort()\n    }\n}, [])\n```", "```js\n<Typography type=\"title\"> Orders in {match.params.shop} </Typography>\n<List dense> {orders.map((order, index) => { return \n    <span key={index}>\n        <ListItem button onClick={handleClick(index)}>\n           <ListItemText primary={'Order # '+order._id} \n                 secondary={(new Date(order.created)).toDateString()}/>\n           {open == index ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse component=\"li\" in={open == index} \n       timeout=\"auto\" unmountOnExit>\n           <ProductOrderEdit shopId={match.params.shopId} \n           order={order} orderIndex={index} \n           updateOrders={updateOrders}/>\n           <Typography type=\"subheading\"> Deliver to:</Typography>\n           <Typography type=\"subheading\" color=\"primary\">\n               {order.customer_name} ({order.customer_email})\n          </Typography>\n           <Typography type=\"subheading\" color=\"primary\">\n               {order.delivery_address.street}</Typography>\n           <Typography type=\"subheading\" color=\"primary\">\n               {order.delivery_address.city}, \n           {order.delivery_address.state}\n               {order.delivery_address.zipcode}</Typography>\n           <Typography type=\"subheading\" color=\"primary\">\n               {order.delivery_address.country}</Typography>\n        </Collapse>\n    </span>})}\n</List>\n```", "```js\n  const updateOrders = (index, updatedOrder) => {\n    let updatedOrders = orders\n    updatedOrders[index] = updatedOrder\n    setOrders([...updatedOrders])\n  }\n```", "```js\n{props.order.products.map((item, index) => { return <span key={index}> \n     { item.shop == props.shopId && \n          <ListItem button>\n              <ListItemText primary={ <div>\n                     <img src=\n                    {'/api/product/image/'+item.product._id}/> \n                     {item.product.name}\n                     <p>{\"Quantity: \"+item.quantity}</p>\n              </div>}/>\n              <TextField id=\"select-status\" select\n                   label=\"Update Status\" value={item.status}\n                   onChange={handleStatusChange(index)}\n                   SelectProps={{\n                       MenuProps: { className: classes.menu },\n                   }}>\n                      {statusValues.map(option => (\n                          <MenuItem key={option} value={option}>\n                            {option}\n                          </MenuItem>\n                      ))}\n              </TextField>\n          </ListItem>}\n```", "```js\n  useEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n    getStatusValues(signal).then((data) => {\n      if (data.error) {\n        setValues({...values, error: \"Could not get status\"})\n      } else {\n        setValues({...values, statusValues: data, error: ''})\n      }\n    })\n    return function cleanup(){\n      abortController.abort()\n    }\n  }, [])\n```", "```js\nconst handleStatusChange = productIndex => event => {\n    let order = props.order\n    order.products[productIndex].status = event.target.value\n    let product = order.products[productIndex]\n\n    if (event.target.value == \"Cancelled\") {\n      // 1\\. ... call the cancel product API ..\n    } else if (event.target.value == \"Processing\") {\n      // 2\\. ... call the process charge API ...\n    } else {\n      // 3\\. ... call the order update API ...\n  }\n```", "```js\ncancelProduct({\n          shopId: props.shopId,\n          productId: product.product._id\n        }, {\n          t: jwt.token\n        }, {\n          cartItemId: product._id,\n          status: event.target.value,\n          quantity: product.quantity\n        })\n        .then((data) => {\n          if (data.error) {\n            setValues({\n              ...values,\n              error: \"Status not updated, try again\"\n            })\n          } else {\n            props.updateOrders(props.orderIndex, order)\n            setValues({\n              ...values,\n              error: ''\n            })\n          }\n        })\n```", "```js\nprocessCharge({\n          userId: jwt.user._id,\n          shopId: props.shopId,\n          orderId: order._id\n        }, {\n          t: jwt.token\n        }, {\n          cartItemId: product._id,\n          status: event.target.value,\n          amount: (product.quantity * product.product.price)\n        })\n        .then((data) => {\n          if (data.error) {\n            setValues({\n              ...values,\n              error: \"Status not updated, try again\"\n            })\n          } else {\n            props.updateOrders(props.orderIndex, order)\n            setValues({\n              ...values,\n              error: ''\n            })\n          }\n        })\n```", "```js\nupdate({\n          shopId: props.shopId\n        }, {\n          t: jwt.token\n        }, {\n          cartItemId: product._id,\n          status: event.target.value\n        })\n        .then((data) => {\n          if (data.error) {\n            setValues({\n              ...values,\n              error: \"Status not updated, try again\"\n            })\n          } else {\n            props.updateOrders(props.orderIndex, order)\n            setValues({\n              ...values,\n              error: ''\n            })\n          }\n      })\n```", "```js\nrouter.route('/api/order/status_values')\n    .get(orderCtrl.getStatusValues)\n```", "```js\nconst getStatusValues = (req, res) => {\n  res.json(CartItem.schema.path('status').enumValues)\n}\n```", "```js\nrouter.route('/api/order/status/:shopId')\n    .put(authCtrl.requireSignin, shopCtrl.isOwner, orderCtrl.update)\n```", "```js\nconst update = async (req, res) => {\n  try {\n    let order = await Order.updateOne({'products._id': req.body.cartItemId}, {\n        'products.$.status': req.body.status\n    })\n      res.json(order)\n  } catch (err){\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst update = async (params, credentials, product) => {\n  try {\n    let response = await fetch('/api/order/status/' + params.shopId, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify(product)\n    })\n    return response.json()\n  } catch(err){\n    console.log(err)\n  }\n}\n```", "```js\nrouter.route('/api/order/:shopId/cancel/:productId')\n       .put(authCtrl.requireSignin, shopCtrl.isOwner,\n            productCtrl.increaseQuantity, orderCtrl.update)\nrouter.param('productId', productCtrl.productByID)\n```", "```js\nconst increaseQuantity = async (req, res, next) => {\n  try {\n    await Product.findByIdAndUpdate(req.product._id, \n       {$inc: {\"quantity\": req.body.quantity}}, {new: true})\n    .exec()\n      next()\n  } catch (err){\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst cancelProduct = async (params, credentials, product) => {\n  try {\n    let response = await fetch('/api/order/'+params.shopId+'/cancel/'+params.productId, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify(product)\n    })\n    return response.json()\n  }catch(err){\n    console.log(err)\n  }\n}\n```", "```js\nrouter.route('/api/order/:orderId/charge/:userId/:shopId')\n            .put(authCtrl.requireSignin, shopCtrl.isOwner,     \n            userCtrl.createCharge, orderCtrl.update)\nrouter.param('orderId', orderCtrl.orderByID)\n```", "```js\nconst orderByID = async (req, res, next, id) => {\n  try {\n    let order = await Order.findById(id)\n                .populate('products.product', 'name price')\n                .populate('products.shop', 'name').exec()\n    if (!order)\n      return res.status('400').json({\n        error: \"Order not found\"\n      })\n    req.order = order\n    next()\n  } catch (err){\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst processCharge = async (params, credentials, product) => {\n  try {\n    let response = await  fetch('/api/order/'+params.orderId+\n        '/charge/'+params.userId+'/'+params.shopId, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify(product)\n    })\n    return response.json()\n  } catch(err) {\n    console.log(err)\n  }\n}\n```"]