["```js\n<button\n        onClick={handleLikeVote}\n        disabled={hasVoted}\n        style={clickedLike ? { background: 'green' } : null}\n      >\n        <img src={thumbsUp} alt=\"thumbs up\" />\n      </button>\n      <div>{totalLikes}</div>\n      <button\n        onClick={handleDislikeVote}\n        disabled={hasVoted}\n        style={clickedDislike ? { background: 'red' } : null}\n      >\n        <img src={thumbsDown} alt=\"thumbs down\" />\n      </button>\n```", "```js\nconst VoteBtn = props => {\n  return (\n    <button onClick={props.handleVote} disabled={props.       hasVoted}>\n      <img src={props.imgSrc} alt={props.altText} />\n    </button>\n  )\n}\n```", "```js\nreturn (\n    <div className=\"h1\">\n      <h5>Note: You are not allowed to change your vote once          selected!</h5>\n      <VoteBtn\n        handleVote={handleVoteLike}\n        hasVoted={hasVoted}\n        imgSrc={thumbsUp}\n        altText=\"thumbs up\"\n      />\n      <div>{totalLikes}</div>\n      <VoteBtn\n        handleVote={handleVoteDislike}\n        hasVoted={hasVoted}\n        imgSrc={thumbsDown}\n        altText=\"thumbs down\"\n      />\n    </div>\n  )\n```", "```js\n  test('given \"up\" vote, total likes increases by one', () => {\n    render(<Vote totalGlobalLikes={10} />)\n    user.click(screen.getByRole('button', { name: /thumbs up/i    }))\n    expect(screen.getByText(/11/i)).toBeInTheDocument()\n  })\n```", "```js\n  test('given \"down\" vote, total likes decreases by one', () => {\n    render(<Vote totalGlobalLikes={10} />)\n    user.click(screen.getByRole('button', { name: /thumbs        down/i }))\n    expect(screen.getByText(/9/i)).toBeInTheDocument()\n  })\n```", "```js\n  test('given vote, returns disabled vote buttons', () => {\n    render(<Vote totalGlobalLikes={10} />)\n    const thumbsUpBtn = screen.getByRole('button', { name: /       thumbs up/i })\n    const thumbsDownBtn = screen.getByRole('button', { name: /       thumbs down/i })\n    user.click(thumbsUpBtn)\n    user.click(thumbsUpBtn)\n    user.click(thumbsDownBtn)\n    user.click(thumbsDownBtn)\n    expect(screen.getByText(/11/i)).toBeInTheDocument()\n  })\n```", "```js\nimport { LikesProvider } from './LikesContext'\nimport Vote from './Vote'\nconst App = () => (\n  <LikesProvider initialLikes={10}>\n    <Vote />\n  </LikesProvider>\n)\n```", "```js\n import retailProducts from './api/retailProducts'\nimport Retail from './Retail'\nimport { RetailProvider } from './RetailContext'\nconst App = () => (\n  <RetailProvider products={retailProducts}>\n    <Retail />\n  </RetailProvider>\n)\n```", "```js\nconst Retail = () => {\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row mt-3\">\n        <ProductDetail />\n        <Cart />\n      </div>\n      <ProductList />\n    </div>\n  )\n}\n```", "```js\ntest('Cart, given initial render, returns empty cart', () => {\n  render(\n    <RetailProvider products={testProducts}>\n      <Cart />\n    </RetailProvider>\n  )\n  expect(screen.getByText(/0 items/i)).toBeInTheDocument()\n  expect(screen.getByText(/\\$0\\.00/i)).toBeInTheDocument()\n})\n```", "```js\ntest('Product, given product properties, renders to screen', () => {\n  const product = {\n    title: faker.commerce.productName(),\n    price: faker.commerce.price(),\n    image: faker.image.fashion()\n  }\n```", "```js\n   render(\n    <RetailProvider products={testProducts}>\n      <Product\n        title={product.title}\n        price={product.price}\n        image={product.image}\n      />\n    </RetailProvider>\n  )\n  expect(screen.getByText(product.title)).toBeInTheDocument()\n  expect(screen.getByText(`$${product.price}`)).     toBeInTheDocument()\n})\n```", "```js\ntest('ProductDetail, given initial render, displays Placeholder   component', () => {\n  render(\n    <RetailProvider products={testProducts}>\n      <ProductDetail />\n    </RetailProvider>\n  )\n  expect(\n    screen.getByRole('heading', { name: /retail store/i })\n  ).toBeInTheDocument()\n})\n```", "```js\nfunction useRetail() {\n  const context = React.useContext(RetailContext)\n  if (!context) {\n    throw new Error('useRetail must be used within the        RetailProvider')\n  }\n```", "```js\ntest('Retail must be rendered within Context Provider', () => {\n  jest.spyOn(console, 'error').mockImplementation(() => {})\n  const ErrorFallback = ({ error }) => error.message\n  render(\n    <ErrorBoundary FallbackComponent={ErrorFallback}>\n      <Retail />\n    </ErrorBoundary>\n  )\n```", "```js\nconst errorMessage = screen.getByText(/must be used within the   RetailProvider/i)\n  expect(errorMessage).toBeInTheDocument()\n  expect(console.error).toHaveBeenCalled()\n  console.error.mockRestore()\n})\n```", "```js\n  test('A user can view product details', () => {\n    render(\n      <RetailProvider products={testProducts}>\n        <Retail />\n      </RetailProvider>\n    )\n    const firstProduct = testProducts[0]\n    user.click(\n      screen.getByRole('heading', {\n        name: firstProduct.title\n      })\n    )\n```", "```js\n    expect(\n      screen.getAllByRole('heading', { name: firstProduct.title          }).length\n    ).toEqual(2)\n    expect(screen.getByText(firstProduct.description)).       toBeInTheDocument()\n    expect(\n      screen.getByRole('heading', { name: `$${firstProduct.         price}` })\n    ).toBeInTheDocument()\n  })\n```", "```js\n   function addFirstItemToCart() {\n    const firstProduct = testProducts[1]\n    const firstProductTitle = screen.getByRole('heading', {\n      name: firstProduct.title\n    })\n    user.click(firstProductTitle)\n    user.click(screen.getByRole('button', { name: /add to        cart/i }))\n  }\n```", "```js\n  test('A user can add a product to the cart', () => {\n    render(\n      <RetailProvider products={testProducts}>\n        <Retail />\n      </RetailProvider>\n    )\n    addFirstItemToCart()\n    expect(screen.getByText(/1 items/i)).toBeInTheDocument()\n  })\n```", "```js\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n```", "```js\ntest('Cart, given initial render, displays empty cart', () => {\n  render(\n    <Provider store={'some test data'}>\n      <Cart />\n    </Provider>\n  )\n```", "```js\nimport { configureStore } from '@reduxjs/toolkit'\nimport { render as rtlRender } from '@testing-library/react'\nimport faker from 'faker'\nimport { Provider } from 'react-redux'\nimport retailReducer from '../retailSlice'\n```", "```js\nconst fakeStore = {\n  retail: {\n    products: [\n      {\n        id: faker.random.uuid(),\n        title: faker.commerce.productName(),\n        price: faker.commerce.price(),\n        description: faker.commerce.productDescription(),\n        category: faker.commerce.department(),\n        image: faker.image.fashion()\n      }, \n    ],\n    cartItems: [],\n    favorites: [],\n    showProductDetails: null\n  }\n}\n```", "```js\nfunction render(\n  ui,\n  {\n    initialState,\n    store = configureStore({\n      reducer: { retail: retailReducer },\n      preloadedState: initialState\n    }),\n    ...renderOptions\n  } = {}\n) {\n```", "```js\n  function Wrapper({ children }) {\n    return <Provider store={store}>{children}</Provider>\n  }\n  return rtlRender(ui, { wrapper: Wrapper, ...renderOptions })\n}\n```", "```js\nexport * from '@testing-library/react'\nexport { render, fakeStore }\n```", "```js\nimport Cart from './Cart'\nimport { render, screen, fakeStore } from './utils/test-utils'\n```", "```js\ntest('Cart, given initial render, displays empty cart', () => {\n  render(<Cart />, { initialState: fakeStore })\n  expect(screen.getByText(/0 items/i)).toBeInTheDocument()\n  expect(screen.getByText(/\\$0\\.00/i)).toBeInTheDocument()\n})\n```", "```js\nexport const EMPLOYEES = gql`\n  query GetEmployees {\n    employees {\n      id\n      name\n      department\n      title\n    }\n  }\n`\n```", "```js\nclient = new ApolloClient({\n  uri: 'http://localhost:4000',\n  cache: new InMemoryCache()\n})\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Table />\n    </ApolloProvider>\n  )\n}\n```", "```js\nimport { MockedProvider } from '@apollo/client/testing'\nimport { act, render, screen } from '@testing-library/react'\nimport faker from 'faker'\nimport Table, { EMPLOYEES } from './Table'\n```", "```js\nconst mocks = [\n  {\n    request: {\n      query: EMPLOYEES\n    },\n    result: {\n```", "```js\n      data: {\n        employees: [\n          {\n            id: faker.random.uuid(),\n            name: faker.fake('{{name.firstName}} {{name.               lastName}}'),\n            department: faker.commerce.department(),\n            title: faker.name.jobTitle()\n          },\n          {\n            id: faker.random.uuid(),\n            name: faker.fake('{{name.firstName}} {{name.               lastName}}'),\n            department: faker.commerce.department(),\n            title: faker.name.jobTitle()\n          }\n        ]\n```", "```js\n  test('given initial render, returns loading message', () => {\n    render(\n      <MockedProvider mocks={mocks}>\n        <Table />\n      </MockedProvider>\n    )\n    expect(screen.getByText(/Loading.../)).toBeInTheDocument()\n  })\n```", "```js\n  test('given completed state, renders employee data', async ()      => {\n    render(\n      <MockedProvider mocks={mocks}>\n        <Table />\n      </MockedProvider>\n    )\n        await act(() => new Promise(resolve =>            setTimeout(resolve, 0)))\n    screen.debug()\n    expect(screen.getAllByTestId('row').length).toEqual(2)\n  })\n```", "```js\n  test('given error state, renders error message', async () =>     {\n    const mocks = [{ request: { query: EMPLOYEES }, error: new        Error() }]\n    render(\n      <MockedProvider mocks={mocks}>\n        <Table />\n      </MockedProvider>\n    )\n    await act(() => new Promise(resolve => setTimeout(resolve,        0)))\n    expect(screen.getByText(/Error/i)).toBeInTheDocument()\n  })\n```", "```js\n    <div>\n      <Box display=\"flex\" flexDirection=\"column\" css={{ width:         100 }}>\n        <Button\n          onClick={() => voteLike()}\n          disabled={hasVotedLike}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          <ThumbUpIcon />\n        </Button>\n```", "```js\n        <Typography variant=\"h3\" align=\"center\">\n          {totalLikes}\n        </Typography>\n        <Button\n          onClick={() => voteDislike()}\n          disabled={hasVotedDislike}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          <ThumbDownAltIcon />\n        </Button>\n      </Box>\n    </div>\n```", "```js\n<Button\n  aria-label=\"thumbs up\"\n```", "```js\n<Button\n  aria-label=\"thumbs down\"\n```", "```js\n  test('given multiple \"down\" votes, total likes only decrease      by one', () => {\n    render(<Vote totalGlobalLikes={10} />)\n    const thumbsUpBtn = screen.getByRole('button', { name: /       thumbs up/i })\n    user.click(thumbsUpBtn)\n    user.click(thumbsUpBtn)\n    user.click(thumbsUpBtn)\n    expect(screen.getByText(/11/i)).toBeInTheDocument()\n  })\n```", "```js\n  test('given retracted \"up\" vote, returns original total       likes', () => {\n    render(<Vote totalGlobalLikes={10} />)\n    const thumbsUpBtn = screen.getByRole('button', { name: /       thumbs up/i })\n    const thumbsDownBtn = screen.getByRole('button', { name: /       thumbs down/i })\n    user.click(thumbsUpBtn)\n    user.click(thumbsDownBtn)\n    expect(screen.getByText(/10/i)).toBeInTheDocument()\n  })\n```", "```js\n<h5 data-testid=\"product-type\">Electronics</h5>\n```", "```js\n  const fakeCustomers = [\n    {\n      id: 1,\n      name: 'John Doe',\n      email: 'john@mail.com',\n      address: '123 John Street',\n      phone: '(111) 1111111',\n      avatar: 'http://dummyimage.com/235x233.jpg/ff4444/ffffff'\n    },\n    // two additional objects\n  ]\n```", "```js\n test('given data, renders table rows', () => {\n    render(<CustomerTable data={fakeCustomers} />)\n    expect(screen.getAllByTestId('row').length).toEqual(3)\n  })\n```", "```js\n<TableRow data-testid=\"row\" key={customer.id}>\n```", "```js\n  test('given single-matching query, single result returned', () => {\n    render(<CustomerTable data={testData} />)\n    const searchBox = screen.getByRole('textbox')\n    user.type(searchBox, 'john')\n    expect(screen.queryAllByTestId('row').length).toEqual(1)\n  })\n```", "```js\n  test('given non-matching query, no results returned', () => {\n    render(<CustomerTable data={testData} />)\n    const searchBox = screen.getByRole('textbox')\n    user.type(searchBox, 'zzz')\n    expect(screen.queryAllByTestId('row').length).toEqual(0)\n  })\n```"]