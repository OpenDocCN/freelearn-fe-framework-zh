- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Creating a Fitness Tracker with Data Visualization
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据可视化创建健身追踪器
- en: Up until this point, we’ve relied on stateless apps or storing the state on
    the users’ browser. In this chapter, we’ll cover using a database to store data
    in a centralized place, and we’ll learn how to modify and read from the data source.
    We’ll use the opportunity to incorporate some data visualizations as well, using
    a third-party library.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直依赖于无状态应用程序或将状态存储在用户的浏览器上。在本章中，我们将介绍使用数据库在集中位置存储数据，并学习如何修改和从数据源读取数据。我们将利用这个机会，使用第三方库来引入一些数据可视化。
- en: While we’re using a database and have to set up tables, this is by no means
    a guide to production-ready database configuration and management. I suggest brushing
    up on those skills in different ways. It does serve as a valuable prototype to
    familiarize yourself with patterns concerning database handling.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用数据库并需要设置表时，这绝对不是一份面向生产环境的数据库配置和管理指南。我建议以不同的方式提高这些技能。它确实是一个有价值的原型，可以帮助您熟悉数据库处理的相关模式。
- en: Again, we’ll build upon the knowledge we’ve acquired so far, and we’ll incorporate
    composables, a store, and a component library to build our product.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们将基于我们迄今为止所获得的知识，并引入可组合组件、存储库和组件库来构建我们的产品。
- en: 'In this chapter, we’ll cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Creating dashboards and reports
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建仪表板和报告
- en: Retrieving data with Supabase
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Supabase检索数据
- en: Storing data using Supabase
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Supabase存储数据
- en: Adding various visualizations using `vue-chartjs`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`vue-chartjs`添加各种可视化
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: There’s some overlap in requirements from the previous chapter. We’ll make use
    of **Vuetify** ([https://vuetifyjs.com/en/](https://vuetifyjs.com/en/)) and **Pinia**
    ([https://pinia.vuejs.org/](https://pinia.vuejs.org/)). For storing data, we’ll
    make use of **Supabase** ([https://supabase.com/](https://supabase.com/)), which
    is an open source database provider with built-in authentication. For the database,
    I’ve prepared a script to create databases and another one to add example data.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从上一章的要求中有些重叠。我们将使用**Vuetify**([https://vuetifyjs.com/en/](https://vuetifyjs.com/en/))和**Pinia**([https://pinia.vuejs.org/](https://pinia.vuejs.org/))。对于数据存储，我们将使用**Supabase**([https://supabase.com/](https://supabase.com/))，这是一个具有内置身份验证的开源数据库提供商。对于数据库，我准备了一个创建数据库的脚本，另一个是添加示例数据的脚本。
- en: 'Here’s the GitHub link: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/tree/main/06.fitness](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/tree/main/06.fitness).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是GitHub链接：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/tree/main/06.fitness](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/tree/main/06.fitness)。
- en: We’ll cover those steps during the chapter. Lastly, for data visualization,
    we’ll install and use `vue-chartjs` ([https://vue-chartjs.org/](https://vue-chartjs.org/)),
    which is a Vue-compatible wrapper for the `chart.js` ([https://www.chartjs.org/](https://www.chartjs.org/))
    library.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中介绍这些步骤。最后，对于数据可视化，我们将安装并使用`vue-chartjs`([https://vue-chartjs.org/](https://vue-chartjs.org/))，这是一个针对`chart.js`([https://www.chartjs.org/](https://www.chartjs.org/))库的Vue兼容包装器。
- en: Creating a client
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建客户端
- en: 'In order to start our project, we’ll use the Vuetify installer, just as we
    did in the last chapter. Here’s the command for that:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始我们的项目，我们将使用Vuetify安装程序，就像我们在上一章中所做的那样。这是相应的命令：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Choose `vue-fitness-tracker` as the project name and select these options,
    as shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 选择`vue-fitness-tracker`作为项目名称，并选择以下选项，如图所示：
- en: '![Figure 6.1 – Setting up the Vuetify project](img/B19563_06_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – 设置Vuetify项目](img/B19563_06_01.jpg)'
- en: Figure 6.1 – Setting up the Vuetify project
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – 设置Vuetify项目
- en: With our project initialized, we’ll create and configure a database to store
    our data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目初始化后，我们将创建和配置一个数据库来存储我们的数据。
- en: Setting up the database
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置数据库
- en: After registering for a free account on `fitness-tracker` as the name and choose
    a strong database password. For the region, pick one that is geographically close
    to you for better latency. We’ll stick with the free plan!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在`fitness-tracker`上注册免费账户作为名称，并选择一个强大的数据库密码。对于区域，选择一个地理位置靠近您的选项以获得更好的延迟。我们将坚持使用免费计划！
- en: 'On the next page (*Figure 6**.2*), you will see the project API keys:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一页（*图6.2*）中，您将看到项目的API密钥：
- en: '![Figure 6.2 – Overview of the project API keys](img/B19563_06_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2 – 项目API密钥概览](img/B19563_06_02.jpg)'
- en: Figure 6.2 – Overview of the project API keys
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – 项目API密钥概览
- en: 'We’ll store them in our `.env` file in the root of our project:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把它们存储在我们的项目根目录下的 `.env` 文件中：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that sharing keys like this via a client-side app always exposes them to
    the public. Luckily, Supabase has its own means of ensuring authentication while
    interacting with the database.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，通过客户端应用以这种方式共享密钥总是会将它们暴露给公众。幸运的是，Supabase 有自己的方法来确保在交互数据库时进行身份验证。
- en: 'I’ve created a script that sets up the database with the table structure for
    our app. Via the dashboard and SQL editor, you can add and execute the query from
    the `example-structure.sql` file in the example repository, as shown in *Figure
    6**.3*:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个脚本，用于设置数据库并包含我们应用的表结构。通过仪表板和 SQL 编辑器，你可以从示例仓库中的 `example-structure.sql`
    文件添加和执行查询，如图 *图 6.3* 所示：
- en: '![Figure 6.3 – Once the query is successfully executed, you should see four
    tables in the table editor overview](img/B19563_06_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – 查询成功执行后，你应该在表编辑器概览中看到四个表格](img/B19563_06_03.jpg)'
- en: Figure 6.3 – Once the query is successfully executed, you should see four tables
    in the table editor overview
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 查询成功执行后，你应该在表编辑器概览中看到四个表格
- en: 'Once that’s executed, you can set up some data using the `example-exercises.sql`
    script, as seen in *Figure 6**.4*:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 执行完毕后，你可以使用 `example-exercises.sql` 脚本设置一些数据，如图 *图 6.4* 所示：
- en: '![Figure 6.4 – Inserting example exercises into the exercise table](img/B19563_06_04.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – 将示例练习插入到练习表中](img/B19563_06_04.jpg)'
- en: Figure 6.4 – Inserting example exercises into the exercise table
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 将示例练习插入到练习表中
- en: 'To streamline interactions with the database, we’ll use the Supabase JavaScript
    client by installing the dependency:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化与数据库的交互，我们将使用 Supabase JavaScript 客户端，通过安装依赖项：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s turn that package into a composable that handles our database connection
    within the app. In `src/composables`, we’ll create a `supabase.ts` file and add
    the following contents:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个包转换成一个可组合的组件，在应用中处理数据库连接。在 `src/composables` 中，我们将创建一个 `supabase.ts` 文件并添加以下内容：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'One final change I made was cleaning up the `layouts` folder with the boilerplate
    components. I deleted all files except `Default.vue` and updated its contents
    to match this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我做的最后一个改动是清理 `layouts` 文件夹中的样板组件。我删除了所有文件，除了 `Default.vue`，并更新了其内容以匹配以下内容：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That’s our baseline to start building our app. Next, we’re going to make sure
    that the app shows individual results, using the built-in tooling that Supabase
    provides.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的起点，开始构建我们的应用。接下来，我们将确保应用显示个人结果，使用 Supabase 提供的内置工具。
- en: Handling the user
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理用户
- en: 'The goal of the app is to allow for individual metrics to be tracked and viewed,
    so for that purpose, we need to make sure that we can identify our users. Supabase
    supports authentication out of the box, and we’re going to use a very basic method:
    a **magic link**.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的目标是允许跟踪和查看个人指标，因此为此目的，我们需要确保我们可以识别我们的用户。Supabase 默认支持身份验证，我们将使用一个非常基本的方法：一个**魔法链接**。
- en: A magic link allows you to sign up and sign in with just a valid email address.
    On logging in, the service sends an email containing a unique identifier, and
    when clicked, the user is verified to that email address. In our case, the backend
    handles verifying whether it’s a new user or an existing one, which is perfect
    for our use case.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 魔法链接允许你仅使用有效的电子邮件地址进行注册和登录。登录时，服务会发送包含唯一标识符的电子邮件，点击后，用户将被验证到该电子邮件地址。在我们的情况下，后端处理验证它是一个新用户还是一个现有用户，这对于我们的用例来说非常完美。
- en: Since we can identify users, we need to connect our app to retrieve information
    that Supabase provides. We can also introduce authentication to make sure that
    users have access to parts that they want to use or visit.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们可以识别用户，我们需要将我们的应用连接到 Supabase 以获取它提供的信息。我们还可以引入身份验证，以确保用户可以访问他们想要使用或访问的部分。
- en: User store
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户存储
- en: We will want to have access and the ability to update the status of the user
    at all times, so we’ll set up a user store in Pinia that will keep track of the
    current state and provide actions on updating the state and logging in and out.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将希望始终能够访问和更新用户的状态，因此我们将在 Pinia 中设置一个用户存储，以跟踪当前状态并提供更新状态、登录和登出的操作。
- en: 'We’ll go over the contents of the store, after creating a `user.ts` file in
    the `src/store` folder with the following contents: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.1-user.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.1-user.ts).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/store`文件夹中创建一个包含以下内容的`user.ts`文件后，我们将查看存储的内容：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.1-user.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.1-user.ts)。
- en: In the session (*line 11*), we’ll store the authentication state of the user.
    It can either be `null` for not logged in or the state can hold an object (as
    defined in the `UserSession` interface), which gets populated by the Supabase
    authorization service.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在会话（*第11行*）中，我们将存储用户的认证状态。它可以是`null`表示未登录，或者状态可以包含一个对象（如`UserSession`接口中定义的），该对象由Supabase授权服务填充。
- en: With the `login` (*lines 13-20*) and `logout` (*lines 22-30*) methods, we are
    calling the Supabase authentication services and executing a provided callback
    function. We will see these in action shortly!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`login`（*第13-20行*）和`logout`（*第22-30行*）方法，我们调用Supabase认证服务并执行提供的回调函数。我们很快就会看到这些功能在实际中的应用！
- en: To store the user, we have the `insertProfile` function (*lines 32-44*), which
    upserts any authenticated user to our database for future reference.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了存储用户，我们有`insertProfile`函数（*第32-44行*），它将任何认证用户插入到我们的数据库中供将来参考。
- en: Note
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Storing personal data may be subject to local law and governance. Be very diligent
    and transparent in what you store, why you’re storing it, and how you remove personal
    data.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 存储个人数据可能受当地法律和治理的约束。在存储、存储原因以及如何删除个人数据方面，请务必谨慎和透明。
- en: '`setUserSession` (*lines 47-49*) simply passes the data to the state for further
    reference. Lastly, `userIsLoggedIn` (*lines 51-58*) checks whether the current
    session data is still valid, and if not, it returns `false`. We can use this for
    quick assessments on displaying user interface elements.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`setUserSession`（*第47-49行*）简单地将数据传递到状态中供进一步参考。最后，`userIsLoggedIn`（*第51-58行*）检查当前会话数据是否仍然有效，如果不是，则返回`false`。我们可以使用这个来快速评估显示用户界面元素。'
- en: Having the store in place, we can incorporate profiles in our app with some
    sensible safety measures.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在存储就绪后，我们可以在应用中包含配置文件，并采取一些合理的安全措施。
- en: Authenticating users
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户认证
- en: 'Let’s create a form where the user can provide an email address that will result
    in a `FormLogin.vue` in the `components` folder: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.2-FormLogin.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.2-FormLogin.vue).'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个表单，用户可以提供电子邮件地址，这将导致在`components`文件夹中生成`FormLogin.vue`：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.2-FormLogin.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.2-FormLogin.vue)。
- en: As you can see, we’re using our user store to dispatch a `login` action (*lines
    11-14*, *25*) with the email address provided by the user. The template is built
    with Vuetify components. It holds a `form` and a `dialog` component that is triggered
    on submission, to inform the user to look at their email.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们正在使用我们的用户存储来分发一个带有用户提供的电子邮件地址的`login`动作（*第11-14行*，*第25行*），模板是用Vuetify组件构建的。它包含一个`form`和一个`dialog`组件，在提交时触发，以通知用户查看他们的电子邮件。
- en: 'The OTP login sends a login link to the provided email address, which means
    the user will enter the app from an external link. We need to make sure to try
    to validate the user’s session when the app gets loaded. For that, we’ll update
    the `App.vue` file in the root:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: OTP登录会将登录链接发送到提供的电子邮件地址，这意味着用户将从外部链接进入应用。我们需要确保在应用加载时尝试验证用户的会话。为此，我们将更新根目录下的`App.vue`文件：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this script, we’ll validate the user session via Supabase. On receiving data,
    we store it on the user store and use the store to upsert a profile in our database.
    We also keep track of the state change, in order to handle updated tokens or invalidation.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，我们将通过Supabase验证用户会话。在接收到数据后，我们将其存储在用户存储中，并使用存储来在我们的数据库中更新一个配置文件。我们还跟踪状态变化，以便处理更新的令牌或失效。
- en: Protected routes
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 受保护的路由
- en: Having access to the state of the user, we can use the `beforeEnter` lifecycle
    hook to validate if a user is allowed access to a route. The `beforeEnter` method
    acts as middleware and executes a function whereby you can decide how to handle
    the route change.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在获取到用户状态后，我们可以使用`beforeEnter`生命周期钩子来验证用户是否有权访问某个路由。`beforeEnter`方法充当中间件，并执行一个函数，您可以通过该函数决定如何处理路由更改。
- en: 'We’ll first create a view for the login state, called `Login.vue`, in the `views`
    folder:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在`views`文件夹中创建一个用于登录状态的视图，命名为`Login.vue`：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the router file, we’ll add a function called `loginGuard` (*lines 7-14*)
    to check whether the user is logged in, and we’ll call that function on the `beforeEnter`
    method for protected routes (*line 37*). If the user session is present, you will
    be allowed to follow the route. Otherwise, you will be redirected to the newly
    added `loginRoute` function (*lines 12*, *39-44*): [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.3-router-index.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.3-router-index.ts).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在路由文件中，我们将添加一个名为`loginGuard`（*第7-14行*）的函数来检查用户是否已登录，并且我们将在受保护路由的`beforeEnter`方法中调用该函数（*第37行*）。如果用户会话存在，您将被允许跟随该路由。否则，您将被重定向到新添加的`loginRoute`函数（*第12行，第39-44行*）：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.3-router-index.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.3-router-index.ts)。
- en: 'If you run the development app, on the first visit, you will be presented with
    a login form since you are not yet authenticated, as shown in *Figure 6**.5*:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行开发应用程序，在第一次访问时，由于您尚未认证，您将看到一个登录表单，如图*图6**.5*所示：
- en: '![Figure 6.5 – The user is not logged in and is redirected to the /login route](img/B19563_06_05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5 – 用户未登录，被重定向到/login路由](img/B19563_06_05.jpg)'
- en: Figure 6.5 – The user is not logged in and is redirected to the /login route
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – 用户未登录，被重定向到/login路由
- en: 'After providing your email address, a fullscreen popup appears to direct our
    user to the next steps. If you open your email client, you should receive an email
    containing a magic link shortly:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供您的电子邮件地址后，会出现一个全屏弹出窗口，引导用户进行下一步操作。如果您打开电子邮件客户端，您应该会很快收到一封包含魔法链接的电子邮件：
- en: '![Figure 6.6 – Default email containing a magic link](img/B19563_06_06.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6 – 包含魔法链接的默认电子邮件](img/B19563_06_06.jpg)'
- en: Figure 6.6 – Default email containing a magic link
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – 包含魔法链接的默认电子邮件
- en: 'Clicking on the magic link opens a new browser window and should now direct
    you to the home page, which is only accessible for logged-in users:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 点击魔法链接将打开一个新的浏览器窗口，并应将您重定向到主页，该主页仅对已登录用户可访问：
- en: '![Figure 6.7 – The home page is only visible to logged-in users](img/B19563_06_07.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图6.7 – 只有登录用户才能看到主页](img/B19563_06_07.jpg)'
- en: Figure 6.7 – The home page is only visible to logged-in users
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – 只有登录用户才能看到主页
- en: This means if you’re seeing the Vuetify default home page, you are a logged-in
    user! You have no way of logging out for now, so let’s work on that to complete
    the authentication flow.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果您看到的是Vuetify默认的主页，那么您是一个已登录的用户！目前您没有登出的方式，所以让我们来完成这个认证流程。
- en: Logging out
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 登出
- en: To complete the user flow, we’ll add a feature for the user to log out as well.
    For that, we’ll add a menu with a button that is attached to the user logout method
    on the store.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成用户流程，我们将添加一个用户登出的功能。为此，我们将在商店中添加一个与用户登出方法关联的菜单按钮。
- en: 'Let’s create an `AppMenu.vue` file in the `src` folder and add **Log out**
    and **Log in** buttons. We’ll expand upon the menu later as well: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.4-AppMenu.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.4-AppMenu.vue).'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`src`文件夹中创建一个`AppMenu.vue`文件，并添加**注销**和**登录**按钮。我们稍后会进一步扩展菜单：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.4-AppMenu.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.4-AppMenu.vue)。
- en: 'In the menu, depending on the user state (*lines 5-6*, *10*, *18*), we’ll show
    a button to either log in or log out. With some small modifications to our `App.vue`
    file, we can quickly include the `AppMenu.vue` file for our app (*lines 6*, *21-26*):
    [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.5-AppMenu.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.5-AppMenu.vue).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '在菜单中，根据用户状态（*第5-6行*，*第10行*，*第18行*），我们将显示一个按钮用于登录或登出。通过对我们`App.vue`文件的一些小修改，我们可以快速包含`AppMenu.vue`文件到我们的应用中（*第6行*，*第21-26行*）:
    [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.5-AppMenu.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.5-AppMenu.vue)。'
- en: We have now completed the user flow in our app. We can have new users logging
    in and existing users logging in, and logged-in users can sign out of the app.
    As you can see, we’ll let Supabase handle the logic, and we’re just consuming
    the data from Supabase.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了应用中的用户流程。我们可以让新用户登录和现有用户登录，并且登录用户可以退出应用。如您所见，我们将让Supabase处理逻辑，而我们只是从Supabase获取数据。
- en: This is a common pattern in frontend development, to leave the authentication
    to the server and never the client. For our upcoming features, we don’t have to
    worry about who has access to what data since we’ve configured Supabase (with
    **Row Level Security** (**RLS**) policies ([https://supabase.com/docs/guides/auth#row-level-security](https://supabase.com/docs/guides/auth#row-level-security)))
    and the authentication methods to take care of the data for us.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在前端开发中的一种常见模式，将认证留给服务器而不是客户端。对于我们的即将推出的功能，我们不必担心谁可以访问什么数据，因为我们已经配置了Supabase（带有**行级安全**（**RLS**）策略
    ([https://supabase.com/docs/guides/auth#row-level-security](https://supabase.com/docs/guides/auth#row-level-security)))
    和认证方法来为我们处理数据）。
- en: Now that we have a way for users to sign up and log in, we can start adding
    features for adding personal data to the app.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们为用户提供了注册和登录的方式，我们可以开始为应用添加添加个人数据的特性。
- en: App state
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用状态
- en: To make it easier for us to control the state of the app, we’ll add a new store
    to track the current state of the user interface.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们更容易控制应用的状态，我们将添加一个新的存储来跟踪用户界面的当前状态。
- en: 'Vuetify has created a placeholder app store for us in the `store/app.ts` file,
    so we’ll add some features to handle page transitions (*lines 28*, *30-35*), toggling
    a menu (*lines 18*, *20-26*) and controlling a dialog (*lines 37-55*) for app-level
    notifications: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.6-app.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.6-app.ts).'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Vuetify在`store/app.ts`文件中为我们创建了一个占位符应用存储，因此我们将添加一些特性来处理页面转换（*第28行*，*第30-35行*），切换菜单（*第18行*，*第20-26行*）和控制对话框（*第37-55行*）以进行应用级通知：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.6-app.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.6-app.ts)。
- en: Having access to these kinds of user interface utilities in a centralized place
    eliminates the need to repeat certain patterns in our app, such as showing or
    hiding a dialog. It means that those utilities are part of the app and are therefore
    available throughout the whole app.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个集中的位置提供这些类型的用户界面工具，消除了在我们应用中重复某些模式的需要，例如显示或隐藏对话框。这意味着这些工具是应用的一部分，因此在整个应用中都是可用的。
- en: Centralized dialog
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集中式对话框
- en: 'Let’s update the `FormLogin.vue` file to make use of the store options on the
    app level. We can clean up the existing dialog options and replace them with calling
    store methods: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.7-FormLogin.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.7-FormLogin.vue).'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新`FormLogin.vue`文件，以便利用应用级别的存储选项。我们可以清理现有的对话框选项，并用调用存储方法来替换它们：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.7-FormLogin.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.7-FormLogin.vue)。
- en: 'As you can see, by using the generic app store (*lines 5*, *8*), we can now
    also easily add additional dialogs; for instance, when an email address is missing
    (*lines 13-17*) or when the OTP has been sent (*lines 18-24*). The only thing
    we need to do is add a central place to show the dialog, and we’ll open and modify
    `App.vue` for that: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.8-App.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.8-App.vue).'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，通过使用通用的应用存储（*第5行*，*第8行*），我们现在也可以轻松地添加额外的对话框；例如，当缺少电子邮件地址（*第13-17行*）或OTP已发送（*第18-24行*）时。我们唯一需要做的是添加一个中央位置来显示对话框，我们将为此打开并修改`App.vue`：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.8-App.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.8-App.vue)。
- en: This way, we have a dialog (*lines 13*, *31-39*) that’s part of the app, and
    we can control it from anywhere using our store (*lines 4*, *11*)! The same goes
    for the app menu, so let’s modify our app to have centralized control over the
    app menu.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们有一个对话框（*第13行*，*第31-39行*），它是应用的一部分，我们可以通过我们的存储（*第4行*，*第11行*）从任何地方控制它！对于应用菜单也是如此，所以让我们修改我们的应用以实现对应用菜单的集中控制。
- en: Centralized app menu
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集中化应用菜单
- en: 'We can apply a similar pattern to a menu. We’ll convert it to a drawer link
    feature that slides in and out of view. Let’s start with modifying `AppMenu.vue`
    by adding the necessary app store references:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将类似的模式应用到菜单上。我们将将其转换为滑动进出视图的抽屉链接功能。让我们从通过添加必要的应用存储引用来修改`AppMenu.vue`开始：
- en: '[PRE7]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the template, we’ve wrapped the menu in a `navigation-drawer` component from
    Vuetify, which uses the `drawer` state variable to display as opened or closed.
    We’ve also replaced the `router-link` component with a method for navigating to
    new pages.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板中，我们用Vuetify的`navigation-drawer`组件包裹了菜单，该组件使用`drawer`状态变量来显示为打开或关闭。我们还用导航到新页面的方法替换了`router-link`组件。
- en: 'To complete the setup, we need to modify the `App.vue` file to adapt to the
    new interface and finalize the app layout:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成设置，我们需要修改`App.vue`文件以适应新的界面并最终确定应用布局：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So far, we have the foundation of an app that supports a personalized experience,
    depending on authentication by a third party, and the ability to have both public
    and secured routes. We have some centralized features to control the state of
    the app’s user interface. The next step will be to add features where the user
    can insert their own data!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有一个支持个性化体验的应用基础，这取决于第三方认证，并且能够拥有公共和受保护的路由。我们有一些集中化的功能来控制应用用户界面的状态。下一步将是添加用户可以插入他们自己的数据的功能！
- en: We’ve already prepared and set up our database with tables and some prefilled
    exercises. Feel free to take a look at the tables and the contents of the `exercises`
    table, because it will help you understand our next steps.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备并设置了我们的数据库，包括表和一些预填充的练习。请随意查看表和`exercises`表的内容，因为它将帮助您理解我们的下一步。
- en: We have a table exercise where different types of gym exercises are stored.
    The user data (limited to just an email address) is stored in the table. If you’ve
    signed up via the login form, you should see your email address already there!
    We have workouts where the training is logged per user, and the sets table combines
    performed exercises with a workout. Lastly, we have added a view for a dashboard,
    which we’ll build later on.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个表格练习，其中存储了不同类型的健身房练习。用户数据（仅限于电子邮件地址）存储在表中。如果你通过登录表单注册，你应该已经看到了你的电子邮件地址！我们还有记录每个用户的训练的锻炼，以及将执行练习与锻炼组合的集合表。最后，我们添加了一个仪表板视图，我们将在稍后构建它。
- en: Now, let’s make sure users can add data to the database by building an exercise
    tracker.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们确保用户可以通过构建一个锻炼跟踪器来向数据库添加数据。
- en: Exercise tracking
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 锻炼跟踪
- en: 'Let’s add a new route to have our users add a routine to the database. Let’s
    start by adding a new route entry on the routes:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个新的路由，让我们的用户将常规添加到数据库中。让我们首先在路由上添加一个新的路由条目：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can see, this is a page that is only accessible by authenticated users.
    Our entry also means that we need to create a view, called `Track.vue`, so let’s
    continue:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，这是一个只有经过认证的用户才能访问的页面。我们的入口也意味着我们需要创建一个名为`Track.vue`的视图，让我们继续：
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We’ll complete the initialization with the creation of an empty `TrackExercise.vue`
    file in the `components` folder, and we’ll focus on creating an interface that
    matches the way we want to track activities.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过在 `components` 文件夹中创建一个空的 `TrackExercise.vue` 文件来完成初始化，并且我们将专注于创建一个符合我们跟踪活动的界面。
- en: 'To navigate to our route, we can modify our `AppMenu.vue` file. Since we can
    expect some more menu items, we can define a pattern for items in the `script`
    block and have the template repeat over those items. We’ll start with a single
    item in the collection, like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要导航到我们的路由，我们可以修改我们的 `AppMenu.vue` 文件。由于我们可以预期有更多的菜单项，我们可以在 `script` 块中定义一个模式，并让模板遍历这些项。我们将从集合中的一个单独项开始，如下所示：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In our template, we’ll expand `v-list` for logged-in users to iterate over
    our `menuItems` collection:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的模板中，我们将扩展 `v-list` 以遍历登录用户的 `menuItems` 集合：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We can now, from the menu, navigate to our new page in the app.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以从菜单中导航到应用中的新页面。
- en: Next, we can define input fields. We’ll start by creating a date picker for
    our users.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以定义输入字段。我们将从为我们的用户创建一个日期选择器开始。
- en: Selecting a date
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择日期
- en: 'We want to add a date to our workout. Vuetify at the moment supports `datepicker`
    as an experimental feature. We need to explicitly import it into our newly created
    `TrackExercise.vue` file, and in addition, we’ll configure some variables to keep
    track of the user interface state as well as the selected date:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想在锻炼中添加一个日期。目前 Vuetify 支持作为实验性功能的 `datepicker`。我们需要显式地将它导入到我们新创建的 `TrackExercise.vue`
    文件中，并且此外，我们还将配置一些变量来跟踪用户界面状态以及所选日期：
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In our template, we’ll build controls to add a workout, beginning with a date
    selection:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的模板中，我们将构建添加锻炼的控制，从日期选择开始：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This should look pretty familiar. We’ve added a button that controls a dialog
    and have some configuration for the dialog. The reason we’re not using our app-wide
    dialog is that this contains more advanced content and has hooks attached. The
    app dialog is meant to display short messages to our users.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该看起来很熟悉。我们添加了一个按钮来控制对话框，并对对话框进行了一些配置。我们不使用我们的全局对话框的原因是它包含更高级的内容和钩子。应用对话框旨在向我们的用户显示简短的消息。
- en: 'If you try this out, you’ll notice that selecting a date results in an unformatted
    date shown in the interface. We’ll fix that before we move on by using the `computed`
    method and the browser’s built-in `Intl` API:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试一下，你会注意到选择日期会导致在界面中显示一个未格式化的日期。在我们继续之前，我们将使用 `computed` 方法以及浏览器的内置 `Intl`
    API 来修复这个问题：
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In our template, we’ll replace `{{ selectedDate }}` with a nicely formatted
    date representation:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的模板中，我们将用格式良好的日期表示替换 `{{ selectedDate }}`：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Adding a routine
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加常规锻炼
- en: For adding a routine, we want the user to be able to select a routine from our
    database. We want to offer something of a routine picker, so let’s build one!
    The component should read the exercises from the database and have a user select
    one to add properties of a set (weight and repetitions).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于添加一个常规锻炼，我们希望用户能够从我们的数据库中选择一个常规锻炼。我们希望提供一个常规选择器，所以让我们构建一个！组件应该从数据库中读取锻炼，并让用户选择一个以添加一套（重量和重复次数）的属性。
- en: 'With a need for centralized data, we can create a store for all our fitness-related
    data and methods. Let’s create a `fitness.ts` file in the store, and we’ll start
    with retrieving exercises from the database: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.9-fitness.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.9-fitness.ts).'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 由于需要集中式数据，我们可以为所有与健身相关的数据和函数创建一个存储库。让我们在存储库中创建一个 `fitness.ts` 文件，并且我们将从从数据库中检索锻炼开始：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.9-fitness.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.9-fitness.ts)。
- en: The store exposes the exercises and a method of retrieving them. Since we want
    to immediately populate the `exercises` list, we can call the `getExercises` method
    (*lines 13-28*, *29*) when initializing the store!
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库公开了锻炼和检索它们的方法。由于我们希望立即填充 `exercises` 列表，我们可以在初始化存储库时调用 `getExercises` 方法（*第
    13-28 行*，*第 29 行*）！
- en: 'We’ll add more of this store in the future, but for now, we can start using
    the data in a new component: an `components` folder called `SelectExercise.vue`,
    we’ll import the store and use it to populate a Vuetify `select` component:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在未来添加更多存储库，但到目前为止，我们可以开始在一个新组件中使用数据：一个名为 `SelectExercise.vue` 的 `components`
    文件夹，我们将导入存储库并使用它来填充一个 Vuetify `select` 组件：
- en: '[PRE17]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Very straightforward! We access the store and map the values to the `v-select`
    component. In addition to `exercise`, we want the user to be able to add `weight`
    and `repetitions` as part of a routine. So, let’s wrap our created component in
    a parent called `AddRoutine.vue`: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.10-AddRoutine.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.10-AddRoutine.vue).'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单！我们访问存储并映射值到`v-select`组件。除了`exercise`，我们希望用户能够将`weight`和`repetitions`作为常规的一部分添加。因此，让我们将创建的组件包裹在一个名为`AddRoutine.vue`的父组件中：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.10-AddRoutine.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.10-AddRoutine.vue)。
- en: Let’s break this down before we move to the template. We have the `exercise`
    (*line 10*) and `routine` (*line 9*) variables, where a routine consists of an
    exercise in combination with a set of weights and repetitions.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们转向模板之前，让我们先分解一下。我们有`exercise`（*第10行*）和`routine`（*第9行*）变量，其中一项常规包括一项练习以及一组重量和重复次数的组合。
- en: 'An example of `routines` could be similar to this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`routines`的一个例子可能如下所示：'
- en: '[PRE18]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The flow starts with selecting an exercise, and the watcher (*lines 38-40*)
    then prepares the routine to be filled with new values (clearing the `routines`
    array). The interface in the template is modeled to the weight and repetitions,
    as you will see in a moment.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 流程从选择一项锻炼开始，然后监视器（*第38-40行*）准备填充新值的常规（清除`routines`数组）。模板中的界面被建模为重量和重复次数，您将在下面看到。
- en: As usual, several rows can be added to the `routines` property using the `addRow`
    function (*lines 16-21*). If a user makes an error, a row can be removed from
    the property (*lines 23-25*).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，可以使用`addRow`函数（*第16-21行*）向`routines`属性添加多行。如果用户出错，可以从属性中移除一行（*第23-25行*）。
- en: The `add` function (*lines 33-36*) emits the `routine` object to the parent
    component and resets any values on the form.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`add`函数（*第33-36行*）将`routine`对象发送到父组件并重置表单上的任何值。'
- en: In the template part, we start with the `select-exercise` component (*line 48*)
    to trigger the flow, and we use Vuetify expansion panels to show the forms for
    adding a set (*lines 52-86*) as well as give a summary of sets that you’ve added
    (*lines 87-131*).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板部分，我们首先使用`select-exercise`组件（*第48行*）来触发流程，并使用Vuetify扩展面板显示添加一套的表单（*第52-86行*）以及显示您已添加的套数摘要（*第87-131行*）。
- en: The second expansion panel also uses a Vuetify badge to indicate the number
    of unsaved changes (*lines 92-100*). At the bottom, there’s a button (*lines 135-144*)
    that calls the `emit` function to have the `routine` object sent to the parent.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个扩展面板也使用Vuetify徽章来指示未保存更改的数量（*第92-100行*）。底部有一个按钮（*第135-144行*），它调用`emit`函数以将`routine`对象发送到父组件。
- en: We can now move back to the `TrackExercise.vue` file to pick up on the emitted
    event and combine the selected date with the modeled routine to eventually store
    it in the database.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以回到`TrackExercise.vue`文件，以获取发出的事件，并将选定的日期与建模的常规结合起来，最终将其存储在数据库中。
- en: 'In the `script` block, we’ll add the following code to keep track of the routine
    and the child component:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在`script`块中，我们将添加以下代码以跟踪常规和子组件：
- en: '[PRE19]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In our template, below the representation of the date picker, we can add a
    dialog for creating a routine:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的模板中，在日期选择器的表示下方，我们可以添加一个用于创建常规的对话框：
- en: '[PRE20]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After this code change, once a date has been selected, we show a button to
    start adding a routine. The routine selection component opens in a dedicated dialog,
    and on the `add` event, it calls the `addRoutineToExercise` function, which adds
    a newline to the object in this component. You can try it out yourself since we’re
    showing `{{ routines }}` inline for the moment. It should look similar to *Figure
    6**.8*:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码更改之后，一旦选择了日期，我们将显示一个按钮以开始添加常规。常规选择组件在一个专用对话框中打开，并在`add`事件上调用`addRoutineToExercise`函数，该函数向此组件中的对象添加换行符。您现在可以亲自尝试，因为我们目前正在内联显示`{{
    routines }}`。它应该看起来类似于*图6**.8*：
- en: '![Figure 6.8 – Our interface for compiling a workout](img/B19563_06_08.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图6.8 – 我们用于编译锻炼的界面](img/B19563_06_08.jpg)'
- en: Figure 6.8 – Our interface for compiling a workout
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 – 我们用于编译锻炼的界面
- en: Our next step will be to format the display of the workout that we want to add
    to the database and, of course, store the workout in the database itself.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一步将是对我们想要添加到数据库中的锻炼格式化显示，当然，也将锻炼本身存储在数据库中。
- en: Saving to the database
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将数据保存到数据库
- en: 'We’ve created a feature for our users to model a workout so that we can start
    saving the hard work. We’re going to use our fitness store file for this, so let’s
    add some new methods and export them for usage: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.11-fitness.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.11-fitness.ts).'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为用户创建了一个功能，以便他们可以模拟锻炼，这样我们就可以开始保存辛勤的工作。我们将使用我们的健身存储文件来完成这项工作，所以让我们添加一些新方法并将它们导出以供使用：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.11-fitness.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.11-fitness.ts).
- en: We need to have access to the user ID, so we’ll import the `userStore` function
    (*line 2*), and we’ll import some of the data types that we’ll use.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要访问用户ID，所以我们将导入`userStore`函数（*第2行*），并且我们将导入我们将使用的一些数据类型。
- en: 'We’ve added our main `saveWorkout` function (*lines 40-70*), which executes
    two helpers: first, it saves the workout to the workout table using the `insertWorkout`
    function (*lines 11-25*). On retrieving the `id` property from the workout, we
    can start saving the sets. For that, we iterate over the routines to compile a
    list of sets, and we can save them all at once with the `insertSets` method (*lines
    27-38*).'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了主要的`saveWorkout`函数（*第40-70行*），它执行两个辅助函数：首先，它使用`insertWorkout`函数（*第11-25行*）将锻炼保存到锻炼表中。在从锻炼中检索`id`属性后，我们可以开始保存集合。为此，我们遍历常规以编译集合列表，然后我们可以使用`insertSets`方法（*第27-38行*）一次性保存它们。
- en: 'With those additions, let’s flip back to our `TrackExercise.vue` file to add
    a `saveWorkout` action. We’ll import both the fitness and app store:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加了这些功能后，让我们回到我们的`TrackExercise.vue`文件，添加一个`saveWorkout`动作。我们将导入健身和应用存储：
- en: '[PRE21]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We’ll also add functions to validate if a workout can actually be saved – one
    to reset the form state and one that passes the information to our store action:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将添加函数来验证锻炼是否可以实际保存——一个用于重置表单状态，另一个将信息传递到我们的存储动作：
- en: '[PRE22]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Again, we’re using the app dialog to show our systems’ messages; nice and reusable.
    We’ll end our form with the conditional **Save** button at the bottom of our template:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们使用应用对话框来显示我们系统的消息；既方便又可重用。我们将在模板底部添加一个条件性的**保存**按钮来结束我们的表单：
- en: '[PRE23]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can try it out. The data should show up in the tables of your Supabase instance.
    In [*Chapter 7*](B19563_07.xhtml#_idTextAnchor204)*,* we’ll start to retrieve
    this data in various ways. As you can see, sometimes during development it makes
    sense to go back and forth between various components that make up the chain.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以试一试。数据应该会显示在你的Supabase实例的表格中。在[*第7章*](B19563_07.xhtml#_idTextAnchor204)*中，我们将开始以各种方式检索这些数据。正如你所看到的，在开发过程中，有时在构成链的各个组件之间来回切换是有意义的。
- en: I’m trying to demonstrate this process a bit since it’s close to the development
    in practice. It is rare to come up with the ideal solution (or specifications!)
    in one go.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我试图演示这个过程，因为它接近实际开发。一次性提出理想的解决方案（或规范！）是很少见的。
- en: Our hard work visualized
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们辛勤工作的可视化
- en: It is one thing to store the data. For the user, the data only has value if
    we can present it within a certain context. We’ve done a small exercise when displaying
    the compilation of a routine before saving. In this part, we’ll see a couple of
    different examples of displaying the data.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 存储数据是一回事。对于用户来说，如果我们可以将其呈现于一定的上下文中，数据才有价值。我们在保存之前的常规编译显示中做了一些小练习。在这一部分，我们将看到几个不同的数据展示示例。
- en: We’ll make sure to accommodate an empty state (so feel free to delete any items
    or try a new login), and after we’ve added some workouts, we’ll find ways to display
    the data.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将确保容纳空状态（所以请随意删除任何项目或尝试新的登录），在我们添加了一些锻炼之后，我们将找到显示数据的方法。
- en: Let’s start by replacing the home page. In this case, we already have a route
    and we have the `Home.vue` view, but we’ll remove the reference to the `HelloWorld.vue`
    component and create an empty `History.vue <template>` component instead. And
    then, in `Home.vue`, we’ll reference the `History.vue` file instead of `HelloWorld.vue`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先从替换主页开始。在这种情况下，我们已经有了一个路由和`Home.vue`视图，但我们将删除对`HelloWorld.vue`组件的引用，并创建一个空的`History.vue
    <template>`组件。然后，在`Home.vue`中，我们将引用`History.vue`文件而不是`HelloWorld.vue`。
- en: A view-based dashboard
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于视图的仪表板
- en: We can start with a quick component to show the latest statistics of the user.
    When executing the script on the database, it included a view, called `workout_dashboard_view`.
    This is like an aggregate of read-only queries that we can in turn query as if
    it were a table on its own.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从一个快速组件开始，展示用户的最新统计数据。当在数据库上执行脚本时，它包含了一个视图，称为`workout_dashboard_view`。这就像是一个只读查询的聚合，我们可以将其作为单独的表来查询。
- en: 'We’ll add methods for getting data to the fitness store, similar to what we
    did with the exercises, by adding and exposing the `dashboard` variable (*lines
    15*, *42*), which in turn gets data from the `getDashboard` method (*lines 17-40*,
    *42*): [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.12-fitness.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.12-fitness.ts).'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过添加和暴露`dashboard`变量（*第15行*，*第42行*）来为健身商店添加获取数据的方法，这与我们对锻炼所做的方法类似，这个变量反过来从`getDashboard`方法（*第17-40行*，*第42行*）获取数据：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.12-fitness.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.12-fitness.ts)。
- en: 'With that in place, we can create a component to access the dashboard from
    the store and show the contents. Let’s call it `WorkoutStats.vue`, and we’ll add
    a reference to the fitness store and load the dashboard:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在有了这些之后，我们可以创建一个组件来从商店访问仪表板并显示内容。让我们称它为`WorkoutStats.vue`，并将对健身商店的引用和加载仪表板：
- en: '[PRE24]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We’re adding one function to calculate the difference between today and the
    last exercise date, but it’s a concise setup. In the template, we can expect four
    values for the dashboard, each of which we’ll show on its own card:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们增加了一个函数来计算今天和上次锻炼日期之间的差异，但这是一个简洁的设置。在模板中，我们可以期待四个用于仪表板的价值，每个我们都会单独展示在卡片上：
- en: '[PRE25]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We’re using an expression to default to `0` values if we have no results from
    the dashboard. Once it gets filled with values, though, we populate the template
    with the values. There is some room for optimization since there’s some repetition
    involved in the template. This would be a good exercise to improve on your own!
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个表达式来默认为`0`值，如果我们从仪表板没有结果。然而，一旦它被填充了值，我们就用这些值填充模板。由于模板中存在一些重复，所以有一些优化的空间。这将是一个很好的练习，可以自己改进！
- en: Now, we have some means of motivating our users to start filling in more exercises!
    Let’s now see if we can display individual workouts too.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一些方法来激励我们的用户开始填写更多的锻炼！现在让我们看看我们是否也能显示个人的锻炼。
- en: History and overview
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 历史和概述
- en: 'To retrieve our workouts, we’ll add a new method to our fitness store. We have
    another view lined up for this particular goal! Let’s take a look at the updated
    fitness store file: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.13-fitness.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.13-fitness.ts).'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检索我们的锻炼，我们将在健身商店中添加一个新的方法。为此目的，我们还有一个视图准备就绪！让我们看看更新的健身商店文件：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.13-fitness.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.13-fitness.ts)。
- en: As you can see, with the workouts (*line 15*) and the method of retrieving the
    workouts (*lines 20-46*), we’ve exposed a new dataset to show in the app.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，通过锻炼（*第15行*）和检索锻炼的方法（*第20-46行*），我们向应用中暴露了一个新的数据集。
- en: 'With these changes, we can add some additional content to our `History.vue`
    file. We’ll begin by importing the data from the store and simply outputting it
    in the template: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.14-History.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.14-History.vue).'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些更改，我们可以在我们的`History.vue`文件中添加一些额外的内容。我们将首先从商店导入数据，并在模板中简单地输出它：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.14-History.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.14-History.vue)。
- en: 'This addition provides us with an overview of workout entries from the database
    view (*lines 6-7*, *9*, *28*), which are presented in expansion panels from Vuetify
    (*lines 36-45*). But as you can see, we need to massage the data a bit, since
    it’s now showing an individual line per combination of workout and exercise. We
    want to group the data by workout, so we’ll create a function to transform our
    data and add a bit more structure. Take a look at the next iteration of the `History.vue`
    file: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.15-History.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.15-History.vue).'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这个添加为我们提供了从数据库视图的概述（*第 6-7 行，第 9 行，第 28 行*），这些数据以 Vuetify 的展开面板形式呈现（*第 36-45
    行*）。但正如你所看到的，我们需要对数据进行一些调整，因为它现在显示的是每个锻炼和练习组合的单独一行。我们希望按锻炼分组数据，因此我们将创建一个函数来转换我们的数据并添加更多的结构。请查看
    `History.vue` 文件的下一个迭代版本：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.15-History.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.15-History.vue)。
- en: 'This will net us with unique IDs so that we can identify every workout, and
    we’ve remodeled the data so that every unique workout has a collection of corresponding
    exercises as a child (*lines 23-33*). We’re doing something similar with exercises:
    grouping them based on the `exercise_name` property.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就能得到唯一的 ID，以便我们能够识别每一个锻炼，并且我们已经重新设计了数据，使得每个唯一的锻炼都有一个对应的练习集合作为子项（*第 23-33
    行*）。我们在练习上也做了类似的事情：根据 `exercise_name` 属性对它们进行分组。
- en: In this case, we’re opting for this particular approach because we only have
    to query the database once. There are multiple ways of optimizing database queries,
    and we’re now choosing to take the data from the database as is and model it in
    our app to suit our needs.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们选择这种特定的方法，因为我们只需要查询数据库一次。有多种优化数据库查询的方法，我们现在选择直接从数据库中获取数据，并在我们的应用程序中对其进行建模以满足我们的需求。
- en: We’ve also updated the panels to iterate over `workoutIds` and display the restructured
    (part of the) workout based on the `id` property (*lines 53-63*).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还更新了面板，使其遍历 `workoutIds` 并根据 `id` 属性显示重构的（部分）锻炼（*第 53-63 行*）。
- en: 'As a final step, we can create a small component to show the exercise. We’ll
    create a `GroupedExerciseView.vue` component and add the following contents: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.16-GroupedExerciseView.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.16-GroupedExerciseView.vue).'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后一步，我们可以创建一个小的组件来显示锻炼。我们将创建一个 `GroupedExerciseView.vue` 组件并添加以下内容：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.16-GroupedExerciseView.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.16-GroupedExerciseView.vue)。
- en: 'We can then import and use the Vue component in our panel by passing the exercise
    set as a property:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将练习集作为属性传递来导入并使用我们的面板中的 Vue 组件：
- en: '[PRE26]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We can then pass it to the template:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以将其传递到模板中：
- en: '[PRE27]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We can use this last component, slightly modified in our overview of adding
    a workout as well, to display what the user will be saving in a nicely formatted
    manner.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用这个最后修改过的组件，在我们的添加锻炼的概述中，以优雅的格式显示用户将要保存的内容。
- en: 'The data will be slightly different, so we’ll create a `wrapper` component
    to modify the data before sending it as an exercise to the `GroupedExerciseView.vue`
    component. We’ll name the new file `ExerciseGrouping.vue`: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.17-ExerciseGrouping.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.17-ExerciseGrouping.vue).'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 数据将略有不同，因此我们将创建一个 `wrapper` 组件来修改数据，然后再将其作为练习发送到 `GroupedExerciseView.vue` 组件。我们将新文件命名为
    `ExerciseGrouping.vue`：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.17-ExerciseGrouping.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.17-ExerciseGrouping.vue)。
- en: 'Here, we’re also using the component, but we make sure that data in a different
    format is modified to fit with the component. To make this visible, we’ll import
    the `ExerciseGrouping.vue` component in our `TrackExercise.vue` file and display
    its values:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们也在使用这个组件，但我们确保以不同的格式修改数据以适应组件。为了使其可见，我们将在 `TrackExercise.vue` 文件中导入 `ExerciseGrouping.vue`
    组件并显示其值：
- en: '[PRE28]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This helps our users in tracking their future exercises even better. These are
    relatively simple representations of data. Let’s see if we can add more complex
    visualizations such as graphs.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于我们的用户更好地跟踪未来的锻炼。这些是相对简单的数据表示。让我们看看我们是否可以添加更复杂的数据可视化，如图表。
- en: Graphs
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图表
- en: When working with larger sets of data, it is very common to need visualization
    at some point. We’ll implement different graphs by adopting a third-party library
    (`chart.js`) and have it render our tracked data! At this point, it would be helpful
    to have multiple workouts tracked over a certain timespan as well. This creates
    a more useful experience in visualizing the data.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理大量数据时，在某个时候进行可视化是非常常见的。我们将通过采用第三方库（`chart.js`）来实现不同的图表，并使其渲染我们的跟踪数据！在这个时候，跟踪一定时间范围内的多个锻炼将有助于创建更直观的数据可视化体验。
- en: With specific and complex challenges, it is often more efficient to reach for
    a third-party library than build a solution on your own. In this case, we’ll have
    a look at a library that connects `chart.js` to Vue.js and apply it to our app.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 面对具体和复杂的挑战，通常比自行构建解决方案更有效的是求助于第三方库。在这种情况下，我们将查看一个将`chart.js`连接到Vue.js的库，并将其应用于我们的应用程序。
- en: Depending on vue-chartjs
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 根据`vue-chartjs`
- en: We use a library for displaying charts. In this case, the `vue-chartjs` package
    helps us integrate the framework-agnostic `chart.js` with our Vue.js app. It is
    quite common to use a third-party wrapper to better embed an underlying library
    into your framework.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个库来显示图表。在这种情况下，`vue-chartjs`包帮助我们集成框架无关的`chart.js`与我们的Vue.js应用程序。使用第三方包装器更好地将底层库嵌入到框架中是非常常见的。
- en: This usually helps in abstracting concepts and behavior that we know from our
    framework and translating it to and from the library, which acts unaware of its
    ecosystem. This way, we don’t have to deal with the integration layer and can
    focus on adding features that matter to our end users.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常有助于从我们的框架中抽象出已知的概念和行为，并将其翻译到库中，而库对此生态系统一无所知。这样，我们就不必处理集成层，可以专注于添加对我们最终用户有意义的特性。
- en: 'Let’s build some graphs! We’re going to install both `vue-chartjs` and the
    core `chart.js` libraries:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一些图表！我们将安装`vue-chartjs`和核心的`chart.js`库：
- en: '[PRE29]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We’ll create a new route called `graph` with a view that loads an empty component
    and an addition to the menu.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的路由`graph`，其中包含一个加载空组件和菜单添加的视图。
- en: 'In the router file, we add the following entry:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在路由文件中，我们添加以下条目：
- en: '[PRE30]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This indicated to us that we need to create a `Graph.vue` file in the `views`
    folder, so let’s do that:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明我们需要在`views`文件夹中创建一个`Graph.vue`文件，所以让我们这么做：
- en: '[PRE31]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'And we’ll create a `Graph.vue` component to start building different kinds
    of graphs on the route. Let’s start with a `panel` expansion template: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.18-Graph.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.18-Graph.vue).'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个`Graph.vue`组件，在路由上开始构建不同类型的图表。让我们从一个`panel`扩展模板开始：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.18-Graph.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.18-Graph.vue)。
- en: 'As soon as we add the entry to the `menuItems` collection in our `AppMenu.ts`
    file, we can navigate to our final page for this project:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在`AppMenu.ts`文件中的`menuItems`集合中添加条目，我们就可以导航到这个项目的最终页面：
- en: '[PRE32]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As you can see from the page, we’ll implement three types of charts, with various
    content of our tracked workouts.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如页面所示，我们将实现三种类型的图表，展示我们跟踪锻炼的各种内容。
- en: Piece of pie (chart)
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一块饼图（图表）
- en: 'As we will see, generating a chart using a library is very straightforward!
    We have to bear in mind that a `chart` component expects data in a fixed format,
    as in this example:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将看到的，使用库生成图表非常简单！我们必须记住，`chart`组件期望数据以固定格式，就像这个例子一样：
- en: '[PRE33]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This inevitably means that we need to do some data remodeling, so let’s do
    that first. We actually need a bit more of a detailed response from our data,
    so we’ll add the following functions to our fitness store:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这不可避免地意味着我们需要进行一些数据重构，所以让我们先做这件事。实际上，我们需要从数据中获得更多详细的信息，因此我们将在我们的健身存储中添加以下功能：
- en: '[PRE34]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The key difference is in the `select` query, where we also request sets with
    their properties. Of course, we also need to return these new methods from the
    store. The data from the database, however, is not ready to be used in the graph,
    since it expects a different format. Again, this happens regularly in real-life
    scenarios, so let’s build a solution.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 关键区别在于`select`查询，我们在这里还请求了带有其属性的集合。当然，我们还需要从存储库返回这些新方法。然而，数据库中的数据尚未准备好用于图表，因为它期望不同的格式。在现实生活中的场景中，这种情况经常发生，所以让我们构建一个解决方案。
- en: 'We create a new store called `graph.ts`, and we’ll start with a function that
    returns data for our pie chart: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.19-graph.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.19-graph.ts).'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`graph.ts`的新存储库，并从返回饼图数据的函数开始：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.19-graph.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.19-graph.ts).
- en: Here, we’re getting the workout data and returning it as an object that’s compatible
    with a pie chart.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在获取锻炼数据，并以与饼图兼容的对象形式返回它。
- en: 'Now, we’ll create a component called `GraphPie.vue` in our `components` folder
    where we use the store, with some configuration for the graph type, to render
    a pie chart based on workout data: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.20-GraphPie.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.20-GraphPie.vue).'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在`components`文件夹中创建一个名为`GraphPie.vue`的组件，其中我们将使用存储库，并针对图表类型进行一些配置，以根据锻炼数据渲染饼图：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.20-GraphPie.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.20-GraphPie.vue).
- en: 'With our `PieChart` component completed, we’ll import it into the `Graph.vue`
    component, and then we can replace the line in the collapsible:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`PieChart`组件完成之后，我们将将其导入到`Graph.vue`组件中，然后我们可以替换可折叠中的行：
- en: '[PRE35]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Depending on the availability and content of the data, you will end up with
    a user interface that resembles this:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 根据数据的可用性和内容，你最终将得到一个类似于以下用户界面的界面：
- en: '![Figure 6.9 – Example workout data represented in a pie chart](img/B19563_06_09.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图6.9 – 以饼图形式表示的示例锻炼数据](img/B19563_06_09.jpg)'
- en: Figure 6.9 – Example workout data represented in a pie chart
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 – 以饼图形式表示的示例锻炼数据
- en: Using `vue-chartjs`, it’s been relatively easy for us to visualize datasets.
    We have worked on making sure that our data is formatted in the way the library
    expects. With that in mind, we can proceed in expanding to different types of
    visualizations.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`vue-chartjs`，我们相对容易地可视化了数据集。我们已经努力确保我们的数据格式与库期望的方式一致。考虑到这一点，我们可以继续扩展到不同类型的可视化。
- en: More charts!
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多图表！
- en: 'Looking at our collapsible examples, we’re going to build two more charts,
    just to get a feel of multiple implementations. We’ll update our graph store with
    more features. We’ll create an internal method that we can reuse in both our graphs
    and then create a public method on the store to retrieve data: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.21-graph.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.21-graph.ts).'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 看看我们的可折叠示例，我们将再构建两个图表，只是为了感受多种实现方式。我们将更新我们的图形存储库以添加更多功能。我们将创建一个可以在我们的图表中重复使用的内部方法，然后在存储库上创建一个公共方法来检索数据：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.21-graph.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.21-graph.ts).
- en: We’re creating a helper function (`createGraphData`, *lines 11-46*) to gather
    and format the data based on a monthly average. For our two distinct types of
    graphs, we’ll create one function called `getGraphMonthlyAverage` (*lines 48-58*).
    Since the library expects data in a predefined format, we can use the same data
    presented in different ways.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个辅助函数（`createGraphData`，第11-46行）来收集和格式化基于月平均的数据。对于我们的两种不同类型的图表，我们将创建一个名为`getGraphMonthlyAverage`（第48-58行）的函数。由于库期望数据以预定义的格式，我们可以以不同的方式呈现相同的数据。
- en: 'To showcase this, we’ll create a bar graph as well as a line graph from the
    same data. First, the bar graph; the code is very similar to the pie graph, with
    our abstractions in place. We’ll call this component `GraphBar.vue`: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.22-GraphBar.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.22-GraphBar.vue).'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示这一点，我们将从相同的数据创建一个条形图以及一个折线图。首先，条形图；代码与饼图非常相似，我们的抽象已经到位。我们将把这个组件称为`GraphBar.vue`：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.22-GraphBar.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.22-GraphBar.vue)。
- en: 'This is how the bar graph would render to the browser:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是条形图在浏览器中的渲染方式：
- en: '![Figure 6.10 – Example workout data represented in a bar chart](img/B19563_06_10.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![图6.10 – 以条形图表示的示例锻炼数据](img/B19563_06_10.jpg)'
- en: Figure 6.10 – Example workout data represented in a bar chart
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10 – 以条形图表示的示例锻炼数据
- en: 'Not so different from our previous graph component! We’ll do the same for a
    line graph, called `GraphLine.vue`, as you might have guessed: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.23-GraphLine.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.23-GraphLine.vue).'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前的图形组件没有太大区别！我们将为折线图做同样的事情，称为`GraphLine.vue`，正如你可能猜到的：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.23-GraphLine.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.23-GraphLine.vue)。
- en: 'This is how the line graph would render to the browser:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是折线图在浏览器中的渲染方式：
- en: '![Figure 6.11 – Example workout data represented in a line chart](img/B19563_06_11.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11 – 以折线图表示的示例锻炼数据](img/B19563_06_11.jpg)'
- en: Figure 6.11 – Example workout data represented in a line chart
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11 – 以折线图表示的示例锻炼数据
- en: We could even abstract repetitive code in a Vue component that is capable of
    rendering the data as different types of graphs. That would be a nice exercise
    for you to pursue as an extra assignment. Try swapping out the `getGraphPie` data
    with the `getGraphMonthlyAverage` data, and you’ll see that the graph just accepts
    these new values since they follow the right shape.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以在一个能够以不同类型图形渲染数据的Vue组件中抽象重复的代码。这将是一个很好的额外作业练习。尝试用`getGraphPie`数据替换`getGraphMonthlyAverage`数据，你会发现图表只是接受这些新值，因为它们遵循正确的形状。
- en: 'To complete this chapter, we’ll add the components to our user interface, in
    the `Graph.vue` file:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这一章，我们将在`Graph.vue`文件中添加组件：
- en: '[PRE36]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: With that, we’ve built an app where users can log in and track and retrieve
    their individual results.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们构建了一个应用程序，用户可以登录并跟踪和检索他们的个人结果。
- en: Summary
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We’ve seen how we can use the concepts of stores, composables, and nested components
    to build a relatively complex user flow. For security, we depend on the authorization
    model by Supabase, which helps us achieve our results in an efficient way.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何使用存储、组合组件和嵌套组件的概念来构建一个相对复杂的使用流程。为了安全起见，我们依赖于Supabase的授权模型，这有助于我们以高效的方式实现我们的目标。
- en: Taking a look at the Supabase structure and data is helpful in understanding
    the way certain endpoints store and offer their data. Up until this point, we’ve
    just been consuming data. Under the hood, every Supabase instance is a dedicated
    PostgreSQL database. If you want to know more about PostgreSQL, I highly recommend
    checking out *Developing Modern Database Applications with PostgreSQL* by Dr.
    Quan Ha Le and Marcelo Diaz, at [https://www.packtpub.com/product/developing-modern-database-applications-with-postgresql/9781838648145](https://www.packtpub.com/product/developing-modern-database-applications-with-postgresql/9781838648145).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 查看Supabase结构和数据有助于理解某些端点如何存储和提供他们的数据。到目前为止，我们只是消费数据。在底层，每个Supabase实例都是一个专用的PostgreSQL数据库。如果你想了解更多关于PostgreSQL的信息，我强烈推荐查看Dr.
    Quan Ha Le和Marcelo Diaz合著的《使用PostgreSQL开发现代数据库应用程序》一书，可在[https://www.packtpub.com/product/developing-modern-database-applications-with-postgresql/9781838648145](https://www.packtpub.com/product/developing-modern-database-applications-with-postgresql/9781838648145)找到。
- en: With more complex tasks, it makes sense to take a step-by-step approach to building
    the feature, which is something I’ve also demonstrated. This sometimes means revisiting
    certain files to make small additions while we learn more about features along
    the way. Even when requirements are very clear upfront, it can be really helpful
    to break features up into smaller parts and follow their path in the app file
    structure while building.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 面对更复杂的任务，采取逐步构建功能的方法是有意义的，这也是我展示过的做法。这有时意味着在了解更多关于功能的同时，需要重新访问某些文件进行小的添加。即使一开始需求非常明确，将功能分解成更小的部分并在构建过程中跟踪它们在应用程序文件结构中的路径，也是非常有益的。
- en: 'We’ve applied a certain level of abstraction but also took a pragmatic approach
    in parts. It can be difficult to find this balance, but I do tend to favor some
    repetition to prevent over-engineering: this often results in more readable code
    that is easier to make small changes to.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在部分地方应用了一定程度的抽象，同时也采取了一种实用主义的方法。找到这种平衡可能很困难，但我确实倾向于通过一些重复来防止过度设计：这通常会导致更易于阅读的代码，并且更容易进行小的修改。
- en: I do favor separating a component into parts with a specific role. The store
    composition is a good example of this, just as with our Supabase client file.
    With the **separation of concerns** (**SoC**), we can limit the complexity of
    each individual part to make it more scalable and manageable in the future.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实倾向于将组件分解成具有特定角色的部分。存储组件的构成就是一个很好的例子，就像我们的 Supabase 客户端文件一样。通过**关注点分离**（**SoC**），我们可以限制每个单独部分的复杂性，使其在未来更具可扩展性和可管理性。
- en: We’ve built apps specifically for the web. In the next chapter, we’ll see how
    we can create projects to target different environments.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们专门为网络构建了应用程序。在下一章中，我们将看到如何创建针对不同环境的项目。
