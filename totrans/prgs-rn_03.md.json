["```js\nnpx react-native init videoexample \n    --template react-native-template-typescript\n```", "```js\nconst App = () => {\n  const [page, setPage] = useState<number>(PAGES.HOME);\n  const [genre, setGenre] = useState<IGenre | \n      undefined>(undefined);\n  const [movie, setMovie] = useState<IMovie | \n      undefined>(undefined);\n  const chooseGenre = (lGenre: IGenre) => {\n    setGenre(lGenre);\n    setPage(PAGES.GENRE);\n  };\n  const chooseMovie = (lMovie: IMovie) => {\n    setMovie(lMovie);\n    setPage(PAGES.MOVIE);\n  };\n  const backToGenres = () => {\n    setMovie(undefined);\n    setPage(PAGES.GENRE);\n  };\n  const backToHome = () => {\n    setMovie(undefined);\n    setGenre(undefined);\n    setPage(PAGES.HOME);\n  };\n  switch (page) {\n    case PAGES.HOME:\n      return <Home chooseGenre={chooseGenre} />;\n    case PAGES.GENRE:\n      return (\n        <Genre\n          backToHome={backToHome}\n          genre={genre}\n          chooseMovie={chooseMovie}\n        />\n      );\n    case PAGES.MOVIE:\n      return <Movie backToGenres={backToGenres} \n          movie={movie} />;\n  }\n};\n```", "```js\nimport {getGenres} from '../../services/movieService';\ninterface HomeProps {\n  chooseGenre: (genre: IGenre) => void;\n}\nconst Home = (props: HomeProps) => {\n  const [genres, setGenres] = useState<IGenre[]>([]);\n  useEffect(() => {\n    setGenres(getGenres());\n  }, []);\n  return (\n    <ScrollContainer>\n      <Header text=\"Movie Genres\" />\n      {genres.map(genre => {\n        return (\n          <Pressable onPress={() => \n               props.chooseGenre(genre)}>\n               <Text style={styles.genreTitle}>{genre.name}\n                   </Text>\n          </Pressable>\n        );\n      })}\n    </ScrollContainer>\n  );\n};\n```", "```js\n  useEffect(() => {\n    if (typeof props.genre !== 'undefined') {\n      setMovies(getMoviesByGenreId(props.genre.id));\n    }\n  }, [props.genre]);\n```", "```js\ninterface HeaderProps {\n  text: string;\n}\nconst Header = (props: HeaderProps) => {\n  return <Text style={styles.title}>{props.text}</Text>;\n};\nconst styles = StyleSheet.create({\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 16,\n  },\n});\n```", "```js\nconst genres: IGenre[] = require('../../assets/data/genres.json');\nconst movies: IMovie[] = require('../../assets/data/movies.json');\nconst getGenres = (): Array<IGenre> => {\n  return genres;\n};\nconst getMovies = (): Array<IMovie> => {\n  return movies;\n};\nconst getMovieByGenreId = (genreId: number): \n    Array<IMovie> => {\n        return movies.filter(movie => \n            movie.genre_ids.indexOf(genreId) > -1);\n};\nexport {getGenres, getMovies, getMovieByGenreId };\n```", "```js\ninterface ScrollContainerProps {\n  children: React.ReactNode;\n}\nconst ScrollContainer = (props: ScrollContainerProps) => {\n  return (\n    <SafeAreaView style={styles.backgroundStyle}>\n      <ScrollView\n        contentInsetAdjustmentBehavior=\"automatic\"\n        contentContainerStyle={styles.contentContainer}\n        style={styles.backgroundStyle}>\n        {props.children}\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n```", "```js\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n        num: Math.random() * 100\n    };\n  }\n  render() {\n    return <Text>This is a random number:  \n        {this.state.num}</Text>;\n  }\n}\n```", "```js\n  componentDidMount = () => {\n    this.interval = setInterval(() => {\n      this.setState({ num: Math.random() * 100 });\n    }, 1000);\n  };\n  componentWillUnmount = () => {\n    clearInterval(this.interval);\n  };\n```", "```js\nconst App = () => {\n  const [num, setNum] = useState(Math.random() * 100);\n  return <Text>This is a random number: {num}</Text>;\n};\n```", "```js\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setNum(Math.random() * 100);\n      }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n```", "```js\nconst [example, setExample] = useState(exampleDefaultValue)\n```", "```js\nsetExample(newValue)\n```", "```js\nsetExample(prevValue => prevValue + 1)\n```"]