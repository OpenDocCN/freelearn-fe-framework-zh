- en: Deployment Preparation with webpack Bundling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用webpack打包进行部署准备
- en: We want to deploy our app to the two leading mobile app stores, Apple App Store
    and Google Play; however, there are several things that we need to do to prepare
    our app for distribution.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将我们的应用部署到两个领先的移动应用商店，即Apple App Store和Google Play；然而，我们需要做一些准备，以便我们的应用可以分发。
- en: To ensure that you use the smallest JavaScript size in addition to Angular's
    AoT compiler to help our app execute as fast as possible, we will use webpack
    to bundle everything. It's worth noting that webpack is not a requirement to create
    a distributable NativeScript app. However, it provides very nice benefits that
    should make it an important step for anyone when distributing their apps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们使用最小的JavaScript大小，并辅以Angular的AoT编译器，以帮助我们的应用尽可能快地执行，我们将使用webpack来打包所有内容。值得注意的是，webpack不是创建可分发NativeScript应用的必需品。然而，它提供了非常不错的优势，这应该使它成为任何人在分发他们的应用时的重要步骤。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing webpack for a NativeScript for Angular project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为NativeScript for Angular项目安装webpack
- en: Preparing a project to be bundled with webpack
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备项目以使用webpack进行打包
- en: Solving various webpack bundling issues
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决各种webpack打包问题
- en: A primer on writing your own custom webpack plugin to solve specific cases
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义webpack插件编写指南，用于解决特定情况
- en: Using webpack to bundle the app
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用webpack打包应用
- en: If it weren't for Sean Larkin, you might have never heard of webpack. His contributions
    and involvement in the bundler community have helped bring webpack into the Angular
    CLI and also make it a primary *go-to* bundler for many things. We greatly appreciate
    his efforts and kindness in the community.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有Sean Larkin，你可能永远不会听说webpack。他对打包器社区的贡献和参与帮助webpack进入Angular CLI，并使其成为许多事物的首选*bundler*。我们非常感激他在社区中的努力和善意。
- en: Preparing to use webpack
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备使用webpack
- en: Let's take a look at how webpack can be utilized to reduce the packaged size
    of our NativeScript for Angular app in addition to ensuring that it executes optimally
    on a user's mobile device.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看webpack如何被利用来减少我们的NativeScript for Angular应用的打包大小，同时确保它在用户的移动设备上执行得最优。
- en: 'Let''s first install the plugin:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先安装插件：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This automatically creates a `webpack.config.js` file (at root of project)
    preconfigured with a basic setup that will get you reasonably further with most
    apps. Additionally, it creates a `tsconfig.aot.json` file (also at root of project)
    since NativeScript''s webpack usage will use Angular''s AoT compiler while bundling.
    It also adds some nifty npm scripts to our `package.json` to help handle all the
    various bundling options we will want; consider the following example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这会自动创建一个`webpack.config.js`文件（位于项目根目录），预先配置了基本设置，这将使大多数应用能够合理地进一步发展。此外，它还会创建一个`tsconfig.aot.json`文件（同样位于项目根目录），因为NativeScript的webpack使用将在打包时使用Angular的AoT编译器。它还在`package.json`中添加了一些巧妙的npm脚本，以帮助我们处理所有我们想要的打包选项；考虑以下示例：
- en: '`npm run build-android-bundle` to build for Android'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`npm run build-android-bundle`为Android构建
- en: '`npm run build-ios-bundle` to build for iOS'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`npm run build-ios-bundle`为iOS构建
- en: '`npm run start-android-bundle` to run on Android'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`npm run start-android-bundle`在Android上运行
- en: '`npm run start-ios-bundle` to run on iOS'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`npm run start-ios-bundle`在iOS上运行
- en: However, before we attempt those new commands, we will need to audit our app
    for a couple of things.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们尝试这些新命令之前，我们需要对我们的应用进行一些审计。
- en: 'We should start by ensuring that all NativeScript import paths are preceded
    with `tns-core-modules/[module]`; consider the following example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该首先确保所有NativeScript导入路径都以前缀`tns-core-modules/[module]`开头；考虑以下示例：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We'll go through our app and do this now. This works fine for development and
    production builds.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遍历我们的应用并立即这样做。这对于开发和生产构建都适用。
- en: You might wonder, *Hey! Why did you even use the other form if we needed to
    go through the entire codebase and change the imports after the fact?*
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，“嘿！既然我们需要遍历整个代码库并在事后更改导入，为什么还要使用其他形式呢？”
- en: Great concern! There's actually a ton of examples out there that show the convenient
    shortform import path, so we chose to build the app using that throughout in this
    chapter to demonstrate that it works just fine for development to help avoid confusion,
    in case you come across examples such as these in the future. Besides, it doesn't
    take too much to edit that after the fact to prepare for webpack but now you know.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 极大的关注！实际上，有很多示例展示了方便的短形式导入路径，所以我们选择在整个章节中使用该路径构建应用程序，以演示它对开发来说效果良好，以帮助避免混淆，以防你在未来遇到这样的示例。此外，实际上在事后编辑它以准备webpack并不需要太多，但现在你知道了。
- en: 'Run the following command right now:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 立即运行以下命令：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can see the following errors—which I have enumerated—and we will present
    solutions for it sequentially in the next section:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到以下错误——我已经列举了它们——我们将在下一节中按顺序提供解决方案：
- en: ERROR in Unexpected value `SlimSliderDirective` in `/path/to/TNSStudio/app/modules/player/directives/slider.directive.d.ts
    declared by the module PlayerModule in /path/to/TNSStudio/app/modules/player/player.module.ts`.
    Please add a `@Pipe/@Directive/@Component` annotation.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误：在`/path/to/TNSStudio/app/modules/player/directives/slider.directive.d.ts`中意外值`SlimSliderDirective`，由模块`PlayerModule`在`/path/to/TNSStudio/app/modules/player/player.module.ts`中声明。请添加`@Pipe/@Directive/@Component`注解。
- en: ERROR in Cannot determine the module for class `SlimSliderDirective` in `/path/to/TNSStudio/app/modules/player/directives/slider.directive.android.ts`!
    Add `SlimSliderDirective` to the `NgModule` to fix it. Cannot determine the module
    for class `SlimSliderDirective` in `/path/to/TNSStudio/app/modules/player/directives/slider.directive.ios.ts`!
    Add `SlimSliderDirective` to the `NgModule` to fix it.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误：无法确定类`SlimSliderDirective`的模块，在`/path/to/TNSStudio/app/modules/player/directives/slider.directive.android.ts`！将`SlimSliderDirective`添加到`NgModule`中修复它。无法确定类`SlimSliderDirective`的模块，在`/path/to/TNSStudio/app/modules/player/directives/slider.directive.ios.ts`！将`SlimSliderDirective`添加到`NgModule`中修复它。
- en: ERROR in Error encountered resolving symbol values statically. Calling function
    `ModalDialogParams`, function calls are not supported. Consider replacing the
    function or lambda with a reference to an exported function, resolving symbol
    `RecorderModule` in `/path/to/TNSStudio/app/modules/recorder/recorder.module.ts`,
    resolving symbol `RecorderModule` in `/path/to/TNSStudio/app/modules/recorder/recorder.module.ts`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误：在静态解析符号值时遇到错误。调用函数`ModalDialogParams`，不支持函数调用。考虑用导出函数的引用替换该函数或lambda，解析符号`RecorderModule`在`/path/to/TNSStudio/app/modules/recorder/recorder.module.ts`，解析符号`RecorderModule`在`/path/to/TNSStudio/app/modules/recorder/recorder.module.ts`。
- en: 'ERROR in Entry module not found: Error: Can''t resolve `./app.css` in `/path/to/TNSStudio/app`.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误：入口模块未找到：错误：无法解析`./app.css`在`/path/to/TNSStudio/app`。
- en: ERROR in [copy-webpack-plugin] unable to locate `app.css` at `/path/to/TNSStudio/app/app.css`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误：[copy-webpack-plugin]无法在`/path/to/TNSStudio/app/app.css`中找到`app.css`。
- en: The first three errors are purely Angular **Ahead of Time** (**AoT**) compilation
    related. The last two are purely related to webpack configuration. Let's look
    at each error and how to properly resolve it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个错误纯粹与Angular **Ahead of Time** （**AoT**）编译相关。最后两个纯粹与webpack配置相关。让我们逐一查看每个错误以及如何正确解决它。
- en: 'Solution #1: Unexpected value ''SlimSliderDirective...'''
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '解决方案 #1：意外值 ''SlimSliderDirective...'''
- en: 'Consider the first complete error mentioned in the preceding section:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑前一小节中提到的第一个完整错误：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The solution to the preceding error is to install an additional webpack plugin:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 解决前述错误的方案是安装一个额外的webpack插件：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, open `webpack.config.js` and configure the plugin as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开`webpack.config.js`并按以下方式配置插件：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will find the `slider.directive` import in `app/modules/players/directives/index.ts`
    and append the correct target platform suffix, so the AoT compiler will pick up
    the right target platform implementation file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这将找到`app/modules/players/directives/index.ts`中的`slider.directive`导入，并附加正确的目标平台后缀，因此AoT编译器将选择正确的目标平台实现文件。
- en: At the time of writing this book, a solution did not exist for that error, so
    we developed the `nativescript-webpack-import-replace` plugin to solve. Since
    you might encounter situations with webpack bundling that may require some additional
    webpack help via a plugin, we will share an overview of how we developed the plugin
    to solve that error in the event that you encounter other obscure errors that
    might require you to create a plugin.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，该错误还没有解决方案，因此我们开发了 `nativescript-webpack-import-replace` 插件来解决这个问题。由于你可能会遇到需要通过插件提供一些额外
    webpack 帮助的 webpack 捆绑情况，我们将分享我们如何开发插件来解决该错误的概述，以防你遇到其他可能需要创建插件的晦涩错误。
- en: Let's look at solutions for the initial remaining errors first, and then we'll
    highlight webpack plugin development.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看剩余的初始错误解决方案，然后我们将突出 webpack 插件开发。
- en: 'Solution #2: Cannot determine the module for class SlimSliderDirective...'
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '解决方案 #2：无法确定类 SlimSliderDirective 的模块...'
- en: 'Consider the second complete error mentioned in the *Preparing to use webpack*
    section:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到在 *准备使用 webpack* 部分提到的第二个完整错误：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The solution to the preceding error is to open `tsconfig.aot.json`, and make
    the following change:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 解决前面错误的方法是打开 `tsconfig.aot.json`，并做出以下更改：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Since AoT compilation uses the `tsconfig.aot.json` configuration, we want to
    be more specific with the files that are targeted for compilation. Since `./app/main.ts`
    is our entry point to bootstrap the app, we will target that file and remove the
    `exclude` block.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 AoT 编译使用 `tsconfig.aot.json` 配置，我们希望针对编译的目标文件更加具体。由于 `./app/main.ts` 是我们启动应用的入口点，我们将针对该文件，并移除
    `exclude` 块。
- en: 'If we were to try bundling now at this point, we would have solved the error
    we saw; however, we would see the following *new* errors:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在尝试捆绑，我们会解决我们看到的错误；然而，我们会看到以下 *新* 错误：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is because we are targeting our `./app/main.ts`, which branches out to
    all other imports to our app's files, except to those modules that are lazy loaded.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们针对 `./app/main.ts`，它分支到我们应用的所有其他导入文件，除了那些懒加载的模块。
- en: 'The solution to the preceding error is to add lazy-loaded module paths in the
    `files` section:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 解决前面错误的方法是在 `files` 部分添加懒加载模块路径：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Okay, we solved the `lazy` error; however, now this reveals several *new* errors,
    as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们已经解决了 `lazy` 错误；然而，现在这揭示了几个 *新* 错误，如下所示：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Right about now...
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 大概就在这个时候...
- en: The funk soul brother.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 那个funk soul兄弟。
- en: Yes, you might be singing Fatboy Slim or about to lose your mind, and we understand.
    Bundling with webpack can be quite an adventure at times. The best advice that
    we can provide is to maintain patience and diligence to handle one error at a
    time; we're almost there.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你可能正在唱 Fatboy Slim 或即将失去理智，我们理解。有时使用 webpack 捆绑可能相当冒险。我们能提供的最好建议是保持耐心和勤奋，一次处理一个错误；我们几乎做到了。
- en: 'The solution to the preceding error is to include the iOS and Android platform
    declarations since we are using native APIs in our app:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 解决前面错误的方法是包含 iOS 和 Android 平台声明，因为我们正在我们的应用中使用原生 API：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Hooray, we have now fully resolved the second issue. Let's move on to the next
    one.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 哈喽，我们现在已经完全解决了第二个问题。让我们继续下一个问题。
- en: 'Solution #3: Error encountered resolving symbol values statically'
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '解决方案 #3：在静态解析符号值时遇到错误'
- en: 'Consider the third complete error mentioned in the *Preparing to use webpack* section:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到在 *准备使用 webpack* 部分提到的第三个完整错误：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The solution to the preceding error is to open `app/modules/recorder/recorder.module.ts`
    and make the following change:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 解决前面错误的方法是打开 `app/modules/recorder/recorder.module.ts`，并做出以下更改：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will satisfy the Angular AoT compiler's need to resolve symbols statically.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将满足 Angular AoT 编译器静态解析符号的需求。
- en: 'Solution #4 and #5: Can''t resolve ''./app.css'''
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '解决方案 #4 和 #5：无法解析 ''./app.css'''
- en: 'Consider the 4th and 5th errors mentioned in the *Preparing to use webpack* section:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到在 *准备使用 webpack* 部分提到的第 4 和第 5 个错误：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The solution to the preceding error is actually related to the fact that we
    are using platform-specific `.ios.css` and `.android.css`, which is compiled via
    SASS. We need to update our webpack config so that it knows this. Open `webpack.config.js`,
    which the plugin added for us automatically, and make the following changes:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 解决前面错误的方法实际上与我们在使用特定平台的 `.ios.css` 和 `.android.css` 有关，这些文件通过 SASS 编译。我们需要更新我们的
    webpack 配置，使其知道这一点。打开插件为我们自动添加的 `webpack.config.js`，并做出以下更改：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Okay, we now have the bundling issues all cleared, or wait....**do we?!**
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们现在已经解决了所有捆绑问题，或者等等....**我们真的解决了吗？！**
- en: 'We haven''t tried to run the app yet in a simulator or on a device. If we were
    to try and do this now using `npm run start-ios-bundle` or via XCode or `npm run
    start-android-bundle`, you might get an app crash right when it tries to boot
    with an error like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有在模拟器或设备上尝试运行应用程序。如果我们现在使用`npm run start-ios-bundle`或通过XCode或`npm run start-android-bundle`来尝试这样做，您可能会在应用程序尝试启动时遇到崩溃，并出现如下错误：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The solution to the preceding error is to ensure that your app contains an `./app/main.aot.ts`
    file with the following contents:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 解决前面错误的方法是确保您的应用程序包含一个`./app/main.aot.ts`文件，并包含以下内容：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you recall we have a demo composition setup which loads it''s track files
    from an `audio` folder. We also utilize font-awesome icons with the help of a
    font-awesome.css file loaded from an `assets` folder. We need to make sure these
    folders also get copied into our production webpack build. Open `webpack.config.js`
    and make the following change:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还记得，我们有一个演示组合设置，它从`audio`文件夹加载其音轨文件。我们还利用了来自`assets`文件夹的font-awesome.css文件中的font-awesome图标。我们需要确保这些文件夹也复制到我们的生产webpack构建中。打开`webpack.config.js`并做出以下更改：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: SUCCESS!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！
- en: 'We can now run our bundled app with no errors using the following commands:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用以下命令运行我们的捆绑应用程序，而不会出现任何错误：
- en: '`npm run start-ios-bundle`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run start-ios-bundle`'
- en: Opening the XCode project and running `npm run start-android-bundle`
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开XCode项目并运行`npm run start-android-bundle`
- en: It's worth noting that all the changes we made to enable webpack bundling for
    release of our app also work perfectly well in development, so rest assured that
    you have only improved your app's setup at this point.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，我们为了使应用程序能够进行webpack捆绑发布所做的所有更改，在开发中也同样完美有效，所以请放心，您在这个阶段只是改进了应用程序的设置。
- en: Detour – Overview of developing a webpack plugin
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 偏航 - 开发webpack插件的概述
- en: 'We now want to return to the first error we encountered when bundling our app
    which was:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在想回到我们在捆绑应用程序时遇到的第一个错误，它是这样的：
- en: ERROR in Unexpected value `SlimSliderDirective` in `/path/to/TNSStudio/app/modules/player/directives/slider.directive.d.ts`
    declared by the module `PlayerModule` in `/path/to/TNSStudio/app/modules/player/player.module.ts`.
    Please add a `@Pipe/@Directive/@Component` annotation.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误：在`/path/to/TNSStudio/app/modules/player/directives/slider.directive.d.ts`中意外值`SlimSliderDirective`由模块`PlayerModule`在`/path/to/TNSStudio/app/modules/player/player.module.ts`中声明。请添加`@Pipe/@Directive/@Component`注解。
- en: A solution for this error did not exist at the time of writing this book, so
    we created the `nativescript-webpack-import-replace` ([https://github.com/NathanWalker/nativescript-webpack-import-replace](https://github.com/NathanWalker/nativescript-webpack-import-replace))
    plugin to solve the problem.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，这个错误还没有解决方案，所以我们创建了`nativescript-webpack-import-replace`([https://github.com/NathanWalker/nativescript-webpack-import-replace](https://github.com/NathanWalker/nativescript-webpack-import-replace))插件来解决这个问题。
- en: Developing a webpack plugin in detail is out of the scope of this book, but
    we wanted to give you some highlights to the process in case you end up needing
    to create one to solve a particular case for your app.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 详细介绍开发webpack插件超出了本书的范围，但我们想为您提供一些关于该过程的亮点，以防您需要为您的应用程序创建一个来解决特定情况。
- en: 'We started by creating a separate project with a `package.json` file so we
    could install our webpack plugin like any other npm plugin:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建了一个单独的项目，并包含一个`package.json`文件，这样我们就可以像安装其他npm插件一样安装我们的webpack插件：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `nativescript` key actually helps categorize this plugin on the various
    NativeScript plugin listing sites.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`nativescript`键实际上有助于在各个NativeScript插件列表网站上对这个插件进行分类。'
- en: 'We then created `lib/ImportReplacePlugin.js` to represent the actual plugin
    class we would be able to import and use in our webpack config. We created this
    file inside a `lib` folder for good measure in case we need to add extra supporting
    files to aid our plugin for a nice clean separation of concerns with our plugin
    organization. In this file, we set up an export by defining a closure containing
    a constructor for our plugin:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建了`lib/ImportReplacePlugin.js`来表示我们将在webpack配置中导入和使用的实际插件类。我们在这个`lib`文件夹中创建了此文件，以防万一我们需要添加额外的支持文件来帮助我们的插件，以便在插件组织中获得良好的关注点分离。在这个文件中，我们通过定义一个包含我们的插件构造函数的闭包来设置导出：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will take the target `platform` defined in our webpack config and pass
    it through as options along with a `files` collection, which will contain all
    the filenames of the imports we need to replace.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这将接受我们在webpack配置中定义的目标`platform`，并将其作为选项传递，同时附带一个`files`集合，该集合将包含我们需要替换的所有导入的文件名。
- en: 'We then want to wire into webpack''s `make` lifecycle hook to grab hold of
    the source files being processed in order to parse them:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来想要连接到 webpack 的 `make` 生命周期钩子，以便抓取正在处理的源文件以便解析：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This grabs hold of all the AoT source files. Then we setup a loop to process
    them one by one and add processing methods for what we need:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将抓取所有的 AoT 源文件。然后我们设置一个循环逐个处理它们，并为所需的内容添加处理方法：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'An interesting part to building webpack plugins (*and arguably the most challenging*)
    is working with **Abstract Syntax Trees** (**ASTs**) of your source code. A critical
    aspect of our plugin is getting the "source file" node from the AST as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 构建 webpack 插件的一个有趣的部分（并且可以说是最具挑战性的）是与你的源代码的 **抽象语法树（ASTs**）一起工作。我们插件的一个关键方面是从
    AST 中获取“源文件”节点，如下所示：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This effectively weeds out any other nodes that are not source files since that
    is all our plugin needs to deal with.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这有效地排除了任何其他不是源文件的节点，因为我们的插件只需要处理这些节点。
- en: 'Lastly, we create an `index.js` file in the root to simply export the plugin
    file for use:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在根目录创建一个 `index.js` 文件，以便简单地导出插件文件以供使用：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: With the aid of this webpack plugin, we are able to completely solve all the
    webpack bundling errors we encountered in our app.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 webpack 插件的帮助下，我们能够完全解决我们在应用中遇到的所有 webpack 打包错误。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we prepared our app for distribution by adding webpack into
    our build chain to help ensure that we have the smallest JavaScript size and the
    optimal execution performance of our code. This also enabled Angular's AoT compilation
    on our app, which helps to provide an optimal performance of our code.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们通过将 webpack 添加到我们的构建链中来准备我们的应用分发，以确保我们有最小的 JavaScript 大小和最佳代码执行性能。这也使得
    Angular 的 AoT 编译在我们的应用中成为可能，这有助于提供我们代码的最佳性能。
- en: Along the way, we provided a cookbook of solutions to various webpack bundling
    errors that you might run into during the course of your app's development. In
    addition, we took a high-level look at developing a custom webpack plugin to help
    solve a particular error condition in our app to achieve a successful bundle.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，我们提供了一系列解决方案的食谱，以解决你可能在应用开发过程中遇到的 webpack 打包错误。此外，我们还从高层次的角度探讨了开发自定义 webpack
    插件，以帮助解决我们应用中特定的错误条件，从而实现成功的打包。
- en: Now that we have an optimal bundle of our app code, we are now ready to finish
    our distribution steps to finally deploy our app in the next chapter.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经得到了我们应用代码的最佳打包，我们现在准备完成我们的分发步骤，以便在下一章中最终部署我们的应用。
