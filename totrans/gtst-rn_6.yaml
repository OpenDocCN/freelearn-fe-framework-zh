- en: Chapter 6. Working with Geolocation and Maps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章：使用地理位置和地图
- en: So far you've seen that React Native simplifies the creation of native UI components,
    such as lists, text fields, and buttons, and it gives you simple abstractions,
    such as AsyncStorage, to work with underlying native APIs. Soon, you'll see that
    you also have access to advanced components, such as maps using the `MapView`
    component, and that you can access more advanced native features, such as geolocation
    using React Native's Geolocation API. We'll demonstrate these capabilities by
    adding the ability to capture and save current GPS coordinates with each new note.
    Note that the next two chapters will focus on iOS development, as the feature
    set for Android is not complete.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经看到React Native简化了原生UI组件的创建，例如列表、文本字段和按钮，并且它提供了简单的抽象，例如AsyncStorage，以便与底层原生API一起工作。很快，你将看到你还可以访问更高级的组件，例如使用`MapView`组件的地图，以及你可以访问更高级的原生功能，例如使用React
    Native的地理位置API进行地理位置定位。我们将通过添加捕获和保存每个新笔记的当前GPS坐标的能力来展示这些功能。请注意，接下来的两个章节将专注于iOS开发，因为Android的功能集尚不完整。
- en: 'In this chapter we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Learning how to get the current geolocation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何获取当前地理位置
- en: Listening for changes to the user's position
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听用户位置的变化
- en: Ensuring that our app requires appropriate permissions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保我们的应用程序需要适当的权限
- en: Saving location data with each note
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将位置数据与每个笔记一起保存
- en: Displaying the original locations of all the notes on a `MapView`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`MapView`上显示所有笔记的原始位置
- en: Let's get started!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Introducing the Geolocation API
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍地理位置API
- en: 'React Native provides an easy-to-use abstraction over the native Geolocation
    APIs. It follows the **MDN** (**Mozilla Developer Network**) specification, which
    recommends the following geolocation interface:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: React Native在原生地理位置API上提供了一个易于使用的抽象。它遵循**MDN**（**Mozilla开发者网络**）规范，该规范建议以下地理位置接口：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This method `asynchronously` asks for the device''s current location and will
    call the `success` callback with a `Position` object if it is successful and the
    `error` callback if it fails (usually, due to misconfigured permissions in your
    app or the user explicitly rejecting the request to allow your app to know their
    location). The `options` argument allows you to request higher position accuracy,
    define how long you''re willing to wait for a response, and specify the maximum
    age of cached data that you''re willing to accept:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法`异步`请求设备的当前位置，如果成功，将使用`Position`对象调用`success`回调，如果失败（通常是由于您的应用程序中权限配置不当或用户明确拒绝允许您的应用程序知道他们的位置），将调用`error`回调。`options`参数允许您请求更高的位置精度，定义您愿意等待响应的时间长度，并指定您愿意接受的缓存数据的最大年龄：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This function enables you to register a function that will be called each time
    the position changes. This function returns an integer that represents the `id`
    of the callback you registered. This allows you to stop listening for updates
    by calling the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能允许您注册一个函数，每次位置变化时都会调用该函数。此函数返回一个整数，表示您注册的回调的`id`。这允许您通过调用以下代码来停止监听更新：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The location permission in iOS
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: iOS中的位置权限
- en: 'Before we begin integrating geolocation into our notes, we need to configure
    a permission to request the user''s location. From Xcode, open `info.plist` and
    make sure that the `NSLocationWhenInUseUsageDescription` key is located in the
    file (it should be enabled by default):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将地理位置集成到我们的笔记之前，我们需要配置一个权限来请求用户的位置。从Xcode中打开`info.plist`，确保`NSLocationWhenInUseUsageDescription`键位于文件中（默认情况下应该已启用）：
- en: '![The location permission in iOS](img/B05162_06_00.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![iOS中的位置权限](img/B05162_06_00.jpg)'
- en: 'Once the application starts up, you should see a permission modal automatically
    pop up in the center of the screen:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序启动，你应该会在屏幕中央自动弹出一个权限模态：
- en: '![The location permission in iOS](img/B05162_06_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![iOS中的位置权限](img/B05162_06_01.jpg)'
- en: Tagging notes with geolocation
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用地理位置标记笔记
- en: 'Let''s take geolocation for a spin and start capturing the user''s location
    when they save a new note. Since we''re going to be using the location data when
    we save notes, we''ll add our code to the `ReactNotes` component in `index.ios.js`
    or `index.android.js`. Let''s begin by adding a function called `trackLocation()`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试地理位置，并在用户保存新笔记时开始捕获用户的位置。由于我们将在保存笔记时使用位置数据，我们将把我们的代码添加到`index.ios.js`或`index.android.js`中的`ReactNotes`组件中。让我们首先添加一个名为`trackLocation()`的函数：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here we call `getCurrentPosition` and provide a callback that will update the
    current state with the position information returned from the device. We also
    provide an error handler if something goes wrong.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们调用`getCurrentPosition`并提供一个回调，该回调将使用设备返回的位置信息更新当前状态。如果出现问题，我们还提供了一个错误处理器。
- en: 'Next, we use `watchPosition()` to register an event handler that will be called
    when the user''s position changes. We also save the `watchId` that is returned
    from this call, so that we can stop listening when the component has been unmounted.
    It is generally good practice to clear up any listeners you initially set up in
    your constructor or `componentDidMount` method from the `componentWillUnmount`
    function:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`watchPosition()`来注册一个事件处理器，当用户的位置发生变化时将被调用。我们还保存从这次调用返回的`watchId`，这样我们就可以在组件卸载时停止监听。通常，在`componentWillUnmount`函数中清除您在构造函数或`componentDidMount`方法中最初设置的任何监听器是良好的实践：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, we''ll call our `trackLocation()` function from the constructor and add
    some notes with the position data to our initial state:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将从构造函数中调用我们的`trackLocation()`函数，并添加一些带有位置数据的笔记到我们的初始状态中：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Saving the position data with a note requires a minor adjustment to our `updateNote()`
    function:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 将位置数据与笔记一起保存需要对我们的`updateNote()`函数进行一些小的调整：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: That's all there is to it! Reload the app, create a new note, and the GPS coordinates
    will be stored when the note is saved for the first time. But how can we visualize
    the position data associated with each of our notes? Let's make a `MapView` to
    display pins for each note!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是全部内容！重新加载应用，创建一个新的笔记，当笔记第一次保存时，GPS坐标将被存储。但是，我们如何可视化与每个笔记关联的位置数据呢？让我们创建一个`MapView`来显示每个笔记的标记！
- en: The complete documentation of geolocation can be found in the React Native documentation
    at [https://facebook.github.io/react-native/docs/geolocation.html](https://facebook.github.io/react-native/docs/geolocation.html).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 地理定位的完整文档可以在React Native文档中找到，网址为[https://facebook.github.io/react-native/docs/geolocation.html](https://facebook.github.io/react-native/docs/geolocation.html)。
- en: NoteLocationScreen
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NoteLocationScreen
- en: Now, since we are capturing the location of the user on note creation, we want
    to display this information in a useful manner. Location data perfectly matches
    up with showing the notes on a map UI. This way the user can visually see all
    of the notes that they have created. We are going to create a new component called
    `NoteLocationScreen` to house our note locations, but before writing the code
    for this screen, let's begin by adding the navigation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，由于我们在创建笔记时捕获了用户的位置，我们希望以有用的方式显示此信息。位置数据与在地图UI上显示笔记完美匹配。这样用户可以直观地看到他们创建的所有笔记。我们将创建一个新的组件`NoteLocationScreen`来存放我们的笔记位置，但在编写此屏幕的代码之前，让我们先添加导航。
- en: 'On the home screen, we want to have a **Map** button in the `navbar` to transition
    to the `NoteLocationScreen`. Update the `LeftButton` and `Title` in `NavigationBarRouteMapper`
    to the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在主页面上，我们希望在`navbar`中有一个**地图**按钮以过渡到`NoteLocationScreen`。更新`NavigationBarRouteMapper`中的`LeftButton`和`Title`如下：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we are defining a new route called `noteLocations`. Notice that we also
    want the `back` button to be displayed on the `noteLocation` route, so we include
    the case along with the `createNote` route.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在定义一个新的路由，称为`noteLocations`。请注意，我们还想在`noteLocation`路由上显示`返回`按钮，因此我们包括与`createNote`路由相同的案例。
- en: 'If you haven''t already, add a new `NoteLocationScreen.js` file to `App/Components/`
    and import it into `ReactNotes`. The last thing we need to do is include it in
    our `renderScene` function. We are going to pass it in the list of notes and the
    same `onSelectNote` function to our `NoteLocationScreen`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有这样做，请向`App/Components/`添加一个新的`NoteLocationScreen.js`文件，并将其导入到`ReactNotes`中。我们最后需要做的是将其包含在我们的`renderScene`函数中。我们将将其传递给`NoteLocationScreen`的笔记列表和相同的`onSelectNote`函数：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: MapView
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MapView
- en: 'MapView is another component provided by React Native to display the map corresponding
    to each platform: Apple Maps on iOS and Google Maps on Android. You can start
    by adding the `MapView` to the `NoteLocationScreen`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: MapView是React Native提供的另一个组件，用于显示每个平台对应的地图：iOS上的Apple Maps和Android上的Google Maps。您可以从将`MapView`添加到`NoteLocationScreen`开始：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![MapView](img/B05162_06_02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![MapView](img/B05162_06_02.jpg)'
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Note
- en: If the map does not show your location on iOS, you may need to enable locations
    in the simulator. Set a custom location by navigating to **Debug** | **Location**
    | **Custom Location**.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在iOS上地图没有显示您的位置，您可能需要在模拟器中启用位置。通过导航到**调试** | **位置** | **自定义位置**来设置自定义位置。
- en: 'The `showsUserLocation` function will zoom and display the location of the
    user on the map; by default, this value is `false`. Next, we want to gather all
    the notes locations to display them on our map using annotations. The annotation
    format accepts an object with `longitude`, `latitude`, some `title` information,
    and `on` `press` attributes. We will loop through the list of notes passed via
    props and extract the location data. The list of annotations is then passed to
    the MapView''s `annotations` prop:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`showsUserLocation`函数将放大并显示用户在地图上的位置；默认情况下，此值是`false`。接下来，我们想要收集所有笔记的位置，以便使用注释在地图上显示它们。注释格式接受一个包含`longitude`、`latitude`、一些`title`信息以及`on`
    `press`属性的对象。我们将遍历通过props传入的笔记列表并提取位置数据。然后，将注释列表传递给MapView的`annotations`属性：'
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![MapView](img/B05162_06_03.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![MapView](img/B05162_06_03.jpg)'
- en: 'We can also add the ability to view the note by adding a `callout on press`
    function to the annotations. The `callout on press` method will invoke the `onNoteSelect`
    function we passed in and transition to the `NoteScreen`. Here we are adding a
    `left callout`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过向注释中添加一个`按下时调用`函数来添加查看笔记的功能。`按下时调用`方法将调用我们传入的`onNoteSelect`函数，并过渡到`NoteScreen`。在这里，我们添加一个`左侧调用`：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![MapView](img/B05162_06_04.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![MapView](img/B05162_06_04.jpg)'
- en: Check the React Native documentation for more details on `MapView` at [https://facebook.github.io/react-native/docs/mapview.html](https://facebook.github.io/react-native/docs/mapview.html).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 查阅React Native文档以获取有关`MapView`的更多详细信息，请访问[https://facebook.github.io/react-native/docs/mapview.html](https://facebook.github.io/react-native/docs/mapview.html)。
- en: Summary
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored more of React Native's built-in components and
    modules to capture the device-specific location data. The Geolocation API provides
    us the mechanism which hooks into the existing component life cycle to track user
    location. By incorporating this into our existing saved data, we can use the longitude
    and latitude values to display a map of where all of our notes were taken.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探索了更多React Native的内置组件和模块，以捕获特定于设备的地理位置数据。地理位置API为我们提供了机制，该机制挂钩到现有的组件生命周期以跟踪用户位置。通过将其纳入我们现有的保存数据中，我们可以使用经纬度值来显示所有笔记记录的位置地图。
