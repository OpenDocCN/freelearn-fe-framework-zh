- en: Cards - Display Detailed Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn the following about Cards:'
  prefs: []
  type: TYPE_NORMAL
- en: Main content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Card header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presenting media
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expandable cards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cards are a Material Design concept used to display specific information on
    a given subject. For example, the subject could be an object returned by an API
    endpoint. Or, the subject could just be part of a complex object—in this case, you
    can use multiple cards to organize information in a way that helps the user understand
    what they're looking at.
  prefs: []
  type: TYPE_NORMAL
- en: Main content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main content of a `Card` component is where information concerning the subject
    is placed. The `CardContent` component is a child of `Card`, and you can use it
    to render other Material UI components, such as `Typography`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you''re working on a detail screen for some type of entity,
    such as a blog post. You''ve decided to use a `Card` component to render some
    of the entity details since the entity is the subject under consideration. Here''s
    the code that will render a `Card` component with information about a particular
    subject:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When you first load the screen, here''s what you''ll see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd703a4a-d3bc-42b6-acfb-100b542eb524.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The card''s content is divided into three sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Subject Title**: Tells the user what they''re looking at'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subtitle**: Gives the user a little more context'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content**: The main content of the subject'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This example uses the `CardContent` component as the key organizational unit
    within `Card`. Everything else is up to you. For example, the card in this example
    uses three `Typography` components to render three different styles of text as
    the card's content.
  prefs: []
  type: TYPE_NORMAL
- en: The first `Typography` component uses the `h4` variant and serves as the card's
    title. The second `Typography` component serves as the subtitle of the card and
    uses the `subtitle1` variant. Lastly, there's the main content of the card, which
    uses the `Typography` default font. There is a `marginTop` style set on this text
    so that it's not pushed up against the subtitle.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Card reference: [https://material-ui.com/demos/cards/](https://material-ui.com/demos/cards/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Card header
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `CardHeader` component is used to render the header of a card. This includes
    the title text, as well as some other potential elements. The reason you might
    want to use a `CardHeader` component is so that you can let it handle the layout
    styles of the header and to keep the markup within your `Card` semantic.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you''re building a `card` component for users of your application.
    As the card header, you want to display the user''s name. Instead of using a `Typography`
    component to render the title using a text variant, you could use a `CardHeader`
    component, placed adjacent to the `CardContent` component. Here''s how the code
    appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the screen looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75009254-773e-412b-a6fb-5e6b616069be.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at the markup used to render this card:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `CardHeader` component is a sibling of `CardContent`. This makes the `Card`
    markup semantic, as opposed to having to declare the card header within `CardContent`.
    The `CardHeader` component takes a `title` string property, which is how the title
    of the card is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can add more than just a string to `CardHeader` components. You can also
    pass a sub-header string and an avatar to help users identify the subject in the
    card. Let''s modify this example to add both of these things. First, here are
    the new component imports that you''ll need to add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, here''s the updated `CardHeader` markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s what the result looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/130f2d70-86af-4e20-bd97-7cafcef3ddcc.png)'
  prefs: []
  type: TYPE_IMG
- en: The `CardHeader` component handles alignment of the three header components—the
    avatar, the title, and the sub-header.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Card` demos: [https://material-ui.com/demos/cards/](https://material-ui.com/demos/cards/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cards are used to display specific actions about a subject. Often, users take
    action on subjects, such as sending a contact a message or deleting a contact.
    `CardActions` components can be used by `Card` components to display actions that
    users can take on the subject.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you''re using a `Card` component to display a contact. In addition
    to showing information about the contact, you would like for your users to be
    able to take actions on contacts from within the card. For example, you could
    provide two actions—one to message the contact, and one to phone the contact.
    Here''s the code to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the card looks like when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a0775ce-ff82-4023-830f-9f9835d79b1f.png)'
  prefs: []
  type: TYPE_IMG
- en: The two actions that users can take on the subject are rendered as icon buttons
    at the bottom of the card.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `CardActions` component handles aligning the button items inside of it,
    both horizontally, and making sure they're placed at the bottom of the card. The
    `disableActionSpacing` property removes the extra margin added by `CardActions`.
    Typically, you'll use this property any time you're using an `IconButton` component
    for your `actions`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at the markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Like the other child components of `Card`, the `CardActions` component makes
    the overall card structure semantic, as it is a sibling of related card functionality.
    The items placed within `CardActions` can be anything you want, but common practice
    is to use icon buttons.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can change the alignment of the items in the `CardActions` component. Since
    it uses flexbox as its display, you can use any of the `justify-content` values.
    Here''s an updated version that aligns the action buttons to the right of the
    card:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `justify-content` property is part of the `actions` style, which is then
    applied to the `CardActions` component. Here''s what the result looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c2568567-be08-48ae-9b92-6a1d9a2360d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s another version showing `center` as the `justify-content` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5b60975-617b-419d-92cc-b9a905f7d7b1.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Card` demos: [https://material-ui.com/demos/cards/](https://material-ui.com/demos/cards/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presenting media
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cards have built-in capabilities for displaying media. This includes things
    such as images and videos that become the focal point of the card.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you have an image of the subject that the `Card` component
    is displaying. You can use the `CardMedia` component to render the image. You
    should use this component instead of something like `<img>` because it will handle
    a number of styling issues for you. Here''s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the card looks like when it''s rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df6bfd25-8e28-4898-90bd-1c59556fbf04.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `CardMedia` component is just like other components that make up cards –
    just another part. In this example, `CardMedia` is placed below `CardHeader` and
    above `CardContent`. But it doesn't have to be this way. You can rearrange the
    order of these components.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can rearrange your card items in a way that makes the most sense for your
    app. For example, your card with media might not have any content and you might
    want to display the header text at the bottom of the card, below the media, and
    with the text centered. Here''s the modified code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the resulting card looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa65f868-1e49-4982-baec-35984c84854e.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `img` HTML tag reference: [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expandable cards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you can't fit everything into a card that you might want to. To accommodate,
    you can make your cards expandable, meaning that the user can click on an `expand`
    button to reveal additional content.
  prefs: []
  type: TYPE_NORMAL
- en: If you're trying to fit too much content into a `Card`, making the card expandable
    just masks the problem. Instead, consider a different approach to displaying information
    about the subject in question. For example, maybe, instead of a card, the subject
    is worthy of its own page.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see that there''s additional content about a subject within a card that
    does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Takes up a little too much vertical space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Isn't very important and doesn't need to be shown by default
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can deal with both of these challenges by putting the content into an expandable
    region of the card. Then, the vertical space isn''t an issue and the user can
    look at the content if they deem it relevant. Here''s an example that builds on
    an earlier example from this chapter to make part of the card content hidden by
    default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When you first load the screen, here''s what the card looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/039e3357-58ef-4ea8-ac34-61f5370c4932.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To the right of the action buttons in the card, there is now an `expand` button
    with a down arrow. If you click on the `expand` button, here''s what the card
    looks like when it''s expanded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ffe0bc80-2382-4c30-94ad-b62c6ab43488.png)'
  prefs: []
  type: TYPE_IMG
- en: The expand icon has now changed to a collapse icon—clicking on it will collapse
    the card into its original state.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s break down the additions in this example that added the expandable card
    region. First, there''s the `expand` style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This is used to align the expand/collapse icon button to the left of the other
    actions. Next, let''s look at the `ExpandIcon` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This utility component is used to render either the correct icon component,
    depending on the expanded state of the component. Next, let''s take a look at
    the `toggleExpanded()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This handler, when called, will toggle the expanded state. This state is then
    passed to the `ExpandIcon` component, which will render the appropriate icon.
    Next, let''s take a closer look at the actions markup for this card:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The expand/collapse button is the last `IconButton` component shown here. It''s
    using the expand style, the `toggleExpanded()` click handler, and the expanded
    state. Finally, let''s take a look at the card content that can be expanded and
    collapsed when the button is clicked on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `Collapse` component is used to show or hide the additional card content
    based on the expanded state. Note that the `CardContent` component is used here
    so that once the additional content is shown, it is styled consistently with the
    rest of the card content.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Card` demos: [https://material-ui.com/demos/cards/](https://material-ui.com/demos/cards/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Card` API documentation: [https://material-ui.com/api/card/](https://material-ui.com/api/card/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CardHeader` API documentation: [https://material-ui.com/api/card-header/](https://material-ui.com/api/card-header/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CardContent` API documentation: [https://material-ui.com/api/card-content/](https://material-ui.com/api/card-content/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CardActions` API documentation: [https://material-ui.com/api/card-actions/](https://material-ui.com/api/card-actions/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IconButton` API documentation: [https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Collapse` API documentation: [https://material-ui.com/api/collapse/](https://material-ui.com/api/collapse/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
