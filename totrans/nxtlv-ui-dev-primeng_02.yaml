- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up Your Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this second chapter, we will dive into the crucial task of setting up your
    development environment to build Angular applications with PrimeNG components.
    This chapter equips you with the necessary knowledge and tools to create a seamless
    and productive development environment. From installing the required software
    to understanding the project structure, we will guide you through each step to
    ensure a smooth setup process.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a well-configured development environment
    and will be equipped with the necessary tools to start building Angular applications
    with PrimeNG. Understanding the technical requirements, setting up the Angular
    CLI, and familiarizing yourself with the project structure will lay a solid foundation
    for your web development journey. Additionally, leveraging an IDE such as VS Code
    and utilizing useful extensions will boost your productivity and make the development
    process more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s dive in and set up your development environment for an optimal Angular
    development experience. In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Angular CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new Angular project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the project structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering useful VS Code extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The chapter contains various code samples from a new Angular project. You can
    find the related source code in the `chapter-02` folder of the following GitHub
    repository: [](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before diving into the setup process, it’s important to ensure that your system
    meets the necessary technical requirements for development. Let’s take a look
    at the key components you’ll need to have in place:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js (NVM)**: Install Node.js, a JavaScript runtime, using **Node Version
    Manager** (**NVM**) to manage multiple Node.js versions on your system. You can
    download and install NVM from the official website: [https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm).
    If your company imposes restrictions on the usage of NVM, please refer to the
    official Node.js website ([https://nodejs.org](https://nodejs.org)) for installation
    instructions and follow the provided guide.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**npm**: Choose npm for managing dependencies in your Angular projects. It
    comes bundled with Node.js, so if you have Node.js installed, you will be able
    to use npm. If you prefer to use alternatives to npm, you can check out either
    Yarn ([https://yarnpkg.com](https://yarnpkg.com)) or pnpm ([https://pnpm.io](https://pnpm.io)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitHub**: Sign up for a GitHub account to leverage this web-based hosting
    service for version control and collaboration. GitHub allows you to track changes,
    collaborate with team members, and host your Angular repositories. Sign up for
    an account at [https://github.com](https://github.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VS Code (Visual Studio Code)**: Install VS Code, a free and extensible source-code
    editor developed by Microsoft. VS Code offers built-in support for Angular and
    integrates seamlessly with the Angular CLI, providing features such as code completion
    and debugging. Download VS Code from the official website: [https://code.visualstudio.com](https://code.visualstudio.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By ensuring that you have Node.js (NVM), a package manager (npm, Yarn, or pnpm),
    GitHub, and VS Code installed, you’ll have a solid foundation for setting up your
    Angular development environment. These tools will enable you to efficiently build,
    manage, and collaborate on your Angular projects with PrimeNG components.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Angular CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Angular CLI** (**Command-Line Interface**) is a powerful tool that simplifies
    the process of creating, developing, and maintaining Angular applications. It
    provides a set of commands that automate common development tasks, allowing you
    to focus on building your application rather than setting up the project structure
    manually. In this section, we will guide you through the installation process
    of the Angular CLI and provide an overview of its core commands.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that you have a stable internet connection during the installation process.
    It may take some time to download and install the required packages, depending
    on your internet speed.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js v18 (using NVM)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install NVM and set Node.js v18 as the default version, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit the official NVM repository on GitHub: [https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Follow the installation instructions specific to your operating system. This
    typically involves running a script to download and install NVM. The following
    script will help to download and install NVM v0.39.3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The version of NVM may change, so please visit the official website for the
    latest version and instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Open a new terminal window or restart your terminal to load NVM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to verify that NVM is installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should see the version number of NVM printed in the terminal. In this example,
    the current version is `0.39.3`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After that, run the following command to install Node.js v18 using NVM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In order to use Node.js v18 in a new terminal session, we need to set Node.js
    v18 as the default version. To do that, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, run the following commands to verify that Node.js v18 is installed
    and set as the default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These commands should display the version numbers of Node.js and npm respectively,
    and they should correspond to the installed Node.js v18.
  prefs: []
  type: TYPE_NORMAL
- en: With Node.js v18 installed, let’s move on to installing the Angular CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Angular CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To install the Angular CLI, complete the following instructions depending on
    your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows machines, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Command Prompt or PowerShell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to install the Angular CLI globally:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Linux/macOS machines, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to install the Angular CLI globally:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you encounter permission errors while installing Node.js or the Angular CLI
    using the npm package manager, you may need to use `sudo` before the commands
    to run them with administrator privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'For macOS (using Homebrew), do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install Homebrew by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once Homebrew is installed, run the following command to install Node.js:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After following the appropriate installation process for your system, confirm
    the version of the Angular CLI with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You will receive the output shown in *Figure 2**.1*. As you can see, at the
    time of writing this book, the version of the Angular CLI is `17.0.6`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – The Angular CLI version](img/B18805_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – The Angular CLI version
  prefs: []
  type: TYPE_NORMAL
- en: 'The Angular CLI provides a wide range of commands to streamline the development
    process. Here are some of the most commonly used commands and their explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ng new [project-name]`: Creates a new Angular project with the specified name.
    It sets up the project structure, installs dependencies, and generates initial
    boilerplate code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng serve`: Starts a development server and compiles your Angular application.
    It watches for changes in your files and automatically reloads the application
    in the browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng generate [schematic] [name]`: Generates different elements of your Angular
    application such as components, services, modules, and more. It scaffolds the
    necessary files and updates the required configurations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng build`: Builds the Angular application for production. It compiles the
    code and generates optimized files that can be deployed to a web server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng test`: Executes unit tests for your Angular application. It runs the tests
    using the configured test runner and provides detailed information about test
    results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng lint`: Analyzes the code for potential errors and code style violations.
    It helps enforce coding standards and maintain code quality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng deploy`: Deploys your Angular application to a hosting platform, such as
    GitHub Pages or Firebase Hosting. It automates the deployment process and makes
    your application accessible to the public.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can run `ng help` to see the list of commands and their usage. You can also
    check the official documentation for an overview of all commands at [https://angular.io/cli#command-overview](https://angular.io/cli#command-overview).
  prefs: []
  type: TYPE_NORMAL
- en: By leveraging the Angular CLI, you can streamline your development workflow,
    automate repetitive tasks, and focus on building high-quality Angular applications.
    The installation process on Windows, Linux, and macOS, including an alternative
    option using Homebrew for macOS, ensures that you have the necessary tools to
    harness the power of the Angular CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have the Angular CLI set up, explore the various commands it offers
    to create, build, test, and deploy your Angular applications. With the Angular
    CLI, you’ll enhance your productivity as a professional developer and unlock the
    full potential of Angular for building robust and scalable web applications. In
    the next section, we will start to create a new Angular project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Angular project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a new Angular project is a straightforward process. In this section,
    we will guide you through the steps of creating a new Angular project. We will
    also explore the structure and purpose of each file in a new Angular project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new Angular project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your Command Prompt or Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory where you want to create your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to generate a new Angular project, replacing `my-app`
    with the desired name of your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `ng new` command creates a new Angular project with the default configuration
    and project structure. It installs the necessary dependencies and sets up the
    initial files for your application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When running this command to create a new Angular project, there are several
    parameters (flags) you can use to customize the project setup. Here are some commonly
    used parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--dry-run`: Performs a dry run of the project generation without actually
    creating the files. It allows you to see the files that would be generated before
    committing to the project creation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--standalone`: Creates an application based upon the standalone API, without
    NgModules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--inline-style` or `--inline-template`: Specifies whether to use inline styles
    or templates. By default, Angular generates separate style and template files.
    Using these flags, you can choose to have inline styles or templates within the
    component files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--prefix`: Sets the prefix for the generated component selector. The prefix
    is added to the selector of every component generated in the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--style`: Specifies the style format to use in the project, such as CSS, SCSS,
    Sass, Less, or Stylus. For example, `--style=scss` will configure the project
    to use SCSS as the default style format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--routing`: Generates a routing configuration for the initial project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--skip-git`: Skips initializing a new Git repository in the project directory.
    This is useful if you prefer to manage version control manually.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--skip-tests`: Prevents the generation of spec files for unit tests when creating
    new components. Use this flag if you don’t want test files to be generated by
    default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--skip-install`: Skips the installation of npm packages after project creation.
    Use this if you prefer to manually run `npm install` or `yarn` later to install
    dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--directory`: Specifies the directory name to create the project in. By default,
    the project is created in a folder with the same name as the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--minimal`: Create a workspace without any testing frameworks (use for learning
    purposes only).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the command to generate a new Angular project with such options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Using the `--standalone` option is highly recommended as it reduces boilerplate
    code and became the default behavior in Angular 17.
  prefs: []
  type: TYPE_NORMAL
- en: These are just a few of the parameters available when running `ng new`. You
    can find more options and detailed explanations by running `ng new --help` or
    referring to the official Angular documentation for the specific version that
    you’re using.
  prefs: []
  type: TYPE_NORMAL
- en: 'After running the script, the Angular CLI will ask to enable Server-Side Rendering
    (SSR) and Static Site Generation (SSG/Prerendering). Select `NO` as the answer,
    since it’s not relevant at this moment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 2**.2* shows the final result of creating your new Angular project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – The Angular CLI result](img/B18805_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – The Angular CLI result
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, you can run `ng serve` to check the newly created project, like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can visit [http://localhost:4200/](http://localhost:4200/) to check
    your web app – see *Figure 2**.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Angular demo app](img/B18805_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Angular demo app
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our first Angular application created, let’s go through its
    structure.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding the purpose of each file in your Angular project is essential
    for navigating and developing your application effectively. Each file plays a
    specific role in the overall structure and functionality of your Angular project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a brief overview of the new structure of Angular:'
  prefs: []
  type: TYPE_NORMAL
- en: '`README.md`: Contains a description of the Angular application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.editorconfig`: Contains configuration for code editors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.gitignore`: Specifies intentionally untracked files that Git should ignore.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`angular.json`: Contains CLI configuration defaults for all projects in the
    workspace, including configuration options for build, serve, and test tools that
    the CLI uses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json`: Specifies the application’s dependencies, devDependencies,
    scripts, licensing, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tsconfig.json`: Specifies the TypeScript compiler configuration for the Angular
    application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tsconfig.app.json`: Specifies the TypeScript compiler configuration for the
    application’s main module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tsconfig.spec.json`: Specifies the TypeScript compiler configuration for the
    application’s unit tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src` directory contains the source code for the Angular application. It is
    divided into the following subdirectories:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`main.ts`: The entry point for the Angular application.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`favicon.ico`: The application’s favicon.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.html`: The application’s main HTML file.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`styles.scss`: The application’s main CSS file.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app`: Contains the application’s components, services, directives, pipes,
    and so on.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.component.spec.ts`: The unit test for the application’s main component.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.component.ts`: The definition of the application’s main component.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.config.ts`: The configuration file for the application’s main entry point.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assets`: Contains the application’s assets, such as images and fonts.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The new structure of Angular is a significant improvement over the previous
    structure (before Angular 14). It makes it easier to develop and maintain Angular
    applications, and it is more consistent with the way other web frameworks are
    structured.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Angular has released a new site which provides more tutorials and lessons on
    the latest Angular features. You can learn more at [https://angular.dev](https://angular.dev).
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have created your Angular project and explored the project structure,
    you are ready to start building your application by leveraging the power of Angular
    and PrimeNG components. Before starting, let’s go through some useful VS Code
    extensions that will help us during the development process.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering useful VS Code extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to developing Angular applications, having the right tools can
    greatly enhance your productivity and efficiency. One of the most popular code
    editors among developers is **Visual Studio Code** (**VS Code**). VS Code has
    a wide range of extensions that can help streamline your Angular development workflow.
    In this section, we will introduce some useful VS Code extensions specifically
    tailored for Angular development.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Language Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Angular Language Service** extension is an invaluable tool for Angular
    developers. This extension provides a rich editing experience for Angular templates,
    both inline and external, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Completion lists**: Provides suggestions and autocompletion for Angular template
    syntax, helping developers write code more efficiently and accurately'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AOT diagnostic messages**: Displays compile-time diagnostic messages related
    to **Ahead-of-Time** (**AOT**) compilation in Angular templates, helping developers
    catch errors and improve code quality'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quick info**: Provides contextual information and documentation about Angular
    directives and components when hovering over them in the template, aiding developers
    in understanding and using the API effectively'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Go to definitions**: Allows developers to navigate to the definition of a
    symbol in the template, making it easier to understand how components and directives
    are implemented and facilitating code exploration and debugging'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Figure 2**.4* shows an example of the autocomplete feature from the extension
    – here we type `heading` in the template and the extension gives the autocomplete
    option to the property from the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Angular Language Service autocomplete example](img/B18805_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Angular Language Service autocomplete example
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Template autocomplete only works with public properties from the component.
  prefs: []
  type: TYPE_NORMAL
- en: Editor Config
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `.editorconfig` file in your project and applies the defined rules to your
    code. With Editor Config, you can enforce indentation styles, line endings, encoding,
    and other formatting preferences. This extension is especially useful when collaborating
    with other developers on Angular projects, as it helps maintain a unified code
    style and minimizes style-related conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of the `.editorconfig` file in a newly created Angular project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the rules are descriptive – for example, setting the character
    encoding of the files to UTF-8 or using single quotes for all TypeScript files.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Schematics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Angular Schematics** is a powerful extension that integrates with the Angular
    CLI and provides a scaffolding mechanism for generating and modifying code. It
    allows you to generate components, modules, services, and other Angular artifacts
    with ease. With Angular Schematics, you can quickly create boilerplate code and
    follow consistent patterns and practices within your Angular project. It saves
    time by automating repetitive tasks and helps maintain a standardized structure
    across your code base.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see in *Figure 2**.5* that there is a list of options, and we can generate
    a component named `about` without remembering the command detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Angular Schematics](img/B18805_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Angular Schematics
  prefs: []
  type: TYPE_NORMAL
- en: Auto Rename Tag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Auto Rename Tag** extension is a time-saving tool that automatically renames
    HTML tags as you edit them. When you modify the opening or closing tag of an element,
    this extension updates the corresponding tag throughout your code base, ensuring
    consistency and preventing tag mismatches. It eliminates the need for manual tag
    renaming, which can be error-prone and time-consuming, especially in larger Angular
    projects with complex HTML structures.
  prefs: []
  type: TYPE_NORMAL
- en: Nx Console
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a bonus section. If you prefer using **Nx Workspace** ([https://nx.dev](https://nx.dev))
    for Angular development, this extension is for you. The **Nx Console** extension
    for VS Code streamlines Angular development, offering code generation, dependency
    graph visualization, and productivity-enhancing features directly within the IDE.
    It boosts efficiency, enhances code quality, and accelerates development workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is dedicated to the crucial task of setting up your development
    environment to build Angular applications with PrimeNG components. We began by
    discussing the technical requirements, which include Node.js, Yarn/npm, GitHub,
    and VS Code. Detailed installation instructions were provided for each of these
    tools, ensuring that you have the necessary prerequisites for a seamless development
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: The chapter then focused on the Angular CLI, a powerful command-line interface
    for Angular development. We walked you through the installation process on Windows,
    Linux, and macOS, enabling you to leverage the Angular CLI’s extensive functionality,
    including scaffolding, building, and testing Angular applications. Additionally,
    we covered creating a new Angular project, exploring the latest standalone component
    option and the Angular project template. You should now have a well-configured
    development environment equipped with the Angular CLI, ready to embark on the
    exciting journey of building modern web applications with Angular and PrimeNG.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we introduced you to several indispensable VS Code extensions tailored
    specifically for Angular development. These extensions, such as Angular Language
    Service, Editor Config, Angular Schematics, and Auto Rename Tag, significantly
    enhance your coding experience and boost productivity. With features such as intelligent
    code completion, formatting assistance, and workspace management, these extensions
    ensure that you maintain consistent coding styles and streamline your development
    workflow within the VS Code environment. By harnessing the power of these extensions,
    you’ll be well equipped to tackle the challenges of Angular development and maximize
    your efficiency throughout the development process.
  prefs: []
  type: TYPE_NORMAL
- en: With your development environment fully set up and optimized, you are now primed
    to dive into the subsequent chapters and explore the full potential of Angular
    and PrimeNG in creating exceptional web applications. Specifically, in the next
    chapter, we’ll go over Angular’s core features and improvements released in the
    latest version.
  prefs: []
  type: TYPE_NORMAL
