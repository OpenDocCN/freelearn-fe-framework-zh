- en: Chapter 1. Creating the Base Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Angular application we will build is a list of posts you regularly see in
    a social app such as Twitter. Each of these posts is posted by a user and we can
    click through to the user's profile to show all the posts made by the profile.
  prefs: []
  type: TYPE_NORMAL
- en: We will intentionally keep the application simple as the book is meant to focus
    on the technology rather than the functionality of the app. Although the app is
    simple, we will develop it using all the best practices of Angular development.
  prefs: []
  type: TYPE_NORMAL
- en: Web applications built with Angular can be optimized for search engines (SEO).
    Building support for SEO in apps means that search engines can read and understand
    the pages, and that the pages have dynamic data that is specifically aimed at
    search engines (meta tags). This increases the visibility of your app, giving
    higher search rankings and more links, resulting in more revenues for you or your
    client. Angular provides built-in features that can be leveraged to ensure apps
    enjoy maximum visibility on the web.
  prefs: []
  type: TYPE_NORMAL
- en: Lesson Objectives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this lesson, you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Angular CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an Angular application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the base UI of the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the header and footer of our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-Side and Client-Side Rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we talk about server-side rendering of websites, we are generally referring
    to an application or website that uses a programming language that runs on a server.
    On this server, the web pages are created (rendered) and the output of that rendering
    (the HTML) is sent to the browser, where it can be displayed directly.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code bundle for this book is hosted on GitHub at [https://github.com/TrainingByPackt/Beginning-Server-Side-Application-Development-with-Angular](https://github.com/TrainingByPackt/Beginning-Server-Side-Application-Development-with-Angular)
  prefs: []
  type: TYPE_NORMAL
- en: When we talk about client-side rendering, we are generally referring to an application
    or website that uses JavaScript running in the browser to display (render) the
    pages. There is often a single page that is downloaded, with a JavaScript file
    that builds up the actual page (hence the term *single-page application*).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Angular CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular CLI is the officially supported tool for creating and developing Angular
    applications. It is an open source project that is maintained by the Angular team
    and is the recommended way to develop Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular CLI offers the following functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the application in development mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate code using the best practices from the Angular team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run unit tests and end-to-end tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a production-ready build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One of the main benefits of using Angular CLI is that you don''t need to configure
    any build tools. It''s all abstracted away and available through one handy command:
    `ng`.'
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the book, we will be using the `ng` command for creating the app,
    generating the code, running the application in development mode, and creating
    builds.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about Angular CLI, refer to the project page on GitHub
    ([https://github.com/angular/angular-cli](https://github.com/angular/angular-cli))
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Angular CLI on your machine, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the installation is finished without any errors, make sure that the `ng`
    command works as expected by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify that the output is similar to the output shown here:![Installing Angular
    CLI](img/1.1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we have installed Angular CLI. We can start building our application!
  prefs: []
  type: TYPE_NORMAL
- en: Generating a New Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have installed and configured Angular CLI, we can start generating
    our new application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the `ng new` command will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called `angular-social`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a new basic application inside this folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a routing module (because the `--routing` flag is passed in)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run `npm install` inside this folder to install the dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run `git init` to initialize a new Git repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a New Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a new application, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your terminal and navigate to the directory where you want to work on
    your application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once inside your workspace directory, invoke the `ng` command as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output of this command will be similar to the following:![Creating a New
    Application](img/1.2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s have a look at the folders that are created after running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`src`: This folder contains the source files for our application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/app/`: This folder contains the application files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/assets/`: This folder contains the static assets we can use in our application
    (such as images)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/environments/`: This folder contains the definition of the default environments
    of our application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`e2e`: This folder contains the end-to-end tests for our application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving the Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To serve the application, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the installation is finished, we can open our terminal and enter the working
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the `ng serve` command to start the development server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the command will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Serving the Application](img/1.3.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Viewing Your Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To view your application, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser and navigate to `http://localhost:4200/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should be greeted with a default page that says **Welcome to app!**:![Viewing
    Your Application](img/1.4.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we have created a basic application using Angular CLI and viewed
    the same in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Defaults for Angular CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular CLI works great out of the box and the default setup delivers a nice
    configuration to work with. But in addition to having some sane defaults, it is
    also very configurable.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will take the opportunity to configure our Angular CLI defaults
    so it behaves a little bit differently.
  prefs: []
  type: TYPE_NORMAL
- en: The things we are going to change all have to do with how we generate (or scaffold)
    our code.
  prefs: []
  type: TYPE_NORMAL
- en: When scaffolding components, the default Angular CLI settings will create the
    HTML template and style sheet in a separate file.
  prefs: []
  type: TYPE_NORMAL
- en: In order to keep all component content in one file, we will configure Angular
    CLI to generate inline templates and styles.
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of keeping all the component content in one file is that you can
    work on templates, styles, and the actual component code in a single place without
    having to switch files.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Global Defaults
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your terminal, run the following commands to globally configure the defaults:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run the `git diff` command, we see that these settings are stored in
    the `.angular-cli.json` file in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Global Defaults](img/1.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this section, we have configured Angular CLI to generate inline styles and
    templates.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Global Styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default generated Angular application does not have any styling.
  prefs: []
  type: TYPE_NORMAL
- en: Angular does not dictate anything in terms of style, so in your own projects,
    you can use any other style framework, such as Angular Material, Foundation, Semantic
    UI, or one of the many others. Alternatively, you can create your own styles from
    scratch to get a unique look and feel.
  prefs: []
  type: TYPE_NORMAL
- en: For this book, though, we will stick to Bootstrap 4 and Font Awesome as they're
    widely used and they provide a great style with a minimal amount of added code.
  prefs: []
  type: TYPE_NORMAL
- en: Linking to the Style Sheets in global styles.css
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed in the previous section, our application comes with a global style
    sheet, `src/styles.css`.
  prefs: []
  type: TYPE_NORMAL
- en: In this style sheet, we will use the `@import` command to link to Bootstrap
    and Font Awesome. This will instruct Angular to download the files and apply the
    style to your application globally.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Bootstrap and Font Awesome
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the `src/styles.css` file in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following two lines at the end of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Refresh the app in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you can see, the font of the application was updated to a sans-serif font
    as that''s the Bootstrap default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding global stylesstyles, linking toBootstrap and Font Awesome](img/1.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Showing an Icon on the Page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the `src/app.component.html` file and replace the content with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the app refreshes in your browser, you should see the thumbs up icon in
    the center of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing anglobal stylesstyles, linking to Icon on the Page](img/1.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a list of all available icons, you can refer to the *Font Awesome Cheatsheet*
    ([http://fontawesome.io/cheatsheet/](http://fontawesome.io/cheatsheet/)).
  prefs: []
  type: TYPE_NORMAL
- en: For an overview of all available Bootstrap styles, you can refer to the Bootstrap
    4 documentation ([https://getbootstrap.com/docs/4.0/getting-started/introduction/](https://getbootstrap.com/docs/4.0/getting-started/introduction/)).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have set up Bootstrap and Font Awesome as the style frameworks
    for our app. This will enable us to have a different font style than what Angular
    CLI provides. We can now start creating our UI components.
  prefs: []
  type: TYPE_NORMAL
- en: Creating UI Modules and Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the great things about working with Angular is that it promotes building
    your applications in a modular and componentized way.
  prefs: []
  type: TYPE_NORMAL
- en: In Angular, an `NgModule` (or simply `Module`) is a way to group your application
    into logical blocks of functionality.
  prefs: []
  type: TYPE_NORMAL
- en: A `Module` is a TypeScript class with the `@NgModule` decorator. In the decorator,
    we define how Angular compiles and runs the code inside the module.
  prefs: []
  type: TYPE_NORMAL
- en: In this lesson, we are going to build a module that groups together all the
    components we want to use in our user interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will add a `LayoutComponent` that consists of our `HeaderComponent` and
    `FooterComponent`, and in-between those, we will define the space where our application
    code will be displayed using the `RouterOutlet` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating UI Modules and Components](img/1.11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating the UiModule
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will generate the `UiModule` using the `ng` command and
    import the `UiModule` in the `AppModule`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `ng generate` command, we can generate or scaffold out all sorts of
    code that can be used in our Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the `ng generate module` command to generate our `UiModule`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This command has one required parameter, which is the name. In our application,
    we will call this module `ui`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your terminal and navigate to the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command from inside the project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As you can see from the output of the command, our `UiModule` is generated
    in the new folder `src/app/ui`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the UiModule](img/1.12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we take a look at this file, we can see what an empty Angular module looks
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Importing Our UiModule
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that our `UiModule` is created, we need to import it from our `AppModule`.
    That way, we can use the code inside the `UiModule` from other code that lives
    inside the `AppModule:`
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `src/app/app.module.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `import` statement on top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a reference to `UiModule` in the `imports` array inside the `NgModule`
    decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Importing Our UiModule](img/1.13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Our `UiModule` is now created and imported in our `AppModule`, which makes it
    ready to use.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go ahead and create our first component inside the `UiModule`, and make
    it display in our app!
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the Current Route
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When building our app, we will heavily lean on Angular's router to tie all of
    our modules and components together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we will build all the functionality in modules, we will use our main
    `AppComponent` only to display the current route. To make this work, we will need
    to update the `AppComponent` template and make sure we define the `router-outlet`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `src/app/app.component.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove all of the content and add the following HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After refreshing the app in our browser, we should see a blank page. This is
    because we don't have any routes set up and thus there is no way the Angular app
    knows what to display. Let's move to the next section to create our basic layout!
  prefs: []
  type: TYPE_NORMAL
- en: Creating the LayoutComponent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will use `ng generate` to create the `LayoutComponent` inside
    the `UiModule` and add the `LayoutComponent` to the `AppRoutingModule` so it gets
    displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The `LayoutComponent` is the main template of our application. Its function
    is to glue together the `HeaderComponent` and the `FooterComponent` and show the
    actual application pages in-between those two.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will be using the `ng generate` command to create our `LayoutComponent`.
  prefs: []
  type: TYPE_NORMAL
- en: Open your terminal and navigate to the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command from inside the project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we look at the output, we see that our component was created in the new
    `src/app/ui/components` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the LayoutComponent](img/1.15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The last line of our output shows us that our `UiModule` was updated.
  prefs: []
  type: TYPE_NORMAL
- en: When we open our `UiModule` in our editor, we see that it added an `import`
    for our `LayoutComponent` and added it to the `declarations` array in the `NgModule`
    decorator.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `declarations` array *declares* the existence of components in a module
    so Angular knows that they exist and can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Adding a New Route
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As described earlier in this section, we will use our `LayoutComponent` as the
    base for the whole application. It will display our header, footer, and an outlet
    to show our actual application screens.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will leverage Angular''s built-in routing mechanism to do this. We will
    do this by adding a new route to the `routing` array, and reference the `LayoutComponent`
    in this route''s component:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/app-routing.module.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an `import` to the list of imports on the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Inside the empty array that is assigned to the `routes` property, we add a new
    object literal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `path` property and set its value to an empty string `''`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `component` property and set its value to the reference `LayoutComponent`
    that we just imported. The line of code that we add to our `routes` array is as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For reference, the complete file should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'When our application refreshes, we should see the text **layout works!**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a New Route](img/1.18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Building Our Layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s get rid of this default text and start building our actual layout:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/ui/layout/layout.component.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get rid of the contents of the `template` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following contents to the empty `template` string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When we save our file, we see that our browser outputs a blank page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking in the **Console** tab from Chrome Developer Tools, we see that we
    have an error stating **Template parse errors: ''router-outlet'' is not a known
    element**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building Our Layout](img/1.20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In order to make Angular aware of how to render the `router-outlet`, we need
    to import the `RouterModule:`
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/ui/ui.module.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an `import` statement to the list of imports on the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a reference to the `RouterModule` inside the `imports` array in the `NgModule`
    decorator.![Building Our Layout](img/1.21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we now save the file, we should see the placeholders for our header and
    footer, with some white space in-between and the router error is now gone from
    our console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building Our Layout](img/1.22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that that's done, let's add some content to the placeholders!
  prefs: []
  type: TYPE_NORMAL
- en: Creating the HeaderComponent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will use `ng generate` to create the `HeaderComponent` inside
    the `UiModule`, reference the `HeaderComponent` from our `LayoutComponent` so
    it gets displayed, and implement the navigation bar with a dynamic title and items.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using the `ng generate` command to create our `HeaderComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your terminal and navigate to the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command from inside the project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we look at the output, we see that our component was created in the new
    `src/app/ui/header` directory and that our `UiModule` was updated, just as we
    would expect after having done the same for our `LayoutComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the HeaderComponent](img/1.23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Updating the LayoutComponent to Reference Our New HeaderComponent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, we will update the `LayoutComponent` so that it references our new `HeaderComponent`
    instead of our `app-header` placeholder:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/ui/components/layout/layout.component.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the `app-header` placeholder and replace it with the following tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we see our application refresh in our browser, we see that we now have
    the string **header works!** instead of the placeholder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating theHeaderComponentcreating LayoutComponent to Reference Our New
    HeaderComponent](img/1.25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can now start implementing our actual header so that our pages finally start
    to look like an app!
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Actual Header
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we will create the actual header. We will define three class properties,
    a string property for the application logo and title, and an array of objects
    that represent the links we want to display in our header.
  prefs: []
  type: TYPE_NORMAL
- en: In the template, we will create a Bootstrap navbar consisting of a `nav` element
    with some styles, a link with our logo and title, and the actual navigation links.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'More information on how to use the navbar can be found here: [https://getbootstrap.com/docs/4.0/components/navbar/](https://getbootstrap.com/docs/4.0/components/navbar/)'
  prefs: []
  type: TYPE_NORMAL
- en: Download the file from [https://angular.io/assets/images/logos/angular/angular.svg](https://angular.io/assets/images/logos/angular/angular.svg)
    and store it as `src/assets/logo.svg`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `src/app/ui/components/header/header.component.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the `component` class, we add three new properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the contents of the `template` property with the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we save this file and check in our browser, we finally see the first real
    part of the application being displayed. Things will move quickly from now on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Actual Header](img/1.27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's apply the knowledge we have gained in this section to build the `FooterComponent`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the FooterComponent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will use `ng generate` to create the `FooterComponent` inside
    the `UiModule`, reference the `FooterComponent` from our `LayoutComponent` so
    it gets displayed, and implement the footer and add a small copyright message.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using the `ng generate` command to create our `FooterComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your terminal and navigate to the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command from inside the project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we look at the output, we see that our component got created in the new
    `src/app/ui/footer` directory and that our `UiModule` was updated, similar to
    what happened in the previous sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the FooterComponent](img/1.28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Updating the LayoutComponent to Reference Our New FooterComponent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will update the `LayoutComponent` so that it references our new `FooterComponent`
    instead of our `app-footer` placeholder:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/ui/components/layout/layout.component.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the `app-footer` placeholder and replace it with the following tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Just like with our header, we see after refreshing our application that we
    now have the string **footer works!** instead of the placeholder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating the LayoutComponent to Reference Our New FooterComponent](img/1.30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The last step is to implement the footer and our base layout is done!
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Actual Footer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we will create the actual footer. We will define two class properties, a
    string property for the name of the developer, and the year.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the template, we will create another Bootstrap navbar consisting of a `nav`
    element with some styles and the copyright message that uses both string properties
    we defined in our component class:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/ui/components/footer/footer.component.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the `component` class, add the following property. Don''t forget to
    update the two placeholders with the right data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Get rid of the contents of the `template` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the contents of the `template` property with the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we save this file and check in our browser, we finally see that the footer
    is being rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Actual Footer](img/1.32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are done with our layout! In this section, we've built our header and footer
    components. We've also built our layout component and created a `UiModule`. Let's
    get to building our actual application logic.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this lesson, we installed Angular CLI and created the Angular application.
    We set a few default settings and configured our global styles with Bootstrap
    and Font Awesome. We then created the basic UI and layout of our app. Finally,
    we implemented a header and a footer in our app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next lesson, we will create the application module and components.
  prefs: []
  type: TYPE_NORMAL
