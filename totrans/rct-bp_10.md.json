["```js\n├── assets\n│   ├── app.css\n│   ├── favicon.ico\n│   ├── index.html\n│   └── index.prod.html\n├── package.json\n├── public\n│   └── assets\n│       └── bundle.js\n├── server-development.js\n├── server-production.js\n├── source\n│   └── index.jsx\n├── Webpack-development.config.js\n└── Webpack-production.config.js\n```", "```js\n{\n  test: /\\.scss$/,\n  loader: 'style!css!sass'\n}\n```", "```js\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\n```", "```js\nnew HtmlWebpackPlugin({\n  title: \"A Wizard's Picnic\",\n  template: 'index.ejs',\n  hash: true,\n  inject: 'body'\n})\n```", "```js\noutput: {\n  path: path.join(__dirname, 'assets'),\n  filename: 'bundle.js'\n},\n```", "```js\noutput: {\n  path: path.join(__dirname, 'public', 'assets'),\n  filename: 'bundle.js'\n},\n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"/>\n    <title><%= htmlWebpackPlugin.options.title %></title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n  </body>\n</html>\n```", "```js\nrequire('shelljs/global');\nrm('-rf','public/assets');\nmkdir('-p','public/assets');\ncp('-R', 'assets/', 'public/assets');\n```", "```js\n\"prestart\": \"shjs scripts/assets.js\",\n\"start\": \"cross-env NODE_ENV=production npm run build\",\n\"poststart\": \"cross-env NODE_ENV=production node server-production.js\",\n```", "```js\n\"use strict\";\nvar express = require(\"express\");\nvar app = express();\nvar port = process.env.PORT || 8080;\nvar host = process.env.HOST|| \"0.0.0.0\";\nvar path = require(\"path\");\nvar compression = require(\"compression\");\nvar http = require(\"http\");\nvar errorHandler = require('express-error-handler');\n\napp.use(compression());\napp.get(\"*\", function (req, res) {\n  console.log(req.path);\n  var file = path.join(__dirname, \"public\", \"assets\", req.path);\n  res.sendFile(file);\n});\n\nserver = http.createServer(app);\napp.use(function (err, req, res, next) {\n  console.log(err);\n  next(err);\n});\napp.use( errorHandler({server: server}) );\n\napp.listen(port, host, function() {\n  console.log('Server started at http://'+host+':'+port);\n});\n```", "```js\nnpm i --save-dev shelljs@0.6.0 html-webpack-plugin@2.9.0 cross-env@1.0.8 sass-loader@3.1.2 node-sass@3.4.2 style-loader@0.13.0 css-loader@0.23.1\n\n```", "```js\nnpm remove --save-dev cp-file rimraf\n\n```", "```js\n[include]\n./source\n[ignore]\n.*/*.scss*\n.*/node_modules/babel.*\n.*/node_modules/babylon.*\n.*/node_modules/redbox-react.*\n.*/node_modules/invariant.*\n.*/node_modules/fbjs.*\n.*/node_modules/fsevents.*\n.*/node_modules/is-my-json-valid.*\n.*/node_modules/config-chain.*\n.*/node_modules/json5.*\n.*/node_modules/ua-parser-js.*\n.*/node_modules/spdx.*\n.*/node_modules/binary.*\n.*/node_modules/resolve.*\n.*/node_modules/npmconf.*\n.*/node_modules/builtin.*\n.*/node_modules/sha.*\n[options]\nmodule.name_mapper='.*\\(.css\\)' -> 'empty/object'\nmodule.name_mapper='.*\\(.scss\\)' -> 'empty/object'\n```", "```js\nsource/engine/entity/randomMove.js:21\n 21:     entity.direction = shuffle(direction)[0];\n                            ^^^^^^^^^^^^^^^^^^ function call\n 18:   let direction = [\"x\",\"y\"];\n                        ^^^ string. This type is incompatible with\n  3:   array: Array<Object>\n                    ^^^^^^ object type. See: source/engine/math/shuffle.js:3\n```", "```js\nengine/\n├── collision\n│   └── bruteForce.js\n├── entity\n│   ├── createEntity.js\n│   ├── drawEntity.js\n│   ├── randomMove.js\n│   └── targetEntity.js\n├── index.js\n├── input\n│   ├── keyboard.js\n├── math\n│   ├── shuffle.js\n│   ├── sign.js\n└── video\n    ├── clear.js\n    └── loadImage.js\n```", "```js\nconst loadImage = require('./video/loadImage');\nconst clear = require('./video/clear');\nconst drawEntity = require('./entity/drawEntity');\nconst createEntity = require('./entity/createEntity');\nconst targetEntity = require('./entity/targetEntity');\nconst sign = require('./math/sign');\nconst bruteForce = require('./collision/bruteForce');\nconst keyboard = require('./input/keyboard');\nconst shuffle = require('./math/shuffle'); \nconst randomMove= require('./entity/randomMove');\n\nmodule.exports = {\n  loadImage,\n  clear,\n  randomMove,\n  createEntity,\n  drawEntity,\n  targetEntity,\n  sign,\n  shuffle,\n  bruteForce,\n  keyboard\n}\n```", "```js\n// @flow\nconst setImage = (ctx: Object, image: Image) => {\n  ctx.drawImage(image, 0, 0);\n}\n\nconst loadImage = (canvas: Object, image: string) => {\n  let bgImage = new Image();\n  bgImage.src = image;\n  bgImage.onload = () => {\n    setImage(canvas.getContext(\"2d\"), bgImage)\n  };\n}\nmodule.exports = loadImage;\n```", "```js\nconst clear = (canvas: Object) => {\n  const ctx = canvas.getContext('2d');\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n};\nmodule.exports = clear;\n```", "```js\n// @flow\nconst shuffle = (\n  array: Array<any>\n): Array<any> => {\n  let count = array.length;\n  let rnd, temp;\n\n  while( count ) {\n    rnd = Math.random() * count-- | 0;\n```", "```js\n  temp = array[count];\n  array[count] = array[rnd];\n  array[rnd] = temp;\n```", "```js\n  }\n  return array;\n}\nmodule.exports = shuffle;\n```", "```js\n//@flow \nconst sign = (n: number): number => {\n  return Math.sign(n) || (n = +n) == 0 || n != n ? n : n < 0 ? -1 : 1\n};\nmodule.exports = sign;\n```", "```js\n// @flow\nconst keyboard = (keys: Array<bool>) => {\n  window.addEventListener(\"keydown\", (e) => {\n    keys[e.keyCode] = true;\n  }, false);\n\n  window.addEventListener(\"keyup\", (e) => {\n    delete keys[e.keyCode];\n  }, false);\n}\nmodule.exports = keyboard;\n```", "```js\n// @flow\nimport sign from '../math/sign';\n\nconst targetEntity = (\n  entityA: Object,\n  entityB: Object,\n  speed: number = 1\n) => {\n  let posA = entityA.pos;\n  let posB = entityB.pos;\n  let velX = sign(posB.x - posA.x) * speed;\n  let velY = sign(posB.y - posA.y) * speed;\n  entityA.pos.x+=velX;\n  entityA.pos.y+=velY;\n};\nmodule.exports = targetEntity;\n```", "```js\n// @flow\nimport shuffle from '../math/shuffle';\nconst randomMove = (\n  entity: Object,\n  speed: number = 1,\n  Config: Object = {\n    height: 512,\n    width: 512,\n    tileSize: 32\n  }\n) => {\n  let {pos, vel} = entity;\n  let speedX, speedY;\n\n  entity.tick-=1;\n```", "```js\n  let direction = [\"x\",\"y\"];\n\n  if(entity.tick<=0) {\n    entity.direction = shuffle(direction)[0];\n    entity.tick=Math.random()*50;\n  }\n```", "```js\n  if(pos.x + vel.x >Config.width - Config.tileSize *2) {\n    vel.x=-speed;\n  }\n  if(pos.x + vel.x < Config.tileSize/2) {\n    vel.x=speed;\n  }\n\n  if(pos.y + vel.y > Config.height- Config.tileSize * 2) {\n    vel.y=-speed;\n  }\n  if(pos.y + vel.y < Config.tileSize/2) {\n    vel.y=speed;\n  }\n\n  entity.pos.x+= entity.direction===\"x\" ? vel.x: 0;\n  entity.pos.y+= entity.direction===\"y\" ? vel.y: 0;\n};\nmodule.exports = randomMove;\n```", "```js\n// @flow\nimport createEntity from './createEntity';\n\nmodule.exports = (\n  canvas: Object,\n  entity: Object\n) => {\n  if(entity._creating && !entity._sprite){\n    return 0;\n  }\n  else if(!entity._sprite) {\n    createEntity(canvas, entity);\n  }\n  else {\n    // draw the sprite as soon as the image\n    // is ready\n    var ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(\n      entity._sprite,\n      entity.pos.x,\n      entity.pos.y\n    );\n  }\n}\n```", "```js\n// @flow\nimport drawEntity from './drawEntity';\n\nmodule.exports = (\n  entity: Object\n) => {\n  entity.id=Math.random()*2;\n```", "```js\n  entity._creating=true;\n```", "```js\n  let entityImage = new Image();\n  entityImage.src = entity.image;\n  entityImage.onload = () => {\n    entity._sprite = entityImage;\n  };\n}\n```", "```js\n// @flow\nmodule.exports = (\n  entityA: Object = {pos: {x:0, y:0}},\n  entityB: Object = {pos: {x:0, y:0}},\n  size: number = 32\n): bool => {\n  return (\n    entityA.pos.x <=\n      (entityB.pos.x + size)\n    && entityB.pos.x <=\n      (entityA.pos.x + size)\n    && entityA.pos.y <=\n      (entityB.pos.y + size)\n    && entityB.pos.y <=\n      (entityA.pos.y + size)\n  )\n}\n```", "```js\n├── components\n│   ├── addEntity.js\n│   ├── addProjectile.js\n│   ├── checkCollision.js\n│   ├── debugBoard.js\n│   ├── diceroll.js\n│   ├── drawEntities.js\n│   ├── drawGameOver.js\n│   ├── drawGameWon.js\n│   ├── drawHud.js\n│   ├── clearCanvas.js\n│   ├── keyInput.js\n│   ├── keypress\n│   │   ├── a.js\n│   │   ├── d.js\n│   │   ├── down.js\n│   │   ├── index.js\n│   │   ├── left.js\n│   │   ├── right.js\n│   │   ├── s.js\n│   │   ├── space.js\n│   │   ├── up.js\n│   │   └── w.js\n│   ├── outOfBounds.js\n│   ├── removeEntity.js\n│   └── setupGame.js\n├── config\n│   ├── beasts.js\n│   ├── index.js\n│   ├── players.js\n│   └── spells.js\n├── game.jsx\n├── index.jsx\n├── polyfills.js\n├── style.scss\n└── title.jsx\n```", "```js\nimport './style.scss';\nimport polyfill from './polyfills';\nimport Config from './config';\n```", "```js\nimport React, { Component, PropTypes } from 'react';\nimport MyGame from './game';\nimport Title from './title';\nimport {render} from 'react-dom';\n\nclass Index extends Component {\n  constructor() {\n    super();\n    this.state={};\n    this.state.scene=\"title\";\n  }\n\n  callback(val: string) {\n    this.setState({scene: val})\n  }\n\n  render() {\n    switch(this.state.scene) {\n      case \"title\":\n        return <Title cb={this.callback.bind(this)} />\n      break;\n\n      case \"game\":\n        return <MyGame cb={this.callback.bind(this)} />\n      break;\n    }\n  }\n}\n\nrender(\n  <Index />,\n  document.getElementById('app')\n);\n```", "```js\n// polyfill for requestAnimationFrame\nvar requestAnimFrame = (function() {\n  return window.requestAnimationFrame  ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame    ||\n    window.oRequestAnimationFrame      ||\n    window.msRequestAnimationFrame     ||\n    function(callback) {\n      window.setTimeout(callback, 1000 / 60);\n  };\n})();\n```", "```js\nimport './style.scss';\nimport polyfill from './polyfills';\nimport Config from './config';\nimport React, { Component, PropTypes } from 'react';\nimport Game from './engine';\nimport keyboard from './components/keypress/index';\n\nclass Title extends Component {\n  constructor() {\n    super();\n    this.last = Date.now();\n    this.keys={};\n  }\n\n  keyInput( keys ) {\n    if (keyboard.space(keys)) {\n      this.props.cb(\"game\");\n    }\n  }\n```", "```js\n  updateGame(modifier) {\n    if(typeof this.refs.canvas ===\"undefined\")\n      return;\n```", "```js\n    const { canvas } = this.refs;\n    const ctx = canvas.getContext(\"2d\");\n\n    Game.loadImage(\n      canvas,\n      Config.backgrounds.title\n    );\n\n    // Keyboard\n    this.keyInput(this.keys);\n  }\n\n  componentDidMount() {\n    Game.keyboard(this.keys);\n```", "```js\n    const gameLoop = () => {\n      var now = Date.now();\n      var delta = now - this.last;\n      this.updateGame(delta / 1000);\n      this.last = now;\n      window.requestAnimationFrame(gameLoop);\n    }\n    gameLoop();\n```", "```js\n  }\n\n  render() {\n    return <div><canvas\n      ref=\"canvas\"\n      id={ Config.id || \"canvas\" }\n      height={ Config.height }\n      width={ Config.width } >\n      Sorry, your browser doesn't\n      support canvas\n    </canvas>\n    <br/>\n    <div className=\"info\">\n      You're a wizard. You're on a picnic.\n      <br/>\n    You hear a noise...\n    </div>\n  </div>\n  }\n}\nmodule.exports = Title;\n```", "```js\ncanvas {\n  margin: 0 auto;\n  display: block;\n}\nbody {\n  background: black;\n}\n.info {\n  color:white;\n  text-align:center;\n  margin: 0 auto;\n  display: block;\n  a {\n    color:white;\n  }\n}\n```", "```js\nimport './style.scss';\nimport polyfill from './polyfills';\nimport Config from './config/index';\nimport React, { Component, PropTypes } from 'react';\nimport Game from './engine';\nimport SetupGame from './components/setupGame';\nimport KeyInput from './components/keyInput';\nimport DrawHUD from './components/drawHud';\nimport DrawGameOver from './components/drawGameOver';\nimport DrawGameWon from './components/drawGameWon';\nimport DrawEntities from './components/drawEntities';\nimport ClearCanvas from './components/clearCanvas';\nimport CheckCollision from './components/checkCollision';\nimport OutOfBounds from './components/outOfBounds';\nimport AddProjectile from './components/addProjectile';\nimport AddEntity from './components/addEntity';\nimport RemoveEntity from './components/removeEntity';\n```", "```js\nclass MyGame extends Component {\n  constructor() {\n    super();\n    this.lastTime = Date.now();\n    this.keys={};\n    this.gameOver=false;\n    this.gameWon=false;\n    this.maxMonsters=3;\n    this.level=0;\n    this.beast=Config.beasts[0],\n    this.state={};\n    this.returnToTitleScreen=150;\n```", "```js\n    this.score = 0;\n    this.coolDown=0;\n```", "```js\n    this.entities= Config.entities;\n    this.current_player_no = 0;\n    this.current_player = this.entities.players[0];\n    this.state.player = this.current_player;\n    this.current_player.health=100;\n    this.current_player.pos= {x:8, y:8};\n```", "```js\n  }\n\n  updateGame(modifier) {\n    if(typeof this.refs.canvas ===\"undefined\")\n      return;\n\n    const { canvas } = this.refs;\n    const ctx = canvas.getContext(\"2d\");\n\n   if(this.gameOver) {\n      ClearCanvas(canvas, this.gameOverImage);\n      if(this.gameWon)\n        DrawGameWon(canvas);\n      else\n        DrawGameOver(canvas);\n      --this.returnToTitleScreen;\n      if(this.returnToTitleScreen<=0)\n        this.props.cb('title');\n      return;\n    }\n```", "```js\n    const player = this.entities.players[\n      this.current_player_no\n    ];\n```", "```js\n    DrawEntities(Config, canvas, this.entities);\n```", "```js\n    DrawHUD(canvas, this.score, player.health);\n```", "```js\n    this.coolDown-=0.1;\n\n    KeyInput(\n      Config,\n      this.keys,\n      player,\n      1,\n      AddProjectile.bind(this),\n      (item) => this.entities.projectiles.push(item),\n        this.coolDown,\n      _ => this.coolDown = 1.5\n    );\n```", "```js\n    this.entities.projectiles.forEach((item)=> {\n      item.pos.x+= item.direction.xVel;\n      item.pos.y+= item.direction.yVel;\n```", "```js\n      this.entities.monsters.forEach((monster)=> {\n```", "```js\n        if(Game.bruteForce(\n          item, monster, Config.tileSize/2\n        )) {\n          monster.health-=20;\n\n          this.entities.projectiles =\n          RemoveEntity(\n              this.entities.projectiles,\n              item,\n              _ => {}\n          );\n```", "```js\n          if(monster.health<=0) {\n            this.entities.monsters =\n            RemoveEntity(\n              this.entities.monsters,\n              monster,\n              _ => { this.score++}\n            );\n          }\n        }\n      })\n\n      if(OutOfBounds(\n        item,\n      {h:Config.height,w:Config.width},\n      Config.tileSize\n      )) {\n        this.entities.projectiles =\n        RemoveEntity(\n          this.entities.projectiles,\n          item,\n          _ => {}\n        );\n      }\n```", "```js\n    })\n\n    this.entities.monsters.forEach((monster)=> {\n```", "```js\n      if(Game.bruteForce(monster, player, 32)) {\n        Game.targetEntity(\n          monster,\n          player,\n          monster.speed\n        )\n      }\n      Game.randomMove(\n        monster,\n        monster.speed,\n        Config\n      )\n\n      CheckCollision(\n        canvas, player,\n        monster,\n        _ => {player.health-=1},\n        _ => {}\n      );\n    })\n\n    if(!this.gameOver && this.level<=14) {\n      if(this.entities.monsters.length<=0) {\n        ++this.level;\n```", "```js\n        this.beast=Config.beasts[this.level-1];\n        this.setState({\n          level: this.level,\n          beast: this.beast\n        })\n        this.maxMonsters=this.level+3;\n      }\n\n      if(this.beast && this.maxMonsters>0) {\n        --this.maxMonsters;\n```", "```js\n        AddEntity(\n          this.beast,\n          {\n            x: Game.shuffle([64,256,480])[0],\n            y: Game.shuffle([-32,520])[0]\n          },\n          20+this.score,\n          1+Math.random()*this.score/10,\n          (item) => this.entities.monsters.push(item)\n        )\n      }\n    }\n\n    if(this.level>14) {\n      this.gameWon=true;\n      this.returnToTitleScreen = 400;\n      this.gameOver=true;\n    }\n\n    if(player.health<0 || this.gameWon) {\n```", "```js\n      this.gameOverImage = \n        ctx.getImageData(\n          0, 0, canvas.width, canvas.height\n      );\n      this.entities.monsters=[];\n      this.entities.projectiles=[];\n      this.gameOver = true;\n    }\n\n  }\n\n  componentDidMount() {\n    const canvas = this.refs.canvas;\n    const ctx = canvas.getContext(\"2d\");\n\n    this.level=0;\n    this.setState({\n      score: 0,\n      level: 0,\n      beast: Config.beasts[0]\n    })\n```", "```js\n    SetupGame(\n      Config, this.keys, this.refs.canvas,\n      this.entities, this.positions\n    );\n\n    const gameLoop = () => {\n      var now = Date.now();\n      var delta = (now - this.lastTime) / 1000.0;\n      this.updateGame(delta);\n      this.last = now;\n      window.requestAnimationFrame(gameLoop);\n    }\n\n    gameLoop();\n\n  }\n\n  getCurrentplayer() {\n    return this.current_player.name\n  }\n\n  render() {\n    return <div>\n      <canvas\n        ref=\"canvas\"\n        id={ Config.id || \"canvas\" }\n        height={ Config.height }\n        width={ Config.width } >\n        Sorry, your browser doesn't\n        support canvas\n      </canvas>\n      <br/>\n      <div className=\"info\">\n        Player: {this.getCurrentplayer()}\n        &nbsp;\n        Level: {this.level}\n      </div>\n\n    </div>\n  }\n}\n\nmodule.exports = MyGame;\n```", "```js\nimport { players, names } from './players';\nimport { beasts } from './beasts';\nimport Shuffle from '../engine/math/shuffle';\n\nlet config =  {\n  tileSize: 32,\n  height: 512,\n  width: 512,\n  debug: true,\n  beasts: beasts,\n  backgrounds: {\n    title: '/title.png',\n    game: '/board512_grass.png'\n  },\n  entities: {\n    players : [],\n    projectiles: [],\n    monsters: [],\n    pickups: [],\n    enemies: []\n  }\n```", "```js\n}\n\nconfig.entities.players.push({\n```", "```js\n  name: Shuffle(names).pop(),\n  image: Shuffle(players).pop(),\n  health: 100,\n  width: 32,\n  height: 32,\n  pos:{\n    x: 8,\n    y: 8\n  },\n  speed: 5\n})\n\nmodule.exports = config;\n```", "```js\nlet names = [\n  \"Striliyrin\",\n  \"Xijigast\",\n  \"Omonar\",\n  \"Egeor\",\n  \"Omakojamar\",\n  \"Eblokephior\",\n  \"Tegorim\",\n  \"Ugniforn\",\n  \"Igsior\",\n  \"Imvius\",\n  \"Pobabine\",\n  \"Oecodali\",\n  \"Baro\",\n  \"Trexaryl\",\n  \"Flahevys\",\n  \"Ugyritaris\",\n  \"Afafyne\",\n  \"Stayora\",\n  \"Ojgis\",\n  \"Ikgrith\"\n];\nlet players = [\n  '/deep_elf_knight.png',\n  '/deep_elf_death_mage.png',\n  '/deep_elf_demonologist.png',\n  '/deep_elf_fighter.png',\n  '/deep_elf_high_priest.png',\n  '/deep_elf_mage.png',\n  '/deep_elf_blademaster.png',\n  '/deep_elf_conjurer.png',\n  '/deep_elf_annihilator.png'\n]\nexports.players = players;\nexports.names = names;\n```", "```js\nlet beasts = [\n  \"/beasts/acid_blob\",\n  \"/beasts/rat\",\n  \"/beasts/boring_beetle\",\n  \"/beasts/giant_mite\",\n  \"/beasts/orc_warrior\",\n  \"/beasts/demonspawn\",\n  \"/beasts/hydra\",\n  \"/beasts/ooze\",\n  \"/beasts/hobgoblin\",\n  \"/beasts/dragon\",\n  \"/beasts/harpy\",\n  \"/beasts/golden_dragon\",\n  \"/beasts/griffon\",\n  \"/beasts/hell_knight\"\n]\nexports.beasts = beasts;\n```", "```js\n//@flow\nimport Game from '../engine';\nlet directions = [1, -1];\n\nconst addEntity = (\n  item: string,\n  pos: Object,\n  health: number = 60,\n  speed: number = 1,\n  callback: Function\n) => {\n  let entity = {\n    name: item,\n    image: `${item}.png`,\n    width: 32,\n    height: 32,\n    health: health,\n    pos:{\n      x: pos.x,\n      y: pos.y\n    },\n    vel:{\n      x: Game.shuffle(directions)[0],\n      y: Game.shuffle(directions)[0]\n    },\n    tick: 50,\n    direction: Game.shuffle([\"x\",\"y\"])[0],\n    speed: speed+(Math.random()*1)\n  };\n  Game.createEntity(entity);\n  callback(entity);\n}\nmodule.exports = addEntity;\n```", "```js\n//@flow\nimport Game from '../engine';\n\nconst addProjectile = (\n  item: string,\n  player: Object,\n  direction: Object,\n  pushProjectile: Function\n) => {\n  let projectile = {\n    name: item,\n    image: `${item}.png`,\n    width: 32,\n    height: 32,\n    pos:{\n      x: player.pos.x,\n      y: player.pos.y\n    },\n    direction: direction,\n    speed: 10\n  };\n  Game.createEntity(projectile);\n  pushProjectile(projectile);\n}\nmodule.exports = addProjectile;\n```", "```js\nimport Game from '../engine';\n\nconst checkCollision = (\n  canvas,\n  player,\n  monster,\n  cb,\n  score\n) => {\n  const collides = Game.bruteForce(\n    player, monster, 32\n  );\n  if(collides) {\n    score();\n\n    const ctx = canvas.getContext(\"2d\");\n    ctx.fillStyle = \"rgb(250, 250, 250)\";\n    ctx.font = \"12px Helvetica\";\n    ctx.textAlign = \"left\";\n    ctx.textBaseline = \"top\";\n    ctx.fillText(\"Ouch\", player.pos.x, player.pos.y-24);\n\n    cb(monster, canvas);\n  }\n}\n\nmodule.exports = checkCollision;\n```", "```js\n//@flow\nimport Game from '../engine';\nconst drawEntities = (\n  Config: Object,\n  canvas: Object,\n  entities: Object\n) => {\n  // Draw all entities\n  Game.loadImage(\n    canvas,\n    Config.backgrounds.game\n  );\n\n  entities.projectiles.forEach((item)=> {\n    Game.drawEntity(canvas, item);\n  })\n\n  entities.monsters.forEach((monster)=> {\n    Game.drawEntity(canvas, monster);\n  })\n\n  entities.players.forEach((player)=> {\n    Game.drawEntity(canvas, player);\n  })\n\n}\nmodule.exports = drawEntities;\n```", "```js\n//@flow\nimport Game from '../engine';\n\nconst drawGameOver = (\n  canvas: Object\n) => {\n  const ctx = canvas.getContext(\"2d\");\n  ctx.fillStyle = \"rgb(255, 255, 255)\";\n  ctx.font = \"24px Helvetica Neue\";\n  ctx.textAlign = \"center\";\n  ctx.textBaseline = \"top\";\n  ctx.fillText(\"Game Over\", canvas.width/2, canvas.height/2-25);\n}\n\nmodule.exports = drawGameOver;\n```", "```js\n//@flow\nimport Game from '../engine';\n\nconst drawGameWon = (\n  canvas: Object\n) => {\n  const ctx = canvas.getContext(\"2d\");\n  ctx.fillStyle = \"rgb(255, 255, 255)\";\n  ctx.font = \"24px Helvetica Neue\";\n  ctx.textAlign = \"center\";\n  ctx.textBaseline = \"top\";\n  ctx.fillText(\"You won!\", canvas.width/2, canvas.height/2-25);\n  ctx.font = \"20px Helvetica Neue\";\n  ctx.fillText(\"You can finally enjoy your picnic!\", canvas.width/2, canvas.height/2);\n}\n\nmodule.exports = drawGameWon;\n```", "```js\n//@flow\nimport Game from '../engine';\n\nconst drawHUD= (\n  canvas: Object,\n  score: number = 0,\n  health: number = 100\n) => {\n  const ctx = canvas.getContext(\"2d\");\n  ctx.fillStyle = \"rgb(250, 250, 250)\";\n  ctx.font = \"20px Helvetica Neue\";\n  ctx.textAlign = \"left\";\n  ctx.textBaseline = \"top\";\n  ctx.fillText(\"SCORE: \" + score, 25, 25);\n  ctx.textAlign = \"right\";\n  ctx.fillText(\"Health: \" + health, canvas.width-35, 25);\n}\n\nmodule.exports = drawHUD;\n```", "```js\n//@flow\nimport Game from '../engine';\n\nconst clearCanvas = (\n  canvas: Object,\n  gameOverImage: ImageData\n) => {\n  const ctx = canvas.getContext(\"2d\");\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.putImageData(gameOverImage, 0, 0);\n}\n\nmodule.exports = clearCanvas;\n```", "```js\n//@flow\nconst outOfBounds = (\n  item: Object = {pos: {x: 160, y: 160}},\n  bounds: Object = {height: 16, width: 16},\n  tileSize: number = 32\n): bool => {\n  if( item.pos.y< -tileSize ||\n      item.pos.x< -tileSize ||\n      item.pos.y > bounds.height+tileSize ||\n      item.pos.x > bounds.width+tileSize\n    ) {\n      return true;\n  }\n  return false;\n}\nmodule.exports = outOfBounds;\n```", "```js\n//@flow\nconst removeEntity = (\n  entities: Array<any>,\n  item: Object,\n  callback: Function\n): Array<any> => {\n  callback();\n  return entities =\n    entities.filter((p)=> {\n    return p.id !== item.id\n  })\n}\nmodule.exports = removeEntity;\n```", "```js\n//@flow\nimport Config from '../config/index';\nimport Game from '../engine';\n\nconst setupGame = (\n  Config: Object,\n  keys: Object,\n  canvas: Object,\n  entities: Object,\n  positions: Object\n) => {\n  // setup keyboard\n  Game.keyboard(keys);\n\n  entities.players.forEach((player)=> {\n```", "```js\n    const tilePos = player.pos;\n    player.pos.x = tilePos.x * Config.tileSize;\n    player.pos.y = tilePos.y * Config.tileSize;\n    Game.createEntity(player);\n  })\n}\nmodule.exports = setupGame;\n```", "```js\n//@flow\nimport keypress from './keypress;\n\nconst keyInput = (\n  Config: Object,\n  keys: Object,\n  player: Object,\n  modifier: number = 1,\n  addProjectile: Function,\n  pushProjectile: Function,\n  coolDown: number,\n  setCoolDown: Function\n) => {\n  const { pos, speed } = player;\n  let direction;\n\n  const Shoot = (coolDown, setCoolDown)=> {\n    if(coolDown<=0) {\n      addProjectile(\n        'fire',\n        player, \n        direction,\n        pushProjectile\n      )\n      setCoolDown();\n    }\n  }\n```", "```js\n  if (keypress.up(keys)) {\n    direction = {\n      xVel: 0,\n      yVel: -20\n    }\n    Shoot(coolDown, setCoolDown);\n  }\n\n  if (keypress.down(keys)) {\n    direction = {\n      xVel: 0,\n      yVel: 20\n    }\n    Shoot(coolDown, setCoolDown);\n\n  }\n\n  if (keypress.left(keys)) {\n    direction = {\n      xVel: -20,\n      yVel: 0\n    }\n    Shoot(coolDown, setCoolDown);\n  }\n\n  if (keypress.right(keys)) {\n    direction = {\n      xVel: 20,\n      yVel: 0\n    }\n    Shoot(coolDown, setCoolDown);\n  }\n\n  if (keypress.w(keys)) {\n    if(pos.y>0) pos.y -= speed *  modifier;\n  }\n\n  if (keypress.s(keys)) {\n    if(pos.y < Config.height-32) pos.y += speed * modifier;\n  }\n\n  if (keypress.a(keys)) {\n    if(pos.x>8) pos.x -= speed * modifier;\n  }\n\n  if (keypress.d(keys)) {\n    if(pos.x < Config.width-32)pos.x += speed * modifier;\n  }\n\n}\n\nmodule.exports = keyInput;\n```", "```js\n    //@flow\n    const s = (\n      keys: Object\n    ): bool => {\n      return 65 in keys;\n    }\n    module.exports = s;\n    ```", "```js\n    //@flow\n    const d = (\n      keys: Object\n    ): bool => {\n      return 68 in keys;\n    }\n    module.exports = d;\n    ```", "```js\n    //@flow\n    const s = (\n      keys: Object\n    ): bool => {\n      return 83 in keys;\n    }\n    module.exports = s;\n    ```", "```js\n    //@flow\n    const w = (\n      keys: Object\n    ): bool => {\n      return 87 in keys;\n    }\n    module.exports = w;\n    ```", "```js\n    //@flow\n    const down = (\n      keys: Object\n    ): bool => {\n      return 40 in keys;\n    }\n    module.exports = down;\n    ```", "```js\n    //@flow\n    const up = (\n      keys: Object\n    ): bool => {\n      return 38 in keys;\n    }\n    module.exports = up;\n    ```", "```js\n    //@flow\n    const left = (\n      keys: Object\n    ): bool => {\n      return 37 in keys;\n    }\n    module.exports = left;\n    ```", "```js\n    //@flow\n    const right = (\n      keys: Object\n    ): bool => {\n      return 39 in keys;\n    }\n    module.exports = right;\n    ```", "```js\n    //@flow\n    const s = (\n      keys: Object\n    ): bool => {\n      return 32 in keys;\n    }\n    module.exports = s;\n    ```", "```js\n    import w from './w';\n    import s from './s';\n    import a from './a';\n    import d from './d';\n    import up from './up';\n    import down from './down';\n    import left from './left';\n    import right from './right';\n    import space from './space';\n\n    module.exports = {\n      w,\n      s,\n      a,\n      d,\n      up,\n      down,\n      left,\n      right,\n      space\n    }\n    ```"]