- en: Chapter 6. Building an Interactive Navigation Menu
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。构建交互式导航菜单
- en: In 2003, an article published on A List Apart ([http://alistapart.com](http://alistapart.com))
    called *Suckerfish Dropdowns* showed how HTML and CSS alone (with just a little
    JavaScript help for IE6) could be used to build a complex multilevel drop-down
    menu. The Suckerfish name derived from the gorgeously designed demo of the technique
    which featured illustrations of remoras and sharksuckers. While useful, the original
    requires that the site visitor not move their mouse outside the menu area while
    navigating or the menu disappears. Over the years, the Suckerfish Dropdowns have
    inspired a lot of spinoffs — Son of Suckerfish, Improved Suckerfish, and so on
    that attempt to address the shortcomings of the original. Since jQuery can make
    everything better, we'll build on this idea using the Superfish jQuery plugin
    to make the menu easier to use.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 2003 年，A List Apart（[http://alistapart.com](http://alistapart.com)）上发布的一篇文章叫做
    *Suckerfish Dropdowns* 展示了如何仅使用 HTML 和 CSS（仅在 IE6 中稍微需要一点 JavaScript 帮助）就可以构建复杂的多级下拉菜单。Suckerfish
    名字源自该技术的精美设计演示，其中包含了鲸鲨和寄生鱼的插图。虽然有用，但原始版本要求网站访客在导航时不要将鼠标移出菜单区域，否则菜单会消失。多年来，Suckerfish
    Dropdowns 激发了许多衍生产品 — Son of Suckerfish，Improved Suckerfish 等，试图解决原始版本的缺点。由于 jQuery
    能够让一切变得更好，我们将使用 Superfish jQuery 插件来构建这个想法，使菜单更易于使用。
- en: The developer of the Superfish plugin, Joel Birch, says that most support issues
    with the plugin come from people not understanding the CSS for the menu. To be
    sure you have a firm grasp on the CSS, I highly recommend reading the original
    Suckerfish Dropdowns article on *A List Apart* at [http://www.alistapart.com/articles/dropdowns](http://www.alistapart.com/articles/dropdowns).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Superfish 插件的开发者 Joel Birch 表示，插件的大部分支持问题来自于人们不理解菜单的 CSS。为了确保你对 CSS 有牢固的掌握，我强烈建议阅读
    *A List Apart* 上的原始 Suckerfish Dropdowns 文章，网址为 [http://www.alistapart.com/articles/dropdowns](http://www.alistapart.com/articles/dropdowns)。
- en: To get started with this plugin, we'll build on a basic Suckerfish menu. Since
    that menu only requires CSS, we still get an interactive menu if we have JavaScript
    disabled. The menu is just improved for users with JavaScript enabled.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用此插件，我们将构建一个基本的 Suckerfish 菜单。由于该菜单仅需要 CSS，因此如果我们禁用 JavaScript，我们仍然可以获得一个交互式菜单。菜单只是针对启用
    JavaScript 的用户进行了改进。
- en: 'In this chapter, we''ll learn the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: Using the Superfish jQuery plugin to create a horizontal drop-down menu
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Superfish jQuery 插件创建水平下拉菜单
- en: Creating vertical flyout menu with the Superfish plugin
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Superfish 插件创建垂直飞出菜单
- en: Customizing the drop-down and flyout menus created with the Superfish plugin
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义使用 Superfish 插件创建的下拉和飞出菜单
- en: Horizontal drop-down menu
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 水平下拉菜单
- en: The horizontal drop-down menu was long a common item in desktop software but
    challenging if not impossible to implement in websites until CSS and JavaScript
    finally arrived on the scene to make them possible.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 长期以来，水平下拉菜单一直是桌面软件中的常见项目，但在网站中实现起来可能很具挑战性，甚至是不可能的，直到 CSS 和 JavaScript 最终出现，使其成为可能。
- en: Time for action — creating a horizontal drop-down menu
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 — 创建水平下拉菜单
- en: 'Let''s take a look at how we can use the Superfish plugin to create a horizontal
    drop-down menu:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用 Superfish 插件创建水平下拉菜单：
- en: 'To get started, we''ll create a simple HTML page and the associated folders
    and files like we created in [Chapter 1](ch01.html "Chapter 1. Designer, Meet
    jQuery"), *Designer, Meet jQuery*. The body of our HTML file will contain a navigation
    menu that consists of nested unordered lists as follows:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始，我们将创建一个简单的 HTML 页面和相关的文件夹和文件，就像我们在 [第 1 章](ch01.html "Chapter 1. Designer,
    Meet jQuery") 中创建的那样，*Designer, Meet jQuery*。我们 HTML 文件的主体将包含一个嵌套的无序列表导航菜单，如下所示：
- en: '[PRE0]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that we've added an `id` of `sfNav` and a `class` of `sf-menu` to the `<ul>`
    that contains our menu. This will make it easy for us to select and style the
    menu the way we'd like.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，我们给包含菜单的 `<ul>` 添加了 `id` 为 `sfNav` 和 `class` 为 `sf-menu`。这样可以让我们更容易选择和样式化菜单。
- en: 'If you view your page in the browser, it will look similar to the following
    screenshot:'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你在浏览器中查看页面，它会类似于以下的屏幕截图：
- en: '![Time for action — creating a horizontal drop-down menu](img/6709OS_06_image1.jpg)'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 — 创建水平下拉菜单](img/6709OS_06_image1.jpg)'
- en: As you can see, we've organized our links into a hierarchy. This is useful for
    finding the information that we want, but it takes up quite a lot of space. This
    is where we can use a technique of hiding extra information until it's needed.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们将链接组织成了一个层次结构。这对于查找我们想要的信息很有用，但占用了相当多的空间。这就是我们可以使用一种技术来隐藏额外信息直到需要它的时候的地方。
- en: Next, we need a copy of the Superfish plugin. Head over to [http://users.tpg.com.au/j_birch/plugins/superfish/](http://users.tpg.com.au/j_birch/plugins/superfish/)
    where you'll find Joel Birch's Superfish plugin available for download along with
    documentation and examples.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个Superfish插件的副本。请转到[http://users.tpg.com.au/j_birch/plugins/superfish/](http://users.tpg.com.au/j_birch/plugins/superfish/)，在那里您将找到Joel
    Birch的Superfish插件可供下载，以及文档和示例。
- en: 'In Joel''s **Quick Start Guide**, we see that there are three simple steps
    to implementing the Superfish plugin:'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Joel的**快速入门指南**中，我们看到实施Superfish插件有三个简单的步骤：
- en: Write the CSS to create a Suckerfish-style drop-down menu
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写CSS以创建Suckerfish样式的下拉菜单
- en: Link to the `superfish.js` file
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接到`superfish.js`文件
- en: Call the `superfish()` method on the element that contains your menu
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在包含您的菜单的元素上调用`superfish()`方法
- en: Lucky for us, Joel also includes a sample CSS file, so we can get started quickly.
    We'll look at customizing the appearance of our menu later, but for now, we'll
    go ahead and use the CSS included with the plugin.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 幸运的是，Joel还包含了一个样式CSS文件的样本，所以我们可以快速开始。我们稍后会看看如何自定义菜单的外观，但现在，我们将继续使用与插件一起提供的CSS。
- en: Click on the **Download & Support** tab.![Time for action — creating a horizontal
    drop-down menu](img/6709OS_06_image2.jpg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下载和支持**选项卡。![操作时间——创建一个水平下拉菜单](img/6709OS_06_image2.jpg)
- en: The first link in the **Download** section is the link to download the ZIP file.
    Underneath that, we see a bulleted list of all the files included in the ZIP and
    links are provided to download each of them separately. We'll go ahead and download
    the entire ZIP file since we're going to make use of several of these files. Click
    on the **Superfish-1.4.8.zip** link and save the file to your computer.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在**下载**部分的第一个链接是下载ZIP文件的链接。在此之下，我们看到一个带有所有ZIP文件中包含的文件的项目列表，并提供了单独下载每个文件的链接。既然我们将使用其中的几个文件，我们将下载整个ZIP文件。点击**Superfish-1.4.8.zip**链接并将文件保存到您的计算机上。
- en: Unzip the folder and take a look inside:![Time for action — creating a horizontal
    drop-down menu](img/6709OS_06_image3.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压文件夹并查看其中的内容：![操作时间——创建一个水平下拉菜单](img/6709OS_06_image3.jpg)
- en: We'll find the files nicely organized into subdirectories by type along with
    an example HTML file we can examine to see the plugin at work.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们会发现文件被很好地按类型组织到子目录中，还有一个示例HTML文件，我们可以查看以查看插件的工作原理。
- en: The first file we'll need from the **Download** section is the `superfish.css`
    file from the `css` folder. Copy that file to your own `styles` folder.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从**下载**部分需要的第一个文件是`css`文件夹中的`superfish.css`文件。将该文件复制到您自己的`styles`文件夹中。
- en: 'Next, we''ll edit our HTML file to include the `superfish.css` file in the
    head of the document:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将编辑我们的HTML文件，将`superfish.css`文件包含在文档的头部：
- en: '[PRE1]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We're attaching the `superfish.css` file before our `styles.css` file to make
    it easier for us to override any styles in the `superfish.css` file we want to
    change later.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将在`styles.css`文件之前附加`superfish.css`文件，以便于我们稍后覆盖`superfish.css`文件中的任何样式。
- en: Now, if you refresh the page in a browser, you'll see a working Suckerfish drop-down
    menu:![Time for action — creating a horizontal drop-down menu](img/6709OS_06_image4.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果您在浏览器中刷新页面，您将看到一个可用的Suckerfish下拉菜单：![操作时间——创建一个水平下拉菜单](img/6709OS_06_image4.jpg)
- en: When I move my mouse over the first link, the nested`<ul>` becomes visible.
    If I move my mouse down to the last link in the drop down, the`<ul>` nested at
    the third level becomes visible.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当我将鼠标移到第一个链接上时，嵌套的`<ul>`变得可见。如果我将鼠标移到下拉菜单中的最后一个链接上，嵌套在第三级的`<ul>`就会变得可见。
- en: Keep in mind, all of this is accomplished without JavaScript — just CSS. If
    you spend a few moments using the menu, you'll probably quickly recognize some
    shortcomings. First, if I want to move my mouse from the **Ornithoptera** link
    to the **Cape York Birdwing** link, my natural inclination is to move my mouse
    diagonally. However, as soon as my mouse leaves the blue menu area, the menu closes
    and disappears. I have to adjust to move my mouse directly right onto the submenu,
    then down to the link I'm interested in.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，所有这些都是在没有 JavaScript 的情况下完成的 — 只有 CSS。如果您花点时间使用该菜单，您可能很快就会意识到一些缺点。首先，如果我想要将我的鼠标从**翻翼鸟**链接移动到**开普约克凤蝶**链接，我的自然倾向是对角线移动鼠标。然而，一旦我的鼠标离开蓝色菜单区域，菜单就会关闭和消失。我必须调整移动我的鼠标直接移到子菜单上，然后向下移动到我感兴趣的链接。
- en: '![Time for action — creating a horizontal drop-down menu](img/6709OS_06_image5.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 — 创建水平下拉菜单](img/6709OS_06_image5.jpg)'
- en: This is awkward and makes the menu feel fragile. If my mouse moves even 1 pixel
    outside the menu, the menu collapses and disappears. Another problem is that the
    menu opens as soon as the mouse hovers over it. If I am moving my mouse over the
    menu moving from one part of the page to another, the menu opens and closes quickly,
    which can be distracting and unexpected.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这很尴尬，使得菜单感觉很脆弱。如果我的鼠标移动超出菜单1像素，菜单就会折叠消失。另一个问题是，只要鼠标悬停在菜单上，菜单就会打开。如果我在页面的一个部分移动鼠标移动到另一个部分，菜单就会快速打开和关闭，这可能会分散注意力和不可预期。
- en: This is a great place for jQuery to step in and make things a bit better and
    more usable.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 jQuery 发挥作用并使事情变得更好更易用的好地方。
- en: Time for action — improving the drop-down menu with jQuery
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 — 使用 jQuery 改善下拉菜单
- en: 'Follow these steps to improve the usability of the drop-down menu with jQuery:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤，可以使用 jQuery 改善下拉菜单的可用性：
- en: 'We''ll begin by attaching the Superfish plugin to our HTML page at the bottom
    of our file, between jQuery and our `scripts.js` file:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从在 HTML 页面底部将 Superfish 插件连接到我们的文件中开始，放在 jQuery 和我们的`scripts.js`文件之间：
- en: '[PRE2]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, open `scripts.js`, where we will write our code calling the `superfish()`
    method. As usual, we''ll get started with the document ready statement so that
    our script runs as soon as the page is loaded into the browser:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`scripts.js`，我们将在其中编写调用`superfish()`方法的代码。像往常一样，我们将从文档准备语句开始，这样我们的脚本会在页面加载到浏览器中时立即运行：
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Looking at the documentation for the Superfish plugin, we see that we only
    have to select the element or elements that we''d like to apply the behavior to
    and then call the `superfish()` method. Inside our `ready()` method, we''ll add
    the following code:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看 Superfish 插件的文档，我们看到我们只需选择要应用行为的元素或元素，然后调用`superfish()`方法即可。在我们的`ready()`方法中，我们将添加以下代码：
- en: '[PRE4]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, if you refresh the page in the browser, you'll see the menu still looking
    very similar, but with much improved behavior. The Superfish JavaScript and CSS
    work together to add arrows to the menu items that have nested children. If you
    move your mouse off of the menu, it does not disappear immediately, making it
    possible to move the mouse diagonally to nested menu items. There's also a subtle
    fade in animation when the menu items appear. And a background color change to
    each menu item on hover, making it easy to see which item is currently active.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您在浏览器中刷新页面，您会看到菜单看起来仍然很相似，但行为得到了很大改善。Superfish JavaScript 和 CSS 协同工作，为具有嵌套子菜单的菜单项添加箭头。如果将鼠标移开自菜单，它不会立即消失，这样可以将鼠标对角线移动到嵌套菜单项。当菜单项出现时，还会有一个微妙的淡入动画。当鼠标悬停时，每个菜单项的背景颜色会更改，使得当前活动项易于识别。
- en: What just happened?
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We set up a navigation menu consisting of a set of nested lists, forming a hierarchy.
    Next, we attached a CSS file to add a simple drop-down functionality to our menu.
    However, that CSS-only menu had a few shortcomings. So we attached the Superfish
    plugin to take care of those and make our menu more user friendly.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置了一个导航菜单，由一组嵌套列表组成，形成一个层次结构。接下来，我们连接了一个 CSS 文件，为我们的菜单添加了简单的下拉功能。然而，纯 CSS
    的菜单有一些缺陷。因此，我们连接了 Superfish 插件来解决这些问题，使我们的菜单更加用户友好。
- en: Vertical fly-out menu
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 垂直弹出式菜单
- en: We saw how the addition of the Superfish plugin enhanced the user experience
    of our drop-down menu, but what if we wanted to create a vertical fly-out menu
    instead?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到添加 Superfish 插件如何增强了我们下拉菜单的用户体验，但如果我们想要创建一个垂直的弹出式菜单呢？
- en: Time for action — creating a vertical fly-out menu
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 — 创建垂直弹出式菜单
- en: Switching from a horizontal drop-down menu to a vertical fly-out menu couldn't
    be easier. We'll use the same HTML markup and our JavaScript code will stay the
    same. The only change we'll need to make is to add some new CSS to make our menu
    display vertically instead of horizontally. We can keep working with the same
    files we used in the last example.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从水平下拉菜单切换到垂直弹出菜单再简单不过了。我们将使用相同的 HTML 标记，我们的 JavaScript 代码也将保持不变。我们唯一需要做的改变是添加一些新的
    CSS，使我们的菜单垂直显示而不是水平显示。我们可以继续使用上一个示例中使用的相同文件。
- en: 'In the `css` folder of the Superfish download, you''ll find a file named `superfish-vertical.css`.
    Copy that file to your own `styles` folder. In the `head` section of the HTML
    file, we''ll attach the new CSS file. Between `superfish.css` and `styles.css`,
    add the new CSS file:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Superfish 下载的 `css` 文件夹中，你会找到一个名为 `superfish-vertical.css` 的文件。将该文件复制到你自己的
    `styles` 文件夹中。在 HTML 文件的 `head` 部分，我们将附加新的 CSS 文件。在 `superfish.css` 和 `styles.css`
    之间，添加新的 CSS 文件：
- en: '[PRE5]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, in the HTML we'll add an `sf-vertical` class to the list that contains
    our menu.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 HTML 中，我们将在包含菜单的列表中添加一个 `sf-vertical` 类。
- en: '[PRE6]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now when you refresh the page in a browser, you'll see the menu displayed vertically
    with fly-outs:![Time for action — creating a vertical fly-out menu](img/6709OS_06_image6.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在当你在浏览器中刷新页面时，你将看到菜单垂直显示并带有弹出效果：![进行操作的时间 —— 创建垂直弹出菜单](img/6709OS_06_image6.jpg)
- en: What just happened?
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: The only difference between the horizontal drop-down menu and the vertical fly-out
    menu is the CSS and a class name added to the menu container. By simply adding
    a new CSS file and a new CSS class, it's possible to create a vertical fly-out
    menu instead of a horizontal drop-down menu.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 水平下拉菜单和垂直弹出菜单之间唯一的区别是 CSS 和一个类名添加到菜单容器上。只需添加一个新的 CSS 文件和一个新的 CSS 类，就可以创建一个垂直弹出菜单，而不是水平下拉菜单。
- en: Customizing the navigation menu
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义导航菜单
- en: The included CSS with the Superfish plugin makes creating an interactive navigation
    menu quick and simple, but a soft blue menu isn't going to fit into every design,
    so let's take a look at how we can customize the menu.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 超级鱼插件附带的 CSS 使创建交互式导航菜单变得快速简单，但柔和的蓝色菜单不适合每种设计，所以让我们看看如何自定义菜单。
- en: We're going to take a look at how we can customize the look of the menu by writing
    our own CSS, customize the animation for showing the nested menus, highlight the
    current page, and enhance the hover behavior of the menu.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看看如何通过编写自己的 CSS 来自定义菜单的外观，自定义显示嵌套菜单的动画，突出显示当前页面，并增强菜单的悬停行为。
- en: 'We''re going to get started by writing some CSS to create a custom look for
    our menus. We''re going to use the Suckerfish Dropdown approach to create a menu
    that will work for our site visitors who don''t have JavaScript enabled. I''d
    like to create a soft gradient background and have my menu items appear to be
    ribbons floating over the top of this background. My menu will look similar to
    the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始编写一些 CSS，为我们的菜单创建自定义外观。我们将使用 Suckerfish Dropdown 方法创建一个菜单，这将适用于我们网站访问者中没有启用
    JavaScript 的用户。我想创建一个柔和的渐变背景，并使我的菜单项看起来像是漂浮在这个背景上的丝带。我的菜单将类似于以下截图：
- en: '![Customizing the navigation menu](img/6709OS_06_image7.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![自定义导航菜单](img/6709OS_06_image7.jpg)'
- en: 'I''m going to really take advantage of the newer CSS3 properties available
    for use in modern browsers. I''m using gradients, box shadows, and rounded corners.
    I''ve carefully selected these options because even without these extras, the
    menu will still look okay and will be usable. The following is an example of how
    the menu will appear in the older browsers:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我要充分利用现代浏览器中可用的较新 CSS3 属性。我正在使用渐变、盒阴影和圆角。我精心选择了这些选项，因为即使没有这些额外的功能，菜单看起来仍然可以，而且可以使用。以下是菜单在旧版浏览器中的外观示例：
- en: '![Customizing the navigation menu](img/6709OS_06_image8.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![自定义导航菜单](img/6709OS_06_image8.jpg)'
- en: You can see that it's missing some of the extra styling from the modern browser
    example, but that it's still perfectly usable and generally pleasing to the eye.
    If it were really important for the menu to look the same in all browsers, then
    we could apply the same effects using images instead of CSS3 to get the final
    effect. However, we'd likely need to add some extra markup, and we'd definitely
    need to add images and extra lines of CSS, all adding weight to our pages overall.
    Whether you decide to allow your menu to degrade gracefully for older browsers
    or you decide to write the extra code and create the extra images to make the
    menu appear the same in all browsers is a decision you'll need to make based on
    the client's expectations, the target audience for the website, and the importance
    of building speedy and lightweight pages.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，与现代浏览器示例中的一些额外样式相比，它确实缺少了一些，但仍然完全可用并且通常令人满意。如果在所有浏览器中菜单看起来都一样很重要，那么我们可以使用图片而不是
    CSS3 来获得最终效果。但是，我们可能需要添加一些额外的标记，并且肯定需要添加图像和额外的 CSS 行，所有这些都会增加页面的总体负担。是否决定让菜单在旧版浏览器中逐渐降级，或者是否决定编写额外的代码并创建额外的图像，使菜单在所有浏览器中看起来都一样，这是你需要根据客户的期望、网站的目标受众以及构建快速轻量级页面的重要性来做出的决定。
- en: 'Here are some things to keep in mind as you write custom CSS for a drop-down
    or fly-out menu:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在为下拉菜单或弹出菜单编写自定义 CSS 时，请记住以下几点：
- en: :hover and .sfHover
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: :hover 和 .sfHover
- en: 'In order to make your menu work without JavaScript, you''ll need to take advantage
    of the `:hover` pseudo-class for the list items. Make sure to also create a CSS
    selector for the same element with a `.sfHover` class, which will be used by the
    JavaScript. For example:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使菜单在没有 JavaScript 的情况下工作，你需要利用列表项的`:hover` 伪类。确保同时为相同元素创建一个带有 `.sfHover` 类的
    CSS 选择器，这将被 JavaScript 使用。例如：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This bit of code makes the nested menu visible on the screen when the parent
    list item is hovered over. Including the `li:hover` selector ensures the menu
    works without JavaScript. Also including the `li.sfHover` selector ensures the
    JavaScript menu will apply the same code.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标悬停在父列表项上时，此段代码会使嵌套菜单在屏幕上可见。包括`li:hover`选择器确保菜单在没有 JavaScript 的情况下工作。同时包括`li.sfHover`选择器确保
    JavaScript 菜单会应用相同的代码。
- en: Cascading inherited styles
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 级联继承样式
- en: 'It''s the very nature of CSS for styles to cascade down the DOM and be applied
    to all children of the selector as well as the selector itself. So, if you write
    code to style the list items of the first-level menu like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 的本质就是样式沿 DOM 层级进行级联，并应用于选择器的所有子元素以及选择器本身。因此，如果你编写代码来为一级菜单的列表项添加样式，如下所示：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'All of the`<li>s` in your menu are going to have a dark red background, no
    matter which level of the menu they appear in. If you want to apply different
    styles to different menu levels, you''ll have to override the cascade in other
    lines of code. For example, if I wanted to make the second menu level have a dark
    blue background, I''d add this snippet of CSS *after* the preceding code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你菜单中的所有 `<li>` 都将具有深红色背景，无论它们出现在菜单的哪个级别。如果你想为不同的菜单级别应用不同的样式，你需要在其他代码行中覆盖级联。例如，如果我想使第二级菜单具有深蓝色背景，我会在上述代码之后添加此段
    CSS：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'That means for a`<li>` inside another`<li>`, the background will be blue. Keep
    in mind that now this style will in turn cascade down to other menu levels, so
    if you want a dark green background for the third-level menu, you''ll need to
    add another bit of CSS:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着对于另一个`<li>`内部的`<li>`，背景将会是蓝色。请记住，现在这个样式将级联到其他菜单级别，所以如果你想要第三级菜单具有深绿色背景，你需要再添加一点
    CSS：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In some cases, making use of direct descendent selectors in your CSS can help
    to prevent you from having to write too many lines of CSS overriding styles written
    for elements higher up in the DOM. For example:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，在你的 CSS 中使用直接后代选择器可以帮助你避免编写太多覆盖 DOM 中较高元素样式的 CSS。例如：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This bit of CSS takes advantage of a direct descendent selector (>). The dark
    red background in this case will only apply to the`<li>` elements nested directly
    inside`<ul>` with a class of `sf-menu`. It will not cascade down to the second-
    or third-level menus.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这段 CSS 利用了直接后代选择器（>`）。在这种情况下，深红色背景只会应用于具有 `sf-menu` 类的 `<ul>` 直接嵌套的 `<li>` 元素。它不会级联到第二级或第三级菜单。
- en: Vendor prefixes
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 供应商前缀
- en: 'If you''d like to experiment with the new CSS3 properties, you''ll have to
    be sure to prepend your properties with vendor-specific prefixes. While these
    properties are supported by most modern browsers, they are still under development
    and may be implemented in slightly different ways in different browsers. Take
    for example, this bit of CSS, which rounds the bottom two corners:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要尝试新的 CSS3 属性，你必须确保在属性前加上供应商特定的前缀。尽管这些属性受大多数现代浏览器支持，但它们仍在开发中，并且可能在不同浏览器中以稍微不同的方式实现。比如，下面这段
    CSS，将底部两个角圆化的代码：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can see that the property for the bottom-left and bottom-right corners is
    slightly different between webkit-based browsers (Safari and Chrome, mainly) and
    Mozilla browsers (mainly Firefox). After the vendor-specific code, include the
    general CSS3 code for any browsers that support that to make sure your code is
    future-proof.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，对于左下角和右下角的属性，在 Webkit 内核浏览器（主要是 Safari 和 Chrome）和 Mozilla 浏览器（主要是 Firefox）之间略有不同。在供应商特定代码之后，包括任何支持的浏览器的一般
    CSS3 代码，以确保你的代码是未来兼容的。
- en: Time for action — customizing Superfish menus
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——定制 Superfish 菜单
- en: 'Customizing a Superfish menu mostly involves writing your own CSS to style
    the menu the way you''d like. Here''s how we''ll create a custom look for the
    menu:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 定制 Superfish 菜单主要涉及编写自己的 CSS 来样式化菜单，让它看起来更符合你的喜好。下面是我们将为菜单创建自定义外观的方法：
- en: If you'll remember some web basics, you'll remember that CSS stands for Cascading
    Style Sheets. The cascading features are what we'll focus on here. Any styles
    we write for the top level of our menu are going to cascade down to the other
    levels of the menu. We have to remember that and handle all the cases where we'd
    rather stop a style from cascading downward.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你记得一些网页基础，你会记得 CSS 代表层叠样式表。层叠特性是我们在这里将要关注的。我们为菜单顶层编写的任何样式都将层叠到菜单的其他级别。我们必须记住这一点，并处理那些我们宁愿阻止样式层叠向下传递的情况。
- en: 'Let''s get started by styling the top level of our menu. Since I''m using new
    CSS3 features, we''re going to have to be prepared to write a bit of extra code
    so that each browser can handle our code gracefully. Here''s the CSS we''ll create
    for the top level of the menu. Place this code inside your `styles.css` file:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从样式化菜单的顶层开始。由于我使用了新的 CSS3 功能，我们需要准备写一些额外的代码，以便每个浏览器都能优雅地处理我们的代码。下面是我们将为菜单顶层创建的
    CSS。将此代码放入你的`styles.css`文件中：
- en: '[PRE13]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Phew! That seems like a lot of code, but much of it is the repeated gradient
    and shadow declarations we have to use for each different type of browser. Keep
    your fingers crossed that this requirement goes away soon and the browser vendors
    eventually reach agreement on how gradients and drop shadows should be created
    with CSS.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 哎呀！这看起来像是很多代码，但其中大部分是我们需要为每种不同类型的浏览器使用的重复的渐变和阴影声明。让我们祈祷这个要求很快消失，浏览器供应商最终达成一致意见，确定用
    CSS 创建渐变和阴影的方法。
- en: 'Next, let''s take a look at how we''ll style the next level of our menus. Add
    the following CSS to your `styles.css` file to style the second level:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何为我们菜单的下一级样式化。将以下 CSS 添加到你的`styles.css`文件中，以样式化第二级菜单：
- en: '[PRE14]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Once again, this seems like a lot of CSS, but we still have that problem of
    having to write our declarations for each individual browser. The second level
    of menu items is also complicated by the need to override or undo any styles we
    applied to the top level of the menu that we don't want to apply here. For example,
    we applied a `float` property to all items at the top level of our menu, but we
    had to undo that for the second level of the menu.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 再一次，这看起来像是很多 CSS，但我们仍然需要为每个单独的浏览器编写我们的声明。菜单的第二级项目也因需要覆盖或取消我们应用于菜单顶层但我们不希望应用于这里的任何样式而变得复杂。例如，我们为菜单顶层的所有项目应用了
    `float` 属性，但我们需要取消第二级菜单的应用。
- en: I'm sure you're starting to see why most of the support issues for the Superfish
    plugin are CSS related, rather than JavaScript related. There's a lot to keep
    track of here.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我相信你开始明白为什么 Superfish 插件的大部分支持问题都与 CSS 有关，而不是 JavaScript。这里有很多要记住的东西。
- en: 'Finally, we still have a third level of menu to style. Just like the second
    level, we need to undo any cascading styles that we don''t want to apply. Add
    the following styles to your `styles.css` file:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们仍然有第三级菜单需要样式化。就像第二级一样，我们需要取消任何我们不希望应用的级联样式。将以下样式添加到你的`styles.css`文件中：
- en: '[PRE15]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: And take a deep breath, because we've finally reached the end of the CSS to
    create a custom style for the menu. Don't worry, this was a particularly complex
    design using lots of new CSS3 styles. If you pick something a bit simpler, it
    could be a lot less code that you'll have to create to get the style working.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '现在深吸一口气，因为我们终于到达了为菜单创建自定义样式的 CSS 的尽头。别担心，这是一个特别复杂的设计，使用了大量新的 CSS3 样式。如果你选择了一个稍微简单的东西，你将不得不创建更少的代码来使样式工作。  '
- en: The bonus of this CSS is that it will work even without enabling JavaScript.
    The Superfish plugin just enhances the menu and makes it more usable.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '这个 CSS 的额外好处是即使没有启用 JavaScript，它也可以工作。Superfish 插件只是增强了菜单，使其更易于使用。  '
- en: What just happened?
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '刚才发生了什么事？  '
- en: We wrote custom CSS to style our menu to match a design that we created. In
    order to get hover states working correctly, we had to remember to style both
    the `:hover` pseudoclass and the `.sfHover` class. We also had to dig into the
    cascading feature of CSS and decide which styles should cascade down through all
    levels of the menu and which should not. And finally, we had to keep in mind that
    newer CSS3 properties have to be declared in different ways for different browsers—for
    now, at least. All of this adds up to a drop-down menu requiring more custom CSS
    than you might expect at first. Just be patient and keep the cascade in mind as
    you work down through the levels of the menu.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '我们编写了自定义 CSS 来使我们的菜单与我们创建的设计匹配。为了正确地使悬停状态工作，我们必须记得同时为`:hover`伪类和`.sfHover`类设置样式。我们还必须深入研究
    CSS 的级联特性，并决定哪些样式应该通过菜单的所有级别级联下来，哪些不应该。最后，我们必须记住，新的 CSS3 属性现在至少在不同的浏览器中必须以不同的方式声明。所有这些都导致下拉菜单需要比你最初预期的更多的自定义
    CSS。只需耐心，一路下来时记住级联即可。  '
- en: Custom animation
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '自定义动画  '
- en: Now that we've got the CSS for our custom style written, let's take a look at
    customizing the animation that shows the submenus. A sliding animation would be
    better suited to my menu style. The default animation is to fade the submenus
    in, but I'd rather override this default behavior and replace it with a sliding
    animation.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '现在我们已经编写了自定义样式的 CSS，让我们来看看如何自定义显示子菜单的动画。滑动动画更适合我的菜单风格。默认动画是淡入子菜单，但我宁愿覆盖此默认行为，并用滑动动画替换它。  '
- en: Time for action — incorporating custom animation
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '行动时间 —— 合并自定义动画  '
- en: 'Follow these steps to incorporate custom animations to your menu:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '按照以下步骤将自定义动画合并到您的菜单中：  '
- en: 'Fading the menu in means that the menu opacity is animating from 0 to 100 percent.
    I''d rather animate the height of the submenu, so that the submenu slides into
    view. To do that, open your scripts.js file and we''ll customize the animation
    value inside the `superfish()` method:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将菜单淡入意味着菜单的不透明度从 0 变化到 100 百分比。我宁愿动画化子菜单的高度，以便子菜单滑入视图。要做到这一点，打开你的 scripts.js
    文件，我们将在 `superfish()` 方法内自定义动画值：  '
- en: '[PRE16]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Just adding a value here will override the default behavior of the plugin and
    replace it with the animation we choose instead.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '在此处添加一个值将覆盖插件的默认行为，并用我们选择的动画替换它。  '
- en: Now when you refresh the page in a browser, you'll see the submenus slide into
    view instead of fade in, which is a much more fitting animation for the CSS I've
    used to style the menus.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '现在当你在浏览器中刷新页面时，你会看到子菜单滑入视图，而不是淡入，这是与我用来样式化菜单的 CSS 更匹配的动画。  '
- en: What just happened?
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '刚才发生了什么事？  '
- en: We took advantage of one of the customization options for the Superfish plugin
    to change the show animation of the nested subnavigation links. There are more
    customization options covered in the documentation of the Superfish menu.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '我们利用了 Superfish 插件的自定义选项之一，改变了嵌套子导航链接的显示动画。在 Superfish 菜单的文档中还涵盖了更多的自定义选项。  '
- en: The hoverIntent plugin
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[hoverIntent 插件](https://example.org/hoverIntent)  '
- en: Earlier, I pointed out that one problem with our menu was how quickly the menu
    reacted to the `mouseover` event. Any time the mouse is moved over the menu, the
    nested menus open. While that might seem like a good thing at first, it might
    be disconcerting or surprising to site visitors if they are simply moving their
    mouse on the screen and aren't intending to use the drop-down or fly-out menu.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候，我指出我们的菜单有一个问题，那就是菜单对`mouseover`事件的反应速度太快了。任何时候鼠标移动到菜单上，嵌套菜单就会打开。虽然这乍看起来可能是一件好事，但如果站点访问者只是在屏幕上移动鼠标，而不打算使用下拉或弹出式菜单，这可能会让人感到不安或惊讶。
- en: The Superfish plugin has built-in support for the hoverIntent plugin. The hoverIntent
    plugin sort of pauses the `mouseover` event and makes the page wait to see if
    the mouse slows down or stops on an item to make sure it's what the site visitor
    intended to do. That way if the site visitor just happens to roll his/her mouse
    over the drop-down menu on their way to something else on the page, the submenus
    won't start appearing, throwing them into confusion.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Superfish 插件内置支持 hoverIntent 插件。hoverIntent 插件有点暂停`mouseover`事件，并使页面等待以查看鼠标是否减速或停止在一个项目上，以确保这是站点访问者想要做的。这样，如果站点访问者碰巧将鼠标悬停在下拉菜单上，而在页面上寻找其他内容，子菜单不会开始出现，将其置于困惑中。
- en: If you'll recall, the hoverIntent plugin was actually included in the ZIP file
    when we downloaded the Superfish plugin.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得的话，当我们下载 Superfish 插件时，hoverIntent 插件实际上已经包含在 ZIP 文件中。
- en: Time for action — adding the hoverIntent plugin
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——添加 hoverIntent 插件
- en: 'Follow these steps to take advantage of the hoverIntent plugin for your menu:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤利用 hoverIntent 插件来为您的菜单增加功能：
- en: In the Superfish download, locate the `hoverIntent.js` file inside the `js`
    folder and copy the file to your own `scripts` folder.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Superfish 下载中，找到位于 `js` 文件夹内的 `hoverIntent.js` 文件，并将文件复制到您自己的 `scripts` 文件夹中。
- en: Next, we need to attach the hoverIntent plugin to our HTML page.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要将 hoverIntent 插件附加到我们的 HTML 页面上。
- en: Tip
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Don't forget to keep dependencies in mind when attaching multiple JavaScript
    files to a page. All jQuery plugins depend on jQuery to operate, so jQuery needs
    to be attached to your page before any plugins. In this case, the Superfish plugin
    depends upon the hoverIntent plugin, so we need to make sure hoverIntent is added
    to our page before the Superfish plugin.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要忘记在将多个 JavaScript 文件附加到页面时考虑依赖关系。所有 jQuery 插件都依赖于 jQuery 来运行，因此需要在任何插件之前将
    jQuery 附加到您的页面上。在这种情况下，Superfish 插件依赖于 hoverIntent 插件，因此我们需要确保在 Superfish 插件之前添加
    hoverIntent。
- en: 'Add the new`<script>` tag to the bottom of your page with the other scripts
    as follows:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的 `<script>` 标签添加到您的页面底部，与其他脚本一起如下：
- en: '[PRE17]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now if you refresh the page in a browser, you'll see that there's a short pause
    when your mouse moves over the menu before the nested submenu appears. And if
    you run your mouse across the page quickly, crossing the menu, no unwanted submenus
    appear on the page.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您在浏览器中刷新页面，您会发现当鼠标移动到菜单上时会有一个短暂的暂停，然后嵌套的子菜单出现。如果您快速将鼠标移到页面上，越过菜单，页面上不会出现不需要的子菜单。
- en: Have a go hero — set your own speed
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英雄般的尝试——设定你自己的速度
- en: Try using the different customization options for the Superfish plugin that
    are outlined in the documentation to adjust the speed of the animation that shows
    the submenus.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用在文档中概述的 Superfish 插件的不同定制选项，调整显示子菜单的动画速度。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Whew! That was a lot of work we just did, but I have to say we have a pretty
    impressive navigation menu to show for our efforts. We learned how to use the
    Superfish jQuery plugin to produce horizontal drop-down menus or vertical fly-out
    menus. And we learned how to fully customize the look and feel of our menu to
    fit our site design perfectly. Being able to hide subsections of the site until
    they're needed makes a complex navigation structure less overwhelming for your
    site visitors. It's simple and clear to see what the main sections of the site
    are, and they can easily drill down to just the content they want.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！刚刚我们做了很多工作，但我必须说，我们为我们的努力展示了一个相当令人印象深刻的导航菜单。我们学会了如何使用 Superfish jQuery 插件来生成水平下拉菜单或垂直飞出菜单。我们还学会了如何完全自定义我们菜单的外观和感觉，以完美适应我们的网站设计。能够隐藏站点的子部分直到需要它们，使得复杂的导航结构对于您的站点访问者来说不那么令人难以置信。可以清楚地看到站点的主要部分是什么，他们可以轻松地深入到他们想要的内容。
- en: Next, we'll take a look at spiffing up our animation even more by super-powering
    it with Ajax.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过使用 Ajax 来进一步提升我们的动画效果。
