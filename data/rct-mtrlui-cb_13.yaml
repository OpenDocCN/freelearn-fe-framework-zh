- en: Selection - Make Selections from Choices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择 - 从选项中进行选择
- en: 'In this chapter, you''ll learn about the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解以下内容：
- en: Abstracting checkbox groups
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象复选框组
- en: Customizing checkbox items
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义复选框项
- en: Abstracting radio button groups
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象单选按钮组
- en: Using radio button types
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用单选按钮类型
- en: Replacing checkboxes with switches
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将复选框替换为开关
- en: Controlling selects with state
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用状态控制选择
- en: Selecting multiple items
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择多个项目
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Any application that includes user interactions involves user making selections.
    This could range from a simple on/off switch to selection with several items that
    allow more than one item to be selected. Material-UI has different selection components
    that best fit a given user scenario.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 任何包含用户交互的应用程序都涉及用户进行选择。这可以从简单的开/关开关到允许选择多个项目的多个项目选择。Material-UI有不同类型的选择组件，最适合特定的用户场景。
- en: Abstracting checkbox groups
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抽象复选框组
- en: Checkboxes often provide the user with a group of related options that can be
    checked or unchecked. The Material-UI `Checkbox` component provides the base functionality,
    but you might want something a little more high level that can be reused throughout
    your application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 复选框通常向用户提供一组相关的选项，用户可以选择或取消选择。Material-UI的`Checkbox`组件提供了基本的功能，但你可能想要一个更高级别的功能，可以在整个应用程序中重用。
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s create an abstraction for groups of checkbox options. Here''s the code
    for a `CheckboxGroup` component:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为复选框选项组创建一个抽象。以下是`CheckboxGroup`组件的代码：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When you first load the screen, here''s what you''ll see:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当你首次加载屏幕时，你会看到以下内容：
- en: '![](img/e019328e-fb1b-4907-b67e-b6c6b21d657f.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e019328e-fb1b-4907-b67e-b6c6b21d657f.png)'
- en: 'Here''s what it looks like when you select the first two choices:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你选择前两个选项时，它看起来是这样的：
- en: '![](img/bd3e84d4-3786-4698-aae3-f15afacd21b2.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bd3e84d4-3786-4698-aae3-f15afacd21b2.png)'
- en: How it works...
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s take a closer look at the `CheckboxGroup` component:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看`CheckboxGroup`组件：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is the abstraction that allows you to render groups of checkbox options
    on the various screens throughout your app. There are several Material-UI components
    involved with rendering a group of checkboxes—`CheckboxGroup` takes care of this
    for you so that you just need to worry about passing it an array of `values`, `label`,
    and an `onChange` handler.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是允许你在应用程序的各个屏幕上渲染复选框选项组的抽象。有几个Material-UI组件涉及到渲染一组复选框——`CheckboxGroup`为你处理这些，所以你只需要传递一个包含`values`、`label`和`onChange`处理程序的数组。
- en: 'Next, let''s look at how `CheckboxGroup` is rendered by your application component:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看你的应用程序组件是如何渲染`CheckboxGroup`的：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You only need to worry about structuring the values array and passing it to
    the `CheckboxGroup` component whenever your application needs to render a group
    of related checkbox options. Lastly, let''s look at `state` and the `onChange()`
    handler used to toggle the checked state of the value:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要关注结构化值数组，并在你的应用程序需要渲染一组相关复选框选项时将其传递给`CheckboxGroup`组件。最后，让我们看看`state`和用于切换值选中状态的`onChange()`处理程序：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `checked` property is changed based on the index argument and the `target.checked`
    value.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`checked`属性根据索引参数和`target.checked`值进行更改。'
- en: There's more...
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Let''s add a `List` component to this example so that you can better visualize
    the state changes that happen when checkboxes are checked/unchecked. Here''s the
    additional Material-UI components that you''ll need to import:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在这个例子中添加一个`List`组件，这样你可以更好地可视化当复选框被选中/取消选中时发生的状态变化。以下是你需要导入的附加Material-UI组件：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The idea is to have this list render the labels of checked items. Let''s render
    this list right below the `CheckboxGroup` component:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 策略是让这个列表渲染已选中项的标签。让我们在`CheckboxGroup`组件下方渲染这个列表：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `filter()` call on `values` will only include values where the `checked`
    property is `true`. When the screen first loads, you''ll see an empty list because
    nothing is checked by default:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在`values`上的`filter()`调用只会包含`checked`属性为`true`的值。当屏幕首次加载时，你会看到一个空列表，因为没有默认选中任何内容：
- en: '![](img/c33f75d5-2efb-4776-862d-312cb6b183a8.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c33f75d5-2efb-4776-862d-312cb6b183a8.png)'
- en: 'As you start making selections, you''ll see the selection list change as a
    reflection of the application state changes:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始进行选择时，你会看到选择列表随着应用程序状态的变化而变化：
- en: '![](img/62fab76a-0a5a-4deb-8d8a-7a475bb8f7ed.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/62fab76a-0a5a-4deb-8d8a-7a475bb8f7ed.png)'
- en: See also
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: Selection demos: [https://material-ui.com/demos/selection-controls/](https://material-ui.com/demos/selection-controls/)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择演示：[https://material-ui.com/demos/selection-controls/](https://material-ui.com/demos/selection-controls/)
- en: '`Checkbox` API documentation: [https://material-ui.com/api/checkbox/](https://material-ui.com/api/checkbox/)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Checkbox` API 文档：[https://material-ui.com/api/checkbox/](https://material-ui.com/api/checkbox/)'
- en: '`FormHelperText` API documentation: [https://material-ui.com/api/form-helper-text/](https://material-ui.com/api/form-helper-text/)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormHelperText` API 文档：[https://material-ui.com/api/form-helper-text/](https://material-ui.com/api/form-helper-text/)'
- en: '`FormControlLabel` API documentation: [https://material-ui.com/api/form-control-label/](https://material-ui.com/api/form-control-label/)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormControlLabel` API 文档：[https://material-ui.com/api/form-control-label/](https://material-ui.com/api/form-control-label/)'
- en: '`FormGroup` API documentation: [https://material-ui.com/api/form-group/](https://material-ui.com/api/form-group/)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormGroup` API 文档：[https://material-ui.com/api/form-group/](https://material-ui.com/api/form-group/)'
- en: '`FormControl` API documentation: [https://material-ui.com/api/form-control/](https://material-ui.com/api/form-control/)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormControl` API 文档：[https://material-ui.com/api/form-control/](https://material-ui.com/api/form-control/)'
- en: '`FormLabel` API documentation: [https://material-ui.com/api/form-label/](https://material-ui.com/api/form-label/)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormLabel` API 文档：[https://material-ui.com/api/form-label/](https://material-ui.com/api/form-label/)'
- en: Customizing checkbox items
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定制复选框项
- en: The default appearance of Material-UI `Checkbox` components tries to resemble
    the native browser checkbox input element. You can change the icon that's used
    for both the checked and the unchecked state of the component. Even after you
    change the icons used by `Checkbox`, any color changes are still honored.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Material-UI `Checkbox`组件的默认外观试图与原生的浏览器复选框输入元素相似。你可以更改组件的选中和不选中状态所使用的图标。即使你更改了`Checkbox`使用的图标，任何颜色更改仍然会被尊重。
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here''s some code that imports several Material-UI icons and uses them to configure
    the icons used by the `Checkbox` components:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些导入几个 Material-UI 图标并使用它们来配置`Checkbox`组件使用的图标的代码：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here''s what the checkboxes look like when the screen first loads:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当屏幕首次加载时，复选框看起来是这样的：
- en: '![](img/4694fa3e-cc13-405c-bf70-25c90b627ee9.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4694fa3e-cc13-405c-bf70-25c90b627ee9.png)'
- en: 'These checkboxes are unchecked. Here''s what they look like when they''re checked:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些复选框是未选中的。当它们被选中时，它们看起来是这样的：
- en: '![](img/30e1f3be-b683-45e2-8d41-b566ea64ba0e.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/30e1f3be-b683-45e2-8d41-b566ea64ba0e.png)'
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s walk through what''s happening here. The `initialItems` array is the
    starting point for the construction of the checkboxes:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步步分析这里发生的事情。`initialItems`数组是构建复选框的起点：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Each item has a `name` component to identify the checkbox, as well as checked/unchecked
    `Icon` components. Next, let''s take a look at how the state of the `CustomizingCheckboxItems`
    component is initialized:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目都有一个`name`组件来标识复选框，以及选中/未选中的`Icon`组件。接下来，让我们看看`CustomizingCheckboxItems`组件的状态是如何初始化的：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The state is initialized to an object by reducing the `initialItems` array.
    For each item in the array, the state of this component will have a property that''s
    initialized to false. The name of the property is based on the `name` property
    of the item. So, for example, the component state will look something like this
    after it''s reduced:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 状态通过减少`initialItems`数组初始化为一个对象。对于数组中的每个项目，该组件的状态将有一个属性初始化为false。属性的名称基于项目的`name`属性。例如，组件状态在减少后可能看起来像这样：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'These properties are used to store the checked state of each checkbox. Next,
    let''s look at how each `Checkbox` component is rendered based on the `initialItems`
    array:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性用于存储每个复选框的选中状态。接下来，让我们看看每个`Checkbox`组件是如何根据`initialItems`数组渲染的：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The key properties that customize each of the checkboxes are `icon` and `checkedIcon`.
    These properties use the `Icon` and `CheckIcon` properties from the items array,
    respectively.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 定制每个复选框的关键属性是`icon`和`checkedIcon`。这些属性分别使用项目数组中的`Icon`和`CheckIcon`属性。
- en: There's more...
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Because the icons that you''re using to customize the `Checkbox` component
    are Material-UI components, you can change the color of the checkbox and have
    it work the same as would without custom icons. For example, you could set the
    color of the checkboxes in this example to default:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你用来定制`Checkbox`组件的图标是 Material-UI 组件，你可以更改复选框的颜色，并且它将像没有自定义图标一样工作。例如，你可以将此示例中复选框的颜色设置为默认值：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here''s how this would look with every checkbox checked:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是所有复选框都被选中时的样子：
- en: '![](img/e7f52c0f-6241-434d-bd06-d7abab6bcc94.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e7f52c0f-6241-434d-bd06-d7abab6bcc94.png)'
- en: With the color set to the default, the color doesn't change when a checkbox
    goes from unchecked to checked. This doesn't matter much, though, because the
    icons go from an outline theme to a filled theme. Just the shape change is enough
    to indicate that the item is checked.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当复选框从未选中变为选中时，颜色设置为默认值，颜色不会改变。不过，这并不重要，因为图标从轮廓主题变为填充主题。仅形状的变化就足以表明项目已被选中。
- en: 'Let''s try it out with `primary`, just for fun:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一下`primary`，只是为了好玩：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here''s how this looks with everything checked:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有选项都被选中，看起来是这样的：
- en: '![](img/6fd53663-430e-45c2-9998-adb43440ee40.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6fd53663-430e-45c2-9998-adb43440ee40.png)'
- en: See also
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`Selection` demos: [https://material-ui.com/demos/selection-controls/](https://material-ui.com/demos/selection-controls/)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`选择`演示：[https://material-ui.com/demos/selection-controls/](https://material-ui.com/demos/selection-controls/)'
- en: '`Checkbox` API documentation: [https://material-ui.com/api/checkbox/](https://material-ui.com/api/checkbox/)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Checkbox` API文档：[https://material-ui.com/api/checkbox/](https://material-ui.com/api/checkbox/)'
- en: '`FormControlLabel` API documentation: [https://material-ui.com/api/form-control-label/](https://material-ui.com/api/form-control-label/)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormControlLabel` API文档：[https://material-ui.com/api/form-control-label/](https://material-ui.com/api/form-control-label/)'
- en: '`FormGroup` API documentation: [https://material-ui.com/api/form-group/](https://material-ui.com/api/form-group/)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormGroup` API文档：[https://material-ui.com/api/form-group/](https://material-ui.com/api/form-group/)'
- en: Abstracting radio button groups
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抽象单选按钮组
- en: '**Radio button groups** are similar to checkbox groups. The key difference
    is that radios are used when only one value should be selected. Also, like checkbox
    groups, radio button groups require several Material-UI components that can be
    encapsulated and reused throughout an application.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**单选按钮组**与复选框组类似。关键区别在于单选按钮用于只应选择一个值的情况。此外，与复选框组一样，单选按钮组需要几个可以在整个应用程序中封装和重用的Material-UI组件。'
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Here''s some code that captures all of the pieces required to put together
    a radio button group into a single component:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些代码，它捕获了将单选按钮组组合成一个组件所需的所有组件：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here''s what you''ll see when you first load the screen:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次加载屏幕时，您会看到以下内容：
- en: '![](img/6eb97438-c896-4b6e-ad43-554dfcebf63a.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6eb97438-c896-4b6e-ad43-554dfcebf63a.png)'
- en: 'Here''s what the component looks like if you were to click on the third option:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击第三个选项，组件看起来是这样的：
- en: '![](img/694b1a38-364d-473c-9c8c-c78806312760.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/694b1a38-364d-473c-9c8c-c78806312760.png)'
- en: Because these options all belong to the same radio group, only one option can
    be checked at a time.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这些选项都属于同一个单选组，所以一次只能选择一个选项。
- en: How it works...
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s take a closer look at the `RadioGroup` component in this example:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看这个例子中的`RadioGroup`组件：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `options` property should have an array value, which is then mapped to the `FormControlLabel`
    components. The `control` property uses the `Radio` component to render each radio
    control. Unlike checkbox groups, the `onChange` property is on the `MaterialRadioGroup`
    component instead of on each individual `Radio`. This is because there's only
    ever a single active value, which is managed by `MaterialRadioGroup`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`options`属性应该有一个数组值，然后映射到`FormControlLabel`组件。`control`属性使用`Radio`组件来渲染每个单选控制。与复选框组不同，`onChange`属性位于`MaterialRadioGroup`组件上，而不是每个单独的`Radio`上。这是因为只有一个活动值，由`MaterialRadioGroup`管理。'
- en: The Material-UI `RadioGroup` component is imported with the `MaterialRadioGroup`
    alias because we're creating a component of the same name. This is fine, as long
    as you're clear about which packages own which components.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在创建一个同名的组件，所以使用`MaterialRadioGroup`别名导入Material-UI的`RadioGroup`组件。只要您清楚哪些包拥有哪些组件，这就可以了。
- en: 'Next, let''s see how the `RadioGroup` component is rendered:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看`RadioGroup`组件是如何渲染的：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `name` property is what ties everything together. It''s important that
    radio buttons that are part of the same group have the same name. This abstraction
    takes care of this for you by only requiring the name in one place. Here''s what
    the `options` array looks like:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`属性是连接一切的关键。确保同一组中的单选按钮具有相同的名称非常重要。这种抽象通过只要求在一个地方提供名称来为您处理这个问题。下面是`options`数组的样子：'
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The idea with radio groups is that they only ever have one value. The value
    properties in the `options` array are the allowed values—but only one is active.
    The last thing worth looking at with this example is the `onChange` handler and
    the state structure of the application component:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 单选组的理念是它们始终只有一个值。`options` 数组中的值属性是允许的值——但只有一个处于活动状态。在下面的例子中，最后要查看的是 `onChange`
    处理器和应用程序组件的状态结构：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is how the initial radio selection is set. When it changes, the value state
    is updated to the value of the selected radio.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是设置初始单选选择的步骤。当它改变时，值状态会更新为所选单选按钮的值。
- en: There's more...
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'You can disable the entire radio button group by setting the `disabled` property
    on the `FormControl` component:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在 `FormControl` 组件上设置 `disabled` 属性来禁用整个单选按钮组：
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'When you disable the control, you can''t interact with it at all. Here''s what
    this looks like:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当你禁用控件时，你将无法与之交互。下面是这种情况的示例：
- en: '![](img/ac2f3af5-43ae-434f-83c5-da027a70bba0.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ac2f3af5-43ae-434f-83c5-da027a70bba0.png)'
- en: 'In other scenarios, you will only want to disable one of the options. You can
    support this in the `RadioGroup` component by checking for a `disabled` property
    in the `options` array:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他场景中，你可能只想禁用一个选项。你可以在 `RadioGroup` 组件中通过检查 `options` 数组中的 `disabled` 属性来实现这一点：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here is how you would disable an option in the `options` array:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何在 `options` 数组中禁用选项的方法：
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here''s how the radio group looks with the Second option disabled:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是禁用第二个选项后单选组的样式：
- en: '![](img/905790cf-1e91-4f7f-bd38-11fc9ad4165e.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/905790cf-1e91-4f7f-bd38-11fc9ad4165e.png)'
- en: While the Second option is disabled, there's no way to activate it because the
    user cannot interact with it.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当第二个选项被禁用时，没有方法可以激活它，因为用户无法与之交互。
- en: Be careful about disabling the option that's active by default. There's no way
    for this to not cause confusion for the user. You can activate another option
    in the group, but then you can't activate the option that was active to begin
    with.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 注意禁用默认激活的选项。这可能会使用户感到困惑。你可以激活组中的另一个选项，但之后你将无法激活最初激活的选项。
- en: See also
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`Selection` demos: [https://material-ui.com/demos/selection-controls/](https://material-ui.com/demos/selection-controls/)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`选择`演示：[https://material-ui.com/demos/selection-controls/](https://material-ui.com/demos/selection-controls/)'
- en: '`Radio` API documentation: [https://material-ui.com/api/radio/](https://material-ui.com/api/radio/)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Radio` API 文档：[https://material-ui.com/api/radio/](https://material-ui.com/api/radio/)'
- en: '`RadioGroup` API documentation: [https://material-ui.com/api/radio-group/](https://material-ui.com/api/radio-group/)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RadioGroup` API 文档：[https://material-ui.com/api/radio-group/](https://material-ui.com/api/radio-group/)'
- en: '`FormControlLabel` API documentation: [https://material-ui.com/api/form-control-label/](https://material-ui.com/api/form-control-label/)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormControlLabel` API 文档：[https://material-ui.com/api/form-control-label/](https://material-ui.com/api/form-control-label/)'
- en: '`FormControl` API documentation: [https://material-ui.com/api/form-control/](https://material-ui.com/api/form-control/)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormControl` API 文档：[https://material-ui.com/api/form-control/](https://material-ui.com/api/form-control/)'
- en: '`FormLabel` API documentation: [https://material-ui.com/api/form-label/](https://material-ui.com/api/form-label/)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormLabel` API 文档：[https://material-ui.com/api/form-label/](https://material-ui.com/api/form-label/)'
- en: Radio button types
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单选按钮类型
- en: There are a number of radio button aspects that you can customize to create
    your own type of radio button group. While the underlying principle of selecting
    a single value from several options doesn't change, you can make the radio button
    group design fit any application.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多单选按钮方面可以自定义，以创建您自己的单选按钮组。虽然从多个选项中选择单个值的基本原则没有改变，但您可以设计单选按钮组以适应任何应用程序。
- en: How to do it...
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s say that, based on the layout of your screen, and in order to stay consistent
    with other screens in your app, you need to create a radio group with the following
    design traits:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 假设根据你屏幕的布局，并且为了与你的应用程序中的其他屏幕保持一致，你需要创建一个具有以下设计特性的单选组：
- en: A single row is used to present options
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单行用于展示选项
- en: There are icons and text for each option
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个选项都有图标和文本
- en: The primary theme color is used for selected options
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要主题颜色用于选中的选项
- en: 'Here''s some code that does this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些实现此功能的代码：
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here''s what the radio group looks like when the screen first loads:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这是屏幕首次加载时单选组的样式：
- en: '![](img/1952a618-c8f4-4ecb-8c2e-efa2c162d6f7.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1952a618-c8f4-4ecb-8c2e-efa2c162d6f7.png)'
- en: 'You can change the default selection by clicking on any of the other icons
    or labels. The icon state is updated to reflect the change:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击其他图标或标签来更改默认选择。图标状态会更新以反映更改：
- en: '![](img/e9ab9c12-7df6-49e1-8ed0-8405add19cbb.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e9ab9c12-7df6-49e1-8ed0-8405add19cbb.png)'
- en: How it works...
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'It seems that we were able to meet the criteria set forth for the radio button
    group. Let''s walk through the code to see how each requirement was met. First,
    the group is rendered horizontally with each radio button on the same row. This
    is done by passing the `row` property to the `RadioGroup` component:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们能够满足为单选按钮组设定的标准。让我们通过代码来查看每个要求是如何满足的。首先，组是水平渲染的，每个单选按钮都在同一行。这是通过向`RadioGroup`组件传递`row`属性来实现的：
- en: '[PRE22]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The label of each radio is displayed underneath each radio button because this
    works better with the row layout of the group. This is done by setting the `labelPlacement`
    property value of `FormControlLabel`. The radio color uses the primary color from
    the Material-UI theme when selected. It''s also using custom icons for checked
    and unchecked states:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 每个单选按钮的标签都显示在每个单选按钮下方，因为这与组的行布局更协调。这是通过设置`FormControlLabel`的`labelPlacement`属性值来实现的。当单选按钮被选中时，它使用
    Material-UI 主题的默认颜色。它还使用自定义图标来表示选中状态和未选中状态：
- en: '[PRE23]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Both of these enhancements are handled by the `Radio` component.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个增强功能都是由`Radio`组件处理的。
- en: See also
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`Selection` demos:[ https://material-ui.com/demos/selection-controls/](https://material-ui.com/demos/selection-controls/)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Selection`演示：[https://material-ui.com/demos/selection-controls/](https://material-ui.com/demos/selection-controls/)'
- en: '`Radio` API documentation: [https://material-ui.com/api/radio/](https://material-ui.com/api/radio/)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Radio` API 文档：[https://material-ui.com/api/radio/](https://material-ui.com/api/radio/)'
- en: '`RadioGroup` API documentation: [https://material-ui.com/api/radio-group/](https://material-ui.com/api/radio-group/)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RadioGroup` API 文档：[https://material-ui.com/api/radio-group/](https://material-ui.com/api/radio-group/)'
- en: '`FormControlLabel` API documentation: [https://material-ui.com/api/form-control-label/](https://material-ui.com/api/form-control-label/)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormControlLabel` API 文档：[https://material-ui.com/api/form-control-label/](https://material-ui.com/api/form-control-label/)'
- en: '`FormControl` API documentation: [https://material-ui.com/api/form-control/](https://material-ui.com/api/form-control/)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormControl` API 文档：[https://material-ui.com/api/form-control/](https://material-ui.com/api/form-control/)'
- en: '`FormLabel` API documentation: [https://material-ui.com/api/form-label/](https://material-ui.com/api/form-label/)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormLabel` API 文档：[https://material-ui.com/api/form-label/](https://material-ui.com/api/form-label/)'
- en: Replacing checkboxes with switches
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用开关替换复选框
- en: Material-UI has a control which is very similar to a checkbox, called a switch.
    The main visual distinction between the two components is that a switch has more
    emphasis on the toggling on/off action. In a mobile environment, users might feel
    more accustomed to the `Switch` component. In any other environment, you're probably
    best sticking with regular `Checkbox` components.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Material-UI 有一个与复选框非常相似的控制组件，称为开关。这两个组件之间的主要视觉区别是开关更强调开关/关断动作。在移动环境中，用户可能更习惯于`Switch`组件。在其他任何环境中，你可能最好坚持使用常规的`Checkbox`组件。
- en: How to do it...
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s say that, instead of creating a component that abstracts a group of
    `Checkbox` components, you you want want to do the same thing with the `Switch`
    components. Here''s the code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你不想创建一个抽象一组`Checkbox`组件的组件，而是想用`Switch`组件做同样的事情。以下是代码：
- en: '[PRE24]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here''s what the switch group looks like when the screen first loads:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这是屏幕首次加载时开关组的外观：
- en: '![](img/8a9987eb-9c23-4ed2-944f-1c247d253394.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8a9987eb-9c23-4ed2-944f-1c247d253394.png)'
- en: 'Here''s what the switch group looks like with every switch turned on:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这是所有开关都打开时开关组的外观：
- en: '![](img/6f5ce315-7af3-4094-b189-e3fc546c6491.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6f5ce315-7af3-4094-b189-e3fc546c6491.png)'
- en: How it works...
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Anywhere that you can use a `Checkbox` component, you can also use a `Switch`
    component. This code was taken from the *Abstracting checkbox groups* section
    from earlier in this chapter. The `Checkbox` components were replaced with `Switch`
    components.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何可以使用`Checkbox`组件的地方，你同样可以使用`Switch`组件。这段代码是从本章早期部分的“抽象复选框组”部分摘取的。`Checkbox`组件被替换成了`Switch`组件。
- en: There's more...
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Rather than having divergent code paths for handling `Checkbox` versus `Switch`
    components, you could enhance the `SwitchGroup` component to accept a `checkbox`
    Boolean property that, when `true`, uses `Checkbox` as the control instead of
    `Switch`. Here''s what the new `SwitchGroup` looks like:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是为处理 `Checkbox` 和 `Switch` 组件编写不同的代码路径，你可以增强 `SwitchGroup` 组件以接受一个 `checkbox`
    布尔属性，当 `true` 时，使用 `Checkbox` 作为控制而不是 `Switch`。以下是新的 `SwitchGroup` 的外观：
- en: '[PRE25]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'And here''s an example that shows both versions of the control being rendered
    side by side:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例，展示了两种版本的控件并排渲染：
- en: '[PRE26]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The second `SwitchGroup` component uses the `checkbox` property to render the `Checkbox`
    components instead of the `Switch` components. Here''s what the result looks like:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个 `SwitchGroup` 组件使用 `checkbox` 属性来渲染 `Checkbox` 组件而不是 `Switch` 组件。以下是结果的外观：
- en: '![](img/a5928fd7-6726-4739-98b0-0cc282996c08.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a5928fd7-6726-4739-98b0-0cc282996c08.png)'
- en: 'Here''s what you''ll see if you select the first option in either the switch
    choices or the checkbox choices group:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择开关选项组或复选框选项组中的第一个选项，你会看到以下内容：
- en: '![](img/6f8f7080-57a8-4d2e-9fd6-d77c7fd52e7a.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6f8f7080-57a8-4d2e-9fd6-d77c7fd52e7a.png)'
- en: They are both updated because both fields share the same application state.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 它们都进行了更新，因为这两个领域共享相同的应用状态。
- en: See also
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`Selection` demos: [https://material-ui.com/demos/selection-controls/](https://material-ui.com/demos/selection-controls/)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`选择` 演示：[https://material-ui.com/demos/selection-controls/](https://material-ui.com/demos/selection-controls/)'
- en: Controlling selects with state
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用状态控制选择框
- en: Some forms involve making selections from a list of values. This is kind of
    like choosing a radio button option from a radio button group. With the Material-UI
    `Select` component, you get something that looks more like a traditional HTML
    select element. Often, web application forms have several selects that depend
    on one another. In React/Material-UI applications, these selects are controlled
    through the `state` component.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一些表单涉及从值列表中进行选择。这有点像从单选按钮组中选择单选按钮选项。使用 Material-UI `Select` 组件，你得到的东西更像是传统的
    HTML 选择元素。通常，Web 应用程序表单有几个相互依赖的选择框。在 React/Material-UI 应用程序中，这些选择框通过 `state` 组件进行控制。
- en: How to do it...
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s say that your screen has two selects—a category select and a product
    select. Initially, only the category select is populated and enabled. The product
    select depends on the category select—once a category is selected, the product
    select is enabled and populated with the appropriate products. Here''s the code
    to do this:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的屏幕上有两个选择框——一个类别选择框和一个产品选择框。最初，只有类别选择框被填充并启用。产品选择框依赖于类别选择框——一旦选择了一个类别，产品选择框就会被启用并填充适当的产
    品。以下是实现此功能的代码：
- en: '[PRE27]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here''s what you''ll see when the screen first loads:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当屏幕首次加载时，你会看到以下内容：
- en: '![](img/ea78f539-5991-4e16-9bea-952b7e22f1b3.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ea78f539-5991-4e16-9bea-952b7e22f1b3.png)'
- en: 'The category select is populated with options for you to choose from. The product
    select is disabled because no category has been selected. Here''s what the category
    select looks like when it''s open:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 类别选择框填充了可供你选择的选项。产品选择框处于禁用状态，因为没有选择任何类别。以下是类别选择框打开时的外观：
- en: '![](img/4243d9dd-76be-4508-8d75-aa6fa4fcfec4.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4243d9dd-76be-4508-8d75-aa6fa4fcfec4.png)'
- en: 'Once you select a category, you should be able to open the product select and
    make a product selection:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你选择了一个类别，你应该能够打开产品选择框并做出产品选择：
- en: '![](img/42c98998-0e50-4d1c-8c4f-345571ea0834.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/42c98998-0e50-4d1c-8c4f-345571ea0834.png)'
- en: How it works...
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The two `Select` components in this example have state dependencies. That is,
    the state of the product select depends on the state of the category select. This
    is because the options displayed in the product select are filtered based on the
    chosen category. Let''s take a closer look at the state:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 本例中的两个 `Select` 组件存在状态依赖。也就是说，产品选择的状 态依赖于类别选择的状 态。这是因为产品选择中显示的选项是根据所选类别进行筛选的。让我们更仔细地看看这个状态：
- en: '[PRE28]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `categories` and `products` arrays represent the options of the two selects
    on the screen. The selected option is marked with a `selected` Boolean property
    value of `true`. No options are selected by default. Both selects use the same
    `onChange()` handler:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`categories` 和 `products` 数组代表屏幕上两个选择框的选项。选中的选项用 `selected` 布尔属性值 `true` 标记。默认情况下没有选项被选中。两个选择框都使用相同的
    `onChange()` 处理器：'
- en: '[PRE29]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The array to use depends on the value of `e.target.name`—which will be either
    categories or products. Once the collection value is initialized with the appropriate
    array, the `selected` property is set to `false` for every value. Then, the selected
    value is looked up based on `e.target.value`, and the `selected` property is set
    to `true` for this value.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用的数组取决于`e.target.name`的值——它将是类别或产品。一旦使用适当的数组初始化了集合值，`selected`属性就被设置为每个值的`false`。然后，根据`e.target.value`查找选中的值，并将`selected`属性设置为`true`。
- en: 'Next, let''s break down what''s happening in the rest of the `ControllingSelectsWithState`
    component. First, the `category` and `product` selections are looked up from the
    component state:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们分析`ControllingSelectsWithState`组件其余部分发生的情况。首先，从组件状态中查找`category`和`product`的选中项：
- en: '[PRE30]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You have to make sure that an object with an `id` property is always assigned
    to these constants, because this is expected later on. The empty string will match
    the empty value option, so that it is selected by default. Next, let''s see how
    the category options are rendered:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须确保始终将这些常量分配给具有`id`属性的对象，因为稍后会有所期待。空字符串将匹配空值选项，因此它默认被选中。接下来，让我们看看类别选项是如何渲染的：
- en: '[PRE31]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This is a straightforward mapping of values in the `categories` array to the `MenuItem`
    components. The options in the select `category` never change; in other words,
    the product options change based on the selected category—let''s see how this
    is done:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对`categories`数组中的值到`MenuItem`组件的直接映射。选择`category`中的选项永远不会改变；换句话说，产品选项根据选中的类别改变——让我们看看这是如何实现的：
- en: '[PRE32]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Before each product is mapped to a `MenuItem` component, the `products` array
    is filtered based on the selected category using `filter()`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在将每个产品映射到`MenuItem`组件之前，使用`filter()`根据选中的类别过滤`products`数组。
- en: See Also
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: '`Selection` demos: [https://material-ui.com/demos/selects/](https://material-ui.com/demos/selects/)'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Selection` 示例：[https://material-ui.com/demos/selects/](https://material-ui.com/demos/selects/)'
- en: '`InputLabel` API documentation: [https://material-ui.com/api/input-label/](https://material-ui.com/api/input-label/)'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InputLabel` API 文档：[https://material-ui.com/api/input-label/](https://material-ui.com/api/input-label/)'
- en: '`MenuItem` API documentation:  [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MenuItem` API 文档： [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
- en: '`FormHelperText` API documentation: [https://material-ui.com/api/form-helper-text/](https://material-ui.com/api/form-helper-text/)'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormHelperText` API 文档：[https://material-ui.com/api/form-helper-text/](https://material-ui.com/api/form-helper-text/)'
- en: '`FormControl` API documentation: [https://material-ui.com/api/form-control/](https://material-ui.com/api/form-control/)'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormControl` API 文档：[https://material-ui.com/api/form-control/](https://material-ui.com/api/form-control/)'
- en: '`Select` API documentation: [https://material-ui.com/api/select/](https://material-ui.com/api/select/)'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Select` API 文档：[https://material-ui.com/api/select/](https://material-ui.com/api/select/)'
- en: Selecting multiple items
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择多个项目
- en: Users can select multiple values from the `Select` components. This involves
    using an array as the selected value state.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以从`Select`组件中选择多个值。这涉及到使用数组作为选中的值状态。
- en: How to do it...
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Here''s some code that renders `Select` with several values. You can select
    as many values as you like:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些渲染具有多个值的`Select`的代码。您可以选择您喜欢的任意多个值：
- en: '[PRE33]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Here''s what the selection looks like when it''s first opened:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这是首次打开选择时的样子：
- en: '![](img/af8ee671-a857-4834-8ce9-3136f50ea6c8.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/af8ee671-a857-4834-8ce9-3136f50ea6c8.png)'
- en: 'Here''s what the select looks like with the first, third, and fifth options
    selected:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这是选中了第一个、第三个和第五个选项时的样子：
- en: '![](img/ef081767-4f01-4a97-96d1-b8a05f81d9ca.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ef081767-4f01-4a97-96d1-b8a05f81d9ca.png)'
- en: 'Now that you''ve made your selections, you can click somewhere on the screen
    outside the menu to close it, or you can hit the *E**sc* key. You''ll be able
    to see your selections in the text input:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经做出了选择，您可以在菜单外的屏幕上点击某个位置来关闭它，或者您可以按*E**sc* 键。您将在文本输入中看到您的选择：
- en: '![](img/c6683a7c-20e3-4b6d-b18e-ab4900bfc80f.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c6683a7c-20e3-4b6d-b18e-ab4900bfc80f.png)'
- en: How it works...
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s start by taking a look at how the `Select` component is rendered:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从查看`Select`组件是如何渲染的开始：
- en: '[PRE34]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The `options` array values are mapped to `MenuItem` components, just like any
    other `Select`. The `multiple` property tells the component to allow the user
    to make multiple selections. The `selected` state of the `SelectingMultipleItems`
    component is an array, which holds the selected values. This array is populated
    by the `onChange` handler:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`options` 数组的值被映射到 `MenuItem` 组件，就像任何其他的 `Select` 一样。`multiple` 属性告诉组件允许用户进行多项选择。`SelectingMultipleItems`
    组件的 `selected` 状态是一个数组，它包含选中值。这个数组由 `onChange` 处理程序填充：'
- en: '[PRE35]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Because the `multiple` property was used, `e.target.value` is an array of selected
    values—you can just update the selected state using this value as is.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 因为使用了 `multiple` 属性，`e.target.value` 是一个包含选中值的数组——你可以直接使用这个值来更新选中状态。
- en: There's more...
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Rather than having the selected items show up as a comma-separated list of
    `test`, you can make the items stand out by mapping the selected values to `Chip`
    components. Let''s make a component that will handle this:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是让选中的项目以逗号分隔的 `test` 列表形式显示，你可以通过将选中的值映射到 `Chip` 组件来使项目突出。让我们创建一个将处理此功能的组件：
- en: '[PRE36]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This code block shows how you can use this component in the `renderValue` property
    of the `Select` component:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块展示了如何在 `Select` 组件的 `renderValue` 属性中使用此组件：
- en: '[PRE37]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, when you make multiple selections, they''ll render as `Chip` components:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你进行多项选择时，它们将以 `Chip` 组件的形式渲染：
- en: '![](img/ba85cb59-fb07-40ee-802c-5a4aae6215fb.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba85cb59-fb07-40ee-802c-5a4aae6215fb.png)'
- en: See also
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`Selection` demos: [https://material-ui.com/demos/selects/](https://material-ui.com/demos/selects/)'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Selection` 示例：[https://material-ui.com/demos/selects/](https://material-ui.com/demos/selects/)'
- en: '`Select` API documentation: [https://material-ui.com/api/select/](https://material-ui.com/api/select/)'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Select` API 文档：[https://material-ui.com/api/select/](https://material-ui.com/api/select/)'
- en: '`Input` API documentation: [https://material-ui.com/api/input/](https://material-ui.com/api/input/)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Input` API 文档：[https://material-ui.com/api/input/](https://material-ui.com/api/input/)'
- en: '`InputLabel` API documentation: [https://material-ui.com/api/input-label/](https://material-ui.com/api/input-label/)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InputLabel` API 文档：[https://material-ui.com/api/input-label/](https://material-ui.com/api/input-label/)'
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MenuItem` API 文档：[https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
- en: '`FormControl` API documentation: [https://material-ui.com/api/form-control/](https://material-ui.com/api/form-control/)'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormControl` API 文档：[https://material-ui.com/api/form-control/](https://material-ui.com/api/form-control/)'
- en: '`Chip` API documentation: [https://material-ui.com/api/chip/](https://material-ui.com/api/chip/)'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Chip` API 文档：[https://material-ui.com/api/chip/](https://material-ui.com/api/chip/)'
