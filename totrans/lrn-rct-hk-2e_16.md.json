["```js\n    $ cp -R Chapter01_3 Chapter13_1 \n    ```", "```js\n    import React from 'react'\n    import { Header } from './Header.jsx'\n    import { AddTodo } from './AddTodo.jsx'\n    import { TodoList } from './TodoList.jsx'\n    import { TodoFilter } from './TodoFilter.jsx' \n    ```", "```js\n    export class App extends React.Component {\n      render() {\n        return (\n          <div style={{ width: '400px' }}>\n    <Header />\n    <AddTodo />\n    <hr />\n    <TodoList />\n    <hr />\n    <TodoFilter />\n    </div>\n        )\n      }\n    } \n    ```", "```js\n    import React from 'react'\n    export class Header extends React.Component {\n      render() {\n        return <h1>ToDo</h1>\n      }\n    } \n    ```", "```js\n    import React from 'react'\n    export class AddTodo extends React.Component {\n      render() { \n    ```", "```js\n     return (\n          <form>\n    <input\n     type='text'\n     placeholder='enter new task...'\n     style={{ width: '350px' }}\n            />\n    <input\n     type='submit'\n     style={{ float: 'right' }}\n     value='add'\n            />\n    </form>\n        )\n      }\n    } \n    ```", "```js\n    import React from 'react'\n    import { TodoItem } from './TodoItem.jsx' \n    ```", "```js\n    export class TodoList extends React.Component {\n      render() { \n    ```", "```js\n     const items = [\n          { id: 1, title: 'Finish React Hooks book', completed: true },\n          { id: 2, title: 'Promote the book', completed: false },\n        ] \n    ```", "```js\n     return items.map((item) => <TodoItem {...item} key={item.id} />)\n      }\n    } \n    ```", "```js\n    import React from 'react'\n    export class TodoItem extends React.Component {\n      render() { \n    ```", "```js\n     const { title, completed } = this.props \n    ```", "```js\n     return (\n          <div style={{ width: '400px', height: '25px' }}>\n    <input type='checkbox' checked={completed} />\n            {title}\n            <button type='button' style={{ float: 'right' }}>x</button>\n    </div>\n        )\n      }\n    } \n    ```", "```js\n    import React from 'react'\n    export class TodoFilterItem extends React.Component {\n      render() { \n    ```", "```js\n     const { name } = this.props \n    ```", "```js\n     return <button type='button'>{name}</button>\n      }\n    } \n    ```", "```js\n    export class TodoFilter extends React.Component {\n      render() {\n        return (\n          <div>\n    <TodoFilterItem name='all' />\n    <TodoFilterItem name='active' />\n    <TodoFilterItem name='completed' />\n    </div>\n        )\n      }\n    } \n    ```", "```js\n$ npm run dev \n```", "```js\n    const mockItems = [\n      { id: 1, title: 'Finish React Hooks book', completed: true },\n      { id: 2, title: 'Promote the book', completed: false },\n    ]\n    export function fetchTodos() {\n      return new Promise((resolve) => {\n        setTimeout(() => resolve(mockItems), 100)\n      })\n    } \n    ```", "```js\n    import { createContext } from 'react' \n    ```", "```js\n    export const StateContext = createContext([]) \n    ```", "```js\n    import { StateContext } from './StateContext.js'\n    import { fetchTodos } from './api.js' \n    ```", "```js\n    export class App extends React.Component {\n    **constructor****(props) {** \n    ```", "```js\n     super(props) \n    ```", "```js\n     this.state = { todos: [], filteredTodos: [], filter: 'all' }\n      } \n    ```", "```js\n     componentDidMount() {\n        this.loadTodos()\n      } \n    ```", "```js\n     async loadTodos() {\n        const todos = await fetchTodos()\n        this.setState({ todos })\n        this.filterTodos()\n      } \n    ```", "```js\n     addTodo(title) {\n        const { todos } = this.state\n    const newTodo = { id: Date.now(), title, completed: false }\n        this.setState({ todos: [newTodo, ...todos] })\n        this.filterTodos()\n      } \n    ```", "```js\n     toggleTodo(id) {\n        const { todos } = this.state\n    const updatedTodos = todos.map(item => {\n          if (item.id === id) {\n            return { ...item, completed: !item.completed }\n          }\n          return item\n        })\n        this.setState({ todos: updatedTodos })\n        this.filterTodos()\n      } \n    ```", "```js\n     removeTodo(id) {\n        const { todos } = this.state\n    const updatedTodos = todos.filter((item) => item.id !== id)\n        this.setState({ todos: updatedTodos })\n        this.filterTodos()\n      } \n    ```", "```js\n     applyFilter(todos, filter) {\n        switch (filter) {\n          case 'active':\n            return todos.filter((item) => item.completed === false)\n          case 'completed':\n            return todos.filter((item) => item.completed === true)\n          case 'all':\n          default:\n            return todos\n        }\n      } \n    ```", "```js\n     filterTodos(filterArg) {\n        this.setState(({ todos, filter }) => {\n          const newFilter = filterArg ?? filter\n          return {\n            filter: newFilter,\n            filteredTodos: this.applyFilter(todos, newFilter),\n          }\n        })\n      } \n    ```", "```js\n     render() {\n    **const** **{ filter, filteredTodos } =** **this****.****state**\n    return (\n          **<****StateContext.Provider****value****=****{filteredTodos}****>**\n    <div style={{ width: '400px' }}>\n    <Header />\n    <AddTodo **addTodo****=****{this.addTodo}** />\n    <hr />\n    <TodoList **toggleTodo****=****{this.toggleTodo}****removeTodo****=****{this.removeTodo}** />\n    <hr />\n    <TodoFilter **filter****=****{filter}****filterTodos****=****{this.filterTodos}** />\n    </div>\n    </StateContext.Provider>\n        )\n      }\n    } \n    ```", "```js\n     constructor(props) {\n        super(props)\n        this.state = { todos: [], filteredTodos: [], filter: 'all' }\n    **this****.****loadTodos** **=** **this****.****loadTodos****.****bind****(****this****)**\n    **this****.****addTodo** **=** **this****.****addTodo****.****bind****(****this****)**\n    **this****.****toggleTodo** **=** **this****.****toggleTodo****.****bind****(****this****)**\n    **this****.****removeTodo** **=** **this****.****removeTodo****.****bind****(****this****)**\n    **this****.****filterTodos** **=** **this****.****filterTodos****.****bind****(****this****)**\n      } \n    ```", "```js\n    export class AddTodo extends React.Component {\n    **constructor****(****props****) {**\n    **super****(props)**\n    **this****.****state** **= {**\n    **input****:** **''****,**\n     **}**\n     **}** \n    ```", "```js\n     handleInput(e) {\n        this.setState({ input: e.target.value })\n      } \n    ```", "```js\n     handleSubmit(e) {\n        e.preventDefault()\n        const { input } = this.state\n    const { addTodo } = this.props\n    if (input) {\n          addTodo(input)\n          this.setState({ input: '' })\n        }\n      } \n    ```", "```js\n     render() {\n    **const** **{ input } =** **this****.****state**\n    return (\n          <form **onSubmit****=****{this.handleSubmit}****>**\n    <input\n     type='text'\n     placeholder='enter new task...'\n     style={{ width: '350px' }}\n    **value****=****{input}**\n    **onChange****=****{this.handleInput}**\n            />\n    <input\n     type='submit'\n     style={{ float: 'right' }}\n     value='add'\n    **disabled****=****{!input}**\n            />\n    </form>\n        )\n      }\n    } \n    ```", "```js\n     constructor(props) {\n        super(props)\n        this.state = {\n          input: '',\n        }\n    **this****.****handleInput** **=** **this****.****handleInput****.****bind****(****this****)**\n    **this****.****handleSubmit** **=** **this****.****handleSubmit****.****bind****(****this****)**\n      } \n    ```", "```js\n    import { StateContext } from './StateContext.js' \n    ```", "```js\n    export class TodoList extends React.Component {\n    **static** **contextType =** **StateContext** \n    ```", "```js\n    `<StateContext.Consumer>`\n     `{value => <div>State is: {value}</div>}`\n    `</StateContext.Consumer>` \n    ```", "```js\n     render() {\n        const items = **this****.****context** \n    ```", "```js\n     return items.map((item) => (\n          <TodoItem {...item} **{****...this.props****}** key={item.id} />\n        ))\n      }\n    } \n    ```", "```js\n     handleToggle() {\n        const { toggleTodo, id } = this.props\n    toggleTodo(id)\n      }\n      handleRemove() {\n        const { removeTodo, id } = this.props\n    removeTodo(id)\n      } \n    ```", "```js\n     render() {\n        const { title, completed } = this.props\n    return (\n          <div style={{ width: '400px', height: '25px' }}>\n    <input\n     type='checkbox'\n     checked={completed}\n    **onChange****=****{this.handleToggle}**\n            />\n            {title}\n            <button\n     type='button'\n     style={{ float: 'right' }}\n    **onClick****=****{this.handleRemove}**\n            >\n              x\n            </button>\n    </div>\n        )\n      }\n    } \n    ```", "```js\n    export class TodoItem extends React.Component {\n    **constructor****(****props****) {**\n    **super****(props)**\n    **this****.****handleToggle** **=** **this****.****handleToggle****.****bind****(****this****)**\n    **this****.****handleRemove** **=** **this****.****handleRemove****.****bind****(****this****)**\n     **}** \n    ```", "```js\n    export class TodoFilter extends React.Component {\n      render() {\n        return (\n          <div>\n    <TodoFilterItem **{****...this.props****}** name='all' />\n    <TodoFilterItem **{****...this.props****}** name='active' />\n    <TodoFilterItem **{****...this.props****}** name='completed' />\n    </div>\n        )\n      }\n    } \n    ```", "```js\n    export class TodoFilterItem extends React.Component {\n    **handleFilter****() {**\n    **const** **{ name, filterTodos } =** **this****.****props**\n    **filterTodos****(name)**\n     **}** \n    ```", "```js\n     render() {\n        const { name, **filter =** **'all'** } = this.props\n    return (\n          <button type='button' **disabled****=****{filter** **===** **name}** **onClick****=****{this.handleFilter}**>\n            {name}\n          </button>\n        )\n      }\n    } \n    ```", "```js\n    export class TodoFilterItem extends React.Component {\n    **constructor****(****props****) {**\n    **super****(props)**\n    **this****.****handleFilter** **=** **this****.****handleFilter****.****bind****(****this****)**\n     **}** \n    ```", "```js\n$ npm run dev \n```", "```js\n    $ cp -R Chapter13_1 Chapter13_2 \n    ```", "```js\n    export function TodoItem({ title, completed, id, toggleTodo,\n     removeTodo }) { \n    ```", "```js\n     function handleToggle() {\n        toggleTodo(id)\n      }\n      function handleRemove() {\n        removeTodo(id)\n      } \n    ```", "```js\n     return (\n        <div style={{ width: '400px', height: '25px' }}>\n    <input type='checkbox' checked={completed}\n     onChange={handleToggle} />\n          {title}\n          <button type='button' style={{ float: 'right' }}  \n     onClick={handleRemove}>\n            x\n          </button>\n    </div>\n      )\n    } \n    ```", "```js\n    import { useContext } from 'react'\n    import { StateContext } from './StateContext.js'\n    import { TodoItem } from './TodoItem.jsx' \n    ```", "```js\n    export function TodoList(props) { \n    ```", "```js\n     const items = useContext(StateContext) \n    ```", "```js\n     return items.map((item) => <TodoItem {...item} {...props}\n     key={item.id} />)\n    } \n    ```", "```js\n    export function TodoFilterItem({ name, filterTodos, filter = 'all' }) {\n      function handleFilter() {\n        filterTodos(name)\n      }\n      return (\n        <button type='button' disabled={filter === name}\n     onClick={handleFilter}>\n          {name}\n        </button>\n      )\n    } \n    ```", "```js\n    export function TodoFilter(props) {\n      return (\n        <div>\n    <TodoFilterItem {...props} name='all' />\n    <TodoFilterItem {...props} name='active' />\n    <TodoFilterItem {...props} name='completed' />\n    </div>\n      )\n    } \n    ```", "```js\n    import { useState } from 'react' \n    ```", "```js\n    export function AddTodo({ addTodo }) { \n    ```", "```js\n     const [input, setInput] = useState('') \n    ```", "```js\n     function handleInput(e) {\n        setInput(e.target.value)\n      }\n      function handleSubmit(e) {\n        e.preventDefault()\n        if (input) {\n          addTodo(input)\n          setInput('')\n        }\n      } \n    ```", "```js\n     return (\n        <form onSubmit={handleSubmit}>\n    <input\n     type='text'\n     placeholder='enter new task...'\n     style={{ width: '350px' }}\n     value={input}\n     onChange={handleInput}\n          />\n    <input\n     type='submit'\n     style={{ float: 'right' }}\n     value='add'\n     disabled={!input}\n          />\n    </form>\n      )\n    } \n    ```", "```js\n    { type: 'LOAD_TODOS', todos: [] } \n    ```", "```js\n    { type: 'ADD_TODO', title: 'Test todo app' } \n    ```", "```js\n    { type: 'TOGGLE_TODO', id: 'xxx' } \n    ```", "```js\n    { type: 'REMOVE_TODO', id: 'xxx' } \n    ```", "```js\n    { type: 'FILTER_TODOS', filter: 'completed' } \n    ```", "```js\n    function filterReducer(state, action) {\n        if (action.type === 'FILTER_TODOS') {\n            return action.filter\n        }\n        return state\n    } \n    ```", "```js\n    function todosReducer(state, action) {\n      switch (action.type) { \n    ```", "```js\n     case 'LOAD_TODOS':\n          return action.todos \n    ```", "```js\n     case 'ADD_TODO': {\n          const newTodo = { id: Date.now(), title: action.title, completed: false }\n          return [newTodo, ...state]\n        } \n    ```", "```js\n     case 'TOGGLE_TODO': {\n          return state.map((item) => {\n            if (item.id === action.id) {\n              return { ...item, completed: !item.completed }\n            }\n            return item\n          })\n        } \n    ```", "```js\n     case 'REMOVE_TODO': {\n          return state.filter((item) => item.id !== action.id)\n        } \n    ```", "```js\n     default:\n          return state\n      }\n    } \n    ```", "```js\n    export function appReducer(state, action) { \n    ```", "```js\n     return {\n        todos: todosReducer(state.todos, action),\n        filter: filterReducer(state.filter, action),\n      }\n    } \n    ```", "```js\n    import { useReducer, useEffect, useMemo } from 'react'\n    import { Header } from './Header.jsx'\n    import { AddTodo } from './AddTodo.jsx'\n    import { TodoList } from './TodoList.jsx'\n    import { TodoFilter } from './TodoFilter.jsx'\n    import { StateContext } from './StateContext.js'\n    import { fetchTodos } from './api.js'\n    import { appReducer } from './reducers.js' \n    ```", "```js\n    export function App() { \n    ```", "```js\n     const [state, dispatch] = useReducer(appReducer, { todos: [],\n     filter: 'all' }) \n    ```", "```js\n     const { todos, filter } = state \n    ```", "```js\n     const filteredTodos = useMemo(() => {\n        switch (filter) {\n          case 'active':\n            return todos.filter((item) => item.completed === false)\n          case 'completed':\n            return todos.filter((item) => item.completed === true)\n          case 'all':\n          default:\n            return todos\n        }\n      }, [todos, filter]) \n    ```", "```js\n     useEffect(() => {\n        async function loadTodos() {\n          const todos = await fetchTodos()\n          dispatch({ type: 'LOAD_TODOS', todos })\n        }\n        void loadTodos()\n      }, []) \n    ```", "```js\n     function addTodo(title) {\n        dispatch({ type: 'ADD_TODO', title })\n      }\n      function toggleTodo(id) {\n        dispatch({ type: 'TOGGLE_TODO', id })\n      }\n      function removeTodo(id) {\n        dispatch({ type: 'REMOVE_TODO', id })\n      }\n      function filterTodos(filter) {\n        dispatch({ type: 'FILTER_TODOS', filter })\n      } \n    ```", "```js\n     return (\n        <StateContext.Provider value={filteredTodos}>\n    <div style={{ width: '400px' }}>\n    <Header />\n    <AddTodo addTodo={addTodo} />\n    <hr />\n    <TodoList toggleTodo={toggleTodo} removeTodo={removeTodo} />\n    <hr />\n    <TodoFilter filter={filter} filterTodos={filterTodos} />\n    </div>\n    </StateContext.Provider>\n      )\n    } \n    ```", "```js\n    $ npm run dev \n    ```"]