- en: Integrating Data Visualization with an Expense Tracking Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These days, it is easy to collect and add data to applications on the internet.
    As more and more data becomes available, it becomes necessary to process the data
    and present insights extracted from this data in meaningful and appealing visualizations
    to end users. In this chapter, we will learn how to use MERN stack technologies
    along with Victory—a charting library for React—to easily integrate data visualization
    features in a full-stack application. We will extend the MERN skeleton application
    to build an expense tracking application, which will incorporate data processing
    and visualization features for expense data recorded by a user over time.
  prefs: []
  type: TYPE_NORMAL
- en: After going through the implementation of these features, you should have a
    grasp of how to utilize the MongoDB aggregation framework and the Victory charting
    library to add data visualization features of your choice to any full-stack MERN
    web application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will build an expense tracking application integrated with
    data visualization features by covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing MERN Expense Tracker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding expense records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing expense data over time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing MERN Expense Tracker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MERN Expense Tracker application will allow users to keep track of their
    day-to-day expenses. Users who are signed in to their accounts will be able to
    add their expense records with details such as expense description, category,
    amount, and when the given expense was incurred or paid. The application will
    store these expense records and extract meaningful data patterns to give the user
    a visual representation of how their expense habits fare as time progresses. The
    following screenshot shows the home page view for a signed-in user on the MERN
    Expense Tracker application, and it gives the user an overview of their expenses
    for the current month:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8092ee10-448d-4cea-a31a-05dc85c6f382.png)'
  prefs: []
  type: TYPE_IMG
- en: The code for the complete MERN Expense Tracker application is available on GitHub
    at: [https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter10/mern-expense-tracker](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter10/mern-expense-tracker). You
    can clone this code and run the application as you go through the code explanations
    for the rest of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will extend the MERN skeleton to build the expense tracking
    application with data visualization features. The views required for these expense
    tracking and visualization features will be developed by extending and modifying
    the existing React components in the MERN skeleton application. The component
    tree in the following screenshot shows all the custom React components that make
    up the MERN Expense Tracker frontend developed in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/035a54ab-1da5-46e3-9db1-032248a6af3e.png)'
  prefs: []
  type: TYPE_IMG
- en: We will add new React components to implement views for creating expense records,
    listing and modifying already recorded expenses, and displaying reports giving
    insights into expenses incurred by a user over time. We will also modify existing
    components such as the Home component to render an overview of current expenses
    by a user. Before we can implement visualizations for the user's expense data,
    we need to start by adding the capability to record day-to-day expenses on the
    application. In the next section, we will discuss how to implement this feature
    allowing signed-in users to create and modify their expense records on the application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding expense records
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the MERN Expense Tracker application, a user who is signed in will be able
    to create and manage their expense records. To enable these features of adding
    and managing expense records, we will need to define how to store expense details,
    and implement the full-stack slices that will let users create new expenses, view
    these expenses, and update or delete existing expenses on the application.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, first, we will define the Expense model with a Mongoose
    Schema to store the details of each expense record. Then, we will discuss implementations
    for the backend APIs and frontend views that are needed to allow a user to create
    new expenses, view a list of their expenses, and modify existing expenses by either
    editing details of or deleting an expense from the application.
  prefs: []
  type: TYPE_NORMAL
- en: Defining an Expense model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will implement a Mongoose model to define an Expense model for storing the
    details of each expense record. This model will be defined in `server/models/expense.model.js`,
    and the implementation will be similar to other Mongoose Model implementations
    covered in previous chapters, such as the Course model defined in [Chapter 6](c58ac055-5a1e-4bf4-b8a6-c9b311cf267a.xhtml), *Building
    a Web-Based Classroom Application*. The Expense schema in this model will have
    simple fields to store details about each expense, such as a title, the amount,
    category, and date when it was incurred, along with a reference to the user who
    created the record. The code defining the expense fields are given in the following
    list with explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Expense title**: The `title` field will describe the expense. It is declared
    to be a `String` type and will be a required field:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Expense amount**: The `amount` field will store the monetary cost of the
    expense as a value of the `Number` type, and it will be a required field with
    a minimum allowed value of 0:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Expense category**: The `category` field will define the expense type, so
    expenses can be grouped by this value. It is declared to be a `String` type and
    will be a required field:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Incurred on**: The `incurred_on` field will store the date-time when the
    expense was incurred or paid. It is declared to be a `Date` type and will default
    to the current date-time if no value is provided:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Notes**: The `notes` field, defined as a `String` type, will allow the recording of
    additional details or notes for a given expense record:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Expense recorded by**: The `recorded_by` field will reference the user who
    is creating the expense record:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Created and updated at times**: The `created` and `updated` fields will be `Date` types,
    with `created` generated when a new expense is added, and `updated` changed when
    any expense details are modified:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The fields added to this schema definition will enable us to implement all the
    expense-related features in MERN Expense Tracker. In the next section, we will
    start developing these features by implementing the full-stack slice that will
    allow users to create new expense records.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new expense record
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to create a new expense record on the application, we will need to
    integrate a full-stack slice that allows the user to fill out a form view in the
    frontend, and then save the entered details to a new expense document in the database
    in the backend. To implement this feature, in the following sections, we will
    add a create expense API in the backend, along with a way to fetch this API in
    the frontend, and a create new expense form view that takes user input for expense
    details.
  prefs: []
  type: TYPE_NORMAL
- en: The create expense API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the implementation of the create expense API that will allow creating new
    expenses in the database, we will first add a `POST` route, as shown in the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/routes/expense.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: A `POST` request to this route at `/api/expenses` will first ensure that the
    requesting user is signed in with the `requireSignin` method from the `auth` controllers,
    before invoking the `create` method to add a new expense record in the database.
    This `create` method is defined in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/controllers/expense.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this `create` method, we set the `recorded_by` field to the user currently
    signed in, before using the expense data provided in the request body to save
    the new expense in the Expense collection in the database.
  prefs: []
  type: TYPE_NORMAL
- en: The `expense.routes.js` file containing the expense routes will be very similar
    to the `user.routes` file. To load these new expense routes in the Express app,
    we need to mount the expense routes in `express.js`, as shown in the following
    code, in the same way that we did for the auth and user routes.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This create expense API endpoint is now ready in the backend and can be used
    in the frontend to make a `POST` request. To fetch this API in the frontend, we
    will add a corresponding `create` method in `api-expense.js`, similar to the other
    API implementations that we discussed in previous chapters, such as the *Creating
    a new auction* section from [Chapter 9](48801a75-cf6a-4eb8-b294-65314e749e9d.xhtml),
    *Adding Real-Time Bidding Capabilities to the Marketplace*.
  prefs: []
  type: TYPE_NORMAL
- en: This fetch method will be used in the frontend component that will display a
    form where the user can enter details of the new expense and save it on the application.
    In the next section, we will implement the React component that will render the
    form for recording a new expense.
  prefs: []
  type: TYPE_NORMAL
- en: The NewExpense component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Signed-in users on this expense tracking application will interact with a form
    view in order to enter details of a new expense record. This form view will be
    rendered in the `NewExpense` component, which will allow users to create a new
    expense by entering the expense title, the amount spent, the category of the expense,
    the date-time of when the expense was incurred, and any additional notes.
  prefs: []
  type: TYPE_NORMAL
- en: 'This form will render as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/214b657c-665b-4b1d-a4a3-40b417767811.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The implementation for this `NewExpense` component is similar to other form
    implementations that we have discussed previously, such as the `Signup` component
    implementation from [Chapter 4](6f2ca10a-8079-4e3a-9d42-a3db8e85b9d9.xhtml),* Adding
    a React Frontend to Complete MERN*. The only different field in this form component
    is the date-time input for the Incurred on timing. Clicking on this field will
    render a date-time picker widget, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e19ff40-3364-4d0d-a006-57c91a3a525b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To implement this date-time picker for the form, we will use Material-UI Pickers
    along with a date management library. Before we can integrate these libraries,
    we first need to install the following Material-UI Pickers and `date-fns` modules
    by running the following `yarn` command from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Once these modules are installed, we can import the required components and
    modules in the `NewExpense` component and add the date-time picker widget to the
    form, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/expense/NewExpense.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This widget will render options to pick a year, month, date, and time along
    with a TODAY button to set the current time as the selected value. When the user
    is done picking a date-time, we will capture the value with the `handleDateChange`
    method and set it to state with the other expense-related values collected from
    the form. The `handleDateChange` method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/expense/NewExpense.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Using this, we will have a `date` value set for the `incurred_on` field in the
    new expense record.
  prefs: []
  type: TYPE_NORMAL
- en: This `NewExpense` component can only be viewed by signed-in users. So, we will
    add a `PrivateRoute` in the `MainRouter` component, which will render this form
    only for authenticated users at `/expenses/new`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This link can be added to any view, such as the Menu component, to be rendered
    conditionally when users are signed in. Now that it is possible to add new expense
    records in this expense tracking application, in the next section, we will discuss
    the implementation to fetch and list these expenses from the database in the backend
    to the views in the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Listing expenses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In MERN Expense Tracker, users will be able to view the list of expenses that
    they already recorded on the application and incurred within a provided date range.
    In the following sections, we will add this ability by implementing a backend
    API to retrieve the list of expenses recorded by the currently signed-in user,
    and add a frontend view that will use this API to render the returned list of
    expenses to the end user.
  prefs: []
  type: TYPE_NORMAL
- en: The expenses by user API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will implement an API to get the expenses recorded by a specific user and
    incurred between a provided date range. The request for this API will be received
    at `'/api/expenses'`, with the route defined in `expense.routes.js` as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/routes/expense.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: A `GET` request to this route will first ensure that the requesting user is
    signed in, before invoking the controller method to fetch the expenses from the
    database. In this application, users will only be able to view their own expenses.
    After the user authentication is confirmed, in the `listByUser` controller method
    we query the Expense collection in the database using date range specified in
    the request and the ID of the user who is signed in. The `listByUser` method is
    defined in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/controllers/expense.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In this method, we start by gathering the first day and the last day of the
    date range specified in the request query. From the database, we then retrieve
    the expenses incurred by the signed-in user within these dates. The signed-in
    user is matched against the user referenced in the `recorded _by` field. The `find`
    query against the Expense collection using these values will return matching expenses
    sorted by the `incurred_on` field, with the recently incurred expenses listed
    first.
  prefs: []
  type: TYPE_NORMAL
- en: The API to retrieve expenses recorded by a specific user can be used in the
    frontend to retrieve and display the expenses to the end user. To fetch this API
    in the frontend, we will add a corresponding `listByUser` method in `api-expense.js`,
    as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/expense/api-expense.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In this method, before making the request to the list expenses API, we form
    the query string containing the date range with the `queryString` library. Then,
    this query string is attached to the request URL.
  prefs: []
  type: TYPE_NORMAL
- en: This fetch method will be used in the `Expenses` component to retrieve and show
    the expenses to the user. We will take a look at the implementation of the `Expenses` component
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The Expenses component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The list of expenses retrieved from the database will be rendered using a React
    component called `Expenses`. This component, on the initial load, will render
    the expenses incurred by the signed-in user in the current month. In this view,
    the user will also have the option to pick a date range to retrieve expenses incurred
    within specific dates, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fee16c3c-cc06-4cb4-9b14-aea6d4f3ab59.png)'
  prefs: []
  type: TYPE_IMG
- en: While defining the `Expenses` component, we first use a `useEffect` hook to
    make a fetch call to the list expenses API in order to retrieve the initial list
    of expenses. We also initialize the values that are necessary for making this
    request and for rendering the response to be received from the server, as shown
    in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/expense/Expenses.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We first determine the dates of the first day and the last day of the current
    month. These dates are set in the state to be rendered in the search form fields
    and provided as the date range query parameters in the request to the server.
    Because we will only fetch the expenses associated with the current user, we retrieve
    the signed-in user's `auth` credentials to be sent with the request. If the request
    to the server results in an error, we will redirect the user to the login page.
    Otherwise, we will set the received expenses in the state to be rendered in the
    view.
  prefs: []
  type: TYPE_NORMAL
- en: In the view part of the `Expenses` component, we will add a form to search by
    date range, before iterating through the resulting expenses array to render individual
    expense details. In the following sections, we will look at the implementation
    of the search form and expenses list in the component view.
  prefs: []
  type: TYPE_NORMAL
- en: Searching by date range
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `Expenses` view, users will have the option to view a list of expenses
    incurred within a specific date range. To implement a search form that allows
    users to pick a start and end date for the range, we will use `DatePicker` components
    from Material-UI Pickers.
  prefs: []
  type: TYPE_NORMAL
- en: In the view, we will add two `DatePicker` components to collect the first day
    and the last day of the query range, and also add a button to initiate the search,
    as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/expense/Expenses.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: When a user interacts with the `DatePicker` components to select a date, we
    will invoke the `handleSearchFieldChange` method to get the selected `date` value.
    This method gets the `date` value and sets it to either the `firstDay` or `lastDay`
    value in the state accordingly. The `handleSearchFieldChange` method is defined
    in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/expense/Expenses.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: After the two dates are selected and set in state, when the user clicks on the
    Search button, we will invoke the `searchClicked` method. In this method, we make
    another call to the list expenses API with the new dates sent in the query parameters.
    The `searchClicked` method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/expense/Expenses.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Once the expenses resulting from this new query are received from the server,
    we set it to the state to be rendered in the view. In the next section, we will
    look at the implementation for displaying this retrieved list of expenses.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering expenses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `Expenses` component view, we iterate through the list of expenses retrieved
    from the database and display each expense record to the end user in a Material-UI
    `ExpansionPanel` component. In the `ExpansionPanel` component, we show details
    of the individual expense record in the *Summary* section. Then, on the expansion
    of the panel, we will give the user the option to edit details of the expense
    or delete the expense, as discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: In the following code added to the view code after the search form elements,
    we use `map` to iterate through the `expenses` array and render each `expense`
    in an `ExpansionPanel` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/expense/Expenses.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The expense details are rendered in the `ExpansionPanelSummary` component, giving
    the user an overview of the expense that they recorded on the application. The
    `ExpansionPanelDetails` component will contain the options to modify the given
    expense and complete the feature allowing users to manage the expenses they have
    recorded on the application. In the next section, we will discuss the implementation
    of these options to modify the recorded expense.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying an expense record
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users on MERN Expense Tracker will be able to modify the expenses they have
    already recorded on the application by either updating the details of an expense
    or deleting the expense record altogether.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the frontend of the application, they will receive these modification options
    in the expenses list after expanding to see details of an individual expense in
    the list, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7800c168-2271-4a4f-8c2e-3f75507ee3ec.png)'
  prefs: []
  type: TYPE_IMG
- en: To implement these expense modification features, we will have to update the
    view to render this form and the delete option. Additionally, we will add edit
    and delete expense API endpoints on the server. In the following sections, we
    will discuss how to render these edit and delete elements in the frontend, and
    then implement the edit and delete APIs in the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering the edit form and delete option
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will render the edit expense form and delete option in the `Expenses` component
    view. For each expense record rendered in a Material-UI `ExpansionPanel` component
    in this view, we will add form fields in the `ExpansionPanelDetails` section,
    with each field pre-populated with the corresponding expense detail value. Users
    will be able to interact with these form fields to change the values and then
    click on the Update button to save the changes to the database. We will add these
    form fields in the view along with the Update button and delete option, as shown
    in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/expense/Expenses.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The form fields added here are similar to the fields added in the `NewExpense`
    component to create new expense records. When the user interacts with these fields
    to update the values, we invoke the `handleChange` method with the corresponding
    index of the given expense in the `expenses` array, the name of the field, and
    the changed value. The `handleChange` method is defined in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/expense/Expenses.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The expense object at the given index in the `expenses` array is updated with
    the changed value of the specified field and set to state. This will render the
    view with the latest values as the user is updating the edit form. When the user
    is done making changes and clicks on the `Update` button, we will invoke the `clickUpdate`
    method, which is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/expense/Expenses.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In this `clickUpdate` method, we send the updated expense to the backend in
    a fetch call to an edit expense API. The implementation of this edit expense API
    is discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The `DeleteExpense` component added to the edit form renders a Delete button
    and uses the `expense` object passed as a prop to delete the associated expense
    from the database by calling the delete expense API. The implementation for this
    `DeleteExpense` is similar to the `DeleteShop` component discussed in [Chapter
    7](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Exercising MERN Skills with an
    Online Marketplace*. In the next section, we will discuss the implementation of
    the edit and delete expense APIs used by the edit form and delete the option to
    relay the expense-related updates made by the user to the Expense collection in
    the database.
  prefs: []
  type: TYPE_NORMAL
- en: Editing and deleting an expense in the backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to complete the edit and delete expense operations initiated by signed-in
    users from the frontend, we need to have the corresponding APIs in the backend.
    The route for these API endpoints that will accept the update and delete requests
    can be declared in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/routes/expense.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: A `PUT` or `DELETE` request to this route will first ensure that the current
    user is signed in with the `requireSignin` `auth` controller method, before checking
    authorization and performing any operations in the database.
  prefs: []
  type: TYPE_NORMAL
- en: The `:expenseId` parameter in the route URL, `/api/expenses/:expenseId`, will
    invoke the `expenseByID` controller method, which is similar to the `userByID` controller
    method. It retrieves the expense from the database and attaches it to the request
    object to be used in the `next` method. The `expenseByID` method is defined in
    the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/controllers/expense.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The expense object retrieved that is from the database will also contain the
    name and ID details of the user who recorded the expense, as we specified in the `populate()` method.
    For these API endpoints, next, we verify that this expense object was actually
    recorded by the signed-in user with the `hasAuthorization` method, which is defined
    in the expense controller as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/controllers/expense.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Once it has been confirmed that the user trying to update the expense is the
    one who recorded it and if it is a `PUT` request, then the `update` method is
    invoked next to update the expense document with the new changes in the Expense
    collection. The `update` controller method is defined in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/controllers/expense.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The method retrieves the expense details from `req.expense`, then uses the `lodash` module
    to extend and merge the changes that came in the request body to update the expense
    data. Before saving this updated expense to the database, the `updated` field
    is populated with the current date to reflect the last updated timestamp. On the
    successful save of this update, the updated expense object is sent back in the
    response.
  prefs: []
  type: TYPE_NORMAL
- en: If it is a `DELETE` request instead of a `PUT` request, the `remove` method
    is invoked instead in order to delete the specified expense document from the
    collection in the database. The `remove` controller method is defined in the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/controllers/expense.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `remove` operation in this method will permanently delete the expense from
    the application.
  prefs: []
  type: TYPE_NORMAL
- en: We have all the features in place for users on the application to start recording
    and managing their day-to-day expenses. We defined an Expense model for storing
    expense data, and backend APIs and frontend views for creating new expenses, displaying
    a list of expenses for a given user, and modifying an existing expense. We are
    now ready to implement data visualization features based on the expense data that
    will be recorded by users on the application over time. We will discuss these
    implementations in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing expense data over time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aside from allowing users to keep logs of their expenses, the MERN Expense Tracker
    application will process the collected expense data to give users insights into
    their spending habits over time. We will implement simple data aggregation and
    visualization features to demonstrate how the MERN stack can accommodate such
    requirements in any full-stack application. To enable these features, we will
    utilize MongoDB's aggregation framework and also the React-based charting and
    data visualization library—Victory—by Formidable.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will first add features to summarize a user's
    expenses in the current month and also show how they are doing compared to previous
    months. Then, we will add different Victory charts to give them a visual representation
    of their spending patterns over a month, and a year, and per expense category.
  prefs: []
  type: TYPE_NORMAL
- en: Summarizing recent expenses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a user signs in to their account on the application, they will see a preview
    of the expenses they incurred so far in the current month. They will also see
    a comparison of how much more or less they are spending in each category in comparison
    to the averages from previous months. To implement these features, we will have
    to add backend APIs that will run aggregation operations on the relevant expense
    data in the database and return the computed results to be rendered in the frontend.
    In the following sections, we will implement the full-stack slices—first to show
    a preview of all the expenses incurred so far in the current month, and then a
    comparison of the average expenses per category with respect to expenditures in
    the current month.
  prefs: []
  type: TYPE_NORMAL
- en: Previewing expenses in the current month
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After a user signs in to the application, we will show a preview of their current
    expenses, including their total expenditure for the current month and how much
    they spent on the current date and the day before. This preview will be displayed
    to the end user, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60c1cf6a-5c2f-4a1f-9c37-ed181fd420b3.png)'
  prefs: []
  type: TYPE_IMG
- en: In order to implement this feature, we need to add a backend API that will process
    the existing expense data to return these three values, so it can be rendered
    in a React component. In the following sections, we will take a look at the implementation
    and integration of this API with a frontend view to complete this preview feature.
  prefs: []
  type: TYPE_NORMAL
- en: The current month preview API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will add an API to the backend that will return the preview of expenses incurred
    so far in the current month. To implement this API, we will first declare a `GET`
    route, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/routes/expense.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: A `GET` request to this route at `'/api/expenses/current/preview'` will first
    ensure the requesting client is a signed-in user, and then it will invoke the
    `currentMonthPreview` controller method. In this method, we will use MongoDB's
    aggregation framework to perform three sets of aggregations on the Expense collection
    and retrieve the total expenses for the current month, the current date, and the
    day before.
  prefs: []
  type: TYPE_NORMAL
- en: The `currentMonthPreview` controller method will be defined with the following
    structure, where we first determine the dates needed to find matching expenses,
    and then we perform the aggregations before returning the results in the response.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/controllers/expense.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We first determine the dates for the current month's first day and last day,
    then the dates for today, tomorrow, and yesterday with the minutes and seconds
    set to zero. We will need these dates to specify the ranges for finding the matching
    expenses that were incurred in the current month, today, and yesterday. Then,
    with these values and the signed-in user's ID reference, we construct the aggregation
    pipelines necessary to retrieve the total expenses for the current month, today,
    and yesterday. We group these three different aggregation pipelines using the
    `$facet` stage in MongoDB's aggregation framework, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/controllers/expense.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: For each aggregation pipeline, we first match the expenses using the date range
    values for the `incurred_on` field, and also the `recorded_by` field with the
    current user's reference, so the aggregation is only performed on the expenses
    recorded by the current user. Then, the matching expenses in each pipeline are
    grouped to calculate the total amount spent.
  prefs: []
  type: TYPE_NORMAL
- en: In the faceted aggregation operation result, each pipeline has its own field
    in the output document where the results are stored as an array of documents.
  prefs: []
  type: TYPE_NORMAL
- en: After the aggregation operations are completed, we access the computed results
    and compose the response to be sent back in the response to the requesting client.
    This API can be used in the frontend with a fetch request. You can define a corresponding
    fetch method to make the request, similar to other API implementations. Then,
    the fetch method can be used in a React component to retrieve and render these
    aggregated values to the user. In the next section, we will discuss the implementation
    of this view to render the preview of current expenses for a user.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering the preview of current expenses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can give the user a glimpse of their current expenses in any React component,
    which is accessible to a signed-in user and added to the frontend of the application.
    To retrieve the expense totals and render these in the view, we can call the current
    month preview API either in a `useEffect` hook or when a button is clicked on.
  prefs: []
  type: TYPE_NORMAL
- en: In the MERN Expense Tracker application, we render these details in a React
    component that is added to the home page. We use a `useEffect` hook, as shown
    in the following code, to retrieve the current expense preview data.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/expense/ExpenseOverview.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Once the data is received from the backend, we set it to state in a variable
    called `expensePreview`, so the information can be displayed in the view. In the
    view of the component, we use this state variable to compose an interface with
    these details as desired. In the following code, we render the total expenses
    for the current month, for the current date, and for the day before.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/expense/ExpenseOverview.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: These values are only rendered if the corresponding value is returned in the
    aggregation results from the backend; otherwise, we render a "`0`."
  prefs: []
  type: TYPE_NORMAL
- en: With this current expenses preview feature implemented, we are able to process
    the expense data recorded by the user to give them an idea of how much they are
    spending currently. In the next section, we will follow similar implementation
    steps to inform the user about their spending status for each expense category.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking current expenses by category
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this application, we will give the user an overview of how much they are
    currently spending in each expense category in comparison to previous averages.
    For each category, we will display the monthly average based on previous expense
    data, show the total spent so far in the current month, and show the difference
    to indicate whether they are spending extra or are saving money in the current
    month. The following screenshot shows what this feature will look like to the
    end user for their expense data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d2f06c77-b483-4b80-9079-4ad1551ce9c8.png)'
  prefs: []
  type: TYPE_IMG
- en: To implement this feature, we need to add a backend API that will process the
    existing expense data to return the monthly average along with the total spent
    in the current month for each category, so it can be rendered in a React component.
    In the following sections, we will look at the implementation and integration
    of this API and frontend view to complete this feature to track expenses by category.
  prefs: []
  type: TYPE_NORMAL
- en: The current expenses by category API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will add an API to the backend that will return the average monthly expenses
    and the total spent in the current month for each expense category. To implement
    this API, we will first declare a `GET` route, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/routes/expense.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: A `GET` request to this route at `'/api/expenses/by/category'` will first ensure
    that the requesting client is a signed-in user, and then it will invoke the `expenseByCategory` controller
    method. In this method, we will use different features of MongoDB's aggregation
    framework to separately calculate the monthly expense averages for each category
    and the total spent in the current month per category, before combining the two
    results to return these two values associated with each category to the requesting
    client.
  prefs: []
  type: TYPE_NORMAL
- en: The `expenseByCategory` controller method will be defined with the following
    structure, where we first determine the dates required to find matching expenses,
    and then we perform the aggregations before returning the results in the response.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/controllers/expense.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In this method, we will use an aggregation pipeline containing a `$facet` with
    two sub-pipelines for calculating the monthly average per category and the total
    spent per category in the current month. Then, we take these two resulting arrays
    from the sub-pipelines to merge the results. The code for this aggregation pipeline
    is defined in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/controllers/expense.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: While projecting the output of the sub-pipelines in the `$facet` stage, we make
    sure that the keys of the result objects are `_id` and `value` in both output
    arrays, so they can be merged uniformly. Once the faceted aggregation operations
    are done, we use a `$setUnion` on the results to combine the arrays. Then, we
    make the resulting combined array the new root document in order to run a `$group`
    aggregation on it to merge the values for the averages and totals per category.
  prefs: []
  type: TYPE_NORMAL
- en: The final output from this aggregation pipeline will contain an array with an
    object for each expense category. Each object in this array will have the category
    name as the `_id` value and a `mergedValues` object containing the average and
    total values for the category. Then, this final output array generated from the
    aggregation is sent back in the response to the requesting client.
  prefs: []
  type: TYPE_NORMAL
- en: We can use this API in the frontend with a fetch request. You can define a corresponding
    fetch method to make the request, similar to other API implementations. Then,
    the fetch method can be used in a React component to retrieve and render these
    aggregated values to the user. In the next section, we will discuss the implementation
    of this view to render the comparison of expenses in each category by a user in
    the current month versus previous months.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering an overview of expenses per category
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides informing the user of how much they are spending currently, we can give
    them an idea of how they are doing in comparison to previous expenditures. We
    can tell them whether they are spending more or saving money in the current month
    for each category. We can implement a React component, that calls the current
    expenses by category API to render the average and total values sent by the backend
    and also displays the computed difference between these two values.
  prefs: []
  type: TYPE_NORMAL
- en: The API can be fetched either in a `useEffect` hook or when a button is clicked
    on. In the MERN Expense Tracker application, we render these details in a React
    component that is added to the home page. We use a `useEffect` hook, as shown
    in the following code, to retrieve the expenses per category data.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/expense/ExpenseOverview.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: We will set the values received from the backend to the state in an `expenseCategories` variable,
    and render its details in the view. This variable will contain an array, which
    we will iterate through in the view code to display three values for each category—the
    monthly average, the current month's total expenditure, and the difference between
    the two with an indication of whether money was saved or not.
  prefs: []
  type: TYPE_NORMAL
- en: In the following code, we use a `map` to iterate over the received data array
    and, for each item in the array, generate the view to display the average and
    total values received with the item. Besides this, we also show a computed value
    using these two values.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/expense/ExpenseOverview.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: For each item in the array, we first render the category name, then the headings
    of the three values we will display. The third heading is rendered conditionally
    depending on whether the current total is more or less than the monthly average.
    Then, under each heading, we render the corresponding values for the monthly average,
    the current total—which will be zero if no value was returned—and then the difference
    between this average and the total. For the third value, we render the absolute
    value of the computed difference between the average and total values using `Math.abs()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on this difference, we also render the divider under the category name
    with different colors to indicate whether money was saved, extra money was spent,
    or the same amount of money was spent. To determine the color, we define a method
    called `indicateExpense`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: A different color is returned if the current total is more than, less than,
    or equal to the monthly average. This gives the user a quick visual indicator
    of how they are faring in terms of incurring expenses per category for the current
    month.
  prefs: []
  type: TYPE_NORMAL
- en: We have added simple data visualization features to the expense tracking application
    by utilizing existing capabilities of MERN stack technologies such as the aggregation
    framework in MongoDB. In the next section, we will demonstrate how to add even
    more complex data visualization features into this application by integrating
    an external charting library.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying expense data charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Graphs and charts are time-tested mechanisms for visualizing complex data patterns.
    In the MERN Expense Tracker application, we will add simple charts using Victory
    to report expense patterns over time in graphical representations to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Victory is an open source charting and data visualization library for React
    and React Native developed by Formidable. Different types of charts are available
    as modular components that can be customized and added to any React application.
    To learn more about Victory, visit [https://formidable.com/open-source/victory](https://formidable.com/open-source/victory).
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we get started with integrating Victory charts in the code, we will
    need to install the module by running the following command from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: In the expense tracking application, we will add three different charts as a
    part of the interactive expense reports presented to the user. The three charts
    will include a scatter plot showing the expenses incurred in a given month, a
    bar chart showing the total expenses incurred per month in a given year, and a
    pie chart showing the average expenditure per category within a provided date
    range.
  prefs: []
  type: TYPE_NORMAL
- en: For each chart, we will add a corresponding backend API to retrieve the relevant
    expense data and a React component to the frontend that will use the retrieved
    data to render the associated Victory chart. In the following sections, we will
    implement the full-stack slices necessary to add a scatter plot chart for a month's
    expenses, a bar chart showing a year's monthly expenses, and a pie chart displaying
    the average expenses per category over a given period of time.
  prefs: []
  type: TYPE_NORMAL
- en: A month's expenses in a scatter plot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will show the expenses incurred by a user over a given month in a scatter
    plot. This will provide them with a visual overview of how their expenses pan
    out over a month. The following screenshot shows how the scatter plot will render
    with user expense data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9dd8ba80-3981-4919-a0e7-cdda0e660b71.png)'
  prefs: []
  type: TYPE_IMG
- en: We plot the expense amounts versus the day of the month when it was incurred
    on the *y* axis and *x* axis, respectively. Hovering over a plotted bubble displays
    how much was spent on which date for that specific expense record. In the following
    sections, we will implement this feature by first adding a backend API that will
    return the expenses for the given month in the format needed to render it in a
    Victory Scatter chart. Then, we will add a React component that will retrieve
    this data from the backend and render it in the Victory Scatter chart.
  prefs: []
  type: TYPE_NORMAL
- en: The scatter plot data API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will add an API to the backend that will return the expenses incurred over
    a given month in the data format needed to render the scatter chart in the frontend.
    To implement this API, we will first declare a `GET` route, as shown in the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/routes/expense.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: A `GET` request to this route at `'/api/expenses/plot'` will first ensure that
    the requesting client is a signed-in user, and then it will invoke the `plotExpenses` controller
    method. The request will also take the value of the given month in a URL query
    parameter, which will be used in the `plotExpenses` method to determine the dates
    of the first day and the last day of the provided month. We will need these dates
    to specify the range for finding the matching expenses that were incurred in the
    specified month and recorded by the authenticated user while aggregating the expenses
    into the data format needed for the chart. The `plotExpenses` method is defined
    in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/controllers/expense.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: We run a simple aggregation operation that finds the matching expenses and returns
    an output containing the values in the format needed for the *y* axis and *x*
    axis values of the scatter chart. The final result of the aggregation contains
    an array of objects, with each object containing an `x` attribute and a `y` attribute.
    The `x` attribute contains the day of the month value from the `incurred_on` date.
    The `y` attribute contains the corresponding expense amount. This final output
    array generated from the aggregation is sent back in the response to the requesting
    client.
  prefs: []
  type: TYPE_NORMAL
- en: We can use this API in the frontend with a fetch request. You can define a corresponding
    fetch method to make the request, similar to other API implementations. Then,
    the fetch method can be used in a React component to retrieve and render this
    array of `x` and `y` values in a scatter plot chart. In the next section, we will
    discuss the implementation of this view to render a scatter chart showing the
    expenses incurred over a given month.
  prefs: []
  type: TYPE_NORMAL
- en: The MonthlyScatter component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will implement a React component that calls the scatter plot data API to
    render the received array of expenses incurred over a given month in a Victory
    Scatter chart.
  prefs: []
  type: TYPE_NORMAL
- en: The API can be fetched either in a `useEffect` hook or when a button is clicked
    on. In the MERN Expense Tracker application, we render this scatter chart in a
    React component called `MonthlyScatter`. When this component loads, we render
    a scatter chart for expenses in the current month. We also add a `DatePicker` component
    to allow users to select the desired month and retrieve data for that month with
    a button click. In the following code, we retrieve the initial scatter plot data
    with a `useEffect` hook when the component loads.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/report/MonthlyScatter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: When the plotted data is received from the backend and set in the state, we
    can render it in a Victory Scatter chart. Additionally, we can add the following
    code in the component view to render a customized scatter chart with labels.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/report/MonthlyScatter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: We place a `VictoryScatter` component in a `VictoryChart` component, giving
    us the flexibility to customize the scatter chart wrapper and place axis label
    texts outside the scatter chart. We pass the data to `VictoryScatter`, indicate
    which value the bubble property is based on, customize the styles, and specify
    the size range and labels for each bubble.
  prefs: []
  type: TYPE_NORMAL
- en: This code plots and renders the scatter chart against the data provided with
    the amount spent versus the day of the month on the *y* axis and *x* axis, respectively.
    In the next section, we will follow similar steps to add a bar chart to graphically
    display the monthly expenses in a given year.
  prefs: []
  type: TYPE_NORMAL
- en: Total expenses per month in a year
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will show the user a bar chart representing their total monthly expenses
    over a given year. This will give them an overview of how their expenses are spread
    out annually. The following screenshot shows how the bar chart will render with
    user expense data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd85f5ff-22b3-4a73-b64b-895a21ff103d.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we populate the bar chart with the total expense value corresponding to
    each month in a given year. We add the monthly total value as labels to each bar.
    On the x-axis, we show the short name of each month. In the following sections,
    we will implement this feature by first adding a backend API that will return
    the total expenses incurred per month over a given year and in the format needed
    to render it in a Victory Bar chart. Then, we will add a React component that
    will retrieve this data from the backend and render it in the Victory Bar chart.
  prefs: []
  type: TYPE_NORMAL
- en: The yearly expenses API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will add an API to the backend that will return the total monthly expenses
    incurred over a given year in the data format needed to render the bar chart in
    the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: To implement this API, we will first declare a `GET` route, as shown in the
    following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/routes/expense.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: A `GET` request to this route at `'/api/expenses/yearly'` will first ensure
    that the requesting client is a signed-in user, and then it will invoke the `yearlyExpenses` controller
    method. The request will also take the value of the given year in a URL query
    parameter, which will be used in the `yearlyExpenses` method to determine the
    dates of the first day and the last day of the provided year. We will need these
    dates to specify the range for finding the matching expenses that were incurred
    in the specified year and recorded by the authenticated user while aggregating
    the total monthly expenses into the data format needed for the chart. The `yearlyExpenses` method
    is defined in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/controllers/expense.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: We run an aggregation operation that finds the matching expenses, groups the
    expenses by month to calculate the total, and returns an output containing the
    values in the format needed for the *y* axis and *x* axis values of the bar chart.
    The final result of the aggregation contains an array of objects, with each object
    containing an `x` attribute and a `y` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: The `x` attribute contains the month value from the `incurred_on` date. The `y` attribute
    contains the corresponding total expense amount for that month. This final output
    array generated from the aggregation is sent back in the response to the requesting
    client.
  prefs: []
  type: TYPE_NORMAL
- en: We can use this API in the frontend with a fetch request. You can define a corresponding
    fetch method to make the request, similar to other API implementations. Then,
    the fetch method can be used in a React component to retrieve and render this
    array of `x` and `y` values in a bar chart. In the next section, we will discuss
    the implementation of this view to render a bar chart showing the total monthly
    expenses incurred over a given year.
  prefs: []
  type: TYPE_NORMAL
- en: The YearlyBar component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will implement a React component that calls the yearly expenses data API
    to render the received array of expenses incurred monthly over a given year in
    a Victory Bar chart.
  prefs: []
  type: TYPE_NORMAL
- en: The API can be fetched either in a `useEffect` hook or when a button is clicked
    on. In the MERN Expense Tracker application, we render this bar chart in a React
    component called `YearlyBar`. When this component loads, we render a bar chart
    for expenses in the current year. We also add a `DatePicker` component to allow
    users to select the desired year and retrieve data for that year with a button
    click. In the following code, we retrieve the initial yearly expense data with
    a `useEffect` hook when the component loads.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/report/YearlyBar.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: With the data received from the backend and set in the state, we can render
    it in a Victory Bar chart. We can add the following code in the component view
    to render a customized bar chart with labels and only the *x* axis displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/report/YearlyBar.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The month values returned from the database are zero-based indices, so we define
    our own array of month name strings to map to these indices. To render the bar
    chart, we place a `VictoryBar` component in a `VictoryChart` component, giving
    us the flexibility to customize the bar chart wrapper, and also the *y* axis with
    a `VictoryAxis` component, which is added without any props so that a *y* axis
    is not displayed at all.
  prefs: []
  type: TYPE_NORMAL
- en: We pass the data to `VictoryBar` and also define the categories for the *x*
    axis values using the month strings so that all months of the year are displayed
    on the chart, even if a corresponding total value does not exist yet. We render
    individual labels for each bar to show the total expense value for each month.
    To map the *x* axis value with the correct month string, we specify it in the
    `x` prop for the `VictoryBar` component.
  prefs: []
  type: TYPE_NORMAL
- en: This code plots and renders the bar chart against the data provided, with the
    monthly expense totals mapped for each month. In the next section, we will follow
    similar steps to add a pie chart to graphically display the average expenses per
    category in a given date range.
  prefs: []
  type: TYPE_NORMAL
- en: Average expenses per category in a pie chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can render a pie chart showing how much users spend on average per expense
    category over a given period of time. This will help users visualize which categories
    consume more or less of their wealth over time. The following screenshot shows
    how the pie chart will render with user expense data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d31b4ff-2eb5-45d6-85d8-105670706600.png)'
  prefs: []
  type: TYPE_IMG
- en: We populate the pie chart with each category and its average expenditure value,
    showing the corresponding name and amount as labels. In the following sections,
    we will implement this feature by first adding a backend API that will return
    the average expenses per category over the given date range and in the format
    needed to render it in a Victory Pie chart. Then, we will add a React component
    that will retrieve this data from the backend and render it in the Victory Pie
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: The average expenses by category API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will add an API to the backend that will return the average expenses incurred
    in each category over a given time period and in the data format needed to render
    the pie chart in the frontend. To implement this API, we will first declare a
    `GET` route, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/routes/expense.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: A `GET` request to this route at `'/api/expenses/category/averages'` will first
    ensure that the requesting client is a signed-in user, and then it will invoke
    the `averageCategories` controller method. The request will also take the values
    of the given date range in URL query parameters, which will be used in the `averageCategories` method
    to determine the dates of the first day and the last day of the provided range. We
    will need these dates to specify the range for finding the matching expenses that
    were incurred in the specified date range and recorded by the authenticated user
    while aggregating the expense averages per category into the data format needed
    for the chart. The `averageCategories` method is defined in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/server/controllers/expense.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: We run an aggregation operation that finds the matching expenses, groups the
    expenses by category to first calculate the total and then the average, and returns
    an output containing the values in the format needed for the *y* and *x* values
    of the pie chart. The final result of the aggregation contains an array of objects,
    with each object containing an `x` attribute and a `y` attribute. The `x` attribute
    contains the category name as the value. The `y` attribute contains the corresponding
    average expense amount for that category. This final output array generated from
    the aggregation is sent back in the response to the requesting client.
  prefs: []
  type: TYPE_NORMAL
- en: We can use this API in the frontend with a fetch request. You can define a corresponding
    fetch method to make the request, similar to other API implementations. Then,
    the fetch method can be used in a React component to retrieve and render this
    array of `x` and `y` values in a pie chart. In the next section, we will discuss
    the implementation of this view to render a pie chart showing the average expenses
    incurred per category over a given date range.
  prefs: []
  type: TYPE_NORMAL
- en: The CategoryPie component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will implement a React component that calls the average expenses by category
    API to render the received array of average expenses incurred per category in
    a Victory Pie chart.
  prefs: []
  type: TYPE_NORMAL
- en: The API can be fetched either in a `useEffect` hook or when a button is clicked
    on. In the MERN Expense Tracker application, we render this pie chart in a React
    component called `CategoryPie`. When this component loads, we render a pie chart
    for the average expenses incurred per category in the given month. We also add
    two `DatePicker` components to allow users to select the desired date range and
    retrieve data for that range with a button click. In the following code, we retrieve
    the initial average expense data with a `useEffect` hook when the component loads.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/report/CategoryPie.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: With the data received from the backend and set in state, we can render it in
    a Victory Pie chart. We can add the following code in the component view to render
    a customized pie chart with individual text labels for each slice and a center
    label for the chart.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-expense-tracker/client/report/CategoryPie.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: To render the pie chart with a separate center label, we place a `VictoryPie` component
    in an `svg` element, giving us the flexibility to customize the pie chart wrapping
    and a separate circular label using a `VictoryLabel` outside the pie chart code.
  prefs: []
  type: TYPE_NORMAL
- en: We pass the data to `VictoryPie`, define customized labels for each slice, and
    make the pie chart standalone so that the center label can be placed over the
    chart. This code plots and renders the pie chart against the data provided with
    the average expense displayed for each category.
  prefs: []
  type: TYPE_NORMAL
- en: We have added three different Victory charts to the application based on the
    user-recorded expense data, which was processed as needed and retrieved from the
    database in the backend. The MERN Expense Tracker application is complete with
    abilities that allow users to record their day-to-day expenses, and then visualize
    data patterns and expenditure habits extracted from the expense data recorded
    over time.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we extended the MERN skeleton application to develop an expense
    tracking application with data visualization features. We designed an Expense
    model for recording expense details and implemented the full-stack **CRUD** (**Create**,
    **Read**, **Update**, **Delete**) functionalities that allowed signed-in users
    to record their day-to-day expenses, see a list of their expenses, and modify
    existing expense records.
  prefs: []
  type: TYPE_NORMAL
- en: We added data processing and visualization features that gave users an overview
    of their current expenses and also an idea of how much more or less they are spending
    per expense category. We also incorporated different types of charts to show users
    their expenditure patterns over various time ranges.
  prefs: []
  type: TYPE_NORMAL
- en: While implementing these features, we learned about some of the data processing
    options with the aggregation framework in MongoDB and also incorporated some of
    the customizable chart components from Victory. You can explore the aggregation
    framework and the Victory library further to incorporate more complex data visualization
    features in your own full-stack applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore even more advanced possibilities with MERN
    stack technologies as we build a media streaming application by extending the
    MERN skeleton.
  prefs: []
  type: TYPE_NORMAL
