- en: Unit Testing Our Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试我们的应用程序
- en: In this chapter, we will cover Angular testing in detail. We will start with
    a basic introduction to Angular testing and learn about tools and technologies
    used for unit testing. We will write unit tests for our login component using
    Angular testing framework and configure a dependent module. We will also unit
    test our user service. As part of our testing, we will create stubs for dependent
    services or components so that we can focus only on the class unit under test.
    We will unit test our component and service using Angular framework so that dependent
    modules are initialized. We will test an Angular pipe in isolation so that the
    pipe is initialized directly using a `new` keyword. Finally, we will take a look
    at the code coverage for our code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将详细讲解 Angular 测试。我们将从 Angular 测试的基本介绍开始，了解用于单元测试的工具和技术。我们将使用 Angular
    测试框架为我们的登录组件编写单元测试，并配置一个依赖模块。我们还将对用户服务进行单元测试。作为测试的一部分，我们将为依赖服务或组件创建存根，以便我们只关注正在测试的类。我们将使用
    Angular 框架对组件和服务进行单元测试，以便初始化依赖模块。我们将单独测试 Angular 管道，以便直接使用 `new` 关键字初始化管道。最后，我们将查看代码覆盖率。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introduction to Angular testing
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 测试简介
- en: Unit testing an Angular component
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试 Angular 组件
- en: Unit testing Angular services
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试 Angular 服务
- en: Unit testing Angular pipe
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试 Angular 管道
- en: Introduction to code coverage
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码覆盖率简介
- en: Introduction to Angular testing
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular 测试简介
- en: 'Unit testing is an important part of a software development life cycle. The
    benefits of unit testing are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是软件开发生命周期的重要组成部分。单元测试的好处如下：
- en: It helps to align our implementation with the design
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于使我们的实现与设计保持一致
- en: It helps in protecting our application from regression
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于保护我们的应用程序免受回归的影响
- en: Refactoring becomes easier if we have good test cases
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们有良好的测试用例，重构会变得更容易
- en: 'Angular provides various tools and technologies to test our application. As
    a part of our unit testing, we will use the following technologies:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 提供了各种工具和技术来测试我们的应用程序。作为单元测试的一部分，我们将使用以下技术：
- en: '**Jasmine**: This provides the basic skeleton to write our unit test. It comes
    with a HTML test runner and runs on a browser.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jasmine**：它为我们编写单元测试提供了基本框架。它附带一个 HTML 测试运行器，并在浏览器上运行。'
- en: '**Angular testing framework:** This comes along with Angular framework and
    helps to create a test environment for Angular code under test. It also gives
    us access to DOM elements.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Angular 测试框架**：它与 Angular 框架一起提供，有助于为正在测试的 Angular 代码创建测试环境。它还为我们提供了访问 DOM
    元素的能力。'
- en: '**Karma**: We use the Karma tool to run our application. We run our unit tests
    using the following command:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Karma**：我们使用 Karma 工具运行我们的应用程序。我们使用以下命令运行单元测试：'
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can write two types of Angular test:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以编写两种类型的 Angular 测试：
- en: '**Unit testing with Angular test framework**: We will use Angular test framework
    to write unit tests for our component and services. This will create a test environment
    and provide us access to various elements of the Angular framework.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Angular 测试框架进行单元测试**：我们将使用 Angular 测试框架为我们的组件和服务编写单元测试。这将创建一个测试环境，并为我们提供访问
    Angular 框架各个元素的能力。'
- en: '**Isolated unit test**: We can write independent unit tests without Angular
    dependency. This kind of unit test is really useful for testing services and pipes.
    In this chapter, we will test our date pipe this way.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离单元测试**：我们可以编写不依赖 Angular 的独立单元测试。这种单元测试对于测试服务和管道非常有用。在本章中，我们将以这种方式测试我们的日期管道。'
- en: It is good to note that it is always better to stick to isolated unit tests
    when you can, and to try to write as few integrated and end-to-end tests whenever
    possible, because isolated unit tests are the easiest to maintain.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，当你能够做到的时候，始终最好坚持使用隔离单元测试，并尽可能少地编写集成和端到端测试，因为隔离单元测试最容易维护。
- en: Unit testing an Angular component
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试 Angular 组件
- en: 'In this section, we will write our first Angular test for the login component.
    The steps involved in writing test cases are as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将编写第一个针对登录组件的 Angular 测试。编写测试用例涉及的步骤如下：
- en: '**Identifying the class under test**: The first step in writing unit test cases
    is to identify the dependencies. The login component `constructor` shows all the
    dependencies and is dependent on `UserService`, `Router`, `AuthenticationService`,
    and `AngularFireAuth`:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**识别测试的类**：编写单元测试用例的第一步是识别依赖项。登录组件的`constructor`显示了所有依赖项，并且依赖于`UserService`、`Router`、`AuthenticationService`和`AngularFireAuth`：'
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Creating all the mock or stubs classes**: Once we identify all the dependencies,
    we need to eliminate these external dependencies and concentrate only on the component
    class under test. So we create mock or stub classes to eliminate these dependencies.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建所有模拟或存根类**：一旦我们识别了所有依赖项，我们需要消除这些外部依赖项，并专注于测试的组件类。因此，我们创建模拟或存根类来消除这些依赖项。'
- en: 'In the login component, we use user service to retrieve user information using
    the `getUser()` method so we create `UserServiceStub` with the `getUser()` method,
    which returns mock user encapsulates in an `Observable` object; we create a test
    data class for the mock user, that contains user details, as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在登录组件中，我们使用用户服务通过`getUser()`方法检索用户信息，因此我们创建了一个具有`getUser()`方法的`UserServiceStub`，该方法返回封装在`Observable`对象中的模拟用户；我们为模拟用户创建了一个包含用户详情的测试数据类，如下所示：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here''s a sample `user-test-data.ts` file:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`user-test-data.ts`文件的示例：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We use an authentication service in the login component to log in and reset
    the password so we create an `AuthenticationServiceStub` class with an empty `login()`
    and `resetPassword()` methods:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 登录组件中我们使用认证服务进行登录和重置密码，因此我们创建了一个具有空的`login()`和`resetPassword()`方法的`AuthenticationServiceStub`类：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `AngularFireAuth` class is part of Angular''s Fire library. This class
    is responsible for authentication in our application and contains an `auth` object,
    so we create a stub for the `auth` class, too:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`AngularFireAuth`类是Angular的Fire库的一部分。这个类负责我们应用中的认证，并包含一个`auth`对象，因此我们也为`auth`类创建了一个存根：'
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here''s the `AuthStub` class:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`AuthStub`类：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, we use a router to navigate to pages in our application. This provider
    is part of Angular framework. We create a stub for this class as well:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用路由器导航到应用中的页面。这个提供者是Angular框架的一部分。我们也为这个类创建了一个存根：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Creating the test suites**: Once we eliminate the external dependencies,
    we can create test suites within the `describe()` method in Jasmine framework.
    This method accepts `description` for test suites and the `specDefinitions` function
    for Jasmine framework to invoke inner suites of specs:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建测试套件**：一旦我们消除了外部依赖项，我们可以在Jasmine框架的`describe()`方法中创建测试套件。此方法接受测试套件的`description`和用于Jasmine框架的`specDefinitions`函数来调用spec的内部套件：'
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Creating the test environment**: We create the Angular test environment for
    components under test. Angular provides a `TestBed` class to create the test environment;
    it initializes the dependent modules, providers, services, and components. We
    call a `TestBed.configureTestingModule()` method within `beforeEach()` so that
    this configures modules before each test case execution:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建测试环境**：我们为要测试的组件创建Angular测试环境。Angular提供了一个`TestBed`类来创建测试环境；它初始化依赖模块、提供者、服务和组件。我们在`beforeEach()`方法中调用`TestBed.configureTestingModule()`方法，以便在每次测试用例执行之前配置模块：'
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Initializing the testing objects**: Once we configure modules, we can create
    a login component fixture using `TestBed.createComponent()` and initialize the
    login component and debug element:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**初始化测试对象**：一旦我们配置了模块，我们可以使用`TestBed.createComponent()`创建一个登录组件固定装置，并初始化登录组件和调试元素：'
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Writing our first test**: The final step is to write the test cases. Our
    first test case is to check whether the login component is instantiated or not.
    We will the write test case within the `it()` method and use `expect()` to validate
    the instance:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编写第一个测试用例**：最后的步骤是编写测试用例。我们的第一个测试用例是检查登录组件是否已实例化。我们将在`it()`方法中编写测试用例，并使用`expect()`来验证实例：'
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Destroying the created instance:** After each test case, we clear the instance
    in the `afterEach()` method, as follows:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**销毁创建的实例**：在每个测试用例之后，我们在`afterEach()`方法中清除实例，如下所示：'
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Running the test**: Finally, we run our first test case using the following
    command:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**运行测试**：最后，我们使用以下命令运行我们的第一个测试用例：'
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After its successful run, this opens in a browser and shows the status as 1
    spec successful with 0 failures:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在其成功运行后，它将在浏览器中打开，并显示状态为1个spec成功，0个失败：
- en: '![](img/00033.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00033.jpeg)'
- en: '**Adding more unit tests**:In the next test case, we check whether the `login`
    method of our service is called when a user enters their email and password and
    clicks on the LOGIN button. First, we initialize the DOM elements, such as email
    input text, password input text, and login button. Next, we initialize the default
    values for email and password and `spyOn` the service login method so that this
    mock method is called when the user clicks on the LOGIN button. After the LOGIN
    button is clicked, we then call `detectChanges()` to notify the DOM to refresh
    the elements. Finally, we validate that the `login()` method should be called:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**添加更多单元测试**：在下一个测试用例中，我们检查当用户输入他们的电子邮件和密码并点击登录按钮时，我们的服务中的 `login` 方法是否被调用。首先，我们初始化
    DOM 元素，例如电子邮件输入文本、密码输入文本和登录按钮。接下来，我们初始化电子邮件和密码的默认值，并 `spyOn` 服务中的登录方法，以便在用户点击登录按钮时调用此模拟方法。点击登录按钮后，我们调用
    `detectChanges()` 通知 DOM 刷新元素。最后，我们验证 `login()` 方法应该被调用：'
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here''s the `login.component.spec.ts` file as of now:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是 `login.component.spec.ts` 文件：
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Unit testing an Angular service
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试 Angular 服务
- en: In this section, we unit test an Angular service and we write test cases for
    our user service. The steps for unit testing a service are the same as for our
    component.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们单元测试 Angular 服务，并为我们的用户服务编写测试用例。单元测试服务的步骤与我们的组件相同。
- en: 'The first step in writing unit test cases is to analyze the dependent components,
    as we see user service is dependent on `AngularFireDatabase` and initializes the
    Firebase storage object:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 编写单元测试用例的第一步是分析依赖组件，因为我们看到用户服务依赖于 `AngularFireDatabase` 并初始化 Firebase 存储对象：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'So we create a stub for this dependent object such as `AngularFireDatabaseStub`, which contains
    other dependent stubs such as `AngularFireAppStub` and `AngularFireObjectStub`
    object references and the `object()` method:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们为这个依赖对象创建了一个模拟，例如 `AngularFireDatabaseStub`，它包含其他依赖模拟，如 `AngularFireAppStub`
    和 `AngularFireObjectStub` 对象引用以及 `object()` 方法：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following is the `AngularFireAppStub` stub class with an empty mock method:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个带有空模拟方法的 `AngularFireAppStub` 模拟类：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following is the `AngularFireObjectStub` stub class with empty mock methods:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个空的模拟方法的 `AngularFireObjectStub` 模拟类：
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The next step is to initialize the test environment using `TestBed` and retrieve
    the user service object using `TestBed.get()`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用 `TestBed` 初始化测试环境，并通过 `TestBed.get()` 获取用户服务对象：
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, we will start writing the test cases for our user service. We will cover
    the following test cases for the user service:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将开始编写我们的用户服务的测试用例。我们将涵盖以下用户服务的测试用例：
- en: 'The first test case is to add a user to Firebase database. We will add `spyOn` to
    the `set` method of Angular''s fire object and call the add user method using
    mock user; then we expect the `set` method of Angular fire object to be called:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个测试用例是将用户添加到 Firebase 数据库。我们将向 Angular 的 fire 对象的 `set` 方法添加 `spyOn` 并使用模拟用户调用添加用户方法；然后我们期望
    Angular fire 对象的 `set` 方法被调用：
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The next test case is to receive our user from the Firebase database. We add
    `spyOn`, the value change method of Angular''s fire object, which returns a mock
    user. We then call a `getUser` method, subscribe to the `Observable` object, and
    then we validate the method call and also test the content of our mock user with
    the expected values:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个测试用例是从 Firebase 数据库接收我们的用户。我们添加 `spyOn` Angular 的 fire 对象的值变化方法，它返回一个模拟用户。然后我们调用
    `getUser` 方法，订阅 `Observable` 对象，然后验证方法调用，并使用预期值测试我们的模拟用户的内容：
- en: '[PRE22]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The next test case is to save the user in `member` variables. In this test
    case, we will save a mock user in an `Observable`, then retrieve the user using
    a `get` method, and validate all properties of the mock user:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个测试用例是将用户保存到 `member` 变量中。在这个测试用例中，我们将一个模拟用户保存到一个 `Observable` 中，然后使用 `get`
    方法检索用户，并验证模拟用户的所有属性：
- en: '[PRE23]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The next test case is to update the email in the Firebase database and also
    update the cache user object in the user service class; we spy on the `update`
    method of Angular''s fire object, pass a new email to update the `email` method,
    which updates the Firebase database and the cache user object, test the Firebase
    database call, retrieve the user from the `get` method, and validate all the properties
    of the mock user:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个测试用例是更新 Firebase 数据库中的电子邮件，并更新用户服务类中的缓存用户对象；我们 `spyOn` Angular 的 fire 对象的
    `update` 方法，传递一个新电子邮件以更新 `email` 方法，这将更新 Firebase 数据库和缓存用户对象，测试 Firebase 数据库调用，从
    `get` 方法检索用户，并验证模拟用户的所有属性：
- en: '[PRE24]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here''s the `user.service.spec.ts` file as of now:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是 `user.service.spec.ts` 文件：
- en: '[PRE25]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Unit testing Angular pipe
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试 Angular 管道
- en: 'Angular pipe unit testing is an example of testing a class independently of
    the Angular test environment. In this example, we test our friend''s date pipe
    class and create the object in the test class:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 管道单元测试是独立于 Angular 测试环境测试类的示例。在这个例子中，我们测试了我们的朋友日期管道类，并在测试类中创建了对象：
- en: '[PRE26]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'On this object, we will write the following two test cases:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在此对象上，我们将编写以下两个测试用例：
- en: First, test the green field scenario, where we pass a valid date in milliseconds
    and test the transformed human-readable date format
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，测试绿色字段场景，即我们传递一个有效的日期（以毫秒为单位），并测试转换后的人类可读日期格式
- en: Second, test the edge-case scenario where we pass an invalid date as `-1`, and
    we expect a string return value as `"Invalid Date"`
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二，测试边缘情况场景，即我们传递一个无效日期`-1`，并期望返回一个字符串值`"Invalid Date"`
- en: '[PRE27]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Code coverage
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码覆盖率
- en: Code coverage of the application reflects the overall coverage of our code.
    This gives an overview of the line and function coverage of the code so that we
    can write more test cases to cover other parts of the code.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的代码覆盖率反映了我们代码的整体覆盖率。这为我们提供了代码行和函数覆盖率的概述，以便我们可以编写更多的测试用例来覆盖代码的其他部分。
- en: 'We can enable code coverage in `package.json`, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`package.json`中启用代码覆盖率，如下所示：
- en: '[PRE28]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We will execute the following command, which runs the test cases, and creates
    a `coverage` folder, which has `index.html` to show coverage statistics:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将执行以下命令，该命令运行测试用例，并创建一个`coverage`文件夹，其中包含`index.html`以显示覆盖率统计信息：
- en: '[PRE29]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'When we open `index.html`, it shows a beautiful table with an overview of the
    coverage:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们打开`index.html`时，它显示了一个包含覆盖率概览的美丽表格：
- en: '![](img/00034.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00034.jpeg)'
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered unit testing and discussed various terms and terminologies
    in Angular unit testing. We implemented unit test for our login component, covered `TestBed`, and
    configured our modules. We wrote a unit test for our service, created stubs for
    external dependent classes, and injected these stubbed classes in our module.
    We also wrote isolated test cases for Angular pipe. Finally, we discussed code
    coverage and ran code coverage for our specs.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了单元测试，并讨论了 Angular 单元测试中的各种术语和术语。我们为我们的登录组件实现了单元测试，覆盖了`TestBed`，并配置了我们的模块。我们为我们的服务编写了单元测试，为外部依赖类创建了存根，并在我们的模块中注入了这些存根类。我们还为
    Angular 管道编写了隔离的测试用例。最后，我们讨论了代码覆盖率，并为我们规格运行了代码覆盖率。
- en: In the next chapter, we will discuss debugging techniques. This will help us
    to solve and debug our issues faster.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论调试技术。这将帮助我们更快地解决问题和调试。
