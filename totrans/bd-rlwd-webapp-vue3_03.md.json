["```js\nnpm init vue@latest\n```", "```js\n<script lang=\"ts\" setup>import { ref } from \"vue\";\nimport type { Ref } from \"vue\";\ntype Geolocation = {\n  latitude: number;\n  longitude: number;\n};\nconst coords: Ref<Geolocation | undefined>= ref();\n</script>\n```", "```js\n<script lang=\"ts\" setup>import { ref } from \"vue\";\nimport type { Ref } from \"vue\";\ntype Geolocation = {\n  latitude: number;\n  longitude: number;\n};\nconst coords: Ref<Geolocation | undefined> = ref();\nconst geolocationBlockedByUser: Ref<boolean> = ref(false);\nconst getGeolocation = async (): Promise<void> => {\n  await navigator.geolocation.getCurrentPosition(\n    () => {},\n    (error: { message: string }) => {\n      geolocationBlockedByUser.value = true;\n      console.error(error.message);\n    }\n  );\n};\n</script>\n```", "```js\nconst getGeolocation = async (): Promise<void> => {  await navigator.geolocation.getCurrentPosition(\n    async (position: { coords: Geolocation }) => {\n      coords.value = position.coords;\n    },\n    (error: { message: string }) => {\n      geolocationBlockedByUser.value = true;\n      console.error(error.message);\n    }\n  );\n};\n```", "```js\n<script lang=\"ts\" setup>import { ref, onMounted } from \"vue\";\nimport type { Ref } from \"vue\";\ntype Geolocation = {\n  latitude: number;\n  longitude: number;\n};\nconst coords: Ref<Geolocation | undefined> = ref();\nconst geolocationBlockedByUser: Ref<boolean> = ref(false);\nconst getGeolocation = async (): Promise<void> => {\n  await navigator.geolocation.getCurrentPosition(\n    async (position: { coords: Geolocation }) => {\n      coords.value = position.coords;\n    },\n    (error: { message: string }) => {\n      geolocationBlockedByUser.value = true;\n      console.error(error.message);\n    }\n  );\n};\nonMounted(async () => {\n  await getGeolocation();\n});\n</script>\n```", "```js\n<template>  <div v-if=\"coords && !geolocationBlockedByUser\">{{ coords.latitude }} {{ coords.longitude }}</div>\n  <div v-if=\"geolocationBlockedByUser\">User denied access</div>\n</template>\n```", "```js\n<script setup lang=\"ts\">import GetLocation from \"./components/GetLocation.vue\";\n</script>\n<template>\n  <GetLocation />\n</template>\n```", "```js\nVITE_APP_WEATHER_API_KEY=Replace this with the key\n```", "```js\nhttps://api.weatherapi.com/v1/current.json?key=OUR_SECRET_KEY&q=OUR_LATITUDE_AND_LONGITUDE\n```", "```js\n<script lang=\"ts\" setup>type WeatherData = {\n  location: {\n    localtime: Date;\n    name: string;\n    region: string;\n  };\n  current: {\n    temp_c: number;\n    temp_f: number;\n    precip_mm: number;\n    condition: {\n      text: string;\n      icon: string;\n    };\n    wind_degree: number;\n    wind_kph: number;\n    wind_mph: number;\n  };\n};\ntype Coords = { latitude: number; longitude: number }\ninterface Props {\n  coords: Coords;\n}\nconst props = defineProps<Props>();\n</script>\n```", "```js\n<script lang=\"ts\" setup>import { ref } from \"vue\";\nimport type { Ref } from 'vue'\ntype WeatherData = {\n  …\n};\ntype Coords = { latitude: number; longitude: number }\ninterface Props {\n  coords: Coords;\n}\nconst props = defineProps<Props>();\nconst data: Ref<WeatherData | undefined> = ref();\n</script>\n```", "```js\n<script lang=\"ts\" setup>import { ref, onMounted } from \"vue\";\nimport type { Ref } from 'vue'\ntype WeatherData = {\n  …\n};\ntype Coords = { latitude: number; longitude: number }\ninterface Props {\n  coords: Coords;\n}\nconst props = defineProps<Props>();\nconst data: Ref<WeatherData | undefined> = ref();\nconst fetchWeather = async (coords: Coords): Promise<WeatherData> => {\n  const { latitude, longitude } = coords;\n  const q = ${latitude},${longitude};\n  const res = await fetch(\n `https://api.weatherapi.com/v1/current.json?key=${\n import.meta.env.VITE_APP_WEATHER_API_KEY\n    }&q=${q}`\n  );\n  const data = await res && res.json();\n  return data;\n};\nonMounted(async () => {\n  const { latitude, longitude } = props.coords;\n  const weatherResponse = await fetchWeather({latitude, longitude});\n  data.value = weatherResponse;\n});\n</script>\n```", "```js\n<template>  <div>\n    <article\n      v-if=\"data && data.current\">\n      {{ data.current }}\n    </article>\n    <div v-else>Loading...</div>\n  </div>\n</template>\n```", "```js\n    npm install -D tailwindcss postcss autoprefixer\n    ```", "```js\n    content property tells the plugin where Tailwind should be applied. The next step is exposing the utility classes of Tailwind to the application.\n    ```", "```js\n    @tailwind base;@tailwind components;@tailwind utilities;\n    ```", "```js\n    import { createApp } from 'vue'import './style.css'import App from './App.vue'createApp(App).mount('#app')\n    ```", "```js\nbg-gradient-to-b from-indigo-500 via-purple-500 to-pink-500 w-full h-screen flex items-center justify-center\n```", "```js\n<!DOCTYPE html><html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Vite + Vue + TS</title>\n  </head>\n  <body>\n    <div id=\"app\" class=\"bg-gradient-to-b from-indigo-500 via-purple-500 to-pink-500 w-full h-screen flex items-center justify-center\"></div>\n    <script type=\"module\" src=\"img/main.ts\"></script>\n  </body>\n</html>\n```", "```js\n<template>  <div>\n    <article\n      v-if=\"data && data.current\"\n      class=\"max-w-md w-96 rounded-lg shadow-lg p-4 flex bg-white text-black\"\n    >\n      <div class=\"basis-1/4 text-left\">\n        <img :src=\"img/data.current.condition.icon\" class=\"h-16 w-16\" />\n      </div>\n      <div class=\"basis-3/4 text-left\">\n        <h1 class=\"text-3xl font-bold\">\n          {{ data.current.condition.text }}\n          <span class=\"text-2xl block\">{{ data.current.temp_c }}&#8451;</span>\n        </h1>\n        <p>{{ data.location.name }} {{ data.location.region }}</p>\n        <p>Precipitation: {{ data.current.precip_mm }}mm</p>\n      </div>\n    </article>\n    <div v-else>Loading...</div>\n  </div>\n</template>\n```", "```js\nconst formatDate = (dateString: Date): string => {  const date = new Date(dateString);\n  return new Intl.DateTimeFormat(\"default\", {\n    dateStyle: \"long\",\n    timeStyle: \"short\",\n  }).format(date);\n};\n```", "```js\n<template>  <div>\n    <article\n      v-if=\"data && data.current\"\n      class=\"max-w-md w-96 rounded-lg shadow-lg p-4 flex bg-white text-black\"\n    >\n      <div class=\"basis-1/4 text-left\">\n        <img :src=\"img/data.current.condition.icon\" class=\"h-16 w-16\" />\n      </div>\n      <div class=\"basis-3/4 text-left\">\n        <h1 class=\"text-3xl font-bold\">\n          {{ data.current.condition.text }}\n          <span class=\"text-2xl block\">{{ data.current.temp_c }}&#8451;</span>\n        </h1>\n        <p>{{ data.location.name }} {{ data.location.region }}</p>\n        <p>Precipitation: {{ data.current.precip_mm }}mm</p>\n        <p>{{ formatDate(data.location.localtime) }}</p>\n      </div>\n    </article>\n    <div v-else>Loading...</div>\n  </div>\n</template>\n```", "```js\n<script lang=\"ts\" setup>import { computed } from \"vue\";\ninterface Props {\n  degrees: number;\n}\nconst props = defineProps<Props>();\nconst windStyle = computed(() => ({\n  transform: \"rotate(\" + props.degrees + \"deg)\",\n}));\n</script>\n<template>\n  <span\n    ><span aria-hidden=\"true\" class=\"inline-block\" :style=\"windStyle\">⬇</span\n    ><span class=\"sr-only\">Wind direction: {{ degrees }} degrees</span></span\n  >\n</template>\n```", "```js\n<script lang=\"ts\" setup>import { ref, onMounted } from \"vue\";\nimport type { Ref } from 'vue'\nimport WindDirection from \"./WindDirection.vue\";\n// abbreviated…\n</script>\n<template>\n  <div>\n    <article\n      v-if=\"data && data.current\"\n      class=\"max-w-md w-96 rounded-lg shadow-lg p-4 flex bg-white text-black\"\n    >\n      <!-- abbreviated -->\n      </div>\n      <div class=\"basis-3/4 text-left\">\n        <h1 class=\"text-3xl font-bold\">\n          <!-- abbreviated -->\n        </h1>\n        <p>{{ data.location.name }} {{ data.location.region }}</p>\n        <p>Precipitation: {{ data.current.precip_mm }}mm</p>\n        <p>{{ formatDate(data.location.localtime) }}</p>\n        <p>\n          Wind: {{ data.current.wind_kph }} kph\n          <wind-direction :degrees=\"data.current.wind_degree\" />\n        </p>\n      </div>\n    </article>\n    <div v-else>Loading...</div>\n  </div>\n</template>\n```", "```js\n<script setup lang=\"ts\">import GetLocation from \"./components/GetLocation.vue\";\n</script>\n<template>\n  <GetLocation />\n</template>\n```", "```js\nimport { describe, it, expect } from 'vitest'import { shallowMount } from \"@vue/test-utils\";\nimport GetLocation from \"./components/GetLocation.vue\";\nimport App from \"./App.vue\";\ndescribe(\"App\", ():void  => {\n  it(\"renders the GetLocation component\", ():void => {\n    const wrapper = shallowMount<App>(App);\n    expect(wrapper.findComponent(GetLocation).exists()).toBe(true);\n  });\n});\n```", "```js\nnpm run test:unit\n```", "```js\nexport default defineConfig({  plugins: [vue()],\n  test: {\n    globals: true,\n    environment: \"jsdom\",\n  }\n})\n```", "```js\nnpm i --save-dev @types/jest\n```", "```js\n{  \"extends\": \"./tsconfig.app.json\",\n  \"exclude\": [],\n  \"compilerOptions\": {\n    \"composite\": true,\n    \"lib\": [],\n    \"types\": [\"node\", \"jsdom\", \"jest\"]\n  }\n}\n```", "```js\nimport { shallowMount } from \"@vue/test-utils\";import WindDirection from \"./WindDirection.vue\";\ndescribe(\"WindDirection\", () => {\n  it(\"renders without crashing\", (): void => {\n    const wrapper = shallowMount(WindDirection, {\n      props: {\n        degrees: 90,\n      },\n    });\n    expect(wrapper).toBeTruthy();\n  });\n});\n```", "```js\n<span aria-hidden=\"true\" class=\"inline-block\" data-testid=\"direction\" :style=\"windStyle\">⬇</span>\n```", "```js\nimport { shallowMount } from \"@vue/test-utils\";import WindDirection from \"./WindDirection.vue\";\ndescribe(\"WindDirection\", () => {\n  it(\"renders without crashing\", (): void => {\n    const wrapper = shallowMount(WindDirection, {\n      props: {\n        degrees: 90,\n      },\n    });\n    expect(wrapper).toBeTruthy();\n  });\n  it(\"renders the indicator with the correct wind direction\", (): void => {\n    const wrapper = shallowMount(WindDirection, {\n      props: {\n        degrees: 90,\n      },\n    });\n    const direction = wrapper.find(\"[data-testid=direction]\");\n    expect(direction.attributes(\"style\")).toContain(\"rotate(90deg)\");\n    expect(direction.html()).toContain(\"⬇\");\n  });\n});\n```", "```js\n<span class=\"sr-only\" data-testid=\"direction-sr\">Wind direction: {{ degrees }} degrees</span>\n```", "```js\nimport { shallowMount } from \"@vue/test-utils\";import WindDirection from \"./WindDirection.vue\";\ndescribe(\"WindDirection\", () => {\n  it(\"renders without crashing\", (): void => {\n    const wrapper = shallowMount(WindDirection, {\n      props: {\n        degrees: 90,\n      },\n    });\n    expect(wrapper).toBeTruthy();\n  });\n  it(\"renders with the correct wind direction\", (): void => {\n    const wrapper = shallowMount(WindDirection, {\n      props: {\n        degrees: 90,\n      },\n    });\n    const direction = wrapper.find(\"[data-testid=direction]\");\n    expect(direction.attributes(\"style\")).toContain(\"rotate(90deg)\");\n    expect(direction.html()).toContain(\"⬇\");\n  });\n  it(\"renders the correct wind direction for screen readers\", (): void => {\n    const wrapper = shallowMount(WindDirection, {\n      props: {\n        degrees: 270,\n      },\n    });\n    const srOnly = wrapper.find(\"[data-testid=direction-sr]\");\n    expect(srOnly.classes()).toContain('sr-only')\n    expect(srOnly.html()).toContain(\"Wind direction: 270 degrees\");\n  });\n});\n```", "```js\nimport { shallowMount } from \"@vue/test-utils\";import GetLocation from \"./GetLocation.vue\";\ndescribe(\"GetLocation\", () => {\n  it(\"should render the component without crashing\", (): void => {\n    const wrapper = shallowMount(GetLocation);\n    expect(wrapper).toBeTruthy();\n  });\n});\n```", "```js\nimport { shallowMount } from \"@vue/test-utils\";import GetLocation from \"./GetLocation.vue\";\ndescribe(\"GetLocation\", () => {\n  it(\"should render the component without crashing\", async (): Promise<void> => {\n    const wrapper = await shallowMount(GetLocation);\n    expect(wrapper).toBeTruthy();\n  });\n});\n```", "```js\nit(\"should render the component without crashing\", async (): Promise<void> => {  global.navigator.geolocation = {\n    getCurrentPosition: () => {},\n  };\n  const wrapper = await shallowMount(GetLocation);\n  expect(wrapper).toBeTruthy();\n});\n```", "```js\nimport { vi } from 'vitest'\n```", "```js\nit(\"displays when geolocation resolved successfully\", async (): Promise<void> => {  const mockGeoLocation = vi.fn((successCallback: Function) => {\n    const position = {\n      coords: {\n        latitude: 51.5074,\n        longitude: -0.1278,\n      },\n    };\n    successCallback(position);\n  });\n  global.navigator.geolocation = {\n    getCurrentPosition: mockGeoLocation,\n  };\n  const wrapper = await shallowMount<GetLocation>(GetLocation);\n  expect(wrapper.vm.coords).toEqual({\n    latitude: 51.5074,\n    longitude: -0.1278,\n  });\n});\n```", "```js\nit(\"displays a message when user denied access\", async (): Promise<void> => {  const mockGeoLocation = vi.fn((successCallback: Function, errorCallback: Function) => {\n    const error = new Error(\"User denied geolocation access\");\n    errorCallback(error);\n  });\n  global.navigator.geolocation = {\n    getCurrentPosition: mockGeoLocation,\n  };\n  const wrapper = await shallowMount<GetLocation>(GetLocation);\n  expect(wrapper.vm.geolocationBlockedByUser).toEqual(true);\n  expect(wrapper.html()).toContain(\"User denied access\");\n});\n```", "```js\nimport { shallowMount } from '@vue/test-utils'import WeatherReport from './WeatherReport.vue'\ndescribe('WeatherReport', () => {\n  it(\"should render the component without crashing\", (): void => {\n    global.fetch = vi.fn() as any\n    const wrapper = shallowMount<WeatherReport>(WeatherReport, {\n        props: {\n            coords: {\n                latitude: 0,\n                longitude: 0\n            }\n        }\n    });\n    expect(wrapper).toBeTruthy();\n  });\n});\n```", "```js\nit('displays loading message when data is undefined', (): void => {  global.fetch = vi.fn(() => Promise.resolve({\n    json: () => Promise.resolve()\n  })) as any\n  const wrapper = shallowMount(WeatherReport, {\n    props: {\n      coords: {\n        latitude: 0,\n        longitude: 0\n      }\n    }\n  });\n  expect(wrapper.text()).toContain('Loading...')\n});\n```", "```js\nit('displays weather data when data is defined', async () => {  const mockData = {\n    // ...abbreviated\n  }\n   global.fetch = vi.fn(() => Promise.resolve({\n    json: () => Promise.resolve(mockData)\n  })) as any\n  const wrapper = shallowMount(WeatherReport, {\n    props: {\n      coords: {\n        latitude: 0,\n        longitude: 0\n      }\n    }\n  })\n  expect(wrapper.text()).toContain(mockData.current.condition.text)\n  expect(wrapper.text()).toContain(mockData.current.temp_c)\n  expect(wrapper.text()).toContain(mockData.location.name)\n  expect(wrapper.text()).toContain(mockData.location.region)\n  expect(wrapper.text()).toContain(mockData.current.wind_kph)\n  expect(wrapper.text()).toContain(mockData.current.wind_degree)\n});\n```", "```js\nimport { mount, shallowMount, flushPromises } from '@vue/test-utils'\n```", "```js\nit('displays weather data when data is defined', async () => {  const mockData = {\n// abbreviated\n  }\n  global.fetch = vi.fn(() => Promise.resolve({\n    json: () => Promise.resolve(mockData)\n  })) as any\n  const wrapper = mount(WeatherReport, {\n    props: {\n      coords: {\n        latitude: 0,\n        longitude: 0\n      }\n    }\n  })\n  await flushPromises();\n  expect(wrapper.text()).toContain(mockData.current.condition.text)\n  expect(wrapper.text()).toContain(mockData.current.temp_c)\n  expect(wrapper.text()).toContain(mockData.location.name)\n  expect(wrapper.text()).toContain(mockData.location.region)\n  expect(wrapper.text()).toContain(mockData.current.wind_kph)\n  expect(wrapper.text()).toContain(mockData.current.wind_degree)\n});\n```", "```js\n<p mockData object because we are only interested in one property (and not crashing the component):\n\n```", "```js\n\nNow this will only succeed once because the new `Date()` function will constantly be refreshed with the date and time of executing the test! Again, we have an external factor that we need to mock in order to isolate our test.\nVitest offers tooling to manipulate dates, times, and even the passing of timers ([https://vitest.dev/api/vi.html#vi-setsystemtime](https://vitest.dev/api/vi.html#vi-setsystemtime)). We can modify our test so that the test always assumes the exact same date and time. This way, we can assert the outcome based on a fixed value.\nThe updated version will look like this:\n\n```", "```js\n\nThis makes it safe to assert the date based on a static value. I tend to pick my date and time values in such a way that months, days, hours, and minutes are easily identifiable regardless of the notation.\nSummary\nAt this point, we’ve added a bit more complexity to our app, any external resource calls for additional error handling, and we’ve learned how to deal with asynchronous data using a loading state. We’ve been able to quickly style our app using the utility style CSS framework Tailwind. With the unit test, we’ve made sure that we can assert that our application’s core features will continue to work as expected or alarm us if the output changes in any way.\nIn the next chapter, we’ll focus on connecting more extensively with a third-party API, by combining multiple endpoints from an API into a single app.\n\n```"]