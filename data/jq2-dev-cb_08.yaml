- en: Chapter 8. Understanding Plugin Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。理解插件开发
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating a plugin template
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个插件模板
- en: Creating a tooltip plugin
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个工具提示插件
- en: Building a content and image slider plugin
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建内容和图像滑块插件
- en: Creating an RSS feed reader plugin
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个RSS订阅阅读器插件
- en: Coding an image cropper plugin from scratch
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从头开始编写一个图像裁剪插件
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: jQuery plugins allow the developer to write portable code that can be reused
    within any jQuery project quickly. As part of this book, we have created a lot
    of functionality that you may want to use in multiple projects. By creating a
    jQuery plugin with the required functionality, you can abstract the complexity
    of this functionality and make it simple to include wherever you need it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery插件允许开发人员编写可在任何jQuery项目中快速重用的可移植代码。作为本书的一部分，我们已经创建了许多功能，您可能希望在多个项目中使用。通过创建具有所需功能的jQuery插件，您可以抽象出这些功能的复杂性，并使其简单地包含在您需要的任何地方。
- en: Before you start this chapter, create an easily accessible directory called
    `chapter8`. Within this folder, add the latest version of the jQuery library,
    which will be used throughout this chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本章之前，请创建一个名为`chapter8`的易于访问的目录。在此文件夹中，添加最新版本的jQuery库，该库将在本章中使用。
- en: Creating a plugin template
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个插件模板
- en: Creating jQuery plugins has become very popular over the years, and there are
    many articles and discussions online about plugin creation best practices. Many
    of these articles discuss in depth how to create a plugin template that can be
    used as the starting point for any jQuery plugin. This recipe will show you how
    to create your own jQuery plugin template that will be used throughout this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，创建jQuery插件已经变得非常流行，有许多关于插件创建最佳实践的文章和在线讨论。这些文章中的许多都深入讨论了如何创建一个插件模板，该模板可用作任何jQuery插件的起点。本配方将向您展示如何创建自己的jQuery插件模板，该模板将在本章中使用。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Inside the `chapter8` folder that was created earlier, create a JavaScript file
    called `jquery.plugin-template.js`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面创建的`chapter8`文件夹内，创建一个名为`jquery.plugin-template.js`的JavaScript文件。
- en: How to do it…
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To create a basic plugin template that will form the basis of all the plugins
    used within this chapter, add the following code to `jquery.plugin-template.js`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个基本的插件模板，该模板将成为本章中使用的所有插件的基础，请将以下代码添加到`jquery.plugin-template.js`中：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Read through the plugin documentation on the jQuery website ([http://learn.jquery.com/plugins/basic-plugin-creation/](http://learn.jquery.com/plugins/basic-plugin-creation/))
    to see a set of guidelines and best practices to adhere to.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在jQuery网站上阅读插件文档([http://learn.jquery.com/plugins/basic-plugin-creation/](http://learn.jquery.com/plugins/basic-plugin-creation/))
    ，以查看一组指南和最佳实践。
- en: The plugin created in this recipe uses simple concepts and best practices to
    create a lightweight plugin template. There is a popular article ([http://coding.smashingmagazine.com/2011/10/11/essential-jquery-plugin-patterns/](http://coding.smashingmagazine.com/2011/10/11/essential-jquery-plugin-patterns/))
    by Addy Osmani that provides great insight into plugin authoring while adhering
    to these recommended best practices.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中创建的插件使用简单的概念和最佳实践来创建一个轻量级的插件模板。 Addy Osmani撰写了一篇很受欢迎的文章([http://coding.smashingmagazine.com/2011/10/11/essential-jquery-plugin-patterns/](http://coding.smashingmagazine.com/2011/10/11/essential-jquery-plugin-patterns/))
    ，其中提供了关于插件编写的深入见解，同时遵循这些推荐的最佳实践。
- en: Looking at our plugin template, the first point to note is the semicolon at
    the start of the document. This is included to ensure that any previously included
    plugins or scripts have been closed properly.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 看看我们的插件模板，首先要注意的是文档开头的分号。这是为了确保任何之前包含的插件或脚本都已正确关闭。
- en: To conform to the jQuery authoring recommendations, the entire plugin is wrapped
    inside an **Immediately-Invoked Function Expression** (**IIFE**) to provide scope
    to the plugin. jQuery is provided to the IIFE as the local variable `$` to allow
    developers to be able to reference the jQuery library in the usual manner without
    conflicts.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了符合jQuery的作者建议，整个插件被包裹在一个**立即调用的函数表达式**（**IIFE**）中，以为插件提供范围。jQuery作为本地变量`$`提供给IIFE，以允许开发人员以通常的方式引用jQuery库而不会发生冲突。
- en: 'Within the plugin constructor, a `$scope` variable is declared so that it is
    clear what represents the plugin''s scope. The element that the plugin is being
    initialized from is then assigned to the plugin''s scope along with any provided
    plugin options. The jQuery `extend()` function is used to merge the `defaults`
    object with the `options` object, overwriting any defaults that may have been
    provided within `options`. Finally, the `init()` function is added to the plugin''s
    scope, which is where you will place the plugin''s initialization code, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在插件构造函数中，声明了一个`$scope`变量，以便清楚地表示插件的范围。然后将插件正在初始化的元素分配给插件的范围，以及任何提供的插件选项。使用jQuery的`extend()`函数将`defaults`对象与`options`对象合并，覆盖可能在`options`中提供的任何默认值。最后，将`init()`函数添加到插件的范围，这是您将放置插件初始化代码的地方，如下所示：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code makes the plugin available just as any other jQuery object
    method using the specified plugin name `($('.element').pluginName();`). Using
    `this.each()`, it will create a new plugin instance for each of the elements the
    plugin is initiated on and will call the plugin's `init()` function.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码使得插件可用，就像任何其他使用指定插件名称（`($('.element').pluginName();`）的jQuery对象方法一样。使用`this.each()`，它将为插件初始化的每个元素创建一个新的插件实例，并调用插件的`init()`函数。
- en: Creating a tooltip plugin
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个提示框插件
- en: Tooltips are a popular way to show additional information to the user about
    the UI they are using. This recipe will show you how to create your own basic
    tooltip plugin that you can easily use in all of your projects.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 提示框是向用户展示关于他们正在使用的UI的其他信息的一种流行方式。本步骤将向您展示如何创建自己的基本提示框插件，您可以在所有项目中轻松使用。
- en: Getting ready
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the `jquery.plugin-template.js` file and create `jquery.tooltip.js`, which
    will become the plugin file for this recipe. Create `recipe-2.html` and `recipe-2.js`
    in the same directory as the plugin file and the jQuery library.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 复制`jquery.plugin-template.js`文件，并创建`jquery.tooltip.js`，它将成为此步骤的插件文件。在与插件文件和jQuery库相同的目录中创建`recipe-2.html`和`recipe-2.js`。
- en: How to do it…
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To create a simple tooltip plugin and sample web page, perform the following
    steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个简单的提示框插件和示例网页，请执行以下步骤：
- en: 'Add the following HTML to `recipe-2.html` to create a very simple web page
    with elements that can have a tooltip:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`recipe-2.html`中添加以下HTML代码，创建一个非常简单的网页，网页中的元素可以有一个提示框。
- en: '[PRE2]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'At the top of `jquery.tooltip.js`, update the `name` variable and set the plugin
    defaults to be as follows:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`jquery.tooltip.js`的顶部，更新`name`变量，并将插件默认设置更改如下：
- en: '[PRE3]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Update the `$scope.init()` function with the following code:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新`$scope.init()`函数：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the following jQuery code to `recipe-2.js` to initialize the tooltip plugin
    for all the HTML elements with the `hasTooltip` class:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下jQuery代码添加到`recipe-2.js`中，为所有具有`hasTooltip`类的HTML元素初始化提示框插件：
- en: '[PRE5]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Open `recipe-2.html` in a web browser and hover over one of the elements on
    the screen to see a tooltip appear.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Web浏览器中打开`recipe-2.html`，将鼠标悬停在屏幕上的一个元素上，以查看提示框出现。
- en: How it works…
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The HTML page created as part of this recipe is used only to provide a few elements
    to which a tooltip can be attached.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 作为此步骤的一部分创建的HTML页面仅用于提供可以附加提示框的一些元素。
- en: The first change to the plugin template is to set the default settings. In this
    case, we have set the tooltip height and the fade-in animation duration. You can
    introduce additional features of your own by adding these features to the default
    settings here.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对插件模板的第一个更改是设置默认设置。在这种情况下，我们设置了提示框的高度和淡入动画持续时间。您可以通过将这些功能添加到此处的默认设置中，引入自己的其他功能。
- en: When the plugin is initialized for each of the selected elements, the `init()`
    function is called, which contains most of the logic for this plugin.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当为每个选定的元素初始化插件时，将调用`init()`函数，该函数包含此插件的大部分逻辑。
- en: The plugin template makes the "jQueryfied" version of the element available
    through `$scope.$element`. We can use the `prop()` and `data()` functions to check
    for a title specified on the element and store this in `$scope._text`, which will
    be used as the tooltip text.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 插件模板使得元素的“jQueryfied”版本通过`$scope.$element`可用。我们可以使用`prop()`和`data()`函数来检查元素上是否指定了标题，并将其存储在`$scope._text`中，这将被用作提示框的文本。
- en: This variable is then checked to ensure there is some text available to display.
    If there is no text, we do not show a tooltip.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将检查此变量，以确保有可用的文本来显示。如果没有文本，我们将不显示提示框。
- en: 'If `$scope._text` is defined, we create the tooltip HTML using the following
    code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `$scope._text` 被定义，我们使用以下代码创建工具提示 HTML：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `var` statement is important to ensure that a new tooltip element is created
    for each of the selected elements. By wrapping the HTML code within `$()`, it
    is possible for us to use jQuery functions on this element before we insert it
    into the DOM. The HTML code for the tooltip adds the title text and creates an
    element that will display the left arrow.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`var` 语句很重要，以确保为每个选定的元素创建一个新的工具提示元素。通过将 HTML 代码包装在 `$()` 内，我们可以在将其插入到 DOM 中之前在此元素上使用
    jQuery 函数。工具提示的 HTML 代码添加了标题文本并创建了一个将显示左箭头的元素。'
- en: Using the jQuery `css()` function, a range of CSS styles are applied to the
    newly created HTML code to position and style the tooltip. The left and top positions
    of the tooltip are calculated using the offset, width, and height of the selected
    element on which the tooltip will be displayed. Note that the `outerWidth()` and
    `outerHeight()` functions are used as opposed to the `width()`/`height()` functions
    to include the padding and borders and the returned dimensions.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 jQuery 的 `css()` 函数，一系列 CSS 样式被应用于新创建的 HTML 代码，以定位和样式化工具提示。工具提示的左侧和顶部位置是使用将显示工具提示的选定元素的偏移量、宽度和高度来计算的。请注意，使用
    `outerWidth()` 和 `outerHeight()` 函数而不是 `width()`/`height()` 函数，以包含填充和边框并返回尺寸。
- en: The jQuery `find()` function is also used in conjunction with the `css()` function
    to add the styles to the left arrow.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 的 `find()` 函数也与 `css()` 函数一起使用，用于向左箭头添加样式。
- en: Finally, two event listeners are attached to the selected element so that the
    tooltip is shown when the user's mouse moves over the element and is removed when
    the user's mouse moves out. The `fadeIn()` function takes the `duration` parameter
    from the `defaults` object, which can be overridden when the tooltip plugin is
    initialized.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，两个事件侦听器被附加到选定的元素上，以便当用户的鼠标移动到元素上时显示工具提示，并在用户的鼠标移出时移除工具提示。`fadeIn()` 函数从 `defaults`
    对象中取得 `duration` 参数，当初始化工具提示插件时可以被覆盖。
- en: 'To initialize the tooltip plugin for all elements that have the `hasTooltip`
    class, the following jQuery code is added to `recipe-2.js`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要为所有具有 `hasTooltip` 类的元素初始化工具提示插件，将以下 jQuery 代码添加到 `recipe-2.js`：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is where you could overwrite the defaults, for example, using the following
    code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以覆盖默认设置，例如，使用以下代码：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There's more…
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这还不是全部...
- en: This recipe provides a very basic tooltip plugin. You could expand on this recipe
    to add many additional features, such as positioning, and allow the plugin user
    to specify which event the tooltip opens on.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方提供了一个非常基本的工具提示插件。你可以在此基础上扩展很多额外的功能，比如定位，并允许插件用户指定工具提示在哪个事件上打开。
- en: Building a content and image slider plugin
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建内容和图片滑块插件
- en: In [Chapter 7](ch07.html "Chapter 7. User Interface Animation"), *User Interface
    Animation*, you were shown how to create a simple content slider using jQuery.
    This recipe will show you how to turn that recipe into a reusable jQuery plugin
    with the addition of being able to add images to the slider. You do not need to
    read the previous recipe to complete this one, but it is recommended to do so
    for you to get a better understanding of how the code works.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 7 章](ch07.html "第 7 章. 用户界面动画")中，*用户界面动画*，你看到了如何使用 jQuery 创建一个简单的内容滑块。本配方将向你展示如何将该配方转换为一个可重用的
    jQuery 插件，还可以向滑块添加图片。你不需要阅读前一个配方来完成这个，但建议你这样做，以便更好地理解代码的工作原理。
- en: Getting ready
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the `jquery.plugin-template.js` file and rename it to `jquery.slider.js`,
    which will become the plugin for this recipe. You will also need to find an image
    600 pixels wide and 250 pixels high that will be used in the slider. Finally,
    create `recipe-3.html`, `slider.css`, and `recipe-3.js` in the same directory
    as the `jquery.slider.js` file and the jQuery library.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 复制 `jquery.plugin-template.js` 文件并将其重命名为 `jquery.slider.js`，它将成为此配方的插件。你还需要找到一张宽度为
    600 像素、高度为 250 像素的图片，将其用于滑块。最后，在 `jquery.slider.js` 文件和 jQuery 库相同目录下创建 `recipe-3.html`、`slider.css`
    和 `recipe-3.js`。
- en: How to do it…
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps to create your image and a content slider plugin:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来创建您的图片和内容滑块插件：
- en: 'Add the following HTML to `recipe-3.html`:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 添加到 `recipe-3.html`：
- en: '[PRE9]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'At the top of `jquery.slider.js`, update the plugin name to `slider` and set
    the defaults as follows:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `jquery.slider.js` 的顶部，将插件名称更新为 `slider`，并将默认设置如下：
- en: '[PRE10]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Update the plugin''s `$scope.init()` function to be the following:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新插件的 `$scope.init()` 函数如下所示：
- en: '[PRE11]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the following jQuery code to `recipe-3.js` to initialize the slider plugin:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 jQuery 代码添加到 `recipe-3.js` 中以初始化滑块插件：
- en: '[PRE12]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the following CSS code to `slider.css`:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 CSS 代码添加到 `slider.css` 中：
- en: '[PRE13]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Open `recipe-3.html` within a web browser and you will be presented with a dynamically
    created image and content slider.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Web 浏览器中打开 `recipe-3.html`，您将看到一个动态创建的图像和内容滑块。
- en: How it works…
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The HTML page sets up the required HTML for the slider plugin. There is a container
    division with children that the slider plugin will use as slides. The children
    can be either division elements or images.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 页面设置了滑块插件所需的 HTML。有一个包含子项的容器分区，滑块插件将使用这些子项作为幻灯片。子项可以是分区元素或图像。
- en: The jQuery code in `recipe-3.js` selects the `mySlider` division element and
    initializes the slider plugin.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`recipe-3.js` 中的 jQuery 代码选择 `mySlider` 分区元素并初始化滑块插件。'
- en: 'The plugin template we created earlier takes care of the jQuery plugin setup.
    The functionality for our slider plugin goes inside the `init()` function. At
    the start of this function, the `slider-frame` class is added to the selected
    element (`.mySlider`) so that it inherits some basics styles from the `slider.css`
    stylesheet. Using values from the `options` object, the width and height of the
    element are set using the jQuery `css()` function as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前创建的插件模板负责 jQuery 插件的设置。我们的滑块插件的功能放在 `init()` 函数中。在此函数的开头，将 `slider-frame`
    类添加到选定的元素（`.mySlider`）中，以便它从 `slider.css` 样式表中继承一些基本样式。使用来自 `options` 对象的值，使用
    jQuery `css()` 函数设置元素的宽度和高度，如下所示：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: After this, `$scope.$element.append('<ul class="slider-nav"></ul>');` is used
    to insert an empty unordered list into the slider, which is ready for the creation
    of the slide navigation.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，使用 `$scope.$element.append('<ul class="slider-nav"></ul>');` 将空的无序列表插入到滑块中，该列表已准备好创建幻灯片导航。
- en: 'The next section of the code sets up the slider for the animation. As explained
    in the *Creating an animated content slider* recipe in [Chapter 7](ch07.html "Chapter 7. User
    Interface Animation"), *User Interface Animation*, a slider needs the width of
    its container to be the combined width of its slides so that the slides can float
    next to each other and be moved into view using an animation, as shown in the
    following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的下一部分设置了动画的滑块。如在 [第 7 章](ch07.html "第 7 章。用户界面动画") *用户界面动画* 的 *创建动画内容滑块* 配方中所解释的，滑块需要其容器的宽度为其幻灯片的组合宽度，以便幻灯片可以浮动在一起，并使用动画移动到视图中，如下面的代码所示：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To achieve this, the slider''s children (the slides) are selected and then
    wrapped inside a division element using the jQuery `wrapAll()` function. The width
    of this element is set to be the width of an individual slide times the number
    of slides in the slider. To float each of the slides, the `css()` function is
    used to set the `float` property as shown in the following code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，选择滑块的子项（幻灯片），然后使用 jQuery `wrapAll()` 函数将其包装在一个分区元素中。该元素的宽度设置为幻灯片的个数乘以单个幻灯片的宽度。为了浮动每个幻灯片，使用
    `css()` 函数设置 `float` 属性，如下面的代码所示：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'With each slide configured, the next step in the code is to add a list item
    for each slide to the `slider-nav` unordered list element to form the navigation:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 配置了每个幻灯片后，代码的下一步是为 `slider-nav` 无序列表元素添加每个幻灯片的列表项，以形成导航：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The final stage of the plugin is to listen for clicks on the anchor elements
    within the navigation list, which is coded as follows, to allow the user to change
    the visible slide using this navigation:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的最后阶段是监听导航列表中锚元素的点击，代码如下，以允许用户使用此导航更改可见幻灯片：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When the user clicks on a link, the `animate()` function is used to change the
    `slider-content` division element's left position based on the selected link.
    Read more about this in the *Creating an animated content slider* recipe in [Chapter
    7](ch07.html "Chapter 7. User Interface Animation"), *User Interface Animation*.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击链接时，使用 `animate()` 函数根据所选链接更改 `slider-content` 分区元素的左侧位置。在 [第 7 章](ch07.html
    "第 7 章。用户界面动画") *用户界面动画* 的 *创建动画内容滑块* 配方中可以阅读更多相关信息。
- en: There's more…
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: To add the popular auto-slider effect to this plugin, take a look back to the
    *Creating an animated content slider* recipe in [Chapter 7](ch07.html "Chapter 7. User
    Interface Animation"), *User Interface Animation*.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要将流行的自动滑块效果添加到此插件，回顾一下 [第 7 章](ch07.html "第 7 章. 用户界面动画") 中的 *创建一个带动画内容滑块* 配方，*用户界面动画*。
- en: See also
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating an animated content slider* recipe in [Chapter 7](ch07.html "Chapter 7. User
    Interface Animation"), *User Interface Animation*
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个带动画内容滑块的* 配方在 [第 7 章](ch07.html "第 7 章. 用户界面动画")，*用户界面动画*'
- en: Creating an RSS feed reader plugin
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 RSS 阅读器插件
- en: RSS feed readers are very popular additions to many websites. This recipe will
    show you how to create a configurable feed reader plugin utilizing the Google
    Feed API, allowing you to easily re-use the plugin on any website.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: RSS 阅读器是许多网站非常受欢迎的附加组件。此配方将向您展示如何使用 Google Feed API 创建可配置的 feed 阅读器插件，从而使您可以轻松地在任何网站上重用该插件。
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Once again, copy the `jquery.plugin-template.js` file and rename it to `jquery.rssreader.js`
    to provide the base for this recipe's plugin. Inside the same directory, create
    `recipe-4.js`, `rssreader.css`, and `recipe-4.html`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 再次复制 `jquery.plugin-template.js` 文件并将其重命名为 `jquery.rssreader.js`，以提供此配方插件的基础。在同一目录中，创建
    `recipe-4.js`、`rssreader.css` 和 `recipe-4.html`。
- en: How to do it…
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'To create the RSS reader plugin, perform the following steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 RSS 阅读器插件，请执行以下步骤：
- en: 'Add the following HTML code to `recipe-4.html` to create a basic web page and
    to make the Google Feed API available for use within the page:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到 `recipe-4.html` 中，以创建一个基本的网页，并使 Google Feed API 可供页面内使用：
- en: '[PRE19]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the following CSS code to `rssreader.css` to create the styles for the
    RSS reader:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 CSS 代码添加到 `rssreader.css` 中，以创建 RSS 阅读器的样式：
- en: '[PRE20]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'At the top of `jquery.rssreader.js`, update the `defaults` object and the `name`
    variable to be as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `jquery.rssreader.js` 的顶部，更新 `defaults` 对象和 `name` 变量如下所示：
- en: '[PRE21]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Update the plugin `init()` function to include the following code:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新插件 `init()` 函数以包含以下代码：
- en: '[PRE22]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the following few lines of jQuery to `recipe-4.js` to initialize the plugin
    for the `myRSSContent` element:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下几行 jQuery 添加到 `recipe-4.js` 中，以为 `myRSSContent` 元素初始化插件：
- en: '[PRE23]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Open `recipe-4.html` in a web browser and you will be presented with the following
    RSS reader:![How to do it…](img/0896OS_08_01.jpg)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Web 浏览器中打开 `recipe-4.html`，您将看到以下 RSS 阅读器：![如何实现…](img/0896OS_08_01.jpg)
- en: How it works…
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The HTML code that creates the web page for this recipe has a single `division`
    element that is used to initialize the RSS reader plugin and acts as the container
    for the RSS content. Additionally, the Google Feed API is used and included in
    this page above the `jquery.rssreader.js` file. Using the Google Feed API means
    that we can easily create a plugin without requiring any server-side work. This
    also makes the plugin easily portable to any website. Read more about this API
    at [https://developers.google.com/feed/v1/devguide#hiworld](https://developers.google.com/feed/v1/devguide#hiworld).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 创建此配方的网页的 HTML 代码有一个用于初始化 RSS 阅读器插件的单个 `division` 元素，并作为 RSS 内容的容器。此外，Google
    Feed API 也被用于此页面，位于 `jquery.rssreader.js` 文件之前。使用 Google Feed API 意味着我们可以轻松创建一个插件，而不需要任何服务器端工作。这也使得插件很容易移植到任何网站上。在
    [https://developers.google.com/feed/v1/devguide#hiworld](https://developers.google.com/feed/v1/devguide#hiworld)
    上阅读更多关于此 API 的信息。
- en: The CSS code styles the RSS reader elements that are created within the plugin
    itself. No further explanation of this code is needed.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 代码为插件内部创建的 RSS 阅读器元素设置样式。不需要进一步解释此代码。
- en: As with the other plugins in this chapter, the template takes care of the plugin
    setup and our plugin functionality goes inside the `init()` function, which is
    executed once the plugin has been initialized.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章中的其他插件一样，模板负责插件设置，我们的插件功能位于 `init()` 函数内，该函数在插件初始化后执行一次。
- en: The first part of this function adds the `rssreader-frame` class to the selected
    element, which the CSS code uses to apply a variety of styles. Then, looking at
    the `options` variable, a width is set on the selected element if one has been
    provided.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的第一部分将 `rssreader-frame` 类添加到所选元素中，CSS 代码使用该类应用各种样式。然后，查看 `options` 变量，如果已提供，则在所选元素上设置宽度。
- en: Using the Google Feed API, the feed request is configured using the `URL` and
    `amount` values of the `options` object as follows. This will tell the API where
    to collect the RSS content and how many items to return.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Google Feed API，使用`options`对象的`URL`和`amount`值配置了反馈请求，如下所示。这将告诉API在哪里收集RSS内容以及要返回多少个项目。
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'After this, the `load()` function is used to make the request with a callback
    function specified, as shown in the following code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，使用`load()`函数进行请求，并指定回调函数，如下所示：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If no error has occurred, a header, description, and unordered list elements
    are created and stored in local variables, as specified by the following code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有发生错误，则创建标题、描述和无序列表元素，并将它们存储在本地变量中，如以下代码所示：
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Using the `result.feed` object, it is possible to extract the feed title and
    description to be placed within these elements. These elements are created and
    wrapped inside the jQuery selected (`$()`) so that jQuery's functions will be
    available on these elements for later use.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`result.feed`对象，可以提取用于放置在这些元素中的反馈标题和描述。这些元素被创建并包裹在jQuery选择器（`$()`）内，以便jQuery的函数可以在稍后对这些元素进行操作。
- en: We then loop through each of the entries and create a list item for each. Within
    each list item, we add the feed content, date, title, and link. Using the JavaScript
    `Date()` function, a more readable date is created to insert into the DOM. To
    add each of the elements to the unordered list element that was previously created,
    `_feedList.append(_listElement);` is used.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们循环遍历每个条目，并为每个条目创建一个列表项。在每个列表项内，我们添加了反馈内容、日期、标题和链接。使用JavaScript的`Date()`函数，创建一个更易读的日期以插入到DOM中。要将每个元素添加到先前创建的无序列表元素中，使用了`_feedList.append(_listElement);`。
- en: 'The title, description, and the list, which is now fully populated with RSS
    content, can be inserted into the DOM using the following code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 标题、描述和现在已完全填充了RSS内容的列表可以使用以下代码插入到DOM中：
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, the following code is used to apply any specified height to the RSS
    feed reader and add a scrollbar if the content is too big to fit within the specified
    height:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用以下代码来为RSS订阅阅读器应用任何指定的高度，并在内容过大无法适应指定高度时添加滚动条：
- en: '[PRE28]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: See also
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a news ticker* recipe in [Chapter 6](ch06.html "Chapter 6. User
    Interface"), *User Interface*
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第6章](ch06.html "第6章。用户界面")中的*创建新闻滚动条*示例，*用户界面*'
- en: Coding an image cropper plugin from scratch
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从头开始编写图像裁剪插件
- en: When allowing users to upload their own images, whether it be for a profile
    picture or some other use, giving them the ability to trim the image down within
    the browser provides a huge benefit to the user. This is because most users would
    not know how to alter the image using a third-party application such as Photoshop.
    There are many image cropper plugins available on the Internet for free and many
    tutorials to help you use them, but there are very few examples that provide you
    with the entire solution. This recipe will show you how to create your own image
    cropper plugin from scratch, how to upload the image to a web server, and how
    to take data from the image cropper to resize and save the image to the user's
    specification.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当允许用户上传自己的图像时，无论是用于个人资料图片还是其他用途，让他们能够在浏览器中裁剪图像为用户提供了巨大的好处。这是因为大多数用户不会知道如何使用诸如Photoshop之类的第三方应用程序来更改图像。Internet上有许多免费的图像裁剪插件和许多教程可以帮助您使用它们，但几乎没有提供完整解决方案的示例。本篇将向您展示如何从零开始创建自己的图像裁剪插件，如何将图像上传到Web服务器，并如何从图像裁剪器获取数据以按照用户的规范调整并保存图像。
- en: Getting ready
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'This recipe is quite complex as it includes both client- and server-side code,
    so ensure you follow each step carefully. Before you begin this recipe, set up
    the following directory structure in the web root of your web server:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此示例包含客户端和服务器端代码，因此请确保您仔细遵循每个步骤。在开始此示例之前，请在Web服务器的Web根目录中设置以下目录结构：
- en: '![Getting ready](img/0896OS_08_02.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/0896OS_08_02.jpg)'
- en: 'Going by the preceding structure, you need to create the `includes` and `uploads`
    folders in your web root (**www** in the preceding figure). Within the `includes`
    folder, save the jQuery library and create the following four files:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述结构，您需要在您的Web根目录（前图中的**www**）下创建`includes`和`uploads`文件夹。在`includes`文件夹中，保存jQuery库并创建以下四个文件：
- en: '`imagecrop.css`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`imagecrop.css`'
- en: '`jquery.imagecrop.js` (copy the `jquery.plugin-template.js` file as before
    to create the basis of this plugin)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.imagecrop.js`（像以前一样复制`jquery.plugin-template.js`文件以创建此插件的基础）'
- en: '`recipe-5.css`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recipe-5.css`'
- en: '`recipe-5.js`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recipe-5.js`'
- en: Within the web root itself, you need to create the `index.html` and `upload.php`
    files.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Web 根目录中，您需要创建 `index.html` 和 `upload.php` 文件。
- en: Note
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This recipe will *not* work in IE9 or below as older browsers do not offer support
    for the `XMLHttpRequest`, `FormData`, and `FileReader` APIs.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将 *不会* 在 IE9 或更低版本中工作，因为较旧的浏览器不支持 `XMLHttpRequest`、`FormData` 和 `FileReader`
    API。
- en: How to do it…
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Carefully follow each of the following steps and then read the *How it works…*
    section to get a full understanding of the plugin and its associated code:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细按照以下每个步骤，然后阅读 *工作原理…* 部分，以充分理解插件及其相关代码：
- en: 'Add the following HTML code to `index.html` to create a web page with the image
    upload form:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到 `index.html` 中，以创建一个带有图像上传表单的 Web 页面：
- en: '[PRE29]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Put the following CSS code into `recipe-5.css` to style the HTML page and form
    you just created:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 CSS 代码放入 `recipe-5.css` 中，为您刚刚创建的 HTML 页面和表单添加样式：
- en: '[PRE30]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add the following jQuery code to `recipe-5.js`, which will allow the user to
    select and preview an image from their local filesystem and then initiate the
    image crop plugin:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 jQuery 代码添加到 `recipe-5.js` 中，该代码将允许用户从其本地文件系统中选择并预览图像，然后启动图像裁剪插件：
- en: '[PRE31]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In `jquery.imagecrop.js`, update the plugin name and defaults as shown in the
    following code snippet:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `jquery.imagecrop.js` 中，按照以下代码片段的示例，更新插件名称和默认值：
- en: '[PRE32]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the plugin constructor created by the plugin template file, add the following
    declarations directly after `$scope.options` is declared, as shown in the following
    code snippet:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在由插件模板文件创建的插件构造函数中，在声明 `$scope.options` 之后直接添加以下声明，如下面的代码片段所示：
- en: '[PRE33]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Update the plugin `$scope.init()` function to include the following code:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新插件 `$scope.init()` 函数，包括以下代码：
- en: '[PRE34]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Directly after the `$scope.init()` function, add the following additional functions:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `$scope.init()` 函数之后，添加以下额外的函数：
- en: '[PRE35]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Insert the following helper functions under the functions you have added:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您添加的函数下方插入以下辅助函数：
- en: '[PRE36]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add the following CSS code to `imagecrop.css` to add styles to the elements
    that are created by the image crop plugin:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 CSS 代码添加到 `imagecrop.css` 中，为图像裁剪插件创建的元素添加样式：
- en: '[PRE37]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Finally, add the following PHP code to `upload.php`, which will take data from
    the web form you have just created and then crop the image and save it into the
    `uploads` directory:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将以下 PHP 代码添加到 `upload.php` 中，该代码将从您刚刚创建的 Web 表单中获取数据，然后裁剪图像并将其保存到 `uploads`
    目录中：
- en: '[PRE38]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Navigate to the `index.html` file in your web browser and you will be presented
    with a simple web form with three steps. By selecting the **Choose File** button
    and selecting an image from your computer, you will see the image displayed inside
    the preview box. In the preview box, you will be able to click-and-drag a selection
    over the image. Once you have done this, clicking on **Upload** will upload the
    image to the web server (indicated by the progress bar) and the image will be
    cropped and saved inside the `uploads` folder you created earlier.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 Web 浏览器中导航到 `index.html` 文件，您将看到一个包含三个步骤的简单 Web 表单。通过选择 **选择文件** 按钮并从计算机中选择图像，您将看到图像显示在预览框内。在预览框中，您可以点击并拖动一个选择区域到图像上。完成后，点击
    **上传** 将图像上传到 Web 服务器（通过进度条指示），并且图像将被裁剪并保存到您之前创建的 `uploads` 文件夹中。
- en: How it works…
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: It is important to understand the different sections of this recipe. The first
    element of this recipe is the upload form itself, which provides the ability to
    view the user-selected image within the browser before upload. The second element
    of this recipe is the image crop plugin itself, which is what we will focus on
    the most. Finally, to provide the complete solution, there is the upload element
    of this recipe, which takes data that the image crop plugin has provided and posts
    it to a PHP script. This PHP script then takes this data to crop and saves the
    image to the user's specification.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 了解本示例的不同部分非常重要。本示例的第一个元素是上传表单本身，在上传之前，它提供了在浏览器中查看用户选择的图像的功能。本示例的第二个元素是图像裁剪插件本身，这是我们将重点关注的内容。最后，为了提供完整的解决方案，本示例的上传元素接收图像裁剪插件提供的数据，并将其发布到
    PHP 脚本。然后，该 PHP 脚本将获取这些数据进行裁剪，并将图像保存到用户指定的位置。
- en: Image selection and preview
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图像选择和预览
- en: The HTML code in `index.html` creates a basic interface with a file input element.
    When the user clicks on the **Choose File** button, a browse window will open,
    allowing them to select a file from their computer. Using JavaScript's `FileReader`
    class, it is possible for us to read this file and display it within the browser.
    Looking at `recipe-5.js`, you will see a `change` event handler with the code
    to do this.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.html` 中的 HTML 代码创建了一个带有文件输入元素的基本界面。当用户点击 **选择文件** 按钮时，将会打开浏览窗口，允许他们从计算机中选择文件。使用
    JavaScript 的 `FileReader` 类，我们可以读取此文件并在浏览器中显示它。查看 `recipe-5.js`，您将看到一个包含执行此操作的代码的
    `change` 事件处理程序。'
- en: At this point within the code, there is a basic validation check to ensure that
    the selected image is not bigger than 800 x 600 pixels. If it is, an alert is
    shown to the user and the image is not loaded.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中的这一点上，有一个基本的验证检查，以确保所选图片不大于 800 x 600 像素。如果是，则向用户显示警报，并且图片不会加载。
- en: 'When the image has finally loaded, the source property for the `#cropableImage`
    element is updated to be the selected image, displaying it on screen. Finally,
    the image crop plugin is initialized on the image element as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图片加载完成后，`#cropableImage` 元素的 `source` 属性被更新为所选图片，将其显示在屏幕上。最后，在图片元素上初始化了图片裁剪插件，如下所示：
- en: '[PRE39]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Image crop plugin
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图片裁剪插件
- en: 'The image crop plugin dynamically creates a range of elements that act as layers
    and containers to allow us to let the user make a selection. To make it easier
    to understand what each of the layers is trying to achieve, they have been illustrated
    in the following figure:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图片裁剪插件动态创建了一系列元素，充当图层和容器，允许我们让用户进行选择。为了更容易理解每个图层的作用，它们在下图中进行了说明：
- en: '![Image crop plugin](img/0896OS_08_03.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图片裁剪插件](img/0896OS_08_03.jpg)'
- en: The **Overlay** layer fades out most of the image with a white background and
    an opacity of 0.6\. The **Selection** layer is the layer that listens for mouse
    events indicating that the user is making a selection. The main reason for this
    is that if the mouse events were attached to the image itself, we would have difficulty
    with some browsers that allow you to drag the image away with a visual representation
    of the image, which would get in the way of our functionality. The **Selection
    Outline** layer is what is drawn by the plugin as the user is making a selection.
    Its background is the selected image, except the position is adjusted so it only
    shows the section of the selected image that has been selected, providing focus
    over the original image that has the overlay obscuring it.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**遮罩** 层用白色背景和 0.6 的不透明度淡化了大部分图片。**选择** 层是监听鼠标事件的层，指示用户正在进行选择。这样做的主要原因是，如果将鼠标事件附加到图片本身，我们将在某些允许您将图片拖动到一个带有图片的可视化表示的浏览器中遇到困难，这会妨碍我们的功能。**选择轮廓**
    层是插件在用户进行选择时绘制的内容。其背景是所选图片，除了位置被调整以仅显示已选择的图片部分，提供对遮罩遮挡的原始图片的聚焦。'
- en: 'When the plugin is initialized, there is a set of local variables and defaults
    declared that the plugin will use throughout its operation; these are shown in
    the following code snippet:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 插件初始化时，有一组局部变量和默认值声明，插件将在其运行过程中使用；这些显示在以下代码片段中：
- en: '[PRE40]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The variables prepended with `var` will store the different DOM elements that
    represent the layers. The `imageSelection` object stores the user's initial click
    coordinates and then the coordinates when the user finishes making a selection.
    We can then use these coordinates to calculate the width and position of the selection.
    The `top` and `left` parameters store the finalized coordinates of the selection
    once the width and height have been calculated.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以 `var` 开头的变量将存储代表图层的不同 DOM 元素。`imageSelection` 对象存储用户的初始点击坐标，然后是用户完成选择时的坐标。然后，我们可以使用这些坐标来计算选择的宽度和位置。`top`
    和 `left` 参数存储了选择的最终坐标，一旦宽度和高度已经计算出来。
- en: 'Inside the `init()` function of the plugin, there is an initial check to determine
    if the image has been initialized before. If so, the layer DOM elements have already
    been created and inserted, as shown in the following code snippet:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在插件的 `init()` 函数内部，有一个初始检查以确定图片是否已初始化。如果是，则图层 DOM 元素已经被创建并插入，如下所示：
- en: '[PRE41]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: If the DOM elements are available, the jQuery `find()` function is used to select
    the elements and store them within the associated variable. If not, they are created
    and stored. A scenario where the plugin may have already been initialized for
    the image is when the user decides to change the selected image. The image source
    changes, but DOM elements can stay in place and be reused with different dimensions.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 DOM 元素可用，则使用 jQuery 的`find()`函数选择元素并将它们存储在关联变量中。如果没有，则创建并存储。可能已为图像初始化插件的一种场景是用户决定更改所选图像。图像源发生变化，但
    DOM 元素可以保持原位并以不同的尺寸重用。
- en: 'When the layer elements are first created, a container division element with
    the `crop-frame` class is created with the same dimensions as the selected image,
    as shown in the following code snippet:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当图层元素首次创建时，会创建一个容器分隔元素，其类名为`crop-frame`，尺寸与所选图像相同，如下面的代码片段所示：
- en: '[PRE42]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'It is very important that the user selection matches the actual image pixel
    dimensions exactly; otherwise, cropping calculations will be incorrect. The selected
    image element is then wrapped within this frame using the jQuery `wrap()` function
    as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 用户选择必须精确匹配实际图像像素尺寸，否则裁剪计算将不正确。然后，选定的图像元素将使用 jQuery 的`wrap()`函数包装在此框架内，如下所示：
- en: '[PRE43]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The other created layers are inserted after the selected image element inside
    the `crop-frame` division, as shown in the previous code.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 其他创建的图层插入到所选图像元素之后，位于`crop-frame`分隔元素内，如上面的代码所示。
- en: 'The final part of the layer creation attaches various event handler functions
    that deal will different parts of the selection process:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图层创建的最后一部分附加了各种处理选择过程不同部分的事件处理程序函数：
- en: '[PRE44]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Each of the functions specified here are declared later on within the `plugin`
    class. At the end of the `init()` function, the `updateElementData()` function
    is called, which sets the initial selection dimensions on the selected image element
    (for example, `selection-x`) and sets the background image on the Selection Outline
    layer.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这里指定的每个函数稍后在`plugin`类中声明。在`init()`函数的末尾，调用`updateElementData()`函数，该函数设置所选图像元素上的初始选择尺寸（例如，`selection-x`）并在选择轮廓图层上设置背景图像。
- en: 'When the user first clicks on the Selection layer, the mouse position is stored
    as the start coordinates. Then, as the user drags the mouse to make a selection,
    the new mouse coordinates are stored as end coordinates and the `drawSelection()`
    function is called. The `drawSelection()` function uses the start and end coordinates
    to calculate the width and height of the selection and updates the Selection Outline
    layer''s CSS to show this, as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户首次单击选择图层时，鼠标位置将被存储为起始坐标。然后，当用户拖动鼠标进行选择时，新的鼠标坐标被存储为结束坐标，并调用`drawSelection()`函数。`drawSelection()`函数使用起始和结束坐标来计算选择的宽度和高度，并更新选择轮廓图层的
    CSS 以显示此内容，如下所示：
- en: '[PRE45]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: As part of this function, the background position of the Selection Outline layer
    is updated to show the actual selection and the `updateElementData()` function
    is called to apply the new selection data onto the selected image.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 作为此函数的一部分，选择轮廓图层的背景位置将被更新以显示实际选择，并调用`updateElementData()`函数以将新的选择数据应用于所选图像。
- en: When the user has finished the selection and releases the mouse button, the
    `onSelectionEnd()` function is called. This function determines whether the selection
    is smaller than the minimum allowed; if so, the selection is hidden. The mouse
    move event is unbound from the Selection layer to avoid any conflicts with later
    functionality, and the Selection Outline layer's `z-index` property is updated
    so that the Selection Outline layer moves above the Selection layer, allowing
    for the drag functionality. The drag functionality was covered in detail in the
    *Creating a basic drag-and-drop functionality* recipe in [Chapter 6](ch06.html
    "Chapter 6. User Interface"), *User Interface*. Refer to that recipe for a detailed
    explanation.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户完成选择并释放鼠标按钮时，将调用`onSelectionEnd()`函数。此函数确定选择是否小于允许的最小值；如果是，则隐藏选择。将鼠标移动事件从选择图层解绑，以避免与后续功能发生冲突，并更新选择轮廓图层的`z-index`属性，以便选择轮廓图层移动到选择图层上方，从而实现拖动功能。拖动功能在[第6章](ch06.html
    "第6章. 用户界面")*用户界面*中的*创建基本拖放功能*配方中进行了详细介绍。有关详细说明，请参阅该配方。
- en: Image upload
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图像上传
- en: In `recipe-5.js`, an event handler is attached to the click event for the **Upload**
    button. Inside the callback function for this event, it is first determined if
    a selection has been made by the user. If not, an alert is displayed, asking the
    user to make a crop selection.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `recipe-5.js` 中，为 **上传** 按钮的点击事件附加了事件处理程序。在此事件的回调函数内，首先确定用户是否已经进行了选择。如果没有，则显示警告，要求用户进行裁剪选择。
- en: 'If a valid selection has been made, a new `FormData` object is created to store
    the data to be uploaded to the PHP script as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已经进行了有效的选择，将创建一个新的 `FormData` 对象来存储要上传到 PHP 脚本的数据，如下所示：
- en: '[PRE46]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The `_selectedFile` variable contains the reference to the selected file, which
    is made available within the change event on the file input.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`_selectedFile` 变量包含对所选文件的引用，在文件输入的更改事件中可用。'
- en: 'With the required data stored inside the `FormData` object, a new `XMLHttpRequest`
    object is created to send the data to the PHP upload script as shown in the following
    code snippet:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 将所需数据存储在 `FormData` 对象中后，创建一个新的 `XMLHttpRequest` 对象来将数据发送到 PHP 上传脚本，如下代码片段所示：
- en: '[PRE47]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This code is self-explanatory and simply allows us to POST directly from JavaScript
    without the need for an HTML form. The `onprogress()` function is called by the
    XHR request as the image is being uploaded and allows us to update the progress
    bar on the HTML page to reflect the upload's progress. The `onload()` function
    is called when the operation has completed, allowing us to display any errors
    that occurred.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码不言自明，简单地允许我们直接从 JavaScript 中进行 POST，无需 HTML 表单。 `onprogress()` 函数由 XHR 请求调用，当图像正在上传时允许我们更新
    HTML 页面上的进度条以反映上传进度。 `onload()` 函数在操作完成时调用，允许我们显示任何发生的错误。
- en: Cropping and saving the image with PHP
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 PHP 进行裁剪和保存图像
- en: The PHP script is relatively simple. It accepts and stores the information provided
    via the POST request from the JavaScript and does some basic validation on the
    image width and extension, only allowing JPG and PNG images.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 脚本相对简单。它接受并存储通过 JavaScript 提供的 POST 请求中的信息，并对图像宽度和扩展名进行基本验证，仅允许 JPG 和 PNG
    图像。
- en: 'If the image passes validation, either `imagecreatefrompng()` or `imagecreatefromjpeg()`
    is used to create an image resource in PHP based on the provided image. Then,
    a blank image is created with the specified crop dimensions as shown in the following
    line of code:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如果图像通过了验证，则根据提供的图像使用 `imagecreatefrompng()` 或 `imagecreatefromjpeg()` 在 PHP
    中创建图像资源。然后，如下所示的代码行创建了一个具有指定裁剪尺寸的空白图像：
- en: '[PRE48]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'You can think of this blank image as a canvas that PHP will use to paint the
    modified image on. Then, the provided image is cropped and the new image is stored
    on the blank canvas using `imagecopyresampled()` as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这个空白图像看作是 PHP 将用来在上面绘制修改后图像的画布。然后，提供的图像被裁剪，并且使用 `imagecopyresampled()` 将新图像存储在空白画布上，如下所示：
- en: '[PRE49]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Finally, the new image is saved to disk in the `uploads` directory that was
    created at the beginning of this recipe, as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，新图像将保存到在此配方开始时创建的 `uploads` 目录中，如下所示：
- en: '[PRE50]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: You should see the new image when you open the `uploads` directory.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开 `uploads` 目录时，你应该能看到新图像。
- en: There's more…
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe provides a basic complete solution to previewing, cropping, uploading,
    and saving an image, but there are many improvements that can be made. The validation
    on both the client and server side could be dramatically improved to allow for
    additional image types and to check for file size as well as dimensions.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方提供了一个基本的完整解决方案，用于预览、裁剪、上传和保存图像，但还有许多可以改进的地方。客户端和服务器端的验证都可以进行大幅改进，以允许其他图像类型，并检查文件大小以及尺寸。
- en: When `FileReader` is reading the local file into the browser, a loader or progress
    bar could also be added in the same way that the progress bar is implemented for
    the upload section.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `FileReader` 正在将本地文件读入浏览器时，可以像为上传部分实现进度条一样添加加载器或进度条。
- en: Finally, the drag functionality could be improved so that the selection area's
    middle does not "snap" to the mouse pointer, since this can be confusing for the
    user.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以改进拖放功能，使选择区域的中心不会“捕捉”到鼠标指针，因为这可能会对用户造成困惑。
- en: See also
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a basic drag-and-drop functionality* recipe in [Chapter 6](ch06.html
    "Chapter 6. User Interface"), *User Interface*
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [第 6 章](ch06.html "Chapter 6. User Interface") *用户界面* 的 *创建基本的拖放功能* 配方中
