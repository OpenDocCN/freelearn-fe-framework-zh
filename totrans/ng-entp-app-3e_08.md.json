["```js\n    projects/stage10 \n    ```", "```js\n    projects/stage11 \n    ```", "```js\n    npx ng build stage11 \n    ```", "```js\nexport interface IUserService {\n  getUser(id: string): Observable<IUser>\n  updateUser(id: string, user: IUser): Observable<IUser>\n  getUsers(\n    pageSize: number,\n    searchText: string,\n    pagesToSkip: number\n  ): Observable<IUsers>\n} \n```", "```js\n    **src/app/user/user/user.****service****.****ts**\n    export interface IUserService {\n      getUser(id: string): Observable<Iuser>\n      updateUser(id: string, user: Iuser): Observable<Iuser>\n    }\n    @Injectable({\n      providedIn: 'root',\n    })\n    export class UserService implements IUserService {\n      private readonly cache = inject(CacheService)\n      private readonly httpClient = inject(HttpClient)\n      private readonly authService = inject(AuthService)\n      getUser(id: string): Observable<IUser> {\n        throw new Error('Method not implemented.')\n      }\n      updateUser(id: string, user: IUser): Observable<IUser> {\n        throw new Error('Method not implemented.')\n      }\n    } \n    ```", "```js\n    **src/app/user/user/user.****service****.****ts**\n    getUser(id: string | null): Observable<IUser> {\n      if (id === null) {\n        return throwError('User id is not set')\n      }\n      return this.httpClient.get<IUser>(\n        `${environment.baseUrl}/v2/user/${id}`\n      )\n    } \n    ```", "```js\n**src/app/user/user/user.****service****.****ts**\n  updateUser(id: string, user: IUser): Observable<IUser> {\n    if (id === '') {\n      return throwError('User id is not set')\n    }\n    // cache user data in case of errors\n    this.cache.setItem('draft-user', Object.assign(user, { _id: id }))\n    const updateResponse$ = this.httpClient\n      .put<IUser>(`${environment.baseUrl}/v2/user/${id}`, user)\n      .pipe(map(User.Build), catchError(transformError))\n    updateResponse$.subscribe(\n      (res) => {\n        this.authService.currentUser$.next(res)\n        this.cache.removeItem('draft-user')\n      },\n      (err) => throwError(err)\n    )\n    return updateResponse$\n  } \n```", "```js\n    **src/app/user/profile/data.****ts**\n    export interface IUSState {\n      code: string\n      name: string\n    }\n    export function USStateFilter(value: string): IUSState[] {\n      return USStates.filter((state) => {\n        return (\n          (state.code.length === 2 && \n           state.code.toLowerCase() === value.toLowerCase()) ||\n           state.name.toLowerCase().indexOf(value.toLowerCase()) === 0\n        )\n      })\n    }\n    const USStates = [\n      { code: 'AK', name: 'Alaska' },\n      { code: 'AL', name: 'Alabama' },\n      ...\n      { code: 'WY', name: 'Wyoming' },\n    ] \n    ```", "```js\n    **src/app/common/validations.****ts**\n    ...\n    export const OptionalTextValidation = [\n      Validators.minLength(2), \n      Validators.maxLength(50)\n    ]\n    export const RequiredTextValidation = \n      OptionalTextValidation.concat([Validators.required])\n    export const OneCharValidation = [\n      Validators.minLength(1), \n      Validators.maxLength(1)\n    ] \n    export const USAZipCodeValidation = [ \n      Validators.required, \n      Validators.pattern(/^\\d{5}(?:[-\\s]\\d{4})?$/),\n    ]\n    export const USAPhoneNumberValidation = [ \n      Validators.required, \n      Validators.pattern(/^\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4})$/), \n    ] \n    ```", "```js\n    **src/app/user/profile/profile.****component****.****ts**\n    import { Role } from '../../auth/auth.enum' \n    import { $enum } from 'ts-enum-util'\n    import { IName, IPhone, IUser, PhoneType } from '../user/user'\n    ...\n    @Component({ \n      selector: 'app-profile', \n      templateUrl: './profile.component.html', \n      styleUrls: ['./profile.component.css'],\n    })\n    export class ProfileComponent implements OnInit { \n      Role = Role \n      PhoneType = PhoneType \n      PhoneTypes = $enum(PhoneType).getKeys() \n      formGroup: FormGroup \n      states$: Observable<IUSState[]> \n      userError = '' \n      currentUserId: string \n      constructor( \n        private formBuilder: FormBuilder, \n        private uiService: UiService, \n        private userService: UserService, \n        private authService: AuthService\n      ) {}\n      private destroyRef = inject(DestroyRef)\n      ngOnInit() { \n        this.buildForm() \n        this.authService.currentUser$.pipe(\n          filter((user) => user !== null), \n          tap((user) => { \n            this.currentUserId = user._id \n            this.buildForm(user) \n          }),\n          takeUntilDestroyed(this.destroyRef) \n        ).subscribe()\n      }\n      private get currentUserRole() { \n        return this.authService.authStatus$.value.userRole \n      }\n      buildForm(user?: IUser) {}\n      ...\n    } \n    ```", "```js\n**src/app/user/profile/profile.****component****.****ts**\n...\n  buildForm(user?: IUser) { \n    this.formGroup =\n    this.formBuilder.group({\n      email: [\n        {\n          value: user?.email || '',\n          disabled: this.currentUserRole !== Role.Manager,\n        },\n        EmailValidation,\n      ],\n      name: this.formBuilder.group({\n        first: [user?.name?.first || '', RequiredTextValidation],\n        middle: [user?.name?.middle || '', OneCharValidation],\n        last: [user?.name?.last || '', RequiredTextValidation],\n      }),\n      role: [\n        {\n          value: user?.role || '',\n          disabled: this.currentUserRole !== Role.Manager,\n        },\n        [Validators.required],\n      ],\n      dateOfBirth: [user?.dateOfBirth || '', Validators.required], \n      address: this.formBuilder.group({\n        line1: [user?.address?.line1 || '', RequiredTextValidation],\n        line2: [user?.address?.line2 || '', OptionalTextValidation],\n        city: [user?.address?.city || '', RequiredTextValidation],\n        state: [user?.address?.state || '', RequiredTextValidation],\n        zip: [user?.address?.zip || '', USAZipCodeValidation],\n      }),\n    })\n  } \n```", "```js\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatNativeDateModule,\n    MatOptionModule,\n    MatRadioModule,\n    MatSelectModule,\n    MatStepperModule,\n    MatToolbarModule, \n    ```", "```js\n    FlexModule,\n    ReactiveFormsModule,\n    ... \n    ```", "```js\n    **src/app/user/profile/profile.component.html**\n    <mat-toolbar color=\"accent\">\n    <h5>User Profile</h5>\n    </mat-toolbar>\n    <mat-horizontal-stepper #stepper=\"matHorizontalStepper\">\n      <mat-step [stepControl]=\"formGroup\">\n        <form [formGroup]=\"formGroup\">\n          <ng-template matStepLabel>Account Information</ng-template>\n          <div class=\"stepContent\">\n            ...\n          </div>\n        </form>\n      </mat-step>\n    </mat-horizontal-stepper> \n    ```", "```js\n    **src/app/user/profile/profile.component.html**\n    <div fxLayout=\"row\" fxLayout.lt-sm=\"column\"   \n         [formGroup]=\"formGroup.get('name')\" fxLayoutGap=\"10px\">\n      <mat-form-field appearance=\"outline\" fxFlex=\"40%\">\n        <input matInput placeholder=\"First Name\"\n               aria-label=\"First Name\" formControlName=\"first\">\n          @if (formGroup.get('name.first')?.hasError('required'))\n          {\n             <mat-error>First Name is required</mat-error>\n          }\n          @if (formGroup.get('name.first')?.hasError('minLength'))\n          {\n            <mat-error>Must be at least 2 characters</mat-error>\n          }\n          @if (formGroup.get('name.first')?.hasError('maxLength'))\n          {\n            <mat-error>Can't exceed 50 characters</mat-error>\n          }\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\" fxFlex=\"20%\">\n        <input matInput placeholder=\"MI\" \n          aria-label=\"Middle Initial\" formControlName=\"middle\">\n          @if (formGroup.get('name.middle')?.hasError('invalid'))\n          {\n            <mat-error>Only initial</mat-error>\n          }\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\" fxFlex=\"40%\">\n        <input matInput placeholder=\"Last Name\" \n          aria-label=\"Last Name\" formControlName=\"last\">\n          @if (formGroup.get('name.last')?.hasError('required'))\n          {\n            <mat-error>Last Name is required</mat-error>\n          }\n          @if (formGroup.get('name.last')?.hasError('minLength'))\n          {\n            <mat-error>Must be at least 2 characters</mat-error>\n          }\n          @if (formGroup.get('name.last')?.hasError('maxLength'))\n          {\n            <mat-error>Can't exceed 50 characters</mat-error>\n          }  \n      </mat-form-field>\n    </div> \n    ```", "```js\n@if (user.isHuman) {\n  <human-profile [data]=\"user\" />\n} @else if (user.isRobot) {\n  <!-- robot users are rare, so load their profiles lazily -->\n  @defer {\n    <robot-profile [data]=\"user\" />\n  }\n} @else {\n  <p>The profile is unknown!\n} \n```", "```js\n**example**\n<mat-form-field appearance=\"outline\" fxFlex=\"40%\">\n  <mat-label>First Name</mat-label>\n  <input matInput aria-label=\"First Name\" formControlName=\"first\" #name />\n  <mat-error **[****input****]=****\"name\"** **[****group****]=****\"formGroup.get('name')\"**\n    **[****appFieldError****]=****\"ErrorSets.RequiredText\"****>**\n  </mat-error>\n</mat-form-field> \n```", "```js\n    **src/app/user-controls/field-error/field-error.****directive****.****ts**\n    @Directive({\n      selector: **'[appFieldError]'**,\n    }) \n    ```", "```js\n    **src/app/user-controls/field-error/field-error.****directive****.****ts**\n    export type ValidationError = \n       'required' | 'minlength' | 'maxlength' | 'invalid'\n    export type ValidationErrorTuple = {\n      error: ValidationError;\n      message: string\n    } \n    ```", "```js\n    **src/app/user-controls/field-error/field-error.****directive****.****ts**\n    export const ErrorSets: { [key: string]: ValidationError[] } = {\n      OptionalText: ['minlength', 'maxlength'],\n      RequiredText: ['minlength', 'maxlength', 'required'],\n    } \n    ```", "```js\n    **src/app/user-controls/field-error/field-error.****directive****.****ts**\n    export class FieldErrorDirective implements OnDestroy, OnChanges {\n      @Input() appFieldError:\n        | ValidationError\n        | ValidationError[]\n        | ValidationErrorTuple\n        | ValidationErrorTuple[]\n      @Input() input: HTMLInputElement | undefined\n      @Input() group: FormGroup\n      @Input() fieldControl: AbstractControl | null\n      @Input() fieldLabel: string | undefined \n    ```", "```js\n    **src/app/user-controls/field-error/field-error.****directive****.****ts**\n      private readonly nativeElement: HTMLElement\n      constructor(private el: ElementRef) {\n        this.nativeElement = this.el.nativeElement\n      }\n      renderErrors(errors: string) {\n        this.nativeElement.innerText = errors\n      } \n    ```", "```js\n    **src/app/user-controls/field-error/field-error.****directive****.****ts**\n      getStandardErrorMessage(error: ValidationError): string {\n        const label = this.fieldLabel || 'Input'\n        switch (error) {\n          case 'required':\n            return `${label} is required`\n          case 'minlength':\n            return `${label} must be at least ${\n              this.fieldControl?.getError(error)?.requiredLength ?? 2\n            } characters`\n          case 'maxlength':\n            return `${label} can\\'t exceed ${\n              this.fieldControl?.getError(error)?.requiredLength ?? 50\n            } characters`\n          case 'invalid':\n            return `A valid ${label} is required`\n        }\n      } \n    ```", "```js\n    **src/app/user-controls/field-error/field-error.****directive****.****ts**\n    updateErrorMessage() {\n        const errorsToDisplay: string[] = []\n        const errors = Array.isArray(this.appFieldError)\n          ? this.appFieldError\n          : [this.appFieldError]\n        errors.forEach(\n          (error: ValidationError \n                | { error: ValidationError; message: string }) => {\n            const errorCode = \n              typeof error === 'object' ? error.error : error \n            const message =\n              typeof error === 'object'\n                ? () => error.message\n                : () => this.getStandardErrorMessage(errorCode)\n            const errorChecker =\n              errorCode === 'invalid'\n                ? () => this.fieldControl?.invalid\n                : () => this.fieldControl?.hasError(errorCode)\n            if (errorChecker()) {\n              errorsToDisplay.push(message())\n            }\n          }\n        )\n        this.renderErrors(errorsToDisplay.join('<br>'))\n      } \n    ```", "```js\n    **src/app/user-controls/field-error/field-error.****directive****.****ts**\n    private controlSubscription: Subscription | undefined\n    ngOnDestroy(): void {\n      this.unsubscribe()\n    }\n    unsubscribe(): void {\n      this.controlSubscription?.unsubscribe()\n    }\n    initFieldControl() {\n        if (this.input && this.group) {\n          const controlName = this.input.\n            getAttribute('formControlName') ?? ''\n          this.fieldControl =\n            this.fieldControl || this.group.get(controlName)\n          if (!this.fieldControl) {\n            throw new Error( \n              `[appFieldError] couldn't bind to control ${controlName}`\n            )\n          }\n          this.unsubscribe()\n          this.controlSubscription = this.fieldControl?.valueChanges\n            .pipe(\n              filter(() => this.fieldControl?.status === 'INVALID'),\n              tap(() => this.updateErrorMessage())\n            )\n            .subscribe()\n        }\n      } \n    ```", "```js\n    **src/app/user-controls/field-error/field-error.****directive****.****ts**\n      ngOnChanges(changes: SimpleChanges): void {\n        this.initFieldControl()\n        if (changes.input.firstChange) {\n          if (this.input) {\n            this.input.onblur = () => this.updateErrorMessage()\n            this.fieldLabel =\n              this.fieldLabel ||\n              this.input.placeholder ||\n              this.input.getAttribute('aria-label') ||\n              ''\n          } else {\n            throw new Error(\n              `appFieldError.[input] couldn't bind to any input element`\n            )\n          }\n        }\n      } \n    ```", "```js\n**src/app/user-controls/field-error/field-error.****directive****.****ts**\n  @NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [FieldErrorDirective],\n  exports: [FieldErrorDirective],\n})\nexport class FieldErrorModule {} \n```", "```js\n**src/app/user/profile/profile.****component****.****ts**\nnow = new Date()\nget dateOfBirth() {\n  return this.formGroup.get('dateOfBirth')?.value || this.now\n}\nget age() {\n  return this.now.getFullYear() - this.dateOfBirth.getFullYear()\n} \n```", "```js\n now = new Date()\n  dateOfBirth = \n    signal(\n     this.formGroup.get('dateOfBirth')?.value || this.now\n    )\n  age = computed(() => \n    this.now.getFullYear() - this.dateOfBirth().getFullYear()) \n```", "```js\n**src/app/user/profile/profile.****component****.****ts**\n  minDate = new Date(\n    this.now.getFullYear() - 100,\n    this.now.getMonth(),\n    this.now.getDate()\n  ) \n```", "```js\n**src/app/user/profile/profile.component.html**\n<mat-form-field appearance=\"outline\" fxFlex=\"50%\">\n  <mat-label>Date of Birth</mat-label>\n  <input matInput aria-label=\"Date of Birth\" formControlName=\"dateOfBirth\"\n    **[****min****]=****\"minDate\"** **[****max****]=****\"now\"** [matDatepicker]=\"dateOfBirthPicker\" #dob />\n  @if (formGroup.get('dateOfBirth')?.value) {\n    <mat-hint> {{ age }} year(s) old </mat-hint>\n  }\n  <mat-datepicker-toggle matSuffix [for]=\"dateOfBirthPicker\">\n  </mat-datepicker-toggle>\n  <mat-datepicker #dateOfBirthPicker></mat-datepicker>\n  <mat-error [input]=\"dob\" [group]=\"formGroup\"\n    [appFieldError]=\n      \"{error: 'invalid', message: 'Date must be within the last 100 years'}\">\n  </mat-error>\n</mat-form-field> \n```", "```js\n**src/app/user/profile/profile.****component****.****ts**\nconst state = this.formGroup.get('address.state')\nif (state != null) {\n  this.states$ = state.valueChanges.pipe(\n    startWith(''),\n    map((value) => USStateFilter(value))\n  )\n} \n```", "```js\n**src/app/user/profile/profile.component.html**\n...\n<mat-form-field appearance=\"outline\" fxFlex=\"30%\">\n  <mat-label>State</mat-label>\n  <input type=\"text\" aria-label=\"State\" matInput formControlName=\"state\"\n    [matAutocomplete]=\"stateAuto\" #state />\n  <mat-autocomplete #stateAuto=\"matAutocomplete\">\n    @for (state of states$ | async; track state) {\n      <mat-option [value]=\"state.name\">\n        {{ state.name }}\n      </mat-option>\n    }\n  </mat-autocomplete>\n  <mat-error [input]=\"state\" [group]=\"formGroup.get('address')\"\n    appFieldError=\"required\">\n  </mat-error>\n</mat-form-field> \n... \n```", "```js\n**src/app/user/profile/profile.****component****.****ts**\n...\nphones: this.formBuilder.array(this.buildPhoneArray(user?.phones || [])),\n...\n  private buildPhoneArray(phones: IPhone[]) {\n    const groups = []\n    if (phones?.length === 0) {\n      groups.push(this.buildPhoneFormControl(1))\n    } else {\n      phones.forEach((p) => {\n        groups.push(\n          this.buildPhoneFormControl(p.id, p.type, p.digits)\n        )\n      })\n    }\n    return groups\n      } \n  private buildPhoneFormControl(\n    id: number, type?: string, phoneNumber?: string\n  ) {\n    return this.formBuilder.group({\n      id: [id],\n      type: [type || '', Validators.required],\n      digits: [phoneNumber || '', USAPhoneNumberValidation],\n  })\n} \n... \n```", "```js\n**src/app/user/profile/profile.****component****.****ts**\n...\naddPhone() { this.phonesArray.push(\nthis.buildPhoneFormControl(\n  this.formGroup.get('phones').value.length + 1)\n)\n}\nget phonesArray(): FormArray {\n  return this.formGroup.get('phones') as FormArray\n}\n... \n```", "```js\n**src/app/user/profile/profile.component.html**\n...\n<mat-list formArrayName=\"phones\">\n  <h2 mat-subheader>Phone Number(s)\n    <button mat-button (click)=\"addPhone()\">\n      <mat-icon>add</mat-icon>\n      Add Phone\n    </button>\n  </h2>\n  @for (position of phonesArray.controls; track position; let i = $index) \n  {\n    <mat-list-item [formGroupName]=\"i\"> \n      <mat-form-field appearance=\"outline\" fxFlex=\"100px\">\n        <mat-label>Type</mat-label>\n        <mat-select formControlName=\"type\">\n          @for (type of PhoneTypes; track type) {\n            <mat-option [value]=\"convertTypeToPhoneType(type)\">\n              {{ type }}\n            </mat-option>\n          }      \n       </mat-select>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\" fxFlex fxFlexOffset=\"10px\">\n      <mat-label>Number</mat-label>\n      <input matInput type=\"text\" formControlName=\"digits\"\n        aria-label=\"Phone number\" prefix=\"+1\" />\n        @if (phonesArray.controls[i].invalid && \n             phonesArray.controls[i].touched) {\n          <mat-error>A valid phone number is required</mat-error>\n        }     \n    </mat-form-field>\n    <button fxFlex=\"33px\" mat-icon-button\n      (click)=\"**phonesArray.removeAt(i)**\"> \n      <mat-icon>delete</mat-icon>\n    </button>\n  </mat-list-item>\n  }\n</mat-list> \n... \n```", "```js\n**src/app/user/view-user/view-user.****component****.****ts**\nimport { AsyncPipe, DatePipe } from '@angular/common'\nimport {\n  Component, inject, Input, OnChanges, SimpleChanges\n} from '@angular/core'\nimport { MatButtonModule } from '@angular/material/button'\nimport { MatCardModule } from '@angular/material/card'\nimport { MatIconModule } from '@angular/material/icon'\nimport { Router } from '@angular/router'\nimport { IUser, User } from '../user/user'\n@Component({\n  selector: 'app-view-user',\n  template: `\n    @if (currentUser) {\n      <div>\n        <mat-card appearance=\"outlined\">\n          <mat-card-header>\n            <div mat-card-avatar>\n              <mat-icon>account_circle</mat-icon>\n            </div>\n            <mat-card-title>{{ currentUser.fullName }}</mat-card-title>\n            <mat-card-subtitle>{{ currentUser.role }}</mat-card-subtitle>\n          </mat-card-header>\n          <mat-card-content>\n            <p><span class=\"mat-input bold\">E-mail</span></p>\n            <p>{{ currentUser.email }}</p>\n            <p><span class=\"mat-input bold\">Date of Birth</span></p>\n            <p>{{ currentUser.dateOfBirth | date: 'mediumDate' }}</p>\n          </mat-card-content>\n          @if (editMode) {\n            <mat-card-actions>\n              <button mat-button mat-raised-button (click)=\"editUser(currentUser._id)\">\n                Edit\n              </button>\n            </mat-card-actions>\n          }\n        </mat-card>\n      </div>\n    }\n  `,\n  styles: `\n    .bold {\n      font-weight: bold;\n    }\n`,\n  standalone: true,\n  imports: [MatCardModule, MatIconModule, MatButtonModule, AsyncPipe, DatePipe],\n})\nexport class ViewUserComponent implements OnChanges {\n  private readonly router = inject(Router)\n  @Input() user!: IUser\n  currentUser = new User()\n  get editMode() {\n    return !this.user\n  }\n  ngOnChanges(changes: SimpleChanges): void {\n    this.currentUser = User.Build(changes['user'].currentValue)\n  }\n  editUser(id: string) {\n    this.router.navigate(['/user/profile', id])\n  }\n} \n```", "```js\n**src/app/user/profile/profile.****component****.****ts**\n...\nasync save(form: FormGroup) {\n    this.userService\n      .updateUser(this.currentUserId, form.value)\n      .pipe(first())\n      .subscribe({\n        next: (res: IUser) => {\n          this.patchUser(res)\n          **this****.****formGroup****.****patchValue****(res)**\n          this.uiService.showToast('Updated user')\n        },\n        error: (err: string) => (this.userError = err),\n      })\n  }\n... \n```", "```js\n**src/app/user/profile/profile.component.html**\n...\n<mat-step [stepControl]=\"formGroup\">\n  <form [formGroup]=\"formGroup\" (ngSubmit)=\"save(formGroup)\">\n    <ng-template matStepLabel>Review</ng-template>\n    <div class=\"stepContent\">\n      Review and update your user profile.\n      **<****app-view-user** **[****user****]=****\"formGroup.getRawValue()\"****></****app-view-user****>**\n    </div>\n    <div fxLayout=\"row\" class=\"margin-top\">\n      <button mat-button matStepperPrevious>Back</button>\n      <div class=\"flex-spacer\"></div>\n      @if (userError) {\n        <div class=\"mat-caption error\">{{ **userError** }}</div>\n      } \n      <button mat-button color=\"warn\" (click)=\"**stepper.reset()**\">\n        Reset\n      </button>\n      <button mat-raised-button matStepperNext color=\"primary\" \n        type=\"submit\" [disabled]=\"formGroup.invalid\">\n        Update\n      </button>\n    </div>\n  </form>\n</mat-step>\n... \n```", "```js\n**src/app/common/base-form.****class****.****ts**\nimport { EventEmitter, Input, Output, SimpleChange, SimpleChanges } \n   from '@angular/core'\nimport { AbstractControl, FormGroup } from '@angular/forms'\nexport abstract class BaseFormComponent<TFormData extends object> {\n  @Input() initialData: TFormData\n  @Input() disable: boolean\n  @Output() formReady: EventEmitter<AbstractControl>\n  formGroup: FormGroup\n  private registeredForms: string[] = []\n  constructor() {\n    this.formReady = new EventEmitter<AbstractControl>(true)\n  }\n  abstract buildForm(initialData?: TFormData): FormGroup\n  patchUpdatedData(data: object) {\n    this.formGroup.patchValue(data, { onlySelf: false })\n  }\n  patchUpdatedDataIfChanged(changes: SimpleChanges) {\n    if (this.formGroup && this.hasChanged(changes.initialData)) {\n      this.patchUpdatedData(this.initialData)\n    }\n  }\n  emitFormReady(control: AbstractControl | null = null) {\n    this.formReady.emit(control || this.formGroup)\n  }\n  registerForm(name: string, control: AbstractControl) {\n    this.formGroup.setControl(name, control)\n    this.registeredForms.push(name)\n  }\n  deregisterForm(name: string) {\n    if (this.formGroup.contains(name)) {\n      this.formGroup.removeControl(name)\n    }\n  }\n  protected deregisterAllForms() {\n    this.registeredForms.forEach(() => this.deregisterForm(name))\n  }\n  protected hasChanged(change: SimpleChange): boolean {\n    return change?.previousValue !== change?.currentValue\n  }\n} \n```", "```js\n    **src/app/user/profile/profile.****component****.****ts**\n    ...\n    name: this.formBuilder.group({\n      first: [user?.name?.first || '', RequiredTextValidation],\n      middle: [user?.name?.middle || '', OneCharValidation],\n      last: [user?.name?.last || '', RequiredTextValidation],\n    }),\n    ... \n    ```", "```js\n    **src/app/user/profile/profile.component.html**\n    ...\n    <div fxLayout=\"row\" fxLayout.lt-sm=\"column\"\n      [formGroup]=\"formGroup.get('name')\" fxLayoutGap=\"10px\">\n      <mat-form-field appearance=\"outline\" fxFlex=\"40%\">\n        <mat-label>First Name</mat-label>\n        <input matInput aria-label=\"First Name\" \n               formControlName=\"first\" #name />\n        ...\n    </div>\n    ... \n    ```", "```js\n**src/app/user/name-input/name-input.****component****.****ts**\nexport class NameInputComponent extends BaseFormComponent<IName> {\n  constructor(private formBuilder: FormBuilder) {\n    super()\n  }\n  buildForm(initialData?: IName): FormGroup {\n    throw new Error(\"Method not implemented.\");\n  }\n  ...\n} \n```", "```js\n    **src/app/user/name-input/name-input.****component****.****ts**\n    export class NameInputComponent implements OnInit {\n      ...\n      buildForm(initialData?: IName): FormGroup {\n        const name = initialData\n        return this.formBuilder.group({\n          first: [name?.first : '', RequiredTextValidation],\n          middle: [name?.middle : '', OneCharValidation], \n          last: [name?.last : '', RequiredTextValidation],\n        })\n      } \n    ```", "```js\n    **src/app/user/name-input/name-input.****component****.****ts**\n    template: `\n        <form [formGroup]=\"formGroup\">\n          <div fxLayout=\"row\" fxLayout.lt-sm=\"column\"\n            fxLayoutGap=\"10px\">\n            ...\n          </div>\n        </form>\n      `, \n    ```", "```js\n    **src/app/user/name-input/name-input.****component****.****ts**\n    ngOnInit() {\n      this.formGroup = this.buildForm(this.initialData)\n      this.formReady.emit(this.formGroup)\n    } \n    ```", "```js\n    **src/app/user/name-input/name-input.****component****.****ts**\n    ngOnChanges(changes: SimpleChanges) {\n      this.disable ?\n        this.formGroup?.disable() : this.formGroup?.enable()\n      this.patchUpdatedDataIfChanged(changes)\n    } \n    ```", "```js\n    **src/app/user/profile/profile.component.html**\n    <mat-horizontal-stepper #stepper=\"matHorizontalStepper\">\n      <mat-step [stepControl]=\"formGroup\">\n        <form [formGroup]=\"formGroup\">\n          <ng-template matStepLabel>Account Information</ng-template>\n            <div class=\"stepContent\">\n              **<****app-name-input** **[****initialData****]=****\"nameInitialData$ | async\"**\n                **(****formReady****)=****\"registerForm('name', $event)\"****>**\n              </app-name-input>\n            </div>\n            ...\n          </ng-template>\n        </form>\n      </mat-step>\n      ...\n    </mat-horizontal-stepper> \n    ```", "```js\n**src/app/user/profile/profile.****component****.****ts**\nngOnInit() {\n  this.formGroup = this.buildForm()\n  this.authService.currentUser$\n    .pipe(\n      filter((user) => user != null),\n      tap((user) => this.patchUser(user)),\n      takeUntilDestroyed(this.destroyRef)\n    )\n    .subscribe()\n} \n```", "```js\n    **src/app/user/profile/profile.****component****.****ts**\n      ngOnDestroy() {\n        this.deregisterAllForms()\n      } \n    ```", "```js\n    **src/app/user/profile/profile.component.html**\n    <mat-form-field appearance=\"outline\" fxFlex fxFlexOffset=\"10px\">\n      <mat-label>Number</mat-label>\n      <input matInput type=\"text\" formControlName=\"number\"\n        prefix=\"+1\" **mask****=****\"(000) 000-0000\"** **[****showMaskTyped****]=****\"true\"** />\n        @if (phonesArray.controls[i].invalid && \n             phonesArray.controls[i].touched) {\n          <mat-error>A valid phone number is required</mat-error>\n        } \n    </mat-form-field> \n    ```", "```js\n    **src/app/user-controls/lemon-rater/lemon-rater.****component****.****ts**\n    export class LemonRaterComponent implements ControlValueAccessor {\n      disabled = false\n      private internalValue: number\n      get value() {\n        return this.internalValue\n      }\n      onChanged: any = () => {}\n      onTouched: any = () => {}\n      writeValue(obj: any): void {\n        this.internalValue = obj\n      }\n      registerOnChange(fn: any): void {\n        this.onChanged = fn\n      }\n      registerOnTouched(fn: any): void {\n        this.onTouched = fn\n      }\n      setDisabledState?(isDisabled: boolean): void {\n        this.disabled = isDisabled\n      }\n    } \n    ```", "```js\n    **src/app/user-controls/lemon-rater/lemon-rater.****component****.****ts**\n    @Component({\n      selector: 'app-lemon-rater',   \n      templateUrl: 'lemon-rater.component.html',\n      styleUrls: ['lemon-rater.component.css'],\n      providers: [\n        {\n          provide: NG_VALUE_ACCESSOR,\n          useExisting: forwardRef(() => LemonRaterComponent),\n          multi: true,\n        },\n      ],  \n      standalone: true,\n      imports: [NgClass], \n    ```", "```js\n    **src/app/user-controls/lemon-rater/lemon-rater.****component****.****ts**\n    export class LemonRaterComponent implements ControlValueAccessor { \n      @ViewChild('displayText', { static: false }) displayTextRef!: ElementRef\n      disabled = false\n      private internalValue!: number\n      get value() {\n        return this.internalValue\n      }\n\n      ratings = Object.freeze([\n        {\n          value: 1,\n          text: 'no zest',\n        },\n        {\n          value: 2,\n          text: 'neither a lemon or a lime ',\n        },\n        {\n          value: 3,\n          text: 'a true lemon',\n        },\n      ])\n      ...\n      setRating(lemon: any) {\n        if (!this.disabled) {\n          this.internalValue = lemon.value\n          this.ratingText = lemon.text\n          this.onChanged(lemon.value)\n          this.onTouched()\n        }\n      }\n      setDisplayText() {\n        this.setSelectedText(this.internalValue)\n      }\n      private setSelectedText(value: number) {\n        this.displayTextRef.nativeElement.textContent = \n          this.getSelectedText(value)\n      }\n      private getSelectedText(value: number) {\n        let text = ''\n        if (value) {\n          text = this.ratings\n            .find((i) => i.value === value)?.text || ''\n        }\n        return text\n      }\n    } \n    ```", "```js\n    **src/app/user-controls/lemon-rater/lemon-rater.component.html**\n    **<****i** **#****displayText****></****i****>**\n    <div class=\"lemons\" [ngClass]=\"{'disabled': disabled}\"> \n      @for (lemon of ratings; track lemon) { \n        <svg width=\"24px\" height=\"24px\" viewBox=\"0 0 513 513\"\n             [attr.title]=\"lemon.text\" class=\"lemon rating\"\n             [ngClass]=\"{'selected': lemon.value <= value}\"\n             (mouseover)=\n               \"displayText.textContent = !disabled ? lemon.text : ''\"\n             (mouseout)=\"setDisplayText()\"\n             (click)=\"setRating(lemon)\"\n         >\n         ...\n         </svg>\n      }\n    </div> \n    ```", "```js\n    **src/app/user-controls/lemon-rater/lemon-rater.component.css**\n    .lemons {\n      cursor: pointer;\n    }\n    .lemons:hover .lemon #fill-area {\n      fill: #ffe200 !important;\n    }\n    .lemons.disabled:hover {\n      cursor: not-allowed;\n    }\n    .lemons.disabled:hover .lemon #fill-area {\n      fill: #d8d8d8 !important;\n    }\n    .lemons .lemon {\n      float: left; margin: 0px 5px;\n    }\n    .lemons .lemon #fill-area {\n      fill: #d8d8d8;\n    }\n    .lemons .lemon:hover~.lemon #fill-area {\n      fill: #d8d8d8 !important;\n    }\n    .lemons .lemon.selected #fill-area {\n      fill: #ffe200 !important;\n    }\n    .lemons .dad.heart #ada { \n      fill: #6a0dad !important;\n    } \n    ```", "```js\n    **src/app/user/profile/profile.****component****.****ts**\n    buildForm(initialData?: IUser): FormGroup {\n      ...\n      level: [user?.level || 0, Validators.required], \n      ...\n    } \n    ```", "```js\n    **src/app/user/profile/profile.component.html**\n    <div fxLayout=\"row\" fxLayout.lt-sm=\"column\" class=\"margin-top\" fxLayoutGap=\"10px\">\n      <mat-label class=\"mat-body-1\">Select the Limoncu level:\n        <app-lemon-rater formControlName=\"level\">\n        </app-lemon-rater>\n      </mat-label>\n    </div> \n    ```", "```js\n    **src/app/login/login.****component****.****ts**\n    roles = Object.keys(Role) \n    ```", "```js\n    **src/app/login/login.component.html**\n    <div fxLayout=\"row\" fxLayoutAlign=\"center\">\n      <mat-card fxFlex=\"400px\">\n        <mat-card-header>\n          <mat-card-title>\n            <div class=\"mat-headline\">Hello, Limoncu!</div>\n          </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          ...\n        </mat-card-content>\n        **<****mat-card-content****>**\n        **</****mat-card-content****>**\n      </mat-card>\n    </div> \n    ```", "```js\n    **src/app/login/login.component.html**\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\">\n      <span>Authentication Mode: </span><i>{{ authMode }}</i>\n    </div> \n    ```", "```js\n    **src/app/login/login.component.html**\n    <mat-accordion>\n      <mat-expansion-panel>\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n              Fake Login Info\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        ...\n      </mat-expansion-panel>\n    </mat-accordion> \n    ```", "```js\n    **src/app/login/login.component.html**\n    <mat-grid-list cols=\"3\" rowHeight=\"48px\" role=\"list\">\n      <mat-grid-tile [**colspan**]=\"3\" role=\"listitem\"\n      style=\"background: pink\">\n        Use any 8 character string as password\n      </mat-grid-tile>\n      <mat-grid-tile>\n        <mat-grid-tile-header>Role</mat-grid-tile-header>\n      </mat-grid-tile>\n      <mat-grid-tile [colspan]=\"2\">\n        <mat-grid-tile-header>E-mail</mat-grid-tile-header>\n      </mat-grid-tile>\n      @for (role of roles; track role; let oddRow = $odd) {\n        <div>\n          <mat-grid-tile\n            role=\"listitem\"\n            [style.background]=\"oddRow ? 'lightGray' : 'white'\">\n            {{ role }}\n          </mat-grid-tile>\n          <mat-grid-tile\n            [colspan]=\"2\"\n            role=\"listitem\"\n            [style.background]=\"oddRow ? 'lightGray' : 'white'\">\n            <div fxFlex fxLayoutAlign=\"end center\">\n              @if (role.toLowerCase() === 'none') {\n                <div>Any &#64;test.com email</div>\n              } @else {\n                {{ role.toLowerCase() }}&#64;test.com\n              }\n              <button\n                mat-button\n                (click)=\"\n                  this.loginForm.patchValue({\n                    email: role.toLowerCase() + '@test.com',\n                    password: 'whatever'\n                  })\n                \">\n                Fill\n              </button>\n            </div>\n          </mat-grid-tile>\n        </div>\n      }\n    </mat-grid-list> \n    ```", "```js\n**src/app/user/user/user.****service****.****ts**\nupdateUser(id: string, user: IUser): Observable<IUser> {\n  ...\n  This.cache.setItem('draft-user', user)\n  ...\n} \n```", "```js\n    **src/app/user/profile.****component****.****ts**\n    private loadFromCache(): Observable<User | null> {\n      let user = null\n      try {\n        const draftUser = this.cache.getItem('draft-user')\n        if (draftUser != null) {\n          user = User.Build(JSON.parse(draftUser))\n        }\n        if (user) {\n          this.uiService.showToast('Loaded data from cache')\n        }\n      } catch (err) {\n        this.clearCache()\n      }\n      return of(user)\n    } \n    clearCache() {\n      this.cache.removeItem('draft-user')\n    } \n    ```", "```js\n    **src/app/user/profile.component.html**\n    <button mat-button color=\"warn\"\n        (click)=\"stepper.reset(); **clearCache()**\">\n      Reset\n    </button> \n    ```", "```js\n    **src/app/user/profile.****component****.****ts**\n    ngOnInit() {\n      this.formGroup = this.buildForm()\n      combineLatest([\n            this.loadFromCache(),\n            this.authService.currentUser$,\n          ])\n            .pipe(\n            takeUntilDestroyed(this.destroyRef),\n              filter(\n                ([cachedUser, me]) => \n                  cachedUser != null || me != null\n              ),\n              tap(\n                ([cachedUser, me]) => \n                  this.patchUser(cachedUser || me)\n              )\n            )\n            .subscribe()\n    } \n    ```"]