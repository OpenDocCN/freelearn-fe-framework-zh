["```js\nvar calculator = {}; \n\n```", "```js\n<!DOCTYPE html> \n<html> \n<head> \n  <title>Test Runner</title> \n</head> \n<body> \n\n<script src=\"img/calculator.js\"></script> \n</body> \n</html> \n\n```", "```js\n        function multipleTest1() { \n            // Test \n            var result = calculator.multiply(3, 3); \n\n            // Assert Result is expected \n            if (result === 9) { \n                console.log('Test Passed'); \n            } else { \n                console.log('Test Failed'); \n            } \n        };  \n\n        multipleTest1();\n```", "```js\nvar calculator = { \n    multiply : function() { \n        return 9; \n    } \n}; \n\n```", "```js\nvar calculator = { \n    multiply : function(amount1, amount2) { \n        return amount1 * amount2; \n    } \n}; \n\n```", "```js\nvar calculator = { \n    multiply : function(amount1, amount2) { \n        return amount1 * amount2; \n    } \n}; \n\nfunction multipleTest1() { \n    // Test \n    var result = calculator.multiply(3, 3); \n\n    // Assert Result is expected \n    if (result === 9) { \n        console.log('Test Passed'); \n    } else { \n        console.log('Test Failed'); \n    } \n}\n\nmultipleTest1(); \n\n```", "```js\nvar testableObject = { \n    testableFunction : function() { } \n}; \njasmine.spyOn(testableObject, 'testableFunction'); \n\ntestableObject.testableFunction(); \ntestableObject.testableFunction(); \ntestableObject.testableFunction(); \n\nconsole.log(testableObject.testableFunction.count); \n\n```", "```js\nvar testableObject = { \n    testableFunction : function() { return 'stub me'; } \n}; \n\n```", "```js\njasmine.spyOn(testableObject, 'testableFunction') \n.and \n.returnValue('stubbed value'); \n\n```", "```js\nvar testableObject = { \n    testableFunction : function() { return 'stub me'; } \n}; \n//before the return value is stubbed \nConsole.log(testableObject.testableFunction()); \n//displays 'stub me' \n\njasmine.spyOn(testableObject,'testableFunction') \n.and \n.returnValue('stubbed value'); \n\n//After the return value is stubbed \nConsole.log(testableObject.testableFunction()); \n//displays 'stubbed value' \n\n```", "```js\njasmine.spyOn(testableObject, 'testableFunction') \n.and \n.returnValues('first stubbed value', 'second stubbed value', 'third stubbed value'); \n\n```", "```js\njasmine.spyOn(testableObject, 'testableFunction') \n.and \n.returnValue('first stubbed value', 'second stubbed value', 'third stubbed value'); \n\n//After the is stubbed return values \nConsole.log(testableObject.testableFunction()); \n//displays 'first stubbed value' \nConsole.log(testableObject.testableFunction()); \n//displays 'second stubbed value' \nConsole.log(testableObject.testableFunction()); \n//displays 'third stubbed value' \n\n```", "```js\nvar testableObject = { \n    testableFunction : function(arg1, arg2) {} \n}; \n\n```", "```js\n            jasmine.spyOn(testableObject, 'testableFunction'); \n\n    ```", "```js\n        //Get the arguments for the first call of the function \n        var callArgs = testableObject.testableFunction\n        .call.argsFor(0); \n\n        console.log(callArgs); \n        //displays ['param1', 'param2'] \n\n```", "```js\nvar testableObject = { \n    testableFunction : function(arg1, arg2) {} \n}; \n//create the spy \njasmine.spyOn(testableObject, 'testableFunction'); \n\n//Call the method with specific arguments \n  testableObject.testableFunction('param1', 'param2'); \n\n//Get the arguments for the first call of the function \nvar callArgs = testableObject.testableFunction.call.argsFor(0); \n\nconsole.log(callArgs); \n//displays ['param1', 'param2'] \n\n```", "```js\nvar abc = function(z) { \n    var x = false; \n    if(z > 10) \n        return true; \n    return x; \n} \n\n```", "```js\n            var isTenOrGreater = function(value) { \n                var falseValue = false; \n                if(value > 10) \n                    return true; \n                return falseValue; \n            } \n\n    ```", "```js\n            var isTenOrGreater = function(value) { \n                return value > 10; \n            }; \n\n    ```", "```js\nvar book = { \n    id : null, \n    author : null, \n    dateTime : null \n}; \n\n```", "```js\n            var bookBuilder = function() {}; \n\n    ```", "```js\n            var bookBuilder = function() { \n                var _resultBook = { \n                    id: 1, \n                    author: 'Any Author', \n                    dateTime: new Date() \n                }; \n            } \n\n    ```", "```js\n            var bookBuilder = function() { \n                var _resultBook = { \n                    id: 1, \n                    author: \"Any Author\", \n                    dateTime: new Date() \n                }; \n                this.build = function() { \n                    return _resultBook; \n                } \n            } \n\n    ```", "```js\n            var bookBuilder = function() { \n                var _resultBook = { \n                    id: 1, \n                    author: 'Any Author', \n                    dateTime: new Date() \n                }; \n                this.build = function() { \n                    return _resultBook; \n                }; \n                this.setAuthor = function(author){ \n                    _resultBook.author = author; \n                }; \n            }; \n\n    ```", "```js\n            this.setAuthor = function(author) { \n                _resultBook.author = author; \n                return this; \n            }; \n\n    ```", "```js\n            this.setDateTime = function(dateTime) { \n                _resultBook.dateTime = dateTime; \n                return this; \n            }; \n\n    ```", "```js\nvar bookBuilder = new bookBuilder(); \n\nvar builtBook = bookBuilder.setAuthor('Ziaul Haq') \n.setDateTime(new Date()) \n.build(); \nconsole.log(builtBook.author); // Ziaul Haq \n\n```", "```js\nvar bookBuilder = function() { \n    var _resultBook = { \n        id: 1, \n        author: 'Any Author', \n        dateTime: new Date() \n    }; \n\n    this.build = function() { \n        return _resultBook; \n    }; \n\n    this.setAuthor = function(author) { \n        _resultBook.author = author; \n        return this; \n    }; \n\n    this.setDateTime = function(dateTime) { \n        _resultBook.dateTime = dateTime; \n        return this; \n    }; \n}; \n\n```", "```js\nvar validate = function(builtBookToValidate){ \n    if(!builtBookToValidate.author) { \n        return false; \n    } \n    if(!builtBookToValidate.dateTime) { \n        return false; \n    } \n    return true; \n}; \n\n```", "```js\nvar validBuilder = new bookBuilder().setAuthor('Ziaul Haq') \n.setDateTime(new Date()) \n.build(); \n\n// Validate the object with validate() method \nif (validate(validBuilder)) { \n    console.log('Valid Book created'); \n} \n\n```", "```js\nvar invalidBuilder = new bookBuilder().setAuthor(null).build(); \n\nif (!validate(invalidBuilder)) { \n    console.log('Invalid Book created as author is null'); \n} \n\nvar invalidBuilder = new bookBuilder().setDateTime(null).build(); \n\nif (!validate(invalidBuilder)) { \n    console.log('Invalid Book created as dateTime is null'); \n} \n\n```"]