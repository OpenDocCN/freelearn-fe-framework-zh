["```js\npnpm dlx nuxi@latest init weather-sky\n```", "```js\ncd weather-sky\ncode .\n```", "```js\npnpm i @nuxtjs/google-fonts\npnpm i @nuxt/ui\n```", "```js\nimport type { Config } from 'tailwindcss'\nexport default <Partial<Config>>{\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: ['Roboto', 'sans-serif']\n      },\n      container: {\n        center: true,\n        padding: {\n          DEFAULT: '1.5rem',\n          lg: '4rem',\n          xl: '4rem',\n          '2xl': '4rem'\n        },\n        screens: {\n          sm: '576px',\n          md: '768px',\n          lg: '992px',\n          xl: '1200px',\n          '2xl': '1400px'\n        }\n      }\n    }\n  }\n}\n```", "```js\nexport default defineNuxtConfig({\n  modules: ['@nuxt/ui', '@nuxtjs/google-fonts'],\n  googleFonts: {\n    families: {\n      Roboto: [100, 300, 400, 700, 900]\n    }\n  },\n})\n```", "```js\n<template>\n  <div class=\"bg-slate-100 dark:bg-slate-800 min-h-screen\n             py-4\">\n    <div class=\"text-3xl text-center\">Weather Sky</div>\n  </div>\n</template>\n```", "```js\nexport default defineAppConfig({\n  ui: {\n    primary: 'sky'\n  }\n})\n```", "```js\n<template>\n  <div class=\"bg-slate-100 min-h-screen\">\n    <u-container>\n      <u-card> weather sky </u-card>\n    </u-container>\n  </div>\n</template>\n```", "```js\nexport default defineAppConfig({\n  ui: {\n    primary: 'sky',\n    container: {\n      padding: 'py-6'\n    }\n  }\n})\n```", "```js\nexport default defineAppConfig({\n  ui: {\n    // ...other configurations...\n    card: {\n      base: 'overflow-visible mb-6',\n      shadow: 'shadow-none'\n    }\n  }\n})\n```", "```js\n<script setup lang=\"ts\">\nasync function citiesLookup(query : string) {\n  const apiKey = 'YOUR_API_KEY'; // Replace with your\n                                    actual API key\n  const response = await $fetch(\n    `http://api.openweathermap.org/geo/1.0/direct?q=\n    ${query}&limit=5&appid=${apiKey}`\n  );\n  return response;\n}\n</script>\n```", "```js\nconst data = await citiesLookup('London');\nconsole.log(data); // Outputs the response from the\n                      Geocoding API\n```", "```js\nexport {}\ndeclare global {\n  type CityData = {\n    name: string\n    lat: number\n    lon: number\n    country: string\n    state: string\n  }\n}\n```", "```js\nexport default defineNuxtConfig({\n  // …other configs\n  runtimeConfig: {\n    public: {\n      weatherApiKey: \"ENTER_YOUR_KEY_HERE\"\n    }\n  },\n})\n```", "```js\nasync function citiesLookup(query) {\n  const config = useRuntimeConfig()\n  const apiKey = config.public.weatherApiKey\n  const response = await $fetch(\n    `http://api.openweathermap.org/geo/1.0/direct?q=\n    ${query}&limit=5&appid=${apiKey}`\n  );\n  return response;\n}\n```", "```js\n<template>\n  <USelectMenu\n    v-model=\"activeCity\"\n    :searchable=\"citiesLookup\"\n    placeholder=\"Search for a city...\"\n  />\n</template>\n```", "```js\n<script setup lang=\"ts\">\nconst config = useRuntimeConfig()\nconst apiKey = config.public.weatherApiKey\nconst activeCity = ref()\nconst citiesLookup = async (query: string) => {\n  if (!query) return\n  const response: Array<CityData> = await $fetch(\n    `http://api.openweathermap.org/geo/1.0/direct?q=\n    ${query}&limit=5&appid=${apiKey}`\n  )\n  return response.map(city => ({\n    ...city,\n    label: `${city.name}, ${city.country}`\n  }))\n}\n</script>\n```", "```js\n<template>\n  <div class=\"bg-slate-100 min-h-screen\">\n    <u-container>\n      <u-card>\n        <h1 class=\"text-3xl font-bold text-center\n                  text-gray-700 mb-6\">\n          Weather Sky\n        </h1>\n        <p class=\"text-center text-gray-500 mb-4\">\n          Search for current weather data by city\n        </p>\n        <cities-lookup />\n      </u-card>\n    </u-container>\n  </div>\n</template>\n```", "```js\n<USelectMenu\n  v-model=\"activeCity\"\n  :searchable=\"citiesLookup\"\n  placeholder=\"Search for a city...\"\n  @update:modelValue=\"emit('change', $event)\"\n/>\n```", "```js\nconst emit = defineEmits(['change'])\n```", "```js\n<template>\n  <div class=\"bg-slate-100 dark:bg-slate-800 min-h-screen\">\n    <div class=\"container py-6\">\n      <u-card>\n        <h1 class=\"text-3xl font-bold text-center\n          mb-6\">Weather Sky</h1>\n        <p class=\"text-center text-gray-500 mb-4\">\n          Search for current weather data by city\n        </p>\n        <cities-lookup @change=\"onCityChanged\" />\n      </u-card>\n    </div>\n  </div>\n</template>\n```", "```js\n<script setup lang=\"ts\">\nconst onCityChanged = async (newCity : CityData) => {\n  console.log(newCity); // This will log the selected city\n                           data to the console.\n}\n</script>\n```", "```js\n<script setup lang=\"ts\">\nconst weatherData = ref()\nconst loading = ref(false)\nconst onCityChanged = async (activeCity: CityData) => {\n  const config = useRuntimeConfig()\n  const apiKey = config.public.weatherApiKey\n  loading.value = true\n  try {\n    weatherData.value = await $fetch(\n      `https://api.openweathermap.org/data/2.5/onecall?lat=\n      ${activeCity?.lat}&lon=${activeCity?.lon}&appid=\n      ${apiKey}&units=metric`\n    )\n    console.log(weatherData.value);\n  } catch (error) {\n    console.error('Error fetching weather data:', error)\n  }\n  loading.value = false\n}\n</script>\n```", "```js\npnpm i @pinia/nuxt\n```", "```js\n// https://nuxt.com/docs/api/configuration/nuxt-config\nexport default defineNuxtConfig({\n  // ...other config\n  modules: ['@nuxt/ui', '@nuxtjs/google-fonts',\n  '@pinia/nuxt'],\n})\n```", "```js\nimport { defineStore } from 'pinia'\nexport const useWeatherStore = defineStore('weather', () => {\n  return {  }\n})\n```", "```js\nimport { defineStore } from 'pinia'\nexport const useWeatherStore = defineStore('weather', () => {\n  const activeCity = ref<CityData>()\n  const weatherData = ref<WeatherDataResponse>()\n  return {  }\n})\n```", "```js\nconst config = useRuntimeConfig()\nconst apiKey = config.public.weatherApiKey\nconst citiesLookup = async (query: string):\nPromise<CityData[]> => {\n    if (!query) return []\n    const response: Array<CityData> = await\n    $fetch(`http://api.openweathermap.org/geo/1.0/direct?q=\n    ${query}&limit=5&appid=${apiKey}`)\n    return response.map(city => ({\n        ...city,\n        label: `${city.name}, ${city.country}`\n    }))\n}\n```", "```js\nconst getWeatherData = async () => {\n    try {\n        weatherData.value = await $fetch(\n            `https://api.openweathermap.org/data/2.5/\n            onecall?lat=${activeCity.value?.lat}&lon=\n            ${activeCity.value?.lon}&appid=${apiKey}&units=\n            metric`\n        )\n    } catch (error) {\n        console.error('Error fetching weather data:',\n                       error)\n    }\n}\n```", "```js\nreturn { activeCity, weatherData, citiesLookup,\ngetWeatherData }\n```", "```js\nimport { defineStore } from 'pinia'\nexport const useWeatherStore = defineStore('weather', () => {\n  const activeCity = ref<CityData>()\n  const weatherData = ref<WeatherDataResponse>()\n  const config = useRuntimeConfig()\n  const apiKey = config.public.weatherApiKey\n  const citiesLookup = async (query: string):\n  Promise<CityData[]> => {\n    const response: Array<CityData> = await $fetch(\n      `http://api.openweathermap.org/geo/1.0/direct?q=\n      ${query}&limit=5&appid=${apiKey}`\n    )\n    return response.map(city => ({\n      ...city,\n      label: `${city.name}, ${city.country}`\n    }))\n  }\n  const getWeatherData = async () => {\n    try {\n      weatherData.value = await $fetch(\n        `https://api.openweathermap.org/data/2.5/\n        onecall?lat=${activeCity.value?.lat}&lon=\n        ${activeCity.value?.lon}&appid=${apiKey}&units=\n        metric`\n      )\n    } catch (error) {\n      console.error('Error fetching weather data:', error)\n    }\n  }\n  return { activeCity, weatherData, citiesLookup,\n           getWeatherData }\n})\n```", "```js\n<script setup lang=\"ts\">\nconst weatherStore = useWeatherStore()\n// weatherStore now contains the all refs and functions\n</script>\n```", "```js\n<template>\n  <USelectMenu\n    v-model=\"activeCity\"\n    :searchable=\"weatherStore.citiesLookup\"\n    placeholder=\"Search for a city...\"\n    @update:modelValue=\"emit('change', $event)\"\n  />\n</template>\n```", "```js\nconst { activeCity } = weatherStore\n```", "```js\nstoreToRefs(weatherStore)\n```", "```js\n<template>\n  <USelectMenu\n    v-model=\"activeCity\"\n    :searchable=\"weatherStore.citiesLookup\"\n    placeholder=\"Search for a city...\"\n    @update:modelValue=\"emit('change', $event)\"\n  />\n</template>\n<script setup lang=\"ts\">\nconst weatherStore = useWeatherStore()\nconst { activeCity } = storeToRefs(weatherStore)\nconst emit = defineEmits(['change'])\n</script>\n```", "```js\n<script setup lang=\"ts\">\nconst weatherStore = useWeatherStore()\nconst { activeCity, weatherData } =\nstoreToRefs(weatherStore)\nconst loading = ref(false)\nconst onCityChanged = async () => {\n  loading.value = true\n  await weatherStore.getWeatherData()\n  loading.value = false\n}\n</script>\n```", "```js\n$ pnpm i dayjs\n```", "```js\n<!—components/emptyPlaceholder.vue -->\n<template>\n  <div class=\"w-full mx-auto mt-10\">\n    <div class=\"text-center p-12 border border-gray-300\n    rounded-lg shadow-sm\">\n      <p class=\"font-semibold text-xl\">\n        Weather data is not available yet. Please select a\n        city to display the weather information.\n      </p>\n    </div>\n  </div>\n</template>\n```", "```js\n<template>\n  <!-- city selection card  -->\n  <empty-placeholder v-if=\"!weatherData && !loading\" />\n</template>\n```", "```js\n<template>\n  <!-- city selection card  -->\n  <empty-placeholder v-if=\"!weatherData && !loading\" />\n  <div v-else-if=\"loading\" class=\"animate-pulse w-full\n  space-y-4\">\n    <div class=\"h-96 bg-slate-300 dark:bg-slate-900\n      rounded\" />\n    <div class=\"h-96 bg-slate-300 dark:bg-slate-900\n      rounded\" />\n  </div>\n</template>\n```", "```js\n<template>\n  <div class=\"text-center\">\n    <h2 class=\"text-4xl font-bold\">\n      {{ weatherData?.current.temp.toFixed(0) }}°\n    </h2>\n    <p class=\"text-xl\">\n      {{ weatherData?.current.weather[0].description }}\n    </p>\n    <img\n      :src=\"`http://openweathermap.org/img/wn/\n           ${weatherData?.current.weather[0].icon}@2x.png`\"\n      alt=\"Weather Icon\"\n      class=\"mx-auto\"\n    />\n  </div>\n</template>\n<script setup lang=\"ts\">\nconst weatherStore = useWeatherStore()\nconst { weatherData } = storeToRefs(weatherStore)\n</script>\n```", "```js\n<template>\n  <div\n    class=\"flex flex-col items-center min-w-[125px]\n    max-w-[125px] p-4 border-dashed border-2 bg-slate-50\n    dark:bg-slate-800 text-slate-700 dark:text-slate-300\n    rounded-lg\"\n  >\n    <p class=\"font-light text-lg\">\n      {{ dayjs(hour.dt * 1000).format('HH:mm') }}\n    </p>\n    <p class=\"text-2xl font-black\">\n      {{ hour.temp.toFixed(0) }}°C</p>\n    <img\n      :src=\"`http://openweathermap.org/img/wn/\n           ${hour.weather[0].icon}@2x.png`\"\n      alt=\"Weather Icon\"\n      class=\"w-12 h-12\"\n    />\n    <p class=\"text-sm mt-1\">\n      {{ hour.weather[0].description }}\n    </p>\n  </div>\n</template>\n<script setup lang=\"ts\">\nimport dayjs from 'dayjs'\ndefineProps<{ hour: HourlyWeather }>()\n</script>\n```", "```js\n<template>\n  <div\n    class=\"flex flex-col items-center p-4 border-dashed\n    border-2 bg-slate-50 dark:bg-slate-800 text-slate-700\n    dark:text-slate-300 rounded-lg\"\n  >\n    <p class=\"text-lg font-semibold\">\n      {{ dayjs(day.dt * 1000).format('dddd') }}\n    </p>\n    <img\n      :src=\"`http://openweathermap.org/img/wn/\n           ${day.weather[0].icon}@2x.png`\"\n      alt=\"Weather Icon\"\n      class=\"w-12 h-12\"\n    />\n    <p class=\"mt-1\">\n      {{ day.temp.day.toFixed(0) }}°C /\n      {{ day.temp.night.toFixed(0) }}°C\n    </p>\n  </div>\n</template>\n<script setup lang=\"ts\">\nimport dayjs from 'dayjs'\ndefineProps<{\n  day: DailyWeather\n}>()\n</script>\n```", "```js\n<template>\n    <!-- ... card for city lookup -->\n    <empty-placeholder v-if=\"!weatherData && !loading\" />\n    <div v-if=\"loading\" class=\"animate-pulse w-full\n    space-y-4\">\n      <div class=\"h-96 bg-slate-300 dark:bg-slate-900\n      rounded\" />\n      <div class=\"h-96 bg-slate-300 dark:bg-slate-900\n      rounded\" />\n    </div>\n    <u-card v-else-if=\"weatherData\">\n      <h1 class=\"text-3xl font-bold text-center mb-6\">\n        {{ activeCity?.name }}, {{ activeCity?.country }}\n      </h1>\n        <div class=\"space-y-6 mb-8\">\n          <!-- Current Weather -->\n          <current-weather-data />\n            <!-- Hourly Weather Slider -->\n            <div class=\"flex overflow-x-auto py-4\n            space-x-4\">\n              <hourly-weather-card\n                v-for=\"(hour, index) in weatherData.hourly\"\n                :key=\"index\"\n                :hour=\"hour\" />\n            </div>\n        </div>\n        <!-- 7 Day Forecast -->\n        <div class=\"p-4 rounded-lg\">\n          <h3 class=\"font-semibold text-center mb-4\">\n            7 Day Forecast\n          </h3>\n          <div class=\"grid grid-cols-1 md:grid-cols-2\n          lg:grid-cols-3 gap-4\">\n            <forecast-card\n              v-for=\"(day, index) in weatherData.daily\"\n              :key=\"index\"\n              :day=\"day\"\n            />\n          </div>\n        </div>\n    </u-card>\n</template>\n```"]