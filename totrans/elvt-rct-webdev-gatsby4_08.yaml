- en: '*Chapter 6*: Improving Your Site''s Search Engine Optimization'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn about how **search engine optimization** (**SEO**)
    works, what search engines look for within your site pages, and how to improve
    your site's presence on the web. We will also dive into other uses of metadata
    to make visually enticing social share previews for your site. By the end of this
    chapter, you will have created a reusable SEO component to provide meta information
    on every page. We will also create a sitemap to make it easier for search engines
    to understand our site. Finally, we will also learn how to stop our site from
    appearing in search engines if you would rather not have it publicly visible.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing SEO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an SEO component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring meta previews
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about XML sitemaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding your site from search engines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this chapter, you will need to have completed [*Chapter 5*](B15983_05_ePub_RK.xhtml#_idTextAnchor080),
    *Working with Images*.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter can be found at [https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter06](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter06).
  prefs: []
  type: TYPE_NORMAL
- en: Introducing SEO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SEO is the practice of improving the chances of search engines such as Google,
    Bing, and Yahoo, recommending your site's content to users as the best result
    for a given query or problem.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Within this chapter, you will get an overview of what SEO is, why it's important,
    and how to implement pages with components that boost their SEO ranking. SEO is
    a vast subject and not something that can be covered in its entirety within this
    book. As such, you are encouraged to take what you learn in this chapter and build
    on it through your research.
  prefs: []
  type: TYPE_NORMAL
- en: Google will be the search engine that this chapter focuses on. Google has a
    92% share of the search engine market worldwide. With all other search engines
    combined, taking less than a 10% share of the search engine market, there is no
    doubt that Google is dominating this space. Because of this, it is the logical
    search engine to gear this chapter toward.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want search engines to recommend your content, there is a trinity of
    tasks that need to be worked on in tandem:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring your content can be discovered by search engine web crawlers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing search engines that you're a trustworthy source of information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making your content user-friendly and inviting with a great UX, content hierarchy,
    and multimedia.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By investing time in implementing and improving these three things, the search
    engine will give you the most precious form of traffic – **organic traffic**.
    The best part? It's free! When Google shows your site as a part of a results page,
    you do not pay for its ranking or when it is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: So, what's in it for the search engine? Ads and sponsors. Whenever search users
    search on Google, you will also be presented with results from sponsors that have
    been paid for, and occasionally personalized ads too. This is how search engines
    make their money and to keep their revenue stream consistent, they need you to
    keep coming back. To do that, they need to make sure that they bring you the best
    possible content for your search so that you use them again for your next search.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand what search engines are looking for, let's learn about
    the important on-page signals that we can give to search engines to help them
    rank our site.
  prefs: []
  type: TYPE_NORMAL
- en: On-page search engine optimization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**On-page signals** are signals that a search engine can obtain from a site
    page. As your site pages are within your control, improving on-page signals is
    the easiest thing to get right and the easiest way to influence your site ranking.
    As a result, we will spend most of our time improving these signals in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: On-page signals can be split into two groups – technical and content signals.
  prefs: []
  type: TYPE_NORMAL
- en: Technical signals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Technical signals are those related to your site''s code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Speed**: Search engines want users to receive their results quickly, so pages
    that are fast receive a boost in ranking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile Responsiveness**: Most content on the web is consumed via mobile these
    days, so having a great mobile user experience is very important. Search engines
    are considering this more and more, with Google''s index now being mobile-first.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: Ensuring your website is secure improves your site''s credibility.
    For example, **HTTPS** sites receive a boost over **HTTP** sites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content signals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Content signals are those related to the copy and links present on your site
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Content Hierarchy**: The title, content headings, and page hierarchy are
    very important.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Page Content**: Google is always on the lookout for high-quality and accurate
    content that ultimately answers a user''s query. Keep this in mind when you''re
    creating pages and populating them. Your content needs to serve a real purpose
    for your site visitors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rich Content**: Google looks beyond the raw copy nowadays. The web is filled
    with multimedia content. Google is looking for content that contains images and
    videos instead of raw text. Multimedia content allows for better user interaction
    with your content and is therefore favored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recently Updated**: If the content within your pages has not been changed
    for a while, Google may treat its content as stale. Google is actively checking
    that the content of your page was created recently. By ensuring that your content
    is "fresh," Google can be sure your content is recent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Outbound links**: By referencing content externally, this tells Google that
    the information is accurate as it is like content contained on multiple sites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you might be starting to realize by looking at these signals, you can sink
    vast amounts of time into these factors. It's up to you to decide how valuable
    search ranking and social media sharing are for your site, which will, in turn,
    determine how much time you should focus on implementing what is within this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand what SEO is, let's turn our attention to how we can improve
    our on-page SEO ranking with an SEO component.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an SEO component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every site on the web has meta tags. Meta tags are snippets of text and image
    content that provide a summary of a web page. This data gets rendered in the browser
    whenever someone shares your site or when it appears within a search engine. Let''s
    create an SEO component so that we can have rich previews that entice users to
    visit our site:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the necessary dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`react-helmet-async` is a dependency that manages all the changes that are
    made to your document head.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Include the `gatsby-plugin-react-helmet-async` plugin in your `gatsby-config.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: import React from "react";
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: head within our React components and pages when required.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new file inside `src/components` called `SEO.js`. This is the file
    in which we will create our SEO component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the newly created file and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are adding the language as an HTML attribute. We also added the `title`
    tag, a title template, and a `description` as metadata. The title template is
    useful if you want to have a consistent format. Let's imagine that the title we
    are passing in is `Home`. In this case, the template's final page title would
    be `Home · My Site`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You are now ready to use your SEO component on your pages, so let''s try it
    out! We will use the `src/pages/index.js` file as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can see the component embedded within our index page. We have added
    the `title` and `description` props to ensure these can populate the `<title>`
    and `<description>` tags contained within the SEO component. If you run `gatsby
    develop` at this point, you should see the title of the tab change to match your
    new title.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also provide `title` and `description` using data from our GraphQL data.
    In our blog page template file (`src/templates/blog-page.js`), we could use the
    blog post''s `frontmatter` to populate the SEO component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are passing `title` and `desc` from `frontmatter` of the Markdown post
    to the SEO component so that it can use these pieces of information to generate
    the tags.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the basics set up, how do we enhance our site previews to make
    them more appealing within social media? Let's find out.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring meta previews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you've ever shared a website with a friend via Twitter, Slack, or any other
    instant messaging service, you probably saw a nice preview image, title, and description
    appear in a card to give the user insight into where you are sending them. This
    is achieved with meta tags.
  prefs: []
  type: TYPE_NORMAL
- en: We've already included a couple of these (`title` and `description` meta tags)
    within our search component, but here, we will implement two other common types
    – **OpenGraph** and Twitter metadata. We will then learn how to merge and validate
    these tags.
  prefs: []
  type: TYPE_NORMAL
- en: Open Graph metadata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Open Graph** is an internet protocol that was originally designed and created
    by Facebook with a single purpose – to unify and standardize metadata within web
    pages to get better representations of the content of the page. The protocol does
    this by adding specific meta tags to your site header. These tags provide details
    about the content of your site pages. This could include information as basic
    as the page''s title or maybe something more complex, such as how long a video
    on a page is. By populating the appropriate fields, we can create a bundled summary
    of what our site page looks like.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add Open Graph meta tags via our existing `SEO` component by adding
    them to the `meta` prop of the `Helmet` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are implementing Open Graph tags for the content's `title`, `description`,
    `type`, and `image`. As you can see, all open graph tags have the `og` prefix.
    These are just a few of the meta tags that are available via the protocol.
  prefs: []
  type: TYPE_NORMAL
- en: For a full list of all the available types, visit the Open Graph protocol website
    ([https://ogp.me](https://ogp.me)).
  prefs: []
  type: TYPE_NORMAL
- en: Twitter metadata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like Facebook, Twitter also decided to create its own meta tags like Open Graph.
    All Twitter tags use the `twitter` prefix instead of `og`. One thing that separates
    Twitter tags from Open Graph''s is that Twitter also has a tag for the content''s
    display format on its platform. The first type is `summary`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Twitter summary card'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.1_B15983.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 – Twitter summary card
  prefs: []
  type: TYPE_NORMAL
- en: '`summary` shows a small summary preview of the site page. If you are looking
    for something larger with an image preview, you can use the `summary_large_image`
    type instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Twitter summary card with a large image'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.2_B15983.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 – Twitter summary card with a large image
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, this type shows a larger image that is much more enticing to
    the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add Twitter meta tags via our existing `SEO` component by adding them
    to the `meta` prop of the `Helmet` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Though many of these tags are self-explanatory, it is worth calling out the
    `twitter:creator` tag. If you place your Twitter username as the content for this
    property, Twitter will be able to identify you as the creator of the site.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have implemented both Open Graph and Twitter meta tags, let's combine
    and merge the two.
  prefs: []
  type: TYPE_NORMAL
- en: Merging tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may have noticed that there is a little bit of duplication between the data
    we are providing via Twitter tags and Open Graph tags. For example, in both cases,
    we are providing a title (`twitter:title` and `og:title`). There is no harm in
    including these duplicates. Only a few bytes are added to your page by including
    this redundancy.
  prefs: []
  type: TYPE_NORMAL
- en: But if you would like to keep things clean, it is possible to reduce the number
    of tags. Twitter scrapes your site page – if it does not find the Twitter tag
    it is looking for, it will fall back to the Open Graph tags if they are present.
    This is great for duplicates such as the title and description, but it is still
    important to include those tags that are Twitter-specific, such as the card type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s merge the Open Graph and Twitter tags we found in the previous
    two sections to create a subset that serves both formats without redundancy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see that we have completely omitted the Twitter tags for `title`,
    `description`, and `image` as they will fall back to the Open Graph tags. We have,
    however, retained the Twitter tags for `creator` and `card` as they are not available
    via Open Graph.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how to make our site look great when we share it, what
    about when it is shared for us by a search engine? How do we highlight the information
    we want it to care about?
  prefs: []
  type: TYPE_NORMAL
- en: Validating tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Regardless of whether you have implemented Open Graph tags, Twitter tags, or
    both, you will want to ensure that your tags are working correctly before sharing
    your site pages online. Both Facebook and Twitter have created applications to
    preview how links that are shared on their platforms will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Twitter Card Validator: [https://cards-dev.twitter.com/validator](https://cards-dev.twitter.com/validator)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Facebook Sharing Debugger: [https://developers.facebook.com/tools/debug](https://developers.facebook.com/tools/debug)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These tools perform a very similar function – they scrape the web page that's
    entered for any relevant meta tags that you have defined. Then, they display what
    a preview of the site would look like on their platform using these tags. There
    are also third-party services that will validate for both of these platforms at
    the same time, such as MetaTags.io ([https://metatags.io](https://metatags.io)).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The validators mentioned here only work with sites that are hosted on public
    servers. You will not be able to test your meta tags using these without deploying
    your site first. You will learn more about how to deploy your site in [*Chapter
    9*](B15983_09_ePub_RK.xhtml#_idTextAnchor127), *Deployment and Hosting*.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you should feel comfortable with creating and testing meta tags.
    Now, let's turn our attention to how we can make our site easier for web crawlers
    to interpret.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about XML sitemaps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A sitemap is a special file that provides information about the web pages and
    files on your site, as well as their relationships. Creating this file allows
    web crawlers to gather information about your site without having to crawl your
    site manually. It helps us highlight to search engines which pages we specifically
    want them to look at. Let''s create a sitemap for our site:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `gatsby-plugin-sitemap` dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update your `gatsby-config.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By including this plugin, Gatsby will automatically create a sitemap when building
    the site. It's important to remember that this plugin only generates output when
    running in production. When you're using `gatsby develop`, you will not see your
    sitemap file being created. Only when the `gatsby build` command is running will
    the sitemap file be created.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that we have followed those steps, let''s verify our implementation. Run
    `gatsby build && gatsby serve` and navigate to `/sitemap/sitemap-index.xml` on
    your site. This page should show you some **XML** data that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This page is the index of your sitemap and tells search engines where to find
    your site data. In your case, you will probably see a single entry, similar to
    the one shown in the preceding code block. If you follow the path in the `<loc>`
    tag `(/sitemap/sitemap-0.xml`), you will find something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In this list, you should see an entry for each page on the site, with a `changefreq`
    and a `priority`. If the site pages appear in this list, then Google can find
    information about your pages without having to manually crawl your site. Congratulations!
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Your site's 404 page and its development variants are always excluded from the
    sitemap, so you don't have to worry about filtering these pages out.
  prefs: []
  type: TYPE_NORMAL
- en: Google has built a great tool for validating your sitemap, as well as other
    search analytics – Google Search Console. You can use it to check your site's
    indexing status and optimize the visibility of your site based on which queries
    are driving traffic to your website. You can try it out by visiting [https://search.google.com/search-console/about](https://search.google.com/search-console/about).
  prefs: []
  type: TYPE_NORMAL
- en: We now understand how to make it easy for Google to find and display our site,
    but what if we want to do the opposite and stop our site from appearing in search
    engines? We'll look at this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Hiding your site from search engines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To prevent your page from appearing within Google and other search engines,
    you must update the `<head>` property of the page so that it includes the following
    meta tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: By including a `noindex` meta tag, crawlers that crawl that page and see the
    tag will drop the page from their search results. This happens regardless of whether
    the site is being linked to any other site on the internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Much like our `SEO` component, we could make this addition to a component so
    that we can reuse it across the pages when needed:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file in `src/components/layout` called `NoRobots.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the newly created file and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This component adds the `noindex` metadata to `head` when it's included on any
    page. Using this component in this way gives us the flexibility to make a few
    pages hidden while still allowing the rest to be indexed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To hide static resources such as images within your site from search engines,
    we need to include a `robots.txt` file. This file is used by search engine crawlers
    to determine which parts of your site it can access. There is a plugin called
    `gatsby-plugin-robots-txt` that has been set up to make creating this file painless.
    Let''s implement this plugin now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `gatsby-plugin-robots-txt` dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update your `gatsby-config.js` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We now have a clear understanding of how to omit both pages and assets from
    search engines.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned what SEO is and what signals search engines use
    to identify quality content. We created an `SEO` component that we can use to
    add meta information to our site pages. Then, we enhanced this with Open Graph
    and Twitter meta tags for better site previews on social media platforms. We also
    implemented a sitemap to help search engines index our site effectively. Finally,
    we learned how to hide our site from search engines.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to test and audit our site. We will also
    explore how to audit our site page's SEO. By learning how to audit our site pages,
    we can identify ways to improve the speed of our pages too, which will also boost
    our SEO ranking.
  prefs: []
  type: TYPE_NORMAL
