- en: Chapter 4. Buttons and Content Formatting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章。按钮和内容格式化
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Scripting a dynamically added button
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写动态添加按钮的脚本
- en: Using a custom icon in a button
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在按钮中使用自定义图标
- en: Adding a custom icon sprite
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加自定义图标精灵
- en: Replacing the default icon sprite
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 替换默认的图标精灵
- en: Using alternate icons in a collapsible
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在可折叠区域中使用替代图标
- en: Creating a nested accordion
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建嵌套的手风琴
- en: Creating a custom layout grid
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义布局网格
- en: Using XML content
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 XML 内容
- en: Using JSON content
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 JSON 内容
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In a jQuery Mobile app, you can add buttons, form controls, and lists as the
    page content of your app. The page content is a `div` container with the attribute
    `data-role="content"`. You can display data and format it using the ready styles
    and layouts that are provided by the framework. You can group and display data
    in **collapsible blocks** and in **collapsible sets** or **accordions** . You
    can show data in multiple columns using the **Layout Grid** . You can also use
    the table and other HTML elements in your app.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 jQuery Mobile 应用中，你可以将按钮、表单控件和列表添加为应用的页面内容。页面内容是一个带有属性`data-role="content"`的`div`容器。你可以使用框架提供的就绪样式和布局显示数据并格式化数据。你可以以**可折叠块**和**可折叠集**或**手风琴**的形式分组和显示数据。你可以使用**布局网格**在多列中显示数据。你还可以在你的应用程序中使用表格和其他
    HTML 元素。
- en: Scripting a dynamically added button
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写动态添加按钮的脚本
- en: Buttons are standard HTML form elements that are enhanced by the **button plugin**
    in the jQuery Mobile framework to make them finger friendly and also to look good
    in a wide variety of mobile devices. You can add buttons to your app by using
    the `<button>` tag or the `<input>` tag. You can also style the anchor element
    as a button by adding the `data-role="button"` attribute to it. This recipe shows
    you how to dynamically add a button to a page using JavaScript and bind an action
    to this newly added button.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮是标准的 HTML 表单元素，在 jQuery Mobile 框架中通过**按钮插件**进行增强，使其易于触摸操作，并在各种移动设备上具有良好的外观。你可以使用
    `<button>` 标签或 `<input>` 标签向你的应用程序中添加按钮。你也可以通过将`data-role="button"`属性添加到锚元素来将锚元素样式化为按钮。本配方向你展示了如何使用
    JavaScript 动态添加按钮到页面并绑定动作到这个新添加的按钮。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/04/dynamic-button` sources
    folder. You can launch this code using the URL `http://localhost:8080/04/dynamic-button/main.html`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/04/dynamic-button`源文件夹复制此配方的全部代码。你可以使用网址`http://localhost:8080/04/dynamic-button/main.html`来启动此代码。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In `main.html`, create the `#main` page and add a button to it. When you click
    on this button, use JavaScript and create a second button and also assign an action
    to it:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.html`中，创建`#main`页面并添加一个按钮。当你点击这个按钮时，使用 JavaScript 创建第二个按钮并为其分配一个动作：
- en: 'Create the `#main` page in `main.html` and add the following code content to
    it:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.html`中创建`#main`页面，并将以下代码内容添加到其中：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Add the following script to handle the `click` event of the button. In the callback
    function, create the new button and also assign an action to it.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本添加到处理按钮的`click`事件中。在回调函数中，创建新按钮并为其分配一个动作。
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Add `#page2` as given in the following code. This is a multi-page document.
    This page is opened when you click the dynamically added button.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据以下代码添加`#page2`。这是一个多页面文档。当你点击动态添加的按钮时，此页面将被打开。
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Create `main.html` with a page `#main` and add a button with `id="addContentBtn"`
    to the page content. Also add an empty `div` container, `id="newcontent"` to the
    page. When you load this page, you will see only one button with text **Click
    to add new button** displayed on the screen.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.html`中创建一个带有页面`#main`的页面，并在页面内容中添加一个带有`id="addContentBtn"`的按钮。还在页面上添加一个空的`div`容器，`id="newcontent"`。当你加载这个页面时，你只会看到一个按钮，上面显示着**点击添加新按钮**的文本。
- en: Next add the given script. Add a `pageinit` event handler that gets invoked
    after the page has been initialized. Here, bind the `click` event of the button
    to a callback function. In the callback function, add an anchor link with `data-role="button"`
    to the empty `"#newcontent"` div. Since the page is already initialized, you have
    to explicitly call the `create` method to trigger the framework to revisit this
    link and enhance it to a button. Now when you click on the first button, you will
    see that the second button, **Disable 1st button and Go to Page 2**, is created
    and displayed. In the script also add code to bind the `click` event of the new
    button to a callback function. Here, invoke the `disable` method on the first
    button.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来添加给定的脚本。添加一个`pageinit`事件处理程序，该处理程序在页面初始化后被调用。在这里，将按钮的`click`事件绑定到一个回调函数。在回调函数中，将具有`data-role="button"`的锚链接添加到空的`"#newcontent"`
    div中。由于页面已经初始化，你必须显式调用`create`方法来触发框架重新访问此链接并将其增强为按钮。现在当你点击第一个按钮时，你会看到第二个按钮，**禁用第一个按钮并转到第2页**，被创建并显示。在脚本中还添加代码来绑定新按钮的`click`事件到一个回调函数。在这里，调用第一个按钮的`disable`方法。
- en: Finally create a new page with `id="page2"` that will get opened when you click
    on the new button. Add the `data-add-back-btn="true"` to `#page2` to provide a
    **Back** button to help navigate back to the `#main` page. Now when you click
    on the second button, the dynamically added script gets invoked and the first
    button is disabled and the page navigates to open `page2`. You can click on the
    **Back** button in `page2` and go back to the `#main` page. You will see that
    the first button is now disabled by the dynamic script that you had added.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最后创建一个`id="page2"`的新页面，当你点击新按钮时会打开该页面。将`#page2`添加`data-add-back-btn="true"`以提供一个**返回**按钮，帮助导航回`#main`页面。现在当你点击第二个按钮时，动态添加的脚本会被调用，第一个按钮被禁用，并且页面导航到打开`page2`。你可以点击`page2`上的**返回**按钮回到`#main`页面。你会发现，你之前添加的动态脚本已经禁用了第一个按钮。
- en: There's more...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The button plugin also provides methods to `enable`, `disable`, and `refresh`
    the button:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮插件还提供了`enable`、`disable`和`refresh`按钮的方法：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Button options
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按钮选项
- en: Buttons provide numerous markup options using the `data-` attributes. They are
    **corners** (`data-corners`), **icon** (`data-icon`), **iconpos** (`data-iconpos`),
    **shadow** (`data-shadow`), **iconshadow** (`data-iconshadow`), **inline** (`data-inline`),
    and **theme** (`data-theme`).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮使用`data-`属性提供许多标记选项。它们是**corners**（`data-corners`）、**icon**（`data-icon`）、**iconpos**（`data-iconpos`）、**shadow**（`data-shadow`）、**iconshadow**（`data-iconshadow`）、**inline**（`data-inline`）和**theme**（`data-theme`）。
- en: 'You can call the `buttonMarkup` method on an anchor link to enhance it as a
    button. The following line of code takes a native anchor link and adds the button
    role to it and also sets the `data-icon="alert"` and `data-inline="true"` attributes:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以调用`buttonMarkup`方法来增强锚链接以将其作为按钮使用。以下代码行接受原生锚链接，并将按钮角色添加到它，并设置`data-icon="alert"`和`data-inline="true"`属性：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Using a custom icon in a button
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在按钮中使用自定义图标
- en: Buttons can contain text, icons, or both. The icon can be positioned in one
    of the four directions within a button. The jQuery Mobile framework provides a
    set of standard icons that you can use in your app. This recipe shows you how
    to add a custom icon to a button along with the standard icon provided by the
    framework.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮可以包含文本、图标或两者兼有。图标可以在按钮内的四个方向中的一个位置。jQuery Mobile框架提供了一组标准图标，你可以在你的应用中使用。这个示例向你展示了如何向按钮添加自定义图标以及框架提供的标准图标。
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/04/custom-icon` sources folder.
    You can launch this code using the URL `http://localhost:8080/04/custom-icon/main.html`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/04/custom-icon`源文件夹中复制这个示例的完整代码。你可以使用URL`http://localhost:8080/04/custom-icon/main.html`启动这个代码。
- en: How to do it...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '操作方法...  '
- en: 'In this recipe, the following image, `square.png` is used for the custom icon
    image:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，使用了名为`square.png`的自定义图标：
- en: '![How to do it...](img/7225_04_01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![操作方法...](img/7225_04_01.jpg)'
- en: 'Create a new style sheet `jqm-icon.css` and define the custom icon style as
    in the following code:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的样式表`jqm-icon.css`，并按照以下代码定义自定义图标样式：
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Include the CSS in the `<head>` section of `main.html`, as shown in the following
    code:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.html`的`<head>`部分包含CSS，如下所示：
- en: '[PRE6]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Use the custom icon with a submit button and with the following different themes.
    Add the default `"home"` icon as well, for comparison.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用自定义图标与提交按钮，并使用以下不同的主题。也添加默认的`"home"`图标以进行比较。
- en: '[PRE7]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Create a `jqm-icon.css` stylesheet and add a new icon class in it, `ui-icon-square`.
    Specify the `background-image` property and point it to the image file to be used.
    Specify the `background` color for the icon and also specify the background color
    for the **icon disc** with opacity as shown. Here, the prefix text **ui-icon**
    indicates to the button plugin that this is a custom icon and this generates a
    `square` class. You can now use the `data-icon="square"` attribute in a button
    and the framework will fetch and display the `square` icon on the button.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `jqm-icon.css` 样式表，并在其中添加一个新的图标类 `ui-icon-square`。指定 `background-image`
    属性并将其指向要使用的图像文件。为图标指定 `background` 颜色，并为具有透明度的 **图标圆盘** 指定背景颜色，如所示。这里，前缀文本 **ui-icon**
    表示按钮插件，这是一个自定义图标，并生成一个 `square` 类。现在，您可以在按钮中使用 `data-icon="square"` 属性，框架将获取并显示按钮上的
    `square` 图标。
- en: Create `main.html`, add submit buttons using input tags, and set icons to these
    buttons using the `data-icon` attribute. First use the default `home` icon and
    then use the newly added custom `square` icon, with and then without text. For
    a detailed comparison you can add multiple buttons using the different theme swatches
    (`data-theme="a"` to `data-theme="e"`). The end result is as shown in the following
    image. The custom icon looks as good as the default one.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `main.html`，使用 input 标签添加提交按钮，并使用 `data-icon` 属性为这些按钮设置图标。首先使用默认的 `home`
    图标，然后使用新添加的自定义 `square` 图标，有时带文本，有时不带文本。为了进行详细比较，您可以添加多个按钮，使用不同的主题色板（`data-theme="a"`
    到 `data-theme="e"`）。最终结果如下图所示。自定义图标看起来和默认图标一样好。
- en: '![How it works...](img/7225_04_02.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_04_02.jpg)'
- en: There's more...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: The icon `.ui-icon-square` defined in the CSS is of standard resolution. Most
    of the new devices support HD resolution today. So to make it work on HD resolutions,
    you can create a new high resolution image, `square-HD.png` of 36 x 36 pixels
    size. Use this image in a `@media` query as shown in the CSS and specify the target
    device resolutions that this high resolution icon should work on. For more details
    about the `@media` query, see [http://jquerymobile.com/demos/1.1.1/docs/buttons/buttons-icons.html](http://jquerymobile.com/demos/1.1.1/docs/buttons/buttons-icons.html).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 中定义的图标 `.ui-icon-square` 是标准分辨率的。今天大多数新设备都支持高清分辨率。因此，为了在高清分辨率上正常工作，您可以创建一个新的高分辨率图像，`square-HD.png`，尺寸为
    36 x 36 像素。在 CSS 中使用这个图像，并在 `@media` 查询中指定此高分辨率图标应该适用的目标设备分辨率。有关 `@media` 查询的更多详细信息，请参见
    [http://jquerymobile.com/demos/1.1.1/docs/buttons/buttons-icons.html](http://jquerymobile.com/demos/1.1.1/docs/buttons/buttons-icons.html)。
- en: For the standard resolution custom icon, use images of 18 x 18 pixels size saved
    in a **PNG-8** format with alpha transparency. Set its alpha value to `0.4` and
    the background color to `#666`. Now your icons will look similar to the default
    icons provided by the framework.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于标准分辨率的自定义图标，请使用尺寸为 18 x 18 像素的图片，以 **PNG-8** 格式保存，并设置透明度为 `0.4`，背景颜色为 `#666`。现在你的图标将看起来与框架提供的默认图标类似。
- en: Using data-inline
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 data-inline
- en: By default, the button is stretched to fit the width of its container. You can
    specify the attribute `data-inline="true"` to show the button in its compact mode.
    You can also add multiple inline buttons next to each other in the same row.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，按钮会拉伸以适应其容器的宽度。您可以指定属性 `data-inline="true"` 来显示按钮的紧凑模式。您还可以在同一行中相邻放置多个内联按钮。
- en: Using data-iconpos
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 data-iconpos
- en: A button can be associated with an icon image by using the `data-icon="home"`
    attribute. Here, `"home"` is the name of the icon being used. The `data-iconpos`
    attribute can be used to specify where the icon should be displayed in the button.
    The possible values are `top`, `bottom`, `left`, and `right`. Using the `data-iconpos="notext"`
    attribute hides the text completely and resizes the button to show only the icon.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `data-icon="home"` 属性，按钮可以与图标图像关联。这里，`"home"` 是所使用的图标的名称。`data-iconpos`
    属性可用于指定图标应显示在按钮的何处。可能的值为 `top`、`bottom`、`left` 和 `right`。使用 `data-iconpos="notext"`
    属性完全隐藏文本，并调整按钮大小以仅显示图标。
- en: Using shadows and corners with buttons
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用阴影和按钮的圆角
- en: Buttons use rounded corners by default and this can be controlled using the
    Boolean attribute `data-corners`. Shadows are also enabled by default for the
    button and its icon. This can be controlled by using the attributes `data-shadow`
    and `data-iconshadow`. The `data-corners`, `data-shadow`, and `data-iconshadow`
    attributes are all Boolean and take `true` or `false` values.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮默认使用圆角，可以使用布尔属性`data-corners`进行控制。阴影也默认启用了按钮及其图标。这可以通过使用属性`data-shadow`和`data-iconshadow`进行控制。`data-corners`、`data-shadow`和`data-iconshadow`属性都是布尔类型的，可以取`true`或`false`值。
- en: See also
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Adding a custom icon sprite* recipe
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加自定义图标精灵*示例'
- en: The *Replacing the default icon sprite* recipe
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*替换默认图标精灵*示例'
- en: Adding a custom icon sprite
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加自定义图标精灵
- en: The jQuery Mobile framework uses a default **icon sprite** and derives all the
    icons from it. This recipe shows you how to add a custom icon sprite, with the
    **divide** and **equals** icons, to the default standard icon set, together forming
    the keys of a calculator. The standard icon set already has the **plus**, **minus**,
    and **delete** (**multiply**) icons.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile 框架使用默认的**图标精灵**并从中派生所有图标。本示例向您展示如何向默认标准图标集中添加一个自定义图标精灵，其中包含**除法**和**等于**图标，形成一个计算器的键。标准图标集已经包含**加**、**减**和**删除**（**乘**）图标。
- en: Getting ready
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/04/add-icon-sprite` sources
    folder. You can launch this code using the URL `http://localhost:8080/04/add-icon-sprite/main.html`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/04/add-icon-sprite`源文件夹中复制此示例的完整代码。您可以使用 URL`http://localhost:8080/04/add-icon-sprite/main.html`启动此代码。
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'In this recipe, the following image, `calc-sprite.png` provides the divide
    and equals icons:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，下面的图像`calc-sprite.png`提供了除法和等于图标：
- en: '![How to do it...](img/7225_04_03.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现...](img/7225_04_03.jpg)'
- en: 'Create a new `jqm-sprite.css` stylesheet and define the classes `.ui-icon-divide`
    and `.ui-icon-equals` for the new icons derived from the custom icon sprite:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`jqm-sprite.css`样式表，并为从自定义图标精灵派生的新图标定义类`.ui-icon-divide`和`.ui-icon-equals`：
- en: '[PRE8]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Include the CSS in the `<head>` section of `main.html`, as shown in the following
    code:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 CSS 包含在`main.html`的`<head>`部分中，如以下代码所示：
- en: '[PRE9]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Use the new icons derived from the custom icon sprite along with the default
    icons as shown in the following code. Display the buttons with text first:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用从自定义图标精灵派生的新图标以及默认图标，如以下代码所示。首先显示带有文本的按钮：
- en: '[PRE10]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then display the buttons without text for comparison:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，显示没有文本的按钮以进行比较：
- en: '[PRE11]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Create a stylesheet `jqm-sprite.css` and add new icon classes `.ui-icon-divide`
    and `.ui-icon-equals` in it. Specify the `background-image` property and point
    it to the image file to be used as the icon sprite. Next specify the `background`
    colors for the icon and for the **icon disc** with opacity as shown. Also specify
    a `border-radius` of `9px` for the icons. The vendor prefixes are added to ensure
    this works on various browser platforms. Finally, define the position for each
    of the new icons within the icon sprite as shown in the last two lines of the
    CSS file. Add the `@media` query to specify the target device resolutions that
    the icons should work on; this is explained earlier in this chapter in the *Using
    a custom icon in a button* recipe.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个样式表`jqm-sprite.css`，并在其中添加新的图标类`.ui-icon-divide`和`.ui-icon-equals`。指定`background-image`属性并将其指向要用作图标精灵的图像文件。接下来指定图标和**图标圆盘**的`background`颜色，并指定透明度，如所示。还为图标指定`border-radius`为`9px`。添加供应商前缀以确保它在各种浏览器平台上工作。最后，在
    CSS 文件的最后两行中定义每个新图标在图标精灵中的位置。添加`@media`查询以指定图标应在其中工作的目标设备分辨率；这在本章早期的*在按钮中使用自定义图标*示例中已经解释过了。
- en: Here, the prefix text **ui-icon** indicates to the button plugin that these
    are custom icons and this generates the corresponding classes without the prefix
    text. You can now use the new icons on buttons using the attributes `data-icon="divide"`
    or `data-icon="equals"`, and the framework will fetch and display the correct
    custom icon.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，前缀文本**ui-icon**指示按钮插件这些是自定义图标，这将生成相应的类，不带前缀文本。现在，您可以使用属性`data-icon="divide"`或`data-icon="equals"`在按钮上使用新图标，框架将获取并显示正确的自定义图标。
- en: 'In `main.html`, create the buttons of a simple calculator by adding submit
    buttons using input tags. Set icons to these buttons using the `data-icon` attribute
    as shown. Display the buttons with and without text for comparison. Here, the
    **plus**, **minus**, and **delete** icons are from the default icon sprite. The
    custom icon sprite contributes the **divide** and **equals** icons. The screen
    is displayed as shown in the following image:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.html`中，通过添加使用输入标签的提交按钮创建一个简单计算器的按钮。使用`data-icon`属性设置这些按钮的图标，如下所示。为了比较，显示有文本和无文本的按钮。这里，**加**，**减**和**删除**图标来自默认图标精灵。自定义图标精灵贡献了**除以**和**等于**图标。屏幕显示如下图所示：
- en: '![How it works...](img/7225_04_04.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_04_04.jpg)'
- en: There's more...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: For creating an icon sprite, use a PNG image with a height of `18px`. The total
    width is a multiple of `18px` multiplied by the number of icons in the sprite.
    An alpha value of `0.4` and a background color of `#666` are used by the default
    icon sprite. Use the same in your custom sprite to maintain a consistent look
    with the default icons. Save the image in a **PNG-8** format with alpha transparency.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个图标精灵，使用高度为`18px`的PNG图像。总宽度是图标精灵中图标数量乘以`18px`的倍数。默认图标精灵使用`0.4`的alpha值和`#666`的背景颜色。为了与默认图标保持一致的外观，使用相同的设置来创建您的自定义图标精灵。将图像保存为带有alpha透明度的**PNG-8**格式。
- en: Specifying an invalid icon name
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定无效的图标名称
- en: In the code, if you specify an invalid icon name, say `data-icon="random"`,
    the framework prefixes this with the text `.ui-icon-`and tries to look the class
    up in the stylesheet. If this is not resolved to a valid icon, the framework now
    picks up the first icon from the default icon sprite and displays the same instead.
    The first icon in the default sprite is the `plus` icon and is used in all places
    where the icon name cannot be resolved.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，如果指定一个无效的图标名称，比如`data-icon="random"`，框架会在文本前面添加`.ui-icon-`并尝试在样式表中查找该类。如果这不能解析为有效的图标，则框架现在会从默认图标精灵中选择第一个图标并显示出来。默认精灵中的第一个图标是`plus`图标，并且在无法解析图标名称的所有位置都使用它。
- en: See also
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Replacing the default icon sprite* recipe
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*替换默认图标精灵*配方'
- en: The *Using a custom icon in a button* recipe
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在按钮中使用自定义图标*配方'
- en: Replacing the default icon sprite
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替换默认图标精灵
- en: This recipe shows you how to replace the default icon sprite provided with jQuery
    Mobile and use your own instead. The custom icon sprite used here contains icons
    which form the six faces of a dice.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方向您展示了如何替换jQuery Mobile提供的默认图标精灵并使用您自己的图标精灵。此处使用的自定义图标精灵包含形成骰子六个面的图标。
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/04/replace-icon-sprite` sources
    folder. You can launch this code using the URL `http://localhost:8080/04/replace-icon-sprite/main.html`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/04/replace-icon-sprite`源文件夹中复制此配方的完整代码。您可以使用URL `http://localhost:8080/04/replace-icon-sprite/main.html`启动此代码。
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: In this recipe, the following image, `dice.png` is an icon sprite with six icons
    for the six faces of a dice. This icon sprite is used to replace the default icon
    sprite.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，下面的图像，`dice.png`是一个包含六个骰子面图标的图标精灵。这个图标精灵用于替换默认图标精灵。
- en: '![How to do it...](img/7225_04_05.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/7225_04_05.jpg)'
- en: 'Create a new stylesheet `jqm-sprite.css` and redefine the default `.ui-icon`
    class available with jQuery Mobile framework. Replace the default icon classes
    with new classes for the icons derived from the custom icon sprite as shown in
    the following code:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的样式表`jqm-sprite.css`，并重新定义jQuery Mobile框架中可用的默认`.ui-icon`类。将默认图标类替换为从自定义图标精灵派生的新类，如下所示的代码所示：
- en: '[PRE12]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Include the CSS in the `<head>` section of `main.html`, as shown in the following
    code:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.html`的`<head>`部分包含CSS，如下所示的代码：
- en: '[PRE13]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Use the new icons derived from the replaced icon sprite to display the six
    faces of the dice as shown in the following code. Display the buttons with text:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用替换的图标精灵派生的新图标来显示骰子的六个面，如下所示的代码。显示带文本的按钮：
- en: '[PRE14]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then display the buttons without text for comparison:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后显示无文本的按钮以进行比较：
- en: '[PRE15]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Create a stylesheet `jqm-sprite.css` and copy the code snippet for the `.ui-icon`
    class as is from the `jquery.mobile.css` file. Change the `background-image` URL
    of the icon sprite to point to the custom icon sprite `dice.png` image. Add the
    individual icon classes with the names `.ui-icon-one` to `.ui-icon-six`. Specify
    the positions of these icons in the icon sprite. The class `.ui-icon` already
    specifies the `background` colors for the icons. It also specifies a border radius
    of `9px` for the icons with the required vendor prefixes. Modify the `@media`
    query and update the names of the new icons instead of the default icons as shown.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个样式表 `jqm-sprite.css`，并从 `jquery.mobile.css` 文件中直接复制代码片段以保持不变。将图标精灵的 `background-image`
    URL 更改为指向自定义图标精灵 `dice.png` 图像。添加名为 `.ui-icon-one` 到 `.ui-icon-six` 的单个图标类。指定这些图标在图标精灵中的位置。类
    `.ui-icon` 已经为图标指定了 `background` 颜色。它还为需要的供应商前缀指定了图标的 `border radius` 为 `9px`。修改
    `@media` 查询并更新新图标的名称，而不是默认图标，如所示。
- en: Here, the prefix text **ui-icon** indicates to the button plugin that these
    are custom icons and this generates the corresponding classes without the prefix
    text. You can now use the replaced icons on buttons using the attributes `data-icon="one"`
    to `data-icon="six"` and the framework will fetch and display the correct custom
    icon.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，前缀文本 **ui-icon** 表示按钮插件，这些是自定义图标，这将生成相应的类而不包含前缀文本。您现在可以使用属性 `data-icon="one"`
    至 `data-icon="six"` 在按钮上使用替换的图标，框架将获取并显示正确的自定义图标。
- en: 'In `main.html`, create the buttons for the six faces of a dice by adding submit
    buttons using input tags. Set icons to these buttons using the `data-icon` attribute
    as shown. Display the buttons with and without text for comparison. The buttons
    for the six faces of a dice are now displayed as shown in the following screenshot,
    first with text and then without text:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，通过使用 input 标签添加提交按钮来创建骰子的六个面的按钮。使用 `data-icon` 属性为这些按钮设置图标，如所示。显示带文本和不带文本的按钮进行比较。骰子的六个面的按钮现在显示如下屏幕截图所示，首先是带有文本的，然后是不带文本的：
- en: '![How it works...](img/7225_04_06.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_04_06.jpg)'
- en: There's more...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe shows you how to replace the default icon sprite with your own custom
    icon sprite. You will no longer be able to use the default icons in your application.
    So replace the default icon set only if you have a valid reason to do it and if
    your app requires customization of all the icons. A better approach is to add
    a custom sprite along with the default sprite as shown in the previous recipe.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方向您展示如何用自己的自定义图标精灵替换默认的图标精灵。您将不能再在您的应用程序中使用默认的图标。所以，只有在您有充分的理由并且您的应用程序需要定制所有图标时才替换默认图标集。一个更好的方法是在默认精灵的基础上添加一个自定义精灵，就像前面的配方中所示的那样。
- en: See also
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using a custom icon in a button* recipe
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在按钮中使用自定义图标* 配方'
- en: The *Adding a custom icon sprite* recipe
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加自定义图标精灵* 配方'
- en: Using alternate icons in a collapsible
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在可折叠块中使用替代图标
- en: A **collapsible** is a container with the `data-role="collapsible"` attribute.
    You can add a header and other controls inside collapsible content and only the
    header is displayed when the collapsible block is collapsed. You can click on
    the **+** icon next to the collapsible to expand it. This recipe shows you how
    to use alternate icons with a collapsible.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**可折叠块** 是带有 `data-role="collapsible"` 属性的容器。您可以在可折叠内容中添加标题和其他控件，当可折叠块折叠时，只显示标题。您可以单击可折叠块旁边的
    **+** 图标来展开它。本配方向您展示如何在可折叠块中使用替代图标。'
- en: Getting ready
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/04/collapsible` sources folder.
    You can launch this code using the URL `http://localhost:8080/04/collapsible/main.html`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `code/04/collapsible` 源文件夹复制此配方的完整代码。您可以使用 URL `http://localhost:8080/04/collapsible/main.html`
    启动此代码。
- en: How to do it...
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: In `main.html` add two collapsible blocks using `data-role="collapsible"`, as
    shown in the following code. By default, the first collapsible uses the standard
    icons (**plus** and **minus**).
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main.html` 中使用 `data-role="collapsible"` 添加两个可折叠块，如下所示的代码。默认情况下，第一个可折叠块使用标准图标（**加号**
    和 **减号**）。
- en: '[PRE16]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add the following script to the `<head>` section of the page to set alternate
    arrow icons to the second collapsible:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本添加到页面的 `<head>` 部分，以为第二个可折叠块设置替代箭头图标：
- en: '[PRE17]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In `main.html`, add two collapsible blocks; they have the default **plus**
    and **minus** icons when they are loaded. Add script and create an event handler
    for the `pagebeforeshow` event to change the icons for the second collapsible
    (with `id="collapser"`). Use the jQuery `find()` method to find the class `.ui-icon-plus`
    (**plus** icon) and replace it with the class `.ui-icon-arrow-r` (**right arrow**)
    using the `toggleClass()` method. Similarly, replace the class `.ui-icon-minus`
    (**minus** icon) with the class `.ui-icon-arrow-d` (**down arrow**). Set the `data-collapsed="false"`
    attribute on the collapsible blocks to show in an expanded mode. The second collapsible
    now has the arrow icons instead of the default icons when the page is displayed:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，添加两个可折叠块；它们在加载时具有默认的 **加号** 和 **减号** 图标。添加脚本并为 `pagebeforeshow`
    事件创建事件处理程序以更改第二个可折叠块（带有 `id="collapser"`）的图标。使用 jQuery 的 `find()` 方法查找类 `.ui-icon-plus`（**加号**
    图标）并使用 `toggleClass()` 方法将其替换为类 `.ui-icon-arrow-r`（**右箭头**）。类似地，将类 `.ui-icon-minus`（**减号**
    图标）替换为类 `.ui-icon-arrow-d`（**向下箭头**）。在可折叠块上设置 `data-collapsed="false"` 属性以展开显示。当页面显示时，第二个可折叠块现在具有箭头图标而不是默认图标：
- en: '![How it works...](img/7225_04_08.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_04_08.jpg)'
- en: 'When a collapsible is expanded or collapsed, the framework toggles the icon
    using standard icons. You can override this behavior by adding an event handler
    for the `pageshow` event. Based on the event (`expand` or `collapse`) on the collapsible
    block, find the `.ui-icon` class and replace it with the `.ui-icon-arrow-d` or
    the `.ui-icon-arrow-r` classes to show the **down** or the **right** arrows. The
    collapsed blocks now look as shown in the following image:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当可折叠块展开或折叠时，框架会使用标准图标切换图标。您可以通过为 `pageshow` 事件添加事件处理程序来覆盖此行为。根据可折叠块上的事件（`expand`
    或 `collapse`），找到 `.ui-icon` 类并将其替换为 `.ui-icon-arrow-d` 或 `.ui-icon-arrow-r` 类以显示
    **向下** 或 **向右** 箭头。折叠的块现在如下图所示：
- en: '![How it works...](img/7225_04_07.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_04_07.jpg)'
- en: There's more...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can theme the collapsible content by using the `data-content-theme` attribute.
    The header is not affected. The following code themes the collapsible content
    with swatch `e`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `data-content-theme` 属性为可折叠内容设置主题。标题不受影响。以下代码将可折叠内容主题设置为 `e`：
- en: '[PRE18]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Setting a theme to the collapsible header
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为可折叠标题设置主题
- en: 'Use the `data-theme` attribute and set the theme to the entire collapsible
    block including the header. Now you can set a different theme to the collapsible
    content using the `data-content-theme` attribute. It will now look as if you styled
    the header separately. The following code snippet sets the header theme to swatch
    `a` and body to swatch `e`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `data-theme` 属性并将主题设置为包括标题在内的整个可折叠块。现在，您可以使用 `data-content-theme` 属性为可折叠内容设置不同的主题。现在，它看起来好像您单独为标题设置了样式。以下代码片段将标题主题设置为
    `a`，正文主题设置为 `e`：
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: See also
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a nested accordion* recipe
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建嵌套手风琴* 配方'
- en: Creating a nested accordion
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建嵌套手风琴
- en: An **accordion** or a **collapsible set** is a group of collapsible blocks in
    a container with `data-role="collapsible-set"`. Only one collapsible can be expanded
    at a time and the other collapsibles go back to their collapsed state. You cannot
    nest accordions directly. This recipe shows you how to create a **nested accordion**
    in a simple application that displays the various real estate properties available
    for purchase.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**手风琴** 或 **可折叠集** 是一个带有 `data-role="collapsible-set"` 的容器中的可折叠块组。一次只能展开一个可折叠块，其他可折叠块会返回到折叠状态。您不能直接嵌套手风琴。本配方向您展示如何在一个简单的应用程序中创建一个
    **嵌套手风琴**，该应用程序显示了可购买的各种房地产属性。'
- en: Getting ready
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/04/nested-accordion` sources
    folder. You can launch this code using the URL `http://localhost:8080/04/nested-accordion/main.html`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `code/04/nested-accordion` 源文件夹中复制此配方的完整代码。您可以使用 URL `http://localhost:8080/04/nested-accordion/main.html`
    启动此代码。
- en: How to do it...
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Add a nested accordion to `main.html` using `data-role="collapsible-set"` as
    shown in the following code:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main.html` 中添加一个嵌套手风琴，使用 `data-role="collapsible-set"` 如下所示：
- en: '[PRE20]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In `main.html`, create a collapsible set with two collapsible blocks in it.
    The first collapsible shows **Villas and Row Houses** and the second shows **Apartments**.
    You can now nest another collapsible set under the **Villas and Row Houses** collapsible,
    as shown in the previous code snippet.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.html`中，创建一个折叠集，其中包含两个可折叠块。第一个可折叠块显示**别墅和排屋**，第二个显示**公寓**。您现在可以在**别墅和排屋**可折叠块下嵌套另一个可折叠块，如前面的代码片段所示。
- en: 'Add two collapsible blocks, nesting them inside the first collapsible block
    to list two properties. Theme the nested content differently from its parent collapsible
    using the `data-theme` and `data-content-theme` attributes. The nested collapsible
    is displayed as shown in the following screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 添加两个可折叠块，将它们嵌套在第一个可折叠块内以列出两个属性。使用 `data-theme` 和 `data-content-theme` 属性将嵌套内容与其父可折叠块进行不同主题设置。嵌套可折叠块显示如下截屏所示：
- en: '![How it works...](img/7225_04_09.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![如何运作...](img/7225_04_09.jpg)'
- en: 'Now to complete the code, add content to the second collapsible **Apartments**.
    At any point in time, only one collapsible is expanded in this nested accordion,
    as seen in the following screenshot:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为第二个可折叠块**公寓**添加内容以完成代码。在此嵌套手风琴中，任何时候只有一个可折叠块是展开的，如下截屏所示：
- en: '![How it works...](img/7225_04_10.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![如何运作...](img/7225_04_10.jpg)'
- en: There's more...
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: Introducing any other element or content in between two collapsible blocks in
    a collapsible set breaks the set. The collapsible blocks are no longer synchronized
    and they become independent of each other when you expand or collapse them.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在可折叠集中的两个可折叠块之间引入任何其他元素或内容都会破坏该集合。当您展开或折叠它们时，可折叠块不再同步，并且它们变得彼此独立。
- en: Note
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As the name indicates, a collapsible set must only contain collapsible blocks.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 正如名称所示，可折叠集必须仅包含可折叠块。
- en: See also
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using alternate icons in a collapsible* recipe
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在可折叠块中使用替代图标* 配方'
- en: Creating a custom layout grid
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义布局网格
- en: You can use a **layout grid** to place controls next to each other in your application.
    By default, the layout grid creates column cells with equal width. This recipe
    shows you how to customize this and create cells with varying heights and widths.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用**布局网格**将控件放置在应用程序中相邻的位置。默认情况下，布局网格创建具有相等宽度的列单元格。本配方向您展示如何自定义此功能，并创建具有不同高度和宽度的单元格。
- en: Getting ready
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/04/layoutgrid` sources folder.
    You can launch this code using the URL `http://localhost:8080/04/layoutgrid/main.html`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/04/layoutgrid`源文件夹中复制此配方的完整代码。您可以使用URL `http://localhost:8080/04/layoutgrid/main.html`
    启动此代码。
- en: How to do it...
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行...
- en: 'Add a layout grid to `main.html` as shown in the following code, using the
    `ui-grid` and `ui-block` classes:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下代码所示，在`main.html`中添加布局网格，使用 `ui-grid` 和 `ui-block` 类：
- en: '[PRE21]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作...
- en: Create `main.html` and add a layout grid to its page by adding a `fieldset`
    element with the attribute `class="ui-grid-a"`. This will create two columns having
    equal widths by default. But you can add three cells by adding `ui-block-a`, `ui-block-b`,
    and `ui-block-c` divs as shown in the code. Each div has varying widths, with
    **Col B** having `50%` width and the other two columns `25%` width each. The total
    width sums up to 100 percent and the framework automatically lines them up in
    a single row. If the sum were to exceed 100 percent, then the extra cells would
    be moved to the next row.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加带有属性 `class="ui-grid-a"` 的 `fieldset` 元素来在其页面中为 `main.html` 添加布局网格。这将默认创建具有相等宽度的两列。但是，您可以通过添加如代码所示的
    `ui-block-a`、`ui-block-b` 和 `ui-block-c` divs 来添加三个单元格。每个 div 的宽度不同，其中 **Col B**
    的宽度为 `50%`，另外两列的宽度分别为 `25%`。总宽度总和为100%，框架会自动将它们排列在单行中。如果总和超过100%，则额外的单元格将移到下一行。
- en: 'Now in the second row add a single `div` with class `ui-grid-solo` and this
    will style the cell to have 100 percent width. You can alter the height of this
    cell as shown in the code using the `style="height:"` attribute. The `ui-bar`
    and `ui-bar-e` classes style the cells with a border and a gradient color and
    themes it with swatch `e`. The grid layout now looks as shown in the following
    screenshot:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在第二行添加一个带有类`ui-grid-solo`的单个`div`，这将使单元格的宽度达到100%。您可以像代码中所示使用`style="height:"`属性来更改此单元格的高度。
    `ui-bar` 和 `ui-bar-e` 类样式的单元格具有边框和渐变颜色，并使用swatch `e`对其进行主题化。网格布局现在如下截屏所示：
- en: '![How it works...](img/7225_04_11.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![如何运作...](img/7225_04_11.jpg)'
- en: There's more...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: You can theme an individual cell, `ui-block` differently from other cells, by
    adding the `data-theme` attribute to it. To theme an entire row differently from
    other rows in the grid, you will have to add the same `data-theme` attribute to
    all the cells of that row.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过向其添加 `data-theme` 属性来使单个单元格 `ui-block` 与其他单元格不同的主题化。要使整行与网格中的其他行不同主题化，你需要将相同的
    `data-theme` 属性添加到该行的所有单元格。
- en: Adding content to a layout grid cell
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加内容到布局网格单元格
- en: You can add any sort of element inside the `ui-block` cell of a layout grid.
    You can even add a layout grid inside this cell. You have to choose wisely how
    you want your screen to look, keeping in mind the limited screen size of mobile
    devices.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在布局网格的 `ui-block` 单元格中添加任何类型的元素。你甚至可以在此单元格中添加一个布局网格。你必须明智地选择你想要的屏幕外观，记住移动设备的有限屏幕尺寸。
- en: Adding a grid layout to any container
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向任何容器添加网格布局
- en: 'You can add a grid to any container by adding the `ui-grid` class to it. The
    following code snippet styles the entire page as a two column grid:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 `ui-grid` 类添加到任何容器中，你可以向任何容器添加网格。以下代码片段将整个页面样式化为两列网格：
- en: '[PRE22]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: See also
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Adding a layout grid to the footer* recipe in [Chapter 3](ch03.html "Chapter 3. Toolbars"),
    *Toolbars*
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*向页脚添加布局网格*的方法见[第3章](ch03.html "第3章. 工具栏"), *工具栏*'
- en: Using XML content
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 XML 内容
- en: You can display data obtained from various formats and sources in your application.
    This recipe shows you how to display a sample set of **Student Records** obtained
    from an XML file.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在应用程序中显示从各种格式和来源获得的数据。此示例向你展示如何显示从 XML 文件中获取的一组示例**学生记录**。
- en: Getting ready
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/04/xml-content` sources folder.
    You can launch this code using the URL `http://localhost:8080/04/xml-content/main.html`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `code/04/xml-content` 源文件夹中复制此方法的完整代码。你可以使用 URL `http://localhost:8080/04/xml-content/main.html`
    启动此代码。
- en: How to do it...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create the `student.xml` file with the student node having attributes `name`
    and `age`. Each `student` node has multiple `course` child elements. Each `course`
    element has a `name` attribute and a child `marks` element as shown in the following
    code:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建带有具有属性 `name` 和 `age` 的学生节点的 `student.xml` 文件。每个 `student` 节点有多个 `course`
    子元素。每个 `course` 元素都有一个 `name` 属性和一个如下所示的子 `marks` 元素：
- en: '[PRE23]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create the `main.html` file and add one hidden `div` container. You can read
    the XML data into this `div` and then format and display it:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `main.html` 文件并添加一个隐藏的 `div` 容器。你可以将 XML 数据读取到这个 `div` 中，然后格式化并显示它：
- en: '[PRE24]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Include the following JavaScript code in the `<head>` section of `main.html`
    to load the XML file, format the data, and then display it:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main.html` 的 `<head>` 部分中包含以下 JavaScript 代码，以加载 XML 文件，格式化数据，然后显示它：
- en: '[PRE25]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In `main.html`, add a `div` container with `id="hiddendiv"` and hide it by setting
    the attribute `hidden="true"`. Create an event handler for the `pageinit` event
    to handle the loading of the XML data as soon as the page is initialized and available
    in memory. Load the XML data into `hiddendiv` using the jQuery Ajax `load()` method.
    On successful load, find each `student` node using the jQuery `find()` method.
    For each `student`, generate HTML code by creating a collapsible (using `data-role="collapsible"`).
    Set the collapsible header to the student's `name` and `age`. You can obtain these
    values from the attributes of the `student` node by using the jQuery `attr()`
    method. Next, find each course within the `student` node and obtain `course` `name`
    and `marks`. The `marks` value is read by using the `children()` call, which extracts
    the first child element of the `course` node. The `course` elements are added
    to an unordered list (using `data-role="listview"`).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，添加一个带有 `id="hiddendiv"` 的 `div` 容器，并通过设置属性 `hidden="true"` 来隐藏它。为
    `pageinit` 事件创建事件处理程序，以便在页面初始化和内存可用时处理 XML 数据的加载。使用 jQuery Ajax 的 `load()` 方法将
    XML 数据加载到 `hiddendiv` 中。加载成功后，使用 jQuery 的 `find()` 方法找到每个 `student` 节点。对于每个 `student`，通过创建可折叠项（使用
    `data-role="collapsible"`）生成 HTML 代码。将可折叠项标题设置为学生的 `name` 和 `age`。你可以使用 jQuery
    的 `attr()` 方法从 `student` 节点的属性中获取这些值。接下来，找到 `student` 节点内的每个课程并获取 `course` 的 `name`
    和 `marks`。通过使用 `children()` 调用读取 `marks` 值，该调用提取 `course` 节点的第一个子元素。将 `course`
    元素添加到无序列表中（使用 `data-role="listview"`）。
- en: 'Once the HTML content is built, set it to the `"#content"` page content div
    and then trigger the `"create"` method to let the jQuery Mobile framework do its
    magic and generate the enhanced controls, as shown in the following screenshot:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦HTML内容构建完成，将其设置为`"#content"`页面内容div，并触发`"create"`方法，让jQuery Mobile框架发挥其作用并生成增强控件，如下面的屏幕截图所示：
- en: '![How it works...](img/7225_04_12.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_04_12.jpg)'
- en: There's more...
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe shows you how to read contents from a XML file located in the same
    folder using Ajax. You can also send an Ajax request to a server and obtain this
    XML as the response. The jQuery library has a whole bunch of selectors and manipulators
    that you can use to read and write XML data. Visit [http://docs.jquery.com](http://docs.jquery.com)
    to read more.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程向您展示如何通过Ajax从位于相同文件夹中的XML文件中读取内容。您也可以向服务器发送Ajax请求，获取此XML作为响应。jQuery库有一大堆选择器和操作器，可以用来读取和写入XML数据。访问[http://docs.jquery.com](http://docs.jquery.com)了解更多信息。
- en: Note
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: XML structure requires end tags and this makes it bulky. Always try to make
    your XML as light as possible by using more attributes when possible instead of
    child nodes. You can also use an algorithm such as *gzip* to compress the XML.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: XML结构需要结束标记，这使它变得臃肿。尽量使用更多的属性，而不是子节点，尽量使您的XML尽可能轻巧。您还可以使用诸如*gzip*之类的算法来压缩XML。
- en: Using native browser rendering for XML
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用本机浏览器渲染XML
- en: 'Almost all browsers know how to render and display XML data directly. The XML
    content can also be formatted and styled if it has an associated style sheet.
    In your jQuery Mobile app you can leverage this feature in situations where you
    can open the content in another page using the `target` attribute on the anchor
    link, as shown in the following code:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有浏览器都知道如何直接渲染和显示XML数据。如果XML内容有相关的样式表，还可以对XML内容进行格式化和样式化。在您的jQuery Mobile应用程序中，您可以在可以使用`target`属性在锚链接上打开内容的情况下，利用此功能，如下面的代码所示：
- en: '[PRE26]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: See also
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using JSON content* recipe
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用JSON内容*教程'
- en: Using JSON content
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JSON内容
- en: '**JSON** stands for **JavaScript Object Notation**. It is a lightweight data-interchange
    format and is very easy to use. This recipe shows you how to display the prices
    of **Precious Metals** from a JSON file.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**JSON**代表**JavaScript对象表示法**。它是一种轻量级的数据交换格式，非常容易使用。本教程向您展示如何从JSON文件中显示**贵金属**的价格。'
- en: Getting ready
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/04/json-content` sources folder.
    You can launch this code using the URL `http://localhost:8080/04/json-content/main.html`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/04/json-content`源文件夹中复制此教程的完整代码。您可以使用URL `http://localhost:8080/04/json-content/main.html`
    来启动此代码。
- en: How to do it...
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create the `precious.json` file containing an array of the five precious metals.
    The name, symbol, and the intraday `open`, `close`, `high`, and `low` prices are
    also available, as shown in the following code:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含五种贵金属数组的`precious.json`文件。名称、符号以及日内`open`，`close`，`high`和`low`价格也可用，如下面的代码所示：
- en: '[PRE27]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create `main.html` and add an empty `div` with `id="preciousdata"` to it. You
    can read the JSON file, format, and display the data here:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main.html`，并向其中添加一个带有`id="preciousdata"`的空的`div`。您可以在这里读取JSON文件，格式化并显示数据：
- en: '[PRE28]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Include the following JavaScript code in the `<head>` section of `main.html`
    to fetch and load the JSON file, format the data, and show the price table of
    the precious metals in a layout grid:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.html`的`<head>`部分中包含以下JavaScript代码，以获取和加载JSON文件，格式化数据，并在布局网格中显示贵金属的价格表：
- en: '[PRE29]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, store the HTML strings used to create the layout grid in local variables:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将用于创建布局网格的HTML字符串存储在本地变量中：
- en: '[PRE30]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Use the local variables defined above and construct the HTML content for the
    title of the layout grid:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用上面定义的本地变量构建布局网格标题的HTML内容：
- en: '[PRE31]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now create the HTML content for each metal, including their price details:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在为每个金属创建包括其价格详细信息的HTML内容：
- en: '[PRE32]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, add this data to the `#preciousdata` div and trigger the `"create"`
    method to display the formatted JSON data:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将这些数据添加到`#preciousdata` div中，并触发`"create"`方法来显示格式化的JSON数据：
- en: '[PRE33]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works...
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In `main.html`, add an empty `div` container with `id="preciousdata"`. You can
    use this to display the formatted JSON data later. Create an event handler for
    the `pageinit` event to handle the loading of the JSON data as soon as the page
    is initialized and available in memory. Use the `$.getJSON()` jQuery call to fetch
    the JSON encoded data from the server using a GET request. The JSON data is now
    available in the `metal` object.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，添加一个空的 `div` 容器，其 `id="preciousdata"`。您可以使用此容器稍后显示格式化的 JSON
    数据。为 `pageinit` 事件创建事件处理程序，以在页面初始化并在内存中可用时处理 JSON 数据的加载。使用 `$.getJSON()` jQuery
    调用通过 GET 请求从服务器获取 JSON 编码的数据。现在，JSON 数据可用在 `metal` 对象中。
- en: In the callback function for the `getJSON` method, create the HTML content for
    a five column layout grid using the `ui-grid-d` class. The five columns are titled
    **Precious Metal (USD)**, **Open**, **High**, **Low**, and **Close**. Create the
    title row using the `ui-block` classes for each column cell. Next, loop through
    the objects in `metal` and construct the column cells as shown.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `getJSON` 方法的回调函数中，使用 `ui-grid-d` 类创建一个五列布局网格的 HTML 内容。五列标题分别是 **贵金属（美元）**、**开盘价**、**最高价**、**最低价**
    和 **收盘价**。使用 `ui-block` 类为每个列单元格创建标题行。接下来，循环遍历 `metal` 中的对象，并构造列单元格，如下所示。
- en: 'Theme the columns alternatively with swatch `e` and swatch `c`. You can theme
    the title differently using swatch `a`. Finally, set the generated HTML content
    to the `#preciousdata` div and trigger the `create` method to let the jQuery Mobile
    enhance the layout grid. The JSON with precious metal price data is now displayed
    as shown in the following screenshot:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 使用样式 `e` 和样式 `c` 交替为列设置主题。您可以使用样式 `a` 不同地设置标题。最后，将生成的 HTML 内容设置为 `#preciousdata`
    div，并触发 `create` 方法以让 jQuery Mobile 增强布局网格。现在，以以下截图所示的方式显示了包含贵金属价格数据的 JSON：
- en: '![How it works...](img/7225_04_13.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![它的工作原理...](img/7225_04_13.jpg)'
- en: There's more...
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'This recipe shows you how to use the `jQuery.getJSON()` method to fetch the
    JSON data from the server. The jQuery library also provides a `jQuery.parseJSON()`
    method that you can use to parse a JSON string directly into a JavaScript object,
    as shown in the following code:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 本方法向您展示如何使用 `jQuery.getJSON()` 方法从服务器获取 JSON 数据。jQuery 库还提供了一个 `jQuery.parseJSON()`
    方法，您可以使用它将 JSON 字符串直接解析为 JavaScript 对象，如下面的代码所示：
- en: '[PRE34]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: JSON for data storage and data transfer
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于数据存储和数据传输的 JSON
- en: JSON is very popular today for storing and transferring data. JSON is a subset
    of JavaScript and as seen in this recipe, reading JSON data using JavaScript is
    very trivial. JSON is lightweight and uses less bandwidth compared to XML (for
    example, no start and end tags). JSON is also supported out of the box by numerous
    document oriented databases such as CouchDB and MongoDB.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 在今天非常流行，用于存储和传输数据。JSON 是 JavaScript 的一个子集，正如本示例所示，使用 JavaScript 读取 JSON
    数据非常简单。与 XML 相比，JSON 轻量且使用的带宽较少（例如，没有开始和结束标记）。JSON 还得到了许多面向文档的数据库的原生支持，如 CouchDB
    和 MongoDB。
- en: JSON parsers
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSON 解析器
- en: JSON data can also be loaded using the JavaScript `eval()` method. But do this
    only if you absolutely have to and are very sure about the source of the JSON
    text file. It is always safer to load the data using a **JSON parser** as this
    will accept only valid JSON data, and prevent potentially malicious code from
    running. Refer to [www.json.org](http://www.json.org) for more details and for
    accessing a whole range of available JSON parsers. The jQuery JSON methods are
    usually preferred as they are very handy and also safe to use.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 数据也可以使用 JavaScript 的 `eval()` 方法加载。但是，只有在绝对必要且非常确定 JSON 文本文件的来源时才能这样做。使用
    **JSON 解析器** 加载数据始终更安全，因为这将仅接受有效的 JSON 数据，并防止潜在的恶意代码运行。有关更多详细信息以及访问各种可用的 JSON
    解析器，请参阅 [www.json.org](http://www.json.org)。通常首选 jQuery JSON 方法，因为它们非常方便且安全可靠。
- en: Note
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Always use a properly implemented JSON parser to read and write `.json` files.
    Avoid using the `eval()` method, which is not secure.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 始终使用正确实现的 JSON 解析器来读取和写入 `.json` 文件。避免使用 `eval()` 方法，这是不安全的。
- en: See also
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Using XML content* recipe
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 XML 内容的方法
