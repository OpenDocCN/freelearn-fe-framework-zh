- en: Getting Started with JHipster
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 JHipster
- en: JHipster is a development platform that helps you go from zero to hero! JHipster
    can help you to create beautiful web applications and complex microservice architectures
    in a jiffy. JHipster also offers various tools to develop the application further
    using business entities, and deploy it to various cloud services and platforms.
    At its core, JHipster is a Yeoman generator that creates Spring Boot and Angular/React
    based applications. It can create monolithic architecture as well as microservice
    architecture with every feature working out-of-the-box.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster 是一个开发平台，它能帮助你从零开始，迅速成为英雄！JHipster 可以帮助你快速创建美观的 Web 应用程序和复杂的微服务架构。JHipster
    还提供了各种工具，使用业务实体进一步开发应用程序，并将其部署到各种云服务和平台。在核心上，JHipster 是一个 Yeoman 生成器，用于创建基于 Spring
    Boot 和 Angular/React 的应用程序。它可以创建单体架构以及具有所有功能开箱即用的微服务架构。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Why use JHipster and how it helps compared to traditional development approaches
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么使用 JHipster 以及它与传统开发方法相比如何帮助
- en: What is the goal of JHipster?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JHipster 的目标是什么？
- en: The various server-side and client-side technology options available in JHipster
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JHipster 中可用的各种服务器端和客户端技术选项
- en: Preparation of a development environment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备开发环境
- en: Installation of JHipster and required dependencies
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JHipster 及其依赖项的安装
- en: Yeoman ([http://yeoman.io](http://yeoman.io)) is a scaffolding tool that helps
    you to create code generators. You can use it to create any kind of application
    generator with the help of the built-in template engine and tools.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Yeoman ([http://yeoman.io](http://yeoman.io)) 是一个脚手架工具，它可以帮助你创建代码生成器。你可以使用它，借助内置的模板引擎和工具，创建任何类型的应用程序生成器。
- en: Why JHipster?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择 JHipster？
- en: If you are wondering why you should be using JHipster, then just imagine the
    following scenario. You are tasked to build a web application, let us say a blog
    with an Angular frontend and a Java backend, with features for users to create
    blog posts and be able to display blog posts based on user permissions. You are
    also asked to build administrative modules such as user management, monitoring,
    and so on. Finally, you have to test and deploy the application to a cloud service.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道为什么你应该使用 JHipster，那么请想象以下场景。你被要求构建一个 Web 应用程序，比如说一个具有 Angular 前端和 Java
    后端的博客，具有用户创建博客文章和根据用户权限显示博客文章的功能。你还被要求构建管理模块，如用户管理、监控等。最后，你必须测试并将应用程序部署到云服务。
- en: 'If you are approaching this challenge the traditional way you will most probably
    be doing the following steps. Let''s skip the details for simplicity. So, the
    steps would be as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以传统方式来应对这个挑战，你很可能会做以下步骤。为了简单起见，让我们跳过细节。所以，步骤如下：
- en: Design an architecture stack and decide on various libraries to use (let's say
    you choose Spring Framework for the backend, with Spring Security and Spring MVC)
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计架构栈并决定使用各种库（比如说你选择了 Spring 框架作为后端，使用 Spring Security 和 Spring MVC）
- en: Create an application base with all the technologies wired together (for example,
    you will have to make sure the authentication flow between the Angular client
    side and Spring Security is wired properly)
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含所有技术连接的应用程序基础（例如，你必须确保 Angular 客户端和 Spring Security 之间的身份验证流程正确连接）
- en: Write a build system for the application (let's say you used webpack to build
    the Angular client side and Gradle to build the server side)
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为应用程序编写构建系统（比如说你使用了 webpack 来构建 Angular 客户端，Gradle 来构建服务器端）
- en: Write integration tests and unit tests for the base
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为基础编写集成测试和单元测试
- en: Create administrative modules
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建管理模块
- en: Design business entities and create them with the Angular client side and Java
    server side with test coverage
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计业务实体，并在 Angular 客户端和 Java 服务器端以及测试覆盖率下创建它们
- en: Write all the business logic, test the application, and deploy it
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写所有业务逻辑，测试应用程序，并部署它
- en: While this approach definitely works, for this simple application you would
    have spent anywhere between four to six weeks depending on the team size. Now,
    more than 70% of the effort would have been spent on writing boilerplate code
    and making sure all the libraries work well together. Now, would you believe me
    if I say that you could develop, test, and deploy this application in less than
    30 minutes using JHipster? Yes, you can, while still getting high-quality production
    grade code with lots of extra bells and whistles. We will see this in action in
    our next chapter where we will build a real-world application using JHipster.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种方法确实有效，但对于这个简单的应用程序，你可能需要花费四到六周的时间，具体取决于团队规模。现在，超过70%的努力将花费在编写样板代码和确保所有库能够良好协作上。现在，如果你说我可以在不到30分钟内使用JHipster开发、测试和部署这个应用程序，你会相信我吗？是的，你可以，同时还能获得高质量的、带有许多额外功能的实际生产级代码。我们将在下一章中看到这一功能的应用，我们将使用JHipster构建一个真实世界的应用程序。
- en: Goal and adoption of JHipster
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JHipster的目标和采用情况
- en: 'The goal of JHipster is to provide developers a platform where you can focus
    on your business logic rather than worrying about wiring different technologies
    together, and also that provides a great developer experience. Of course, you
    can use available boilerplate within your organization or from the internet and
    try to wire them up together, but then you will be wasting a lot of time re-inventing
    the wheel. With JHipster, you will create a modern web application or microservice
    architecture with all the required technologies wired together and working out-of-the-box,
    such as the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster的目标是为开发者提供一个平台，在这里你可以专注于业务逻辑，而不是担心将不同的技术连接在一起，同时也提供了一个出色的开发者体验。当然，你可以在组织内部或从互联网上使用可用的样板代码，并尝试将它们连接起来，但这样你会浪费很多时间重新发明轮子。使用JHipster，你将创建一个现代Web应用程序或微服务架构，其中所有必需的技术都已连接并开箱即用，例如以下内容：
- en: A robust and high-performance Spring Framework-based Java stack on the backend
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后端基于稳健且高性能的Spring Framework的Java堆栈
- en: A rich mobile-first frontend with Angular or React supported by Bootstrap
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Bootstrap的丰富移动优先前端，支持Angular或React
- en: A battle-tested microservice architecture unifying Netflix OSS, Elastic stack,
    and Docker
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经受战火考验的微服务架构，统一了Netflix OSS、Elastic stack和Docker
- en: A great tooling and development workflow using Maven/Gradle, webpack, and Yarn/NPM
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Maven/Gradle、webpack和Yarn/NPM的出色工具和开发工作流程
- en: Out-of-the-box continuous integration using Jenkins, Travis, or GitLab
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开箱即用的持续集成，使用Jenkins、Travis或GitLab
- en: Excellent Docker support and support for orchestration tools such as Kubernetes,
    Rancher, and Openshift out-of-the-box
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开箱即用的出色Docker支持和Kubernetes、Rancher、OpenShift等编排工具的支持
- en: Out-of-the-box support for various cloud deployments
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持各种云部署的即插即用功能
- en: Above all, great code with lots of best practices and industry standards at
    your fingertips
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最重要的是，拥有大量最佳实践和行业标准的手指尖上的优秀代码
- en: Netflix OSS ([https://netflix.github.io](https://netflix.github.io)) is a collection
    of open source tools and software produced by the NETFLIX, INC team geared toward
    microservice architecture. Elastic stack ([https://www.elastic.co/products](https://www.elastic.co/products))(formerly
    known as ELK stack) is a collection of software tools, which help in monitoring
    and analytics of microservices developed by the Elasticsearch ([https://www.elastic.co](https://www.elastic.co))
    team.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Netflix OSS ([https://netflix.github.io](https://netflix.github.io)) 是由NETFLIX,
    INC团队生产的开源工具和软件集合，旨在面向微服务架构。Elastic stack ([https://www.elastic.co/products](https://www.elastic.co/products))（以前称为ELK
    stack）是一系列软件工具集合，有助于监控和分析由Elasticsearch ([https://www.elastic.co](https://www.elastic.co))团队开发的微服务。
- en: JHipster has been steadily increasing in popularity as Spring Boot and Angular
    gained momentum, and lots of developers have started to adopt them as the de facto
    frameworks for web development. As per official statistics at the time of writing
    (beginning of 2018), there are more than 5,000 applications generated per month
    and JHipster was installed around  1 million times. It has more than 400 contributors
    with official contributions from Google, RedHat, Heroku, and so on.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Spring Boot和Angular的兴起，JHipster的受欢迎程度稳步上升，许多开发者开始将其作为实际上的Web开发框架。根据撰写本文时的官方统计数据（2018年初），每月生成的应用程序超过5,000个，JHipster的安装量约为1百万次。它拥有超过400位贡献者，其中包括来自Google、RedHat、Heroku等机构的官方贡献。
- en: Introduction to technologies available
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术介绍
- en: 'JHipster supports an incredible number of modern web application technologies
    out of the box. Some of them are used as the base or core of the generated application
    while some technologies are opt-in via choices made during application generation.
    Let us see the different technologies supported mainly for monolithic applications
    in brief:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster 默认支持大量现代网络应用程序技术。其中一些被用作生成应用程序的基础或核心，而一些技术则通过在应用程序生成过程中所做的选择进行选择。让我们简要地看看主要针对单体应用程序支持的不同技术：
- en: Client-side technologies
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端技术
- en: Server-side technologies
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端技术
- en: Database options
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库选项
- en: There are many more technologies supported and we will look at them in later
    chapters when we touch upon microservices.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 支持的技术还有很多，我们将在后续章节中探讨，当涉及到微服务时。
- en: Client-side technologies
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端技术
- en: The role of client-side technologies in full-stack development has grown from
    just using JavaScript for client-side validations, to writing full-blown, single
    page applications using client-side MVVM frameworks. The frameworks and toolchains
    used have become complex and overwhelming for developers who are new to the client-side
    landscape. Fortunately for us, JHipster provides support for most of the following,
    widely used, client-side technologies. Let us take a brief look and get familiar
    with the important tools and technologies that we will use. No need to worry if
    it is overwhelming, we will take a deeper look at some of the more important ones
    during the course of the book.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在全栈开发中，客户端技术的作用已经从仅使用 JavaScript 进行客户端验证，发展到使用客户端 MVVM 框架编写完整的单页应用程序。对于刚开始接触客户端领域的开发者来说，所使用的框架和工具链变得复杂且令人不知所措。幸运的是，JHipster
    为以下广泛使用的客户端技术提供了支持。让我们简要地看一下，并熟悉我们将使用的重要工具和技术。无需担心它会令人不知所措，我们将在本书的进程中深入探讨一些更重要的话题。
- en: HTML5 and CSS3
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5 和 CSS3
- en: Web technologies, especially HTML and CSS, have undergone major updates and
    are becoming better day by day due to excellent support in modern browsers.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 网络技术，尤其是 HTML 和 CSS，由于现代浏览器的出色支持，已经经历了重大更新，并且每天都在变得越来越好。
- en: HTML5
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5
- en: HTML5 ([https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5))
    is the latest of the **HTML** (**HyperText Markup Language**) standard, which introduces
    new elements, attributes, and behaviors. The term is used to collectively refer
    to all the HTML technologies used to build modern web applications. This iteration
    introduced support for features such as offline storage, WebSockets, web workers,
    WebGL, and more. JHipster also uses best practices from the HTML5 Boilerplate
    ([https://html5boilerplate.com](https://html5boilerplate.com)).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5 ([https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5))
    是 **HTML** (超文本标记语言) 标准的最新版本，它引入了新的元素、属性和行为。该术语用于统称构建现代网络应用程序所使用的所有 HTML 技术。这一版本引入了对离线存储、WebSockets、Web
    Workers、WebGL 等功能的支持。JHipster 还使用了来自 HTML5 Boilerplate ([https://html5boilerplate.com](https://html5boilerplate.com))
    的最佳实践。
- en: '**HTML5 Boilerplate** is a collection of modern technologies, default settings,
    and best practices that kick-start modern web development faster.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTML5 Boilerplate** 是一组现代技术、默认设置和最佳实践，它能更快地启动现代网络开发。'
- en: CSS3
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS3
- en: CSS3 ([https://developer.mozilla.org/en-US/docs/Web/CSS/CSS3](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS3))
    is the latest of the **Cascading Style Sheets** (CSS) specification. It adds support
    for media query, animations, flexbox, round corners, and a lot more. CSS3 makes
    it possible to natively animate elements, apply special effects, apply filters,
    and so on to get rid of the many JavaScript hacks that were used earlier.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3 ([https://developer.mozilla.org/en-US/docs/Web/CSS/CSS3](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS3))
    是 **层叠样式表** (CSS) 规范的最新版本。它增加了对媒体查询、动画、flexbox、圆角等功能的支持。CSS3 使得原生动画元素、应用特殊效果、应用过滤器等成为可能，从而消除了之前使用的许多
    JavaScript 诡计。
- en: Flexible Box, or flexbox, is a layout mode ([https://developer.mozilla.org/en-US/docs/Web/CSS/Layout_mode](https://developer.mozilla.org/en-US/docs/Web/CSS/Layout_mode)) that
    can be used instead of the box model used traditionally. This allows having a
    flexible box model making responsive layouts easier to handle without floats and
    margin collapse issues.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性盒模型，或称 flexbox，是一种布局模式 ([https://developer.mozilla.org/en-US/docs/Web/CSS/Layout_mode](https://developer.mozilla.org/en-US/docs/Web/CSS/Layout_mode))，它可以替代传统上使用的盒模型。这使得拥有灵活的盒模型，使得响应式布局更容易处理，无需处理浮动和边距塌陷问题。
- en: Sass
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sass
- en: '**Syntactically awesome style sheets** (**Sass**) ([http://sass-lang.com](http://sass-lang.com))
    is a CSS extension language. It is preprocessed and converted to CSS during compile
    time. It has similar semantics to CSS and is 100% compatible with all versions
    of CSS. It additionally supports advanced features such as nested syntax, variables,
    mixins, inheritance, partials, and so on. Sass makes it possible to reuse CSS
    and to write maintainable style sheets.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法优美的样式表** (**Sass**) ([http://sass-lang.com](http://sass-lang.com)) 是一种
    CSS 扩展语言。它在编译时预处理并转换为 CSS。它与 CSS 有类似的语义，并且与所有版本的 CSS 100% 兼容。它还支持嵌套语法、变量、混合、继承、部分等高级功能。Sass
    使得重用 CSS 和编写可维护的样式表成为可能。'
- en: Bootstrap
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bootstrap
- en: Bootstrap ([https://getbootstrap.com](https://getbootstrap.com)) is a responsive
    UI framework for modern web development. It offers a mobile-first approach for
    web development with utilities and UI components that are fully responsive. Bootstrap
    4 is the latest version, uses flexbox for layout, and is completely written in
    Sass, which makes it easier to customize. Bootstrap supports a 12-column grid
    framework, which lets you build responsive web pages with ease. JHipster uses
    ng-bootstrap ([https://ng-bootstrap.github.io](https://ng-bootstrap.github.io))
    so that pure Angular components are used instead of the ones provided by Bootstrap,
    which are built using JQuery, and Bootstrap is used only for styling.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap ([https://getbootstrap.com](https://getbootstrap.com)) 是一种用于现代 Web
    开发的响应式 UI 框架。它为 Web 开发提供了一种移动优先的方法，包括完全响应式的实用工具和 UI 组件。Bootstrap 4 是最新版本，使用 flexbox
    进行布局，并完全使用 Sass 编写，这使得它更容易定制。Bootstrap 支持一个 12 列的网格框架，让您能够轻松构建响应式网页。JHipster 使用
    ng-bootstrap ([https://ng-bootstrap.github.io](https://ng-bootstrap.github.io))，因此使用纯
    Angular 组件而不是 Bootstrap 提供的组件，这些组件是使用 JQuery 构建的，Bootstrap 仅用于样式。
- en: Mobile first web development is an approach where the UX/UI is designed for
    smaller screen sizes first thus forcing you to focus on the most important data/elements
    to be presented. This design is then gradually enhanced for bigger screen sizes
    making the end result responsive and efficient.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 移动优先的 Web 开发是一种设计方法，首先为较小的屏幕尺寸设计 UX/UI，从而迫使您关注要展示的最重要数据/元素。然后，这种设计逐渐增强以适应更大的屏幕尺寸，使最终结果既响应又高效。
- en: MVVM framework
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVVM 框架
- en: '**Model-View-View-Model** (**MVVM**) is an architectural pattern originally
    developed by Microsoft. It helps to abstract or separate the client side (GUI)
    development from the server side (data model). The view model is an abstraction
    of the View and represents the state of data in the Model. With JHipster, you
    can choose between Angular and React as the client-side framework.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**模型-视图-视图-模型** (**MVVM**) 是由微软最初开发的一种架构模式。它有助于将客户端（GUI）开发与服务器端（数据模型）抽象或分离。视图模型是视图的抽象，代表模型中的数据状态。使用
    JHipster，您可以选择 Angular 或 React 作为客户端框架。'
- en: Angular
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular
- en: AngularJS ([https://angularjs.org](https://angularjs.org))(version 1.x) is a
    client-side MVVM framework, maintained by Google, which helps to develop **Single
    Page Applications **(**SPA**). It is based on a declarative programming model
    and it extends standard HTML with the ability to add additional behavior, elements,
    and attributes through directives.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS ([https://angularjs.org](https://angularjs.org))(版本 1.x) 是由 Google
    维护的客户端 MVVM 框架，有助于开发 **单页应用程序** (**SPA**)。它基于声明式编程模型，并扩展了标准 HTML，通过指令添加了额外的行为、元素和属性。它还引入了诸如
    **SPA** 的概念，并扩展了标准 HTML，通过指令添加了额外的行为、元素和属性。
- en: Angular ([https://angular.io](https://angular.io))(version 2 and above) is a
    complete rewrite of the framework and hence is not backward compatible with AngularJS.
    Angular is written in TypeScript and recommends the use of TypeScript to write
    Angular applications as well. Angular removed some of the concepts that were used
    in AngularJS such as scope, controller, factory, and so on. It also has a different
    syntax for binding attributes and events. Another major difference is that the
    Angular library is modular and hence you can choose the modules that you need,
    to reduce bundle size. Angular also introduced advanced concepts such as **AOT **(**Ahead
    of Time Compilation**), lazy loading, reactive programming, and so on.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Angular ([https://angular.io](https://angular.io))(版本 2 及以上) 是框架的完全重写，因此与 AngularJS
    不兼容。Angular 使用 TypeScript 编写，并推荐使用 TypeScript 编写 Angular 应用程序。Angular 移除了一些在 AngularJS
    中使用的概念，例如作用域、控制器、工厂等。它还有绑定属性和事件的不同的语法。另一个主要区别是 Angular 库是模块化的，因此您可以选择所需的模块，以减少包大小。Angular
    还引入了诸如 **AOT** (**提前编译**)、懒加载、响应式编程等高级概念。
- en: TypeScript is a superset of ECMAScript 6 (ES6 - version 6 of JavaScript) and
    is backward compatible with ES5\. It has additional features such as static typing,
    generics, class attribute visibility modifiers, and so on. Since TypeScript is
    a superset of ES6, we can also use ES6 features ([http://es6-features.org](http://es6-features.org))
    such as modules, lambdas (arrow functions), generators, iterators, string templates,
    reflection, spread operators, and so on.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 是 ECMAScript 6 (ES6 - JavaScript 的第 6 个版本) 的超集，并且与 ES5 兼容。它具有静态类型、泛型、类属性可见性修饰符等附加功能。由于
    TypeScript 是 ES6 的超集，我们还可以使用 ES6 功能（[http://es6-features.org](http://es6-features.org)），如模块、lambda（箭头函数）、生成器、迭代器、字符串模板、反射、扩展运算符等。
- en: React
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React
- en: React ([https://reactjs.org](https://reactjs.org)) is not a full-fledged MVVM
    framework. It is a JavaScript library for building client-side views or user interfaces.
    It is developed and backed by Facebook and has a vibrant community and ecosystem
    behind it. React follows an HTML in JS approach and has a special format called
    **JSX** to help us write React components. Unlike Angular, React doesn't have
    too many concepts or APIs to learn and hence is easier to start with, but React
    only cares about rendering the UI and hence to get similar functionality offered
    by Angular, we would have to pair React with other libraries like React Router
    ([https://reacttraining.com/react-router](https://reacttraining.com/react-router)),
    Redux ([https://redux.js.org](https://redux.js.org)), MobX ([https://mobx.js.org](https://mobx.js.org)),
    and so on. JHipster uses React along with Redux and React Router and similar to
    Angular, JHipster uses TypeScript for React as well. But this is optional as React
    can be written using JavaScript as well, preferably ES6 ([http://es6-features.org](http://es6-features.org)).
    React is fast to render due to its use of a virtual DOM ([https://reactjs.org/docs/faq-internals.html](https://reactjs.org/docs/faq-internals.html))
    to manipulate a view instead of using the actual browser DOM.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: React ([https://reactjs.org](https://reactjs.org)) 不是一个完整的 MVVM 框架。它是一个用于构建客户端视图或用户界面的
    JavaScript 库。它由 Facebook 开发并支持，背后有一个充满活力的社区和生态系统。React 采用 HTML in JS 方法，并有一个称为
    **JSX** 的特殊格式来帮助我们编写 React 组件。与 Angular 不同，React 没有太多概念或 API 需要学习，因此更容易上手，但 React
    只关注渲染 UI，因此要获得 Angular 提供的类似功能，我们不得不将 React 与其他库如 React Router ([https://reacttraining.com/react-router](https://reacttraining.com/react-router))、Redux
    ([https://redux.js.org](https://redux.js.org))、MobX ([https://mobx.js.org](https://mobx.js.org))
    等搭配使用。JHipster 使用 React 以及 Redux 和 React Router，类似于 Angular，JHipster 也为 React
    使用 TypeScript。但这不是必需的，因为 React 也可以使用 JavaScript 编写，最好是 ES6 ([http://es6-features.org](http://es6-features.org))。React
    由于使用了虚拟 DOM ([https://reactjs.org/docs/faq-internals.html](https://reactjs.org/docs/faq-internals.html))
    来操作视图而不是实际浏览器 DOM，因此渲染速度快。
- en: If you are starting a new project, it is best to choose either Angular or React as
    they are well maintained. However, with older versions of JHipster, AngularJS
    1.x was also offered as an option but it is becoming legacy and will soon be discontinued
    in JHipster 5.x. JHipster will provide an official blueprint for those who are
    still interested in using AngularJS 1.x. Just run the command `jhipster --blueprint
    generator-jhipster-angularjs` to use it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在启动一个新项目，最好选择 Angular 或 React，因为它们都得到了良好的维护。然而，在 JHipster 的旧版本中，AngularJS
    1.x 也被提供作为选项，但它正在成为过时的技术，并将很快在 JHipster 5.x 中被停止支持。JHipster 将为仍然对使用 AngularJS
    1.x 感兴趣的人提供官方蓝图。只需运行命令 `jhipster --blueprint generator-jhipster-angularjs` 即可使用它。
- en: Build tools
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建工具
- en: The client side has evolved a lot and become as complex as the server side,
    hence it requires a lot more tools in your toolbelt to produce optimized results.
    You would need a build tool to transpile, minimize, and optimize your HTML, JavaScript,
    and CSS code. One of the most popular is Webpack. JHipster uses Webpack for Angular
    and React.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端已经发展了很多，变得和服务器端一样复杂，因此它需要更多的工具来产生优化的结果。你需要一个构建工具来转换、最小化和优化你的 HTML、JavaScript
    和 CSS 代码。其中最受欢迎的是 Webpack。JHipster 使用 Webpack 为 Angular 和 React。
- en: Webpack
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack
- en: Webpack ([https://webpack.js.org](https://webpack.js.org)) is a module bundler
    with a very flexible loader/plugin system. Webpack walks through the dependency
    graph and passes it through the configured loaders and plugins. With Webpack,
    you can transpile TypeScript to JavaScript, minimize, and optimize CSS and JS,
    compile Sass, revision, hash your assets, and so on. Webpack can remove dead code
    in a process called **tree shaking**, thus reducing bundle size. Webpack is configured
    using a configuration file and can be run from the command line or via NPM/YARN
    scripts.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack ([https://webpack.js.org](https://webpack.js.org)) 是一个具有非常灵活的加载器/插件系统的模块打包器。Webpack
    会遍历依赖图，并通过配置的加载器和插件传递它。使用 Webpack，你可以将 TypeScript 转换为 JavaScript，最小化和优化 CSS 和
    JS，编译 Sass，修订，对你的资产进行哈希处理等。Webpack 可以通过称为 **摇树干** 的过程删除死代码，从而减小包的大小。Webpack 使用配置文件进行配置，可以从命令行或通过
    NPM/YARN 脚本运行。
- en: BrowserSync
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BrowserSync
- en: BrowserSync ([https://browsersync.io](https://browsersync.io))is a NodeJS tool
    that helps in browser testing by synchronizing file changes and interactions of
    the web page across multiple browsers and devices. It provides features such as
    auto-reload on file changes, synchronized UI interactions, scrolling, and so on.
    It integrates with Webpack/GulpJS to provide a productive development setup. It
    makes testing a web page on multiple browsers and devices super easy.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: BrowserSync ([https://browsersync.io](https://browsersync.io)) 是一个 NodeJS 工具，通过同步多个浏览器和设备上的网页文件更改和交互，帮助进行浏览器测试。它提供了诸如文件更改时自动重新加载、同步
    UI 交互、滚动等功能。它集成了 Webpack/GulpJS，以提供高效的开发环境。它使得在多个浏览器和设备上测试网页变得非常简单。
- en: Testing tools
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试工具
- en: Gone are the days when the client-side code didn't require unit testing. With
    the evolution of client-side frameworks, the testing possibilities also improved.
    There are many frameworks and tools available for unit testing, end-to-end testing,
    and so on. JHipster creates unit tests for client-side code using Karma and Jasmine
    out-of-the-box and also supports creating end-to-end tests using Protractor.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 那些客户端代码不需要单元测试的日子已经过去了。随着客户端框架的发展，测试的可能性也得到了提高。现在有许多框架和工具可用于单元测试、端到端测试等。JHipster
    使用 Karma 和 Jasmine 开箱即地为客户端代码创建单元测试，并支持使用 Protractor 创建端到端测试。
- en: Karma
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Karma
- en: Karma ([https://karma-runner.github.io/2.0/index.html](https://karma-runner.github.io/2.0/index.html))
    is a test runner that can execute JavaScript code in real browsers. It creates
    a web server and executes the test code against the source code. Karma supports
    multiple testing frameworks such as Jasmine, Mocha, and Qunit, and integrates
    well with continuous integration tools.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Karma ([https://karma-runner.github.io/2.0/index.html](https://karma-runner.github.io/2.0/index.html))
    是一个可以在真实浏览器中执行 JavaScript 代码的测试运行器。它创建一个 web 服务器，并针对源代码执行测试代码。Karma 支持多个测试框架，如
    Jasmine、Mocha 和 Qunit，并且与持续集成工具集成良好。
- en: Protractor
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Protractor
- en: Protractor ([http://www.protractortest.org](http://www.protractortest.org))
    is an end-to-end testing framework developed by the Angular team. It was originally
    intended for Angular and AngularJS applications but it is flexible enough to be
    used with any framework, such as React, JQuery, VueJS, and so on. Protractor runs
    e2e tests against real browsers using the Selenium web driver API.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Protractor ([http://www.protractortest.org](http://www.protractortest.org))
    是由 Angular 团队开发的一个端到端测试框架。它最初是为 Angular 和 AngularJS 应用程序设计的，但它足够灵活，可以与任何框架一起使用，例如
    React、JQuery、VueJS 等。Protractor 使用 Selenium WebDriver API 对真实浏览器运行 e2e 测试。
- en: Internationalization
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 国际化
- en: Internationalization (i18n) is a very important feature these days and JHipster
    supports this out-of-the-box. Multiple languages can be chosen during application
    creation. On the client side, this is achieved by storing GUI text in JSON files
    per language and using an Angular/React library to dynamically load this based
    on the language selected at runtime.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 国际化（i18n）是当今非常重要的一个特性，JHipster 支持开箱即用的国际化。在应用程序创建过程中可以选择多种语言。在客户端，这是通过为每种语言存储
    JSON 文件中的 GUI 文本，并使用 Angular/React 库根据运行时选择的语言动态加载这些文本来实现的。
- en: Do you know why internationalization is abbreviated as i18n? Because there are
    18 characters between I and N. There are other similarly named abbreviations in
    web technology, for example, Accessibility(a11y), Localization (l10n), Globalization
    (g11n), and Localizability (l12y).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道为什么国际化被缩写为 i18n 吗？因为 I 和 N 之间有 18 个字符。在 Web 技术中还有其他类似命名的缩写，例如，无障碍性（a11y）、本地化（l10n）、全球化（g11n）和可本地化（l12y）。
- en: Server-side technologies
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端技术
- en: Server-side technologies in web development have evolved a lot, and with the
    rise of frameworks such as Spring and Play, the need for Java EE has reduced and
    opened doors for more feature-rich alternatives, such as Spring Boot, for example.
    Some of the core technologies such as Hibernate are here to stay, while newer
    concepts such as JWT, Liquibase, Swagger, Kafka, and WebSockets bring a lot of
    additional opportunities. Let us take a quick look at some of the important technologies
    supported by JHipster; we will encounter these later on in the book and will take
    a deeper look at some of these technologies.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 网络开发中的服务器端技术已经发展了很多，随着Spring和Play等框架的兴起，Java EE的需求减少了，为更多功能丰富的替代品打开了大门，例如Spring
    Boot。一些核心技术，如Hibernate，将长期存在，而像JWT、Liquibase、Swagger、Kafka和WebSockets等新概念则带来了很多额外的机会。让我们快速了解一下JHipster支持的一些重要技术；我们将在本书的后续部分遇到这些技术，并对其中一些技术进行更深入的探讨。
- en: Spring Framework
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring框架
- en: The Spring Framework ([https://spring.io](https://spring.io)) might be the best
    thing since sliced bread in the Java world. It changed the Java web application
    landscape for the good. The landscape was monopolized by JavaEE vendors before
    the rise of Spring and soon after Spring, it became the number one choice for
    Java web developers, giving JavaEE a run for its money. At its core, Spring is
    an **Inversion of Control** (**IoC**) ([https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans](https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans))
    container providing dependency injection and application context. The main features
    of Spring or the Spring triangle, combine IoC, **Aspect-Oriented Programming **(**AOP**) ([https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop](https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop)),
    and technology abstractions together in a consistent way. The framework has numerous
    modules aimed at different tasks, such as data management, security, REST, web
    services, and so on. Spring Framework and its modules are free and open source.
    Let us see some of the important modules in a bit more detail.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 'Spring框架([https://spring.io](https://spring.io))可能是Java世界中最棒的事情。它改善了Java网络应用领域的格局。在Spring兴起之前，JavaEE供应商垄断了这一领域，Spring兴起后不久，它成为了Java网络开发者的首选，为JavaEE带来了竞争。在核心上，Spring是一个提供依赖注入和应用程序上下文的**控制反转**(**IoC**)
    ([https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans](https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans))容器。Spring的主要特性或Spring三角，以一致的方式将IoC、**面向切面编程**(**AOP**)
    ([https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop](https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop))和技术抽象结合起来。该框架有众多模块，针对不同的任务，如数据管理、安全、REST、网络服务等。Spring框架及其模块是免费和开源的。让我们更详细地了解一下一些重要的模块。 '
- en: IoC is a software design pattern where custom or task-specific code is invoked
    by a library, rather than the traditional procedural programming approach where
    custom code calls libraries when required. IoC helps to make the code more modular
    and extendable. AOP provides another way of thinking about program structure.
    The unit of modularity is the aspect that enables the modularization of concerns
    such as transaction management that cut across multiple types and objects.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: IoC是一种软件设计模式，其中自定义或任务特定的代码由库调用，而不是传统的程序性编程方法，在需要时自定义代码调用库。IoC有助于使代码更加模块化和可扩展。AOP提供了另一种思考程序结构的方式。模块化的单位是方面，它使诸如事务管理等跨越多个类型和对象的关注点模块化。
- en: Spring Boot
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot
- en: Spring Boot ([https://projects.spring.io/spring-boot](https://projects.spring.io/spring-boot))
    is a widely used solution these days for Java web application development. It
    has an opinionated convention over configuration approach. It is completely configuration
    driven and makes using Spring Framework and many other third-party libraries a
    pleasure. Spring Boot applications are production grade and can just *run* in
    any environment that has a JVM installed. It uses an embedded servlet container
    such as Tomcat, Jetty, or Undertow to run the application. It auto-configures
    Spring wherever possible and has starter POM for many modules and third-party
    libraries. It does not require any XML configuration and lets you customize autoconfigured
    beans using Java configuration.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot ([https://projects.spring.io/spring-boot](https://projects.spring.io/spring-boot))
    是目前广泛使用的 Java 网络应用程序开发解决方案。它采用了一种基于配置的约定优先方法。它是完全由配置驱动的，使得使用 Spring 框架和许多其他第三方库变得愉快。Spring
    Boot 应用程序是生产级别的，可以在安装了 JVM 的任何环境中运行。它使用嵌入式 Servlet 容器（如 Tomcat、Jetty 或 Undertow）来运行应用程序。它尽可能自动配置
    Spring，并为许多模块和第三方库提供启动 POM。它不需要任何 XML 配置，并允许您使用 Java 配置自定义自动配置的 bean。
- en: JHipster by default uses Undertow as the embedded server in the applications
    generated. Undertow is very lightweight and faster to start, and is ideal for
    the development and production of lightweight applications.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster 默认使用 Undertow 作为生成应用程序中的嵌入式服务器。Undertow 非常轻量级且启动速度快，非常适合轻量级应用程序的开发和生产。
- en: Spring Security
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security
- en: Spring Security ([https://projects.spring.io/spring-security](https://projects.spring.io/spring-security))
    is the de facto solution for security in a Spring Framework-based application.
    It provides API and utilities to manage all aspects of security, such as authentication
    and authorization. It supports a wide range of authentication mechanism such as
    OAuth2, JWT, Session (Web form), LDAP, **SSO** (**Single Sign-On**) servers, **JAAS**
    (**Java Authentication and Authorization Service**), Kerberos, and so on. It also
    has features such as remember me, concurrent session, and so on.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security ([https://projects.spring.io/spring-security](https://projects.spring.io/spring-security))
    是基于 Spring 框架的应用程序中事实上的安全解决方案。它提供 API 和实用工具来管理安全的所有方面，例如身份验证和授权。它支持广泛的身份验证机制，如
    OAuth2、JWT、会话（Web 表单）、LDAP、**SSO**（**单点登录**）服务器、**JAAS**（**Java 身份验证和授权服务**）、Kerberos
    等。它还具有诸如记住我、并发会话等功能。
- en: Spring MVC
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring MVC
- en: Spring MVC ([https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html](https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html))
    is the default solution to work with the Servlet API within Spring applications.
    It is a request-based system and abstracts the Servlet API to make it easier to
    design controllers to serve HTTP requests. REST is the de facto standard for designing
    API endpoints these days and Spring MVC REST is a specific subset that makes it
    easier to design and implement RESTful services.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Spring MVC ([https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html](https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html))
    是在 Spring 应用程序中与 Servlet API 交互的事实上的解决方案。它是一个基于请求的系统，并抽象化 Servlet API 以简化控制器的设计，以服务
    HTTP 请求。REST 是当今设计 API 端点的既定标准，Spring MVC REST 是一个特定的子集，使得设计和实现 RESTful 服务更加容易。
- en: Spring data
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring 数据
- en: Spring data ([http://projects.spring.io/spring-data](http://projects.spring.io/spring-data))
    is a module that abstracts data access operations for many different data access
    technologies and databases. It provides a consistent API to work seamlessly with
    different underlying implementations. This frees us from worrying about the underlying
    database and data access technology. It has powerful features such as dynamic
    query generation from method names, custom object mapping abstractions, and so
    on. Spring data supports working with JPA, MongoDB, Redis, and Elasticsearch to
    name a few. It also lets you export Spring data repositories as RESTful resources.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Spring data ([http://projects.spring.io/spring-data](http://projects.spring.io/spring-data))
    是一个模块，它抽象了多种不同的数据访问技术和数据库的数据访问操作。它提供了一个一致的 API，以便与不同的底层实现无缝工作。这使我们免于担心底层数据库和数据访问技术。它具有诸如从方法名称动态生成查询、自定义对象映射抽象等功能。Spring
    data 支持 JPA、MongoDB、Redis、Elasticsearch 等多种数据源的工作。它还允许您将 Spring data 存储库作为 RESTful
    资源导出。
- en: Security
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全
- en: In modern web applications, there are multiple ways to implement authentication
    and authorization. Spring security supports a wide range of mechanisms, as we
    saw earlier, and JHipster provides support for the following standards.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代Web应用程序中，有多种方式来实现身份验证和授权。Spring安全支持广泛的机制，正如我们之前所看到的，JHipster提供了对以下标准的支持。
- en: JWT
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JWT
- en: '**JSON Web Token** (JWT) ([https://jwt.io](https://jwt.io)) is an open industry
    standard for security tokens. JWT authentication works by a server and client
    passing and verifying claims. A server generates a JWT token and passes it back
    to the client when user credentials are successfully validated. The client will
    store this token locally and use it to request protect resources from the server
    later by passing the token in the request header. This is a stateless authentication
    mechanism. This is explained in detail in [Chapter 9](49b2ec94-463c-415c-a2f5-0d4e6c2943b7.xhtml),
    *Building Microservices with JHipster*.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**JSON Web Token**（JWT）([https://jwt.io](https://jwt.io)) 是一个开放的行业标准，用于安全令牌。JWT认证通过服务器和客户端传递和验证声明来实现。当用户凭据成功验证后，服务器生成JWT令牌并将其返回给客户端。客户端将此令牌本地存储，并在稍后通过在请求头中传递令牌来请求从服务器获取受保护资源。这是一个无状态的认证机制。这在本章的详细说明中有所解释，第9章，*使用JHipster构建微服务*。'
- en: Session
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 会话
- en: Session-based authentication is the traditional web form-based authentication
    mechanism where the server creates and maintains a session for the validated user
    credentials. This is stateful and normally is not very scalable unless you use
    a distributed HTTP session, which is possible using a distributed cache such as
    Hazelcast or using the session replication features of a dedicated web server
    or load balancer. JHipster adds a lot of features on top of the standard mechanism,
    such as secured tokens that are stored in DB, and can be invalidated, used in
    remember me mechanisms, and so on.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 基于会话的身份验证是传统的基于表单的认证机制，其中服务器为验证过的用户凭据创建并维护一个会话。这是有状态的，除非你使用分布式HTTP会话，例如使用Hazelcast这样的分布式缓存，或者使用专用Web服务器或负载均衡器的会话复制功能，否则通常不太可扩展。JHipster在标准机制之上添加了许多功能，例如存储在数据库中的安全令牌，可以被无效化，用于“记住我”机制等。
- en: OAuth2
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OAuth2
- en: OAuth2 ([https://developer.okta.com/blog/2017/06/21/what-the-heck-is-oauth](https://developer.okta.com/blog/2017/06/21/what-the-heck-is-oauth))
    is a protocol for stateless authentication and authorization. The protocol allows
    applications to obtain limited access to user accounts on services. User authentication
    is delegated to a service, typically an OAuth2 server. OAuth2 is more complicated
    to set up when compared to the previously mentioned mechanisms. JHipster supports
    setting up OAuth with **OpenID Connect** (OIDC) and can use Keycloak ([https://keycloak.org](https://keycloak.org))
    or Okta ([https://developer.okta.com/blog/2017/10/20/oidc-with-jhipster](https://developer.okta.com/blog/2017/10/20/oidc-with-jhipster))
    out of the box.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth2 ([https://developer.okta.com/blog/2017/06/21/what-the-heck-is-oauth](https://developer.okta.com/blog/2017/06/21/what-the-heck-is-oauth))
    是一个无状态认证和授权协议。与之前提到的机制相比，该协议允许应用程序获取对服务用户账户的有限访问权限。用户认证委托给一个服务，通常是OAuth2服务器。与之前提到的机制相比，OAuth2的设置更为复杂。JHipster支持使用**OpenID
    Connect**（OIDC）设置OAuth，并且可以开箱即用使用Keycloak ([https://keycloak.org](https://keycloak.org))
    或Okta ([https://developer.okta.com/blog/2017/10/20/oidc-with-jhipster](https://developer.okta.com/blog/2017/10/20/oidc-with-jhipster))。
- en: Build tools
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建工具
- en: JHipster supports using either Maven or Gradle as the build tool for the server-side
    code. Both are free and open source.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster支持使用Maven或Gradle作为服务器端代码的构建工具。两者都是免费且开源的。
- en: Maven
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven
- en: Maven ([https://maven.apache.org](https://maven.apache.org)) is a build automation
    tool that uses an XML document called `pom.xml` to specify how an application
    is built and its dependencies. Plugins and dependencies are downloaded from a
    central server and cached locally. The Maven build file is called a **Project
    Object Model** (POM) and it describes the build process itself. Maven has a long
    history and is much more stable and reliable compared to Gradle. It also has a
    huge ecosystem of plugins.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Maven ([https://maven.apache.org](https://maven.apache.org)) 是一个构建自动化工具，它使用一个名为
    `pom.xml` 的XML文档来指定应用程序的构建方式和其依赖项。插件和依赖项从中央服务器下载并本地缓存。Maven构建文件被称为**项目对象模型**（POM），它描述了构建过程本身。Maven有着悠久的历史，与Gradle相比，它更加稳定和可靠。它还有一个庞大的插件生态系统。
- en: Gradle
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gradle
- en: Gradle ([https://gradle.org](https://gradle.org)) is a build automation tool
    which uses a Groovy DSL to specify the build plan and dependencies. It is a strong
    contender rapidly gaining popularity and adoption. Gradle is much more flexible
    and feature-rich than Maven, making it an ideal choice for very complex build
    setups. The latest version of Gradle easily surpasses Maven in terms of speed
    and features. Another unique advantage of Gradle is the ability to write standard
    Groovy code in the build script, making it possible to do pretty much everything
    programmatically. It has great plugin support as well.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle ([https://gradle.org](https://gradle.org)) 是一个构建自动化工具，它使用 Groovy DSL
    来指定构建计划和依赖关系。它是一个强劲的竞争者，迅速获得流行度和采用率。Gradle 比 Maven 更灵活、功能更丰富，使其成为非常复杂构建设置的理想选择。Gradle
    的最新版本在速度和功能方面都轻松超越了 Maven。Gradle 的另一个独特优势是能够在构建脚本中编写标准的 Groovy 代码，这使得几乎可以程序化地完成任何事情。它还拥有出色的插件支持。
- en: Hibernate
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hibernate
- en: Hibernate ([http://hibernate.org](http://hibernate.org)) is the most popular
    **ORM **(**Object Relational Mapping**) tool for Java. It helps to map an object-oriented
    domain model to a relational database scheme using Java annotations. It implements
    **JPA **(**Java Persistence API**) and is the go-to provider for a JPA implementation.
    Hibernate also offers many additional features such as entity auditing, bean validation,
    and so on. Hibernate automatically generates SQL queries depending on the underlying
    database semantics and makes it possible to switch the databases of an application
    very easily. It also makes the application database independent without any vendor
    lock-in. Hibernate is free and open source software.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Hibernate ([http://hibernate.org](http://hibernate.org)) 是最流行的 **ORM**（**对象关系映射**）工具，用于
    Java。它通过 Java 注解帮助将面向对象的领域模型映射到关系数据库模式。Hibernate 实现了 **JPA**（**Java 持久化 API**），并且是
    JPA 实现的首选提供商。Hibernate 还提供了许多附加功能，如实体审计、Bean 验证等。Hibernate 会根据底层数据库语义自动生成 SQL
    查询，使得切换应用程序的数据库变得非常容易。它还使应用程序数据库独立，没有任何供应商锁定。Hibernate 是免费的开源软件。
- en: Liquibase
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Liquibase
- en: Liquibase ([http://www.liquibase.org](http://www.liquibase.org)) is a free and
    open source version control tool for the database. It lets you track, manage,
    and apply database schema changes using configuration files without having to
    fiddle with SQL. It is database independent and goes well with JPA, making the
    application database independent. Liquibase can be run from within the application,
    making database setup and management seamless, and eliminate the need for a DBA
    for most DB management. Liquibase can also add/remove data to/from a database,
    making it good for migrations as well.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Liquibase ([http://www.liquibase.org](http://www.liquibase.org)) 是一个免费的开源数据库版本控制工具。它允许您使用配置文件跟踪、管理和应用数据库模式更改，而无需与
    SQL 打交道。它是数据库无关的，并且与 JPA 兼容良好，使应用程序数据库独立。Liquibase 可以在应用程序内部运行，使得数据库设置和管理无缝，并且对于大多数数据库管理来说，无需
    DBA。Liquibase 还可以向数据库添加或从数据库中删除数据，使其非常适合迁移。
- en: Caching
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存
- en: Caching is a good practice in software development and it improves the performance
    of read operations considerably. Caching can be enabled for Hibernate 2nd level
    cache, and also with Spring Cache abstraction to enable caching at the method
    level. JHipster supports JCache-compatible Hibernate 2nd level cache provided
    by EhCache, Hazelcast, and Infinispan.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存是软件开发中的良好实践，并且可以显著提高读取操作的性能。可以为 Hibernate 的第二级缓存启用缓存，也可以使用 Spring Cache 抽象在方法级别启用缓存。JHipster
    支持 EhCache、Hazelcast 和 Infinispan 提供的与 JCache 兼容的 Hibernate 第二级缓存。
- en: Ehcache
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ehcache
- en: Ehcache ([http://www.ehcache.org](http://www.ehcache.org)) is an open source
    JCache provider and is one of the most widely used Java caching solutions. It
    is JCache compatible and is a good choice for applications that are not clustered.
    For clustered environments, additional Terracotta servers are required. It is
    stable, fast, and simple to set up.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Ehcache ([http://www.ehcache.org](http://www.ehcache.org)) 是一个开源的 JCache 提供商，并且是使用最广泛的
    Java 缓存解决方案之一。它与 JCache 兼容，对于非集群应用程序来说是一个不错的选择。对于集群环境，需要额外的 Terracotta 服务器。它稳定、快速，并且易于设置。
- en: Hazelcast
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hazelcast
- en: Hazelcast ([https://hazelcast.org](https://hazelcast.org)) is an open source distributed in-memory
    data grid solution. It has excellent support for clustered applications and distributed
    environments and hence becomes a good choice for caching. While Hazelcast has
    numerous other features and use-cases, caching remains one of the important ones.
    It is highly scalable and a good option for microservices due to its distributed
    nature.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Hazelcast ([https://hazelcast.org](https://hazelcast.org)) 是一个开源的分布式内存数据网格解决方案。它对集群应用程序和分布式环境有出色的支持，因此成为缓存的一个好选择。虽然
    Hazelcast 有许多其他功能和用例，但缓存仍然是其中之一。由于其分布式特性，它高度可扩展，是微服务的一个好选择。
- en: Infinispan
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Infinispan
- en: Infinispan ([http://infinispan.org](http://infinispan.org)) is a distributed
    cache and key-value store from Red Hat. It is free and open source. It supports
    clustered environments and is hence a good choice for microservices. It has more
    features such as in-memory data grids, MapReduce support, and so on.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Infinispan ([http://infinispan.org](http://infinispan.org)) 是来自 Red Hat 的分布式缓存和键值存储。它是免费和开源的。它支持集群环境，因此是微服务的一个好选择。它还具有内存数据网格、MapReduce
    支持等功能。
- en: Swagger
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swagger
- en: OpenAPI specification (previously known as **Swagger specification**) is an
    open standard for designing and consuming RESTful web services and API. The OpenAPI specification
    is a standard founded by a variety of companies including Google, Microsoft, and
    IBM. The Swagger ([https://swagger.io](https://swagger.io)) name is now used for
    the associated tooling. JHipster supports API-first development model with Swagger
    code-gen and also supports API visualization with Swagger UI.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: OpenAPI 规范（之前被称为 **Swagger 规范**）是设计和使用 RESTful 网络服务和 API 的开放标准。OpenAPI 规范是由包括
    Google、Microsoft 和 IBM 在内的多家公司共同创立的标准。Swagger ([https://swagger.io](https://swagger.io))
    的名字现在用于相关的工具。JHipster 支持使用 Swagger code-gen 进行 API-first 开发模型，同时也支持使用 Swagger
    UI 进行 API 可视化。
- en: Thymeleaf
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Thymeleaf
- en: Thymeleaf ([http://www.thymeleaf.org](http://www.thymeleaf.org)) is an open
    source Java server-side templating engine with very good integration with Spring.
    Thymeleaf can be used to generated web pages on the server side, for templating
    email messages and so on. Although server-side web page templates are slowly losing
    out to client-side MVVM frameworks, it is still a useful tool if one wants to
    have something more than a single page application using Angular.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Thymeleaf ([http://www.thymeleaf.org](http://www.thymeleaf.org)) 是一个与 Spring
    集成非常良好的开源 Java 服务器端模板引擎。Thymeleaf 可以用于在服务器端生成网页，用于模板化电子邮件消息等。尽管服务器端网页模板正逐渐被客户端
    MVVM 框架所取代，但如果想要比单页应用使用 Angular 更多的功能，它仍然是一个有用的工具。
- en: Dropwizard metrics
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dropwizard metrics
- en: Dropwizard metrics ([http://metrics.dropwizard.io/4.0.0/](http://metrics.dropwizard.io/4.0.0/))
    is an excellent open source library for measuring the performance of your Java
    web application. Paired with Spring Boot, this can bring a lot of value by measuring
    the performance of the REST API, measuring the performance of cache layer and
    database, and so on. Dropwizard provides handy annotations to mark methods to
    be monitored. It supports counters, timers, and so on.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Dropwizard metrics ([http://metrics.dropwizard.io/4.0.0/](http://metrics.dropwizard.io/4.0.0/))
    是一个用于测量 Java 网络应用程序性能的出色开源库。与 Spring Boot 配对，通过测量 REST API 的性能、测量缓存层和数据库的性能等方式，可以带来很多价值。Dropwizard
    提供了方便的注解来标记要监控的方法。它支持计数器、计时器等。
- en: WebSocket
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSocket
- en: WebSocket ([https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API))
    is a communication protocol that works on top of TCP. It provides a full-duplex
    communication channel over a single TCP connection. It was standardized by W3C
    ([https://www.w3.org](https://www.w3.org)). It is lightweight and enables real-time
    communication between a client and server. In terms of web applications, this
    enables the server to communicate with the client app in the browser without a
    request from the client. This opens the door to pushing data from server to client
    in real-time and for implementations such as real time chat, notifications, and
    so on. On the server side, JHipster relies on Spring, which provides the necessary
    support ([https://spring.io/guides/gs/messaging-stomp-websocket/](https://spring.io/guides/gs/messaging-stomp-websocket/))
    to work with WebSocket.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket([https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API))
    是一种在TCP之上工作的通信协议。它通过单个TCP连接提供全双工通信通道。它由W3C([https://www.w3.org](https://www.w3.org))标准化。它轻量级，并允许客户端和服务器之间进行实时通信。在Web应用方面，这允许服务器在客户端没有请求的情况下与浏览器中的客户端应用进行通信。这为实时推送数据从服务器到客户端以及实现实时聊天、通知等打开了大门。在服务器端，JHipster依赖于Spring，它提供了必要的支持([https://spring.io/guides/gs/messaging-stomp-websocket/](https://spring.io/guides/gs/messaging-stomp-websocket/))以与WebSocket协同工作。
- en: Kafka
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kafka
- en: Kafka ([https://kafka.apache.org](https://kafka.apache.org)) is an open source
    stream processing system. It has a distributed pub/sub-based message queue for
    storage. Its fault tolerance and scale has helped it to replace JMS and AMQP as
    the preferred messaging queue. Spring provides an abstraction on top of Kafka
    to make it easier to configure and work with Kafka.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka([https://kafka.apache.org](https://kafka.apache.org)) 是一个开源的流处理系统。它有一个基于分布式pub/sub的消息队列用于存储。它的容错性和可扩展性帮助它取代JMS和AMQP，成为首选的消息队列。Spring在Kafka之上提供了一个抽象层，使其更容易配置和使用Kafka。
- en: JMS (Java Message Service) ([https://en.wikipedia.org/wiki/Java_Message_Service](https://en.wikipedia.org/wiki/Java_Message_Service))
    is a messaging standard developed for Java EE and enables sending and receiving
    asynchronous messages between components using topics and queues. AMQP(Advanced
    Message Queuing Protocol) ([https://www.amqp.org/](https://www.amqp.org/)) is
    an open standard protocol for message-oriented middleware, providing features
    such as queuing, routing, and publish-subscribe mechanisms.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: JMS（Java消息服务）([https://en.wikipedia.org/wiki/Java_Message_Service](https://en.wikipedia.org/wiki/Java_Message_Service))
    是为Java EE开发的消息标准，它允许使用主题和队列在组件之间发送和接收异步消息。AMQP（高级消息队列协议）([https://www.amqp.org/](https://www.amqp.org/))
    是一种面向消息中间件的开源标准协议，提供如队列、路由和发布/订阅机制等功能。
- en: Testing frameworks
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试框架
- en: Server-side testing can be mainly categorized into unit testing, integration
    testing, performance testing, and behavior testing. JHipster supports all of these
    with the following tools out of which JUnit comes out-of-the-box, and others are
    opt-in.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端测试可以主要分为单元测试、集成测试、性能测试和行为测试。JHipster支持所有这些测试，其中JUnit是默认提供的，其他则是可选的。
- en: JUnit
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JUnit
- en: JUnit ([https://junit.org/junit5/](https://junit.org/junit5/)) is the most widely
    used Java testing framework. It is a free and open source software. It was originally
    intended for unit testing but combined with Spring Test Framework ([https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#testing-introduction](https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#testing-introduction))
    it can also be used for Integration testing. JHipster creates unit tests and REST
    API integration tests using JUnit and Spring Test Framework.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit([https://junit.org/junit5/](https://junit.org/junit5/)) 是最广泛使用的Java测试框架。它是一个免费的开源软件。最初它旨在进行单元测试，但与Spring
    Test Framework([https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#testing-introduction](https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#testing-introduction))结合使用后，也可以用于集成测试。JHipster使用JUnit和Spring
    Test Framework创建单元测试和REST API集成测试。
- en: Gatling
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gatling
- en: Gatling ([https://gatling.io/](https://gatling.io/)) is a free and open source
    performance and load testing tool. It is based on Scala and uses a Scala DSL to
    write test spec. It creates detailed reports of the load testing and it can be
    used to simulate all kinds of load on a system. It is a required tool for performance
    critical applications.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Gatling ([https://gatling.io/](https://gatling.io/)) 是一款免费且开源的性能和负载测试工具。它基于Scala，并使用Scala
    DSL编写测试规范。它能够创建详细的负载测试报告，并可以用来模拟系统上的各种负载。它是性能关键应用中必备的工具。
- en: Cucumber
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cucumber
- en: Cucumber ([https://cucumber.io/](https://cucumber.io/)) is a **Behavior-Driven
    Development** (**BDD**) testing framework used mainly for acceptance testing.
    It uses a language parser called **Gherkin**, which is very human readable as
    looks similar to plain English.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Cucumber ([https://cucumber.io/](https://cucumber.io/)) 是一个主要用于验收测试的**行为驱动开发**（**BDD**）测试框架。它使用一种名为**Gherkin**的语言解析器，这种语言解析器非常易于人类阅读，看起来类似于普通的英语。
- en: Introduction to database options
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库选项简介
- en: 'Today, there are a wide variety of database options out there. These can be
    broadly classified into the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，市场上提供了各种各样的数据库选项。这些可以大致分为以下几类：
- en: SQL databases
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL数据库
- en: NoSQL databases
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NoSQL数据库
- en: You can visit; [https://db-engines.com/en/ranking](https://db-engines.com/en/ranking)
    to see the popularity of different databases.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以访问[https://db-engines.com/en/ranking](https://db-engines.com/en/ranking)以查看不同数据库的流行度。
- en: JHipster supports some of the most widely used databases, as detailed here.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster支持一些最广泛使用的数据库，具体详情请见此处。
- en: SQL databases
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL数据库
- en: SQL databases or **Relational Database Management Systems** (**RDBMS**) are
    those that support a relational table-oriented data model. They support table
    schema defined by the fixed name and number of columns/attributes with a fixed
    data type. Each row in a table contains a value for every column. Tables can be
    related to each other.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: SQL数据库或**关系数据库管理系统**（**RDBMS**）是指支持关系表型数据模型的数据库。它们支持由固定名称和列/属性数量以及固定数据类型定义的表模式。表中的每一行都包含每个列的值。表可以相互关联。
- en: H2
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: H2
- en: H2 ([http://www.h2database.com/html/main.html](http://www.h2database.com/html/main.html))
    is a free embedded RDBMS commonly used for development and testing. It normally
    can run in file system mode for persistence or in-memory mode. It has a very small
    footprint and is extremely easy to configure and use. It doesn't have many of
    the enterprise features offered by other mainstream database engines and hence
    normally is not preferred for production usage.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: H2 ([http://www.h2database.com/html/main.html](http://www.h2database.com/html/main.html))
    是一款免费嵌入式的RDBMS，通常用于开发和测试。它通常可以在文件系统模式下运行以实现持久性，或在内存模式下运行。它具有非常小的体积，并且配置和使用极其简单。它没有提供其他主流数据库引擎所提供的许多企业级功能，因此通常不适用于生产使用。
- en: MySQL
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL
- en: MySQL ([https://www.mysql.com/](https://www.mysql.com/)) is one of the most
    popular database engines and is free and open source software. It is from Oracle
    but also has a very vibrant community. It has enterprise-ready features such as
    sharding, replication, partitioning, and so on. It is one of the most preferred
    SQL databases these days.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL ([https://www.mysql.com/](https://www.mysql.com/)) 是最受欢迎的数据库引擎之一，它是一款免费且开源的软件。它由甲骨文公司开发，但也拥有一个非常活跃的社区。它具备诸如分片、复制、分区等企业级功能。它是目前最受欢迎的SQL数据库之一。
- en: MariaDB
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MariaDB
- en: MariaDB ([https://mariadb.org/](https://mariadb.org/)) is a MySQL compliant
    database engine with an additional focus on security, performance, and high availability.
    It is gaining popularity and is sought as a good alternative for MySQL. It is
    free and open source software.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB ([https://mariadb.org/](https://mariadb.org/)) 是一个符合MySQL规范的数据库引擎，它还特别关注安全性、性能和高可用性。它越来越受欢迎，被视为MySQL的良好替代品。它是一款免费且开源的软件。
- en: PostgreSQL
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: PostgreSQL ([https://www.postgresql.org/](https://www.postgresql.org/)) is another
    free and open source database system that is very much in demand. It is actively maintained
    by a community. One of the unique features of PostgreSQL is the advanced JSON
    object storage with the capability to index and query within the JSON. This makes
    it possible to use it as a NoSQL database or in Hybrid mode. It also has enterprise-ready
    features such as replication, high availability, and so on.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL ([https://www.postgresql.org/](https://www.postgresql.org/)) 是另一个非常受欢迎的免费和开源数据库系统。它由一个社区积极维护。PostgreSQL的一个独特特性是具有索引和查询JSON对象的先进JSON对象存储能力。这使得它能够作为NoSQL数据库或混合模式使用。它还具备复制、高可用性等企业级功能。
- en: MS SQL
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MS SQL
- en: MS SQL server ([https://www.microsoft.com/nl-nl/sql-server/sql-server-2017](https://www.microsoft.com/nl-nl/sql-server/sql-server-2017))
    is an enterprise database system developed and supported by Microsoft. It is commercial
    software and requires a paid license to use. It has enterprise-ready features
    and premium support from Microsoft. It is one of the popular choices for mission-critical
    systems.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: MS SQL服务器 ([https://www.microsoft.com/nl-nl/sql-server/sql-server-2017](https://www.microsoft.com/nl-nl/sql-server/sql-server-2017))
    是由微软开发和支持的数据库系统，是一个企业级数据库系统。它是商业软件，需要付费许可才能使用。它具有企业级功能，并享有微软的高级支持。它是用于关键任务系统的流行选择之一。
- en: Oracle
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Oracle
- en: Oracle ([https://www.oracle.com/database/index.html](https://www.oracle.com/database/index.html))
    is the most used database due to its legacy and enterprise features. It is commercial
    software and requires a paid license to use. It has enterprise-ready features
    such as sharding, replication, high availability, and so on.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle ([https://www.oracle.com/database/index.html](https://www.oracle.com/database/index.html))
    由于其传统和企业功能而成为最常用的数据库。它是商业软件，需要付费许可才能使用。它具有企业级功能，如分片、复制、高可用性等。
- en: NoSQL databases
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NoSQL数据库
- en: This is a wide umbrella that encompasses any database that is not an RDBMS.
    This includes document stores, wide column stores, search engines, key-value stores,
    graph DBMS, content stores, and so on. A general trait of such databases is that
    they can be schema-less and do not rely on relational data.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个广泛的范畴，包括所有不是关系型数据库管理系统（RDBMS）的数据库。这包括文档存储、宽列存储、搜索引擎、键值存储、图数据库管理系统、内容存储等等。这类数据库的一般特点是它们可以是模式无关的，并且不依赖于关系数据。
- en: MongoDB
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB
- en: MongoDB ([https://www.mongodb.com/](https://www.mongodb.com/)) is a cross-platform
    document store and is one of the most popular choices for NoSQL databases. It
    has a proprietary JSON-based API and query language. It supports MapReduce and
    enterprise features such as sharding, replication, and so on. It is free and open
    source software.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB ([https://www.mongodb.com/](https://www.mongodb.com/)) 是一个跨平台文档存储，是NoSQL数据库中最受欢迎的选择之一。它拥有专有的基于JSON的API和查询语言。它支持MapReduce和企业级功能，如分片、复制等。它是免费和开源软件。
- en: MapReduceis a data processing paradigm where a job is split into multiple parallel
    map tasks, with the produced output sorted and reduced into the result. This makes
    processing large datasets efficient and faster.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: MapReduce是一种数据处理范式，将一个任务分割成多个并行映射任务，对产生的输出进行排序和归约成结果。这使得处理大型数据集变得高效且更快。
- en: Cassandra
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cassandra
- en: Apache Cassandra ([http://cassandra.apache.org/](http://cassandra.apache.org/))
    is distributed column store with a focus on high availability, scalability, and
    performance. Due to its distributed nature, it doesn't have a single point of
    failure making it is the most popular choice for critical high availability systems.
    It was originally developed and open sourced by Facebook.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Cassandra ([http://cassandra.apache.org/](http://cassandra.apache.org/))
    是一个分布式列存储，专注于高可用性、可扩展性和性能。由于其分布式特性，它没有单点故障，因此成为最流行的关键高可用性系统选择。它最初由Facebook开发和开源。
- en: Did you know that Cassandra can have up to 2 billion columns per row?
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道吗，Cassandra每行可以拥有高达20亿个列？
- en: Elasticsearch
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Elasticsearch
- en: Elasticsearch ([https://www.elastic.co/products/elasticsearch](https://www.elastic.co/products/elasticsearch))
    is a search and analytics engine based on Apache Lucene ([http://lucene.apache.org/](http://lucene.apache.org/)). It
    is technically a NoSQL database but it is primarily used as a search engine due
    to its indexing capability and high performance. It can be distributed and multi-tenant
    with full-text search capability. It has a web interface and JSON documents. It
    is one of the most used search engines.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Elasticsearch ([https://www.elastic.co/products/elasticsearch](https://www.elastic.co/products/elasticsearch))
    是一个基于Apache Lucene ([http://lucene.apache.org/](http://lucene.apache.org/)) 的搜索和分析引擎。它在技术上是一个NoSQL数据库，但由于其索引能力和高性能，主要用作搜索引擎。它具有分布式和多租户功能，并具备全文搜索能力。它拥有网络界面和JSON文档。它是使用最广泛的搜索引擎之一。
- en: Installation and setup
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和设置
- en: To get started with JHipster, you will have to install the JHipster CLI tool.
    The JHipster CLI comes with commands required to use all of the features offered
    by the platform.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用JHipster，您必须安装JHipster CLI工具。JHipster CLI包含使用平台提供的所有功能所需的命令。
- en: 'JHipster Online: If you would like to create an application without installing
    anything, you can do so by visiting [https://start.jhipster.tech](https://start.jhipster.tech).
    You can authorize the application to generate a project directly in your GitHub
    account or you can download the source as a ZIP file.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster 在线：如果您想创建一个不需要安装任何东西的应用程序，您可以通过访问 [https://start.jhipster.tech](https://start.jhipster.tech) 来实现。您可以将应用程序授权以直接在您的
    GitHub 账户中生成项目，或者您可以将其作为 ZIP 文件下载。
- en: Prerequisites
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件
- en: Before we install the JHipster CLI, let's take a look at the prerequisites.
    We will need to install some dependencies and configure our favorite IDE to work
    best with generated code. You can visit [http://www.jhipster.tech/installation/](http://www.jhipster.tech/installation/) to
    get up to date information about this.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们安装 JHipster CLI 之前，让我们先看看先决条件。我们需要安装一些依赖项，并配置我们最喜欢的 IDE 以最佳方式与生成的代码一起工作。您可以访问 [http://www.jhipster.tech/installation/](http://www.jhipster.tech/installation/) 以获取有关此信息的最新信息。
- en: Tools required
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要的工具
- en: The following are the tools required to install JHipster and to work with the
    generated applications. If you do not have them installed already follow, these
    steps and install them.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要安装 JHipster 以及与生成的应用程序一起工作的工具。如果您尚未安装，请按照以下步骤进行安装。
- en: 'You will need to use a command-line interface (Command Prompt or Terminal application)
    throughout this section and hence it is better to have one open. Since the installation
    of some of the following tools will alter the environment variables, you might
    have to close and reopen the Terminal after the installation of a tool:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您需要使用命令行界面（命令提示符或终端应用程序），因此最好有一个终端已经打开。由于以下工具的安装将更改环境变量，您可能需要在安装一个工具后关闭并重新打开终端：
- en: On Windows, use the default **Command Prompt** (**CMD**) or Powershell
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上，使用默认的 **命令提示符** (**CMD**) 或 PowerShell
- en: On Linux, use Bash or your favorite Terminal emulator
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux 上，使用 Bash 或您喜欢的终端模拟器
- en: On macOS, use iTerm or your favorite Terminal application
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 macOS 上，使用 iTerm 或您喜欢的终端应用程序
- en: Installation procedure
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装过程
- en: Let us see the installation procedure for each of the tools.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看每个工具的安装过程。
- en: Java 8
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 8
- en: Java 9 is the latest Java release introducing features like modules, reactive
    streams and so on. While JHipster applications will work with Java 9 it is recommended
    to stick to the more stable Java 8 until Java 9 support is stable in all the dependencies
    used.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9 是最新版本的 Java，引入了模块、响应式流等功能。虽然 JHipster 应用程序可以与 Java 9 一起工作，但在 Java 9 支持在所有依赖项中稳定之前，建议继续使用更稳定的
    Java 8。
- en: 'The generated applications use Java 8 and hence it is required to compile the applications:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的应用程序使用 Java 8，因此需要编译应用程序：
- en: Check for your installed Java version by running the command `java -version` in
    the Terminal. It should display `java version "1.8.x"` where x could be any patch
    version.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中运行命令 `java -version` 来检查您的 Java 版本。它应该显示 `java version "1.8.x"`，其中 x 可以是任何补丁版本。
- en: If you do not have the correct version installed, you can visit the Oracle website
    ([http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html))
    and follow the instructions to install the JDK for Java 8.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您没有安装正确的版本，您可以访问 Oracle 网站 ([http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html))
    并按照说明安装 Java 8 的 JDK。
- en: Once installed, check the command in step 1 again to make sure. As the JDK alters
    the environment variable to set `JAVA_HOME` you would have to open a new Terminal
    here.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，再次检查步骤 1 中的命令，以确保无误。由于 JDK 会更改环境变量以设置 `JAVA_HOME`，因此您在这里需要打开一个新的终端。
- en: Git
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git
- en: Git is the most used version control system for source code management. It promotes
    distributed revision control and is an integral part of development these days.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是最常用的源代码管理版本控制系统。它促进了分布式修订控制，并且现在是开发的一个基本组成部分。
- en: 'JHipster uses Git for upgrading applications and Git is also recommended for
    the smooth working of NodeJS and NPM ecosystems:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster 使用 Git 进行应用程序升级，并且也推荐使用 Git 来确保 NodeJS 和 NPM 生态系统的顺畅运行：
- en: Check for Git by running `git --version` in the Terminal. It should display `git
    version x.x.x`; the version number can be anything.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中运行 `git --version` 来检查 Git。它应该显示 `git version x.x.x`；版本号可以是任何数字。
- en: If the command is not found, you can visit git-scm ([https://git-scm.com/downloads](https://git-scm.com/downloads))
    and follow the instructions to install Git on your operating system.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果命令未找到，您可以访问git-scm（[https://git-scm.com/downloads](https://git-scm.com/downloads)）并按照说明在您的操作系统上安装Git。
- en: Once installed, check the command in step 1 again to make sure.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，再次检查步骤1中的命令以确保无误。
- en: Node.js
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js
- en: Node.js is a JavaScript runtime environment. It revolutionized the JavaScript
    world and made JavaScript the most popular development language among developers
    today (according to [https://insights.stackoverflow.com/survey/2017#technology-programming-languages](https://insights.stackoverflow.com/survey/2017#technology-programming-languages)).
    The Node ecosystem is the largest in the world with over 600,000 packages and
    is managed by NPM, the default package manager.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js是一个JavaScript运行环境。它彻底改变了JavaScript世界，使JavaScript成为当今开发者中最受欢迎的开发语言（根据[https://insights.stackoverflow.com/survey/2017#technology-programming-languages](https://insights.stackoverflow.com/survey/2017#technology-programming-languages)）。Node生态系统是世界上最大的，拥有超过600,000个包，并由NPM（默认包管理器）管理。
- en: 'The JHipster CLI is a NodeJS application and hence requires NodeJS, to run,
    and many of the tools used in the generated application will also require NodeJS:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster CLI是一个NodeJS应用程序，因此需要NodeJS来运行，并且生成应用程序中使用的许多工具也将需要NodeJS：
- en: Check for NodeJS by typing `node -v` in the Terminal. It should display a version
    number. Make sure that the version number is greater than 8.9 and corresponds
    to the latest LTS version of NodeJS.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中键入`node -v`来检查NodeJS。它应该显示一个版本号。请确保版本号大于8.9，并且对应于NodeJS的最新LTS版本。
- en: If the command is not found or if you have a lower version of NodeJS then you
    can visit the Node.js website ([https://nodejs.org/en/download/](https://nodejs.org/en/download/)) and
    follow the instructions to install the latest LTS version available. Please note
    that non-LTS versions (current) might not be stable and it is advised not to use
    them.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果命令未找到或您有较低版本的NodeJS，则可以访问Node.js网站（[https://nodejs.org/en/download/](https://nodejs.org/en/download/)）并按照说明安装最新可用的LTS版本。请注意，非LTS版本（当前版本）可能不稳定，建议不要使用它们。
- en: Once installed, check the command in step 1 again to make sure. As NodeJS alters
    the environment variables, you would have to open a new Terminal here.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，再次检查步骤1中的命令以确保无误。由于NodeJS会修改环境变量，因此在这里您需要打开一个新的终端。
- en: NPM is automatically installed when you install NodeJS. You can check this by
    running `npm -v` in the Terminal.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您安装NodeJS时，NPM会自动安装。您可以在终端中运行`npm -v`来检查这一点。
- en: You can install multiple NPM packages by running the command `npm -g install
    bower gulp-cli` CLI or using Yarn, `yarn global add bower gulp-cli`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行命令`npm -g install bower gulp-cli`或使用Yarn，`yarn global add bower gulp-cli`来安装多个NPM包。
- en: Yarn
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Yarn
- en: Yarn is a package manager for NodeJS. It is API and feature compatible with
    NPM and provides better performance and a flat package tree.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Yarn是NodeJS的包管理器。它与NPM的API和功能兼容，并提供更好的性能和平坦的包树。
- en: 'JHipster, by default, uses Yarn instead of NPM as Yarn is much faster at the
    time of writing. If you prefer to use NPM, then you can skip this step:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，JHipster使用Yarn而不是NPM，因为Yarn在撰写本文时速度更快。如果您希望使用NPM，则可以跳过此步骤：
- en: You can visit the Yarn website ([https://yarnpkg.com/en/docs/install](https://yarnpkg.com/en/docs/install))
    and follow the instructions to install Yarn.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以访问Yarn网站（[https://yarnpkg.com/en/docs/install](https://yarnpkg.com/en/docs/install)）并按照说明安装Yarn。
- en: Once installed, check by running `yarn --version` to make sure.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，通过运行`yarn --version`来检查以确保无误。
- en: Docker
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker
- en: Docker is the defacto standard for container management and it made using containers
    a breeze. It provides tools to create, share and deploy containers.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是容器管理的默认标准，它使使用容器变得轻而易举。它提供了创建、共享和部署容器的工具。
- en: 'You will need Docker and `docker-compose` to run the generated database images
    and for the development of microservices:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要Docker和`docker-compose`来运行生成的数据库镜像以及微服务开发：
- en: Check for Docker by running `docker -v` in a terminal. It should display a version
    number.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行`docker -v`来检查Docker。它应该显示一个版本号。
- en: Check for `docker-compose` by running `docker-compose -v` in a Terminal. It
    should display a version number. If you are on Mac or Linux you could just run `docker
    -v && docker-compose -v` together.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行`docker-compose -v`来检查`docker-compose`。它应该显示一个版本号。如果您使用的是Mac或Linux，您可以一起运行`docker
    -v && docker-compose -v`。
- en: If the command is not found, you can visit the Docker website ([https://docs.docker.com/install/](https://docs.docker.com/install/))
    and follow the instructions to install it. Also, install Docker Compose ([https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/))
    by following the instructions.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果找不到命令，您可以访问 Docker 网站 ([https://docs.docker.com/install/](https://docs.docker.com/install/))
    并按照说明进行安装。此外，按照说明安装 Docker Compose ([https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/))。
- en: Once installed, check the command in step 1 again to make sure.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，再次检查步骤 1 中的命令，以确保无误。
- en: Optionally Install a Java build tool: Normally JHipster will automatically install
    the Maven Wrapper ([https://github.com/takari/maven-wrapper](https://github.com/takari/maven-wrapper)) or
    the Gradle Wrapper ([https://docs.gradle.org/current/userguide/gradle_wrapper.html](https://docs.gradle.org/current/userguide/gradle_wrapper.html)) for
    you, based on your choice of build tool. If you don't want to use those wrappers,
    go to the official Maven website ([http://maven.apache.org/](http://maven.apache.org/)) or Gradle website
    ([https://gradle.org/](https://gradle.org/)) to do your own installation.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 可选安装 Java 构建工具：通常 JHipster 会根据您的构建工具选择自动安装 Maven Wrapper ([https://github.com/takari/maven-wrapper](https://github.com/takari/maven-wrapper))
    或 Gradle Wrapper ([https://docs.gradle.org/current/userguide/gradle_wrapper.html](https://docs.gradle.org/current/userguide/gradle_wrapper.html))，如果您不想使用这些包装器，请访问官方
    Maven 网站 ([http://maven.apache.org/](http://maven.apache.org/)) 或 Gradle 网站 ([https://gradle.org/](https://gradle.org/))
    进行自己的安装。
- en: IDE configuration
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IDE 配置
- en: 'JHipster applications can be created by using a command-line interface and
    JHipster CLI. Technically speaking, an IDE is not a requirement but when you continue
    development of a generated application it is highly recommended that you use a
    proper Java IDE such as IntelliJ, Eclipse, or Netbeans. Sometimes you could also
    use advanced text editors such as Visual Studio Code or Atom with appropriate
    plugins to get the work done. Depending on the IDE/text editor you choose, it
    is recommended to use the following plugins to make development more productive:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster 应用程序可以通过使用命令行界面和 JHipster CLI 创建。从技术上讲，IDE 不是必需的，但在继续开发生成的应用程序时，强烈建议您使用适当的
    Java IDE，例如 IntelliJ、Eclipse 或 Netbeans。有时您也可以使用带有适当插件的先进文本编辑器，如 Visual Studio
    Code 或 Atom，以完成工作。根据您选择的 IDE/文本编辑器，建议使用以下插件以提高开发效率：
- en: 'Angular/React: Tslint, TypeScript, editor config'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular/React：Tslint、TypeScript、编辑器配置
- en: 'Java: Spring, Gradle/Maven, Java Language support (VS Code)'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java：Spring、Gradle/Maven、Java 语言支持（VS Code）
- en: Regardless of IDE/text Editor, always exclude the folders `node_modules`, `git`,
    `build`, and `target` to speed up indexing. Some IDEs will do this automatically
    based on the `.gitignore` file.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用 IDE/文本编辑器，始终排除 `node_modules`、`git`、`build` 和 `target` 文件夹以加快索引速度。一些 IDE
    会根据 `.gitignore` 文件自动执行此操作。
- en: Visit [http://www.jhipster.tech/configuring-ide/](http://www.jhipster.tech/configuring-ide/)
    in your favorite browser to read more about this.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在您喜欢的浏览器中访问 [http://www.jhipster.tech/configuring-ide/](http://www.jhipster.tech/configuring-ide/)
    了解更多信息。
- en: System setup
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统设置
- en: 'Before installing and diving into JHipster, here are a few pointers to prepare
    you for some of the common issues that one might encounter:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装和深入研究 JHipster 之前，这里有一些提示，以帮助您准备可能遇到的一些常见问题：
- en: When using Yarn on macOS or Linux, you need to have `$HOME/.config/yarn/global/node_modules/.bin` in
    the path. This will normally be automatically done when you install Yarn but if
    not, you can run the command ``export PATH="$PATH:`yarn global bin`:$HOME/.config/yarn/global/node_modules/.bin"`` in
    a Terminal to do this.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当在 macOS 或 Linux 上使用 Yarn 时，您需要在路径中包含 `$HOME/.config/yarn/global/node_modules/.bin`。这通常在您安装
    Yarn 时自动完成，如果没有，您可以在终端中运行命令 ```export PATH="$PATH:`yarn global bin`:$HOME/.config/yarn/global/node_modules/.bin"`
    来完成此操作。
- en: If you are behind a corporate proxy, you will have to bypass it for NPM, Bower,
    and Maven/Gradle to work properly. Visit [http://www.jhipster.tech/configuring-a-corporate-proxy/](http://www.jhipster.tech/configuring-a-corporate-proxy/)
    to see what proxy options can be set for different tools used.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您在公司代理后面，您将需要绕过它以使 NPM、Bower 和 Maven/Gradle 正常工作。请访问 [http://www.jhipster.tech/configuring-a-corporate-proxy/](http://www.jhipster.tech/configuring-a-corporate-proxy/)
    了解可以为不同工具设置哪些代理选项。
- en: If you are on Mac or Linux and if you are using Oh-My-Zsh or the Fisherman shell
    then you could use the specific plugins from JHipster for that. Visit [http://www.jhipster.tech/shell-plugins/](http://www.jhipster.tech/shell-plugins/)
    for details.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Mac 或 Linux，并且如果你使用的是 Oh-My-Zsh 或 Fisherman shell，那么你可以使用 JHipster 为此提供的特定插件。访问
    [http://www.jhipster.tech/shell-plugins/](http://www.jhipster.tech/shell-plugins/)
    获取详细信息。
- en: Installation of JHipster
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JHipster 安装
- en: OK, now let's get started for real. JHipster can be used from a local installation
    with NPM or Yarn, from a Vagrant image provided by the team, or using a Docker
    image. Alternatively, there is also the JHipster online application we saw earlier.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在让我们真正开始吧。JHipster 可以通过本地安装使用 NPM 或 Yarn，通过团队提供的 Vagrant 镜像，或者使用 Docker
    镜像。或者，还有我们之前看到的 JHipster 在线应用程序。
- en: 'Among all the options, the best way to utilize the full power of JHipster would
    be by installing the JHipster CLI using Yarn or NPM. Open a Terminal and run:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有选项中，要充分利用 JHipster 的全部功能，最佳方式是通过使用 Yarn 或 NPM 安装 JHipster CLI。打开一个终端并运行：
- en: '[PRE0]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you would prefer NPM, then just run:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢使用 NPM，那么只需运行：
- en: '[PRE1]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Wait for the installation to finish and in the Terminal run `jhipster --version`.
    You should see the version info as shown here:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 等待安装完成，然后在终端运行 `jhipster --version`。你应该会看到如下所示的版本信息：
- en: '![](img/ed5d567c-fccc-4564-b9d8-c115205405d6.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ed5d567c-fccc-4564-b9d8-c115205405d6.png)'
- en: That's it; we are ready to roll.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了；我们已经准备好开始了。
- en: 'If you are someone who cannot wait for new versions to arrive, you can always
    use the current development code by following these steps after installing the
    JHipster CLI following the preceding steps:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个迫不及待想要新版本的人，你可以在安装 JHipster CLI 后按照以下步骤使用当前的开发代码：
- en: In a Terminal, navigate to a directory you would like to use. For example, if
    you have a folder called `project` in your home directory, run `cd ~/projects/` and
    for Windows run `cd c:\Users\<username>\Desktop\projects`
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，导航到你想要使用的目录。例如，如果你在主目录中有一个名为 `project` 的文件夹，运行 `cd ~/projects/`，对于 Windows
    运行 `cd c:\Users\<username>\Desktop\projects`。
- en: Run, `git clone https://github.com/jhipster/generator-jhipster.git`
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `git clone https://github.com/jhipster/generator-jhipster.git`
- en: Now, navigate to the folder by running `cd generator-jhipster`
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过运行 `cd generator-jhipster` 导航到该文件夹。
- en: Run `npm link` to create a symbolic link from this folder into the globally
    installed application in `global node_modules`
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `npm link` 以在此文件夹中创建到全局安装的应用程序在 `global node_modules` 中的符号链接。
- en: Now when you run the JHipster commands you will be using the version you cloned
    instead of the version you installed
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在当你运行 JHipster 命令时，你将使用你克隆的版本，而不是你安装的版本
- en: Please note that you should be doing this only if you are absolutely sure of
    what you are doing. Also please note that development versions of the software
    will always be unstable and might contain bugs.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你应该只在绝对确定自己在做什么的情况下才这样做。另外请注意，软件的开发版本将始终是不稳定的，可能包含错误。
- en: If you prefer to isolate the installation in a virtual environment, then you
    can use the Vagrant development box or the Docker image from the JHipster team.
    Visit [https://github.com/jhipster/jhipster-devbox](https://github.com/jhipster/jhipster-devbox)
    for instructions to use the Vagrant box or visit [http://www.jhipster.tech/installation](http://www.jhipster.tech/installation) and
    scroll down to the Docker installation (for advanced users only) section for instructions
    to use a Docker image.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢在虚拟环境中隔离安装，那么你可以使用 JHipster 团队提供的 Vagrant 开发箱或 Docker 镜像。访问 [https://github.com/jhipster/jhipster-devbox](https://github.com/jhipster/jhipster-devbox)
    获取使用 Vagrant 箱的说明，或者访问 [http://www.jhipster.tech/installation](http://www.jhipster.tech/installation)
    并向下滚动到 Docker 安装（仅适用于高级用户）部分，获取使用 Docker 镜像的说明。
- en: Summary
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discovered JHipster and the different technology options
    provided by it. We had a brief introduction of the important pieces of the client-side
    and server-side stack. We had a quick overview of Spring technologies, Angular,
    Bootstrap, and so on. We also had an overview of different database options supported
    by JHipster. We learned about the tools required to work with JHipster and we have
    successfully set up our environment to work with JHipster and installed JHipster
    CLI. In the next chapter, we will see how JHipster can be used to build a production-grade
    monolithic web application.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们发现了 JHipster 以及它提供的不同技术选项。我们对客户端和服务器端栈的重要组件进行了简要介绍。我们对 Spring 技术、Angular、Bootstrap
    等进行了快速概述。我们还对 JHipster 支持的不同数据库选项进行了概述。我们了解了与 JHipster 一起工作所需的工具，并且我们已经成功设置了与
    JHipster 一起工作的环境，并安装了 JHipster CLI。在下一章中，我们将看到如何使用 JHipster 来构建一个生产级别的单体 Web 应用程序。
