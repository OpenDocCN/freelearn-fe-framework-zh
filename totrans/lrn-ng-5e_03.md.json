["```js\nimport { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n@Component({\n  selector: 'app-root',\n  imports: [RouterOutlet],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css'\n})\nexport class AppComponent {\n  title = 'World';\n} \n```", "```js\nng generate component product-list \n```", "```js\n    <p>product-list works!</p> \n    ```", "```js\n    import { ComponentFixture, TestBed } from '@angular/core/testing';\n    import { ProductListComponent } from './product-list.component';\n    describe('ProductListComponent', () => {\n      let component: ProductListComponent;\n      let fixture: ComponentFixture<ProductListComponent>;\n      beforeEach(async () => {\n        await TestBed.configureTestingModule({\n          imports: [ProductListComponent]\n        })\n        .compileComponents();\n\n        fixture = TestBed.createComponent(ProductListComponent);\n        component = fixture.componentInstance;\n        fixture.detectChanges();\n      });\n      it('should create', () => {\n        expect(component).toBeTruthy();\n      });\n    }); \n    ```", "```js\n    import { Component } from '@angular/core';\n    @Component({\n      selector: 'app-product-list',\n      imports: [],\n      templateUrl: './product-list.component.html',\n      styleUrl: './product-list.component.css'\n    })\n    export class ProductListComponent {\n    } \n    ```", "```js\n    <div class=\"content\">\n      **<app-product-list></app-product-list>**\n    </div> \n    ```", "```js\n    [ERROR] NG8001: 'app-product-list' is not a known element \n    ```", "```js\n    import { Component } from '@angular/core';\n    import { RouterOutlet } from '@angular/router';\n    **import { ProductListComponent } from './product-list/product-list.component';**\n    @Component({\n      selector: 'app-root',\n      imports: [RouterOutlet, **ProductListComponent**],\n      templateUrl: './app.component.html',\n      styleUrl: './app.component.css'\n    })\n    export class AppComponent {\n      title = 'World';\n    } \n    ```", "```js\n<h1>Hello, {{ title }}</h1> \n```", "```js\n<h1 [innerText]=\"title\"></h1> \n```", "```js\n<p [attr.aria-label]=\"myText\"></p> \n```", "```js\n<h1 [innerText]=\"'My title'\"></h1> \n```", "```js\n    ng generate interface product \n    ```", "```js\n    export interface Product {\n      **id: number;**\n      **title: string;**\n    } \n    ```", "```js\n    import { Component } from '@angular/core';\n    **import { Product } from '../product';**\n    @Component({\n      selector: 'app-product-list',\n      imports: [],\n      templateUrl: './product-list.component.html',\n      styleUrl: './product-list.component.css'\n    })\n    export class ProductListComponent {\n      **products: Product[] = [];**\n    } \n    ```", "```js\n    @if (products.length > 0) {\n      <h1>Products ({{products.length}})</h1>\n    } \n    ```", "```js\n    @if (products.length > 0) {\n      <h1>Products ({{products.length}})</h1>\n    } **@else {**\n    **<p>No products found!</p>**\n    **}** \n    ```", "```js\n    @if (products.length > 0) {\n      <h1>Products ({{products.length}})</h1>\n    } **@else if (products.length === 100) {**\n    **<span>**\n    **Click <a>Load More</a> to see more products**\n    **</span>**\n    `}` @else {\n      <p>No products found!</p>\n    } \n    ```", "```js\n<h1 *ngIf=\"products.length > 0\">\n  Products ({{products.length}})\n</h1> \n```", "```js\n    export class ProductListComponent {\n      products: Product[] = [\n        **{ id: 1, title: 'Keyboard' },**\n        **{ id: 2, title: 'Microphone' },**\n        **{ id: 3, title: 'Web camera' },**\n        **{ id: 4, title: 'Tablet' }**\n      ];\n    } \n    ```", "```js\n    <ul class=\"pill-group\">\n      @for (product of products; track product.id) {\n        <li class=\"pill\">{{product.title}}</li>\n      }\n    </ul> \n    ```", "```js\n    @if (products.length > 0) {\n      <h1>Products ({{products.length}})</h1>\n    }\n    <ul class=\"pill-group\">\n      @for (product of products; track product.id) {\n        <li class=\"pill\">{{product.title}}</li>\n      } @empty {\n        <p>No products found!</p>\n      }\n    </ul> \n    ```", "```js\n@for (product of products; track product.id; **let variable=property**) {} \n```", "```js\n@for (product of products; track product.id; let i = $index) {\n  <li class=\"pill\">{{i+1}}. {{product.title}}</li>\n} \n```", "```js\n<ul class=\"pill-group\">\n  <li class=\"pill\" *ngFor=\"let product of products\">\n    {{product.title}}\n  </li>\n</ul> \n```", "```js\n<ul class=\"pill-group\">\n  @for (product of products; track product.id) {\n    <li class=\"pill\">\n      **@switch (product.title) {**\n**@case ('Keyboard') {** **![img](img/Icon-04.png)** **}**\n**@case ('Microphone') {** `![img](img/Icon-05.png)` **}**\n**@default {** `![img](img/Icon-06.png)` **}**\n**}**\n      {{product.title}}\n    </li>\n  } @empty {\n    <p>No products found!</p>\n  }\n</ul> \n```", "```js\n<div [ngSwitch]=\"product.title\">\n  <p *ngSwitchCase=\"'Keyboard'\">![img](img/Icon-041.png)</p>\n  <p *ngSwitchCase=\"'Microphone'\">![img](img/Icon-05.png)</p>\n  <p *ngSwitchDefault>![img](img/Icon-06.png)</p>\n</div> \n```", "```js\n<p class=\"star\"></p> \n<p style=\"color: greenyellow\"></p> \n```", "```js\n<p [class.star]=\"isLiked\"></p> \n```", "```js\n<p [class]=\"currentClasses\"></p> \n```", "```js\n    currentClasses = { \n      star: true, \n      active: false \n    }; \n    ```", "```js\n<p [style.color]=\"'greenyellow'\"></p> \n```", "```js\n<p [style.width.px]=\"100\"></p> \n```", "```js\n<p [style]=\"currentStyles\"></p> \n```", "```js\n    currentStyles = { \n      color: 'greenyellow', \n      width: '100px' \n    }; \n    ```", "```js\n    selectedProduct: Product | undefined; \n    ```", "```js\n    @if (selectedProduct) {\n      <p>You selected:\n        <strong>{{selectedProduct.title}}</strong>\n      </p>\n    } \n    ```", "```js\n    @for (product of products; track product.id) {\n      <li class=\"pill\" **(click)=\"selectedProduct = product\"**>\n        @switch (product.title) {\n          @case ('Keyboard') { ![img](img/Icon-041.png) }\n          @case ('Microphone') { ![img](img/Icon-08.png) }\n          @default { ![img](img/Icon-09.png) }\n        }\n        {{product.title}}\n      </li>\n    } \n    ```", "```js\n    ng generate component product-detail \n    ```", "```js\n    import { Component, **input** } from '@angular/core';\n    **import { Product } from '../product';** \n    ```", "```js\n    export class ProductDetailComponent {\n      **product = input<Product>();**\n    } \n    ```", "```js\n    @if (product()) {\n      <p>You selected:\n        <strong>{{product()!.title}}</strong>\n      </p>\n    } \n    ```", "```js\n    import { Component } from '@angular/core';\n    import { Product } from '../product';\n    **import { ProductDetailComponent } from '../product-detail/product-detail.component';**\n    @Component({\n      selector: 'app-product-list',\n      imports: [**ProductDetailComponent**],\n      templateUrl: './product-list.component.html',\n      styleUrl: './product-list.component.css'\n    }) \n    ```", "```js\n    <app-product-detail [product]=\"selectedProduct\"></app-product-detail> \n    ```", "```js\nproduct = input.required<Product>(); \n```", "```js\n[ERROR] NG8008: Required input 'product' from component ProductDetailComponent must be specified. \n```", "```js\n    import { Component, input, **output** } from '@angular/core'; \n    ```", "```js\n    added = output(); \n    ```", "```js\n    addToCart() {\n      this.added.emit();\n    } \n    ```", "```js\n    @if (product()) {\n      <p>You selected:\n        <strong>{{product()!.title}}</strong>\n      </p>\n      **<button (click)=\"addToCart()\">Add to cart</button>**\n    } \n    ```", "```js\n    button {\n      display: flex;\n      align-items: center;\n      --button-accent: var(--bright-blue);\n      background: color-mix(in srgb, var(--button-accent) 65%, transparent);\n      color: white;\n      padding-inline: 0.75rem;\n      padding-block: 0.375rem;\n      border-radius: 0.5rem;\n      border: 0;\n      transition: background 0.3s ease;\n      font-family: var(--inter-font);\n      font-size: 0.875rem;\n      font-style: normal;\n      font-weight: 500;\n      line-height: 1.4rem;\n      letter-spacing: -0.00875rem;\n      cursor: pointer;\n    }\n    button:hover {\n      background: color-mix(in srgb, var(--button-accent) 50%, transparent);\n    } \n    ```", "```js\n    onAdded() {\n      alert(`${this.selectedProduct?.title} added to the cart!`);\n    } \n    ```", "```js\n    <app-product-detail\n      [product]=\"selectedProduct\"\n      **(added)=\"onAdded()\"**\n    ></app-product-detail> \n    ```", "```js\n    added = output**<Product>**(); \n    ```", "```js\n    addToCart() {\n      this.added.emit(**this.product()!**);\n    } \n    ```", "```js\n    <app-product-detail\n      [product]=\"selectedProduct\"\n      (added)=\"onAdded(**$event**)\"\n    ></app-product-detail> \n    ```", "```js\n    onAdded(**product: Product**) {\n      alert(`${**product**.title} added to the cart!`);\n    } \n    ```", "```js\n<app-product-detail\n  **#productDetail**\n  [product]=\"selectedProduct\"\n  (added)=\"onAdded()\"\n></app-product-detail> \n```", "```js\n<span>{{productDetail.product()!.title}}</span> \n```", "```js\n    @if (product()) {\n      `<div>`\n        <p>You selected:\n          <strong>{{product()!.title}}</strong>\n        </p>\n        <button (click)=\"addToCart()\">Add to cart</button>\n      `</div>`\n    } \n    ```", "```js\n    div {\n      padding-inline: 0.75rem;\n      padding-block: 0.375rem;\n      border: 2px dashed;\n    } \n    ```", "```js\n    import { Component, input, output, **ViewEncapsulation** } from '@angular/core';\n    import { Product } from '../product';\n    @Component({\n      selector: 'app-product-detail',\n      imports: [],\n      templateUrl: './product-detail.component.html',\n      styleUrl: './product-detail.component.css',\n      **encapsulation: ViewEncapsulation.None**\n    }) \n    ```", "```js\n    get productTitle() {\n      return this.product()!.title;\n    } \n    ```", "```js\n    @if (product()) {\n      <p>You selected:\n        <strong>{{**productTitle**}}</strong>\n      </p>\n      <button (click)=\"addToCart()\">Add to cart</button>\n    } \n    ```", "```js\n    import { **ChangeDetectionStrategy**, Component, input, output } from '@angular/core';\n    import { Product } from '../product';\n    @Component({\n      selector: 'app-product-detail',\n      imports: [],\n      templateUrl: './product-detail.component.html',\n      styleUrl: './product-detail.component.css',\n      **changeDetection: ChangeDetectionStrategy.OnPush**\n    }) \n    ```", "```js\n    constructor() {\n      console.log('Product:', this.product());\n    } \n    ```", "```js\n    import { Component, input, **OnInit**, output } from '@angular/core'; \n    ```", "```js\n    export class ProductDetailComponent **implements OnInit** \n    ```", "```js\n    ngOnInit(): void {\n      console.log('Product:', this.product());\n    } \n    ```", "```js\n    selectedProduct: Product | undefined = **this.products[0];** \n    ```", "```js\nimport { Component, input, **OnDestroy**, output } from '@angular/core';\nimport { Product } from '../product';\n@Component({\n  selector: 'app-product-detail',\n  imports: [],\n  templateUrl: './product-detail.component.html',\n  styleUrl: './product-detail.component.css'\n})\nexport class ProductDetailComponent **implements OnDestroy** {\n  product = input<Product>();\n  added = output();\n  addToCart() {\n    this.added.emit();\n  }\n  **ngOnDestroy(): void {**\n\n**}**\n} \n```", "```js\nimport { Component, **DestroyRef**, input, output } from '@angular/core';\nimport { Product } from '../product';\n@Component({\n  selector: 'app-product-detail',\n  imports: [],\n  templateUrl: './product-detail.component.html',\n  styleUrl: './product-detail.component.css'\n})\nexport class ProductDetailComponent {\n  product = input<Product>();\n  added = output();\n  **constructor(destroyRef: DestroyRef) {**\n**destroyRef.onDestroy(() => {**\n**});**\n**}**\n  addToCart() {\n    this.added.emit();\n  }\n} \n```", "```js\n    import {\n      Component,\n      input,\n      **OnChanges**,\n      output,\n      **SimpleChanges**\n    } from '@angular/core'; \n    ```", "```js\n    export class ProductDetailComponent **implements OnChanges** \n    ```", "```js\n    ngOnChanges(changes: SimpleChanges): void {\n      const product = changes['product']; \n      const oldValue = product.previousValue; \n      const newValue = product.currentValue; \n      console.log('Old value', oldValue);\n      console.log('New value', newValue);\n    } \n    ```", "```js\n    ngOnChanges(changes: SimpleChanges): void {\n      const product = changes['product']; \n      **if (!product.isFirstChange()) {**\n        const oldValue = product.previousValue; \n        const newValue = product.currentValue; \n        console.log('Old value', oldValue);\n        console.log('New value', newValue);\n      `}`\n    } \n    ```", "```js\n    import { **AfterViewInit**, Component, **viewChild** } from '@angular/core'; \n    ```", "```js\n    productDetail = viewChild(ProductDetailComponent); \n    ```", "```js\n    export class ProductListComponent **implements AfterViewInit** \n    ```", "```js\n    ngAfterViewInit(): void {\n      console.log(this.productDetail()!.product());\n    } \n    ```"]