- en: Working with Real Hosted Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与真实托管数据一起工作
- en: Modern web applications are usually data-driven. More often than not, we need
    to CRUD (create, read, update, and delete) data from various resources, or consume
    APIs. Angular makes it easy for us to work with data from external sources for
    use in our components.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现代网络应用通常是数据驱动的。大多数情况下，我们需要从各种资源中CRUD（创建、读取、更新和删除）数据，或者消费API。Angular使我们能够轻松地处理外部数据源，用于我们的组件。
- en: 'Angular provides a simple HTTP API that grants our applications HTTP functionality.
    It is built on the native XMLHttpRequest interface exposed by modern browsers,
    and with it, we can carry out any of these HTTP operations:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Angular提供了一个简单的HTTP API，它为我们提供了HTTP功能。它是基于现代浏览器暴露的本地XMLHttpRequest接口构建的，并且使用它，我们可以执行以下任何HTTP操作：
- en: 'Get: Requests data from a resource'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取：从资源请求数据
- en: 'Post: Submits data to a resource'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布：向资源提交数据
- en: 'Put: Modifies data in a resource'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新：在资源中修改数据
- en: 'Delete: Deletes a specified resource'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除：删除指定的资源
- en: In this chapter, we will learn how to work with Angular to consume APIs and
    make our applications data-driven.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用Angular消费API并使我们的应用数据驱动。
- en: Observables
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可观察对象
- en: '**Observables**, similar to promises, help handle asynchronous events in an
    application. The key differences between Observables and promises are:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**可观察对象**，类似于承诺，有助于处理应用程序中的异步事件。可观察对象与承诺之间的关键区别是：'
- en: Observables can handle multiple values over time, while promises are called
    once and return one value
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可观察对象可以在一段时间内处理多个值，而承诺只被调用一次并返回一个值
- en: Observables are cancellable, while promises are not
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可观察对象是可取消的，而承诺不是
- en: To make use of Observables, Angular utilizes the **Reactive Extensions for JavaScript** (**RxJs**)
    Observables library. Angular makes extensive use of Observables in handling HTTP
    requests and responses; we will learn more about them in this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用可观察对象，Angular利用**JavaScript的响应式扩展**（**RxJs**）的可观察对象库。Angular在处理HTTP请求和响应时广泛使用可观察对象；我们将在本章中了解更多关于它们的内容。
- en: The HTTP module
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP模块
- en: 'To get started with using HTTP in your components, you need to install the
    `HttpModule` that provides it in your application module. First, import the module:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要在组件中使用HTTP，你需要安装`HttpModule`，它在你的应用程序模块中提供它。首先，导入模块：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, you include the module in the array of imports registered in your application,
    right after `BrowserModule`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将模块包含在你的应用程序中注册的导入数组中，紧随`BrowserModule`之后：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Building a simple todo demo app
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建简单的todo演示应用
- en: Let us build a simple `todo` app to better understand how to work with data
    in an Angular app.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个简单的`todo`应用，以便更好地理解如何在Angular应用中处理数据。
- en: Angular-CLI will be used to quickly scaffold the application. The API for the
    application will be built with Express.js, and our Angular app will connect to
    this API to CRUD todo data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用Angular-CLI快速搭建应用程序。应用程序的API将使用Express.js构建，我们的Angular应用将连接到这个API以CRUD todo数据。
- en: Project setup
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目设置
- en: 'To create a new project using the CLI:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CLI创建新项目：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `ng new` command creates a new angular application
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`ng new`命令创建一个新的Angular应用'
- en: Building the API
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建API
- en: 'From the command line, install express, body-parser, and cors as dependencies
    via npm:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行，使用npm安装express、body-parser和cors作为依赖项：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you use npm 5, you don't need to specify the `-S` or `--save` flag to save
    as a dependency in your `package.json` file.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用npm 5，你不需要指定`-S`或`--save`标志来在`package.json`文件中将它保存为依赖项。
- en: 'Next, we will create a `server.js` file in the root folder of the Angular project
    which will hold all our API logic:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在Angular项目的根目录中创建一个`server.js`文件，它将包含我们所有的API逻辑：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This file uses new versions of ES6 so you should watch in cases where your code
    editors don't recognize it immediately.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件使用ES6的新版本，所以你应该注意你的代码编辑器不立即识别的情况。
- en: 'The `/api` routes point to the `./routes/index.js` file, but we do not have
    it yet. In this next step, we will create it. Still in the `root` directory, create
    a folder named `routes` and in it a file called `index.js`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`/api`路由指向`./routes/index.js`文件，但我们还没有它。在这个下一步中，我们将创建它。仍然在`root`目录中，创建一个名为`routes`的文件夹，并在其中创建一个名为`index.js`的文件：'
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To start the server, enter the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动服务器，输入以下命令：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is the output when the server starts running:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器开始运行时的输出如下：
- en: '![](img/7d5e1721-fed9-4540-80ce-6dc1f3e6d69b.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d5e1721-fed9-4540-80ce-6dc1f3e6d69b.jpg)'
- en: Here we can see that the server is running and it listens on port 3000.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们可以看到服务器正在运行，并且监听端口3000。
- en: 'Open up your browser and visit `localhost:3000/api/`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并访问`localhost:3000/api/`：
- en: '![](img/2c0f4bae-65a6-4d08-ac67-7d710127414e.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2c0f4bae-65a6-4d08-ac67-7d710127414e.jpg)'
- en: If you can see the response in the preceding image, then the API works. Now
    we can introduce more complex logic so we have actual data to work with.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能在前面的图像中看到响应，那么 API 就正常工作了。现在我们可以引入更复杂的逻辑，以便我们有实际的数据可以操作。
- en: Installing diskdb
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 diskdb
- en: '**Diskdb** is a lightweight disk-based JSON database with a MongoDB-like API
    for Node. We can install diskdb with this command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**Diskdb** 是一个轻量级的基于磁盘的 JSON 数据库，具有类似 MongoDB 的 API，适用于 Node。我们可以使用以下命令安装 diskdb：'
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Create a `todos.json` file at the root of the directory. This file will serve
    as our database collection where we have our todo items. You can learn more about
    diskdb here [https://www.npmjs.com/package/diskdb](https://www.npmjs.com/package/diskdb).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在目录根目录下创建一个 `todos.json` 文件。这个文件将作为我们的数据库集合，其中包含我们的待办事项。你可以在 [https://www.npmjs.com/package/diskdb](https://www.npmjs.com/package/diskdb)
    上了解更多关于 diskdb 的信息。
- en: Updating API endpoints
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新 API 端点
- en: 'Let us update the `routes/index.js` file with the new logic for working with
    our todos:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新 `routes/index.js` 文件，以包含处理我们的待办事项的新逻辑：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding code, we were able to update our API with `get`, `post`, `put`,
    and `delete` endpoints.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们能够使用 `get`、`post`、`put` 和 `delete` 端点更新我们的 API。
- en: 'Next, we will seed our database with some data. Updating the `todos.json` file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用一些数据初始化我们的数据库。更新 `todos.json` 文件：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we can restart our server and visit `localhost:3000/api/todos` to see our
    API in action:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以重新启动我们的服务器并访问 `localhost:3000/api/todos` 来查看我们的 API 在行动：
- en: '![](img/981a9500-2ef5-416f-80dd-793714c333e2.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/981a9500-2ef5-416f-80dd-793714c333e2.jpg)'
- en: List of Todos from the database.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库中的待办事项列表。
- en: Creating an Angular component
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Angular 组件
- en: 'Next, we will create a `todo` component. We can easily do that with the Angular-CLI,
    with this command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个 `todo` 组件。我们可以使用 Angular-CLI 轻松地做到这一点，使用以下命令：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This generates the following files: `todos.component.ts`, `todos.component.html`,
    and `todos.component.ts`. The todos component is also automatically imported into
    `app.module.ts`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下文件：`todos.component.ts`、`todos.component.html` 和 `todos.component.ts`。待办事项组件也自动导入到
    `app.module.ts`：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We should be sure to add a `<base href="/">` within the `src/index.html` head
    tag. This is to tell the router how to compose navigation URLs. The `index.html`
    file was created automatically when we used Angular-CLI to generate the angular
    project:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该确保在 `src/index.html` 的 head 标签内添加 `<base href="/">`。这是为了告诉路由器如何组合导航 URL。当使用
    Angular-CLI 生成 angular 项目时，自动创建了 `index.html` 文件：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Creating application routes
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序路由
- en: Next, we will create a `/todos` route and have our app redirect to it by default.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个 `/todos` 路由，并让我们的应用默认重定向到它。
- en: 'First, import `RouterModule` from `@angular/router` and add it to the `AppModule`
    imports array:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从 `@angular/router` 导入 `RouterModule` 并将其添加到 `AppModule` 的 imports 数组中：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a `ROUTES` array just above `ngModule` declarations and add the following
    route definitions to it:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `ngModule` 声明上方创建一个 `ROUTES` 数组，并向其中添加以下路由定义：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the `app.component.html` file, let''s add a router-outlet where we want
    to render the route:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `app.component.html` 文件中，让我们添加一个路由出口，以便渲染路由：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Creating a todos service
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建待办事项服务
- en: 'Next, we will create a service which will handle the calls and connect our
    component to the express API. To generate the service with Angular-CLI:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个服务来处理调用并将我们的组件连接到 express API。要使用 Angular-CLI 生成服务：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The service is created but not registered—to register it in our app, we need
    to add it to the providers section of the main application module.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 服务已创建但尚未注册——为了在我们的应用中注册它，我们需要将其添加到主应用程序模块的 providers 部分。
- en: Angular-CLI does not automatically register services.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Angular-CLI 不会自动注册服务。
- en: 'Add the TodosService to the providers array:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 将 TodosService 添加到 providers 数组：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, within our service, we will make HTTP calls to the express server to execute
    our CRUD operations. First, we will import `HTTP`, `Headers`, and `rxjs/add/operator/map`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们的服务中，我们将向 express 服务器发出 HTTP 调用来执行我们的 CRUD 操作。首先，我们将导入 `HTTP`、`Headers`
    和 `rxjs/add/operator/map`：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Define a constructor and inject the HTTP service:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个构造函数并注入 HTTP 服务：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding code, we make use of the `HttpModule` to make a simple `get`
    request to our API to retrieve a list of Todos. The response from the request
    is then returned in JSON format.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了 `HttpModule` 来向我们的 API 发送一个简单的 `get` 请求以检索待办事项列表。请求的响应随后以 JSON
    格式返回。
- en: Next, we will write a method to store todo items, named `addTodos()`. This method
    will be used to make post requests for storing todos.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写一个名为 `addTodos()` 的方法来存储待办事项。这个方法将用于执行存储待办事项的 POST 请求。
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding code, we set up new headers and also set `Content-Type` to
    tell the server what type of content it will receive (`'application/json'`).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们设置了新的头部并设置了`Content-Type`以告诉服务器它将接收什么类型的内容（`'application/json'`）。
- en: We made use of the `http.post()` method to make a post request. The parameter,
    `JSON.stringify(todo)` indicates that we want to send the new todo as a JSON encoded
    string. Finally, we can return the response from the API in JSON format.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`http.post()`方法来发送POST请求。参数`JSON.stringify(todo)`表示我们希望将新的待办事项作为JSON编码的字符串发送。最后，我们可以以JSON格式返回API的响应。
- en: 'Next, we will define a delete method called `deleteTodo()`. This method will
    be used to make delete requests. This enables us to delete todos from the todos
    list. Once again, update `todos.service.ts`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义一个名为`deleteTodo()`的删除方法。此方法将用于执行删除请求。这使得我们能够从待办事项列表中删除待办事项。再次更新`todos.service.ts`：
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the preceding code, we defined the `deleteTodo()` method which takes the
    `id` of the post to be deleted as its only parameter. This method makes a delete
    request to the API to remove the specified todo from the database. The response
    from the API is also returned as JSON.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们定义了`deleteTodo()`方法，它将待删除帖子的`id`作为其唯一参数。此方法向API发送删除请求以从数据库中删除指定的待办事项。API的响应也以JSON格式返回。
- en: Finally, we will define a method called `updateStatus()`. This method will be
    used to make a `put` request to change the state of a todos item.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将定义一个名为`updateStatus()`的方法。此方法将用于执行`put`请求以更改待办事项项的状态。
- en: '[PRE22]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding code, we created an `updateStatus()` method which is similar
    to `addTodos()` method. The difference here is that the `updateStatus()` method
    makes a `put` request. We also concatenated `todo._id` to the API endpoint being
    called. This enables us to modify the state of a single item from the todos list.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们创建了一个`updateStatus()`方法，该方法与`addTodos()`方法类似。这里的区别在于，`updateStatus()`方法执行一个`put`请求。我们还把`todo._id`连接到被调用的API端点。这使得我们能够从待办事项列表中修改单个项目的状态。
- en: 'Remember, we are making use of the HTTP API in our service, hence, we should
    import `HttpModule` in `app.module.ts` and include it in the imports array:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们在服务中使用了HTTP API，因此，我们应该在`app.module.ts`中导入`HttpModule`并将其包含在导入数组中：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Connecting the service with our todos component
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将服务与我们的待办事项组件连接起来
- en: 'First, we have to import todos service in todos component:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须在待办事项组件中导入待办事项服务：
- en: '[PRE24]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then add the `TodosService` class in the component''s constructor:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在组件的构造函数中添加`TodosService`类：
- en: '[PRE25]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now, we will make use of the todo service to `get`, `create`, `delete`, and
    `update` todos.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用待办事项服务来`get`、`create`、`delete`和`update`待办事项。
- en: 'This is what our todos component should look like:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们待办事项组件应该看起来像的：
- en: '[PRE26]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We just enabled communication between the service and the component. The `component.ts`
    file can now make use of the service and the methods in it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使服务和组件之间建立了通信。现在`component.ts`文件可以使用服务和其中的方法。
- en: Now that we have connected the service and component, we have to display the
    todos operations in the browser, and this will be done in `todos.component.html`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经连接了服务和组件，我们必须在浏览器中显示待办事项操作，这将在`todos.component.html`中完成。
- en: Implementing the view
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现视图
- en: 'To display todos, we shall make use of:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示待办事项，我们将使用：
- en: Angular's `*ngFor` directive, which iterates over the todos array and renders
    an instance of this template for each todo in that array
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular的`*ngFor`指令，它遍历待办事项数组并为数组中的每个待办事项渲染此模板的一个实例
- en: Angular's interpolation binding syntax, `{{}}`
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular的插值绑定语法，`{{}}`
- en: 'Update `todos.component.html`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`todos.component.html`：
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To make our app look better, we will make use of bootstrap. **Bootstrap** is
    a powerful front-end framework for creating web and user interface components
    like forms, modals, accordions, carousels, and tabs:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的应用看起来更好，我们将使用Bootstrap。**Bootstrap**是一个强大的前端框架，用于创建网页和用户界面组件，如表单、模态框、手风琴、轮播图和标签页：
- en: '[PRE28]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Update `todos.component.html`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`todos.component.html`：
- en: '[PRE29]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Open up a command line/terminal and navigate to the project folder. Run node
    `server.js` to start the server. Open another terminal window in the `project`
    folder and run `ng serve` to serve the Angular app.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 打开命令行/终端并导航到项目文件夹。运行node `server.js`以启动服务器。在`project`文件夹中打开另一个终端窗口并运行`ng serve`以提供Angular应用。
- en: 'Open up the browser and visit `localhost:4200`. This is what the result should
    look like the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并访问`localhost:4200`。以下截图显示了结果应该看起来像：
- en: '![](img/06388fbe-6640-4e52-a8a6-d751eca2cb6c.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06388fbe-6640-4e52-a8a6-d751eca2cb6c.jpg)'
- en: We have succeeded in creating a todo app by making HTTP requests to the node
    server through the service and then rendering the result to the DOM through the
    component. You can add a todo, delete a todo, get all todos and when you click
    on a todo, the boolean value changes and a strikethrough appears across that particular
    todo. When you reload the browser, you can see that the changes made to the todo
    list persist.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过通过服务向节点服务器发送 HTTP 请求并然后通过组件将结果渲染到 DOM 中，成功地创建了一个待办事项应用程序。您可以添加待办事项、删除待办事项、获取所有待办事项，当您点击待办事项时，布尔值会改变，并且在该特定待办事项上会出现删除线。当您重新加载浏览器时，您可以看到对待办事项列表所做的更改已保留。
- en: 'Let us take a brief recap of all that we have done:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对我们所做的一切进行简要回顾：
- en: First, we created an Angular application using the Angular-CLI
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们使用 Angular-CLI 创建了一个 Angular 应用程序
- en: Then we created a server file, where we required our dependencies, created an
    express app, set our API routes, declared a port for our server to listen to,
    added parsers for post data, and so on
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们创建了一个服务器文件，其中我们引入了我们的依赖项，创建了一个 express 应用程序，设置了我们的 API 路由，声明了服务器监听的端口，添加了用于解析
    post 数据的解析器等等
- en: We then defined our source of data which was a `.json` file of todos communicating
    with **diskdb**
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们定义了我们的数据源，它是一个与 **diskdb** 通信的 `.json` 文件待办事项
- en: Created an Angular component
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个 Angular 组件
- en: Created a service with `get`, `post`, `put`, and `delete` methods that communicate
    with the REST API
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `get`、`post`、`put` 和 `delete` 方法创建了一个与 REST API 通信的服务
- en: Let us look at another example. We'll create a simple app to display a list
    of users together with their emails, and phone numbers. The users will also have
    a true or false state, indicating whether they are available or unavailable.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看另一个例子。我们将创建一个简单的应用程序来显示用户列表以及他们的电子邮件和电话号码。用户还将有一个真或假的标志，表示他们是否可用或不可用。
- en: Build a user directory with Angular
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Angular 构建用户目录
- en: The application we are about to build will have a REST API which will be created
    during the course of this example. In this simple example, we'll be creating a
    `users` app which will be quite simple. The app will basically be a table which
    contains a list of users together with their email addresses and phone numbers.
    Each user in the table will have an *active* state whose value is a boolean. We
    will be able to change the *active* state of a particular user from false to true
    and vice versa. The app will give us the ability to add new users and also delete
    users from the table. Just like the previous example, diskDB will be used as the
    database for this example. We will have an Angular service which contains methods
    that will be responsible for communicating with the REST end points. These methods
    will be responsible for making `get`, `post`, `put`, and `delete` requests to
    the REST API. The first method in the service will be responsible for making a
    `get` request to the API. This will enable us to retrieve all the users from the
    back end. Next, we will have another method that makes a `post` request to the
    API. This will enable us to add new users to the array of existing users.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将构建的应用程序将有一个 REST API，它将在本例的执行过程中创建。在这个简单的例子中，我们将创建一个 `users` 应用程序，它将非常简单。该应用程序基本上是一个包含用户列表及其电子邮件地址和电话号码的表格。表格中的每个用户都将有一个
    *活动* 状态，其值为布尔值。我们将能够将特定用户的 *活动* 状态从假更改为真，反之亦然。该应用程序将使我们能够添加新用户并从表中删除用户。就像上一个例子一样，diskDB
    将被用作本例的数据库。我们将有一个 Angular 服务，其中包含负责与 REST 端点通信的方法。这些方法将负责向 REST API 发送 `get`、`post`、`put`
    和 `delete` 请求。服务中的第一个方法将负责向 API 发送 `get` 请求。这将使我们能够从后端检索所有用户。接下来，我们将有一个另一个方法，它向
    API 发送 `post` 请求。这将使我们能够将新用户添加到现有用户的数组中。
- en: The next method we shall have will be responsible for making a `delete` request
    to the API in order to enable the deletion of a user. Finally, we shall have a
    method that makes a `put` request to the API. This will be the method that gives
    us the ability to edit/modify the state of a user. In order to make these requests
    to the REST API, we will have to make use of the HttpModule. The aim of this section
    is to solidify your knowledge of HTTP. As a JavaScript and, in fact, an Angular
    developer, you are bound to make interactions with APIs and web servers almost
    all the time. So much data used by developers today is in form of APIs and in
    order to make interactions with these APIs, we need to constantly make use of
    HTTP requests. As a matter of fact, HTTP is the foundation of data communication
    for the web.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个方法将负责向 API 发送 `delete` 请求，以便启用用户的删除。最后，我们将有一个发送 `put` 请求到 API 的方法。这将是我们编辑/修改用户状态的方法。为了与
    RESTful API 进行这些请求，我们必须使用 HttpModule。本节的目标是巩固你对 HTTP 的理解。作为一个 JavaScript 和，实际上是一个
    Angular 开发者，你几乎肯定会与 API 和 Web 服务器进行交互。今天开发者使用的许多数据都是以 API 的形式，为了与这些 API 进行交互，我们需要不断地使用
    HTTP 请求。事实上，HTTP 是网络数据通信的基础。
- en: Create a new Angular app
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的 Angular 应用
- en: 'As shown previously, to start a new Angular app, run the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，要启动一个新的 Angular 应用，请运行以下命令：
- en: '[PRE30]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This creates the Angular 2 user app.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了 Angular 2 用户应用。
- en: 'Install the following dependencies:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 安装以下依赖项：
- en: Express
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Express
- en: Body-parser
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Body-parser
- en: Cors
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cors
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Create a Node server
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 Node 服务器
- en: Create a file called `server.js` at the root of the project directory. This
    will be our node server.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目目录的根目录下创建一个名为 `server.js` 的文件。这将是我们 Node 服务器。
- en: 'Populate `server.js` with the following block of code:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `server.js` 中填充以下代码块：
- en: '[PRE32]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'What''s going on here is pretty simple:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生的事情相当简单：
- en: We required and made use of the dependencies
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们引入并使用了依赖项
- en: We defined and set the API routes
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义并设置了 API 路由
- en: We set a port for our server to listen to
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为我们的服务器设置了一个监听端口
- en: The API routes are being required from `./route`, but this path does not exist
    yet. Let's quickly create it.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: API 路由正在从 `./route` 中导入，但这个路径尚不存在。让我们快速创建它。
- en: At the root of the project directory, create a file called `route.js`. This
    is where the API routes will be made. We need to have a form of a database from
    where we can fetch, post, delete, and modify data.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目目录的根目录下，创建一个名为 `route.js` 的文件。这里将创建 API 路由。我们需要有一个数据库的形式，从中我们可以获取、发布、删除和修改数据。
- en: Just as in the previous example, we will make use of diskdb. The route will
    pretty much have the same pattern as in the first example.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在之前的例子中一样，我们将使用 diskdb。路由将基本上与第一个例子中的模式相同。
- en: Install diskDB
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 diskDB
- en: 'Run the following in the project folder to install diskdb:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目文件夹中运行以下命令以安装 diskdb：
- en: '[PRE33]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Create a `users.json` file at the root of the project directory to serve as
    our database collection where we have our users' details.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目目录的根目录下创建一个 `users.json` 文件，作为我们的数据库集合，其中包含我们的用户详细信息。
- en: 'Populate `users.json` with the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `users.json` 中填充以下内容：
- en: '[PRE34]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now, update `route.js`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，更新 `route.js`。
- en: '[PRE35]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: We've created a REST API with the API routes, using diskDB as the database.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 API 路由创建了一个 RESTful API，使用 diskDB 作为数据库。
- en: 'Start the server using the following command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令启动服务器：
- en: '[PRE36]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The server is running and it is listening to the assigned port. Now, open up
    the browser and go to `http://localhost:3000/api/users`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器正在运行，并且正在监听指定的端口。现在，打开浏览器并访问 `http://localhost:3000/api/users`。
- en: Here, we can see the data that we imputed to the `users.json` file. This shows
    that our routes are working and we are getting data from the database.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们可以看到我们输入到 `users.json` 文件中的数据。这表明我们的路由正在工作，并且我们从数据库中获取了数据。
- en: Create a new component
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的组件
- en: 'Run the following command to create a new component:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以创建一个新的组件：
- en: '[PRE37]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This creates `user.component.ts`, `user.component.html`, `user.component.css`
    and `user.component.spec.ts` files. `User.component.spec.ts` is used for testing,
    therefore we will not be making use of it in this chapter. The newly created component
    is automatically imported into `app.module.ts`. We have to tell the root component
    about the user component. We''ll do this by importing the selector from `user.component.ts`
    into the root template component (`app.component.html`):'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了`user.component.ts`、`user.component.html`、`user.component.css`和`user.component.spec.ts`文件。`User.component.spec.ts`用于测试，因此我们将在本章中不使用它。新创建的组件会自动导入到`app.module.ts`中。我们必须告诉根组件关于用户组件的信息。我们将通过将`user.component.ts`中的选择器导入到根模板组件（`app.component.html`）中来实现这一点：
- en: '[PRE38]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Create a service
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个服务
- en: 'The next step is to create a service that interacts with the API that we created
    earlier:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个与之前创建的API交互的服务：
- en: '[PRE39]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This creates a user service called the `user.service.ts`. Next, import `UserService`
    class into `app.module.ts` and include it to the providers array:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个名为`user.service.ts`的用户服务。接下来，将`UserService`类导入到`app.module.ts`中，并将其包含在提供者数组中：
- en: '[PRE40]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Within the service class, write a method that makes a `get` request to fetch
    all users and their details from the API:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务类中，编写一个方法，通过API获取所有用户及其详细信息，发送一个`get`请求：
- en: '[PRE41]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Write the method that makes a `post` request and creates a new todo:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个发送`post`请求并创建新待办事项的方法：
- en: '[PRE42]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Write another method that makes a `delete` request. This will enable us to
    delete a user from the collection of users:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 编写另一个方法来发送一个`delete`请求。这将使我们能够从用户集合中删除一个用户：
- en: '[PRE43]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Finally, write a method that makes a `put` request. This method will enable
    us to modify the state of a user:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，编写一个发送`put`请求的方法。此方法将使我们能够修改用户的状态：
- en: '[PRE44]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Update `app.module.ts` to import `HttpModule` and `FormsModule` and include
    them to the imports array:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`app.module.ts`以导入`HttpModule`和`FormsModule`，并将它们包含在导入数组中：
- en: '[PRE45]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The next thing to do is to teach the user component to use the service:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是教会用户组件使用该服务：
- en: '[PRE46]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Now, we can make use of the methods from the user service in the user component.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在用户组件中使用用户服务的方法。
- en: Updating user.component.ts
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新`user.component.ts`
- en: 'Within the `ngOnInit` method, make use of the user service to `get` all users
    from the API:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ngOnInit`方法中，使用用户服务从API获取所有用户：
- en: '[PRE47]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Below the `ngOnInit` method, write a method that makes use of the `post` method
    in the user service to add new users:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ngOnInit`方法下方，编写一个方法，使用用户服务中的`post`方法添加新用户：
- en: '[PRE48]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Let''s make use of the `delete` method from the user service to enable us to delete
    users:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用用户服务中的`delete`方法来使我们能够删除用户：
- en: '[PRE49]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Finally, we''ll make use of user service to make `put` requests to the API:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用用户服务来对API进行`put`请求：
- en: '[PRE50]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: We have all our communication with the API, service, and component. We have
    to update `user.component.html` in order to illustrate all that we have done in
    the browser.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经与API、服务和组件进行了所有通信。我们必须更新`user.component.html`以在浏览器中展示我们所做的一切。
- en: 'We''ll be making use of bootstrap for styling. So, we have to import the bootstrap
    CDN in `index.html`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Bootstrap进行样式设计。因此，我们必须在`index.html`中导入Bootstrap CDN：
- en: '[PRE51]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Updating user.component.html
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新`user.component.html`
- en: 'Here is the component template for the user component:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用户组件的组件模板：
- en: '[PRE52]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'A lot is going on in the preceding code, let''s drill down into the code block:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块中有很多内容，让我们深入代码块：
- en: We have a form which takes in three inputs and a submit button which triggers
    the `addUser()` method when clicked
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一个表单，它接受三个输入和一个提交按钮，当点击时会触发`addUser()`方法
- en: There is a delete button which triggers the `delete` method when it is clicked
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个删除按钮，当点击时会触发`delete`方法
- en: There is also an update status input element that triggers the `updateUser()`
    method when clicked
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有一个更新状态输入元素，当点击时会触发`updateUser()`方法
- en: We created a table in which our users' details will be displayed utilizing Angular's
    `*ngFor` directive and Angular's interpolation binding syntax, `{{}}`
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了一个表格，使用Angular的`*ngFor`指令和Angular的插值绑定语法`{{}}`来显示我们的用户详细信息
- en: 'Some extra styling will be added to the project. Go to `user.component.css`
    and add the following:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 将添加一些额外的样式到项目中。转到`user.component.css`并添加以下内容：
- en: '[PRE53]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Running the app
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用
- en: Open up two command line interfaces/terminals. In both of them, navigate to
    the project directory. Run node `server.js` to start the server in one. Run `ng
    serve` in the other to serve the Angular 2 app.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 打开两个命令行界面/终端。在它们两个中，导航到项目目录。在一个中运行`node server.js`以启动服务器。在另一个中运行`ng serve`以提供Angular
    2应用程序。
- en: Open up the browser and go to `localhost:4200`.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并访问`localhost:4200`。
- en: In this simple users app, we can perform all CRUD operations. We can create
    new users, get users, delete users, and update the state of users.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的用户应用程序中，我们可以执行所有CRUD操作。我们可以创建新用户，获取用户，删除用户，以及更新用户的州。
- en: By default, a newly added user's active state is false. That can be changed
    by clicking on the change state button.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，新添加的用户活跃状态为false。可以通过点击更改状态按钮来修改。
- en: Summary
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Working with actual data from a database or from an API is quite important when
    developing any application. HTTP along with observables and Rxjs made it possible
    to work with the desired set of data from an API, and also perform all CRUD operations.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发任何应用程序时，使用数据库或API的实际数据非常重要。HTTP以及可观察对象和Rxjs使得从API中处理所需的数据集成为可能，并且可以执行所有CRUD操作。
- en: In the next chapter, we'll be taking a look at writing unit tests and debugging.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨编写单元测试和调试。
