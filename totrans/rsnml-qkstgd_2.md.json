["```js\ngit clone https://github.com/PacktPublishing/ReasonML-Quick-Start-Guide.git\ncd ReasonML-Quick-Start-Guide\ncd Chapter02/pure-reason-start\nnpm install\n```", "```js\nnpm install -g bs-platform\n```", "```js\nAvailable themes: \nbasic\nbasic-reason\ngenerator\nminimal\nnode\nreact\nreact-lite\ntea\n```", "```js\nbsb -init my-first-app -theme basic-reason\ncd my-first-app\n```", "```js\n├── .gitignore\n├── README.md\n├── bsconfig.json\n├── node_modules\n│   ├── .bin\n│   │   ├── bsb\n│   │   ├── bsc\n│   │   └── bsrefmt\n│   └── bs-platform\n├── package.json\n└── src\n    └── Demo.re\n```", "```js\n/* Demo.re */\nJs.log(\"Hello, BuckleScript and Reason!\");\n```", "```js\n/* package.json */\n{\n  \"name\": \"my-first-app\",\n  \"version\": \"0.1.0\",\n  \"scripts\": {\n    \"build\": \"bsb -make-world\",\n    \"start\": \"bsb -make-world -w\",\n    \"clean\": \"bsb -clean-world\"\n  },\n  \"keywords\": [\n    \"BuckleScript\"\n  ],\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"bs-platform\": \"^4.0.5\"\n  }\n}\n```", "```js\n// This is the configuration file used by BuckleScript's build system bsb. Its documentation lives here: http://bucklescript.github.io/bucklescript/docson/#build-schema.json\n// BuckleScript comes with its own parser for bsconfig.json, which is normal JSON, with the extra support of comments and trailing commas.\n{\n  \"name\": \"my-first-app\",\n  \"version\": \"0.1.0\",\n  \"sources\": {\n    \"dir\" : \"src\",\n    \"subdirs\" : true\n  },\n  \"package-specs\": {\n    \"module\": \"commonjs\",\n    \"in-source\": true\n  },\n  \"suffix\": \".bs.js\",\n  \"bs-dependencies\": [\n      // add your dependencies here. You'd usually install them normally through `npm install my-dependency`. If my-dependency has a bsconfig.json too, then everything will work seamlessly.\n  ],\n  \"warnings\": {\n    \"error\" : \"+101\"\n  },\n  \"namespace\": true,\n  \"refmt\": 3\n}\n```", "```js\ntype decision =\n  | Yes\n  | No\n  | Maybe;\n\nlet decision = Maybe;\n\nlet response =\n  switch (decision) {\n  | Yes => \"Yes!\"\n  | No => \"I'm afraid not.\"\n  };\n\nJs.log(response);\n```", "```js\nninja: Entering directory `lib/bs'\n[3/3] Building src/Demo.mlast.d\n[1/1] Building src/Demo-MyFirstApp.cmj\n\n  Warning number 8\n  .../Demo.re 9:3-12:3\n\n   7 │ \n   8 │ let response =\n   9 │ switch (decision) {\n  10 │ | Yes => \"Yes!\"\n  11 │ | No => \"I'm afraid not.\"\n  12 │ };\n  13 │ \n  14 │ Js.log(response);\n\n  You forgot to handle a possible value here, for example: \nMaybe\n```", "```js\nwarnings field of bsconfig.json to the following:\n```", "```js\n\"warnings\": {\n  \"error\": \"+101+8\" // added \"+8\"\n},\n```", "```js\n\"warnings\": {\n  \"error\": \"A\"\n},\n```", "```js\n\"package-specs\": {\n  \"module\": \"es6\",\n  \"in-source\": false\n},\n```", "```js\n\"sources\": {\n  \"dir\" : \"src\",\n  \"subdirs\" : true\n},\n```", "```js\n<html>\n  <head></head>\n  <body>\n    <!-- if \"in-source\": false -->\n    <script type=\"module\" src=\"img/Demo.bs.js\"></script>\n\n    <!-- if \"in-source\": true -->\n    <!-- <script type=\"module\" src=\"img/Demo.bs.js\"></script> -->\n  </body>\n</html>\n```", "```js\nlet greeting = name => {j|hello $name|j};\n```", "```js\n[@bs.val] [@bs.scope \"document\"]\nexternal createElement : string => Dom.element = \"\";\n\n[@bs.set] external setInnerText : (Dom.element, string) => unit = \"innerText\";\n\n[@bs.val] [@bs.scope \"document.body\"]\nexternal appendChild : Dom.element => Dom.element = \"\";\n\nlet div = createElement(\"div\");\nsetInnerText(div, Greeting.greeting(\"world\"));\nappendChild(div);\n```", "```js\n[@bs.get] external getInnerText: Dom.element => string = \"innerText\";\n[@bs.set] external setInnerText : (Dom.element, string) => unit = \"innerText\";\n```", "```js\nbsb -init my-reason-react-app -theme react\ncd my-reason-react-app\n\n```", "```js\nnpm install\n```", "```js\n\"webpack\": \"webpack -w\",\n\"webpack:production\": \"NODE_ENV=production webpack\"\n```", "```js\n\"reason\": {\n  \"react-jsx\": 2\n},\n```", "```js\nconst path = require(\"path\");\nconst outputDir = path.join(__dirname, \"build/\");\n\nconst isProd = process.env.NODE_ENV === \"production\";\n\nmodule.exports = {\n  entry: \"./src/Index.bs.js\",\n  mode: isProd ? \"production\" : \"development\",\n  output: {\n    path: outputDir,\n    publicPath: outputDir,\n    filename: \"Index.js\"\n  }\n};\n```", "```js\nnpm start\n\n/* in another shell */\nnpm run webpack\n\n/* in another shell */\nphp -S localhost:3000\n```", "```js\nnpm install webpack-dev-server --save-dev\nnpm install npm-run-all --save-dev\n```", "```js\n\"scripts\": {\n  \"start\": \"npm-run-all --parallel start:*\",\n  \"start:bsb\": \"bsb -clean-world -make-world -w\",\n  \"start:webpack\": \"webpack-dev-server --port 3000\",\n  \"build\": \"npm-run-all build:*\",\n  \"build:bsb\": \"bsb -clean-world -make-world\",\n  \"build:webpack\": \"NODE_ENV=production webpack\",\n  \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n},\n```", "```js\nnpm install html-webpack-plugin --save-dev\n```", "```js\nconst path = require(\"path\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n\nconst isProd = process.env.NODE_ENV === \"production\";\n\nmodule.exports = {\n  entry: \"./src/Index.bs.js\",\n  mode: isProd ? \"production\" : \"development\",\n  output: {\n    path: path.join(__dirname, \"build/\"),\n    filename: \"Index.js\"\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: \"./src/index.html\"\n    })\n  ]\n};\n```"]