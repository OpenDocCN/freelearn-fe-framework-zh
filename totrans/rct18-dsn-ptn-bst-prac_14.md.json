["```js\n{\n  \"name\": \"web-creator\",\n  \"private\": true,\n  \"workspaces\": [\n    \"packages/*\"\n  ]\n} \n```", "```js\ncd packages/api\nnpm init -y \n```", "```js\n{\n  \"name\": \"api\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"author\": \"\",\n  \"license\": \"ISC\"\n} \n```", "```js\n{\n  \"name\": \"@web-creator/api\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"author\": \"\",\n  \"license\": \"ISC\"\n} \n```", "```js\nmodule.export = () => console.log(\"I'm the API package\") \n```", "```js\ncd packages/frontend\nnpm init -y \n```", "```js\n{\n  \"name\": \"@web-creator/frontend\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"author\": \"Carlos Santana\",\n  \"license\": \"ISC\"\n} \n```", "```js\n{\n  \"name\": \"@web-creator/frontend\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"author\": \"Carlos Santana\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"@web-creator/api\": \"1.0.0\" // this version needs to match with the API package.json\n  }\n} \n```", "```js\nconst api = require('@web-creator/api')\napi() \n```", "```js\nnpm install -D typescript \n```", "```js\n{\n  \"extends\": \"./tsconfig.common.json\",\n  \"compilerOptions\": {\n    \"baseUrl\": \"./packages\",\n    \"paths\": {\n      \"@web-creator/*\": [\"*/src\"]\n    }\n  }\n} \n```", "```js\n{\n  \"compilerOptions\": {\n    \"allowSyntheticDefaultImports\": true,\n    \"alwaysStrict\": true,\n    \"declaration\": true,\n    \"declarationMap\": true,\n    \"downlevelIteration\": true,\n    \"esModuleInterop\": true,\n    \"experimentalDecorators\": true,\n    \"jsx\": \"react-jsx\",\n    \"lib\": [\"DOM\", \"DOM.Iterable\", \"ESNext\"],\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"noEmit\": false,\n    \"noFallthroughCasesInSwitch\": false,\n    \"noImplicitAny\": true,\n    \"noImplicitReturns\": true,\n    \"outDir\": \"dist\",\n    \"resolveJsonModule\": true,\n    \"skipLibCheck\": true,\n    \"sourceMap\": true,\n    \"strict\": true,\n    \"strictFunctionTypes\": true,\n    \"strictNullChecks\": true,\n    \"suppressImplicitAnyIndexErrors\": false,\n    \"target\": \"ESNext\"\n  },\n  \"exclude\": [\"node_modules\", \"dist\", \"coverage\", \".vscode\", \"**/__tests__/*\"]\n} \n```", "```js\n{\n  \"name\": \"@web-creator/devtools\",\n  \"version\": \"1.0.0\",\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"scripts\": {\n    \"build\": \"npm-run-all clean compile\",\n    \"clean\": \"rm -rf ./dist\",\n    \"compile\": \"tsc\",\n    \"lint\": \"npm run --prefix ../../ lint\",\n    \"lint:fix\": \"npm run --prefix ../../ lint:fix\"\n  },\n  \"author\": \"Carlos Santana\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"@types/cli-color\": \"^2.0.2\",\n    \"@types/ip\": \"^1.1.0\",\n    \"@types/webpack-bundle-analyzer\": \"^4.6.0\",\n    \"@types/webpack-node-externals\": \"^2.5.3\"\n  },\n  \"dependencies\": {\n    \"@svgr/webpack\": \"^6.5.1\",\n    \"@types/file-loader\": \"^5.0.1\",\n    \"cli-color\": \"^2.0.3\",\n    \"css-loader\": \"^6.7.3\",\n    \"dotenv\": \"^16.0.3\",\n    \"file-loader\": \"^6.2.0\",\n    \"html-webpack-plugin\": \"^5.5.0\",\n    \"path-browserify\": \"^1.0.1\",\n    \"run-script-webpack-plugin\": \"^0.1.1\",\n    \"style-loader\": \"^3.3.1\",\n    \"ts-loader\": \"^9.4.2\",\n    \"typescript-plugin-styled-components\": \"^2.0.0\",\n    \"webpack\": \"^5.75.0\",\n    \"webpack-bundle-analyzer\": \"^4.7.0\",\n    \"webpack-dev-server\": \"^4.11.1\",\n    \"webpack-node-externals\": \"^3.0.0\",\n    \"webpackbar\": \"^5.0.2\"\n  }\n} \n```", "```js\n{\n  \"extends\": \"../../tsconfig.common.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\"\n  },\n  \"include\": [\"src/**/*\"]\n} \n```", "```js\nimport cliColor from 'cli-color'\ntype Args = {\ntext?: string\ntag?: string\njson?: any\ntype?: 'info' | 'error' | 'warning'\n}\nexport const log = (args: Args | any) => {\nconst blockColor: any = {\ninfo: cliColor.bgCyan.whiteBright.bold,\nerror: cliColor.bgRed.whiteBright.bold,\nwarning: cliColor.bgYellow.blackBright.bold\n}\nconst textColor: any = {\ninfo: cliColor.blue,\nerror: cliColor.red,\nwarning: cliColor.yellow\n}\nif (typeof args === 'string') {\nconsole.info(textColor.info(args))\n}\nconst { tag, json, type } = args\nif (tag && json) {\nconsole.info(blockColor[type](`<<< BEGIN ${tag.toUpperCase()}`))\nconsole.info(textColor[type](JSON.stringify(json, null, 2)))\nconsole.info(blockColor[type](`END ${tag.toUpperCase()} >>>`))\n }\n } \n```", "```js\nexport type WebpackMode = 'production' | 'development'\nexport type ConfigType = 'web' | 'package'\nexport type Package = 'api' | 'design-system' | 'frontend' | 'utils'\nexport type ConfigArgs = {\nmode: WebpackMode\ntype: ConfigType\nsandbox?: 'true' | 'false'\npackageName: Package\n}\nexport type ModeArgs = {\nconfigType: ConfigType\npackageName: Package\nmode?: WebpackMode\nsandbox?: boolean\ndevServer?: boolean\nisAnalyze?: boolean\nport?: number\nanalyzerPort?: number\ncolor?: string\nhtmlOptions?: {\ntitle: string\ntemplate: string\n}\n} \n```", "```js\nimport HtmlWebPackPlugin from 'html-webpack-plugin'\nimport path from 'path'\nimport createStyledComponentsTransformer from 'typescript-plugin-styled-components'\nimport { Configuration } from 'webpack'\nimport { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer'\nimport nodeExternals from 'webpack-node-externals'\nimport { ModeArgs } from './webpack.types' \n```", "```js\nconst getWebpackCommonConfig = (args: ModeArgs): Configuration => {\nconst {\nconfigType, // it can be \"web\" or \"package\"\nisAnalyze,\nport = 3000,\nmode,\nanalyzerPort = 9001,\npackageName,\nhtmlOptions,\nsandbox,\ndevServer\n} = args\n// Here goes the next block of codes\n}\nexport default getWebpackCommonConfig \n```", "```js\nconst devServerPort = sandbox && devServer ? 8080 : port + 1 \n```", "```js\n// Client Entry\nconst entry = configType !== 'web'\n? path.resolve(__dirname, `../../../${packageName}/src/index.ts`)\n: path.resolve(__dirname, `../../../${packageName}/src/index.tsx`) \n```", "```js\n// Resolve\nconst resolve = {\nextensions: ['*', '.ts', '.tsx', '.js', '.jsx'],\nalias: {\n'~': path.resolve(__dirname, `../../../${packageName}/src`)\n},\nfallback: {\nbuffer: false,\ncrypto: false,\nstream: false,\nquerystring: false,\nos: false,\nzlib: false,\nhttp: false,\nhttps: false,\nurl: false,\npath: require.resolve('path-browserify')\n}\n} \n```", "```js\n// Output\nconst output = {\n path: path.resolve(__dirname, `../../../${packageName}/dist`),\n filename: '[name].js',\n ...(sandbox && {\n publicPath: '/',\n chunkFilename: '[name].js'\n }),\n ...(configType === 'package' && !sandbox && {\n filename: 'index.js',\n libraryTarget: 'umd',\n library: 'lib',\n umdNamedDefine: true,\n globalObject: 'this'\n })\n} \n```", "```js\n// Plugins\nconst plugins = []\nif (isAnalyze) {\nplugins.push(\nnew BundleAnalyzerPlugin({\nanalyzerPort\n})\n)\n}\nif (mode === 'development' && htmlOptions?.title && htmlOptions.template) {\nplugins.push(\nnew HtmlWebPackPlugin({\ntitle: htmlOptions.title,\ntemplate: path.resolve(__dirname, `../../../${packageName}/${htmlOptions.template}`),\nfilename: './index.xhtml'\n})\n)\n} \n```", "```js\n// Rules\nconst rules = []\nrules.push({\ntest: /\\.(tsx|ts)$/,\nexclude: /node_modules/,\nloader: 'ts-loader',\noptions: {\ngetCustomTransformers: () => ({\n before: [\ncreateStyledComponentsTransformer({\n displayName: true,\nssr: true,\n minify: true\n })\n ]\n })\n}\n})\nif (packageName === 'design-system') {\nconst svgUrlLoaderInclude: Record<string, string[]> = {\n'design-system': [\npath.resolve(__dirname, '../../../design-system/src/components/Spinner/loaders'),\npath.resolve(__dirname, '../../../design-system/src/components/Dialog/icons'),\npath.resolve(__dirname, '../../../design-system/src/icons')\n]\n}\nconst svgrWebpackInclude: Record<string, string[]> = {\n'design-system': [\npath.resolve(__dirname, '../../../design-system/src/components/Icon/icons')\n]\n}\nrules.push({\ntest: /\\.svg$/,\noneOf: [\n{\nuse: 'svg-url-loader',\ninclude: configType === 'package' ? svgUrlLoaderInclude[packageName] ?? [] : []\n},\n{\nuse: '@svgr/webpack',\ninclude: configType === 'package' ? svgrWebpackInclude[packageName] ?? [] : []\n}\n]\n})\n}\nif (configType === 'package' && sandbox) {\nrules.push({\ntest: /\\.(jpe?g|png|gif|svg)$/i,\nuse: [{ loader: 'file-loader', options: {} }]\n})\n} \n```", "```js\nconst webpackConfig = {\nentry,\n...(configType === 'package' && sandbox && {\nentry: path.resolve(__dirname, `../../../${packageName}/sandbox/index.tsx`)\n}),\n...(devServer && {\ndevServer: {\nhistoryApiFallback: true,\nstatic: output.path,\nport: devServerPort\n}\n}),\n...(!sandbox && {\nexternals: [nodeExternals()]\n}),\noutput,\nresolve,\nplugins,\nmodule: {\nrules\n},\n...(configType !== 'web' && !sandbox && {\ntarget: 'node'\n})\n}\nreturn webpackConfig as Configuration \n```", "```js\nimport {\nConfiguration as WebpackConfiguration,\nHotModuleReplacementPlugin,\nNoEmitOnErrorsPlugin\n} from 'webpack'\nimport { Configuration as WebpackDevServerConfiguration } from 'webpack-dev-server'\ninterface Configuration extends WebpackConfiguration {\ndevServer?: WebpackDevServerConfiguration\n}\nconst getWebpackDevelopmentConfig = (): Configuration => {\nconst webpackConfig: Configuration = {\nmode: 'development',\ndevtool: 'source-map',\nplugins: [new HotModuleReplacementPlugin(), new NoEmitOnErrorsPlugin()]\n}\nreturn webpackConfig\n}\nexport default getWebpackDevelopmentConfig \n```", "```js\nimport { Configuration } from 'webpack'\nimport { ModeArgs } from './webpack.types'\nconst getWebpackProductionConfig = (args: ModeArgs): Configuration => {\nconst { configType } = args\n// Externals\nconst externals = configType === 'package'\n? {\nreact: {\ncommonjs: 'react',\ncommonjs2: 'react',\namd: 'React',\nroot: 'React'\n},\n'react-dom': {\ncommonjs: 'react-dom',\ncommonjs2: 'react-dom',\namd: 'ReactDOM',\nroot: 'ReactDOM'\n},\n'apollo-server-express': 'apollo-server-express',\njsonwebtoken: 'jsonwebtoken'\n}\n: {}\nconst webpackConfig = {\nmode: 'production',\ndevtool: false,\nexternals\n}\nreturn webpackConfig as Configuration\n}\nexport default getWebpackProductionConfig \n```", "```js\n// CLI\nexport * from './cli/log'\n// Webpack\nexport { default as getWebpackCommonConfig } from './webpack/webpack.common'\nexport { default as getWebpackDevelopmentConfig } from './webpack/webpack.development'\nexport { default as getWebpackProductionConfig } from './webpack/webpack.production'\nexport * from './webpack/webpack.types' \n```", "```js\nnpm run build \n```", "```js\nimport {\nConfigArgs,\ngetWebpackCommonConfig,\ngetWebpackDevelopmentConfig,\ngetWebpackProductionConfig,\nlog\n} from '@web-creator/devtools'\nimport { Configuration } from 'webpack'\nimport { merge } from 'webpack-merge'\n// Mode Config\nconst getModeConfig = {\ndevelopment: getWebpackDevelopmentConfig,\nproduction: getWebpackProductionConfig\n}\n// Mode Configuration (development/production)\nconst modeConfig: (args: ConfigArgs) => Configuration = ({mode, type, packageName}) => {\nconst getWebpackConfiguration = getModeConfig[mode]\nreturn getWebpackConfiguration({ \nconfigType: type, \npackageName, \nsandbox: true, \ndevServer: true \n})\n}\n// Merging all configurations\nconst webpackConfig: (args: ConfigArgs) => Promise<Configuration> = async ({ \nmode, type, sandbox, packageName \n} = {\nmode: 'production',\ntype: 'web',\nsandbox: 'false',\npackageName: 'design-system'\n}) => {\nconst isSandbox = type === 'package' && sandbox === 'true'\nconst commonConfiguration = getWebpackCommonConfig({\nconfigType: type,\npackageName,\nmode,\n...(isSandbox && {\nhtmlOptions: { title: 'Sandbox', template: 'sandbox/index.xhtml' },\nsandbox: isSandbox,\ndevServer: isSandbox\n})\n})\n// Mode Configuration\nconst modeConfiguration = mode && type ? modeConfig({ mode, type, packageName }) : {}\n// Merging all configurations\nconst webpackConfiguration = merge(commonConfiguration, modeConfiguration)\n// Logging Webpack Configuration\nlog({ tag: 'Webpack Configuration', json: webpackConfiguration, type: 'warning' })\nreturn webpackConfiguration\n}\nexport default webpackConfig \n```", "```js\n{\n  \"name\": \"@web-creator/utils\",\n  \"version\": \"1.0.0\",\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"scripts\": {\n    \"build\": \"cross-env NODE_ENV=production npm-run-all clean compile webpack:production\",\n    \"build:dev\": \"cross-env NODE_ENV=development npm-run-all clean compile webpack:development\",\n    \"clean\": \"rm -rf ./dist\",\n    \"compile\": \"tsc\",\n    \"lint\": \"npm run --prefix ../../ lint\",\n    \"lint:fix\": \"npm run --prefix ../../ lint:fix\",\n    \"prepublishOnly\": \"npm run lint && npm run build\",\n    \"webpack:development\": \"webpack --config=../../webpack.config.ts --env mode=development --env type=package --env packageName=utils\",\n    \"webpack:production\": \"webpack --config=../../webpack.config.ts --env mode=production --env type=package --env packageName=utils\"\n  },\n  \"author\": \"Carlos Santana\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"currency-formatter\": \"^1.5.9\",\n    \"slug\": \"^8.2.2\",\n    \"uuid\": \"^9.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/currency-formatter\": \"^1.5.1\",\n    \"@types/slug\": \"^5.0.3\",\n    \"@types/uuid\": \"^9.0.0\"\n  }\n} \n```", "```js\nconst is = {\nArray(v: unknown) {\nreturn v instanceof Array\n},\nDefined(v: unknown) {\nreturn typeof v !== 'undefined' && v !== null\n},\nEmail(email: string) {\nconst regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\nreturn regex.test(email)\n},\nFalse(v: unknown) {\nreturn (this.Defined(v) && v === false) || v === 'false'\n},\nNumber(v: unknown) {\nreturn typeof v === 'number'\n},\nFunction(v: unknown) {\nreturn typeof v === 'function'\n},\nObject(v: unknown) {\nreturn this.Defined(v) && typeof v === 'object' && !this.Array(v)\n},\nString(v: unknown) {\nreturn this.Defined(v) && typeof v === 'string'\n},\nUndefined(v: unknown) {\nreturn typeof v === 'undefined' || v === null\n},\nJSON(str: string) {\nif (!str || str === null) {\nreturn false\n}\ntry {\nJSON.parse(str)\n} catch (e) {\nreturn false\n}\nreturn true\n},\nPassword(password: string, min = 8) {\nreturn Boolean(password && password.length >= min)\n},\nPasswordMatch(p1: string, p2: string) {\nreturn this.Password(p1) && this.Password(p2) && p1 === p2\n},\nBrowser() {\nreturn typeof window !== 'undefined'\n},\nDevice() {\nif (!this.Browser()) {\nreturn false\n}\nconst ua = navigator.userAgent\nif (/(tablet|ipad|playbook|silk)|(android(?!.*mobi))/i.test(ua)) {\nreturn true\n}\nif (/Mobile|Android|iP(hone|od)|IEMobile|BlackBerry|Kindle|Silk-Accelerated|(hpw|web)OS|Opera M(obi|ini)/.test(ua)) {\nreturn true\n}\nreturn false\n},\nEmptyObject(v: any) {\nreturn v ? Object.keys(v).length === 0 : true\n}\n}\nexport default is \n```", "```js\nexport { default as is } from './utils/is' \n```", "```js\n{\n  \"name\": \"web-creator\",\n  \"private\": true,\n  \"workspaces\": [\n    \"packages/*\"\n  ],\n  \"scripts\": {\n    \"lint\": \"eslint --ext .tsx,.ts ./packages/**/src\",\n    \"lint:fix\": \"eslint --ext .tsx,.ts ./packages/**/src\",\n    \"build\": \"npm-run-all build:*\",\n    \"build:devtools\": \"cd ./packages/devtools && npm run build\",\n    \"build:utils\": \"cd ./packages/utils && npm run build\",\n    \"build:authentication\": \"cd ./packages/authentication && npm run build\",\n    \"build:design-system\": \"cd ./packages/design-system && npm run build\",\n    \"build:api\": \"cd ./packages/api && npm run build\",\n  },\n  \"devDependencies\": {\n    \"@typescript-eslint/eslint-plugin\": \"^5.49.0\",\n    \"@typescript-eslint/parser\": \"^5.49.0\",\n    \"cross-env\": \"^7.0.3\",\n    \"eslint\": \"^8.33.0\",\n    \"eslint-config-airbnb\": \"^19.0.4\",\n    \"eslint-config-airbnb-typescript\": \"^17.0.0\",\n    \"eslint-config-prettier\": \"^8.6.0\",\n    \"eslint-import-resolver-typescript\": \"^3.5.3\",\n    \"eslint-plugin-import\": \"^2.27.5\",\n    \"eslint-plugin-jsx-a11y\": \"^6.7.1\",\n    \"eslint-plugin-prettier\": \"^4.2.1\",\n    \"eslint-plugin-react\": \"^7.32.2\",\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"npm-run-all\": \"^4.1.5\",\n    \"prettier\": \"^2.8.3\",\n    \"ts-node\": \"^10.9.1\",\n    \"typescript\": \"^4.9.5\",\n    \"webpack-cli\": \"^5.0.1\"\n  },\n  \"dependencies\": {\n    \"webpack\": \"^5.75.0\",\n    \"webpack-merge\": \"^5.8.0\"\n  }\n} \n```", "```js\n{\n  \"name\": \"@web-creator/api\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"cross-env NODE_ENV=production npm-run-all clean compile webpack:production\",\n    \"build:dev\": \"cross-env NODE_ENV=development npm-run-all clean compile webpack:development\",\n    \"clean\": \"rm -rf ./dist\",\n    \"compile\": \"tsc\",\n    \"dev\": \"ts-node-dev src/index.ts\",\n    \"lint\": \"npm run --prefix ../../ lint\",\n    \"lint:fix\": \"npm run --prefix ../../ lint:fix\",\n    \"webpack:development\": \"webpack --config=../../webpack.config.ts --env mode=production --env type=api --env packageName=api\",\n    \"webpack:production\": \"webpack --config=../../webpack.config.ts --env mode=development --env type=api --env packageName=api\"\n  },\n  \"author\": \"Carlos Santana\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@graphql-tools/merge\": \"8.3.18\",\n    \"@graphql-tools/schema\": \"9.0.16\",\n    \"@web-creator/authentication\": \"1.0.0\",\n    \"@web-creator/utils\": \"^1.0.0\",\n    \"@apollo/server\": \"^4.7.3\",\n    \"cookie-parser\": \"^1.4.6\",\n    \"cors\": \"^2.8.5\",\n    \"dotenv\": \"^16.0.3\",\n    \"express\": \"^4.18.2\",\n    \"graphql\": \"16.6.0\",\n    \"graphql-middleware\": \"6.1.33\",\n    \"graphql-tag\": \"2.12.6\",\n    \"isomorphic-fetch\": \"^3.0.0\",\n    \"jsonwebtoken\": \"^9.0.0\",\n    \"pg\": \"^8.9.0\",\n    \"pg-hstore\": \"^2.3.4\",\n    \"pg-native\": \"^3.0.1\",\n    \"sequelize\": \"^6.28.0\",\n    \"sequelize-typescript\": \"^2.1.5\"\n  },\n  \"devDependencies\": {\n    \"@types/body-parser\": \"^1.19.2\",\n    \"@types/express-jwt\": \"^6.0.4\",\n    \"@types/jsonwebtoken\": \"^9.0.1\",\n    \"@types/cors\": \"^2.8.13\",\n    \"@types/node\": \"^18.11.18\",\n    \"@types/pg\": \"^8.6.6\",\n    \"ts-node-dev\": \"2.0.0\"\n  }\n} \n```", "```js\nimport { security } from '@web-creator/utils'\nimport { DataType, Sequelize, User } from '../types'\nexport default (sequelize: Sequelize, dataType: DataType): User => {\nconst user = sequelize.define('User', {\nid: {\nprimaryKey: true,\nallowNull: false,\ntype: dataType.UUID,\ndefaultValue: dataType.UUIDV4()\n},\nusername: {\ntype: dataType.STRING,\nallowNull: false,\nunique: true,\nvalidate: {\nisAlphanumeric: {\nargs: true,\nmsg: 'The user just accepts alphanumeric characters'\n},\nlen: {\nargs: [4, 20],\nmsg: 'The username must be from 4 to 20 characters'\n}\n}\n},\npassword: {\ntype: dataType.STRING,\nallowNull: false\n},\nemail: {\ntype: dataType.STRING,\nallowNull: false,\nunique: true,\nvalidate: {\nisEmail: {\nargs: true,\nmsg: 'Invalid email'\n}\n}\n},\nrole: {\ntype: dataType.STRING,\nallowNull: false\n},\nactive: {\ntype: dataType.BOOLEAN,\nallowNull: false,\ndefaultValue: false\n }\n},\n{\nhooks: {\nbeforeCreate: (u: User): void => {\nu.password = security.encrypt(u.password)\n}\n}\n}\n)\nreturn user\n} \n```", "```js\nimport gql from 'graphql-tag'\nexport default gql`\ntype ErrorResponse {\ncode: Int\nmessage: String!\n}\n\ntype Error {\nerror: ErrorResponse\n}\n` \n```", "```js\nimport gql from 'graphql-tag'\nexport default gql`\nscalar UUID\nscalar Datetime\nscalar JSON\n` \n```", "```js\nimport gql from 'graphql-tag'\nexport default gql`\n\"User type\"\ntype User {\nid: UUID!\nusername: String!\nemail: String!\nrole: String!\nactive: Boolean!\ncreatedAt: Datetime!\nupdatedAt: Datetime!\n}\n\"Token type\"\ntype Token {\ntoken: String!\n}\n\"User Query\"\ntype Query {\ngetUser(at: String!): User!\ngetUsers: [User!]\n}\n\"User Mutation\"\ntype Mutation {\ncreateUser(input: ICreateUser): User!\nlogin(input: ILogin): Token!\n}\n\"CreateUser Input\"\ninput ICreateUser {\nusername: String!\npassword: String!\nemail: String!\nactive: Boolean!\nrole: String!\n}\n\"Login Input\"\ninput ILogin {\nemailOrUsername: String!\npassword: String!\n}\n` \n```", "```js\nimport { authenticate, getUserBy, getUserData } from '@web-builder/authentication'\nimport { ICreateUser, ILogin, Model } from '../../types'\nconst getUsers = (_: any, _args: any, { models }: { models: Model }) => models.User.findAll()\nconst getUser = async (_: any, { at }: { at: string }, { models }: {models: Model}) => {\nconst connectedUser = await getUserData(at)\nif (connectedUser) {\n// Validating if the user is still valid\nconst user = await getUserBy(\n{\nid: connectedUser.id,\nemail: connectedUser.email,\nactive: connectedUser.active\n},\n[connectedUser.role],\nmodels\n)\nif (user) {\nreturn {\n...connectedUser\n}\n}\n}\nreturn {\nid: '',\nusername: '',\nemail: '',\nrole: '',\nactive: false\n}\n}\nconst createUser = (_:any, {input}: {input: ICreateUser}, {models}: {models: Model}) =>\nmodels.User.create({ ...input })\nconst login = (_: any, { input }: { input: ILogin }, { models }: { models: Model }) =>\nauthenticate(input.emailOrUsername, input.password, models)\nexport default {\nQuery: {\ngetUser,\ngetUsers\n},\nMutation: {\ncreateUser,\nlogin\n}\n} \n```", "```js\nimport { ValueOf } from '@web-creator/utils'\n// Here you need to add all the services you want to create\nexport const Service = {\nCRM: 'crm'\n} as const\nexport type Service = ValueOf<typeof Service>\nexport type Mode = 'production' | 'development'\nexport enum DeploymentType {\nPRODUCTION = 'production',\nSTAGING = 'staging',\nDEVELOPMENT = 'development'\n}\nexport interface ServiceConfiguration {\ndomainName: string\nport: number\ndatabase?: {\nengine?: string\nport?: number\nhost?: string\ndatabase?: string\nusername?: string\npassword?: string\n}\n}\nexport interface ServiceBuilderConfiguration extends ServiceConfiguration {\nservice: Service\n} \n```", "```js\nimport { ServiceConfiguration } from '../../types/config'\nexport const config: ServiceConfiguration = {\ndomainName: 'localhost',\nport: 4000,\ndatabase: {\nengine: 'postgresql',\nport: 5432,\nhost: 'localhost',\ndatabase: '',\nusername: '',\npassword: ''\n}\n} \n```", "```js\nimport { ServiceConfiguration } from '../../types/config'\nexport const config: ServiceConfiguration = {\ndomainName: 'ranchosanpancho.com',\nport: 4000,\ndatabase: {\ndatabase: 'crm'\n}\n} \n```", "```js\nDB_ENGINE=postgresql\nDB_PORT=5432\nDB_HOST=localhost\nDB_USERNAME=<YourDBUserName>\nDB_PASSWORD=<YourDBPassword> \n```", "```js\n// This package will load the environment variables from our .env file\nimport dotenv from 'dotenv'\n// Here you can add your custom services configuration\nimport { config as crmConfig } from './services/crm/config'\nimport { config as blankServiceConfig } from './services/default/config'\nimport { Service, ServiceBuilderConfiguration, ServiceConfiguration } from './types/config'\n// Loading Env vars\ndotenv.config()\nconst getServiceConfig = (service: Service): ServiceConfiguration => {\nswitch (service) {\n// Add your custom services here\ncase Service.CRM:\nreturn crmConfig\ndefault:\nreturn blankServiceConfig\n}\n}\nconst buildConfig = (): ServiceBuilderConfiguration => {\nconst service = process.env.SERVICE as Service\nif (!service) {\nthrow 'You must specify a service (E.g., SERVICE=crm npm run dev)'\n}\nconst serviceConfig = getServiceConfig(service)\nconst config: ServiceBuilderConfiguration = {\n...serviceConfig,\ndatabase: {\n...serviceConfig.database,\nengine: process.env.DB_ENGINE,\nhost: process.env.DB_HOST,\nport: Number(process.env.DB_PORT),\nusername: process.env.DB_USERNAME,\npassword: process.env.DB_PASSWORD\n},\nservice\n}\nreturn config\n}\n// Building the config\nconst Config = buildConfig()\nexport default Config \n```", "```js\nimport { DataType } from '../../../types'\nexport default (sequelize: any, dataType: DataType) => {\nconst Guest = sequelize.define('Guest', {\nid: {\nprimaryKey: true,\nallowNull: false,\ntype: dataType.UUID,\ndefaultValue: dataType.UUIDV4()\n},\nfullName: {\ntype: dataType.STRING,\nallowNull: false\n},\nemail: {\ntype: dataType.STRING,\nallowNull: false,\nunique: true\n},\nphoto: {\ntype: dataType.STRING,\nallowNull: true\n},\nphone: {\ntype: dataType.STRING,\nallowNull: true\n},\nsocialMedia: {\ntype: dataType.STRING,\nallowNull: true\n},\nlocation: {\ntype: dataType.STRING,\nallowNull: true\n},\ngender: {\ntype: dataType.STRING,\nallowNull: true\n},\nbirthday: {\ntype: dataType.STRING,\nallowNull: true\n}\n})\nreturn Guest\n} \n```", "```js\nimport { keys, ts } from '@web-creator/utils'\nimport pg from 'pg'\nimport { Sequelize } from 'sequelize'\nimport Config from '../../../config'\n// Db Connection\nconst { engine, port, host, database, username, password } = Config.database ?? {}\nconst uri = `${engine}://${username}:${password}@${host}:${port}/${database}`\nconst sequelize = new Sequelize(uri, {\ndialectModule: pg\n})\n// Models\nconst addModel = (path: string) => require(path).default(sequelize, Sequelize)\nconst models: any = {\nUser: addModel('../../../models/User'), // Global model\nGuest: addModel('./Guest'), // Local model\nsequelize // We must pass the sequelize object here\n}\n// Relationships\nkeys(models).forEach((modelName: string) => {\nif (ts.hasKey(models, modelName)) {\nif (models[modelName].associate) {\nmodels[modelName].associate(models)\n}\n}\n})\nexport default models \n```", "```js\nimport models from '../models'\nasync function createFirstUser(): Promise<any> {\nconst existingUsers = await models.User.findAll()\nif (existingUsers.length === 0) {\nconst newUser: any = await models.User.create({\nusername: 'admin',\npassword: '12345678',\nemail: 'admin@ranchosanpancho.com',\nrole: 'god',\nactive: true\n})\nreturn newUser\n}\nreturn null\n}\nasync function createGuests(): Promise<any> {\nconst existingGuests = await models.Guest.findAll()\nif (existingGuests.length === 0) {\nconst newGuests: any = await models.Guest.bulkCreate([\n{\nfullName: 'Carlos Santana',\nemail: 'carlos@ranchosanpancho.com',\nphoto: 'carlos.jpg',\nphone: '+1 555 555 5555',\nsocialMedia: 'https://www.facebook.com/carlos.santana',\nlocation: 'Colima, Mexico',\ngender: 'Male',\nbirthday: '11/21/1987'\n},\n{\nfullName: 'Cristina Santana',\nemail: 'cristina@ranchosanpancho.com',\nphoto: 'cristina.jpg',\nphone: '+1 444 444 4444',\nsocialMedia: 'https://www.facebook.com/cristina.santana',\nlocation: 'Colima, Mexico',\ngender: 'Female',\nbirthday: '1/20/1989'\n}\n])\nreturn newGuests\n}\nreturn null\n}\nfunction setInitialSeeds(): void {\ncreateFirstUser()\ncreateGuests()\n}\nexport default setInitialSeeds \n```", "```js\nimport gql from 'graphql-tag'\nexport default gql`\ntype Guest {\nid: UUID!\nfullName: String!\nemail: String!\nphoto: String!\nsocialMedia: String!\nlocation: String!\nphone: String!\ngender: String!\nbirthday: String\ncreatedAt: Datetime!\nupdatedAt: Datetime!\n}\ntype GuestResponse {\nguests: [Guest!]!\n}\nunion GuestResult = GuestResponse | Error\ntype Query {\ngetGuests: GuestResult\n}\n` \n```", "```js\nimport { mergeTypeDefs } from '@graphql-tools/merge'\n// Global Types\nimport Error from '../../../../graphql/types/Error'\nimport Scalar from '../../../../graphql/types/Scalar'\nimport User from '../../../../graphql/types/User'\n// Local Types\nimport Guest from './Guest'\nexport default mergeTypeDefs([Error, Scalar, User, Guest]) \n```", "```js\nexport default {\nQuery: {\ngetGuests: async (_: any, _args: any, { models }: { models: any }): Promise<any> => {\nconst guests = await models.Guest.findAll({ \norder: [['fullName', 'ASC']]\n})\n// If there are guests, return them with a GuestResponse type\nif (guests.length > 0) {\nreturn {\n__typename: 'GuestResponse',\nguests\n}\n}\n// If there are no guests, return an Error type with a 404 code and message \nreturn {\n__typename: 'Error',\nerror: {\ncode: 404,\nmessage: 'No guests found'\n}\n}\n}\n}\n} \n```", "```js\nimport { mergeResolvers } from '@graphql-tools/merge'\nimport user from '../../../../graphql/resolvers/user'\nimport guest from './guest'\nconst resolvers = mergeResolvers([user, guest])\nexport default resolvers \n```", "```js\nimport { makeExecutableSchema } from '@graphql-tools/schema'\nimport { ts } from '@web-creator/utils'\nimport { ApolloServer } from '@apollo/server'\nimport { expressMiddleware } from '@apollo/server/express4'\nimport { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer'\nimport bodyParser from 'body-parser'\nimport http from 'http'\nimport cookieParser from 'cookie-parser'\nimport cors from 'cors'\nimport express, { NextFunction, Request, Response } from 'express'\nimport { applyMiddleware } from 'graphql-middleware'\nimport { json } from 'body-parser'\nimport { Service } from './types/config' \n```", "```js\n// Service\nconst service: any = process.env.SERVICE ?? 'default'\n// Validating service\nif (!ts.includes(Service, service)) {\nthrow 'Invalid service'\n} \n```", "```js\n// We are importing the service files dynamically\nconst resolvers = require(`./services/${service}/graphql/resolvers`).default\nconst typeDefs = require(`./services/${service}/graphql/types`).default\nconst models = require(`./services/${service}/models`).default\nconst seeds = require(`./services/${service}/seeds`).default \n```", "```js\nconst app = express()\nconst httpServer = http.createServer(app)\nconst corsOptions = {\norigin: '*',\ncredentials: true\n}\napp.use(cors(corsOptions))\napp.use(cookieParser())\napp.use(bodyParser.json())\n// CORS\napp.use((req: Request, res: Response, next: NextFunction) => {\nres.header('Access-Control-Allow-Origin', '*')\nres.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept')\nnext()\n}) \n```", "```js\n// Schema\nconst schema = applyMiddleware(\nmakeExecutableSchema({\ntypeDefs,\nresolvers\n})\n) \n```", "```js\n// Apollo Server\nconst apolloServer = new ApolloServer({\nschema,\nplugins:[ApolloServerPluginDrainHttpServer({ httpServer })]\n}) \n```", "```js\n// Database Sync\n  const main = async () => {\n    const alter = true\n    const force = false\n\n    await apolloServer.start()\n    await models.sequelize.sync({ alter, force })\n    // Setting up initial seeds\n    console.log('Initializing Seeds...')\n    seeds()\n    app.use(\n      '/graphql',\n      cors<cors.CorsRequest>(),\n      json(),\n      expressMiddleware(apolloServer, {\n        context: async () => ({ models })\n      })\n    )\n    await new Promise<void>((resolve) => httpServer.listen({ port: 4000 }, resolve))\n    console.log(' Server ready at http://localhost:4000/graphql')\n  }\n  main() \n```", "```js\n{\n  \"name\": \"@web-creator/frontend\",\n  \"version\": \"1.0.0\", \n  \"scripts\": {\n    \"dev\": \"cross-env NODE_ENV=development npm run next:dev\",\n    \"build\": \"next build\",\n    \"next\": \"ts-node src/server.ts\",\n    \"next:dev\": \"ts-node src/server.ts\",\n    \"lint\": \"npm run --prefix ../../ lint\",\n    \"lint:fix\": \"npm run --prefix ../../ lint:fix\",\n    \"typecheck\": \"tsc --noEmit\"\n  },\n  \"author\": \"Carlos Santana\",\n  \"license\": \"ISC\",\n  \"peerDependencies\": {\n    \"react\": \">=17.0.2\",\n    \"react-dom\": \">=17.0.2\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.20.12\",\n    \"@babel/node\": \"^7.20.7\",\n    \"@types/cookie-parser\": \"^1.4.3\",\n    \"@types/isomorphic-fetch\": \"^0.0.36\",\n    \"@types/styled-components\": \"^5.1.26\",\n    \"babel-plugin-jsx-remove-data-test-id\": \"^3.0.0\",\n    \"babel-plugin-styled-components\": \"^2.0.7\"\n  },\n  \"dependencies\": {\n    \"@apollo/client\": \"^3.7.7\",\n    \"@web-creator/authentication\": \"1.0.0\",\n    \"@web-creator/devtools\": \"1.0.0\",\n    \"@web-creator/utils\": \"^1.0.0\",\n    \"babel-preset-next\": \"^1.4.0\",\n    \"cookie-parser\": \"^1.4.6\",\n    \"dotenv\": \"^16.0.3\",\n    \"express\": \"^4.18.2\",\n    \"isomorphic-fetch\": \"^3.0.0\",\n    \"next\": \"^13.1.6\",\n    \"react-cookie\": \"^4.1.1\",\n    \"styled-components\": \"^5.3.6\",\n    \"webpack\": \"^5.75.0\"\n  }\n} \n```", "```js\n{\n  \"extends\": \"../../tsconfig.common.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\",\n    \"baseUrl\": \".\",\n    \"isolatedModules\": true,\n    \"noEmit\": false,\n    \"allowJs\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"incremental\": true,\n    \"jsx\": \"preserve\",\n    \"paths\": {\n      \"~/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"src/**/*\"]\n} \n```", "```js\nconst path = require('path')\nmodule.exports = {\nreactStrictMode: true,\nwebpack: (config, { isServer }) => {\n// Fixes npm packages that depend on 'fs' module\nif (!isServer) {\nconfig.resolve.fallback.fs = false\n}\n// Aliases\nconfig.resolve.alias['~'] = path.resolve(__dirname, './src')\nreturn config\n}\n} \n```", "```js\n{\n  \"presets\": [\"next/babel\"],\n  \"plugins\": [[\"styled-components\", { \"ssr\": true, \"preprocess\": false }]],\n  \"env\": {\n    \"production\": {\n      \"plugins\": [\"babel-plugin-jsx-remove-data-test-id\"]\n    }\n  }\n} \n```", "```js\nimport { SiteConfiguration } from '../../types/config'\nexport const config: SiteConfiguration = {\nsiteTitle: 'Blank Page',\ndomainName: 'localhost',\napi: {\nuri: 'http://localhost:4000/graphql'\n},\npages: ['index']\n} \n```", "```js\nimport { gql } from '@apollo/client'\nexport const getGuestsQuery = '\ngetGuests {\n... on GuestResponse {\nguests {\nid\nfullName\nemail\nphoto\nsocialMedia\nlocation\ngender\nbirthday\nnote\n}\n}\n... on Error {\nerror {\ncode\nmessage\n}\n}\n}\n'\nexport default gql'\nquery getGuests {\n${getGuestsQuery}\n}\n' \n```", "```js\nimport React, { FC } from 'react'\nimport Config from '~/config'\nconst SwitcherPage = require('~/sites/${Config.site}/switcher').default\nconst getRouterParams = require('~/sites/${Config.site}/server/routerParams').default\ntype Props = {\nsiteTitle: string\n}\nconst Page: FC<Props> = ({ siteTitle }) => {\nconst routerParams = getRouterParams({})\nreturn <SwitcherPage routerParams={routerParams} siteTitle={siteTitle} />\n}\nexport default Page \n```", "```js\nimport { useRouter } from 'next/router'\nimport React, { FC } from 'react'\nimport Config from '~/config'\nconst SwitcherPage = require('~/sites/${Config.site}/switcher').default\nconst getRouterParams = require('~/sites/${Config.site}/server/routerParams').default\ntype Props = {\nsiteTitle: string\nserverData: any\n}\nconst Page: FC<Props> = ({ siteTitle, serverData }) => {\nconst router = useRouter()\nconst routerParams = getRouterParams(router.query)\nreturn (\n<SwitcherPage \nrouterParams={routerParams} \nsiteTitle={siteTitle} \nprops={{ serverData }} \n/>\n)\n}\nexport default Page \n```", "```js\nimport dynamic from 'next/dynamic'\nimport React from 'react'\nimport Switcher, { Props } from '~/components/Switcher'\nconst dynamicPages: Record<string, Record<string, any>> = {\nindex: {\nindex: dynamic(() => import('./pages/index'))\n},\nlogin: {\nindex: dynamic(() => import('./pages/login'))\n},\ndashboard: {\nindex: dynamic(() => import('./pages/dashboard/index'))\n}\n}\nexport default ({ routerParams, siteTitle, props }: Props) => (\n<Switcher\nrouterParams={routerParams}\nsiteTitle={siteTitle}\nprops={props}\ndynamicPages={dynamicPages}\n/>\n) \n```", "```js\nimport React, { FC } from 'react'\nimport ErrorPage from '~/components/ErrorPage'\ntype Route = {\npage: string\nsection?: string\nsubSection?: string\nurlParams?: string[]\nqueryParams?: Record<string, string>\n}\nexport type Props = {\nrouterParams: Route\nsiteTitle: string\nprops?: Record<string, any>\ndynamicPages: any\n}\nconst Switcher: FC<Props> = ({ routerParams, props = {}, dynamicPages: sitePages }) => {\nconst { \npage, \nsection = 'index', \nsubSection = '', \nurlParams, \nqueryParams = {} \n} = routerParams\nconst extraProps = {\nqueryParams,\nrouter: {\nsection,\nsubsection\n},\n...urlParams\n}\nconst pageName = page\nlet PageToRender // This will be a dynamic React Component \nlet sectionPages: any = {}\n// We validate if our main page exists (index, login or dashboard)\nif (sitePages[pageName]) {\n// If exists we get our sectionsPages (index.index, login.index and dashboard.index)\nsectionPages = sitePages[pageName]\n// By default we will try to render the index of each page\nPageToRender = sectionPages.index\n// If we have subsection, we render it (dashboard.guests)\nif (sectionPages[section][subSection]) {\nPageToRender = sectionPages[section][subSection]\n} else if (section !== 'index') {\n// This is to render nested routes that only have index\nPageToRender = sectionPages[section].index\n}\n} else {\n// If we can't find any of the pages, then we render an ErrorPage\nPageToRender = ErrorPage\n}\nreturn <PageToRender {...props} {...extraProps} />\n}\nexport default Switcher \n```", "```js\nimport React from 'react'\nexport default () => <h1>San Pancho Index Page</h1> \n```", "```js\nimport React from 'react'\nexport default () => (\n<>\n<h1>Dashboard for San Pancho</h1>\n<a href=\"/logout\">Logout</a>\n</>\n) \n```", "```js\nimport React from 'react'\nimport Login from '~/components/Login'\nexport default () => <Login /> \n```", "```js\nimport { Button, Input, RenderIf } from '@web-creator/design-system'\nimport { getRedirectToUrl, redirectTo } from '@web-creator/utils'\nimport React, { FC, useContext, useState } from 'react'\nimport { FormContext } from '~/contexts/form'\nimport { UserContext } from '~/contexts/user'\nimport { CSS } from './Login.styled'\ntype Props = {\n  background?: string\n}\nconst Login: FC<Props> = () => {\n  const redirectToUrl = getRedirectToUrl()\n  // States\n  const [values, setValues] = useState({\n    emailOrUsername: '',\n    password: ''\n  })\n  const [notification, setNotification] = useState({\n    id: Math.random(),\n    message: ''\n  })\n  const [invalidLogin, setInvalidLogin] = useState(false)\n  // Contexts\n  const { change } = useContext(FormContext)\n  const { login } = useContext(UserContext)\n  // Methods\n  const onChange = (e: any): any => change(e, setValues)\n  const handleSubmit = async (user: any): Promise<void> => {\n    const response = await login(user)\n    if (response.error) {\n      setInvalidLogin(true)\n      setNotification({\n        id: Math.random(),\n        message: response.message\n      })\n    } else {\n      redirectTo(redirectToUrl || '/', true)\n    }\n  }\n  return (\n    <>\n      <RenderIf isTrue={invalidLogin && notification.message !== ''}>\n        {notification.message}\n      </RenderIf>\n      <CSS.Login>\n        <CSS.LoginBox>\n          <header>\n            <img className=\"logo\" src=\"img/isotype.png\" alt=\"Logo\" /> <br />\n            <h2>Sign In</h2>\n          </header>\n          <section>\n            <Input\n              autoComplete=\"off\"\n              name=\"emailOrUsername\"\n              placeholder=\"Email Or Username\"\n              onChange={onChange}\n              value={values.emailOrUsername}\n            />\n            <Input \n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              onChange={onChange}\n              value={values.password}\n            />\n            <div className=\"actions\">\n              <Button onClick={(): Promise<void> => handleSubmit(values)}>\n                Login\n              </Button>\n              <Button color=\"success\">\n                Register\n              </Button>\n            </div>\n          </section>\n        </CSS.LoginBox>\n      </CSS.Login>\n    </>\n  )\n}\nexport default Login \n```", "```js\nimport { useMutation, useQuery } from '@apollo/client'\nimport { getGraphQlError, parseDebugData, redirectTo } from '@web-builder/utils'\nimport React, { createContext, FC, ReactElement, useEffect,useMemo,useState} from 'react'\nimport { useCookies } from 'react-cookie'\nimport Config from '~/config'\nimport GET_USER_QUERY from '~/graphql/user/getUser.query'\nimport LOGIN_MUTATION from '~/graphql/user/login.mutation'\n// Interfaces\ninterface IUserContext {\nlogin(input: any): any\nuser: any\n}\ntype Props = {\nchildren: ReactElement\n}\n// Creating context\nexport const UserContext = createContext<IUserContext>({\nlogin: () => null,\nuser: null\n})\nconst UserProvider: FC<Props> = ({ children }) => {\n// States\nconst [cookies, setCookie] = useCookies()\nconst [user, setUser] = useState(null)\n// Mutations\nconst [loginMutation] = useMutation(LOGIN_MUTATION)\n// Queries\nconst { data: dataUser } = useQuery(GET_USER_QUERY, {\nvariables: {\nat: cookies['at-${Config.site}'] || ''\n}\n})\n// Effects\nuseEffect(() => {\nif (dataUser) {\nsetUser(dataUser.getUser)\n}\n}, [dataUser])\nasync function login(input:{emailOrUsername: string;password: string }): Promise<any> {\ntry {\nconst { data: dataLogin } = await loginMutation({\nvariables: {\nemailOrUsername: input.emailOrUsername,\npassword: input.password\n}\n})\nif (dataLogin) {\nsetCookie('at-${Config.site}', dataLogin.login.token, { \npath: '/', \nmaxAge: 45 * 60 * 1000 \n})\nreturn dataLogin.login.token\n}\n} catch (err) {\nreturn getGraphQlError(err)\n}\nreturn null\n}\nconst context = useMemo(() => ({\nlogin,\nuser\n}), [user])\nreturn <UserContext.Provider value={context}>{children}</UserContext.Provider>\n}\nexport default UserProvider \n```", "```js\nimport { gql } from '@apollo/client'\nexport default gql`\nmutation login($emailOrUsername: String!, $password: String!) {\nlogin(input: { emailOrUsername: $emailOrUsername, password: $password }) {\ntoken\n}\n}\n` \n```", "```js\nimport { gql } from '@apollo/client'\nexport default gql`\nquery getUser($at: String!) {\ngetUser(at: $at) {\nid\nemail\nusername\nrole\nactive\n}\n}\n` \n```", "```js\nimport { ApolloProvider } from '@apollo/client'\nimport React, { FC } from 'react'\nimport Config from '~/config'\nimport GlobalStyle from '~/components/GlobalStyles/GlobalStyles'\nimport { useApollo } from '~/contexts/apolloClient'\nimport FormProvider from '~/contexts/form'\nimport UserProvider from '~/contexts/user'\nconst App: FC<any> = ({ Component, pageProps }) => {\nconst apolloClient = useApollo((pageProps && pageProps.initialApolloState) || {})\nreturn (\n<>\n<GlobalStyle />\n<ApolloProvider client={apolloClient}>\n<UserProvider>\n<FormProvider>\n<Component {...pageProps} />\n</FormProvider>\n</UserProvider>\n</ApolloProvider>\n</>\n)\n}\n// @ts-ignore\nApp.getInitialProps = async () => ({\n...Config\n})\nexport default App \n```", "```js\nimport { cx } from '@web-creator/utils'\nimport Document, { Head, Html, Main, NextScript } from 'next/document'\nimport React from 'react'\nimport { ServerStyleSheet } from 'styled-components'\nimport Config from '~/config'\nexport default class MyDocument extends Document {\nstatic async getInitialProps(ctx: any) {\nconst sheet = new ServerStyleSheet()\nconst originalRenderPage = ctx.renderPage\ntry {\nctx.renderPage = () =>\noriginalRenderPage({\nenhanceApp: (App: any) => (props: any) => {\nconst themeClassname = 'theme--light'\nreturn sheet.collectStyles(\n<body className={cx.join(themeClassname)}>\n<App {...props} title={Config.siteTitle} />\n</body>\n)\n}\n})\nconst initialProps = await Document.getInitialProps(ctx)\nreturn {\n...initialProps,\nstyles: (\n<>\n{initialProps.styles}\n{sheet.getStyleElement()}\n</>\n)\n}\n} finally {\nsheet.seal()\n}\n}\nrender() {\nreturn (\n<Html>\n<Head>\n<link rel=\"icon\" type=\"image/x-icon\" href=\"/images/favicon.png\" />\n</Head>\n<Main />\n<NextScript />\n</Html>\n)\n}\n} \n```", "```js\nimport { ValueOf } from '@web-creator/utils'\n// Here you add your sites\nexport const Site = {\nSanPancho: 'san-pancho',\nCodejobs: 'codejobs',\nBlankPage: 'blank-page'\n} as const\nexport type Site = ValueOf<typeof Site>\nexport type Mode = 'production' | 'development'\nexport enum DeploymentType {\nPRODUCTION = 'production',\nSTAGING = 'staging',\nDEVELOPMENT = 'development'\n}\nexport interface SiteConfiguration {\nsiteTitle: string\ndomainName: string\nhostname?: string\nmode?: string\napi?: {\nuri: string\n}\npages: string[]\ncustom?: any\n}\nexport interface SiteBuilderConfiguration extends SiteConfiguration {\nsite: Site\nhomeUrl: string\n} \n```", "```js\nimport path from 'path'\nimport { SiteConfiguration } from '../../types/config'\nexport const config: SiteConfiguration = {\nsiteTitle: 'Cabañas San Pancho',\ndomainName: 'ranchosanpancho.com',\npages: ['index', 'login']\n} \n```", "```js\nimport { is } from '@web-creator/utils'\n// Importing sites configurations\nimport { config as blankPageConfig } from './sites/blank-page/config'\nimport { config as sanPanchoConfig } from './sites/san-pancho/config'\nimport { config as codejobsConfig } from './sites/codejobs/config'\nimport { Site, SiteBuilderConfiguration, SiteConfiguration } from './types/config'\nconst isProduction = process.env.NODE_ENV === 'production'\nconst isLocal = process.env.LOCAL === 'true'\nconst isLocalProduction = isProduction && isLocal\n// Getting site configuration\nconst getSiteConfig = (site: Site): SiteConfiguration => {\nswitch (site) {\ncase Site.SanPancho:\nreturn sanPanchoConfig\ncase Site.Codejobs:\nreturn codejobsConfig\ndefault:\nreturn blankPageConfig\n}\n}\n// Building configuration\nconst buildConfig = (): SiteBuilderConfiguration => {\n// Server site\nlet site = process.env.SITE as Site\n// On client side we grab the site from Next props\nif (is.Browser()) {\nconst { props } = window.__NEXT_DATA__\nif (props && props.site) {\nsite = props.site\n}\n} else if (!site) {\nthrow 'You must specify a site (E.g. SITE=san-pancho npm run dev)'\n}\nconst siteConfig = getSiteConfig(site)\n// Building configuration based on the environment and site configuration\nconst config: SiteBuilderConfiguration = {\n...siteConfig,\napi: {\nuri: isProduction && !isLocalProduction\n? `https://${siteConfig.domainName}/graphql`\n: `http://localhost:4000/graphql`\n},\nsite,\nhomeUrl: `https://${siteConfig.domainName}`,\nhostname: isProduction && !isLocalProduction ? siteConfig.domainName : 'localhost',\nmode: isProduction ? 'production' : 'development'\n}\nreturn config\n}\nconst Config = buildConfig()\nexport default Config \n```", "```js\nimport cookieParser from 'cookie-parser'\nimport express, { Application, NextFunction, Request, Response } from 'express'\nimport nextJS from 'next'\nimport path from 'path'\nimport { ts } from '@web-creator/utils'\nimport Config from './config'\nimport { isConnected } from './lib/middlewares/user'\nimport { Site } from './types/config' \n```", "```js\n// Site\nconst site: string = process.env.SITE ?? 'blank-page'\n// Validating service\nif (!ts.includes(Site, site)) {\nthrow 'Invalid site'\n} \n```", "```js\n// Setting up Next App\nconst { hostname } = Config\nconst port = 3000\nconst dev = process.env.NODE_ENV !== 'production'\nconst nextApp = nextJS({ dev, hostname, port })\nconst handle = nextApp.getRequestHandler()\n// Running Next App\nnextApp.prepare().then(() => {\n// Express application\nconst app: Application = express() \n```", "```js\n// Cookies\napp.use(cookieParser())\n// Sites static directories\napp.use(express.static(path.join(__dirname, '../public')))\napp.use(express.static(path.join(__dirname, './sites/${Config.site}/static'))) \n```", "```js\n// Custom Routes\napp.get('/logout', (req: Request, res: Response) => {\nconst redirect: any = req.query.redirectTo || '/'\n// The \"at (accessToken)\" cookie will be per site, like: \"at-san-pancho\" or \"at-codejobs\".\nres.clearCookie('at-${Config.site}')\nres.redirect(redirect)\n})\napp.get(\n'/dashboard',\nisConnected(true, ['god', 'admin', 'editor'], '/login?redirectTo=/dashboard'),\n(req: Request, res: Response, next: NextFunction) => next()\n) \n```", "```js\n// Traffic handling\napp.all('*', (req: Request, res: Response) => handle(req, res))\n// Listening...\napp.listen(3000) \n```"]