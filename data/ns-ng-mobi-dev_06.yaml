- en: Running the App on iOS and Android
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在iOS和Android上运行应用程序
- en: There are a couple of ways to build, run, and start working with NativeScript
    applications.  We will cover command-line tools, as they are currently the most
    supported method, and the best way to do anything with any NativeScript project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种构建、运行和开始使用NativeScript应用程序的方法。我们将介绍命令行工具，因为它们目前是最受支持的方法，也是处理任何NativeScript项目的最佳方式。
- en: To simplify things for our understanding, we will work through the commands
    that we will use frequently first, then we will cover the rest of the commands
    that aren't as frequently used. So, let's begin and work through the commands
    that you will want to know.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化我们的理解，我们将首先介绍我们经常使用的命令，然后再介绍不太经常使用的命令。所以，让我们开始并逐步介绍你需要了解的命令。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: How to run an application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何运行一个应用程序
- en: How to start the Debugger
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何启动调试器
- en: How to build an application for deployment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构建一个部署应用程序
- en: How to start the testing framework
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何启动测试框架
- en: How to run a NativeScript diagnostic
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何运行NativeScript诊断
- en: All about Android Keystores
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Android密钥库的一切
- en: Taking command…
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接受命令...
- en: The first command we will cover is the one you will use every time you
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先介绍的命令是您每次使用时都会用到的命令
- en: start your app. To make things simpler, I will use `<platform>` to mean iOS,
    Android, or--when it is finally supported--Windows.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 启动您的应用程序。为了简化事情，我将使用`<platform>`来表示iOS、Android，或者--当它最终得到支持时--Windows。
- en: tns run <platform>
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns run <platform>
- en: The `tns run <platform>` command will automatically build your app and sync
    it up to the devices and emulators. It will do all the heavy-lifting to try and
    make your app be in a running state on the device, and then it will launch the
    app. This command has changed over the years and has now become a fairly smart
    command that will automatically make certain choices to simplify your development
    life. One of the cool features of this command is that it will sync your application
    to all running and connected devices. If you have five different devices hooked
    up, all five of them will receive the changes. This only works per each platform,
    but you can run `tns run ios` in one and `tns run android` in another command
    window, and then any changes will automatically be synced to all devices connected
    to your machine. As you may imagine, this is very useful during the testing and
    cleaning up phase to make sure that everything continues to look good on different
    phones and tablets. If you have no physical devices hooked up to your computer,
    it will automatically launch an emulator for you.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`tns run <platform>`命令将自动构建您的应用程序并将其同步到设备和模拟器上。它将尽力使您的应用程序在设备上处于运行状态，然后启动应用程序。这个命令多年来发生了变化，现在已经成为一个相当智能的命令，它将自动做出某些选择，以简化您的开发生活。这个命令的一个很酷的功能是它将您的应用程序同步到所有正在运行和连接的设备上。如果您连接了五个不同的设备，所有这五个设备都将接收到更改。这只对每个平台有效，但您可以在一个命令窗口中运行`tns
    run ios`，在另一个命令窗口中运行`tns run android`，然后任何更改都将自动同步到连接到您的计算机的所有设备。您可以想象，这在测试和清理阶段非常有用，以确保一切在不同的手机和平板电脑上看起来都很好。如果您的计算机没有连接任何物理设备，它将自动为您启动模拟器。'
- en: Normally, since the app already exists on the devices, it will just do a quick
    live sync of the changed files. This is a very fast process, as it just transfers
    all the changes in your files from your own `app` folder to all the connected
    devices, and then starts the app.  This process is, in the majority of situations,
    a really good thing. However, `tns run <platform>` will not always automatically
    detect any changes to your `node_modules` folder, for example, when you upgrade
    a plugin. If this is the case, you will need to cancel the current running `tns
    run` and then start a new `tns run`. Occasionally, the `tns run` will still believe
    that all it needs to do is sync, whereas the reality is that it should have to
    rebuild the app.  In this case, you will want to use the handy-dandy `--clean`
    option.  This is very important for times when the device does not seems to pick
    up any of your changes. The `tns run <platform> --clean` command will normally
    force the app to be rebuilt; however, if `--clean` fails to rebuild, then check
    out the `tns build` command described later in the chapter. There are a couple
    of other command parameters that aren't used much, but you might need them for
    a specific situation. The `--justlaunch` will start the app and do nothing else;
     `--no-watch` will disable live syncing, and finally `--device <device id>` will
    force the app to be installed only on a specific device. You can view which devices
    are available for the installation of the app by running `tns devices`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，由于应用程序已经存在于设备上，它只会快速地同步更改的文件。这是一个非常快速的过程，因为它只是将您的文件夹中的所有更改从您自己的`app`文件夹传输到所有连接的设备，然后启动应用程序。在大多数情况下，这个过程是非常好的。然而，`tns
    run <platform>`不会总是自动检测到`node_modules`文件夹的任何更改，例如当您升级插件时。如果是这种情况，您需要取消当前运行的`tns
    run`，然后启动一个新的`tns run`。偶尔，`tns run`仍然会认为它只需要同步，而实际上它应该重新构建应用程序。在这种情况下，您将需要使用方便的`--clean`选项。这对于设备似乎没有接收到任何更改的情况非常重要。`tns
    run <platform> --clean`命令通常会强制重新构建应用程序；然而，如果`--clean`无法重新构建，那么请查看本章后面描述的`tns build`命令。还有一些其他命令参数并不经常使用，但您可能需要它们来处理特定情况。`--justlaunch`将启动应用程序并且不做其他操作；`--no-watch`将禁用实时同步，最后`--device
    <device id>`将强制应用程序仅安装在特定设备上。您可以通过运行`tns devices`来查看哪些设备可用于安装应用程序。
- en: tns debug <platform>
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns debug <platform>
- en: 'The next command we will discuss is `tns debug <platform>`; this will allow
    you to use the debug tools to test your application. This works in a similar way
    to the `tns run` command; however, instead of it just running your app, it will
    debug it. The debugger will use the standard Chrome development tools, which enables
    you to step through the code: break points, call stacks, and console logs. This
    command will give you a URL, which you can use to open in Chrome. In iOS specifically,
    you should run `tns debug ios --chrome` to get the URL for chrome-devtools. The
    following is an example of debugging Android via the Chrome debugger:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论的下一个命令是`tns debug <platform>`；这将允许您使用调试工具来测试您的应用程序。这与`tns run`命令的工作方式类似；但是，它不仅仅是运行您的应用程序，而是对其进行调试。调试器将使用标准的Chrome开发工具，这使您可以逐步执行代码：断点、调用堆栈和控制台日志。此命令将为您提供一个URL，您可以在Chrome中打开。特别是在iOS中，您应该运行`tns
    debug ios --chrome`来获取chrome-devtools的URL。以下是通过Chrome调试器调试Android的示例：
- en: '![](../images/00029.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00029.jpeg)'
- en: Some of the same `tns run` parameters are valid here, such as `--no-watch`,
    `--device`, and `--clean`. In addition to those commands, several other commands
    are available, for example, `--debug-brk`, which is used to make the app break
    at the start of the application so that you can easily set breakpoints before
    continuing the start up process. `--start` and `--stop` allow you to attach and
    detach from an already running application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一些相同的`tns run`参数在这里也是有效的，比如`--no-watch`，`--device`和`--clean`。除了这些命令，还有其他几个命令可用，例如`--debug-brk`，用于使应用在应用程序启动时中断，以便您可以在继续启动过程之前轻松设置断点。`--start`和`--stop`允许您附加和分离已经运行的应用程序。
- en: Don't forget that if you are currently using the debugger, JavaScript has the
    cool `debugger;` command, which will force an attached debugger to break just
    as though you had a breakpoint set.  This can be used to put a break anywhere
    in your code, and it is ignored if a debugger is not attached to your program.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记，如果您当前正在使用调试器，JavaScript有一个很酷的`debugger;`命令，它将强制附加的调试器中断，就像您设置了断点一样。这可以用于在代码的任何位置设置断点，并且如果调试器未附加到您的程序，则会被忽略。
- en: tns build <platform>
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns build <platform>
- en: The next command you will need to be aware of is `tns build <platform>`; this
    command fully builds a new app from scratch.  Now, the primary use for this command
    is when you want to build a debug or release version of the app you are going
    to give to somebody else to test or to upload it to one of the stores. However,
    it can also be used to force a fully clean build of the application, if the `tns
    run` version of your app is in a weird state--this will do a full rebuild. If
    you don't include the `--release` flag, the build will be the default debug build.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要了解的下一个命令是`tns build <platform>`；此命令完全从头构建一个新的应用程序。现在，此命令的主要用途是当您要构建要交给他人测试或上传到其中一个商店的应用程序的调试或发布版本时。但是，如果`tns
    run`版本的应用程序处于奇怪的状态，也可以使用它来强制进行完全清洁的构建-这将进行完全重建。如果不包括`--release`标志，构建将是默认的调试构建。
- en: On iOS, you will use `--for-device`, which will make the app compile for a real
    device rather than an emulator. Remember that you need to have signing keys from
    Apple to do a proper release build.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS上，您将使用`--for-device`，这将使应用程序编译为真实设备而不是模拟器。请记住，您需要从苹果获得签名密钥才能进行正确的发布构建。
- en: 'On Android, when you use `--release`, you will need to include all of the following
    `--key-store-*` parameters; these are required to sign in to your Android application:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android上，当您使用`--release`时，您将需要包括所有以下`--key-store-*`参数；这些参数是必需的，用于签署您的Android应用程序：
- en: '| `--key-store-path` | Where your key store file is located. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '`--key-store-path` | 您的密钥库文件的位置。'
- en: '| `--key-store-password` | Your password to read any of the data in your keystore.
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '`--key-store-password` | 用于读取密钥库中任何数据的密码。'
- en: '| `--key-store-alias` | The alias for this app. So, inside your keystore, you
    may have `AA` as the alias, which in your mind equals AwesomeApp. I prefer to
    make the alias the same as the full name of the app, but this is your choice.
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '`--key-store-alias` | 此应用程序的别名。因此，在您的密钥库中，您可能将`AA`作为别名，而在您的心目中等同于AwesomeApp。我更喜欢将别名设置为与应用程序的全名相同，但这是您的选择。'
- en: '| `--key-store-alias-password` | This is the password required to read the
    actual signing key assigned to the alias you just set. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '`--key-store-alias-password` | 这是读取刚刚设置的别名分配的实际签名密钥所需的密码。'
- en: Since keystores can be confusing to deal with, we will stray from the path slightly
    here and discuss how to actually create a keystore. This is normally only a one-time
    thing, that you will need to do for each Android application you want to release.
    This is also not something you need to worry about for iOS applications, as Apple
    provides you the signing keys, and they fully control them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于密钥库可能很难处理，我们将稍微偏离主题，讨论如何实际创建密钥库。这通常只需要做一次，您需要为要发布的每个Android应用程序执行此操作。对于iOS应用程序，这也不是您需要担心的事情，因为苹果会为您提供签名密钥，并且他们完全控制它们。
- en: Android Keystores
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android密钥库
- en: On Android, you create your own application signing keys. As such, this key
    is used for the entire life of your application--by entire, I mean you use the
    same key to release every version of your application. This key is what links
    version 1.0 to v1.1 to v2.0\. Without using the same key, the application will
    be considered a totally different application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android上，您可以创建自己的应用程序签名密钥。因此，这个密钥在您的应用程序的整个生命周期中都会被使用——我是说，您需要使用相同的密钥来发布每个版本的应用程序。这个密钥将版本1.0链接到v1.1到v2.0。如果不使用相同的密钥，该应用程序将被视为完全不同的应用程序。
- en: The reason there are two passwords is that your keystore can actually contain
    an unlimited number of keys, and so, each key in the keystore has its own password.
    Anyone who has access to this key can pretend to be you. This is helpful for building
    servers, but not so helpful if you lose them. You cannot change the key at a later
    time, so making backups of your keystore is extremely important.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个密码的原因是，您的密钥库实际上可以包含无限数量的密钥，因此，密钥库中的每个密钥都有自己的密码。任何拥有此密钥的人都可以假装是您。这对于构建服务器很有帮助，但如果丢失，就不那么有帮助了。您无法在以后更改密钥，因此备份密钥库非常重要。
- en: Without your keystore, you will never be able to release a new version of the
    exact same application name, meaning that anyone using the older version will
    not see that you have an updated version. So, again, it is critical that you back
    up your keystore file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有您的密钥库，您将永远无法发布完全相同的应用程序名称的新版本，这意味着使用旧版本的任何人都不会看到您有更新的版本。因此，再次强调，备份密钥库文件非常重要。
- en: Creating a new keystore
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的密钥库
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You provide a path to the file you want to save into the `keystore_name`, and
    for the `alias_name` you put the actual key name for which I normally use the
    application name; So, you type the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您提供一个要保存到的文件的路径`keystore_name`，对于`alias_name`，您放入实际的密钥名称，我通常使用应用程序名称；因此，您输入以下内容：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, you will see the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将看到以下内容：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You now have a keystore for your application.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您为应用程序拥有了一个密钥库。
- en: Android Google Play Fingerprints
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android Google Play指纹
- en: 'If you use Google Play services, you might have to give them your Android application
    key fingerprint. To get your key fingerprint, you can use the following commands:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Google Play服务，可能需要提供您的Android应用程序密钥指纹。要获取密钥指纹，可以使用以下命令：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should see something like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似于这样的东西：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that in addition to ensuring that you keep a good back up of your keystores,
    if you ever sell your application to another vendor, having separate keystores
    per application makes the transfer a lot easier and safer for you. If you use
    the same keystore and/or alias, it makes it difficult for you to separate out
    who gets what. So, for the sake of simplicity, I personally recommend that you
    have a separate keystore and alias per application. I normally keep the keystore
    in with the app and under version control. Since both opening and accessing an
    alias are password protected, you are fine unless you choose your passwords poorly.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，除了确保您保留了密钥库的良好备份外，如果您将应用程序出售给另一个供应商，每个应用程序都有单独的密钥库会使转移对您来说更加简单和安全。如果您使用相同的密钥库和/或别名，这将使您难以区分谁得到了什么。因此，为了简单起见，我个人建议您为每个应用程序设置单独的密钥库和别名。我通常将密钥库保存在应用程序中并进行版本控制。由于打开和访问别名都受到密码保护，除非您选择密码不当，否则一切都很好。
- en: Back in command
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 返回命令
- en: Now that we've taken took a side trip to deal with Android keystores, we will
    dive deeper into more of the tns commands that you only use occasionally here
    and there. The first of these is the tns plugin.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经花了一些时间处理Android密钥库，我们将更深入地了解一些您偶尔在这里和那里使用的 tns 命令。其中之一是 tns plugin。
- en: The tns plugin command
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns plugin 命令
- en: 'This one is actually quite important, but it is only used when you want to
    deal with plugins. The most common version of this command is just `tns plugin
    add <name>`. So, for example, if you want to install a plugin called *NativeScript-Dom*,
    you will perform `tns plugin add nativescript-dom`, and it will automatically
    install the code for this plugin to be used in your application.  To remove this
    plugin, you would type `tns plugin remove nativescript-dom`. We also have `tns
    plugin update nativescript-dom` to remove the plugin and download and install
    the newest version of the plugin. Finally, running `tns plugin` alone will give
    you a list of plugins and their versions that you have installed:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令实际上非常重要，但只有在您想要处理插件时才会使用。这个命令的最常见版本只是 `tns plugin add <name>`。因此，例如，如果您想安装一个名为
    *NativeScript-Dom* 的插件，您将执行 `tns plugin add nativescript-dom`，它将自动安装用于在应用程序中使用此插件的代码。要删除此插件，您将输入
    `tns plugin remove nativescript-dom`。我们还有 `tns plugin update nativescript-dom`
    用于删除插件并下载并安装插件的最新版本。最后，仅运行 `tns plugin` 将为您列出您已安装的插件及其版本的列表：
- en: '![](../images/00030.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00030.jpeg)'
- en: 'However, to be honest, if I need this information I''m looking for outdated
    plugins, and so your better bet is to type `npm outdated` and let `npm` give you
    the list of outdated plugins and the current versions:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，老实说，如果我需要这些信息，我正在寻找过时的插件，所以你最好的选择是输入 `npm outdated` 并让 `npm` 给你列出过时的插件和当前版本：
- en: '![](../images/00031.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00031.jpeg)'
- en: If you have outdated plugins, then you can use the `tns plugin update` command
    to upgrade them.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的插件已过时，则可以使用 `tns plugin update` 命令对其进行升级。
- en: The tns install <dev_plugin> command
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns install <dev_plugin> 命令
- en: This one isn't used very much, but it is useful when you need it, as it allows
    you to install development plugins, such as webpack, typescript, coffee script,
    or SASS support. So, if you decide that you want to use *webpack*, you can type
    `tns install webpack`, and it will install the webpack support so that you can
    webpack your application.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令并不经常使用，但当您需要时它很有用，因为它允许您安装开发插件，例如 webpack、typescript、coffee script 或 SASS
    支持。因此，如果您决定要使用 *webpack*，您可以输入 `tns install webpack`，它将安装 webpack 支持，以便您可以对应用程序进行
    webpack。
- en: The tns create <project_name> command
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns create <project_name> 命令
- en: This command is what we use to create a new project. This will create a new
    directory and install all the platform-independent code required to build a new
    app. The important parameters for this are `--ng`, which tells it to use the Angular
    template (which is what we are using in this book--without `--ng`, you get the
    plain JS template) and the `--appid`, which allows you to set your full app name.
    So, `tns create AwesomeApp --ng --appid com.mastertechapps.awesomeapp` will create
    a new Angular app in the `AwesomeApp` directory with the app ID, `com.mastertechapps.awesomeapp`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令是我们用来创建一个新项目的。这将创建一个新的目录，并安装构建新应用所需的所有独立于平台的代码。这个命令的重要参数是`--ng`，它告诉它使用Angular模板（这是我们在本书中使用的--没有`--ng`，你会得到普通的JS模板）和`--appid`，它允许你设置完整的应用名称。因此，`tns
    create AwesomeApp --ng --appid com.mastertechapps.awesomeapp`将在`AwesomeApp`目录中创建一个新的Angular应用，应用ID为`com.mastertechapps.awesomeapp`。
- en: The tns info command
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns信息命令
- en: 'Another useful command for checking the state of the main NativeScript component
    is `tns info`; this command will actually check your main NativeScript parts and
    tell you whether anything is out of date:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 用于检查主要NativeScript组件状态的另一个有用命令是`tns info`；这个命令实际上会检查你的主要NativeScript部分，并告诉你是否有任何过期的内容：
- en: '![](../images/00032.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00032.jpeg)'
- en: As you can see from the preceding example, there is a newer version of the NativeScript
    command-line and I don't have the `ios` runtime installed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的例子中可以看出，NativeScript命令行有一个更新版本，而我没有安装`ios`运行时。
- en: The tns platform [add|remove|clean|upgrade] <platform> command
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns平台[add|remove|clean|upgrade]<platform>命令
- en: You can use the `tns platform` [`add`|`remove`|`clean`|`upgrade`] `<platform>`
    command to install, remove, or update the platform modules just like plugins.
    These are the `tns-android` and `tns-ios` modules you see listed in the prior
    `tns info` command. The application actually needs these platform-specific modules
    to be installed. By default, when you perform a `tns run`, it will automatically
    install them if they are missing. Occasionally, if the application refuses to
    build, you can use `tns platform clean <platform>`, and it will automatically
    uninstall and then re-install the platform which will reset the build process.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`tns platform` [`add`|`remove`|`clean`|`upgrade`] `<platform>`命令来安装、删除或更新平台模块，就像插件一样。这些是你在之前的`tns
    info`命令中看到的`tns-android`和`tns-ios`模块。应用实际上需要这些特定于平台的模块来安装。默认情况下，当你执行`tns run`时，如果缺少这些模块，它将自动安装它们。偶尔，如果应用程序拒绝构建，你可以使用`tns
    platform clean <platform>`，它将自动卸载然后重新安装平台，这将重置构建过程。
- en: Note that when you do a `tns platform clean/remove/update`, these will totally
    delete the `platforms/<platform>` folder.  If you have made any manual changes
    to the files in this folder (which is not recommended), those changes will be
    deleted.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当你执行`tns platform clean/remove/update`时，这些命令会完全删除`platforms/<platform>`文件夹。如果你对该文件夹中的文件进行了任何手动更改（这是不推荐的），这些更改将被删除。
- en: The tns test <platform> command
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns测试<platform>命令
- en: The `tns test <platform>` command allows you to install and/or start the testing
    framework. We will cover testing in more depth in later chapters, however, for
    the sake of completeness, we will cover the command in this section. `tns test
    init` will initialize the testing system; you will do this once per application.
    It will ask you to select a testing framework and then install your chosen testing
    framework. `tns test <platform>` will start the testing on that specific platform.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`tns test <platform>`命令允许你安装和/或启动测试框架。我们将在后面的章节中更深入地介绍测试，但为了完整起见，我们将在本节中介绍这个命令。`tns
    test init`将初始化测试系统；你将每个应用程序都要做一次。它会要求你选择一个测试框架，然后安装你选择的测试框架。`tns test <platform>`将在特定平台上启动测试。'
- en: The tns device command
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tns设备命令
- en: 'If you specifically need to target a device, using the `tns device` command
    will give you a list of the devices that are installed and connected to your computer.
    This will allow you to use the `--device <deviceid>` parameter on the `tns run/debug`
    commands:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要特定地针对一个设备，使用 `tns device` 命令将会给你列出已安装并连接到你的计算机的设备。这将允许你在 `tns run/debug`
    命令上使用 `--device <deviceid>` 参数：
- en: '![](../images/00033.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00033.jpeg)'
- en: The tns doctor command
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TNS doctor 命令
- en: The `tns doctor` command checks your environment for common issues. It will
    attempt to detect whether everything is installed and configured correctly. It
    mostly works, but occasionally it will fail and state something is broken even
    when everything actually works. However, it provides a very good first indication
    of what might be wrong if your `tns run/build/debug` no longer works.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`tns doctor` 命令会检查你的环境是否存在常见问题。它会尝试检测一切是否安装和配置正确。它大多数时候都有效，但偶尔会失败并声明某些东西出了问题，即使一切实际上都正常。然而，它提供了一个非常好的第一指示，如果你的
    `tns run/build/debug` 不再工作。'
- en: The tns help command
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TNS help 命令
- en: If you totally forget what we have written here, you can execute `tns help` which
    will give you an overview of the different commands. Some of the parameters may
    not be listed but at this point, they do exist. In newer versions, newer parameters
    and commands may be added to `tns`, and this is the easiest way to find out about
    them.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你完全忘记了我们在这里写的东西，你可以执行 `tns help`，它会给你一个不同命令的概述。一些参数可能没有列出，但在这一点上，它们是存在的。在新版本中，可能会添加新的参数和命令到
    `tns`，这是了解它们的最简单方式。
- en: If, for some reason, your app does not seem to be updating properly, the easiest
    way to fix this is to uninstall the app from the device. Then, try and do a `tns
    build <platform>`, then `tns run <platform>`.  If that fails to fix it, then uninstall
    the app again, do a `tns platform clean <platform>`, and then do your `tns run`.
    Occasionally, the platform may get in a weird state, and resetting it is the only
    way to fix the problem.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因，你的应用似乎没有正确更新，最简单的解决方法是从设备上卸载应用。然后，尝试执行 `tns build <platform>`，然后 `tns
    run <platform>`。如果这样做无法解决问题，那么再次卸载应用，执行 `tns platform clean <platform>`，然后执行 `tns
    run`。偶尔，平台可能会进入奇怪的状态，重置它是解决问题的唯一方法。
- en: TNS command-line cheatsheet
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TNS 命令行速查表
- en: '| **Command-line** | **Description** |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| **命令行** | **描述** |'
- en: '| `tns --version` | This returns the version of the NativeScript command. If
    you are running an older version, then you can use npm to upgrade your NativeScript
    command like this: `npm install -g nativescript`. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `tns --version` | 返回 NativeScript 命令的版本。如果你正在运行旧版本，那么你可以使用 npm 来升级你的 NativeScript
    命令，就像这样：`npm install -g nativescript`。 |'
- en: '| `tns create <your project name>` | This creates a brand new project.The following
    are its parameters: `--ng` and `--appid`. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `tns create <your project name>` | 这将创建一个全新的项目。以下是它的参数：`--ng` 和 `--appid`。
    |'
- en: '| `tns platform add <platform>` | This adds a target platform to your project.
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `tns platform add <platform>` | 这将向你的项目添加一个目标平台。 |'
- en: '| `tns platform clean <platform>` | This command is normally not needed, but
    if you are messing with the platform directory and your platform, you can remove
    and then add it back. Note that this deletes the entire platform directory. So,
    if you have made any specific customizations to your Android manifest or iOS Xcode
    project file, you should back them up before running the clean command. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `tns platform clean <platform>` | 通常不需要这个命令，但如果你正在操作平台目录和你的平台，你可以先移除然后再添加回来。请注意，这会删除整个平台目录。因此，如果你对
    Android 清单或 iOS Xcode 项目文件进行了特定的自定义，你应该在运行清理命令之前备份它们。 |'
- en: '| `tns platform update <platform>` | This is actually a pretty important command. 
    NativeScript is still a very active project that is under a lot of development.
    This command upgrades your platform code to the latest version, which typically
    eliminates bugs and adds lots of new features. Note that this should be done alongside
    an upgrade of the common JavaScript libraries, as most of the time they are in
    sync with each other. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `tns platform update <platform>` | 这实际上是一个非常重要的命令。NativeScript仍然是一个非常活跃的项目，正在进行大量的开发。这个命令将您的平台代码升级到最新版本，通常可以消除错误并添加许多新功能。请注意，这应该与常用JavaScript库的升级一起进行，因为它们大多数时间是同步的。
    |'
- en: '| `tns build <platform>` | This builds the application for that platform using
    theparameters: `--release`, `--for-device`, and `--key-store-*`. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `tns build <platform>` | 这将使用参数`--release`、`--for-device`和`--key-store-*`为该平台构建应用程序。
    |'
- en: '| `tns deploy <platform>` | This builds and deploys the application to a physical
    or virtual device for that platform. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `tns deploy <platform>` | 这将构建并部署应用程序到该平台的物理或虚拟设备上。 |'
- en: '| `tns run <platform>` | This builds, deploys, and starts the application on
    a physical device or an emulator. This is the command that you will use the majority
    of the time to run your application and check out the changes. Its parameters
    are `--clean`, `--no-watch`, and `--justlaunch`. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `tns run <platform>` | 这将在物理设备或模拟器上构建、部署和启动应用程序。这是您大部分时间用来运行应用程序并查看更改的命令。其参数包括`--clean`、`--no-watch`和`--justlaunch`。
    |'
- en: '| `tns debug <platform>` | This builds, deploys and then starts the application
    on a physical device or an emulator in debug mode.  This is probably the second
    most used command. Its parameters are `--clean`, `--no-watch`, `--dbg-break`,
    and `--start`. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `tns debug <platform>` | 这将在调试模式下构建、部署然后启动应用程序在物理设备或模拟器上。这可能是第二常用的命令。它的参数包括`--clean`、`--no-watch`、`--dbg-break`和`--start`。
    |'
- en: '| `tns plugin add <plugin>` | This allows you to add a third-party plugin or
    component. These plugins can be entirely JavaScript-based code, or they might
    also contain a compilation from the Java or Objective-C library. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `tns plugin add <plugin>` | 这允许您添加第三方插件或组件。这些插件可以完全基于JavaScript代码，也可能包含从Java或Objective-C库编译而来。
    |'
- en: '| `tns doctor` | This allows you to run diagnostic checks on your environment
    if NativeScript does not appear to be working. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `tns doctor` | 如果NativeScript似乎无法正常工作，这允许您对环境运行诊断检查。 |'
- en: '| `tns devices` | This shows a list of connected devices for use with the `--device`
    command. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `tns devices` | 这显示了可用于`--device`命令的连接设备列表。 |'
- en: '| `tns install <dev plugin>` | This will install a development plugin (that
    is, webpack, typescript, and so on). |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `tns install <dev plugin>` | 这将安装开发插件（例如webpack、typescript等）。 |'
- en: '| `tns test [ init &#124; <platform> ]` | This allows you to create or run
    any tests for your application. Using init will initialize the test framework
    for the application.  Then, you can type the platform to run the tests on that
    platform. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `tns test [ init &#124; <platform> ]` | 这允许您为应用程序创建或运行任何测试。使用init将为应用程序初始化测试框架。然后，您可以输入要在该平台上运行测试的平台。
    |'
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Summary
- en: Now that you have an idea of the power of a command line, all you really need
    to remember is `tns debug ios` and `tns run android`; these will be your constant
    friends in our adventure. Throw in a couple of `tns plugin add` commands and then
    wrap up the application when finally finished with a `tns build`, and you are
    golden**.** However, don't forget about the rest of the commands; they all serve
    a purpose. Some of them are rarely used, but some of them are extremely helpful
    when you need them.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了命令行的强大之处，你真正需要记住的是`tns debug ios`和`tns run android`；它们将是我们冒险中的不变的朋友。再加上一些`tns
    plugin add`命令，最后用`tns build`完成应用程序，你就大功告成了。然而，不要忘记其他命令；它们都有各自的用途。有些很少使用，但有些在需要时非常有帮助。
- en: In [Chapter 7](part0092.html#2NNJO0-289fe2426d594f99a90e4363b2c9c34d), *Building
    the multi-track Player*, we will start exploring how to actually access the Native
    platform and integrate with plugins.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](part0092.html#2NNJO0-289fe2426d594f99a90e4363b2c9c34d)中，*构建多轨道播放器*，我们将开始探索如何实际访问原生平台并与插件集成。
