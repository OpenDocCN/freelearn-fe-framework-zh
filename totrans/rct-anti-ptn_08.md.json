["```js\nfunction UserProfile({ id }: { id: string }) {\n  const [user, setUser] = useState<User | null>(null);\n  useEffect(() => {\n    async function fetchUser() {\n      const response = await fetch(`/api/users/${id}`);\n      const data = await response.json();\n      setUser({\n        id: data.user_identification,\n        name: data.user_full_name,\n        isPremium: data.is_premium_user,\n        subscription: data.subscription_details.level,\n        expire: data.subscription_details.expiry,\n      });\n    }\n    fetchUser();\n  }, [id]);\n  if (!user) {\n    return <div>Loading...</div>;\n  }\n  return (\n    <div data-testid=\"user-profile\">\n      <h1>{user.name}</h1>\n    </div>\n  );\n}\n```", "```js\ntype RemoteUser = {\n  user_identification: string;\n  user_full_name: string;\n  is_premium_user: boolean;\n  subscription_details: {\n    level: string;\n    expiry: string;\n  }\n}\n```", "```js\ntype UserSubscription = \"Basic\" | \"Standard\" | \"Premium\" | \"Enterprise\";\ntype User = {\n  id: string;\n  name: string;\n  isPremium: boolean;\n  subscription: UserSubscription;\n  expire: string;\n};\n```", "```js\nimport {RemoteUser, User, UserSubscription} from \"./types\";\nexport const transformUser = (remoteUser: RemoteUser): User => {\n  return {\n    id: remoteUser.user_identification,\n    name: remoteUser.user_full_name,\n    isPremium: remoteUser.is_premium_user,\n    subscription: remoteUser.subscription_details.level as \n     UserSubscription,\n    expire: remoteUser.subscription_details.expiry,\n  };\n};\n```", "```js\nasync function fetchUserData<T>(id: string) {\n  const response = await fetch(`/api/users/${id}`);\n  const rawData = await response.json();\n  return transformUser(rawData) as T;\n}\nfunction UserProfile({ id }: { id: string }) {\n  const [user, setUser] = useState<User | null>(null);\n  useEffect(() => {\n    async function fetchUser() {\n      const response = await fetchUserData<User>(id);\n      setUser(response);\n    }\n    fetchUser();\n  }, [id]);\n  if (!user) {\n    return <div>Loading…</div>;\n  }\n  return (\n    <div data-tested=\"user-profile\">\n      <h1>{user.name}</h1>\n    </div>\n  );\n}\n```", "```js\nexport const transformUser = (remoteUser: RemoteUser): User => {\n  return {\n    id: remoteUser.user_identification,\n    name: remoteUser.user_full_name,\n    isPremium: remoteUser.is_premium_user,\n    subscription: remoteUser.subscription_details.level as \n     UserSubscription,\n    expire: remoteUser.subscription_details.expiry,\n  };\n};\n```", "```js\nfunction UserProfile({ user }: { user: User }) {\n  const fullName = user && user.name ? user.name : \"Loading\"…\";\n  const subscriptionLevel =\n    user && user.subscription ? user.subscription\": \"Basic\";\n  const subscriptionExpiry = user && user.expire ? user.expire\": \n   \"Never\";\n  return (\n    <div>\n      <h1>{fullName}</h1>\n      <p>Subscription Level: {subscriptionLevel}</p>\n      <p>Subscription Expiry: {subscriptionExpiry}</p>\n    </div>\n  );\n}\n```", "```js\nexport const transformUser = (remoteUser: RemoteUser): User => {\n  return {\n    id: remoteUser.user_identification ?? 'N/A',\n    name: remoteUser.user_full_name ?? 'Unknown User',\n    isPremium: remoteUser.is_premium_user ?? false,\n    subscription: (remoteUser.subscription_details?.level ?? 'Basic') \n     as UserSubscription,\n    expire: remoteUser.subscription_details?.expiry ?? 'Never',\n  };\n};\n```", "```js\nimport React, { ChangeEvent, useState } from \"react\";\nexport type Item = {\n  id: string;\n  name: string;\n  description: string;\n};\nconst SearchableList = ({ items }: { items: Item[] }) => {\n  const [filteredItems, setFilteredItems] = useState<Item[]>(items);\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setFilteredItems(\n      items.filter((item) => item.name.includes(e.target.value))\n    );\n  };\n  return (\n    <div>\n      <input type=\"text\" onChange={handleChange} />\n      <ul>\n        {filteredItems.map((item, index) => (\n          <li key={index}>{item.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\nexport default SearchableList;\n```", "```js\nconst ListItem = ({ item }: { item: Item }) => {\n  return (\n    <li>\n      <h2>{item.name}</h2>\n      <p>{item.description}</p>\n    </li>\n  );\n};\n```", "```js\nconst List = ({ items }: { items: Item[] }) => {\n  return (\n    <section data-testid=\"searchable-list\">\n      <ul>\n        {items.map((item) => (\n          <ListItem item={item} />\n        ))}\n      </ul>\n      <footer>Total items: {items.length}</footer>\n    </section>\n  );\n};\n```", "```js\nconst SearchInput = ({ onSearch }: { onSearch: (keyword: string) => void }) => {\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    onSearch(e.target.value);\n  };\n  return <input type=\"text\" onChange={handleChange} />;\n};\nconst SearchableList = ({ items }: { items: Item[] }) => {\n  const [filteredItems, setFilteredItems] = useState<Item[]>(items);\n  const onSearch = (keyword: string) => {\n    setFilteredItems(items.filter((item) => item.name.\n     includes(keyword)));\n  };\n  return (\n    <div>\n      <SearchInput onSearch={onSearch} />\n      <List items={filteredItems} />\n    </div>\n  );\n};\n```", "```js\ntype SearchableListProps = {\n  items: Item[];\n  onSearch: (keyword: string) => void;\n  onItemClicked: (item: Item) => void;\n};\nconst SearchableList = ({\n  items,\n  onSearch,\n  onItemClicked,\n}: SearchableListProps) => {\n  //...\n}\n```", "```js\nconst ListItem = ({\n  item,\n  onItemClicked,\n}: {\n  item: Item;\n  onItemClicked: (item: Item) => void;\n}) => {\n  return (\n    <li onClick={() => onItemClicked(item)}>\n      <h2>{item.name}</h2>\n      <p>{item.description}</p>\n    </li>\n  );\n};\n```", "```js\nconst List = ({\n  items,\n  onItemClicked,\n}: {\n  items: Item[];\n  onItemClicked: (item: Item) => void;\n}) => {\n  return (\n    <section data-testid=\"searchable-list\">\n      <ul>\n        {items.map((item) => (\n          <ListItem item={item} onItemClicked={onItemClicked} />\n        ))}\n      </ul>\n      <footer>Total items: {items.length}</footer>\n    </section>\n  );\n};\n```", "```js\nconst SearchableList = ({\n  items,\n  onSearch,\n  onItemClicked,\n}: SearchableListProps) => {\n  const [filteredItems, setFilteredItems] = useState<Item[]>(items);\n  const handleSearch = (keyword: string) => {\n    setFilteredItems(items.filter((item) => item.name.\n     includes(keyword)));\n  };\n  return (\n    <div>\n      <SearchInput onSearch={handleSearch} />\n      <List items={filteredItems} onItemClicked={onItemClicked} />\n    </div>\n  );\n};\n```", "```js\nimport { createContext } from \"react\";\nimport { Item } from \"./types\";\ntype SearchableListContextType = {\n  onSearch: (keyword: string) => void;\n  onItemClicked: (item: Item) => void;\n};\nconst noop = () => {};\nconst SearchableListContext = createContext<SearchableListContextType>({\n  onSearch: noop,\n  onItemClicked: noop,\n});\nexport { SearchableListContext };\n```", "```js\nconst SearchableList = ({\n  items,\n  onSearch,\n  onItemClicked,\n}: SearchableListProps) => {\n  const [filteredItems, setFilteredItems] = useState<Item[]>(items);\n  const handleSearch = (keyword: string) => {\n    setFilteredItems(items.filter((item) => item.name.\n     includes(keyword)));\n  };\n  return (\n    <SearchableListContext.Provider value={{ onSearch, onItemClicked }}>\n      <SearchInput onSearch={handleSearch} />\n      <List items={filteredItems} />\n    </SearchableListContext.Provider>\n  );\n};\n```", "```js\nconst List = ({ items }: { items: Item[] }) => {\n  return (\n    <section data-testid=\"searchable-list\">\n      <ul>\n        {items.map((item) => (\n          <ListItem item={item} />\n        ))}\n      </ul>\n      <footer>Total items: {items.length}</footer>\n    </section>\n  );\n};\n```", "```js\nconst ListItem = ({ item }: { item: Item }) => {\n  const { onItemClicked } = useContext(SearchableListContext);\n  return (\n    <li onClick={() => onItemClicked(item)}>\n      <h2>{item.name}</h2>\n      <p>{item.description}</p>\n    </li>\n  );\n};\n```", "```js\nconst SearchInput = ({ onSearch }: { onSearch: (keyword: string) => \n void }) => {\n  const { onSearch: providedOnSearch } = \n   useContext(SearchableListContext);\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    onSearch(e.target.value);\n    providedOnSearch(e.target.value);\n  };\n  return <input type=\"text\" onChange={handleChange} />;\n};\n```"]