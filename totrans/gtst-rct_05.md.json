["```js\n<!DOCTYPE html>\n<html>\n<head>\n<script src=\"img/react.min.js\"></script>\n<script src=\"img/JSXTransformer.js\"></script>\n  <script src=\"img/react-dom.js\"></script>\n  <meta charset=\"utf-8\">\n  <title>My React App</title>\n</head>\n<body>\n  <div id=\"app\"></div>\n    <script type=\"text/jsx\", src=\"img/index.js\"></script>\n</body>\n</html>\n```", "```js\nindex.js file:\n```", "```js\nvar MyButton = React.createClass({\n        getInitialState: function(){\n            return {value: 11} \n        },\n        addOnClick: function(){\n            this.setState({value: this.state.value +  2}); \n        },\n        render: function(){\n            console.log(\"myButton React component is rendering\"); \n        return <button onClick={this.addOnClick}>{this.state.value}</button> \n        } \n}); \nReactDOM.render(<MyButton />, document.getElementById('myComponent'));\n```", "```js\n componentWillMount: function(){\n console.log('MyButton component is mounting');\n },\n\n```", "```js\n componentDidMount: function(){\n console.log('MyButton component is mounted');\n },\n\n```", "```js\n//Updating lifecycle methods \n shouldComponentUpdate: function() {\n        console.log('ShouldComponentUpdate');\n            return true;\n          },\n componentWillReceiveProps: function(nextProps) {\n            console.log('ComponentWillRecieveProps invoked');\n         },\n componentWillUpdate: function() {\n            console.log('ComponentWillUpdate invoked');\n        },\n componentDidUpdate: function() {\n            console.log('ComponentDidUpdate invoked');\n        },\n```", "```js\n        componentWillUnmount: function(){\n console.log('Umounting MyButton component');\n }\n\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n<script src=\"img/react.min.js\"></script>\n<script src=\"img/JSXTransformer.js\"></script>\n  <script src=\"img/react-dom.js\"></script>\n  <meta charset=\"utf-8\">\n  <title>My React App</title>\n</head>\n<body>\n  <div id=\"app\"></div>\n    <script type=\"text/jsx\", src=\"img/index.js\"></script>\n</body>\n</html>\n```", "```js\nvar MyButton = React.createClass({\n    getDefaultProps: function() {\n        console.log('GetDefaultProps is invoked');\n        return {id: 1};\n    },\n    getInitialState: function(){\n        return {value: 11}\n    },\n    addOnClick: function(){\n        this.setState({value: this.state.value +  2});\n    },\n    componentWillMount: function(){\n        console.log('MyButton component is mounting');\n    },\n    render: function(){\n        console.log(\"myButton React component is rendering\");\n        return ( <div>\n        <button>{this.props.id}</button>\n        <button onClick={this.addOnClick}>{this.state.value}</button>\n        </div>);\n        },\n        componentDidMount: function(){\n        console.log('MyButton component is mounted');\n        },\n\n//Updating lifecycle methods\n    shouldComponentUpdate: function() {\n        console.log('ShouldComponentUpdate');\n        return true;\n    },\n    componentWillReceiveProps: function(nextProps) {\n        console.log('ComponentWillRecieveProps invoked');\n    },  \n    componentWillUpdate: function() {\n        console.log('ComponentWillUpdate invoked');\n    },  \n    componentDidUpdate: function() {\n        console.log('ComponentDidUpdate invoked');\n    },\n\n//Unmounting Lifecycle Methods\n    componentWillUnmount: function(){\n        console.log('Umounting MyButton component');\n    }\n\n});\n\nvar ComponentApp = React.createClass({\n    mount: function(){\n        ReactDOM.render(<MyButton />, document.getElementById('myApp'));\n    },\n    unmount: function(){\n          ReactDOM.unmountComponentAtNode(document.getElementById('myApp'));\n        },\n    render: function(){\n        return (\n        <div>\n        <button onClick={this.mount}>Mount</button>\n        <button onClick={this.unmount}>Unmount</button>\n        <div id=\"myApp\"></div>\n        </div>\n        );\n    }\n});\n\nReactDOM.render(<ComponentApp />, document.getElementById('app'));\n```", "```js\njsx â€“harmony\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n<script src=\"img/react.js\"></script>\n<script src=\"img/react-dom.js\"></script>\n<script src=\"img/JSXTransformer.js\"></script>\n  <meta charset=\"utf-8\">\n  <title>React ES6</title>\n  <h1>ok</h1>\n  </style>\n</head>\n<body>\n<div id=\"react-content\"></div>\n <script type=\"text/jsx;harmony=true\" src=\"img/index.js\"></script>\n</html>\n```", "```js\n//line 1\nclass Es6Component extends React.Component {\n\n//line 2\nrender() {\n\n  return <div onClick={this._handleClick}>Hi There, I am learning ES6 in React.</div>;\n\n}\n\n_handleClick() {\n\n  console.log(\"hi\");\n\n}\n\n}\n\nReactDOM.render(<Es6Component />, document.getElementById('react-content '));\n```", "```js\n    render: function()\n    ```", "```js\nexport class Counter extends React.Component\n\n/* The constructor of the newly created React class, Counter. There are the following things to be noted:call to super(props)And instead of calling getInitialState() ifecycle method, React team used the instance property called this.state() */\n\nconstructor(props) {super(props);\n    this.state = {count: props.initialCount};\n  }\n\n  tick() {\n    this.setState({count: this.state.count + 1});\n  }\n\n  render() {\n    return (\n      <div onClick={this.tick.bind(this)}>\n        Clicks: {this.state.count}\n      </div>\n    );\n  }\n}\n\n/* For validation and default values purposes propTypes and defaultProps are inbuilt within React's component. Here the propTypes and defaultProps are defined as properties on the constructor instead within the the class body. */\n\n// Declares the React's class Counter property types as number\nCounter.propTypes = { initialCount: React.PropTypes.number };\n\n/* sets the defaultProps for the Counter React class as initialCount being 0\\. These values are passed as super(props)*/\nCounter.defaultProps = { initialCount: 0 };\n```", "```js\nuse 'strict';\nfunction checkLoginStatusAndLoadUserLikes() {\n\n  FB.getLoginStatus(function(response) {\n    if (response.status === 'connected') {\n      loadUserAndLikes();\n    } else {\n      loginAndLoadUserLikes();\n    }\n  });\n}\n\nfunction loginAndLoadUserLikes() {\n  FB.login(function(response) {\n    loadUserAndLikes();\n  }, {scope: 'user_likes'});\n}\n\n//var UserDetails = React.createClass({\n\nclass UserDetails extends React.component {\n  render() {\n    return (\n      <section id=\"user-details\">\n        <a href={this.props.userDetails.link} target=\"__blank\">\n          {this.props.userDetails.name}\n        </a>\n        {' | '}\n        <a href=\"#\" onClick={this.handleLogout}>Logout</a>\n      </section>\n    )\n  },\n\n handleLogout: function () {\n FB.logout(function () {\n alert(\"You're logged out, refresh the page in order to login again.\");\n });\n }\n});\n\nfunction loadUserAndLikes () {\n  FB.api('/me', function (userResponse) {\n    ReactDOM.render(<UserDetails userDetails={userResponse} />, document.getElementById('user'));\n\n    var fields = { fields: 'category,name,picture.type(normal)' };\n    FB.api('/me/likes', fields, function (likesResponse) {\n      React.render(<UserLikesList list={likesResponse.data} />, document.getElementById('main'));\n    });\n  });\n}\n\n//var UserLikesList = React.createClass({\nclass UserLikesList extends React.Component {\n render() {\n let items = this.props.list.map(function (likeObject) {\n return <UserLikeItem data={likeObject} />;\n });\n\n    return (\n      <ul id=\"user-likes-list\">\n        {items}\n      </ul>\n    );\n  }\n//});\n\n}\n\n//var UserLikeItem = React.createClass({\n\nclass UserLikeItem extends React.createComponent {\n\n //getInitialState: function() {\n   // return {data_name: this.props.data.name};\n  //},\n handleClick(){\n this.setState({\n data_name: 'I liked it'})\n },\n\n  render() {\n    let props_data = this.props.data;\n\n    return (\n      <div onClick={this.handleClick}>\n        <img src={props_data.picture.data.url} title={props_data.name} />\n\n        <h1> Name:{this.state.data_name} </h1>\n\t<h2>Category <small>{props_data.category}</small></h2>\n      </div>\n    );\n  }\n}\n```", "```js\n// Future Version\nexport class Counter extends React.Component {\n static propTypes = { initialCount: React.PropTypes.number };\n static defaultProps = { initialCount: 0 };\n state = { count: this.props.initialCount };\n  //constructor\n// render method\n    );\n  }\n}\n```"]