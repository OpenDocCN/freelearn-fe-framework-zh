- en: Chapter 8. Releasing the Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章。发布应用程序
- en: The first version of our application is complete, which means that we are ready
    to go through the process of creating the production builds. In this chapter,
    we will start by showing you how to generate and run the application off of a
    static JavaScript bundle. Then, in preparation for the App Store, we will use
    Xcode to build our iOS release. Lastly, for Android we will walk through the set
    of command-line tools and scripts provided by React Native to build the final
    APK.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的第一个版本已完成，这意味着我们已准备好通过创建生产构建的过程。在本章中，我们将首先向您展示如何从静态 JavaScript 包生成和运行应用程序。然后，为了准备
    App Store，我们将使用 Xcode 构建我们的 iOS 版本。最后，对于 Android，我们将介绍 React Native 提供的命令行工具和脚本来构建最终的
    APK。
- en: 'In this chapter, we will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Generating the static bundle for iOS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 iOS 生成静态包
- en: Using the `static bundle` in place of `react-native start`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`静态包`代替`react-native start`
- en: Building a release in Xcode
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Xcode 中构建发布版本
- en: Signing and building the Android release APK
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 签名和构建 Android 版本 APK
- en: Generating the static bundle in iOS
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 iOS 中生成静态包
- en: So far, we have been serving the application's static bundle (where all of our
    JavaScript code lives) from a node server started by either Xcode or a terminal
    using `react-native start`. Before we create releases for iOS and Android, we
    need to generate the static JS bundle that our application will load. We will
    begin by creating the release in iOS; for Android, skip to the `generating the
    Android APK` section.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在从由 Xcode 或终端使用`react-native start`启动的节点服务器上提供应用程序的静态包（其中包含所有我们的 JavaScript
    代码）。在我们为 iOS 和 Android 创建发布版本之前，我们需要生成应用程序将加载的静态 JS 包。我们将首先在 iOS 中创建发布版本；对于 Android，请跳转到`生成
    Android APK`部分。
- en: 'Once again, we are going to use the `react-native-cli` and execute the `bundle`
    command. The `bundle` command requires three flags: `c`, `platform`, and `bundle-output`.
    The `entry-file` specifies the path to the root component, the platform is either
    iOS or Android, and `bundle-output` is the path to place the generated bundle.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用`react-native-cli`并执行`bundle`命令。`bundle`命令需要三个标志：`c`、`platform`和`bundle-output`。`entry-file`指定根组件的路径，平台是
    iOS 或 Android，而`bundle-output`是放置生成的包的路径。
- en: 'From the terminal in the root directory, run `react-native bundle` with an
    `entry-file` of `index.ios.js`, platform `iOS`, and point the path of the `bundle-output`
    to `ios/main.jsbundle`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在根目录的终端中，运行`react-native bundle`，指定`entry-file`为`index.ios.js`，平台为`iOS`，并将`bundle-output`路径指向`ios/main.jsbundle`：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Assets destination folder is not set, skipping...
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 资产目标文件夹未设置，跳过...
- en: More details about `react-native bundle` for iOS can be found in the React Native
    documentation at [https://facebook.github.io/react-native/docs/running-on-device-ios.html#using-offline-bundle](https://facebook.github.io/react-native/docs/running-on-device-ios.html#using-offline-bundle).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 iOS 中`react-native bundle`的更多详细信息，可以在 React Native 文档中找到，网址为[https://facebook.github.io/react-native/docs/running-on-device-ios.html#using-offline-bundle](https://facebook.github.io/react-native/docs/running-on-device-ios.html#using-offline-bundle)。
- en: Testing the static bundle in iOS
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 iOS 中的静态包
- en: 'First, we need to test that the static bundle can be loaded by our iOS application
    in the simulator. Open `AppDelegate.m` in Xcode and take a look at the following
    code and comments:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要测试静态包是否可以在模拟器中由我们的 iOS 应用程序加载。在 Xcode 中打开`AppDelegate.m`，查看以下代码和注释：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The various methods of loading the JavaScript bundle are outlined here. We
    are interested in `OPTION 2`, loading a pre-bundled file from the disk. Comment
    out the `jsCodeLocation` statement from `OPTION 1` and uncomment the second in
    `OPTION 2`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这里概述了加载 JavaScript 包的多种方法。我们感兴趣的是`选项 2`，从磁盘加载预打包的文件。从`选项 1`中注释掉`jsCodeLocation`语句，并在`选项
    2`中取消注释第二个：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Make sure that no `react-native start` terminal sessions are running, then
    build and run the application from Xcode (*Cmd* + *R*). You should be at the top
    of the simulator to indicate that it is loading from a pre-bundled file:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 确保没有正在运行的`react-native start`终端会话，然后从 Xcode 中构建并运行应用程序（*Cmd* + *R*）。你应该位于模拟器的顶部，以表明它正在从预打包的文件加载：
- en: '![Testing the static bundle in iOS](img/B05162_08_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![测试 iOS 中的静态包](img/B05162_08_01.jpg)'
- en: Creating an iOS release in Xcode
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Xcode 中创建 iOS 版本
- en: In order to submit to the AppStore, we need to build our application for distribution.
    Luckily, the Xcode project we initially created with `react-native init` has some
    of this preconfigured for us. First, we want to change our **Build Configuration**
    to **disable** features, such as the developer menu that we get while we are debugging.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提交到 AppStore，我们需要为分发构建我们的应用程序。幸运的是，我们最初使用 `react-native init` 创建的 Xcode 项目已经为我们预配置了一些内容。首先，我们想要将
    **构建配置** 改为 **禁用** 功能，例如我们在调试时获得的开发者菜单。
- en: 'Let''s configure the iOS release:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们配置 iOS 发布：
- en: In Xcode, navigate to **Product** | **Scheme** | **Edit Scheme…** and select
    **Run**, and under the **Info** tab change **Build Configuration** from **Debug**
    to **Release**:![Creating an iOS release in Xcode](img/B05162_08_02.jpg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Xcode 中，导航到 **产品** | **方案** | **编辑方案…** 并选择 **运行**，然后在 **信息** 选项卡下将 **构建配置**
    从 **调试** 更改为 **发布**：![在 Xcode 中创建 iOS 发布版本](img/B05162_08_02.jpg)
- en: Target the **iOS Device** instead of the simulator:![Creating an iOS release
    in Xcode](img/B05162_08_03.jpg)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将目标设置为 **iOS 设备** 而不是模拟器：![在 Xcode 中创建 iOS 发布版本](img/B05162_08_03.jpg)
- en: Finally, run the build from **Product** | **Archive**. The **Organizer** window
    will open a list of archives for your project. You can return to this screen later
    by selecting **Window** | **Organizer** from the top menu:![Creating an iOS release
    in Xcode](img/B05162_08_04.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，从 **产品** | **存档** 运行构建。**组织者** 窗口将打开一个包含您项目存档的列表。您可以通过从顶部菜单选择 **窗口** | **组织者**
    来稍后返回此屏幕：![在 Xcode 中创建 iOS 发布版本](img/B05162_08_04.jpg)
- en: In the future, when you create multiple releases, you should increase the version
    number found in **Targets** | **ReactNotes** | **General**. For the purposes of
    our first release, this can be disregarded:![Creating an iOS release in Xcode](img/B05162_08_05.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在未来，当您创建多个发布版本时，您应该在 **目标** | **ReactNotes** | **常规** 中增加版本号。对于我们的第一个发布版本，这可以忽略：![在
    Xcode 中创建 iOS 发布版本](img/B05162_08_05.jpg)
- en: Once your build has been archived, it is ready to be submitted to the Apple
    App Store. This book doesn't cover the application to the App Store but the next
    steps will be available on the Apple developer website at [https://developer.apple.com](https://developer.apple.com).
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦您的构建被存档，它就准备好提交到苹果应用商店。本书不涵盖应用商店的申请，但下一步将在苹果开发者网站上提供，网址为 [https://developer.apple.com](https://developer.apple.com)。
- en: Generating the Android APK
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成 Android APK
- en: 'Building the **Android Application Package** (**APK**) is a bit more cryptic
    than releasing for iOS. There are a few steps that we need to follow before we
    generate the static bundle, like we did in iOS:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 构建 **Android 应用程序包（APK**）比 iOS 发布要复杂一些。在生成静态包之前，我们需要遵循一些步骤，就像我们在 iOS 中做的那样：
- en: 'First, we need to generate a key that we can use to sign our application using
    `keytool`. Navigate to the `android/app` folder in a terminal and run this command:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要生成一个密钥，我们可以使用 `keytool` 来签署我们的应用程序。在终端中导航到 `android/app` 文件夹并运行以下命令：
- en: '[PRE3]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this is a private file and should never be shared with anyone. Keep
    it somewhere safe!
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意这是一个私有文件，永远不应该与任何人共享。请将其保存在安全的地方！
- en: 'Next we have a few configuration files to update. Up a level in the `android/
    directory` open `gradle.properties` and add these four lines, replacing `YOUR_KEY_PASSWORD`
    with the password you used for `keytool`:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要更新几个配置文件。在 `android/` 目录中向上一个级别打开 `gradle.properties` 并添加以下四行，将 `YOUR_KEY_PASSWORD`
    替换为您为 `keytool` 使用的密码：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the following in `android/app/build.gradle`:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `android/app/build.gradle` 中添加以下内容：
- en: '[PRE5]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we can generate the static bundle for Android. Create a new directory
    `android/app/src/main/assets/` and run this modified form of the `react-native
    bundle` command:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以为 Android 生成静态包。创建一个新的目录 `android/app/src/main/assets/` 并运行以下修改后的 `react-native
    bundle` 命令：
- en: '[PRE6]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This gives the following output:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE7]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Build the final APK in the `android/ directory` using the `gradle` command:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `gradle` 命令在 `android/` 目录下构建最终的 APK：
- en: '[PRE8]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you have set up the key signing correctly, you can test your release in
    the simulator or on a device with the following:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您已正确设置密钥签名，您可以使用以下方式在模拟器或设备上测试您的发布版本：
- en: '[PRE9]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With this, we have our final release APK (that can be found in `android/app/build/outputs/apk/app-release.apk`).
    Check out the launch checklist on Android developers for more information on the
    Play Store submission process at [https://developer.android.com/distribute/tools/launch-checklist.html](https://developer.android.com/distribute/tools/launch-checklist.html).
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有了这个，我们就有了最终的发布APK（可以在`android/app/build/outputs/apk/app-release.apk`中找到）。查看Android开发者上的启动清单，了解更多关于Play
    Store提交流程的信息，请访问[https://developer.android.com/distribute/tools/launch-checklist.html](https://developer.android.com/distribute/tools/launch-checklist.html)。
- en: Summary
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to build a release of our application in preparation
    for submitting it to the App Store or Google Play Store. iOS had a pre-configuration
    scheme in Xcode to disable the developer features. We then created an archive
    by targeting the iOS device. On Android, we created a private release key with
    **keytool** and built the release APK using the command line and `gradle`. It
    is important to follow up and test that both of these release builds work before
    submission, to decrease the likelihood of rejection.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何构建我们的应用程序的发布版本，以便提交到App Store或Google Play Store。iOS在Xcode中有一个预配置方案来禁用开发者功能。然后，我们通过针对iOS设备创建了一个存档。在Android上，我们使用**keytool**创建了一个私有发布密钥，并通过命令行和`gradle`构建了发布APK。在提交之前，跟进并测试这两个发布构建是否都能正常工作，以降低被拒绝的可能性。
- en: We hope that this book gave you the fundamentals you need to start creating
    mobile apps with React Native. Although React and React Native are still very
    early in terms of development, you can expect the core concepts discussed in this
    book to stay relevant for some time to come. When Android finally reaches feature
    parity with iOS, the doors will open for a lot more rapid development between
    the two platforms. Good luck, and we can't wait to see your apps out there on
    the App and Google Play Stores!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望这本书能给你提供开始使用React Native创建移动应用所需的基础知识。尽管React和React Native在开发方面还非常早期，但你可以期待这本书中讨论的核心概念在未来一段时间内仍然适用。当Android最终达到与iOS的功能对等时，两个平台之间将开启更多快速发展的机会。祝你好运，我们迫不及待地想看到你的应用在App和Google
    Play Stores上发布！
