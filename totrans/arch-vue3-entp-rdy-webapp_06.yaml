- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Building a Complete Pinterest Clone with GraphQL
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GraphQL构建完整的Pinterest克隆
- en: In the previous chapter, we explored GraphQL, GraphQL Apollo Server 2, queries,
    mutations, and how to integrate these technologies into your Vue.js 3 application.
    In addition, we learned how to utilize GraphQL to deliver scalable and high-performing
    applications. This chapter will demonstrate how to build a complete Pinterest
    clone with Vue 3 and GraphQL. You will utilize your knowledge of GraphQL to develop
    and deliver an enterprise application such as Pinterest using Vue 3 and GraphQL.
    Furthermore, you will learn how to create and manage your backend APIs using a
    popular headless **content management system** (**CMS**) called Strapi.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了GraphQL、GraphQL Apollo Server 2、查询、变更以及如何将这些技术集成到你的Vue.js 3应用程序中。此外，我们还学习了如何利用GraphQL来提供可扩展和性能高的应用程序。本章将演示如何使用Vue
    3和GraphQL构建一个完整的Pinterest克隆应用。你将利用你对GraphQL的知识来开发和交付一个如Pinterest这样的企业级应用程序，使用Vue
    3和GraphQL。此外，你将学习如何使用一个流行的无头**内容管理系统**（**CMS**）Strapi来创建和管理你的后端API。
- en: 'We will cover the following key topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下关键主题：
- en: An introduction to Strapi
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Strapi简介
- en: Scaffolding a Strapi project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搭建Strapi项目
- en: Building the collections
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建集合
- en: Building a Vue 3 Pinterest app
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建Vue 3 Pinterest应用
- en: Connecting the frontend and backend
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接前端和后端
- en: Testing the app
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试应用
- en: By the end of this chapter, you will have learned how to create a scalable and
    high-performing Pinterest clone application with GraphQL.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学会如何使用GraphQL创建一个可扩展和性能高的Pinterest克隆应用程序。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To start with this chapter, I recommend you read through [*Chapter 5*](B17237_05.xhtml#_idTextAnchor151),
    *An Introduction to GraphQL, Queries, Mutations, and RESTful APIs*, where we explored
    GraphQL, GraphQL Apollo Server 2, queries, mutations, and how to integrate these
    technologies into your Vue.js 3 application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我建议你阅读第[*5章*](B17237_05.xhtml#_idTextAnchor151)，《GraphQL、查询、变更和RESTful API简介》，在那里我们探讨了GraphQL、GraphQL
    Apollo Server 2、查询、变更以及如何将这些技术集成到你的Vue.js 3应用程序中。
- en: All the code files required for this chapter can be found at [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章所需的所有代码文件都可以在[https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6)找到。
- en: An introduction to Strapi
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Strapi简介
- en: Strapi is an open-source headless CMS based on Node.js that is used to create
    and manage different forms of content using a RESTful API and GraphQL.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Strapi是一个基于Node.js的开源无头CMS，用于通过RESTful API和GraphQL创建和管理不同形式的内容。
- en: Additionally, Strapi makes developing, deploying, and maintaining APIs faster
    and can be configured to consume content via APIs using any HTTP client or GraphQL-enabled
    frontend.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Strapi使开发、部署和维护API更快，并且可以配置为通过任何HTTP客户端或GraphQL启用的前端使用API来消费内容。
- en: These benefits are the reason we will use Strapi to create the backend of our
    Pinterest clone application, so we can focus more on the frontend without having
    to pay much attention to scaling the backend.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些优势是我们选择使用Strapi来创建Pinterest克隆应用程序后端的原因，这样我们就可以更多地关注前端，而不必过多关注后端的扩展。
- en: In the next section, we will work through scaffolding a Strapi project, building
    out all the collections we need in our project, and seeding out the Strapi account
    with dummy data.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将通过搭建Strapi项目，构建我们项目中需要的所有集合，并使用模拟数据初始化Strapi账户。
- en: Scaffolding a Strapi project
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搭建Strapi项目
- en: Starting a new Strapi backend project is very easy and works precisely like
    installing a new framework using the CLI tool.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个新的Strapi后端项目非常简单，就像使用CLI工具安装一个新的框架一样。
- en: 'We will scaffold a full-blown backend application by running any of these simple
    commands and testing it in our default browser:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下任何简单命令来搭建一个完整的后端应用程序，并在我们的默认浏览器中测试它：
- en: '[PRE0]bash'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE0]bash'
- en: npx create-Strapi-app strapi-pinterest-api --quickstart
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: npx create-Strapi-app strapi-pinterest-api --quickstart
- en: '# OR'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '# OR'
- en: yarn create straps-app strapi-pinterest-api --quickstart
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: yarn create straps-app strapi-pinterest-api --quickstart
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding command scaffolds a new Strapi API into the specified folder.
    Next, run the following command to build and deploy your newly created backend
    API with Strapi:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令在指定的文件夹中搭建了一个新的Strapi API。接下来，运行以下命令来使用Strapi构建和部署你新创建的后端API：
- en: '[PRE2]bash'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE2]bash'
- en: npm run build
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: npm run build
- en: npm run deploy
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: npm run deploy
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These preceding two commands should build your app and deploy it so you can
    easily test it out by typing the following URL (`localhost:`) in your default
    browser if it doesn’t open automatically.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个命令应该会构建并部署您的应用，这样您就可以通过在默认浏览器中输入以下URL（`localhost:`）来轻松测试它，如果它没有自动打开。
- en: Most importantly, the last command will also open a new tab with a page to register
    your new admin user of the system. Go ahead and fill out the form and click on
    the **LET’S START** button to create a new admin user.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，最后一个命令还会打开一个新标签页，显示一个页面，用于注册系统的新管理员用户。请继续填写表格并点击**开始**按钮来创建一个新的管理员用户。
- en: 'Here is what the page looks like:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 页面看起来如下：
- en: '![Figure 6.1 – The Strapi registration page](img/Figure_6.01_B17237.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – Strapi注册页面](img/Figure_6.01_B17237.jpg)'
- en: Figure 6.1 – The Strapi registration page
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – Strapi注册页面
- en: After signing up as the admin of the platform, you will have admin access to
    create different collections and set up different users and permission levels
    for your API.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在作为平台管理员注册后，您将拥有创建不同收藏夹以及为您的API设置不同用户和权限级别的管理员访问权限。
- en: In the next section, we will explore how to create different collections that
    will correspond to our Pinterest API resources. We will also set up different
    permission levels to limit what each user in our Pinterest application can access.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何创建不同的收藏夹，这些收藏夹将对应于我们的Pinterest API资源。我们还将设置不同的权限级别，以限制我们Pinterest应用程序中的每个用户可以访问的内容。
- en: Building the collections
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建收藏夹
- en: Strapi uses collections to denote resources; for example, if your application
    is a news application and you want to create a backend that will process posts,
    comments, and so on, you will create it as a Posts, Comments collection in Strapi.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Strapi使用收藏夹来表示资源；例如，如果您的应用程序是一个新闻应用程序，并且您想要创建一个后端来处理帖子、评论等，您将在Strapi中创建为帖子、评论收藏夹。
- en: 'However, since we are building a Pinterest clone, we will create the following
    collections: **Photo**(**Pin**), **Board**, and **User**, and each of these collections
    will contain their respective fields, as demonstrated in the following steps.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于我们正在构建一个Pinterest克隆版，我们将创建以下收藏夹：**照片**（**图钉**）、**版块**和**用户**，并且每个收藏夹都将包含它们各自的字段，如下面的步骤所示。
- en: To demonstrate, we will create a simple Photo(Pin) collection that will store
    the details of a specific photo in our app. In Pinterest, it is called **PIN**,
    but we will prefer to call it as **PHOTO** since we started with that in the previous
    chapters.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，我们将创建一个简单的照片（图钉）收藏夹，用于存储我们应用中特定照片的详细信息。在Pinterest中，它被称为**PIN**，但我们将更喜欢称之为**PHOTO**，因为我们从上一章开始就是这样称呼的。
- en: Now to store the details of our photo, we will create a new `photos` in the
    Strapi dashboard.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在为了存储我们照片的详细信息，我们将在Strapi仪表板中创建一个新的`photos`。
- en: 'The `photos` collection will have the following fields: **title**, **url**,
    **user_id**, and **description**. These fields are imaginative and can change
    as we process them into the book:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`photos`收藏夹将包含以下字段：**标题**、**url**、**user_id**和**描述**。这些字段是富有想象力的，并且在我们将其处理成书籍的过程中可能会发生变化：'
- en: To create our first `photos` as the display name.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建我们的第一个`photos`作为显示名称。
- en: '![Figure 6.2 – The Strapi collection dashboard](img/Figure_6.02_B17237.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2 – Strapi收藏夹仪表板](img/Figure_6.02_B17237.jpg)'
- en: Figure 6.2 – The Strapi collection dashboard
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – Strapi收藏夹仪表板
- en: 'Next, choose the data type for your field, as shown in the following screenshot:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择您字段的类型，如下面的屏幕截图所示：
- en: '![Figure 6.3 – The Strapi Photos collection](img/Figure_6.03_B17237.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图6.3 – Strapi照片收藏夹](img/Figure_6.03_B17237.jpg)'
- en: Figure 6.3 – The Strapi Photos collection
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – Strapi照片收藏夹
- en: 'Next, enter the name of the field for your **Photos** collection and click
    on **+ Add another field** to enter another field:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，输入您的**照片**收藏夹的字段名称，然后点击**+ 添加另一个字段**来输入另一个字段：
- en: '![Figure 6.4 – Strapi | Add new Text field](img/Figure_6.04_B17237.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图6.4 – Strapi | 添加新的文本字段](img/Figure_6.04_B17237.jpg)'
- en: Figure 6.4 – Strapi | Add new Text field
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – Strapi | 添加新的文本字段
- en: Repeat the process until you exhaust the list of fields for your collection
    and click on **Finish**.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复此过程，直到耗尽您收藏夹的字段列表，然后点击**完成**。
- en: '![Figure 6.5 – The Strapi Photos dashboard](img/Figure_6.05_B17237.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5 – Strapi照片仪表板](img/Figure_6.05_B17237.jpg)'
- en: Figure 6.5 – The Strapi Photos dashboard
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – Strapi照片仪表板
- en: 'Lastly, click on **Save** and repeat the process for **Users**, **Boards**,
    and other collections you might want to add. You should have all the collections
    listed, as shown here:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击**保存**，并重复为**用户**、**版块**和其他你可能想要添加的集合执行此过程。你应该会看到所有集合都列在这里，如图所示：
- en: '![Figure 6.6 – Strapi | User fields](img/Figure_6.06_B17237.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – Strapi | 用户字段](img/Figure_6.06_B17237.jpg)'
- en: Figure 6.6 – Strapi | User fields
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – Strapi | 用户字段
- en: Important note
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You can learn more about Strapi collections here – [https://docs.strapi.io/user-docs/latest/content-types-builder/introduction-to-content-types-builder.html](https://docs.strapi.io/user-docs/latest/content-types-builder/introduction-to-content-types-builder.html)
    – or watch this video – [https://www.youtube.com/watch?v=bStlyMB0NEw](https://www.youtube.com/watch?v=bStlyMB0NEw)
    – to see how we created all the collections we will use in the project.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里了解更多关于 Strapi 集合的信息 – [https://docs.strapi.io/user-docs/latest/content-types-builder/introduction-to-content-types-builder.html](https://docs.strapi.io/user-docs/latest/content-types-builder/introduction-to-content-types-builder.html)
    – 或者观看这个视频 – [https://www.youtube.com/watch?v=bStlyMB0NEw](https://www.youtube.com/watch?v=bStlyMB0NEw)
    – 了解我们如何创建项目中将要使用的所有集合。
- en: In the next section, we will explore how to seed fake data into the Strapi collection
    to enable us to display some photos before we start adding new ones.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何将假数据填充到 Strapi 集合中，以便我们在开始添加新照片之前显示一些照片。
- en: Seeding data
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加数据
- en: After successfully creating the collections, we will seed some data so that
    we have plenty of photos, boards, and users to work with.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功创建集合后，我们将填充一些数据，以便我们有足够的照片、版块和用户来工作。
- en: 'Take the following steps to seed some data into the collections we have created.
    First, we will seed some photo information, including the photos, and create a
    board that will house some of these photos and a user who is taking these actions:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤将一些数据填充到我们创建的集合中。首先，我们将填充一些照片信息，包括照片，并创建一个将存放一些这些照片和执行这些动作的用户：
- en: 'To seed dummy data for our Pinterest project, we will click on each of the
    collections we have created and click **+ Add New Users**, as shown in this screenshot:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为我们的 Pinterest 项目添加虚拟数据，我们将点击我们创建的每个集合，并点击**+ 添加新用户**，如图所示：
- en: '![Figure 6.7 – Strapi | Add New Users](img/Figure_6.07_B17237.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – Strapi | 添加新用户](img/Figure_6.07_B17237.jpg)'
- en: Figure 6.7 – Strapi | Add New Users
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – Strapi | 添加新用户
- en: 'Next, fill in the information needed to create a single user of our Pinterest
    application and click on **Save**, as shown in this screenshot:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，填写创建 Pinterest 应用单个用户所需的信息，并点击**保存**，如图所示：
- en: '![Figure 6.8 – Strapi | Create an entry](img/Figure_6.08_B17237.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – Strapi | 创建条目](img/Figure_6.08_B17237.jpg)'
- en: Figure 6.8 – Strapi | Create an entry
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – Strapi | 创建条目
- en: 'Click on **Publish**, and you should have your new user added to the **Users**
    collection, as seen here:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**发布**，你应该会看到你的新用户已添加到**用户**集合中，如图所示：
- en: '![Figure 6.9 – List all users](img/Figure_6.09_B17237.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9 – 列出所有用户](img/Figure_6.09_B17237.jpg)'
- en: Figure 6.9 – List all users
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – 列出所有用户
- en: Create more fake data by repeating the process for all other collections, such
    as **Photos** and **Users**, for testing. Later in the next section, we will learn
    how to programmatically create data in the Strapi collection and build our Pinterest
    clone using Vue 3.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过重复对所有其他集合（如**照片**和**用户**）进行相同的过程来创建更多虚拟数据，以进行测试。在下一节的后面，我们将学习如何在 Strapi 集合中编程创建数据，并使用
    Vue 3 构建我们的 Pinterest 克隆应用。
- en: Building a Vue 3 Pinterest app
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 Vue 3 Pinterest 应用
- en: In the previous section, we explored creating the backend of our Pinterest application
    using Strapi. In this section, we will create the frontend using Vue 3.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们探讨了使用 Strapi 创建 Pinterest 应用的后端。在本节中，我们将使用 Vue 3 创建前端。
- en: However, it is important to note that since this is a demo, we will only abstract
    the slightest part of Pinterest to represent the application. Developing the full
    Pinterest application will require effort, teams, and resources.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，需要注意的是，由于这是一个演示，我们只会抽象出 Pinterest 的极小部分来表示应用。开发完整的 Pinterest 应用需要努力、团队和资源。
- en: We will continue by using the official project we created for this book. In
    the previous chapters, we added internationalization, structured the project,
    and built out the login form, and we will continue by including other necessary
    files to make up a full-blown Pinterest clone application.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用为本书创建的官方项目。在前面的章节中，我们添加了国际化、结构化项目并构建了登录表单，我们将继续添加其他必要的文件，以形成一个完整的 Pinterest
    克隆应用。
- en: Most importantly, I will be using Tailwind CSS as my CSS framework for this
    project, and since it’s beyond the scope of this book, you can visit the official
    documentation to set it up with Vue 3.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，我将使用 Tailwind CSS 作为这个项目的 CSS 框架，由于它超出了本书的范围，您可以访问官方文档以使用 Vue 3 进行设置。
- en: You can clone the project from this repository – [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications)
    – to jump right in.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从这个仓库克隆项目 – [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications)
    – 直接开始。
- en: 'Here is a demo of what we are building:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们正在构建的演示：
- en: '![Figure 6.10 – Pinterest preview](img/Figure_6.10_B17237.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.10 – Pinterest 预览](img/Figure_6.10_B17237.jpg)'
- en: Figure 6.10 – Pinterest preview
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10 – Pinterest 预览
- en: 'We have everything separated properly and structured in a scalable format for
    our application. The following shows how we structure the `HomeOverview` component
    that represents the home page:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将所有内容正确地分离并按可扩展的格式进行了结构化，以适应我们的应用程序。以下展示了我们如何结构化代表主页的 `HomeOverview` 组件：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It contains the `Header` and `Cards` components. We could use `alias` to import
    these components making the import URL shorter, but I preferred to show you the
    relative path.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含 `Header` 和 `Cards` 组件。我们可以使用 `alias` 来导入这些组件，使导入的 URL 更短，但我更喜欢向您展示相对路径。
- en: In the next section, we will start building out the frontend project by creating
    the `Cards` component and implementing the logic to display all the photos we
    have created previously.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将通过创建 `Cards` 组件并实现显示我们之前创建的所有照片的逻辑来开始构建前端项目。
- en: Generating the Cards component
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成 Cards 组件
- en: 'Let us take a look at the `Cards` component first to explore the content in
    it. The `Cards` component houses the logic behind displaying the photo we have
    created and stored in our Strapi instance, and you can see this in the following
    code snippet:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看 `Cards` 组件，以探索其中的内容。`Cards` 组件包含了在我们 Strapi 实例中创建和存储的图片显示逻辑，您可以在下面的代码片段中看到这一点：
- en: '[PRE5]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `Cards` component is where the magic happens, as it represents the collections
    of each Photo (Pin) in the application.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cards` 组件是魔法发生的地方，因为它代表了应用中每个照片（Pin）的集合。'
- en: 'Here is a preview of the code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码的预览：
- en: '![Figure 6.11 – Cards preview](img/Figure_6.11_B17237.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.11 – 卡片预览](img/Figure_6.11_B17237.jpg)'
- en: Figure 6.11 – Cards preview
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11 – 卡片预览
- en: Firstly, we display the cards based on their sizes (smaller, small, medium,
    and large). This helps us to get the same previews as Pinterest.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们根据卡片的大小（小、小、中、大）来显示卡片。这有助于我们获得与 Pinterest 相同的预览效果。
- en: 'You can clone the full frontend code and the Strapi backend from the `chapter
    6` branch in the repository here: [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从这个仓库的 `第 6 章` 分支克隆完整的 frontend 代码和 Strapi 后端 – [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6)。
- en: In the previous section, we demonstrated how to build a simple Pinterest clone
    by creating different `Card` components to represent the Pin information. In the
    next section, we will learn how to connect our Strapi backend to the Pinterest
    frontend we have created using Vue 3.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们展示了如何通过创建不同的 `Card` 组件来代表 Pin 信息，从而构建一个简单的 Pinterest 复制品。在下一节中，我们将学习如何将我们的
    Strapi 后端连接到我们使用 Vue 3 创建的 Pinterest 前端。
- en: Connecting the frontend and backend
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接前端和后端
- en: The most interesting part is how we structure our API requests to accommodate
    maintainability and easy adaptability, following the best practices we have learned
    from the previous chapters.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最有趣的部分是我们如何结构化我们的 API 请求，以适应可维护性和易于适应性，遵循我们从上一章中学到的最佳实践。
- en: 'The following screenshot shows our folder structure containing the GraphQL
    endpoints according to the features we currently have in our application and in
    the Strapi backend we developed for this project:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们的文件夹结构，其中包含根据我们当前在应用程序和为该项目开发的 Strapi 后端中拥有的功能构建的 GraphQL 端点：
- en: '![Figure 6.12 – A screenshot of the new folder structure with GraphQL and Strapi](img/Figure_6.12_B17237.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.12 – 新的文件夹结构截图，包含 GraphQL 和 Strapi](img/Figure_6.12_B17237.jpg)'
- en: Figure 6.12 – A screenshot of the new folder structure with GraphQL and Strapi
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – 带有 GraphQL 和 Strapi 的新文件夹结构的截图
- en: In the `graphql` folder, we have defined three folders, namely `auth`, `photos`,
    and `users`, which represent the features our current project will have. Let’s
    look at what these folders contain.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `graphql` 文件夹中，我们定义了三个文件夹，即 `auth`、`photos` 和 `users`，它们代表我们当前项目将拥有的功能。让我们看看这些文件夹包含什么。
- en: The auth folder
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`auth` 文件夹'
- en: The `auth` folder contains only a single mutation which will handle all the
    authentication and authorization functionalities. It will contain mutations, such
    as `register`, `login`, `forgotPassword`, `sendForgotPasswordEmail`, and so on.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`auth` 文件夹只包含一个突变，它将处理所有身份验证和授权功能。它将包含诸如 `register`、`login`、`forgotPassword`、`sendForgotPasswordEmail`
    等突变。'
- en: The photos folder
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`photos` 文件夹'
- en: The `photos` folder is the most complex because it contains all the functionalities
    of the Pinterest application demo. It contains both mutations and queries, which
    is why we have created different files for it.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`photos` 文件夹是最复杂的，因为它包含 Pinterest 应用程序演示中所有功能。它包含突变和查询，这就是为什么我们为它创建了不同的文件。'
- en: Some of the mutations are `createPin`, `createBoard`, `updatePin`, `updateBoard`,
    `deletePin`, and so on. These mutations send different actions to our Strapi backend
    server to perform different actions.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件中找到的一些突变包括 `createPin`、`createBoard`、`updatePin`、`updateBoard`、`deletePin`
    等。这些突变将不同的操作发送到我们的 Strapi 后端服务器以执行不同的操作。
- en: Additionally, we have the `queries.js` file, which contains all the queries
    to retrieve the different types of data from our Strapi backend server.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还有一个 `queries.js` 文件，它包含从我们的 Strapi 后端服务器检索不同类型数据的所有查询。
- en: Some of the queries found in this file include `getPin`, `getBoard`, `getBoards`,
    `getPins`, `getUserPins`, `getUserBoards`, and so on.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件中找到的一些查询包括 `getPin`、`getBoard`、`getBoards`、`getPins`、`getUserPins`、`getUserBoards`
    等。
- en: The users folder
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户文件夹
- en: The `users` folder contains all the user-related functionalities of the Pinterest
    application demo. It contains both mutations and queries.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`users` 文件夹包含 Pinterest 应用程序演示中所有与用户相关的功能。它包含突变和查询。'
- en: Some of the mutations are `createUser`, `updateUser`, `deleteUser`, and so on.
    These mutations send different actions to our Strapi backend server to perform
    different user-related actions.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一些突变包括 `createUser`、`updateUser`、`deleteUser` 等。这些突变将不同的操作发送到我们的 Strapi 后端服务器以执行不同的用户相关操作。
- en: Additionally, we have the `queries.js` file, which contains all the queries
    to retrieve the different types of user-related information from our Strapi backend
    server.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还有一个 `queries.js` 文件，它包含从我们的 Strapi 后端服务器检索不同类型用户相关信息的所有查询。
- en: Some of the queries found in this file include `getUser`, `getUsers`, and so
    on.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件中找到的一些查询包括 `getUser`、`getUsers` 等。
- en: Implementing a login example with GraphQL
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 GraphQL 实现登录示例
- en: The code snippet for each of the methods inside each of the mutations and queries
    can be found on the official GitHub repository for the respective chapter.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 每个突变和查询中每个方法的相关代码片段可以在相应章节的官方 GitHub 仓库中找到。
- en: However, the following is an example of how to log in to our application using
    the GraphQL mutation we have defined inside the `auth` folder.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，以下是如何使用我们定义在 `auth` 文件夹内的 GraphQL 突变登录我们应用程序的示例。
- en: 'First, we import the respective mutation we want to use inside any component
    or page, as shown here:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入任何组件或页面中想要使用的相应突变，如下所示：
- en: '[PRE6]js'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE6]js'
- en: import { LOGIN_USER } from '../../graphql';
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: import { LOGIN_USER } from '../../graphql';
- en: '[PRE7]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: const login = () => {
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: const login = () => {
- en: const user = loginUser();
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: const user = loginUser();
- en: if (user) {
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: if (user) {
- en: // Save State and Redirect to Dashboard
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: // 保存状态并重定向到仪表板
- en: logged.value = true;
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: logged.value = true;
- en: '}'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '[PRE8]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: import { useMutation } from '@vue/apollo-composable';
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: import { useMutation } from '@vue/apollo-composable';
- en: 'const { mutate: loginUser } = useMutation(LOGIN_USER, () => ({'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 'const { mutate: loginUser } = useMutation(LOGIN_USER, () => ({'
- en: 'variables: {'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 变量：{
- en: 'email: email,'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 邮箱：邮箱，
- en: 'password: password,'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 密码：密码，
- en: remember,
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: remember,
- en: '},'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '}));'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '}));'
- en: '[PRE9]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'variables: {'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 变量：{
- en: 'email: email,'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 邮箱：邮箱，
- en: 'password: password,'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 密码：密码，
- en: remember,
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: remember,
- en: '},'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '[PRE10]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: export const GET_PINS = gql`
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: export const GET_PINS = gql`
- en: 'mutation getPins($size: Int, $skip: Int, $filters:'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'mutation getPins($size: Int, $skip: Int, $filters:'
- en: PinFiltersInput) {
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PinFiltersInput) {
- en: 'getPins(size: $size, skip: $skip,'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'getPins(size: $size, skip: $skip,'
- en: 'filters: $filters) {'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'filters: $filters) {'
- en: id
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: id
- en: title
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 标题
- en: url
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: url
- en: '}'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '`;'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`;'
- en: '[PRE11]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: <script setup>
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <script setup>
- en: import { useQuery } from '@vue/apollo-composable';
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: import { useQuery } from '@vue/apollo-composable';
- en: import { GET_PINS } from '../../graphql/photos/queries';
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: import { GET_PINS } from '../../graphql/photos/queries';
- en: '[PRE12]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: const getBoardPins = () => {
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: const getBoardPins = () => {
- en: return getPins();
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return getPins();
- en: '};'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '};'
- en: '[PRE13]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'const { query: getPins } = useQuery(GET_PINS, () => ({'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'const { query: getPins } = useQuery(GET_PINS, () => ({'
- en: 'variables: {'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'variables: {'
- en: 'size: 20,'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'size: 20,'
- en: 'skip: 0,'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'skip: 0,'
- en: 'filters: {'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'filters: {'
- en: 'boardId: board.id,'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'boardId: board.id,'
- en: '},'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: '}));'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}));'
- en: '```'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: This is a typical example of how we can implement GraphQL queries throughout
    the code base for our Pinterest demo application.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何在 Pinterest 示例应用程序的代码库中实现 GraphQL 查询的典型示例。
- en: If you followed along from each chapter, you will have cloned the repository
    from the URL provided in the previous section, set it up locally, and seeded some
    data into the Strapi backend server.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您跟随着每一章的内容，您将已经从上一节提供的 URL 中克隆了仓库，并在本地设置了它，并将一些数据种入 Strapi 后端服务器。
- en: 'You should be presented with a Pinterest-like demo application, as shown here:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到一个类似 Pinterest 的演示应用程序，如下所示：
- en: '![Figure 6.13 – Final Pinterest preview](img/Figure_6.13_B17237.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.13 – 最终 Pinterest 预览](img/Figure_6.13_B17237.jpg)'
- en: Figure 6.13 – Final Pinterest preview
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13 – 最终 Pinterest 预览
- en: Important note
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The images might differ based on the data you seed into your Strapi backend
    database. However, the repository contains instructions on getting the dummy data
    and seeding them into your Strapi backend.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图像可能会根据您种入 Strapi 后端数据库中的数据而有所不同。然而，仓库中包含了获取虚拟数据并将其种入您的 Strapi 后端的方法说明。
- en: 'You can check out the complete implement[ation in the official GitHub repository
    here: https://github.com/PacktPublishing/Architecting-Vue.js-3-Ent](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6)erprise-Ready-Web-Applications/tree/chapter-6\.
    Additionally, you can learn how to implement the same API pattern with a RESTful
    API using the repository pattern here: [https://medium.com/backenders-club/consuming-apis-using-the-repository-pattern-in-vue-js-e64671b27b09](https://medium.com/backenders-club/consuming-apis-using-the-repository-pattern-in-vue-js-e64671b27b09).'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方 GitHub 仓库中查看完整的实现[方案：https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6)。此外，您还可以在此仓库中学习如何使用仓库模式通过
    RESTful API 实现相同的 API 模式：[https://medium.com/backenders-club/consuming-apis-using-the-repository-pattern-in-vue-js-e64671b27b09](https://medium.com/backenders-club/consuming-apis-using-the-repository-pattern-in-vue-js-e64671b27b09)。
- en: In conclusion, we created the frontend of our Pinterest clone using Vue 3 and
    the Composition API; we also created the backend using a very popular headless
    CMS called Strapi to store our data. Lastly, we integrated this into a single
    enterprise application using GraphQL.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，我们使用 Vue 3 和 Composition API 创建了 Pinterest 克隆的前端；我们还使用一个非常流行的无头 CMS（Strapi）来存储我们的数据，并使用它构建了后端。最后，我们使用
    GraphQL 将其集成到一个单一的企业应用程序中。
- en: Summary
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter dived deeper into how to utilize GraphQL to deliver scalable and
    high-performing applications and how to build a complete Pinterest clone with
    Vue 3 and GraphQL. In addition, we utilized the knowledge of GraphQL to develop
    and deliver enterprise applications such as Pinterest using Vue 3 and GraphQL.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨了如何利用 GraphQL 提供可扩展和高性能的应用程序，以及如何使用 Vue 3 和 GraphQL 构建一个完整的 Pinterest
    克隆。此外，我们还利用 GraphQL 的知识开发并交付了如 Pinterest 这样的企业应用程序。
- en: We explored Strapi – the headless CMS that manages our backend APIs and data,
    and we also scaffolded a new Strapi project, learned how to create Strapi collections,
    and also seeded some dummy data to ease the development time.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了 Strapi – 管理我们后端 API 和数据的无头 CMS，我们还搭建了一个新的 Strapi 项目，学习了如何创建 Strapi 集合，并也种入了一些虚拟数据以简化开发过程。
- en: We also covered in detail how to integrate the Strapi CMS and easily spin up
    a backend server for our Pinterest demo application using GraphQL into Vue 3.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还详细介绍了如何集成 Strapi CMS，并使用 GraphQL 在 Vue 3 中轻松启动我们的 Pinterest 示例应用程序的后端服务器。
- en: In the next chapter, you will learn about the nitty-gritty involved in dockerizing
    your Vue 3 project. In addition, you will learn about the best practices and industry
    standards for dockerizing and deploying an enterprise Vue.js 3 web application.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何将您的 Vue 3 项目 docker 化的细节。此外，您还将了解 docker 化和部署企业级 Vue.js 3 网络应用程序的最佳实践和行业标准。
- en: This chapter will also go more practical by dockerizing a full-stack web application
    and deploying the container to a cloud platform using Docker Compose. Finally,
    you will learn how to handle larger projects with Docker Compose.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还将通过将全栈Web应用Docker化并在使用Docker Compose的云平台上部署容器来更加实用。最后，你将学习如何使用Docker Compose处理更大的项目。
- en: 'Part 3: Vue.js 3 Enterprise Tools'
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3部分：Vue.js 3企业工具
- en: In this part, you will learn about DevOps and Docker. You will containerize
    your web app and deploy a container to Google Cloud Run using CLI tools. Then,
    you will leverage advanced CI techniques to build a container-based CI environment,
    leveraging a multi-stage Dockerfile.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分，你将学习DevOps和Docker。你将使用CLI工具将你的Web应用容器化，并将容器部署到Google Cloud Run。然后，你将利用高级CI技术构建基于容器的CI环境，利用多阶段Dockerfile。
- en: This part will also explore GraphQL and how it can be implemented and integrated
    with Vue.js 3 to deliver an enterprise-ready web application. In addition, we
    will build an enterprise Pinterest clone to demonstrate our knowledge of GraphQL
    at an enterprise level.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分还将探讨GraphQL以及它是如何实现并与Vue.js 3集成，以提供企业级Web应用。此外，我们将构建一个企业级Pinterest克隆来展示我们在企业级GraphQL知识方面的理解。
- en: 'This part comprises the following chapters:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包括以下章节：
- en: '[*Chapter 5*](B17237_05.xhtml#_idTextAnchor151), *An* [*Introduction to GraphQL,
    Queries, Mutations, and RESTful API*](https://epic.packtpub.services/index.php?module=oss_Chapters&action=DetailView&record=77e2136f-e753-5cdf-9030-61d6c9075a4b)'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B17237_05.xhtml#_idTextAnchor151), *《GraphQL、查询、突变和RESTful API入门》*([https://epic.packtpub.services/index.php?module=oss_Chapters&action=DetailView&record=77e2136f-e753-5cdf-9030-61d6c9075a4b](https://epic.packtpub.services/index.php?module=oss_Chapters&action=DetailView&record=77e2136f-e753-5cdf-9030-61d6c9075a4b))'
- en: '[*Chapter 6*](B17237_06.xhtml#_idTextAnchor192), *Building a Complete Pinterest
    Clone with GraphQL*'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B17237_06.xhtml#_idTextAnchor192), *使用GraphQL构建完整的Pinterest克隆*'
- en: '[*Chapter 7*](B17237_07.xhtml#_idTextAnchor230), *Dockerizing a Vue 3 App*'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B17237_07.xhtml#_idTextAnchor230), *将Vue 3应用Docker化*'
