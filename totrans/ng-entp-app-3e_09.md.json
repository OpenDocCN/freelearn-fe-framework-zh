["```js\n    projects/stage11 \n    ```", "```js\n    projects/stage12 \n    ```", "```js\n    npx ng build stage12 \n    ```", "```js\n    **src/app/user/user/user.****resolve****.****ts**\n    import { inject } from '@angular/core'\n    import { ActivatedRouteSnapshot, ResolveFn } from '@angular/router'\n    import { catchError, map } from 'rxjs/operators'\n    import { transformError } from '../../common/common'\n    import { User } from './user'\n    import { UserService } from './user.service'\n    export const userResolver: ResolveFn<User> = (route: ActivatedRouteSnapshot) => {\n      return inject(UserService)\n        .getUser(route.paramMap.get('userId'))\n        .pipe(map(User.Build), catchError(transformError))\n    } \n    ```", "```js\n    **src/app/user/user-routing.****module****.****ts**\n    ...\n    {\n        path: 'profile/:userId',\n        component: ProfileComponent,\n        resolve: {\n          user: userResolver,\n        },\n        canActivate: [authGuard],\n      },\n      ... \n    ```", "```js\n    **src/app/user/profile/profile.****component****.****ts**\n    ...\n      constructor(\n        ...\n        **private****route****:** **ActivatedRoute**\n      ) {\n        super()\n      }\n      **private****readonly** **destroyRef =** **inject****(****DestroyRef****)**\n\n      ngOnInit() {\n        this.formGroup = this.buildForm()\n        if (**this****.****route****.****snapshot****.****data****[**'**user**'**]**) {\n          **this****.****patchUser****(****this****.****route****.****snapshot****.****data****[**'**user**'**]**)\n        } else {\n           combineLatest(\n            [this.loadFromCache(), \n             this.authService.currentUser$]\n           )\n          .pipe(\n            takeUntilDestroyed(this.destroyRef),\n            filter(\n              ([cachedUser, me]) => \n                cachedUser != null || me != null\n            ),\n            tap(\n              ([cachedUser, me]) => \n               this.patchUser(cachedUser || me)\n            )\n          )\n          .subscribe()\n        }\n      } \n    ```", "```js\n    **src/app/user/view-user/view-user.****component****.****ts**\n    ...\n    export class ViewUserComponent \n      implements OnInit, OnChanges, OnDestroy {\n      private readonly route = inject(ActivatedRoute)\n      private readonly router = inject(Router)\n      private routerEventsSubscription?: Subscription\n      ...\n      ngOnInit() {\n        // assignment on initial render\n        this.assignUserFromRoute()\n        this.routerEventsSubscription = \n          this.router.events.subscribe((event) => {\n          // assignment on subsequent renders\n          if (event instanceof NavigationEnd) {\n            this.assignUserFromRoute()\n          }\n        })\n      }\n      private assignUserFromRoute() {\n        if (this.route.snapshot.data['user']) {\n          this.currentUser = this.route.snapshot.data['user']\n        }\n      }\n      ngOnDestroy(): void {\n        this.routerEventsSubscription?.unsubscribe()\n      }\n      ...\n    }} \n    ```", "```js\n    **src/app/manager/user-management/user-management.****component****.****ts**\n      template: `\n        <div class=\"h-pad\">\n          <router-outlet name=\"master\"></router-outlet>\n          <div style=\"min-height: 10px\"></div>\n          <router-outlet name=\"detail\"></router-outlet>\n        </div>\n      ` \n    ```", "```js\n    **src/app/manager/manager-routing.****module****.****ts**\n      ...\n        {\n          path: 'users',\n          component: UserManagementComponent,\n          children: [\n            { \n              path: '', component: UserTableComponent, \n               outlet: 'master' \n            },\n            {\n              path: 'user',\n              component: ViewUserComponent,\n              outlet: 'detail',\n              resolve: {\n                user: userResolver,\n              },\n            },\n          ],\n          canActivate: [authGuard],\n          canActivateChild: [authGuard],\n          data: {\n            expectedRole: Role.Manager,\n          },\n        },\n    ... \n    ```", "```js\n    **src/app/manager/user-table/user-table.component.html**\n    <button\n      mat-icon-button\n      [routerLink]=\"[\n        '../users',\n        { outlets: { detail: ['user', { userId: row._id }] } }\n      ]\"\n      [skipLocationChange]=\"true\">\n      <mat-icon>visibility</mat-icon>\n    </button> \n    ```", "```js\n    ['../users', { \n       outlets: { \n         master: [''], detail: ['user', {userId: row.id}] \n       } \n    }], \n    ```", "```js\n    **src/app/user/user/user.****service****.****ts**\n    ...\n    export interface IUsers {\n      data: IUser[]\n      total: number\n    } \n    ```", "```js\n    **src/app/user/user/user.****service****.****ts**\n    ...\n    export interface IUserService {\n      getUser(id: string): Observable<IUser>\n      updateUser(id: string, user: IUser): Observable<IUser>\n      **getUsers****(****pageSize****:** **number****,** **searchText****:** **string****,** \n        **pagesToSkip****:** **number****):** **Observable****<****IUsers****>**\n    }\n    export class UserService implements IUserService {\n    ... \n    ```", "```js\n    **src/app/user/user/user.****service****.****ts**\n    ...\n    getUsers(\n        pageSize: number,\n        searchText = '',\n        pagesToSkip = 0,\n        sortColumn = '',\n        sortDirection: '' | 'asc' | 'desc' = 'asc'\n      ): Observable<IUsers> {\n        const recordsToSkip = pageSize * pagesToSkip\n        if (sortColumn) {\n          sortColumn =\n            sortDirection === 'desc' ? `-${sortColumn}` : sortColumn\n        }\n        return this.httpClient.get<IUsers>(\n          `${environment.baseUrl}/v2/users`, { \n            params: {\n              filter: searchText,\n              skip: recordsToSkip.toString(),\n              limit: pageSize.toString(),\n              sortKey: sortColumn,\n            },\n          })\n        }\n    ... \n    ```", "```js\n    **src/app/manager/user-table/user-table.****component****.****ts**\n    ...\n    @Component({\n      selector: 'app-user-table',\n      templateUrl: './user-table.component.html',\n      styleUrls: ['./user-table.component.css'],\n    })\n    export class UserTableComponent implements AfterViewInit {\n      @ViewChild(MatPaginator) paginator!: MatPaginator\n      @ViewChild(MatSort) sort!: MatSort\n      private skipLoading = false\n      private readonly userService = inject(UserService)\n      private readonly router = inject(Router)\n      private readonly activatedRoute = inject(ActivatedRoute)\n      private readonly destroyRef = inject(DestroyRef)\n      readonly refresh$ = new Subject<void>()\n      readonly demoViewDetailsColumn = signal(false)\n      items$!: Observable<Iuser[]>\n      displayedColumns = computed(() => [\n        'name',\n        'email',\n        'role',\n        ...(this.demoViewDetailsColumn() ? ['_id'] : []),\n      ])\n      isLoading = true\n      resultsLength = 0\n      hasError = false\n      errorText = ''\n      selectedRow?: Iuser\n      search = new FormControl<string>('', OptionalTextValidation)\n      resetPage(stayOnPage = false) {\n        if (!stayOnPage) {\n          this.paginator.firstPage()\n        }\n        **// this.outletCloser.closeOutlet('detail')**\n        this.router.navigate([\n          '../users',\n          { outlets: { detail: null } }\n        ], {\n          skipLocationChange: true,\n          relativeTo: this.activatedRoute,\n        })\n        this.selectedRow = undefined\n      }\n      showDetail(userId: string) {\n        this.router.navigate([\n          '../users',\n          { outlets: { detail: ['user', { userId: userId }] }\n        }],\n          {\n            skipLocationChange: true,\n            relativeTo: this.activatedRoute,\n          }\n        )\n      }  \n      ngAfterViewInit() {\n        this.sort.sortChange\n          .pipe(\n            tap(() => this.resetPage()),\n            takeUntilDestroyed(this.destroyRef)\n          )\n          .subscribe()\n        this.paginator.page\n          .pipe(\n            tap(() => this.resetPage(true)),\n            takeUntilDestroyed(this.destroyRef)\n          )\n          .subscribe()\n        if (this.skipLoading) {\n          return\n        }     \n        setTimeout(() => {\n          **this****.****items$** **=** **merge****(**\n            **this****.****refresh$****,**\n            **this****.****sort****.****sortChange****,**\n            **this****.****paginator****.****page****,**\n            **this****.****search****.****valueChanges****.****pipe****(**\n              **debounceTime****(****1000****),**\n              **tap****(****() =>****this****.****resetPage****())**\n            **)**\n          **).****pipe****(**\n            **startWith****({}),**\n            **switchMap****(****() =>** **{**\n              **this****.****isLoading** **=** **true**\n              **return****this****.****userService****.****getUsers****(**\n                **this****.****paginator****.****pageSize****,**\n                **this****.****search****.****value****as****string****,**\n                **this****.****paginator****.****pageIndex****,**\n                **this****.****sort****.****active****,**\n                **this****.****sort****.****direction**\n              **)**\n            **}),**\n            **map****(****(****results****: { total:** **number****; data: IUser[] }****) =>** **{**\n              **this****.****isLoading** **=** **false**\n              **this****.****hasError** **=** **false**\n              **this****.****resultsLength** **= results.****total**\n              **return** **results.****data**\n            **}),**\n            **catchError****(****(****err****) =>** **{**\n              **this****.****isLoading** **=** **false**\n              **this****.****hasError** **=** **true**\n              **this****.****errorText** **= err**\n              **return****of****([])**\n            **}),**\n            **takeUntilDestroyed****(****this****.****destroyRef****),**\n          **)**\n        **})**\n      }\n    } \n    ```", "```js\n    // this.outletCloser.closeOutlet('detail') \n    ```", "```js\n    **src/app/manager/user-table/user-table.****component****.****ts**\n    imports: [\n      AsyncPipe,\n      FlexModule,\n      FormsModule,\n      MatButtonModule,\n      MatFormFieldModule,\n      MatIconModule,\n      MatInputModule,\n      MatPaginatorModule,\n      MatProgressSpinnerModule,\n      MatSlideToggleModule,\n      MatSortModule,\n      MatTableModule,\n      MatToolbarModule,\n      ReactiveFormsModule,\n      RouterLink,\n    ], \n    ```", "```js\n    **src****/app/manager/user-****table****/user-****table****.component.scss**\n    .loading-shade {\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 56px;\n      right: 0;\n      background: rgba(0, 0, 0, 0.15);\n      z-index: 1;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n    .filter-row {\n      min-height: 64px;\n      padding: 8px 24px 0;\n    }\n    .full-width {\n      width: 100%;\n    }\n    .mat-mdc-paginator {\n      background: transparent;\n    }\n    /* row selection styles */\n    .mat-mdc-row .mat-mdc-cell {\n      border-bottom: 1px solid transparent;\n      border-top: 1px solid transparent;\n      cursor: pointer;\n    }\n    .mat-mdc-row:hover .mat-mdc-cell {\n      border-color: currentColor;\n      background-color: #efefef;\n    }\n    .selected {\n      font-weight: 500;\n      background-color: #efefef;\n    } \n    ```", "```js\n    **src/app/manager/user-table/user-table.component.html**\n    <div fxLayout=\"row\" fxLayoutAlign=\"end\">\n      <mat-slide-toggle\n        [checked]=\"demoViewDetailsColumn()\"\n        (change)=\"demoViewDetailsColumn.set($event.checked)\">\n        Demo 'View Details' Column\n      </mat-slide-toggle>\n    </div>\n    <div class=\"filter-row\">\n      <form style=\"margin-bottom: 32px\">\n        <div fxLayout=\"row\">\n          <mat-form-field class=\"full-width\">\n            <mat-icon matPrefix>search</mat-icon>\n            <input matInput placeholder=\"Search\" \n                   aria-label=\"Search\" [formControl]=\"search\" />\n            <mat-hint>Search by e-mail or name</mat-hint>\n            @if (search.invalid) {\n              <mat-error>\n                Type more than one character to search\n              </mat-error>\n            }\n          </mat-form-field>\n        </div>\n      </form>\n    </div>\n    <div class=\"mat-elevation-z8\">\n      **@if (isLoading) {**\n        **<****div****class****=****\"loading-shade\"****>**\n          **<****mat-spinner****></****mat-spinner****>**\n        **</****div****>**\n      **}**\n      @if (hasError) {\n        <div class=\"error\">\n          {{ errorText }}\n        </div>\n      }\n      <mat-table\n        class=\"full-width\"\n        **[****dataSource****]=****\"items$\"**\n        matSort\n        matSortActive=\"name\"\n        matSortDirection=\"asc\"\n        matSortDisableClear>\n        <ng-container matColumnDef=\"name\">\n          <mat-header-cell *matHeaderCellDef mat-sort-header>\n            Name\n          </mat-header-cell>\n          <mat-cell *matCellDef=\"let row\">\n            {{ row.fullName }}\n          </mat-cell>\n        </ng-container>\n        <ng-container matColumnDef=\"email\">\n          <mat-header-cell *matHeaderCellDef mat-sort-header>\n            E-mail\n          </mat-header-cell>\n          <mat-cell *matCellDef=\"let row\">\n            {{ row.email }}\n          </mat-cell>\n        </ng-container>\n        <ng-container matColumnDef=\"role\">\n          <mat-header-cell *matHeaderCellDef mat-sort-header>\n            Role\n          </mat-header-cell>\n          <mat-cell *matCellDef=\"let row\">\n            {{ row.role }}\n          </mat-cell>\n        </ng-container>\n        <ng-container matColumnDef=\"_id\">\n          <mat-header-cell *matHeaderCellDef>\n            View Details\n          </mat-header-cell>\n          <mat-cell *matCellDef=\"let row\" \n                    style=\"margin-right: 8px\">\n            **<****button**\n              **mat-icon-button**\n              **[****routerLink****]=****\"[**\n                **'../users',**\n                **{** \n                  **outlets: { detail: ['user', { userId: row._id }]** \n                **}** \n              **}]\"**\n              **[****skipLocationChange****]=****\"true\"****>**\n              <mat-icon>visibility</mat-icon>\n            </button>\n          </mat-cell>\n        </ng-container>\n        <mat-header-row *matHeaderRowDef=\"displayedColumns()\">\n        </mat-header-row>\n        <mat-row\n          **matRipple**\n          **(****click****)=****\"selectedRow = row;** \n            **demoViewDetailsColumn() ? 'noop' : showDetail(row._id)\"**\n          [class.selected]=\"selectedRow === row\"\n          *matRowDef=\"let row; columns: displayedColumns()\">\n        </mat-row>\n      </mat-table>\n      <mat-toolbar>\n        <mat-toolbar-row>\n          <button mat-icon-button **(****click****)=****\"refresh$.next()**\">\n            <mat-icon title=\"Refresh\">refresh</mat-icon>\n          </button>\n          <span class=\"flex-spacer\"></span>\n          <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\" \n                         [length]=\"resultsLength\">\n          </mat-paginator>\n        </mat-toolbar-row>\n      </mat-toolbar>\n    </div> \n    ```", "```js\n    provideRouter(routes, withDebugTracing()), \n    ```", "```js\n    **src/app/city-search/city-search.****component****.****ts**\n    doSearch(searchValue: string) {\n      const userInput = searchValue.split(',').map((s) => s.trim())\n      const searchText = userInput[0]\n      const country = userInput.length > 1 ? userInput[1] : undefined\n      **if** **(****this****.****useNgRx****) {**\n        **this****.****ngRxBasedSearch****(searchText, country)**\n      **}** **else** **{**\n        **this****.****behaviorSubjectBasedSearch****(searchText, country)**\n      **}**\n    } \n    ```", "```js\n$ npx ng add @ngrx/store \n```", "```js\n$ npx ng add @ngrx/effects --minimal \n```", "```js\n$ npm i -D @ngrx/schematics \n```", "```js\n$ npx ng generate @ngrx/schematics:action search --group --creators \n```", "```js\n**src/app/action/search.****actions****.****ts**\nimport { createAction, props, union } from '@ngrx/store'\nimport { ICurrentWeather } from '../interfaces'\nexport const SearchActions = {\n  search: createAction(\n    '[Search] Search',\n    props<{ searchText: string; country?: string }>()\n  ),\n  weatherLoaded: createAction( \n    '[Search] CurrentWeather loaded',\n    props<{ current: ICurrentWeather }>()\n  ),\n}\nconst all = union(SearchActions)\nexport type SearchActions = typeof all \n```", "```js\n$ npx ng generate @ngrx/schematics:effect currentWeather --module=app.module.ts --root --group --creators \n```", "```js\n**src/app/effects/current-weather.****effects****.****ts**\nprivate doSearch(action: { searchText: string; country?: string }) {\n  return this.weatherService.getCurrentWeather(\n    action.searchText,\n    action.country\n  ).pipe(\n    map((weather) =>\n      SearchActions.weatherLoaded({ current: weather })\n    ),\n    catchError(() => EMPTY)\n  )\n} \n```", "```js\n**src/app/effects/current-weather.****effects****.****ts**\ngetCurrentWeather$ = createEffect(() =>\n  this.actions$.pipe(\n    ofType(SearchActions.search), \n    exhaustMap((action) => this.doSearch(action))\n  )\n) \n```", "```js\n$ npx ng generate @ngrx/schematics:reducer search \n    --reducers=reducers/index.ts --group --creators \n```", "```js\n**src/app/reducers/search.****reducer****.****ts**\nexport interface State {\n  current: ICurrentWeather\n} \n```", "```js\n**src/app/reducers/search.****reducer****.****ts**\nexport const initialState: \n  State = { \n      current: defaultWeather,\n  } \n```", "```js\n**src/app/reducers/search.****reducer****.****ts**\nconst searchReducer = createReducer(\n  initialState,\n  on(SearchActions.weatherLoaded, (state, action) => {\n    return {\n      ...state,\n      current: action.current,\n    }\n  })\n) \n```", "```js\n**src/app/current-weather/current-weather.****component****.****ts**\n**import** ***** **as** **appStore** **from****'../reducers'**\nexport class CurrentWeatherComponent {\n  current$: Observable<ICurrentWeather>\n  constructor(**private****store****:** **Store****<appStore.****State****>**) {\n    this.current$ =\n      **this****.****store****.****pipe****(****select****(****(****state****:** **State****) =>** **state.****search****.****current****))**\n  } \n  ...\n} \n```", "```js\n**src/app/reducers/index.****ts**\nexport const selectCurrentWeather = createSelector(\n  (state: State) => state.search.current,\n  current => current\n) \n```", "```js\n**src/app/current-weather/current-weather.****component****.****ts**\nimport * as appStore from '../reducers'\n  constructor(\n    private weatherService: WeatherService,\n    private store: Store<appStore.State>\n  ) {\n    this.current$ = merge(\n      **this****.****store****.****pipe****(****select****(appStore.****selectCurrentWeather****)),**\n      this.weatherService.currentWeather$\n    )\n  } \n```", "```js\n**src/app/city-search/city-search.****component****.****ts**\nngRxBasedSearch(searchText: string, country?: string) {\n  this.store.dispatch(SearchActions.search({ searchText, country }))\n} \n```", "```js\n**src/app/reducers/search.****reducer****.****spec****.****ts**\nimport { SearchActions } from '../actions/search.actions'\nimport { defaultWeather } from '../weather/weather.service'\nimport { fakeWeather } from '../weather/weather.service.fake'\nimport { selectCurrentWeather } from './index'\nimport { initialState, reducer } from './search.reducer'\ndescribe('Search Reducer', () => {\n  describe('weatherLoaded', () => {\n    it('should return current weather', () => {\n      const action = SearchActions.weatherLoaded({ current: fakeWeather })\n      const result = reducer(initialState, action)\n      expect(result).toEqual({ current: fakeWeather })\n    })\n  })\n})\ndescribe('Search Selectors', () => { \n  it('should selectCurrentWeather', () => {\n    const expectedWeather = defaultWeather\n    expect(selectCurrentWeather({\n      search: { current: defaultWeather }\n    })).toEqual(\n      expectedWeather\n    )\n  })\n}) \n```", "```js\n**src/app/current-weather/current-weather.****component****.****spec****.****ts**\nimport { MockStore, provideMockStore } from '@ngrx/store/testing'\ndescribe('CurrentWeatherComponent', () => {\n  ...\n  let store: MockStore<{ search: { current: ICurrentWeather } }>\n  const initialState = { search: { current: defaultWeather } }\n  beforeEach(async(() => {\n    ...\n    TestBed.configureTestingModule({\n      imports: [AppMaterialModule],\n      providers: [\n        ...\n        **provideMockStore****({ initialState }),**\n      ],\n    }).compileComponents()\n    ...\n    **store =** **TestBed****.****inject****(****Store****)** **as****any**\n  }))\n...\n}) \n```", "```js\n**src/app/current-weather/current-weather.****component****.****spec****.****ts**\nit('should get currentWeather from weatherService', (done) => {\n  // Arrange\n  store.setState({ search: { current: fakeWeather } })\n  weatherServiceMock.currentWeather$.next(fakeWeather)\n  // Act\n  fixture.detectChanges() // triggers ngOnInit()\n  // Assert\n  expect(component.current$).toBeDefined()\n  component.current$.subscribe(current => { \n    expect(current.city).toEqual('Bethesda')\n    expect(current.temperature).toEqual(280.32)\n    // Assert on DOM\n    const debugEl = fixture.debugElement\n    const titleEl: HTMLElement =\n      debugEl.query(By.css('.mat-title')).nativeElement\n    expect(titleEl.textContent).toContain('Bethesda')\n    done()\n  })\n}) \n```", "```js\n$ npx ng add @ngrx/store –minimal\n$ npx ng add @ngrx/effects –minimal\n$ npx ng add @ngrx/entity\n$ npx ng add @ngrx/data \n```", "```js\n$ npx ng add @ngrx/component-store \n```", "```js\n$ npx ng add @ngrx/signals \n```", "```js\n**proxy.conf.json**\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3000\",\n    \"secure\": false,\n    \"pathRewrite\": {\n       \"^/api\": \"\"\n    }\n  }\n} \n```", "```js\n    **angular.json**\n    ...\n    \"serve\": {\n      \"builder\": \"@angular-devkit/build-angular:dev-server\",\n      \"options\": {\n        \"browserTarget\": \"lemon-mart:build\",\n        \"proxyConfig\": \"proxy.conf.json\"\n      },\n      ...\n    } \n    ```", "```js\n    **src/app/common/ui.****service****.****ts**\n    @Injectable({ providedIn: 'root' })\n    export class UiService {\n      ...\n      private readonly loadState = **signalState**({ \n        count: 0, \n        isLoading: false \n      })\n      isLoading = **computed**(() => this.loadState.isLoading())\n      showLoader() {\n        if (this.loadState.count() === 0) {\n          **patchState**(this.loadState, () => ({ isLoading: true }))\n        }\n        **patchState**(this.loadState, (state) => ({ \n          count: state.count++ \n        }))}\n      hideLoader() {\n        **patchState**(this.loadState, (state) => ({ \n          count: state.count—\n        }))\n        if (this.loadState.count() === 0) {\n          **patchState**(this.loadState, () => ({ isLoading: false }))\n        }\n      }  \n      ...\n    } \n    ```", "```js\n    **src/common/loading.****http****.****interceptor****.****ts**\n    export function LoadingHttpInterceptor(\n      req: HttpRequest<unknown>, next: HttpHandlerFn) {\n      const uiService = inject(UiService)\n      uiService.showLoader()\n      return next(req).pipe(finalize(() => \n                            uiService.hideLoader()))\n    } \n    ```", "```js\n    **src/common/loading-overlay.****component****.****ts**\n    @Component({\n      selector: 'app-loading-overlay',\n      template: `\n        **@if (uiService.isLoading()) {**\n          <div class=\"overlay\">\n            <div class=\"center\">\n              <img alt=\"loading\" class=\"spinner\"\n                        src=\"img/lemon.svg\" />\n            </div>\n          </div>\n        **}**\n      `,\n      styles: `\n        .overlay {\n          position: fixed;\n          width: 100%;\n          height: 100%;\n          left: 0;\n          top: 0;\n          background-color: rgba(255, 255, 255, 0.65);\n          z-index: 9999;\n        }\n        .spinner {\n          display: block;\n          width: 48px;\n          height: 48px;\n          animation-name: spin;\n          animation-duration: 1.00s;\n          animation-iteration-count: infinite;\n          animation-timing-function: ease-in-out;\n        }\n        @keyframes spin {\n          0% { transform: rotate(0deg); }\n          100% { transform: rotate(360deg); }\n        }\n        .center {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n          }\n      `,\n      standalone: true,\n      **encapsulation****:** **ViewEncapsulation****.****ShadowDom**,\n    })\n    export class LoadingOverlayComponent {\n      readonly uiService = inject(UiService)\n    } \n    ```", "```js\n    **src/app/app.****component****.****ts**\n    template: `\n        **<app-loading-overlay></app-loading-overlay>**\n        <div class=\"app-container\">\n        ... \n    ```", "```js\n    `server/src/v1/routes/authRouter.ts`\n    router.get('/me', authenticate(), async (_req, res) => {\n      `await setTimeout(2000)`\n    ... \n    ```", "```js\n    **src/index.html** \n    <head>\n      ...\n      **<****link****href****=****\"assets/styles/spinner.css\"****rel****=****\"stylesheet\"** **/>**\n    </head>\n    <body class=\"mat-typography mat-app-background\">\n        <app-root>\n          **<****div****class****=****\"spinner-background\"****>**\n            **<****div****class****=****\"spinner-container\"****>**\n              **<****svg****class****=****\"spinner\"****width****=****\"****65px\"****height****=****\"65px\"**\n                **viewBox****=****\"0 0 66 66\"****>**\n                **<****circle****class****=****\"path\"****fill****=****\"none\"****stroke-width****=****\"6\"**\n                  **stroke-linecap****=****\"round\"****cx****=****\"33\"****cy****=****\"33\"****r****=****\"30\"****>**\n                **</****circle****>**\n              **</****svg****>**\n              **<****h2****class****=****\"animate-text\"****>****Loading****</****h2****>**\n            **</****div****>**\n          **</****div****>**\n        </app-root>\n    </body> \n    ```", "```js\n$ npx ng serve --project signal-store \n```", "```js\n$ npx ng run signal-store:cypress-run --spec \"cypress/e2e/app.cy.ts,cypress/e2e/simple-search.cy.ts\" \n```", "```js\n**projects/signal-store/src/app/store/weather.****store****.****ts**\nexport const WeatherStore = signalStore(\n  {\n    providedIn: 'root',\n  },\n  withState({\n    current: defaultWeather,\n  }),\n  withMethods((store, weatherService = inject(WeatherService)) => ({\n    async updateWeather(searchText: string, country?: string) {\n      patchState(store, {\n        current: await weatherService.getCurrentWeather(\n          searchText,\n          country\n        ),\n      })\n    },\n  }))\n) \n```", "```js\n**projects/signal-store/src/app/postal-code/postal-code.****service****.****ts**\nexport class PostalCodeService implements IPostalCodeService {\n  private readonly httpClient = inject(HttpClient)\n  resolvePostalCode(postalCode: string): Promise<IPostalCode> {\n    const uriParams = new HttpParams()\n      .set('maxRows', '1')\n      .set('username', environment.username)\n      .set('postalcode', postalCode)\n    const httpCall$ = this.httpClient.get<IPostalCodeData>(\n      `${environment.baseUrl}${environment.geonamesApi}.geonames.org/postalCodeSearchJSON`,\n      { params: uriParams }\n    )\n    return lastValueFrom(httpCall$).then((data) =>\n      data.postalCodes?.length > 0 ? \n        data.postalCodes[0] : defaultPostalCode\n    )\n  }\n} \n```", "```js\n**projects/signal-store/src/app/weather/weather.****service****.****ts**\nexport class WeatherService implements IWeatherService {\n  private readonly httpClient = inject(HttpClient)\n  private readonly postalCodeService = inject(PostalCodeService)\n  async getCurrentWeather(\n    searchText: string, country?: string): Promise<ICurrentWeather> {\n    const postalCode = await   \n       this.postalCodeService.resolvePostalCode(searchText)\n    if (postalCode && postalCode !== defaultPostalCode) {\n      return this.getCurrentWeatherByCoords({\n        latitude: postalCode.lat,\n        longitude: postalCode.lng,\n      })\n    } else {\n      const uriParams = new HttpParams().set(\n        'q',\n        country ? `${searchText},${country}` : searchText\n      )\n      return this.getCurrentWeatherHelper(uriParams)\n    }\n  }\n  private getCurrentWeatherHelper(\n    uriParams: HttpParams): Promise<ICurrentWeather> {\n    uriParams = uriParams.set('appid', environment.appId)\n    const httpCall$ = this.httpClient.get<ICurrentWeatherData>(\n      `${environment.baseUrl}api.openweathermap.org/data/2.5/weather`,\n      { params: uriParams }\n    )\n    return lastValueFrom(httpCall$).then(\n           (data) => this.transformToICurrentWeather(data))\n  } \n```", "```js\n**projects/signal-store/src/app/city-search/city-search.****component****.****ts**\n@Component({\n  selector: 'app-city-search',\n  ...\n  **changeDetection****:** **ChangeDetectionStrategy****.****OnPush****,**\n})\nexport class CitySearchComponent {\n  private readonly store = inject(WeatherStore)\n  search = new FormControl(\n    '', \n    [Validators.required, Validators.minLength(2)]\n  )\n  readonly searchSignal = **toSignal**(\n    this.search.valueChanges.pipe(\n      filter(() => this.search.valid),\n      debounceTime(1000)\n    )\n  )\n  constructor() {\n    effect(() => {\n      this.doSearch(this.searchSignal())\n    })\n  }\n  doSearch(searchValue?: string | null) {\n    if (typeof searchValue !== 'string') return\n    const userInput = searchValue.split(',').map((s) => s.trim())\n    const searchText = userInput[0]\n    const country = userInput.length > 1 ? userInput[1] : undefined\n    this.store.updateWeather(searchText, country)\n  }\n} \n```", "```js\n**projects/signal-store/src/app/current-weather/**\n**current-weather.****component****.****ts**\n@Component({\n  selector: 'app-current-weather',\n  ...\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CurrentWeatherComponent {\n  readonly store = inject(WeatherStore)  \n  ...\n} \n```", "```js\n**projects/signal-store/src/app/current-weather/**\n**current-weather.component.html**\n<**div** **fxLayout**=**\"row\"**>\n  <div fxFlex=\"66%\" class=\"mat-headline-6 no-margin\" data-testid=\"city\">\n    {{ store.current().city }},\n    {{ store.current().country }}\n  </div>\n  ... \n```", "```js\n@if (store.current() as current) \n```"]