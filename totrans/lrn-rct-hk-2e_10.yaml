- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Hooks for Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to use Hooks for handling form submission
    using the **Action State Hook**, how to avoid blocking UI with the **Transition
    Hook**, and how to use the **Optimistic Hook** to implement optimistic updates.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn how to implement client-side routing
    in our blog app by using **React Router**. First, we will learn how React Router
    works, and which features it offers. Then, we will be creating a new route for
    viewing a single post and using the **Param Hook** to get the post ID from the
    URL. Next, we will learn how to use the `Link` component to link to different
    routes. Finally, we will learn how to programmatically implement navigation to
    redirect to a newly created post using the **Navigation Hook**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing React Router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new route and using the Param Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linking to routes using the Link component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programmatically redirecting using the Navigation Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A fairly recent version of Node.js should already be installed. The Node Package
    Manager (`npm`) also needs to be installed (it should come with Node.js). For
    more information on how to install Node.js, please check out their official website:
    [https://nodejs.org/](https://nodejs.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to use **Visual Studio Code** (**VS Code**) for the guides in
    this book, but everything should work similarly in any other editor. For more
    information on how to install VS Code, please refer to their official website:
    [https://code.visualstudio.com](https://code.visualstudio.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we use the following versions:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js v22.14.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm` v10.9.2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Code v1.97.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The versions mentioned in the preceding list are the ones used in the book.
    While installing a newer version should not be an issue, please note that certain
    steps might work differently on a newer version. If you are having an issue with
    the code and steps provided in this book, please try using the mentioned versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter08](https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter08)'
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended that you write the code on your own. Do not simply
    run the code examples that are provided with the book. It is important to write
    the code yourself to be able to learn and understand it properly. However, if
    you run into any issues, you can always refer to the code example.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing React Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React Router started out as a simple, declarative routing library. It provides
    features to define and manage different routes for our app, as well as navigating
    between them. Recently, React Router can also be used as a React framework, providing
    ways to handle layouts and advanced server-side rendering. However, since this
    book focuses on Hooks, we will focus on React Router as a library.
  prefs: []
  type: TYPE_NORMAL
- en: 'The library consists of three main components:'
  prefs: []
  type: TYPE_NORMAL
- en: The `BrowserRouter` component, which provides a context to use routing in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Routes` component, which lets us define some routes and renders the component
    of the currently active route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Route` component, which lets us define a specific route and component to
    render
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, the library provides components to create links to certain routes
    (using the `Link` and `NavLink` components), as well as Hooks to get parameters
    from the URL (Param Hook) and to navigate (Navigation Hook).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s get started setting up React Router and an index route (which will
    contain the home page of our blog, with the feed of blog posts). The index route
    will be what is served on the main URL of our server, also sometimes called the
    entry point or `/` route.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up React Router
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to get started setting up the React Router library and an
    index route:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter07_4` folder to a new `Chapter08_1` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter08_1` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and install the `react-router` library, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new `src/pages/` folder, in which we are going to put the various pages
    of our app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `src/pages/Home.jsx` file to contain the home page of our blog
    app (which will show the feed of posts that we already had before).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, import `Suspense`, the `PostFeed`, and the `ThemeContext`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define and export a `Home` component, which shows a fallback while loading
    posts, then shows the featured posts with a special color, and then the regular
    posts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/App.jsx` and *remove* the import of `Suspense`, as we are not going
    to need it anymore:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, *remove* the import of the `PostFeed` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, import the `BrowserRouter`, `Routes`, and `Route` from `react-router`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, import the `Home` page component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `App` component, define the `BrowserRouter`, making sure it wraps
    all of the components, so that we can make use of the Navigation Hook in the header
    components later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `ErrorBoundary`, *replace* the `Suspense` component and all its
    children. Instead, render the `Routes` component, in which we can define routes
    for our app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define an index route which renders the `Home` page component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When opening the app in a browser, you will see that it looks exactly the same
    way as before, but now the home page is rendered via React Router instead of being
    hardcoded!
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter08/Chapter08_1`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new route and using the Param Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have React Router set up successfully, we can start creating a
    new route for viewing a single post. This route will look as follows: `/post/:id`,
    with `:id` being a URL param containing the id of a post to be viewed.'
  prefs: []
  type: TYPE_NORMAL
- en: A **URL param** is a parameter used in an URL to define dynamic content. For
    example, in the `/post/:id` route, the `/post/` part would be a static string,
    but the `:id` will be replaced with a dynamic post ID. Let’s assume you have an
    URL that ends with `/post/8`, that would mean that the route matches with the
    `id` param being set to `8`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started setting up the page and route:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter08_1` folder to a new `Chapter08_2` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter08_2` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `src/api.js` and define a new function to fetch a single post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/components/post/Post.jsx` and import the `useSuspenseQuery` and the
    `fetchPost` functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the `Post` component to only accept an `id` prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `Post` component, add a **Suspense Query Hook** to fetch the post
    and get all data from it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new `src/pages/ViewPost.jsx` file. Inside it, import `Suspense`, the
    `useParams` function from `react-router`, and the `Post` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define and export the `ViewPost` page component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use a Params Hook to get the `id` from the URL params:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use a `Suspense` boundary to provide a fallback while the post is fetching,
    then render the `Post` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/App.jsx` and import the `ViewPost` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a new route with the `:id` param for the `ViewPost` page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the app, as follows (leave it running throughout the rest of this chapter):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It is now possible to manually go to the single post page by appending `/post/:id`
    to the URL in a browser (for example `/post/1`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Viewing a single post on our newly defined route](img/B31327_08_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Viewing a single post on our newly defined route
  prefs: []
  type: TYPE_NORMAL
- en: However, it would be nice if we could visit this page by clicking on one of
    the posts in the main post feed on the home page. Let’s implement this in the
    next section by using the `Link` component.
  prefs: []
  type: TYPE_NORMAL
- en: Linking to routes using the <Link> component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When dealing with links that the user can click to visit a different page, it
    is best and easiest to use the `Link` component. This component will automatically
    create a simple link to a specific page for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started using the `Link` component to provide a link to a single
    post:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `src/components/post/PostListItem.jsx` file, in which we are going
    to define a simplified version of the `Post` component, which will be shown in
    the `PostList` component. Inside it, import the `useContext` function, the `ThemeContext`
    and the `Link` component from `react-router`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define and export the `PostListItem` component, which accepts the post `id`,
    `title`, and `author` as props:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a Context Hook to get the theme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render the title, as we did before:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, render a `Link` component, which will go to `/post/:id` and show the `ViewPost`
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, show the author, but no contents, to avoid cluttering the feed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/components/post/PostList.jsx` and *replace* the `Post` import with
    an import of the `PostListItem` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render the `PostListItem` component instead of the `Post` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now it is possible to go from the home page to a single post:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – The Link component rendering a “View Post >” link to go to the
    single post page](img/B31327_08_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – The Link component rendering a “View Post >” link to go to the
    single post page
  prefs: []
  type: TYPE_NORMAL
- en: But there is still no way to go back to the home page. Let’s implement this
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a navigation bar using <NavLink>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we want to add styling to the link, for example, to implement a navigation
    bar where we show which page we are currently on, we can use the `NavLink` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use this component to implement a navigation bar with a link to go back
    to the home page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `src/components/NavBarLink.jsx` file. Inside it, import the `NavLink`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define and export a component that accepts a `to` prop, which defines which
    route we should link to, and a `children` prop to provide a text or component
    to put the link on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a `style`, in which we check if the link is active (when we are
    currently on the page), and then render it in bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/App.jsx` and import the `NavBarLink` component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the header section of our blog app, before the `UserBar`, define a `NavBarLink`
    back to the index/home page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we have a way to go from the home page to a single post, and back to the
    home page again to view other posts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Rendering a “Home” NavLink, which is currently active (bold)](img/B31327_08_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – Rendering a “Home” NavLink, which is currently active (bold)
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s look at a way to programmatically navigate to the single post page
    after creating a new post.
  prefs: []
  type: TYPE_NORMAL
- en: Programmatically navigating using the Navigation Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever we want to programmatically navigate instead of having a link for the
    user to click, we can use the Navigation Hook provided by React Router. The Navigation
    Hook provides a function to navigate programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started using the Navigation Hook now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/components/post/CreatePost.jsx` and import the `useNavigate` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a Navigate Hook inside the `CreatePost` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the Action State Hook, get the result from the mutation and then redirect
    to the `ViewPost` page of the newly created post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Try creating a new post in the blog app, and you will see that you get redirected
    to the page of the newly created post!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have successfully implemented routing in our blog application! As an exercise,
    you could now try to implement the login/signup and create post forms on separate
    pages. When doing so, I would recommend refactoring the home page link into a
    new `NavBar` component with links to the various pages.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter08/Chapter08_2`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first learned how the React Router library works and which
    components it consists of. Then, we set up the library and an index route for
    the home page of our blog (showing a feed of blog posts). Next, we defined a new
    route to show a single post on a separate page and used the Params Hook to get
    the `id` value from the URL. Then, we learned how to navigate to this new route
    and back to the home page using `Link` and `NavLink` components. Finally, we learned
    how to programmatically navigate after a post was successfully created by using
    the Navigation Hook.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn about advanced built-in Hooks that
    React provides.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To recap what we have learned in this chapter, try to answer the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Which components does the React Router library consist of?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we define a new route with the React Router library?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we read dynamic values (params) in URLs?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are ways to define links with React Router and how do they differ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Hook is used to programmatically navigate with React Router?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Official website of React Router: [https://reactrouter.com/](https://reactrouter.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/wnXT0](Chapter_08.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_%283%29.png)'
  prefs: []
  type: TYPE_IMG
