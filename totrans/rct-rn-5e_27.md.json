["```js\ntype Props = ModalProps & {\n  onPressConfirm: () => void;\n  onPressCancel: () => void;\n};\nexport default function ConfirmationModal({\n  onPressConfirm,\n  onPressCancel,\n  ...modalProps\n}: Props) {\n  return (\n    <Modal transparent onRequestClose={() => {}} {...modalProps}>\n      <View style={styles.modalContainer}>\n        <View style={styles.modalInner}>\n          <Text style={styles.modalText}>Dude, srsly?</Text>\n          <Text style={styles.modalButton} onPress={onPressConfirm}>\n            Yep\n          </Text>\n          <Text style={styles.modalButton} onPress={onPressCancel}>\n            Nope\n          </Text>\n        </View>\n      </View>\n    </Modal>\n  );\n} \n```", "```js\n modalContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  modalInner: {\n    backgroundColor: \"azure\",\n    padding: 20,\n    borderWidth: 1,\n    borderColor: \"lightsteelblue\",\n    borderRadius: 2,\n    alignItems: \"center\",\n  },\n  modalText: {\n    fontSize: 16,\n    margin: 5,\n    color: \"slategrey\",\n  },\n  modalButton: {\n    fontWeight: \"bold\",\n    margin: 5,\n    color: \"slategrey\",\n  }, \n```", "```js\nfunction toggleAlert() {\n    Alert.alert(\"\", \"Failed to do the thing...\", [\n      {\n        text: \"Dismiss\",\n      },\n    ]);\n  } \n```", "```js\n modalInner: {\n    backgroundColor: \"azure\",\n    padding: 20,\n    borderWidth: 1,\n    borderColor: \"lightsteelblue\",\n    borderRadius: 2,\n    alignItems: \"center\",\n  }, \n```", "```js\n modalInnerError: {\n    backgroundColor: \"lightcoral\",\n    borderColor: \"darkred\",\n  },\n  modalText: {\n    fontSize: 16,\n    margin: 5,\n    color: \"slategrey\",\n  },\n  modalTextError: {\n    fontSize: 18,\n    color: \"darkred\",\n  },\n  modalButton: {\n    fontWeight: \"bold\",\n    margin: 5,\n    color: \"slategrey\",\n  },\n  modalButtonError: {\n    color: \"black\",\n  }, \n```", "```js\nconst innerViewStyle = [styles.modalInner, styles.modalInnerError];\nconst textStyle = [styles.modalText, styles.modalTextError];\nconst buttonStyle = [styles.modalButton, styles.modalButtonError];\ntype Props = ModalProps & {\n  onPressConfirm: () => void;\n  onPressCancel: () => void;\n};\nexport default function ErrorModal({\n  onPressConfirm,\n  onPressCancel,\n  ...modalProps\n}: Props) {\n  return (\n    <Modal transparent onRequestClose={() => {}} {...modalProps}>\n      <View style={styles.modalContainer}>\n        <View style={innerViewStyle}>\n          <Text style={textStyle}>Epic fail!</Text>\n          <Text style={buttonStyle} onPress={onPressConfirm}>\n            Fix it\n          </Text>\n          <Text style={buttonStyle} onPress={onPressCancel}>\n            Ignore it\n          </Text>\n        </View>\n      </View>\n    </Modal>\n  );\n} \n```", "```js\nexport default function PassiveNotifications() {\n  return (\n    <RootSiblingParent>\n      <View style={styles.container}>\n        <Text\n          onPress={() => {\n            Toast.show(\"Something happened!\", {\n              duration: Toast.durations.LONG,\n            });\n          }}\n        >\n          Show Notification\n        </Text>\n      </View>\n    </RootSiblingParent>\n  );\n} \n```", "```js\ntype ActivityProps = {\n  visible: boolean;\n  size?: \"small\" | \"large\";\n};\nexport default function Activity({ visible, size = \"large\" }: ActivityProps) {\n  return (\n    <Modal visible={visible} transparent>\n      <View style={styles.modalContainer}>\n        <ActivityIndicator size={size} />\n      </View>\n    </Modal>\n  );\n} \n```", "```js\nmodalContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"rgba(0, 0, 0, 0.2)\",\n  }, \n```", "```js\nexport default function App() {\n  const [fetching, setFetching] = useState(false);\n  const [promise, setPromise] = useState(Promise.resolve());\n  function onPress() {\n    setPromise(\n      new Promise((resolve) => setTimeout(resolve, 3000)).then(() => {\n        setFetching(false);\n      })\n    );\n    setFetching(true);\n  }\n  return (\n    <View style={styles.container}>\n      <Activity visible={fetching} />\n      <Text onPress={onPress}>Fetch Stuff...</Text>\n    </View>\n  );\n} \n```"]