["```js\nimport React, { useRef } from \"react\";\nimport { Animated, View, Button } from \"react-native\";\nconst App = () => {\n  const opacityValue = useRef(new Animated.Value(0)).\n      current;\n  const showView = () => {\n    Animated.timing(opacityValue, {\n        toValue: 1,\n        duration: 2000\n        }).start();\n    };\n  return (\n    <>\n      <Animated.View\n        style={{\n          backgroundColor: 'red',\n              opacity: opacityValue\n        }}\n       />\n      <Button title=\"Show View\" onPress={showView} />\n    </>\n  );\n}\nexport default App;\n```", "```js\nstyle={{\n    opacity: opacityValue,\n    transform: [{\n      translateY: opacityValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [50, 0]\n      }),\n    }],\n  }}\n```", "```js\nconst App = () => {\n  const scrolling = useRef(new Animated.Value(0)).current;\n  const interpolatedScale = scrolling.interpolate({\n    inputRange: [-300, 0],\n    outputRange: [3, 1],\n    extrapolate: 'clamp',\n  });\n  const interpolatedTranslate = scrolling.interpolate({\n    inputRange: [0, 300],\n    outputRange: [0, -300],\n    extrapolate: 'clamp',\n  });\n  return (\n    <>\n      <Animated.Image \n        source={require('sometitleimage.jpg')}\n        style={{\n          ...styles.header,\n          transform: [\n            {translateY: interpolatedTranslate}, \n            {scaleY: interpolatedScale}, \n            {scaleX: interpolatedScale}\n          ]\n        }} \n      />\n      <Animated.ScrollView\n        onScroll={\n          Animated.event([{nativeEvent: {contentOffset: {y: \n              scrolling,},},}],\n              { useNativeDriver: true },\n          )\n        }\n      >\n        <View style={styles.headerPlaceholder} />\n        <View style={styles.content}>\n        </View> \n      </Animated.ScrollView>\n    </>  \n  );\n}\n```", "```js\nimport React from \"react\";\nimport { View, Text, Pressable } from \"react-native\";\nimport * as Animatable from 'react-native-animatable';\nconst App = () => {\n  const handleRef = ref => this.view = ref;\n  const hideView = () => {\n    this.view.fadeOutDown(2000);\n  }\n  return (\n    <>\n      <Animatable.View\n        style={{\n          backgroundColor: 'red'\n        }}\n        ref={handleRef}\n        animation=\"fadeInUp\"\n        duration=2000\n      />\n      <Pressable onPress={hideView}>\n        <Text>Hide View</Text>\n      </Pressable>\n    </>\n  );\n}\nexport default App;\n```", "```js\nconst fadeInUpCustom = {\n  0: {\n    opacity: 0,\n    translateY: 50,\n  },\n  1: {\n    opacity: 1,\n    translateY: 0,\n  },\n};\n```", "```js\nimport React from \"react\";\nimport { Text, Pressable } from \"react-native\";\nimport Animated, { useSharedValue, useAnimatedStyle, \n    Easing, withTiming } from 'react-native-reanimated';\nconst App = () => {\n    const size = useSharedValue(0);\n    const showView = () => {\n      size.value = withTiming(100, {\n        duration: 2000,\n        easing: Easing.out(Easing.exp),\n      });\n  }\n    const animatedStyles = useAnimatedStyle(() => {\n      return {\n        width: size.value,\n        height: size.value,\n        backgroundColor: 'red'\n      };\n  });\n  return (\n    <>\n      <Animated.View style={animatedStyles} />\n      <Pressable onPress={showView}>\n        <Text>Show View</Text>\n      </Pressable>\n    </>\n  );\n}\n```", "```js\nfunction myWorklet() {\n  'worklet';\n  console.log(\"Hey I'm running on the UI thread\");\n}\n```", "```js\nfunction App() {\n  const scrolling = useSharedValue(0);\n  const scrollHandler = useAnimatedScrollHandler((event) => \n  {\n    scrolling.value = event.contentOffset.y;\n  });\n  const imgStyle = useAnimatedStyle(() => {\n    const interpolatedScale = interpolate(\n      scrolling.value,[-300, 0],[3, 1],Extrapolate.CLAMP\n    );\n    const interpolatedTranslate = interpolate(\n      scrolling.value,[0, 300],[0, -300],Extrapolate.CLAMP\n    );\n    return {\n      transform: [\n        {translateY: interpolatedTranslate}, \n        {scaleY: interpolatedScale}, \n        {scaleX: interpolatedScale}\n      ]\n    };\n  });\n  return (\n    <>\n      <Animated.Image \n        source={require('sometitleimage.jpg')}\n        style={[styles.header,imgStyle]} \n      />\n      <Animated.ScrollView\n        onScroll={scrollHandler}      >\n        <View style={styles.headerPlaceholder} />\n        <View style={styles.content} /> \n      </Animated.ScrollView>\n    </>  \n  );\n}\n```", "```js\nimport React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport LottieView from 'lottie-react-native';\nconst App = () => {\n    return (\n        <View style={styles.center}>\n            <LottieView\n                source={require('loading-animation.json')}\n                style={styles.animation}\n                autoPlay/>\n        </View>\n    );\n};\nconst styles = StyleSheet.create({\n    center: {\n        flex: 1,\n          alignItems: 'center',\n            justifyContent: 'center'\n    },\n    animation: {\n        width: 150,\n        height: 150\n    }\n});\nexport default App;\n```", "```js\nconst App = () => {\n  const scrolling = useRef(new Animated.Value(0)).current;\n  let interpolatedProgress = scrolling.interpolate({\n    inputRange: [-1000, 0, 1000],\n    outputRange: [1, 0, 1],\n    extrapolate: 'clamp',\n  });\n  return (\n    <View style={styles.container}>\n      <Animated.ScrollView\n        onScroll={Animated.event(\n          [{\n            nativeEvent: {\n              contentOffset: {\n                y: scrolling,\n              },\n            },\n          }],\n          { useNativeDriver: true },\n        )}\n        scrollEventThrottle={16}>\n          <LottieView \n            source={require('looper.json')}\n            style={styles.animation}\n            progress={interpolatedProgress}/>\n      </Animated.ScrollView>\n    </View>\n  )\n}\n```"]