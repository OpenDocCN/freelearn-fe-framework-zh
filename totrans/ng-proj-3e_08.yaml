- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building an Enterprise Portal Using Nx Monorepo Tools and NgRx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Typical enterprise applications usually consist of a backend and a frontend
    system. The backend is responsible for interacting with a database for data persistence
    and exposes a REST API. The frontend communicates with the backend system via
    the REST interface to exchange data. The frontend system can sometimes consist
    of multiple applications, including a web interface or a mobile application. Keeping
    all these applications and systems in separate source control repositories scales
    poorly and is difficult to maintain and build. Alternatively, we can follow a
    **monorepo** architecture for large enterprise applications, where each application
    resides in a separate location inside the same repository.
  prefs: []
  type: TYPE_NORMAL
- en: A popular tool in the Angular ecosystem that embraces monorepo architecture
    is **Nx**. Combining an Nx monorepo application with a state management library
    can significantly improve your application. **NgRx**, a popular state management
    library for Angular applications, can help us maintain a consistent and manageable
    global state.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will investigate both technologies by building an enterprise
    portal application for visiting **points of interest (POIs)**. We will cover the
    following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a monorepo application using Nx
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating user-specific portals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing application state with NgRx
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing data with graphs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Essential background theory and context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nx is a suite of development tools and libraries for building web applications
    based on monorepo architecture. A typical Nx application can contain many applications
    and shared libraries inside a single workspace. The flexibility of monorepo architecture
    allows any application, backend or frontend, to use the same libraries inside
    the workspace.
  prefs: []
  type: TYPE_NORMAL
- en: In this project, we will consider only frontend applications built with the
    Angular framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nx provides developers with the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Centralized management of application dependencies**: Each application has
    the same version of the Angular framework, making it easy to update all at once.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fast builds**: The build process of an Nx application involves only those
    artifacts that have been changed and does not do a complete rebuild of the entire
    monorepo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Distributed caching**: Each application build can be cached locally or to
    the cloud, using **Nx Cloud**, to improve the build process of other developers
    that build similar artifacts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining a consistent global state is tedious in a large Angular enterprise
    application. Using `@Input` and `@Output` decorators to communicate between Angular
    components is not always viable, especially when many components need to share
    the same state.
  prefs: []
  type: TYPE_NORMAL
- en: 'NgRx is a library that efficiently manages the global application state powered
    by the **RxJS** library. The main building blocks of NgRx are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Store**: The central storage that keeps the global state of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reducer**: A function that listens to a specific event and interacts directly
    with the store. Reducers derive a new application state based on the existing
    one from the store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Action**: A unique event dispatched from components and services that triggers
    a reducer. Actions can be any interaction initiated by the user or an external
    source, such as an HTTP call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Effect**: Handles interaction with external sources, such as making an HTTP
    call or exchanging data with the local storage. Effects take care of side effects
    in an application by hiding the business logic from components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selector**: A function that selects the application state or a specific part
    of it (*slice*) from the store. Selectors support **memoization**, a technique
    where they can return the same state if called with the same parameters, greatly
    enhancing the performance of an application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we will build an Angular enterprise application to manage POI
    visits on a map. The application will consist of two portals, where one will allow
    a visitor to select a POI from a list and view its location on a map. Another
    portal will enable an administrator to view the visiting traffic of each POI.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will build an Angular application from scratch using Nx. We will
    then create the skeleton of each portal by adding the essential components of
    our application. After we have scaffolded our application, we will start adding
    the functionality of the visitor portal using NgRx. Finally, we will implement
    the administrator portal and learn how to use an Angular library to visualize
    data in a graph. The following diagram describes an architectural overview of
    the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει διάγραμμα  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_08_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Project architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'Build time: 3 hours'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following software tools are required to complete this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nx Console**: A VSCode extension that provides a graphical interface to work
    with Nx. You can learn more about installing it in *Chapter 1*, *Creating Your
    First Web Application in Angular*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitHub material**: The code related to this chapter can be found in the `Chapter08`
    folder at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a monorepo application using Nx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nx provides developers with tools to work with monorepos, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**create-nx-workspace**: An npm package that scaffolds a new Nx monorepo application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nx CLI**: A command-line interface that runs commands against a monorepo
    application. The Nx CLI extends the Angular CLI to provide more commands, which
    is faster due to the distributed caching mechanism.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is recommended to use the **Quick Open** feature of VSCode when working with
    Nx monorepos. The number of generated folders and files will significantly increase,
    and it will be challenging to navigate through them. You can find out more at
    [https://code.visualstudio.com/docs/editor/editingevolved#_quick-file-navigation](https://code.visualstudio.com/docs/editor/editingevolved#_quick-file-navigation).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the Nx CLI, run the following command in a terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will install the `nx` npm package globally on our system.
    We can now scaffold a new Nx monorepo workspace using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Find the latest version of the `create-nx-workspace` npm package and request
    us to install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ask if we want to use standalone components in the application. Ensure that
    `No` is selected and press *Enter* to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Standalone Angular components are a simpler and modern approach to a more component-centric
    Angular application without using Angular modules. In this project, we will use
    Angular modules by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'The execution of the `create-nx-workspace` package involves the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`packt`: The name of the Nx monorepo workspace. In large enterprise environments,
    we typically use the organization name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--appName=tour`: The name of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--preset=angular-monorepo`: Nx supports applications built with various JavaScript
    frameworks. The `preset` option defines what type of application we want to build.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--style=css`: Indicates that our application will use the CSS style sheet
    format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--linter=eslint`: Configures our application to use ESLint as the default
    linter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--nx-cloud=false`: Disables Nx Cloud for our application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--routing`: Enables Angular routing in the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new Nx workspace may take some time, as it installs all the necessary
    packages for an enterprise environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the creation of the workspace has been completed, we can run it to verify
    that everything has been set up correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in the VSCode editor and click on the **Nx Console** menu in
    the VSCode sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **serve** command from the **PROJECTS** pane and click the play
    button to execute it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18465_08_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Serve option
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your browser at `http://localhost:4200`, and you should see the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_08_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – Minimal Nx application
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! Your new application has been configured correctly! Nx creates
    a minimal skeleton application, just like Angular CLI does, for our convenience
    so that we can build our features on top of that.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will dive deeper into Nx by creating the administrator
    and visitor portals in our workspace.
  prefs: []
  type: TYPE_NORMAL
- en: Creating user-specific portals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our application will consist of two portals that different users will use.
    Visitors will be able to view a list of POIs and select them on a map. Administrators
    will be able to view statistics for each POI. We will learn more about how to
    use Nx in the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Building the visitor portal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the administrator portal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each portal will be a separate Nx library that will be loaded according to the
    URL entered in the address bar of the browser. Organizing our code in libraries
    allows us to reuse it between different applications and build and test it individually.
    We will start building the visitor portal in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Building the visitor portal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The visitor portal will be a library inside the Nx workspace that will be loaded
    by default. Let’s see how we can build that library with Nx Console:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run Nx Console from the VSCode sidebar and select the **generate** option from
    the **GENERATE & RUN TARGET** pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18465_08_04.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – The generate option
  prefs: []
  type: TYPE_NORMAL
- en: Select the **@nrwl/angular – library** option from the dialog that appears.
    The **@nx/angular** namespace contains schematics we can execute in an Nx monorepo
    for Angular applications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter `visitor` as the name of the library and click the **Run** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει τραπέζι  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_08_05.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – Library name
  prefs: []
  type: TYPE_NORMAL
- en: When you were typing the name of the library, you may have noticed that Nx was
    running the **generate** command in the terminal. Well, it did not run it. Instead,
    it mimicked the effect of running the command in your system, a technique called
    a **dry run**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nx will create the `visitor` library inside the `libs` folder of our workspace.
    The library does not contain any components yet. According to the project specifications,
    the visitor portal will have a list of POIs where users can select and view their
    location on a map. Thus, we need to create an Angular component with the following
    layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Visitor portal layout](img/B18465_08_06.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – Visitor portal layout
  prefs: []
  type: TYPE_NORMAL
- en: In the previous diagram, the portal consists of the sidebar that displays a
    POI list and the main content area to display the map. Instead of creating the
    layout from scratch, we will use Angular Material, which contains a handful of
    ready-made layouts, including one with a sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before working with Angular Material, we need to install it in our application
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After the installation completes successfully, we can configure Angular Material
    in our Nx workspace using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will configure the `@angular/material` npm package for
    use in our workspace, passing additional options. You can learn more about these
    options in *Chapter 4*, *Building a PWA Weather Application Using Angular Service
    Worker*.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Angular Material in our project will also install the `@angular/cdk`
    npm package, which contains specific behaviors and interactions used to build
    Angular Material.
  prefs: []
  type: TYPE_NORMAL
- en: The **Angular CDK** can be used to build custom UI libraries without relying
    on Angular Material. We will learn how to build such libraries in *Chapter 9*,
    *Building a Component UI Library Using Angular CLI and Angular CDK*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Angular Material library contains the following component templates that
    we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '**address-form**: This uses Angular Material form controls to enter address
    information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**navigation**: This contains a side navigation component along with a content
    placeholder and a title bar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dashboard**: This consists of multiple Angular Material card and menu components
    organized in a grid layout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**table**: This displays an Angular Material table with sorting and filtering
    enabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**tree**: This represents a visual folder structure in a tree view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our case, we will use the **navigation** component because we need a sidebar.
    Let’s see how we can generate that component:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Nx Console from the VSCode sidebar and select the **generate** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **@angular/material – navigation** option from the dialog that appears.
    The **@angular/material** namespace contains schematics that we can run to create
    Angular Material components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the name of the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.7 – Component name](img/B18465_08_07.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – Component name
  prefs: []
  type: TYPE_NORMAL
- en: Select the **visitor** library from the **project** dropdown that we created
    earlier:![Figure 8.8 – Project selection](img/B18465_08_08.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 8.8 – Project selection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Show more** button if the option is not displayed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Check the **flat** option so that the component will not be generated in a separate
    folder:![Figure 8.9 – The flat option](img/B18465_08_09.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 8.9 – The flat option
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The component will be the main one of the library, so we want to have it in
    the same folder with its related module file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter the folder where the component will be created:![Figure 8.10 – Component
    folder](img/B18465_08_10.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 8.10 – Component folder
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There is no need to define the module where the component will be created because
    the Angular CLI can deduce it directly from the **path** option.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Run** button to generate the component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Nx Console will create the **visitor** component in the **visitor** library
    of the Nx workspace. We now need to connect it with the main application of the
    workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `app.component.html` file and remove the `<packt-nx-welcome>` selector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `app.routes.ts` file and add a route configuration that will load
    the visitor portal when the URL contains the `tour` path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The route configuration contains two paths. The **default** path, denoted by
    the empty string, redirects to the `tour` path. The `tour` path lazily loads the
    module of the **visitor** library.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `visitor.module.ts` file and add a route configuration to load the
    **visitor** component that we created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The route configuration will activate `VisitorComponent` by default as soon
    as `VisitorModule` is loaded, using the `tour` path described in described in
    the step 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we now run the **serve** command from Nx Console and navigate to `http://localhost:4200`,
    we should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18465_08_11.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – Visitor portal
  prefs: []
  type: TYPE_NORMAL
- en: The Angular router will redirect us to `http://localhost:4200/tour` and display
    the visitor portal. It currently contains some demo data that Angular Material
    entered when we generated the navigation component. We will revisit it in the
    *Managing application state with NgRx* section to implement the full functionality
    using NgRx. For now, we will continue building the administrator portal in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Building the administrator portal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The administrator portal will be an Nx library with a single component, just
    like the visitor portal, except it will not be based on an Angular Material template.
    Let’s start scaffolding the structure of the library using Nx Console:'
  prefs: []
  type: TYPE_NORMAL
- en: Run Nx Console from the VSCode sidebar and select the **generate** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the dialog that appears, select the **@nx/angular – library** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter `admin` as the library name and click the **Run** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.12 – Library name](img/B18465_08_12.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – Library name
  prefs: []
  type: TYPE_NORMAL
- en: Click the **generate** option again and select the **@schematics/angular – component**
    option. The **@schematics/angular** namespace contains schematics that we can
    run in an Angular application using the Angular CLI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the same name for the component as in step 3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Component name](img/B18465_08_13.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 – Component name
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the library that we created from the **project** drop-down list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Project selection](img/B18465_08_14.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.14 – Project selection
  prefs: []
  type: TYPE_NORMAL
- en: Check the **flat** option so that the component will be created in the same
    folder as the module file of the library:![Figure 8.15 – The flat option](img/B18465_08_15.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 8.15 – The flat option
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Show more** button if the option is not displayed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the folder where the component will be created and click the **Run**
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.16 – Component folder](img/B18465_08_16.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.16 – Component folder
  prefs: []
  type: TYPE_NORMAL
- en: 'The Angular CLI will create the **admin** component inside the folder of the
    **admin** library. We now need to wire it up to the main application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.routes.ts` file and add a new route configuration object for
    the `admin` path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `admin.module.ts` file and add a route configuration to activate `AdminComponent`
    by default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the **serve** option of Nx Console to run the application, and navigate
    to `http://localhost:4200/admin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.17 – Administrator portal](img/B18465_08_17.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.17 – Administrator portal
  prefs: []
  type: TYPE_NORMAL
- en: The page will display the default template of the main component of the **admin**
    library.
  prefs: []
  type: TYPE_NORMAL
- en: We have now completed the scaffolding of our enterprise application. First,
    we created the Nx monorepo workspace that will host the portals of the application.
    Then, we used Nx Console to generate our portals and their main components. We
    also installed Angular Material to use its UI elements in our components.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will implement the functionality of the visitor portal
    using NgRx.
  prefs: []
  type: TYPE_NORMAL
- en: Managing application state with NgRx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The visitor portal will allow the user to see a list of available POIs and
    select one to view its location on a map. The list of available POIs and the selection
    of a POI is the global state of our application. We will integrate NgRx to manage
    the application state in the visitor portal by completing the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with the store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s begin by configuring the state of our application in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the state
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our application will consist of a `root` state for the whole application and
    a feature state for the visitor portal. We will start by executing the following
    command to create the `root` state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command uses the `generate` command of the Nx CLI, passing the
    following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@nx/angular:ngrx`: Indicates that we want to set up an NgRx state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app`: The name of the state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--root`: Indicates that we want to configure a root state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--no-interactive`: Disables interactive input prompts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--parent=apps/tour/src/app/app.module.ts`: Registers the state with the main
    Angular module of our application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The previous command will add all necessary NgRx npm packages in the `package.json`
    file and install them. It will also modify the `app.module.ts` file to configure
    all NgRx-related artifacts, such as the store and effects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **visitor** library will not manage the data for the state of the visitor
    portal. Instead, we will create a new library in our Nx workspace to fetch and
    store data in the feature state. Execute the following command of the Nx CLI to
    create a new library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will generate the `poi` library in our Nx monorepo. Now,
    we can set up the feature state using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command uses the `generate` command of the Nx CLI to register
    a feature state, passing additional options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@nx/angular:ngrx`: Indicates that we want to set up an NgRx state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`poi`: The name of the state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--no-interactive`: Disables interactive input prompts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--parent=libs/poi/src/lib/poi.module.ts`: Registers the state with the Angular
    module of our library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--barrels`: Indicates using barrel files to re-export NgRx artifacts such
    as selectors and state. The name of a barrel file is usually `index.ts` by convention.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The preceding command will create a folder, named `+state` by convention, inside
    our library, which contains the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`poi.actions.ts`: Defines NgRx actions for the feature state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`poi.effects.ts`: Defines NgRx effects for the feature state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`poi.models.ts`: Defines an entity interface for POI data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`poi.reducer.ts`: Defines NgRx reducers for the feature state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`poi.selectors.ts`: Defines NgRx selectors for the feature state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Nx CLI has done most of the job by adding the necessary content in the
    previous files, eliminating the boilerplate code for us. We now need to create
    an Angular service in the library that will fetch the POI data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `poi.models.ts` file and add the following properties to the `PoiEntity`
    interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following command to generate the Angular service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will create an Angular service called `poi` in the **poi**
    library.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `poi.service.ts` file and add the following `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inject `HttpClient` in the `constructor` of the `PoiService` class and create
    a method to get POI data from the `assets/poi.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use the built-in HTTP client of the Angular framework to get POI data by
    initiating a GET HTTP request.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can get the `poi.json` file from the GitHub repository in the *Getting started*
    section and copy it to the `apps\tour\src\assets` folder of your workspace.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `poi.effects.ts` file and import the `map` and `PoiService` artifacts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inject `PoiService` in the `PoiEffects` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `init$` property to use the `poiService` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: An NgRx effect is responsible for listening to all actions dispatched in the
    store. When a `PoiActions.initPoi` action is dispatched, the `init$` property
    is triggered and calls the `getAll` method of the `poiService` variable. The `init$`
    property knows which action to listen for by the parameters in the `ofType` operator.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `ofType` operator can accept more than one action.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the data is fetched successfully, the effect will dispatch a new action in
    the store, `PoiActions.loadPoiSuccess`, with POI data as the payload. If there
    is a failure when getting the data, it will dispatch a `PoiActions.loadPoiFailure`
    action in the store.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `app.module.ts` file and import `HttpClientModule` from the `@angular/common/http`
    namespace. Also add the `HttpClientModule` class in the `imports` array of the
    `@NgModule` decorator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The global state of our application is now configured and ready to be used.
    In the following section, we will create additional Angular components in the
    visitor library that will interact with the feature state of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with the store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The visitor portal will interact with the feature state of our application through
    two Angular components. One component will display the list of POIs and allow
    the user to select one. The other component will display the selected POI inside
    Google Maps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Initially, we will build the component that displays the list of POIs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `visitor.module.ts` file and add the following `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `PoiModule` in the `imports` array of the `@NgModule` decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We import `PoiModule` so that the **poi** feature state is registered in the
    store as soon as the visitor portal is loaded.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Execute the following command of the Nx CLI to create the Angular component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `poi-list.component.ts` file and modify the `import` statements accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `PoiListComponent` class so that it dispatches the `PoiActions.initPoi`
    action in the store to fetch POI data when the component is initialized:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We execute the action as a method and pass its result to the `dispatch` method
    of the `store` variable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a component property that invokes the `PoiSelectors.selectAllPoi` selector
    to list POI data from the store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use the `select` method of the `store` variable to execute the selector.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We did not create the `PoiSelectors.selectAllPoi` selector. NgRx did it for
    us when we generated the feature state in the **poi** library.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `poi-list.component.html` file and replace its content with the following
    HTML template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use the `<mat-action-list>` component of the Angular Material library to
    display each POI as a single action item. We subscribe to the `pois$` property
    using the `async` pipe and create a `<button>` element with the `mat-list-item`
    directive for each POI.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `visitor.component.html` file and replace the `<mat-nav-list>` component
    with the `<packt-poi-list>` component we created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use Nx Console to start the application, and you should see the following output
    in the menu sidebar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.18 – List of POIs](img/B18465_08_18.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.18 – List of POIs
  prefs: []
  type: TYPE_NORMAL
- en: We have already created the Angular component to display the available POIs.
    Let’s see now how to create the component to display a POI on the map using Google
    Maps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Angular Material library contains a component for Google Maps that we can
    use in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command of the `npm` client to install the Google Maps component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `visitor.module.ts` file and add the following `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `GoogleMapsModule` to the `imports` array of the `@NgModule` decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `index.html` file of the application and add the Google Maps JavaScript
    API inside the `<head>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have installed and registered Google Maps in our application, let’s
    create the Angular component that will host it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command of the Nx CLI to create a new Angular component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `map.component.ts` file and add the following `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inject the `Store` service in the `constructor` of the `MapComponent` class
    and declare a property to get the selected POI from the store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `map.component.html` file and replace its content with the following
    HTML template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding template, we subscribe to the `poi$` property using the `async`
    pipe. As soon as we get a selected POI from the store, we display a `<google-map>`
    component and set the center of the map to the POI coordinates. Furthermore, we
    add a marker on the map in the specified POI coordinates.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `visitor.component.html` file and replace the `<!-- Add Content Here
    -->` comment with the `<packt-map>` selector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Angular component we created will show the location of a POI on the map
    as soon as we select it from the list. If you try to choose a POI from the list,
    you will notice that nothing happens. Why is that?
  prefs: []
  type: TYPE_NORMAL
- en: 'The global state of the application does not currently know when a POI has
    been selected. We need to add the necessary code to set the selected POI and interact
    with the store:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `poi.actions.ts` file and add a new action to pass the ID of the selected
    POI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `poi.reducer.ts` file and add a new statement in the `reducer` property
    that will listen to the `selectPoi` action and save the selected POI in the store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `poi-list.component.ts` file and import the `PoiEntity` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new method to dispatch the `selectPoi` action to the store along with
    the selected `PoiEntity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `poi-list.component.html` file and bind the `selectPoi` method to
    the `click` event of the `<button>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To see the new functionality in action, run the application using the **serve**
    option from Nx Console and select a POI from the list. The output of the application
    should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.19 – POI selection](img/B18465_08_19.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.19 – POI selection
  prefs: []
  type: TYPE_NORMAL
- en: In this project, we use Google Maps in development mode. For production environments,
    you should get an API key from [https://developers.google.com/maps/get-started](https://developers.google.com/maps/get-started)
    and include it in the Google Maps JavaScript API script that you load in the `index.html`
    file as `<script src="img/js?key=YOUR_API_KEY"></script>`.
  prefs: []
  type: TYPE_NORMAL
- en: We have now completed all the required features for the portal of our visitors.
    Well done! Implementing the basic functionality of the visitor portal required
    interacting with NgRx to manage the global state of our application.
  prefs: []
  type: TYPE_NORMAL
- en: The global state was separated into the root state for the application and the
    feature state for the visitor portal. The **visitor** library used the latter
    to create Angular components to display a POI list and select one to view in Google
    Maps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will build the administrator portal to get visit statistics
    for each POI.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing data with graphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The administrator portal will display traffic visits for each POI using a chart.
    When visitors visit a POI by clicking its marker on the map, traffic will be generated.
    The application will persist visit data in the local storage of the browser. It
    will keep a record for each visit containing the ID of the POI and the total visits.
    The administrator portal will consist of the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Persisting visit data in the store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying visit statistics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following section, we will start building the administrator portal by
    implementing the mechanism to keep track of visits.
  prefs: []
  type: TYPE_NORMAL
- en: Persisting visit data in the store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our application does not record traffic statistics for POIs yet. Let’s see
    how we can accomplish this task:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `map.component.html` file and add a `<map-info-window>` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `<map-info-window>` component is a pop-up window that displays additional
    information about the current map marker. It shows the title, image, and description
    of a POI as an Angular Material card component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `<mat-card>` component contains a header denoted by the `<mat-card-header>`
    component and an image denoted by the `<img>` element with the `mat-card-image`
    directive. The `<mat-card-content>` component indicates the main content of the
    card.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `visitor.module.ts` file and add the following `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `MatCardModule` class in the `imports` array of the `@NgModule` decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `MatCardModule` class is an Angular Material module that exposes all the
    components we need to create a card component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `map.component.ts` file and modify the `import` statements accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a component property to get a reference for the information window
    using the `@ViewChild` decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method to open the information window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, we call the `open` method of the information window reference,
    passing the associated map `marker` as a parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `map.component.html` file and bind the `showInfo` component method
    to the `mapClick` event of the `<map-marker>` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We create the `marker` template reference variable to get a reference to the
    `mapMarker` object and pass it as a parameter in the `showInfo` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the application using the **serve** option of Nx Console and select a POI
    from the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the POI marker on the map, and you should get output similar to the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.20 – Map information window](img/B18465_08_20.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.20 – Map information window
  prefs: []
  type: TYPE_NORMAL
- en: 'We consider that a POI is visited when the visitor clicks on the map marker
    and the information window appears. Our application will then notify the store
    of that action to save it in the local storage. Let’s create the logic to interact
    with the store:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `poi.actions.ts` file and create the following actions for the feature
    of visiting a POI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `poi.effects.ts` file, and create a new effect that listens to the
    `visitPoi` action and increases the total visits of the specified `poiId` by one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, we fetch the local storage key that begins with the word
    `tour-`, followed by the POI ID. If this is located, we increment it by one and
    update the local storage. Otherwise, we initialize it to one.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In a real case, it would be better to abstract the logic of local storage in
    an Angular service that would act as a wrapper over the global `localStorage`
    object. We encourage you to create such a service while building this project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `map.component.ts` file and import `PoiActions` from the `@packt/poi`
    namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `showInfo` component method so that it dispatches a `visitPoi` action
    to the store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, open the `map.component.html` file and pass the selected POI ID into
    the `showInfo` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our application can now record the visits of each POI and keep them in the local
    storage of the browser. In the following section, we will create the main component
    of the administrator portal that leverages visit data.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying visit statistics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The administrator portal will display visit statistics on its main component
    with a graph. We will use the **ng2-charts** library to visualize data on a pie
    chart. Let’s see how to add the required functionality in that component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `ng2-charts` library using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will also install the `chart.js` library, which is at
    the core of the `ng2-charts` library.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `admin.module.ts` file, and import `PoiModule` from the `@packt/poi`
    namespace and `NgChartsModule` from the `ng2-charts` npm package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `admin.component.ts` file and modify the `import` statements accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `AdminComponent` class so that it interacts with the application
    store to get POI data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, we manually subscribe to the `selectAllPoi` selector
    using a `subscription` property instead of an `async` pipe. In this case, we must
    also unsubscribe manually in the `ngOnDestroy` life cycle hook of the component
    using the `unsubscribe` method. If we fail to do so, we may introduce a memory
    leak to our application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that we have set up the interaction with the store, we can get statistics
    from the local storage and create our pie chart:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command of the Nx CLI to create a service in the `admin`
    library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `admin.service.ts` file and add the following `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method to get all saved traffic statistics from the local storage
    of the browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding method, we get the traffic of each POI based on its `id` property.
    We then convert the `stat` property to a number by adding the `+` prefix.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `admin.component.ts` file and add the following `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare component properties for the labels and the actual data that we will
    display on the pie graph, and inject `AdminService` into the `constructor` of
    the `AdminComponent` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a component method to set the labels and the data of the graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The graph labels are the titles of the POI, and the data comes from the `getStatistics`
    method of the `adminService` variable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Call the `buildChart` method inside the `subscribe` method of the `selectAllPoi`
    selector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, open the `admin.component.html` file and replace its content with
    the following HTML template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding template, we use the `baseChart` directive to convert the `<canvas>`
    element to a graph. The graph is set to `pie` using the `type` property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If we now run our application using Nx Console, visit a POI from the map, and
    switch to the `http://localhost:4200/admin` URL, we should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.21 – POI statistics](img/B18465_08_21.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.21 – POI statistics
  prefs: []
  type: TYPE_NORMAL
- en: An administrator can now have a complete overview of how each POI does from
    a visit perspective. Our administrator portal has now been completed. The visitor
    portal can interact with the store and save visit statistics for each POI in the
    local storage of the browser. The administrator portal can then fetch and display
    that data on a pie chart.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we built an enterprise portal application to visit POIs on
    a map and display visit statistics for each one. First, we saw how to use Nx to
    scaffold a new Nx monorepo application. Then, we created two different portals
    for our application, a visitor and an administrator. We learned how to use the
    NgRx library in the visitor portal to maintain and manage the state of our application.
    Finally, we saw how to use a chart library in the administrator portal to display
    statistics for each POI.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will use the Angular CLI to build a UI component library
    using the Angular CDK.
  prefs: []
  type: TYPE_NORMAL
- en: Practice questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s take a look at a few practice questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Which npm package creates an Nx monorepo application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the differences between the Angular CLI and Nx CLI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we enable NgRx in the library of a monorepo?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we select data from the store?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we interact with HTTP in NgRx?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where do we modify the state of an NgRx store?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between a root and a feature state?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which npm package can we use for Google Maps in an Angular application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we subscribe to an NgRx selector manually?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which component do we use to display additional information on Google Maps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some links to build upon what we learned in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Nx: [https://nx.dev](https://nx.dev)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NgRx: [https://ngrx.io](https://ngrx.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NgRx store guide: [https://ngrx.io/guide/store](https://ngrx.io/guide/store)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular Material card component: [https://material.angular.io/components/card/overview](https://material.angular.io/components/card/overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular Google Maps: [https://github.com/angular/components/tree/main/src/google-maps](https://github.com/angular/components/tree/main/src/google-maps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng2-charts`: [https://valor-software.com/ng2-charts](https://valor-software.com/ng2-charts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create-nx-workspace`: [https://www.npmjs.com/package/create-nx-workspace](https://www.npmjs.com/package/create-nx-workspace)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
