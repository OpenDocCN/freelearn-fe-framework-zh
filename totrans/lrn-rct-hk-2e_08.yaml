- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Hooks and React Suspense for Data Fetching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to use React Context as an alternative
    to manually passing down props. We learned about context providers, consumers
    and the Context Hook.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to first set up a simple backend server from a
    JSON file using the `json-server` tool. Then, we are going to fetch data from
    our server using an Effect Hook in combination with a State Hook. Next, we are
    going to do the same using TanStack Query, a popular data fetching library for
    React that makes use of Hooks. Finally, we will learn about React Suspense, which
    can be used to defer rendering until the content has finished loading.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a simple backend server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting resources using an Effect and a State Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using TanStack Query to request resources and make changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing React Suspense and Error Boundaries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A fairly recent version of Node.js should already be installed. The Node Package
    Manager (`npm`) also needs to be installed (it should come with Node.js). For
    more information on how to install Node.js, please check out their official website:
    [https://nodejs.org/](https://nodejs.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to use **Visual Studio Code** (**VS Code**) for the guides in
    this book, but everything should work similarly in any other editor. For more
    information on how to install VS Code, please refer to their official website:
    [https://code.visualstudio.com](https://code.visualstudio.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we use the following versions:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js v22.14.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm` v10.9.2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Code v1.97.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The versions mentioned in the preceding list are the ones used in the book.
    While installing a newer version should not be an issue, please note that certain
    steps might work differently on a newer version. If you are having an issue with
    the code and steps provided in this book, please try using the mentioned versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter06](https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter06)'
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended that you write the code on your own. Do not simply
    run the code examples that are provided with the book. It is important to write
    the code yourself to be able to learn and understand it properly. However, if
    you run into any issues, you can always refer to the code example.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a simple backend server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can implement requests, we need to implement a server. Since we are
    focusing on the user interface in this book, we are going to set up a dummy server,
    which will allow us to test out requests. We are going to use the `json-server`
    tool to create a mock **Representational State Transfer** (**REST**) **Application
    Programming Interface** (**API**) from a JSON file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the db.json file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To be able to use the `json-server` tool, we first need to create a `db.json`
    file, which is going to contain the database for the server. The `json-server`
    tool will then create a REST API that allows us to access and modify the `db.json`
    file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET` requests, to view data from the file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST` requests, to insert new data into the file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUT` and `PATCH` requests, to adjust existing data in the file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE` requests, to remove data from the file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The structure of the REST API is inferred from a JSON object in the `db.json`
    file. For all modifying actions (`POST`, `PUT`, `PATCH`, and `DELETE`), the updated
    file will be automatically saved by the tool.
  prefs: []
  type: TYPE_NORMAL
- en: We can use our existing structure for posts, which we defined as `defaultPosts`
    in our App component, but we need to provide an additional `id` value, so that
    we can query posts from the database later. Additionally, we give each post a
    `featured` value. This will be important later to distinguish between featured
    and regular posts when we implement the request.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For the users, we need to come up with a way to store usernames and passwords.
    For simplicity, we just store the password in plain text *(never do this in a
    production environment!)*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now all that is left to do is to combine these two arrays into a single JSON
    object, by storing the posts array under a `posts` key, and the users array under
    a `users` key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started creating the JSON file for our backend server now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter05_2` folder to a new `Chapter06_1` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter06_1` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `server/` folder, directly inside the `Chapter06_1` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `server/db.json` file with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That’s all we need to automatically create a simple backend with a REST API
    using the `json-server` tool. Let’s continue by setting up the tool.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the json-server tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we are going to install and start our backend server by using the `json-server`
    tool:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install the `json-server` tool, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, start the backend server by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `npx` command executes commands that were installed locally in a project.
    We need to use `npx` here, because we did not globally install the `json-server`
    tool (via `npm install -g json-server`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We executed the `json-server` tool, and it is watching the `server/db.json`
    file that we created earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the `json-server` tool defines the following routes for each `key`
    in the JSON object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can go to `http://localhost:3000/posts/1` in order to see our post
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – The json-server tool serving a post via its REST API!](img/B31327_06_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – The json-server tool serving a post via its REST API!
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the tool created a full REST API from the database JSON file
    for us! Now, let’s continue by configuring `package.json` scripts so that the
    `json-server` tool is started together with our frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the package.json scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s get started adjusting the `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `package.json` and define a new script called `dev:server`, by inserting
    it in the `scripts` section. We also make sure to change the port to be adjacent
    to the Vite default port (which is `5173`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we rename the `dev` script to `dev:client`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the `package.json` file, otherwise running `npm install` later will overwrite
    our changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it is still running, quit the `json-server` tool by pressing *Ctrl+C*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we install a tool called `concurrently`, which lets us start the server
    and client at the same time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we edit `package.json` again and define a new `dev` script by using the
    `concurrently` command and then passing the server and client commands as arguments
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Try executing the following command now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see that this command is starting both the server and the client:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – The concurrently tool running our server and client in parallel](img/B31327_06_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – The concurrently tool running our server and client in parallel
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have both the client and the server running, let’s move on to configuring
    a proxy to avoid having to deal with cross-site requests.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a proxy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For security reasons, browsers have restrictions on making requests to different
    domains. This restriction is called **cross-origin resource sharing (CORS)** and
    it prevents us from being able to make requests to URLs with a different origin.
    The origin consists of the domain and port. In our case, the domain is the same
    (`localhost`), but the port is different (`5173` vs `5174`). It would be best
    to stay on the same domain and port to make requests from a frontend to a backend.
    So, we need to configure a proxy that will forward requests from `http://localhost:5173/api/`
    to `http://localhost:5174/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s get started configuring the proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `vite.config.js` and define a `proxy` config that will be bound to the
    `/api` path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the target to our backend server running at `http://localhost:5174`, and
    rewrite the path to remove the `/api` from it before forwarding the request to
    our server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This proxy configuration will link `/api` to our backend server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Quit the server and client if they are already running. Then, start them again
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, access the API by opening `http://localhost:5173/api/posts/1` in your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see, the post object is still being served properly, but now from
    the `/api` path through the proxy defined in Vite!
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter06/Chapter06_1`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s move on to requesting resources using an Effect and a State/Reducer
    Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Requesting resources using an Effect and a State/Reducer Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before learning how to use a library to implement requests using Hooks, we are
    going to implement them manually, using an Effect Hook to trigger the request,
    and a State/Reducer Hook to store the result.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching posts from the server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are now going to implement a way to fetch posts by using an Effect Hook.
    Then, we will store it by extending the already defined Reducer Hook. Let’s get
    started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter06_1` folder to a new `Chapter06_2` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter06_2` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, edit `src/reducers.js` and define a new `FETCH_POSTS` action, which
    is simply going to return the new list of posts from the action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, edit `src/App.jsx` and import the `useEffect` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Remove* the `featuredPosts` and `defaultPosts` arrays.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Adjust the default value of the Reducer Hook to be an empty array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define an Effect Hook in the App component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the Hook, we call `fetch` to make a request to the `/api/posts` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Parse the JSON response to get back a `posts` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, dispatch the `FETCH_POSTS` action with the `posts` array returned from
    the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pass an empty array to the Effect Hook dependency array to make sure it only
    triggers when the component mounts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We still need to separate featured posts from non-featured posts, so let’s
    use `filter` to split up the array into two arrays, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We reverse the order here to make sure the newest posts are shown first. If
    we had a `createdAt` property, we could use that instead to sort the posts properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pass `regularPosts` instead of `posts` to the `PostList` component to ensure
    that featured posts are not rendered twice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the client and server, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, go to `http://localhost:5173/` in your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see, the app still works the same way as before! To verify that the
    posts are really coming from our database, make a change to `db.json`, then refresh
    the page. You will see that the change is visible in the app!
  prefs: []
  type: TYPE_NORMAL
- en: In development mode, you will see two `GET` requests. This is due to React rendering
    components twice in strict mode to help you spot side effects that may happen
    when re-rendering components (for example, forgetting to clean up timeouts/intervals).
  prefs: []
  type: TYPE_NORMAL
- en: In production mode, the component will only be rendered once and thus only one
    `GET` request will be sent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Quick detour: The async/await construct'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Regular functions** are defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '**Regular anonymous functions** are defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '**Asynchronous functions** are defined by adding the `async` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '**Asynchronous anonymous functions** are also possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Within `async` functions, we can use the `await` keyword to wait for promises
    to resolve before continuing. Instead of having to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now write the same function like this using `async`/`await`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous section, we used the Promise API to work with the result of
    an asynchronous function by using the `.then()` function inside the Effect Hook.
    Effect Hooks do not support passing an async function to them to prevent race
    conditions. However, it would be possible to define an async function inside the
    Hook and then call it immediately. So, we could also define the Hook as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The `void` operator shows that we did not just accidentally call an `async`
    function without `await`. In this case, we want to call the asynchronous function
    but do not care about waiting for it to finish.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the `async`/`await` construct can make our code easier to read
    in some cases. You can choose either pattern (`then` or `async`/`await`) depending
    on which one makes the code more readable. However, it is best practice not to
    mix both in the same function. Of course, instead of using `dispatch` and the
    Reducer Hook, we could also call `setPosts` here, if we had a State Hook instead.
  prefs: []
  type: TYPE_NORMAL
- en: Now that posts are successfully loaded from the database, let’s implement a
    way to create posts via the backend server.
  prefs: []
  type: TYPE_NORMAL
- en: Creating new posts on the server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For creating posts, we simply need to adjust the submit handler function to
    use `fetch` to perform a POST request. Let’s get started doing that now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/components/post/CreatePost.jsx` and make the `handleSubmit` function
    `async`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the function, after collecting the values, create a fetch request to
    `/api/posts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure this is a POST request and set the header so that our backend server
    knows we will be sending a JSON object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can pass our `post` object as the request body, by turning it into
    a JSON string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the response wasn’t a success, throw an error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Otherwise, we dispatch the `CREATE_POST` action to show the new post on the
    client-side and reset the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new post using the frontend, and then check the `server/db.json` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As we can see, the new post was successfully inserted into the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – We successfully inserted a new post into the database](img/B31327_06_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – We successfully inserted a new post into the database
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter06/Chapter06_2`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have successfully implemented fetching and creating posts by directly
    using the Fetch API and an Effect Hook, we can move on to learning about using
    a library to request resources and make changes.
  prefs: []
  type: TYPE_NORMAL
- en: Using TanStack Query to request resources and make changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we used an Effect Hook to trigger the request, and
    a Reducer Hook to update the state, using the result from the request. Instead
    of manually implementing requests like this, we can instead use the TanStack Query
    library. This library not only allows us to easily fetch resources, but also caches
    the result for us and provides ways to invalidate the state. Invalidation allows
    us to, for example, re-fetch posts from the server after creating a new post,
    instead of having to manually dispatch an action.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we can get started using it, we need to install and set up the library.
    TanStack Query is a library used to manage state of server data. It consists of
    3 parts:'
  prefs: []
  type: TYPE_NORMAL
- en: A **Query Client**, which manages the cache and invalidation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **Query Client Provider**, which wraps your application to provide the query
    client to all components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A collection of hooks, such as Query and Mutation Hooks. The **Query Hook**
    is used for fetching and subscribing to data, while the **Mutation Hook** is used
    when you need to modify data on the server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s get started setting up TanStack Query now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter06_2` folder to a new `Chapter06_3` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter06_3` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the TanStack Query library, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Additionally, install the ESLint plugin as a dev dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `eslint.config.js` and import the plugin there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the plugin, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we can get started setting up TanStack Query itself. First, create a new
    `src/api.js` file, which will contain the Query Client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `src/api.js` and import and create the Query Client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are creating a single instance of the query client here to ensure that all
    parts of our app use the same query client (and thus the same cache).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, edit `src/App.jsx`, *remove* the `useReducer`, `useEffect` and `postsReducer`
    imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* them with imports of the `queryClient` and the `QueryClientProvider`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the App component, *remove* the Hooks related to fetching posts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Wrap the app with a `QueryClientProvider`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Remove* the `dispatch` prop from the `CreatePost` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this point in the chapter, the `featuredPosts` and `regularPosts` arrays
    are not defined anymore, causing ESLint errors. Ignore these errors for now, we
    will be fixing them soon.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are ready to use TanStack Query!
  prefs: []
  type: TYPE_NORMAL
- en: Fetching posts using a Query Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that the library is set up, we can start using it. We will start by fetching
    posts using a Query Hook. To do this, we are going to create a new `PostFeed`
    component, which will handle the fetching logic, while keeping `PostList` as a
    UI component that renders a list of components. We are also going to define a
    function that will fetch posts for us in the `src/api.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started fetching posts using a Query Hook now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/api.js` and define a new function that accepts a `featured` prop
    and then fetches posts for us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We make a call to the API, passing the `featured` prop as a query param. This
    will cause `json-server` to filter the posts by their `featured` value for us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Parse the response as JSON and return it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new `src/components/post/PostFeed.jsx` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, import the `useQuery` function, the `PostList` component and the
    `fetchPosts` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define the component, which accepts a `featured` prop to toggle whether
    to render featured components or regular components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a Query Hook, from which we use the `data` and `isLoading` values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For each Query Hook, we need to define a `queryKey`. The `queryKey` is used
    to cache the results of a query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we, for example, fetch with the same `queryKey` in another component, we
    will get the cached result instead of making another request. React Query will
    always try to first get the result from the cache (if it exists for a given `queryKey`),
    and if it does not exist in the cache yet, it will make a request in the background
    for us and cache it.
  prefs: []
  type: TYPE_NORMAL
- en: This is very useful as it allows us to fetch data further down in the component
    tree, directly wherever we need it – avoiding prop drilling without compromising
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: The `queryKey` can also be a source of bugs, when it is accidentally reused
    for different requests. For example, we need to add the `featured` prop to the
    `queryKey` here, otherwise only either featured or regular posts would get fetched
    and returned twice. If you are getting weird results or outdated data returned
    from Query Hooks, make sure to check your query keys and ensure that you have
    a unique key for each request and that all parameters passed to the query function
    are also added to the query key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we define the `queryFn` – a function that will be called when the query
    is executed. In this case, we simply call the `fetchPosts` function with the `featured`
    prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the Query Hook is in a loading state, we show a loading message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Similarly, if fetching the data did not work, we show an error message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Otherwise, everything is fine, and we can render the `PostList`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/App.jsx` and *remove* the following `PostList` import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* it with an import of the `PostFeed` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `App` component, replace the `PostList` components with `PostFeed`
    components, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After implementing a way to fetch posts, let’s continue by using a Mutation
    Hook to create a new post.
  prefs: []
  type: TYPE_NORMAL
- en: Creating posts using a Mutation Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fetching posts required us to make a request to get data from the server when
    the component mounts. However, for creating posts, we want to make a request to
    the server when the user presses a button. To implement such a behavior, we need
    a Mutation Hook instead of a Query Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started implementing post creation using a Mutation Hook now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/api.js` and define a new function to create a post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside it, we make a POST request, similarly to what we did before:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If there was a problem with making the request, we throw an error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Otherwise, if the request was successful, we return the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/components/post/CreatePost.jsx` and import the `useMutation` and
    `createPost` functions, as well as the `queryClient`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Remove* the `dispatch` prop from the component, as we will not need it anymore:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the component, add a new Mutation Hook, passing the `createPost` function
    as the `mutationFn`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an `onSuccess` handler, which will invalidate all queries that start with
    the `''posts''` query key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When a query key is invalidated, all Query Hooks that use it are automatically
    re-executed to fetch the new data, and the components are re-rendered to show
    it. In this case, we invalidate all query keys that start with `'posts'`, so we
    will be invalidating both `['posts', true]` for the featured posts feed, and `['posts',
    false]` for the regular posts feed.
  prefs: []
  type: TYPE_NORMAL
- en: '*Replace* the whole `handleSubmit` function with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, call the `mutate` function from the Mutation Hook, and reset the form
    after successfully executing the mutation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Additionally, we can improve the user experience for the component now. For
    example, we can use the `isPending` state to disable the submit button while the
    mutation is pending:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If there is an error during the mutation, we can also show the error message
    in red at the end of the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Try running the app, and you will see that it still works the same way as before,
    but now using TanStack Query!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When inserting a new post, you may notice that it gets added to the end now.
    Unfortunately, we cannot control how `json-server` inserts new posts into the
    array. If you want to add this behavior again, I suggest adding a `createdAt`
    timestamp to all posts and then use the `_sort` query param provided by the `json-server`
    tool to sort the posts by this timestamp. Doing so is left as an exercise for
    you.
  prefs: []
  type: TYPE_NORMAL
- en: With the new structure of our app, we can further improve it a bit by using
    React Suspense and Error Boundaries!
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter06/Chapter06_3`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing React Suspense and Error Boundaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we used the `isLoading` state from TanStack Query to
    show a loading message when the posts are still being fetched. While this works
    fine, handling loading states like that can get a bit messy. A better way to model
    loading states is to use React Suspense. React Suspense is a special component
    that can display a fallback until its children have finished loading. To use React
    Suspense, data fetching frameworks and libraries need to support it. Thankfully,
    TanStack Query supports Suspense. Frameworks like Relay and Next.js support it
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Suspense Boundary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use Suspense, we need to define a Suspense Boundary with a fallback. If any
    child component within the boundary is fetching data, the fallback will be rendered
    in place of the boundary, replacing all the child components of it. When all data
    is fetched successfully, all child components will be rendered. This allows us
    to write code that assumes data is always there, and to handle the edge case further
    up in the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now get started setting up a Suspense Boundary for the post feed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter06_3` folder to a new `Chapter06_4` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter06_4` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `src/App.jsx` and import `Suspense`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Adjust the `App` component to render the post feed within a Suspense Boundary,
    providing a loading message as fallback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to adjust the `PostFeed` component to use the Suspense Query Hook
    instead. Edit `src/components/post/PostFeed.jsx` and adjust the import as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, adjust the Hook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now *remove* the following code from the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will see that instead of getting two loading messages (one for featured
    posts and one for regular posts), we now only see one loading message from the
    Suspense Boundary!
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Loading messages before and after using React Suspense](img/B31327_06_04.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Loading messages before and after using React Suspense
  prefs: []
  type: TYPE_NORMAL
- en: 'The loading messages may be disappearing too quickly for you to see, because
    we are running the backend locally, so there is no network delay. This is not
    a realistic scenario. In production, we would have latency on every request that
    we make. We can use the DevTools to simulate a slower network connection; let’s
    do that now:'
  prefs: []
  type: TYPE_NORMAL
- en: In Google Chrome, open the inspector by right clicking on the website and pressing
    **Inspect**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The inspector will open, inside it, go to the **Network** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top of the Network tab, click on the **No throttling** dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **3G** preset. See the following screenshot for reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Simulating slow networks in Google Chrome DevTools](img/B31327_06_05.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Simulating slow networks in Google Chrome DevTools
  prefs: []
  type: TYPE_NORMAL
- en: Refresh the page. You will now see the app slowly loading the posts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do not forget to set it back to **No throttling** to avoid having to wait so
    long for requests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, let’s move on to setting up an Error Boundary.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an Error Boundary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have learned, a Suspense Boundary can provide a fallback while components
    are fetching data. However, you may have noticed that we also removed the error
    handling code. To provide a fallback when an error happens in a child component,
    we can use an Error Boundary. Error Boundaries work similar to Suspense Boundaries,
    but they react to error states rather than loading states.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now get started setting up an Error Boundary:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install the `react-error-boundary` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, we create a component that will be rendered as a fallback when an error
    happens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new `src/FetchErrorNotice.jsx` file. Inside it, define a component
    that takes a `resetErrorBoundary` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `resetErrorBoundary` function can be used to reset the operation that caused
    the error. In our case, it will retry the request to fetch posts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Render an error message and a button that triggers the reset function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, edit `src/App.jsx` and import the `ErrorBoundary`, `QueryErrorResetBoundary`
    and `FetchErrorNotice`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `App` component, wrap the Suspense Boundary with an Error Boundary,
    which is in turn wrapped by the `QueryErrorResetBoundary`, which provides the
    `reset` function to retry queries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If it is currently running, stop the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, start only the client, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the app in your browser, you will see the loading message. Wait a while
    until the request times out. Then, you will see the error message and the retry
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.6 – The Error Boundary being triggered by a request timeout](img/B31327_06_06.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – The Error Boundary being triggered by a request timeout
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, without quitting the client, additionally start the server, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press the **Try again** button. You will see the loading message again and then
    the list of posts!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see, Error Boundaries allow us to manage error states by displaying
    a fallback component and functionality to reset the operation that caused the
    error.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter06/Chapter06_4`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first learned how to set up a simple API server from a JSON
    file. Then, we learned how to fetch and create posts using Effect and State/Reducer
    Hooks. Next, we implemented the same functionality using the TanStack Query library,
    which simplified our code and allowed us to leverage its caching abilities. Finally,
    we learned how to deal with loading states using React Suspense and error states
    using Error Boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn about form handling in depth, by
    using Form Actions and Hooks, such as the `useActionState` Hook to handle form
    states and the `useOptimistic` Hook to implement optimistic updates.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To recap what we have learned in this chapter, try to answer the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How can we easily create a full REST API from a JSON file for mocking purposes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the advantages of using a proxy to access our backend server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which combinations of Hooks can be used to implement data fetching?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which advantages does TanStack Query have over our simple data fetching implementation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Hook in TanStack Query is used for fetching data?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Hook in TanStack Query is used for making changes to the server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What role does the query key play in the TanStack Query library?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a Suspense Boundary used for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are Error Boundaries used for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Official documentation of the `json-server` tool: [https://github.com/typicode/json-server](https://github.com/typicode/json-server)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official documentation of the `concurrently` tool: [https://github.com/open-cli-tools/concurrently](https://github.com/open-cli-tools/concurrently)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official documentation of TanStack Query for React: [https://tanstack.com/query/latest/docs/framework/react/overview](https://tanstack.com/query/latest/docs/framework/react/overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More information on **cross-origin resource sharing** (**CORS**): [https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More information on the proxy setting in the Vite config: [https://vite.dev/config/server-options#server-proxy](https://vite.dev/config/server-options#server-proxy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More information on React strict mode: [https://react.dev/reference/react/StrictMode](https://react.dev/reference/react/StrictMode)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Blog article about fetching data with React Hooks, without a library: [https://www.robinwieruch.de/react-hooks-fetch-data/](https://www.robinwieruch.de/react-hooks-fetch-data/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More information about Suspense: [https://react.dev/reference/react/Suspense](https://react.dev/reference/react/Suspense)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More information about Error Boundaries: [https://github.com/bvaughn/react-error-boundary](https://github.com/bvaughn/react-error-boundary)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/wnXT0](Chapter_06.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_%283%29.png)'
  prefs: []
  type: TYPE_IMG
