- en: Creating a Signup Component
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建注册组件
- en: In this chapter, we will start our journey in application development. We will
    build a signup page. During the process, we will also explore different features
    of Firebase. We will take a look at how to enable Firebase authentication in the
    console, which is required to interact with the authentication feature module.
    Firebase supports many authentication mechanisms but, in this project, we will
    enable Email/Password authentication. Then, we will go ahead and build a signup
    form template. We will add a functionality in the signup component. In this process,
    we will also handle error scenarios. This will make our application more robust
    and less error-prone.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始我们的应用程序开发之旅。我们将构建一个注册页面。在这个过程中，我们还将探索 Firebase 的不同功能。我们将查看如何在控制台中启用
    Firebase 身份验证，这是与身份验证功能模块交互所必需的。Firebase 支持许多身份验证机制，但在这个项目中，我们将启用电子邮件/密码身份验证。然后，我们将继续构建注册表单模板。我们将在注册组件中添加一个功能。在这个过程中，我们还将处理错误场景。这将使我们的应用程序更加健壮，减少错误的可能性。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Enabling authentication in Firebase
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Firebase 中启用身份验证
- en: Introduction to AngularFire2
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AngularFire2 简介
- en: Creating an authentication module
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建身份验证模块
- en: Creating services
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建服务
- en: Defining a domain model
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义领域模型
- en: Creating a signup template
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建注册模板
- en: Error handling
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误处理
- en: Creating a customized alert dialog
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义警报对话框
- en: Creating a signup component
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建注册组件
- en: Enabling authentication in Firebase
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Firebase 中启用身份验证
- en: 'The first step in our application development is to enable authentication in
    our Firebase portal. We have already created our Firebase project in the preceding
    chapter. Perform the following steps to enable Firebase authentication:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序开发中，第一步是在 Firebase 门户中启用身份验证。我们已经在上一章中创建了我们的 Firebase 项目。按照以下步骤启用 Firebase
    身份验证：
- en: Open your friends project in the Firebase console.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Firebase 控制台中打开你朋友的工程。
- en: Expand DEVELOP on left panel.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧面板上展开 “开发”。
- en: Click on Authentication.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 “身份验证”。
- en: Go to the SIGN-IN METHOD tab on the right panel.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右侧面板上的 “登录方法” 选项卡。
- en: Click on the Email/Password item and enable it.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 “电子邮件/密码” 项并启用它。
- en: 'The enabled Email/Password authentication in Firebase will look as the following
    screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase 中启用的电子邮件/密码身份验证将如下截图所示：
- en: '![](img/00009.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00009.jpeg)'
- en: This is all we need to do to enable the Email/Password mode of authentication.
    Firebase also supports other modes of authentication. In this book, we will implement
    Email/Password authentication only. You can work with other authentications as
    an exercise.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们启用 “电子邮件/密码” 身份验证模式所需做的所有事情。Firebase 还支持其他身份验证模式。在这本书中，我们将仅实现电子邮件/密码身份验证。你可以作为练习与其他身份验证一起工作。
- en: 'Different modes of authentications are required to target different sets of
    users. It''s good to understand other authentication modes. Other supported modes
    are as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 针对不同用户集需要不同的身份验证模式。了解其他身份验证模式是很好的。其他支持的模式如下：
- en: '**Phone**: This is a simple form of authentication and doesn''t require much
    information from the user. Just the user''s mobile number is enough to authenticate
    the user. This mode has become popular in mobile applications.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电话**：这是一种简单的身份验证形式，不需要从用户那里获取太多信息。只需用户的手机号码就足以进行用户身份验证。这种模式在移动应用程序中变得很受欢迎。'
- en: '**Google**: It is good to enable Google authentication, as most of the targeted
    users have a Google account. In this mode, authentication happens via Google credentials.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google**：启用 Google 身份验证是很好的，因为大多数目标用户都有 Google 账户。在这种模式下，身份验证是通过 Google 凭据进行的。'
- en: '**Facebook**: This is similar to Google authentication. The only difference
    is that authentication happens via Facebook credentials instead of Google credentials.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Facebook**：这与 Google 身份验证类似。唯一的不同之处在于，身份验证是通过 Facebook 凭据而不是 Google 凭据进行的。'
- en: '**Twitter**: This is similar to the preceding authentication, but the authentication
    happens via your Twitter account.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Twitter**：这与前面的身份验证类似，但身份验证是通过你的 Twitter 账户进行的。'
- en: '**GitHub**: This is quite helpful for the developer community. They have a
    GitHub account, and you don''t need to give any personal account information.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub**：这对开发者社区非常有帮助。他们有 GitHub 账户，你不需要提供任何个人账户信息。'
- en: '**Anonymous**: This authentication is useful for an application where its user
    doesn''t want to sign up. This is mainly used on an e-commerce application, where
    the user can browse the products using this authentication.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**匿名**：这种认证对于用户不想注册的应用程序很有用。这主要用在电子商务应用程序上，用户可以使用这种认证浏览产品。'
- en: In all the preceding authentications, Firebase generates a unique ID called
    a user UID and the user is registered in a Firebase authentication with a UID,
    identifier, and so on. The same UID is also used to register the user in Firebase
    database with more information, such as email, UID, name, and number.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有前面的认证中，Firebase 生成一个唯一的 ID，称为用户 UID，用户使用 UID、标识符等在 Firebase 认证中注册。相同的 UID
    也用于在 Firebase 数据库中注册用户，包含更多信息，如电子邮件、UID、姓名和电话号码。
- en: Introduction to angularfire2
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 angularfire2
- en: '`angularfire2` is the official library for Angular and Firebase. We will use
    this library in our application. This library provides the following features:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`angularfire2` 是 Angular 和 Firebase 的官方库。我们将在我们的应用程序中使用这个库。这个库提供了以下功能：'
- en: It uses the power of RxJS, Angular, and Firebase
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它利用了 RxJS、Angular 和 Firebase 的力量
- en: It provides APIs to interact with a Firebase database and authentication
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了与 Firebase 数据库和认证交互的 API
- en: It synchronizes data in real time
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它实时同步数据
- en: It provides APIs to interact with `AngularFirestore`
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了与 `AngularFirestore` 交互的 API
- en: For more details, refer [https://github.com/angular/angularfire2](https://github.com/angular/angularfire2).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详情，请参阅 [https://github.com/angular/angularfire2](https://github.com/angular/angularfire2)。
- en: Creating the authentication module
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建认证模块
- en: 'In this section, we will create our first module using the Angular CLI command.
    Perform the following steps to create the authentication module:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Angular CLI 命令创建我们的第一个模块。按照以下步骤创建认证模块：
- en: 'Navigate to the `src` folder of your project and execute the module CLI command,
    as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的项目 `src` 文件夹并执行模块 CLI 命令，如下所示：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding command creates the file skeleton of `authentication.module.ts`
    and `authentication.routing.ts`. You can follow the Angular CLI command to create
    other components.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令创建了 `authentication.module.ts` 和 `authentication.routing.ts` 文件的骨架。您可以根据
    Angular CLI 命令创建其他组件。
- en: 'Add an authentication module in the app module and also configure Angular-
    and Firebase-related components, as follows; take a look at the `app.module.ts`
    file:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序模块中添加认证模块，并配置 Angular 和 Firebase 相关组件，如下所示；查看 `app.module.ts` 文件：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the placeholder in the app component template, as shown in the following `app.component.html` file:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序组件模板中添加占位符，如下所示的 `app.component.html` 文件：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Creating services
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建服务
- en: 'Services in an Angular application contain core business logic. As a part of
    the signup component, we created two services:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 应用程序中的服务包含核心业务逻辑。作为注册组件的一部分，我们创建了两个服务：
- en: Authentication service
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证服务
- en: User service
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户服务
- en: Authentication service
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证服务
- en: We introduced authentication service in the preceding chapter, so we will add
    more methods in an authentication service. Remember the following steps while
    creating angular services.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前一章中介绍了认证服务，所以我们将向认证服务中添加更多方法。在创建 Angular 服务时，请记住以下步骤。
- en: '**Writing the services**: AngularFire2 has an `AngularFireAuth` class. This
    class gives access to `firebase.auth.Auth`, which has the `createUserWithEmailAndPassword`
    API to sign up to Firebase.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编写服务**：AngularFire2 有一个 `AngularFireAuth` 类。这个类提供了对 `firebase.auth.Auth`
    的访问，它有 `createUserWithEmailAndPassword` API 用于在 Firebase 中注册。'
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Registering the service**: We will need to include this service in the authentication
    module before using the APIs. Take a look at the following details.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**注册服务**：在使用 API 之前，我们需要在认证模块中包含此服务。查看以下详细信息。'
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Injecting and using the** **service:** Once the service is registered, we
    will need to declare it in the constructor. The instance will be injected by the
    Angular framework. Finally, the signup component uses the `AuthenticationService` `signup()` API
    to authenticate a user to Firebase.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**注入和使用服务**：一旦服务注册，我们将在构造函数中声明它。实例将由 Angular 框架注入。最后，注册组件使用 `AuthenticationService`
    的 `signup()` API 对 Firebase 进行用户认证。'
- en: 'The following example shows the declaration of `AuthenticationService` in the
    signup component:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了在注册组件中声明 `AuthenticationService`：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: User service
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户服务
- en: In addition to registering a new user to Firebase authentication, we will also
    need to store more information about the user, such as the mobile, email, and
    so on, in our Firebase database.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 除了将新用户注册到Firebase身份验证之外，我们还需要在Firebase数据库中存储更多关于用户的信息，例如手机、电子邮件等。
- en: 'The user service is used to enter user information in the Firebase database.
    We use `AngularFireDatabase` from `angularfire2` to set user information to the
    Firebase database. This class is injected in the constructor of the `UserService`
    class:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 用户服务用于在Firebase数据库中输入用户信息。我们使用`angularfire2`中的`AngularFireDatabase`将用户信息设置到Firebase数据库中。此类在`UserService`类的构造函数中注入：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`AngularFireDatabase` provides an object method, which accepts the path of
    the data in the Firebase database; this returns `AngularFireObject` to `set` the
    data to Firebase:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`AngularFireDatabase`提供了一个对象方法，它接受Firebase数据库中数据的路径；这返回`AngularFireObject`以将数据设置到Firebase：'
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The complete `user.service.ts` file as of now is as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，完整的`user.service.ts`文件如下所示：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As covered in the preceding section, we will need to register the service in `authentication.module.ts`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们需要在`authentication.module.ts`中注册该服务：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Defining domain model
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义域模型
- en: The object model contains information about the key domain of our application.
    This helps to store our unstructured data in a more readable and structured way.
    In our application, we will introduce a lot of object models to store our domain
    information.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对象模型包含有关我们应用程序关键域的信息。这有助于以更可读和结构化的方式存储我们的非结构化数据。在我们的应用程序中，我们将介绍许多对象模型来存储我们的域信息。
- en: 'When we sign up a new user, we will store the user details in the Firebase
    database, and we created a user model with properties related to the user to store
    the user''s data. All the properties are declared as member variables with type
    since TypeScript supports types for variables as shown in the following `user.ts`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们注册新用户时，我们将用户详细信息存储在Firebase数据库中，并创建了一个具有与用户相关的属性的用户模型来存储用户数据。所有属性都声明为具有类型的成员变量，因为TypeScript支持变量的类型，如下面的`user.ts`所示：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: TypeScript is the type version of JavaScript, and it compiles into JavaScript.
    Programming in Typescript is much easier and faster. You can learn more about
    this at [https://www.typescriptlang.org/docs/home.html](https://www.typescriptlang.org/docs/home.html).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript是JavaScript的类型版本，并编译成JavaScript。在TypeScript中编程更容易、更快。您可以在[https://www.typescriptlang.org/docs/home.html](https://www.typescriptlang.org/docs/home.html)了解更多信息。
- en: Creating signup templates
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建注册模板
- en: A signup template represents the view of web page. It provides the form elements
    to type user inputs. It also handles user errors in the template. We will go through
    all tags used in the template in this section. Error handling used in the template
    will be covered in the next section.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注册模板表示网页视图。它提供了用于输入用户输入的表单元素。它还处理模板中的用户错误。在本节中，我们将介绍模板中使用的所有标签。模板中使用的错误处理将在下一节中介绍。
- en: FormModule
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FormModule
- en: 'We use `<form>` from `FormModule` to create the template for signup. `ngForm`
    contains the signup form data. This is required to retrieve the user-filled data.
    We pass this form data to the `onSignup()` method in the signup component. This
    user-filled data is retrieved using, for example, `signupFormData.value.email`,
    as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`FormModule`中的`<form>`来创建注册模板。`ngForm`包含注册表单数据。这是检索用户填写数据所必需的。我们将此表单数据传递给注册组件中的`onSignup()`方法。此用户填写的数据可以通过例如`signupFormData.value.email`来检索，如下所示：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Bootstrap elements
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bootstrap元素
- en: 'We used bootstrap elements to design our signup form. We included bootstrap
    and other dependent libraries such as tether and jQuery in our `index.html` file,
    as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用bootstrap元素来设计我们的注册表单。我们在`index.html`文件中包含了bootstrap和其他依赖库，如tether和jQuery，如下所示：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Bootstrap is an open source toolkit for developing HTML, CSS, and JavaScript. For
    more details, refer to [https://getbootstrap.com/docs/4.0/getting-started/introduction/](https://getbootstrap.com/docs/4.0/getting-started/introduction/).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap是一个用于开发HTML、CSS和JavaScript的开源工具包。有关更多详细信息，请参阅[https://getbootstrap.com/docs/4.0/getting-started/introduction/](https://getbootstrap.com/docs/4.0/getting-started/introduction/)。
- en: 'The elements used are as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的元素如下：
- en: '**Grid styles**: We use bootstrap grid styles to align our form to the middle
    as follows:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网格样式**：我们使用bootstrap网格样式将表单对齐到中间，如下所示：'
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Alert**: This element is used to provide context messages when a user performs
    any action on the element as follows:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**警告**：此元素用于在用户对元素执行任何操作时提供上下文消息，如下所示：'
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: For more details about bootstrap, refer to [https://getbootstrap.com/docs/4.0/components/alerts/](https://getbootstrap.com/docs/4.0/components/alerts/).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于Bootstrap的详细信息，请参阅[https://getbootstrap.com/docs/4.0/components/alerts/](https://getbootstrap.com/docs/4.0/components/alerts/)。
- en: Angular data binding
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular数据绑定
- en: As discussed in the preceding chapter, Angular supports various ways to bind
    data. In this particular case, we will support one-way binding using `(ngModel)='name'`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，Angular支持多种数据绑定方式。在这种情况下，我们将支持单向绑定使用 `(ngModel)='name'`。
- en: 'Take a look at the complete `signup.component.html` file as of now:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看完整的 `signup.component.html` 文件：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Error handling
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误处理
- en: Error handling is an important step to create a good application. It makes our
    product more robust and error-resistant.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理是创建良好应用程序的重要步骤。它使我们的产品更加健壮和抗错误。
- en: We use angular validators to validate user inputs for accuracy and completeness.
    For user input, we can use a common inbuilt validator or create our own custom
    validator.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Angular验证器来验证用户输入的准确性和完整性。对于用户输入，我们可以使用一个常见的内置验证器或创建我们自己的自定义验证器。
- en: Please note that these validators are built into HTML, not angular itself.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些验证器是内置在HTML中，而不是Angular本身。
- en: 'The following are a few of the inbuilt validators that are used:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些使用的内置验证器：
- en: '**Required**: This makes the input field mandatory.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**必需**：这使得输入字段成为必填项。'
- en: '**Min length**: This defines a lower limit to the user input. For example,
    we can limit the minimum length of mobile numbers to 10 digits.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小长度**：这定义了用户输入的下限。例如，我们可以将手机号码的最小长度限制为10位数字。'
- en: '**Max length**. This defines a higher limit to the user input. For example,
    we can limit the maximum length of mobile number to 10 digits.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大长度**。这定义了用户输入的上限。例如，我们可以将手机号码的最大长度限制为10位数字。'
- en: '**Pattern**: We can create a pattern for user input. For example, the mobile
    number takes only number as its input.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模式**：我们可以为用户输入创建一个模式。例如，手机号码只接受数字作为输入。'
- en: 'Inbuilt validators can be used in a signup template, as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 内置验证器可以在注册模板中使用，如下所示：
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: A custom validator is the customized validator for our application's use case.
    In our application, we will take a password and make the user retype their password
    for confirmation, to validate those two passwords, we will create a custom password
    validator.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义验证器是我们应用程序用例的定制验证器。在我们的应用程序中，我们将获取一个密码并让用户重新输入密码以进行确认，为了验证这两个密码，我们将创建一个自定义密码验证器。
- en: 'To create our validator, we will extend `Validator` from our form module. This
    provides a `validate` method to write our custom implementation:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的验证器，我们将从我们的表单模块扩展 `Validator`，这提供了一个 `validate` 方法来编写我们的自定义实现：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We include the validator in our module, and our `authentication.module.ts` looks
    as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将验证器包含在我们的模块中，我们的`authentication.module.ts`看起来如下：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Finally, we use `PasswordEqualValidator` using the `passwordEqual` selector in
    our signup template to confirm the password, as shown in the following code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在注册模板中使用`PasswordEqualValidator`和`passwordEqual`选择器来确认密码，如下面的代码所示：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Firebase errors
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firebase错误
- en: Once a user provides correct input and clicks on the SIGNUP button, we can call
    the `signup()` method and the user is directed to their profile page. If any user
    input is incorrect, Firebase APIs throw an error to the application, and we will
    need to handle it in our application.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户提供了正确的输入并点击了 SIGNUP按钮，我们就可以调用 `signup()` 方法，并将用户导向其个人资料页面。如果任何用户输入有误，Firebase
    API会将错误抛给应用程序，我们需要在我们的应用程序中处理它。
- en: '`createUserWithEmailAndPassword` of `AngularFireAuth` throws the following
    errors:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`createUserWithEmailAndPassword` of `AngularFireAuth` 会抛出以下错误：'
- en: '**auth/email-already-in-use**: This error is thrown when a user provides an
    already-used email address for signing up.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**auth/email-already-in-use**：当用户在注册时提供了一个已使用的电子邮件地址时，会抛出此错误。'
- en: '**auth/invalid-email**: This error is thrown when the email address is not
    valid.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**auth/invalid-email**：当电子邮件地址无效时，会抛出此错误。'
- en: '**auth/operation-not-allowed**: This error is thrown when Firebase authentication
    is not enabled when we create signup for the user. Most of the time, this occurs
    during development.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**auth/operation-not-allowed**：当我们为用户创建注册时，如果未启用Firebase身份验证，则会抛出此错误。大多数情况下，这发生在开发期间。'
- en: '**auth/weak-password**: This is thrown when the password provided is weak.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**auth/weak-password**：当提供的密码较弱时，会抛出此错误。'
- en: When we call the signup API, `auth` returns `Promise<any>`. This class has `then`
    and `catch` methods for success and failure scenarios. In the `catch` block, we
    read the error message and show error in alert dialog. Firebase error message
    has a human-readable error message, so we don't map the error code with message. We
    can also  a create custom alert dialog and show the error message. In the next
    section, we will create a custom error alert and integrate it with the signup
    template.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用注册API时，`auth` 返回 `Promise<any>`。这个类有 `then` 和 `catch` 方法用于成功和失败场景。在 `catch`
    块中，我们读取错误信息并在警报对话框中显示错误。Firebase错误信息有一个可读的错误消息，所以我们不需要将错误代码与消息映射。我们还可以创建自定义的警报对话框并显示错误消息。在下一节中，我们将创建自定义错误警报并将其集成到注册模板中。
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Creating a customized alert dialog
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义警报对话框
- en: 'In this section, we will create an alert dialog component. This is used to
    display an error message. It is a reusable component, which means it can be used
    across the application. We will need to follow the following steps to create and
    configure our independent alert dialog:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个警报对话框组件。这个组件用于显示错误消息。它是一个可重用的组件，这意味着它可以在应用程序的任何地方使用。我们需要遵循以下步骤来创建和配置我们独立的警报对话框：
- en: '**Creating the component**: This is same as creating any other component. We
    have provided the `@Input errorMessage:any` binding to accept an error message
    from an other integrated component. This message will be displayed on the signup page.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建组件**：这与创建任何其他组件相同。我们提供了 `@Input errorMessage:any` 绑定以从其他集成组件接收错误消息。此消息将在注册页面上显示。'
- en: 'Here''s the complete `error-alert.component.ts`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '这里是完整的 `error-alert.component.ts`:'
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Creating the template**: We have used alert from bootstrap components. The
    `errorMessage` variable in curly braces accepts the text and displays the error
    message on the signup page.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建模板**：我们使用了来自bootstrap组件的警报。花括号中的 `errorMessage` 变量接受文本并在注册页面上显示错误消息。'
- en: 'Here''s the complete `error-alert.component.html`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '这里是完整的 `error-alert.component.html`:'
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Creating the style sheets**: We have margin `top` and `bottom` to align the
    alert properly.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建样式表**：我们设置了 `top` 和 `bottom` 边距以正确对齐警报。'
- en: 'Here''s the complete `error-alert.component.scss`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '这里是完整的 `error-alert.component.scss`:'
- en: '[PRE24]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Configuring in the signup template**: Once our error alert is ready, we can
    integrate it with other components. In this chapter, we integrated an error alert
    with our signup component. This contains the `*ngIf` directive to enable the error
    alert and error message binding to display the text from the signup component.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在注册模板中配置**：一旦我们的错误警报准备就绪，我们就可以将其与其他组件集成。在本章中，我们将错误警报与我们的注册组件集成。这包含 `*ngIf`
    指令以启用错误警报，并将错误消息绑定到显示来自注册组件的文本。'
- en: 'Here''s the modified `signup.component.html` file with an error alert, as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是包含错误警报的修改后的 `signup.component.html` 文件，如下所示：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**Assigning the error message**: We have created two member variables: `errorMessage`
    and `showError`. These variables are enabled in the `onSignup()` method when an
    error occurs. `errorMessage` is assigned from `error.message`.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分配错误消息**：我们创建了两个成员变量：`errorMessage` 和 `showError`。这些变量在 `onSignup()` 方法中启用，当发生错误时。`errorMessage`
    从 `error.message` 分配。'
- en: 'Here''s the complete `signup.component.ts` with an error message:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '这里是包含错误信息的完整 `signup.component.ts`:'
- en: '[PRE26]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'During signup of a new user, if you type a password with just one character,
    the error in the Signup page looks as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在新用户注册过程中，如果您仅输入一个字符的密码，注册页面中的错误如下所示：
- en: '![](img/00010.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00010.jpeg)'
- en: Creating a signup component
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建注册组件
- en: 'A signup component is a controller and it is used to react to a user''s action,
    such as sign up or cancel. It is injected with the following two services:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 注册组件是一个控制器，它用于响应用户的操作，例如注册或取消。它注入以下两个服务：
- en: '**Authentication service**: It provides authentication-related functionalities,
    such as login, signup, and logout'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证服务**：它提供与身份验证相关的功能，例如登录、注册和注销'
- en: '**User service**: It interacts with the Firebase database to store extra user
    information, such as the mobile number and name.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户服务**：它与Firebase数据库交互以存储额外的用户信息，例如手机号码和姓名。'
- en: 'The constructor of the signup component accepts authentication and user services,
    as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 注册组件的构造函数接受身份验证和用户服务，如下所示：
- en: '[PRE27]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'When the user clicks on the SIGNUP button, the `onSignup` method is called.
    It accepts form data as a parameter, which has user-typed information. The email
    and password are retrieved and passed to the authentication service''s `signup`
    method. On successful signup, we retrieve other information from the form data
    and store it in the user domain model. Finally, we will pass this newly created
    `User` object to user service and register it in the Firebase database:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“注册”按钮时，将调用`onSignup`方法。它接受表单数据作为参数，其中包含用户输入的信息。将检索电子邮件和密码，并将它们传递给身份验证服务的`signup`方法。在成功注册后，我们将从表单数据中检索其他信息，并将其存储在用户域模型中。最后，我们将这个新创建的`User`对象传递给用户服务，并在Firebase数据库中注册：
- en: On successful signup, the user info contains the UID. This is the unique identifier
    for a particular user. It is used as an indicator to store data in the Firebase
    database. This is also used to retrieve user information from the database.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功注册后，用户信息包含UID。这是特定用户的唯一标识符。它用作在Firebase数据库中存储数据的指示器。这也用于从数据库中检索用户信息。
- en: '[PRE28]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'After a successful signup, Firebase authentication will have the following
    entry:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功注册后，Firebase身份验证将具有以下条目：
- en: '![](img/00011.jpeg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00011.jpeg)'
- en: 'The Firebase database will have the following entry:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase数据库将具有以下条目：
- en: '![](img/00012.jpeg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00012.jpeg)'
- en: 'Here''s the complete `signup.component.ts` file as of now:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这是到目前为止完整的`signup.component.ts`文件：
- en: '[PRE29]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, register `signupComponent` in the authentication routing module, as
    follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，按照以下方式在身份验证路由模块中注册`signupComponent`：
- en: '[PRE30]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, take a look at your component in the browser using `http://localhost:4200/app-friends-signup`,
    the component looks as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用`http://localhost:4200/app-friends-signup`在浏览器中查看您的组件，组件如下所示：
- en: '![](img/00013.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00013.jpeg)'
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Finally, we build our signup component. The key learning in this chapter is
    injectable services. We created authentication and user services. These services
    used the Angular fire library to interact with Firebase authentication and database
    services. These new services were added to the signup component using dependency
    injection. This component used the services to sign up new users and add them
    to Firebase database. We inbuilt and customized message alerts.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们构建我们的注册组件。本章的关键学习点是可注入的服务。我们创建了身份验证和用户服务。这些服务使用Angular fire库与Firebase身份验证和数据库服务进行交互。这些新服务通过依赖注入添加到注册组件中。该组件使用这些服务注册新用户并将他们添加到Firebase数据库中。我们内置并自定义了消息警报。
- en: In the next chapter, we will create a login component and log-in the newly registered
    user account. After successful login, the user will be directed to the user profile
    page.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将创建一个登录组件并登录新注册的用户账户。在成功登录后，用户将被导向用户个人资料页面。
