- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned about the essentials of the Vue API and
    how to work with single-file Vue components. Building on these foundations, this
    chapter further explores different approaches to controlling data within a Vue
    component.
  prefs: []
  type: TYPE_NORMAL
- en: You will learn how to utilize Vue’s powerful data reactivity and cache system
    through computed properties and how to set up advanced watchers to observe the
    component’s data changes. You will also learn how to utilize asynchronous methods
    to fetch and handle data for your Vue components. By the end of this chapter,
    you will be able to watch, manage, and manipulate data from various sources in
    your Vue.js components.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding computed properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding computed setters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring watchers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watching nested properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring async methods and data fetching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing methods, watchers, and computed props
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you need to set up a basic Vue project following the instructions
    in [*Chapter 1*](B18645_01.xhtml#_idTextAnchor015), *Starting Your First Vue Project*.
    You can create a single file Vue component to easily practice the examples and
    concepts mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find this chapter’s source code here: [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02).'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding computed properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Computed properties** are unique data types that will reactively update only
    when the source data used within the property is updated. By defining a data property
    as a computed property, we can perform the following activities:'
  prefs: []
  type: TYPE_NORMAL
- en: Apply custom logic on the original data property to calculate the computed property’s
    value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Track the changes of the original data property to calculate the updated value
    of the computed property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reuse the computed property as local data anywhere within the Vue component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, the Vue engine automatically caches the computed properties, making
    them more performant at updating the UI than using the property of the returned
    value of `data`, or using a Vue component’s method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax of a computed property is like writing a component method *with
    a return value*, nested under the computed property of the Vue component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the computed property’s logic, you can access any component’s data property,
    method, or other computed property using the `this` instance, which is the reference
    to the Vue component instance itself. An example of using the `this` instance
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s look at some examples of where you should consider using a computed property:'
  prefs: []
  type: TYPE_NORMAL
- en: '`input` field, which attaches to the `name` data property, and `error` is a
    computed property. If `name` contains a `falsy` value (which means `name` is an
    empty string, `0`, `undefined`, `null`, or `false`), `error` will be assigned
    a value of `"Name is required"`. Otherwise, it will be empty. The component then
    renders the value of the `error` property accordingly:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The error computed property updates itself whenever the `name` value is modified
    by the user. Hence when `name` is empty, the output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Output of the error computed property](img/B18645_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Output of the error computed property
  prefs: []
  type: TYPE_NORMAL
- en: 'And when `name` is valid, the output will display just the filled input field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Output of error when name contains a valid value](img/B18645_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Output of error when name contains a valid value
  prefs: []
  type: TYPE_NORMAL
- en: '`title` and `surname` – into one computed string, `formalName`, and render
    its value using `template`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will generate the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '**Calculating and displaying complex information**: Sometimes there is a need
    to perform an extra calculation or to extract specific information from one large
    data object source. Computed properties help to achieve this goal while keeping
    our code readable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Take a large data object, such as `post`. This data object has a nested `fields`
    property, which contains several additional information objects, such as the full
    name of `author` and an array of `entries` objects. Each entry in `entries` contains
    further information, such as `title`, `content`, and a `feature` flag indicating
    whether the entry should be featured:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'In this scenario, you need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Display the full name of the post’s `author`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate and display the total number of `entries` included.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Display a list of `entries` that have the `feature` flag turned on (`feature:
    true`).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By using computed properties, we can decouple the previous `post` object into
    several computed data properties while keeping the original `post` object unchanged,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`fullName` for combining `firstName` and `lastName` of `post.fields.author`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '`totalEntries` contains the length of the `post.fields.entries` array:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '`featuredEntries` contains the filtered list of `post.fields.entries` based
    on the `feature` property of each entry, by using the `filter` built-in array
    method:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'You then use the simplified and semantic computed properties to render the
    information in your component’s template. The full code is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – The computed name output](img/B18645_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – The computed name output
  prefs: []
  type: TYPE_NORMAL
- en: Computed properties are very valuable to Vue developers when creating performant
    components. In the next exercise, we will explore how to use them inside a Vue
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 2.01 – implementing computed data into a Vue component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will use a computed property to help cut down the amount
    of code you need to write inside your Vue templates by concisely outputting basic
    data.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.01).
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to implement a component that receives the user’s first name and
    last name input, and displays the user’s full name accordingly, by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate to the `Chapter02/Exercise2.01`
    folder, by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in your `code .` command within the project directory),
    or your preferred **integrated development** **environment** (**IDE**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s create a new Vue component called `Exercise2-01` by adding the `Exercise2-01.vue`
    file to the `./``src/components/` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – The components directory hierarchy](img/B18645_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – The components directory hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Exercise2-01.vue` and let’s create the code block structure for the Vue
    component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `<template>`, create an `input` field for the first name, and use `v-model`
    to bind the `data` prop, `firstName`, to this field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a second `input` field for the last name, and use `v-model` to bind
    the `data` prop, `lastName`, to this field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Include these new `v-model` data props in the Vue instance by returning them
    in the `data()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a computed data variable called `fullName`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Underneath your `input` fields, output the computed data using the `h3` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upon visiting `http://localhost:3000` in the browser and keying the input `John`
    for first name, and `Doe` for last name, the page will generate the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Output of the computed data will show the first and last name](img/B18645_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Output of the computed data will show the first and last name
  prefs: []
  type: TYPE_NORMAL
- en: This exercise demonstrates how we can write an expression inside a computed
    data property using data received from `v-model`, and then combine the first name
    and last name into a single output variable with the `fullName` computed property
    that can be reused within the component.
  prefs: []
  type: TYPE_NORMAL
- en: We now understand how a computed property works and how to write a declarative,
    reusable, and reactive computed property. Next, we will look at how to intercept
    the mutation process of a computed property and add additional logic with the
    computed setter feature.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding computed setters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, computed data is a getter only, which means it will only output
    the outcome of your expression. In some practical scenarios, when a computed property
    is mutated, you may need to trigger an external API or mutate the original data
    elsewhere in the project. The function performing this feature is called a **setter**.
  prefs: []
  type: TYPE_NORMAL
- en: Using a setter in a computed property allows you to reactively listen to data
    and trigger a callback (setter) that contains the returned value from the getter,
    which can optionally be used in the setter.
  prefs: []
  type: TYPE_NORMAL
- en: 'But first, let’s look at JavaScript ES5’s getter and setter. Starting from
    ES5, you can use the built-in getter and setter to define Object accessors, such
    as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`get` to bind the Object property to a function that returns a value for that
    property whenever it is looked up, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`set` to bind the specific Object property to a function whenever that property
    is modified:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Based on those features, Vue.js provides us with similar functionalities, `get()`
    as the getter and `set()` as the setter, for a specific computed property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'To understand how setter and getter work, let’s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the returned value of `myComputedDataProp` to be `this.count + 1` whenever
    `myComputedDataProp` is looked up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, whenever `myComputedDataProp` is modified, use the setter to update the
    `count` data prop to its new value, and then call a method within the component
    called `callAnotherApi` with this new `this.count` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With `count` and `callAnotherApi` is the component’s local data and method,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full example code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Here the computed `myComputedDataProp` prop will output `1` in your Vue component.
  prefs: []
  type: TYPE_NORMAL
- en: You will find out exactly how to use computed data as both getters and setters
    in the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 2.02 – using computed setters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will use a computed prop as a setter and a getter, which
    will both output expressions and set data when triggered by a user’s input.
  prefs: []
  type: TYPE_NORMAL
- en: The complete code can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.02).
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to implement a component that contains an `input` field that receives
    a number from the user, calculate the half value of the input, then display both
    values on the UI, by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate to the `Chapter02/Exercise2.02`
    folder, by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory), or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s create a new Vue component called `Exercise2-02` by adding the `Exercise2-02.vue`
    file to the `./``src/components/` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.6 – The components directory hierarchy](img/B18645_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – The components directory hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Exercise2-02.vue` and let’s create the code block structure for the Vue
    component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `input` field with a `v-model` value bound to a computed data value
    called `incrementOne`, return the value of a Vue data variable called `count`
    in the getter, and set the `count` variable in the setter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – The first steps of a computed setter and getter](img/B18645_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – The first steps of a computed setter and getter
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s utilize the setter again. We will divide whatever the new `val`
    argument is by `2`, and save that to a new data variable called `divideByTwo`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the setter to divide `val` by `2`, and bind this new value to the `divideByTwo`
    variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upon visiting `http://localhost:3000` in the browser, and keying the input
    as `1000`, the output of the `divideByTwo` value should generate an outcome from
    the value entered in the `input` field, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.8 – The outcome of the divideByTwo value](img/B18645_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – The outcome of the divideByTwo value
  prefs: []
  type: TYPE_NORMAL
- en: This exercise demonstrates how we can use computed data to both get and set
    data reactively in our template by binding computed variables to the `v-model`.
    In the next section, we will explore how we can use watchers to actively listen
    to changes in component data or its property.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring watchers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue `oldVal` and `newVal`. This can help you when writing expressions to compare
    data before writing or binding new values. Watchers can observe objects as well
    as other types, such as `string`, `number`, and `array` types.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [*Chapter 1*](B18645_01.xhtml#_idTextAnchor015), *Starting Your First Vue
    Project*, we introduced life cycle hooks that run at specific times during a component’s
    lifespan. If the `immediate` key is set to `true` on a watcher, then when this
    component initializes, it will run this watcher on creation. You can watch all
    keys inside any given object by including the key and value `deep: true` (the
    default is `false`).'
  prefs: []
  type: TYPE_NORMAL
- en: To clean up your watcher code, you can assign a `handler` argument to a defined
    component’s method, which is considered best practice for large projects.
  prefs: []
  type: TYPE_NORMAL
- en: Watchers complement the usage of computed data since they passively observe
    values and cannot be used as normal Vue data variables, while computed data must
    always return a value and can be looked up. Remember *not* to use arrow functions
    if you need the Vue context of `this`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example demonstrates the `immediate` and `deep` optional keys;
    if any key inside the `myDataProperty` object were to change, it would trigger
    a console log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s set some new values with the help of watchers.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 2.03 – using watchers to set new values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will use watcher arguments to watch data properties for
    changes, then use this watcher to set variables via a method.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the complete code for this exercise at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.03).
  prefs: []
  type: TYPE_NORMAL
- en: 'We create a Vue component that displays the shop watcher’s price before and
    after the discount, with an option to update the discount price, by following
    these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate to the `Chapter02/Exercise
    2.03` folder, by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory), or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s create a new Vue component called `Exercise2-03` by adding the `Exercise2-03.vue`
    file to the `./``src/components/` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.9 – The components directory hierarchy](img/B18645_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – The components directory hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Exercise2-03.vue` and let’s create the code block structure for the Vue
    component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the document by adding a `discount` and an `oldDiscount` data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We want to listen to the changes in the `discount` property. This can be achieved
    by adding it to the `watch` object and manually updating the `oldDiscount` value
    to `oldValue` received as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let’s add a component method called `updateDiscount`. Inside the method,
    set the `oldDiscount` data prop to `this.discount +` `5`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then bind this method to `button` using the `@click` directive to trigger this
    method whenever the user clicks on the button and respectively trigger the watcher:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add some CSS stylings to make our component look pretty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upon visiting `http://localhost:3000` in the browser, the output of the preceding
    command will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.10 – An example output of the shop watcher page](img/B18645_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – An example output of the shop watcher page
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we explored how we can use watchers to observe and dynamically
    manipulate data when it is changed by triggering other methods in the Vue component.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn how to actively watch a specific nested property within
    a data object through deep watching.
  prefs: []
  type: TYPE_NORMAL
- en: Watching nested properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using Vue.js to watch a data property, you can observe changes belonging
    to nested keys of an object, rather than observing the changes to the object itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is done by setting the optional `deep` property to `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: This code example demonstrates how we watch all available keys inside the `organization`
    data object for changes. If the `name` property inside `organization` changes,
    the `organization` watcher will trigger.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not need to observe every key inside an object, it is more performant
    to assign a watcher to a specific key by specifying it following the syntax `<object>.<key>`
    string. For example, you may allow a user to edit their company name and trigger
    an API call when that specific key’s value has been modified.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, the watcher is explicitly observing the `name` key
    of the `organization` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: We have seen how deep watching works. Now, let’s try the next exercise and watch
    the nested properties of a data object.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 2.04 – watching nested properties of a data object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will use watchers to observe keys within an object, which
    will update when a user triggers a method within the UI.
  prefs: []
  type: TYPE_NORMAL
- en: The complete code for the exercise can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.04).
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the instructions to create a component that displays a product’s label
    and price, and dynamically modifies the discount price:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate to the `Chapter02/Exercise2.04`
    folder, by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory), or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s create a new Vue component called `Exercise2-04` by adding the `Exercise2-04.vue`
    file to the `./``src/components/` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.11 – The components directory hierarchy](img/B18645_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – The components directory hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Exercise2-04.vue`, let’s start by defining a `product` object that contains
    `price` and `label`, and a `discount` key. Output these values into the template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add CSS styling to our component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE267]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the application using the following command and visit `http://localhost:3000`
    in the browser to view the component rendered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let’s set up a button that will modify the price of the product. We achieve
    this by adding a `button` element with a `click` event bound to an `updatePrice`
    method that decrements the value of the price:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE270]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE271]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE273]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE274]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE275]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE276]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE277]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE278]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE279]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you click the button, it should reduce the price, as seen in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Screen displaying the reduced price of Blue juice](img/B18645_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Screen displaying the reduced price of Blue juice
  prefs: []
  type: TYPE_NORMAL
- en: 'Time for the nested watcher. We will watch the `product` object’s `price`,
    and increment the `discount` data prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE285]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE286]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE287]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE288]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, as you reduce `price`, the `discount` value will go up because of the
    watcher:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13 – Output displaying an increased discount value](img/B18645_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – Output displaying an increased discount value
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we used watchers to observe a key inside an object and then
    set new data with or without using the optional arguments parsed by the watcher.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore how to fetch and handle data using the
    Vue component’s async methods.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring async methods and data fetching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Asynchronous functions in JavaScript are defined by the `async` syntax and return
    a Promise. These functions operate asynchronously via the Event loop, using an
    implicit promise, which is an object that may return a result in the future.
  prefs: []
  type: TYPE_NORMAL
- en: As part of the JavaScript language, you can declare asynchronous blocks of code
    inside a Vue component’s method by including the `async` keyword in front of a
    method.
  prefs: []
  type: TYPE_NORMAL
- en: You can use Promise chaining methods, such as the `then()` and `catch()` functions
    or try the `await` syntax of ES6 inside these Vue methods and return the results
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example using the built-in `fetch` API to fetch data inside a component
    method as an asynchronous function with `async/await` keywords:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: '**Axios** is a popular JavaScript library that allows you to make external
    requests for data using Node.js. It has wide browser support making it a versatile
    library when making HTTP or API requests. We will be using this library in the
    next exercise.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 2.05 – using asynchronous methods to retrieve data from an API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will asynchronously fetch data from an external API source
    and display it on the frontend using computed props.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the complete code for this exercise at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.05](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.05).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a component that will fetch quotes from an external data source
    and display a quote on the UI by following these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate to the `Chapter02/Exercise2.05`
    folder, by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE291]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory), or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s create a new Vue component called `Exercise2-05` by adding the `Exercise2-05.vue`
    file to the `./``src/components/` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.14 – The components directory hierarchy](img/B18645_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – The components directory hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Exercise2-05.vue`, let’s start by importing `axios` into our component
    and creating a method called `fetchAdvice()`. We use `axios` to call a response
    from [https://api.adviceslip.com/advice](https://api.adviceslip.com/advice) and
    then `console.log` the result. Also, let’s include a button that has a `click`
    event bound to the `fetchAdvice()` call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE293]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE294]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE296]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE298]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE299]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE300]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE301]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE302]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE303]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE304]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE305]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE306]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE307]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE308]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE309]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE310]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE311]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE312]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE313]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE314]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE315]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE316]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE317]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE318]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE319]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE320]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE321]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE322]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE323]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE324]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE325]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE326]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE327]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE328]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE329]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE330]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE331]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE332]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upon visiting `http://localhost:3000` in the browser, the output of the preceding
    command will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Screen displaying a very large object in the console](img/B18645_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – Screen displaying a very large object in the console
  prefs: []
  type: TYPE_NORMAL
- en: 'We are only interested in the data object inside the `response` object. Assign
    this data object to a Vue data prop called `response`, which we can reuse:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE333]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE335]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE336]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE337]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE338]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE339]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE340]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE341]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE342]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE343]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE344]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE345]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE346]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE347]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE348]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output `quote` from inside the `response` prop object using a computed prop
    that will update every time the `response` prop changes. Use a ternary operator
    to perform a conditional statement to check whether the `response` prop contains
    the `slip` object to avoid errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE349]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE350]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE351]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE352]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE353]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE354]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE355]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE356]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE357]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE358]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE359]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE360]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE361]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE362]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE363]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE364]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE365]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE366]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE367]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE368]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE369]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE370]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE371]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE372]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE373]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE374]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE375]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE376]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE377]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE378]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE379]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE380]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE381]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE382]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE383]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Figure 2**.16* displays the output generated by the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.16 – Screen displaying the quote output in your template](img/B18645_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – Screen displaying the quote output in your template
  prefs: []
  type: TYPE_NORMAL
- en: 'As a final touch, include a `loading` data prop so the user can see when the
    UI is loading. Set `loading` to `false` by default. Inside the `fetchAdvice` method,
    set `loading` to `true`. When the GET request completes (resolve/reject), within
    the `finally()` chain, set it back to `false` after 4 seconds using the `setTimeout`
    function. You can use a ternary operator to change the button text between the
    loading state and its default state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE384]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE385]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE386]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE387]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE388]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE389]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE390]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE391]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE392]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE393]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE394]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE395]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE396]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE397]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE398]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE399]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE400]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE401]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE402]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE403]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE404]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE405]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE406]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE407]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE408]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE409]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE410]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE411]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE412]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE413]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE414]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE415]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE416]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE417]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE418]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE419]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE420]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE421]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE422]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE423]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE424]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE425]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE426]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE427]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE428]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.17 – Screen displaying the loading button state output in your template](img/B18645_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.17 – Screen displaying the loading button state output in your template
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we saw how we can fetch data from an external source, assign
    it to a computed prop, display it in our template, and apply a loading state to
    our content.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have explored the different approaches to working with the
    local data of a Vue component. In the next section, we will examine the pros and
    cons of each approach.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing methods, watchers, and computed properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Methods are best used as a handler to an event occurring in the DOM, and in
    situations where you need to call a function or perform an API call, for example,
    `Date.now()`. All values returned by methods are not cached.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can compose an action denoted by `@click`, and reference a
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: This code block will display an alert bar with the current Unix epoch time whenever
    a user clicks on the **Click me** button. Methods should not be used to display
    computed data, since the return value of the method, unlike computed props, is
    not cached, potentially generating a performance impact on your application if
    misused.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned, computed props are best used when reacting to data updates or
    for composing complicated expressions in your template. In the following instance,
    if the `animalList` data changes, the `animals` computed prop will also update
    by slicing the second item from the array and returning the new value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: Their reactive nature makes computed properties perfect for composing new data
    variables from existing data, such as when you are referencing specific keys of
    a larger, more complicated object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Computed properties also help increase the readability of your Vue component’s
    template and logic. In the following example, we output the authors in two different
    ways, but with the `authorName` computed prop, you can compose conditional logic
    cleanly without bloating the HTML template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: However, in many cases, using computed props can be overkill, such as when you
    only want to watch a specific data’s nested property rather than the whole data
    object. Or when you need to listen and perform an action upon any changes of a
    data property or a specific property key nested inside a data property object,
    and then perform an action. In this case, data watchers should be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because of the unique `newVal` and `oldVal` arguments of a watcher, you can
    watch a variable’s changes and perform an action only when a certain value is
    reached:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: Based on these examples, we will build a simple search functionality using a
    method, computed props, and a watcher to achieve a similar outcome and demonstrate
    the ability of each method.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 2.06 – handling the search functionality using a Vue method, a watcher,
    and computed props
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will create a component that allows users to search data
    arrays using three different methods in Vue. By the end of the exercise, you will
    be able to see how each different method works.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the complete exercise at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.06](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.06).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a component that displays three different filtered lists according
    to three `input` fields, each using a different approach discussed in this topic,
    by following these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate to the `Chapter02/Exercise
    2.06` folder, by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE433]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE434]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory), or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s create a new Vue component called `Exercise2-06` by adding the `Exercise2-06.vue`
    file to the `./``src/components/` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.18 – The components directory hierarchy](img/B18645_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.18 – The components directory hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Exercise2-06.vue`, within the `data` object, add a list of frameworks in
    an array, and assign it to the `frameworkList` property. Also, declare an `input`
    property with an empty string and `methodFilterList` with an initial value of
    an empty array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE435]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE436]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE437]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE438]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE439]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE440]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE441]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE442]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE443]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE444]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE445]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE446]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE447]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE448]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE449]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE450]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE451]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE452]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE453]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE454]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE455]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the template, include a `div` container, `title`, and a `column` container.
    Inside this `column` container, create an input that is bound to the `v-model`
    input, and bind the `keyup` event to the input to the `searchMethod` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE456]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE457]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE458]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE459]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE460]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE461]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE462]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE463]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE464]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE465]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE466]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE467]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE468]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE469]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE470]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE471]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE472]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE473]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE474]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE475]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE476]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE477]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE478]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE479]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE480]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE481]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE482]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE483]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE484]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE485]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE486]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE487]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE488]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE489]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE490]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE491]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE492]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE493]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE494]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE495]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE496]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE497]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE498]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE499]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then add some CSS stylings to make the output look pretty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE500]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE501]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE502]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE503]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE504]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE505]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE506]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE507]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE508]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE509]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE510]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE511]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE512]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE513]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE514]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE515]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE516]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the terminal, run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE517]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upon visiting `http://localhost:3000` in the browser, the output of the preceding
    command will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.19 – Console output for the key input](img/B18645_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.19 – Console output for the key input
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside our `searchMethod` method, write a filter expression that binds the
    `methodFilterList` data prop to a filtered `frameworkList` array based on the
    input value. Trigger `searchMethod` on the `created()` life cycle hook so that
    when the component loads, a list is present:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE518]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE519]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE520]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE521]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE522]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE523]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE524]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE525]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE526]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE527]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE528]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE529]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE530]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE531]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE532]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE533]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE534]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On running the preceding code, you will be able to filter the list, as shown
    in *Figure 2**:20*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20 – You should be able to filter the list using a Vue method](img/B18645_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.20 – You should be able to filter the list using a Vue method
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s make a filter using computed props. Include a new data prop called `input2`
    and create a `computed` prop called `computedList` that returns the same filter
    as `searchMethod` but does not need to bind to another data prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE535]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE536]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE537]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE538]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE539]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE540]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE541]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE542]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE543]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE544]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE545]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE546]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE547]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE548]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE549]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE550]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE551]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE552]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE553]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE554]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE555]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE556]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE557]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE558]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE559]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE560]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE561]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE562]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE563]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE564]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE565]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE566]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE567]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE568]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE569]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE570]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE571]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE572]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should now be able to filter the second column of frameworks with the help
    of computed props, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.21 – Filtering the second column of frameworks using computed props](img/B18645_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.21 – Filtering the second column of frameworks using computed props
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let’s filter the same list using a watcher. Include an `input3` prop
    with an empty string and a `watchFilterList` prop with an empty array. Also create
    a third `div` column, which contains an input bound to `input3` `v-model`, and
    a list outputting the `watchFilterList` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE573]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE574]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE575]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE576]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE577]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE578]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE579]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE580]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE581]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE582]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE583]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE584]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE585]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE586]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE587]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE588]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE589]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE590]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE591]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE592]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE593]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE594]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE595]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE596]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE597]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE598]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE599]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a watcher that watches the `input3` prop for changes and binds the result
    of the `frameworkList` filter to the `watchFilterList` array. Set the immediate
    key of `input3` to `true` so it will run when the component is created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE600]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE601]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE602]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE603]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE604]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE605]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE606]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE607]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE608]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE609]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE610]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE611]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE612]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE613]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE614]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE615]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE616]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE617]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the help of a watcher, you should now be able to filter the third column,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.22 – Filtering the list using a watcher in the third column](img/B18645_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.22 – Filtering the list using a watcher in the third column
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we have seen how we can achieve a filtered list using a method,
    computed props, and a watcher.
  prefs: []
  type: TYPE_NORMAL
- en: This section briefly demonstrated the three approaches. Each approach has its
    own pros and cons, and choosing the most suitable approach to apply or to combine
    requires practice and further understanding of each use case or project goal.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will apply what we have learned so far in this chapter
    to create a blog list application with computed properties, methods, and watchers
    with an external data API query.
  prefs: []
  type: TYPE_NORMAL
- en: Activity 2.01 – creating a blog list using the Contentful API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To access the code file for this activity, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Activity2.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Activity2.01)
  prefs: []
  type: TYPE_NORMAL
- en: This activity aims to leverage your knowledge regarding applying different approaches
    to working with an external data API source by building a blog that lists articles.
    This application activity will test your knowledge of Vue by using all the basic
    functions of a `async` methods to fetch remote data from an API and use computed
    properties to organize deeply nested object structures.
  prefs: []
  type: TYPE_NORMAL
- en: '`Contentful` is a headless **content management system** (**CMS**) that allows
    you to manage content separately from your code repository. You can consume this
    content using the API inside as many code repositories as you need. For example,
    you may have a blog website that acts as a primary source of information, but
    your clients want a standalone page on a different domain that only pulls in the
    most recently featured articles. Using a headless CMS inherently allows you to
    develop these two separate code bases and use the same updated data source.'
  prefs: []
  type: TYPE_NORMAL
- en: This activity will use the `Contentful` headless CMS. The access keys and endpoints
    will be listed in the solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Vue project using the scaffolding tool with Vite as a bundle management
    tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the `Contentful` dependency ([https://www.npmjs.com/package/contentful](https://www.npmjs.com/package/contentful))
    into your project using the `yarn add` `contentful` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use computed properties to output the deeply nested data from the API response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use data props to output the user’s name, job title, and description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use SCSS to style the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected outcome is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.23 – The expected outcome with Contentful blog posts](img/B18645_02_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.23 – The expected outcome with Contentful blog posts
  prefs: []
  type: TYPE_NORMAL
- en: After the activity has been completed, you should be able to use the `async`
    methods to pull remote data from an API source into your Vue components. You will
    find that computed props are a sophisticated way of breaking down the information
    into smaller chunks of reusable data.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were introduced to Vue.js computed and watch properties,
    which allow you to observe and control reactive data. You also explored how to
    use methods to asynchronously fetch data from an API using the `axios` library.
    Then, you learned how to dynamically compose the received data into different
    outputs within the Vue template using computed props. The differences between
    using methods and computed and watch properties were demonstrated by building
    search functionality using each method.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will cover Vite and show you how to use Vue DevTools to manage
    and debug your Vue.js applications that use these computed properties and events.
  prefs: []
  type: TYPE_NORMAL
