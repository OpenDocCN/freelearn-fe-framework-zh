["```js\nconst express = require('express');\nconst cors = require('cors');\nconst path = require('path');\nrequire('dotenv').config();\nconst app = express();\napp.use(cors());\napp.use(express.urlencoded({ extended: false }));\napp.use(express.json());\napp.use('/static', express.static(path.join\n  (__dirname + '/public')));\napp.get('/api', (req, res) => {\nres.json({ msg: 'API Route' });\n});\napp.post('/post/:data', (req, res) => {\nconst data = req.params.data;\nconsole.log(data);\nres.json({ msg: `Data logged ${data}` });\n});\nconst port = process.env.PORT || 8080;\napp.listen(port, () =>\nconsole.log(`Server running on port ${port},\n  http://localhost:${port}`)\n);\n```", "```js\nGET /posts/1\n```", "```js\n{\n  \"id\": 1,\n  \"title\": \"Hello World\",\n  \"content\": \"Welcome to my first blog.\",\n  \"authorId\": 64\n}\n```", "```js\nGET /authors/64\n```", "```js\n{\n  \"id\": 64,\n  \"name\": \"Jack Thomas\",\n  \"email\": \"jackthomas@gmail.com\"\n}\n```", "```js\ntype Post {\n  id: ID!\n  title: String!\n  content: String!\n  author: Author!\n}\ntype Author {\n  id: ID!\n  name: String!\n  email: String!\n}\ntype Query {\n  post(id: ID!): Post\n}\n```", "```js\nquery {\n  post(id: 1) {\n    id\n    title\n    content\n    author {\n      id\n      name\n      email\n    }\n  }\n}\n```", "```js\n{\n  \"data\": {\n    \"post\": {\n      \"id\": \"1\",\n      \"title\": \"Hello World\",\n      \"content\": \" Welcome to my first blog.\",\n      \"author\": {\n        \"id\": \"64\",\n        \"name\": \" Jack Thomas\",\n        \"email\": \" jackthomas@gmail.com\"\n      }\n    }\n  }\n}\n```", "```js\nnpx create-next-app my-app-restaurant\n```", "```js\nnpm i @apollo/client @apollo/server @as-integrations/next @testing-library/user-event graphql graphql-tag next-auth styled-components@latest\n```", "```js\nnpm i --save-dev @testing-library/jest-dom @testing-library/react jest jest-environment-jsdom\n```", "```js\n\"test\": \"jest --watch\",\n```", "```js\nmkdir data\ntouch data/menu.js data/profile.js\ntouch .env.local jest.config.mjs\ncd src/app\nmkdir account account/menu account/profile\ntouch account/menu/page.js  account/profile/page.js\nmkdir api api/auth api/auth/\"[...nextauth]\"\ntouch api/auth/\"[...nextauth]\"/route.js\nmkdir components graphql lib nutrition queries rewards utils\ntouch components/GlobalStyles.js components/MainMenu.js components/Provider.js\ntouch graphql/route.js\ntouch lib/registry.js\ntouch nutrition/page.js nutrition/page.test.js\ntouch queries/clientQueries.js\ntouch utils/withApollo.js utils/cors.js\ntouch not-found.js page.test.js\n```", "```js\nimport NextAuth from 'next-auth';\nimport GithubProvider from 'next-auth/providers/github';\nimport GoogleProvider from 'next-auth/providers/google';\nexport const handler = NextAuth({\n  providers: [\n    GithubProvider({\n      clientId: process.env.GITHUB_ID,\n      clientSecret: process.env.GITHUB_SECRET,\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_ID,\n      clientSecret: process.env.GOOGLE_SECRET,\n    }),\n  ],\n});\nexport { handler as GET, handler as POST };\n```", "```js\nuse client';\nimport React, { useState } from 'react';\nimport { useServerInsertedHTML } from 'next/navigation';\nimport { ServerStyleSheet, StyleSheetManager } from 'styled-components';\nexport default function StyledComponentsRegistry({ children }) {\n  // Only create stylesheet once with lazy initial state\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const [styledComponentsStyleSheet] = useState(() => new ServerStyleSheet());\n  useServerInsertedHTML(() => {\n    const styles = styledComponentsStyleSheet.getStyleElement();\n    styledComponentsStyleSheet.instance.clearTag();\n    return <>{styles}</>;\n  });\n  if (typeof window !== 'undefined') return <>{children}</>;\n  return (\n    <StyleSheetManager sheet={styledComponentsStyleSheet.instance}>\n      {children}\n    </StyleSheetManager>\n  );\n}\n```", "```js\nimport nextJest from 'next/jest.js';\nconst createJestConfig = nextJest({\n  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment\n  dir: './',\n});\n// Add any custom config to be passed to Jest\n/** @type {import('jest').Config} */\nconst config = {\n  // Add more setup options before each test is run\n  // setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\n  testEnvironment: 'jest-environment-jsdom',\n};\n// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async\nexport default createJestConfig(config);\n```", "```js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  compiler: {\n    styledComponents: true,\n  },\n};\nmodule.exports = nextConfig;\n```", "```js\nNEXTAUTH_SECRET=\"yournextsecret\"\nGITHUB_ID=\"yourgithubid\"\nGITHUB_SECRET=\"yourgithubsecret\"\nGOOGLE_ID=\"yourgoogleid\"\nGOOGLE_SECRET=\"yourgooglesecret\"\n```", "```js\nexport const menu = [\n  {\n    id: '1',\n    foodType: 'Drinks',\n    name: 'Latte',\n    description: 'Steamed milk',\n  },\n  {\n    id: '2',\n    foodType: 'Drinks',\n    name: 'Cappuccino',\n    description: 'Espresso',\n  },\n];\n```", "```js\nexport const profile = [\n  {\n    id: '1',\n    bio: `Born and raised in London, my name is Jordan Brewer and I am a passionate coffee aficionado with a heart as warm as a freshly brewed cup of java.`,\n  },\n];\n```", "```js\n'use client';\nimport { useSession, signIn, signOut }  from 'next-auth/react';\nimport { useQuery } from '@apollo/client';\nimport { GET_MENU } from '@/app/queries/clientQueries';\nimport withApollo from '../../utils/withApollo';\nimport { styled, ThemeProvider } from 'styled-components';\nimport GlobalStyle from '../../components/GlobalStyles';\nimport MainMenu from '../../components/MainMenu';\nconst theme = {\n  colors: {\n    primary: 'rgb(15 23 42)',\n  },\n};\n```", "```js\nconst MainContainer = styled.div`\n  margin: 2rem auto;\n  max-width: 120rem;\n  padding: 2rem;\n  width: 100%;\n`;\nconst PageTitle = styled.h1`\n  color: #ffffff;\n`;\nconst LoginStatus = styled.p`\n  color: #ffffff;\n`;\nconst SignInOutButton = styled.button`\n  color: #ffffff;\n  padding: 0.5rem;\n  cursor: pointer;\n  margin: 2rem 0 2rem 0;\n`;\nconst ContentContainer = styled.div`\n  display: flex;\n  flex-flow: column wrap;\n`;\nconst Content = styled.p`\n  color: #ffffff;\n  font-size: 1.4rem;\n`;\nconst ItemContainer = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  margin: 2rem 0 2rem 0;\n  border: 0.1rem solid black;\n`;\nconst ItemDescription = styled.div`\n  margin-left: 1rem;\n`;\n```", "```js\nconst Menu = () => {\n  const { loading, error, data } = useQuery(GET_MENU);\n  const { data: session, status } = useSession();\n  const userEmail = session?.user?.email;\n  if (loading) return <Content>Loading...</Content>;\n  if (error) return <Content>Something\n    went wrong</Content>;\n  if (status === 'loading') {\n    return <Content>Hang on there...</Content>;\n  }\n  if (status === 'authenticated') {\n    return (\n      <>\n        <ThemeProvider theme={theme}>\n          <GlobalStyle />\n          <MainMenu />\n          <MainContainer>\n            <PageTitle>Menu</PageTitle>\n            <LoginStatus>Signed in as {userEmail}</LoginStatus>\n            <SignInOutButton onClick={() => signOut()}>\n              Sign out\n            </SignInOutButton>\n            {!loading && !error && (\n              <ContentContainer>\n                {data.menu.map((items) => (\n                  <ContentContainer key={items.id}>\n                    <ItemContainer>\n                      <ItemDescription>\n                        <Content>{items.name}</Content>\n                        <Content>{items.foodType}</Content>\n                        <Content>{items.description}\n                        </Content>\n                      </ItemDescription>\n                    </ItemContainer>\n                  </ContentContainer>\n                ))}\n              </ContentContainer>\n            )}\n          </MainContainer>\n        </ThemeProvider>\n      </>\n    );\n  }\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <MainMenu />\n        <MainContainer>\n          <PageTitle>Menu</PageTitle>\n          <SignInOutButton onClick={() => signIn('')}>\n            Sign in</SignInOutButton>\n          <LoginStatus>Not signed in. Sign in to view\n            the menu.</LoginStatus>\n        </MainContainer>\n      </ThemeProvider>\n    </>\n  );\n};\nexport default withApollo(Menu);\n```", "```js\n'use client';\nimport { useSession, signIn, signOut }  from 'next-auth/react';\nimport { useQuery } from '@apollo/client';\nimport { GET_PROFILE } from '@/app/queries/clientQueries';\nimport withApollo from '../../utils/withApollo';\nimport { styled, ThemeProvider } from 'styled-components';\nimport GlobalStyle from '../../components/GlobalStyles';\nimport MainMenu from '../../components/MainMenu';\n```", "```js\nconst theme = {\n  colors: {\n    primary: 'rgb(15 23 42)',\n  },\n};\nconst MainContainer = styled.div`\n  margin: 2rem auto;\n  max-width: 120rem;\n  padding: 2rem;\n  width: 100%;\n`;\nconst PageTitle = styled.h1`\n  color: #ffffff;\n`;\nconst LoginStatus = styled.p`\n  color: #ffffff;\n`;\nconst SignInOutButton = styled.button`\n  color: #ffffff;\n  padding: 0.5rem;\n  cursor: pointer;\n  margin: 2rem 0 2rem 0;\n`;\nconst ContentContainer = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n`;\nconst Content = styled.p`\n  color: #ffffff;\n  font-size: 1.4rem;\n  margin-top: 2rem;\n`;\n```", "```js\nconst ClientProtectPage = () => {\n  const { loading, error, data } = useQuery(GET_PROFILE);\n  const { data: session, status } = useSession();\n  const userEmail = session?.user?.email;\n  if (loading) return <Content>Loading...</Content>;\n  if (error) return <Content>Something went wrong\n    </Content>;\n  if (status === 'loading') {\n    return <Content>Hang on there...</Content>;\n  }\n  if (status === 'authenticated') {\n    return (\n      <>\n        <ThemeProvider theme={theme}>\n          <GlobalStyle />\n          <MainMenu />\n          <MainContainer>\n            <PageTitle>Profile</PageTitle>\n            <LoginStatus>Signed in as {userEmail}\n            </LoginStatus>\n            <SignInOutButton onClick={() => signOut()}>\n              Sign out\n            </SignInOutButton>\n            {!loading && !error && (\n              <ContentContainer>\n                {data.profile.map((account) => (\n                  <ContentContainer key={account.id}>\n                    <Content>{account.bio}</Content>\n                  </ContentContainer>\n                ))}\n              </ContentContainer>\n            )}\n          </MainContainer>\n        </ThemeProvider>\n      </>\n    );\n  }\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <MainMenu />\n        <MainContainer>\n          <PageTitle>Profile</PageTitle>\n          <SignInOutButton onClick={() => signIn('')}>\n          Sign in</SignInOutButton>\n          <LoginStatus>\n            Not signed in. Sign in to view your profile.\n          </LoginStatus>\n        </MainContainer>\n      </ThemeProvider>\n    </>\n  );\n};\nexport default withApollo(ClientProtectPage);\n```", "```js\nimport Link from 'next/link';\nimport { styled } from 'styled-components';\nconst MainNavigation = styled.nav`\n  position: relative;\n  z-index: 1;\n  display: flex;\n  flex-flow: wrap;\n  justify-content: space-around;\n  font-size: 2rem;\n  padding: 1rem;\n  background: rgb(250 250 250);\n`;\nexport default function MainMenu() {\n  return (\n    <MainNavigation>\n      <Link href=\"/\">Home</Link>\n      <Link href=\"/nutrition\">Nutrition</Link>\n      <Link href=\"/account/menu\">Menu</Link>\n      <Link href=\"/account/profile\">Profile</Link>\n    </MainNavigation>\n  );\n}\n```", "```js\n'use client';\nimport { SessionProvider } from 'next-auth/react';\nconst Provider = ({ children }) => {\n  return <SessionProvider>{children}</SessionProvider>;\n};\nexport default Provider;\n```", "```js\nmport { ApolloServer } from '@apollo/server';\nimport { startServerAndCreateNextHandler } from '@as-integrations/next';\nimport { gql } from 'graphql-tag';\nimport { menu } from '../../../data/menu';\nimport { profile } from '../../../data/profile';\nimport allowCors from '../utils/cors';\n// Define the GraphQL schema and resolvers\nconst typeDefs = gql`\n  type Menu {\n    id: String\n    foodType: String\n    name: String\n    description: String\n  }\n  type Profile {\n    id: String\n    bio: String\n  }\n  type Query {\n    menu: [Menu]\n    profile: [Profile]\n  }\n`;\nconst resolvers = {\n  Query: {\n    menu: () => menu,\n    profile: () => profile,\n  },\n};\n// Create the Apollo Server\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\nconst handler = startServerAndCreateNextHandler(server, {\n  context: async (req, res) => ({ req, res }),\n});\nexport async function GET(request) {\n  return handler(request);\n}\nexport async function POST(request) {\n  return handler(request);\n}\nexport default allowCors(handler);\n```", "```js\n'use client';\nimport { styled, ThemeProvider } from 'styled-components';\nimport GlobalStyle from '../components/GlobalStyles';\nimport MainMenu from '../components/MainMenu';\nconst theme = {\n  colors: {\n    primary: 'rgb(15 23 42)',\n  },\n};\nconst MainContainer = styled.div`\n  margin: 2rem auto;\n  max-width: 120rem;\n  padding: 2rem;\n  width: 100%;\n`;\nconst PageTitle = styled.h1`\n  color: #ffffff;\n`;\nconst PageIntro = styled.p`\n  color: #ffffff;\n  margin-top: 2rem;\n  font-size: 1.4rem;\n`;\nexport default function Nutrition() {\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <MainMenu />\n        <MainContainer>\n          <PageTitle>Nutrition</PageTitle>\n          <PageIntro>Nutrition is good for health\n          and diet!</PageIntro>\n        </MainContainer>\n      </ThemeProvider>\n    </>\n  );\n}\n```", "```js\nimport { gql } from '@apollo/client';\nconst GET_MENU = gql`\n  query {\n    menu {\n      id\n      name\n      foodType\n      description\n    }\n  }\n`;\nconst GET_PROFILE = gql`\n  query {\n    profile {\n      id\n      bio\n    }\n  }\n`;\nexport { GET_MENU, GET_PROFILE };\n```", "```js\nconst allowCors = (fn) => async (req, res) => {\n  res.setHeader('Access-Control-Allow-Credentials', true);\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Origin', req.headers.origin);\n  res.setHeader(\n    'Access-Control-Allow-Methods',\n    'GET,OPTIONS,PATCH,DELETE,POST,PUT'\n  );\n  res.setHeader(\n    'Access-Control-Allow-Headers',\n    'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, \n       Content-Length, Content-MD5, Content-Type, Date, X-Api-Version'\n  );\n  if (req.method === 'OPTIONS') {\n    res.status(200).end();\n    return;\n  }\n  await fn(req, res);\n};\nexport default allowCors;\n```", "```js\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport { useMemo } from 'react';\nimport { SessionProvider } from 'next-auth/react';\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = new ApolloClient({\n    // Local GraphQL endpoint\n    // uri: 'http://localhost:3000/graphql',\n    // Your online GraphQL endpoint\n    uri: 'https://coffee-restaurant.vercel.app/graphql',\n    cache: new InMemoryCache().restore(initialState || {}),\n  });\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), \n    [initialState]);\n  return store;\n}\nexport default function withApollo(PageComponent) {\n  const WithApollo = ({ apolloClient, apolloState, session, \n    ...pageProps }) => {\n    const client = useApollo(apolloState);\n    return (\n      <SessionProvider session={session}>\n        <ApolloProvider client={client}>\n          <PageComponent {...pageProps} />\n        </ApolloProvider>\n      </SessionProvider>\n    );\n  };\n  // On the server\n  if (typeof window === 'undefined') {\n    WithApollo.getInitialProps = async (ctx) => {\n      const apolloClient = initializeApollo();\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      }\n      if (ctx.res && ctx.res.finished) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        return pageProps;\n      }\n      const apolloState = apolloClient.cache.extract();\n      return {\n        ...pageProps,\n        apolloState,\n      };\n    };\n  }\n  return WithApollo;\n}\n```", "```js\nimport './globals.css';\nimport { Dosis } from 'next/font/google';\nimport StyledComponentsRegistry from './lib/registry';\nconst dosis = Dosis({ subsets: ['latin'] });\nexport const metadata = {\n  title: 'Resturant App',\n  description: 'Generated by create next app',\n};\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <StyledComponentsRegistry>\n        <body className={dosis.className}>{children}</body>\n      </StyledComponentsRegistry>\n    </html>\n  );\n}\n```", "```js\n'use client';\nimport { styled, ThemeProvider } from 'styled-components';\nimport GlobalStyle from '../../src/app/components/GlobalStyles';\nimport MainMenu from './components/MainMenu';\nconst theme = {\n  colors: {\n    primary: 'rgb(15 23 42)',\n  },\n};\nconst MainContainer = styled.div`\n  margin: 2rem auto;\n  max-width: 120rem;\n  padding: 2rem;\n  width: 100%;\n`;\nconst PageTitle = styled.h1`\n  color: #ffffff;\n`;\nconst PageIntro = styled.p`\n  color: #ffffff;\n  margin-top: 2rem;\n  font-size: 1.4rem;\n`;\nexport default function NotFound() {\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <MainMenu />\n        <MainContainer>\n          <PageTitle>Page Not Found</PageTitle>\n          <PageIntro>Could not find requested\n            page :(</PageIntro>\n        </MainContainer>\n      </ThemeProvider>\n    </>\n  );\n}\n```", "```js\n'use client';\nimport { styled, ThemeProvider } from 'styled-components';\nimport GlobalStyle from '../../src/app/components/GlobalStyles';\nimport MainMenu from './components/MainMenu';\nconst theme = {\n  colors: {\n    primary: 'rgb(15 23 42)',\n  },\n};\nconst MainContainer = styled.div`\n  margin: 0 auto;\n  width: 100%;\n`;\nconst CoverHeadingBG = styled.div`\n  margin: 2rem auto;\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  background-color: rgb(6 95 70);\n  color: rgb(255 255 255);\n  border-radius: 2rem;\n  padding: 2rem;\n`;\nconst CoverHeading = styled.h1`\n  text-transform: uppercase;\n`;\nconst CoverIntro = styled.p`\n  font-size: 1.4rem;\n  margin: 2rem 2rem;\n`;\nconst Hero = styled.div`\n  margin: 2rem auto;\n  background-image: url('https://res.cloudinary.com/d74fh3kw/image/\n    upload/v1692557430/coffee-restaurant/coffee-shop_zlkf7u.jpg');\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n  background-color: rgb(4 120 87);\n  height: 67.5rem;\n  width: 100%;\n`;\nexport default function Home() {\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <MainContainer>\n          <MainMenu />\n          <CoverHeadingBG>\n            <CoverHeading>Summer time is here!</CoverHeading>\n            <CoverIntro>\n              Our summer menu has arrived. Freshen up your day with \n                our creamy\n              and delicious coffee range, iced teas and mouth watering \n                snacks.\n            </CoverIntro>\n          </CoverHeadingBG>\n          <Hero></Hero>\n        </MainContainer>\n      </ThemeProvider>\n    </>\n  );\n}\n```", "```js\nexport default function Home() {\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <MainContainer>\n          <MainMenu />\n          <CoverHeadingBG>\n            <CoverHeading>Summer time is here!</CoverHeading>\n            <CoverIntro>\n              Our summer menu has arrived. Freshen up your day with \n                our creamy\n              and delicious coffee range, iced teas and mouth watering \n                snacks.\n            </CoverIntro>\n          </CoverHeadingBG>\n          <Hero></Hero>\n        </MainContainer>\n      </ThemeProvider>\n    </>\n  );\n}\n```", "```js\nimport { createGlobalStyle } from 'styled-components';\nconst GlobalStyle = createGlobalStyle`\n  html,\n  body {\n    color: ${({ theme }) => theme.colors.primary};\n    padding: 0;\n    margin: 0;\n    font-size: 1rem;\n    background: rgb(6 78 59);\n  }\n  * {\n    box-sizing: border-box;\n  }\n`;\nexport default GlobalStyle;\n```", "```js\nquery {\n  menu {\n    id\n    name\n    foodType\n    description\n  }\n}\n```", "```js\nimport { render, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom/extend-expect';\nimport Nutrition from './page';\ndescribe('Nutrition', () => {\n  it('renders without crashing', () => {\n    render(<Nutrition />);\n  });\n  it('displays the correct title and intro', () => {\n    render(<Nutrition />);\n    expect(\n      screen.getByText('Nutrition is good for health and diet!')\n    ).toBeInTheDocument();\n  });\n});\n```", "```js\nimport { render, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom/extend-expect';\nimport Home from './page';\ndescribe('Home', () => {\n  it('renders without crashing', () => {\n    render(<Home />);\n  });\n  it('displays the correct heading and intro', () => {\n    render(<Home />);\n    expect(screen.getByText('Summer time is here!')).\n      toBeInTheDocument();\n    expect(\n      screen.getByText(\n        /Our summer menu has arrived. Freshen up your day with our \n           creamy and delicious coffee range, iced teas and mouth \n           watering snacks./\n      )\n    ).toBeInTheDocument();\n  });\n});\n```", "```js\ngit init\ngit add .\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin https://github.com/yourname/yourprojectname.git\ngit push -u origin main\n```", "```js\ngit status\ngit add .\ngit commit -m \"vercel graphql endpoint for uri\"\ngit push\n```"]