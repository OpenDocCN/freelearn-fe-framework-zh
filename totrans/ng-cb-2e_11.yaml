- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: E2E Tests in Angular with Cypress
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cypress在Angular中进行端到端测试
- en: 'An app having a couple of **End-to-End** (**E2E**) tests surely promises more
    reliability than an app having no tests at all, and in today’s world, with emerging
    businesses and complex applications, it becomes essential at some point to have
    E2E tests written to capture the entire flow of an application. Cypress is one
    of the best tools out there today when it comes to E2E tests for web applications.
    In this chapter, you’ll learn how to test your E2E flows in an Angular app with
    Cypress. Here are the recipes we’re going to cover in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有几个**端到端**（**E2E**）（**E2E**）测试的应用程序肯定比没有任何测试的应用程序更可靠，在当今世界，随着新兴企业和复杂应用程序的出现，在某些时候编写E2E测试以捕获应用程序的整个流程变得至关重要。Cypress是目前用于Web应用程序E2E测试的最佳工具之一。在本章中，您将学习如何使用Cypress测试Angular应用程序中的E2E流程。以下是本章将要涵盖的食谱：
- en: Writing your first Cypress test
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写您的第一个Cypress测试
- en: Validating if a DOM element is visible on the view
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证DOM元素是否在视图中可见
- en: Testing form inputs and submission
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试表单输入和提交
- en: Waiting for **XMLHttpRequests** (**XHRs**) to finish
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待**XMLHttpRequests**（**XHRs**）完成
- en: Using Cypress bundled packages
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cypress捆绑包
- en: Using Cypress fixtures to provide mock data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cypress fixtures提供模拟数据
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For the recipes in this chapter, ensure your setup is complete as per the ''Technical
    Requirements'' in the ''Angular-Cookbook-2E'' GitHub repository. For setup details,
    visit: [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md).
    The starter code for this chapter is located at [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter11](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter11).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章中的食谱，请确保您的设置已按照“Angular-Cookbook-2E”GitHub仓库中的“技术要求”完成。有关设置详细信息，请访问：[https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md)。本章的起始代码位于[https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter11](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter11)。
- en: Writing your first Cypress test
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写您的第一个Cypress测试
- en: If you have been writing E2E tests already, you might have been doing this using
    Protractor. Working with Cypress is a completely different experience, though.
    In this recipe, you’ll set up Cypress with an existing Angular application and
    write your first E2E test with Cypress.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经编写了E2E测试，您可能已经使用Protractor这样做过。使用Cypress是完全不同的体验。在本食谱中，您将使用现有的Angular应用程序设置Cypress，并使用Cypress编写第一个E2E测试。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The app that we are going to work with resides in `start/apps/chapter11/ng-cypress-starter`
    inside the cloned repository:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的应用程序位于克隆的仓库中的`start/apps/chapter11/ng-cypress-starter`：
- en: Open the code repository in your code editor.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开代码仓库。
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到代码仓库目录，并运行以下命令以启动项目：
- en: '[PRE0]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This should open the app in a new browser tab, and you should see the following:'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该在新的浏览器标签页中打开应用程序，您应该看到以下内容：
- en: '![](img/B18469_11_01.png)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![img/B18469_11_01.png](img/B18469_11_01.png)'
- en: 'Figure 11.1: ng-cypress-starter app running on localhost:4200'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图11.1：ng-cypress-starter应用程序在localhost:4200上运行
- en: How to do it…
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'The app we’re working with is a simple counter application. It has minimum
    and maximum values and some buttons that can increment, decrement, and reset the
    counter’s value. We’ll start by configuring Cypress for our application and will
    then move toward writing the test:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在工作的应用程序是一个简单的计数器应用程序。它有最小值和最大值，以及一些可以增加、减少和重置计数器值的按钮。我们将首先为我们的应用程序配置Cypress，然后转向编写测试：
- en: 'Since we’re using an NX workspace, the setup here looks different from a regular
    Angular application. Open a new terminal window/tab and make sure you’re inside
    the workspace’s root folder. Once inside, run the following command to install
    **Cypress** in our project:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们使用的是NX工作区，这里的设置与常规Angular应用程序不同。打开一个新的终端窗口/标签，并确保您位于工作区的根目录中。一旦进入，运行以下命令将**Cypress**安装到我们的项目中：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, run the following command from the workspace’s root folder to create a
    `cypress` project for the app as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从工作区的根目录运行以下命令为应用程序创建一个`cypress`项目，如下所示：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When (or if) asked, choose the `Vite` bundler for Cypress during the installation
    since Vite is a faster bundler and provides a faster development server as well.
    And select the “Ap provided” so we have the folder `ng-cy-starter-e2e` created
    in `start/apps/chapter11` folder. You’ll see that a new folder named `ng-cypress-starter-e2e`
    will be created inside the `start/apps` folder.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当（或如果）被问及时，在安装过程中选择 Cypress 的 `Vite` 打包器，因为 Vite 是一个更快的打包器，同时也提供了一个更快的开发服务器。并选择“Ap
    provided”，这样我们就在 `start/apps/chapter11` 文件夹中创建了 `ng-cy-starter-e2e` 文件夹。你会看到在
    `start/apps` 文件夹内创建了一个名为 `ng-cypress-starter-e2e` 的新文件夹。
- en: 'Let us run a script to rename our app from `chapter11-ng-cypress-starter-e2e`
    to `ng-cypress-starter-e2e`. This will make it easier for us to run the `e2e`
    tests for this recipe and the next. Use the following command from the workspace’s
    root folder:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行一个脚本来重命名我们的应用程序，从 `chapter11-ng-cypress-starter-e2e` 改为 `ng-cypress-starter-e2e`。这将使我们更容易运行此食谱和下一个食谱的
    `e2e` 测试。请在工作区的根目录中使用以下命令：
- en: '[PRE3]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now you can run the following command to start the Cypress tests from the workspace’s
    root folder (outside of the `start` folder):'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以从工作区的根目录（在 `start` 文件夹外部）运行以下命令来启动 Cypress 测试：
- en: '[PRE4]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You should be able to use a browser to start running the tests. I will be using
    Chrome as the browser for `e2e` tests in this book.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该能够使用浏览器来启动运行测试。我将使用 Chrome 作为本书 `e2e` 测试的浏览器。
- en: Click the `app.cy.ts` in the `cypress-chrome` window (the browser window opened
    as a result of *step 4*) to run the default-created tests. We will be modifying
    this file in the recipe to write our own tests. Once you run the tests, you’ll
    see them failing. But do not worry about it since we have not written our own
    tests.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `cypress-chrome` 窗口中点击 `app.cy.ts`（由 *步骤 4* 打开的浏览器窗口）来运行默认创建的测试。我们将在食谱中修改此文件以编写自己的测试。一旦运行测试，你会看到它们失败。但不要担心，因为我们还没有编写自己的测试。
- en: 'Let us create our first test now. We will just check whether the title in the
    header of our app says `Your first Cypress test in Angular`. Let us replace the
    entire content of the `src/e2e/support/app.po.ts` file by creating a **PO** (**Page
    Object**) in the file as follows:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们现在创建我们的第一个测试。我们将只是检查应用程序标题中的标题是否为 `Your first Cypress test in Angular`。让我们通过在文件中创建一个
    **PO**（**页面对象**）来替换 `src/e2e/support/app.po.ts` 文件的全部内容如下：
- en: '[PRE5]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will now import the `getHeaderTitle` in the `src/e2e/app.cy.ts` file and
    replace the first test as follows:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将从 `src/e2e/app.cy.ts` 文件中导入 `getHeaderTitle` 并替换第一个测试如下：
- en: '[PRE6]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you look again at the Cypress window, you should see the test passing as
    follows:![](img/B18469_11_02.png)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你再次查看 Cypress 窗口，你应该会看到测试通过如下：![img/B18469_11_02.png]
- en: 'Figure 11.2: Our first Cypress test passes'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.2：我们的第一个 Cypress 测试通过
- en: '*Easy, right?* Now that you know how to configure Cypress for an Angular app
    (especially in NX), see the next section to understand how it works.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*简单，对吧？* 现在你已经知道了如何为 Angular 应用程序配置 Cypress（尤其是在 NX 中），请参阅下一节了解它是如何工作的。'
- en: How it works…
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Cypress can be integrated with absolutely any framework and web development
    project. One interesting fact is that Cypress uses Mocha as the test runner behind
    the scenes. The tooling for Cypress watches for code changes so that you do not
    have to recompile the tests repeatedly. Cypress also adds a shell around the application
    being tested to capture logs and access DOM elements during the tests, and some
    functionality for debugging tests.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress 可以与任何框架和 Web 开发项目集成。一个有趣的事实是，Cypress 在幕后使用 Mocha 作为测试运行器。Cypress 的工具会监视代码更改，这样你就不必反复重新编译测试。Cypress
    还在测试的应用程序周围添加了一个外壳，以捕获日志并在测试期间访问 DOM 元素，以及一些用于调试测试的功能。
- en: 'At the very top of our `app.cy.ts` file, we use the `describe` method, which
    defines the test suite, defining the context of the tests about to be written
    inside. Then, we use a `beforeEach` method to specify what should happen before
    each test is executed. Since each test starts with no data, we first must make
    sure that Cypress navigates to our application’s URL: `http://localhost:4200`.
    The reason we just specify `cy.visit(''/'')` and it still works is that NX automagically
    configures it with the `@nx/cypress` package. If you add Cypress to a standard
    Angular app (not in an NX workspace), you will have to specify the `baseUrl` in
    the Cypress config file (`cypress.config.ts`) as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `app.cy.ts` 文件的最顶部，我们使用 `describe` 方法，它定义了测试套件，并定义了即将编写的测试的上下文。然后，我们使用
    `beforeEach` 方法来指定在执行每个测试之前应该发生什么。由于每个测试开始时没有数据，我们首先必须确保 Cypress 导航到我们的应用程序的 URL：`http://localhost:4200`。我们之所以只指定
    `cy.visit('/')` 而它仍然可以工作，是因为 NX 自动使用 `@nx/cypress` 包进行配置。如果您将 Cypress 添加到标准的 Angular
    应用程序（不在 NX 工作区中），您将必须在 Cypress 配置文件（`cypress.config.ts`）中指定 `baseUrl`，如下所示：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: However, NX does this for us for the recipes of this book. Therefore, we just
    have to provide relative URLs in our tests.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，NX 为这本书的食谱做了这件事。因此，我们只需在我们的测试中提供相对 URL。
- en: 'For each of our tests, we use the `it` method to specify the title for them.
    You will notice that in the `app.cy.ts` file, we are importing the `getHeaderTitle`
    method from the `support/app.po` file. As mentioned earlier in the recipe, **PO**
    means **page object**. This is a widespread practice to use these objects to contain
    functions that return **Document Object Module** (**DOM**) elements. This keeps
    our tests clear of code that interacts with the DOM to retrieve elements, and
    we have reusable functions for our tests. In the `app.po` file, you can see that
    we use the `cy.get` method to retrieve a single element that has the class `toolbar__title`
    applied to it. All the Angular applications for the recipes in this book have
    a header and a title that shows what the recipe is about. Notice that in the `app.cy.ts`
    file, we use the `getHeaderTitle` method to get the target element from our HTML
    page. And then we use the `should()` method to compare the text of the title with
    the expected value `Your first Cypress test in Angular`. Notice that we are using
    ‘`contain.text`'' instead of `''have.text''` because there can be whitespace in
    the target element. The following are some other examples of the `should` method
    with some different statements:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们每个测试，我们使用 `it` 方法来指定它们的标题。您会注意到在 `app.cy.ts` 文件中，我们正在从 `support/app.po`
    文件导入 `getHeaderTitle` 方法。如食谱中先前所述，**PO** 代表 **page object**。这是一种广泛的做法，使用这些对象来包含返回
    **Document Object Module**（**DOM**）元素的函数。这使我们的测试免于与 DOM 交互以检索元素的代码，并且我们有可重用的测试函数。在
    `app.po` 文件中，您可以看到我们使用 `cy.get` 方法检索一个应用了 `toolbar__title` 类的单个元素。本书中所有食谱的 Angular
    应用程序都有一个标题和一个显示食谱内容的标题。请注意，在 `app.cy.ts` 文件中，我们使用 `getHeaderTitle` 方法从我们的 HTML
    页面获取目标元素。然后我们使用 `should()` 方法将标题的文本与预期的值 `Your first Cypress test in Angular`
    进行比较。请注意，我们使用 ‘`contain.text`’ 而不是 `'have.text'`，因为目标元素中可能有空白字符。以下是一些使用 `should`
    方法的其他示例，其中包含不同的语句：
- en: '`should(''be.visible'')`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`should(''be.visible'')`'
- en: '`should(''be.empty'')`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`should(''be.empty'')`'
- en: '`should(''be.visible'')`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`should(''be.visible'')`'
- en: '`should(''have.class''''my-class'')`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`should(''have.class''''my-class'')`'
- en: '`should(''have.id''''newUserId'')`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`should(''have.id''''newUserId'')`'
- en: '`should(''be.visible'')`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`should(''be.visible'')`'
- en: '`should(''have.focus'')`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`should(''have.focus'')`'
- en: Now that you understand how the recipe works, see the next section for some
    useful links.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了食谱的工作原理，请参阅下一节以获取一些有用的链接。
- en: See also
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '`cy.get` documentation: [https://docs.cypress.io/api/commands/get](https://docs.cypress.io/api/commands/get)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cy.get` 文档：[https://docs.cypress.io/api/commands/get](https://docs.cypress.io/api/commands/get)'
- en: 'Cypress documentation – W*riting Your First Test*: [https://docs.cypress.io/guides/getting-started/writing-your-first-test.html](https://docs.cypress.io/guides/getting-started/writing-your-first-test.html)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cypress 文档 – 编写您的第一个测试：[https://docs.cypress.io/guides/getting-started/writing-your-first-test.html](https://docs.cypress.io/guides/getting-started/writing-your-first-test.html)
- en: Validating if a DOM element is visible on the view
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证 DOM 元素在视图中是否可见
- en: In most web applications, there is at least one element/view that is shown based
    on a certain condition. Otherwise, it is hidden. When it comes to making sure
    the end users see the right content in the right situations, it becomes necessary
    to test them well. In this recipe, you are going to learn how to check if an element
    is visible on the DOM.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数网络应用程序中，至少有一个元素/视图是基于某种条件显示的。否则，它会被隐藏。当确保最终用户在正确的情况下看到正确的内容时，进行良好的测试变得必要。在这个菜谱中，你将学习如何检查元素是否在
    DOM 中可见。
- en: Getting ready
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The app that we are going to work with resides in `start/apps/chapter11/ng-cy-element-visibility`
    inside the cloned repository. However, the `e2e` tests are in the folder `start/apps/chapter11/ng-cy-element-visibility-e2e`.
    In this recipe, we are going to modify files in both folders. Let’s run the e2e
    tests first by following these steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的应用程序位于克隆的仓库中的 `start/apps/chapter11/ng-cy-element-visibility`。然而，`e2e`
    测试在 `start/apps/chapter11/ng-cy-element-visibility-e2e` 文件夹中。在这个菜谱中，我们将修改这两个文件夹中的文件。让我们按照以下步骤首先运行
    e2e 测试：
- en: Open the code repository in your code editor.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开代码仓库。
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to run the e2e tests for the project:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到代码仓库目录，并运行以下命令以运行项目的 e2e 测试：
- en: '[PRE8]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This should open the Cypress window. Select Chrome for testing and click the
    `app.cy.ts` file to run the tests and you should see the following:'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会打开 Cypress 窗口。选择 Chrome 进行测试，然后点击 `app.cy.ts` 文件以运行测试，你应该会看到以下内容：
- en: '![](img/B18469_11_03.png)'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_11_03.png)'
- en: 'Figure 11.3: Cypress tests running for the ng-cy-element-visibility app'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.3：ng-cy-element-visibility 应用程序的 Cypress 测试运行
- en: Now that we have the app and the Cypress tests running locally, let us see the
    steps of the recipe in the next section.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在本地运行了应用程序和 Cypress 测试，让我们看看下一节中菜谱的步骤。
- en: How to do it…
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: We have the same old counter app from the previous recipe. However, some things
    have changed. We now have a button at the top that toggles the visibility of the
    counter component `(CounterComponent)`. Also, we must hover over the counter card
    to see the **Increment**, **Decrement**, and **Reset** action buttons.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有来自上一个菜谱的同一个旧的计数应用程序。然而，有些事情已经改变了。我们现在在顶部有一个按钮，可以切换计数组件 `(CounterComponent)`
    的可见性。此外，我们必须将鼠标悬停在计数卡片上才能看到 `Increment`、`Decrement` 和 `Reset` 操作按钮。
- en: 'Let’s create the page objects necessary for our tests. We’ll create functions
    to return the toggle button and the counter card from the page object `app.po.ts`
    file. Update the `src/support/app.po.ts` file in the `start/apps/chapter11/ng-cy-element-visibility-e2e`
    folder as follows:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建必要的页面对象以供测试。我们将在页面对象 `app.po.ts` 文件中创建返回切换按钮和计数卡片的功能。更新 `start/apps/chapter11/ng-cy-element-visibility-e2e`
    文件夹中的 `src/support/app.po.ts` 文件，如下所示：
- en: '[PRE9]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let’s add the relevant test IDs now to the HTML. We’ll add the `test-id` attributes
    for both the toggle-counter button and the counter element. Modify the file `ng-cy-element-visibility/src/app/app.component.html`
    as follows:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们现在将相关的测试 ID 添加到 HTML 中。我们将为切换计数按钮和计数元素添加 `test-id` 属性。修改 `ng-cy-element-visibility/src/app/app.component.html`
    文件，如下所示：
- en: '[PRE10]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we will write a test to ensure that our counter card is shown and hidden
    when we click the toggle-counter button. To do this, update the `ng-cy-element-visibility-e2e/src/e2e/app.cy.ts`
    file as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个测试来确保当点击切换计数按钮时，我们的计数卡片会显示和隐藏。为此，更新 `ng-cy-element-visibility-e2e/src/e2e/app.cy.ts`
    文件，如下所示：
- en: '[PRE11]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, we’ll write another test to check if our action buttons (`Increment`,`Decrement`,and`Reset`)
    show up when we hover over the `Counter` component. Update the `app.cy.ts` file
    again, as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将编写另一个测试来检查当我们将鼠标悬停在 `Counter` 组件上时，我们的操作按钮（`Increment`、`Decrement` 和 `Reset`）是否会显示。再次更新
    `app.cy.ts` 文件，如下所示：
- en: '[PRE12]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you look at the Cypress window now, you should see the test failing, as
    follows:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你现在查看 Cypress 窗口，你应该会看到测试失败，如下所示：
- en: '![](img/B18469_11_04.png)'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_11_04.png)'
- en: 'Figure 11.4: Unable to get action buttons on hovering'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.4：无法在悬停时获取操作按钮
- en: The reason for the test’s failure is that Cypress does not currently provide
    a **CSS** hover effect. To work around this, we will install a package in the
    next step.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试失败的原因是 Cypress 目前不提供 **CSS** 悬停效果。为了解决这个问题，我们将在下一步安装一个包。
- en: 'Stop running the e2e tests and then install the `cypress-real-events` package,
    as follows from the workspace’s root folder:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止运行 e2e 测试，然后从工作区的根目录安装 `cypress-real-events` 包，如下所示：
- en: '[PRE13]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, open the `src/support/e2e.ts` file in the `ng-cy-element-visibility-e2e`
    project and update it, as follows:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`ng-cy-element-visibility-e2e`项目中的`src/support/e2e.ts`文件并更新它，如下所示：
- en: '[PRE14]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, update the `app.cy.ts` file to use the `realHover` method from the package
    on the `counter card` element, as follows:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，更新`app.cy.ts`文件以在`counter card`元素上使用包中的`realHover`方法，如下所示：
- en: '[PRE15]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, run the `npm run e2e ng-cy-element-visibility` command again from the
    workspace root (if it is not running already). You should see all the tests passing,
    as shown in *Figure 11.5*:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，再次从工作区根目录运行`npm run e2e ng-cy-element-visibility`命令（如果尚未运行）。你应该会看到所有测试通过，如图11.5所示：
- en: '![](img/B18469_11_05.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18469_11_05.png)'
- en: 'Figure 11.5: All tests passing'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5：所有测试通过
- en: Awesome! You’ve just learned how to check the visibility of DOM elements in
    different scenarios. These are, of course, not the only options available to identify
    and interact with DOM elements. You can refer to the Cypress documentation for
    more possibilities. Now that you have finished the recipe, see the next section
    to understand how it works.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！你刚刚学会了如何在不同的场景中检查DOM元素的可见性。当然，这些不是识别和与DOM元素交互的唯一选项。你可以参考Cypress文档以获取更多可能性。现在你已经完成了这个食谱，请查看下一节以了解它是如何工作的。
- en: How it works…
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We started the recipe by building the POs. It is a good idea to do so to have
    the functions ready for when we write the tests. And if a function doesn’t exist
    to get a particular page object, we can create it on the go. Notice that we check
    `getCounterCard` with a `should('exist')` statement. If you don’t already know,
    we could have used `should('be.visible')` as well, and that would work too. But
    when we want to make sure that it is not visible, we can’t use the `should('not.be.visible')`
    statement. And now you’ll be thinking, ‘‘What??’’ Exactly! Since `'visible'` in
    Cypress is built so that the element exists in the DOM and is visible too, it
    can’t accommodate cases where an element doesn’t exist in the DOM if we use `'be.visible'`
    or `'not.be.visible'`. And since we use the `*ngIf` directive to show or hide
    our `Counter` `component`, it ends up either *existing* in the DOM or not. Hence,
    using `should('exist')` and `should('not.exis')` is the appropriate choice here.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过构建POs（页面对象）开始了这个食谱。这样做是个好主意，以便在编写测试时准备好函数。如果不存在获取特定页面对象的函数，我们可以在运行时创建它。请注意，我们使用`should('exist')`语句检查`getCounterCard`。如果你还不知道，我们也可以使用`should('be.visible')`，这同样有效。但是，当我们想要确保它不可见时，我们不能使用`should('not.be.visible')`语句。现在你可能正在想，“什么？！”确实如此！由于Cypress中的`'visible'`是构建得使得元素存在于DOM中并且可见，如果我们使用`'be.visible'`或`'not.be.visible'`，它无法适应元素不存在于DOM中的情况。而且，由于我们使用`*ngIf`指令来显示或隐藏我们的`Counter`组件，它最终要么存在于DOM中，要么不存在。因此，使用`should('exist')`和`should('not.exis')`在这里是合适的选择。
- en: For the next test, we wanted to see if hovering (or doing a mouse over) on the
    counter card displays the action buttons. For this, we could use the `trigger`
    method on the counter card with the `mouseover` event. However, that won’t work.
    Why? Because all the hover workarounds in Cypress eventually lead to triggering
    the JavaScript events and doesn’t affect the CSS pseudo selectors, and since we
    have our action buttons (with the `'.counter__actions__action'` selector) shown
    on the `:hover` (CSS) of the element with the `'.counter'` selector, our tests
    fail because, in the tests, our action buttons are not actually shown. To tackle
    the issue, we use the `cypress-real-events` package, which has the `realHover`
    method that affects the pseudo selectors and eventually shows our action buttons.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一个测试，我们想看看当在计数器卡片上悬停（或进行鼠标悬停）时是否会显示操作按钮。为此，我们可以在计数器卡片上使用带有`mouseover`事件的`trigger`方法。然而，这不会起作用。为什么？因为Cypress中所有的悬停解决方案最终都会触发JavaScript事件，并且不会影响CSS伪选择器，而且由于我们的操作按钮（带有`'.counter__actions__action'`选择器）显示在具有`'.counter'`选择器的元素的`:hover`（CSS）上，我们的测试失败了，因为在测试中，我们的操作按钮实际上并没有显示。为了解决这个问题，我们使用了`cypress-real-events`包，它具有影响伪选择器的`realHover`方法，最终显示我们的操作按钮。
- en: See also
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Cypress official documentation on the visibility of items: [https://docs.cypress.io/guides/core-concepts/interacting-with-elements.html#Visibility](https://docs.cypress.io/guides/core-concepts/interacting-with-elements.html#Visibility)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cypress官方文档关于项目可见性的说明：[https://docs.cypress.io/guides/core-concepts/interacting-with-elements.html#Visibility](https://docs.cypress.io/guides/core-concepts/interacting-with-elements.html#Visibility)
- en: '`cypress-real-events` project repository: [https://github.com/dmtrKovalenko/cypress-real-events](https://github.com/dmtrKovalenko/cypress-real-events)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cypress-real-events` 项目仓库：[https://github.com/dmtrKovalenko/cypress-real-events](https://github.com/dmtrKovalenko/cypress-real-events)'
- en: Testing form inputs and submission
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试表单输入和提交
- en: If you’re building a web app, there’s a high chance that you’re going to have
    at least one form in it, and when it comes to forms, we need to make sure that
    we have the right **User Experience** (**UX**) and the right business logic in
    place. What better way to make sure everything works as expected than writing
    E2E tests for them? In this recipe, we’re going to test a form using Cypress and
    validate if the correct errors are being shown in appropriate situations.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在构建一个网络应用程序，那么你很可能至少会有一个表单，当涉及到表单时，我们需要确保我们有正确的**用户体验**（**UX**）和正确的业务逻辑。有什么比为他们编写端到端测试更好的方法来确保一切按预期工作呢？在这个菜谱中，我们将使用
    Cypress 测试一个表单，并验证在适当的情况下是否显示了正确的错误。
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The app that we are going to work with resides in `start/apps/chapter11/ng-cy-forms`
    inside the cloned repository. However, the e2e tests are in the folder `start/apps/chapter11/ng-cy-forms-e2e`.
    In this recipe, we’re going to modify files in both folders. Let’s run the e2e
    tests first by following these steps:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的应用程序位于克隆的仓库中的 `start/apps/chapter11/ng-cy-forms` 目录下。然而，端到端测试位于 `start/apps/chapter11/ng-cy-forms-e2e`
    文件夹中。在这个菜谱中，我们将修改这两个文件夹中的文件。让我们首先按照以下步骤运行端到端测试：
- en: Open the code repository in your code editor.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开代码仓库。
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to run the e2e tests for the project:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到代码仓库目录，并运行以下命令以运行项目的端到端测试：
- en: '[PRE16]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This should open the Cypress window. Select Chrome for testing and click the
    `app.cy.ts` file to run the tests and you should see the following:'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会打开 Cypress 窗口。选择 Chrome 进行测试，并点击 `app.cy.ts` 文件以运行测试，你应该会看到以下内容：
- en: '![](img/B18469_11_06.png)'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_11_06.png)'
- en: 'Figure 11.6: Cypress tests running for the app ng-cy-forms'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.6：运行 ng-cy-forms 应用程序的 Cypress 测试
- en: Now that we have the Cypress tests running, let’s see the steps of the recipe
    in the next section.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了 Cypress 测试在运行，让我们在下一节中查看菜谱的步骤。
- en: How to do it…
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We have to make sure that we see a **new log** when the form is successfully
    submitted with a new version. We also need to make sure that we see relevant errors
    if the version input is empty, or if the value of the version input is an invalid
    value. Let’s get started:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须确保在表单成功提交并带有新版本时，我们看到一条**新日志**。我们还需要确保在版本输入为空或版本输入的值无效时，我们看到相关的错误。让我们开始吧：
- en: 'Let’s create the page objects required for our tests. We already have the `data-test-id`
    attribute on the items we want to use in the tests. So, we can reference them
    in the page object file. Update the `start/apps/chapter11/ng-cy-forms-e2e/src/support/app.po.ts`
    file as follows:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建测试所需的页面对象。我们已经在测试中想要使用的元素上有了 `data-test-id` 属性。因此，我们可以在页面对象文件中引用它们。更新 `start/apps/chapter11/ng-cy-forms-e2e/src/support/app.po.ts`
    文件，如下所示：
- en: '[PRE17]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will first validate that our form cannot be submitted unless we have a valid
    version. To do that, let’s make sure that the **Submit** button is disabled when
    the input gets cleared after typing, or when there’s an invalid value. Open the
    `src/e2e/app.cy.ts` file in the e2e project and add a test, as follows:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先验证我们的表单在没有有效版本的情况下不能提交。为此，让我们确保在输入被清除后或当输入无效时，**提交**按钮被禁用。在端到端项目的 `src/e2e/app.cy.ts`
    文件中打开并添加一个测试，如下所示：
- en: '[PRE18]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If you look at the Cypress window and exapand the tests, you should see the
    tests passing, as follows:'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你查看 Cypress 窗口并展开测试，你应该会看到测试通过，如下所示：
- en: '![](img/B18469_11_07.png)'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_11_07.png)'
- en: 'Figure 11.7: Checking if the Submit button is disabled when there is invalid
    input'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.7：检查当有无效输入时提交按钮是否被禁用
- en: 'Let’s add another test that validates that we see a new version log when submitting
    a valid version. Add another test in the `app.cy.ts` file, as follows:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加另一个测试，以验证在提交有效版本时，我们看到一个新的版本日志。在 `app.cy.ts` 文件中添加另一个测试，如下所示：
- en: '[PRE19]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We’ll add another test now to make sure that we can see the latest version
    above the version logs. Let’s modify the `app.cy.ts` file, as follows:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将添加另一个测试，以确保我们可以在版本日志上方看到最新版本。让我们修改 `app.cy.ts` 文件，如下所示：
- en: '[PRE20]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We will now add a test that will verify if the user sees the error `''Version
    number is required''` when the version input is cleared after typing something,
    i.e., before the value is submitted. Add the test in the `app.cy.ts` file, as
    follows:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将添加一个测试来验证当版本输入在输入某些内容后清除时（即在提交值之前），用户是否看到错误`'版本号是必需的'`。在`app.cy.ts`文件中添加测试，如下所示：
- en: '[PRE21]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, let us write a test to make sure we show an error message on invalid
    inputs. Add another test in the `app.cy.ts` file, as follows:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们编写一个测试来确保在无效输入上显示错误消息。在`app.cy.ts`文件中添加另一个测试，如下所示：
- en: '[PRE22]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you look at the **Tests** window now, you should see all the tests passing,
    as follows:'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你现在查看**测试**窗口，你应该看到所有测试都通过，如下所示：
- en: '![](img/B18469_11_08.png)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_11_08.png)'
- en: 'Figure 11.8: All tests passing for the app'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.8：应用的所有测试都通过
- en: Awesome! You now know how to use Cypress to test forms with some interesting
    use cases and assertions. See the next section to understand how it all works.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！你现在知道如何使用 Cypress 来测试具有一些有趣用例和断言的表单。查看下一节以了解它是如何工作的。
- en: How it works…
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'We start by implementing some page objects in our `app.po.ts` file since we
    can reuse those methods to get the elements easily. Since our app’s logic has
    a rule that the **Submit** button should be disabled until we have a valid version
    in the version input, we use the `''be.disabled''` assertion on the **Submit**
    button, as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在我们的`app.po.ts`文件中实现一些页面对象，因为我们可以在获取元素时重用这些方法。由于我们应用逻辑有一个规则，即**提交**按钮应该在版本输入中有有效版本之前被禁用，所以我们使用`'be.disabled'`断言在**提交**按钮上，如下所示：
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We then use the `getVersionInput().type('...')` function to type the desired
    values in the version input and check if the button is disabled either when we
    have an invalid value for the version input, or no value entered at all.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后使用`getVersionInput().type('...')`函数在版本输入中输入所需的值，并检查按钮是否在版本输入有无效值或完全未输入值时被禁用。
- en: 'Then we check if there is a new log added to the logs list when a valid version
    is submitted. The important chunk of code for this test is as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们检查在提交有效版本时是否在日志列表中添加了新的日志。此测试的重要代码块如下：
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Notice that we get the list of logs, i.e., the log items. Then we use `eq(1)`
    to get the second element from the list. Then we use the `then` method to get
    the `jQuery<HTMLElement>` so we can use the `trim` method on the text content
    of the element. This is because when writing HTML templates for Angular applications,
    we might end up writing the content in the HTML tags in a formatted way that ends
    up including whitespaces in the text content. So, it is a clever idea to trim
    the text before using the `expect` function against the expected value. Alternatively,
    you can use the `.should('contain.text', 'EXPECTED_TEXT')` assertion instead of
    the `.should('have.text', 'EXPECTED_TEXT')` assertion.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们获取日志列表，即日志项。然后我们使用`eq(1)`从列表中获取第二个元素。然后我们使用`then`方法获取`jQuery<HTMLElement>`，这样我们就可以在元素的文本内容上使用`trim`方法。这是因为当为
    Angular 应用程序编写 HTML 模板时，我们可能会在 HTML 标签中格式化内容，导致文本内容中包含空格。因此，在将文本与预期值进行比较之前修剪文本是一个巧妙的主意。或者，您也可以使用`.should('contain.text',
    'EXPECTED_TEXT')`断言而不是`.should('have.text', 'EXPECTED_TEXT')`断言。
- en: 'For the cases where we want to check that the appropriate errors are being
    displayed, we ensure the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们想要检查是否显示适当错误的情况，我们确保以下内容：
- en: The error element exists on the DOM
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误元素存在于 DOM 中
- en: The error element is visible to the user
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误元素对用户可见
- en: The error element has the appropriate error message
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误元素具有适当的错误信息
- en: Notice that we use the `then` method to get the error elements to trim the text
    content before our test assertions, like what we did for the log item’s text content
    validation.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用`then`方法获取错误元素，在测试断言之前修剪文本内容，就像我们对日志项的文本内容验证所做的那样。
- en: See also
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Cypress recipes – Form interactions: [https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/testing-dom__form-interactions](https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/testing-dom__form-interactions)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cypress 食谱 – 表单交互：[https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/testing-dom__form-interactions](https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/testing-dom__form-interactions)
- en: 'Cypress recipes – Login form: [https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/logging-in__html-web-forms](https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/logging-in__html-web-forms)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cypress 菜谱 – 登录表单：[https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/logging-in__html-web-forms](https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/logging-in__html-web-forms)
- en: Waiting for XHRs to finish
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 等待 XHR 完成
- en: Testing **User Interface** (**UI**) transitions is the essence of E2E testing.
    While it is important to test the predicted outcome of an action right away, there
    might be cases where the outcome has a dependency. For instance, if a user fills
    out the **Login** form, we can’t show the success toast until we have a successful
    response from the backend server, hence we can’t test whether the success toast
    is shown right away. In this recipe, you’re going to learn how to wait for a specific
    XHR call to be completed before performing an assertion.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 测试 **用户界面** （**UI**） 转换是端到端测试的核心。虽然立即测试动作的预期结果是重要的，但可能存在结果有依赖性的情况。例如，如果用户填写了
    **登录** 表单，我们只有在收到后端服务器的成功响应后才能显示成功提示，因此我们无法测试成功提示是否立即显示。在这个菜谱中，你将学习如何在执行断言之前等待特定的
    XHR 调用完成。
- en: Getting ready
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The app that we are going to work with resides in `start/apps/chapter11/ng-cy-http-requests`
    inside the cloned repository. However, the e2e tests are in the folder `start/apps/chapter11/ng-cy-http-requests-e2e`.
    In this recipe, we’re going to modify files for the e2e project only. Let’s run
    the e2e tests by following these steps:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的应用程序位于克隆的仓库中的 `start/apps/chapter11/ng-cy-http-requests` 目录下。然而，端到端测试位于
    `start/apps/chapter11/ng-cy-http-requests-e2e` 文件夹中。在这个菜谱中，我们将仅修改端到端项目的文件。让我们按照以下步骤运行端到端测试：
- en: Open the code repository in your code editor.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开代码仓库。
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to run the e2e tests for the project:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到代码仓库目录，并运行以下命令以运行项目的端到端测试：
- en: '[PRE25]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This should open the Cypress window. Select Chrome for testing and click the
    `app.cy.ts` file to run the tests, and you should see the following:'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该打开 Cypress 窗口。选择 Chrome 进行测试，并点击 `app.cy.ts` 文件以运行测试，你应该看到以下内容：
- en: '![](img/B18469_11_09.png)'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_11_09.png)'
- en: 'Figure 11.9: Cypress tests running for the ng-cy-http-requests app'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.9：ng-cy-http-requests 应用程序的 Cypress 测试运行
- en: Now that we have the Cypress tests running, let’s see the steps of the recipe
    in the next section.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经运行了 Cypress 测试，让我们在下一节中查看菜谱的步骤。
- en: How to do it…
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We are going to start with some tests that will work just fine. However, if
    there’s a delay in the response for the HTTP calls, they will fail. That is because
    Cypress has a timeout of 4,000 **milliseconds** (**ms**) (4 seconds), during which
    it tries the assertion again and again until the assertion passes. What if our
    XHR takes more than 4,000 ms? Let’s try it out in the recipe:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一些可以正常工作的测试开始。然而，如果 HTTP 调用的响应有延迟，它们将失败。这是因为 Cypress 有一个 4,000 **毫秒** （**ms**）
    （4 秒）的超时时间，在这段时间内，它会不断尝试断言，直到断言通过。如果我们的 XHR 耗时超过 4,000 毫秒怎么办？让我们在菜谱中尝试一下：
- en: 'We will write our test first. We’ll make sure that we get 10 users from the
    HTTP call’s response. But before that, we will create the desired page objects
    for this recipe in the `users.po.ts` file, as follows:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先编写我们的测试。我们将确保从 HTTP 调用的响应中获取 10 个用户。但在那之前，我们将在 `users.po.ts` 文件中为这个菜谱创建所需的页面对象，如下所示：
- en: '[PRE26]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Update the users.cy.ts file to add the following test:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 users.cy.ts 文件以添加以下测试：
- en: '[PRE27]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We will write another test to check if we get the searched users based on the
    search input’s value. Add another test in the `users.cy.ts` file as follows:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将编写另一个测试来检查我们是否根据搜索输入的值获取了搜索到的用户。在 `users.cy.ts` 文件中添加另一个测试，如下所示：
- en: '[PRE28]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You should see both tests passing, as shown in *Figure 11.10*. However, this
    is not the best way of writing UI tests as they should be *independent* of the
    data received from actual API servers. In practice, we usually mock the API calls,
    which you will learn about in the *Using Cypress fixtures to provide mock data*
    recipe later in this chapter.
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到两个测试都通过，如图 11.10 所示。然而，这不是编写 UI 测试的最佳方式，因为它们应该与来自实际 API 服务器的数据 **独立**。在实践中，我们通常模拟
    API 调用，你将在本章后面的 *使用 Cypress 固定值提供模拟数据* 菜谱中了解到这一点。
- en: '![](img/B18469_11_10.png)'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_11_10.png)'
- en: 'Figure 11.10: Tests for the user page passing'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.10：用户页面测试通过
- en: 'First of all, we need to simulate the scenario where the desired result occurs
    after 4,000 ms. We’ll use the `delay` operator from `rxjs` for this, with a delay
    of 5,000 ms. Let’s apply it in the `user.service.ts` file in the project, as follows:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要模拟一个场景，即在4,000毫秒后出现期望的结果。我们将使用`rxjs`中的`delay`操作符来实现这一点，延迟时间为5,000毫秒。让我们在项目的`user.service.ts`文件中应用它，如下所示：
- en: '[PRE29]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If you now check the Cypress tests, you should see a test failing, as shown
    in *Figure 11.11*:'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你现在检查Cypress测试，你应该会看到一个失败的测试，如图11.11所示：
- en: '![](img/B18469_11_11.png)'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_11_11.png)'
- en: 'Figure 11.11: Assertion failing for the test for searching a particular user'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图11.11：特定用户搜索测试的断言失败
- en: 'We can now try to fix this, so it doesn’t matter how long the XHR takes—we’ll
    always wait for it to be completed before making an assertion. Let’s intercept
    the XHR call and create an alias for it so that we can use it later to wait for
    the XHR call. Update the `users.cy.ts` file, as follows:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以尝试修复这个问题，这样它就不会在乎XHR花费了多长时间——我们总是在进行断言之前等待它完成。让我们拦截XHR调用并为其创建一个别名，这样我们就可以稍后使用它来等待XHR调用。更新`users.cy.ts`文件，如下所示：
- en: '[PRE30]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, let’s use the alias to wait for the XHR call to complete before the assertion.
    Update the `users.cy.ts` file, as follows:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用别名在断言之前等待XHR调用完成。更新`users.cy.ts`文件，如下所示：
- en: '[PRE31]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If you check the Cypress tests now for `users.cy.ts`, you should see all of
    them pass, as follows:'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你现在检查`users.cy.ts`的Cypress测试，你应该会看到所有测试都通过，如下所示：
- en: '![](img/B18469_11_12.png)'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_11_12.png)'
- en: 'Figure 11.12: Tests waiting for the XHR call to be completed before the assertion'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图11.12：在断言之前等待XHR调用完成的测试
- en: Great! You now know how to implement E2E tests with Cypress that include waiting
    for a particular XHR call to finish before an assertion. To understand all the
    magic behind the recipe, see the next section.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！你现在知道如何使用Cypress实现包含在断言之前等待特定XHR调用完成的端到端测试。要了解配方背后的所有魔法，请参阅下一节。
- en: How it works…
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the recipe, we use something called variable aliasing. We first use the `cy.intercept`
    method so that Cypress can listen to the network call. Note that we use the specific
    URL that is `/assets/users.json` as the parameter, and then we use the `.as('searchUsers')`
    statement to give an alias for this interception. Notice that we modified the
    `user.service.ts`, which causes a delay of 5,000 ms before the API call is made.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在配方中，我们使用一种称为变量别名的东西。我们首先使用`cy.intercept`方法，以便Cypress可以监听网络调用。请注意，我们使用特定的URL
    `/assets/users.json` 作为参数，然后使用`.as('searchUsers')`语句为此拦截提供一个别名。请注意，我们修改了`user.service.ts`，这导致在API调用之前有5,000毫秒的延迟。
- en: Cypress has a default timeout of 4,000 ms, and we don’t want to restrict our
    API calls to be handled in our tests within 4,000 ms. Therefore, we use the `cy.wait('@searchUsers');`
    statement, using the `searchUsers` alias to inform Cypress that it must wait until
    the aliased interception happens—that is, until the network call is made, regardless
    of how long it takes until Cypress’s second timeout (30,000 ms for network calls)
    is reached. This makes our current tests pass, even though the default 4,000 ms
    Cypress timeout and 5,000 ms (about 5 seconds) timeout for HTTP calls in Cypress
    have already passed before actually making the network call. Magic, isn’t it?
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress有一个默认的超时时间为4,000毫秒，我们不想限制我们的API调用在测试中在4,000毫秒内处理。因此，我们使用`cy.wait('@searchUsers');`语句，使用`searchUsers`别名通知Cypress它必须等待别名拦截发生——也就是说，直到网络调用完成，不管它需要多长时间才能达到Cypress的第二超时（网络调用为30,000毫秒）。这使得我们的当前测试通过，尽管默认的4,000毫秒Cypress超时和Cypress中HTTP调用的5,000毫秒（大约5秒）超时在实际上进行网络调用之前已经过去了。魔法，不是吗？
- en: Note that Cypress has a default timeout of 4,000 ms for assertions such as checking
    if an element is visible or has a particular text. It has a default timeout of
    5,000 ms for HTTP calls to be initiated. This made our test a bit tricky since
    we are delaying the initiation of the HTTP call while trying to simulate that
    the response is delayed from the server. Due to this, we had to use the `options`
    argument for `cy.wait` including setting the timeout to 10,000 ms. This allows
    Cypress to wait for the call to be initiated in 5,000 ms (which we added to the
    user service). In a real-world scenario, your HTTP call will be instantly initiated,
    and the response may be delayed. Cypress waits for 5,000 ms for the call to be
    initiated, so you should be fine. As soon as the call is initiated, Cypress defaults
    to the 30,000 ms timeout to wait for the response.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Cypress对断言有默认的超时时间，例如检查元素是否可见或具有特定的文本，默认为4,000毫秒。对于HTTP调用初始化，默认超时时间为5,000毫秒。这使得我们的测试有点棘手，因为我们试图模拟服务器响应延迟的同时延迟HTTP调用的初始化。因此，我们不得不为`cy.wait`的`options`参数设置超时时间为10,000毫秒。这允许Cypress在5,000毫秒（我们添加到用户服务中）等待调用被初始化。在实际场景中，你的HTTP调用将立即启动，响应可能会延迟。Cypress等待5,000毫秒以等待调用被初始化，所以你应该没问题。一旦调用被启动，Cypress默认将超时时间设置为30,000毫秒以等待响应。
- en: Well, I hope you liked this recipe—see the next section for a link for further
    reading.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我希望你喜欢这个食谱——查看下一节以获取进一步阅读的链接。
- en: See also
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'Waiting in Cypress: [https://docs.cypress.io/api/commands/wait](https://docs.cypress.io/api/commands/wait)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Cypress中等待：[https://docs.cypress.io/api/commands/wait](https://docs.cypress.io/api/commands/wait)
- en: Using Cypress bundled packages
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cypress捆绑包
- en: Cypress provides a bunch of bundled tools and packages that we can use in our
    tests to make things easier, not because writing tests with Cypress is otherwise
    hard but because these libraries are used by many developers already and so they’re
    familiar with them. In this recipe, we’re going to look at the bundled jQuery,
    Lodash, and Minimatch libraries to test some of our use cases.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress提供了一系列捆绑的工具和包，我们可以在测试中使用它们来简化工作，这并不是因为使用Cypress编写测试本身很困难，而是因为这些库已经被许多开发者使用，因此他们已经熟悉它们。在本食谱中，我们将查看捆绑的jQuery、Lodash和Minimatch库，以测试一些我们的用例。
- en: Getting ready
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The app that we are going to work with resides in `start/apps/chapter11/ng-cy-bun-pack`
    inside the cloned repository. However, the e2e tests are in the folder `start/apps/chapter11/ng-cy-bun-pack-e2e`.
    And in the recipe, we’re going to modify files for the e2e project only. Let’s
    run the e2e tests by following these steps:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的应用程序位于克隆的仓库中的`start/apps/chapter11/ng-cy-bun-pack`目录下。然而，端到端测试在`start/apps/chapter11/ng-cy-bun-pack-e2e`文件夹中。在本食谱中，我们只将修改端到端项目的文件。让我们按照以下步骤运行端到端测试：
- en: Open the code repository in your code editor.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开代码仓库。
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to run the e2e tests for the project:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到代码仓库目录，并运行以下命令以运行项目的端到端测试：
- en: '[PRE32]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This should open the Cypress window. Select **Chrome** for testing and click
    the `users.cy.ts` file to run the tests, and you should see the following:'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会打开Cypress窗口。选择**Chrome**进行测试，并点击`users.cy.ts`文件以运行测试，你应该会看到以下内容：
- en: '![](img/B18469_11_13.png)'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_11_13.png)'
- en: 'Figure 11.13: ng-cy-bun-pack app tests running with Cypress'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图11.13：使用Cypress运行的ng-cy-bun-pack应用程序测试
- en: Now that we have the Cypress tests running, let’s see the steps of the recipe
    in the next section.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经运行了Cypress测试，让我们在下一节中查看食谱的步骤。
- en: How to do it…
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'For this recipe, we have the `users` list and a search app that fetches some
    users from a JSON file using an HTTP request. We’re going to assert a few conditions
    for the DOM, validate the response from the API, and assert the URL changes as
    well. Let’s get started:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们有`users`列表和一个搜索应用程序，该应用程序使用HTTP请求从一个JSON文件中获取一些用户。我们将对DOM进行一些断言，验证API的响应，并断言URL的变化。让我们开始：
- en: 'First, we’ll try out the bundled `jQuery` library along with Cypress. We can
    access this using `Cypress.$`. Let’s add another test and log out some DOM elements.
    Update the `users.cy.ts` file, as follows:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将尝试使用捆绑的`jQuery`库和Cypress一起。我们可以使用`Cypress.$`来访问它。让我们添加另一个测试并记录一些DOM元素。更新`users.cy.ts`文件，如下所示：
- en: '[PRE33]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If you look at the tests (Cypress window) now, and specifically the console,
    you should see the log, as follows:'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你现在查看测试（Cypress窗口），特别是控制台，你应该会看到以下日志：
- en: '![](img/B18469_11_14.png)'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_11_14.png)'
- en: 'Figure 11.14: Search input logged using jQuery via Cypress.$'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.14：使用 jQuery 通过 Cypress 记录的搜索输入
- en: 'Now, let’s try to change the value of the search input so we can see the `''No
    results''` message. Update the test further as follows:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试更改搜索输入的值，以便我们可以看到 `'No results'` 消息。进一步更新测试，如下所示：
- en: '[PRE34]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Let’s add a new page object element in the `users.po.ts` file so we can get
    the `noResults` message. Update the file as follows:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在 `users.po.ts` 文件中添加一个新的页面对象元素，以便我们可以获取 `noResults` 消息。按照以下方式更新文件：
- en: '[PRE35]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Let’s log the ‘‘`no results`''’ message using the `jQuery` element by using
    the page object in combination with the `then` method. Update the test in the
    `users.cy.ts` file as follows:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用页面对象和 `then` 方法通过记录 `'no results'` 消息来使用 `jQuery` 元素。按照以下方式更新 `users.cy.ts`
    文件中的测试：
- en: '[PRE36]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You should see the no results message in the console in the Cypress window,
    as follows:'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该在 Cypress 窗口的控制台中看到 no results 消息，如下所示：
- en: '![](img/B18469_11_15.png)Figure 11.15: noResults message logged using jQuery
    via Cypress.$'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![](img/B18469_11_15.png)图 11.15：使用 Cypress.$ 通过 jQuery 记录的 noResults 消息'
- en: As you can see, the `jQuery` element is logged in the console. We’ll now use
    the Chai assertions to validate that it exists and has a message.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如你所见，`jQuery` 元素已在控制台中记录。现在我们将使用 Chai 断言来验证它是否存在并且有一个消息。
- en: 'Update the test further to check that the element exists and has the following
    text:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进一步更新测试以检查元素是否存在并且具有以下文本：
- en: '[PRE37]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If you see the test now in Cypress, it should be passing, as follows:'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你现在在 Cypress 中看到这个测试，它应该会通过，如下所示：
- en: '![](img/B18469_11_16.png)'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_11_16.png)'
- en: 'Figure 11.16: Test passing with the usage of jQuery via Cypress'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.16：使用 jQuery 通过 Cypress 通过的测试
- en: 'We’re now going to use the `lodash.js` package that is bundled with Cypress
    to iterate over each card and ensure the date of birth is correctly formatted.
    Write another test in the `users.cy.ts` file, as follows:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将使用与 Cypress 一起捆绑的 `lodash.js` 包来遍历每张卡片并确保出生日期格式正确。在 `users.cy.ts` 文件中编写另一个测试，如下所示：
- en: '[PRE38]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Let’s add another test to use `lodash` again. We’ll ensure that all the names
    of the users are unique on the view, that is, there are no duplicate user cards.
    Add another test in the `users.cy.ts` file, as follows:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再添加一个测试来再次使用 `lodash`。我们将确保用户在视图中的所有名称都是唯一的，也就是说，没有重复的用户卡片。在 `users.cy.ts`
    文件中添加另一个测试，如下所示：
- en: '[PRE39]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The next package we’ll explore is the `minimatch` package. When we tap on a
    user card, it opens the user details. Since we append a timestamp to the URL as
    a query parameter, we can’t compare the URL as an exact match with our assertion.
    Let’s use the `minimatch` package to assert using a pattern instead. Add a new
    test, as follows:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来要探索的下一个包是 `minimatch` 包。当我们点击用户卡片时，它会打开用户详情。由于我们将时间戳附加到 URL 作为查询参数，我们无法使用断言将
    URL 作为精确匹配进行比较。让我们使用 `minimatch` 包来使用模式进行断言。添加一个新的测试，如下所示：
- en: '[PRE40]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The tests have now all passed using the bundled packages with Cypress. Now that
    we’ve finished the recipe, let’s see how it all works in the next section.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有测试都已通过使用 Cypress 捆绑的包完成。现在我们已经完成了配方，让我们看看下一节中它是如何工作的。
- en: How it works…
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Cypress bundles `jQuery` with it and we use it via the `Cypress.$` property.
    This allows us to perform everything that the `jQuery` function permits us to.
    For example, you can use the following functions from the bundled `jQuery`:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress 将 `jQuery` 捆绑在一起，我们通过 `Cypress.$` 属性使用它。这允许我们执行 `jQuery` 函数允许我们执行的所有操作。例如，你可以使用以下捆绑的
    `jQuery` 函数：
- en: '`each`:'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`each`:'
- en: 'Usage: `$(elements).each(function(index, element) {})`'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用法：`$(elements).each(function(index, element) {})`
- en: 'Description: Iterates over a jQuery object, executing a function for each matched
    element'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：遍历 jQuery 对象，为每个匹配元素执行一个函数
- en: '`text`:'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text`:'
- en: 'Usage: `$(selector).text()`'
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用法：`$(selector).text()`
- en: 'Description: Gets the combined text contents of each element in the set of
    matched elements, including their descendants'
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：获取匹配元素集中每个元素的合并文本内容，包括其子元素
- en: '`val`:'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`val`:'
- en: 'Usage: `$(selector).val()`'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用法：`$(selector).val()`
- en: 'Description: Gets the current value of the first element in the set of matched
    elements'
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：获取匹配元素集中第一个元素的当前值
- en: '`hasClass`:'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hasClass`:'
- en: 'Usage: `$(selector).hasClass(className)`'
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用法：`$(selector).hasClass(className)`
- en: 'Description: Determines whether any of the matched elements are assigned to
    the given class'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：确定是否有任何匹配元素被分配给给定的类
- en: '`addClass`:'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addClass`:'
- en: 'Usage: `$(selector).addClass(className)`'
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用法：`$(selector).addClass(className)`
- en: 'Description: Adds the specified class(es) to each element in the set of matched
    elements'
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：将指定的类（或类集）添加到匹配元素集中的每个元素
- en: '`removeClass`:'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`removeClass`:'
- en: 'Usage: `$(selector).removeClass(className)`'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用法：`$(selector).removeClass(className)`
- en: 'Description: Removes a single class, multiple classes, or all classes from
    each element in the set of matched elements'
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：从匹配元素集中的每个元素中删除单个类、多个类或所有类
- en: IMPORTANT NOTE
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '`Cypress.$` can only fetch from the document elements that are available immediately
    on the DOM. This is great for debugging the DOM using the Chrome DevTools in the
    Cypress test window. However, it is important to understand that it doesn’t have
    any context about the Angular change detection. Also, you can’t query any element
    that isn’t visible on the page right from the beginning, as we experienced in
    the recipe—that is, it doesn’t wait for XHR calls for the elements to be visible.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cypress.$`只能从DOM中立即可用的文档元素中获取数据。这对于在Cypress测试窗口中使用Chrome DevTools调试DOM来说很棒。然而，重要的是要理解它没有关于Angular变更检测的任何上下文。此外，你不能查询页面一开始就不可见的任何元素，正如我们在菜谱中所经历的那样——也就是说，它不会等待XHR调用以使元素可见。'
- en: Cypress also bundles `lodash` and exposes it via the `Cypress._` object. In
    the recipe, we use the `_.each()` method to iterate over the card items to perform
    several tasks. We also use the `_.uniq` method, which takes an array and returns
    an array of unique items. We then compare the lengths of both the original array
    and the unique array to ensure that our original array has all unique names. Note
    that we can use any `lodash` method in our Cypress tests and not just the mentioned
    methods.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress还捆绑了`lodash`并通过`Cypress._`对象公开它。在菜谱中，我们使用`_.each()`方法遍历卡片项以执行多个任务。我们还使用了`_.uniq`方法，它接受一个数组并返回一个包含唯一项的数组。然后我们比较原始数组和唯一数组的长度，以确保我们的原始数组包含所有唯一的名称。请注意，我们可以在Cypress测试中使用任何`lodash`方法，而不仅仅是提到的那些方法。
- en: We also used the `minimatch` package, which Cypress exposes via the `Cypress.minimatch`
    object. The `minimatch` package is great for matching and testing glob patterns
    against strings. We use it to test the URL after navigating to a user’s detail
    page using a pattern. One important thing to know when using `minimatch` is that
    it compares the globs, which should contain the entire URL and not a string *acting
    like a Regex*. That’s why we use the `` `{location.origin}/users/${uuid}*` ``
    statement to include the `location.origin`.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了`minimatch`包，Cypress通过`Cypress.minimatch`对象公开了这个包。`minimatch`包非常适合匹配和测试字符串与全局模式。我们用它来测试在通过模式导航到用户的详细页面后，测试URL。在使用`minimatch`时，有一个重要的事情要知道，它比较的是全局模式，应该包含整个URL，而不是像正则表达式一样的字符串。这就是为什么我们使用`
    `{location.origin}/users/${uuid}*` ``语句来包含`location.origin`。
- en: Easy peasy. Now that you understand how the recipe works, see the next section
    for some useful links.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 简单易行。现在你了解了这个菜谱的工作原理，请查看下一节以获取一些有用的链接。
- en: See also
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Cypress bundled libraries: [https://docs.cypress.io/guides/references/bundled-tools](https://docs.cypress.io/guides/references/bundled-tools)'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cypress捆绑的库：[https://docs.cypress.io/guides/references/bundled-tools](https://docs.cypress.io/guides/references/bundled-tools)
- en: '`jQuery`: [https://jquery.com/](https://jquery.com/)'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jQuery`: [https://jquery.com/](https://jquery.com/)'
- en: '`lodash`: [https://lodash.com](https://lodash.com)'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lodash`: [https://lodash.com](https://lodash.com)'
- en: '`Minimatch.js`: [https://github.com/isaacs/minimatch](https://github.com/isaacs/minimatch)'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Minimatch.js`: [https://github.com/isaacs/minimatch](https://github.com/isaacs/minimatch)'
- en: Using Cypress fixtures to provide mock data
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cypress固定数据提供模拟数据
- en: When it comes to writing E2E tests, fixtures play a great role in making sure
    the tests are not flaky (don’t have different results in different test runs).
    Consider that your tests rely on fetching data from your API server, or your tests
    include snapshot testing, which includes fetching images from a **Content Delivery
    Network** (**CDN**) or a third-party API. Although they’re technically required
    for the tests to run successfully, it is not important that the server data and
    the images are fetched from the original source; therefore, we can create fixtures
    for them. In this recipe, we’ll create fixtures for the bucket data to avoid having
    to run the server for the e2e tests.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到编写端到端测试时，固定数据在确保测试不会出现不一致（在不同测试运行中结果不同）方面发挥着重要作用。考虑一下，你的测试依赖于从你的API服务器获取数据，或者你的测试包括快照测试，这包括从**内容分发网络**（**CDN**）或第三方API获取图像。尽管它们在技术上对于测试成功运行是必需的，但服务器数据和图像是否从原始来源获取并不重要；因此，我们可以为它们创建固定数据。在这个菜谱中，我们将为存储桶数据创建固定数据，以避免在执行端到端测试时需要运行服务器。
- en: Getting ready
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The app that we are going to work with resides in `start/apps/chapter11/ng-cy-mock-data`
    inside the cloned repository. However, the e2e tests are in the folder `start/apps/chapter11/ng-cy-mock-data-e2e`.
    In this recipe, we’re going to modify files for the e2e project only. Let’s run
    the e2e tests by following these steps:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要与之合作的应用程序位于克隆的仓库中的 `start/apps/chapter11/ng-cy-mock-data`。然而，端到端测试在 `start/apps/chapter11/ng-cy-mock-data-e2e`
    文件夹中。在这个菜谱中，我们将仅修改端到端项目的文件。让我们按照以下步骤运行端到端测试：
- en: Open the code repository in your code editor.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开代码仓库。
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to run the e2e tests for the project with an API server:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到代码仓库目录，并运行以下命令以运行具有 API 服务器的项目的端到端测试：
- en: '[PRE41]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This should open the Cypress window along with the server. Select Chrome for
    testing and click the `app.cy.ts` file to run the tests, and you should see the
    following:'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会打开 Cypress 窗口以及服务器。选择 Chrome 进行测试，并点击 `app.cy.ts` 文件以运行测试，你应该会看到以下内容：
- en: '![](img/B18469_11_17.png)'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_11_17.png)'
- en: 'Figure 11.17: ng-cy-mock-data tests running with Cypress'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.17：使用 Cypress 运行的 ng-cy-mock-data 测试
- en: Now that we have the Cypress tests running, let’s see the steps of the recipe
    in the next section.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了 Cypress 测试在运行，让我们看看下一节中菜谱的步骤。
- en: How to do it…
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We have the bucket app, which we have used in many recipes in this book. However,
    we’ll write some e2e tests in this one with Cypress. The interesting part is that
    the app talks to a backend server to manage the bucket items. Our tests are going
    to break when we add or remove items from the bucket with the real API. Let’s
    get started:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有桶应用程序，我们在本书的许多菜谱中都使用了它。然而，我们将在这个菜谱中使用 Cypress 编写一些端到端测试。有趣的部分是应用程序与后端服务器通信以管理桶项目。当使用真实
    API 向桶中添加或删除项目时，我们的测试将会失败。让我们开始吧：
- en: 'Our backend (`fake-be`) returns four bucket items by default. See the *How
    it works…* section to understand how. We will add a new test to the `app.cy.ts`
    file later to ensure that we are able to add another item to the bucket. But before
    that, let’s add some page objects in the `app.po.ts` file, as follows:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的后端（`fake-be`）默认返回四个桶项目。参见*如何工作...*部分了解详情。我们将在稍后向 `app.cy.ts` 文件添加一个新测试，以确保我们能够向桶中添加另一个项目。但在那之前，让我们在
    `app.po.ts` 文件中添加一些页面对象，如下所示：
- en: '[PRE42]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now we can add our test to ensure that we’re able to add an item to the bucket.
    Add the following test to the `app.cy.ts` file:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以添加我们的测试以确保我们能够向桶中添加一个项目。将以下测试添加到 `app.cy.ts` 文件中：
- en: '[PRE43]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This is the point where our tests start to break, as shown in *Figure 11.18*.
    Since our test adds an item every time it runs to the actual server, we cannot
    expect the server to return the same number of items (four items) as our test,
    until we restart the server.
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是我们测试开始出错的地方，如*图 11.18*所示。由于我们的测试每次运行都会向实际服务器添加一个项目，所以我们不能期望服务器返回与我们的测试相同数量的项目（四个项目），除非我们重新启动服务器。
- en: '![](img/B18469_11_18.png)'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_11_18.png)'
- en: 'Figure 11.18: Tests failing because of adding data to a real server'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.18：由于向真实服务器添加数据而失败的测试
- en: 'We will first create a fixture for our HTTP call to the `fake-be` backend.
    Create a new file under the `src/fixtures` folder, named `get-bucket.json`. Then
    add the following JSON data to it:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先将为我们的 HTTP 调用到 `fake-be` 后端创建一个固定装置。在 `src/fixtures` 文件夹下创建一个新文件，命名为 `get-bucket.json`。然后向其中添加以下
    JSON 数据：
- en: '[PRE44]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, let’s use the fixture in our `app.cy.ts` file. We’ll use it in the `beforeEach`
    life cycle hook since we want to use the fixture for all the tests in the file.
    Update the `app.cy.ts` file, as follows:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在我们的 `app.cy.ts` 文件中使用固定装置。我们将在 `beforeEach` 生命周期钩子中使用它，因为我们希望为文件中的所有测试使用固定装置。更新
    `app.cy.ts` 文件，如下所示：
- en: '[PRE45]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This does not fix the issue since the add item to bucket call is still sent
    to the real API. We’ll have to create the fixture for it as well.
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这并没有解决这个问题，因为向桶中添加项目的调用仍然发送到真实 API。我们还需要为它创建一个固定装置。
- en: 'Create a new file inside the `src/fixtures` folder. Name it `add-bucket-item.json`
    and add the following code to it:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/fixtures` 文件夹内创建一个新文件。命名为 `add-bucket-item.json` 并向其中添加以下代码：
- en: '[PRE46]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We will now use the `add-bucket-item` fixture in our tests file. Update the
    `app.cy.ts` file, as follows to use the fixture:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将在我们的测试文件中使用 `add-bucket-item` 固定装置。更新 `app.cy.ts` 文件，如下所示以使用固定装置：
- en: '[PRE47]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now if you run the e2e tests, you should see all the tests passing. It does
    not matter how many times you refresh the Cypress window; they will always pass
    because the responses are the same every time:'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果你运行端到端测试，你应该会看到所有测试都通过了。无论你刷新 Cypress 窗口多少次；它们总是会通过，因为每次的响应都是相同的：
- en: '![](img/B18469_11_19.png)'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/B18469_11_19.png)'
- en: 'Figure 11.19: Tests passing for add-bucket-item with fixtures'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.19：使用固定值测试 add-bucket-item 通过
- en: 'We will now create a test for deleting an item and ensuring that we see the
    toast and one item is removed from the view. Let’s add another test in the `app.cy.ts`
    file as follows:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将创建一个测试来删除一个项目并确保我们看到通知，并且视图中的一个项目被移除。让我们在 `app.cy.ts` 文件中添加另一个测试，如下所示：
- en: '[PRE48]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'If you run the tests now, you’ll see that the `delete item` test fails because
    it can’t find the item. That’s because this `DELETE` call is still being sent
    to the actual server. If you had your server running, you would see an error,
    as shown in *Figure 11.20*:'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你现在运行测试，你会看到 `delete item` 测试失败，因为它找不到项目。那是因为这个 `DELETE` 调用仍然被发送到实际服务器。如果你有服务器运行，你会看到一个错误，如图
    11.20 所示：
- en: '![](img/B18469_11_20.png)'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/B18469_11_20.png)'
- en: 'Figure 11.20: Item not found error'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.20：找不到项目错误
- en: 'We’ll create a new fixture in the `src/fixtures` folder named `delete-bucket-item.json`.
    Add the following code to it:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在 `src/fixtures` 文件夹中创建一个新的固定值，命名为 `delete-bucket-item.json`。向其中添加以下代码：
- en: '[PRE49]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now let’s use the fixture in the `app.cy.ts` file in the `beforeEach()` hook,
    as follows:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在 `app.cy.ts` 文件中的 `beforeEach()` 钩子中使用固定值，如下所示：
- en: '[PRE50]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'If you see the tests now, all of them should be passing, as follows:'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你现在查看测试，所有测试都应该通过，如下所示：
- en: '![](img/B18469_11_21.png)'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/B18469_11_21.png)'
- en: 'Figure 11.21: All tests passing after using fixtures'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.21：使用固定值后所有测试通过
- en: Great! You now know how to use fixtures in Cypress E2E tests. Now that you’ve
    finished the recipe, see the next section for how this works.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！你现在知道如何在 Cypress E2E 测试中使用固定值。现在你已经完成了这个食谱，请看下一节了解它是如何工作的。
- en: How it works…
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'We had an initial test in the `app.cy.ts` file to ensure that we get four bucket
    items from the server when the app loads. You can see the backend file that sends
    the default bucket data, which resides at `<workspace-root>/codewithahsan/e2e/fake-be/src/app/bucket/bucket.service.ts`.
    However, as soon as we start adding items to the bucket via our tests, our tests
    break because we’re working with real data. And we should rarely be doing that
    to ensure we can make assertions accurately. That’s why big teams have test environments
    where they seed the data into the database if they really want to work with real
    data. Since our bucket app is super small, and we don’t really need to work with
    real data, we add fixtures in this recipe. Fixtures in a Cypress test are registered
    with the `cy.fixture` method, which allows us to use data from a file. In this
    recipe, we use fixtures for all the HTTP calls the app makes to the `fake-be`
    server, that is, the following:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `app.cy.ts` 文件中有一个初始测试，以确保当应用程序加载时，我们从服务器获取四个桶项目。你可以看到发送默认桶数据的后端文件，它位于 `<workspace-root>/codewithahsan/e2e/fake-be/src/app/bucket/bucket.service.ts`。然而，当我们开始通过测试向桶中添加项目时，我们的测试就会中断，因为我们正在处理真实数据。我们很少这样做，以确保我们可以准确地做出断言。这就是为什么大型团队有测试环境，如果他们真的想处理真实数据，就会在数据库中播种数据。由于我们的桶应用程序非常小，我们实际上不需要处理真实数据，所以我们在这个食谱中添加了固定值。在
    Cypress 测试中，固定值通过 `cy.fixture` 方法注册，这允许我们使用文件中的数据。在这个食谱中，我们使用固定值来处理应用程序对 `fake-be`
    服务器进行的所有 HTTP 调用，即以下内容：
- en: Get all bucket data – `GET` `http://localhost:3333/api/bucket`
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取所有桶数据 – `GET` `http://localhost:3333/api/bucket`
- en: Add item to the bucket – `POST` `http://localhost:3333/api/bucket`
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向桶中添加项目 – `POST` `http://localhost:3333/api/bucket`
- en: Delete item from the bucket – `DELETE` `http://localhost:3333/api/bucket/ITEM_ID`
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从桶中删除项目 – `DELETE` `http://localhost:3333/api/bucket/ITEM_ID`
- en: Notice that for each HTTP call, we use the `cy.fixture('FIXTURE_NAME')` without
    the `.json` extension, which essentially points to the `cypress/fixture/FIXTURE_NAME.json`
    file.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，对于每个 HTTP 请求，我们使用 `cy.fixture('FIXTURE_NAME')` 而不带 `.json` 扩展名，这实际上指向 `cypress/fixture/FIXTURE_NAME.json`
    文件。
- en: First, we use the `cy.fixture` method to register the fixture (or to fetch it).
    Then we use the `then` method to get the contents of the fixture (JSON) file.
    Then we use the `cy.intercept` method to intercept the HTTP call using the `GET`/`POST`/`DELETE`
    method and the URL pattern as a `Minimatch` glob pattern to intercept the HTTP
    call to get the fixture response and provide it as the response for the HTTP call.
    As a result, all the intercepted calls matching the glob patterns use our fixtures.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用 `cy.fixture` 方法注册固定值（或获取它）。然后我们使用 `then` 方法获取固定值（JSON）文件的正文。然后我们使用 `cy.intercept`
    方法使用 `GET`/`POST`/`DELETE` 方法以及 URL 模式作为 `Minimatch` glob 模式来拦截 HTTP 调用以获取固定值响应，并将其作为
    HTTP 调用的响应提供。因此，所有匹配 glob 模式的拦截调用都使用我们的固定值。
- en: Now that you understand how the recipe works, see the next section for some
    resources.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了这个食谱的工作原理，请查看下一节以获取一些资源。
- en: See also
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Cypress fixtures documentation: [https://docs.cypress.io/api/commands/fixture](https://docs.cypress.io/api/commands/fixture)'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cypress 固定文档：[https://docs.cypress.io/api/commands/fixture](https://docs.cypress.io/api/commands/fixture)
- en: '`cy.intercept` method documentation: [https://docs.cypress.io/api/commands/intercept](https://docs.cypress.io/api/commands/intercept)'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cy.intercept` 方法文档：[https://docs.cypress.io/api/commands/intercept](https://docs.cypress.io/api/commands/intercept)'
- en: Learn more on Discord
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入这本书的 Discord 社区——在那里你可以分享反馈、向作者提问，并了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/AngularCookbook2e](Chapter_11.xhtml)'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/AngularCookbook2e](Chapter_11.xhtml)'
- en: '![](img/QR_Code1388317275422265.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_Code1388317275422265.png)'
