- en: Third Project - The Facebook Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we've mainly built applications that deal only with information provided
    by a user. However, lots of applications tend to send and receive data from other
    sources around the web. For our third and final project in this book, we will build
    an app that accesses the external Facebook API so that users can access their
    profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Plan `Friends`, our Facebook application, by deciding what key factors it should
    have
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gain access to the Facebook API and install the official SDK for both iOS and
    Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the Facebook API's **Login** SDK to grant the app appropriate permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grab information from the Facebook API using `GraphRequest` and `GraphRequestManager`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilize an `ActivityIndicator` to let the user visually know that data is currently
    loading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Begin building the essential features of our Facebook application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Planning the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Friends` will be the first full-fledged example we build of just how powerful
    React Native is. It will deal with a lot of moving parts, so it''s good to plan
    out the app in depth. On a basic level, accessing the Facebook **Graph** API gives
    us the following permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: Signing in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing your feed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing the list of posts on your feed along with its comments and likes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new posts and comments on your feed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browsing the photos that you've uploaded to your Facebook profile along with
    their comments and likes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing the events that you have RSVPd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rediscovering the list of pages that you have liked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As in the previous chapters, we want to break this off into bite-sized accomplishments.
    By the end of this chapter, `Friends` should do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Prompt the user to sign in to Facebook, if they haven't already, and save their
    authentication token automatically with the SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While the feed is loading, show a spinning animation to visualize that data
    is loading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show the user their feed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each post on the feed, render the contents of the post along with the number
    of comments and likes on the post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upon tapping, load and show just the comment chain of that specific post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow the reader to respond to comments on a specific post or create a new post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: About the Facebook API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we proceed further, a note about the level of access we can gain with
    the Facebook API--you will only be able to gain information about the user who
    is logged in. The specific user's friend list is inaccessible through Facebook's
    API, but a small subset of friends who have also installed the same app is available.
    Since it's not very useful in our project, I'm purposefully omitting it.
  prefs: []
  type: TYPE_NORMAL
- en: While the user's posts and photos will certainly have a list of comments along
    with the names and pictures of the people who posted them, accessing those friends'
    profiles is not possible using the current iteration of the Facebook API.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining Facebook API credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This looks like a great starting point. However, before we can begin, we need
    to register our app with Facebook. Head over to Facebook's developer site and
    select Add a New App. At the time of writing, the URL is [https://developers.facebook.com](https://developers.facebook.com).
  prefs: []
  type: TYPE_NORMAL
- en: Once you have your application registered, download the Facebook SDK for iOS
    at [https://developers.facebook.com/docs/ios/](https://developers.facebook.com/docs/ios/)
    and unzip its contents to your `Documents` folder, naming it `FacebookSDK`. Keep
    this folder open; we will need it shortly.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, go to the dashboard of your application and take note of the App
    ID. You''ll also need this in a moment. You can find it here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_05_001.png)'
  prefs: []
  type: TYPE_IMG
- en: In the following section, we'll look at how to install the official Facebook
    SDK for React Native.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Facebook SDK on iOS and Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Initialize a new React Native project using the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Afterwards, navigate to the new project you just created using a command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Facebook SDK for React Native is available through `npm` in a package called
    `react-native-fbsdk`. We''ll install it as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now link the SDK, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, follow the detailed instructions on the `react-native-fbsdk` repo on GitHub
    found at [https://github.com/facebook/react-native-fbsdk](https://github.com/facebook/react-native-fbsdk).
    Since the installation instructions are prone to being changed at any given time,
    I highly recommend that you use the instructions found in that repo.
  prefs: []
  type: TYPE_NORMAL
- en: Afterward, install the `react-native-vector-icons` library that we used in `Expenses`
    using the process we saw earlier (refer to [Chapter 4](94aea5f2-1fde-4cb4-b28e-8b3c6354a298.xhtml), *Advanced
    Functionality with the Expenses App*, if you need a refresher).
  prefs: []
  type: TYPE_NORMAL
- en: Once you have initialized the app for this project and installed both the Facebook
    SDK and `react-native-vector-icons` library, it's time to start playing around.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in with the Facebook SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we can try in our app is logging in the user. The FBSDK has
    access to a built-in component called `LoginButton` that, on press, will send
    the user to a login screen using a `WebView` while being within the app. If the
    login is successful, an access token will be saved for your app to make use of,
    without you needing to personally track it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by adding the `LoginButton` snippet found in the FBSDK repository''s
    `README` to your app''s `index` file. You''ll get something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Import the `AccessToken` and `LoginButton` modules from the `react-native-fbsdk`
    repo, using destructuring notation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `readPermissions` prop accepts an array of strings and asks the user for
    specific read-only permissions equal to the array passed in.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Facebook API has a lot of different permissions you can request, and for
    the purposes of this project, we will ask for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public_profile`: This provides access to a subset of items that are part of
    the user''s public Facebook profile. This includes their ID, name, profile picture,
    and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user_events`: This is a list of events that a person is either hosting or
    has RSVPd to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user_likes`: This is the collection of Facebook pages that the user has clicked
    Like on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user_photos`: These are the user''s uploaded or tagged photos.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user_posts`: These are the posts on the user''s timeline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `onLoginFinished` method is written to be asynchronous:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'While there are some other props available for `LoginButton`, the three presented
    in the preceding code are the only ones we will worry about. Here''s what each
    of these props refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '`publishPermissions`: This represents the publishing permissions to request
    from the logged-in user when the button is pressed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onLoginFinished`: This is a callback that gets invoked when a login request
    has either been completed or produces an error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onLogoutFinished`: This is another `callback` that invokes itself when a logout
    request has been completed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If everything works out, you will see the following screen with the Facebook
    log in button--Log in with Facebook, in the center:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_05_002-1.png)'
  prefs: []
  type: TYPE_IMG
- en: By tapping on this logo, you will be taken to a login page within a `WebView`
    component that handles Facebook login.
  prefs: []
  type: TYPE_NORMAL
- en: 'After logging in, the user will see a prompt that asks for read-only permissions
    equal to the ones we asked for in the `readPermissions` array passed in as a prop
    to the `LoginButton` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_05_003-1.png)'
  prefs: []
  type: TYPE_IMG
- en: Once your user is authorized, you'll be able to grab data from Facebook's Graph
    API.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Facebook Graph API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The FBSDK lets us make requests to the Facebook Graph API using the `GraphRequest`
    and `GraphRequestManager` classes to create those requests and execute them.
  prefs: []
  type: TYPE_NORMAL
- en: '`GraphRequest` is used to create a request to the Graph API, while `GraphRequestManager`
    is called to execute that request.'
  prefs: []
  type: TYPE_NORMAL
- en: GraphRequest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To instantiate a new `GraphRequest`, we can pass up to three arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphPath`: This is a string pertaining to the endpoint in the Graph API that
    we wish to hit. For example, to get information about the logged-in user, a `graphPath`
    of `/me` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config`: This is an optional object that can configure the request. The props
    that this object accepts are all optional:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`httpMethod`: This is a string that describes the HTTP method for this request,
    for example, `GET` or `POST`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: This is a string that describes the specific Graph API version to
    use.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parameters`: This is an object containing the request''s parameters.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accessToken`: This is a stringified version of the access token used by this
    request.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`callback`: This is a callback function that is fired once the request has
    either been completed or has failed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A sample `GraphRequest` instance will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For this request to be executed, we will use `GraphRequestManager`.
  prefs: []
  type: TYPE_NORMAL
- en: GraphRequestManager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `GraphRequestManager` queue requests the Facebook Graph API and executes
    it when told to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'It has access to the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`addRequest`: This is a function that accepts an instance of `GraphRequest`
    and pushes the request into the queue of `GraphRequestManager`. It also pushes
    the callback into a separate `requestCallbacks` queue for execution once the request
    has been completed or failed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addBatchCallback`: This accepts an optional callback to be executed once the
    entire batch of requests has been completed. Each instance of `GraphRequestManager`
    can only accept up to one callback, and the invocation of that callback does not
    indicate that every graph request in the batch was successful--the only thing
    it is indicative of is that the entire batch has completed execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start`: This accepts an optional number equal to a timeout value. The timeout
    value defaults to 0 if it''s not passed in. When `GraphRequestManager.start` is
    invoked, the `GraphRequestManager` makes a series of requests to the Facebook
    Graph API on a first-in, first-out basis and executes the callbacks for each request
    made, if applicable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adding to the preceding example, a `GraphRequestManager` request looks something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This request creates a new instance of `GraphRequestManager` complete with its
    own new batch, adds the preceding `requestMyPhotos` task to the batch, and then
    starts it. From here, the Facebook Graph API will return some form of data.
  prefs: []
  type: TYPE_NORMAL
- en: The callback passed into the instance of `requestMyPhotos` in `GraphRequest`
    will then execute, logging either an error or the result of the request.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to create our first request to verify that the access token we've
    received has worked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within your `Friends` component in `index.ios.js`, let''s do the following
    things:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a method, called `_getFeed`, that creates a `GraphRequest` to your Facebook
    feed. This method should grab data at the `/me/feed` endpoint and reference a
    callback to be executed when that `GraphRequest` is complete. You can skip the
    optional `config` object that `GraphRequest` can optionally accept.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the same `_getFeed` function, create a new `GraphRequestManager` and add
    the `GraphRequest` instance to it; then start the `GraphRequestManager`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the callback referenced by `_getFeed`, have it log either the error or the
    result that it receives when your `GraphRequest` is completed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Call `_getFeed` as part of the `onLoginFinished` callback in `LoginButton`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you have finished, the result should look somewhat like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Rather than alerting the access token, I am calling `_getFeed`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new instance of `GraphRequest` by passing it the endpoint desired
    along with the callback to be fired once the request is complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a new instance of `GraphRequestManager`, add the `infoRequest`
    object to it, and then start the request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When the request is completed, it will log either the result or an error if
    one was encountered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'With your iOS simulator and remote debugging opened, check out your browser''s
    console as you log in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_05_004.png)'
  prefs: []
  type: TYPE_IMG
- en: This is great! It shows that we are linked up with the Graph API and that it
    accepts the access token we've given it. Now, let's create a separate `graphMethods.js`
    utility file that we can use in different components.
  prefs: []
  type: TYPE_NORMAL
- en: GraphMethods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of this file is to create some commonly used methods that interact
    with the Facebook Graph API and export them so that we can use them in different
    components throughout the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like the utility files we created for `Expenses`, this `graphMethods` file
    should live inside a `utils` folder, nested inside an `app` folder that rests
    at the root level of our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_05_005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create this utilities file and have it do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a function called `makeSingleGraphRequest` that accepts a request as
    an argument, creates a new instance of `GraphRequestManager`, passes in the request
    to `GraphRequestManager`, and then calls the `start` method of `GraphRequestManager`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create and export a function, called `getFeed`, that accepts a callback, creates
    a new `GraphRequest` pointing to `/me/feed` with that callback, and then calls
    `makeSingleGraphRequest` with it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once your version is complete, check out mine below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: NavigatorIOS and App component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s create an `App` component using an `App.js` file. Create this within
    the `app` folder of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_05_006.png)'
  prefs: []
  type: TYPE_IMG
- en: This component should contain logic similar to what we had in `index.ios.js`
    previously--we will replace the `index.ios.js` file with a `NavigatorIOS` component
    shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Your new `App` component should be a reflection of the `index.ios.js` file you
    wrote earlier in this chapter, except that it should import and use the `graphMethods`
    file instead of the component-specific `_getFeed` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have completed this task, refer to my version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Since `GraphRequest` and `GraphRequestManager` are being imported within `graphMethods`,
    I can omit them from the `import` statement in the preceding code.
  prefs: []
  type: TYPE_NORMAL
- en: 'I am using destructuring notation to import just the `getFeed` method from
    `graphMethods`. This will come in handy in the future as that file is populated
    with more helper methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the callback for `GraphRequest` contains the `error` and `result` arguments,
    I pass them in so that `_responseInfoCallback` can make use of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the basic styling for our `App` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Great work! The next step is to refactor `index.ios.js` at your project''s
    root to do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Import `NavigatorIOS` from the React Native SDK as well as the `App` component
    you just created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Render the root `NavigatorIOS` component, passing it the `App` component as
    its initial route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you have finished this part, feel free to check out my solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now it's time to create a login prompt for the user so that they only see the
    `LoginButton` component when they are not logged in.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a login prompt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we should do is think about how our app will behave. When it's
    launched, we should check for an available access token using the FBSDK `AccessToken`
    API. If it's not available, then our user isn't logged in and we should show them
    the Log In button, just like we required a budget in our previous project, `Expense`.
  prefs: []
  type: TYPE_NORMAL
- en: If/when the user is logged in, we should grab their feed data, load it into
    the component state, and then log it to the console to show that we have it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we should do is modify the `App` component so that:'
  prefs: []
  type: TYPE_NORMAL
- en: On the `componentWillMount` event, we use the `AccessToken` API's `getCurrentAccessToken`
    method to check and see whether the user is logged in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the user is not logged in, we should alert the user that they are not logged
    in. In the next section, we will replace this part with the login screen that
    we will create.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the user is logged in, we should call the `getFeed` method of `graphMethods`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, it should no longer render the `LoginButton`--this will go into a different
    component in a moment. Instead, let's have the `App` component render a string
    that says `'Logged In'` for the time being.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Take the time you need to make these changes, then check the code below for
    my working example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: I removed the import of `LoginButton` to `App` since it will be broken off into
    a different component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `componentWillMount` logic calls the `_checkLoginStatus` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The `LoginButton` component in the `render` method of `App` has been replaced
    with a `Text` block for the time being. The `_responseInfoCallback` function has
    not been changed nor removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The `async _checkLoginStatus` function is similar to the `onLoginFinished`
    callback of the `LoginButton` component we previously rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If the user is not logged in when they refresh the app, they will see this
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_05_007-1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Great job on your progress! For the next step, create a `components` folder
    within the `app` folder, within which create a `LoginPage` folder that contains
    both an `index` and a `styles` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_05_008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s modify the `App` component again while we create the `LoginPage`.
    The `App` component should do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the `LoginPage` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `push` method of the navigator to push the `LoginPage` component when the
    user is not logged in; replace the part in your code that alerts the user that
    they are not logged in with this logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pass the `_checkLoginStatus` callback to the `LoginPage` component so that,
    when the user is logged in, we can check the login status with the `App` component
    and log their list of posts within `/me/feed`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `LoginPage` component should do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Contain a view that wraps around the `LoginButton` component that we rendered
    previously in this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Have an `onLoginFinished` callback that does the following things:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logs an error to the console if the login action is cancelled
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Calls the `getFeed` callback that was passed to it along with the `pop` method
    of the navigator if the login action is successful
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you are finished, your result should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Rather than alerting the user that they are not logged in, I''m now pushing
    the `LoginPage` component via the app''s navigator if the user is not logged in.
    This is how I wrote the `LoginPage` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The preceding part logs an error if one occurred during login.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code we log the fact that the user cancelled the login process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'However, we call the `getFeed` and `navigator.pop` methods if the login was
    successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The stylesheet for `LoginPage` is the exact same as the one found in `Expenses/app/styles.js`,
    so I left it out for the sake of brevity.
  prefs: []
  type: TYPE_NORMAL
- en: Great progress! In the next section, we will create some storage methods to
    handle the rate limit for Facebook's Graph API.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing for the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The current rate limit for Facebook's Graph API is 200 calls per hour per user.
    This means that if your app has 100 users, you can make 20,000 calls per hour.
    The limit is in aggregate, meaning that any single user could take up all 20,000
    calls in that given hour.
  prefs: []
  type: TYPE_NORMAL
- en: To reduce the number of network calls we make to the API, we should tweak our
    `App` component to save feed data within `AsyncStorage` and only refresh its data
    when manually prompted to do so by the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can begin by creating methods for `AsyncStorage`, which are similar to the
    ones we had in `Expenses`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: For this app, we will be storing different key-value pairs within `AsyncStorage`;
    so, we want to explicitly pass the `getAsyncStorage` and `setAsyncStorage` methods
    a key.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `resetAsyncStorage` and `logAsyncStorage` methods remain the same from
    when we used them in `Expenses`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, modify the `_checkLoginStatus` method in `App.js` so that it does the
    following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Calls the `getAsyncStorage` method in `storageMethods` to check for the existence
    of data within the `feed` property if the user is logged in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the `feed` property exists, we should save its results to the `App` component's
    state under the same name. We will not call `getFeed` if this is the case.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the key does not exist, we should call `getFeed`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s modify the `_requestInfoCallback` method in `App.js` so that if
    it does not contain an error, it will do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Save the `response.data` array using the `setAsyncStorage` method from `storageMethods`,
    using `feed` as the key that is passed in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save the same array to the `App` component's local state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s how my version looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: If the `feed` array exists, set it to local state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Otherwise, call `getFeed`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This change first checks for any feed data that we have saved in the app before
    resorting to making an external API call for that data. In the next chapter, we
    will explore a component that will allow us to refresh this data on demand.
  prefs: []
  type: TYPE_NORMAL
- en: The next step we should take is to give the user an indication that data is
    being loaded so that they don't have a static screen for too long. We will use
    the `ActivityIndicator` component to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Using ActivityIndicator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ActivityIndicator` component displays a circular loading indicator that
    lets you visualize a *loading* action for the user. It's helpful for the overall
    user experience since your users shouldn't feel like their actions aren't accomplishing
    their intentions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The two `ActivityIndicator` props we will use in this app are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`animating`: This is a Boolean that either shows or hides the component. It
    defaults to `true`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size`: This is the physical size of the component. On iOS, your options are
    one of two strings: `small` and `large`. On Android, in addition to those two
    strings, you can pass it a number. This prop defaults to `small`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We should modify our app to show this `ActivityIndicator` when data hasn't been
    loaded from the Graph API.
  prefs: []
  type: TYPE_NORMAL
- en: Let's modify the `App` component so that it conditionally renders the `ActivityIndicator`
    component when data has not yet been saved into the `feed` property of the `App`
    component's state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution I came up with is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Set the `feed` and `spinning` values in the `App` component's state upon initialization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Call the new `_renderView` method to conditionally determine what to render:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify `_checkLoginStatus` to set the `spinning` property to `false` when loading
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Check to see whether the `ActivityIndicator` should still be spinning. If so,
    return the `ActivityIndicator` component. If not, return the original `Text` component
    instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Like `_checkLoginStatus`, modify `_responseInfoCallback` to set `spinning`
    to `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Now, we should take the data we received and display it within a `ListView`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a standard ListView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step is to take the data received from the Graph API and render it
    into the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right now, the `feed` array in the `App` component state contains 25 objects.
    Each object contains the following key-value pairs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`created_time`: This is the date and time this post was made'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`id`: This is an identifier that will let us grab the details of the post'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`story`: This an optional post description that adds context, such as whether
    the post contained a location-based check-in, whether it was a shared memory or
    link, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`message`: This an optional message that the user personally wrote for this
    post'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each post contains several edges, just like a node on a graph data structure.
    For `Friends`, we will access these following edges:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/likes`: This is a list of users who like this specific post'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/comments`: These are the comments made to this post'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/attachments`: These are the media attachments associated with the said post'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before we can access the edges, we should render a `ListView` component that
    displays these 25 posts in a coherent manner. Take some time to create a `ListView`
    that does the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Renders the 25 posts in individual rows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has conditional logic to show the story and message only if they exist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have gone through the first two projects in this book, the `ListView`
    is nothing new to you.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new component titled `FeedList` within your `components` folder. In
    this file, create a `ListView` component that takes its array from a prop passed
    into it and renders a standard `ListView`.
  prefs: []
  type: TYPE_NORMAL
- en: Then, create a new helper file, called `dateMethods`. It should contain a function
    that accepts a date string and returns a formatted date. I like to use the MomentJS
    for things like this, but feel free to do this however you like.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, create another component titled `FeedListRow`, which will be responsible
    for rendering each individual row of the `FeedList`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Afterward, in `App.js`, import the `FeedList` component you created and render
    it where the `Text` component is currently placed within `_renderData`. Ensure
    that you pass it the `feed` array so that it has data to render. Render the `FeedList`
    instead of the old `Text` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '`Text` is no longer imported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the `FeedList` component takes in the `feed` array from the `App` component
    state and renders a standard `ListView`, explicitly passing in each post''s details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Instantiate a new `ListView.DataSource` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `feed` array passed in from `App` to render the `ListView`, as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Render a `ListView` component using `FeedListRow` for each individual row,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The `separator` gets its own styling for separating each post, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the date string taken from the Facebook API and then format it with `moment`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'In `FeedListRow`, import the `getDateTimeString` method from the `dateMethods`
    file that was just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Wrap a `TouchableHighlight` component around for future navigation purposes,
    as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Placeholder function for now, we will modify this later.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Methods to render certain parts of the post's data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the styling I built for `FeedListRow`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: You'll notice that this component's `_navigateToPostView` method has a commented
    task to take care of. This is the basis for the next step in this exercise, and
    we will jump right to it in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This was a long chapter, so thank you for staying with me! In this chapter,
    we obtained access to the Facebook Graph API, installed the Facebook SDK for iOS
    and Android, and began using the Facebook SDK to log the user into the app and
    use their access token to grab their feed data and render it onto the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Along the way, you also used an `ActivityIndicator` component to visually communicate
    to the user that we are currently loading data.
  prefs: []
  type: TYPE_NORMAL
- en: We will ramp up a lot more in the next chapter. See you there.
  prefs: []
  type: TYPE_NORMAL
