- en: Chapter 2. Including Autocompletes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 包括自动完成
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章中，我们将涵盖:'
- en: Styling the default input with themes
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用主题样式化默认输入
- en: Building data sources using select options
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用选择选项构建数据源
- en: Using multiple data sources
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个数据源
- en: Remote autocomplete filtering
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程自动完成过滤
- en: Custom data and categories
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义数据和分类
- en: Applying effects to the drop-down menu
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将效果应用于下拉菜单
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The main purpose of the **autocomplete** widget is to augment the capabilities
    of the standard HTML form `input` element. Instead of the user having to type
    out the full value of the input field each time, the autocomplete widget offers
    suggestions as to what the value might be. For example, let's say you're adding
    a new product. The product field could be a text input, a select input, and so
    on. In this scenario, one would use the existing product in the system as the
    source for an autocomplete widget. Chances are, the user who is entering the product,
    or another user for that matter, has entered that product before. With autocompletes,
    users have some assurance that they're providing valid inputs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**自动完成**小部件的主要目的是增强标准HTML表单`input`元素的功能。用户不必每次输入字段的完整值，自动完成小部件会提供可能的值作为建议。例如，假设您正在添加一个新产品。产品字段可以是文本输入、选择输入等等。在这种情况下，一个人会使用系统中现有的产品作为自动完成小部件的来源。很有可能，输入产品的用户，或者其他用户，之前已经输入过该产品。通过自动完成，用户可以确保他们提供的是有效的输入。'
- en: Styling the default input with themes
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用主题样式化默认输入
- en: The default autocomplete implementation doesn't change anything visual about
    the input element. Functionally speaking, we don't want the input element changed.
    All we need is the drop-down component once the user starts typing. But let's
    see if we can go ahead and change the virtual appearance of the autocomplete input
    element using components from the widget framework and the theme framework.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的自动完成实现不会改变输入元素的任何视觉效果。从功能上讲，我们不希望更改输入元素。我们只需要在用户开始输入时出现下拉组件。但让我们看看是否可以使用小部件框架和主题框架中的组件改变自动完成输入元素的虚拟外观。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll use the following markup for our example, a simple `label` element and
    a simple `input` element:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下标记作为我们的示例，一个简单的`label`元素和一个简单的`input`元素：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We'll use the following code to extend the autocomplete widget with the CSS
    classes from the theme framework we'd like applied. We're introducing a minor
    behavioral tweak with regards to focus events.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下代码使用主题框架中的CSS类来扩展自动完成小部件。我们正在引入一个关于焦点事件的微小行为调整。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The last thing we need to complete the stylization of our autocomplete's `input`
    element is a new CSS stylesheet with a couple of rules. The stylesheet should
    be included in the main HTML where the input markup is defined.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 完成我们自动完成`input`元素的样式要求的最后一件事是使用一些规则的新CSS样式表。样式表应该在定义输入标记的主HTML中包含。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here is what our newly-styled autocomplete widget looks like without focus.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们新样式的自动完成小部件在没有焦点时的样子。
- en: '![How to do it...](img/2186_02_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_02_01.jpg)'
- en: Here is what the autocomplete looks like when it has the focus, and with the
    drop-down menu expanded.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是自动完成在有焦点时的样子，并且下拉菜单已展开。
- en: '![How to do it...](img/2186_02_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_02_02.jpg)'
- en: How it works...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the document loads, we're creating a simple autocomplete using the `#autocomplete`
    input element.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 文档加载时，我们正在创建一个简单的自动完成使用`#autocomplete` 输入元素。
- en: 'The first thing you''ll notice is the `inputClasses` attribute. This string
    represents the three classes from the theme framework we want to apply to the
    widget: `ui-widget`, `ui-widget-content`, and `ui-corner-all`. The `ui-widget`
    class doesn''t do much aside from handling fonts, it''s good practice to apply
    this class to themed elements. The `ui-widget-content` class fixes the input''s
    border for us while the `ui-corner-all` class applies nice rounded corners for
    us. The reason we''ve defined this string as an attribute of the widget is because
    there are two places these classes are used, and this makes for easy maintenance.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到的第一件事是`inputClasses`属性。这个字符串代表了我们想要应用到小部件的主题框架的三个类：`ui-widget`、`ui-widget-content`
    和 `ui-corner-all`。`ui-widget`类除了处理字体外并没有太多作用，将这个类应用到主题化的元素是一个好的做法。 `ui-widget-content`
    类为我们修复了输入的边框，而 `ui-corner-all` 类为我们应用了漂亮的圆角。我们将这个字符串定义为小部件的属性的原因是因为这些类在两个地方使用，这样易于维护。
- en: The `_create()` method we're overriding here just calls the original implementation
    of the autocomplete's `_create()` method. Once this completes, we're making the
    `input` element focusable by calling `_focusable()`. This is a handy utility method
    defined by the widget factory and inherited by all widgets. It takes care of making
    the element focusable by applying the `ui-state-focus` CSS class from the theme
    framework when the element is focused. It also removes the class when the element
    loses focus. Perhaps, the best part about `_focusable()` is that the widget factory
    machinery will clean up any focus event handlers for us when the widget is destroyed.
    The last job of our customized implementation of `_create()` is to add the CSS
    classes from `inputClasses` to the input element.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里覆盖的`_create()`方法只是调用了自动完成的`_create()`方法的原始实现。一旦这完成，我们通过调用`_focusable()`使`input`元素可聚焦。这是小部件工厂定义的一个方便的实用方法，并且被所有小部件继承。它通过在元素聚焦时从主题框架中应用`ui-state-focus`CSS类来处理使元素可聚焦。当元素失去焦点时，它也会移除类。也许，`_focusable()`最好的部分是小部件工厂机制将在小部件销毁时清理任何焦点事件处理程序。我们自定义的`_create()`实现的最后一个任务是将`inputClasses`的CSS类添加到输入元素中。
- en: As always, we need to make sure we clean up after ourselves when we're finished
    borrowing from the autocomplete widget. This means extending `_delete()` to ensure
    that the `inputClasses` attributes are removed from the input element.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，当我们从自动完成小部件中借用完成后，我们需要确保清理干净。这意味着扩展`_delete()`以确保从输入元素中删除`inputClasses`属性。
- en: Our miniscule CSS rules that we've used to extend the theme framework do two
    things. The first change is to add a little padding to the `input` element—this
    is purely aesthetic since the other changes we've made make the text look a little
    tight inside the input. The second change removes the outline that surrounds the
    `input` element when focused. This only applies to certain browsers, like Chrome,
    where an automatic outline is applied.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的微小 CSS 规则有两个作用。第一个改变是给`input`元素添加一点填充——这纯粹是出于美观考虑，因为我们做的其他改变使得文本在输入框中显得有点紧凑。第二个改变是在焦点集中时删除围绕`input`元素的轮廓。这仅适用于某些浏览器，如
    Chrome，在其中会自动应用轮廓。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Normally, removing the outline isn't advised since accessibility is at stake.
    But, our changes have taken the focused input into account, so this is fine.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，不建议移除轮廓，因为这会影响可访问性。但是，我们的改动已经考虑到了焦点输入，所以这样做是可以的。
- en: Building data sources using select options
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用选择选项构建数据源
- en: Sometimes, using an array as the source of data for autocomplete widgets isn't
    the best option. For example, if we already have a `select` element in our user
    interface, it would make sense to reuse the options in that element to make an
    autocomplete. Otherwise, we would have to not only design some new code to build
    the array data source, but we would also have to remove the existing `select`
    element.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，将数组用作自动完成小部件的数据源并不是最佳选择。例如，如果我们的用户界面中已经有一个`select`元素，那么重用该元素中的选项来创建自动完成会是个明智的选择。否则，我们不仅需要设计一些新代码来构建数组数据源，还需要删除现有的`select`元素。
- en: Getting ready
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's put together some basic markup for this example. Typically, the autocomplete
    widget expects an `input` as its element. Instead, we're going to give it a `select`
    element with some simple options.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为这个例子编写一些基本的标记。通常，自动完成小部件期望一个`input`作为其元素。相反，我们将给它一个带有一些简单选项的`select`元素。
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: We'll go ahead and extend the capabilities of the autocomplete widget so that
    it knows how to handle the `select` elements. After which, we're able to target
    our `select` element with the autocomplete widget.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展自动完成小部件的功能，使其知道如何处理`select`元素。之后，我们就能够使用自动完成小部件来定位我们的`select`元素了。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now you should see something that looks like a plain old autocomplete—no `select`
    element in sight. Further, if you try using the autocomplete, you'll see that
    the options presented are the same as those in the `select` element's options.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该看到的是一个看起来像是普通的自动完成——看不到`select`元素。此外，如果你尝试使用自动完成，你会发现呈现的选项与`select`元素的选项相同。
- en: '![How to do it...](img/2186_02_03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/2186_02_03.jpg)'
- en: How it works...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Here, we need to add support to the autocomplete widget for `select` elements;
    we do this at the beginning of our custom `_create()` implementation. If we're
    dealing with a `select` element, the first thing we do is hide it and store a
    reference to it in the `original` attribute. Remember, we're only interested in
    the data source the `select` element has to offer by means of its `options`—we
    don't want to actually display the `select`. Instead, we're replacing the `select`
    with an `input` element since this is how the user types and the widget completes.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要为 `select` 元素添加对自动完成小部件的支持；我们在自定义的 `_create()` 实现的开始时执行此操作。如果我们处理的是
    `select` 元素，则我们要做的第一件事是隐藏它并将其引用存储在 `original` 属性中。记住，我们只对 `select` 元素通过其 `options`
    提供的数据源感兴趣 - 我们不希望实际显示 `select`。相反，我们将 `select` 替换为一个 `input` 元素，因为这是用户键入的方式，而小部件则完成。
- en: The `source` option of the autocomplete widget is how we're able to specify
    a custom function that returns the source data to be used. In our case, we're
    providing a function that grabs the values from each select `option`. Recall that
    the `select` element was stored in the `original` attribute earlier. We're using
    the jQuery `map()` utility function here to turn the `select` options into an
    array that autocomplete can use. The `filter()` function gets applied, and the
    `response()` function is sent to the drop-down menu.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 自动完成小部件的 `source` 选项是我们能够指定返回要使用的源数据的自定义函数的方式。在我们的例子中，我们提供了一个函数，该函数从每个选择 `option`
    获取值。回想一下，`select` 元素先前存储在 `original` 属性中。我们在这里使用 jQuery `map()` 实用程序函数将 `select`
    选项转换为自动完成可以使用的数组。`filter()` 函数被应用，并且 `response()` 函数被发送到下拉菜单。
- en: When the widget is destroyed, we'd like to restore the original `select` element,
    since this is what we replaced. The original element gets displayed once again
    in our customized implementation of `_delete()`—this happens after calling the
    original `_delete()` method to perform routine cleanup tasks. The `input` element
    we created is also destroyed here.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当小部件被销毁时，我们希望恢复原始的 `select` 元素，因为这是我们替换的元素。在我们自定义的 `_delete()` 实现中，原始元素再次显示
    - 这是在调用原始的 `_delete()` 方法执行常规清理任务后发生的。我们创建的 `input` 元素也在这里销毁。
- en: Using multiple data sources
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用多个数据源
- en: Sometimes, an autocomplete widget doesn't map directly to one data source. Take
    video for instance. Imagine the user needs to pick a video, but the two data sources
    are DVD and Blu-ray. If we were to use autocomplete to select a video, we would
    need a way to assign multiple data sources. Furthermore, the mechanism would need
    to be extensible enough to support adding more data sources, especially since
    there is a new video format born every other year.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，自动完成小部件不直接映射到一个数据源。以视频为例。想象一下用户需要选择一个视频，但是两个数据源是 DVD 和蓝光。如果我们要使用自动完成选择视频，我们需要一种方法来分配多个数据源。此外，该机制需要足够灵活，以支持添加更多数据源，特别是因为每隔一年就会诞生一种新的视频格式。
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么做...
- en: The default implementation of the autocomplete widget is expecting a single
    data source – an array or an API endpoint string. We'll give the widget a new
    `sources` option to allow for this behavior. This is how we'll extend autocomplete
    and create an instance of the widget that has two video data sources – one for
    DVDs, and one for Blu-ray discs.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 自动完成小部件的默认实现期望一个单一的数据源 - 一个数组或一个 API 端点字符串。我们将给小部件添加一个新的 `sources` 选项来允许这种行为。这就是我们将扩展自动完成并创建一个具有两个视频数据源的小部件实例
    - 一个用于 DVD，一个用于蓝光光盘。
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![How to do it...](img/2186_02_04.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![怎么做...](img/2186_02_04.jpg)'
- en: As you can see, if you were to start searching for the video `1`, you'd get
    versions from each data source in the drop-down menu.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，如果您开始搜索视频 `1`，您将在下拉菜单中从每个数据源获得版本。
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Rather than merging our two data sources into one before it gets passed to the
    autocomplete, we're extending the capabilities of the widget to handle that task
    for us. In particular, we've added a new `sources` option that can accept several
    arrays. In the example, we're passing both the DVD and the Blu-ray sources to
    our widget.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不是在将我们的两个数据源合并到传递给自动完成之前，而是扩展了小部件的功能来处理这项任务。特别是，我们添加了一个新的 `sources` 选项，该选项可以接受多个数组。在示例中，我们将
    DVD 和蓝光源都传递给我们的小部件。
- en: Our customized version of `_create()` checks to see if multiple sources have
    been supplied by checking the length of the `sources` option. If there are multiple
    data sources, we use the `merge()` jQuery utility function to create a new array
    and apply the `filter()` function to it. A good feature of this approach is that
    it doesn't care how many data sources there are—we could pass a few more to our
    implementation down the road should the application require it. The merging of
    these data sources is encapsulated behind the widget.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的定制版本的`_create()`通过检查`sources`选项的长度来看是否已经提供了多个数据源。如果有多个数据源，我们使用`merge()`jQuery实用函数创建一个新数组，并对其应用`filter()`函数。这种方法的一个很好的特点是它不在乎有多少个数据源——我们以后可以传递更多数据源到我们的实现中。这些数据源的合并被封装在小部件后面。
- en: Remote autocomplete filtering
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程自动完成过滤
- en: The autocomplete filtering capabilities aren't just limited to the default implementation,
    which searches for objects in array sources. We can specify a custom `source()`
    function that will retrieve only data the user is looking for. This is the ideal
    approach if you're looking to use autocomplete on a data source with thousands
    of items. Otherwise, filtering gets too demanding on the browser—the large data
    set to download, followed by a large array search with each keystroke.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 自动完成过滤功能并不仅限于默认实现，它搜索数组数据源中的对象。我们可以指定一个自定义`source()`函数，该函数将仅检索用户正在寻找的数据。如果您希望在包含数千个项目的数据源上使用自动完成，这是理想的方法。否则，在浏览器上过滤要求会变得过于苛刻——下载大型数据集，然后对每次按键进行大型数组搜索。
- en: How to do it...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We'll use the GitHub API as the data source for our autocomplete widget. This
    is a good example since it is much too large to use in the browser memory.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 GitHub API 作为自动完成小部件的数据源。这是一个很好的例子，因为它太大了，无法在浏览器内存中使用。
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now if you look at the resulting widget in the browser and start typing, you'll
    see Github repository data in the drop-down menu.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您在浏览器中查看结果小部件并开始输入，您将在下拉菜单中看到 Github 仓库数据。
- en: '![How to do it...](img/2186_02_05.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_02_05.jpg)'
- en: How it works...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Since we're using a large data source, we're telling this particular autocomplete
    widget that the search for items should only be performed if there are at least
    three characters. This is done using the `minLength` option. Otherwise, we would
    be asking the server to query based on one or two characters which isn't what
    we're after.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用了一个大型数据源，我们告诉这个特定的自动完成小部件，只有在至少有三个字符时才应执行项目的搜索。这是使用`minLength`选项来实现的。否则，我们将要求服务器基于一个或两个字符进行查询，这不是我们想要的。
- en: The `source` option in our example specifies the data source that we're going
    to use – the Github API. The function we've passed to the source performs an `$.ajax()`
    call against the Github API. We're using `jsonp` as the format, which simply means
    that a callback function from the API will be sent back. We're also passing some
    query data to the API.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，`source`选项指定了我们将要使用的数据源——Github API。我们传递给`source`的函数执行了一个对 Github API
    的`$.ajax()`调用。我们使用`jsonp`作为格式，这意味着 API 的回调函数将被发送回来。我们还向 API 传递了一些查询数据。
- en: Our success callback function is executed once the API responds with data. We
    then pass this data through the `$.map()` utility function in order to produce
    an array the autocomplete widget understands. Our success function does a simple
    `$.map()` on the data to transform it into an array of objects that the autocomplete
    can use.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 API 响应了数据，我们的成功回调函数就会执行。然后,我们通过`$.map()`实用程序函数将这些数据传递，以便生成自动完成小部件可以理解的数组。我们的成功函数对数据进行简单的`$.map()`，将其转换为自动完成可以使用的对象数组。
- en: There's more...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: We can further cut back on the cost of network communication overheads by introducing
    a term cache to the widget. A **term** **cache**, as the name suggests, would
    store locally the results of performing a remote filter operation. This way, when
    the user inevitably does the exact same thing with their keystrokes, we're not
    performing the exact same task with the remote API call since we've already cached
    the result in the widget.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在小部件中引入术语缓存来进一步减少网络通信开销。**术语缓存**，顾名思义，会在本地存储执行远程过滤操作的结果。这样，当用户不可避免地在他们的按键中执行完全相同的操作时，我们不会再次执行相同的任务，并发出远程
    API 调用,因为我们已经在小部件中缓存了结果。
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can see where we've made changes in the preceding code to support caching
    the items returned from the HTTP request. Now we're extending the widget to add
    the new `_cache` attribute. We're also extending the `_search()` function, which
    is in charge of checking for a cached value. If it finds one, the rendering response
    is called using the cached version of the data. The `source()` function is responsible
    for storing cached results, but this is a simple one-liner.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在前面的代码中看到我们所做的更改以支持缓存从 HTTP 请求返回的项目。现在我们正在扩展小部件以添加新的 `_cache` 属性。我们还扩展了 `_search()`
    函数，该函数负责检查缓存值。如果找到一个，就使用缓存版本的数据调用渲染响应。`source()` 函数负责存储缓存结果，但这只是一个简单的一行代码。
- en: Custom data and categories
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义数据和类别
- en: One approach to separating two categories of autocomplete data might be to have
    two distinct fields, each with their own autocomplete widgets. Another would be
    to introduce the notion of a category into the widget itself. When the drop-down
    menu appears to suggest items for the user, they will also see the category the
    item belongs to. To do this in the autocomplete widget, we need to change both
    how the widget understands the source data, and how the menu items are rendered.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 分离两个自动完成数据类别的一种方法可能是拥有两个不同的字段，每个字段都有自己的自动完成小部件。另一种方法是在小部件本身引入类别的概念。当下拉菜单出现为用户建议项目时，他们还将看到项目所属的类别。要在自动完成小部件中执行此操作，我们需要更改小部件如何理解源数据以及如何呈现菜单项。
- en: How to do it...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We're going to extend the autocomplete widget in order to change how the menu
    items are rendered. We also need to consider the data passed into the widget as
    the source.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展自动完成小部件，以改变菜单项的渲染方式。我们还需要考虑传递给小部件的数据作为源。
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We''re almost done. The changes we''ve made to the menu will not just magically
    work out, we need to apply some styles. The following CSS code should be included
    on the page:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们差不多完成了。我们对菜单所做的更改不会神奇地起作用，我们需要应用一些样式。以下 CSS 代码应包含在页面中：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, if you start typing in the autocomplete, you'll notice a drop-down menu
    drastically different from what we're used to as it contains both category and
    description information.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您开始在自动完成中输入，您会注意到下拉菜单与我们所习惯的大不相同，因为它包含类别和描述信息。
- en: '![How to do it...](img/2186_02_06.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_02_06.jpg)'
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: The goal of this widget extension is to accept custom source data and to use
    that data in the display of the drop-down menu. Specifically, the new data we're
    working with is the category and the description. The category is a one-to-many
    relationship with the items insofar, as several items we pass to the widget may
    have the same category string. Our job is to figure out which items fall under
    any given category and to represent this structure in the drop-down menu. Additionally,
    the description of the item is a one-to-one relationship, so less work is required
    here but we nonetheless would like to include the description in the drop-down
    menu.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此小部件扩展的目标是接受自定义源数据并在下拉菜单的显示中使用该数据。具体而言，我们正在处理的新数据是类别和描述。类别是一对多关系，因此我们传递给小部件的几个项目可能具有相同的类别字符串。我们的工作是弄清楚任何给定类别下的项目，并在下拉菜单中表示此结构。此外，项目的描述是一对一关系，因此此处需要的工作较少，但我们仍然希望在下拉菜单中包含描述。
- en: The first method from the original implementation that we're overriding is `_renderMenu()`.
    The job of `_renderMenu()` is to alter the underlying HTML structure each time
    a suggestion is made to the user. We keep track of the current category with `currentCategory`.
    We then render each item with `_renderItem()`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们覆盖的原始实现的第一种方法是 `_renderMenu()`。`_renderMenu()` 的工作是每次向用户提出建议时更改底层 HTML 结构。我们使用
    `currentCategory` 跟踪当前类别。然后我们使用 `_renderItem()` 渲染每个项目。
- en: The `_renderCategory()` function renders the category text as an `<li>`. It
    also adds the `ui-autocomplete-category` class. Likewise, our `_renderItem()`
    function renders the item text, and it is here that we also make use of the `desc`
    attribute. The item also has the `ui-autocomplete-item` class.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`_renderCategory()` 函数将类别文本呈现为 `<li>`。它还添加了 `ui-autocomplete-category` 类。同样，我们的
    `_renderItem()` 函数呈现项目文本，并在这里我们还使用 `desc` 属性。项目还具有 `ui-autocomplete-item` 类。'
- en: The new CSS styles we've included in our UI are a necessary component of the
    new version of autocomplete that we've created. Without them, the description
    would be of the same font size and would display on the same line as the item
    label. Likewise, the category needs the newly-added styles to stand out as a category
    that groups other items instead of just another item.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在用户界面中包含的新 CSS 样式是我们创建的新版本自动完成功能的必要组成部分。没有它们，描述将与项目标签具有相同的字体大小并显示在同一行上。同样，类别需要新添加的样式以突出显示为其他项目分组的类别，而不仅仅是另一个项目。
- en: There's more...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Whenever we extend the data used by the autocomplete widget, we have to tell
    the widget how to work with it. Here, we've told autocomplete how to display the
    new data in the drop-down menu. Alternatively, we could tell the widget to perform
    filtering on some data fields that the user never actually sees in the drop down-menu.
    Or we could combine the two.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们扩展自动完成小部件使用的数据时，我们都必须告诉小部件如何使用它。在这里，我们告诉自动完成如何在下拉菜单中显示新数据。或者，我们可以告诉小部件在用户实际上从未在下拉菜单中看到的一些数据字段上执行过滤。或者我们可以将两者结合起来。
- en: Here is how we would go about using both the category and the description, both
    non-standard fields, in the filtering when the user starts typing.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在用户开始输入时如何同时使用类别和描述两个非标准字段进行过滤的方法。
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here we're replacing the `filter()` function that autocomplete uses with our
    own implementation. The two are similar, we're just adapting the `RegExp.test()`
    calls to the `desc` and `cat` field. We would place this code just beneath the
    custom widget declaration of autocomplete. The reason this is done externally
    to the customization specification is because `autocomplete.filter()` is kind
    of like a static method. Where with other methods, we're overriding on a per-instance
    basis.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在用我们自己的实现替换自动完成使用的`filter()`函数。这两者很相似，我们只是将`RegExp.test()`调用适应于`desc`和`cat`字段。我们将这段代码放在自动完成的自定义小部件声明的下方。之所以在自定义规范之外执行这些操作，是因为`autocomplete.filter()`有点像一个静态方法。在其他方法中，我们是根据每个实例进行覆盖。
- en: Applying effects to the drop-down menu
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对下拉菜单应用效果
- en: By default, we get a fairly simplistic presentation of the drop-down menu containing
    suggestions for completion based on what we type. The menu is simply displayed,
    without much fuss. Which is fine, it gets the job done reliably. But, on the other
    hand, there is always something we can do to make the UI look more polished. It
    could be as simple as changing the autocomplete widget in your application to
    use some subtle effects while transitioning to a visible state.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，我们得到一个相当简单的下拉菜单的呈现，其中包含基于我们输入的内容的建议。菜单只是简单地显示，没有太多的麻烦。这样做是可以的，它可以可靠地完成工作。但另一方面，我们总是可以做一些事情来使界面看起来更加精致。它可能只是将您应用程序中的自动完成小部件更改为在转换为可见状态时使用一些微妙的效果。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Since what we're after here is really more of a visual presentation aspect of
    the widget, we're probably safe using any existing instance of the widget.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们这里追求的实际上更多是小部件的视觉呈现方面，我们可能可以安全地使用小部件的任何现有实例。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let's build on the default implementation of the autocomplete widget to include
    some subtle animations for the drop-down menu.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在自动完成小部件的默认实现基础上增加一些微妙的动画效果。
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you start using this autocomplete widget by typing in the input element,
    you'll notice that the drop-down menu glides smoothly into view instead of just
    popping out abruptly. Also, when the menu is no longer needed, it fades out of
    existence.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您开始在输入元素中使用此自动完成小部件，您会注意到下拉菜单会平滑地滑入视图，而不是突然弹出。此外，当不再需要菜单时，它会渐渐消失。
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The autocomplete is being extended here so we can inject our customized animation
    functionality. But this time around, the changes are a little more involved, we're
    not merely extending `_create()` with a few lines of code. There are a few methods
    buried deep in the autocomplete code that we need to extend. We've also introduced
    a few new methods of our own in the autocomplete widget.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里扩展自动完成功能，以便我们可以注入我们自定义的动画功能。但是这一次，变化要复杂一些，我们不仅仅是用几行代码扩展`_create()`。在自动完成代码中有一些深藏的方法需要我们扩展。我们还在自动完成小部件中引入了一些我们自己的新方法。
- en: The first method we're overriding is `_suggest()`. The `_suggest()` method is
    called by the autocomplete widget when the user has typed the minimum length of
    characters to perform a search. The original method takes care of everything that
    needs to happen in terms of rendering and displaying the drop-down menu. In our
    version of the method, we're just calling other methods of the widget. The job
    of `_suggest()` is to orchestrate everything that takes place when a search happens.
    There are two logical steps taken here. First, the menu is rendered with the new
    content. Next, the menu is displayed, resized, and positioned. The latter is where
    the animation takes place.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要覆盖的第一个方法是`_suggest()`。当用户键入了最小长度的字符以执行搜索时，自动完成小部件会调用`_suggest()`方法。原始方法负责渲染和显示下拉菜单的各个操作。在我们的方法版本中，我们只是调用小部件的其他方法。`_suggest()`方法的工作是协调搜索发生时发生的所有操作。这里有两个逻辑步骤。首先，使用新内容渲染菜单。接下来，显示、调整大小和定位菜单。后者是动画发生的地方。
- en: We won't drill into the details of the `_resetMenu()` and `_positionMenu()`
    methods as those code snippets are taken from the original implementation for
    the most part. They just empty and position the menu, respectively.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入讨论`_resetMenu()`和`_positionMenu()`方法的细节，因为这些代码片段大部分是从原始实现中取出的。它们只是分别清空并定位菜单。
- en: The `_resizeMenu()` method is where the actual animation takes place when the
    menu is displayed. This is a longer method because we have to perform a few calculations
    to pass into `animate()`. The original implementation of `_resizeMenu()` uses
    the `outerWidth()` jQuery function to set the width of the menu. This is to get
    proper alignment with the `input` element. However, we want to animate the `width`
    change. So we must manually compute the inner width. The outer width values go
    in the exclude variable. The inner width is `target - exclude`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`_resizeMenu()`方法是菜单显示时实际动画发生的地方。这是一个较长的方法，因为我们必须执行一些计算以传递给`animate()`。`_resizeMenu()`的原始实现使用`outerWidth()`
    jQuery函数来设置菜单的宽度。这是为了与`input`元素正确对齐。然而，我们想要动画改变`width`。因此，我们必须手动计算内部宽度。外部宽度值放在排除变量中。内部宽度为`目标
    - 排除`。'
- en: We check if the menu is already displayed before actually showing it, and before
    animating it. If the element isn't visible, we change the `display` CSS property,
    but set the `opacity` property to `0`. The reason we do this is that we need the
    element's box model dimensions in order to position it. But, we still haven't
    applied the animation effects to the menu. Here, we check if the `opacity` property
    for the menu is at `0`. If not, that means the menu is already displayed and it
    would not make sense to re-animate it now. Otherwise, we execute the width and
    opacity animation.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际显示菜单之前，我们会检查菜单是否已经显示，并在动画显示之前进行检查。如果元素不可见，我们会更改`display` CSS属性，但将`opacity`属性设置为`0`。我们这样做的原因是我们需要元素的框模型尺寸以便定位它。但是，我们仍未将动画效果应用于菜单。在这里，我们检查菜单的`opacity`属性是否为`0`。如果不是，则表示菜单已经显示，现在重新对其进行动画化是没有意义的。否则，我们执行宽度和不透明度动画。
- en: Finally, the `_close()` method replaces the original autocomplete `_close()`
    implementation. The code is nearly the same as the original, except we do a basic
    `fadeOut()` when the menu is closed, as opposed to merely hiding it.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`_close()`方法替换了原始的自动完成`_close()`实现。代码几乎与原始代码相同，只是在关闭菜单时我们做了一个基本的`fadeOut()`，而不是简单地隐藏它。
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This extension of the autocomplete does not implement an option that will turn
    off this behavior. This is alright because the extension only does one thing—apply
    effects to the drop-down menu. So, to disable these effects, we can just disable
    extension. The extension of a widget is defined inside a function that calls itself.
    When the script first loads, the function is called, and the widget gets extended
    with the new behavior. We can disable the behavior part of the function that invokes
    itself.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这个自动完成功能的扩展并没有实现关闭此行为的选项。这没关系，因为这个扩展只做一件事情——对下拉菜单应用效果。因此，要禁用这些效果，我们只需禁用扩展。小部件的扩展是在调用自身的函数内定义的。当脚本首次加载时，会调用该函数，并使用新的行为对小部件进行扩展。我们可以禁用调用自身的函数的行为部分。
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
