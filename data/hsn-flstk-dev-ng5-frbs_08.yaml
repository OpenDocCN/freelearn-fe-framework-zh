- en: Creating a Chat Component
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建聊天组件
- en: In this chapter, we will create our chat application in the existing application
    and take a look at real-time message updates using the Firebase database. We will
    explain the chat feature in this and the next chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在现有应用中创建我们的聊天应用，并查看使用Firebase数据库的实时消息更新。我们将在本章和下一章中解释聊天功能。
- en: Since we have already created components in the preceding chapter, we will design
    a more complex component involving multiple components, in this chapter. As per
    the general rule, we will create this as a module, so we will have the main component
    as a chat component, and this will contain a message list component, form component,
    and message component. We will explore more ways of data binding while implementing
    the chat feature. We will write more complex SCSS in this chapter. We believe
    that, if you follow this chapter properly, most of the Angular stuff will be clearer
    to you, and you'll be able to build a more complex component yourself.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经在上一章创建了组件，因此在本章中我们将设计一个涉及多个组件的更复杂组件。根据一般规则，我们将将其创建为一个模块，因此主组件将是聊天组件，它将包含消息列表组件、表单组件和消息组件。在实现聊天功能时，我们将探索更多数据绑定方式。在本章中，我们将编写更复杂的SCSS。我们相信，如果您正确地遵循本章，大多数Angular内容将更加清晰，您将能够自己构建更复杂的组件。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating a chat module
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建聊天模块
- en: Creating a color variable
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建颜色变量
- en: Creating a chat component
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建聊天组件
- en: Creating a chat message list component
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建聊天消息列表组件
- en: Creating a mixin for the message view
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建消息视图的mixin
- en: Creating a chat message component
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建聊天消息组件
- en: Creating a chat message form component
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建聊天消息表单组件
- en: Creating a chat module
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建聊天模块
- en: The first step in creating a module is to define the routes and include them
    in the chat module. In the chat routing module, we create chat routes and configure
    them in RouterModules.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模块的第一步是定义路由并将它们包含在聊天模块中。在聊天路由模块中，我们创建聊天路由并在RouterModules中配置它们。
- en: 'The following is the complete `chat-routing.module.ts` file:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是目前完整的`chat-routing.module.ts`文件：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The chat module contains a declaration of all the components, modules, and
    services. In chat features, we have the following four components:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天模块包含所有组件、模块和服务的声明。在聊天功能中，我们有以下四个组件：
- en: '**Chat component**: This is the main component, and it encapsulates the message
    list and message form components.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聊天组件**：这是主组件，它封装了消息列表和消息表单组件。'
- en: '**Chat message list component**: This is a message list, which displays the
    messages in the list. It calls the message component for populating the message
    in the textbox.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聊天消息列表组件**：这是一个消息列表，显示列表中的消息。它调用消息组件来填充文本框中的消息。'
- en: '**Chat message form component**: This is a form that takes a message as user
    input and adds the message in the Firebase database.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聊天消息表单组件**：这是一个表单，它接受用户输入的消息并将其添加到Firebase数据库中。'
- en: '**Chat message component**: This component displays the user-typed message
    and the date when the message was posted.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聊天消息组件**：此组件显示用户输入的消息和发布消息的日期。'
- en: 'The following is the complete `chat.module.ts` as of now:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是目前完整的`chat.module.ts`文件：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, we will include the chat module in the app module, as shown in the
    following code; here''s the modified `app.module.ts` as of now:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将聊天模块包含到应用模块中，如下所示；以下是目前的修改后的`app.module.ts`文件：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Presently, our chat module is part of the main app module. Now, we will implement
    the components.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的聊天模块是主应用模块的一部分。现在，我们将实现这些组件。
- en: Creating a color variable
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建颜色变量
- en: 'In this section, we discuss variable support in SCSS. In CSS, we need to declare
    the color code for each property, and we don''t have any mechanism to reuse the
    same color code in another CSS property:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论SCSS中的变量支持。在CSS中，我们需要为每个属性声明颜色代码，我们没有在另一个CSS属性中重用相同颜色代码的机制：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In our application, we use variables and partials to reuse the same color across
    the whole application. We declare all colors in a color file using variables as
    shown in the subsequent code. This file is known as a partial in SCSS and normally
    declared with an underscore.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用中，我们使用变量和部分来在整个应用中重用相同的颜色。我们使用变量在颜色文件中声明所有颜色，如下所示。此文件在SCSS中被称为部分，通常以下划线声明。
- en: 'The following is the complete `_colors.scss` as of now:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是目前完整的`_colors.scss`文件：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'First, we import partials into another SCSS file and then use the variables
    to access the color. In the following example, we use the `$concrete_solid` variable to
    reuse the color:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将部分导入到另一个SCSS文件中，然后使用变量来访问颜色。在以下示例中，我们使用`$concrete_solid`变量来重复使用该颜色：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: SCSS variables help us to centralize all the colors in a single file so that,
    when we change the color combination in one file, this reflects in our entire
    application.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: SCSS变量帮助我们集中管理所有颜色在一个文件中，这样，当我们更改一个文件中的颜色组合时，这将在我们的整个应用程序中反映出来。
- en: Creating a chat component
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建聊天组件
- en: Chat component is the main container, and it contains a message list component
    and message form component.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天组件是主要容器，它包含消息列表组件和消息表单组件。
- en: It uses Bootstrap component to create a message list column view.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用Bootstrap组件创建消息列表列视图。
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Chat template encapsulates the chat message list and chat message form references.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天模板封装了聊天消息列表和聊天消息表单引用。
- en: 'The following is the complete `chat.component.html` as of now:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是目前的完整`chat.component.html`：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We align the main container to the middle of the page using `margin-top` and
    `margin-left`, as shown in the following complete `chat.component.scss` as of
    now:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`margin-top`和`margin-left`将主容器对齐到页面中间，如下所示，以下是目前的完整`chat.component.scss`：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Chat component declares the template, style sheet, and selector. Here''s the
    complete `chat.component.ts` as of now:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天组件声明了模板、样式表和选择器。以下是目前的完整`chat.component.ts`：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Chat component provides the layout for other child components.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天组件为其他子组件提供布局。
- en: Creating a chat message list component
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建聊天消息列表组件
- en: The chat message list component displays the message text in a list layout.
    It calls the message component to populate the message text data and time.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天消息列表组件以列表布局显示消息文本。它调用消息组件来填充消息文本的数据和时间。
- en: 'First, we create the list in container `div` and tag the message list `div`
    with `#scrollContainer`, as this helps scroll the list to the bottom of the chat
    window when a new message arrives. We read this tag in the component using the `@ViewChild`
    annotation:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在容器`div`中创建列表，并使用`#scrollContainer`标签标记消息列表`div`，因为这有助于在收到新消息时将列表滚动到聊天窗口的底部。我们使用`@ViewChild`注解在组件中读取此标签：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, we include the chat message selector and loop the messages. The following
    is the complete `chat-message-list.component.html` as of now:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们包括了聊天消息选择器并循环消息。以下是目前完整的`chat-message-list.component.html`：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the following HTML `div` tag, we include two selectors in our template—we
    add a class selector and an ID selector:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下HTML `div`标签中，我们在模板中包含两个选择器——我们添加了一个类选择器和ID选择器：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We read the ID selector using a hash followed by name of the selector in the
    SCSS file to style `background-color`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用SCSS文件中选择器的名称后跟哈希来读取ID选择器以设置`background-color`：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We use the `box-shadow` and `border-radius` properties to give elevated looks
    for our list container:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`box-shadow`和`border-radius`属性为列表容器提供提升的外观：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here''s the complete `chat-message-list.component.scss` as of now:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是目前的完整`chat-message-list.component.scss`：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the chat message list component, we use `@ViewChild` to read the scroll
    container, as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在聊天消息列表组件中，我们使用`@ViewChild`读取滚动容器，如下所示：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We then implement `AfterViewChecked` in our component to handle the bottom scroll.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在组件中实现`AfterViewChecked`来处理底部滚动。
- en: The life cycle method is called whenever the view of the component is checked 
    during change detection.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 生命周期方法在组件视图在变更检测期间被检查时被调用。
- en: '[PRE17]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We override the life cycle method and, after each new message, we scroll the
    message list to the bottom of the last message. Also, we detect component changes
    using the `ChangeDetectorRef` class. This is required, as we need to force Angular
    to check for changes to the component because the scroll event runs outside Angular''s
    zone:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们覆盖了生命周期方法，并在每次收到新消息后，将消息列表滚动到最后一条消息的底部。我们还使用`ChangeDetectorRef`类检测组件变化。这是必需的，因为我们需要强制Angular检查组件的变化，因为滚动事件在Angular的作用域之外运行：
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here''s the complete `chat-message-list.component.ts` as of now:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是目前的完整`chat-message-list.component.ts`：
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Creating a mixin for the message view
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建消息视图的mixin
- en: In this section, we will cover SCSS mixins. This feature provides the flexibility
    to group the CSS properties, and we can reuse this mixin across our application.
    Just like the class method, we can also provide parameters to make the mixin more
    flexible.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍 SCSS 混合。这个特性提供了将 CSS 属性分组的能力，我们可以在我们的应用程序中重用这个混合。就像类方法一样，我们也可以提供参数来使混合更加灵活。
- en: We will use this mixin in our application to a add message pointer to our chat
    features. We will declare mixin by prefixing the method name with the `@mixin` keyword
    and add parameters such as `$rotate` and `$skew`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的应用程序中使用这个混合来为聊天功能添加消息指针。我们将通过在方法名前加上 `@mixin` 关键字来声明混合，并添加如 `$rotate`
    和 `$skew` 这样的参数。
- en: 'We created mixins for our chat messages in `_shared.scss`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `_shared.scss` 中为我们的聊天消息创建了混合：
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We use this mixin in our message SCSS. First, we need to import the shared SCSS
    file in our message file and then we use `@include` to call the mixin with the
    parameters.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个消息 SCSS 中使用这个混合。首先，我们需要在我们的消息文件中导入共享 SCSS 文件，然后我们使用 `@include` 来调用混合并传递参数。
- en: 'The following is the sample `chat-message.component.scss`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为示例 `chat-message.component.scss` 文件：
- en: '[PRE21]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Creating a chat message component
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建聊天消息组件
- en: 'The message component is the message text container. It displays the message
    and time. A typical chat has a bubble view layout. We design this view for our
    chat features. We declare the following three class variables, which we use in
    the SCSS file:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 消息组件是消息文本容器。它显示消息和时间。典型的聊天有一个气泡视图布局。我们为我们的聊天功能设计了此视图。我们声明以下三个类变量，我们在 SCSS 文件中使用它们：
- en: '`message-bubble`: This selector gives the message bubble view layout'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`message-bubble`：这个选择器为消息气泡视图布局'
- en: '`class.sender`: This aligns all the messages from the sender on the left side
    of the container'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class.sender`：这会将发送者的所有消息对齐到容器的左侧'
- en: '`class.receiver`: This aligns all the messages from the receiver on the right
    side of the container'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class.receiver`：这会将接收者的所有消息对齐到容器的右侧'
- en: 'Here''s the complete `chat-message.component.html` as of now:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的完整 `chat-message.component.html` 文件如下：
- en: '[PRE22]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We use a class selector and provide a style to the message box. This consists
    of the following two major parts:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用类选择器并为消息框提供样式。这包括以下两个主要部分：
- en: '**Message box**: This gives the shadow effect to the view'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息框**：这为视图提供了阴影效果'
- en: '**Message pointer**: This gives a pointer to the message box'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息指针**：这为消息框提供了一个指针'
- en: 'Here''s the complete `chat-message.component.scss` as of now:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的完整 `chat-message.component.scss` 文件如下：
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The message box looks as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 消息框看起来如下：
- en: '![](img/00029.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00029.jpeg)'
- en: Finally, we write the event method in our component. We retrieve the UID from
    the saved user in our service and write the logic to recognize the receiver and
    sender using the UID.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在组件中编写事件方法。我们从我们的服务中检索保存的用户 UID 并编写逻辑来识别接收者和发送者。
- en: 'Here''s the complete `chat-message.component.ts` as of now:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的完整 `chat-message.component.ts` 文件如下：
- en: '[PRE24]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Creating a chat message form component
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建聊天消息表单组件
- en: In the chat message form component, we implement the message form to send the
    message to Firebase and update the list with a new message.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在聊天消息表单组件中，我们实现消息表单以将消息发送到 Firebase 并用新消息更新列表。
- en: 'For these actions, we will require the following two elements:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些操作，我们需要以下两个元素：
- en: '**Input with a text area**: The input text allows a user to type their message.
    We use `(key.enter)` in the input text to handle the keyboard''s *Enter* key,
    and this calls the `sendMessage()` method.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带有文本区域的输入**：输入文本允许用户输入他们的消息。我们在输入文本中使用 `(key.enter)` 来处理键盘的 *Enter* 键，这会调用
    `sendMessage()` 方法。'
- en: '**Send button**: This calls the `sendMessage()` method and updates the Firebase
    database.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发送按钮**：这会调用 `sendMessage()` 方法并更新 Firebase 数据库。'
- en: 'Here''s the complete `chat-message-form.component.html` as of now:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的完整 `chat-message-form.component.html` 文件如下：
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We use the `chat-message-form-container` class selector to style the border
    with `border-radius` and the `message-text` to style input text-related properties.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `chat-message-form-container` 类选择器来设置边框的 `border-radius` 和 `message-text`
    来设置输入文本相关的属性。
- en: 'Here''s the complete `chat-message-form.component.scss` file as of now:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的完整 `chat-message-form.component.scss` 文件如下：
- en: '[PRE26]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the chat message form component, we retrieve the UID from the user object
    saved in the user service.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在聊天消息表单组件中，我们从用户服务中保存的用户对象中检索 UID。
- en: 'The following is the complete `chat-message-form.component.ts` file as of now:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为现在的完整 `chat-message-form.component.ts` 文件：
- en: '[PRE27]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, our chat feature will look as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们的聊天功能将如下所示：
- en: '![](img/00030.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00030.jpeg)'
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we designed a more complex UI component using multiple components.
    We implemented a chat module and integrated it with the main application. We covered
    new SCSS features such as variables, partials, and mixins. This really helped
    us to modularize our code and showed how reusability can be achieved in SCSS.
    We divided a big chat component into smaller components and then integrated these
    small components.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用多个组件设计了一个更复杂的 UI 组件。我们实现了聊天模块并将其集成到主应用程序中。我们涵盖了新的 SCSS 功能，如变量、部分和混入。这真正帮助我们模块化我们的代码，并展示了如何在
    SCSS 中实现可重用性。我们将一个大聊天组件分解成更小的组件，然后集成这些小组件。
- en: In the next chapter, we will integrate our component with the services. We will
    design our Firebase database for our chat application. Then, we will subscribe
    the real-time database and get instant updates.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把我们的组件与服务集成。我们将为我们的聊天应用程序设计 Firebase 数据库。然后，我们将订阅实时数据库并获取即时更新。
