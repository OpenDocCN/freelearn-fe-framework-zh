- en: 'Appendix A. Appendix: jQuery and WordPress Reference Guide'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. 附录：jQuery 和 WordPress 参考指南
- en: OK! Welcome to the final part of this book! This appendix isn't like the others,
    in that it's really intended to be a quick reference guide to help you out now
    that you've read and understood the underlying principles, applications, and best
    practices of using jQuery within WordPress sites. Think of this chapter as your
    "Cheat Sheet".
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 好的！欢迎来到本书的最后一部分！这个附录与其他附录不同，因为它实际上是一个快速参考指南，旨在在您阅读和理解在 WordPress 站点中使用 jQuery
    的基本原理、应用和最佳实践之后帮助您。把这一章当作您的“备忘单”。
- en: Where applicable, I'll point you back to the location in the book where the
    function or technique was described in detail, as well as point you out to any
    other useful links if you're interested in more detail.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在适当的情况下，我会指向本书中详细描述该函数或技术的位置，以及指向任何其他有用链接的地方，如果您对更多细节感兴趣的话。
- en: 'In this appendix, the topics that we''ll cover include:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们将涵盖的主题包括：
- en: Top, essential jQuery selectors and functions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶级、基本的 jQuery 选择器和函数
- en: Working with the template hierarchy, and key template tags and WordPress functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模板层次结构，以及关键模板标记和 WordPress 函数
- en: WordPress shortcodes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress 短代码
- en: jQuery reference for WordPress
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress的jQuery参考
- en: In the next few sections, we'll take a look at the top references you'll need
    for jQuery development within WordPress. Let's get started with staying in `noConflict`
    mode and looking at the most useful `selector` filters.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几个部分中，我们将看一下您在 WordPress 中进行 jQuery 开发时最需要的顶级参考资料。让我们从保持在 `noConflict`
    模式下并查看最有用的 `selector` 过滤器开始。
- en: noConflict mode syntax
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: noConflict 模式语法
- en: 'The simplest is to just use the jQuery variable in all your selection statements:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法就是在所有的选择语句中只使用 jQuery 变量：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can also set up your own variable:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以设置自己的变量：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can even safely use the `$` variable if you set it up correctly:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置正确，甚至可以安全地使用 `$` 变量：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Useful selector filters for working within WordPress
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于在 WordPress 中工作的有用选择器过滤器
- en: 'Remember: Sometimes it''s easier to *exclude* what you don''t want in a selection
    set, rather than select for everything you do want.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 记住：有时将不想要的内容从选择集中 *排除* 出来比选择您想要的一切更容易。
- en: Selection filter syntax
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择过滤器语法
- en: 'Here''s the basic syntax for working with selector filters:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用选择器过滤器的基本语法：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Selector filters
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择器过滤器
- en: 'Here are the top selector filters that you''ll find most useful with WordPress
    (`:not` is my personal favorite):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您在 WordPress 中工作时最有用的顶级选择器过滤器（`:not` 是我个人最喜欢的）：
- en: '| Example | Syntax | Description |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| :not(selector) | `jQuery(".post img:not(.pIcon)").jqFn();` | Filters out
    all elements matching the given selector. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| :not(selector) | `jQuery(".post img:not(.pIcon)").jqFn();` | 过滤掉所有匹配给定选择器的元素。
    |'
- en: '| :header | `jQuery(".post :header").jqFn();` | Filters down to all elements
    that are headers, such as h1, h2, h3, and so on. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| :header | `jQuery(".post :header").jqFn();` | 筛选出所有标题元素，例如 h1、h2、h3 等。 |'
- en: '| :first | `jQuery(".post:first").jqFn();` | Filters down to the first selected
    element only. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| :first | `jQuery(".post:first").jqFn();` | 仅筛选到第一个选择的元素。 |'
- en: '| :last | `jQuery(".post:last").jqFn();` | Filters down to the last selected
    element only. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| :last | `jQuery(".post:last").jqFn();` | 仅筛选到最后选择的元素。 |'
- en: '| :even | `jQuery(".post:even").jqFn();` | Filters down to even elements only.
    Note: Arrays are zero-indexed! Zero is considered an even number, so your first
    item will be selected! |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| :even | `jQuery(".post:even").jqFn();` | 仅筛选到偶数元素。注意：数组索引从零开始！零被视为偶数，因此您的第一个项目将被选中！
    |'
- en: '| :odd | `jQuery(".post:odd").jqFn();` | Filters down to odd elements only.
    Note: Arrays are zero-indexed! Zero is considered an even number, so your second
    item will be selected! |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| :odd | `jQuery(".post:odd").jqFn();` | 仅筛选到奇数元素。注意：数组索引从零开始！零被视为偶数，因此您的第二个项目将被选中！
    |'
- en: '| :eq(number) | `jQuery(".post:eq(0)").jqFn();` | Filters down to a single
    element by its index, which again is zero-indexed. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| :eq(number) | `jQuery(".post:eq(0)").jqFn();` | 通过其索引筛选出单个元素，索引从零开始。 |'
- en: '| :gt(number) | `jQuery(".post:gt(0)").jqFn();` | Filters down to all elements
    with an index **above** the given one, again this is zero-indexed. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| :gt(number) | `jQuery(".post:gt(0)").jqFn();` | 筛选出所有索引 **大于** 给定值的元素，这也是从零开始的。
    |'
- en: '| :lt(number) | `jQuery(".post:lt(2)").jqFn();` | Filters all elements with
    an index below the given one. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| :lt(number) | `jQuery(".post:lt(2)").jqFn();` | 筛选出所有索引小于给定值的元素。 |'
- en: '| :animated | `jQuery(".post:animated").jqFn();` | Filters down to all elements
    that are currently being animated (we''ll get to animation later in this chapter).
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| :animated | `jQuery(".post:animated").jqFn();` | 筛选为当前正在执行动画的所有元素（我们将在本章后面讨论动画）。'
- en: Content filter syntax
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内容过滤器语法
- en: After the regular selector filters, you'll find these content filters very useful
    (especially `:has()`).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在常规选择器过滤器之后，您会发现这些内容过滤器非常有用（特别是`:has()`）。
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Content filters
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内容过滤器
- en: Pretty much all the content filters come in handy with WordPress. They help
    you work with what the Page and Post WYSIWYG editor's output very well.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有内容过滤器都与 WordPress 配合使用非常方便。它们帮助您很好地处理页面和文章所见即所得编辑器的输出。
- en: '| Example | Syntax | Description |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| :has(selector) | `jQuery(".post:has(.entry)").css("background", "#f60");`
    | Filters down to elements that have at least one of the matching elements inside
    it. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| :has(selector) | `jQuery(".post:has(.entry)").css("background", "#f60");`
    | 筛选为至少有一个匹配元素的元素。'
- en: '| :contains(text) | `jQuery(".post:contains(''Hello world'')").css("background",
    "#f60");` | Filters down to elements that contain the specific text. Note: This
    is **case sensitive!** |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| :contains(text) | `jQuery(".post:contains(''Hello world'')").css("background",
    "#f60");` | 筛选包含特定文本的元素。注意：**区分大小写！**'
- en: '| :empty | `jQuery(":empty'')").css("background", "#f60");` | Filters down
    to elements that have no children. This includes text nodes. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| :empty | `jQuery(":empty'')").css("background", "#f60");` | 筛选为空的元素。这包括文本节点。'
- en: '| :parent | `jQuery(":parent'')").css("background", "#f60");` | Filters down
    to elements that are the parent of another element. This includes text nodes.
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| :parent | `jQuery(":parent'')").css("background", "#f60");` | 筛选为其他元素的父元素。这包括文本节点。'
- en: Child filter syntax
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 子过滤器语法
- en: 'Here''s the basic syntax for using child filer syntax:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用子元素过滤器语法的基本语法：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Child filters
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 子过滤器
- en: You'll find child filters will come in most handy when working with the various
    list tags that WordPress puts out. Categories, pages, gallery pages, you'll be
    able to control them and select specifics using these filters.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理 WordPress 输出的各种列表标记时，您会发现子过滤器非常有用。类别、页面、画廊页面，您将能够使用这些过滤器控制它们并选择特定元素。
- en: '| Example | Syntax | Description |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| :nth-child(number/even/odd) | `jQuery(".linkcat li:nth-child(1)").css("background",
    "#f60");` | Filters down to the elements that are the "nth" child of it''s selector.
    Note, this is not zero-indexed! 1 and odd selects the first element. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| :nth-child(number/even/odd) | `jQuery(".linkcat li:nth-child(1)").css("background",
    "#f60");` | 筛选为其选择器的“nth”子元素。注意，这不是零索引！1 和 odd 选择第一个元素。'
- en: '| :first-child | `jQuery(".linkcat li:first-child").css("background", "#f60");`
    | Filters down to the elements that are the first child of their parent. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| :first-child | `jQuery(".linkcat li:first-child").css("background", "#f60");`
    | 筛选为其父元素的第一个子元素。'
- en: '| :last-child | `jQuery(".linkcat li:last-child").css("background", "#f60");`
    | Filters down to the elements that are the last child of their parent. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| :last-child | `jQuery(".linkcat li:last-child").css("background", "#f60");`
    | 筛选为其父元素的最后一个子元素。'
- en: '| :only-child | `jQuery(".pagenav li:only-child").css("background", "#f60");`
    | Filters down to the elements that are only-children of their parent. If a parent
    has more than one child, no elements are selected. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| :only-child | `jQuery(".pagenav li:only-child").css("background", "#f60");`
    | 筛选为其父元素的唯一子元素。如果父元素有多个子元素，则不选择任何元素。'
- en: Form filter syntax
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表单过滤器语法
- en: 'Here''s the form filter syntax:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是表单过滤器的语法：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Form filters
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表单过滤器
- en: 'WordPress natively has a simple content form and a single input field. However,
    the WordPress Cforms II plugin is quite invaluable for most projects, and if you''re
    using that plugin, you''ll find most of these filters helpful:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress 本地具有简单的内容表单和单个输入字段。但是，WordPress Cforms II 插件对大多数项目非常有用，如果您使用该插件，您会发现大多数这些过滤器都很有用：
- en: '| Example | Syntax | Description |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| :input | `jQuery("form:input").css("background", "#f60");` | Filters to all
    input, textarea, select and button elements. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| :input | `jQuery("form:input").css("background", "#f60");` | 筛选为所有输入、文本区域、选择和按钮元素。'
- en: '| :text | `jQuery("form:text").css("background", "#f60");` | Filters to all
    input elements that are type text. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| :text | `jQuery("form:text").css("background", "#f60");` | 筛选为类型为 text 的所有输入元素。'
- en: '| :password | `jQuery("form:password").css("background", "#f60");` | Filters
    to all input elements that are type password. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| :password | `jQuery("form:password").css("background", "#f60");` | 筛选为类型为
    password 的所有输入元素。'
- en: '| :radio | `jQuery("form:radio").css("background", "#f60");` | Filters to all
    input elements that are type radio. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| :radio | `jQuery("form:radio").css("background", "#f60");` | 过滤所有类型为单选按钮的输入元素。
    |'
- en: '| :checkbox | `jQuery("form:checkbox").css("background", "#f60");` | Filters
    to all input elements that are type checkbox. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| :checkbox | `jQuery("form:checkbox").css("background", "#f60");` | 过滤所有类型为复选框的输入元素。
    |'
- en: '| :submit | `jQuery("form:submit").css("background", "#f60");` | Filters to
    all input elements that are type submit. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| :submit | `jQuery("form:submit").css("background", "#f60");` | 过滤所有类型为提交的输入元素。
    |'
- en: '| :image | `jQuery("form:image").css("background", "#f60");` | Filters to all
    image elements (classified as a form filter, but useful for regular images). |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| :image | `jQuery("form:image").css("background", "#f60");` | 过滤所有图像元素（分类为表单过滤器，但对常规图像也很有用）。
    |'
- en: '| :reset | `jQuery("form:reset").css("background", "#f60");` | Filters to all
    input elements that are type reset. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| :reset | `jQuery("form:reset").css("background", "#f60");` | 过滤所有类型为重置的输入元素。
    |'
- en: '| :button | `jQuery("form:button").css("background", "#f60");` | Filters to
    all input elements that are type button. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| :button | `jQuery("form:button").css("background", "#f60");` | 过滤所有类型为按钮的输入元素。
    |'
- en: '| :file | `jQuery("form:file").css("background", "#f60");` | Filters to all
    input elements that are type file. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| :file | `jQuery("form:file").css("background", "#f60");` | 过滤所有类型为文件的输入元素。
    |'
- en: 'jQuery: Useful functions for working within WordPress'
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jQuery：用于在WordPress中工作的有用函数
- en: While I've recapped most of the selector filters as they're just that useful,
    in this next section I'll go over the syntax and usage for the top functions that
    you'll find you use the most in your WordPress projects.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我已经对大多数选择器过滤器进行了简要总结，因为它们非常有用，但在下一节中，我将介绍您在WordPress项目中最常使用的顶级函数的语法和用法。
- en: Never fear, you can skim through [Chapter 2](ch02.html "Chapter 2. Working with
    jQuery in WordPress"), *Working with jQuery in WordPress* for a complete listing
    as well as usage of functions not covered here.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心，你可以快速浏览[第二章](ch02.html "第二章。在WordPress中使用jQuery")，《在WordPress中使用jQuery》以获取完整列表，以及这里未涉及的函数的使用方法。
- en: Working with classes and attributes
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理类和属性
- en: One of the most simple yet powerful things you can do quickly with jQuery is
    transform objects by changing their CSS properties.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用jQuery可以快速地通过更改它们的CSS属性来转换对象中最简单但最强大的事物之一。
- en: '| Example | Syntax | Description |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| .css(''property'', ''value'') | `jQuery(".post") .css("background", "#f60");`
    | Adds or changes the CSS properties of the selected elements. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| .css(''property'', ''value'') | `jQuery(".post") .css("background", "#f60");`
    | 添加或更改所选元素的CSS属性。 |'
- en: '| .addClass(''className'') | `jQuery(".post") .addClass("sticky");` | Adds
    listed class(es) to each of the selected elements. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| .addClass(''className'') | `jQuery(".post") .addClass("sticky");` | 将列出的类（们）添加到所选元素的每个中。
    |'
- en: '| .removeClass(''className'') | `jQuery(".post") .removeClass("sticky");` |
    Removes listed class(es) from each of the selected elements. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| .removeClass(''className'') | `jQuery(".post") .removeClass("sticky");` |
    从所选元素的每个中删除列出的类（们）。 |'
- en: '| .toggleClass(''className'', switch-optional) | `jQuery(".post") .toggleClass("sticky");`
    | Toggles listed class(es) from each of the selected elements based on their current
    state. If the class is there, it''s removed; if it''s not, it''s added. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| .toggleClass(''className'', switch-optional) | `jQuery(".post") .toggleClass("sticky");`
    | 根据它们当前的状态从所选元素的每个中切换列出的类（们）。如果存在类，则删除它；如果不存在，则添加它。 |'
- en: '| .hasClass(''className'') | `jQuery(".post") .hasClass("sticky");` | Returns
    true or false if listed class(es) from each of the selected elements exist. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| .hasClass(''className'') | `jQuery(".post") .hasClass("sticky");` | 如果所选元素的列出的类（们）存在，则返回true；否则返回false。
    |'
- en: '| .attr | `jQuery(".post").attr();` | Retrieves the attribute''s value for
    the first element of the selected elements. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| .attr | `jQuery(".post").attr();` | 检索所选元素的第一个元素的属性值。 |'
- en: Traversing the DOM
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遍历DOM
- en: '`.append` and `.prepend` are going to be your most used DOM functions. However,
    you''ll find `.wrapAll` invaluable for helping contain any new elements you create.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`.append`和`.prepend`将成为您在DOM函数中最常用的。但是，您会发现`.wrapAll`对于帮助包含您创建的任何新元素非常宝贵。'
- en: '| Example | Syntax | Description |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| .append(html & text) | `jQuery(".post") .append("<b>post ends here</b>");`
    | Inserts content in the parameter, to the end of each selected element. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| .append(html & text) | `jQuery(".post") .append("<b>帖子到此结束</b>");` | 将参数中的内容插入到每个选定元素的末尾。
    |'
- en: '| .appendTo(selector) | `jQuery("<b>post ends here</b>").appendTo(" .post");`
    | Does the same thing as append, just reverses the element selection and content
    parameter. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| .appendTo(selector) | `jQuery("<b>帖子在这里结束</b>").appendTo(" .post");` | 做的事情与append相同，只是反转了元素选择和内容参数。
    |'
- en: '| .prepend(html & text) | `jQuery(".post") .prepend("<b>post starts here</b>");`
    | Inserts content in the parameter, to the beginning of each selected element.
    |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| .prepend(html & text) | `jQuery(".post") .prepend("<b>帖子从这里开始</b>");` | 将参数中的内容插入到每个所选元素的开头。
    |'
- en: '| .prependTo(selector) | `jQuery("<b>post starts here</b>").prependTo(" .post");`
    | Does the same thing as prepend, just reverses the element selection and content
    parameter. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| .prependTo(selector) | `jQuery("<b>帖子从这里开始</b>").prependTo(" .post");` |
    做的事情与prepend相同，只是反转了元素选择和内容参数。 |'
- en: '| .after(string) | `jQuery(".post") .after("<b>This goes after</b>");` | Inserts
    content in the parameter, after and outside of each selected element. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| .after(string) | `jQuery(".post") .after("<b>这个在后面</b>");` | 将参数中的内容插入到每个所选元素之后，并在外部插入。
    |'
- en: '| .insertAfter(selector) | `jQuery("<b>This goes after</b>").insertAfter("
    .post");` | Does the same thing as after, just reverses the element selection
    and content parameter. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| .insertAfter(selector) | `jQuery("<b>这个在后面</b>").insertAfter(" .post");`
    | 做的事情与after相同，只是反转了元素选择和内容参数。 |'
- en: '| .before(html & text) | `jQuery(".post") .before("<b>This goes before</b>");`
    | Inserts content in the parameter, before and outside of each selected element.
    |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| .before(html & text) | `jQuery(".post") .before("<b>这个在前面</b>");` | 将参数中的内容插入到每个所选元素之前，并在外部插入。
    |'
- en: '| .insertBefore(selector) | `jQuery("<b>This goes before</b>") .insertBefore("class");`
    | Does the same thing as before, just reverses the element selection and content
    parameter. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| .insertBefore(selector) | `jQuery("<b>这个在前面</b>") .insertBefore("class");`
    | 做的事情与before相同，只是反转了元素选择和内容参数。 |'
- en: '| .wrap(html or functionName) | `jQuery(".post").wrap("<div class=".fun" />");`
    | Wraps an HTML structure around each selected element. You can also construct
    a function that will wrap each element in HTML. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| .wrap(html or functionName) | `jQuery(".post").wrap("<div class=".fun" />");`
    | 在每个所选元素周围包装HTML结构。您还可以构造一个将每个元素包装在HTML中的函数。 |'
- en: '| .wrapAll(html) | `jQuery(".post") .wrapAll("<div class=" .fun" />");` | Similar
    to wrap, but places the HTML structure around all of the elements together, not
    each individual element. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| .wrapAll(html) | `jQuery(".post") .wrapAll("<div class=" .fun" />");` | 类似于wrap，但将HTML结构放置在所有元素周围，而不是每个单独的元素。
    |'
- en: '| .wrapInner(selector) | `jQuery(".post") .wrapInner("<div class=" .fun" />");`
    | Similar to wrap, but it places the HTML structure inside each of the selected
    elements around any text or child elements of each selected element. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| .wrapInner(selector) | `jQuery(".post") .wrapInner("<div class=" .fun" />");`
    | 类似于wrap，但是它将HTML结构放置在所选元素的每个文本或子元素周围。 |'
- en: '| .html(html & text) | `jQuery(".post") .html("<h2>Replacement Text</h2>");`
    | Replaces any content and child elements of selected items with the content in
    the parameter. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| .html(html & text) | `jQuery(".post") .html("<h2>替换文本</h2>");` | 用参数中的内容替换所选项的任何内容和子元素。
    |'
- en: '| .text(text only html chars will be escaped) | `jQuery(".post") .text("Replacement
    Text");` | Similar to HTML, but text only. Any HTML characters will be escaped
    as ascii codes. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| .text(text only html chars will be escaped) | `jQuery(".post") .text("替换文本");`
    | 类似于HTML，但仅限文本。任何HTML字符都将转义为ASCII码。 |'
- en: Important jQuery events
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重要的jQuery事件
- en: Most of the time in WordPress, it's all about `.click` and `.hover` but `.toggle`
    and `.dbclick` will come in handy as well.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下在WordPress中，都是关于`.click`和`.hover`，但`.toggle`和`.dbclick`也很方便。
- en: '| Example | Syntax | Description |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| .click(functionName) | `jQuery(".post") .click(function(){//code});` | Binds
    a function to the click event type, executed on a single click. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| .click(functionName) | `jQuery(".post") .click(function(){//code});` | 将函数绑定到单击事件类型，单击时执行。
    |'
- en: '| .dbclick(functionName) | `jQuery(".post") .dbclick(function(){//code});`
    | Binds a function to the click event type, executed on a double click. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| .dbclick(functionName) | `jQuery(".post") .dbclick(function(){//code});`
    | 将函数绑定到双击事件类型，双击时执行。 |'
- en: '| .hover(functionName1, functionName2) | `jQuery(".post") .hover(function(){//code});`
    | Works with the mouseenter/mouseleave event types and binds just two functions
    to the selected elements, to be executed on mouseenter and mouseleave. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| .hover(functionName1, functionName2) | `jQuery(".post") .hover(function(){//code});`
    | 与mouseenter/mouseleave事件类型配合使用，并将两个函数绑定到所选元素，分别在mouseenter和mouseleave时执行。 |'
- en: '| .toggle(functionName1, functionName2, functionName3, ...) | `jQuery(".post")
    .toggle(function(){//code});` | Works with the click event type and binds two
    or more functions to the selected elements, to be executed on alternate clicks.
    |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| .toggle(函数名1, 函数名2, 函数名3, ...) | `jQuery(".post") .toggle(function(){//code});`
    | 与点击事件类型一起工作，并将两个或多个函数绑定到选定的元素上，以便在交替点击时执行。 |'
- en: Animation at its finest
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最佳的动画效果
- en: Anything that animates is going to look cool. Make sure that you know how to
    handle these functions for some top-notch jQuery enhancements.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 任何进行动画的元素都会看起来很酷。确保您知道如何处理这些函数以获得一些一流的 jQuery 增强功能。
- en: '| Example | Syntax | Description |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| .slideUp(speed, functionName) | `jQuery(".post") .slideUp(''slow'', function()
    { // code });` | Slides the selected element up from bottom to top until it is
    hidden. Speed can be "fast" or "slow" or in milliseconds. A function can be called
    when the animation is finished. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| .slideUp(速度, 函数名) | `jQuery(".post") .slideUp(''slow'', function() { // code
    });` | 将选定元素从底部向上滑动，直到它被隐藏。速度可以是 "快速" 或 "慢速" 或毫秒。动画完成时可以调用函数。 |'
- en: '| .slideDown(speed, functionName) | `jQuery(".post") .slideDown(''slow'', function()
    { // code });` | Slides a hidden selected element down from top to bottom until
    it is defined size. Speed can be "fast" or "slow" or in milliseconds. A function
    can be called when the animation is finished. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| .slideDown(速度, 函数名) | `jQuery(".post") .slideDown(''slow'', function() {
    // code });` | 从顶部向下滑动隐藏的选定元素，直到它达到定义的大小。速度可以是 "快速" 或 "慢速" 或毫秒。动画完成时可以调用函数。 |'
- en: '| .slideToggle() | `jQuery(".post") .slideToggle(''slow'', function() { //
    code });` | Toggles the visibility of the selected element using the slide animation.
    Speed can be "fast" or "slow" or in milliseconds. A function can be called when
    the animation is finished. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| .slideToggle() | `jQuery(".post") .slideToggle(''slow'', function() { //
    code });` | 使用滑动动画切换选定元素的可见性。速度可以是 "快速" 或 "慢速" 或毫秒。动画完成时可以调用函数。 |'
- en: '| .fadeOut(speed, functionName) | `jQuery(".post") .fadeOut("slow", function(){//code});`
    | Fades a selected element that''s visible or alpha is 1 to 0. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| .fadeOut(速度, 函数名) | `jQuery(".post") .fadeOut("slow", function(){//code});`
    | 将可见的选定元素淡出或透明度设置为 1 到 0。 |'
- en: '| .fadeIn(speed, functionName) | `jQuery(".post") .fadeIn("slow", function(){//code});`
    | Fades a selected element who''s visibility is hidden or alpha is set as 0 to
    1. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| .fadeIn(速度, 函数名) | `jQuery(".post") .fadeIn("slow", function(){//code});`
    | 将选定的元素淡入，其可见性为隐藏或透明度设置为 0 到 1。 |'
- en: '| .fadeTo(speed, alpha, functionName) | `jQuery(".post") .fadeTo("slow", .3,
    function(){//code});` | Fades a selected element to a specific alpha from 0 to
    1. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| .fadeTo(速度, 透明度, 函数名) | `jQuery(".post") .fadeTo("slow", .3, function(){//code});`
    | 将选定的元素淡出到指定的透明度，范围从 0 到 1。 |'
- en: '| .animate(css properties, duration, easing, functionName) | `jQuery(".post")
    .animate({width: 200, opacity: .25}, 1000, function(){//code});` | Creates a custom
    transition of CSS properties on the selected elements. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| .animate(css 属性, 持续时间, 缓动, 函数名) | `jQuery(".post") .animate({width: 200,
    opacity: .25}, 1000, function(){//code});` | 在选定的元素上创建自定义的 CSS 属性过渡效果。 |'
- en: '| .stop() | `jQuery(".post") .stop();` | Stops an animation on a selected element.
    |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| .stop() | `jQuery(".post") .stop();` | 停止选定元素上的动画。 |'
- en: Getting the most out of WordPress
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 充分利用 WordPress
- en: Those are the top elements that you'll need to know for jQuery, now lets take
    a look at what can be done to keep things running smooth on the WordPress side.
    First up, the more you know how to leverage your theme's hierarchy the more easily
    you can create views and pages to leverage with jQuery.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是您需要了解 jQuery 的顶级元素，现在让我们看看如何在 WordPress 方面保持运行流畅。首先，您了解如何利用主题层次结构，就可以更轻松地创建视图和页面以与
    jQuery 结合使用。
- en: The WordPress template hierarchy
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WordPress 模板层次结构
- en: Need to work with the theme a bit? Understanding the Template Hierarchy can
    really help you create the view you need with minimal programming headaches. The
    following list contains the general template hierarchy's rules. The absolute simplest
    theme you can have must contain an `index.php` page. If no other specific template
    pages exist, then `index.php` is the default.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 需要稍微调整主题？了解模板层次结构可以帮助您以最少的编程头痛创建所需的视图。下面的列表包含一般模板层次结构的规则。您可以拥有的绝对最简单的主题必须包含一个
    `index.php` 页面。如果不存在其他特定的模板页面，则 `index.php` 是默认页面。
- en: 'You can then begin expanding your theme by adding the following pages:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以通过添加以下页面来开始扩展您的主题：
- en: '`archive.php` trumps `index.php` when a category, tag, date, or author page
    is viewed.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`archive.php` 当查看类别、标签、日期或作者页面时优先于 `index.php`。'
- en: '`home.php` trumps `index.php` when the home page is viewed.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当查看主页时，`home.php`优先于`index.php`。
- en: '`single.php` trumps `index.php` when an individual post is viewed.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当查看单独的文章时，`single.php`优先于`index.php`。
- en: '`search.php` trumps `index.php` when the results from a search are viewed.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当查看搜索结果时，`search.php`优先于`index.php`。
- en: '`404.php` trumps `index.php`, when the URI address finds no existing content.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 URI 地址找不到现有内容时，`404.php`优先于`index.php`。
- en: '`page.php` trumps `index.php` when looking at a static page.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看静态页面时，`page.php`优先于`index.php`。
- en: 'A custom **template** page, such as: `page_about.php`, when selected through
    the page''s **Administration** panel, trumps `page.php`, which trumps `index.php`
    when that particular page is viewed.'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当通过页面的**管理**面板选择时，自定义**模板**页面，例如：`page_about.php`，优先于查看特定页面时的`page.php`，这又优先于`index.php`。
- en: '`category.php` trumps `archive.php`. This then trumps `index.php` when a category
    is viewed.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当查看分类页面时，`category.php`优先于`archive.php`。这又优先于`index.php`。
- en: 'A custom **category-ID** page, such as: `category-12.php` trumps `category.php`.
    This then trumps `archive.php`, which trumps `index.php`.'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义**分类-ID**页面，例如：`category-12.php`优先于`category.php`。这又优先于`archive.php`，优先于`index.php`。
- en: '`tag.php` trumps `archive.php`. This in turn trumps `index.php` when a tag
    page is viewed.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当查看标签页面时，`tag.php`优先于`archive.php`。这又优先于`index.php`。
- en: 'A custom **tag-tagname** page, such as: `tag-reviews.php` trumps `tag.php`.
    This trumps `archive.php`, which trumps `index.php`.'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义**标签-tagname**页面，例如：`tag-reviews.php`优先于`tag.php`。这又优先于`archive.php`，优先于`index.php`。
- en: '`author.php` trumps `archive.php`. This in turn trumps `index.php`, when an
    author page is viewed.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看作者页面时，`author.php`优先于`archive.php`。当查看作者页面时，这又优先于`index.php`。
- en: '`date.php` trumps `archive.php`, This trumps `index.php` when a date page is
    viewed.![The WordPress template hierarchy](img/1742_AppA_01.jpg)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当查看日期页面时，`date.php`优先于`archive.php`。这又优先于`index.php`。![WordPress 模板层次结构](img/1742_AppA_01.jpg)
- en: Note
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: 'You can learn more about the WordPress theme template hierarchy here: [http://codex.wordpress.org/Template_Hierarchy](http://codex.wordpress.org/Template_Hierarchy).'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在这里了解有关 WordPress 主题模板层次结构的更多信息：[http://codex.wordpress.org/Template_Hierarchy](http://codex.wordpress.org/Template_Hierarchy)。
- en: Top WordPress template tags
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 顶级 WordPress 模板标签
- en: 'The following are the top WordPress template tags that I find most useful for
    helping out with jQuery and theme development:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我发现在 jQuery 和主题开发中最有用的顶级 WordPress 模板标签：
- en: '| Template Tag | Description | Parameters |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| 模板标签 | 描述 | 参数 |'
- en: '| --- | --- | --- |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `bloginfo()`Sample:`bloginfo(''name'');` | Displays your blog''s information
    supplied by your user profile and general options in the Administration Panel.**More
    Info:**[http://codex.wordpress.org/Template_Tags/bloginfo](http://codex.wordpress.org/Template_Tags/bloginfo).
    | Any text characters you want to appear before and after the tags, as well as
    to separate them —`name,` `description, url, rdf_url, rss_url, rss2_url, atom_url,
    comments_rss2_url, pingback_url`,`admin_email, charset, version`.Default: No parameters
    will display anything. You must use a parameter. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `bloginfo()`示例：`bloginfo(''name'');` | 显示您的博客信息，由您的用户配置文件和管理面板中的一般选项提供。**更多信息：**[http://codex.wordpress.org/Template_Tags/bloginfo](http://codex.wordpress.org/Template_Tags/bloginfo)。
    | 您想在标签前后以及它们之间显示的任何文本字符，以及分隔它们的字符 — `name，description，url，rdf_url，rss_url，rss2_url，atom_url，comments_rss2_url，pingback_url，admin_email，charset，version`。默认：不带参数将不显示任何内容。您必须使用参数。
    |'
- en: '| `wp_title()`Sample:`wp_title(''——'',true,'''');` | Displays the title of
    a page or single post.**Note:** Use this tag anywhere outside The Loop.**More
    Info:**[http://codex.wordpress.org/Template_Tags/wp_title](http://codex.wordpress.org/Template_Tags/wp_title).
    | Any text characters you want to use to separate the title—("`--`").You can set
    up a Boolean to display the title—`("--", "false")`.As of version 2.5+: You can
    decide if the separator goes before or after the title —`("--", true, "right")`.Default:
    No parameters will display the page title with a separator if a separator is assigned
    its default to the left. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `wp_title()`示例：`wp_title(''——'',true,'''');` | 显示页面或单独文章的标题。**注意：**在循环外的任何地方使用此标签。**更多信息：**[http://codex.wordpress.org/Template_Tags/wp_title](http://codex.wordpress.org/Template_Tags/wp_title)。
    | 您想用来分隔标题的任何文本字符 — " `--` "。您可以设置一个布尔值来显示标题 — " `--`，`false` "。从版本 2.5+ 开始：您可以决定分隔符是在标题之前还是之后
    — " `--`，`true`，`right` "。默认：如果分隔符分配了默认值，则不带参数将在左边显示页面标题与分隔符。 |'
- en: '| `the_title()`Sample:`the_title(''<h2>'', ''</h2>'');` | Displays the title
    of the current post.**Note:** Use this tag in The Loop. (See [Chapter 3](ch03.html
    "Chapter 3. Digging Deeper: Understanding jQuery and WordPress Together"), *Digging
    Deeper: Understanding jQuery and WordPress Together* for how to set up The Loop.)**More
    Info:**[http://codex.wordpress.org/Template_Tags/the_title](http://codex.wordpress.org/Template_Tags/the_title).
    | Any text characters you want to appear before and after the title —`("<h2>",``"</h2>")`.You
    can also set a Boolean to turn the display to false —`("<h2>",``"</h2>", "false")`.Default:
    No parameters will display the title without a markup. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `the_title()`示例：`the_title(''<h2>'', ''</h2>'');` | 显示当前帖子的标题。**注意：**在循环中使用此标签（见[第3章](ch03.html
    "第3章。深入了解jQuery和WordPress")，“深入了解jQuery和WordPress”以了解如何设置循环）。**更多信息：**[http://codex.wordpress.org/Template_Tags/the_title](http://codex.wordpress.org/Template_Tags/the_title)。
    | 您希望出现在标题之前和之后的任何文本字符 ——`（"<h2>",``"</h2>"）`。您还可以设置一个布尔值将显示关闭为false ——`（"<h2>",``"</h2>",
    "false"）`。默认：如果没有参数，将显示没有标记的标题。 |'
- en: '| `the_content()`Sample:`the_content(''more_link_text'', strip_teaser, ''more_file'');`
    | Displays the content and markup you''ve edited into the current post.**Note:**
    Use this tag in The Loop. (See [Chapter 3](ch03.html "Chapter 3. Digging Deeper:
    Understanding jQuery and WordPress Together"), *Digging Deeper: Understanding
    jQuery and WordPress Together* for how to set up The Loop.)**More Info:**[http://codex.wordpress.org/Template_Tags/the_content](http://codex.wordpress.org/Template_Tags/the_content).
    | As you can add text to display the "more link", a Boolean to show or hide the
    "teaser text", there is a third parameter for more_file that currently doesn''t
    work—`("Continue reading" . the_title())`.You can also set a Boolean to turn the
    display to false —`("<h2>",``"</h2>", "false")`.Default: No parameters will display
    the content for the post with a generic "read more" link. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `the_content()`示例：`the_content(''more_link_text'', strip_teaser, ''more_file'');`
    | 显示您编辑到当前文章中的内容和标记。**注意：**在循环中使用此标签（见[第3章](ch03.html "第3章。深入了解jQuery和WordPress")，“深入了解jQuery和WordPress”以了解如何设置循环）。**更多信息：**[http://codex.wordpress.org/Template_Tags/the_content](http://codex.wordpress.org/Template_Tags/the_content)。
    | 你可以添加文本以显示“更多链接”，一个布尔值以显示或隐藏“预告文本”，还有一个第三个参数用于更多文件，目前不起作用——`（"继续阅读" . the_title（））`。你还可以设置一个布尔值将显示关闭为false
    ——`（"<h2>",``"</h2>", "false"）`。默认：如果没有参数，将显示具有通用“阅读更多”链接的内容。 |'
- en: '| `the_category()`Sample:`the_category('', '');` | Displays a link to the category
    or categories a post is assigned to.**Note:** Use this tag in The Loop. (See [Chapter
    3](ch03.html "Chapter 3. Digging Deeper: Understanding jQuery and WordPress Together"),
    *Digging Deeper: Understanding jQuery and WordPress Together* for how to set up
    The Loop)**More Info:**[http://codex.wordpress.org/Template_Tags/the_category](http://codex.wordpress.org/Template_Tags/the_category).
    | You can include text separators in case there''s more than one category —`(''&gt;'')`.Default:
    No parameters will display a comma separation if there is more than one category
    assigned. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `the_category()`示例：`the_category('', '');` | 显示帖子分配给的类别或类别的链接。**注意：**在循环中使用此标签（见[第3章](ch03.html
    "第3章。深入了解jQuery和WordPress")，“深入了解jQuery和WordPress”以了解如何设置循环）。**更多信息：**[http://codex.wordpress.org/Template_Tags/the_category](http://codex.wordpress.org/Template_Tags/the_category)。
    | 如果有多个类别，则可以包含文本分隔符 ——`(''&gt;'')`。默认：如果有多个类别分配，将显示逗号分隔。 |'
- en: '| `the_author_meta()`Sample:`the_author_meta();` | Displays the author of a
    post or a page.**Note:** Use this tag in The Loop. (See [Chapter 3](ch03.html
    "Chapter 3. Digging Deeper: Understanding jQuery and WordPress Together"), *Digging
    Deeper: Understanding jQuery and WordPress Together* for how to set up The Loop.)**More
    Info:**[http://codex.wordpress.org/Template_Tags/the_author_meta](http://codex.wordpress.org/Template_Tags/the_author_meta).
    | This tag accepts a large amount of parameters. They are covered in the previous
    sections you can also check out the codex. |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `the_author_meta()`示例：`the_author_meta();` | 显示帖子或页面的作者。**注意：**在循环中使用此标签（见[第3章](ch03.html
    "第3章。深入了解jQuery和WordPress")，“深入了解jQuery和WordPress”以了解如何设置循环）。**更多信息：**[http://codex.wordpress.org/Template_Tags/the_author_meta](http://codex.wordpress.org/Template_Tags/the_author_meta)。
    | 此标签接受大量参数。它们在前面的部分中涵盖了，您还可以查看codex。 |'
- en: '| `wp_list_pages()`Sample:`wp_list_pages(''title_li='');` | Displays a list
    of WordPress pages as links.**More Info:**[http://codex.wordpress.org/Template_Tags/wp_list_pages](http://codex.wordpress.org/Template_Tags/wp_list_pages).
    | `title_li` is the most useful as it wraps the page name and link in list tags
    `<li>`.The other parameters can be set by separating with an "`&`": `depth, show_date,
    date_format`,`child_of, exclude, echo, authors`,`sort_column`.Default: No parameters
    will display each title link in an `<li>` list and include an `<ul>` tag around
    the list (not recommended if you want to add your own custom items to the page
    navigation). |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `wp_list_pages()`示例：`wp_list_pages(''title_li='');` | 以链接形式显示 WordPress 页面列表。**更多信息：**[http://codex.wordpress.org/Template_Tags/wp_list_pages](http://codex.wordpress.org/Template_Tags/wp_list_pages)。
    | `title_li` 是最有用的，因为它将页面名称和链接包裹在列表标签`<li>`中。其他参数可以通过用“&”分隔来设置：`depth, show_date,
    date_format`,`child_of, exclude, echo, authors`,`sort_column`。默认：没有参数将在`<li>`列表中显示每个标题链接，并在列表周围包含一个`<ul>`标签（如果您想要向页面导航添加自定义项目，则不建议使用）。
    |'
- en: '| `wp_nav_menu()`;Sample:`wp_nav_menu( array(''menu'' => ''Main Nav'' ));`
    | Displays a list of menu items assigned to a WordPress 3.0+ menu, as links.**More
    Info:**[http://codex.wordpress.org/Function_Reference/wp_nav_menu](http://codex.wordpress.org/Function_Reference/wp_nav_menu).
    | This tag accepts a large amount of parameters, the most common parameter is
    the name of the menu set up in the menu tool in the Administration Panel.If no
    menu is available, the function will default to the `wp_list_pages()`; tag.Please
    see the codex for more parameters. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `wp_nav_menu()`；示例：`wp_nav_menu( array(''menu'' => ''主导航'' ));` | 以链接形式显示分配给
    WordPress 3.0+ 菜单的菜单项列表。**更多信息：**[http://codex.wordpress.org/Function_Reference/wp_nav_menu](http://codex.wordpress.org/Function_Reference/wp_nav_menu)。
    | 此标记接受大量参数，最常见的参数是在管理面板的菜单工具中设置的菜单的名称。如果没有可用的菜单，该函数将默认为`wp_list_pages();`标记。请参阅
    codex 以获取更多参数。'
- en: '| `next_post_link()`Sample:`next_post_link(''<strong> %title </strong>'');`
    | Displays a link to the next post which exists in chronological order from the
    current post.**Note:** Use this tag in The Loop. (See [Chapter 3](ch03.html "Chapter 3. Digging
    Deeper: Understanding jQuery and WordPress Together"), *Digging Deeper: Understanding
    jQuery and WordPress Together* for how to set up The Loop.)**More Info:**[http://codex.wordpress.org/Template_Tags/next_post_link](http://codex.wordpress.org/Template_Tags/next_post_link).
    | Any markup and text characters you want to appear—(`<strong>%title</strong>`).`%link`
    will display the permalink, `%title` the title of the next post.Default: No parameters
    will display the next post title as a link followed by angular quotes (`>>`).
    |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `next_post_link()`示例：`next_post_link(''<strong> %title </strong>'');` | 显示到当前文章的时间顺序中存在的下一篇文章的链接。**注意：**在循环中使用此标记。
    （参见[第 3 章](ch03.html "第 3 章. 深入挖掘：了解 jQuery 和 WordPress")，*深入挖掘：了解 jQuery 和 WordPress*，了解如何设置循环）。**更多信息：**[http://codex.wordpress.org/Template_Tags/next_post_link](http://codex.wordpress.org/Template_Tags/next_post_link)。
    | 想要出现任意标记和文本字符—(`<strong>%title</strong>`）。`%link` 将显示永久链接，`%title` 下一篇文章的标题。默认：没有参数将显示下一篇文章标题的链接，并在后面加上尖括号（`>>`）。'
- en: '| `previous_post_link()`Sample:`previous_post_link(''<strong> %title </strong>'');`
    | Displays a link to the previous post which exists in chronological order from
    the current post.**Note:** Use this tag in The Loop. (See [Chapter 3](ch03.html
    "Chapter 3. Digging Deeper: Understanding jQuery and WordPress Together"), *Digging
    Deeper: Understanding jQuery and WordPress Together* for how to set up The Loop.)**More
    Info:**[http://codex.wordpress.org/Template_Tags/previous_post_link](http://codex.wordpress.org/Template_Tags/previous_post_link).
    | Any markup and text characters you want to appear —`(<strong>%title</strong>)`.`%link`
    will display the permalink, `%title` the title of the next post.Default: No parameters
    will display the previous post title as a link preceded by angular quotes (`<<`).
    |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `previous_post_link()`示例：`previous_post_link(''<strong> %title </strong>'');`
    | 显示到当前文章的时间顺序中存在的上一篇文章的链接。**注意：**在循环中使用此标记。 （参见[第 3 章](ch03.html "第 3 章. 深入挖掘：了解
    jQuery 和 WordPress")，*深入挖掘：了解 jQuery 和 WordPress*，了解如何设置循环）。**更多信息：**[http://codex.wordpress.org/Template_Tags/previous_post_link](http://codex.wordpress.org/Template_Tags/previous_post_link)。
    | 想要出现任意标记和文本字符—`(<strong>%title</strong>)`。`%link` 将显示永久链接，`%title` 下一篇文章的标题。默认：没有参数将显示上一篇文章标题的链接，并在前面加上尖括号（`<<`）。'
- en: '| `comments_number()`Sample:`comments_number(''no responses'', ''one response'',
    ''% responses'');` | Displays the total number of comments, Trackbacks, and Pingbacks
    for a post.**Note:** Use this tag in The Loop. (See [Chapter 3](ch03.html "Chapter 3. Digging
    Deeper: Understanding jQuery and WordPress Together"), *Digging Deeper: Understanding
    jQuery and WordPress Together* for how to set up The Loop.)**More Info:**[http://codex.wordpress.org/Template_Tags/comments_number](http://codex.wordpress.org/Template_Tags/comments_number).
    | Lets you specify how to display if there are 0 comments, only 1 comment, or
    many comments—`(''no responses'',''one response'',''% responses'')`.You can also
    wrap items in additional markup—`("No Comments","<span class="bigNum">1</span>
    response","<span class="bigNum">%</span> Comments")`.Default: No parameters will
    display:No comments, or 1 comment, or ? comments. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `comments_number()`示例：`comments_number(''暂无回应'', ''1 条回应'', ''% 条回应'');`
    | 显示帖子的评论总数、引用和Pingback。**注意：**在循环中使用此标签。（见[第三章](ch03.html "第三章。深入了解jQuery和WordPress")，*深入了解jQuery和WordPress*关于如何设置循环。）**更多信息：**[http://codex.wordpress.org/Template_Tags/comments_number](http://codex.wordpress.org/Template_Tags/comments_number)。
    | 允许您指定如果没有评论，只有1条评论或有许多评论时如何显示—`(''暂无回应'',''1 条回应'',''% 条回应'')`。您还可以用额外的标记包装项目—`("暂无评论","<span
    class="bigNum">1</span> 条回应","<span class="bigNum">%</span> 条评论")`。默认：不带参数将显示：没有评论，或1条评论，或?条评论。'
- en: '| `comments_popup_link()`Sample:`comments_popup_link(''Add Your Thoughts'');`
    | If the comments_popup_script is not used, this displays a normal link to comments.**Note:**
    Use this tag in The Loop. (See [Chapter 3](ch03.html "Chapter 3. Digging Deeper:
    Understanding jQuery and WordPress Together"), *Digging Deeper: Understanding
    jQuery and WordPress Together* for how to set up The Loop.)**More Info:**[http://codex.wordpress.org/Template_Tags/comments_popup_link](http://codex.wordpress.org/Template_Tags/comments_popup_link).
    | Lets you specify how to display if there are 0 comments, only 1 comment, or
    many comments—`("No comments yet", "1 comment so far", "% comments so far (is
    that a lot?)", "comments-link", "Comments are off for this post")`.Default: No
    parameters will display the same default information as the `comments_number()`
    tag. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `comments_popup_link()`示例：`comments_popup_link(''发表你的想法'');` | 如果未使用`comments_popup_script`，则显示到评论的普通链接。**注意：**在循环中使用此标签。（见[第三章](ch03.html
    "第三章。深入了解jQuery和WordPress")，*深入了解jQuery和WordPress*关于如何设置循环。）**更多信息：**[http://codex.wordpress.org/Template_Tags/comments_popup_link](http://codex.wordpress.org/Template_Tags/comments_popup_link)。
    | 允许您指定如果没有评论，只有1条评论或有许多评论时如何显示—`("还没有评论", "到目前为止1条评论", "到目前为止%条评论（这算多吗？）", "评论链接",
    "此帖子的评论已关闭")`。默认：不带参数将显示与`comments_number()`标签相同的默认信息。'
- en: '| `edit_post_link()`Sample:`edit_post_link(''edit'', ''<p>'', ''</p>'');` |
    If the user is logged in and has permission to edit the post, this displays a
    link to edit the current post.**Note:** Use this tag in The Loop. (See [Chapter
    3](ch03.html "Chapter 3. Digging Deeper: Understanding jQuery and WordPress Together"),
    *Digging Deeper: Understanding jQuery and WordPress Together* for how to set up
    The Loop.)**More Info:**[http://codex.wordpress.org/Template_Tags/edit_post_link](http://codex.wordpress.org/Template_Tags/edit_post_link).
    | Any text that you want to be in the name of the link, plus markup that you''d
    like to come before and after it—`("edit me!", "<strong>", "</strong>")`.Default:
    No parameters will display a link that says "edit" with no additional markup.
    |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `edit_post_link()`示例：`edit_post_link(''编辑'', ''<p>'', ''</p>'');` | 如果用户已登录且有权限编辑帖子，则显示链接以编辑当前帖子。**注意：**在循环中使用此标签。（见[第三章](ch03.html
    "第三章。深入了解jQuery和WordPress")，*深入了解jQuery和WordPress*关于如何设置循环。）**更多信息：**[http://codex.wordpress.org/Template_Tags/edit_post_link](http://codex.wordpress.org/Template_Tags/edit_post_link)。
    | 任何您想要放在链接名称中的文本，以及您想要放在其之前和之后的标记—`("编辑我！", "<strong>", "</strong>")`。默认：不带参数将显示一个没有额外标记的链接，上面写着“编辑”。'
- en: '| `the_permalink()`Sample:`the_permalink();` | Displays the URL for the permalink
    to the current post.**Note:** Use this tag in The Loop. (See [Chapter 3](ch03.html
    "Chapter 3. Digging Deeper: Understanding jQuery and WordPress Together"), *Digging
    Deeper: Understanding jQuery and WordPress Together* for how to set up The Loop.)**More
    Info:**[http://codex.wordpress.org/Template_Tags/the_permalink](http://codex.wordpress.org/Template_Tags/the_permalink).
    | This tag has no parameters. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `the_permalink()`示例：`the_permalink();` | 显示当前文章的永久链接的URL。**注意：**在循环中使用此标记。（参见[第3章](ch03.html
    "第3章 深入了解 jQuery 和 WordPress 的使用方式") *深入了解 jQuery 和 WordPress 的使用方式* 如何设置循环。）**更多信息：**[http://codex.wordpress.org/Template_Tags/the_permalink](http://codex.wordpress.org/Template_Tags/the_permalink)。|
    这个标记没有参数。|'
- en: '| `the_ID()`Sample:`the_ID();` | Displays the numeric ID of the current post.**Note:**
    Use this tag in The Loop. (See [Chapter 3](ch03.html "Chapter 3. Digging Deeper:
    Understanding jQuery and WordPress Together"), *Digging Deeper: Understanding
    jQuery and WordPress Together* for how to set up The Loop.)**More Info:**[http://codex.wordpress.org/Template_Tags/the_ID](http://codex.wordpress.org/Template_Tags/the_ID).
    | This tag has no parameters. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `the_ID()`示例：`the_ID();` | 显示当前文章的数字ID。**注意：**在循环中使用此标记。（参见[第3章](ch03.html
    "第3章 深入了解 jQuery 和 WordPress 的使用方式") *深入了解 jQuery 和 WordPress 的使用方式* 如何设置循环。）**更多信息：**[http://codex.wordpress.org/Template_Tags/the_ID](http://codex.wordpress.org/Template_Tags/the_ID)。|
    这个标记没有参数。|'
- en: '| `wp_get_archives()`Sample:`wp_get_archives(''type=monthly'');` | Displays
    a date-based archives list.**More Info:**[http://codex.wordpress.org/Template_Tags/wp_get_archives](http://codex.wordpress.org/Template_Tags/wp_get_archives).
    | You can set parameters by separating them with an "`&`"—`(''type=monthly&limit=12'')`.The
    other parameters are `type, limit, format, before, after, show_post_count`.Default:
    No parameters will display a list of all your monthly archives in HTML format
    without before or after markup and `show_post_count` set to false. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `wp_get_archives()`示例：`wp_get_archives(''type=monthly'');` | 显示基于日期的存档列表。**更多信息：**[http://codex.wordpress.org/Template_Tags/wp_get_archives](http://codex.wordpress.org/Template_Tags/wp_get_archives)。|
    你可以通过用一个“`&`”来分隔它们来设置参数- （''type=monthly&limit=12''）。另外的参数有`type, limit, format,
    before, after, show_post_count`。默认：没有参数将以HTML格式显示所有的月度存档列表，不包含前后标记，并且`show_post_count`设置为false。|'
- en: '| `get_calendar()`Sample:`get_calendar(false);` | Displays the current month/year
    calendar.**More Info:**[http://codex.wordpress.org/Template_Tags/get_calendar](http://codex.wordpress.org/Template_Tags/get_calendar).
    | A Boolean value can be set which will display a single-letter initial `(S =
    Sunday)` if set to true. Otherwise, it will display the abbreviation based on
    your localization `(Sun = Sunday)—(true)`Default: No parameters will display the
    single-letter abbreviation. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `get_calendar()`示例：`get_calendar(false);` | 显示当前月份/年份的日历。**更多信息：**[http://codex.wordpress.org/Template_Tags/get_calendar](http://codex.wordpress.org/Template_Tags/get_calendar)。|
    可以设置一个布尔值，如果设置为true，将显示单个字母的缩写（`S = 星期日`）。否则，它将根据本地化显示缩写（`Sun = 星期日`）- （真）默认：没有参数将显示单个字母的缩写。|'
- en: Conditional tags
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 条件标签
- en: The conditional tags can be used in your template files to change what content
    is displayed and how that content is displayed on a particular page depending
    on what conditions that page matches. For example, you might want to display a
    snippet of text above the series of posts, but only on the main page of your blog.
    With the `is_home()` conditional tag, that task is made easy.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 条件标签可以用于你的模板文件中，根据页面匹配的条件来更改所显示的内容以及如何显示该内容。例如，你可能希望在你的博客主页面上方显示一小段文本，但只在你的博客的主页面上。使用`is_home()`条件标签，这个任务就变得很容易。
- en: 'There are conditional tags for just about everything, out of all of them, these
    are the seven I find I need most in my theme development:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有的操作都有条件标签，其中，这七个是我在主题开发中最需要的：
- en: '`is_admin()`'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_admin()`'
- en: '`is_page()`'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_page()`'
- en: '`is_single()`'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_single()`'
- en: '`is_sticky()`'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_sticky()`'
- en: '`is_home()`'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_home()`'
- en: '`is_category()`'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_category()`'
- en: '`in_category()`'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in_category()`'
- en: 'All of those functions can take the following parameters: either the `post
    ID` or `page ID` number, the post or page `title`, or the post or page slug.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些功能都可以使用以下参数：`文章ID`或`页面ID`数字，文章或页面`标题`，或文章或页面`slug`。
- en: The first conditional tag, `is_admin()`, you'll notice we used throughout this
    title, along with `is_home()` to load up our `wp_enqueue_scripts` so that we can
    avoid having the script load if we're looking at some aspect of the theme from
    the admin panel (reviewing theme's for instance). The scripts could conflict with
    scripts in the admin panel so it's best to make sure they only load when not loading
    the theme from the admin panel.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个条件标签，`is_admin()`，你会注意到我们在这个标题中多次使用，以及 `is_home()` 一起加载我们的 `wp_enqueue_scripts`，以便我们可以避免在从管理面板查看主题时加载脚本（例如审核主题）。脚本可能会与管理面板中的脚本冲突，因此最好确保它们只在不从管理面板加载主题时加载。
- en: Also, if you have any jQuery scripts that only affects the home page, say, a
    "sticky post rotator" script or something similar, you might want to consider
    placing that `wp_enqueue_script` call inside an `if(is_home()){wp_enqueue_script(//)}`
    call. This way, the script will only load up on the page you need it, and not
    on every page of the site, even when it's not being used.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果您有任何仅影响主页的 jQuery 脚本，比如说，“置顶帖子轮播器”脚本或类似的脚本，您可能希望考虑将`wp_enqueue_script`调用放在一个
    `if(is_home()){wp_enqueue_script(//)}` 调用内。这样，脚本将仅在您需要它的页面上加载，而不是在站点的每个页面上，即使它没有被使用时也是如此。
- en: As for the rest of the conditional tags, as great as theme's are, I'm sure you've
    run into the conundrum that you or your client doesn't want the exact same sidebar
    on every single page or post.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 至于其余的条件标签，尽管主题很棒，但我相信你一定遇到过这样的困境，你或者你的客户不希望每个页面或帖子上都有完全相同的侧边栏。
- en: 'I use these conditional tags so that specific pages can have particular styles
    or divs of content turned on and off, and display or not display specific content.
    These seven tags really help give my client''s custom themed sites a true, custom
    website feel and not that standard: "nice design, but every page has the exact
    same sidebar, this is probably another WordPress site" feel.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用这些条件标签，以便特定页面可以打开或关闭特定样式或内容 div，并显示或不显示特定内容。这七个标签确实有助于使我的客户的定制主题网站具有真正的、定制的网站感觉，而不是标准的：“设计不错，但每个页面都有完全相同的侧边栏，这可能是另一个
    WordPress 站点”的感觉。
- en: 'The conditional tag fun doesn''t end there. There are many more that you may
    find invaluable in aiding your theme''s customization, listed here: [http://codex.wordpress.org/Conditional_Tags](http://codex.wordpress.org/Conditional_Tags).'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 条件标签的乐趣并不止于此。在这里列出了许多您可能发现在辅助主题定制方面非常有用的标签：[http://codex.wordpress.org/Conditional_Tags](http://codex.wordpress.org/Conditional_Tags)。
- en: Quick overview of loop functions
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环函数的快速概述
- en: All those template and conditional tags are one thing, it's another to apply
    them within the loop. In quite a few chapters of this book, we had to amend the
    loop in a theme's template file or create a custom one. The following table contains
    a description for each part of The Loop.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些模板和条件标签是一回事，将它们应用在循环中是另一回事。在本书的许多章节中，我们不得不在主题的模板文件中修改循环或创建一个自定义循环。以下表格包含了对循环的每个部分的描述。
- en: '| Loop functions | Description |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 循环函数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `<?php if(have_posts()) : ?>` | This function checks to make sure that there
    are posts to display. If so, the code continues onto the next function below.
    |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `<?php if(have_posts()) : ?>` | 此函数检查是否有帖子可以显示。如果有，代码将继续到下面的下一个函数。 |'
- en: '| `<?php while(have_posts()) : the_post(); ?>` | This function shows the posts
    that are available and continues onto the next function below. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `<?php while(have_posts()) : the_post(); ?>` | 此函数显示可用的帖子，并继续到下面的下一个函数。 |'
- en: '| `<?php endwhile; ?>` | This function closes the `while(have_posts...` loop
    that was opened above once the available posts have been displayed. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `<?php endwhile; ?>` | 此函数关闭了上面打开的`while(have_posts...`循环，一旦显示了可用帖子，就会关闭。
    |'
- en: '| `<?php endif; ?>` | This function ends the `if(have_posts...` statement that
    was opened above once the `while(have_posts..`. loop has completed. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `<?php endif; ?>` | 此函数在上面打开的`if(have_posts...`语句一旦`while(have_posts..`循环完成时结束。
    |'
- en: Setting up WordPress shortcodes
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 WordPress 短代码
- en: This whole appendix has been about useful references. We should take a quick
    look at shortcodes. They were first introduced in version 2.5\. If you're comfortable
    with writing functions in WordPress, shortcodes can help you take longer bits
    of code (such as custom loops and complex template tag strings) or even just markup
    and text that you feel you'd use a lot in your theme (or plugin) and allow you
    to compress them in to cleaner, simpler bit of reusable code. You can add shortcodes
    to your theme's `functions.php` file.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 整个附录都是关于有用的参考资料。我们应该快速浏览一下短代码。它们首次在版本2.5中引入。如果你熟悉在WordPress中编写函数，短代码可以帮助你将较长的代码片段（如自定义循环和复杂的模板标签字符串）或甚至只是你在主题（或插件）中感觉会经常使用的标记和文本压缩成更干净、更简单的可重复使用的代码片段。你可以将短代码添加到你主题的`functions.php`文件中。
- en: 'You''re probably familiar with shortcodes and may not realize it. If you''ve
    ever taken a look at how WordPress''s media manager inserts captions into images,
    you''ve probably noticed something like:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经熟悉了短代码，但可能没有意识到。如果你曾经研究过WordPress的媒体管理器如何在图像中插入标题，你可能会注意到类似于：
- en: '[PRE7]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That's a built in shortcode for captions and alignment in WordPress.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 那是WordPress中用于标题和对齐的内置短代码。
- en: To create a shortcode, you do need to create a PHP function in your theme's
    `functions.php` file. If your theme does not have a `functions.php` file, simply
    create a new file and name it `functions.php` and place it in the root of your
    theme's directory.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个短代码，你确实需要在你主题的`functions.php`文件中创建一个PHP函数。如果你的主题没有`functions.php`文件，只需创建一个新文件并命名为`functions.php`，然后将其放置在你主题目录的根目录下。
- en: Creating a basic shortcode
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个基本的短代码
- en: 'We''ll start off by opening up our `functions.php` file and at the end of it,
    create a simple function that returns a string of text and markup for our shortcode
    like so:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先打开我们的`functions.php`文件，在文件末尾创建一个简单的函数，返回文本和标记的字符串，就像这样：
- en: '[PRE8]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, to really take advantage of shortcodes, you do need to know some PHP which,
    to fully cover, is a bit beyond the scope of this title. But even without much
    PHP experience, if you follow this example, you'll start to see how flexible this
    WordPress feature is in saving you time, not just in your theme, but in your day-to-day
    use of WordPress.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要真正利用短代码，你确实需要了解一些PHP，而要完全覆盖，这有点超出了本标题的范围。但即使没有太多的PHP经验，如果你跟随这个示例，你会开始看到这个WordPress功能在节省时间方面有多灵活，不仅在你的主题中，还在你日常使用WordPress中。
- en: In the previous sample, inside our function brackets `{}`, I set up a very basic
    variable **`$donateText`** and assigned it a string of text and markup.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，在我们的函数括号`{}`内部，我设置了一个非常基本的变量**`$donateText`**，并为其分配了一串文本和标记。
- en: The `return` statement is a very basic PHP function that will make sure our
    `quickadd` function passes back whatever has been assigned to that variable.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`return`语句是一个非常基本的PHP函数，它将确保我们的`quickadd`函数返回分配给该变量的任何内容。'
- en: 'We''re now ready to use WordPress'' `add_shortcode()` function by adding it
    just *underneath* our `quickadd` function that we previously set up. The `add_shortcode`
    function has two parameters. For the first parameter, you''ll enter in a reference
    name for your shortcode and in the second, you''ll enter in the name of the function
    that you''d like your shortcode to call, like so:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好使用WordPress的`add_shortcode()`函数了，只需将其添加到我们之前设置的`quickadd`函数*下方*即可。`add_shortcode`函数有两个参数。对于第一个参数，你将输入你的短代码的引用名称，在第二个参数中，你将输入你希望你的短代码调用的函数名称，就像这样：
- en: '[PRE9]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now the fun part: Pick any template page in your theme and use the `broughtby`
    shortcode by simply adding in:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是有趣的部分：在你的主题中选择任何模板页面，并通过简单添加`broughtby`短代码来使用它：
- en: '[PRE10]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Wherever you paste that `[broughtby]` shortcode in your theme's template files,
    the **This page is brought to you by the letter Z** text, with a link to the letter's
    page, will appear!
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你在主题的模板文件中粘贴`[broughtby]`短代码在哪里，都会出现**本页面由字母 Z 提供**的文字，带有指向该字母页面的链接！
- en: '**Bonus:** You are not restricted to using this shortcode in just your template
    files! Paste it directly into a post or page through the Administration panel,
    you''ll get the same result. And, you guessed it, the output from shortcodes are
    easily leveraged and enhanced by jQuery!'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励:** 你不仅限于在你的模板文件中使用这个短代码！直接通过管理面板将其粘贴到文章或页面中，你会得到相同的结果。而且，你猜对了，短代码的输出可以很容易地利用和增强jQuery！'
- en: If you have an enhancement that might take a bit more HTML markup than the WYSIWYG
    editor in WordPress can handle, and the site's content editor is overwhelmed by
    switching over to the HTML view, creating a solution with a shortcode may be just
    what you need! For example, it would be much easier for your client to add a set
    of square brackets with some parameters than mark up a definition list, which
    the basic WYSIWYG editor doesn't allow for.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的增强功能需要比 WordPress 的所见即所得编辑器处理的 HTML 标记更多，而网站内容编辑器在切换到 HTML 视图时不知所措，那么使用短代码创建解决方案可能正是您所需要的！例如，对于您的客户来说，添加一组带有一些参数的方括号要比标记定义列表更容易，而基本的所见即所得编辑器不允许这样做。
- en: 'This would turn:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这将转变为：
- en: '[PRE11]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Into a simpler:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 转变为更简单的：
- en: '[PRE12]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In addition to helping out WordPress content editors with markup, shortcodes
    are a wonderful way to shortcut your time if you're a busy WordPress content author.
    Even if you're not creating your own theme from scratch, you can easily add your
    own shortcodes to any theme's `functions.php` file and ramp up your productivity.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 除了帮助 WordPress 内容编辑人员处理标记外，如果您是一个忙碌的 WordPress 内容作者，短代码也是节省时间的好方法。即使您不是从头开始创建自己的主题，也可以轻松地将自己的短代码添加到任何主题的
    `functions.php` 文件中，从而提高您的生产力。
- en: 'Those of you more comfortable with PHP can take a look at WordPress'' Shortcode
    API and see how to extend and make your shortcodes even more powerful by adding
    parameters to them: [http://codex.wordpress.org/Shortcode_API](http://codex.wordpress.org/Shortcode_API).'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更熟悉 PHP，可以查看 WordPress 的短代码 API，了解如何通过为其添加参数来扩展和增强您的短代码功能：[http://codex.wordpress.org/Shortcode_API](http://codex.wordpress.org/Shortcode_API)。
- en: Summary
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Hopefully after taking a run through this appendix, you've dog-eared it and
    trust that you'll be back anytime you have a quick question about usage or syntax
    with the top jQuery and WordPress issues most WordPress developers have regarding
    jQuery. We also took a quick turn through the "underbelly" of WordPress' core
    functions and shortcodes which hopefully open you up to the endless possibilities
    of creating useful enhancements for WordPress sites. I hope you've enjoyed this
    book and found it useful in aiding your WordPress sites with jQuery creations
    and enhancements.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您在阅读本附录后能够标记它，并相信您将随时在使用或语法方面遇到与 jQuery 和 WordPress 相关的主要问题时再次查阅。我们还快速浏览了
    WordPress 核心功能和短代码的“内幕”，希望这能让您了解为 WordPress 网站创建有用增强功能的无限可能性。希望您喜欢本书，并发现它在帮助您通过
    jQuery 创作和增强 WordPress 网站方面非常有用。
