["```js\nconst Component = () => {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      {count}\n      <button onClick={() => setCount((c) => c + 1)}>+1\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst useCount = () => {\n  const [count, setCount] = useState(0);\n  return [count, setCount];\n};\nconst Component = () => {\n  const [count, setCount] = useCount();\n  return (\n    <div>\n      {count}\n      <button onClick={() => setCount((c) => c + 1)}>\n        +1\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst useCount = () => {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    console.log('count is changed to', count);\n  }, [count]);\n  return [count, setCount];\n};\n```", "```js\nconst useCount = () => {\n  const [count, setCount] = useState(0);\n  const inc = () => setCount((c) => c + 1);\n  return [count, inc];\n};\n```", "```js\nconst Component = () => {\n  const [state, setState] = useState();\n  return (\n    <div>\n      {JSON.stringify(state)}\n      <Child state={state} setState={setState} />\n    </div>\n  );\n};\nconst Child = ({ state, setState }) => {\n  const setFoo = () => setState(\n    (prev) => ({ ...prev, foo: 'foo' })\n  );\n  return (\n    <div>\n      {JSON.stringify(state)}\n      <button onClick={setFoo}>Set Foo</button>\n    </div>\n  );\n};\n```", "```js\nconst Component1 = () => {\n  const [state, setState] = useGlobalState();\n  return (\n    <div>\n      {JSON.stringify(state)}\n    </div>\n  );\n};\nconst Component2 = () => {\n  const [state, setState] = useGlobalState();\n  return (\n    <div>\n      {JSON.stringify(state)}\n    </div>\n  );\n};\n```", "```js\nconst Component = () => {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      {count}\n      <button onClick={() => setCount(1)}>\n        Set Count to 1\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst Component = () => {\n  const [state, setState] = useState({ count: 0 });\n  return (\n    <div>\n      {state.count}\n      <button onClick={() => setState({ count: 1 })}>\n        Set Count to 1\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst Component = () => {\n  const [state, setState] = useState({ count: 0 });\n  return (\n    <div>\n      {state.count}\n      <button\n        onClick={() => { state.count = 1; setState(state); }\n      >\n        Set Count to 1\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst Component = () => {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      {count}\n      <button onClick={() => setCount(count + 1)}>\n        Set Count to {count + 1}\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst Component = () => {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      {count}\n      <button onClick={() => setCount((c) => c + 1)}>\n        Increment Count\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst Component = () => {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    const id = setInterval(\n      () => setCount((c) => c + 1),\n      1000,\n    );\n    return () => clearInterval(id);\n  }, []);\n  return (\n    <div>\n      {count}\n      <button\n        onClick={() =>\n          setCount((c) => c % 2 === 0 ? c : c + 1)}\n      >\n        Increment Count if it makes the result even\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst init = () => 0;\nconst Component = () => {\n  const [count, setCount] = useState(init);\n  return (\n    <div>\n      {count}\n      <button onClick={() => setCount((c) => c + 1)}>\n        Increment Count\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { ...state, count: state.count + 1 };\n    case 'SET_TEXT':\n      return { ...state, text: action.text };\n    default:\n      throw new Error('unknown action type');\n  }\n};\nconst Component = () => {\n  const [state, dispatch] = useReducer(\n    reducer,\n    { count: 0, text: 'hi' },\n  );\n  return (\n    <div>\n      {state.count}\n      <button\n        onClick={() => dispatch({ type: 'INCREMENT' })}\n      >\n        Increment count\n      </button>\n      <input\n        value={state.text}\n        onChange={(e) =>\n          dispatch({ type: 'SET_TEXT', text: e.target.value })}\n      />\n    </div>\n  );\n};\n```", "```js\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { ...state, count: state.count + 1 };\n    case 'SET_TEXT':\n      if (!action.text) {\n        // bail out\n        return state\n      }\n      return { ...state, text: action.text };\n    default:\n      throw new Error('unknown action type');\n  }\n};\n```", "```js\nconst reducer = (count, delta) => {\n  if (delta < 0) {\n    throw new Error('delta cannot be negative');\n  }\n  if (delta > 10) {\n    // too big, just ignore\n    return count\n  }\n  if (count < 100) {\n    // add bonus\n    return count + delta + 10\n  }\n  return count + delta\n}\n```", "```js\nconst init = (count) => ({ count, text: 'hi' });\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { ...state, count: state.count + 1 };\n    case 'SET_TEXT':\n      return { ...state, text: action.text };\n    default:\n      throw new Error('unknown action type');\n  }\n};\nconst Component = () => {\n  const [state, dispatch] = useReducer(reducer, 0, init);\n  return (\n    <div>\n      {state.count}\n      <button\n        onClick={() => dispatch({ type: 'INCREMENT' })}\n      >\n        Increment count\n      </button>\n      <input\n        value={state.text}\n        onChange={(e) => dispatch({ \n          type: 'SET_TEXT', \n          text: e.target.value,\n        })}\n      />\n    </div>\n  );\n};\n```", "```js\nconst useState = (initialState) => {\n  const [state, dispatch] = useReducer(\n    (prev, action) =>\n      typeof action === 'function' ? action(prev) : action,\n    initialState\n  );\n  return [state, dispatch];\n};\n```", "```js\nconst reducer = (prev, action) =>\n  typeof action === 'function' ? action(prev): prev;\nconst useState = (initialState) =>\n  useReducer(reducer, initialState);\n```", "```js\nconst useReducer = (reducer, initialState) => {\n  const [state, setState] = useState(initialState);\n  const dispatch = (action) =>\n    setState(prev => reducer(prev, action));\n  return [state, dispatch];\n};\n```", "```js\nconst useReducer = (reducer, initialArg, init) => {\n  const [state, setState] = useState(\n    init ? () => init(initialArg) : initialArg,\n  );\n  const dispatch = useCallback(\n    (action) => setState(prev => reducer(prev, action)),\n    [reducer]\n  );\n  return [state, dispatch];\n};\n```", "```js\nconst init = (count) => ({ count });\nconst reducer = (prev, delta) => prev + delta;\nconst ComponentWithUseReducer = ({ initialCount }) => {\n  const [state, dispatch] = useReducer(\n    reducer,\n    initialCount,\n    init\n  );\n  return (\n    <div>\n      {state}\n      <button onClick={() => dispatch(1)}>+1</button>\n    </div>\n  );\n};\nconst ComponentWithUseState = ({ initialCount }) => {\n  const [state, setState] = useState(() => \n    init(initialCount));\n  const dispatch = (delta) =>\n    setState((prev) => reducer(prev, delta));\n  return [state, dispatch];\n};\n```", "```js\nconst useScore = (bonus) =>\n  useReducer((prev, delta) => prev + delta + bonus, 0);\n```"]