- en: Getting Your App Ready for Production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve put together a pretty nice starter application in Create React App over
    the span of this book. While it probably won''t win any awards, you now have the
    foundation that you need to be able to build on top of this and turn it into the
    next world-leading pomodoro tracker, or maybe something like a new task manager
    application for developers! Throughout all of this, we''ve covered the build process
    and the bootstrap process, but have yet to focus on the final portion of building
    any application: shipping it to production!'
  prefs: []
  type: TYPE_NORMAL
- en: We've spent a lot of time talking about the different important features in
    Create React App, and have built an application on top of it. We've added a lot
    to our application; we took something from zero to an app that is functional,
    uses the latest and greatest modern JavaScript programming techniques, and uses
    the sort of techniques that you'll see when working with Create React App in any
    sort of professional environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll need to expand on that and cover the remaining Create React App CLI
    commands that we can run: `build` and `eject`. We have added a few extra libraries
    here and there, primarily as utility libraries, but we should also spend a little
    bit of time working with a few additional libraries, in order to get a feel for
    how that impacts the workflow. So, we''ll discuss a few common libraries, including
    their usage, impact, and where to go to learn more about them.'
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will have learned about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding other libraries to our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Create React App `eject`, and its impact on your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Create React App `build` to create a production build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding other libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned previously, we'll be adding a few more libraries. If you're
    not interested in swapping either of these libraries, you can safely skip this
    section, but there are a few items to cover that may be representative of scenarios
    that you'll run into while working on JavaScript in a team environment. For example,
    Redux was, at one point, considered important (if not essential) for building
    a React project of any significant complexity. Recently, that mentality has ebbed
    a bit, and generally speaking, people will only opt for using libraries like Redux
    when it is more necessary and state management is a harder part of their applications.
    Regardless, we should have experience in adding it to our applications, so that
    we will be ready to contribute, should we ever be working on a project that is
    using it as well. There are a lot of other common libraries that people use in
    conjunction with React, and we'll cover them very quickly here, before moving
    on to a quick example of using Redux in a Create React App project!
  prefs: []
  type: TYPE_NORMAL
- en: Other popular React libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are other libraries that come up frequently when working with React. These
    may be libraries that help you to use your browser's address bar to figure out
    what component to render as its main application, or they may be libraries that
    give any form elements that you use in React a little more native functionality
    and remove more boilerplate code.
  prefs: []
  type: TYPE_NORMAL
- en: React Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'React Router is a library aimed at helping you route requests to particular
    components. The idea is that when someone visits your project, they may want to
    interact with a specific component. This helps you to manage those requests and
    figure out the right way to get the user directly to that component. The good
    news is that installing React Router and using it inside of a Create React App
    project is actually pretty simple! To install it, all you need to run is the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Then, you can modify your `src/App/App.js` file to start adding new routes to
    components! React Router is similar to Redux, in that it is an incredibly complex
    project by itself; so, if you want to learn more, you can visit [https://reacttraining.com/react-router/.](https://reacttraining.com/react-router/)
  prefs: []
  type: TYPE_NORMAL
- en: React Final Form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Odds are, if you''re working with any form of interactive web application,
    you''ll need to be able to handle web forms in a consistent and performant way.
    The great news is that, because this is such a common problem, there are a number
    of popular libraries out there to handle dealing with forms in React efficiently.
    The most popular of these is React Final Form, which you can add to your project
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: From there, you can use any of React Final Form's functionality to replace the
    forms in your application! For more information on how to properly take advantage
    of this library, you can visit [https://github.com/final-form/react-final-form](https://github.com/final-form/react-final-form).
  prefs: []
  type: TYPE_NORMAL
- en: Adding Redux for state management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Redux is a common library for managing the state of your application, especially
    when it is a little more complicated, and you want to control the flow of events
    in your frontend project! Redux provides a way for you to tightly control how
    the entire state of your application is affected by different types of events,
    such as button clicks or form changes. If your application gets incredibly large
    and complex, and managing too many different streams of events affecting your
    application becomes too hard, it is a great time to introduce something like Redux
    to your project!
  prefs: []
  type: TYPE_NORMAL
- en: 'The good news is that, similar to the previous libraries, you can also add
    Redux to your Create React App project without a lot of extra fuss! You''ll want
    both `redux` and `react-redux`, to make sure that you have all of the bindings
    that you''d normally need to connect everything together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This should install everything that you need to get started with Redux. Similar
    to the other libraries that we've mentioned, Redux is an incredibly complex topic
    that could easily fill up an entire book by itself. If you'd like to learn more
    about Redux, visit [https://redux.js.org/](https://redux.js.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a production build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, we're ready to get this all bundled up and ready for a production deployment!
    Our code is done, our code works, and everything is great; so, what do we do now?
  prefs: []
  type: TYPE_NORMAL
- en: It's simple; we just run `yarn build` and call it a day! Well, that's most of
    the process. You see, when you run `yarn build`, Create React App tries to figure
    out the best, most efficient way to bundle up everything that you've been working
    on in your Create React App project and minify/productionize everything that you've
    written—every image and asset that you've added, every library that needs to be
    included—everything.
  prefs: []
  type: TYPE_NORMAL
- en: How to create a production build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a production build, we just need to run `yarn build`. It''s that
    simple! See the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You should now have a production-ready build of files in the `build/` directory
    of your application! This is a heavily-optimized build, ready to be copied and
    deployed, wherever you can deploy your application!
  prefs: []
  type: TYPE_NORMAL
- en: What's important to note is that the output of this process are static files
    (fully compiled HTML/JS/CSS) that can be deployed and run from any place that
    can serve static files back to a user—so, essentially, any kind of **content delivery
    network** (**CDN**) or web server that you may already have.
  prefs: []
  type: TYPE_NORMAL
- en: This process relies heavily on Webpack's build process and multiple different
    build and optimization plugins that optimize nearly every part of the build process.
    Files are minified, chunked by their usage and scope (to reduce importing files
    that we don't need), and set up in a way that allows for browser caching, to reduce
    as much effort as possible each time a person revisits your site!
  prefs: []
  type: TYPE_NORMAL
- en: '**Minified** means that the files are reduced down in file size as much as
    possible, by renaming code, minimizing whitespace, or otherwise cutting down on
    extraneous code, so that the amount of JavaScript that needs to be deployed is
    as small as possible.'
  prefs: []
  type: TYPE_NORMAL
- en: Thoughts on the deployment process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The actual deployment process is a little bit more tricky. There are a million
    and one ways to deploy this, but as we have built our application off of a proxy
    backend server, one of the methods is for us to integrate our project into an
    existing backend server with something to serve our frontend code from, such as
    a Rails/node/Phoenix server. This allows us to run this code as our frontend and
    have a backend server behind the scenes, powering this application. Without that,
    our app won't work; as you may recall, this is an application powered by a `Todo`
    backend.
  prefs: []
  type: TYPE_NORMAL
- en: Ejecting our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the other options available to us is the ability to `eject` our project
    in Create React App. **Ejecting** an app means that it removes all of the scaffolds
    and confines of the Create React App CLI, with all of the bonuses and caveats
    that you might expect from such an operation. For one, we gain greater ability
    and control over our project, and can tweak things as we see fit, which is great;
    but it also puts you into a world where you need to understand your Babel configs,
    your Webpack configs, and every other behind the scenes configuration option that
    you were previously able to ignore.
  prefs: []
  type: TYPE_NORMAL
- en: Eject is very much a double-edged sword; it's a powerful tool, and it allows
    you to move beyond the rules that Create React App introduces into your world.
    However, you'll now be responsible for any headaches that come as a result of
    configuration modifications in the future.
  prefs: []
  type: TYPE_NORMAL
- en: That being said, `eject` is also an important command in the Create React App
    world. I've seen many projects that started off with a Create React App built
    project, but changed when the app became sufficiently complex. At that point,
    ejecting is a good idea, in order to be able to appropriately tweak things as
    you need to. Again, a big focus of this book is to understand how to become an
    expert on Create React App and its latest version; so, understanding and using
    all of the commands is a major part of that.
  prefs: []
  type: TYPE_NORMAL
- en: How to eject
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by talking about how to perform an `eject` with Create React App.
    The process itself is actually simple enough: you just run `npm run eject` or
    `yarn eject`, and the process begins. This is also not quite enough information
    to be able to make an informed decision about when and where to `eject` with Create
    React App, so we''ll actually explore the results of running the command. We''ll
    start off by moving this into a new branch in our source control of choice (or,
    if you''re not using one, copy the directory somewhere, so that you can play with
    this without fear of losing your project).'
  prefs: []
  type: TYPE_NORMAL
- en: This is a permanent operation. If you don't want to be stuck with these changes,
    ensure that you have copied your folder, or branched it in such a way that you
    don't get locked into an `eject` during this section!
  prefs: []
  type: TYPE_NORMAL
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Wow! A lot happens when you `eject`! It creates roughly 13 new scripts, most
    of which are either helper/utility JavaScript files or configuration files for
    things like Webpack, Babel, or Jest. A lot of this is the process of allowing
    you to continue to use your project as if it were already a major Create React
    App project, despite the fact that you just ejected. For example, most of our
    commands should work identically. If I run `yarn test`, for example, I should
    still get a full `Test Suite` running and passing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, if I run `yarn start`, I should be able to expect to use my React
    project in the same way that I always have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Our browser should still spin up and open itself to `http://localhost:3000/`.
    We can also continue to run our own backend simulation server, with requests getting
    proxied appropriately! As you can see, the Create React App team did everything
    they could to make `eject` as painless and seamless a process as it possibly could
    be. We can even still build for production with `yarn build`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also see the configuration files that are created for us, based on how
    Create React App structures its projects. We can see the Webpack configs, for
    example, in these files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you wanted to tweak your `config` in some custom way, this is where you'd
    do it, and you can base your configs off of the incredibly elaborate files that
    they've populated here.
  prefs: []
  type: TYPE_NORMAL
- en: You can also see how they've set up Jest to work so seamlessly, by looking at
    the scripts folder for `scripts/test.js`, as well as the Jest-specific configuration
    files located in `config/`.
  prefs: []
  type: TYPE_NORMAL
- en: Drawbacks of using eject
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember that this does not all come for free, and there's no reason not to
    just immediately `eject` a project. First off, you will not get any potential
    time-saving changes or productivity enhancers when the Create React App team updates
    the scripts for Create React App. You'll be in your own world if something breaks,
    if something doesn't work right, or otherwise, and you won't really have anywhere
    to reach out to for support.
  prefs: []
  type: TYPE_NORMAL
- en: The `eject` command is like buying something as-is. It might not have any strings
    attached to it anymore, but it also doesn't have any support, either. Buyer beware!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That's it! At this point, you should have a solid grasp of Create React App
    2's changes and benefits. We've explored functionality, both old and new, to make
    sure that we're building the most up-to-date, modern JavaScript implementations
    that we possibly can! We're using libraries and techniques that we would already
    be using in most frontend projects that we might build.
  prefs: []
  type: TYPE_NORMAL
- en: We've also taken a deep dive into how to set up a healthy software development
    life cycle using Create React App, getting us to a point where our application
    runs smoothly and is resilient when changes do occur. Our application is well
    and thoroughly tested, and is not prone to random breaking. This is all something
    that we've done with absolutely zero configuration; in my mind, this is one of
    the biggest strengths of working with a frontend development project in Create
    React App!
  prefs: []
  type: TYPE_NORMAL
- en: We've also integrated a number of other non-specific Create React App solutions
    into our code, whether it is better CSS support through CSS modules or SASS, or
    additional libraries and clever abstractions via service libraries. We've striven
    to code our projects in a smart way that allows for easy reuse and expandability,
    without making our projects obtuse or difficult for other developers to contribute
    to. We've also proxied a backend API, so that we can work with backend developers
    and show them the interface and data language that the frontend uses, reducing
    the friction and back-and-forth between multiple development teams and ideologies!
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you've seen what our options become when we outgrow the safe confines
    of Create React App and eject our application into a standard Webpack configuration!
    Our application lives on, and we can configure new and exciting additions to our
    project without hobbling ourselves or our development team!
  prefs: []
  type: TYPE_NORMAL
- en: I hope you've learned a lot about how to really get started with Create React
    App (and, by proxy, React itself). Thank you so much for coming with me on this
    journey, and I can't wait to see what you build out there!
  prefs: []
  type: TYPE_NORMAL
