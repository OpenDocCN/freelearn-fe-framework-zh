- en: Appendix B
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 B
- en: Angular Cheat Sheet
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular 快速参考
- en: Here is a quick reference cheat sheet for you to familiarize yourself with common
    Angular syntax and CLI commands. Take some time to review and orient yourself
    with new Angular syntax, major components, CLI scaffolds, and common pipes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一份快速参考表，帮助你熟悉常见的 Angular 语法和 CLI 命令。花点时间复习并熟悉新的 Angular 语法、主要组件、CLI 框架和常见管道。
- en: You may find the list especially useful if your background is with AngularJS,
    since you will need to unlearn some old syntax.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前使用过 AngularJS，你会发现这个列表特别有用，因为你需要学习一些旧的语法。
- en: If you are new to Angular or simply not a fan of CLI commands, check out Nx
    Console at [https://nx.dev/angular/cli/console](https://nx.dev/angular/cli/console),
    an awesome desktop app, and a Visual Studio Code extension, that can write your
    CLI arguments for you. That said, I do recommend that you first gain familiarity
    with the CLI commands and force yourself to use them for a bit, so you have a
    better understanding of how Nx Console works.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刚开始使用 Angular 或者不是 CLI 命令的粉丝，可以查看 Nx Console 在 [https://nx.dev/angular/cli/console](https://nx.dev/angular/cli/console)，这是一个出色的桌面应用程序，也是
    Visual Studio Code 的扩展，它可以为你编写 CLI 参数。话虽如此，我仍然建议你首先熟悉 CLI 命令，并强迫自己使用它们一段时间，这样你就能更好地理解
    Nx Console 的工作原理。
- en: 'Binding, or data binding, refers to an automatic one or two-way connection
    between a variable in code and a value displayed or inputted in an HTML template
    or another component:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定，或数据绑定，指的是代码中的变量与在 HTML 模板或其他组件中显示或输入的值之间自动的单一或双向连接：
- en: '| **Type** | **Syntax** | **Data direction** |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | **语法** | **数据方向** |'
- en: '| Interpolation Property Attribute ClassStyle | `{{expression}} [target]="expression"
    bind-target="expression"` | One-way,from data source to view target |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| 插值属性属性类样式 | `{{expression}} [target]="expression" bind-target="expression"`
    | 单向，从数据源到视图目标 |'
- en: '| Event | `(target)="statement" on-target="statement"` | One-way,from view
    target to data source |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 事件 | `(target)="statement" on-target="statement"` | 单向，从视图目标到数据源 |'
- en: '| Two-way | `[(target)]="expression" bindon-target="expression"` | Two-way
    |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 双向 | `[(target)]="expression" bindon-target="expression"` | 双向 |'
- en: Built-in directives
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置指令
- en: 'Directives encapsulate coded behaviors that can be applied as attributes to
    HTML elements or other components:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 指令封装了可以应用于 HTML 元素或其他组件的编码行为：
- en: '| **Name** | **Syntax** | **Purpose** |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **语法** | **目的** |'
- en: '| Structural Directives | `*ngIf``*ngFor``*ngSwitch` | Controls the structural
    layout of the HTML and if elements get added or removed from the DOM |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 结构指令 | `*ngIf``*ngFor``*ngSwitch` | 控制 HTML 的结构布局以及元素是否被添加或从 DOM 中移除 |'
- en: '| Attribute Directives | `[class] [style] [(model)]` | Listens to and modifies
    the behavior of other HTML elements, attributes, properties, and components, such
    as CSS classes, HTML styles, and HTML form elements |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 属性指令 | `[class] [style] [(model)]` | 监听并修改其他 HTML 元素、属性、属性和组件的行为，例如 CSS 类、HTML
    样式和 HTML 表单元素 |'
- en: Common pipes
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见管道
- en: 'Pipes (known as filters in AngularJS) modify how a data-bound value is displayed
    in an HTML template:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 管道（在 AngularJS 中称为过滤器）修改了数据绑定值在 HTML 模板中的显示方式：
- en: '| **Name** | **Purpose** | **Usage** |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **目的** | **用法** |'
- en: '| Async | Manages subscriptions to observables, and provides synchronous access
    to the variable in the template | `someVariable$ &#124; async as someVariable`
    |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 异步 | 管理对可观察对象的订阅，并提供对模板中变量的同步访问 | `someVariable$ &#124; async as someVariable`
    |'
- en: '| Date | Formats a date according to locale rules | `{{date_value &#124; date[:format]}}`
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 日期 | 根据区域规则格式化日期 | `{{date_value &#124; date[:format]}}` |'
- en: '| Text Transformation | Transforms text to uppercase, lowercase, or title case
    | `{{value &#124; uppercase}}``{{value &#124; lowercase}}``{{value &#124; titlecase
    }}` |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 文本转换 | 将文本转换为大写、小写或标题格式 | `{{value &#124; uppercase}}``{{value &#124; lowercase}}``{{value
    &#124; titlecase }}` |'
- en: '| Decimal | Formats a number according to locale rules | `{{number &#124; number[:digitInfo]}}`
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 小数 | 根据区域规则格式化数字 | `{{number &#124; number[:digitInfo]}}` |'
- en: '| Percent | Formats a number as a percentage according to locale rules | `{{number
    &#124; percent[:digitInfo]}}` |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 百分比 | 根据区域规则格式化数字为百分比 | `{{number &#124; percent[:digitInfo]}}` |'
- en: '| Currency | Formats a number as currency with a currency code and symbol according
    to locale rules | `{{number &#124; currency [:currencyCode [:symbolDisplay [:digitInfo]]]}}`
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 货币 | 根据区域规则使用货币代码和符号格式化数字为货币 | `{{number &#124; currency [:currencyCode [:symbolDisplay
    [:digitInfo]]]}}` |'
- en: Starter commands, major components, and CLI scaffolds
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动命令，主要组件和 CLI 框架
- en: Starter commands help generate new projects or add dependencies. Angular CLI
    commands help create major components by automatically generating boilerplate
    scaffolding code with ease. For the list of the full set of commands, visit [https://github.com/angular/angular-cli/wiki](https://github.com/angular/angular-cli/wiki).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 启动命令帮助生成新项目或添加依赖。Angular CLI 命令通过自动生成样板代码轻松创建主要组件。要查看完整命令列表，请访问 [https://github.com/angular/angular-cli/wiki](https://github.com/angular/angular-cli/wiki)。
- en: Starter commands
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动命令
- en: 'Here are the most basic commands, which you will probably memorize over time
    and use the most often. Remember never to install `@angular/cli` globally as covered
    in *Chapter 3*, *Creating a Basic Angular App*:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是最基本的命令，您可能会随着时间的推移记住并频繁使用。请记住，不要像在 *第 3 章*，*创建基本的 Angular 应用程序* 中所述那样全局安装
    `@angular/cli`：
- en: '| **Name** | **Purpose** | **CLI command** |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **用途** | **CLI 命令** |'
- en: '| New | Creates a new Angular application with an initialized Git repository,
    `package.json`, with routing already configured and Ivy enabled. Run from the
    parent folder. | `npx @angular/cli new project-name --routing` |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 新建 | 创建一个新的 Angular 应用程序，包含初始化的 Git 仓库、`package.json`，已配置路由并启用 Ivy。从父文件夹运行。
    | `npx @angular/cli new project-name --routing` |'
- en: '| Update | Updates Angular, RxJS, and Angular Material dependencies. Rewrites
    code, if necessary, to maintain compatibility. | `npx ng update` |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 更新 | 更新 Angular、RxJS 和 Angular Material 依赖项。如有必要，重写代码以保持兼容性。 | `npx ng update`
    |'
- en: '| Add Material | Installs and configures Angular Material dependencies. | `npx
    ng add @angular/material` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 安装 Angular Material | 安装并配置 Angular Material 依赖项。 | `npx ng add @angular/material`
    |'
- en: Major component scaffolds
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主要组件模板
- en: 'Use the following commands during your daily workflow to add new components,
    services, and other major components to your Angular application. These commands
    will save you serious time and help you avoid simple configuration mistakes:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的日常工作流程中使用以下命令添加新组件、服务和其他主要组件到您的 Angular 应用程序中。这些命令将为您节省大量时间并帮助您避免简单的配置错误：
- en: '| **Name** | **Purpose** | **CLI command** |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **用途** | **CLI 命令** |'
- en: '| Module | Creates a new `@NgModule` class. Uses `-- routing` to add routing
    for submodules. Optionally, import the new module into a parent module using `--module`.
    | `n g module my-module``ng g m my-module` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 模块 | 创建一个新的 `@NgModule` 类。使用 `-- routing` 为子模块添加路由。可选地，使用 `--module` 将新模块导入父模块。
    | `ng g module my-module` `ng g m my-module` |'
- en: '| Component | Creates a new `@Component` class. Uses `-- module` to specify
    the parent module. Optionally, use `--flat` to skip directory creation, `-t` for
    an inline template, and `-s` for an inline style. | `ng g component my-component``ng
    g c my-component` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 组件 | 创建一个新的 `@Component` 类。使用 `-- module` 指定父模块。可选地，使用 `--flat` 跳过目录创建，`-t`
    用于内联模板，`-s` 用于内联样式。 | `ng g component my-component` `ng g c my-component` |'
- en: '| Directive | Creates a new `@Directive` class. Optionally, uses `--module`
    to scope directives for a given submodule. | `ng g directive my-directive``ng
    g d my-directive` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 指令 | 创建一个新的 `@Directive` 类。可选地，使用 `--module` 将指令作用域限定为指定的子模块。 | `ng g directive
    my-directive` `ng g d my-directive` |'
- en: '| Pipe | Creates a new `@Pipe` class. Optionally, use `--module` to scope pipes
    for a given submodule. | `ng g pipe my-pipe``ng g p my-pipe` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 管道 | 创建一个新的 `@Pipe` 类。可选地，使用 `--module` 将管道作用域限定为指定的子模块。 | `ng g pipe my-pipe`
    `ng g p my-pipe` |'
- en: '| Service | Creates a new `@Injectable` class. Uses `--module` to provide a
    service for a given submodule. Services are not automatically imported to a module.
    Optionally use `--flat false` to create a service under a directory. | `ng g service
    my-service``ng g s my-service` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 服务 | 创建一个新的 `@Injectable` 类。使用 `--module` 为指定的子模块提供服务。服务不会自动导入到模块中。可选地使用
    `--flat false` 在目录下创建服务。 | `ng g service my-service` `ng g s my-service` |'
- en: '| Guard | Creates a new `@Injectable` class, which implements the Route lifecycle
    hook `CanActivate`. Uses `--module` to provide a guard for a given submodule.
    Guards are not automatically imported to a module. | `ng g guard my-guard``ng
    g g my-guard` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 守卫 | 创建一个新的 `@Injectable` 类，该类实现了路由生命周期钩子 `CanActivate`。使用 `--module` 为指定的子模块提供守卫。守卫不会自动导入到模块中。
    | `ng g guard my-guard` `ng g g my-guard` |'
- en: In order to properly scaffold some of the components listed earlier under a
    custom module, such as `my-module`, you can prepend the module name before the
    name of what you intend to generate, for example, `ng g c my-module/my-new-component`.
    The Angular CLI will properly wire up and place the new component under the `my-module`
    folder.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确地在一个自定义模块（如`my-module`）下搭建一些之前列出的组件，你可以在你打算生成的名称之前添加模块名称，例如，`ng g c my-module/my-new-component`。Angular
    CLI将正确连接并将新组件放置在`my-module`文件夹下。
- en: TypeScript scaffolds
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TypeScript 搭建
- en: 'If you are not familiar with the TypeScript syntax, these TypeScript-specific
    scaffolds will help you create classes, interfaces, and enums, so you can leverage
    object-oriented programming principles to reduce the duplication of code and implement
    code behavior like calculated properties in classes rather than components:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太熟悉TypeScript语法，这些TypeScript特定的搭建将帮助你创建类、接口和枚举，这样你就可以利用面向对象编程原则来减少代码重复，并在类中而不是在组件中实现代码行为，如计算属性：
- en: '| **Name** | **Purpose** | **CLI command** |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **用途** | **CLI命令** |'
- en: '| Class | Creates a barebones class | `ng g class my-class` |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 类 | 创建一个基本类 | `ng g class my-class` |'
- en: '| Interface | Creates a barebones interface | `ng g interface my-interface`
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 接口 | 创建一个基本接口 | `ng g interface my-interface` |'
- en: '| Enum | Creates a barebones enum | `ng g enum my-enum` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 枚举 | 创建一个基本枚举 | `ng g enum my-enum` |'
- en: Common RxJS functions/operators
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的RxJS函数/操作符
- en: 'In order to become an effective Angular developer, you need to become an RxJS
    master. Here are some of the most common and useful RxJS operators for quick reference:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成为一名有效的Angular开发者，你需要成为RxJS的大师。以下是一些最常见和有用的RxJS操作符，供快速参考：
- en: Functions
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数
- en: '| **Name** | **Purpose** |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **用途** |'
- en: '| `pipe` | Takes one or more observables as input and generates an observable
    as output, allowing you to build custom data streams. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `pipe` | 接受一个或多个可观察对象作为输入，并生成一个可观察对象作为输出，允许你构建自定义数据流。 |'
- en: '| `subscribe` | Required to activate an observable. It is an anti-pattern to
    extract the value of an observable data stream from a `subscribe` operation. An
    Async pipe or the `tap` function can be used to inspect or use the current value.
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `subscribe` | 必须激活一个可观察对象。从`subscribe`操作中提取可观察数据流的值是一种反模式。可以使用异步管道或`tap`函数来检查或使用当前值。
    |'
- en: '| `unsubscribe` | Releases resources and cancels observable executions. Not
    unsubscribing can lead to performance problems and memory leaks. Use the Async
    pipe or the `SubSink` library to manage subscriptions. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `unsubscribe` | 释放资源并取消可观察对象的执行。不取消订阅可能导致性能问题和内存泄漏。使用异步管道或`SubSink`库来管理订阅。
    |'
- en: Operators
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作符
- en: '| **Name** | **Purpose** |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **用途** |'
- en: '| `of` | Converts the provided value to an observable sequence. Useful for
    integrating synchronous code into an observable data stream. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `of` | 将提供的值转换为可观察序列。对于将同步代码集成到可观察数据流中非常有用。 |'
- en: '| `from` | Creates an observable from an array, an iterable object, or a promise.
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `from` | 从数组、可迭代对象或承诺创建一个可观察对象。 |'
- en: '| `map` | Allows you to iterate through every value that is emitted by the
    observable. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `map` | 允许你遍历可观察对象发出的每个值。 |'
- en: '| `merge` | Creates an output observable that concurrently emits all values
    from every given input observable. Useful for triggering an action based on multiple
    observables. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `merge` | 创建一个输出可观察对象，同时并发地发出所有给定输入可观察对象的所有值。对于基于多个可观察对象触发操作非常有用。 |'
- en: '| `combineLatest` | Combines values from multiple observables with the latest
    value from each observable. Useful when used in tandem with the `merge` operator.
    |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `combineLatest` | 将多个可观察对象中的值与每个可观察对象的最新值组合。当与`merge`操作符一起使用时非常有用。 |'
- en: '| `filter` | Filters values in the data stream. Useful to ignore null values
    or only execute the rest of the pipeline when some condition is met. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `filter` | 过滤数据流中的值。用于忽略null值或仅在满足某些条件时执行管道的其余部分。 |'
- en: '| `concat` | Sequentially emits values from multiple observables. Useful for
    synchronizing multiple operations. Variants like `concatMap` can also flatten
    the observable, which is useful for iterating over values of collections. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `concat` | 顺序地从一个或多个可观察对象中发出值。对于同步多个操作非常有用。类似`concatMap`的变体也可以扁平化可观察对象，这对于遍历集合的值非常有用。
    |'
- en: '| `take` | Given a count, automatically completes the observable after consuming
    the prescribed number of times. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `take` | 给定一个计数，在消耗指定次数后自动完成可观察对象。 |'
- en: '| `catchError` | Catches errors on the observable to be handled by returning
    a new observable or throwing an error. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `catchError` | 捕获可观察对象上的错误，通过返回一个新的可观察对象或抛出一个错误来处理。|'
- en: '| `scan` | Using an accumulator function, it can process data incrementally.
    That is, getting a running subtotal as numbers are added. Useful for long-running
    operations where you need an update. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `scan` | 使用累加器函数，它可以增量地处理数据。也就是说，随着数字的增加，可以得到一个运行的小计。这对于需要更新的长时间运行的操作非常有用。|'
- en: 'Thanks to Jan-Niklas Wortmann for reviewing this section. Keep up with him
    on Twitter: `@niklas_wortmann`.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢Jan-Niklas Wortmann对本节的审阅。在Twitter上关注他：`@niklas_wortmann`。
- en: Further Reading
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Bindings*, [https://angular.io/guide/template-syntax#binding-syntax-an-overview](https://angular.io/guide/template-syntax#binding-syntax-an-overview
    )'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*绑定*，[https://angular.io/guide/template-syntax#binding-syntax-an-overview](https://angular.io/guide/template-syntax#binding-syntax-an-overview)'
- en: '*Structural Directives*, [https://angular.io/guide/structural-directives](https://angular.io/guide/structural-directives
    )'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*结构指令*，[https://angular.io/guide/structural-directives](https://angular.io/guide/structural-directives)'
- en: '*Attribute Directives*, [https://angular.io/guide/template-syntax#built-in-attribute-directives](https://angular.io/guide/template-syntax#built-in-attribute-directives
    )'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*属性指令*，[https://angular.io/guide/template-syntax#built-in-attribute-directives](https://angular.io/guide/template-syntax#built-in-attribute-directives)'
- en: '*Pipes*, [https://angular.io/guide/pipes](https://angular.io/guide/pipes )'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*管道*，[https://angular.io/guide/pipes](https://angular.io/guide/pipes)'
- en: '*CLI Commands*, [https://angular.io/cli](https://angular.io/cli )'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*CLI命令*，[https://angular.io/cli](https://angular.io/cli)'
- en: '*Learn RxJS switchMap, mergeMap, concatMap, and exhaustMap, FOREVER!*, [https://medium.com/@shairez/a-super-ninja-trick-to-learn-rxjss-switchmap-mergemap-concatmap-and-exhaustmap-forever-88e178a75f1b](https://medium.com/@shairez/a-super-ninja-trick-to-learn-rxjss-switchmap-mergemap-concatmap-and-exhaustmap-forever-88e178a75f1b)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*永远学习RxJS的switchMap、mergeMap、concatMap和exhaustMap！*，[https://medium.com/@shairez/a-super-ninja-trick-to-learn-rxjss-switchmap-mergemap-concatmap-and-exhaustmap-forever-88e178a75f1b](https://medium.com/@shairez/a-super-ninja-trick-to-learn-rxjss-switchmap-mergemap-concatmap-and-exhaustmap-forever-88e178a75f1b)'
- en: '*Reactive Extensions Library for JavaScript*, [https://rxjs.dev](https://rxjs.dev
    )'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*JavaScript的响应式扩展库*，[https://rxjs.dev](https://rxjs.dev)'
- en: '*This is where we write about RxJS. It''s meant to be a place for everyone
    who is interested in RxJS*, [https://dev.to/rxjs](https://dev.to/rxjs)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*这是我们的RxJS文档写作之处。它旨在成为所有对RxJS感兴趣的人的聚集地*，[https://dev.to/rxjs](https://dev.to/rxjs)'
