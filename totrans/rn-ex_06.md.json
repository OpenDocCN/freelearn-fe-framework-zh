["```js\n// Friends/app/components/FeedListRow/index.js \n\n... \n  _navigateToPostView () { \n    console.log('pushed'); \n  } \n... \n\n```", "```js\n// Friends/app/utils/graphMethods.js \n\n... \nexport const getPostDetails = (id, batchCallback) => { \n  let resultsObject = { \n    attachments: undefined, \n    comments: undefined, \n    likes: undefined \n  } \n\n```", "```js\n  const attachmentsRequest = new GraphRequest('/' + id + \n  '/attachments', null, (error, response) => { \n    if (error) { \n      console.log(error); \n    } \n    resultsObject.attachments = response.data; \n  }); \n\n  const commentsRequest = new GraphRequest('/' + id + '/comments', \n  null, (error, response) => { \n    if (error) { \n      console.log(error); \n    } \n    resultsObject.comments = response.data; \n  }); \n\n  const likesRequest = new GraphRequest('/' + id + '/likes', null, \n  (error, response) => { \n    if (error) { \n      console.log(error); \n    } \n    resultsObject.likes = response.data; \n  }); \n\n```", "```js\n  new GraphRequestManager() \n    .addRequest(attachmentsRequest) \n    .addRequest(commentsRequest) \n    .addRequest(likesRequest) \n    .addBatchCallback(() => batchCallback(resultsObject)) \n    .start(); \n} \n\n```", "```js\n// Friends/app/components/PostView/index.js \n\nimport React, { Component } from 'react'; \nimport { \n  ActivityIndicator, \n  Text, \n  TouchableHighlight, \n  View \n} from 'react-native'; \n\nimport { getAsyncStorage, setAsyncStorage } from '../../utils/storageMethods'; \nimport { getDateTimeString } from '../../utils/dateMethods'; \nimport { getPostDetails } from '../../utils/graphMethods'; \nimport styles from './styles'; \n\n```", "```js\nexport default class PostView extends Component { \n  constructor (props) { \n    super (props); \n\n    this.state = { \n      loading: true \n    } \n  } \n\n```", "```js\n  async componentWillMount () { \n    const result = await getAsyncStorage(this.props.postID); \n\n    if (Object.keys(result).length === 0) { \n      this._getPostDetails(); \n      return; \n    } \n    this._savePostDetailsToState(result); \n  } \n\n```", "```js\n   render () { \n    return ( \n      <View style={ styles.container }> \n        <View> \n          <Text style={ styles.created }> \n            { this._renderCreatedString() } \n          </Text> \n            { this._renderStoryString() } \n          <Text> \n            { this._renderMessageString() } \n          </Text> \n        </View> \n        <View> \n          { this.state.loading ? this._renderActivityIndicator() : \n          this._renderDetails() } \n        </View> \n        <View style={ styles.separator } /> \n      </View> \n    ) \n  } \n\n```", "```js\n  async _getPostDetails () { \n    await getPostDetails(this.props.postID, (result) => { \n      this._savePostDetailsToState(result); \n      setAsyncStorage(this.props.postID, result); \n    }); \n  } \n\n```", "```js\n  _renderActivityIndicator () { \n    return ( \n      <ActivityIndicator \n        animating={ this.state.spinning } \n        size={ 'large' } \n      /> \n    ) \n  } \n\n```", "```js\n  _renderCreatedString () { \n    return 'Posted ' + getDateTimeString(this.props.createdTime); \n  } \n\n  _renderDetails () { \n    return ( \n      <View style={ styles.detailsContainer }> \n        <Text style={ styles.detailsRow }> \n          { this.state.likes.length } Likes, {  \n          this.state.comments.length } Comments \n        </Text> \n      </View> \n    ) \n  } \n\n```", "```js\n  _renderMessageString () { \n    return this.props.message \n  } \n\n  _renderStoryString () { \n    if (this.props.story) { \n      return ( \n        <Text style={ styles.story }> \n          { this.props.story } \n        </Text> \n      ) \n    } \n  } \n\n```", "```js\n  _savePostDetailsToState (data) { \n    this.setState({ \n      attachments: data.attachments, \n      comments: data.comments, \n      likes: data.likes, \n      loading: false \n    }); \n  } \n} \n\n```", "```js\n// Friends/app/components/PostView/index.js \n\nimport { StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1, \n    margin: 10, \n    marginTop: 75, \n  }, \n  created: { \n    color: '#365899', \n    fontWeight: 'bold', \n    marginBottom: 5 \n  }, \n  detailsContainer: { \n    flexDirection: 'row', \n    justifyContent: 'space-between' \n  }, \n  detailsRow: { \n    color: '#365899', \n    marginBottom: 15, \n    marginTop: 15, \n    textAlign: 'left' \n  }, \n  separator: { \n    height: 2, \n    marginLeft: 15, \n    marginRight: 15, \n    backgroundColor: '#365899' \n  }, \n  story: { \n    marginBottom: 5, \n    textDecorationLine: 'underline' \n  } \n}); \n\nexport default styles; \n\n```", "```js\n// Friends/app/components/FeedListRow/index.js \n\n... \nexport default class FeedListRow extends Component { \n  ... \n  _navigateToPostView () { \n    this.props.navigator.push({ \n      component: PostView, \n      passProps: { \n        createdTime: this.props.createdTime, \n        message: this.props.message, \n        postID: this.props.postID, \n        story: this.props.story \n      } \n    }); \n  } \n  ... \n} \n\n```", "```js\n// Friends/app/components/CommentList/index.js \n\nimport React, { Component } from 'react'; \nimport { \n  ListView, \n  Text, \n  View \n} from 'react-native'; \n\nimport CommentListRow from '../CommentListRow'; \nimport styles from './styles'; \n\nexport default class CommentList extends Component { \n  constructor (props) { \n    super (props); \n    this.state = { \n      ds: new ListView.DataSource({ \n        rowHasChanged: (r1, r2) => r1 !== r2 \n      }) \n    } \n  } \n\n```", "```js\n  render () { \n    const dataSource = this.state.ds.cloneWithRows(this.props.comments || []); \n\n```", "```js\n    return ( \n      <View style={ styles.container }> \n        <ListView \n          automaticallyAdjustContentInsets={ false } \n          dataSource={ dataSource } \n          renderRow={ (rowData, sectionID, rowID) => \n            <CommentListRow \n              message={ rowData.message } \n              name={ rowData.from.name } /> \n          } \n\n```", "```js\n          renderSeparator={ (sectionID, rowID) => \n            <View \n              key={ rowID } \n              style={ styles.separator } /> \n          } /> \n      </View> \n    ) \n  } \n}\n\n```", "```js\n// Friends/app/components/CommentList/styles.js \n\nimport { StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1 \n  }, \n  separator: { \n    flex: 1, \n    height: StyleSheet.hairlineWidth, \n    marginLeft: 15, \n    marginRight: 15, \n    backgroundColor: '#1d2129' \n  } \n}); \n\nexport default styles; \n\n```", "```js\n// Friends/app/components/CommentListRow/index.js \n\nimport React, { Component } from 'react'; \nimport { \n  Text, \n  View \n} from 'react-native'; \n\nimport styles from './styles'; \n\nexport default (props) => { \n  return ( \n    <View style={ styles.container }> \n      <View style={ styles.header }> \n        <Text style={ styles.name }> \n          { props.name } \n        </Text> \n      </View> \n      <View style={ styles.body }> \n        <Text style={ styles.comment }> \n          { props.message } \n        </Text> \n      </View> \n    </View> \n  ) \n} \n\n```", "```js\n// Friends/app/components/CommentListRow/styles.js \n\nimport { StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  body: { \n    marginBottom: 20, \n    marginLeft: 30, \n    marginRight: 30, \n    marginTop: 10, \n  }, \n  comment: { \n    color: '#1d2129' \n  }, \n  container: { \n    flex: 1 \n  }, \n  header: { \n    marginTop: 5, \n    marginLeft: 10, \n    marginRight: 10 \n  }, \n  name: { \n    color: '#1d2129', \n    fontWeight: 'bold' \n  } \n}); \n\nexport default styles; \n\n```", "```js\n// Friends/app/components/PostView/index.js \n\n... \nimport CommentList from '../CommentList'; \n\nexport default class PostView extends Component { \n  ... \n  render () { \n    return ( \n      <View style={ styles.container }> \n        ... \n        <View style={ styles.separator } /> \n        <View style={ styles.commentListContainer }> \n          <CommentList comments={ this.state.comments } /> \n        </View> \n      </View> \n    ) \n  } \n  ... \n} \n\n```", "```js\n// Friends/app/components/PostView/styles.js \n\n   commentListContainer: { \n    flex: 1,                               \n    marginTop: 20 \n  } \n\n```", "```js\n// Friends/app/App.js \n\n... \nexport default class App extends Component { \n  constructor (props) { \n    ... \n    this.state = { \n      ... \n      refreshControlSpinning: false \n    } \n  } \n\n```", "```js\n  async _checkLoginStatus () { \n    ... \n    if (result === null) { \n      this.props.navigator.push({ \n        ... \n        passProps: { \n          getFeed: () => _getFeed() \n        } \n      }); \n      ... \n    } \n\n    this._getFeed(); \n  } \n\n  _getFeed () { \n    getFeed((error, result) => this._responseInfoCallback\n    (error, result)); \n  } \n\n```", "```js\n  _renderView () { \n    ... \n    return ( \n      <FeedList \n        ... \n        refreshControlSpinning={ this.state.refreshControlSpinning } \n        refreshFeedList={ () => this._refreshFeedList() } \n      /> \n    ); \n  } \n\n```", "```js\n  _refreshFeedList () { \n    this.setState({ \n      refreshControlSpinning: true \n    }); \n\n    this._getFeed(); \n  } \n\n```", "```js\n  _responseInfoCallback (error, result) { \n    ... \n    this.setState({ \n      refreshControlSpinning: false \n      ... \n    }); \n  } \n} \n\n```", "```js\n// Friends/app/components/FeedList/index.js \n\nimport { \n  ... \n  RefreshControl, \n} from 'react-native'; \n... \nexport default class FeedList extends Component { \n  ... \n  render () { \n    ... \n    return ( \n      <View style={ styles.container }> \n        <ListView \n          refreshControl={ this._renderRefreshControl() } \n          ... \n        /> \n      </View> \n    ) \n  } \n\n```", "```js\n  _renderRefreshControl () { \n    return ( \n      <RefreshControl \n        onRefresh={ () => this.props.refreshFeedList() } \n        refreshing={ this.props.refreshControlSpinning } \n        tintColor={ '#365899' } \n        title={ 'Refresh Feed' } \n        titleColor={ '#365899' } \n      /> \n    ) \n  } \n} \n\n```", "```js\n<Image source={ require('../images/my-icon.png') } /> \n\n```", "```js\n<Image \n  source={{ uri: 'https://www.link-to-my-image.com/image.png' }} \n  style={{ \n    width: 400, \n    height: 400 \n  }} /> \n\n```", "```js\nattachments: [{ \n  media: { \n    image: { \n      height: 400, \n      src: 'https://www.link-to-my-image.com/image.png', \n      width: 400 \n    } \n  } \n}] \n\n```", "```js\n// Friends/app/utils/imageMethods.js \n\nimport { Dimensions } from 'react-native'; \n\nexport const getHeightRatio = (height, width) => { \n  return height * (getWidthOffset()/width); \n} \n\n```", "```js\nexport const getWidthOffset = () => { \n  return Dimensions.get('window').width - 20; \n} \n\n```", "```js\n// Friends/app/components/PostView/index.js \n\nimport { \n  ... \n  Image, \n  ScrollView, \n} from 'react-native'; \n\nimport { getHeightRatio, getWidthOffset } from '../../utils/imageMethods'; \n\n```", "```js\n... \nexport default class PostView extends Component { \n  ... \n  render () { \n    return ( \n      <ScrollView style={ styles.container }> \n        ... \n        <View> \n          { !this.state.loading && this._renderAttachments() } \n        </View> \n        ... \n      </ScrollView> \n    ) \n  } \n\n```", "```js\n  ... \n  _renderAttachments () { \n    let attachment = this.state.attachments[0] \n    let media; \n\n    if (attachment && attachment.hasOwnProperty('subattachments')) { \n      attachment = attachment.subattachments.data[0]; \n    } \n\n```", "```js\n    if (attachment && attachment.hasOwnProperty('media')) { \n      media = attachment.media; \n    } \n\n```", "```js\n    if (media && media.image) { \n\n```", "```js\n      const imageObject = media.image; \n\n      return ( \n        <Image \n          resizeMode={ 'contain' } \n          source={{ uri: imageObject.src }} \n          style={{ \n            marginRight: 10, \n            marginTop: 30, \n            width: getWidthOffset(), \n            height: getHeightRatio(imageObject.height, \n            imageObject.width) \n          }} \n        /> \n      ) \n    } \n  } \n  ... \n} \n\n```", "```js\n// Friends/app/components/PostView/styles.js \n\n   commentListContainer: { \n    flex: 1, \n    marginTop: 20 \n  } \n\n```", "```js\nimport { \n  WebView \n} from 'react-native'; \n\nclass WebViewSample extends Component { \n  render () { \n    return ( \n      <WebView \n        source={{uri: 'https://www.google.com'}} /> \n    ) \n  } \n} \n\n```", "```js\nattachments: [{ \ntitle: 'Link to Google' \n  url: 'https://www.google.com' \n}] \n\n```", "```js\n// Friends/app/components/WebViewComponent/index.js \n\nimport React, { Component } from 'react'; \n\nimport { \n  WebView \n} from 'react-native'; \n\nexport default (props) => { \n  return ( \n    <WebView \n      source={{ uri: props.url }} \n    /> \n  ) \n} \n\n```", "```js\n// Friends/app/components/PostView/index.js \n\nimport { \n  Button, \n  ... \n} from 'react-native'; \n\nimport WebViewComponent from '../WebViewComponent'; \n\n```", "```js\n... \nexport default class PostView extends Component { \n  ... \n  render () { \n    return ( \n      <ScrollView style={ styles.container }> \n        ... \n        <View> \n          { !this.state.loading && this._renderLink() } \n        </View> \n        ... \n      </ScrollView> \n    ) \n  } \n\n```", "```js\n  ... \n  _renderLink () { \n    let attachment = this.state.attachments[0]; \n    let link; \n    let title; \n\n```", "```js\n    if (attachment && attachment.hasOwnProperty('subattachments')) { \n      attachment = attachment.subattachments.data[0]; \n    } \n\n```", "```js\n    if (attachment && attachment.hasOwnProperty('url')) { \n      link = attachment.url; \n      title = attachment.title || 'Link'; \n\n```", "```js\n      return ( \n        <Button \n          color={ '#365899' } \n          onPress={ () => this._renderWebView(link) } \n          title={ title } \n        /> \n      ) \n    } \n  } \n\n```", "```js\n  _renderWebView (url) { \n    this.props.navigator.push({ \n      component: WebViewComponent, \n      passProps: { \n        url \n      } \n    }); \n  } \n  ... \n} \n\n```", "```js\n// Friends/app/App.js \n\nimport { \n  TabBarIOS, \n  ... \n} from 'react-native'; \n... \nimport Icon from 'react-native-vector-icons/FontAwesome'; \n\n```", "```js\n... \nexport default class App extends Component { \n  constructor (props) { \n    ... \n    this.state = { \n      ... \n      selectedTab: 'feed' \n    } \n  } \n\n```", "```js\n  ... \n  _renderFeedList () { \n    return ( \n      <FeedList \n        feed={ this.state.feed } \n        navigator={ this.props.navigator } \n        refreshControlSpinning={ this.state.refreshControlSpinning } \n        refreshFeedList={ () => this._refreshFeedList() } \n      /> \n    ) \n  } \n\n```", "```js\n  _renderLoginPrompt () { \n    return ( \n      <LoginPage checkLoginStatus={ () => this._checkLoginStatus() } /> \n    ) \n  } \n\n```", "```js\n  _renderView () { \n    ... \n    return ( \n      <View style={ styles.container }> \n        <TabBarIOS> \n          <Icon.TabBarItemIOS \n            title={ 'Feed' } \n            selected={ this.state.selectedTab === 'feed' } \n            iconName={ 'newspaper-o' } \n            iconSize={ 20 } \n            onPress={ () => this._setSelectedTab('feed') } \n          > \n            { this._renderFeedList() } \n          </Icon.TabBarItemIOS> \n          <Icon.TabBarItemIOS \n            title={ 'Sign Out' } \n            selected={ this.state.selectedTab === 'signOut' } \n            iconName={ 'sign-out' } \n            iconSize={ 20 } \n            onPress={ () => this._setSelectedTab('signOut') } \n          > \n            { this._renderLoginPrompt() } \n          </Icon.TabBarItemIOS> \n        </TabBarIOS> \n      </View> \n    ) \n  } \n\n```", "```js\n  ... \n  _setSelectedTab (selectedTab) { \n    this.setState({ \n      selectedTab \n    }); \n  } \n} \n\n```", "```js\n// Friends/app/styles.js \n\ncontainer: { \n  flex: 1, \n  backgroundColor: '#F5FCFF', \n} \n\n```", "```js\n// Friends/app/components/LoginPage/index.js \n\n... \nexport default class LoginPage extends Component { \n  render() { \n    return ( \n      <View style={ styles.container }> \n        <LoginButton \n          ... \n          onLogoutFinished={() => this.props.checkLoginStatus() } \n        /> \n      </View> \n    ); \n  } \n} \n\n```", "```js\n// Friends/app/components/Drawer/index.js \n\nimport React, { Component } from 'react'; \n\nimport { \n  ListView, \n  Text, \n  TouchableHighlight, \n  View \n} from 'react-native'; \n\nimport DrawerRow from '../DrawerRow'; \nimport styles from './styles'; \n\nexport default class Drawer extends Component { \n  constructor (props) { \n    super (props); \n    this.state = { \n      ds: new ListView.DataSource({ \n        rowHasChanged: (r1, r2) => r1 !== r2 \n      }) \n    } \n  } \n\n```", "```js\n  render () { \n    const dataSource = this.state.ds.cloneWithRows\n    (this.props.routes || []); \n    return ( \n      <View style={ styles.container }> \n        <ListView \n          automaticallyAdjustContentInsets={ false } \n          dataSource={ dataSource } \n          enableEmptySections={ true } \n          renderRow={ (rowData, sectionID, rowID) => \n          this._renderDrawerRow(rowData, sectionID, rowID) } \n          renderSeparator={ (sectionID, rowID) => \n            <View \n              key={ rowID } \n              style={ styles.separator } /> \n          } /> \n      </View> \n    ) \n  } \n\n```", "```js\n  _renderDrawerRow (rowData, sectionID, rowID) { \n    return ( \n      <View> \n        <TouchableHighlight \n          style={ styles.row } \n          onPress={ () => this.props.navigateTo(rowData.index) }> \n          <DrawerRow \n            routeName={ rowData.title } /> \n          </TouchableHighlight> \n      </View> \n    ) \n  } \n} \n\n```", "```js\n// Friends/app/components/Drawer/styles.js \n\nimport { StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1 \n  }, \n  separator: { \n    height: StyleSheet.hairlineWidth, \n    marginLeft: 10, \n    marginRight: 10, \n    backgroundColor: '#000000' \n  } \n}) \n\nexport default styles; \n\n```", "```js\n// Friends/app/components/DrawerRow/index.js \n\nimport React, { Component } from 'react'; \n\nimport { \n  Text, \n  View \n} from 'react-native'; \n\nimport styles from './styles'; \n\nexport default class DrawerRow extends Component { \n  setNativeProps (props) { \n    this._root.setNativeProps(props) \n  } \n\n```", "```js\n  render () { \n    return ( \n      <View \n        style={ styles.container } \n        ref={ component => this._root = component } \n        { ...this.props }> \n        <Text style={ styles.rowTitle }> \n          { this.props.routeName } \n        </Text> \n      </View> \n    ) \n  } \n} \n\n```", "```js\n// Friends/app/components/DrawerRow/styles.js \n\nimport { StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1, \n    height: 40, \n    padding: 10 \n  }, \n  rowTitle: { \n    fontSize: 20, \n    textAlign: 'left' \n  } \n}) \n\nexport default styles; \n\n```", "```js\n// Friends/index.android.js \n\nimport React, { Component } from 'react'; \n import { \n  AppRegistry, \n  DrawerLayoutAndroid, \n  Navigator, \n  StyleSheet, \n  View \n} from 'react-native'; \n\nimport App from './app/App'; \nimport Drawer from './app/components/Drawer'; \nimport LoginPage from './app/components/LoginPage'; \nimport PostView from './app/components/PostView'; \nimport WebViewComponent from './app/components/WebViewComponent'; \n\nimport Icon from 'react-native-vector-icons/MaterialIcons'; \n\n```", "```js\nexport default class Friends extends Component { \n  constructor (props) { \n    super (props); \n\n    this.state = { \n      visibleRoutes: [ \n        { title: 'My Feed', index: 0 }, \n        { title: 'Log Out ', index: 1 } \n      ] \n    } \n  } \n\n```", "```js\n  render() { \n    const routes = [ \n      { title: 'My Feed', index: 0 }, \n      { title: 'Sign In/Log Out', index: 1 }, \n      { title: 'Post Details', index: 2 }, \n      { title: 'Web View', index: 3 } \n    ]; \n\n    return ( \n      <View style={styles.container}> \n        <DrawerLayoutAndroid \n          drawerLockMode={ 'unlocked' } \n          ref={ 'drawer' } \n          renderNavigationView={ () => this._renderDrawerLayout() } \n        > \n\n```", "```js\n          <Icon.ToolbarAndroid \n\n            titleColor=\"#fafafa\" \n            navIconName=\"menu\" \n            height={ 56 } \n            backgroundColor=\"#365899\" \n            onIconClicked={ () => this._openDrawer() } \n          /> \n\n```", "```js\n          <Navigator \n            initialRoute={{ index: 0 }} \n            ref={ 'navigator' } \n            renderScene={ (routes, navigator) => \n            this._renderScene(routes, navigator) } \n          /> \n        </DrawerLayoutAndroid> \n      </View> \n    ); \n  } \n\n```", "```js\n  _checkLoginStatus () { \n    this._navigateTo(0); \n  } \n\n```", "```js\n  _openDrawer () { \n    this.refs['drawer'].openDrawer(); \n  } \n\n```", "```js\n  _navigateTo (index) { \n    this.refs['navigator'].push({ \n      index, \n      passProps: { \n        checkLoginStatus: () => this._checkLoginStatus() \n      } \n    }); \n    this.refs['drawer'].closeDrawer(); \n  } \n\n```", "```js\n  _renderDrawerLayout () { \n    return ( \n      <Drawer \n        navigateTo={ (index) => this._navigateTo(index) } \n        routes={ this.state.visibleRoutes } \n      /> \n    ); \n  } \n\n```", "```js\n  _renderScene (route, navigator) { \n    if (route.index === 0) { \n      return ( \n        <App \n          title={ route.title } \n          navigator={ navigator } \n        /> \n      ); \n    } \n\n```", "```js\n    if (route.index === 1) { \n      return ( \n        <LoginPage \n          title={ route.title } \n          navigator={ navigator } \n          { ...route.passProps } \n        /> \n      ); \n    } \n\n    if (route.index === 2) { \n      return ( \n        <PostView \n          title={ route.title } \n          navigator={ navigator } \n          { ...route.passProps } \n        /> \n      ); \n    } \n\n    if (route.index === 3) { \n      return ( \n        <WebViewComponent \n          title={ route.title } \n          navigator={ route.navigator } \n          { ...route.passProps } \n        /> \n      ); \n    } \n  } \n\n} \n\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1, \n    backgroundColor: '#F5FCFF', \n  } \n}); \n\nAppRegistry.registerComponent('Friends', () => Friends); \n\n```", "```js\n// Friends/app/App.android.js \n\n... \n\n```", "```js\nexport default class App extends Component { \n  constructor (props) { \n    ... \n  } \n\n```", "```js\n  ... \n  async _checkLoginStatus () { \n    ... \n    if (result === null) { \n      this.props.navigator.push({ \n        index: 1, \n        passProps: { \n          getFeed: () => this._getFeed() \n        } \n      }); \n\n      return; \n    } \n    ... \n  } \n\n```", "```js\n... \n_renderView () { \n    ... \n    return this._renderFeedList(); \n  } \n\n```", "```js\n  ... \n} \n\n```", "```js\n// Friends/app/components/FeedList/index.js \n\n... \nimport { \n  Platform, \n  ... \n} from 'react-native'; \n... \nexport default class FeedList extends Component { \n  ... \n  render () { \n    ... \n    return ( \n      <View style={ Platform.OS === 'ios' ? styles.container : \n      styles.androidContainer }> \n        ... \n      </View> \n    ) \n  } \n  ... \n} \n\n```", "```js\n// Friends/app/components/FeedList/styles.js \n\n   androidContainer: { \n    flex: 1 \n  }, \n\n```", "```js\n// Friends/app/components/FeedListRow/index.js \n\n... \nimport { \n  Platform, \n  ... \n} from 'react-native'; \n... \nexport default class FeedListRow extends Component { \n  ... \n  _navigateToPostView () { \n    const propsObject = { \n      createdTime: this.props.createdTime, \n      message: this.props.message, \n      postID: this.props.postID, \n      story: this.props.story \n    }; \n\n```", "```js\n    if (Platform.OS === 'ios') { \n      this.props.navigator.push({ \n        component: PostView, \n        passProps: propsObject \n      }); \n      return; \n    } \n\n```", "```js\n    this.props.navigator.push({ \n      index: 2, \n      passProps: propsObject \n    }); \n  } \n  ... \n} \n\n```", "```js\n// Friends/app/components/PostView/index.js \n\n... \nimport { \n  BackAndroid, \n  Platform, \n  ... \n} from 'react-native'; \n... \nexport default class PostView extends Component { \n  ... \n  async componentWillMount () { \n    BackAndroid.addEventListener('hardwareButtonPress', () =>\n    this._backButtonPress()); \n    ... \n  } \n\n```", "```js\n  componentWillUnmount () { \n    BackAndroid.removeEventListener('hardwareButtonPress', () =>\n    this._backButtonPress()) \n  } \n\n```", "```js\n  ... \n  _backButtonPress () { \n    this.props.navigator.pop(); \n    return true; \n  } \n\n```", "```js\n  ... \n  _renderWebView (url) { \n    if (Platform.OS === 'ios') { \n      this.props.navigator.push({ \n        component: WebViewComponent, \n        passProps: { \n          url \n        } \n      }); \n      return; \n    } \n\n```", "```js\n    this.props.navigator.push({ \n      index: 3, \n      passProps: { \n        url \n      } \n    }); \n  } \n} \n\n```"]