["```js\nprint('a')\nprint('b')\nprint('c')\n\n// output\na, b, c\n```", "```js\nasyncPrint('a')\nasyncPrint('b')\nasyncPrint('c')\n\n// output\nc, b, a\n```", "```js\nconst xhr = new XMLHttpRequest();\nxhr.open('GET','/path', true);\nxhr.onload = () => {\n  // run me when the request is finished\n}\n\nxhr.send(null);\n```", "```js\nxhr.onreadystatechange = () => {}\n```", "```js\ncallAsync('1',2, (error, response) => {\n  if(error) {\n    console.error(error);\n  } else {\n    console.log('response', response); \n    // do something with the response\n  }\n})\n```", "```js\nfunction callAsync(param, param2, fn) {\n  setTimeout(() => {\n   if(param > param2) {\n     fn(null, 'success');\n   } else {\n     fn('error', null);\n   }\n}\n```", "```js\nopenFile('filename', (err, content) => {\n  console.log( content );\n  statement4;\n  statement5;\n})\n\nstatement2;\nstatement3\n```", "```js\ngetData('url', (err, data) => {\n  getMoreData('newurl/'+ data.id, (moreData) => {\n    getEvenMoreData('moreurl/'+ moreData.id, () => {\n      console.log('done here');\n    })\n  })\n})\n```", "```js\nfunction getEvenMoreDataCallback(err, evenMoreData) {\n  console.log('done here');\n}\n\nfunction getMoreDataCallback(err, moreData){\n  getEvenMoreData('moreurl/'+ moreData.id, getEvenMoreDataCallback);\n}\n\nfunction getDataCallback(err, data){\n  getMoreData('newurl/'+ data.id, getMoreDataCallback);\n}\n\ngetData('url', getDataCallback)\n```", "```js\nlet getDataCallback  = require('./datacallback');\ngetData('url', getDataCallback);\n```", "```js\nfunction getEvenMoreDataCallback(err, evenMoreData) {\n  console.log('done here');\n}\n```", "```js\nvar getEvenMoreDataCallback = require('./evenmorecallback');\n\nfunction getMoreDataCallback(err, moreData){\n  getEvenMoreData('moreurl/'+ moreData.id, getEvenMoreDataCallback);\n}\n```", "```js\nconst promise = new Promise((resolve, reject) => {\n  // either call resolve() if we have a success or reject() if it fails \n});\n\n// the 'promise' variable points to a construct \n// that will eventually contain a value\n\npromise((data) => {  // <- registering a callback on then()\n  // our data has arrived at this point\n})\n```", "```js\nfunction getData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('data');\n    },1000);\n  })\n}\n```", "```js\nfunction getMoreData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject('error from more data')\n    },1000);\n  })\n}\n```", "```js\npromise.then( successCallback, <optional error call back> );\n```", "```js\ngetData().then( (data) => {\n  console.log('data', data);\n})\n```", "```js\n// alternative 1\ngetMoreData().then(\n  data => { \n    console.log('data',data); \n  }, \n  err => { \n    console.log('error',err); \n  }\n)\n\n// alternative 2\ngetMoreData().then(data => {\n  console.log('data', data);\n})\n.catch((err) => { \n  console.log('error', err); \n}); \n```", "```js\ngetData()\n  .then(getMoreData)\n  .then(getEvenMoreData)\n  .catch(handleError)\n```", "```js\nfunction getData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('data');\n    })\n  })\n}\n\nfunction getMoreData(data) { // data is from getData\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('data');\n    })\n  })\n}\n\ngetData().then(getMoreData)\n```", "```js\ngetData()\n  .then(getMoreData, (err) => {}) // local error handler\n  .then(getEvenMoreData )\n  .then(data => {} )\n  .catch(handleError ) // global error handler\n```", "```js\nnpm install async --save\n```", "```js\n// async-demo/app.js\n\nconst fs = require('fs');\n\nconst basePath = __dirname + '/files/';\nconst files = ['file1.txt', 'file2.txt', 'file3.txt'];\n\nfs.stat(basePath + 'file1.txt', (err, result) => {\n  if(err) {\n    console.log('err');\n  } else {\n    const { size, birthtime } = result;\n    console.log('Size',size);\n    console.log('Created', birthtime);\n  }\n});\n```", "```js\n// app-map.js\n\nconst async = require('async');\nconst fs = require('fs');\nconst basePath = __dirname + '/files/';\nconst files = ['file1.txt', 'file2.txt', 'file3.txt'];\nconst mappedFiles = files.map( f => basePath + f);\n\nasync.map(mappedFiles, fs.stat,(err, results) => {\n  if(err) {\n    console.log('error', err);\n  }else {\n    // looping through our results array\n    results.forEach(({size, birthtime}) => {\n      console.log('Size',size);\n      console.log('Created', birthtime);\n    });\n  }\n});\n```", "```js\n// example of running a callback method in a forEach()\n\n['file1','file2','file3'].forEach( f => {\n  var states = [];\n  fs.stat(f, (err, stat) => {\n    console.log('stat', stat);\n    states.push( stat );\n  })\n})\n```", "```js\n// async-demo/app-parallell.js\n\nconst async = require('async');\n\nfunction getMessages(fn) {\n  setTimeout(() => {\n    fn(null,['mess1', 'mess2', 'mess3']);\n  }, 3000);\n}\n\nfunction getOrders(fn) {\n  setTimeout(() => {\n    fn(null, ['order1', 'order2', 'order3']);\n  }, 5000);\n}\n\nasync.parallel([\n  getMessages,\n  getOrders\n],(error, results) => {\n  if(error) {\n    console.log('error', error);\n  } else {\n    console.log('results', results);\n  }\n});\n```", "```js\nasync.series([\n  function login(){}\n  function loadUserDetails() {}\n],(result) => {})\n```", "```js\ngetData()\n  .then( data => {\n    getMoreData(moreData => {\n      getEvenMoreData(() => {\n        // do stuff\n      })\n    })\n  });\n```", "```js\nasync function getData() {\n  // more to come\n} \n```", "```js\nasync function getData() {\n  let data = await getMoreData();\n  let otherData = await getEvenMoreData();\n} \n```", "```js\nfunction getMoreData(cb) { \n  setTimeout(() => cb('more data'), 3000); \n}\nfunction getEvenMoreData(cb) { \n  setTimeout( () => cb('even more data'), 3000 ); \n}\n```", "```js\nfunction getMoreData() { \n  return new Promise((resolve, reject) => {\n    setTimeout(() => resolve('more data'))\n  });\n\n}\n\nfunction getEvenMoreData() { \n  return new Promise((resolve, reject) => {\n    setTimeout(() => resolve('more data'))\n  });\n}\n```", "```js\nasync function getData() {\n  var data = await Promise.resolve('data');\n  var moreData = await getMoreData(data);\n  var evenMoreData = await getEvenMoreData(moreData);\n  return evenMoreData; \n}\n```", "```js\ngetData().then((result) => console.log('result', result) );\n```"]