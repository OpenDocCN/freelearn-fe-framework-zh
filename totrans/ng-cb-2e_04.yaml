- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding Angular Animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn about working with **animations** in Angular.
    You’ll learn about multi-state animations, staggering animations, and keyframe
    animations, as well as how to implement animations for switching routes in your
    Angular apps and how to conditionally disable animations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the recipes that we’re going to cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first two-state Angular animation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with multi-state animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating complex Angular animations using keyframes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating lists in Angular using stagger animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sequential vs parallel animations in Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Route animations in Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disabling Angular animations conditionally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the recipes in this chapter, ensure your setup is complete as per the ''Technical
    Requirements'' in the ''Angular-Cookbook-2E'' GitHub repository. For setup details,
    visit: [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md).
    The starter code for this chapter is located at [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter04](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter04).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first two-state Angular animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you’ll create a basic two-state Angular animation that has a
    fading effect. We’ll start with an Angular app with a UI already built into it.
    We’ll then enable animations in the app using Angular animations and will move
    toward creating our first animation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter04/ng-basic-animation`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_04_01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.1: ng-basic-animation app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running, we will move on to the steps for the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have an app that doesn’t have Angular animations configured at all. We will
    create a fading effect for the cards using Angular animations. Let’s continue
    with the steps as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we’ll import the `provideAnimations` function from the `@angular/platform-browser/animations`
    package in our `src/app/app.config.ts` file so we can use animations in the app.
    We’ll use it in the `providers` array as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now modify the `app.component.ts` file to add the animations as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the `fadeInOut` animation on both the cards in the `app.component.html`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Great! You have now implemented a basic *fade-in* <=> *fade-out* animation for
    the cards. Simple, but pretty! Refer to the next section to understand how the
    recipe works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular provides its own animation API that allows you to animate any property
    that the CSS transitions work on. The benefit is that you can configure them dynamically
    based on the conditions required. If we were to create the same behavior in CSS,
    we would have to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We would have to create the keyframes in CSS as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Creating the CSS classes to apply these animations:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then we would have to add and remove the CSS classes on each element as they
    are **created** on the DOM and are **removed**. However, Angular handles this
    process using the built-in `:enter` and `:leave` states, which get triggered once
    an item is added or removed from the DOM, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Even with the steps above, more challenges can appear when working with such
    animations. Thanks to Angular animations, we can implement these a lot faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'We first used the `trigger` function to register the animation named `fadeInOut`.
    Then we had the `:enter` and `:leave` transitions being registered with the `transition`
    function. Finally, we defined the styles and animations for those transitions
    using the `style` and `animate` functions. Note that we’re using `''200ms 100ms..''`
    in the `:enter` transition. `200ms` is the duration of the transition while `100ms`
    is the delay. We add this `delay` so we can wait for the `:leave` transition of
    the previously shown card to finish before we can move to the `:enter` transition
    of the next card to be shown. Let’s delve deeper into each of the functions we
    used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `trigger` function: The `trigger` function is used to define an animation
    trigger in Angular. The first argument is the name of the trigger, which will
    be used in the template to bind the animation to a specific element. The second
    argument is an array of state and transition definitions. For example, `trigger(''fadeInOut'',
    [...])` registers an animation trigger named `''fadeInOut`''.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `:enter` and `:leave` transitions: `:enter` is an alias for the `void =>
    *` state transition. It represents the state of an element that is being added
    to the DOM. `:leave` is an alias for the `* => void` state transition. It represents
    the state of an element that is being removed from the DOM. These aliases are
    useful for animations that are common to elements entering or leaving the view,
    such as fade-in and fade-out animations.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `transition` function: The `transition` function is used to define the
    states between which transitions will occur. It accepts two arguments: the first
    is a string that defines the state change expression, and the second is an array
    of animation steps to run when the transition is triggered. For example, `transition('':enter'',
    [...])` defines the animation steps that will be executed when an element enters
    the view.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`style`: The `style` function is used to define a set of CSS styles that will
    be used in the animation. It accepts an object where the keys are CSS properties
    and the values are the desired values for those properties. For example, `style({
    opacity: 0, scale: 0.85 })` sets the opacity to `0` and scales the element down
    to 85% of its original size.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`animate`: The `animate` function is used to define the timing and easing for
    the transition between styles. The first argument is a string that defines the
    duration, delay, and easing curve. For instance, `200ms 100ms` means the animation
    will last 200 ms and will start after a delay of 100 ms. The second argument is
    the style or a set of styles that the animation will transition to. For example,
    `animate(''200ms 100ms'', style({ opacity: 1, scale: 1 }))` will transition the
    element to full opacity and original scale over 300 ms, after waiting for 100
    ms.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Animations in Angular: [https://angular.io/guide/animations](https://angular.io/guide/animations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Angular Animations Explained with Examples*: [https://www.freecodecamp.org/news/angular-animations-explained-with-examples/](https://www.freecodecamp.org/news/angular-animations-explained-with-examples/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with multi-state animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we’ll work with Angular animations containing multiple states.
    This means that we’ll work with more than two states for a particular item. We’ll
    be using the same Facebook and Twitter cards example for this recipe as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll configure the following states for both cards:'
  prefs: []
  type: TYPE_NORMAL
- en: The state when a card appears on the screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The state when the user hovers over a card.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The state when the user moves the mouse away from the card.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter04/ng-multi-state-animations`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_04_02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.2: ng-multi-state-animations app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let’s look at the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We already have a working app that has a single animation built for the reach
    of social cards. When you tap either the Facebook or Twitter button, you’ll see
    the respective card appearing with a slide-in animation from left to right. To
    keep the recipe simple, we’ll implement two more states and two animations for
    when the user moves the mouse cursor over the card and when the user moves away
    from the card. Let’s add the relevant code in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll start by adding two `@HostListener` instances to `FbCardComponent` in
    the `components/fb-card/fb-card.component.ts` file, one for the `mouseenter` event
    on the card and one for the `mouseleave` event. We’ll name the states `hovered`
    and `active`, respectively. The code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we’ll do the same for `TwitterCardComponent` in the `components/twitter-card/twitter-card-component.ts`
    file. The code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There should be no visual change so far since we’re only updating the `cardState`
    variable to have the hover and active states. We haven’t defined the transitions
    yet for the animation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We’ll now define our state for when the user’s cursor enters the card, that
    is, the `mouseenter` event. The state is called `hovered` and should look as follows
    in the `animation.ts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you refresh the app now, tap either the Facebook or Twitter button, and hover
    the mouse over the card, you’ll see the card’s UI changing. That’s because we
    changed the state to `hovered`. However, there’s no animation yet between the
    style changes. Let’s add the animation in the next step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We’ll add the `active => hovered` transition now in the `animations.ts` file
    so that we can smoothly navigate from `active` to the `hovered` state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should now see the smooth transition on the `mouseenter` event if you refresh
    the app.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we’ll add the final transition, `hovered =>` `active`, so when the
    user leaves the card, we revert to the active state with a smooth animation. The
    code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ta-da! You now know how to implement different states and different animations
    on a single element using **Angular animations**.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular uses triggers to understand what state the animation is in. An example
    syntax looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `expression` can be a valid JavaScript expression, and it evaluates to
    the name of the state. In our case, we bind it to the `cardState` property, which
    contains either `active` or `hovered`. Therefore, we end up with three transitions
    for our cards:'
  prefs: []
  type: TYPE_NORMAL
- en: '`void => active` (when the element is added to the DOM and is rendered)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`active => hovered` (when the `mouseenter` event triggers on the card)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hovered => active` (when the `mouseleave` event triggers on the card)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Triggering the animation: [https://angular.io/guide/animations#triggering-the-animation](https://angular.io/guide/animations#triggering-the-animation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Reusable animations: [https://angular.io/guide/reusable-animations](https://angular.io/guide/reusable-animations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating complex Angular animations using keyframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since you already know about Angular animations from the previous recipes, you
    might be thinking, “That’s easy enough.” Well, time to level up your animation
    skills in this recipe. You’ll create a complex Angular animation using `keyframes`
    in this recipe to get started with writing some advanced animations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter04/ng-animations-keyframes`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_04_03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.3: ng-animations-keyframes app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let’s look at the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have an app right now that has a single transition, that is, `void => active`,
    which triggers when the element enters the DOM. Right now, the animation is pretty
    simple. We’ll use the `keyframes` function to build a complex animation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin with adding the `keyframes` function from `@angular/animations`
    to the `animations.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we’ll convert the single-style animation for the `void => transition`
    to use keyframes as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that previously we had to define the initial style and the `animate`
    function. Now we can define the same inside the `keyframes` function in chronological
    order. If you refresh the app now and try it, you’ll still see the same animation
    as before. But now we have it using `keyframes`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, let’s start adding some complex animations. Let’s start the animation
    with a scaled-down card by adding `scale3d` to the `transform` property of `style`
    at `offset: 0`. We’ll also increase the animation time to `1.5s`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should now see that the card animation starts with a small card that slides
    from the left and moves toward the right, increasing in size.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we’ll implement a *zig-zag-ish* animation for the appearance of the card
    instead of the slide-in animation. Let’s add the following keyframe elements to
    the `keyframes` array to add a bumpy effect to our animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you refresh the app and tap any of the buttons, you should see the card
    bumping to the right wall, and then to the left wall of the card, before returning
    to the normal state:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_04_04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.4: Card bumping to the right and then the left wall'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As the last step, we’ll spin the card clockwise before it returns to its original
    position. For that, we’ll use `offset: 0.75`, using the `rotate` function with
    some additional angles. The code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Awesome! You now know how to implement complex animations in Angular using the
    `keyframes` function. You will see in the next section how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For complex animations in Angular, the `keyframes` function from the `@angular/animations`
    package is an amazing way of providing different timing offsets for the animation
    throughout its journey. We can define the offsets using the `style` function,
    which returns an object of type `AnimationStyleMetadata`. The `style` function
    takes tokens as inputs, which are a key-value pair where the keys are of the string
    type and the value can be either a string or a number. Essentially, a token represents
    a CSS property. This allows us to pass the `offset` property as shown in the recipe,
    which can have a value between `0` and `1`, reflecting the timing from `0%` to
    `100%` of the animation. Thus, we can define different styles for different offsets
    to create advanced animations.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Animations in Angular: [https://angular.io/guide/animations](https://angular.io/guide/animations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular Animations Explained with Examples: [https://www.freecodecamp.org/news/angular-animations-explained-with-examples/](https://www.freecodecamp.org/news/angular-animations-explained-with-examples/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating lists in Angular using stagger animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No matter what kind of web application you build today, you are likely to implement
    some sort of list in it. And to make those lists even better, why not implement
    elegant animations for them? In this recipe, you’ll learn how to animate lists
    in Angular using stagger animations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter04/ng-animating-lists`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_04_05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.5: ng-animating-lists app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let’s see the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have an app right now that has a list of bucket items. We need to animate
    the list using staggering animations. We’ll be doing this step by step. I’m excited
    – are you?
  prefs: []
  type: TYPE_NORMAL
- en: 'Cool. We’ll go through the following steps for the recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s provide Angular Animations using the `provideAnimations` function
    from Angular in the `src/app/app.config.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a file named `animations.ts` in the project’s `app` folder and
    add the following code to register a basic list item animation named `listItemAnimation`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we’ll add the animation to `BucketComponent` in the `app/bucket/bucket.component.ts`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Since we have the animation imported into the component, we can use it in the
    template now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s add the animation to the `html` element, with the class `fruits__item`
    in the `bucket.component.html` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you now refresh the app and add an item to the bucket list, you should see
    it appear with a fade-in effect. And if you delete an item, you should see it
    disappear with the animation as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We’ll modify `LIST_ITEM_ANIMATION` now to use the `stagger` function. This
    is because the staggering animation is applied on the list, and not the list items.
    First, we need to import the `stagger` function from `@angular/animations`. Then
    we need to remove everything from the trigger array, and then create a wildcard
    transition for the list as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we’ll add a `query` for what happens when a new item is added to the list.
    We’ll use a staggering animation here. The code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we’ll add the query for when an item leaves the list. The code should look
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can apply the animation to the list itself. Update the `bucket.component.html`
    as follows to put the animation on the `div` with the class `fruits` instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that we’re binding the `[@ listAnimationlistItemAnimation]` property
    to `bucket.length`. This will make sure that the animation triggers whenever the
    length of the bucket changes, that is, when an item is added or removed from the
    bucket. And this is possible because of the transition `('* <=> *')`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Awesome! You now know how to implement staggering animations for lists in Angular.
    You’ll see in the next section how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Stagger animations only work inside `query` functions and are applied on the
    list (containing the items) instead of the items themselves. To search or query
    the items, we first use the `query` function. Then we use the `stagger` function
    to define how many milliseconds of staggering we want before the animation starts
    for the next list item. We also use the animation in the `stagger` functions to
    define the animation for each element found in the query. Notice that we’re using
    `{` `optional: true` `}` for both the `:enter` query and the `:leave` query. We’re
    using it because if there is no item to animate, either when the app starts or
    if all items are removed, Angular throws an error because it can’t find anything
    to animate.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Animations in Angular: [https://angular.io/guide/animations](https://angular.io/guide/animations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular animations stagger docs: [https://angular.io/api/animations/stagger](https://angular.io/api/animations/stagger
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sequential vs parallel animations in Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you’ll learn how to run Angular animations in a sequence vs
    in parallel. This is handy for when we want to have one animation finished before
    we start the next one, or to run the animations simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter04/ng-seq-parallel-animations`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_04_06.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.6: ng-seq-parallel-animations app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let’s see the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have an app that displays the two social cards we used in the previous recipes.
    One for Facebook and one for Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the animations sequentially and in parallel for both cards, we will
    use the `query` function to configure the animations sequentially. And then we
    will use the `group` function to run them in parallel. Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s provide Angular animations using the `provideAnimations` function
    from Angular in the `src/app/app.config.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will create a simple wrapper transition to handle the cards entering and
    leaving the DOM. Afterward, we’ll handle how they can be triggered together when
    the current card leaves the view. Create a new file named `animations.ts` in the
    `app` folder. Add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let’s add a query for when the card leaves the view. Inside the `transition`
    array, add the following `query` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will import the animation in the `app.component.ts` file and add it to the
    `animations` array as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we’ll update the `app.component.html` to use the animation on the element
    with the `card-container` class. Update the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should be able to see the animation now by clicking the Facebook and Twitter
    buttons. That is, the card slides from its position to the right of the screen.
    However, it doesn’t look pretty.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s add another query for when the next card enters the view. We’ll first
    make sure that the card is `invisible` when starting to enter the DOM. Replace
    the animation in the `animations.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now add the second `query` for the card to be entered in the screen. We’ll
    make sure it slides in from the left and becomes visible slowly. Update the `animations.ts`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You’ll notice that the animations are working now. However, they are really
    slow. That is, the next card takes a lot of time to appear after the current card
    has left the screen. That’s because they are all running in sequence.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can wrap the second and third queries in a `group` function to run them
    in parallel. Update the code in the `animations.ts` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And boom! You can now see that the animations are running in parallel and are
    not waiting for the `:leave` transition to be finished before the `:enter` transition
    is executed.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Animations in Angular run in sequence by default. If a transition has more than
    one step, i.e., `style` and `animate` usages, the animations will run in sequence.
    The `group` function makes it possible for us to run animations in parallel. For
    this recipe, we wanted both `:enter` and `:leave` transitions to run at the same
    time so we grouped them to run in parallel at the end.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sequential vs parallel animations in Angular ([https://angular.io/guide/complex-animation-sequences#sequential-vs-parallel-animation](https://angular.io/guide/complex-animation-sequences#sequential-vs-parallel-animation))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular animations `sequence` function ([https://angular.io/api/animations/sequence](https://angular.io/api/animations/sequence))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Route animations in Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you’ll learn how to implement route animations in Angular. You’ll
    learn how to configure route animations by passing the transition state name to
    the route as a data property. You’ll also learn how to use the `RouterOutlet`
    API to get the transition name and apply it to the animation to be executed. We’ll
    implement some 3D transitions, so it is going to be fun!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter04/ng-route-animations`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_04_07.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.7: ng-route-animations app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let’s see the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have a simple app with two lazy-loaded routes now. The routes are for the
    **Home** and the **About** pages, and we will now start configuring the animations
    for the app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let us provide Angular animations using the `provideAnimations` function
    from Angular in the `src/app/app.config.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now create a new file named `animations.ts` inside the `app` folder.
    Let us put the following code in the `animations.ts` file to register a basic
    trigger to handle animations from a route to every other route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We’ll now register some queries and basic states for the animations. Let’s
    add the following items in the `transition` function’s array as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Alright! We have the `routeAnimation` trigger registered now for transitioning
    from a route to every other route. Now, let’s provide those transition states
    in the routes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can provide the states for the transitions using a unique identifier for
    each route. There are many ways to do this, but the easiest way is to provide
    them using the `data` attribute in the route configuration as follows in the `app.routes.ts`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to provide this `transitionState` property from the current route
    to the route animation trigger in the `app.component.html` file. For this, create
    an `@ViewChild` property in the `app.component.ts` file. This `ViewChild` is going
    to target the `<router-outlet>` element in the `app.component.html` template.
    This is so we can get the current route’s `data` and the `transitionState` value
    provided. The code in the `app.component.ts` file should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We’ll also import `ROUTE_ANIMATION` from the `animations.ts` file into `app.component.ts`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We’ll now create a method named `getRouteAnimationState`, which will get the
    current route’s data and the `transitionState` value and return it. This function
    will later be used in `app.component.html`. Modify your code in `app.component.ts`
    as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, let’s use the `getRouteAnimationState` method with the `@routeAnimation`
    trigger in `app.component.html` so we can see the animation in play:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have everything set up, let’s finalize the animations. We’ll add
    a query for when a route leaves the view. Update the `animations.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you navigate between routes, you’ll notice the leaving route going out with
    animation behind the entering route. Let’s add the animation for the entering
    route as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We’ll add the animation for the route entering the view. Update the `animations.ts`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you look at the animation route while navigating, you’ll notice that the
    entering route appears immediately, then we see the leaving route’s animation,
    and after that, we see the entering route’s animation. Let’s group the entering
    and leaving animations together to run them in parallel.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `animations.ts` as follows to run the entering and leaving routes’
    animations in parallel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Voilà! Refresh the app and see the magic. You should now see the 3D animation
    for both the entering and leaving routes as you navigate from the **Home** page
    to the **About** page and vice versa. The sky’s the limit when it comes to what
    you can do with keyframes and animations in Angular.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `animations.ts` file, we first define our animation trigger named `routeAnimation`.
    Then we make sure that by default, the HTML element to which the trigger is assigned
    has `position: ''relative''` set as a style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we apply the styled `position: ''absolute''` to the children, as mentioned,
    using `:enter` and `:leave` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'This makes sure that these elements, that is, the routes to be loaded, have
    the `position: ''absolute''` style and a full width using `width: ''100%''` so
    they can appear on top of each other. You can always play around with it by commenting
    on either of the styles to see what happens (at your own risk, though!).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we defined our route transitions as a combination of two animations, the
    first for `query :leave` and the second for `query :enter`. For the route leaving
    the view, we set the `opacity` to `0` via the animation, and for the route entering
    the view, we set the `opacity` to `1` via the animation as well. Note that animations
    via Angular animations run in sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: You’ll notice that in our code, we’re using the `keyframes` function for animations.
    For the leaving route, The “`keyframes` function” starts with `opacity` `1`, and
    without any transformations initially. And then it ends with `opacity 0` but with
    the transform set to `'rotateY(180deg) translateX(0) translateZ(1200px) translateY(25%)'`.
    This is the opposite of the entering route.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we use the `group` function to wrap both the leaving and entering animations
    together so they can run in parallel instead of in sequence. This makes it so
    that the entering route comes in as the leaving route goes away.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Animations in Angular ([https://angular.io/guide/animations](https://angular.io/guide/animations))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular route transition animations ([https://angular.io/guide/route-animations](https://angular.io/guide/route-animations))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disabling Angular animations conditionally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you’ll learn how to disable animations in Angular conditionally.
    This is useful for a variety of cases, including disabling animations on a particular
    device, for example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pro tip: Use `ngx-device-detector` to identify if your Angular app is running
    on a mobile, tablet, etc. (A little secret that is not so-secret anymore…I built
    it!)'
  prefs: []
  type: TYPE_NORMAL
- en: Shameless plug aside, in this recipe, we’ll disable animations for employees
    in the application, considering we’re rolling out animations only for admins at
    the moment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter04/ng-disable-animations`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab. Log in as an admin, add a few
    bucket items, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_04_08.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.8: ng-disable-animations app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running, we will move on to the steps for the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have an app that already has some Angular animations configured. You will
    notice that both the admin and employee pages have animations enabled. We will
    disable the animations for the employee page using a `config`. Let’s continue
    with the steps as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we’ll add a new property named `disableAnimations` to our `IEmployeeConfig`
    interface and the `EMPLOYEE_CONFIG` variable in the `src/app/app.config.ts` file
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you save the file, TypeScript will start throwing errors in the console as
    we need to add the same `disableAnimations` property in the `employee.config.ts`
    file as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `src/app/employee/employee.config.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add a `HostBinding` in the `bucket.component.ts` to disable the animations
    in the bucket component based on the config. Update the `bucket/bucket.component.ts`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Great! If you now refresh the app and view the **Admin** page, you’ll see the
    animations working. And if you go to the **Employee** page, you’ll see that the
    animations are disabled there. Magic! Check out the next section to understand
    how the recipe works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular provides a way to disable animations using the `[@.disabled]` binding.
    You can put it anywhere in the template with an expression that evaluates a truth
    value. And in that case, all the child animations that are applied in its nested
    HTML tree will be disabled. We had an application-level config that is overridden
    in the `employee` component via the `EmployeeConfig` object. So first we created
    a `disableAnimations` property in the `IAppConfig` interface. This interface is
    used by both the `AppConfig` variable in the `app-config.ts` file and the `employeeConfig`
    variable in the `employee.config.ts` file. As you can see, we set the value of
    `disabledAnimations` to `false` for the configuration defined in the `app.config.ts`
    and `true` for the configuration defined in `employee.config.ts`. And then we
    used the `@HostBinding()` decorator in the `BucketComponent` class by assigning
    its value to the provided config’s `disabledAnimations` property. Since the `AdminComponent`
    class gets the configuration defined in the `app.config.ts` against the `EMPLOYEE_CONFIG`
    token, and the `EmployeeComponent` class gets the configuration defined in the
    `employee.config.ts` against the `EMPLOYEE_CONFIG` token, the animations are enabled
    and disabled, respectively, for these components.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Animations in Angular: [https://angular.io/guide/animations](https://angular.io/guide/animations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular Animations Explained with Examples: [https://www.freecodecamp.org/news/angular-animations-explained-with-examples/](https://www.freecodecamp.org/news/angular-animations-explained-with-examples/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/AngularCookbook2e](Chapter_4.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code1388317275422265.png)'
  prefs: []
  type: TYPE_IMG
