["```js\n    \"serve\": {\n      \"executor\": \"@nrwl/web:dev-server\",\n      \"defaultConfiguration\": \"development\",\n      \"options\": {\n        \"buildTarget\": \"catalog:build\",\n        \"hmr\": true,\n        \"port\": 4200\n      },\n      \"configurations\": {\n        \"development\": {\n          \"buildTarget\": \"catalog:build:development\",\n        },\n        \"production\": {\n          \"buildTarget\": \"catalog:build:production\",\n          \"hmr\": false\n        }\n      }\n    },\n```", "```js\n      \"options\": {\n        \"buildTarget\": \"checkout:build\",\n        \"hmr\": true,\n        \"port\": 4201\n      },\n```", "```js\n  \"scripts\": {\n    \"start\": \"nx serve\",\n    \"build\": \"nx build\",\n    \"test\": \"nx test\",\n    \"serve:all\": \"nx run-many --target=serve\"\n  },\n```", "```js\npnpm serve:all\n```", "```js\n  \"npmScope\": \"ebuy\",\n```", "```js\nLibrary name   : ui\nGenerate a default component    : No\nimportPath : @ebuy/ui\n```", "```js\n    \"paths\": {\n      \"@ebuy/ui\": [\"libs/ui/src/index.ts\"]\n    }\n```", "```js\n    pnpm install semantic-ui-react semantic-ui-css\n    ```", "```js\n    yarn add semantic-ui-react semantic-ui-css\n    npm install semantic-ui-react semantic-ui-css\n    ```", "```js\n    import { Menu, Container, Icon, Label } from 'semantic-ui-react';\n    export function Header() {\n      return (\n        <Menu fixed=\"top\" inverted>\n          <Container>\n            <Menu.Item as=\"a\" header>\n              eBuy.com\n            </Menu.Item>\n            <MenuItems />\n            <Menu.Item position=\"right\">\n              <Label>\n                <Icon name=\"shopping cart\" />\n                00\n              </Label>\n            </Menu.Item>\n          </Container>\n        </Menu>\n      );\n    }\n    const MenuItems = () => {\n      return (\n        <>\n          {NAV_ITEMS.map((navItem, index) => (\n            <Menu.Item key={index}>\n              <a href={navItem.href ?? '#'}>{navItem.label}</a>\n            </Menu.Item>\n          ))}\n        </>\n      );\n    };\n    interface NavItem {\n      label: string;\n      href?: string;\n    }\n    const NAV_ITEMS: Array<NavItem> = [\n      {\n        label: 'Catalog',\n        href: '/',\n      },\n      {\n        label: 'Checkout',\n        href: '/checkout',\n      },\n    ];\n    export default Header;\n    ```", "```js\n    export * from './lib/header';\n    ```", "```js\n    import { Header } from '@ebuy/ui';\n    ```", "```js\n    import { Header } from '@ebuy/ui';\n    import { Container, Header as Text } from 'semantic-ui-react';\n    import 'semantic-ui-css/semantic.min.css';\n    export function App() {\n      return (\n        <Container style={{ marginTop: '5rem' }}>\n          <Header />\n          <Text size=\"huge\">Catalog App</Text>\n        </Container>\n      );\n    }\n    export default App;\n    ```", "```js\n{\n  \"/catalog\": {\n    \"target\": \"http://localhost:4200\"\n  },\n  \"/checkout\": {\n    \"target\": \"http://localhost:4201\"\n  }\n}\n```", "```js\n    \"options\": {\n        \"buildTarget\": \"catalog:build\",\n        \"hmr\": true,\n        \"port\": 4200,\n        \"proxyConfig\": \"apps/catalog/proxy.conf.json\"\n      },\n```", "```js\n     \"options\": {\n          \"buildTarget\": \"checkout:build:development\",\n          \"port\": 4201,\n          \"baseHref\": \"/checkout/\"\n        },\n```", "```js\ninterface productListItem {\n  id: string;\n  title: string;\n  image: string;\n  price: number;\n}\nexport const PRODUCT_LIST_MOCKS: Array<productListItem> = [\n  {\n    id: '1',\n    title: 'Apples',\n    image: '/assets/apple.jpg',\n    price: 1.99,\n  },\n  {\n    id: '2',\n    title: 'Oranges',\n    image: '/assets/orange.jpg',\n    price: 2.5,\n  },\n  {\n    id: '3',\n    title: 'Bananas',\n    image: '/assets/banana.jpg',\n    price: 0.7,\n  },\n];\nexport default PRODUCT_LIST_MOCKS;\n```", "```js\nexport * from './lib/product-list-mocks';\n```", "```js\nimport { Card } from 'semantic-ui-react';\nimport ProductCard from './product-card';\nimport { PRODUCT_LIST_MOCKS } from '@ebuy/mocks';\nexport function ProductList() {\n  return (\n    <Card.Group>\n      {PRODUCT_LIST_MOCKS.map((product) => (\n        <ProductCard key={product.id} product={product} />\n      ))}\n    </Card.Group>\n  );\n}\nexport default ProductList;\n```", "```js\nimport { Button, Card, Image } from 'semantic-ui-react';\nexport function ProductCard(productData: any) {\n  const { product } = productData;\n  return (\n    <Card>\n      <Card.Content>\n        <Image alt={product.title} src={product.image} />\n        <Card.Header>{product.title}</Card.Header>\n        <Card.Description>{product.description}</Card.Description>\n        <Card.Header>${product.price}</Card.Header>\n      </Card.Content>\n      <Card.Content extra>\n        <div className=\"ui three buttons\">\n          <Button basic color=\"red\">\n            Remove\n          </Button>\n          <Button basic color=\"blue\">\n            {0}\n          </Button>\n          <Button basic color=\"green\">\n            Add\n          </Button>\n        </div>\n      </Card.Content>\n    </Card>\n  );\n}\nexport default ProductCard;\n```", "```js\nimport { Header } from '@ebuy/ui';\nimport { Container, Header as Text } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport ProductList from './product-list';\nexport function App() {\n  return (\n    <Container style={{ marginTop: '5rem' }}>\n      <Header />\n      <Text size=\"huge\">Catalog App</Text>\n      <ProductList />\n    </Container>\n  );\n}\nexport default App;\n```", "```js\nimport { Header } from '@ebuy/ui';\nimport { Container, Header as Text } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport ShoppingBasket from './basket';\nimport { PRODUCT_LIST_MOCKS } from '@ebuy/mocks';\nexport function App() {\n  return (\n    <Container style={{ marginTop: '5rem' }}>\n      <Header />\n      <Text size=\"huge\">Checkout</Text>\n      <ShoppingBasket basketList={PRODUCT_LIST_MOCKS} />\n    </Container>\n  );\n}\nexport default App;\n```", "```js\nimport { Table, Image, Container } from 'semantic-ui-react';\nexport function ShoppingBasket(basketListData: any) {\n  const { basketList } = basketListData;\n  return (\n    <Container textAlign=\"center\">\n      <Table basic=\"very\" rowed>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Items</Table.HeaderCell>\n            <Table.HeaderCell>Amount</Table.HeaderCell>\n            <Table.HeaderCell>Quantity</Table.HeaderCell>\n            <Table.HeaderCell>Price</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {basketList.map((basketItem: any) => (\n            <Table.Row key={basketItem.id}\n>\n              <Table.Cell>\n                <Image src={basketItem.image} rounded size=\"mini\" />\n              </Table.Cell>\n              <Table.Cell> {basketItem.title}</Table.Cell>\n              <Table.Cell>{basketItem.quantity || 0}</Table.Cell>\n              <Table.Cell>${basketItem.price * basketItem.quantity}</Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </Container>\n  );\n}\nexport default ShoppingBasket;\n```", "```js\nNx Console > generate > Create a React Library\n```", "```js\n    \"paths\": {\n      \"@ebuy/custom-hooks\": [\"libs/custom-hooks/src/index.ts\"],\n      \"@ebuy/mocks\": [\"libs/mocks/src/index.ts\"],\n      \"@ebuy/ui\": [\"libs/ui/src/index.ts\"],\n      \"@ebuy/utils\": [\"libs/utils/src/index.ts\"]\n    }\n```", "```js\nimport {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport { useEventCallback, useEventListener } from 'usehooks-ts';\ndeclare global {\n  interface WindowEventMap {\n    'session-storage': CustomEvent;\n  }\n}\ntype SetValue<T> = Dispatch<SetStateAction<T>>;\nexport function useSessionStorage<T>(key: string, initialValue: T): [T, SetValue<T>] {\n  // Get from session storage then\n  // parse stored json or return initialValue\n  const readValue = useCallback((): T => {\n    // Prevent build error \"window is undefined\" but keep working\n    if (typeof window === 'undefined') {\n      return initialValue;\n    }\n    try {\n      const item = window.sessionStorage.getItem(key);\n      return item ? (parseJSON(item) as T) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading sessionStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  }, [initialValue, key]);\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(readValue);\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to sessionStorage.\n  const setValue: SetValue<T> = useEventCallback((value) => {\n    // Prevent build error \"window is undefined\" but keeps working\n    if (typeof window === 'undefined') {\n      console.warn(\n        `Tried setting sessionStorage key \"${key}\" even though environment is not a client`\n      );\n    }\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const newValue = value instanceof Function ? value(storedValue) : value;\n      // Save to session storage\n      window.sessionStorage.setItem(key, JSON.stringify(newValue));\n      // Save state\n      setStoredValue(newValue);\n      // We dispatch a custom event so every useSessionStorage hook are notified\n      window.dispatchEvent(new Event('session-storage'));\n    } catch (error) {\n      console.warn(`Error setting sessionStorage key \"${key}\":`, error);\n    }\n  });\n  useEffect(() => {\n    setStoredValue(readValue());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const handleStorageChange = useCallback(\n    (event: StorageEvent | CustomEvent) => {\n      if ((event as StorageEvent)?.key && (event as StorageEvent).key !== key) {\n        return;\n      }\n      setStoredValue(readValue());\n    },\n    [key, readValue]\n  );\n  // this only works for other documents, not the current one\n  useEventListener('storage', handleStorageChange);\n  // this is a custom event, triggered in writeValueTosessionStorage\n  // See: useSessionStorage()\n  useEventListener('session-storage', handleStorageChange);\n  return [storedValue, setValue];\n}\nexport default useSessionStorage;\n// A wrapper for \"JSON.parse() to support \"undefined\" value\nfunction parseJSON<T>(value: string | null): T | undefined {\n  try {\n    return value === 'undefined' ? undefined : JSON.parse(value ?? '');\n  } catch {\n    console.log('parsing error on', { value });\n    return undefined;\n  }\n}\n```", "```js\npnpn i usehook-ts\n```", "```js\nexport * from './lib/use-session-storage'\n```", "```js\nimport { useSessionStorage } from '@ebuy/custom-hooks;\n```", "```js\nconst [basket, setBasket]: any = useSessionStorage('shoppingBasket', {});\n  const addItem = (id: string) => {\n    basket[id] = basket[id] ? basket[id] + 1 : 1;\n    setBasket(basket);\n  };\n const removeItem = (id: string) => {\n    basket[id] = basket[id] <= 1 ? 0 : basket[id] - 1;\n    setBasket(basket);\n```", "```js\n<div className=\"ui three buttons\">\n          <Button basic color=\"red\" onClick={() => removeItem(product.id)}>\n            Remove\n          </Button>\n          <Button basic color=\"blue\">\n            {basket[product.id] || 0}\n          </Button>\n          <Button basic color=\"green\" onClick={() => addItem(product.id)}>\n            Add\n          </Button>\n        </div>\n```", "```js\npnpm serve:all\n```", "```js\nexport function getSessionStorage(key: any) {\n  const sessionStorageValue = JSON.parse(\n    window.sessionStorage.getItem(key) || '{}'\n  );\n  return sessionStoragevalue;\n}\nexport default getSessionStorage;\n```", "```js\nimport { useEffect, useState } from 'react';\nimport { useEventListener } from 'usehooks-ts';\nimport { getSessionStorage } from '@ebuy/utils';\n```", "```js\nconst getTotalBasketCount = (basket: any): any => {\n  return Object.values(basket).reduce((a: any, b: any) => a + b, 0);\n};\n```", "```js\nconst [miniBasketCount, setMiniBasketCount] = useState(null);\n  useEffect(() => {\n    const basket: any = getSessionStorage('shoppingBasket');\n    const totalCount: any = getTotalBasketCount(basket);\n    setMiniBasketCount(totalCount);\n  }, []);\n  useEventListener('session-storage', () => {\n    const basket: any = getSessionStorage('shoppingBasket');\n    const totalCount: any = getTotalBasketCount(basket);\n    setMiniBasketCount(totalCount);\n  });\n```", "```js\n<Menu.Item position=\"right\">\n          <Label>\n            <Icon name=\"shopping cart\" />\n            {miniBasketCount}\n          </Label>\n        </Menu.Item>\n```", "```js\nimport { getSessionStorage } from '@ebuy/utils';\n```", "```js\nconst basketFromStorage: any = getSessionStorage('shoppingBasket');\n    console.log('Basket: ', basketFromStorage);\n```", "```js\nconst createCompleteBasket = (allItems: any, quantities: any) => {\n  return allItems\n    .filter((item: any) => quantities[item.id])\n    .map((item: any) => {\n      return {\n        ...item,\n        quantity: quantities[item.id],\n      };\n    });\n};\n```", "```js\n  const completeBasket = createCompleteBasket(\n    PRODUCT_LIST_MOCKS,\n    basketFromStorage\n  );\n```", "```js\n <ShoppingBasket basketList={completeBasket} />\n```"]