- en: Buttons - Initiating Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Button variants
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Button emphasis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Link buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Floating actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Icon buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Button sizes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Buttons in Material-UI applications are used to initiate actions. The user clicks
    on a button and something happens. What happens when a button is activated is
    entirely up to you. Material-UI buttons range in complexity from simple text buttons
    to floating action buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Button variants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Material-UI `Button` component exists as one of three variants. These are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Text`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Outlined`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Contained`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s some code that renders three `Button` components, each explicitly setting
    their `variant` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When you load the screen, here''s what you''ll see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1989266-5989-42d6-be32-e7503cebf345.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `variant` property controls the type of button that's rendered. The three
    variants can be used in different scenarios or contexts as you see fit. For example,
    TEXT buttons draw less attention if this is what you need. Conversely, CONTAINED
    buttons try to stand out as an obvious interaction point for the user.
  prefs: []
  type: TYPE_NORMAL
- en: The default variant is `text`. I find `Button` markup easier to read when you
    explicitly include the variant. This way, you or anyone else reading the code
    don't have to remember what the default `variant` is.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Button` demos: [https://material-ui.com/demos/buttons/](https://material-ui.com/demos/buttons/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Button` API documentation: [https://material-ui.com/api/button/](https://material-ui.com/api/button/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Button emphasis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `color` and `disabled` properties of `Button` let you control the emphasis
    of a button relative to its surroundings. For example, you can specify that a
    button should use the `primary` color value. The emphasis of a button is the cumulative
    result of the `variant` and `color` properties. You can adjust both until the
    button has the appropriate emphasis.
  prefs: []
  type: TYPE_NORMAL
- en: There is no *right* level of emphasis. Use what makes sense in the context of
    your application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s some code that shows the different color values that you can apply
    to `Button` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what you''ll see when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/66673a02-2bac-4bb2-a7a8-fee8db117207.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And if the `disabled` property is `true`, here''s what you''ll see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/025f7332-1043-4118-a333-f8a14852fa8b.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This example serves to illustrate the combinatorial result of the `variant`
    and `color` properties. Alternatively, you can completely disable buttons and
    yet still control the `variant` aspect of their emphasis (the `color` property
    has no effect on disabled buttons).
  prefs: []
  type: TYPE_NORMAL
- en: 'The order of most to least emphatic `variant` values is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`contained`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`outlined`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`text`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The order of most to least emphatic `color` values is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`primary`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`secondary`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`default`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By combining these two property values, you can control the emphasis of your
    buttons. Sometimes, you really need a button to stand out, so you can combine
    `contained` and `primary`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7de4ec33-441f-407b-96eb-a0350e70dd2e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want your button to not stand out at all, you can combine the `text`
    variant with `default` color:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95673d2f-8e54-48d5-b42a-056a095a514c.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If your button is placed in another Material-UI component, it can be difficult
    to ensure the correct color choice. For example, let''s say that you have some
    buttons in an `AppBar` component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `AppBar` color value is `default`, here''s what you''ll see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d78c451f-9ef4-408b-ba80-a1a31e41bbb0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This doesn''t actually look too bad because the buttons themselves are using
    the default color. But what happens if you change the `AppBar` color to `primary`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53b934f2-30b9-40f4-8efd-3966b2b26e89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `contained` variant is the only button that even comes close to looking
    like it belongs in the App Bar. Let''s modify the buttons so that they all use
    the `inherit` color property value, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your App Bar and buttons look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f58c6039-6817-4cc1-9457-4143d966bba8.png)'
  prefs: []
  type: TYPE_IMG
- en: The TEXT and OUTLINE buttons look much better now. They've inherited the theme
    font color from their parent component. The CONTAINED button actually looks worse,
    now that it's using `inherited` as its font color. This is because the background
    color of CONTAINED buttons doesn't change when inheriting colors. So instead,
    you have to change the color of CONTAINED buttons yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see whether we can automatically set the color of a CONTAINED button
    based on the color of its parent by implementing a function that returns the color
    to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can use this `function` when you''re setting the `color` of your `contained`
    buttons. Just make sure that you pass it the `color` of the parent as an argument,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you change your App Bar color to `primary`, here''s what your buttons
    look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7512c5fa-73b2-433c-98b3-34364772c8cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what your buttons look like if you change the App Bar color to `secondary`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d27de2e-683b-4231-a1ac-cc1c59d0d5ae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To quickly recap: TEXT and OUTLINED buttons can safely use `inherit` as a color.
    If you''re working with CONTAINED buttons, you need to take extra steps to use
    the correct color, like you did with the `buttonColor()` function.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Button` demos: [https://material-ui.com/demos/buttons/](https://material-ui.com/demos/buttons/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Button` API documentation: [https://material-ui.com/api/button/](https://material-ui.com/api/button/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AppBar` API documentation: [https://material-ui.com/api/app-bar/](https://material-ui.com/api/app-bar/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Toolbar` API documentation: [https://material-ui.com/api/toolbar/](https://material-ui.com/api/toolbar/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Link buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Material-UI `Button` components can also be used as links to other locations
    in your app. The most common example is using a button as a link to a route declared
    using `react-router`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that your application has three pages, and you need three buttons
    that link to each of them. You''ll probably need buttons to link to them from
    arbitrary places too, as the application grows. Here''s the code to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The Storybook code that sets up this example to run includes a `BrowserRouter`
    component. In your code, you'll need to include this component as a parent of
    any of your `Route` components.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the screen first loads, you''ll see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e5a9913-ccc1-419a-9eb8-6531161cacb4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on the Page 2 button, you''ll be taken to `/page2`, and the content
    will update accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f58395b-38bb-4f95-aecf-0bdf01e32aa2.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you use `react-router` as the router for your application, you can render
    links using the `Link` component from `react-router-dom`. Since you want to render
    Material-UI buttons in order to get the consistent Material-UI theme and user
    interaction behavior, you can''t render `Link` components directly. Instead, you
    can make the underlying `Button` component a `Link` component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: By using the `component` property, you can tell the `Button` component to apply
    styles and event handling logic to this component instead of the default. Then,
    any additional properties that you would normally pass to `Link` are set on the
    `Button` component—which forwards them to `Link`. For example, the `to` property
    isn't a `Button` property, so it gets passed to `Link`, which requires it in order
    to work.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One problem with this example is that there's no visual indication that a button
    links to the current URL. For example, when the app first loads the `/` URL, the
    Home button should stand out from the other buttons. One way to do this would
    be to change the `color` property to `primary` if the button is considered active.
  prefs: []
  type: TYPE_NORMAL
- en: You could use the `NavLink` component from `react-router-dom`. This component
    lets you set styles or class names that are only applied when the link is active.
    The challenge with doing this is that you only need to change a simple `Button`
    property when it is active. Having to maintain styles for active buttons seems
    like a bit much, especially if you want to make your UI easy to theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, you can create a button abstraction that uses `react-router` tools
    to `render` the appropriate `Button` property when it''s active, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `NavButton` component uses `Switch` and `Route` components to determine
    the active route. It does this by comparing the `to` property passed to `NavButton`
    against the current URL. If a match is found, the `Button` component is rendered
    with the `color` property set to `primary`. Otherwise, no color is specified (if
    the first `Route` in `Switch` doesn''t match, the second `Route` matches everything).
    Here''s what the new component looks like in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the screen looks like when it first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c51b0917-d769-46e3-90f2-a7d89b2debdf.png)'
  prefs: []
  type: TYPE_IMG
- en: Because the initial URL is `/`, and the first `NavButton` component has a `to`
    property of `/`, the Home button color is marked as `primary`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Button` demos: [https://material-ui.com/demos/buttons/](https://material-ui.com/demos/buttons/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Button` API documentation: [https://material-ui.com/api/button/](https://material-ui.com/api/button/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Router Guide: [https://reacttraining.com/react-router/web/guides/quick-start](https://reacttraining.com/react-router/web/guides/quick-start)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Floating actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some screens in your application will have one primary action. For example,
    if you're on a screen that lists items, the primary action might be to add a new
    item. If you're on an item details page, the primary action might be to edit the
    item. Material-UI provides a `Fab` component (floating action button) to show
    primary screen actions in a prominent way.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The common case for floating action buttons is to show the user a round button
    with an icon representing the action to perform, positioned in the bottom right
    of the screen. Also, the position of floating action buttons is `fixed`, meaning
    that as the user scrolls down the page, the primary action is always visible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s write some code to `position` a floating action button at the bottom
    right of the screen that indicates an add action, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When you load the screen, you''ll see the following in the bottom right-hand
    corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8eed2d83-68f2-4224-b463-781c8bd0399f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The component for this screen has a `fabColor` property that is used to set
    the color of the `Fab` component. Here''s what the `primary` color looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/915e8698-f21d-4f49-8f5e-b104389dffed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, here''s what the floating action button looks like with `secondary`
    as the color:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c430b6f-6209-45a9-8f57-c10f5716c3d0.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Fab` component is very similar to a `Button` component. In fact, you used
    to use `Button` to render floating action buttons, using the `fab` variant. The
    rounded styling of the button is handled by `Fab`. You just need to support the
    icon and any other button properties, such as `onClick` handlers. Additionally,
    you can include text in your floating action buttons. If you do, you should use
    the `extended` variant so that the shape of the button is styled correctly (flat
    top and bottom instead of rounded).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create a small abstraction for `Fab` components that applies the `fab`
    style and uses the correct variant. Since the `extended` variant is only useful
    when there's text in the button, you shouldn't have to remember to set it every
    time you want to use it. This can be especially confusing if your application
    has both icon and icon plus text floating action buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the code to implement the new `Fab` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `className` property is set in the same way as before. The `variant` property
    is set to extended when `isExtended` is `true`. To figure this out, it uses the
    `React.Children.toArray()` function to convert the `children` property into a
    plain array. Then, the `find()` method looks for any text elements. If one is
    found, `isExtended` will be `true` and the `extended` variant is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s how the new `ExtendedFab` button can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Add`  text is placed before the `AddIcon` component. This `ExtendedFab` component
    has two children, and one of them is text, which means that the `extended` variant
    will be used. Here''s what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/52f74cee-f4cd-4d90-95ad-63d8a2cfde77.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Button` demos: [https://material-ui.com/demos/buttons/](https://material-ui.com/demos/buttons/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fab` API documentation: [https://material-ui.com/api/fab/](https://material-ui.com/api/fab/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Icon buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you need a button that's just an icon. This is where the `IconButton`
    component comes in handy. You can pass it any icon component as a child, and then
    you have an icon button.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Icon buttons are especially useful when you're working with restricted screen
    real estate or when you want to visually show the toggled state of something.
    For example, it might be easier for a user to toggle the state of a microphone
    if the enabled/disabled state indicates the actual microphone.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s build on this idea and implement toggle controls for the microphone
    and volume in an app, using icon buttons. Here''s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'When you first load the screen, here''s what you''ll see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/38a82707-4b3d-4300-b0e4-756e234025b5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on both icon buttons, here''s what you''ll see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c5eec29-3c62-4483-aa40-4632a88523e0.png)'
  prefs: []
  type: TYPE_IMG
- en: No matter the state of the microphone or volume, the user can still have a visual
    indication of the item and its state.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The component for this screen maintains two pieces of state: `mic` and `volume`.
    Both of these are Booleans that control the icon that''s displayed in the `IconButton`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, based on these states, the icon is swapped as the `state` changes, giving
    useful visual feedback to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, the component for this screen takes an `iconColor` property,
    which can be either `default`, `primary`, or `secondary`. Here''s what the `primary`
    color looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/874be03e-b127-4d30-a750-52ca0048f937.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Button` demos: [https://material-ui.com/demos/buttons/](https://material-ui.com/demos/buttons/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IconButton` API documentation: [https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Button sizes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Material-UI buttons support tee shirt-style sizing. Rather than try to find
    the perfect size for your buttons, you can use one of the predefined sizes that
    comes closest to what you need.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you need to adjust the size of your buttons, you can use `small`, `medium`
    (the default), or `large`. Here''s an example of how to set the `size` of a `Button`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the various sizes look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/188f56ea-4786-456c-915f-b35471092868.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The distinction between sizes is greatest between medium and large. Using a
    large button, in conjunction with other `Button` properties, such as `color` and `Icons`,
    can really make a button stand out.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The one downside to using tee shirt sizes with buttons is when you combine text
    and icon images. The icon doesn't scale the same as the text, so the button never
    looks quite right, unless the medium default size is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement a button abstraction that makes it easier to use text buttons
    or icon buttons that can be resized consistently. Here''s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the three buttons on the screen look like when the `size` property
    is set to `small`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1261dea1-0dd8-475a-984b-caf142057f2b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And here''s the `large` size:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1a496e8-71c5-4662-a012-5ae98aba6d0a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s break down what''s going on in the `MyButton` component. It expects
    a single `child` node, which it gets by turning the `children` property into an
    array and assigning the first element to the `child` constant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The idea is to render the appropriate `Button` element, depending on the `child`
    element and the `fab` property. Here''s how the correct component is assigned
    to `ButtonComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If the `child` is an element and the `fab` property is true, then the `Fab`
    component is used. If the child is an element and `fab` is false, `IconButton`
    is used. Otherwise, `Button` is used. This means that you can pass either a valid
    icon element or text as a child to `MyButton`. Setting the size on any buttons
    rendered with this component will be consistent.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Button` demos: [https://material-ui.com/demos/buttons/](https://material-ui.com/demos/buttons/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Button` API documentation: [https://material-ui.com/api/button/](https://material-ui.com/api/button/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IconButton` API documentation: [https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fab` API documentation: [https://material-ui.com/api/fab/](https://material-ui.com/api/fab/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
