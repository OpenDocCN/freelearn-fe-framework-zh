- en: Component Composition with TypeScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 TypeScript 的组件组合
- en: 'The components you write with TypeScript are at their best when kept short
    and simple. However, a short and simple component will hardly make a full-blown
    app. How do you compose components performing specific tasks and combine them
    to make a usable application? This is what this chapter is all about. We will
    discuss the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您用 TypeScript 编写的组件在保持简短和简单时表现最佳。然而，一个简短和简单的组件几乎不能构成一个完整的应用程序。您如何组合执行特定任务的组件并将它们组合成一个可用的应用程序？这正是本章的主题。我们将讨论以下主题：
- en: Component hierarchy
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件层次
- en: Communication between components at different levels
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同级别组件之间的通信
- en: We will also see some hands-on examples on how components are composed and how
    these composed components communicate with each other.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将看到一些实际操作的例子，展示组件是如何组合的，以及这些组合组件是如何相互通信的。
- en: Component composability
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件可组合性
- en: Composability is the most outstanding feature and the selling point of components.
    As a matter of fact, this is what makes components what they are. Not just on
    the web but whenever an entity is referred to as a component, then it has a tendency
    to be composed with other components.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 可组合性是组件最突出的特性和卖点。事实上，这就是组件之所以成为组件的原因。不仅限于网络，无论何时一个实体被称为组件，它都有与其他组件组合的倾向。
- en: While some components can function on their own, most depend implicitly or explicitly on
    other stand-alone components to achieve a given task. TypeScript and templates
    greatly simplify composition in Angular, enabling it to put the pieces of our
    app together in a seamless and an easy-to-maintain way.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然一些组件可以独立运行，但大多数组件隐式或显式地依赖于其他独立组件以完成特定任务。TypeScript 和模板大大简化了 Angular 中的组合，使其能够以无缝且易于维护的方式将我们的应用程序的各个部分组合在一起。
- en: Composition happens hierarchically; hence, most component relationships are
    either parent-to-child or child-to-parent. It is also important to keep in mind
    that if such a parent-child relationship exists, then some components might be
    siblings to others, depending on the architecture.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 组合是按层次发生的；因此，大多数组件关系要么是父到子，要么是子到父。还重要的是要记住，如果存在这样的父子关系，那么一些组件可能与其他组件是兄弟关系，这取决于架构。
- en: Hierarchical composition
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 层次组合
- en: A composed component has a parental relationship with another component, either
    as the parent or as a child. There is a tendency for a nested chain; hence, nothing
    stops a child component from having a grandparent or a parent component from having
    a grandchild component.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个组合组件与另一个组件之间存在父子关系，要么是父组件，要么是子组件。存在嵌套链的倾向；因此，没有任何东西阻止子组件拥有曾祖父母或父组件拥有孙子组件。
- en: 'The following screenshot illustrates this better:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图更好地说明了这一点：
- en: '![](img/453d62b1-475d-435f-8b61-67100bb55440.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/453d62b1-475d-435f-8b61-67100bb55440.png)'
- en: 'Here, the entry `App` component has two child components: `CommentList` and
    `CommentForm`. `CommentList` also has a child, `CommentItem`. It''s okay to say
    that `CommentItem` is the grandchild of `App`. It''s also okay to say that `CommentList`
    and `CommentForm` are siblings.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，入口 `App` 组件有两个子组件：`CommentList` 和 `CommentForm`。`CommentList` 也有一个子组件，`CommentItem`。可以说
    `CommentItem` 是 `App` 的曾孙组件。也可以说 `CommentList` 和 `CommentForm` 是兄弟组件。
- en: 'The thick arrows show how the data flows from the parent components down to
    the child components, while the dotted arrows show how the data is pushed as events
    from the child components to the parent components. This illustration of data
    flowing down and moving up leads us to our next topic for discussion: component
    communication.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 厚箭头显示了数据从父组件流向子组件的方式，而虚线箭头显示了数据作为事件从子组件推送到父组件的方式。这种数据向下流动和向上移动的说明引出了我们接下来要讨论的主题：组件通信。
- en: Component communication
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件通信
- en: Based on the diagram that we saw previously, let's see some examples in action.
    The recommended place to start is the data flow from parent to child.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们之前看到的图，让我们看看一些实际操作的例子。推荐的起点是从父组件到子组件的数据流。
- en: Parent-child flow
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 父子流
- en: 'Jump right in and create a new Angular project using the Angular CLI. With
    that done, update `AppComponent` with the following content:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 直接使用 Angular CLI 创建一个新的 Angular 项目。完成此操作后，使用以下内容更新 `AppComponent`：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The key difference is that I have added an array of comments. These comments
    are what we intend to pass down to the child component.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 关键区别在于我添加了一个注释数组。这些注释就是我们打算传递给子组件的内容。
- en: 'Let''s create `CommentListComponent` using the Angular CLI generate command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Angular CLI生成命令创建`CommentListComponent`：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The created component is meant to receive a list of comments from the parent
    component, `AppComponent`. When it receives this component, it can iterate over
    them and print them on the screen:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的组件旨在从父组件`AppComponent`接收评论列表。当它接收到这个组件时，它可以遍历它们并在屏幕上打印出来：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `Input` TypeScript decorator is used to specify that a class property will
    be set by a parent component. Hence, we do not need to set any values on `CommentListComponent.comments`,
    but we need to wait until a value is passed down to it via `AppComponent`. Remember
    `AppComponent.comments` exists as well, so we can use property binding to pass
    `AppComponent.comments` to  `CommentListComponent.comments` in `app.component.html`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`Input` TypeScript装饰器用于指定一个类属性将由父组件设置。因此，我们不需要在`CommentListComponent.comments`上设置任何值，但我们需要等待通过`AppComponent`向下传递给它一个值。记住`AppComponent.comments`也存在，所以我们可以使用属性绑定在`app.component.html`中将`AppComponent.comments`传递给`CommentListComponent.comments`：'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `comments` array is the value passed to the `[comments]` attribute. This
    attribute is what we created and decorated in the `CommentListComponent` component.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`comments`数组是传递给`[comments]`属性的值。这个属性就是我们创建并装饰在`CommentListComponent`组件中的属性。'
- en: 'Now you have an array of comments on the parent component (`AppComponent`);
    you have passed this component down to the child component (`CommentListComponent`)
    via property binding, and you''re receiving the list of comments using the `Input`
    decorator. The next thing you need to do is display the received comments on `comment-list.component.html`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在父组件（`AppComponent`）上有一个评论数组；你已经通过属性绑定将这个组件传递给子组件（`CommentListComponent`），并且你正在使用`Input`装饰器接收评论列表。接下来你需要做的是在`comment-list.component.html`上显示接收到的评论：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `*ngFor` directive is used to iterate over the comments, get each comment,
    and display a comment on our view.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`*ngFor`指令来遍历评论，获取每个评论，并在我们的视图中显示评论。
- en: 'This is what the output looks like:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是输出看起来像什么：
- en: '![](img/ba7abb11-cdac-4852-a474-b5a22ea57684.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba7abb11-cdac-4852-a474-b5a22ea57684.png)'
- en: 'You can go a level deeper to create a comment item component, which just takes
    a single comment and displays it. Create another component:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以进一步创建一个评论项组件，它只接受一个评论并显示它。创建另一个组件：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add a decorated comment property, which will receive the comment item from
    the comment list:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个装饰过的评论属性，它将接收来自评论列表的评论项：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Send the comment down via the `comment list` parent component:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`comment list`父组件向下发送评论：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `comment` template variable doesn't have to exist on the component class.
    It's procured from the iterator.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`comment`模板变量不需要在组件类中存在。它是从迭代器中获取的。'
- en: 'Then, you can simply render the comment item on the `comment-item.component.html`
    template:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以在`comment-item.component.html`模板上简单地渲染评论项：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Adding another child illustrates nesting. `App | comment list | comment item`
    is the flow. `App` is the parent of `comment list` and the grandparent of `comment
    item`. `comment list` is the parent of `comment item`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 添加另一个子组件来展示嵌套。`App | comment list | comment item`是流程。`App`是`comment list`的父组件，也是`comment
    item`的祖父组件。`comment list`是`comment item`的父组件。
- en: 'Head to the browser and see that, while nothing actually changes, our code
    is structured better:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 前往浏览器查看，尽管实际上没有变化，但我们的代码结构更好：
- en: '![](img/52f7ff63-9805-4065-93e8-79ad575cba53.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52f7ff63-9805-4065-93e8-79ad575cba53.png)'
- en: Intercepting property changes
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拦截属性更改
- en: 'Sometimes, you may want to do some tweaking on the data flowing into a child
    component from the parent component. You can use getters and setters to intercept
    the data and manipulate it before setting it on the view. Let''s see that in play
    by capitalizing the author names before they are set:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你可能想要对从父组件流向子组件的数据进行一些调整。你可以使用getter和setter来拦截数据，并在将其设置到视图中之前对其进行操作。让我们通过在设置之前将作者姓名大写来展示这个过程：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The decorator is no longer set on the value property but on the setter property.
    This property receives the comment from the comment list—the parent component.
    It then overrides the author property with an uppercase version of the author's
    name. The getter just returns the comment, so you can access it from the view.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器不再设置在值属性上，而是设置在setter属性上。这个属性接收来自评论列表的评论——父组件。然后它用作者姓名的大写版本覆盖作者属性。getter只是返回评论，所以你可以从视图中访问它。
- en: 'The following is how it looks in the browser:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是它在浏览器中的样子：
- en: '![](img/fb9adce2-7254-4c30-9bbe-d16ff3140fa3.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb9adce2-7254-4c30-9bbe-d16ff3140fa3.png)'
- en: Child–parent flow
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子组件-父组件流
- en: In this flow, rather than passing data down, the data needs to flow up the chain.
    Most of the time, the data flows up based on the events triggered on the child
    by the user and we try to notify the parent about that event. Hence, Angular allows
    you to listen to the child events on the parent component and to act on the events.
    These events can be characterized with the data as the payload.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个流程中，而不是向下传递数据，数据需要向上流动。大多数时候，数据基于用户在子组件上触发的事件向上流动，我们试图通知父组件。因此，Angular 允许你在父组件上监听子组件的事件并对事件做出反应。这些事件可以用作为有效负载的数据来描述。
- en: 'Let''s start by registering a double-click event on each comment item via the
    comment list component:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先通过注释列表组件在每个注释项上注册一个双击事件：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, you need to add the `showComment` handler on the component class to handle
    this event:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要在组件类上添加`showComment`处理程序来处理此事件：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The handler uses `onShowComment`, which is decorated as an output property with
    the `Output` decorator to emit an event of the `EventEmitter` type. This emitted
    event is what the parent component will need to listen to. Note how the comment
    is passed to the `emit` method; this shows how we can pass data from the child
    to the parent.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序使用`onShowComment`，它被`Output`装饰器装饰为一个输出属性以发射`EventEmitter`类型的事件。这个发射的事件是父组件需要监听的事件。注意，注释是如何传递给`emit`方法的；这显示了我们可以如何从子组件传递数据到父组件。
- en: 'Next, we listen to the parent component (`App`) for this event to occur:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们监听父组件（`App`）以触发此事件：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that the event binding annotation, `()`, is used for events, in this case,
    `onShowComment`. The binding refers to `EventEmitter`, while its value refers
    to the handler method that is yet to be created. The handler method is called,
    and we pass the value data from the child component as `$event`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，事件绑定注解`()`用于事件，在这种情况下是`onShowComment`。绑定指的是`EventEmitter`，而其值指的是尚未创建的处理程序方法。处理程序方法被调用，并且我们通过`$event`传递来自子组件的值数据。
- en: 'Here is the implementation of the handler:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是处理程序的实现：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The method just alerts the comment as shown in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法正如以下截图所示只是弹出一个注释：
- en: '![](img/536c136e-4205-42ba-88e1-03897066c949.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/536c136e-4205-42ba-88e1-03897066c949.png)'
- en: Accessing properties and methods of a child via a parent component
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过父组件访问子组件的属性和方法
- en: 'Other than data flowing in and the event pushed up, there are other strategies
    for communication. We can access child members from the parent component using
    template variables. Let''s create a counter component to serve as our example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 除了数据流入和事件向上推送之外，还有其他通信策略。我们可以使用模板变量从父组件访问子组件成员。让我们创建一个计数器组件作为我们的例子：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now add a counter variable and initialize it to zero:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在添加一个计数器变量并将其初始化为零：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Also, there are two methods to just increment or decrement the counter. Note
    that nothing calls these methods; there are no buttons with an event attached
    to increment or decrement. What we want to do is access these methods from the
    parent component.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有两种方法仅用于增加或减少计数器。请注意，没有任何东西调用这些方法；没有按钮与事件相关联以增加或减少。我们想要做的是从父组件访问这些方法。
- en: 'To do so, add the component to the template with a template variable:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，将组件添加到模板中并使用模板变量：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`#counter` is a variable that is accessible from anywhere in the template.
    Hence, you can use it as an object to access the methods and properties of the
    counter component:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`#counter`是一个在模板的任何地方都可以访问的变量。因此，你可以使用它作为一个对象来访问计数器组件的方法和属性：'
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This shows a button counter with buttons that we can click to increment or
    decrement the counter:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了带有我们可以点击以增加或减少计数器的按钮的按钮计数器：
- en: '![](img/d175e8fa-a9ae-4ae4-840e-66b381d81a10.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d175e8fa-a9ae-4ae4-840e-66b381d81a10.png)'
- en: Accessing child members with ViewChild
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`ViewChild`访问子组件成员
- en: 'If the template variables don''t feel natural, you can achieve the same behavior
    using `ViewChild`. This allows you to access the child as a variable on the class
    and not on the template:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模板变量感觉不自然，你可以使用`ViewChild`来实现相同的行为。这允许你将子组件作为类上的一个变量访问，而不是在模板上：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We import the counter component and register it as a child of this component
    using `ViewChild`. We then create a `counterComponent` variable of the `CounterComponent` type.
    We can then use this variable in our template:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入计数器组件，并使用`ViewChild`将其注册为该组件的子组件。然后我们创建一个`CounterComponent`类型的`counterComponent`变量。然后我们可以在我们的模板中使用这个变量：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Summary
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Now you can start using components as building blocks by writing small, maintainable
    components and making them interact with each other using composition. In this
    chapter, you learned what hierarchical inheritance means in component architectures, how
    data flows up and down hierarchical trees, and how components interact with each
    other.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以通过编写小型、可维护的组件并将它们通过组合相互交互来开始使用组件作为构建块。在本章中，您学习了在组件架构中分层继承的含义，数据如何在分层树中上下流动，以及组件之间如何相互交互。
- en: In the next chapter, we will explore a more centric interaction strategy using
    services. This will help us create logic that components will share, hence keeping
    our codebase very DRY (Don't Reapeat Yourself).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨使用服务的一个更中心化的交互策略。这将帮助我们创建组件将共享的逻辑，从而保持我们的代码库非常DRY（不要重复自己）。
