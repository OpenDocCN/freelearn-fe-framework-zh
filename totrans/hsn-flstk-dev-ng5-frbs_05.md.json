["```js\nlet observable = Rx.Observable.from([1, 2, 3]);\n```", "```js\nlet subscription = observable.subscribe(x => console.log(x));\n```", "```js\nnull, and this will be populated with the latest user model:Â \n```", "```js\nprivate subject: BehaviorSubject<User> = new BehaviorSubject(null);\n```", "```js\npublic saveUser(user: User){\n    this.subject.next(user);\n}\n```", "```js\npublic getSavedUser(): BehaviorSubject<User>{\n    return this.subject;\n}\n```", "```js\nngOnInit() {\n    this.user = this.userService.getSavedUser().getValue();\n}\n```", "```js\nimport {Injectable} from '@angular/core';\nimport {AngularFireDatabase} from 'angularfire2/database';\nimport {User} from './user';\nimport {USERS_CHILD} from './database-constants';\nimport {Observable} from 'rxjs/Observable';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\n/**\n * User service\n *\n */\n@Injectable()\nexport class UserService {\n\n  private subject: BehaviorSubject<User> = new \n  BehaviorSubject(null);\n\n  /**\n   * Constructor\n   *\n   * @param {AngularFireDatabase} fireDb provides the functionality \n   for Firebase Database\n   */\n   constructor(private fireDb: AngularFireDatabase) {\n  }\n\n  public addUser(user: User): void {\n    this.fireDb.object(`${USERS_CHILD}/${user.uid}`).set(user);\n    this.saveUser(user);\n  }\n\n  public getUser(uid: string): Observable<User> {\n    return this.fireDb.object<User>\n   (`${USERS_CHILD}/${uid}`).valueChanges();\n  }\n\n  public saveUser(user: User) {\n    this.subject.next(user);\n  }\n\n  public getSavedUser(): BehaviorSubject<User> {\n    return this.subject;\n  }\n\n  public updateEmail(user: User, newEmail: string): void {\n    this.fireDb.object(`${USERS_CHILD}/'${user.uid}`).update({email: \n    newEmail});\n    this.saveUser(user);\n  }\n\n  public updateMobile(user: User, mobile: string): void {\n\n  this.fireDb.object(`${USERS_CHILD}/'${user.uid}`).update({mobile: \n  mobile});\n    this.saveUser(user);\n  }\n\n  public updateName(user: User, name: string): void {\n    this.fireDb.object(`${USERS_CHILD}/'${user.uid}`).update({name: \n    name});\n    this.saveUser(user);\n  }\n\n}\n```", "```js\n@import \"../../shared/shared\";\n.chat-message-main-container {\n}\n```", "```js\n.user-profile{\n   margin-top: 10px;\n}\n\n.user-profile-name{\n   @extend .user-profile;\n   border-color: green;\n}\n```", "```js\n@mixin message-pointer($rotate , $skew) {\n    transform: rotate($rotate) skew($skew);\n    -moz-transform: rotate($rotate) skew($skew);\n    -ms-transform: rotate($rotate) skew($skew);\n    -o-transform: rotate($rotate) skew($skew);\n    -webkit-transform: rotate($rotate) skew($skew);\n}\n```", "```js\n<div class=\"user-profile\" *ngIf=\"user\">\n</div>\n```", "```js\n<div class=\"user-profile-name\">\n    <label>Name: </label>\n    <div class=\"user-profile-name-value\">{{user?.name}}</div>\n    <button (click)=\"onNameChange()\" type=\"button\" class=\"btn btn-\n    default btn-sm user-profile-name-btn\">\n    Edit\n    </button>\n</div>\n```", "```js\n<div class=\"user-profile\" *ngIf=\"user\">\n    <div class=\"person-icon\">\n        <img [src]=\"profileImage\" style=\"max-width: 100%; max-height:  \n         100%;\">\n    </div>\n    <div class=\"user-profile-name\">\n        <label>Name: </label>\n        <div class=\"user-profile-name-value\">{{user?.name}}</div>\n        <button (click)=\"onNameChange()\" data-toggle=\"modal\" data-\n         target=\"#editModal\" type=\"button\"\n         class=\"btn btn-default btn-sm user-profile-name-btn\">\n            Edit\n        </button>\n    </div>\n    <div class=\"user-profile-email\">\n        <label>Email: </label>\n        <div class=\"user-profile-email-value\">{{user?.email}}</div>\n        <button (click)=\"onEmailChange()\" data-toggle=\"modal\" data-\n        target=\"#editModal\" type=\"button\"\n        class=\"btn btn-default btn-sm\">\n            Edit\n        </button>\n    </div>\n    <div class=\"user-profile-mobile\">\n        <label>Mobile: </label>\n        <div class=\"user-profile-mobile-value\">{{user?.mobile}}</div>\n        <button (click)=\"onMobileChange()\" data-toggle=\"modal\" data- \n         target=\"#editModal\" type=\"button\"\n         class=\"btn btn-default btn-sm user-profile-mobile-btn\">\n            Edit\n        </button>\n    </div>\n\n    <div class=\"user-profile-password\">\n        <label>Password: </label>\n        <div class=\"user-profile-password-value\">****</div>\n        <button (click)=\"onPasswordChange()\" data-toggle=\"modal\" data-\n        target=\"#editModal\" type=\"button\"\n        class=\"btn btn-default btn-sm user-profile-password-btn\">\n            Edit\n        </button>\n    </div>\n    <div class=\"user-profile-btn\">\n        <button type=\"button\" (click)='onLogout()' class=\"btn btn-\n        info\">LOGOUT</button>\n    </div>\n</div>\n```", "```js\n.user-profile{\n    width: 50%;\n    margin-left: 24px;\n    margin-top: 10px;\n    .user-profile-name{\n        text-align: left;\n        margin-top: 10px;\n        .user-profile-name-value{\n            display: inline-block;\n            margin-left: 10px;\n        }\n        .user-profile-name-btn{\n            margin-left: 100px;\n        }\n    }\n}\n```", "```js\n.user-profile{\n    width: 50%;\n    margin-left: 24px;\n    margin-top: 10px;\n    .user-profile-name{\n        text-align: left;\n        margin-top: 10px;\n        .user-profile-name-value{\n            display: inline-block;\n            margin-left: 10px;\n        }\n        .user-profile-name-btn{\n            margin-left: 100px;\n        }\n    }\n    .user-profile-email{\n        text-align: left;\n        margin-top: 20px;\n        .user-profile-email-value{\n            display: inline-block;\n            margin-left: 10px;\n        }\n    }\n    .user-profile-mobile{\n        text-align: left;\n        margin-top: 20px;\n        .user-profile-mobile-value{\n            display: inline-block;\n            margin-left: 10px;\n        }\n        .user-profile-mobile-btn{\n            margin-left: 110px;\n        }\n    }\n    .user-profile-password{\n        text-align: left;\n        margin-top: 20px;\n        .user-profile-password-value{\n            display: inline-block;\n            margin-left: 10px;\n        }\n        .user-profile-password-btn{\n            margin-left: 154px;\n        }\n    }\n    .user-profile-btn{\n        margin-top: 20px;\n    }\n}\n```", "```js\nexport class UserProfileComponent implements OnInit {\n    private user: User;\n    constructor(private authService: AuthenticationService,\n                private userService: UserService,\n                private router: Router) {\n    }\n    ngOnInit() {\n        this.user = this.userService.getSavedUser().getValue();\n    }\n}\n```", "```js\nimport {Component, OnInit, ViewChild} from '@angular/core';\nimport {AuthenticationService} from '../../services/authentication.service';\nimport {Router} from '@angular/router';\nimport {User} from '../../services/user';\nimport {UserService} from '../../services/user.service';\nimport {EditDialogComponent} from '../../edit-dialog/edit-dialog.component';\nimport {EditType} from '../../edit-dialog/edit-details';\n\n@Component({\n    selector: 'app-friends-userprofile',\n    styleUrls: ['user-profile.component.scss'],\n    templateUrl: 'user-profile.component.html'\n})\nexport class UserProfileComponent implements OnInit {\n\n    profileImage: any = '../../../assets/images/person_edit.png';\n\n    user: User;\n\n    @ViewChild(EditDialogComponent) editDialog: EditDialogComponent;\n\n    constructor(private authService: AuthenticationService,\n                private userService: UserService,\n                private router: Router) {\n    }\n\n    ngOnInit() {\n        this.user = this.userService.getSavedUser().getValue();\n    }\n\n    onLogout(): void {\n        this.authService.signout().then(() => {\n            this.navigateToLogin();\n        });\n    }\n\n    navigateToLogin() {\n        this.router.navigateByUrl('/app-friends-login');\n    }\n}\n```", "```js\npublic updateName(user: User, name: string): void {\n    this.fireDb.object(`${USERS_CHILD}/'${user.uid}`).update({name: \n    name});\n    this.saveUser(user);\n}\n```", "```js\npublic changeEmail(email: string): Promise<any> {\n    return this.angularFireAuth.auth.currentUser.updateEmail(email);\n}\n```", "```js\npublic updateEmail(user: User, newEmail: string): void {\n    this.fireDb.object(`${USERS_CHILD}/'${user.uid}`).update({email: \n    newEmail});\n    this.saveUser(user);\n}\n```", "```js\nimport {Injectable} from '@angular/core';\nimport {AngularFireAuth} from 'angularfire2/auth';\n\n/**\n * Authentication service\n *\n */\n@Injectable()\nexport class AuthenticationService {\n\n    /**\n     * Constructor\n     *\n     * @param {AngularFireAuth} angularFireAuth provides the \n       functionality related to authentication\n     */\n    constructor(private angularFireAuth: AngularFireAuth) {\n    }\n\n    public signup(email: string, password: string): Promise<any> {\n        return \n        this.angularFireAuth.auth.createUserWithEmailAndPassword(\n        email, password);\n    }\n\n    public login(email: string, password: string): Promise<any> {\n        return this.angularFireAuth.auth.signInWithEmailAndPassword(\n        email, password);\n    }\n\n    public resetPassword(email: string): Promise<any> {\n        return \n        this.angularFireAuth.auth.sendPasswordResetEmail(email);\n    }\n\n    public isAuthenticated(): boolean {\n        const user = this.angularFireAuth.auth.currentUser;\n        return user ? true : false;\n    }\n\n    public signout(): Promise<any>{\n        return this.angularFireAuth.auth.signOut();\n    }\n\n    public changeEmail(email: string): Promise<any> {\n        return \n        this.angularFireAuth.auth.currentUser.updateEmail(email);\n    }\n\n    public changePassword(password: string): Promise<any> {\n        return \n        this.angularFireAuth.auth.currentUser.updatePassword\n        (password);\n    }\n}\n```", "```js\nimport {Injectable} from '@angular/core';\nimport {AngularFireDatabase} from 'angularfire2/database';\nimport {User} from './user';\nimport {USERS_CHILD} from './database-constants';\nimport {Observable} from 'rxjs/Observable';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\n/**\n * User service\n *\n */\n@Injectable()\nexport class UserService {\n\n  private subject: BehaviorSubject<User> = new BehaviorSubject(null);\n\n  /**\n   * Constructor\n   *\n   * @param {AngularFireDatabase} fireDb provides the functionality \n     for Firebase Database\n   */\n  constructor(private fireDb: AngularFireDatabase) {\n  }\n\n  public addUser(user: User): void {\n    this.fireDb.object(`${USERS_CHILD}/${user.uid}`).set(user);\n    this.saveUser(user);\n  }\n\n  public getUser(uid: string): Observable<User> {\n    return this.fireDb.object<User>\n   (`${USERS_CHILD}/${uid}`).valueChanges();\n  }\n\n  public saveUser(user: User) {\n    this.subject.next(user);\n  }\n\n  public getSavedUser(): BehaviorSubject<User> {\n    return this.subject;\n  }\n\n  public updateEmail(user: User, newEmail: string): void {\n    this.fireDb.object(`${USERS_CHILD}/'${user.uid}`).update({email:  \n    newEmail});\n    this.saveUser(user);\n  }\n\n  public updateMobile(user: User, mobile: string): void {\n\n  this.fireDb.object(`${USERS_CHILD}/'${user.uid}`).update({mobile:   \n   mobile});\n    this.saveUser(user);\n  }\n\n  public updateName(user: User, name: string): void {\n    this.fireDb.object(`${USERS_CHILD}/'${user.uid}`).update({name: \n    name});\n    this.saveUser(user);\n  }\n\n}\n```", "```js\n<div *ngIf=\"isVisible\" class=\"modal fade show in danger\" id=\"editModal\" role=\"dialog\" />\n```", "```js\n<div class=\"modal-dialog\">\n    <form name=\"form\" (ngSubmit)=\"onSubmit(editFormData)\" \n     #editFormData='ngForm'>\n</form>\n</div>\n```", "```js\n<p>This will change your {{bodyTitle}}</p>\n```", "```js\n<div *ngIf=\"isVisible\" class=\"modal fade in\" id=\"editModal\" role=\"dialog\">\n    <div class=\"modal-dialog\">\n        <form name=\"form\" (ngSubmit)=\"onSubmit(editFormData)\" \n        #editFormData='ngForm'>\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <button type=\"button\" class=\"close\" data-\n                    dismiss=\"modal\">&times;</button>\n                    <h4 class=\"modal-title\">{{titleMessage}}</h4>\n                </div>\n                <div class=\"modal-body\">\n                    <p>This will change your {{bodyTitle}}</p>\n\n                    <div class=\"form-group\">\n                        <label for=\"editDetail\">{{bodyLabel}}\n                        </label>\n                        <input type=\"text\" class=\"form-control\" \n                        name=\"editValue\" (ngModel)=\"editValue\"\n                        id=\"editDetail\"/>\n                    </div>\n                </div>\n                <div class=\"modal-footer form-group\">\n                    <button type=\"submit\" class=\"btn btn-default\" \n                   [disabled]=\"!editFormData.form.valid\">\n                    Edit\n                    </button>\n                    <button type=\"button\" class=\"btn btn-default\" \n                    data-dismiss=\"modal\" \n                   (click)=\"hide()\">Close</button>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>\n```", "```js\npublic setTitle(title: string): EditDialogComponent {\n    this.titleMessage = title;\n    return this;\n}\n```", "```js\npublic show() {\n    this.isVisible = true;\n}\n\npublic hide() {\n    this.isVisible = false;\n}\n```", "```js\nimport {Component, ViewChild} from '@angular/core';\nimport {AuthenticationService} from '../services/authentication.service';\nimport {UserService} from '../services/user.service';\nimport {User} from '../services/user';\nimport {EditDetails, EditType} from './edit-details';\n\n@Component({\n   selector: 'app-edit-dialog',\n   templateUrl: './edit-dialog.component.html',\n})\nexport class EditDialogComponent {\n   isVisible: boolean;\n\n   titleMessage: string;\n\n   bodyTitle: string;\n\n   bodyLabel: string;\n\n   editType: EditType;\n\n   editDetails: EditDetails;\n\n   constructor(private authService: AuthenticationService,\n            private userService: UserService) {\n      this.editDetails = new EditDetails(authService, userService);\n   }\n\n   public setTitle(title: string): EditDialogComponent {\n      this.titleMessage = title;\n      return this;\n   }\n\n   public setBodyTitle(bodyTitle: string): EditDialogComponent {\n      this.bodyTitle = bodyTitle;\n      return this;\n   }\n\n   public setBodyLabel(bodyLabel: string): EditDialogComponent {\n      this.bodyLabel = bodyLabel;\n      return this;\n   }\n\n   public setEditType(editType: EditType): EditDialogComponent {\n      this.editType = editType;\n      return this;\n   }\n\n   public show() {\n      this.isVisible = true;\n   }\n\n   public hide() {\n      this.isVisible = false;\n   }\n\n   private onSubmit(editFormData): void {\n      this.editDetails.edit(this.editType, \n      editFormData.value.editValue);\n   }\n}\n```", "```js\nimport {AuthenticationService} from '../services/authentication.service';\nimport {UserService} from '../services/user.service';\nimport {User} from '../services/user';\n\nexport enum EditType {\n   NAME,\n   EMAIL,\n   MOBILE,\n   PASSWORD\n}\n\nexport class EditDetails {\n\n   constructor(private authService: AuthenticationService,\n            private userService: UserService) {\n   }\n\n   public edit(editType: EditType, value: string) {\n      switch (editType) {\n         case EditType.NAME:\n            this.editName(value);\n            break;\n\n         case EditType.EMAIL:\n            this.editEmail(value);\n            break;\n\n         case EditType.MOBILE:\n            this.editMobile(value);\n            break;\n\n         case EditType.PASSWORD:\n            this.editPassword(value);\n            break;\n      }\n   }\n\n   private editName(name: string) {\n      const user: User = this.userService.getSavedUser().getValue();\n      user.name = name;\n      this.userService.updateName(user, name);\n      alert('Name changed successfully');\n   }\n\n   private editEmail(newEmail: string) {\n      this.authService.changeEmail(newEmail).then(() => {\n         const user: User =   \n         this.userService.getSavedUser().getValue();\n         user.email = newEmail;\n         this.userService.updateEmail(user, newEmail);\n         alert('Email changed successfully');\n      }).catch(function (error) {\n         const errorMessage = error.message;\n         alert(errorMessage);\n      });\n   }\n\n   private editMobile(mobile: string) {\n      const user: User = this.userService.getSavedUser().getValue();\n      user.mobile = mobile;\n      this.userService.updateMobile(user, mobile);\n      alert('Mobile changed successfully');\n   }\n\n   private editPassword(value: string) {\n      const newPassword: string = value;\n      this.authService.changePassword(newPassword).then(() => {\n         alert('Password changed successfully');\n      }).catch(function (error) {\n         const errorMessage = error.message;\n         alert(errorMessage);\n      });\n   }\n}\n```", "```js\n<div class=\"user-profile\" *ngIf=\"user\">\n...\n</div>\n<app-edit-dialog></app-edit-dialog>\n```", "```js\nexport class UserProfileComponent implements OnInit {\n   @ViewChild(EditDialogComponent) editDialog: EditDialogComponent;\n...\n}\n```", "```js\nonNameChange() {\n   this.editDialog.setTitle('Do you want to edit name?')\n      .setBodyTitle('name')\n      .setBodyLabel('Enter new name')\n      .setEditType(EditType.NAME)\n      .show();\n}\n```", "```js\nonEmailChange() {\n   this.editDialog.setTitle('Do you want to edit email?')\n      .setBodyTitle('email')\n      .setBodyLabel('Enter new email')\n      .setEditType(EditType.EMAIL)\n      .show();\n}\n\nonMobileChange() {\n   this.editDialog.setTitle('Do you want to edit mobile?')\n      .setBodyTitle('mobile')\n      .setBodyLabel('Enter new mobile')\n      .setEditType(EditType.MOBILE)\n      .show();\n}\n\nonPasswordChange() {\n   this.editDialog.setTitle('Do you want to edit password?')\n      .setBodyTitle('password')\n      .setBodyLabel('Enter new password')\n      .setEditType(EditType.PASSWORD)\n      .show();\n}\n```", "```js\nimport {NgModule} from '@angular/core';\nimport {EditDialogComponent} from '../edit-dialog/edit-dialog.component';\n\n/**\n * User Module\n */\n@NgModule({\n    imports: [\n        ...\n    ],\n    declarations: [\n        ...\n        EditDialogComponent\n    ]\n})\nexport class UserModule {\n}\n```"]