["```js\nimport Icon from '                                                                                                                                                                                                                                                                                                                                   react-native-vector-icons/FontAwesome'; \n\n```", "```js\n<Icon name=\"rocket\" size={ 30 } color=\"#900\" /> \n\n```", "```js\nimport React from 'react'; \n\nimport Icon from 'react-native-vector-icons/FontAwesome'; \n\nconst expenses = [ \n  { amount: '4', category: 'coffee', description: 'Latte' }, \n  { amount: '1.50', category: 'books', description: 'Sunday Paper' }, \n  { amount: '35', category: 'car', description: 'Gas' }, \n  { amount: '60', category: 'restaurant', description: 'Steak dinner' } \n];  \n\n```", "```js\nexport const getIconComponent = (categoryName, size, color) => { \n  return ( \n    <Icon \n      name={ categories[categoryName].iconName } \n      size={ size || 30 } \n      color={ color || '#3D4A53' }  \n    /> \n  ); \n} \n\n```", "```js\n<Picker> \n  <Picker.Item  \n    label='Hello' \n    value='hello' \n  /> \n</Picker>  \n\n```", "```js\n// Expenses/app/components/AddExpensesModal/index.js \n\n...\nimport { \n  ... \n  Picker, \n  ... \n} from 'react-native'; \n... \nimport * as iconMethods from '../../utils/iconMethods'; \n... \nexport default class AddExpensesModal extends Component { \n  ... \n  constructor (props) { \n    super (props); \n\n    this.state = { \n      amount: '', \n      category: undefined, \n      categoryPickerExpanded: false, \n      date: new Date(), \n      description: '', \n      datePickerExpanded: false \n    } \n  } \n\n```", "```js\n  render () { \n    const expandableCellDatePickerTitle = ... \n    const expandableCellCategoryPickerTitle = 'Category: ' +\n      (this.state.category ? iconMethods.categories\n      [this.state.category].name : 'None (tap to change)') \n\n```", "```js\n    return ( \n      <Modal \n        animationType={ 'slide' } \n        transparent={ false } \n        visible={ this.props.modalVisible } \n      > \n        <ScrollView style={ styles.modalContainer }> \n          ... \n          <View style={ [styles.expandableCellContainer,\n          { height: this.state.datePickerExpanded ? this.state.\n          datePickerHeight : 40 }]}> \n            <ExpandableCell \n              expanded={ this.state.datePickerExpanded } \n              onPress={ () => this._onDatePickerExpand() } \n              title={ expandableCellDatePickerTitle }> \n              <DatePickerIOS \n                date={ this.state.date } \n                mode={ 'date' } \n                onDateChange={ (date) => this._onDateChange(date) } \n                onLayout={ (event) => this._getDatePickerHeight(event) \n                } \n              /> \n            </ExpandableCell> \n          </View> \n          <View style={ [styles.expandableCellContainer, \n          { height: this.state.categoryPickerExpanded ? 200 : 40 }]}> \n            <View style={ styles.categoryIcon }> \n              { this.state.category && iconMethods.\n              getIconComponent(this.state.category) } \n            </View>\n\n```", "```js\n            <ExpandableCell \n              expanded={ this.state.categoryPickerExpanded } \n              onPress={ () => this._onCategoryPickerExpand() } \n              title={ expandableCellCategoryPickerTitle }> \n                <Picker \n                onValueChange={ (value, index) =>\n                this._setItemCategory(value) } \n                selectedValue={ this.state.category }> \n                { this._renderCategoryPicker() } \n              </Picker> \n            </ExpandableCell> \n          </View> \n\n```", "```js\n          <Button \n            color={ '#86B2CA' } \n            disabled={ !(this.state.amount && \n            this.state.description && this.state.category) } \n            onPress={ () => this._saveItemToBudget() } \n            title={ 'Save Expense' } \n          />  \n          ... \n        </ScrollView> \n      </Modal> \n    ) \n  } \n\n```", "```js\n  ... \n  _clearFieldsAndCloseModal () { \n    this.setState({ \n      amount: '', \n      category: undefined, \n      categoryPickerExpanded: false, \n      date: new Date(), \n      datePickerExpanded: false, \n      description: '' \n    }); \n\n    this.props.toggleModal() \n  } \n\n```", "```js\n  ... \n  _onCategoryPickerExpand () { \n    this.setState({ \n      categoryPickerExpanded: !this.state.categoryPickerExpanded \n    }) \n  } \n\n  _onDatePickerExpand () { \n    this.setState({ \n      datePickerExpanded: !this.state.datePickerExpanded \n    }); \n  } \n\n```", "```js\n  _renderCategoryPicker () { \n    var categoryNames = Object.keys(iconMethods.categories); \n\n    return categoryNames.map((elem, index) => { \n      return ( \n        <Picker.Item \n          key={ index } \n          label={ iconMethods.categories[elem].name } \n          value={ elem } \n        /> \n      ) \n    }) \n  } \n\n```", "```js\n  _setItemCategory (category) { \n    this.setState({ \n      category \n    }); \n  } \n\n```", "```js\n  async _saveItemToBudget () { \n    const expenseObject = { \n      amount: this.state.amount, \n      category: this.state.category, \n      date: moment(this.state.date).format('ll'), \n      description: this.state.description \n    }; \n\n    await storageMethods.saveItemToBudget(this.props.month, \n    this.props.year, expenseObject); \n\n    this._clearFieldsAndCloseModal(); \n  } \n} \n\n```", "```js\n// Expenses/app/components/AddExpensesModal/styles.js \n\nimport { Dimensions, Navigator, StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  ... \n  categoryIcon: { \n    flex: 1, \n    marginLeft: Dimensions.get('window').width - 50, \n    position: 'absolute' \n  }, \n\n```", "```js\n  ... \n  expandableCellContainer: { \n    flex: 1, \n    flexDirection: 'row' \n  }, \n  ... \n}); \n\nexport default styles; \n\n```", "```js\n// Expenses/app/App.js \n\n... \nexport default class App extends Component { \n  ... \n  componentWillMount () { \n    storageMethods.resetAsyncStorage(); \n    ... \n  } \n  ... \n}\n\n```", "```js\n// Expenses/app/components/CurrentMonthExpenses/index.js \n\n... \nexport default class CurrentMonthExpenses extends Component { \n  ... \n  _renderRowData (rowData, rowID) { \n    if (rowData) { \n      return ( \n        <ExpenseRow \n          amount={ rowData.amount } \n          category={ rowData.category } \n          description={ rowData.description } \n        /> \n      ) \n    } \n  } \n  ... \n}; \n\n```", "```js\n// Expenses/app/components/ExpenseRow/index.js \n\n... \nimport * as iconMethods from '../../utils/iconMethods'; \n... \nexport default (props) => { \n  return ( \n    <View style={ styles.expenseRowContainer }> \n      <View style={ styles.icon }> \n        { iconMethods.getIconComponent(props.category) } \n      </View> \n      ... \n    </View> \n  ) \n} \n\n```", "```js\n// Expenses/app/components/ExpenseRow/styles.js \n\nconst styles = StyleSheet.create({ \n  ... \n  icon: { \n    flex: 1, \n    marginLeft: 10 \n  } \n}); \n\n```", "```js\n<View> \n  <ProgressViewIOS \n    progress={ 0.75 } \n    progressTintColor={ '#86B2CA' } \n  /> \n</View> \n\n```", "```js\n// Expenses/app/utils/storageMethods.js \n\nexport const checkCurrentMonthBudget = async () => { \n  let year = dateMethods.getYear(); \n  let month = dateMethods.getMonth(); \n\n  let response = await getAsyncStorage(); \n\n  if (response === null || !response.hasOwnProperty(year) ||\n  !response[year].hasOwnProperty(month)) { \n    return false; \n  } \n\n  let details = response[year][month]; \n\n  return { \n    budget: details.budget, \n    spent: details.spent \n  } \n} \n\n```", "```js\n// Expenses/app/App.js \n\n... \n  async _updateBudget () { \n    let response = await storageMethods.checkCurrentMonthBudget(); \n\n    if (response !== false) { \n      this.setState({ \n        budget: response.budget, \n        spent: response.spent \n      }); \n\n      return; \n    } \n\n    this._renderEnterBudgetComponent(); \n  } \n\n```", "```js\n// Expenses/app/components/CurrentMonthExpenses/index.js \n\n... \nimport { \n  ProgressViewIOS, \n  ... \n} from 'react-native'; \n... \nexport default class CurrentMonthExpenses extends Component { \n  ... \n  render () { \n    ... \n    return ( \n      <View style={ styles.currentMonthExpensesContainer }> \n        <View style={ styles.currentMonthExpensesHeader }> \n          ... \n          <Text style={ styles.subText }> \n            { this.props.spent } of { this.props.budget } spent \n          </Text> \n\n```", "```js\n          <ProgressViewIOS \n            progress={ this._getProgressViewAmount() } \n            progressTintColor={ '#A3E75A' } \n            style={ styles.progressView } \n          /> \n        </View> \n        ... \n      </View> \n    ) \n  } \n\n```", "```js\n  _getProgressViewAmount () { \n    return this.props.spent/this.props.budget; \n  } \n  ... \n}; \n\n```", "```js\n// Expenses/app/components/CurrentMonthExpenses/styles.js \n\n... \nconst styles = StyleSheet.create({ \n  ... \n  progressView: { \n    margin: 10 \n  }, \n  ... \n}); \n\nexport default styles; \n\n```", "```js\n// Expenses/app/components/ExpenseRow/styles.js \n\n... \nconst styles = StyleSheet.create({ \n  amountText: { \n    alignSelf: 'center', \n    color: '#86B2CA', \n    flex: 1, \n    fontSize: 16, \n    marginRight: 10, \n    textAlign: 'right' \n  }, \n\n  descriptionText: { \n    alignSelf: 'center', \n    color: '#7D878D', \n    fontSize: 16, \n    textAlign: 'left' \n  }, \n}); \n\nexport default styles; \n\n```", "```js\n// Expenses/app/utils/mockDataMethods.js \n\nimport { setAsyncStorage } from './storageMethods'; \n\nconst years = ['2017', '2016', '2015']; \nconst months = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']; \n\nconst expenses = [ \n  { amount: '4', category: 'coffee', description: 'Latte' }, \n  { amount: '1.50', category: 'books', description: 'Sunday Paper' }, \n  { amount: '35', category: 'car', description: 'Gas' }, \n  { amount: '60', category: 'restaurant', description: 'Steak dinner' } \n]; \n\n```", "```js\nconst mockObject = { \n  budget: 500, \n  expenses: expenses, \n  spent: 100.5 \n}; \n\n```", "```js\nexport const mockPreviousMonthExpenses = async () => { \n  let mockedPreviousMonthsExpensesObject = {}; \n  years.forEach((year) => { \n    mockedPreviousMonthsExpensesObject[year] = {}; \n\n    months.forEach((month) => { \n      if (year === '2017' && (parseInt(month) > 1)) { \n        return; \n      } \n\n      mockedPreviousMonthsExpensesObject[year][month] = \n      Object.assign({}, mockObject); \n    }); \n  }); \n\n setAsyncStorage(mockedPreviousMonthsExpensesObject); \n} \n\n```", "```js\n// Expenses/app/App.js \n\nimport { mockPreviousMonthExpenses } from './utils/mockDataMethods'; \n... \nexport default class App extends Component { \n  ... \n  componentWillMount () { \n    mockPreviousMonthExpenses(); \n    storageMethods.logAsyncStorage(); \n    ... \n  } \n  ... \n} \n\n```", "```js\n this.state = { \n   ds: new ListView.DataSource({ \n   rowHasChanged: (r1, r2) => r1 !== r2, \n   sectionHeaderHasChanged: (s1, s2) => s1 !== s2 \n    }), \n  } \n\n```", "```js\nconst dataSource = this.state.ds.cloneWithRowsAndSections\n(this.state.listOfExpenses); \n\n```", "```js\n<ListView \n  ... \n  renderSectionHeader={ (sectionData, sectionID) => \n  this._renderSectionHeader(sectionData, sectionID) } \n/> \n\n_renderSectionHeader (sectionData, sectionID) { \n  return ( \n    <View> \n      <Text>{ sectionID }</Text> \n    </View> \n  ) \n} \n\n```", "```js\n// Expenses/app/App.js \n\n... \nimport PreviousMonthsList from './components/PreviousMonthsList'; \n\nexport default class App extends Component { \n  ... \n  render () { \n    return ( \n      <View style={ styles.appContainer }> \n        <PreviousMonthsList /> \n        ... \n      </View> \n    ) \n  } \n  ... \n} \n\n```", "```js\n// Expenses/app/components/PreviousMonthsList/index.js \n\nimport React, { Component } from 'react'; \n\nimport { \n  ListView, \n  Text, \n  View \n} from 'react-native'; \n\nimport styles from './styles'; \nimport * as dateMethods from '../../utils/dateMethods'; \nimport * as storageMethods from '../../utils/storageMethods'; \n\nexport default class PreviousMonthsList extends Component { \n  constructor (props) { \n    super (props); \n\n    this.state = { \n      ds: new ListView.DataSource({ \n        rowHasChanged: (r1, r2) => r1 !== r2, \n        sectionHeaderHasChanged: (s1, s2) => s1 !== s2 \n      }), \n      listOfExpenses: {} \n    }; \n  } \n\n```", "```js\n  async componentWillMount () { \n    let result = await storageMethods.getAsyncStorage(); \n\n    this.setState({ \n      listOfExpenses: result \n    }); \n  } \n\n```", "```js\n   render () { \n    const dataSource = this.state.ds.cloneWithRowsAndSections\n    (this.state.listOfExpenses); \n\n    return ( \n      <View style={ styles.previousMonthsListContainer }> \n        <ListView \n          automaticallyAdjustContentInsets={ false } \n          dataSource={ dataSource } \n          renderRow={ (rowData, sectionID, rowID) => this._\n          renderRowData(rowData, rowID) } \n          renderSectionHeader={ (sectionData, sectionID) => this._\n          renderSectionHeader(sectionData, sectionID) } \n          renderSeparator={ (sectionID, rowID) => this._\n          renderRowSeparator(sectionID, rowID) } \n        /> \n      </View> \n    ) \n  } \n\n```", "```js\n  _renderRowData (rowData, rowID) { \n    return ( \n      <View style={ styles.rowDataContainer }> \n        <Text style={ styles.rowMonth }> \n          { dateMethods.getMonthString(rowID) } \n        </Text> \n        <Text style={ styles.rowBudget }> \n          { rowData.budget } \n        </Text> \n      </View> \n    ) \n  } \n\n_renderRowSeparator (sectionID, rowID) { \n    return ( \n      <View \n        key={ sectionID + rowID } \n        style={ styles.rowSeparator } \n      /> \n    ) \n  } \n\n  _renderSectionHeader (sectionData, sectionID) { \n    return ( \n      <View style={ styles.sectionHeader }> \n        <Text style={ styles.sectionText }> \n          { sectionID } \n        </Text> \n      </View> \n    ) \n  } \n} \n\n```", "```js\n// Expenses/app/components/PreviousMonthsList/styles.js \n\nimport { StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  previousMonthsListContainer: { \n    flex: 1 \n  }, \n  rowBudget: { \n    color: '#86B2CA', \n    flex: 1, \n    fontSize: 20, \n    marginRight: 10, \n    textAlign: 'right' \n  }, \n  rowDataContainer: { \n    flex: 1, \n    flexDirection: 'row', \n    marginTop: 10, \n    height: 30 \n  }, \n\n```", "```js\n  rowMonth: { \n    color: '#7D878D', \n    flex: 1, \n    fontSize: 20, \n    marginLeft: 10, \n    textAlign: 'left' \n  }, \n  rowSeparator: { \n    backgroundColor: '#7D878D', \n    flex: 1, \n    height: StyleSheet.hairlineWidth, \n    marginLeft: 15, \n    marginRight: 15 \n  }, \n  sectionHeader: { \n    height: 20, \n    backgroundColor: '#86B2CA' \n  }, \n  sectionText: { \n    color: '#7D878D', \n    marginLeft: 10 \n  } \n}); \n\nexport default styles; \n\n```", "```js\n// Expenses/app/components/CurrentMonthExpenses/index.js \n\n... \nimport { \n  ... \n  Navigator, \n} from 'react-native'; \n... \nexport default class CurrentMonthExpenses extends Component { \n  static propTypes = { \n    ... \n    isPreviousMonth: PropTypes.bool, \n  } \n\n  ... \n  render () { \n    ... \n    return ( \n      <View style={ [styles.currentMonthExpensesContainer, \n        this.props.isPreviousMonth ? {marginTop: Navigator.\n        NavigationBar.Styles.General.TotalNavHeight} : {}] }> \n        ... \n      </View> \n    ) \n  } \n  ... \n}; \n\n```", "```js\n// Expenses/app/components/PreviousMonthsList/index.js \n\n... \nimport { \n  ... \n  TouchableHighlight, \n} from 'react-native'; \n\nimport CurrentMonthExpenses from '../CurrentMonthExpenses'; \n... \n\nexport default class PreviousMonthsList extends Component { \n  ... \n  _renderRowData (rowData, sectionID, rowID) { \n    return ( \n      <View style={ styles.rowDataContainer }> \n        <TouchableHighlight \n          onPress={ () => this._renderSelectedMonth(rowData,\n          sectionID, rowID) } \n          style={ styles.rowDataTouchableContainer }> \n          ... \n        </TouchableHighlight> \n      </View> \n    ) \n  } \n\n```", "```js\n  ... \n  _renderSelectedMonth (rowData, sectionID, rowID) { \n    this.props.navigator.push({ \n      component: CurrentMonthExpenses, \n      title: dateMethods.getMonthString(rowID) + ' ' + sectionID, \n      passProps: { \n        budget: rowData.budget.toString(), \n        expenses: rowData.expenses, \n        isPreviousMonth: true, \n        month: rowID, \n        spent: rowData.spent, \n        year: sectionID \n      } \n    }) \n  } \n} \n\n```", "```js\n// Expenses/app/components/PreviousMonthsList/styles.js \n\n... \nconst styles = StyleSheet.create({ \n  ... \n  rowDataTouchableContainer: { \n    flex: 1, \n    height: 30 \n  }, \n  ... \n  textRow: { \n    flex: 1, \n    flexDirection: 'row' \n  } \n}); \n... \n\n```", "```js\n<TabBarIOS> \n  <Icon.TabBarItemIOS \n    iconName={ 'home' } \n    iconSize={ 20 } \n    onPress={ () => this._setSelectedTab('home') } \n    selected={ this.state.selectedTab === 'home' } \n    title={ 'home' } \n  > \n    { this._renderHomeView() } \n  </Icon.TabBarItemIOS> \n</TabBarIOS> \n\n```", "```js\n// Expenses/index.ios.js \n\n... \nexport default class Expenses extends Component { \n  render() { \n    return ( \n      <NavigatorIOS \n        ... \n        navigationBarHidden={ true } \n      /> \n    ); \n  } \n} \n... \n\n```", "```js\n// Expenses/app/App.js \n\n... \nimport { \n  NavigatorIOS, \n  ... \n} from 'react-native'; \n\n...\n\n```", "```js\nexport default class App extends Component { \n  constructor (props) { \n    super(); \n\n    this.state = { \n      budget: '', \n      expenses: {}, \n      selectedTab: 'currentMonth', \n    } \n  }\n\n```", "```js\n  componentWillMount () { \n    this.setState({ \n      spent: 0, \n      currentMonthExpenses: [], \n      month: dateMethods.getMonth(), \n      year: dateMethods.getYear() \n    }); \n\n    ... \n  } \n\n```", "```js\n  render () { \n    return ( \n      <TabBarIOS> \n        <Icon.TabBarItemIOS \n          iconName={ 'usd' } \n          iconSize={ 20 } \n          onPress={ () => this._setSelectedTab('currentMonth') } \n          title={ 'Current Month' } \n          selected={ this.state.selectedTab === 'currentMonth' } \n        > \n          { this._renderCurrentMonthExpenses(this.state.\n          currentMonthExpenses) } \n        </Icon.TabBarItemIOS> \n        <Icon.TabBarItemIOS \n          iconName={ 'history' } \n          iconSize={ 20 } \n          onPress={ () => this._setSelectedTab('previousMonths') } \n          title={ 'Previous Months' } \n          selected={ this.state.selectedTab === 'previousMonths' } \n        > \n          { this._renderPreviousMonthsList(this.state.expenses) } \n        </Icon.TabBarItemIOS> \n      </TabBarIOS> \n    ) \n  } \n\n```", "```js\n  _renderCurrentMonthExpenses () { \n    return ( \n      <View style={ styles.appContainer }> \n        <CurrentMonthExpenses \n          budget={ this.state.budget } \n          expenses={ this.state.currentMonthExpenses } \n          month={ this.state.month } \n          spent={ this.state.spent } \n          year={ this.state.year } \n        /> \n        <AddExpenses \n          month={ this.state.month } \n          updateExpenses={ () => this._updateExpenses() } \n          year={ this.state.year } \n        /> \n      </View> \n    ) \n  } \n\n```", "```js\n  ...  \n  _renderPreviousMonthsList () { \n    return ( \n      <NavigatorIOS \n        initialRoute={{ \n          component: PreviousMonthsList, \n          title: 'Previous Months', \n          passProps: { \n            expenses: this.state.expenses \n          } \n        }} \n        style={ styles.previousMonthsContainer } \n      /> \n    ) \n  } \n\n```", "```js\n  ...  \n  _setSelectedTab (selectedTab) { \n    this.setState({ \n      selectedTab \n    }); \n  } \n\n```", "```js\n  ... \n  async _updateBudget () { \n      ... \n      this._updateExpenses(); \n      ... \n    } \n    ... \n  } \n\n  async _updateExpenses () { \n    let response = await storageMethods.getAsyncStorage(); \n\n    if (response) { \n      let currentMonth = response[this.state.year][this.state.month]; \n\n      this.setState({ \n        budget: currentMonth.budget, \n        currentMonthExpenses: currentMonth.expenses, \n        expenses: response, \n        spent: currentMonth.spent \n      }); \n    } \n  } \n} \n\n```", "```js\n// Expenses/app/styles.js \n\n... \nconst styles = StyleSheet.create({ \n  ... \n  previousMonthsContainer: { \n    flex: 1, \n    marginBottom: 48 \n  } \n}); \n\nexport default styles; \n\n```", "```js\n// Expenses/app/components/PreviousMonthsList/index.js \n\nimport React, { Component, PropTypes } from 'react'; \n... \nexport default class PreviousMonthsList extends Component { \n  static propTypes = { \n    expenses: PropTypes.object.isRequired \n  } \n  ...  \n  render () { \n    const dataSource = this.state.ds.cloneWithRowsAndSections\n    (this.props.expenses); \n    ... \n  } \n  ...  \n} \n\n```", "```js\n// Expenses/app/components/PreviousMonthsList/styles.js \n\nimport { Navigator, StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  previousMonthsListContainer: { \n    ...  \n    marginTop: Navigator.NavigationBar.Styles.General.TotalNavHeight, \n  }, \n  ... \n}); \n\nexport default styles; \n\n```", "```js\n// Expenses/app/AddExpenses/index.js \n\n... \nexport default class AddExpenses extends Component { \n  static propTypes = { \n    ... \n    updateExpenses: PropTypes.func.isRequired, \n    ... \n  } \n  ... \n  _toggleModal (boolean) { \n    ... \n    this.props.updateExpenses(); \n  } \n} \n\n```", "```js\n// Expenses/app/utils/StorageMethods.js \n\n... \nexport const saveItemToBudget = async (month, year, expenseObject) => { \n  let response = await getAsyncStorage(); \n\n  let newExpensesArray = [ \n    ...response[year][month].expenses, \n    expenseObject \n  ]; \n\n  return updateMonthExpensesArray(month, year, newExpensesArray); \n} \n\nexport const updateMonthExpensesArray = async (month, year, array) => { \n  let response = await getAsyncStorage(); \n\n  let newTotal = getTotalSpentForMonth(array); \n\n  response[year][month].expenses = array; \n  response[year][month].spent = newTotal; \n\n  await setAsyncStorage(response); \n  return true; \n} \n\n```", "```js\n// Expenses/app/App.js \n\n... \nexport default class App extends Component { \n  ... \n  _renderCurrentMonthExpenses () { \n    return ( \n      <View style={ styles.appContainer }> \n        <CurrentMonthExpenses \n          ... \n          updateExpenses={ () => this._updateExpenses() } \n        /> \n        ... \n      </View> \n    ) \n  } \n\n```", "```js\n  _renderPreviousMonthsList () { \n    return ( \n      <NavigatorIOS \n        initialRoute={{ \n          ... \n          passProps: { \n            ... \n            updateExpenses: () => this._updateExpenses() \n          } \n        }} \n      /> \n    ) \n  } \n  ... \n} \n\n```", "```js\n// Expenses/app/components/PreviousMonthsList/index.js \n\n... \nexport default class PreviousMonthsList extends Component { \n  static propTypes = { \n    ... \n    updateExpenses: PropTypes.func.isRequired \n  } \n  ... \n  _renderSelectedMonth (rowData, sectionID, rowID) { \n    this.props.navigator.push({ \n      ... \n      passProps: { \n        ... \n        updateExpenses: () => this.props.updateExpenses(), \n      } \n    }); \n  } \n} \n\n```", "```js\n// Expenses/app/components/CurrentMonthExpenses/index.js \n\n... \nimport { \n  Alert, \n  ... \n} from 'react-native'; \n... \nexport default class CurrentMonthExpenses extends Component { \n  static propTypes = { \n    ... \n    updateExpenses: PropTypes.func.isRequired, \n  } \n  ... \n  render () { \n    const dataSource = this.state.ds.cloneWithRows\n    (this.state.expenses || this.props.expenses || []); \n    ... \n  } \n\n```", "```js\n  ... \n\n  _cancelAlert () { \n    return false; \n  } \n\n```", "```js\n  async _deleteItem (rowID) { \n    let newExpensesArray; \n\n    if (this.state.expenses) { \n      newExpensesArray = [...this.state.expenses]; \n    } \n\n    if (!this.state.expenses) { \n      newExpensesArray = [...this.props.expenses]; \n    } \n\n```", "```js\n    newExpensesArray.splice(rowID, 1); \n\n    await storageMethods.updateMonthExpensesArray\n    (this.props.month, this.props.year, newExpensesArray); \n\n    this.setState({ \n      expenses: newExpensesArray \n    }); \n\n    this.props.updateExpenses(); \n  }\n\n```", "```js\n  ... \n  _onLongPress (rowID) { \n    const alertOptions = [ \n      {text: 'Cancel', onPress: () => this._cancelAlert() }, \n      {text: 'Delete', style: 'destructive', onPress: () => \n      this._deleteItem(rowID)} \n    ]; \n\n    Alert.alert('Delete Item', 'Do you wish to delete\n    this item?', alertOptions) \n  } \n\n```", "```js\n  _renderRowData (rowData, rowID) { \n    if (rowData) { \n      return ( \n        <ExpenseRow \n          ... \n          onLongPress={ () => this._onLongPress(rowID) } \n        /> \n      ) \n    } \n  } \n  ... \n}; \n\n```", "```js\n// Expenses/app/components/ExpenseRow/index.js \n\n... \nexport default (props) => { \n  return ( \n    <TouchableHighlight \n      onLongPress={ () => props.onLongPress() } \n      ... \n    > \n    ... \n    </TouchableHighlight> \n  ) \n} \n\n```"]