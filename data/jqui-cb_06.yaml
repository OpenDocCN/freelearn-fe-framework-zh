- en: Chapter 6. Making Menus
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章。制作菜单
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Creating sortable menu items
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建可排序的菜单项
- en: Highlighting the active menu item
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高亮显示活动菜单项
- en: Using effects with menu navigation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用效果与菜单导航
- en: Building menus dynamically
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态构建菜单
- en: Controlling the position of submenus
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制子菜单的位置
- en: Applying themes to submenus
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对子菜单应用主题
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The jQuery UI **menu** widget takes a list of links and presents them as a cohesive
    menu to the user by handling navigation in submenus, as well as applying classes
    from the theme framework. We can customize the menu to a certain degree, using
    just the default options available. In other cases, such as when we would like
    the menu items sortable, we can easily extend the widget.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI **菜单**小部件接受链接列表，并通过处理子菜单中的导航，以及应用主题框架中的类，将它们呈现为一个连贯的菜单。我们可以使用默认提供的选项来定制菜单到一定程度。在其他情况下，例如当我们希望菜单项可排序时，我们可以轻松地扩展小部件。
- en: Creating sortable menu items
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建可排序的菜单项
- en: The menu widget, by default, preserves the order of the listed elements used
    to create the menu items. It means that if the creator of the HTML used in the
    menu widget were to change the ordering, this would be reflected in the rendered
    menu. This is good for the developers because it gives us control over how we
    would like the items to be presented to the user. But, perhaps the user has a
    better idea on how the menu items should be ordered.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，菜单小部件保留用于创建菜单项的列出元素的顺序。这意味着如果在菜单小部件中使用的 HTML 的创建者更改了排序方式，这将反映在渲染的菜单中。这对开发人员来说很好，因为它让我们控制如何向用户呈现项目。但是，也许用户对菜单项的排序有更好的想法。
- en: By combining the menu widget with the **sortable interaction** widget, we can
    provide the user with that flexibility. However, with this new capability, we
    will have to address another question; preserving the order chosen by the user.
    It is great if they can arrange the menu items how they see fit, but it is not
    so great if they have to repeat the same process every time the page loads. So
    we'll look, as well, at preserving the sorted menu order in a cookie.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将菜单小部件与**sortable 交互**小部件相结合，我们可以为用户提供这种灵活性。然而，有了这种新的能力，我们将不得不解决另一个问题；保留用户选择的顺序。如果他们可以按自己的意愿安排菜单项，那就太好了，但是如果他们每次加载页面都必须重复相同的过程，那就不太好了。因此，我们还将看看如何在
    cookie 中保存排序后的菜单顺序。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Let''s use the following HTML code for our menu widget. This will create a
    menu with four items, all at the same level:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们使用以下 HTML 代码为我们的菜单小部件。这将创建一个具有四个项目的菜单，所有项目都在同一级别： '
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: Let's now look at the JavaScript used to extend the menu widget in order to
    provide the sortable behavior.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下用于扩展菜单小部件以提供可排序行为的 JavaScript。
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you look at this menu in the browser, you'll notice that you can drag the
    menu items into any order you like. Additionally, if you were to refresh the page,
    you'll see that the ordering has been preserved.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中查看此菜单，您会注意到您可以将菜单项拖到任何您喜欢的顺序中。此外，如果您刷新页面，您会看到顺序已经被保留了。
- en: '![How to do it...](img/2186_06_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到…](img/2186_06_01.jpg)'
- en: How it works...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The menu instance we're creating in this example is given a `sortable` option
    value of `true`. This is a new option we've added to the menu widget. The bulk
    of our extension work is performed in our own rendition of the `_create()` method.
    The first thing we do here is call the original implementation of the method since
    we want the menu to be created as usual; we do it by using the `_super()` method.
    From here on out, we're maintaining the sort order of the menu items.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中创建的菜单实例被赋予了一个`sortable`选项值为`true`。这是我们添加到菜单小部件的新选项。我们大部分的扩展工作是在我们自己的`_create()`方法的重新呈现中执行的。我们在这里要做的第一件事是调用方法的原始实现，因为我们希望菜单像往常一样创建；我们通过使用`_super()`方法来做到这一点。从这里开始，我们将保持菜单项的排序顺序。
- en: If the `sortable` option doesn't evaluate to `true`, we exit, not having anything
    to do. In the event that this option is `true`, and we need to sort our menu items,
    we attempt to load a cookie, using the ID of this menu. The value of this cookie
    is stored in a variable called the `storedOrder`, because that's exactly what
    it represents; the stored order as dictated by the user. If the user has sorted
    the menu, we store the order of the menu items in the cookie. For example, the
    cookie value might look like `second,fourth,first,third`. These are the IDs of
    the menu items. When we split the comma-separated list, we have an array of menu
    items, in the correct order.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`sortable`选项的评估结果不为`true`，我们将退出，没有任何事情可做。如果此选项为`true`，且我们需要对菜单项目进行排序，我们尝试加载一个
    Cookie，使用此菜单的 ID。此 Cookie 的值存储在一个名为`storedOrder`的变量中，因为它恰好代表了存储的用户排序。如果用户已经对菜单进行了排序，我们将菜单项目的顺序存储在
    Cookie 中。例如，Cookie 值可能类似于`second,fourth,first,third`。这些是菜单项目的 ID。在我们分割逗号分隔列表时，我们得到了一个以正确顺序排列的菜单项目数组。
- en: Finally, we have to apply the sortable interaction widget to the menu. We pass
    the sortable configuration a function that is used when the sort order is updated.
    It is here that we use the `toArray()` method of the sortable widget to serialize
    the sort order of the menu items and it is here that we update the cookie value,
    using the menu ID.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须将可排序交互小部件应用于菜单。我们将可排序配置传递给在更新排序顺序时使用的函数。使用可排序小部件的`toArray()`方法序列化菜单项目的排序顺序，并在此处使用菜单
    ID 更新 Cookie 值。
- en: There are two things to note about the use of cookies in this example. First,
    we're using the cookie jQuery plugin. This plugin is small and in widespread use
    around the internet. However, it is worth mentioning that the plugin does not
    ship with jQuery or jQuery UI and your project will have to manage this dependency.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 关于此示例中使用 Cookie 有两件事情需要注意。首先，我们使用了 Cookie jQuery 插件。此插件体积小，在互联网上广泛使用。然而，值得一提的是，该插件不随
    jQuery 或 jQuery UI 一起发布，您的项目将需要管理此依赖项。
- en: 'The second thing to note is with regards to the localhost domain. The cookie
    storage functionality will not work locally in all browsers. In other words, it
    works fine if viewed from a web server. If you really need to test this code in
    the Google Chrome browser, you can get around it as I did using Python. In an
    operating system console, run the following code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个需要注意的事情是关于本地主机域。在所有浏览器中，Cookie 存储功能在本地将无法正常工作。换句话说，通过网络服务器查看时会正常工作。如果您真的需要在
    Google Chrome 浏览器中测试此代码，您可以像我一样使用 Python 绕过它。在操作系统控制台中，运行以下代码：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Highlighting the active menu item
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高亮显示活动菜单项目
- en: With menu widgets, depending on how the items are configured, the only way to
    tell if an item is active is when the page URL changes as a result of an item
    being clicked on. The menu items don't give any obvious indication that anything
    has actually happened. For example, the item in a menu, once clicked, could change
    the visual state. This is especially helpful if the developer is using the menu
    widget as a navigational tool in the user interface. Let's look at how we can
    extend the capabilities of the menu widget in order to provide this functionality
    using parts from the theme framework.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于菜单小部件，根据项目的配置方式，唯一能判断项目是否激活的方法是页面 URL 由于点击项目而改变。菜单项目不会明显地指示任何实际发生的事情。例如，菜单中的项目一旦被点击，可能会改变可视状态。如果开发人员在用户界面中使用菜单小部件作为导航工具，这将特别有帮助。让我们看看如何扩展菜单小部件的功能，以便使用主题框架的部分提供此功能。
- en: Getting ready
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We''ll use the following HTML code for our menu example here. Notice that this
    particular menu has a nested submenu:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里使用以下 HTML 代码作为我们的菜单示例。请注意，此特定菜单具有嵌套子菜单：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: In order to highlight the active menu item, we're going to need to extend the
    theme framework with a few additional rules.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了突出显示活动菜单项目，我们将需要通过一些额外规则扩展主题框架。
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next, we'll extend the menu widget itself with a new `highlight` option and
    the necessary functionality.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过新的`highlight`选项和必要的功能扩展菜单小部件本身。
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you were to look at this menu, you'd notice that once you select a menu item
    it would remain in the highlighted state.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看此菜单，您会注意到一旦选择了一个菜单项目，它会保持高亮状态。
- en: '![How to do it...](img/2186_06_02.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_06_02.jpg)'
- en: How it works...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The CSS rules we've defined here are necessary for the `ui-state-highlight`
    class to function properly when applied to a menu item. First, with the `.ui-menu`
    `.ui-menu-item` selector, we're setting the `margin` to something that will appropriately
    align the menu item once the `ui-state-highlight` class is applied. We're also
    giving each menu item an invisible `border` so that the mouse enter and mouse
    leave events don't nudge the menu items out of place. The next selector, `.ui-menu`
    `.ui-menu-item` `a.ui-state-highlight`, applies to our menu items once we've applied
    the `ui-state-highlight` class to them. The rules also control positioning, and
    prevent the menu from becoming misaligned.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里定义的 CSS 规则是为了使 `ui-state-highlight` 类在应用于菜单项时能够正常运行。首先，使用 `.ui-menu` `.ui-menu-item`
    选择器，我们将 `margin` 设置为在应用 `ui-state-highlight` 类后适当对齐菜单项的内容。我们还给每个菜单项一个不可见的 `border`，以防止鼠标进入和鼠标离开事件将菜单项挤出位置。接下来的选择器，`.ui-menu`
    `.ui-menu-item` `a.ui-state-highlight`，适用于我们将 `ui-state-highlight` 类应用于菜单项后。这些规则还控制了定位，并防止菜单失去对齐。
- en: Moving over to the JavaScript code, you can see that we've provided the menu
    widget with a new `highlight` option. In our custom implementation of the `_create()`
    method, we call the original implementation of the same method before proceeding
    to add our event handlers. The `_on()` method, defined by the base jQuery UI widget,
    is used here to bind our event handler to the `click .ui-menu-item:has(a)` event;
    the same event used internally in the `menu` widget. Inside this handler, we remove
    the `ui-state-highlight` class from any menu items it might already be applied
    to. Finally, we add the `ui-state-highlight` class to the menu item just clicked
    on, along with the `ui-corner-all` class, which gives the element rounded corners
    as defined by the theme properties.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到 JavaScript 代码，您可以看到我们为菜单部件提供了一个新的 `highlight` 选项。在我们自定义的 `_create()` 方法中，我们调用相同方法的原始实现，然后再添加我们的事件处理程序。由
    jQuery UI 基础部件定义的 `_on()` 方法在这里用于将我们的事件处理程序绑定到 `click .ui-menu-item:has(a)` 事件；这个事件在
    `menu` 部件内部也使用。在这个处理程序内部，我们从任何已经应用 `ui-state-highlight` 类的菜单项中删除它。最后，我们将 `ui-state-highlight`
    类添加到刚刚点击的菜单项上，还添加了 `ui-corner-all` 类，该类通过主题属性定义了圆角元素。
- en: Using effects with menu navigation
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用菜单导航效果
- en: There are several approaches we could take when it comes to applying effects
    to the menu widget. Where could we apply effects in the menu widget? The user
    hovers their mouse pointer over the menu items, which results in a state change.
    The user expands a submenu. These two actions are the main interactions we could
    improve visually with some animation. Let's look at how we can address these effects
    using as little JavaScript as possible in favor of using CSS transitions. Transitions
    are an emerging CSS standard in so far, that not all browsers support them using
    standard syntax yet. In the spirit of progressive enhancement, however, applying
    CSS in this way means that the basic menu functionality will work just fine even
    in browsers that don't support it. And we can side-step having to write an overwhelming
    amount of JavaScript to animate the menu navigation.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用效果到菜单部件时，我们可以采取几种方法。我们在菜单部件中哪些地方可以应用效果？用户将鼠标指针悬停在菜单项上，这会导致状态更改。用户展开子菜单。这两个动作是我们可以通过一些动画来提升视觉效果的主要交互。让我们看看如何使用尽可能少的
    JavaScript 来解决这些效果，而不是使用 CSS 过渡。过渡是一个新兴的 CSS 标准，迄今为止，并非所有浏览器都支持它们使用标准语法。然而，按照渐进增强的思路，以这种方式应用
    CSS 意味着即使在不支持它的浏览器中，基本的菜单功能也会正常工作。我们可以避免编写大量 JavaScript 来对菜单导航进行动画处理。
- en: Getting ready
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this example, we can use any standard menu HTML code. Ideally, it should
    have a submenu so we can observe the transitions applied to their expansion.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们可以使用任何标准的菜单 HTML 代码。理想情况下，它应该有一个子菜单，这样我们就可以观察到它们展开时应用的过渡效果。
- en: How to do it...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: First, let's define the CSS required for the transitions we want to be applied
    to the menu items and submenus as they change state.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们定义所需的 CSS 过渡，以便在菜单项和子菜单在状态更改时应用。
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next, we'll introduce some modifications to the menu widget itself, necessary
    to control the animation capabilities of any given menu instance.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍对菜单部件本身的一些修改，以控制任何给定菜单实例的动画功能。
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, if you were to look at this menu in your browser and start interacting
    with it, you would notice the smooth transitions in applying the hover state.
    You'd also notice that the transition applied to the submenus appears to slide
    them to the right when expanded.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你在浏览器中查看这个菜单并开始与它交互，你会注意到应用悬停状态时的平滑过渡。你也会注意到，展开子菜单时，应用的过渡似乎将它们向右滑动。
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'First, let''s consider the CSS rules that define the transitions we''re seeing
    applied to the `menu` widget. The `.ui-menu-animated > li > ul` selector applies
    transitions to submenus. The first property declared, `left: 0`, is merely an
    initializer that allows a certain browser to work better with transitions. The
    next four lines define the transition itself of the left property. The menu widget,
    when expanding submenus, uses the position utility widget, which sets the left
    CSS property on the submenu. The transition we''ve defined here will apply changes
    to the left property over a `span` of `0.7` seconds, and will ease out of the
    transition.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '首先，让我们考虑一下定义了我们所看到应用到`menu`部件的过渡的CSS规则。`.ui-menu-animated > li > ul`选择器将过渡应用到子菜单上。声明的第一个属性`left:
    0`只是一个初始化程序，允许某些浏览器更好地与过渡配合。接下来的四行定义了左属性的过渡。菜单部件在展开子菜单时，使用的是位置实用程序部件，它在子菜单上设置了`left`CSS属性。我们在这里定义的过渡将在`0.7`秒的时间跨度内对`left`属性进行更改，并且会在过渡结束时减缓。'
- en: The reason we have multiple transition definitions is that some browsers support
    their own vendor-prefixed version of the rule. So we start with the generic version,
    followed by the browser-specific versions. This is a common practice, and when
    the browser-specific rules become superfluous, we can remove them.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有多个过渡定义的原因是一些浏览器支持它们自己的供应商前缀版本的规则。因此，我们从通用版本开始，然后是特定于浏览器的版本。这是一个常见的做法，当浏览器特定的规则变得多余时，我们可以将其删除。
- en: Following it comes the `.ui-menu-animated .ui-menu-item a` selector, which applies
    to each menu item. You can see that the transition here involves several properties.
    Each property in this transition is part of the `ui-state-hover` that we would
    like to be animated. The duration of the `border-color` transition is slightly
    longer as a result of our tweaks.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`.ui-menu-animated .ui-menu-item a`选择器，适用于每个菜单项。你可以看到这里的过渡涉及几个属性。在这个过渡中，每个属性都是`ui-state-hover`的一部分，我们希望它们被动画化。由于我们的调整，`border-color`过渡的持续时间稍长。
- en: Now let's look at the JavaScript that puts this CSS to use. We've extended the
    menu widget by adding a new `animate` option, which will apply the above defined
    transitions to the widget. In our version of the `_create()` method, we call the
    original implementation of `_create()` then apply the `ui-menu-animated` class
    to the main `ul` element, and any submenus.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看将这个CSS运用到JavaScript的方法。我们通过添加一个新的`animate`选项来扩展菜单部件，该选项将上述定义的过渡应用到部件上。在我们的`_create()`方法版本中，我们调用了原始的`_create()`实现，然后将`ui-menu-animated`类应用到主`ul`元素和任何子菜单上。
- en: The extension of the `_close()` method is necessary for one reason only. This
    is called when a submenu is closed. However, when a submenu is first displayed,
    the `left` CSS property is computed by the `position` utility. The next time it
    is displayed, it doesn't have to compute the `left` property. This is a problem,
    for obvious reasons, if we're trying to animate a change in the `left` property
    value. So all we do to fix this is set the `left` property back to a value of
    `0` when the menu is closed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 延伸`_close()`方法的原因只有一个。这是在关闭子菜单时调用的。然而，当首次显示子菜单时，`left` CSS属性是由`position`实用程序计算的。下一次显示时，它不必计算`left`属性。这是一个问题，因为很明显，如果我们尝试对`left`属性值进行动画更改，这会成为显而易见的问题。因此，我们只需要在关闭菜单时将`left`属性设置回`0`。
- en: Building menus dynamically
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态构建菜单
- en: Often, the menus change during interaction with a user. In other words, we may
    need to extend the structure of the menu after the menu has been instantiated.
    Alternatively, we might not have all the necessary information available to us
    when building the HTML that ultimately becomes the menu widget; the menu data
    may only be available in **JavaScript Object Notation** (**JSON**) format, for
    instance. Let's look at how we can go about building menus dynamically.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 经常情况下，菜单在与用户交互时会发生变化。换句话说，我们可能需要在菜单实例化后扩展菜单的结构。或者在构建最终成为菜单部件的HTML时，可能并没有所有必要的信息可用；例如，菜单数据可能只以**JavaScript对象表示法**（**JSON**）格式可用。让我们看看如何动态构建菜单。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: We will start with the following basic menu HTML structure. Our JavaScript code
    will extend this.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从以下基本菜单 HTML 结构开始。我们的 JavaScript 代码将扩展这个结构。
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let's create the menu widget, and then we'll extend the structure of the menu
    DOM.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建菜单小部件，然后我们将扩展菜单 DOM 结构。
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Instead of just the three initial items we started off with, when you view this
    menu, you are now presented with the three new items we have just added.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当您查看这个菜单时，不再只有我们最初的三个项目，而是现在呈现了我们刚刚添加的三个新项目。
- en: '![How to do it...](img/2186_06_03.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_06_03.jpg)'
- en: How it works...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理是什么...
- en: If we don't keep adding the new menu items in our JavaScript code, we would
    only see the original three items. However, we are using the core jQuery DOM manipulation
    tools to construct and insert a submenu. Afterward, we have to call the `refresh()`
    menu method, which adds the appropriate CSS classes and event handlers to the
    new menu items. If, for example, we moved the DOM insertion code to before the
    `menu` widget is instantiated, we would have no reason to call `refresh()` since
    the menu constructor invokes it directly.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 JavaScript 代码中不断添加新的菜单项，我们只会看到最初的三个项目。但是，我们正在使用核心 jQuery DOM 操纵工具来构建和插入一个子菜单。之后，我们必须调用
    `refresh()` 菜单方法，它会为新的菜单项添加适当的 CSS 类和事件处理程序。例如，如果我们将 DOM 插入代码移到 `menu` 小部件被实例化之前，则没有理由调用
    `refresh()`，因为菜单构造函数会直接调用它。
- en: There's more...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The above approach of inserting new items in a menu does have its drawbacks.
    The obvious one being that the DOM insertion code that actually constructs the
    new menu items and submenu isn't maintainable. Our example has hard-coded the
    structure, which most applications never do. Instead, we typically have at least
    one data source, from an API perhaps. It would be nice, if instead of hard-coding
    the structure, we could pass the menu widget a data source, with a standard format.
    The menu widget would then take care of the low-level details that we've implemented
    above.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法在菜单中插入新项目确实有其缺点。一个明显的缺点是实际构建新菜单项和子菜单的 DOM 插入代码不易维护。我们的示例已经将结构硬编码了，而大多数应用程序通常不这样做。相反，我们通常至少有一个数据源，可能来自
    API。如果我们可以传递给菜单小部件一个标准格式的数据源，那就太好了。菜单小部件将负责我们上面实现的底层细节。
- en: 'Let''s try and modify the code so that we shift more responsibility to the
    menu widget itself. We''ll aim for the exact same outcome as the code above, but
    we''ll do so by extending the menu widget, and passing in a data object that represents
    the menu structure. We''ll use the exact same HTML structure. Here is the new
    JavaScript code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们尝试修改代码，以便更多的责任移到菜单小部件本身。我们将以与上面的代码完全相同的结果为目标，但我们将通过扩展菜单小部件，并传入代表菜单结构的数据对象来实现。我们将使用完全相同的
    HTML 结构。以下是新的 JavaScript 代码:'
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you run this modified code, you'll see no change in outcome compared to the
    original code we've written above. This improvement is purely a re-factoring,
    turning unmaintainable code into something with a longer shelf life.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行这段修改后的代码，您会发现结果与我们上面编写的原始代码没有任何变化。这种改进纯粹是一种重构，将难以维护的代码变成了更长寿的东西。
- en: 'The new option we''ve introduced here, `data`, expects an array of menu items.
    The item is an object with the following attributes:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里引入的新选项 `data` 期望一个菜单项数组。该项是一个带有以下属性的对象：
- en: '`id`: It is the id for the menu item'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：它是菜单项的 id'
- en: '`href`: It is the href of the menu item link'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`href`：它是菜单项链接的 href'
- en: '`text`: It is the item label'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text`：它是项目标签的项'
- en: '`data`: It is a nested submenu'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：它是一个嵌套的子菜单'
- en: The last option is simply a nested array of menu items representing a submenu.
    Our modifications to the `_create()` method will iterate over the data option
    array, if provided, and call `_insertItem()` on each object. The `_insertItem()`
    method is something new we've introduced, and does not override any existing menu
    functions. Here, we're creating the necessary DOM elements for the passed in menu
    data. If this object has a nested data array, a submenu, then we create a `ul`
    element and recursively call `_inserItem()`, passing the `ul` as the parent.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个选项只是表示子菜单的菜单项嵌套数组。我们对 `_create()` 方法的修改将遍历数据选项数组（如果提供），并在每个对象上调用 `_insertItem()`。
    `_insertItem()` 方法是我们引入的新东西，并不会覆盖任何现有的菜单功能。在这里，我们正在为传入的菜单数据创建必要的 DOM 元素。如果这个对象有一个嵌套的数据数组，也就是子菜单，那么我们会创建一个
    `ul` 元素，并递归调用 `_inserItem()`，将 `ul` 作为父元素传递进去。
- en: The `data` we pass to the menu is significantly more readable and maintainable
    than the previous version. Passing API data, for instance, would take relatively
    little work now.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们传递给菜单的数据比以前的版本更易读和可维护。 例如，现在传递API数据所需的工作相对较少。
- en: Controlling the position of submenus
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制子菜单的位置
- en: The menu widget uses the position widget to control the destination of any submenus
    when visible. The default is to place the top left of the submenu to the right
    of the menu item that expands the submenu. But depending on the size of our menu,
    the depth of the submenus, and other constraints around size in our UI, we might
    want to use different defaults for the submenu positions.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单小部件使用位置小部件来控制任何子菜单在可见时的目的地。 默认情况下，将子菜单的左上角放置在展开子菜单的菜单项的右侧。 但是，根据我们的菜单大小、子菜单的深度和UI中围绕大小的其他约束，我们可能希望使用不同的默认值来设置子菜单的位置。
- en: Getting ready
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will use the following HTML structure for this submenu positioning demonstration:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下 HTML 结构来进行子菜单定位演示：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How to do it...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'When we instantiate this menu, we will pass it a `position` option as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们实例化此菜单时，我们将传递一个`position`选项，如下所示：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With all the submenus expanded our menu will look similar to that shown in
    the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有子菜单展开时，我们的菜单将与下图所示类似：
- en: '![How to do it...](img/2186_06_04.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_06_04.jpg)'
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作...
- en: The `position` options that we're passing to the menu widget in the preceding
    example are the same options we would pass directly to the position widget. The
    `of` option, which the position utility expects, is the active menu item or the
    parent of the submenu. All these options are passed to the position utility inside
    the `_open()` method, which is responsible for expanding submenus.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们向菜单小部件传递的`position`选项与我们直接传递给位置小部件的选项相同。 位置小部件期望的`of`选项是活动菜单项或子菜单的父项。
    所有这些选项都传递给`_open()`方法中的位置小部件，该方法负责展开子菜单。
- en: Applying themes to submenus
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将主题应用于子菜单
- en: When the menu widget displays submenus, there is no discernible difference in
    appearance. That is, visually, they look just like the main menu. We wanted to
    present the user with a little contrast between the main menu and its children;
    we can do so by extending the widget to allow for custom classes to be applied
    to the submenus.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当菜单小部件显示子菜单时，外观上没有明显的区别。 也就是说，在视觉上，它们看起来就像是主菜单。 我们希望向用户展示主菜单和其子菜单之间的一点对比；我们可以通过扩展小部件以允许将自定义类应用于子菜单来实现这一点。
- en: Getting ready
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Let''s use the following markup to create our menu widget with a couple submenus:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下标记来创建带有几个子菜单的菜单小部件：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will extend the menu widget by adding a new `submenuClass` option and apply
    that class to submenus as shown in the following code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过添加一个新的`submenuClass`选项并将该类应用于子菜单来扩展菜单小部件，如下所示：
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here is what the submenu looks like:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是子菜单的外观：
- en: '![How to do it...](img/2186_06_05.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_06_05.jpg)'
- en: How it works...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作...
- en: Here, we are extending the menu widget with a new `submenuClass` option. The
    idea being that we want to apply this class only to the submenus of the widget
    if supplied. We do this by overriding the `refresh()` menu method. We look for
    all the submenus and apply the `submenuClass` to them. You'll notice that we apply
    this class before calling the`_super()` method in the original implementation
    of this method. This is because we are searching for menus that do not have the
    `ui-menu` class yet. These are our submenus.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用一个新的`submenuClass`选项扩展了菜单小部件。 我们的想法是，如果提供了这个类，我们只想将它应用于小部件的子菜单。 我们通过重写`refresh()`菜单方法来实现这一点。
    我们查找所有子菜单并将`submenuClass`应用于它们。 您会注意到，在调用原始实现此方法的`_super()`方法之前，我们应用了这个类。 这是因为我们正在寻找尚未具有`ui-menu`类的菜单。
    这些是我们的子菜单。
