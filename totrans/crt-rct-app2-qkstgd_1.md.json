["```js\n $ npx create-react-app homepage\n\n Creating a new React app in [directory]/homepage.\n\n Installing packages. This might take a couple of minutes.\n Installing react, react-dom, and react-scripts...\n\n [... truncating extra text]\n\n Done in 13.65s.\n\n Success! Created hello-world at [directory]/homepage\n Inside that directory, you can run several commands:\n\n yarn start\n Starts the development server.\n\n yarn build\n Bundles the app into static files for production.\n\n yarn test\n Starts the test runner.\n\n yarn eject\n Removes this tool and copies build dependencies, configuration files\n and scripts into the app directory. If you do this, you can't go back!\n\n We suggest that you begin by typing:\n\n cd homepage\n yarn start\n\n Happy hacking!\n```", "```js\n PASS  src/App.test.js\n renders without crashing (18ms)\n\n Test Suites: 1 passed, 1 total\n Tests:       1 passed, 1 total\n Snapshots:   0 total\n Time:        1.976s\n Ran all test suites related to changed files.\n\n Watch Usage\n › Press a to run all tests.\n › Press f to run only failed tests.\n › Press p to filter by a filename regex pattern.\n › Press t to filter by a test name regex pattern.\n › Press q to quit watch mode.\n › Press Enter to trigger a test run.\n```", "```js\n  <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\">\n        <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-\n         fit=no\">\n        <meta name=\"theme-color\" content=\"#000000\">\n        <!--\n          manifest.json provides metadata used when your web app is added to the\n          homescreen on Android. See \n          https://developers.google.com/web/fundamentals/web-app-manifest/\n        -->\n        <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\">\n        <!--\n          Notice the use of %PUBLIC_URL% in the tags above.\n          It will be replaced with the URL of the `public` folder during the build.\n          Only files inside the `public` folder can be referenced from the HTML.\n\n          Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n          work correctly both with client-side routing and a non-root public URL.\n          Learn how to configure a non-root public URL by running `npm run build`.\n        -->\n        <title>React App</title>\n      </head>\n      <body>\n        <noscript>\n          You need to enable JavaScript to run this app.\n        </noscript>\n        <div id=\"root\"></div>\n        <!--\n          This HTML file is a template.\n          If you open it directly in the browser, you will see an empty page.\n\n          You can add webfonts, meta tags, or analytics to this file.\n          The build step will place the bundled scripts into the <body> tag.\n\n          To begin the development, run `npm start` or `yarn start`.\n          To create a production bundle, use `npm run build` or `yarn build`.\n        -->\n      </body>\n    </html>\n```", "```js\nimport React from 'react';\n```", "```js\nconst App = () => {\n return <div className=\"App\">Homepage!</div>;\n};\n```", "```js\nexport default App;\n```", "```js\nimport \"./App.css\";\n```", "```js\n .App {\n  border: 1px solid black;\n  text-align: center;\n  background: #d5d5f5;\n  color: black;\n  margin: 20px;\n  padding: 20px;\n}\n```", "```js\n    import React from 'react';\n    import ReactDOM from 'react-dom';\n    import './index.css';\n    import App from './App';\n    import * as serviceWorker from './serviceWorker';\n\n    ReactDOM.render(<App />, document.getElementById('root'));\n\n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: http://bit.ly/CRA-PWA\n    serviceWorker.unregister();\n```", "```js\n<App />\n```", "```js\n<App></App>\n```"]