- en: Chapter 3. Working with Properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be exploring how to work with ReactJS properties.
    We''re also going to learn how to integrate ReactJS with an external API (Facebook
    Open-Graph API) and render incoming data in a set of components. This chapter
    will cover the following items:'
  prefs: []
  type: TYPE_NORMAL
- en: Component properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component's data flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring and consuming Facebook Open-Graph API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a ReactJS component and list data from API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the [Chapter 2](part0020_split_000.html#page "Chapter 2. Exploring JSX and
    the ReactJS Anatomy"), *Exploring JSX and ReactJS Anatomy*, we talked a lot about
    ReactJS properties and used them throughout our examples, but so far, we've just
    used them like HTML properties. They play a role that is far beyond that. It's
    common to use them to pass data through your components tree that defines your
    view; to pass configuration properties that come from parent components; to pass
    callbacks for user input, UI/custom events that need to be triggered outside,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Properties of a ReactJS component can't be changed once the component is rendered
    in the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Properties define the declarative interface of the component. In a `h1` element
    that renders a name property, for example, you can't change this name once it's
    rendered, unless you create another instance of the component and render it in
    the same place in the DOM, replacing the old rendered component.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This happens because ReactJS represents the state of your component at any
    point in time and not only at initialization. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The input text being rendered is considered to be a controlled component because
    it won't change the value even if you try typing on it. If we don't specify the
    `valu`e property of the input then it is considered to be an uncontrolled component.
    Controlled components have their data updated via the ReactJS data flow and component
    cycle. However, if you did not specify the value property, the value property
    would not be controlled by ReactJS and would exist externally to the ReactJS data
    flow. The correct way to change the value from forms inputs or other components
    is to set up `state` for them, which will be described in more detail in the next
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Data flow with properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the ReactJS fundamentals and best practices is to pass data to nested
    components through properties. In that way, the children components can have the
    single responsibility of rendering only what they have to render and pass the
    job to further components, thus ensuring the separation of concerns. It's also
    used for configuring nested components so that the ones at the top of the hierarchy
    can say what particular aspects the children components should have, just by passing
    properties. It's also common to define functions on parent nodes and pass them
    to children as a callback to be triggered whenever the child component wants,
    improving the component reusability and testability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s demonstrate a small example simulating a static to-do list. The list
    is split into small components that render only the necessary and pass properties
    down to children components, defining the whole functionality of the view. This
    is what it is going to render at the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data flow with properties](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We''re going to break our view into smaller components and will start doing
    it from the innermost one to the topmost one. Before we start, let''s discuss
    a little more about each component and its role in view:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TaskList` – This component represents a list (the `ul` element) that accepts
    an array of tasks to be rendered. It iterates through the tasks array creating
    a `TaskItem` component. Along with passing the task details through a property,
    to be rendered in the `TaskItem` component, it also passes some function callbacks
    that, for now, will just fake some operations to simplify the demonstration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TaskItem` – This component represent a single task (the `li` element) that
    renders the task name, an input checkbox representing whether the task is completed,
    and a button to remove the task. Again, the input and the button will just log
    some text to simplify the demonstration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `TaskItem` component should look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `TaskList` component should be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The task list has a bit more functionality and code. It takes care of rendering
    the list of tasks and handles operations on it. This is a very common pattern
    in ReactJS, to maintain the control of your model objects in a single place that
    is, of course, if it's responsibility for doing so. In a more complicated scenario,
    you would have some "controllers" or "containers" (as they like to call them in
    the ReactJS community), each one having its own task and encapsulating what they
    are responsible for. Thus, all of the containers are having their own responsibility
    and not interfering with each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is just one missing part in our static task list example, which is to
    render the component in an HTML element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We're passing some static tasks to the list to explain how properties work and
    some practices on how to use them. We think that small examples as to-do/tasks/hello-worlds
    don't represent the real-world problems that we face day by day; although they
    are great for starting to learn a tool functionality, they fail when you try to
    make more reasonable examples that have asynchronous operations, deal with outside
    APIs, authentication, and so on. For that reason, the following topics will cover
    how to set up our real scenario applications using Facebook API (also known as
    Open-Graph API), logins into Facebook, and lists that a logged-in user likes.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Facebook Open-Graph API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following sections, we're going to learn more about Facebook Open-Graph
    API and configure it so we can start crafting some code to build our awesome application.
  prefs: []
  type: TYPE_NORMAL
- en: What it is and how to configure it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Facebook Open-Graph API** is a service for getting, editing, and adding common
    Facebook resources. Some of its functionalities that you can use in your own application
    are: login; request user-specific resource permissions such as manage events,
    post to friends walls, and the list goes on. It has a bunch of functionalities
    that you can use and integrate your app with. One of the main functionalities
    used by third-party applications is, of course, the login integration. You can
    use it just as a login platform, for instance, if you don''t want or don''t have
    time to build one.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The API documentation is provided at [https://developers.facebook.com/](https://developers.facebook.com/)
    and it's recommended that you check this out.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to test some requests to their API, without having to start developing
    an application from scratch, you can use a very useful tool called *Graph API
    Explorer*. It''s commonly used for testing out an endpoint before developing it
    or just checking how the response JSON result is returned. Graph API Explorer
    can be found at the **Tools & Support** menu item at the top header. This is what
    the tool looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What it is and how to configure it](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Most of the resources available on Facebook Open-Graph API require authorization.
    Just a few are available without having to provide an **access token**. An access
    token is a kind of ticket used by your application to act on the user's behalf,
    so you can get or submit data. Basically, you ask Facebook for some user's permissions;
    Facebook opens a popup asking the user to log in and shows the permissions your
    app is requesting; once the user allows them, Facebook will send back the user
    information/object to your page with the generated access token. From that time
    on, you have access to other Open-Graph API resources that your app needs. You
    just have to provide this token to every subsequent request you make. This is
    how *OAuth* authorization standards work but this book will not cover OAuth in
    detail, as it is not the purpose of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find more details about *OAuth* at [http://oauth.net/2/](http://oauth.net/2/).
  prefs: []
  type: TYPE_NORMAL
- en: 'In Graph API Explorer, you can get an access token by clicking on the button
    **Get Access Token**. This will open a popup with a bunch of permissions that
    your operation can use. Once you have selected the permissions you want, Graph
    API Explorer will show a popup requesting you to confirm the permissions requested.
    This process generates a new access token that allows you to make request actions
    to those restricted resources. Try checking out the `user_likes` permission and
    requesting your user''s list of likes through the endpoint `/me/likes`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What it is and how to configure it](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You will probably see a JSON result in the box below the **Submit** button.
  prefs: []
  type: TYPE_NORMAL
- en: This works very well when in Graph API Explorer but this is used just for testing
    purposes. In order to make that work, we have to create an application (APP-ID)
    at the Facebook developers site. This follows the OAuth standards specification
    and allows the user, who is logging in to your app, to know more about your application
    before granting access. In order to create an application in Facebook and obtain
    this APP-ID, go to the **My Apps** menu at the header of the page; there will
    be an option for creating a new app.
  prefs: []
  type: TYPE_NORMAL
- en: '![What it is and how to configure it](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: At the time of writing this book, the Facebook Open-Graph API recommended version
    was v.2.2.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an app-id on the Facebook developers site
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you click the **Add a New App** button shown in the preceding image, Facebook
    will ask you which type of application you need.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an app-id on the Facebook developers site](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose the **Website** option, which indicates our app is going to run in a
    separate web page with no Facebook content around. After that, give it a fancy,
    original, and unpredictable name as I did: `learning-reactjs`. Once it''s done,
    you will be redirected to the app details and configuration page that looks something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an app-id on the Facebook developers site](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Yay! We have our app-id ready; now we can use it to make request calls to Facebook
    Open-Graph API.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One important thing to note is that some permissions require further analysis
    from Facebook before going into production. As we are going to use this just for
    getting the data of our own user, it's OK. If you try to log in with a different
    user, it won't be possible as the `user_likes` permission requires your application
    to be submitted to analysis and doing that takes lots of time and should be done
    just in case you want to put your application into production.
  prefs: []
  type: TYPE_NORMAL
- en: Open-Graph JavaScript SDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Facebook Open-Graph API provides SDKs for common programming languages to ease
    the pain of consuming their resources. The JavaScript SDK can be found at [https://developers.facebook.com/docs/javascript](https://developers.facebook.com/docs/javascript).
    Their documentation ([https://developers.facebook.com/docs/javascript/quickstart/v2.5](https://developers.facebook.com/docs/javascript/quickstart/v2.5))
    is comprehensive and they have tutorials such as logging in, working with multiple
    requests, and so on. If you're considering taking an advanced course in learning
    Open-Graph API using JavaScript SDK, it is worth taking a look afterward.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just to recap what we''re about to do: we''re going to create a simple HTML
    page that will load the Facebook JavaScript SDK. After that, we''re going to log
    in to Facebook and request our logged-in user list of likes and pass it to a ReactJS
    component, which we will also create, through properties.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Facebook JavaScript SDK needs to be loaded in the background, without the
    waiting time (asynchronously) after the page finishes loading. In order to do
    that, we need to create a `script` HTML element, put its `src` (source) attribute
    to point to the SDK script, and, finally, insert that into the DOM. Fortunately,
    the SDK page has an example ready to use and you just need to replace the `APP-ID`
    property within it. We are going to use their example. This is what the script
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`window.fbAsyncInit` is an initialization function with your Facebook `appId`
    and other details.'
  prefs: []
  type: TYPE_NORMAL
- en: Once the asynchronous initialization is done, if the concerned element is found,
    then JavaScript(js) connects with `//connect.facebook.net/en_US/sdk/debug.js`.
  prefs: []
  type: TYPE_NORMAL
- en: We need to change the `appId` parameter to `t Facebook-app-id`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s get started by creating an `index.html` file inside a separate folder
    to organize things. The page will be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We are commenting the `js.src` line and duplicating it with a debug JavaScript
    file. This helps with finding errors and debugging your script.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A **Content Delivery Network** or **Content Distribution Network** (**CDN**)
    is a globally distributed network of proxies. Source: https://en.wikipedia.org/wiki/Server_(computing)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Servers are deployed in multiple data centers. Source: [https://en.wikipedia.org/wiki/Data_center](https://en.wikipedia.org/wiki/Data_center)'
  prefs: []
  type: TYPE_NORMAL
- en: The goal of a CDN is to serve content to end users with high availability and
    high performance. Source [https://en.wikipedia.org/wiki/Content_delivery_network](https://en.wikipedia.org/wiki/Content_delivery_network)
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to reference ReactJS dependencies and we are referencing the
    CDN version ones to make it easier to demonstrate and for learning purposes. After
    referencing the dependencies, we create some HTML elements, a title, a logout
    anchor to log out from Facebook, and a `div` that will be the host for the ReactJS
    component to be rendered. Later, we configure the Facebook Open-Graph JavaScript
    SDK as explained before, but with one extra command, `checkLoginStatusAndLoadUserLikes();`,
    that will be explained soon. Lastly, we reference our `index.jsx` file that will
    contain the magic to make it all happen.
  prefs: []
  type: TYPE_NORMAL
- en: We put the `checkLoginStatusAndLoadUserLikes` call within the `fbAsyncInit`
    function because the Open-Graph SDK JavaScript triggers that function once it
    is loaded, so this is the right place to call Open-Graph API calls. Continuing
    with our development, inside our `index.jsx` file, let's implement the `logout`
    and `checkLoginStatusAndLoadUserLikes` functions and test it out in order to see
    the Facebook integration working.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `logout` function should be as simple as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This will just log the user out of Facebook, requiring him to log in again.
    As we''ll keep it simple, for learning purposes, we''re not going to handle the
    scenario where the user logs in and out to manage the list of likes when these
    events happen in sequence. So, let''s implement our `checkLoginStatusAndLoadUserLikes`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a very straightforward code as well. Every call made by the Open-Graph
    JavaScript SDK will be done asynchronously, so we have to provide a functions
    callback that will be triggered once the request made to Facebook API returns
    with the response. In this code, we''re going to log in to the console once we''ve
    logged in to the app. This process will call a Facebook login popup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Open-Graph JavaScript SDK](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Try it out! Load the screen and once logged in, click the logout anchor and
    reload the page again, check out the console from your browser, and see the log
    we've printed. The following image shows the login popup.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to make it work in `localhost:3000`, it's necessary that you run the
    Python `SimpleHTTPServer` command from inside the code folder, `python -m SimpleHTTPServer`.
    For more details about this command and other ways of running your app, check
    [Chapter 1](part0015_split_000.html#page "Chapter 1. Getting Started with ReactJS"),
    *Getting Started with ReactJS*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also make it work by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'httpster: Is a simple http server to run the static content. In chrome browser
    the `index.html` file sometime''s doesn''t render due to X-origin error. Hence
    running this webserver from your application directory, will be easier to test
    your application in Chrome. Just run the command httpster from your application''s
    `root` directory.'
  prefs: []
  type: TYPE_NORMAL
- en: By Default the server runs in port `3333`, thus `localhost:3333` in the browsers
    should render the `index.html` page of your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our integration working, let''s get this list of likes for
    the logged-in user. Change your `checkLoginStatusAndLoadUserLikes` function to
    be like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The first step is to check out where the user is already logged in. Calling
    the `FB.getLoginStatus` function can do this. Inside the callback function, the
    parameter passed represents the response from the API. This response contains
    information about the login status for the user. This will be a very common parameter
    as other API calls also return a response object back to your callback function.
    The status that represents that the user has authorized the app and has successfully
    logged in is the `connected` one. If the user is already logged in, we just call
    the `loadUserAndLikes` function, but if it's not connected then it calls another
    function that will log in and then call the API to load the user's list of likes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function `loginAndLoadUserLikes` should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The login functionality has been moved to this method. Once the login operation
    is complete then we call `loadUserAndLikes`. Notice that we now pass an object
    at the end of the login function c`all {scope: ''user_likes''}`; this object represents
    the scope/permissions on Facebook, as required by our applicaton. In the following
    example, within the first function call (`loadUserAndLikes`), the `userResponse`
    of the logged-in user is returned. Then the API lists all the likes of that logged-in
    user.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The function `loadUserAndLikes` should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You can have as much JavaScript code as you want inside JSX files. It's not
    a specific type of file that understands only its own syntax, it just converts
    the places where you use JSX-specific syntax markup instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that we are making two requests for the API: the first one will get
    the user details and the other will get the user''s list of likes. We are logging
    them to the console in order to test first before we implement our ReactJS component
    to render it. This is what it logs out for my user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Open-Graph JavaScript SDK](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Until now, we have explored Facebook Open-Graph API and ways to configure it.
    You might be wondering what it has to do with learning ReactJS? All I can say
    is that, in my experience, all the examples that most people try to provide when
    teaching a new library or framework, rely on **To-Do** apps, synchronous operations
    and, when they use an external. It doesn't make common integration tasks such
    as login. Such integration gives a better idea of how the thing being taught works
    when we put more realistic scenarios into place and try to make them as straightforward
    as possible. After finishing this example, we will have an idea about how to integrate
    ReactJS with your own private API, for instance.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering data in a ReactJS component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now have our data to pass to the ReactJS component we''re going to create.
    First, let''s start with the `UserDetails` component. This is going to show a
    link with the logged-in username and the source to this user Facebook page. First,
    remove our old logout anchor from the `index.html` file as this is not going to
    be necessary anymore. Our logout functionality will be moved to our ReactJS component
    instead. We''ll also create another `div`, named `user`, above the main `div`;
    this new element will hold the `UserDetails` component. The changes in `index.html`
    should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can create the `UserDetails` ReactJS component at the bottom of the `index.jsx`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to change the `loadUserAndLikes` function to call the `React.render`
    method, pointing it to the user HTML `div` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `UserDetails` ReactJS component is very straightforward
    and basic; it works like a template and just renders data that is passed to it.
    Don't be disappointed with this because we're going to give this more functionality
    in coming chapters, such as rendering a login button when logged out, instead
    of asking to refresh the page, hiding the list, and showing a loading `gif` image
    when waiting for the SDK response. All of those features require that we deal
    with a state and this is going to be covered in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: You can test it by refreshing the page, clicking the logout button, and refreshing
    the page again. Once you log in on Facebook, the user details should be displayed
    in the browser, below the title of our page.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now need to render the user''s list of likes and substitute the ugly `console.log(2,
    likesResponse);` command to a ReactJS render function. First, let''s create our
    `UserLikesList` component at the bottom of the `index.jsx` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We create an array of `UserLikeItem` components called `items` and we''re rendering
    them inside the list `<ul>` element. The `UserLikeItem` component should look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We put our property data in a separate variable to avoid long names inside
    the component markup. Note that we are also displaying an image from the liked
    Facebook resource; because of that, we also need to ask that in our API call and
    render our component passing this list of likes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We've changed the `loadUserAndLikes` function to ask the API to also bring a
    picture of the liked Facebook resource. By default, it's omitted from the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try it out and see if you get a list of your likes displayed in the page. It
    might be looking very odd because we haven''t created any style. Create a style
    element in the `index.html` page for styling our list: a very basic one but just
    for making our example more pleasing to look at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![Rendering data in a ReactJS component](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: OK, maybe it's bad without styling. Anyway, you can always ask a designer for
    help!
  prefs: []
  type: TYPE_NORMAL
- en: ReactJS properties make your components configurable and changeable. As you
    can see, it's very straightforward to create ReactJS components and render them
    in your page, even in an existing one. You don't need to make the whole app support
    the framework or start one from scratch. You simply define what your components
    are, considering them as a set, avoiding big ones that are difficult to maintain,
    and render them somewhere in the page. Its power increases by intelligently working
    with stateful components, and this is our next step in learning ReactJS.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've learned how to pass properties to ReactJS components
    and render the UI based on those components. We have also learned how to make
    a parent component to communicate with its children. We have seen how to configure
    Facebook Open-Graph API, how to integrate that with ReactJS using login functionality,
    and how to render the response of an API request call into a set of smaller ReactJS
    components.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to dive into stateful components and explore
    how to make mutable ReactJS components based on a user's input or for any other
    reason that requires the state to change and your UI to represent that automatically.
  prefs: []
  type: TYPE_NORMAL
