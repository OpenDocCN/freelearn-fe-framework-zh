["```js\n    npm install @reduxjs/toolkit\n    ```", "```js\n    npm install react-redux\n    ```", "```js\n    npm install --save-dev @redux-devtools/core\n    ```", "```js\n{\n    userLoggedIn: true,\n    userData: {\n        id: 3,\n        name: \"John Doe\",\n        email: \"john@doe.com\",\n        image: \"imageURL\",\n        addedImages: […],\n        likedImages: […],\n        numberOfPosts: 35,\n        numberOfFollowers: 1552,\n        numberOfFollows: 128,\n        idsOfFollowedUsers: […],\n        idsOfConversations: […]\n    },\n}\n```", "```js\n{\n    imageModalOpen: true,\n    imageId: 3,\n    authorId: 3,\n    imageUrl: \"imageUrl\",\n    numberOfLikes: 28,\n    numberOfConversations: 12,\n    numberOfFollows: 128\n}\n```", "```js\n[\n  {\n    \"id\": 1,\n    \"userId\": 2,\n    \"text\": \"Hey, how's it going?\"\n  },\n  {\n    \"id\": 2,\n    \"userId\": 4,\n    \"text\": \"Yo, are you going to the wedding?\"\n  },\n//…\n```", "```js\n{ type: 'LIKE_IMAGE', payload: { Object with data about the liked image } }\n```", "```js\nfunction likedImages(state =[], action) {\n  if (action.type === 'LIKE_IMAGE') {\n    let newLikedImages = state;\n    newLikedImages.push(action.payload);\n    return newLikedImages\n  } else {\n    return state\n  }\n}\n```", "```js\nexport const user = {\n  userLoggedIn: false,\n  userData: null,\n};\n```", "```js\n{type: 'LOGIN', payload: userData}\n```", "```js\n// reducers/user.js\nimport { user } from \"../store\";\nexport const login = (state=user, action) => {\n  if (action.type === 'LOGIN') {\n    return {\n        ...state,\n        user: {\n          userLoggedIn: true,\n          user: action.payload,\n        },\n    }\n  } else {\n    return state\n  }\n}\n```", "```js\n{ type: 'LOGOUT' }\n```", "```js\nexport const login = (state=user, action) => {\n  switch (action.type) {\n    case \"LOGIN\": {\n      return {\n        ...state,\n        user: {\n          userLoggedIn: true,\n          user: action.payload,\n        },\n      };\n    }\n    case \"LOGOUT\": {\n      return {\n        ...state,\n        user: {\n          userLoggedIn: false,\n          user: null,\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n```", "```js\nexport const likedImages = (state = [], action) => {\n  if (action.type === \"LIKE_IMAGE\") {\n    let newLikedImages = state;\n    newLikedImages.push(action.payload);\n    return newLikedImages;\n  } else {\n    return state;\n  }\n};\n```", "```js\n{ type: 'UNLIKE_IMAGE', payload: { Object with data about the unliked image } }\n```", "```js\n// ./reducers/likedImages.js\nexport const likedImagesReducer = (state = [], action) => {\n  switch (action.type) {\n    case \"LIKE_IMAGE\": {\n      const newLikedImage = action.payload;\n      return [...state, newLikedImage];\n    }\n    case \"UNLIKE_IMAGE\": {\n      const stateWithoutLikedImage = state.filter(\n        (item) => item !== action.payload\n      );\n      return stateWithoutLikedImage;\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action.type}`);\n    }\n  }\n};\n```", "```js\n// ./store.js\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport usersReducer from \"./reducers/users\";\nimport likedImagesReducer from \"./reducers/likedImages\";\nexport const store = configureStore({\n  reducer: {\n    user: usersReducer,\n    likedImages: likedImagesReducer,\n  },\n});\n```", "```js\nimport { store } from \"./store\";\nimport { Provider } from \"react-redux\";\n```", "```js\nexport default function App() {\n//…\n  return (\n    <SafeAreaProvider>\n      <Provider store={store}>\n//…\n```", "```js\n// src/components/ListOfFavorites\nimport { useSelector } from \"react-redux\";\nexport const ListOfFavorites = ({ navigation }) => {\n    const { likedImages } = useSelector((state) =>      state.likedImages);\n//…\n```", "```js\n//reducers/likedImages.js\nexport const likedImagesReducer = (state = [], action) => {\n  switch (action.type) {\n  //…\n    default: {\n      return state;\n    }\n  }\n};\n```", "```js\n//reducers/likedImages.js\nimport { createSlice } from \"@reduxjs/toolkit\";\nexport const likedImagesSlice = createSlice({\n  name: \"likedImages\",\n  initialState: [],\n  reducers: {\n    likeImage: (state) => {\n      const newLikedImage = action.payload;\n      return [...state, newLikedImage];\n    },\n    unLikeImage: (state, action) => {\n      const stateWithoutLikedImage = state.filter(\n        (item) => item !== action.payload\n      );\n      return stateWithoutLikedImage;\n    },\n  },\n});\nexport const { init, likeImage, unLikeImage } = likedImagesSlice.actions;\nexport default likedImagesSlice.reducer;\n```", "```js\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { requestBase } from \"./src/utils/constants\";\nexport const fetchLikedImages = createAsyncThunk(\n  \"likedImages/initLikedImages\",\n  async () => {\n      const response = await fetch(requestBase + \"/john_doe/        likedImages.json\");\n    return await response.json();\n  }\n);\n```", "```js\n// reducers/likedImages.js\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchLikedImages } from \"../asyncFetches\";\nexport const likedImagesSlice = createSlice({\n  name: \"likedImages\",\n  initialState: {\n    likedImages: [],\n    loading: true,\n  },\n  reducers: {\n   //…\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchLikedImages.pending, (state) => {\n      state.loading = true;\n    });\n      builder.addCase(fetchLikedImages.fulfilled,        (state, action) => {\n      state.likedImages = action.payload;\n      state.loading = false;\n    });\n    builder.addCase(fetchLikedImages.rejected, (state) => {\n      state.loading = false;\n    });\n  },\n});\n```", "```js\n//src/surfaces/Home\nimport { fetchLikedImages } from \"../../asyncFetches\";\nimport { useDispatch, useEffect } from \"react-redux\";\n// …\nexport const Home = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchLikedImages());\n  }, []);\n```", "```js\n//src/components/ListOfFavorites\nimport { useSelector, useDispatch } from \"react-redux\";\nexport const ListOfFavorites = ({ navigation }) => {\n    const { likedImages } = useSelector((state) =>      state.likedImages);\n  const dispatch = useDispatch();\n  const [imageList, setImageList] = useState([]);\nuseEffect(() => {\n    const reversedImages = [...likedImages].reverse();\n    setImageList(reversedImages);\n  }, [likedImages]);\nif (!imageList) {\n    return <AppLoading />;\n  }\n//…\n      <FlatList\n        data={imageList}\n        renderItem={renderItem}\n        keyExtractor={(item) => item.itemId}\n       //…\n```", "```js\nconst reversedImages = [...likedImages].reverse();\n```", "```js\n//src/surfaces/ImageDetailsModal\nimport { likeImage, unLikeImage } from \"../../reducers/  likedImages\";\nimport { useDispatch, useSelector } from \"react-redux\";\nexport const ImageDetailsModal = ({ navigation, route }) => {\n    const { likedImages } = useSelector((state) =>      state.likedImages);\n  const [isCurrentImageLiked, setIsCurrentImageLiked] = useState(false);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const checkIfLiked =\n      likedImages?.filter(\n          (favoritedImg) => favoritedImg.itemId ===            route.params.imageItem.itemId\n      ).length > 0;\n    setIsCurrentImageLiked(checkIfLiked);\n  }, [likedImages]);\n```", "```js\n<Pressable\n          onPress={() => {\n            if (isCurrentImageLiked) {\n              dispatch(unLikeImage(route.params.imageItem));\n            } else {\n              dispatch(likeImage(route.params.imageItem));\n            }\n          }}\n        >\n```", "```js\nbrew install react-native-debugger\n```", "```js\nopen \"rndebugger://set-debugger-loc?host=localhost&port=8081\"\n```", "```js\nopen \"rndebugger://set-debugger-loc?host=localhost&port=19000\"\n```", "```js\nexpo start\n```"]