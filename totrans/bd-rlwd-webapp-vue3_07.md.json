["```js\nnpm install @supabase/supabase-js\n```", "```js\nVITE_SUPABASE_URL=YOUR_SUPABASE_URLVITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY\n```", "```js\nnpx quasar dev\n```", "```js\nnpx quasar dev -m electron\n```", "```js\n// ...abbreviatedboot: ['supabase', 'router-auth'],\n// …abbreviated\n```", "```js\n<script setup lang=\"ts\"></script><template>\n  <q-page class=\"column items-center justify-center\">\n    <h1 class=\"text-h1\">Home</h1>\n  </q-page>\n</template>\n```", "```js\n    meta: {      requiresAuth: true,\n    },\n```", "```js\n<script setup lang=\"ts\">import { ref } from 'vue';\nimport type { Ref } from 'vue';\nimport FormLogin from 'src/components/FormLogin.vue';\nimport FormSignUp from 'src/components/FormSignUp.vue';\nconst tab: Ref<'login' | 'sign-up'> = ref('login');\n</script>\n<template>\n  <div class=\"column items-center justify-center\">\n    <h1 class=\"text-h2\">Home</h1>\n    <q-card class=\"column\">\n      <q-tabs\n        v-model=\"tab\"\n        active-color=\"primary\"\n        indicator-color=\"primary\"\n        align=\"justify\"\n        narrow-indicator\n      >\n        <q-tab name=\"login\" label=\"Log in\" />\n        <q-tab name=\"sign-up\" label=\"Sign up\" />\n      </q-tabs>\n      <q-separator />\n      <q-tab-panels v-model=\"tab\" animated>\n        <q-tab-panel name=\"login\">\n          <FormLogin />\n        </q-tab-panel>\n        <q-tab-panel name=\"sign-up\">\n          <FormSignUp />\n        </q-tab-panel>\n      </q-tab-panels>\n    </q-card>\n  </div>\n</template>\n```", "```js\nconst essentialLinks: EssentialLinkProps[] = [  {\n    title: 'Account',\n    caption: 'Manage my account settings',\n    icon: 'face',\n    link: '/',\n  },\n  {\n    title: 'Expenses',\n    caption: 'Track my expenses',\n    icon: 'toll',\n    link: '/expenses',\n  },\n  {\n    title: 'Categories',\n    caption: 'Manage my expense categories',\n    icon: 'settings',\n    link: '/categories',\n  },\n];\n```", "```js\n<script setup lang=\"ts\">import { supabase } from 'src/boot/supabase';\nimport { useRouter } from 'vue-router';\nconst router = useRouter();\nconst signOut = async (): Promise<void> => {\n  try {\n    const { error } = await supabase.auth.signOut();\n    if (error) {\n      throw new Error('Logout failed');\n    }\n  } catch (error) {\n    console.error(error.message);\n  } finally {\n    router.go(0);\n  }\n};\n</script>\n<template>\n  <q-btn @click=\"signOut()\">Sign out</q-btn>\n</template>\n```", "```js\n<script setup lang=\"ts\">import CategoryList from 'src/components/CategoryList.vue';\nimport CategoryAdd from 'src/components/CategoryAdd.vue';\n</script>\n<template>\n  <q-page class=\"column items-center justify-center\">\n    <h1 class=\"text-h1\">Categories</h1>\n    <category-list />\n    <category-add />\n  </q-page>\n</template>\n```", "```js\n<script setup lang=\"ts\">import ExpenseAdd from 'src/components/ExpenseAdd.vue';\n</script>\n<template>\n  <q-page class=\"column items-center justify-center\">\n    <h1 class=\"text-h1\">Expenses</h1>\n<expense-add />\n  </q-page>\n</template>\n```", "```js\n<script setup lang=\"ts\">import ExpenseAdd from 'src/components/ExpenseAdd.vue';\nimport CategoryOverview from 'src/components/CategoryOverview.vue';\n</script>\n<template>\n  <q-page class=\"column items-center justify-center\">\n    <h1 class=\"text-h1\">Expenses</h1>\n    <expense-add />\n    <category-overview />\n  </q-page>\n</template>\n```", "```js\n<script setup lang=\"ts\">import { computed } from 'vue';\nimport { useExpensesStore } from 'src/stores/expenses';\nimport { storeToRefs } from 'pinia';\nimport { Expense } from 'src/types/expenses';\nconst expensesStore = useExpensesStore();\nconst { expenses } = storeToRefs(expensesStore);\ninterface Props {\n  categoryId: string;\n}\nconst props = defineProps<Props>();\nconst totalPerCategory = computed(() => {\n  return expenses.value.reduce((total: number, expense: Expense): number => {\n    if (expense.category_id === props.categoryId) {\n      return total + expense.amount;\n    }\n    return total;\n  }, 0);\n});\n</script>\n<template>\n  <q-card-section  align=\"right\"> Total: {{ totalPerCategory }} </q-card-section>\n</template>\n```", "```js\n<script setup lang=\"ts\">// …abbreviated\nimport ExpensesCategoryTotal from './ExpensesCategoryTotal.vue';\n// …abbreviated\n</script>\n  <div class=\"masonry\">\n    <!-- abbreviated -->\n        <q-card\n          clickable\n          class=\"q-ma-sm\"\n          :style=\"{ backgroundColor: category.color }\"\n        >\n          <q-card-section>\n            <div class=\"text-h6\">{{ category.name }}</div>\n          </q-card-section>\n          <expenses-category-total :category-id=\"category.id\" />\n        </q-card>\n    <!-- abbreviated -->\n</template>\n```", "```js\n<script setup lang=\"ts\">// ...abbreviated\nimport type { ExpenseWithCategory } from 'src/types/expenses';\n// ...abbreviated\nconst loading: Ref<boolean> = ref(true);\nconst showDialog: Ref<boolean> = ref(false);\nconst selectedCategoryName: Ref<string | undefined> = ref(undefined);\nconst expensesByCategoryId: Ref<ExpenseWithCategory[] | undefined> = ref([]);\nonMounted(async () => {\n  // ...abbreviated\n});\nconst getExpensesByCategoryId = async (\n  categoryName: string,\n  categoryId: string\n) => {\n  selectedCategoryName.value = categoryName;\n  const expenses = await expensesStore.getExpensesByCategory(categoryId);\n  if (expenses && expenses.length > 0) {\n    expensesByCategoryId.value = expenses;\n    showDialog.value = true;\n  }\n};\nconst getCategories = async () => {\n// ...abbreviated\n};\n</script>\n```", "```js\n        <q-card          class=\"q-ma-sm\"\n          :style=\"{ backgroundColor: category.color }\"\n@click=\"getExpensesByCategoryId(category.name, category.id)\"\n        >\n          <q-card-section>\n            <div class=\"text-h6\">{{ category.name }}</div>\n          </q-card-section>\n          <expenses-category-total :category-id=\"category.id\" />\n        </q-card>\n```", "```js\n<template>  <div class=\"masonry\">\n    <!-- ...abbreviated –->\n  </div>\n  <q-dialog v-model=»showDialog»>\n    <q-card v-if=\"expensesByCategoryId && expensesByCategoryId.length > 0\">\n      <q-card-section>\n        <div class=\"text-h6\">\n          {{ `${selectedCategoryName} expenses overview` }}\n        </div>\n      </q-card-section>\n      <q-separator />\n      <q-card-section style=\"max-height: 50vh\" class=\"scroll\">\n        {{ expensesByCategoryId }}\n      </q-card-section>\n    </q-card>\n  </q-dialog>\n</template>\n```", "```js\n<script setup lang=\"ts\">interface Props {\n  expenses: {\n    id: string;\n    description: string;\n    amount: number;\n    created_at: Date;\n  }[];\n}\nconst props = defineProps<Props>();\nconst formatDate = (date: Date) => {\n  const dateObj = new Date(date);\n  return dateObj.toLocaleDateString();\n};\n</script>\n<template>\n  <q-list dense class=\"expenses\" v-if=\"expenses\">\n    <q-item v-for=\"expense in expenses\" :key=\"expense.id\">\n      <q-item-section>\n        <q-card-section class=\"flex row justify-between\">\n          <div>{{ expense.description }}</div>\n          <div>{{ expense.amount }}</div>\n          <div>{{ formatDate(expense.created_at) }}</div>\n        </q-card-section>\n      </q-item-section>\n    </q-item>\n  </q-list>\n</template>\n<style scoped>\n.expenses {\n  min-width: 400px;\n  max-width: 80vw;\n}\n</style>\n```", "```js\n<script setup lang=\"ts\">// ...abbreviated\nimport ExpensesCategoryTotal from './ExpensesCategoryTotal.vue';\nimport ExpensesList from './ExpensesList.vue';\n// ...abbreviated\n</script>\n<template>\n  <div class=\"masonry\">\n    <!-- ...abbreviated -->\n  </div>\n  <q-dialog v-model=\"showDialog\">\n    <q-card v-if=\"expensesByCategoryId && expensesByCategoryId.length > 0\">\n      <q-card-section>\n        <div class=\"text-h6\">\n          {{ `${selectedCategoryName} expenses overview` }}\n        </div>\n      </q-card-section>\n      <q-separator />\n      <q-card-section style=\"max-height: 50vh\" class=\"scroll\">\n        <expenses-list :expenses=\"expensesByCategoryId\" />\n      </q-card-section>\n    </q-card>\n  </q-dialog>\n</template>\n<style lang=\"scss\" scoped>\n// ...abbreviated\n</style>\n```", "```js\nquasar build -m electron\n```", "```js\nnpx icongenie generate -m electron -i ./src/assets/icon.png\n```", "```js\nnpm i -g @quasar/icongenie\n```", "```js\nicongenie generate -m electron -i ./src/assets/icon.png\n```", "```js\n// ...abbreviated  electron: {\n      // extendElectronMainConf (esbuildConf)\n      // extendElectronPreloadConf (esbuildConf)\n      inspectPort: 5858,\n      bundler: 'packager', // 'packager' or 'builder'\n      packager: {\n        // https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#options\n        // OS X / Mac App Store\n        // appBundleId: '',\n        // appCategoryType: '',\n        // osxSign: '',\n        // protocol: 'myapp://path',\n        // Windows only\n        // win32metadata: { ... }\n      builder: {\n        // https://www.electron.build/configuration/configuration\n        appId: 'packt-expense-tracker',\n      },\n    },\n// ...abbreviated\n```", "```js\nelectron: {  inspectPort: 5858,\n  bundler: 'packager', // 'packager' or 'builder'\n  packager: {\n    platform: ['darwin', 'linux', 'win32'],\n    darwin: {\n      arch: ['x64'],\n    },\n    linux: {\n      arch: ['x64', 'arm64'],\n    },\n    win32: {\n       arch: ['x64'],\n    },\n  },\n  // ...abbreviated\n},\n```", "```js\nbrew install --cask wine-stable\n```"]