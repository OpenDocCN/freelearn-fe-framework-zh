["```js\nimport { Observable, of } from 'rxjs';\nexport class SampleService {\n  getValue(value: boolean): Observable<boolean> {\n    return of(value);\n  }\n}\n```", "```js\ndescribe('SampleService', () => {\n  let service: SampleService;\n  beforeEach(() => {\n    service = TestBed.inject(SampleService);\n  });\n  it('should return true as a value', () => {\n    service.getValue(true).subscribe(\n      result=>expect(result).toEqual(true))\n  });\n});\n```", "```js\n  it('should return true as a value', () => {\n  service.getValue(true).subscribe(\n    result=>expect(result).toEqual(false))\n  });\n```", "```js\n   it('should return true as a value', (done) => {\n    service.getValue(true).subscribe(\n      result => {\n        expect(result).toEqual(false);\n        done();\n      }\n    );\n  });\n```", "```js\nexport class SampleService {\n  getValues(): Observable<String> {\n    return of('Hello', 'Packt', 'Readers');\n  }\n}\n```", "```js\nit('should return values in the right order', (done) => {\n  const expectedValues = ['Hello', 'Packt', 'Readers'];\n  let index = 0;\n  service.getValues().subscribe(result => {\n    expect(result).toBe(expectedValues[index]);\n    index++;\n    if (index === expectedValues.length) {\n      done();\n    }\n  });\n});\n```", "```js\nit('should return values in the right order', (done) => {\n  const expectedValues = ['Hello', 'Packt', 'Readers'];\n  service.getValues().pipe(toArray()).subscribe(result => {\n    expect(result).toEqual(expectedValues);\n    done();\n  });\n});\n```", "```js\n  getValues(): Observable<String> {\n    return timer(0, 5000).pipe(\n      take(3),\n      switchMap((result) => of('Hello', 'Packt',\n                               'Readers'))\n    )\n```", "```js\nrun<T>(callback: (helpers: RunHelpers) => T): T;\n```", "```js\n    export interface RunHelpers {\n    cold: typeof TestScheduler.prototype.\n    createColdObservable;\n    hot: typeof TestScheduler.prototype.\n    createHotObservable;\n    flush: typeof TestScheduler.prototype.flush;\n    expectObservable: typeof TestScheduler.\n    prototype.expectObservable;\n    expectSubscriptions: typeof TestScheduler.\n    prototype.expectSubscriptions;\n}\n```", "```js\n    /**\n        * @param marbles A diagram in the marble DSL.\n          Letters map to keys in `values` if provided.\n        * @param values Values to use for the letters in\n          `marbles`. If ommitted, the letters themselves\n          are used.\n        * @param error The error to use for the `#`\n          marble (if present).\n        */\n    createColdObservable<T = string>(marbles: string,\n    values?: {\n            [marble: string]: T;\n        }, error?: any): ColdObservable<T>;\n    ```", "```js\n    /**\n        * @param marbles A diagram in the marble DSL.\n          Letters map to keys in `values` if provided.\n        * @param values Values to use for the letters in\n          `marbles`. If ommitted, the letters themselves\n          are used.\n        * @param error The error to use for the `#`\n          marble (if present).\n        */\n    createHotObservable<T = string>(marbles: string,\n    values?: {\n            [marble: string]: T;\n        }, error?: any): HotObservable<T>;\n    ```", "```js\nexport class SampleService {\n  getValues(): Observable<String> {\n    return of('Hello', 'Packt', 'Readers');\n  }\n}\n```", "```js\n    import { TestScheduler } from 'rxjs/testing';\n    ```", "```js\n    import { TestScheduler } from 'rxjs/testing';\n    describe('Service: SampleService', () => {\n      let scheduler : TestScheduler;\n      let service: SampleService;\n      beforeEach(() => {\n          service = TestBed.inject(SampleService);\n          scheduler = new TestScheduler((actual, expected) => {\n          expect(actual).toEqual(expected);\n        });\n      });\n    });\n    ```", "```js\n    it('should return values in the right order', () => {\n      scheduler.run((helpers) => {\n      });\n    });\n    ```", "```js\n    it('should return values in the right order', () => {\n      scheduler.run(({expectObservable}) => {\n      });\n    });\n    ```", "```js\n    it('should return values in the right order', () => {\n      scheduler.run(({expectObservable}) => {\n      const expectedMarble = '(abc|)' ;\n      const expectedValues = {a:'Hello', b:'Packt',\n                              c:'Readers'};\n      expectObservable(service.getValues()).toBe(\n        expectedMarble, expectedValues)\n      });\n    });\n    ```", "```js\ndescribe('SampleService marble tests', () => {\nlet scheduler : TestScheduler ;\nlet service: SampleService;\nbeforeEach(() => {\n  service = TestBed.inject(SampleService);\n  scheduler = new TestScheduler((actual, expected) => {\n  expect(actual).toEqual(expected);\n});\n});\nit('should return values in the right order', () => {\n  scheduler.run(({expectObservable}) => {\n  const expectedMarble = '(abc|)' ;\n  const expectedValues = {a:'Hello', b:'Packt',\n                          c:'Readers'};\n  expectObservable(service.getValues()).toBe(\n    expectedMarble, expectedValues)\n  });\n});\n});\n```", "```js\n  getValues(): Observable<String> {\n    return timer(0, 5000).pipe(\n      take(3),\n      switchMap((result) => of('Hello', 'Packt',\n      'Readers'))\n    )\n  }\n```", "```js\ne 999ms (fg) 996ms h 999ms (i|)';\n```", "```js\n  const expectedMarble ='(abc) 4995ms (abc) 4995ms\n    (abc|)' ;\n```", "```js\nit('should return values in the right time', () => {\n  scheduler.run(({expectObservable}) => {\n  const expectedMarble ='(abc) 4995ms (abc) 4995ms (abc|)';\n  const expectedValues = {a:'Hello', b:'Packt',\n                          c:'Readers'};\n  expectObservable(service.getValues()).toBe(\n    expectedMarble, expectedValues)\n  });\n});\n```", "```js\n  saveRecipe(formValue: Recipe): Observable<Recipe> {\n    return this.http.post<Recipe>(\n      `${BASE_PATH}/recipes`, formValue);\n  }\n```", "```js\n    import { TestBed } from '@angular/core/testing';\n    import { HttpClientTestingModule} from '@angular/common/http/testing';\n    describe('RecipesService', () => {\n      beforeEach(() => {\n        TestBed.configureTestingModule({\n          imports: [HttpClientTestingModule],\n        });\n      });\n    });\n    ```", "```js\n    import { TestBed } from '@angular/core/testing';\n    import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n    import { RecipesService } from './recipes.service';\n    describe('RecipesService', () => {\n      let service: RecipesService;\n      let httpTestingController: HttpTestingController;\n      beforeEach(() => {\n        TestBed.configureTestingModule({\n          imports: [HttpClientTestingModule],\n          providers: [RecipesService]\n        });\n        httpTestingController =\n          TestBed.inject(HttpTestingController)\n        service = TestBed.inject(RecipesService)\n      });\n    });\n    ```", "```js\n      it('should save recipe from API', () => {\n        const recipeToSave : Recipe= {\n          \"id\": 9,\n          \"title\": \"Lemon cake\",\n          \"prepTime\": 10,\n          \"cookingTime\": 35,\n          \"rating\": 3,\n          \"imageUrl\": \"lemon-cake.jpg\"\n        }\n        const subscription =\n        service.saveRecipe(recipeToSave)\n          .subscribe(_recipe => {\n            expect(recipeToSave).toEqual(_recipe, 'should\n            check mock data')\n          });\n        const req = httpTestingController.expectOne(\n          `/api/recipes`);\n        req.flush(recipeToSave);\n        subscription.unsubscribe();\n      });\n    ```", "```js\n      afterEach(() => {\n        httpTestingController.verify();\n      });\n    ```"]