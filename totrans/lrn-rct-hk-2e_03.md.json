["```js\n    $ cp -R Chapter01_3 Chapter02_1 \n    ```", "```js\n    createRoot(document.getElementById('root')).render(\n      <StrictMode>\n    <App />\n    </StrictMode>,\n    ) \n    ```", "```js\nconst root = createRoot(document.getElementById('root'))\nexport function renderApp() {\n  root.render(\n    <StrictMode>\n<App />\n</StrictMode>,\n  )\n}\nrenderApp() \nroot for our React application to be rendered in. Then, we define a function to render the app into the root. Finally, we call the renderApp() function to initially render the app.\n```", "```js\n    import { useState } from 'react' \n    ```", "```js\nimport { renderApp } from './main.jsx' \n```", "```js\n    function useState(initialState) { \n    ```", "```js\n     let value = initialState \n    ```", "```js\n     function setState(nextValue) {\n        value = nextValue\n        renderApp()\n      } \n    ```", "```js\n     return [value, setState]\n    } \n    ```", "```js\n    $ npm run dev \n    ```", "```js\nconst [username, setUsername] = useState('') \n```", "```js\nconst { state: username, setState: setUsername } = useState('') \n```", "```js\n    **let** **value**\n    function useState(initialState) { \n    ```", "```js\n     let value = initialState \n    ```", "```js\n if (value === undefined) {\n    value = initialState\n  } \n```", "```js\n    export function App() {\n      const [name, setName] = useState('')\n    **const** **[lastName, setLastName] =** **useState****(****''****)** \n    ```", "```js\n     function handleLastNameChange(evt) {\n        setLastName(evt.target.value)\n      } \n    ```", "```js\n     return (\n        <div>\n          <h1>My name is: {name} **{lastName}**</h1> \n    ```", "```js\n     <input type='text' value={name} onChange={handleChange} />\n          **<****input****type****=****'text'****value****=****{lastName}****onChange****=****{handleLastNameChange}** **/>** \n    ```", "```js\n    let value \n    ```", "```js\nlet values = []\nlet currentHook = 0 \n```", "```js\n    function useState(initialState) {\n      if (**values[currentHook]** === undefined) {\n        **values[currentHook]** = initialState\n      } \n    ```", "```js\n    **let** **hookIndex = currentHook**\n    function setState(nextValue) {\n        **values[hookIndex]** = nextValue\n        renderApp()\n      } \n    ```", "```js\n     **const** **value = values[currentHook++]**\n    return [**value**, setState]\n    } \n    ```", "```js\n    export function App() {\n     **currentHook =** **0** \n    ```", "```js\n    $ cp -R Chapter02_1 Chapter02_2 \n    ```", "```js\n    export function App() {\n      currentHook = 0\n    **const** **[enableFirstName, setEnableFirstName] =** **useState****(****false****)** \n    ```", "```js\n    **// eslint-disable-next-line react-hooks/rules-of-hooks**\n    const [name, setName] = **enableFirstName ?** useState('') **: [****''****,** **() =>** **{}]**\n    const [lastName, setLastName] = useState('') \n    ```", "```js\n     function handleEnableChange(evt) {\n        setEnableFirstName(evt.target.checked)\n      } \n    ```", "```js\n     return (\n        <div>\n          <h1>\n            My name is: {name} {lastName}\n          </h1>\n    **<****input**\n    **type****=****'checkbox'**\n    **value****=****{enableFirstName}**\n    **onChange****=****{handleEnableChange}**\n     **/>** \n    ```", "```js\n    $ npm run dev \n    ```", "```js\n// NOTE: Not the actual React Hook API\nconst [name, setName] = useState('nameHook', '') \n```", "```js\nfunction createUseState() {\n  const keyName = Symbol()\n  return function useState() {\n    // …use unique key name to handle hook state…\n  }\n} \n```", "```js\n// NOTE: Not the actual React Hook API\nconst useNameState = createUseState()\nexport function App () {\n  const [name, setName] = useNameState('')\n  // …\n} \n```", "```js\n    $ cp -R Chapter02_2 Chapter02_3 \n    ```", "```js\n     // eslint-disable-next-line react-hooks/rules-of-hooks\n    const [name, setName] = enableFirstName ? useState('') : ['', () => {}] \n    ```", "```js\n const [name, setName] = useState('') \n```", "```js\n     return (\n        <div>\n          <h1>\n            My name is: **{enableFirstName ? name : ''}** {lastName}\n          </h1> \n    ```", "```js\n    $ npm run dev \n    ```", "```js\nfunction UserInfo({ username }) {\n  // NOTE: Do NOT do this\nif (username) {\n    const info = useFetchUserInfo(username)\n    return <div>{info}</div>\n  }\n  return <div>Not logged in</div>\n} \n```", "```js\n// NOTE: Do this instead\nfunction LoggedInUserInfo({ username }) {\n  const info = useFetchUserInfo(username)\n  return <div>{info}</div>\n}\nfunction UserInfo({ username }) {\n  if (username) {\n    return <LoggedInUserInfo username={username} />\n  }\n  return <div>Not logged in</div>\n} \n```", "```js\nfunction OnlineUsers({ users }) {\n  const [userInfos, setUserInfos] = useState([])\n  // ... fetch & keep userInfos up to date ...\nreturn (\n    <div>\n      {users.map((username) => {\n        const user = userInfos.find((u) => u.username === username)\n        return <UserInfo key={username} {...user} />\n      })}\n    </div>\n  )\n} \n```", "```js\nfunction OnlineUsers({ users }) {\n  return (\n    <div>\n      {users.map((username) => (\n        <UserInfo key={username} username={username} />\n      ))}\n    </div>\n  )\n}\nfunction UserInfo({ username }) {\n  const info = useFetchUserInfo(username)\n  // ... keep user info up to date ...\nreturn <div>{info}</div>\n} \n```"]