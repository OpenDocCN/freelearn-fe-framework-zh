- en: Expansion Panels - Group Content into Panel Sections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Stateful expansion panels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting panel headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scrollable panel content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lazy loading panel content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Expansion panels are containers for your content. Usually, screens in your Material-UI
    applications are divided into sections so that users can mentally organize the
    information that they're looking at. The `ExpansionPanel` component is one way
    that you can create these sections. You can even combine expansion panels with
    other organizational components, such as tabs, to provide a consistent organizational
    layout for your users.
  prefs: []
  type: TYPE_NORMAL
- en: Stateful expansion panels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use component the state to control every aspect of your expansion panels.
    For example, each panel could be represented as an object in an array, where each
    object has panel title and panel content properties. There are other aspects you
    can control, such as visibility and disabled panels.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that your component has a state for rendering expansion panels.
    The panels themselves are objects in an array. Here''s the code to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When you load the screen, here''s what you''ll see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/619e9f53-4ea0-41f9-9a12-4124bb23069d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what the first two panels look like when they''re expanded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1db1e8bd-1595-434f-af97-4080b3364142.png)'
  prefs: []
  type: TYPE_IMG
- en: The third panel cannot be expanded because it's disabled.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The state defines everything about expansion panels. This includes the panel
    `title`, the panel `content` that''s displayed when the panel is expanded, the
    `disabled` property, and whether or not the panel is `hidden`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `disabled` property marks the panel as disabled. This means that the user
    can see the panel `title`, but it cannot be expanded. It's also visually marked
    as not being expandable. The `hidden` property ensures that the panel isn't rendered
    at all. This is useful for cases when you don't want the user to know about it
    at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s look at the code that renders each panel based on the component
    state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `filter()` call removes panels from the array that have the `hidden` property
    set to true.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative to using a `hidden` property to hide panels is removing them
    completely from the array. It really depends on personal preference—toggling a
    property value versus adding and removing values from an array.
  prefs: []
  type: TYPE_NORMAL
- en: Each panel is mapped to `ExpansionPanel` components using `map()`. The expansion
    panel uses an `ExpansionPanelSummary` component for the title and the content
    goes into the `ExpansionPanelDetails` component.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also use state to control whether or not a panel is expanded. For example,
    you can use `ExpansionPanel` components to create an *accordion* widget—there's
    always one panel open, and opening another panel closes anything that's open.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to add an `expanded` state to determine which panel is open
    at any given time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `expanded` state defaults to `0`, meaning that the first panel is expanded
    by default. As the expanded panels change, the `expanded` state changes to reflect
    the index of the expanded panel. Next, you''ll add an `onChange` handler for the
    `ExpansionPanel` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a higher-order function—it takes the index of the panel you want to
    expand and returns a function that sets the expanded state when the given panel
    is clicked on. Finally, you can add the new `expanded` state and the `onChange`
    handler to the `ExpansionPanel` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `expanded` property is based on the index of the current panel, equaling
    the expanded state of your component. If they're equal, the panel is expanded.
    The `onChange` handler is also assigned to `ExpansionPanel`, which changes the
    expanded state when the panel is clicked on.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ExpansionPanel` demos: [https://material-ui.com/demos/expansion-panels/](https://material-ui.com/demos/expansion-panels/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExpansionPanel` API documentation: [https://material-ui.com/api/expansion-panel/](https://material-ui.com/api/expansion-panel/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExpansionPanelSummary` API documentation: [https://material-ui.com/api/expansion-panel-summary/](https://material-ui.com/api/expansion-panel-summary/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExpansionPanelDetails` API documentation: [https://material-ui.com/api/expansion-panel-details/](https://material-ui.com/api/expansion-panel-details/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting panel headers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Headers in `ExpansionPanel` components can be formatted. Typically, the `Typography`
    component is used to render text within an expansion panel header. This means
    that you can use properties of `Typography` to customize the way that your expansion
    panel headers appear.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you want the text within your `ExpansionPanel` headers to stand
    out relative to the text in the content section of each panel. You can change
    the `variant` property of the `Typography` component in the `ExpansionPanelSummary`
    component. Here''s the code to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the panels look like when the screen loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7614234f-27ac-4805-8210-fee9bd82f5a2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what the panels look like when they''re expanded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6aa6746-8f14-4781-94de-356b7f0bfe99.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make the heading text stand out relative to the text in the `ExpansionPanelDetails`
    component, you only had to change the `variant` property of the `Typography` component
    used in the header. In this case, you're using the `subtitle1` variant, but there
    are a number of other variants that you can use here.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to formatting header text, you can add other components, such as
    icons. Let''s modify the example to include icons for each panel header. First,
    you''ll import the icons that you need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you''ll add a new icon style that adds space between the icon and text
    in the panel header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, here''s the markup to include the icons that you''ve imported in the
    appropriate panel header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The icon comes before the `Typography` component in the `ExpansionPanelSummary`
    component. Here''s what the panels look like now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab4905c1-6cd5-4451-ac16-2255f5424ab6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what they look like when they''re expanded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/651286e0-c162-4e64-8a73-5ebd5facb047.png)'
  prefs: []
  type: TYPE_IMG
- en: By combining iconography and typography, you can make the headers of your expansion
    panels stand out, making your content easier to navigate.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ExpansionPanel` demos: [https://material-ui.com/demos/expansion-panels/](https://material-ui.com/demos/expansion-panels/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExpansionPanel` API documentation: [https://material-ui.com/api/expansion-panel/](https://material-ui.com/api/expansion-panel/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExpansionPanelSummary` API documentation: [https://material-ui.com/api/expansion-panel-summary/](https://material-ui.com/api/expansion-panel-summary/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExpansionPanelDetails` API documentation: [https://material-ui.com/api/expansion-panel-details/](https://material-ui.com/api/expansion-panel-details/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scrollable panel content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The height of an `ExpansionPanel` component, when expanded, changes so that
    all of the content is visible on the screen. In cases where you have a lot of
    content in your panels, this isn't ideal because the panel headers aren't visible
    to the user. Instead of having to scroll down the entire page, you can make the
    content within the panel scrollable.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you have three panels, each with several paragraphs of text.
    Rather than having each panel adjust its height to accommodate the content, you
    can make the panels a fixed height and scrollable. Here''s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The paragraph content in the `Typography` components has been truncated for
    brevity—you can view the full text in the GitHub repository for this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what it looks like when the first panel is expanded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/01b21a70-7e83-4ace-9bb3-029d6f0377d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you move your mouse pointer over the content of the expanded panel, you
    can now scroll the content to the bottom of the paragraph, within the panel. Here''s
    what it looks like when the content has been scrolled to the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/976b6714-e69e-4fc6-87a9-93d3bffe55e7.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `IpsumContent` component is just a convenience component that holds paragraphs
    of content so that you don''t have to repeat it in every panel. Let''s start by
    looking at the styles used in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Panel content uses flex box styles to lay out its content. It flows according
    to row direction by default, so you have to set the `flexDirection` style to `column`
    if you want the content to flow in a top-down direction. Next, you can set a fixed
    height for your panel content—in this case, it's `150px`. Finally, the `overflow`
    style set to `auto` will enable vertical scrolling for the panel content.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then apply the `panelDetails` class to each of your `ExpansionPanelContent`
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ExpansionPanel` demos: [https://material-ui.com/demos/expansion-panels/](https://material-ui.com/demos/expansion-panels/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExpansionPanel` API documentation: [https://material-ui.com/api/expansion-panel/](https://material-ui.com/api/expansion-panel/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExpansionPanelSummary` API documentation: [https://material-ui.com/api/expansion-panel-summary/](https://material-ui.com/api/expansion-panel-summary/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExpansionPanelDetails` API documentation: [https://material-ui.com/api/expansion-panel-details/](https://material-ui.com/api/expansion-panel-details/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lazy loading panel content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're rendering expansion panels that are all collapsed by default, you
    don't have to populate the `ExpansionPanelDetails` component up front. Instead,
    you can wait for the user to expand the panel—then you can make whatever API calls
    you need in order to render the content.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you have an API function that fetches content based on an index
    value. For example, if the first panel is expanded, the `index` value will be
    `0`. You need to be able to call this function when the panel is expanded, supplying
    the corresponding `index` value. Here''s what the code looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the four panels look like when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4addc49-e236-4575-a1e9-a115afeeb1b2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Try expanding the first panel. It expands right away but, for about one second,
    there''s nothing there. Then the content appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb74f9d2-2343-4079-a179-753c052f5083.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start with the `fetchPanelContent()` API function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Since this is just a mock, it returns a promise directly. It uses `setTimeout()`
    to simulate latency, similar to what you would experience using a real API. The
    promise resolves with the string value that's looked up from an array, based on
    the `index` argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s look at the `onChange` handler function that''s called when `ExpansionPanel`
    expands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: First, this function checks if the panel that's expanded has any `content` in
    its state. If not, you know that you have to fetch it by calling `fetchPanelContent()`.
    When the returned promise resolves, you can call `setPanels()` to update the panels
    array and set the content at the appropriate index.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of your component just renders the `ExpansionPanel` components based
    on the panels array, using the `content` state as the panel content. When content
    is updated, it is reflected in the rendered content.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a couple of improvements that you could make with this example. First,
    you could show a progress indicator within the panel while the content is loading
    so that the user knows that something is happening. The second improvement can
    be made both when the panel expands and when it collapses—this should be avoided.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with the progress indicator. For this, you''ll need a utility
    component and a style for the `ExpansionPanelDetails` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `MaybeProgress` component takes a `loading` property that, when true, results
    in a `LinearProgress` component. Otherwise, nothing is rendered. The `flexDirection`
    style is set to `column`; otherwise, the `LinearProgress` component won''t display.
    Now let''s modify the markup rendered by `LazyLoadingPanelContent` so it uses
    these two additions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `panelDetails` class is now used by the `ExpansionPanelDetails` component.
    The first child of this component is now `MaybeProgress`. The loading property
    is true until the API call populates the content state for the given panel. This
    means that the progress indicator will be visible until the content loads.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what the first panel looks like when expanded, before the content has
    loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba206350-90d2-44a5-a6b9-e8bdef4a4b5a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once loaded, the content is rendered in place of the progress indicator. Finally,
    let''s make sure that the API call to load content isn''t made when the panel
    is collapsing. This requires an adjustment to the `onChange()` handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The second argument passed to this function, `expanded`, tells you whether or
    not the panel is expanding. If this value is false, you know that the panel is
    collapsed and that the API call shouldn't be made. This condition has been added
    to look for content that has already been loaded for the panel.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ExpansionPanel` demos: [https://material-ui.com/demos/expansion-panels/](https://material-ui.com/demos/expansion-panels/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExpansionPanel` API documentation: [https://material-ui.com/api/expansion-panel/](https://material-ui.com/api/expansion-panel/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExpansionPanelSummary` API documentation: [https://material-ui.com/api/expansion-panel-summary/](https://material-ui.com/api/expansion-panel-summary/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExpansionPanelDetails` API documentation: [https://material-ui.com/api/expansion-panel-details/](https://material-ui.com/api/expansion-panel-details/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
