- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unveiling Application Issues with the Vue Devtools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If there is one aspect in which Vue.js is clearly the winner over other frameworks
    and libraries, it is its attention to the **Development Experience** (**DX**).
    Since the beginning, Vue.js has focused on providing great experience to its developers
    and, this reached its peak a few years ago with the creation of the Vue **Devtools**
    by Guillaume Chau.
  prefs: []
  type: TYPE_NORMAL
- en: The Vue Devtools, which is available as a Firefox and Chrome extension, or a
    standalone Electron app, has been at the core of the Vue.js DX since its creation.
  prefs: []
  type: TYPE_NORMAL
- en: Recently, Vue Devtools has been making headlines for its ability to provide
    great insight for **Nuxt.js** (Vue.js’s meta-framework), helping developers comprehend
    the complexity of full stack JavaScript applications with simple and intuitive
    UI.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to start this chapter by learning how to install and use the extension
    within our preferred browser; we will then learn its layout by understanding how
    each piece of the extension works and how they fit together. We will then examine
    each individual section, Components, Timeline, Pinia, and vue-router, to provide
    you with a complete understanding of the extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter includes the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting familiar with the Vue Devtools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deep diving into the Vue Devtools Timeline tab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing additional data with the Vue Devtools plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you will have a good understanding of the Vue Devtools
    and be able to use it in your day-to-day life. You will be able to use it to create
    new components, examine your application component tree, record user interactions
    in the Timeline, and finally, make use of package information such as Pinia and
    vue-router.
  prefs: []
  type: TYPE_NORMAL
- en: Getting familiar with the Vue Devtools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even the most senior developers rely on debugging tools to help them develop
    high-quality and bug-free code (no code is really bug-free, but that is the aim
    when developing). The Vue Devtools goal is to provide quick insight into different
    parts of the Vue.js framework that can be used to help us complete our daily tasks.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to debug our application by placing `alert` and `console.log`
    or another preferred method within our code, but what if you could find all the
    information you need directly in the browser, using a very nice and clean UI?
    That is the Vue Devtools for you.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we are going to learn how to enable the Vue Devtools on our
    browser and learn the different sections of this extension.
  prefs: []
  type: TYPE_NORMAL
- en: In the course of this chapter, we are going to use the Vue Devtools Chrome extension,
    but the UI and features should match other available sources, such as Firefox
    and the Electron app.
  prefs: []
  type: TYPE_NORMAL
- en: To get started, we need to install the application on our browser; this can
    be done by searching for `Vue.js devtools` in your browser extension store. If
    you use Chrome, this can be found at [https://chromewebstore.google.com/category/extensions](https://chromewebstore.google.com/category/extensions).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21130_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.1: The Chrome extension store'
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of extensions with the name **Vue.js devtools**, but you
    want to install the official one, supported and developed by the core team. This
    is defined by the **vuejs.org** checkmark.
  prefs: []
  type: TYPE_NORMAL
- en: After a quick installation and a browser restart, you should now have full access
    to the extension. In fact, the extension does not need any configuration, and
    it is good to go out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: To test whether the extension is working, we can access our Companion App site
    at [http://localhost:5173/](http://localhost:5173/) and check the Vue.js extension
    icon. This is grayed out if the extension is not currently working, or colored
    if the Vue Devtools is available and in action.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21130_13_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.2: The Vue Devtools extension'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the icon will confirm that the extension was able to find Vue.js
    and enable the Vue Devtools, as shown in *Figure 13**.2*. The extension lives
    within Chrome DevTools as a new tab. This tab should be available automatically
    as the last tab available within the DevTools navigation bar under the name of
    **Vue**.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21130_13_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.3: Chrome DevTools navigation'
  prefs: []
  type: TYPE_NORMAL
- en: What is Chrome DevTools?
  prefs: []
  type: TYPE_NORMAL
- en: If you do not know what Chrome DevTools is or have never used it before, I suggest
    you take a look at the official documentation at [https://developer.chrome.com/docs/devtools](https://developer.chrome.com/docs/devtools)
    and start to learn about all the different ways that this tool can be used.
  prefs: []
  type: TYPE_NORMAL
- en: The Vue Devtools automatically listens for a Vue.js application and is available
    immediately for all Vue.js sites running in development mode. This is a very important
    point, as the extension will not work on a website built for production. If you
    tried to access a production Vue.js site (such as the Vue.js official site), the
    extension would load but be inactive.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21130_13_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.4: The Vue Devtools extension popup when accessing a production-built
    site'
  prefs: []
  type: TYPE_NORMAL
- en: It is now time to return to the Companion App, open the Chrome DevTools, and
    click on the **Vue** tab to start to learn what this extension has to offer.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we are going to introduce the main parts of the extension,
    but as we will cover later in the chapter, the extension automatically expands
    to provide more information about different packages, such as Pinia or vue-router.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21130_13_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.5: the Vue Devtools'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Vue Devtools can be divided into four main parts. We will briefly introduce
    you to all of them, starting from the left and moving toward the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The main navigation**: This is positioned on the left-hand side as a vertical
    menu. This currently holds two entities– Components and the Timeline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The apps list**: Vue.js 3 allows you to have multiple applications on the
    same site, and the Vue.Devtools allows us to debug each of them easily.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The main content**: This is the area that includes the selected tool. In
    the case of *Figure 13**.5*, we selected the Components, so this section displays
    a component tree.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<``SocialPost>` component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is now time to start and learn the individual section of the extension. We
    will first start with the default sections, Components and the Timeline, and then
    move into add-on plugins such as Pinia and vue-router.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging components in your Vue Devtools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to see what Vue Devtools has to offer to debug
    and develop our components.
  prefs: []
  type: TYPE_NORMAL
- en: Having a tool such as Vue Devtools while developing your components can really
    help you improve your skills. Vue Devtools help surface information such as component
    properties, events, and other information that can sometimes be hidden or hard
    to grasp without a visual clue.
  prefs: []
  type: TYPE_NORMAL
- en: The main goal of the Component section of the extension, which can be reached
    by clicking the top icon in the main navigation, is to provide us with full visibility
    of the component tree and detailed information on each component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by looking into the component tree and what information it provides
    us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21130_13_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.6: The component tree'
  prefs: []
  type: TYPE_NORMAL
- en: The component tree provided by the extension is very similar to the DOM tree
    offered by browse developers’ tools, with the main difference being that the DOM
    tree shows DOM nodes, while the Vue Devtools is made up of Vue components.
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 13**.6*, we can see the relationship between the parent and children
    components. In fact, we can see that `<SocialPosts>` has five `<SocialPost>` children
    and that `<SocialPost>` has three children.
  prefs: []
  type: TYPE_NORMAL
- en: The tree also shows important information, such as the route used by `<RouterView>`,
    defined by the `home :/` purple pill, the unique key of each individual `<SocialPost>`,
    and the URL defined within each `<RouterLink>`.
  prefs: []
  type: TYPE_NORMAL
- en: Being able to visualize the components that are rendered on a page is important,
    but being able to highlight them is even better. You may not see this as important
    initially, but being able to select a component in the tree and see it on screen
    is a very useful feature.
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways to highlight a component. You can click on the component
    directly on the tree or you can select the component in the page by enabling **Select
    a component on the page**, as shown in *Figure 13**.7*. This last feature can
    either be enabled by clicking the icon or by using the keyboard shortcut, hinted
    by the popup shown when hovering over the icon.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21130_13_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.7: The Selecting a component in the page button'
  prefs: []
  type: TYPE_NORMAL
- en: When a component is selected, it will be highlighted on screen with a green
    background.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21130_13_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.8: A social post component highlighted by Vue Devtools'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we can read the tree and select individual components, it is time to
    dive deeper into the extension and see what details are displayed for each component.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, selecting a component not only provides you with a visual clue about
    the component by highlighting it in green as displayed in *Figure 13**.8*, but
    also exposes a list of internal information about it.
  prefs: []
  type: TYPE_NORMAL
- en: The sidebar includes all the information available within the component scope
    and is the equivalent of being able to print everything that is available within
    the script setup. It includes basic information such as `props`, Refs, and Reactive
    and also more advanced features, such as Pinia store dependencies and router info.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21130_13_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.9: A social post’s detailed information displayed by Chrome DevTools'
  prefs: []
  type: TYPE_NORMAL
- en: Having access to internal information of each individual component on the screen
    is the most important and powerful feature of the Vue Devtools. Being able to
    quickly see what the properties that a parent is sending its child are, or the
    current value of a specific R`ef` will save you countless hours of debugging.
    Furthermore, seeing the component state will also help you better understand the
    Vue.js framework. When I first started to learn Vue, I used the Vue Devtools to
    understand how components worked and discover the connections between props, internal
    data, and life cycles, and I have recommended it to all my mentees ever since.
  prefs: []
  type: TYPE_NORMAL
- en: Use cases for the Vue Devtools information panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to explore a couple of use cases in which we would
    use the Vue Devtools information panel. As previously mentioned, the information
    panel includes lots of useful resources, but they are of no use unless we know
    how and when to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing dynamically loaded data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this first scenario, we are going to consider a case in which a developer
    would be required to debug and understand what data is returned by an API. In
    the case of our Companion App, this situation could have arisen when developing
    **social posts**. In fact, being able to see the data structure and value would
    have helped the development of that component.
  prefs: []
  type: TYPE_NORMAL
- en: We can see the complete information retrieved by the API as the `posts` array
    in `<SocialPosts>`, as displayed in *Figure 13**.10*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21130_13_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.10: Information about the posts shown in the information panel of
    Vue Devtools'
  prefs: []
  type: TYPE_NORMAL
- en: Modifying Refs and Reactive data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JavaScript has gained popularity because of the immense possibility to add interactivity
    to our web pages. Unfortunately, interactivity is not always easy to achieve,
    and it needs many tries before the logic usually works as expected.
  prefs: []
  type: TYPE_NORMAL
- en: While developing a Vue.js component, you will probably find yourself in a situation
    in which you will have to test different scenarios that would require data to
    be in a specific state. This can sometimes be very time-consuming or complicated
    to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: A very common scenario would be the need to develop an “error” screen or a “a
    thank you page” displayed after an ecommerce purchase. To develop this component,
    developers would need to reproduce multiple steps to reach the desired component
    state, making the act of developing the component very slow. Luckily for us, with
    the help of the Vue Devtools, reproducing the states required to develop this
    component can easily be achieved.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, Vue Devtools allows you to modify Refs and Reactive data on the fly.
    This can be done directly in the information panel, as shown in *Figure 13**.11*.
  prefs: []
  type: TYPE_NORMAL
- en: You can modify props too
  prefs: []
  type: TYPE_NORMAL
- en: With the default setting, the only data that can be modified are Refs and Reactive,
    but there is a setting that allows you to also modify Props. I would personally
    not suggest enabling this, as it can produce unexpected consequences, but knowing
    of its existence can be helpful as a last resource.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21130_13_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.11: A Vue Vue Devtools quick edit'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Modifying the data within a component is not the only requirement to develop
    complex components. In fact, another important feature is the ability to see in
    real time the values of component data. For example, you may want to ensure that
    your toggle button works successfully but that a R`ef` changes from `false` to
    `true`, that a computed property changes its value as expected, or finally, that
    a “reset” logic works properly by resetting all data to its initial state. The
    possibilities are endless.
  prefs: []
  type: TYPE_NORMAL
- en: When working with the Vue Devtools, the data displayed in the information panel
    will change automatically in real time when modified. This allows us to interact
    with the application and see the changes that our interaction yields.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we introduced the Vue Devtools by learning how to install and
    enable the extension. We then defined all the different areas of the Vue Devtools
    and learned how to use it to highlight and read the Vue component tree. Finally,
    we learned how to dive into a component by accessing the information panel. In
    this panel, we learned how to see data, monitor changes, and even make changes
    on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are going to introduce a more advanced section of the
    DevTool, the Timeline section.
  prefs: []
  type: TYPE_NORMAL
- en: Deep dive into the Vue Devtools Timeline tab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we introduced how to use the Component section of the
    Vue Devtools to analyze and develop our Vue components. In this section, we will
    continue exploring the main navigation to introduce the next available section
    – the Timeline.
  prefs: []
  type: TYPE_NORMAL
- en: The Timeline section is home to tools such as event and performance monitoring
    that help make sense of the application, giving us a glimpse into the framework
    engine.
  prefs: []
  type: TYPE_NORMAL
- en: This section is probably more for advanced use cases, but being able to know
    what the tools offer is always beneficial, even if they are not used in your day-to-day
    activities.
  prefs: []
  type: TYPE_NORMAL
- en: The Timeline tab can be accessed from the main navigation on the left-hand side
    of the extension, just below the Component tab that we have been using so far.
  prefs: []
  type: TYPE_NORMAL
- en: The Timeline panel includes three sections. The first is the layers section,
    which displays all the different layers on which we are going to collect and display
    information. The second is the Timeline itself. This is provided in two different
    ways, as an actual Timeline or in a table format. Finally, we have the information
    panel, which is very similar to the one provided in the Component section.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21130_13_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.12: The Vue Devtools Timeline panel'
  prefs: []
  type: TYPE_NORMAL
- en: The layer section includes all the different information that the Timeline can
    provide. The layers offered by the Vue Devtools can differ between applications,
    as it can also include an installed package, like the one shown in *Figure 13**.12*,
    where data for Pinia and Router is also available within the layer’s menu.
  prefs: []
  type: TYPE_NORMAL
- en: Layers can produce lots of data (as we will see later in the section), and it
    is common to hide most layers and just keep the ones that are relevant to your
    specific task.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling the Timeline is resource-intensive, and it does not run automatically
    all the time. To be able to enable the Timeline, we would need to click the record
    button next to the layer’s header.
  prefs: []
  type: TYPE_NORMAL
- en: Being able to start and stop recording will not only help us save some battery
    life; it will also ensure that the data displayed in the Timeline is as compact
    as possible. So, for example, if you want to analyze what happens when a user
    creates a post, you will enable it, create the post, and then stop the recording.
    Doing so will ensure that just the events you are interested in are shown on the
    Timeline.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging a post removal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To better understand the Timeline, we are going to record and analyze the information
    provided by the Timeline when removing a post and try to determine how this can
    be used for future debugging purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to analyze the output of the Vue Devtools Timeline section, I am
    going to perform the following steps within our app. These steps will produce
    a report that we can use to understand what information the Timeline provides:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Access the Timeline tab**: Open DevTools and click on the Timeline tab on
    the main navigation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Select the layers**: We will only use the **Component events**, **Performance**,
    and **Pinia** layers. Select them from the layer’s menu.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Start recording**: Now, we are ready to record our actions. Start the recording
    by clicking the record button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`"delete"` icon of one of the posts shown on the screen.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Stop the recording**: Click on the record button again to stop the recording.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the preceding steps, the Timeline should display something like what is
    shown in *Figure 13**.13*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21130_13_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.13: The Timeline displaying information after deleting a post'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see what information is shown after our recorded activity. Before checking
    the output of the recorded session, let’s go back to the application code and
    discover what action we expect from the aforementioned action. The code shows
    that when clicking the delete icon within the `<SocialPost>` component, it should
    emit an event called `"delete"` that is then used in `<SocialPosts>` to trigger
    a Pinia action, subsequently deleting the post from the store.
  prefs: []
  type: TYPE_NORMAL
- en: If we go back to our recorded activity, we can see that the Timeline shows some
    activity in all three layers. The first layer, `"delete"`, and it has been triggered
    by `<SocialPost>`, just as we expected. The information panel shows detailed information
    about the event, such as params, but in this case, we have none and the array
    is empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we are going to see what the **Pinia** layer shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21130_13_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.14: Pinia’s timeline event'
  prefs: []
  type: TYPE_NORMAL
- en: After selecting the `removePost` action, with detailed information displayed
    in the information panel. Next, we have a mutation; this is called from `removePost`
    and is the actual deletion of the post from the `posts` array. Then, we have the
    end of `removePost` with the `removePost end` event. Overall, the action took
    0.8 ms to complete. So far, we have been able to analyze whether an event was
    triggered and follow the steps of a Pinia action.
  prefs: []
  type: TYPE_NORMAL
- en: Keep track of your actions
  prefs: []
  type: TYPE_NORMAL
- en: Our `removePost` action was very fast and completed in less than 1 ms. This
    is not always the case, as some actions may include complicated code or external
    operations that may delay its execution. Using the Timeline can help you debug
    and fix slow actions.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we are going to check what information is shown in the performance
    layer. Just like the other two layers, when selecting this layer, we are presented
    with individual events and information about the events.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21130_13_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.15: The performance Timeline layer'
  prefs: []
  type: TYPE_NORMAL
- en: The performance layer is used for advanced use cases, and it is usually accessed
    to unearth performance-related issues or to highlight an incorrectly configured
    code base that forces you to re-render one or more components.
  prefs: []
  type: TYPE_NORMAL
- en: This layer displays when a specific component is rendered or updated. In this
    scenario, it just recorded four events, but this can be extremely complex for
    larger applications.
  prefs: []
  type: TYPE_NORMAL
- en: Being able to analyze the rendering time and how many times a component renders
    can be very useful for applications that suffer from performance issues. Incorrect
    use of **computed properties** or **watch** can result in the unnecessary re-rendering
    of components, and the performance Timeline is the best tool to help you debug
    and fix performance bottlenecks.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have learned how to use the Timeline section of Vue Devtools.
    We have defined its structure, recorded a sample test to see how our application
    performs and learned what information is shown by the individual layers.
  prefs: []
  type: TYPE_NORMAL
- en: In the next and last section, we are going to see how Vue Devtools can be expanded
    with the help of custom plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing additional data with Vue Devtools plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have probably noticed from the previous section that Vue Devtools not only
    includes information regarding the core framework but also exposes extra information,
    such as the Pinia store and vue-router.
  prefs: []
  type: TYPE_NORMAL
- en: This happened automatically, as we did not have to do anything extra to expand
    the Vue Devtools capabilities. In fact, the plugins are actually part of the packages
    that we installed in the application, so installing a package can sometimes result
    in an additional feature being displayed in our Vue Devtools.
  prefs: []
  type: TYPE_NORMAL
- en: Any plugin offers something different. In our case, both Pinia and vue-router
    adds a layer in the Timeline view, information in the component details panel,
    and finally, an extra tab on the main navigation.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we are going to deep dive into the two available plugins –
    Pinia and vue-router.
  prefs: []
  type: TYPE_NORMAL
- en: The Pinia Vue Devtools plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first extension plugin that we are going to analyze is the one provided
    by the Pinia store.
  prefs: []
  type: TYPE_NORMAL
- en: The Pinia store, distinguished by its iconic Pineapple logo, can be accessed
    from the main navigation on the left-hand side of the extension.
  prefs: []
  type: TYPE_NORMAL
- en: This plugin will feel somewhat familiar, as it has a similar layout to the Component
    section.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21130_13_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.16: The Pinia Vue Devtools plugin'
  prefs: []
  type: TYPE_NORMAL
- en: In the Pinia extension, we are able to inspect our stores. The plugin offers
    the ability to see all stores together, by selecting **Pinia (root)** or the individual
    store available within our state management.
  prefs: []
  type: TYPE_NORMAL
- en: The data shown in the information panel is divided by `state` and `getters`,
    and just like the Component section, it can be modified on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: Just like most of the features we have explored so far, being able to quickly
    review the current state of your stores and modify their values is extremely valuable.
    Having access to this information on the fly will save you countless hours of
    development.
  prefs: []
  type: TYPE_NORMAL
- en: The vue-router Vue Devtools plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you may remember, back in [*Chapter 10*](B21130_10.xhtml#_idTextAnchor135),
    where we introduced the router within the Companion App, we had to create a set
    of rules that would be used by the router to decide which route to display to
    our users.
  prefs: []
  type: TYPE_NORMAL
- en: The vue-router plugin helps visualize and examine these rules directly in your
    browser. The plugin provides a complete list of the routes defined with their
    full information, including names, regex matches, and required keys.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21130_13_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.17: The vue-router rules list'
  prefs: []
  type: TYPE_NORMAL
- en: 'The list displayed in *Figure 13**.17* shows the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The URL defined for a specific router (`/about)`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of the route shown as a blue pill (`user-profile`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current active route, defined by a blue pill with the `active` label.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extra information such as `redirect` and `exact`. That signifies respectively
    the presence of a redirect rule (`/user/:userId`) and the notion that the currently
    active route matches perfectly to the rule match regex.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have defined all the information available within the vue-router
    rules list, it is time to see what information is provided for each individual
    router rule. Let’s click `/user/:userId` to see what it shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21130_13_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.18: Route information from the vue-router Vue Devtools plugin'
  prefs: []
  type: TYPE_NORMAL
- en: The plugin displays all the data that is available within the routes array,
    such as `path`, `name`, and `redirect`. Furthermore, the plugin exposes more advanced
    data, such as the regex used by the package to decide the correct route to display,
    details information on the keys, such as `optional` and `repeatable`, and, last
    but not least, the `score` value of each entry within the path.
  prefs: []
  type: TYPE_NORMAL
- en: During your career, you are probably not going to spend lots of time in this
    area, but when you do so, it will have everything you need to solve your problems.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Vue ecosystem prides itself on offering one of the best DX available within
    the whole industry, and Vue Devtools is probably the one to blame for this.
  prefs: []
  type: TYPE_NORMAL
- en: Detailed information, performance metrics, and an automatic plugin extension
    make the extension a must-have for all Vue developers. The most important take
    from this chapter is for you to install the extension locally and start to use
    it during your projects.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we learned how to install and navigate Vue Devtools. We covered
    the individual default sections offered – Components and the Timelin. Finally,
    we ended the chapter by introducing the power of the package plugin within the
    Vue Devtools, by showing the additional information that Pinia and vue-router
    provide within the debugging extension.
  prefs: []
  type: TYPE_NORMAL
- en: In the next and final chapter, we are going to touch upon future learnings and
    resources that you can use to continue your journey to becoming a Vue developer.
  prefs: []
  type: TYPE_NORMAL
