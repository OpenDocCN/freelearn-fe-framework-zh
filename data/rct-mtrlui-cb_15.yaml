- en: Dialogs - Modal Screens for User Interactions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对话框 - 用户交互的模态屏幕
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Collecting form input
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集表单输入
- en: Confirming actions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认操作
- en: Displaying alerts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示警报
- en: API integration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API集成
- en: Creating fullscreen dialogs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建全屏对话框
- en: Scrolling dialog content
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚动对话框内容
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: At some point during interactions with your application, the user is going to
    have to supply some information to the application, make a yes/no decision, or
    acknowledge important information. Material-UI has a dialog component that is
    ideally suited for these types of scenarios—when you need a modal display that
    doesn't disrupt the current screen content.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在与应用程序的交互过程中，用户将不得不在某个时刻向应用程序提供一些信息，做出是/否的决定，或确认重要信息。Material-UI有一个对话框组件，非常适合这些场景——当你需要一个不会干扰当前屏幕内容的模态显示时。
- en: Collecting form input
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集表单输入
- en: Dialogs can come in handy when you need to collect input from the user, but
    you don't want to lose the current screen. For example, the user is looking at
    a screen that shows a list of items and wants to create a new item. A dialog could
    display the necessary form fields and, once the new item is created, the dialog
    closes and the user is right back at their item list.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要从用户那里收集输入，但又不想失去当前屏幕时，对话框很有用。例如，用户正在查看显示项目列表的屏幕，并想创建一个新项目。对话框可以显示必要的表单字段，一旦创建了新项目，对话框就会关闭，用户就会回到他们的项目列表。
- en: How to do it...
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s say that your application allows for the creation of new users. For
    example, from the screen that shows a list of users, the user clicks on a button
    that shows a dialog containing the fields for creating a new user. Here''s an
    example of how to do this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的应用程序允许创建新用户。例如，从显示用户列表的屏幕中，用户点击一个按钮，显示包含创建新用户字段的对话框。以下是如何操作的示例：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here''s the button you''ll see when the screen first loads:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是屏幕首次加载时你会看到的按钮：
- en: '![](img/81032857-7cb9-4a7e-b8a8-6b6d67143a2e.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/81032857-7cb9-4a7e-b8a8-6b6d67143a2e.png)'
- en: 'Here''s the dialog that you''ll see when you click on the NEW USER button:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是点击NEW USER按钮时你会看到的对话框：
- en: '![](img/92d9ac16-cf88-48d6-aa80-d0de6c75c722.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/92d9ac16-cf88-48d6-aa80-d0de6c75c722.png)'
- en: 'You can then fill out the three fields for creating a new user and click the
    CREATE button. The dialog will close, and you''ll see the following `Snackbar`
    component displayed:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以填写创建新用户的三个字段，并点击CREATE按钮。对话框将关闭，你将看到以下`Snackbar`组件显示：
- en: '![](img/4706dca2-ce54-462f-b26e-460396f1fc99.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4706dca2-ce54-462f-b26e-460396f1fc99.png)'
- en: How it works...
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The visibility of the dialog and the snackbar are controlled by Boolean state
    values, `dialogOpen` and `snackbarOpen`, respectively. The values of the fields
    within the `dialog` component are also stored in the state of the `CollectingFormInput`
    component. Let''s take a closer look at the `dialog` markup:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框和Snackbar的可见性由布尔状态值`dialogOpen`和`snackbarOpen`分别控制。`dialog`组件内字段的值也存储在`CollectingFormInput`组件的状态中。让我们更仔细地看看`dialog`标记：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `Dialog` component is the parent for several other components that make
    up the various pieces of `dialog`. The `DialogTitle` component renders the dialog
    title, while the `DialogActions` component is used to render action buttons at
    the bottom of the dialog. The `DialogContent` component is used to render the
    main content of the dialog—the three text fields for creating a new user.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dialog`组件是其他几个组件的父组件，这些组件构成了`dialog`的不同部分。`DialogTitle`组件渲染对话框标题，而`DialogActions`组件用于在对话框底部渲染操作按钮。`DialogContent`组件用于渲染对话框的主要内容——创建新用户的三个文本字段。'
- en: There are two properties for each of these `TextField` components that are relevant
    for rendering inside of a dialog. First, the `fullWidth` property extends the
    field horizontally so that it's the same width as the dialog. This generally works
    well with forms that only have a few fields. Second, the `margin` property is
    set to `normal`, which provides the appropriate vertical spacing between fields
    in the dialog.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些`TextField`组件，有两个属性与在对话框内渲染相关。首先，`fullWidth`属性将字段水平扩展，使其与对话框宽度相同。这通常与只有几个字段的表单配合得很好。其次，`margin`属性设置为`normal`，这为对话框中的字段提供了适当的垂直间距。
- en: 'Next, let''s walk through the event handlers of this component, starting with
    `onDialogOpen()`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们浏览这个组件的事件处理器，从`onDialogOpen()`开始：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will show the dialog by changing the `dialogOpen` state to `true`. Next,
    let''s look at `onDialogClose()`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这将通过将 `dialogOpen` 状态更改为 `true` 来显示对话框。接下来，让我们看看 `onDialogClose()`：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will close the dialog by setting the `dialogOpen` state to `false`. It
    also resets the form field values to empty strings so that they''re empty the
    next time the dialog is displayed. Up next, we have `onSnackbarClose()`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将通过将 `dialogOpen` 状态设置为 `false` 来关闭对话框。它还将表单字段值重置为空字符串，以便在下一次对话框显示时为空。接下来，我们有
    `onSnackbarClose()`：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If the `reason` argument is `clickaway`, then there''s nothing to do. Otherwise,
    the `snackbarOpen` state changes to `false`, which will hide the snackbar. The
    `snackbarMessage` state is set to an empty string so that the message doesn''t
    display again in case the snackbar is opened without setting a new message first.
    Finally, we have the `onCreate()` handler:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `reason` 参数是 `clickaway`，则无需操作。否则，`snackbarOpen` 状态将更改为 `false`，这将隐藏 snackbar。`snackbarMessage`
    状态设置为空字符串，以防 snackbar 在未设置新消息的情况下打开。最后，我们有 `onCreate()` 处理器：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will show the snackbar by setting `snackbarOpen` to `true`. It also sets
    the `snackbarMessage` value that includes accessing the `first` and `last` state
    values. Then, `onDialogClose()` is called to hide the dialog and reset the form
    fields. The snackbar is closed after four seconds because the `autoHideDuration`
    value was set to `4000`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这将通过将 `snackbarOpen` 设置为 `true` 来显示 snackbar。它还设置了包含访问 `first` 和 `last` 状态值的
    `snackbarMessage` 值。然后，调用 `onDialogClose()` 来隐藏对话框并重置表单字段。由于 `autoHideDuration`
    值设置为 `4000`，snackbar 在四秒后关闭。
- en: See also
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: '`Dialog` demos: [https://material-ui.com/demos/dialogs/](https://material-ui.com/demos/dialogs/)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dialog` 示例：[https://material-ui.com/demos/dialogs/](https://material-ui.com/demos/dialogs/)'
- en: '`Dialog` API documentation: [https://material-ui.com/api/dialog/](https://material-ui.com/api/dialog/)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dialog` API 文档：[https://material-ui.com/api/dialog/](https://material-ui.com/api/dialog/)'
- en: '`DialogActions` API documentation: [https://material-ui.com/api/dialog-actions/](https://material-ui.com/api/dialog-actions/)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DialogActions` API 文档：[https://material-ui.com/api/dialog-actions/](https://material-ui.com/api/dialog-actions/)'
- en: '`DialogContent` API documentation: [https://material-ui.com/api/dialog-content/](https://material-ui.com/api/dialog-content/)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DialogContent` API 文档：[https://material-ui.com/api/dialog-content/](https://material-ui.com/api/dialog-content/)'
- en: '`DialogContentText` API documentation: [https://material-ui.com/api/dialog-content-text/](https://material-ui.com/api/dialog-content-text/)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DialogContentText` API 文档：[https://material-ui.com/api/dialog-content-text/](https://material-ui.com/api/dialog-content-text/)'
- en: '`Snackbar` API documentation: [https://material-ui.com/api/snackbar/](https://material-ui.com/api/snackbar/)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Snackbar` API 文档：[https://material-ui.com/api/snackbar/](https://material-ui.com/api/snackbar/)'
- en: '`TextField` API documentation: [https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextField` API 文档：[https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
- en: '`Button` API documentation: [https://material-ui.com/api/button/](https://material-ui.com/api/button/)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Button` API 文档：[https://material-ui.com/api/button/](https://material-ui.com/api/button/)'
- en: Confirming actions
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确认操作
- en: Confirmation dialogs act as a safety net for your users. They're useful when
    the user is about to perform something that could potentially be dangerous, but not
    for every conceivable action in the app. An action can be considered dangerous
    if, once performed, it cannot be reverted. An example of a dangerous action would
    be deleting an account or processing a payment. In these cases, you should always
    use a confirmation dialog.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 确认对话框充当用户的安全网。当用户即将执行可能具有潜在危险的操作时，它们很有用，但不是针对应用中每个可想象的操作。如果执行后无法撤销，则操作可以被认为是危险的。删除账户或处理付款的操作就是一个危险的例子。在这些情况下，您应该始终使用确认对话框。
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Confirmation dialogs should be straightforward so that the user can easily
    read what is about to happen and can decide whether to cancel the action or to
    continue. Here''s some code that shows a confirmation dialog before executing
    an action:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 确认对话框应该简单明了，以便用户可以轻松阅读即将发生的事情，并决定是否取消操作或继续。以下是一些在执行操作前显示确认对话框的代码示例：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here''s what the confirmation dialog looks like when it''s displayed by clicking
    on the CONFIRM button:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过点击“确认”按钮显示确认对话框时，它看起来是这样的：
- en: '![](img/1f19c186-b553-4768-ba17-d8d04ab91b69.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f19c186-b553-4768-ba17-d8d04ab91b69.png)'
- en: You can either click on the CANCEL dialog action to close the dialog without
    doing anything, or you can click on the CONFIRM dialog action that will actually
    execute the action before closing the dialog.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以点击取消对话框操作来关闭对话框而不做任何事情，或者点击确认对话框操作，这将实际执行操作然后再关闭对话框。
- en: How it works...
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `DialogContentText` component is used to render the confirmation message
    in the dialog. It's really just a thin wrapper around a `Typography` component.
    The two interesting properties passed to the dialog component are `disableBackdropClick`
    and `disableEscapeKeyDown`, which prevent the confirmation dialog from being closed
    by clicking somewhere on the screen outside of the dialog or by hitting the *Esc*
    key, respectively.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`DialogContentText` 组件用于在对话框中渲染确认消息。它实际上只是一个围绕 `Typography` 组件的薄包装。传递给对话框组件的两个有趣的属性是
    `disableBackdropClick` 和 `disableEscapeKeyDown`，它们分别防止通过点击对话框外的屏幕或按 *Esc* 键来关闭确认对话框。'
- en: The idea with these two properties is to get the user to explicitly acknowledge
    that they're performing an action that requires their close attention, or that
    they're opting out of performing it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个属性的想法是让用户明确承认他们正在执行需要他们密切注意的操作，或者他们选择不执行该操作。
- en: See also
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: '`Dialog` demos: [https://material-ui.com/demos/dialogs/](https://material-ui.com/demos/dialogs/)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dialog` 演示：[https://material-ui.com/demos/dialogs/](https://material-ui.com/demos/dialogs/)'
- en: '`Dialog` API documentation: [https://material-ui.com/api/dialog/](https://material-ui.com/api/dialog/)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dialog` API 文档：[https://material-ui.com/api/dialog/](https://material-ui.com/api/dialog/)'
- en: '`DialogActions` API documentation: [https://material-ui.com/api/dialog-actions/](https://material-ui.com/api/dialog-actions/)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DialogActions` API 文档：[https://material-ui.com/api/dialog-actions/](https://material-ui.com/api/dialog-actions/)'
- en: '`DialogContent` API documentation: [https://material-ui.com/api/dialog-content/](https://material-ui.com/api/dialog-content/)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DialogContent` API 文档：[https://material-ui.com/api/dialog-content/](https://material-ui.com/api/dialog-content/)'
- en: '`DialogContentText` API documentation: [https://material-ui.com/api/dialog-content-text/](https://material-ui.com/api/dialog-content-text/)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DialogContentText` API 文档：[https://material-ui.com/api/dialog-content-text/](https://material-ui.com/api/dialog-content-text/)'
- en: '`Button` API documentation: [https://material-ui.com/api/button/](https://material-ui.com/api/button/)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Button` API 文档：[https://material-ui.com/api/button/](https://material-ui.com/api/button/)'
- en: Displaying alerts
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示警报
- en: Alert dialogs are similar to confirmation dialogs. You can think of alerts as
    really important snackbars that cannot be ignored. Like confirmations, alerts
    cause interruption and have to be explicitly acknowledged to get rid of them.
    Furthermore, alert dialogs might not be displayed as the direct result of an action
    taken by the user. Alerts can be displayed as the result of changes to the environment
    the user is interacting with.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 警报对话框类似于确认对话框。你可以把警报看作是真正重要的snackbars，不能被忽视。像确认一样，警报会引起干扰，并且必须明确承认才能消除它们。此外，警报对话框可能不是用户采取直接行动的直接结果。警报可以是用户交互的环境发生变化的结果。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s say that your application needs to be able to alert users when their
    allotted disk space is running low. Here''s an example that shows what the alert
    might look like:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的应用程序需要能够提醒用户当他们的磁盘空间即将用尽时。以下是一个示例，展示了警报可能的样子：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And here''s what the alert dialog looks like when it''s displayed by clicking
    on the show alert button:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击显示警报按钮时，这就是警报对话框的显示效果：
- en: '![](img/d7826795-c1ae-4f2c-b367-08e798d84c40.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d7826795-c1ae-4f2c-b367-08e798d84c40.png)'
- en: How it works...
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Alerts aren't much different from regular dialogs in that you use them to collect
    input from the user. The principle with alerts is to keep them short and to the
    point. For example, this alert dialog doesn't have a title. It's able to get the
    point across without a title – if the user doesn't start deleting stuff, they're
    not going to be able to do anything.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 警报与常规对话框没有太大区别，你使用它们来收集用户的输入。警报的原则是保持简短并直截了当。例如，这个警报对话框没有标题。它不需要标题就能传达要点——如果用户不开始删除内容，他们将无法做任何事情。
- en: There's more...
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can make your alerts a little more eye-catching by adding an icon to the
    alert message and the button that dismisses the alert. Here''s the modified example:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在警报消息和关闭警报的按钮上添加图标来让你的警报更加引人注目。以下是一个修改后的示例：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here''s what the new alert looks like:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是新警报的样子：
- en: '![](img/e408c9d7-e5ad-4565-baa3-f5e3ca81390b.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e408c9d7-e5ad-4565-baa3-f5e3ca81390b.png)'
- en: See also
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: '`Dialog` demos: [https://material-ui.com/demos/dialogs/](https://material-ui.com/demos/dialogs/)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dialog` 示例：[https://material-ui.com/demos/dialogs/](https://material-ui.com/demos/dialogs/)'
- en: '`Dialog` API documentation: [https://material-ui.com/api/dialog/](https://material-ui.com/api/dialog/)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dialog` API 文档：[https://material-ui.com/api/dialog/](https://material-ui.com/api/dialog/)'
- en: '`DialogActions` API documentation: [https://material-ui.com/api/dialog-actions/](https://material-ui.com/api/dialog-actions/)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DialogActions` API 文档：[https://material-ui.com/api/dialog-actions/](https://material-ui.com/api/dialog-actions/)'
- en: '`DialogContent` API documentation: [https://material-ui.com/api/dialog-content/](https://material-ui.com/api/dialog-content/)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DialogContent` API 文档：[https://material-ui.com/api/dialog-content/](https://material-ui.com/api/dialog-content/)'
- en: '`DialogContentText` API documentation: [https://material-ui.com/api/dialog-content-text/](https://material-ui.com/api/dialog-content-text/)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DialogContentText` API 文档：[https://material-ui.com/api/dialog-content-text/](https://material-ui.com/api/dialog-content-text/)'
- en: '`Button` API documentation: [https://material-ui.com/api/button/](https://material-ui.com/api/button/)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Button` API 文档：[https://material-ui.com/api/button/](https://material-ui.com/api/button/)'
- en: API integration
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 集成
- en: Dialogs often need data supplied to it from an API endpoint. The challenge is
    displaying the dialog in a loading state while the user waits for the API data
    to load behind the scenes.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框通常需要从 API 端点提供数据。挑战是在用户等待后台加载 API 数据的同时显示加载状态。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s say that your application needs to display a dialog with a `Select`
    component for selecting an item. The options for the select are populated from
    an API endpoint, so you need to handle the latency between the user opening the
    dialog and the API data arriving. Here''s an example that shows one way to do
    this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的应用程序需要显示一个带有 `Select` 组件的对话框来选择一个项目。选择框的选项是从 API 端点填充的，因此你需要处理用户打开对话框和 API
    数据到达之间的延迟。以下是一个示例，展示了实现这一点的其中一种方法：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here''s what the dialog looks like when it''s first opened:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对话框首次打开时的样子：
- en: '![](img/feee0e80-d756-4189-9196-a8ab43b66d47.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/feee0e80-d756-4189-9196-a8ab43b66d47.png)'
- en: 'The dialog displays a `LinearProgress` component and disables the dialog action
    buttons while the API data is loading. Once the response arrives, here''s what
    the dialog looks like:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框显示一个 `LinearProgress` 组件，并在 API 数据加载时禁用对话框操作按钮。一旦响应到达，对话框看起来是这样的：
- en: '![](img/e292d4dc-ea7d-49b1-b035-fded9384e50b.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e292d4dc-ea7d-49b1-b035-fded9384e50b.png)'
- en: 'The linear progress bar is gone, the dialog action buttons are enabled, and
    there''s a Select Item field visible for the user to select an item. Here''s the
    Select Item showing the items that are loading from the API:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 线性进度条消失了，对话框操作按钮被启用，并且有一个可供用户选择项目的“选择项”字段可见。以下是显示从 API 加载的项目选择项的“选择项”：
- en: '![](img/18ad9a37-f968-4b04-ae07-a160bfb2279d.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/18ad9a37-f968-4b04-ae07-a160bfb2279d.png)'
- en: How it works...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Let''s walk through the major parts of this code, starting with the mock API
    function:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步分析这段代码的主要部分，从模拟的 API 函数开始：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `fetchItems()` function simulates an API function by returning a promise
    that resolves an array of data after three seconds. This allows you to see what
    users will see while waiting for an actual API endpoint to respond. Next, let''s
    look at the two utility components that help with rendering or hiding the select
    and the progress indicators:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetchItems()` 函数通过返回一个在三个秒后解析为数组数据的承诺来模拟一个 API 函数。这允许你在等待实际的 API 端点响应时看到用户将看到的内容。接下来，让我们看看两个帮助渲染或隐藏选择和进度指示器的实用组件：'
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The idea is that you don''t want to render the `LinearProgress` component while
    loading is `false`. Conversely, you don''t want to render the `Select` component
    while loading is `true`. Let''s take a look at `onShowItems()` next:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 理念是，你不想在加载为 `false` 时渲染 `LinearProgress` 组件。相反，你不想在加载为 `true` 时渲染 `Select` 组件。接下来，让我们看看
    `onShowItems()`：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: First, the dialog is opened by setting open to `true` and the progress indicator
    is displayed by setting loading to `true`. Then, the API `fetchItems()` function is
    called, and when the `Promise` it returns is resolved, `loading` is set to `false`
    and the `items` array is updated. This hides the progress indicator and shows
    the select that is now populated with items.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过将 `open` 设置为 `true` 来打开对话框，并通过将 `loading` 设置为 `true` 来显示进度指示器。然后，调用 API
    的 `fetchItems()` 函数，当它返回的 `Promise` 解析时，将 `loading` 设置为 `false` 并更新 `items` 数组。这隐藏了进度指示器并显示了现在已填充了项目的选择框。
- en: See also
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: '`Dialog` demos: [https://material-ui.com/demos/dialogs/](https://material-ui.com/demos/dialogs/)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dialog` 示例：[https://material-ui.com/demos/dialogs/](https://material-ui.com/demos/dialogs/)'
- en: '`Dialog` API documentation: [https://material-ui.com/api/dialog/](https://material-ui.com/api/dialog/)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dialog` API 文档：[https://material-ui.com/api/dialog/](https://material-ui.com/api/dialog/)'
- en: '`DialogActions` API documentation: [https://material-ui.com/api/dialog-actions/](https://material-ui.com/api/dialog-actions/)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DialogActions` API 文档：[https://material-ui.com/api/dialog-actions/](https://material-ui.com/api/dialog-actions/)'
- en: '`DialogContent` API documentation: [https://material-ui.com/api/dialog-content/](https://material-ui.com/api/dialog-content/)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DialogContent` API 文档：[https://material-ui.com/api/dialog-content/](https://material-ui.com/api/dialog-content/)'
- en: '`DialogContentText` API documentation: [https://material-ui.com/api/dialog-content-text/](https://material-ui.com/api/dialog-content-text/)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DialogContentText` API 文档：[https://material-ui.com/api/dialog-content-text/](https://material-ui.com/api/dialog-content-text/)'
- en: '`Button` API documentation: [https://material-ui.com/api/button/](https://material-ui.com/api/button/)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Button` API 文档：[https://material-ui.com/api/button/](https://material-ui.com/api/button/)'
- en: '`LinearProgress` API documentation: [https://material-ui.com/api/linear-progress/](https://material-ui.com/api/linear-progress/)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LinearProgress` API 文档：[https://material-ui.com/api/linear-progress/](https://material-ui.com/api/linear-progress/)'
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MenuItem` API 文档：[https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
- en: '`Select` API documentation: [https://material-ui.com/api/select/](https://material-ui.com/api/select/)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Select` API 文档：[https://material-ui.com/api/select/](https://material-ui.com/api/select/)'
- en: Creating fullscreen dialogs
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建全屏对话框
- en: With fullscreen dialogs, you have more space to render information. Most of
    the time, you won't need full screen dialogs. In less common cases, your dialog
    needs as much space as possible to render information.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在全屏对话框中，您有更多空间来渲染信息。大多数情况下，您不需要全屏对话框。在不常见的情况下，您的对话框需要尽可能多的空间来渲染信息。
- en: How to do it...
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Let''s say that, from some screen in your application, there''s a button that
    exports data for the user. When clicked, you want to give the user a preview of
    the data that''s about to be exported before they confirm. Here''s what the code
    looks like:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 假设，在您的应用程序的某个屏幕上有一个按钮，用于导出用户数据。当点击时，您想在用户确认之前给他们一个即将导出的数据的预览。以下是代码的样子：
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is what the dialog looks like when it''s opened:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是对话框打开时的样子：
- en: '![](img/bc60a3f4-b83c-42f2-a780-73c679cdcdbe.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bc60a3f4-b83c-42f2-a780-73c679cdcdbe.png)'
- en: You can click on the X button beside the dialog title to close the dialog, or
    you can click on the EXPORT button to the right.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以点击对话框标题旁边的 X 按钮，关闭对话框，或者点击右侧的导出按钮。
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s look at the properties that are passed to the `Dialog` component:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看传递给 `Dialog` 组件的属性：
- en: '[PRE14]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `fullScreen` Boolean property is how the dialog is rendered in fullscreen
    mode. The `TransitionComponent` property changes the way that dialog is transitioned
    onto the screen.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`fullScreen` 布尔属性决定了对话框在全屏模式下的渲染方式。`TransitionComponent` 属性改变了对话框过渡到屏幕上的方式。'
- en: 'Because the dialog is displayed in fullscreen mode, you might want to change
    the way that the title and actions are displayed to the user, as is shown in this
    example. Instead of using the `DialogTitle` and `DialogAction` components, you
    can use the `AppBar` and `Toolbar` components:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 因为对话框以全屏模式显示，您可能想要更改标题和操作对用户显示的方式，如下例所示。您可以使用 `AppBar` 和 `Toolbar` 组件而不是使用 `DialogTitle`
    和 `DialogAction` 组件：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This makes the title, close action, and main action more visible to the user.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得标题、关闭操作和主要操作对用户更加可见。
- en: See also
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: '`Dialog` demos: [https://material-ui.com/demos/dialogs/](https://material-ui.com/demos/dialogs/)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dialog` 演示：[https://material-ui.com/demos/dialogs/](https://material-ui.com/demos/dialogs/)'
- en: '`Dialog` API documentation: [https://material-ui.com/api/dialog/](https://material-ui.com/api/dialog/)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dialog` API 文档：[https://material-ui.com/api/dialog/](https://material-ui.com/api/dialog/)'
- en: '`AppBar` API documentation: [https://material-ui.com/api/app-bar/](https://material-ui.com/api/app-bar/)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AppBar` API 文档：[https://material-ui.com/api/app-bar/](https://material-ui.com/api/app-bar/)'
- en: '`Toolbar` API documentation: [https://material-ui.com/api/toolbar/](https://material-ui.com/api/toolbar/)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Toolbar` API 文档：[https://material-ui.com/api/toolbar/](https://material-ui.com/api/toolbar/)'
- en: '`Table` API documentation: [https://material-ui.com/api/table/](https://material-ui.com/api/table/)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Table` API 文档：[https://material-ui.com/api/table/](https://material-ui.com/api/table/)'
- en: Scrolling dialog content
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滚动对话框内容
- en: It can be hard to find enough vertical space to fit all of your content into
    a dialog. When the dialog runs out of space, a vertical scrollbar is added.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 可能很难找到足够的空间将所有内容放入对话框中。当对话框空间不足时，会添加一个垂直滚动条。
- en: How to do it...
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s say that you have a long table of data that you need to display in a
    dialog for the user before exporting to another format. The user will need the
    ability to scroll through the table rows. Here''s an example:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个需要显示在对话框中供用户在导出为其他格式之前查看的长数据表格。用户将需要能够滚动浏览表格行。以下是一个示例：
- en: '[PRE16]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here''s what the dialog looks like when it''s opened:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对话框打开时的样子：
- en: '![](img/3c21f4f9-9e00-4614-818a-db51c186ccff.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3c21f4f9-9e00-4614-818a-db51c186ccff.png)'
- en: If you move your mouse pointer over the table rows and start scrolling, the
    table rows scroll up and down in between the dialog title and the dialog action
    buttons.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将鼠标指针移到表格行上并开始滚动，表格行将在对话框标题和对话框操作按钮之间上下滚动。
- en: How it works...
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By default, dialog content will scroll within the `Paper` component of the dialog
    (the `DialogContent` component), so there's no need to specify a property. However,
    you can pass the `body` value to the `scroll` property of the `Dialog` component.
    This will make the height of the dialog change to accommodate the content.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，对话框内容将在对话框的`Paper`组件（即`DialogContent`组件）内部滚动，因此无需指定属性。但是，你可以将`body`值传递给`Dialog`组件的`scroll`属性。这将使对话框的高度改变以适应内容。
- en: See also
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: '`Dialog` demos: [https://material-ui.com/demos/dialogs/](https://material-ui.com/demos/dialogs/)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dialog`演示：[https://material-ui.com/demos/dialogs/](https://material-ui.com/demos/dialogs/)'
- en: '`Dialog` API documentation: [https://material-ui.com/api/dialog/](https://material-ui.com/api/dialog/)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dialog` API 文档：[https://material-ui.com/api/dialog/](https://material-ui.com/api/dialog/)'
- en: '`Table` API documentation: [https://material-ui.com/api/table/](https://material-ui.com/api/table/)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Table` API 文档：[https://material-ui.com/api/table/](https://material-ui.com/api/table/)'
