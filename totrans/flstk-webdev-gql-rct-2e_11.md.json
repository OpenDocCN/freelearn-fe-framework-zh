["```js\nnpm install --save-dev webpack-dev-middleware webpack-hot-middleware @babel/cli\n```", "```js\nnpm install --save node-fetch\n```", "```js\n    if(process.env.NODE_ENV === 'development') {\n      const devMiddleware = \n        require('webpack-dev-middleware');\n      const hotMiddleware = \n        require('webpack-hot-middleware');\n      const webpack = require('webpack');\n      const config = \n        require('../../webpack.server.config');\n      const compiler = webpack(config);\n      app.use(devMiddleware(compiler));\n      app.use(hotMiddleware(compiler));\n    }\n    ```", "```js\nconst path = require('path');\nconst webpack = require('webpack');\nconst buildDirectory = 'dist';\nmodule.exports = {\n  mode: 'development',\n  entry: [\n    'webpack-hot-middleware/client',\n    './src/client/index.js'\n  ],\n  output: {\n    path: path.join(__dirname, buildDirectory),\n    filename: 'bundle.js',\n    publicPath: '/'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n        },\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n      {\n        test: /\\.(png|woff|woff2|eot|ttf|svg)$/,\n        loader: 'url-loader?limit=100000',\n\n      },\n    ],\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NamedModulesPlugin(),\n  ],\n};\n```", "```js\nimport React from 'react';\nimport { ApolloProvider } from '@apollo/client';\nimport App from './app';\nconst ServerClient = ({ client, location, context }) => {\n  return(\n    <ApolloProvider client={client}>\n      <App location={location} context={context}/>\n    </ApolloProvider>\n  );\n}\nexport default ServerClient\n```", "```js\nimport React, { useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { withApollo } from '@apollo/client/react/hoc';\nimport Router from '../../client/router';\nimport { useCurrentUserQuery } from '../../client/apollo/queries/currentUserQuery';\nimport '../../client/components/fontawesome';\nconst App = ({ location, context }) => {\n  const { data, loading, error } = useCurrentUserQuery();\n  const [loggedIn, setLoggedIn] = useState(false);\n  return (\n    <div className=\"container\">\n      <Helmet>\n        <title>Graphbook - Feed</title>\n        <meta name=\"description\" content=\"Newsfeed of all \n          your friends on Graphbook\" />\n      </Helmet>\n      <Router loggedIn={loggedIn}\n        changeLoginState={setLoggedIn} location={location}\n          context={context} />\n    </div>\n  )\n}\nexport default withApollo(App)\n```", "```js\n    import { BrowserRouter, StaticRouter, Route, Redirect, Switch } from 'react-router-dom';\n    ```", "```js\n    let Router;\n    if(typeof window !== typeof undefined) {\n      Router = BrowserRouter;\n    }\n    else {\n      Router = StaticRouter;\n    }\n    ```", "```js\n    <Router context={this.props.context} location={this.props.location}>\n    ```", "```js\napp.use('/', express.static(path.join(root, 'dist/client'), { index: false }));\napp.get('*', (req, res) => {\n  res.status(200);\n  res.send('<!doctype html>');\n  res.end();\n});\n```", "```js\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport fetch from 'node-fetch';\nexport default (req) => {\n  const AuthLink = (operation, next) => {\n    return next(operation);\n  };\n  const client = new ApolloClient({\n    ssrMode: true,\n    link: ApolloLink.from([\n      onError(({ graphQLErrors, networkError }) => {\n        if (graphQLErrors) {\n          graphQLErrors.map(({ message, locations, path,\n            extensions }) => {\n            console.log('[GraphQL error]: Message:\n              ${message}, \n                Location: ${locations}, Path: ${path}');\n          });\n          if (networkError) {\n            console.log('[Network error]:\n              ${networkError}');\n          }\n        }\n      }), \n      AuthLink,\n      new HttpLink({\n        uri: 'http://localhost:8000/graphql',\n        credentials: 'same-origin',\n        fetch\n      })\n    ]),\n    cache: new InMemoryCache(),\n  });\n  return client;\n};\n```", "```js\nimport ApolloClient from './ssr/apollo';\n```", "```js\nconst client = ApolloClient(req);\n```", "```js\nimport React from 'react';\nimport Graphbook from './ssr/';\n```", "```js\nconst context= {};\nconst App = (<Graphbook client={client} location={req.url}\n  context= {context}/>);\n```", "```js\nimport ReactDOM from 'react-dom/server';\n```", "```js\nconst content = ReactDOM.renderToString(App);\n```", "```js\nimport React from 'react';\nimport ReactDOM from 'react-dom/server';\nconst htmlTemplate = (content) => {\n  return '\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"UTF-8\"/>\n        <meta name=\"viewport\" content=\"width=device-width, \n          initial-scale=1.0\"/>\n        <meta httpEquiv=\"X-UA-Compatible\"\n          content=\"ie=edge\"/>\n        <link rel=\"shortcut icon\" \n          href=\"data:image/x-icon;,\" type=\"image/x-icon\"> \n        ${(process.env.NODE_ENV === 'development')? \"\":\n          \"<link rel='stylesheet' href='/bundle.css'/>\"}\n      </head>\n      <body>\n        ${ReactDOM.renderToStaticMarkup(<div id=\"root\" \n          dangerouslySetInnerHTML={{ __html: content \n            }}></div>)}\n        <script src=\"img/bundle.js\"></script>\n      </body>\n    </html>\n  ';\n};\nexport default htmlTemplate;\n```", "```js\nimport template from './ssr/template';\n```", "```js\nres.send('<!doctype html>\\n${template(content)}');\n```", "```js\nimport { Helmet } from 'react-helmet';\n```", "```js\nconst head = Helmet.renderStatic();\n```", "```js\nres.send('<!doctype html>\\n${template(content, head)}');\n```", "```js\n${head.title.toString()}\n${head.meta.toString()}\n```", "```js\napp.get('*', (req, res) => {\n  const client = ApolloClient(req);\n  const context= {};\n  const App = (<Graphbook client={client} \n    location={req.url} context= {context}/>);\n  const content = ReactDOM.renderToString(App);\n  if (context.url) {\n    res.redirect(301, context.url);\n  } else {\n    const head = Helmet.renderStatic();\n    res.status(200);\n    res.send('<!doctype html>\\n${template(content, \n      head)}');\n    res.end();\n  }\n});\n```", "```js\n    cookies package allows us to easily interact through the Express.js request object with the cookies sent by the browser. Instead of manually parsing and reading through the cookie string (which is just a comma-separated list), you can access the cookies with simple get and set methods. To get this package working, you have to initialize it inside Express.js.\n    ```", "```js\n    import Cookies from 'cookies';\n    import JWT from 'jsonwebtoken';\n    const { JWT_SECRET } = process.env;\n    ```", "```js\n    app.use(\n      (req, res, next) => {\n        const options = { keys: ['Some random keys'] }; \n        req.cookies = new Cookies(req, res, options); \n        next();\n      }\n    );\n    ```", "```js\n    app.get('*', async (req, res) => {\n      const token = req.cookies.get('authorization', \n        { signed: true });\n      var loggedIn;\n      try {\n        await JWT.verify(token, JWT_SECRET);\n        loggedIn = true;\n      } catch(e) {\n        loggedIn = false;\n      }\n    ```", "```js\n    const App = (<Graphbook client={client} loggedIn={loggedIn} location={req.url} context={context}/>);\n    ```", "```js\n    <App location={location} context={context} loggedIn={loggedIn}/>\n    ```", "```js\n    const App = ({ location, context, loggedIn: loggedInProp }) => {\n      const { data, loading, error } = \n        useCurrentUserQuery();\n      const [loggedIn, setLoggedIn] = \n        useState(loggedInProp);\n    ```", "```js\n    context.cookies.set(\n      'authorization',\n      token, { signed: true, expires: expirationDate, \n        httpOnly: true, secure: false, sameSite: 'strict'\n          }\n    );\n    ```", "```js\n    const cookieExpiration = 1;\n    const expirationDate = new Date(); \n    expirationDate.setDate(\n      expirationDate.getDate() + cookieExpiration\n    );\n    ```", "```js\n    import { gql, useMutation } from '@apollo/client';\n    export const LOGOUT = gql'\n      mutation logout {\n        logout {\n          success\n        }\n      }\n    ';\n    export const useLogoutMutation = () => useMutation(LOGOUT);\n    ```", "```js\n    import { useLogoutMutation } from '../../apollo/mutations/logout';\n    ```", "```js\n    logout: Response @auth\n    ```", "```js\n    logout(root, params, context) {\n      context.cookies.set(\n        'authorization',\n        '', { signed: true, expires: new Date(), httpOnly:\n          true, secure: false, sameSite: 'strict' }\n      );\n      return {\n        message: true\n      };\n    },\n    ```", "```js\n    const client = ApolloClient(req, loggedIn);\n    ```", "```js\n    const AuthLink = (operation, next) => {\n      if(loggedIn) {\n        operation.setContext(context => ({\n          ...context,\n          headers: {\n            ...context.headers,\n            Authorization: \n              req.cookies.get('authorization')\n          },\n        }));\n      }\n      return next(operation)\n    };\n    ```", "```js\n    import { renderToStringWithData } from \"@apollo/client/react/ssr\";\n    ```", "```js\n    renderToStringWithData(App).then((content) => {\n      if (context.url) {\n        res.redirect(301, context.url);\n      } else {\n        const head = Helmet.renderStatic();\n        res.status(200);\n        res.send('<!doctype html>\\n${template(content,\n          head)}');\n        res.end();\n      }\n    });\n    ```", "```js\n    const initialState = client.extract();\n    ```", "```js\n    res.send('<!doctype html>\\n${template(content, head, initialState)}');\n    ```", "```js\n    ${ReactDOM.renderToStaticMarkup(<script dangerouslySetInnerHTML=\n    {{__html: 'window.__APOLLO_STATE__=${JSON.stringify(state).replace\n    (/</g, '\\\\u003c')}'}}/>)}\n    ```", "```js\n    cache: new InMemoryCache().restore(window.__APOLLO_STATE__)\n    ```", "```js\n(typeof window.__APOLLO_STATE__ !== typeof undefined && typeof window.__APOLLO_STATE__.ROOT_QUERY !== typeof undefined && typeof window.__APOLLO_STATE__.ROOT_QUERY.currentUser !== typeof undefined)\n```"]