- en: Chapter 9. Using Spinners
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。使用旋转器
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Removing the input focus outline
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除输入焦点轮廓
- en: Formatting currencies for local cultures
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为本地文化格式化货币
- en: Formatting time for local cultures
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为本地文化格式化时间
- en: Controlling the step between values
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制值之间的步骤
- en: Specifying the spin overflow
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定旋转溢出
- en: Simplifying the spinner buttons
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化旋转器按钮
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this chapter, we'll be working with spinners. A **spinner** is nothing more
    than an adornment on a text `input` element. But at the same time, it's plenty
    more. For example, the spinner does a lot to assist with formatting numbers to
    local cultures as we'll see in this chapter. We'll also explore some of the options
    that the spinner widget ships with, and how we can expand on and improve these
    options. Finally, we'll take a look at some of the ways we can modify the look
    and feel of the spinner widget.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用旋转器。 **旋转器** 只不过是文本`input`元素上的装饰品。但与此同时，它还有很多其他用途。例如，旋转器在本章中将有助于将数字格式化为本地文化。我们还将探讨旋转器小部件提供的一些选项，以及如何扩展和改进这些选项。最后，我们将看一些修改旋转器小部件外观和感觉的方法。
- en: Removing the input focus outline
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除输入焦点轮廓
- en: Most browsers will automatically apply an input focus outline around the `input`
    element when it gains the focus from the user. The element receives focus when
    the user either clicks the `input` element, or tabs their way there. The spinner
    widget is essentially an `input` element with adornments. This includes the ability
    to utilize the innate jQuery state classes from the CSS theme framework. While
    the automatic focusing behavior of the browser may work well on `input` elements
    by themselves, these focus rings can make the spinner look a little cluttered.
    Let's take a look at how we can remove the automatic focus outline, while maintaining
    the same level of accessibility
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数浏览器在用户从中获得焦点时，将自动在`input`元素周围应用输入焦点轮廓。当用户单击`input`元素或通过标签到达时，元素会获得焦点。旋转器小部件本质上是一个带有装饰的`input`元素。这包括利用
    CSS 主题框架中的内在 jQuery 状态类的能力。虽然浏览器的自动聚焦行为对于单独的`input`元素可能效果很好，但是这些焦点环可能会使旋转器看起来有点凌乱。让我们看看如何删除自动焦点轮廓，同时保持相同的可访问性水平。
- en: How to do it...
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We'll create just a simple `input` element for this example. Here is what the
    HTML structure looks like.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将创建一个简单的`input`元素。以下是 HTML 结构的样子。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: And, here is the custom CSS used in conjunction with our widget modifications
    to remove the focus outline.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是与我们的小部件修改一起使用的自定义 CSS，以移除焦点轮廓。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Finally, here is our JavaScript code which alters the definition of the spinner
    widget, and creates an instance with no automatic outline applied by the browser.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是我们的 JavaScript 代码，它修改了旋转器小部件的定义，并创建了一个实例，浏览器不会自动应用任何轮廓。
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To give you a better idea of the change we've introduced, this is what the spinner
    widget we just created looked like before our modifications to the spinner definition.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您更好地了解我们引入的更改，这就是我们在对旋转器定义进行修改之前创建的旋转器小部件的外观。
- en: '![How to do it...](img/2186_09_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_09_01.jpg)'
- en: Here, you can clearly see that the `input` element has the focus, but we could
    do without the double border as it doesn't exactly fit nicely with our theme.
    Following is the modified version of the same widget in the focused state after
    introducing our changes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以清楚地看到`input`元素具有焦点，但是我们可以不使用双重边框，因为它与我们的主题不太匹配。以下是在引入我们的更改后处于焦点状态的相同小部件的修改版本。
- en: '![How to do it...](img/2186_09_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_09_02.jpg)'
- en: We no longer have the focus outline, and the widget still changes its state
    visually when it gains focus. Except now, we're changing the appearance using
    state classes from the CSS theme, and not relying on the browser to do it for
    us.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再有焦点轮廓，当小部件获得焦点时，小部件仍然会在视觉上更改其状态。只是现在，我们正在使用 CSS 主题中的状态类更改外观，而不是依赖浏览器为我们完成。
- en: How it works...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The CSS class that takes care of removing the outline for us, the `ui-spinner-input-no-outline`
    class, is easy enough to understand. We simply set the `outline` to `0` which
    overrides the default browser way of doing things. Our custom extension of the
    spinner widget knows how to make use of this class.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 处理移除轮廓的 CSS 类，`ui-spinner-input-no-outline`类，非常容易理解。我们只需将`outline`设置为`0`，这将覆盖浏览器的默认操作方式。我们自定义的旋转器小部件知道如何利用这个类。
- en: We've added a new `inputOutline` option to the spinner widget. This option will
    apply our new CSS class to the `input` element if it is set to `false`. However,
    `inputOutline` defaults to `true`, because we don't want to override the default
    browser functionality by default. Furthermore, we also don't want to necessarily
    override the default spinner widget functionality by default. Instead, it's safer
    to provider an option that when explicitly set, changes the defaults. In our implementation
    of the `_create()` method, we call the original implementation of the spinner
    constructor. Then, if the `inputOutline` option is `true`, we apply the `ui-spinner-input-no-outline`
    class.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经向旋转器小部件添加了一个新的`inputOutline`选项。如果设置为`false`，此选项将向`input`元素应用我们的新 CSS 类。但是，默认情况下，`inputOutline`默认为`true`，因为我们不希望默认情况下覆盖默认浏览器功能。此外，我们也不一定想要默认情况下覆盖默认的旋转器小部件功能。相反，最安全的方式是提供一个选项，当显式设置时，改变默认设置。在我们的`_create()`方法的实现中，我们调用旋转器构造函数的原始实现。然后，如果`inputOutline`选项为`true`，我们应用`ui-spinner-input-no-outline`类。
- en: Again, you may have noticed the last thing we do is apply the `_focusable()`
    method to the `this.uiSpinner` property. The reason being, we need to make up
    for the lost accessibility; the outline is no longer applied by the browser, and
    so we need to apply the `ui-state-focus` class when the widget gains focus. The
    `_focusable()` method is a simple helper defined in the base widget class, and
    so available to all widgets, that makes the passed elements handle the focus events.
    This is much simpler than dealing with the event setup and tear-down ourselves.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，请注意，我们最后要做的事情是将`this.uiSpinner`属性应用于`_focusable()`方法。原因是，我们需要弥补失去的可访问性；浏览器不再应用轮廓，因此当小部件获得焦点时，我们需要应用`ui-state-focus`类。`_focusable()`方法是在基本小部件类中定义的一个简单辅助方法，因此对所有小部件都可用，使传递的元素处理焦点事件。这比自己处理事件设置和撤消要简单得多。
- en: Formatting currencies for local cultures
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化本地文化的货币
- en: It is possible to use the spinner widget in conjunction with the **Globalize**
    jQuery library. The Globalize library is an effort by the jQuery foundation to
    standardize the way jQuery projects format data for different cultures. A culture
    is a set of rules that formats strings, dates, and currencies according to cultural
    norms. For example, our application should treat German dates and currencies differently
    from French dates and currencies. This is how we're able to pass a `culture` value
    to the spinner widget. Let's look at how we can use the Globalize library with
    the spinner widget to format currencies to local cultures.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将旋转器小部件与**Globalize** jQuery 库一起使用。 Globalize 库是 jQuery 基金会的一项努力，旨在标准化 jQuery
    项目根据不同文化格式化数据的方式。文化是根据文化规范格式化字符串、日期和货币的一组规则。例如，我们的应用程序应该将德语日期和货币与法语日期和货币区分对待。这就是我们能够向旋转器小部件传递`culture`值的方式。让我们看看如何使用
    Globalize 库与旋转器小部件将货币格式化为本地文化。
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: The first thing our application needs when working with several locales is to
    include the `globalize` libraries. Each culture is contained in its own JavaScript
    file.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的应用程序在多个区域设置中运行时，第一件需要做的事情就是包含`globalize`库。每种文化都包含在自己的 JavaScript 文件中。
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, we'll define the HTML used to display the culture selector, made up of
    radio buttons, and the spinner widget, used to display currencies.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义用于显示文化选择器的 HTML，由单选按钮组成，并且用于显示货币的旋转器小部件。
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Finally, we have our JavaScript code used to populate the `culture` selector,
    instantiate the spinner widget, and bind the change event to the culture selector.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有用于填充`culture`选择器、实例化旋转器小部件并将更改事件绑定到文化选择器的 JavaScript 代码。
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When you first look at this UI in your browser, you'll notice that **English**
    is the selected culture, and the spinner will format the currency accordingly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次在浏览器中查看此用户界面时，您会注意到**英语**是选定的文化，并且旋转器将相应地格式化货币。
- en: '![How to do it...](img/2186_09_03.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/2186_09_03.jpg)'
- en: But, a change in culture results in a currency format change in the spinner
    widget, as previously illustrated.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，文化的更改会导致旋转器小部件中的货币格式发生变化，如前所述。
- en: '![How to do it...](img/2186_09_04.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/2186_09_04.jpg)'
- en: How it works...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first thing we do in the JavaScript code, once the DOM is ready, is populate
    the `culture` selector using the `Globalize.cultures` object. The Globalize library
    constructs this object based on the available cultures; you'll notice a direct
    correlation from the available culture options and the culture scripts that we've
    included in the page. We store the name of the culture as the `id` attribute since
    this is what we pass to the spinner widget later. The `Globalize.cultures` object
    also has a default culture, and we use this value to determine which option is
    selected when the page first loads.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 代码中，一旦 DOM 准备就绪，我们首先使用 `Globalize.cultures` 对象填充 `culture` 选择器。
    Globalize 库根据可用的文化构建此对象；你会注意到可用文化选项与页面中包含的文化脚本之间存在直接关联。 我们将文化的名称存储为 `id` 属性，因为这是我们稍后传递给微调器小部件的内容。
    `Globalize.cultures` 对象还具有默认文化，我们使用此值来确定页面首次加载时选择了哪个选项。
- en: The spinner instance we've created uses a `numberFormat` option value of `C`.
    This string actually gets passed directly to the `Globalize.format()` function
    upon rendering of the spinner value. The next three options, `step`, `min`, and
    `max` are typical with any numerical spinner instances. The `culture` option,
    which we're setting to the selected default culture, tells the spinner widget
    how to format the currency. Finally, we've setup an event handling that is triggered
    anytime the culture selection changes. This handler will update the spinner widget
    to use the newly-selected culture.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的微调器实例使用了一个 `numberFormat` 选项值为 `C`。 这个字符串实际上在渲染微调器值时直接传递给 `Globalize.format()`
    函数。 接下来的三个选项，`step`、`min` 和 `max`，与任何数字微调器实例一样。 我们将 `culture` 选项设置为所选的默认文化，告诉微调器小部件如何格式化货币。
    最后，我们设置了一个事件处理程序，每当文化选择更改时触发。 此处理程序将更新微调器小部件以使用新选择的文化。
- en: Formatting time for local cultures
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为本地文化格式化时间
- en: The spinner widget utilizes the Globalize jQuery project; an effort to standardize
    on data formats according to the local culture. The spinner widget utilizes this
    library to format its values. For example, specifying the `numberFormat` and `culture`
    options allow us to use the spinner widget to display currency values according
    to local culture. However, currency is just one value that we like to format locally;
    time is another. We can use the built-in Globalize capabilities only to an extent
    in the spinner widget for displaying time values. A little more work is required
    on our part to extend the widget to properly allow for time values. In fact, let's
    create our own time widget, based on the spinner.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 微调器小部件利用了 Globalize jQuery 项目；这是一项根据本地文化标准化数据格式的工作。 微调器小部件利用此库来格式化其值。 例如，指定
    `numberFormat` 和 `culture` 选项允许我们使用微调器小部件根据本地文化显示货币值。 然而，货币只是我们喜欢本地格式化的一个值； 时间是另一个值。
    我们可以在微调器小部件中使用内置的 Globalize 功能来显示时间值。 我们需要在我们自己的部分上做更多工作来扩展小部件以正确地允许时间值。 实际上，让我们基于微调器创建我们自己的时间小部件。
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: First, let's look at the markup required for creating two time widgets in which
    we'll display the Toronto time and the London time. We're not showcasing the time-zone
    computation abilities here, simply the fact that we have two different cultures
    in the same UI.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一下创建两个时间小部件所需的标记，我们将在其中显示多伦多时间和伦敦时间。 我们在这里不展示时区计算能力，只是在同一个 UI 中展示两种不同的文化。
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next, let's have a look at the JavaScript used to define the new time widget,
    and create two instances of it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看一下用于定义新时间小部件并创建两个实例的 JavaScript 代码。
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Looking at the two time widgets in the browser, we can see that they've been
    formatted to their own local culture.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中查看两个时间小部件，我们可以看到它们已按其各自的本地文化格式化。
- en: '![How to do it...](img/2186_09_05.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现...](img/2186_09_05.jpg)'
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Let's first look at the two input elements used to define the time widget instances.
    Notice the `value` attribute, they both have a default time, expressed using the
    same format. Now, let's jump to the definition of the new time widget.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看一下用于定义时间小部件实例的两个输入元素。 注意 `value` 属性，它们都具有默认时间，使用相同的格式表示。 现在，让我们跳转到新时间小部件的定义。
- en: The first thing you'll notice here is that we're using the widget factory to
    define the time widget under the `ab` namespace. You'll also notice that we're
    extending the spinner widget. That's because it is essentially a spinner that
    we're building here, with a couple of small but important distinctions. This is
    actually a good example of something you'll have to consider when designing jQuery
    UI widget customizations that are derived from the standard set of widgets. Should
    you retain the original widget name, in this case spinner, or should you call
    it something else, in this case time? The one thing that can help you guide this
    decision is thinking about how this widget will be used. For example, we could
    have left the spinner widget intact to display these cultured time values, but
    that would mean introducing new options, and potentially confusion for the developers
    using this widget. We've decided that the use cases here are simple ones, and
    that we should allow the time to be displayed with as few options as possible.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你在这里首先注意到的是，我们使用小部件工厂在 `ab` 命名空间下定义了时间小部件。您还会注意到，我们正在扩展微调器小部件。这是因为实质上我们正在构建的是一个微调器，在这里有一些小但重要的区别。这实际上是一个很好的例子，说明了当设计从标准小部件集派生的
    jQuery UI 小部件自定义时，您必须考虑的一些事情。在这种情况下，您应该保留原始小部件名称，即微调器，还是应该叫它其他名称，比如时间？可以帮助您指导这个决定的唯一事情是思考此小部件的使用方式。例如，我们本可以保持微调器小部件不变以显示这些受文化影响的时间值，但这意味着引入新的选项，并可能让使用该小部件的开发人员感到困惑。我们已经决定这里的用例很简单，我们应该尽可能少地允许时间以尽可能少的选项显示。
- en: The options we're defining here aren't new; the `step` and `numberFormat` options
    are already defined by the spinner widget, we're just setting them to default
    values that make sense for our time widget. The `step` value will be incrementing
    against a `timestamp` value, and so we give it a default that will step by one
    second. The `numberFormat` option specifies the format, the spinner expects when
    parsing, and when formatting output.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在此定义的选项并不是新的；`step` 和 `numberFormat` 选项已经由微调器小部件定义，我们只是将它们设置为适合我们时间小部件的默认值。`step`
    值将针对一个 `timestamp` 值递增，因此我们给它一个默认值，以秒为步长。`numberFormat` 选项指定微调器在解析和格式化输出时所期望的格式。
- en: Our extension of the spinner, the `_parse()` method, is where we're using the
    Globalize library directly to parse the time strings. Recall that our inputs have
    the same string formats. This becomes a problem if we're trying to parse a value
    that has an unrecognizable format. So we try to parse the time value without specifying
    what culture the value is. If that doesn't work, we use the culture attached to
    this widget. This way, we can specify the initial values using one format, as
    we've done here, and we can change the culture on-the-fly; everything will still
    work. Our version of the `_format()` method is simple since we know the value
    is always going to be a timestamp number, all we have to do is pass a new `Date`
    object back to the original spinner `_format()` method.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对微调器的扩展，`_parse()` 方法，是我们直接使用 Globalize 库解析时间字符串的地方。请记住，我们的输入具有相同的字符串格式。如果我们尝试解析一个格式不可识别的值，这就成为了一个问题。因此，我们尝试在不指定值所属文化的情况下解析时间值。如果这样不起作用，我们就使用附加到此小部件的文化。通过这种方式，我们可以使用一个格式指定初始值，就像我们在这里做的一样，并且我们可以动态更改文化；一切仍将正常工作。我们的`_format()`方法的版本很简单，因为我们知道值始终是一个时间戳数字，我们只需将一个新的
    `Date` 对象传递回原始的微调器`_format()`方法即可。
- en: Lastly, we have the two time widget instances, where one is passed a culture
    of `en-CA`, and the other, `en-GB`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有两个时间小部件实例，其中一个传递了 `en-CA` 的文化，另一个传递了 `en-GB`。
- en: Controlling the step between values
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制值之间的步长
- en: There are several ways with which we can control the steps in the spinner widget.
    The step is the value that the spinner widget uses to move its number either up
    or down. For example, you'll often see loop code that increments a counter `cnt
    ++`. Here, the step is one and this is what the spinner step value defaults to.
    Changing this option in the spinner is trivial; we can even change this value
    after the widget has been created.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以控制微调器小部件中的步骤。步骤是微调器小部件用来向上或向下移动其数字的值。例如，您经常会看到循环代码，它会增加一个计数器 `cnt ++`。在这里，步骤是一，这是微调器步骤值的默认值。更改微调器中的此选项很简单；我们甚至可以在创建小部件后更改此值。
- en: There are other measures we can take to control the stepping behavior of the
    spinner. Let's take a look at the incremental option and see how this impacts
    the spinner.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以采取其他措施来控制旋转器的步进行为。让我们看看增量选项，并看看这如何影响旋转器。
- en: How to do it...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We''ll create three spinner widgets to demonstrate the potential of the incremental
    option. Following is the HTML structure:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建三个旋转器部件来演示增量选项的潜力。以下是HTML结构：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And following is the JavaScript used to create the three spinner instances:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是用于创建三个旋转器实例的 JavaScript 代码：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The three spinner widgets should look something like this in your browser.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器中，这三个旋转器部件应该看起来是这样的。
- en: '![How to do it...](img/2186_09_06.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_09_06.jpg)'
- en: How it works...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We've created three different spinner instances, all of which behave differently
    when the user holds down one of the spin buttons. The `#spin1` spinner has a step
    value of `5`, and will always increment the spinner value by `5`. You can try
    this out by holding down the spinner button. You'll notice this will take you
    a really long time to get to a larger integer value.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了三个不同的旋转器实例，它们在用户按住其中一个旋转按钮时的行为不同。`#spin1`旋转器的步长值为`5`，并且将始终将旋转器值递增`5`。您可以通过按住旋转按钮来尝试这一点。您会注意到这将花费您很长时间才能达到一个较大的整数值。
- en: The `incremental` option takes a boolean value, as we saw with the first spinner,
    but it also accepts a `callback` function. The `#spin2` spinner has a step value
    of `10`, but that will change based on our function passed to the incremental
    option. This `incremental callback` function we've defined gets passed through
    the number of spins that have happened, since the user held the spin button down.
    We start off normally here, for the first `10` spins, and then we pick up speed
    from that point forward by returning `2` instead of `1`. When we return `2`, our
    step value becomes `20` since the returned value of this function is a multiplier.
    But it's only used while the user is holding down the spin button; this function
    doesn't permanently alter the `step` option.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`incremental`选项接受一个布尔值，就像我们在第一个旋转器中看到的那样，但它还接受一个`callback`函数。`#spin2`旋转器的步长值为`10`，但它将根据我们传递给增量选项的函数而改变。我们定义的这个`incremental
    callback`函数通过用户按住旋转按钮的旋转次数传递。我们从这里正常开始，前`10`次旋转，然后我们从那时起加速返回`2`而不是`1`。当我们返回`2`时，我们的步长值变为`20`，因为该函数的返回值是一个乘数。但它只在用户按住旋转按钮时使用；此函数不会永久改变`step`选项。'
- en: Our last spinner instance, `#spin3`, also uses an `incremental callback` function.
    However, this function will use a progressively larger value as the user continues
    to spin. Every hundred spins, we increase the multiplier, and also the step. This
    latter incremental function is useful as the spinner value itself gets larger,
    and we can control the pace at which the step changes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一个旋转器实例，`#spin3`，也使用了一个`incremental callback`函数。然而，这个函数会随着用户持续旋转而使用一个逐渐变大的值。每旋转一百次，我们就增加乘数，也增加步长。后者的递增函数在旋转器值本身变大时非常有用，我们可以控制步长变化的速度。
- en: There's more...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: We've just seen how to control the step of the value of the spinner widget.
    The `step` option dictates how far, in either direction, the value moves for a
    given spin. When the user holds the spin button down, we can use the use the `incremental`
    option to compute a step value. This helps speed up, or slow down the time it
    takes to spin to a given destination value.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到了如何控制旋转器部件的值步进。`step`选项决定了在给定旋转时值在任一方向上移动的距离。当用户按住旋转按钮时，我们可以使用`incremental`选项来计算步长值。这有助于加快或减慢旋转到给定目标值所需的时间。
- en: 'Another approach is to alter the actual timing delay in-between spins. This
    might be handy, if you want to slow the spinning down, when the user is holding
    down the spin button. Let''s look at an example of how we would go about altering
    the spin delay. Following is the HTML structure:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是改变旋转之间的实际时延。如果您想要在用户按住旋转按钮时减慢旋转速度，这可能会很方便。让我们看一个如何改变旋转延迟的例子。以下是HTML结构：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And here is the custom spinner widget definition, and three instances that all
    use different spin values.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是自定义旋转器部件定义，以及使用不同旋转值的三个实例。
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can try each one of these spinners in the browser, and observe the contrast
    in spin delay.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在浏览器中尝试这些旋转器中的每一个，并观察旋转延迟的对比。
- en: '![There''s more...](img/2186_09_07.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![更多内容...](img/2186_09_07.jpg)'
- en: The new `spinDelay` option we've added to the spinner widget allows us to specify
    the delay in milliseconds. In order to actually use this option, we have to perform
    some alterations in one of the core spinner widget methods. The `_repeat()` method
    is used internally by the widget when the user holds down the spinner button.
    It actually does a fair amount of work using little code. Essentially, the goal
    is to repeat the given event, over and over, until the user lifts the button and
    the spinning should stop. However, we cannot just call `_spin()` over and over
    without some kind of delay, otherwise the user would see nothing more than a blur
    each time the text input is updated with a new value. And so, the spinner makes
    use of the `_delay()` method for this exact purpose. The `_delay()` method sets
    a delayed execution for the past function, and is defined in the `base widget`
    class; all widgets have access to `_delay()`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将`spinDelay`选项添加到微调器小部件中，以便可以指定延迟的毫秒数。为了实际使用此选项，我们必须对其中一个核心微调器小部件方法进行一些更改。当用户按住微调器按钮时，内部使用`_repeat()`方法。它实际上使用很少的代码执行了大量工作。基本上，目标是重复给定的事件，直到用户松开按钮并且旋转应该停止。但是，我们不能仅仅重复调用`_spin()`，而不添加任何延迟，否则用户每次更新文本输入时都会看到模糊的内容。因此，微调器正好利用`_delay()`方法来实现此目的。`_delay()`方法为过去的函数设置延迟执行，并在`基本小部件`类中定义；所有小部件都可以访问`_delay()`。
- en: Our version of the `_repeat()` method is nearly identical to the original, except
    we're not hard-coding the delay between spins; we get that from the `spinDelay`
    option now.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`_repeat()`方法版本与原始版本几乎相同，除了我们现在不再硬编码旋转之间的延迟；我们现在从`spinDelay`选项中获取它。
- en: Specifying the spin overflow
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定旋转溢出
- en: The spinner widget will happily let the user spin, indefinitely. It'll even
    change the display to use exponential notation when the JavaScript integer limit
    is reached, that's fine. Almost no application needs to worry about these limits.
    And in fact, it's probably best to put some limitations in place that actually
    make sense for the application. That is, specify a `min` boundary and a `max`
    boundary.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 微调器小部件将愉快地让用户无限地旋转。当达到JavaScript整数限制时，它甚至会将显示更改为使用指数表示法，这没问题。几乎没有应用程序需要担心这些限制。事实上，最好为应用程序制定一些有意义的限制。也就是说，指定`min`边界和`max`边界。
- en: This works well, but it could work even better if we plug some logic into the
    spinner that handles overflow, when the user wants to go beyond the boundary.
    Rather than just stop spinning as is the default behavior, we just send them in
    the same direction, but starting from the opposite boundary. The best way to picture
    these constraints is by default, the spinner min-max boundary is like a straight
    line. We want to make it look more like a circle.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有效，但是如果我们在处理溢出的微调器中插入一些逻辑，它甚至可以工作得更好，当用户想要超出边界时。与默认行为停止旋转不同，我们只是将它们发送到相反的边界，但是以相同的方向开始旋转。最好的方法是将这些约束想象成默认情况下，微调器的最小
    - 最大边界就像一条直线。我们想让它看起来更像一个圆。
- en: How to do it...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We''ll have two spinner widgets, the first using the default boundary constraint
    logic, and the second using our own custom-defined behavior. Following is the
    HTML structure used to create the two widgets:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将有两个微调器小部件，第一个使用默认边界约束逻辑，第二个使用我们自己定义的行为。以下是用于创建这两个小部件的HTML结构：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And, here is the JavaScript used to instantiate the two spinners when the document
    has loaded:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是文档加载后用于实例化两个微调器的JavaScript代码：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Following are the two widgets in the browser. The latter spinner, you'll see,
    handles the boundary overflow differently than the default implementation.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是浏览器中的两个微调器。您将看到，后一个微调器处理边界溢出的方式与默认实现不同。
- en: '![How to do it...](img/2186_09_08.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_09_08.jpg)'
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When the `#spin1` spinner reaches either of the boundaries, `1` or `100`, the
    spinning will just stop. On the other hand, the `#spin2` spinner will pick up
    at the other end. You'll notice that we're passing two non-standard spinner options
    here; `minOverflow` and `maxOverflow`. These don't actually constrain the boundary
    of the spinner the way `min` and `max` do. Adding these new options was intentional
    on our part because we don't want the regular constraint logic to fire.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当`#spin1`微调器达到边界之一，即`1`或`100`时，旋转将停止。另一方面，`#spin2`微调器将从另一端开始旋转。您会注意到我们在这里传递了两个非标准的微调器选项；`minOverflow`和`maxOverflow`。这些实际上不会像`min`和`max`一样约束微调器的边界。我们之所以故意添加这些新选项，是因为我们不希望常规约束逻辑触发。
- en: The `spin` callback function we've supplied to this widget gets called on every
    spin. If we had used the traditional spinning `min` and `max` options, we would
    never know if we're experiencing an overflow because `min` would be less than
    `1` and `max` would never be more than `100`. So, we use the new options to redirect
    the value, depending on the direction. If the value has gone above `100`, then
    we set the value back to `minOverflow`. Or if the value has gone below `1`, then
    we set the value to `maxOverflow`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为这个小部件提供的`spin`回调函数在每次旋转时都会被调用。如果我们使用传统的旋转`min`和`max`选项，我们就永远不会知道是否出现了溢出，因为`min`会小于`1`，而`max`永远不会大于`100`。因此，我们使用新的选项根据方向重定向值。如果值超过了`100`，那么我们将值设置回`minOverflow`。或者如果值低于`1`，那么我们将值设置为`maxOverflow`。
- en: There's more...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You may decide that the overflow behavior, where we bring the user around to
    the other side of the spinner boundary, it isn''t exactly what you''re looking
    for. You may just want to stop the spinning, once the boundary is reached. However,
    we can still improve on the widget by disabling the spinner button once the boundary
    in that direction has been reached. This is just a different approach to spinner
    overflow, whereby we simply supply better feedback to the user, as opposed to
    altering the business logic as we did earlier. Let''s take a look at how we can
    make this change. Following is the HTML structure used for a simple spinner widget:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会决定，当我们将用户带到旋转器边界的另一侧时，溢出行为并不完全符合你的期望。你可能只想在达到边界时停止旋转。然而，我们仍然可以通过禁用旋转按钮来改进小部件。这只是对旋转器溢出的另一种方法，我们只是为用户提供更好的反馈，而不是像之前那样改变业务逻辑。让我们看看如何做出这个改变。以下是用于简单旋转器小部件的
    HTML 结构：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: And here is our JavaScript used to create the widget once the page loads.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在页面加载时用到的 JavaScript，用于创建小部件。
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When you start interacting with this widget in the browser, you'll notice that
    when you hit the `min` option value, in this case, `1`, the down spinner button
    is disabled.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在浏览器中开始与这个小部件交互时，你会注意到当你达到`min`选项值时，即`1`，下旋转按钮会被禁用。
- en: '![There''s more...](img/2186_09_09.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/2186_09_09.jpg)'
- en: Likewise, when you hit the `max`, which is `100` here, the up spinner button
    is disabled.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，当你达到了`max`，这里是`100`，上旋转按钮会被禁用。
- en: '![There''s more...](img/2186_09_10.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/2186_09_10.jpg)'
- en: We've introduced this new spinner behavior by passing the constructor a `spin`
    callback function, executed on each spin. In this callback, we create a reference
    to both spinner buttons in the `buttons` variable. Then we check if either the
    `max` value has been reached, or if the `min` value has been reached. We then
    disable the appropriate button. If we're somewhere in-between `min` and `max`,
    then we simply enable the buttons. You'll also notice that we have some extra
    filtering involved here; `not(.ui-state-disabled)` and `.ui-state-disabled`. This
    is necessary because of the way the spinner widget fires spin events. Disabling
    buttons can trigger a spin, leading to an infinite loop. And so we have to take
    care to disable only those buttons that haven't been disabled yet.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向构造函数传递一个`spin`回调函数，我们引入了这种新的旋转器行为，该函数在每次旋转时执行。在这个回调中，我们将两个旋转按钮的引用都保存在`buttons`变量中。然后我们检查是否达到了`max`值，或者达到了`min`值。然后我们禁用适当的按钮。如果我们处于`min`和`max`之间，那么我们就简单地启用这些按钮。你还会注意到我们在这里有一些额外的过滤；`not(.ui-state-disabled)`
    和 `.ui-state-disabled`。这是必要的，因为旋转器小部件触发旋转事件的方式。禁用按钮可能会触发旋转，导致无限循环。因此，我们必须小心地只禁用那些尚未被禁用的按钮。
- en: Simplifying the spinner buttons
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简化旋转器按钮
- en: The default spin buttons implemented in the spinner widget might be a bit much,
    depending on context. For example, you can clearly see that these are button widgets
    added to the slider as subcomponents. And this works perfectly when we get to
    build larger widgets out of smaller ones. This is more along the lines of an aesthetic
    preference. Maybe the spinner would look better if the individual up and down
    spin buttons didn't have a hover state, and didn't have a background or border,
    either for that matter. Let's try taking these style properties away from the
    buttons in the slider and make them appear more tightly integrated.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: spinner 小部件中实现的默认旋转按钮可能有点过多，具体取决于上下文。例如，您可以清楚地看到这些是作为子组件添加到滑块中的按钮小部件。当我们开始使用较小的小部件构建较大的小部件时，这完全有效。这更多地是一种审美偏好。也许如果单独的向上和向下旋转按钮没有悬停状态，也没有背景或边框，那么
    spinner 会看起来更好。让我们尝试从滑块按钮中去除这些样式属性，并使它们看起来更紧密集成。
- en: How to do it...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Here is the basic HTML structure used as the foundation of our `spinner` widget:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是作为我们 `spinner` 小部件基础的基本 HTML 结构：
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And here is the CSS we''ll use to remove the button styles we''re no longer
    interested in:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将使用的 CSS，用于移除我们不再感兴趣的按钮样式：
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `input` element isn''t yet a widget, and the new CSS class we''ve created
    isn''t yet part of the spinner widget. Here is what the JavaScript code to do
    both of those things, looks like:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`input` 元素尚未成为一个小部件，而我们创建的新 CSS 类也尚未成为 spinner 小部件的一部分。以下是完成这两件事情的 JavaScript
    代码的样子：'
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you take a look at the spinner we've created in the browser, you'll notice
    that the borders and backgrounds of the spinner buttons have been stripped. It
    now looks more like one whole widget. You'll also notice that the mouse cursor
    uses a pointer icon when the user hovers over either of the buttons, which helps
    indicate that they're clickable.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中查看我们创建的 spinner，您会注意到 spinner 按钮的边框和背景已经被去除。现在它看起来更像一个整体小部件。您还会注意到，当用户将鼠标悬停在任一按钮上时，鼠标指针使用指针图标，这有助于表明它们是可点击的。
- en: '![How to do it...](img/2186_09_11.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_09_11.jpg)'
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The new CSS class we've just created, `ui-spinner-basic`, works by overriding
    the button widget styles within the context of the spinner. Specifically, we're
    removing the `border` and `background`, from both the button widgets. In addition,
    we have set the `cursor` property to `pointer` in order to give the user the impression
    that the arrows are clickable. We've also customized the definition of the spinner
    widget itself a little bit. We've done so by adding a new `basic` option, which
    when `true`, will apply the new `ui-spinner-basic` class to the widget. We don't
    need to explicitly remove this class when the widget is destroyed because it was
    added to an element that is created by the spinner widget. This element is automatically
    removed by the base spinner implementation, and so our code doesn't have to worry
    about it.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建的新 CSS 类 `ui-spinner-basic` 通过在 spinner 上下文中覆盖按钮小部件样式来工作。具体来说，我们从按钮小部件中移除了
    `border` 和 `background`。此外，我们将 `cursor` 属性设置为 `pointer`，以便给用户一种箭头是可点击的印象。我们还稍微定制了
    spinner 小部件本身的定义。我们通过添加一个新的 `basic` 选项来实现这一点，当 `true` 时，将新的 `ui-spinner-basic`
    类应用于小部件。当小部件被销毁时，我们不需要显式地移除此类，因为它被添加到 spinner 小部件创建的一个元素中。此元素会被基本 spinner 实现自动移除，因此我们的代码不必担心它。
