- en: Unit Testing in Reason
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Reason 中的单元测试
- en: The subject of testing in a typed language such as Reason is a somewhat controversial
    topic. Some believe that a good test suite diminishes the need for a type system.
    On the other hand, some value a type system much more than their test suite. These
    differences in opinion can lead to some pretty heated debates.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在像 Reason 这样的类型语言中进行测试的主题是一个有些有争议的话题。有些人认为一个好的测试套件减少了类型系统的需求。另一方面，有些人比测试套件更重视类型系统。这些不同的观点可能导致一些相当激烈的辩论。
- en: Of course, types and tests are not mutually exclusive. We can have types *and*
    tests. Perhaps Cheng Lou, one of Reason's core team members, said it best.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，类型和测试不是相互排斥的。我们可以同时拥有类型和测试。或许 Cheng Lou，Reason 核心团队成员之一，说得最好。
- en: 'Tests. That''s an easy one, right? Types kill a category of tests—not all of
    the tests. And this is a discussion that people don''t appreciate enough. They
    all pit tests against types. The point is: if you have types, and you *add* tests,
    your tests will be able to express much more with less energy. You don''t need
    to assert on invalid input anymore. You can assert on something more important.
    Tests can be there if you want; you''re just saying much more with them.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 测试。这很简单，对吧？类型可以消除一类测试——不是所有的测试。这是一个人们不太重视的讨论。他们都将测试与类型对立起来。重点是：如果你有类型，并且你 *添加*
    测试，你的测试将能够用更少的精力表达更多。你不再需要断言无效输入。你可以断言更重要的事情。如果你愿意，测试可以存在；你只是用它们表达得更多。
- en: '- Cheng Lou'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '- Cheng Lou'
- en: 'You can watch Cheng Lou''s talk at React Conf 2017 on the following URL:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下 URL 上观看 Cheng Lou 在 2017 年 React Conf 上的演讲：
- en: '[https://youtu.be/_0T5OSSzxms](https://youtu.be/_0T5OSSzxms)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://youtu.be/_0T5OSSzxms](https://youtu.be/_0T5OSSzxms)'
- en: 'In this chapter, we''ll set up Jest, the popular JavaScript testing framework,
    via the `bs-jest` BuckleScript bindings. We will do the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过 `bs-jest` BuckleScript 绑定设置流行的 JavaScript 测试框架 Jest。我们将执行以下操作：
- en: Learn how to set up `bs-jest` with both the `es6` and `commonjs` module formats
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用 `bs-jest` 设置 `es6` 和 `commonjs` 模块格式
- en: Unit-test a Reason function
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试 Reason 函数
- en: See how writing tests can help us improve our code
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看看编写测试如何帮助我们改进代码
- en: 'To follow along, clone this book''s GitHub repository and start from `Chapter08/app-start` using
    the following code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟上进度，请克隆本书的 GitHub 仓库，并从 `Chapter08/app-start` 开始使用以下代码：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Testing with Jest
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Jest 进行测试
- en: Jest, also created by Facebook, is arguably one of the most popular JavaScript
    testing frameworks. If you're familiar with React, you're likely also familiar
    with Jest. Therefore, we'll skip the formal introduction and get started with
    using Jest in Reason.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Jest，由 Facebook 创建，可以说是最受欢迎的 JavaScript 测试框架之一。如果你熟悉 React，你很可能也熟悉 Jest。因此，我们将跳过正式介绍，直接开始使用
    Jest 在 Reason 中的使用。
- en: Installation
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: Just like any other package, we start with the **Reason Package Index** (or
    **Redex**, for short).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何其他包一样，我们从 **Reason 包索引**（或简称 **Redex**）开始。
- en: 'Reason Package Index:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Reason 包索引：
- en: '[https://redex.github.io/](https://redex.github.io/)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://redex.github.io/](https://redex.github.io/)'
- en: 'Typing in `jest` reveals the `bs-jest` bindings to Jest. Following the installation
    instructions for `bs-jest`, we first install `bs-jest` with npm:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `jest` 中输入类型会揭示 Jest 的 `bs-jest` 绑定。按照 `bs-jest` 的安装说明，我们首先使用 npm 安装 `bs-jest`：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then we let BuckleScript know about this dev dependency by including it in
    `bsconfig.json`. Notice that the key is `"bs-dev-dependencies"` and not `"bs-dependencies"`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过在 `bsconfig.json` 中包含它来让 BuckleScript 了解这个开发依赖项。请注意，键是 `"bs-dev-dependencies"`
    而不是 `"bs-dependencies"`：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Since `bs-jest` lists `jest` as a dependency, npm will install `jest` as well,
    and we don't need to include `jest` as a direct dependency of our application.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `bs-jest` 将 `jest` 列为依赖项，npm 将安装 `jest`，因此我们不需要将 `jest` 作为应用程序的直接依赖项包含在内。
- en: 'Let''s now create a `__tests__` directory as a sibling of the `src` directory:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在 `src` 目录的兄弟目录中创建一个 `__tests__` 目录：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And tell BuckleScript to look for this directory:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 并告诉 BuckleScript 查找此目录：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Lastly, we''ll update our `test` script in `package.json` to use Jest:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将更新 `package.json` 中的 `test` 脚本，以使用 Jest：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Our first test
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一项测试
- en: 'Let''s create our first test in `__tests__/First_test.re` with something simple
    for now:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `__tests__/First_test.re` 中创建我们的第一个测试，先从简单的内容开始：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Running `npm test` now fails with the following error:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行 `npm test` 会失败，出现以下错误：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The problem here is that Jest cannot directly understand the ES Module format. Remember
    that we''ve configured BuckleScript to use ES modules via the following configuration
    (see [Chapter 2](4e4e3057-fca6-4c81-b6a7-05575aeeace3.xhtml), *Setting Up a Development
    Environment*):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是Jest无法直接理解ES模块格式。记住，我们已经通过以下配置配置了BuckleScript使用ES模块（见[第2章](4e4e3057-fca6-4c81-b6a7-05575aeeace3.xhtml)，*设置开发环境*）：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'One way to resolve this issue is to configure BuckleScript to use the `"commonjs"`
    module format instead:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的方法之一是配置BuckleScript使用`"commonjs"`模块格式：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We''ll then also need to update webpack''s `entry` field:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们还需要更新webpack的`entry`字段：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, running `npm test` results in a test that passes:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行`npm test`会产生一个通过测试：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Alternatively, if we want to keep using the ES module format, we need to make
    sure Jest runs the `*test.bs.js` files through Babel first. To do this, we''ll
    need to follow the following steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们想继续使用ES模块格式，我们需要确保Jest首先通过Babel运行`*test.bs.js`文件。为此，我们需要遵循以下步骤：
- en: 'Install both `babel-jest` and `babel-preset-env`:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`babel-jest`和`babel-preset-env`：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the corresponding Babel configuration in `.babelrc`:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`.babelrc`中添加相应的Babel配置：
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Ensure that Jest runs certain third-party dependencies within `node_modules`
    through Babel. Jest excludes running anything in `node_modules` through Babel
    by default for performance reasons. We can override this behavior by providing
    a custom Jest configuration in `package.json`. Here, we''ll tell Jest to only
    ignore third-party dependencies that don''t match `/node_modules/glennsl*`, `/node_modules/bs-platform*`,
    and so on:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保Jest通过Babel运行`node_modules`中的某些第三方依赖项。默认情况下，Jest出于性能原因排除通过Babel运行`node_modules`中的任何内容。我们可以通过在`package.json`中提供自定义Jest配置来覆盖此行为。在这里，我们将告诉Jest仅忽略不匹配`/node_modules/glennsl*`、`/node_modules/bs-platform*`等模式的第三方依赖项：
- en: '[PRE14]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, running `npm test` works with the ES Module format:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行`npm test`在ES模块格式下工作：
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Testing business logic
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试业务逻辑
- en: 'Let''s write a test that verifies we''re able to get the right customer by
    its `id`. In `Customer.re`, there is a function called `getCustomer` that accepts
    an array of `customers`, and imperatively gets the `id` by calling `getId`. The
    `getId` function accepts a `pathname` that exists outside the scope of `getCustomer`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个测试来验证我们能否通过`id`获取正确的客户。在`Customer.re`中，有一个名为`getCustomer`的函数，它接受一个客户数组，并通过调用`getId`强制性地获取`id`。`getId`函数接受一个存在于`getCustomer`作用域之外的`pathname`：
- en: '[PRE16]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Right away, we notice that this is less than ideal. It would be much better
    if `getCustomer` accepted an array of `customers` *and* an `id`, and focused on
    getting the customer by their `id`. Otherwise, it will be harder to write a test
    *just* for `getCustomer`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 立即，我们发现这并不理想。如果`getCustomer`接受一个客户数组和`id`，并专注于通过`id`获取客户，那就更好了。否则，将更难为`getCustomer`编写测试。
- en: 'So, we refactor `getCustomer` to also accept an `id`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将`getCustomer`重构为也接受一个`id`：
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, we can more easily write the test. Follow the compiler errors to ensure
    that you've replaced `getCustomer` with `getCustomerById`. For the `id` argument,
    pass in `getId(pathname)`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以更容易地编写测试。遵循编译器错误以确保你已经将`getCustomer`替换为`getCustomerById`。对于`id`参数，传递`getId(pathname)`。
- en: 'Let''s rename our test to `__tests__/Customers_test.re` and include the following
    test:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把我们的测试重命名为`__tests__/Customers_test.re`并包含以下测试：
- en: '[PRE18]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Running this test (via `npm test`) with our existing code results in the following
    error:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们现有的代码运行这个测试（通过`npm test`）会产生以下错误：
- en: '[PRE19]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The reason for the error is that `Customers.re` makes a call to `localStorage`
    at the top level.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 错误的原因是`Customers.re`在顶层调用了`localStorage`。
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Since Jest runs in Node.js, we don''t have access to browser APIs. To resolve
    this issue, we can wrap this call in a function:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Jest在Node.js中运行，我们没有访问浏览器API。为了解决这个问题，我们可以将这个调用包裹在一个函数中：
- en: '[PRE21]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: And we can call this `getCustomers` function within `initialState`. This will
    allow us to avoid the call to `localStorage` from within Jest.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`initialState`中调用这个`getCustomers`函数。这将使我们能够避免在Jest中调用`localStorage`。
- en: 'Let''s update `Customer.re` to move the array of customers into the state:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新`Customer.re`，将客户数组移动到状态中：
- en: '[PRE22]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'After these changes, our test succeeds:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改之后，我们的测试通过了：
- en: '[PRE23]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Reflecting
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反思
- en: In this chapter, we learned the basics of setting up `bs-jest` with both the
    CommonJS and ES Module formats. We also learned that unit testing can help force
    us to write better code because, for the most part, code that is easier to test
    is also better. We refactored `getCustomer` to `getCustomerById`, and moved the
    array of customers into that component's state.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用CommonJS和ES Module格式设置`bs-jest`的基本知识。我们还了解到单元测试可以帮助我们写出更好的代码，因为大部分情况下，易于测试的代码也是更好的代码。我们将`getCustomer`重构为`getCustomerById`，并将客户数组移动到该组件的状态中。
- en: 'Since we''ve written our unit tests in Reason, the compiler checks our tests
    as well. For example, if `Customer_test.re` uses `getCustomer` and we change `getCustomerById` to
    `getCustomer` in `Customer.re`, we get a compile time error:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在Reason中编写了单元测试，编译器也会检查我们的测试。例如，如果`Customer_test.re`使用了`getCustomer`，而我们把`Customer.re`中的`getCustomerById`改成了`getCustomer`，我们就会在编译时得到错误：
- en: '[PRE24]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This means that we're also not able to write certain unit tests. For example,
    if we wanted to test [Chapter 5](86a6dec1-1340-4c6c-bdfa-95138e0d471b.xhtml), *Effective
    ML* codes, where we used the type system to guarantee that an invoice wouldn't
    be discounted twice, the test wouldn't even compile. How lovely.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们也不能编写某些单元测试。例如，如果我们想测试[第5章](86a6dec1-1340-4c6c-bdfa-95138e0d471b.xhtml)，*有效的ML代码*，其中我们使用了类型系统来确保发票不会被两次打折，测试甚至无法编译。真是太棒了。
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Since Reason's reach is so broad, there are so many different ways to approach
    learning it. This book has focused on learning Reason from the perspective of
    a frontend developer. We've taken skills and concepts that we're already familiar
    with (such as building web applications with ReactJS) and explored how we would
    do the same with Reason. While on this journey, we learned about Reason's type
    system, its toolchain, and its ecosystem.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Reason的应用范围非常广泛，学习它的方法也有很多。这本书主要从前端开发者的角度来学习Reason。我们使用了已经熟悉的技能和概念（例如使用ReactJS构建Web应用）并探讨了如何用Reason实现同样的功能。在这个过程中，我们学习了Reason的类型系统、其工具链和生态系统。
- en: I believe the future of Reason is bright. Many of the skills we've learned are
    directly transferable to targeting a native platform. Reason's frontend story
    is currently more polished than its native story, but it's already possible to
    compile to both web and native. And it's only going to get better from here. There
    have already been huge improvements from when I first started using Reason, and
    I'm so excited to see what the future holds.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信Reason的未来是光明的。我们学到的许多技能可以直接转移到原生平台。目前Reason的前端故事比其原生故事更加完善，但已经可以编译成网页和原生应用。而且，它只会越来越好。自从我开始使用Reason以来，已经取得了巨大的进步，我非常期待看到未来会带来什么。
- en: Hopefully this book has piqued your interest in Reason, OCaml, and the ML family
    of languages in general. Reason's type system has seen decades of engineering.
    As a result, there is a lot that this book hasn't covered, and I'm still learning
    myself. However, you should by now have a solid foundation on which to continue
    your learning. I encourage you to learn publicly by writing asking questions on
    the Discord channel, writing blog posts, mentoring others, sharing your journey
    in meetups, and so on.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这本书能激发你对Reason、OCaml以及ML语言家族的兴趣。Reason的类型系统已经经历了数十年的工程实践。因此，这本书没有涵盖的内容还有很多，我自己也在不断学习。然而，你现在应该已经建立了一个坚实的基础，可以继续你的学习之旅。我鼓励你通过在
    Discord 频道提问、撰写博客文章、辅导他人、在聚会中分享你的经历等方式公开学习。
- en: Thank you very much for making it this far, and see you on the Discord channel!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 非常感谢您能阅读到这里，我们 Discord 频道见！
- en: 'Reason Discord channel:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Reason Discord频道：
- en: '[https://discord.gg/reasonml](https://discord.gg/reasonml)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://discord.gg/reasonml](https://discord.gg/reasonml)'
