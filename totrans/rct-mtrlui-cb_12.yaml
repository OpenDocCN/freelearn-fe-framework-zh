- en: Autocomplete and Chips - Text Input Suggestions for Multiple Items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Building an Autocomplete component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting Autocomplete suggestions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API-driven Autocomplete
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlighting search results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standalone chip input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications typically provide autocomplete input fields when there are
    too many choices to select from. Autocomplete fields are like text input fields—as
    users starts typing, they are given a smaller list of choices based on what they've
    typed. Once the user is ready to make a selection, the actual input is filled
    with components called `Chips`—especially relevant when the user needs to be able
    to make multiple selections.
  prefs: []
  type: TYPE_NORMAL
- en: Building an Autocomplete component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Material-UI doesn't actually come with an `Autocomplete` component. The reason
    is that, since there are so many different implementations of autocomplete selection
    components in the React ecosystem already, it doesn't make sense to provide another
    one. Instead, you can pick an existing implementation and augment it with Material-UI
    components so that it can integrate nicely with your Material-UI application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's say that you have a selector for a hockey team. But there are too many
    teams to reasonably fit in a simple select component—you need autocomplete capabilities.
    You can use the `Select` component from the `react-select` package to provide
    the autocomplete functionality that you need. You can use `Select` properties
    to replace key autocomplete components with Material-UI components so that the
    autocomplete matches the look and feel of the rest of your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a reusable `Autocomplete` component. The `Select` component allows
    you to replace certain aspects of the autocomplete experience. In particular, following
    are the components that you''ll be replacing:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Control`: The text input component to use'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Menu`: A menu with suggestions, displayed when the user starts typing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NoOptionsMessage`: The message that''s displayed when there aren''t any suggestions
    to display'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Option`: The component used for each suggestion in `Menu`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Placeholder`: The placeholder text component for the text input'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SingleValue`: The component for showing a value once it''s selected'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ValueContainer`: The component that wraps `SingleValue`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IndicatorSeparator`: Separates buttons on the right side of the autocomplete'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClearIndicator`: The component used for the button that clears the current
    value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DropdownIndicator`: The component used for the button that shows `Menu`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these components is replaced with Material-UI components that change
    the look and feel of the autocomplete. Moreover, you'll have all of this as new
    `Autocomplete` components that you can reuse throughout your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the result before diving into the implementation of each replacement
    component. Following is what you''ll see when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8652835-9527-4e14-a21c-a86aaa9c6758.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on the down arrow, you''ll see a menu with all the values, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc087afe-8b45-47d1-b055-0674ad9bc621.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Try typing tor into the autocomplete text field, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/13533835-14d8-4a30-8bf4-ed22eefce653.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you make a selection, the menu is closed and the text field is populated
    with the selected value, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ab8e42a-a338-42a3-85b8-40854fce22f6.png)'
  prefs: []
  type: TYPE_IMG
- en: You can change your selection by opening the menu and selecting another value,
    or you can clear the selection by clicking on the clear button to the right of
    the text.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's break down the source by looking at the individual components that make
    up the `Autocomplete` component and replacing pieces of the `Select` component.
    Then, we'll look at the final `Autocomplete` component.
  prefs: []
  type: TYPE_NORMAL
- en: Text input control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s the source for the `Control` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `inputComponent()` function is a component that passes the `inputRef` value—a
    reference to the underlying input element—to the `ref` prop. Then, `inputComponent`
    is passed to `InputProps` to set the input component used by `TextField`. This
    component is a little bit confusing because it's passing references around and
    it uses a `helper` component for this purpose. The important thing to remember
    is that the job of `Control` is to set up the `Select` component to use a Material-UI`TextField`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Options menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s the component that displays the autocomplete options when the user
    starts typing or clicks on the down arrow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `Menu` component renders a Material-UI `Paper` component so that the element
    surrounding the options is themed accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: No options available
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s the `NoOptionsMessage` component. It is rendered when there aren''t
    any autocomplete options to display, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This renders a `Typography` component with `textSecondary` as the `color` property
    value.
  prefs: []
  type: TYPE_NORMAL
- en: Individual option
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Individual options that are displayed in the autocomplete menu are rendered
    using the `MenuItem` component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `selected` and `style` properties alter the way that the item is displayed,
    based on the `isSelected` and `isFocused` properties. The `children` property
    sets the value of the item.
  prefs: []
  type: TYPE_NORMAL
- en: Placeholder text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Placeholder` text of the `Autocomplete` component is shown before the
    user types anything or makes a selection, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The Material-UI `Typography` component is used to theme the `Placeholder` text.
  prefs: []
  type: TYPE_NORMAL
- en: SingleValue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once again, the Material-UI `Typography` component is used to render the selected
    value from the menu within the autocomplete input, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: ValueContainer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ValueContainer` component is used to wrap the `SingleValue` component
    with a `div` and the `valueContainer` CSS class, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: IndicatorSeparator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, the `Select` component uses a pipe character as a separator between
    the buttons on the right side of the autocomplete menu. Since they''re going to
    be replaced by Material-UI button components, this separator is no longer necessary,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: By having the component return `null`, nothing is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Clear option indicator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This button is used to clear any selection made previously by the user, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The purpose of this component is to use the Material-UI `IconButton` component
    and to render a Material-UI icon. The click handler is passed in through `innerProps`.
  prefs: []
  type: TYPE_NORMAL
- en: Show menu indicator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like the `ClearIndicator` component, the `DropdownIndicator` component
    replaces the button used to show the autocomplete menu with an icon from Material-UI,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the styles used by the various sub-components of the autocomplete:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The Autocomplete
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, following is the `Autocomplete` component that you can reuse throughout
    your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The piece that ties all of the previous components together is the `components`
    property that's passed to `Select`. This is actually set as a `default` property
    in `Autocomplete`, so it can be further overridden. The value passed to `components`
    is a simple object that maps the component name to its implementation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Select` components for React: [https://react-select.com/](https://react-select.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Autocomplete` demos: [https://material-ui.com/demos/autocomplete/](https://material-ui.com/demos/autocomplete/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextField` API documentation: [https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Typography` API documentation: [https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Paper` API documentation: [https://material-ui.com/api/paper/](https://material-ui.com/api/paper/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IconButton` API documentation: [https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting autocomplete suggestions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, you built an `Autocomplete` component capable of selecting
    a single value. Sometimes, you need the ability to select multiple values from
    an `Autocomplete` component. The good news is that, with a few small additions,
    the component that you created in the previous section already does most of the
    work.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s walk through the additions that need to be made in order to support
    multi-value selection in the `Autocomplete` component, starting with the new `MultiValue`
    component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `MultiValue` component uses the Material-UI `Chip` component to render
    a selected value. In order to pass `MultiValue` to `Select`, add it to the `components`
    object that''s passed to `Select`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can use your `Autocomplete` component for single value selection, or
    for multi-value selection. You can add the `isMulti` property with a default value
    of `true` to `defaultProps`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now, you should be able to select multiple values from the autocomplete.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nothing looks different about the autocomplete when it's first rendered, or
    when you show the menu. When you make a selection, the `Chip` component is used
    to display the value. Chips are ideal for displaying small pieces of information
    like this. Furthermore, the close button integrates nicely with it, making it
    easy for the user to remove individual selections after they've been made.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what the autocomplete looks like after multiple selections have been
    made:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1fc802a1-8a20-4800-a893-31e726536ce7.png)'
  prefs: []
  type: TYPE_IMG
- en: Values that have been selected are removed from the menu.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Select components for React: [https://react-select.com/](https://react-select.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Autocomplete` demos: [https://material-ui.com/demos/autocomplete/](https://material-ui.com/demos/autocomplete/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextField` API documentation: [https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Typography` API documentation: [https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Paper` API documentation: [https://material-ui.com/api/paper/](https://material-ui.com/api/paper/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IconButton` API documentation: [https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Chip` API documentation: [https://material-ui.com/api/chip/](https://material-ui.com/api/chip/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API-driven Autocomplete
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can't always have your autocomplete data ready to render on the initial
    page load. Imagine trying to load hundreds or thousands of items before the user
    can interact with anything. The better approach is to keep the data on the server
    and supply an API endpoint with the autocomplete text as the user types. Then
    you only need to load a smaller set of data returned by the API.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s rework the example from the previous section. We''ll keep all of the
    same autocomplete functionality, except that, instead of passing an array to the
    `options` property, we''ll pass in an API function that returns a `Promise`. Here''s
    the API function that mocks an API call that resolves a `Promise`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This function takes a search string argument and returns a `Promise`. The same
    data that would otherwise be passed to the `Select` component in the `options`
    property is filtered here instead. Think of anything that happens in this function
    as happening behind an API in a real app. The returned `Promise` is then resolved
    with an array of matching items following a simulated latency of one second.
  prefs: []
  type: TYPE_NORMAL
- en: 'You also need to add a couple of components to the composition of the `Select`
    component (we''re up to 13 now!), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `LoadingIndicator` component is shown on the right the autocomplete text
    input. It's using the `CircularProgress` component from Material-UI to indicate
    that the autocomplete is doing something. The `LoadingMessage` component follows
    the same pattern as the other text replacement components used with `Select` in
    this example. The loading text is displayed when the menu is shown, but the `Promise`
    that resolves the `options` is still pending.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, there''s the `Select` component. Instead of using `Select`, you need
    to use the `AsyncSelect` version, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, `AsyncSelect` works the same as `Select`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The only difference between a `Select` autocomplete and an `AsyncSelect` autocomplete
    is what happens while the request to the API is pending. Here is what the autocomplete
    looks like while this is happening:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6333f07-5b9f-48f4-9661-1e50aebdfc32.png)'
  prefs: []
  type: TYPE_IMG
- en: As the user types the `CircularProgress` component is rendered to the right,
    while the loading message is rendered in the menu using a `Typography` component.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Select components for React: [https://react-select.com/](https://react-select.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Autocomplete` demos: [https://material-ui.com/demos/autocomplete/](https://material-ui.com/demos/autocomplete/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextField` API documentation: [https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Typography` API documentation: [https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Paper` API documentation: [https://material-ui.com/api/paper/](https://material-ui.com/api/paper/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IconButton` API documentation: [https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Chip` API documentation: [https://material-ui.com/api/chip/](https://material-ui.com/api/chip/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlighting search results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the user starts typing in an autocomplete and the results are displayed
    in the dropdown, it isn't always obvious how a given item matches the search criteria.
    You can help your users better understand the results by highlighting the matched
    portion of the string value.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''ll want to use two functions from the `autosuggest-highlight` package
    to help `highlight` the text presented in the autocomplete dropdown, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can build a new component that will render the item text, highlighting
    as and when necessary, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The end result is that `ValueLabel` renders an array of `span` elements, determined
    by the `parse()` and `match()` functions. One of the spans will be bolded if `part.highlight`
    is true. Now, you can use `ValueLabel` in the `Option` component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, when you search for values in the autocomplete text input, the results
    will highlight the search criteria in each item, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca6b27c7-d31c-478a-9580-f6b27935e5e3.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Autosuggest for React: [https://github.com/moroshko/autosuggest-highlight](https://github.com/moroshko/autosuggest-highlight)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Select` components for React: [https://react-select.com/](https://react-select.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Autocomplete` demos: [https://material-ui.com/demos/autocomplete/](https://material-ui.com/demos/autocomplete/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextField` API documentation: [https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Typography` API documentation: [https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Paper` API documentation: [https://material-ui.com/api/paper/](https://material-ui.com/api/paper/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IconButton` API documentation: [https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Chip` API documentation: [https://material-ui.com/api/chip/](https://material-ui.com/api/chip/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standalone chip input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some applications require multi-value inputs but don't have a predefined list
    for the user to choose from. This rules out the possibility of using an autocomplete
    or a `select` component, for example, if you're asking the user for a list of
    names.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can install the `material-ui-chip-input` package and use the `ChipInput`
    component, which brings together the `Chip` and `TextInput` components from Material-UI.
    The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'When the screen first loads, the field looks like a regular text field that
    you can type in, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec82a6ad-fbb5-4c78-94ee-c754191aef69.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As the helper text indicates, you can hit *Enter* to add the item and enter
    more text, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0127adc0-2486-4c7a-bed5-b6c5ff5804a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can keep adding items to the field as you please, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3edb601-f8e7-42bf-9d75-0d789d5dca3c.png)'
  prefs: []
  type: TYPE_IMG
- en: It's important that the helper text mentions the enter key. Otherwise, the user
    might not be able to figure out that they can enter multiple values.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The state that holds the value of the `chip` input field is an array—because
    there are multiple values. The two actions involved with the `chip` input state
    are adding and removing strings from this array. Let''s take a closer look at
    the `onAdd()` and `onDelete()` functions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The `onAdd()` function adds the `chip` to the array, while the `onDelete()`
    function deletes the `chip` at the given `index`. The chips are deleted when the
    `Delete` icon in the chip is clicked on by the user. Lastly, let''s look at the
    `ChipInput` component itself, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: It's very similar to a `TextInput` component. It actually takes the same properties,
    such as `helperText`. It also takes additional properties not found in `TextInput`,
    such as `onAdd` and `onDelete`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Material-UI `ChipInput` component:[ https://www.npmjs.com/package/material-ui-chip-input](https://www.npmjs.com/package/material-ui-chip-input)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
