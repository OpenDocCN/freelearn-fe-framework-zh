["```js\n    projects/stage7 \n    ```", "```js\n    projects/stage8 \n    ```", "```js\n    npx ng build stage8 \n    ```", "```js\n**example**\nconst foo: string = undefined\nif(foo) {\n  console.log('truthy')\n} else {\n  console.log('falsy')\n} \n```", "```js\n**example**\nconst foo: string = undefined\nlet result = ''\nif(foo) {\n  result = 'truthy'\n} else {\n  result = 'falsy'\n}\nconsole.log(result) \n```", "```js\n**example**\nconst foo: string = undefined\nconsole.log(foo ? 'truthy' : 'falsy') \n```", "```js\n**example**\nconst foo: string = undefined\nconsole.log(foo ? foo : 'bar') \n```", "```js\n**example**\nconst foo: string = undefined\nconsole.log(foo || 'bar') \n```", "```js\n**example**\nconst foo: string = undefined\nconsole.log(foo != null ? foo : 'bar') \n```", "```js\n**example**\nconst foo: string = undefined\nconsole.log(foo ?? 'bar') \n```", "```js\n**example**\nconst user = {\n  name: {\n    first: 'Doguhan',\n    middle: null,\n    last: 'Uluca'\n  } \n}\nconsole.log((user && user.name && user.name.middle) ?? '') \n```", "```js\n**example**\nconsole.log(user?.name?.middle ?? '') \n```", "```js\n    **src/app/auth/auth.****enum****.****ts**\n    export enum Role {\n      None = 'none',\n      Clerk = 'clerk',\n      Cashier = 'cashier',\n      Manager = 'manager',\n    } \n    ```", "```js\n    **src/app/user/user/user.****ts**\n    import { Role } from '../../auth/auth.enum'\n    export interface IUser {\n      _id: string\n      email: string\n      name: IName\n      picture: string\n      role: Role | string\n      userStatus: boolean\n      dateOfBirth: Date | null | string\n      level: number\n      address: {\n        line1: string\n        line2?: string\n        city: string\n        state: string\n        zip: string\n      }\n      phones: IPhone[]\n    } \n    ```", "```js\n    **src/app/user/user/user.****ts**\n    export interface IName {\n      first: string\n      middle?: string\n      last: string\n    }\n    export enum PhoneType {\n      None = 'none',\n      Mobile = 'mobile',\n      Home = 'home',\n      Work = 'work',\n    }\n    export interface IPhone {\n      type: PhoneType\n      digits: string\n      id: number\n    } \n    ```", "```js\n    **src/app/user/user/user.****ts**\n    export class User implements IUser {\n      constructor(\n        // tslint:disable-next-line: variable-name\n        public _id = '',\n        public email = '',\n        public name = { first: '', middle: '', last: '' } as IName,\n        public picture = '',\n        public role = Role.None,\n        public dateOfBirth: Date | null = null,\n        public userStatus = false,\n        public level = 0,\n        public address = {\n          line1: '',\n          city: '',\n          state: '',\n          zip: '',\n        },\n        public phones: IPhone[] = []\n      ) {}\n      static Build(user: IUser) {\n        if (!user) {\n          return new User()\n        }\n        return new User(\n          user._id,\n          user.email,\n          user.name,\n          user.picture,\n          user.role as Role,\n          typeof user.dateOfBirth === 'string'\n            ? new Date(user.dateOfBirth)\n            : user.dateOfBirth, \n          user.userStatus,\n          user.level,\n          user.address,\n          user.phones\n        )\n      }\n    } \n    ```", "```js\n    **src/app/user/user/user.****ts**\n    export class User implements IUser {\n      ...\n      **public****get****fullName****():** **string** **{**\n        **if** **(!****this****.****name****) {**\n          **return****''**\n        **}**\n        **if** **(****this****.****name****.****middle****) {**\n          **return**\n            **`****${****this****.name.first}****${****this****.name.middle}****${****this****.name.last}****`**\n        **}**\n        **return****`****${****this****.name.first}****${****this****.name.last}****`**\n      **}**\n    } \n    ```", "```js\n    **src/app/user/user/user.****ts**\n    export interface IUser {\n      ...\n      readonly fullName?: string\n    } \n    ```", "```js\n    **src/app/user/user/user.****ts**\n    export class User implements IUser {\n      ...\n\n    **toJSON****():** **object** **{**\n        **const** **serialized =** **Object****.****assign****(****this****)**\n        **delete** **serialized.****_id**\n        **delete** **serialized.****fullName**\n        **return** **serialized**\n      **}**\n    } \n    ```", "```js\nexport interface IAuthService {\n  readonly authStatus$: BehaviorSubject<IAuthStatus>\n  readonly currentUser$: BehaviorSubject<IUser>\n  login(email: string, password: string): Observable<void>\n  logout(clearToken?: boolean): void\n  getToken(): string\n} \n```", "```js\n    $ npx ng g s auth --flat false\n    $ npx ng g s auth/inMemoryAuth --skip-tests \n    ```", "```js\n    **src/app/app.****module****.****ts**\n    **import** **{** **AuthService** **}** **from****'./auth/auth.service'**\n    **import** **{** **InMemoryAuthService** **}** **from****'./auth/auth.in-memory.service'**\n    ...\n      providers: [\n        **{**\n          **provide****:** **AuthService****,**\n          **useClass****:** **InMemoryAuthService**\n        **},**\n        ...\n    ] \n    ```", "```js\n    $ npm install jwt-decode \n    $ npm install -D @types/jwt-decode \n    ```", "```js\n    **src/app/auth/auth.****service****.****ts**\n    import { Role } from './auth.enum'\n    ...\n    export interface IAuthStatus {\n      isAuthenticated: boolean\n      userRole: Role\n      userId: string\n    }\n    export interface IServerAuthResponse {\n      accessToken: string\n    }\n    export const defaultAuthStatus: IAuthStatus = {\n      isAuthenticated: false,\n      userRole: Role.None,\n      userId: '',\n    }\n    ... \n    ```", "```js\n    **src/app/auth/auth.service.ts**\n    export interface IAuthService {\n      readonly authStatus$: BehaviorSubject<IAuthStatus>\n      readonly currentUser$: BehaviorSubject<IUser>\n      login(email: string, password: string): Observable<void>\n      logout(clearToken?: boolean): void\n      getToken(): string\n    } \n    ```", "```js\n    export abstract class AuthService \n    ```", "```js\n    **src/app/auth/auth.****service****.****ts**\n    export abstract class AuthService **implements****IAuthService** {\n      authStatus$: BehaviorSubject<IAuthStatus>\n      currentUser$: BehaviorSubject<IUser>\n\n      **constructor****() {}**\n\n      login(email: string, password: string): Observable<void> {\n        throw new Error('Method not implemented.')\n      }\n      logout(clearToken?: boolean): void {\n        throw new Error('Method not implemented.')\n      }\n      getToken(): string {\n        throw new Error('Method not implemented.')\n      }\n    } \n    ```", "```js\n    **src/app/auth/auth.****service****.****ts**\n    import { IUser, **User** } from '../user/user/user'\n    ...\n    export abstract class AuthService implements IAuthService {\n      **readonly** authStatus$ = \n        **new****BehaviorSubject****<****IAuthStatus****>(defaultAuthStatus)** \n      **readonly** currentUser$ = \n        **new****BehaviorSubject****<****IUser****>(****new****User****())**\n      ...\n    } \n    ```", "```js\n    **src/app/auth/auth.****service****.****ts**\n    ...\n    **export****abstract****class****AuthService****implements****IAuthService** **{**\n         **protected****abstract****authProvider****(**\n           **email****:** **string****,**\n           **password****:** **string**\n         **):** **Observable****<****IServerAuthResponse****>**\n         **protected****abstract****transformJwtToken****(****token****:** **unknown****):**\n           **IAuthStatus**\n         **protected****abstract****getCurrentUser****():** **Observable****<****User****>**\n         ...\n    } \n    ```", "```js\n    **src/app/common/common.****ts**\n    import { HttpErrorResponse } from '@angular/common/http'\n    import { throwError } from 'rxjs'\n    export function transformError(error: HttpErrorResponse | string) {\n      let errorMessage = 'An unknown error has occurred'\n      if (typeof error === 'string') {\n        errorMessage = error\n      } else if (error.error instanceof ErrorEvent) {\n        errorMessage = `Error! ${error.error.message}`\n      } else if (error.status) {\n        errorMessage = \n          `Request failed with ${error.status} ${error.statusText}`\n      } else if (error instanceof Error) {\n        errorMessage = error.message\n      }\n      return throwError(errorMessage)\n    } \n    ```", "```js\n    **src/app/auth/auth.****service****.****ts**\n    import * **as** decode from 'jwt-decode'\n    import { transformError } from '../common/common'\n    ...\n      login(email: string, password: string): Observable<void> {\n        const loginResponse$ = this.authProvider(email, password)\n          .pipe(\n            map((value) => {\n              const token = decode(value.accessToken)\n              return this.transformJwtToken(token)\n            }),\n            tap((status) => this.authStatus$.next(status)),\n            filter((status: IAuthStatus) => status.isAuthenticated),\n            flatMap(() => this.getCurrentUser()),\n            map(user => this.currentUser$.next(user)),\n            catchError(transformError)\n          )\n        loginResponse$.subscribe({\n          error: err => {\n            this.logout()\n            return throwError(err)\n          },\n        })\n        return loginResponse$\n      } \n    ```", "```js\n    **src/app/auth/auth.****service****.****ts**\n      ...\n      logout(clearToken?: boolean): void {\n        setTimeout(() => this.authStatus$.next(defaultAuthStatus), 0)\n      } \n    ```", "```js\n    **src/app/common/cache.****service****.****ts**\n    @Injectable({ providedIn: 'root' })\n    export class CacheService {\n      protected getItem<T>(key: string): T | null {\n        const data = localStorage.getItem(key)\n        if (data != null) {\n          try {\n            return JSON.parse(data)\n          } catch (error) {\n            console.error('Parsing error:', error)\n            return null\n          }     \n        }\n        return null\n      }\n      protected setItem(key: string, data: object | string) {\n        if (typeof data === 'string') {\n          localStorage.setItem(key, data)\n        }\n        localStorage.setItem(key, JSON.stringify(data))\n      }\n      protected removeItem(key: string) {\n        localStorage.removeItem(key)\n      }\n      protected clear() {\n        localStorage.clear()\n      }\n    } \n    ```", "```js\n    **src/app/auth/auth.****service****.****ts**\n    ...\n    export abstract class AuthService implements IAuthService { \n      protected readonly cache = inject(CacheService)\n      ... \n    } \n    ```", "```js\n**example**\nauthStatus$ = new BehaviorSubject<IAuthStatus>(\n  this.getItem('authStatus') ?? defaultAuthStatus\n)\nconstructor() {\n  this.authStatus$.pipe(\n    tap(authStatus => this.cache.setItem('authStatus', authStatus))\n  )\n} \n```", "```js\n    **src/app/auth/auth.****service****.****ts**\n    ...\n      protected setToken(jwt: string) {\n        this.cache.setItem('jwt', jwt)\n      }\n      getToken(): string {\n        return this.cache.getItem('jwt') ?? ''\n      }\n      protected clearToken() {\n        this.cache.removeItem('jwt')\n      } \n    ```", "```js\n    **src/app/auth/auth.****service****.****ts**\n    ...\n      login(email: string, password: string): Observable<void> {\n        **this****.****clearToken****()**\n        const loginResponse$ = this.authProvider(email, password)\n          .pipe(\n            map(value => {\n              **this****.****setToken****(value.****accessToken****)**\n              const token = decode(value.accessToken)\n              return this.transformJwtToken(token)\n            }),\n            tap((status) => this.authStatus$.next(status)),\n            ...\n      }\n      logout(clearToken?: boolean) {\n        **if** **(clearToken) {**\n          **this****.****clearToken****()**\n        **}**\n        setTimeout(() => this.authStatus$.next(defaultAuthStatus), 0)\n      } \n    ```", "```js\n    $ npm install fake-jwt-sign \n    ```", "```js\n    **src/app/auth/auth.****in****-memory.****service****.****ts**\n    import { AuthService } from './auth.service'\n    @Injectable({ providedIn: 'root' })\n    export class InMemoryAuthService **extends****AuthService** {\n      constructor() {\n        super()\n        **console****.****warn****(**\n          **'You're using the InMemoryAuthService. Do not use this service in production.'**\n        **)**\n      }\n      …\n    } \n    ```", "```js\n    **src/app/auth/auth.****in****-memory.****service****.****ts**\n      import { sign } from 'fake-jwt-sign'//For InMemoryAuthService only\n    ...\n      protected authProvider(\n        email: string,\n        password: string\n      ): Observable<IServerAuthResponse> {\n        email = email.toLowerCase()\n        if (!email.endsWith('@test.com')) {\n          return throwError(\n            'Failed to login! Email needs to end with @test.com.'\n          )\n        }\n        const authStatus = {\n          isAuthenticated: true,\n          userId: this.defaultUser._id,\n          userRole: email.includes('cashier')\n            ? Role.Cashier\n            : email.includes('clerk')\n            ? Role.Clerk\n            : email.includes('manager')\n            ? Role.Manager\n            : Role.None,\n        } as IAuthStatus\n        this.defaultUser.role = authStatus.userRole\n        const authResponse = {\n          accessToken: sign(authStatus, 'secret', {\n            expiresIn: '1h',\n            algorithm: 'none',\n          }),\n        } as IServerAuthResponse\n        return of(authResponse)\n      }\n    ... \n    ```", "```js\n    **example**\n    private exampleAuthProvider(\n      email: string,\n      password: string\n    ): Observable<IServerAuthResponse> { return this.httpClient.post<IServerAuthResponse>(\n        `${environment.baseUrl}/v1/login`, \n        { email: email, password: password }\n      )\n    } \n    ```", "```js\n    **src/app/auth/auth.****in****-memory.****service****.****ts**\n    protected transformJwtToken(token: IAuthStatus): \n      IauthStatus {\n        return token\n      } \n    ```", "```js\n    **src/app/auth/auth.****in****-memory.****service****.****ts**\n    protected getCurrentUser(): Observable<User> {\n      return of(this.defaultUser)\n    } \n    ```", "```js\n    **src/app/auth/auth.****in****-memory.****service****.****ts**\n    import { PhoneType, User } from '../user/user/user'\n    ...\n    private defaultUser = User.Build({\n      _id: '5da01751da27cc462d265913',\n      email: 'duluca@gmail.com',\n      name: { first: 'Doguhan', last: 'Uluca' },\n      picture: 'https://secure.gravatar.com/\n        avatar/7cbaa9afb5ca78d97f3c689f8ce6c985',\n      role: Role.Manager,\n      dateOfBirth: new Date(1980, 1, 1),\n      userStatus: true,\n      address: {\n        line1: '101 Sesame St.',\n        city: 'Bethesda',\n        state: 'Maryland',\n        zip: '20810',\n      },\n      level: 2,\n      phones: [\n        {\n          id: 0,\n          type: PhoneType.Mobile,\n          digits: '5555550717',\n        },\n      ],\n    }) \n    ```", "```js\n    **src/app/home/home.****component****.****ts**\n    import { AuthService } from '../auth/auth.service'\n    export class HomeComponent implements OnInit {\n      constructor(private authService: AuthService) {}\n      ngOnInit(): void {}\n      login() {\n        this.authService.login('manager@test.com', '12345678')\n      }\n    } \n    ```", "```js\n    **src/app/home/home.****component****.****ts**\n    template: `\n        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\n          <span class=\"mat-display-2\">Hello, Limoncu!</span>\n          <button mat-raised-button color=\"primary\" **(click)=\"login()\"**>\n            Login as Manager\n          </button>\n        </div>\n      `, \n    ```", "```js\n    **src/app/home/home.****component****.****ts**\n    constructor(\n      private authService: AuthService,\n      **private****router****:** **Router**\n    ) {}\n\n    login() {\n      this.authService.login('manager@test.com', '12345678')\n    **combineLatest****([**\n      **this****.****authService****.****authStatus$****,** **this****.****authService****.****currentUser$**\n    **])** \n      **.****pipe****(**\n        **filter****(****(****[authStatus, user]****) =>**\n          **authStatus.****isAuthenticated** **&& user?.****_id** **!==** **''**\n        **),**\n        **tap****(****(****[authStatus, user]****) =>** **{**\n          **this****.****router****.****navigate****([****'/manager'****])**\n        **})**\n      **)**\n      **.****subscribe****()**\n    } \n    ```", "```js\n    **src/app/user/logout/logout.****component****.****ts**\n    import { Component, OnInit } from '@angular/core' \n    import { Router } from '@angular/router'\n    import { AuthService } from '../../auth/auth.service'\n    @Component({\n      selector: 'app-logout', \n      template: `<p>Logging out...</p>`,\n    })\n    export class LogoutComponent implements OnInit { \n      constructor(private router: Router, private authService: AuthService) {}\n      ngOnInit() { \n        this.authService.logout(true)\n        this.router.navigate(['/'])\n      }\n    } \n    ```", "```js\n    **src/app/auth/auth.****service****.****ts**\n    ...\n      protected hasExpiredToken(): boolean {\n        const jwt = this.getToken()\n        if (jwt) {\n          const payload = decode(jwt) as any\n          return Date.now() >= payload.exp * 1000\n        }\n        return true\n      }\n      protected getAuthStatusFromToken(): IAuthStatus {\n        return this.transformJwtToken(decode(this.getToken()))\n      } \n    ```", "```js\n    **src/app/auth/auth.****service****.****ts**\n    ...\n    constructor() {\n      super()\n      if (this.hasExpiredToken()) {\n        this.logout(true)\n      } else {\n        this.authStatus$.next(this.getAuthStatusFromToken())\n      }\n    } \n    ```", "```js\n    **src/app/auth/auth.****service****.****ts**\n    ...\n    export abstract class AuthService implements IAuthService {\n      **private** **getAndUpdateUserIfAuthenticated =** **pipe****(**\n        **filter****(****(****status****:** **IAuthStatus****) =>** **status.****isAuthenticated****),**\n        **flatMap****(****() =>****this****.****getCurrentUser****()),**\n        **map****(****(****user****:** **IUser****) =>****this****.****currentUser$****.****next****(user)),**\n        **catchError****(transformError)**\n      **)**\n      ...\n      login(email: string, password: string): Observable<void> {\n        this.clearToken()\n        const loginResponse$ = this.authProvider(email, password)\n          .pipe(\n            map((value) => {\n              this.setToken(value.accessToken)\n              const token = decode(value.accessToken)\n              return this.transformJwtToken(token)\n            }),\n            tap((status) => this.authStatus$.next(status)),\n            **this****.****getAndUpdateUserIfAuthenticated**\n          )\n        ...\n      }\n      ...\n    } \n    ```", "```js\n    **src/app/auth/auth.****service****.****ts**\n    ...\n      protected readonly resumeCurrentUser$ = this.authStatus$.pipe(\n        this.getAndUpdateUserIfAuthenticated \n      ) \n    ```", "```js\n    **src/app/auth/auth.****service****.****ts**\n    ...\n    constructor() {\n      if (this.hasExpiredToken()) {\n        this.logout(true)\n      } else {\n        this.authStatus$.next(this.getAuthStatusFromToken())\n        // To load user on browser refresh,\n        // resume pipeline must activate on the next cycle\n        // Which allows for all services to constructed properly\n        setTimeout(() => this.resumeCurrentUser$.subscribe(), 0)\n      }\n    } \n    ```", "```js\n    **src/app/auth/auth.****http****.****interceptor****.****ts**\n    import { HttpHandlerFn, HttpRequest } from '@angular/common/http'\n    import { inject } from '@angular/core'\n    import { Router } from '@angular/router'\n    import { throwError } from 'rxjs'\n    import { catchError } from 'rxjs/operators'\n    import { environment } from 'src/environments/environment'\n    import { UiService } from '../common/ui.service'\n    import { AuthService } from './auth.service'\n    export function AuthHttpInterceptor(\n      req: HttpRequest<unknown>, next: HttpHandlerFn\n    ) {\n      const authService = inject(AuthService)\n      const router = inject(Router)\n      const uiService = inject(UiService)\n      const jwt = authService.getToken()\n      const baseUrl = environment.baseUrl\n      if (req.url.startsWith(baseUrl)) {\n        const authRequest = req.clone({\n          setHeaders: {\n            authorization: `Bearer ${jwt}`\n          }\n        })\n        return next(authRequest).pipe(\n          catchError((err) => {\n            uiService.showToast(err.error.message)\n            if (err.status === 401) {\n              router.navigate(['/login'], {\n                queryParams: {\n                  redirectUrl: router.routerState.snapshot.url\n                },\n              })\n            }\n            return throwError(() => err)\n          })\n        )\n      } else {\n        return next(req)\n      }\n    } \n    ```", "```js\n    **src/app/app.****config****.****ts**\n    export const appConfig: ApplicationConfig = {\n      providers: [\n        provideAnimations(),\n        provideHttpClient(\n          **withInterceptors****([****AuthHttpInterceptor****])**\n        ),\n        ... \n    ```"]