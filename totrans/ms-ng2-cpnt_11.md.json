["```js\n    describe('Buying items in the shop', () => {\n      it('should increase the basket count', () => {\n        // Given\n        const shop = new Shop();\n        // When\n        shop.buy('Toothpaste');\n        shop.buy('Shampoo');\n        // Then\n        expect(shop.basket.length).toBe(2);\n        expect(shop.basket).toContain('Toothpaste');\n        expect(shop.basket).toContain('Shampoo');\n      });\n    });\n    ```", "```js\n...\n<script src=\"img/es6-shim.min.js\"></script>\n<script src=\"img/angular2-polyfills.js\"></script>\n<script src=\"img/system.js\"></script>\n<script src=\"img/config.js\"></script>\n<script src=\"img/strong>\"></script>\n<script src=\"img/strong>\"></script>\n<script src=\"img/strong>\"></script>\n```", "```js\n<script>\n window._jasmineOnLoad = window.onload;\n window.onload = null;\n return System.import('./all.spec')\n .then(window._jasmineOnLoad)\n .catch(console.error.bind(console));\n  ...\n</script>\n```", "```js\nimport {describe, expect, it,} from '@angular/core/testing';\nimport {AutoComplete} from './auto-complete';\n\ndescribe('AutoComplete', () => {\n it('should filter items correctly', () => {\n // Given\n    const autoComplete = new AutoComplete();\n    autoComplete.items = ['One', 'two', 'three'];\n // When\n    autoComplete.filterItems('o');\n // Then\n    expect(autoComplete.filteredItems).toEqual(['One', 'two']);\n });\n});\n\n```", "```js\nimport './lib/ui/auto-complete/auto-complete.spec';\n```", "```js\nclass Calculator {\n  multiply(a, b) {\n    return a * b;\n  }\n\n  pythagorean(a, b) {\n    return Math.sqrt(this.multiply(a, a) + this.multiply(b, b));\n  }\n}\n```", "```js\na² + b² = c²\n```", "```js\ndescribe('Calculator pythagorean function', () => {\n  it('should call multiply function correctly', () => {\n    // Given\n    const calc = new Calculator();\n spyOn(calc, 'multiply').and.callThrough();\n    // When\n    const result = calc.pythagorean(6, 8);\n    // Then\n    expect(result).toBe(10);\n expect(calc.mul).toHaveBeenCalled();\n expect(calc.mul.calls.count()).toBe(2);\n expect(calc.mul.calls.argsFor(0)).toEqual([6, 6]);\n expect(calc.mul.calls.argsFor(1)).toEqual([8, 8]);\n  });\n});\n```", "```js\n  ...\n  it('should emit selectedItemChange event with null on empty content being saved', () => {\n    // Given\n    const autoComplete = new AutoComplete();\n    autoComplete.items = ['one', 'two', 'three'];\n    autoComplete.selectedItem = 'three';\n spyOn(autoComplete.selectedItemChange, 'next');\n spyOn(autoComplete.itemCreated, 'next');\n\n    // When\n autoComplete.onEditSaved('');\n\n    // Then\n expect(autoComplete.selectedItemChange.next).toHaveBeenCalledWith(null);\n expect(autoComplete.itemCreated.next).not.toHaveBeenCalled();\n  });\n```", "```js\n  it('should emit an itemCreated event on content being saved which does not match an existing item', () => {\n    // Given\n    const autoComplete = new AutoComplete();\n    autoComplete.items = ['one', 'two', 'three'];\n    autoComplete.selectedItem = 'three';\n spyOn(autoComplete.selectedItemChange, 'next');\n spyOn(autoComplete.itemCreated, 'next');\n\n    // When\n autoComplete.onEditSaved('four');\n\n    // Then\n expect(autoComplete.selectedItemChange.next).not.toHaveBeenCalled();\n expect(autoComplete.itemCreated.next).toHaveBeenCalledWith('four');\n  });\n```", "```js\nimport {setBaseTestProviders} from '@angular/core/testing';\nimport {TEST_BROWSER_DYNAMIC_PLATFORM_PROVIDERS, TEST_BROWSER_DYNAMIC_APPLICATION_PROVIDERS} from '@angular/platform-browser-dynamic/testing';\n\nsetBaseTestProviders(TEST_BROWSER_PLATFORM_PROVIDERS, TEST_BROWSER_APPLICATION_PROVIDERS);\n\nimport './lib/ui/auto-complete/auto-complete.spec';\nimport './lib/plugin/plugin.spec';\n```", "```js\nimport {describe, expect, it, inject} from '@angular/core/testing';\nimport {DOCUMENT} from '@angular/platform-browser';\n\ndescribe('Application initialized with test providers', () => {\n  it('should inject document', inject([DOCUMENT], (document) => {\n expect(document).toBe(window.document);\n }));\n});\n```", "```js\ndescribe('Async test', () => {\n  it('should be completed by calling done', (done) => {\n    setTimeout(() => {\n      expect(true).toBe(true);\n done();\n    }, 2000);\n  });\n});\n```", "```js\nimport {describe, expect, it, inject, async} from '@angular/core/testing';\nimport {DOCUMENT} from '@angular/platform-browser';\n\ndescribe('Application initialized with test providers', () => {\n  it('should inject document', async(inject([DOCUMENT], (document) => {\n\n      setTimeout(() => {\n        expect(document).toBe(window.document);\n      }, 2000);\n }))\n  );\n});\n```", "```js\n@Component({\n  selector: 'dummy-component',\n template: 'dummy'\n})\nclass DummyComponent {}\n\ndescribe('Creating a component with TestComponentBuilder', () => {\n  it('should render its view correctly', async(inject([TestComponentBuilder], (tbc) => {\n      tbc.createAsync(DummyComponent).then((fixture) => {\n        // When\n fixture.detectChanges();\n        // Then\n expect(fixture.nativeElement.textContent).toBe('dummy');\n });\n }))\n  );\n});\n```", "```js\n@Component({\n  selector: 'child',\n template:'<ul><li *ngFor=\"let n of numbers\">Item: {{n}}</li></ul>'\n})\nclass ChildComponent {\n @Input() numbers;\n}\n\n@Component({\n  selector: 'parent',\n template: '<child [numbers]=\"numbers\"></child>',\n directives: [ChildComponent]\n})\nclass ParentComponent {\n numbers = [1, 2, 3];\n}\n```", "```js\n@Component({\n selector: 'child',\n template: '{{numbers.toString()}}'\n})\nclass MockChildComponent {\n @Input() numbers;\n}\n```", "```js\ndescribe('ParentComponent', () => {\n  it('should pass data to child correctly', async(inject([TestComponentBuilder], (tbc) => {\n      tbc\n .overrideDirective(ParentComponent, ChildComponent, MockChildComponent)\n       .createAsync(ParentComponent).then((fixture) => {\n         fixture.detectChanges();\n expect(fixture.nativeElement.textContent).toBe('1,2,3');\n       });\n    }))\n  );\n});\n```", "```js\n@Injectable()\nclass NumbersService {\n numbers = [1, 2, 3, 4, 5, 6];\n}\n\n@Component({\n  selector: 'numbers-component',\n template: '{{numbers.toString()}}',\n providers: [NumbersService]\n})\nclass NumbersComponent {\n constructor(@Inject(NumbersService) numbersService) {\n this.numbers = numbersService.numbers;\n }\n}\n```", "```js\n@Injectable()\nclass MockNumbersService extends NumbersService {\n numbers = [1, 2, 3];\n}\n```", "```js\ndescribe('NumbersComponent', () => {\n  it('should render numbers correctly', async(inject([TestComponentBuilder], (tbc) => {\n      tbc\n .overrideProviders(NumbersComponent, [\n provide(NumbersService, {\n useClass: MockNumbersService\n })\n ])\n       .createAsync(NumbersComponent).then((fixture) => {\n         fixture.detectChanges();\n expect(fixture.nativeElement.textContent).toBe('1,2,3');\n       });\n    }))\n  );\n});\n```", "```js\n@Component({\n selector: 'ngc-editor',\n template: '{{content}}'\n})\nexport class MockEditor {\n @Input() content;\n}\n```", "```js\nit('should initialize editor with selected item', async(inject([TestComponentBuilder], (tcb) => {\n    tcb\n .overrideDirective(AutoComplete, Editor, MockEditor)\n .createAsync(AutoComplete).then((fixture) => {\n        // Given\n        fixture.componentInstance.items = ['one', 'two', 'three'];\n        fixture.componentInstance.selectedItem = 'two';\n        // When\n        fixture.detectChanges();\n        // Then\n expect(fixture.nativeElement.textContent.trim())\n .toBe('two');\n });\n  })));\n\n```", "```js\nexpect(fixture.nativeElement.querySelector('ngc-editor').textContent.trim()).toBe('two');\n```", "```js\n...\nimport {By} from '@angular/platform-browser';\n...\n  it('should initialize editor with selected item', async(inject([TestComponentBuilder], (tcb) => {\n    tcb\n      .overrideDirective(AutoComplete, Editor, MockEditor)\n      .createAsync(AutoComplete).then((fixture) => {\n        ...\n        expect(fixture.debugElement.query(By.directive(MockEditor)).nativeElement.textContent.trim()).toBe('two');\n      });\n  })));\n```", "```js\nit('should emit selectedItemChange on click in callout', async(inject([TestComponentBuilder], (tcb) => {\n    tcb\n      .overrideDirective(AutoComplete, Editor, MockEditor)\n      .createAsync(AutoComplete).then((fixture) => {\n spyOn(fixture.componentInstance.selectedItemChange, 'next');\n        fixture.componentInstance.items = ['one', 'two', 'three'];\n        fixture.componentInstance.selectedItem = 'one';\n fixture.componentInstance.onEditModeChange(true);\n fixture.componentInstance.onEditableInput('');\n fixture.detectChanges();\n fixture.debugElement\n .queryAll(By.css('.auto-complete__item'))\n .find((item) => item.nativeElement.textContent.trim() === 'two')\n .triggerEventHandler('click');\n        expect(fixture.componentInstance.selectedItemChange.next).toHaveBeenCalledWith('two');\n    });\n  })));\n```", "```js\n@Component({\n  selector: 'dummy-plugin-component-1',\n  template: 'dummy1'\n})\nexport class DummyPluginComponent1 {}\n\n@Component({\n  selector: 'dummy-plugin-component-2',\n  template: 'dummy2'\n})\nexport class DummyPluginComponent2 {}\n\n@Component({\n  selector: 'dummy-application',\n  template: 'dummy-slot:<ngc-plugin-slot name=\"dummy-slot\"></ngc-plugin-slot>',\n  directives: [PluginSlot]\n})\nexport class DummyApplication {}\n```", "```js\n@Injectable()\nexport class MockPluginService extends PluginService {\n constructor() {\n super();\n this.change = {\n subscribe() {}\n };\n }\n\n loadPlugins() {}\n}\n```", "```js\ndescribe('PluginSlot', () => {\n beforeEachProviders(() => [\n provide(PluginService, {\n useClass: MockPluginService\n })\n ]);\n\n  it('should create dummy component into designated slot',async(inject([TestComponentBuilder, PluginService], (tcb, pluginService) => {\n      tcb.createAsync(DummyApplication).then((fixture) => {\n ...\n        });\n}));\n```", "```js\n@PluginConfig({\n  name: 'dummy-plugin',\n  description: 'Dummy Plugin',\n placements: [\n new PluginPlacement({slot: 'dummy-slot', priority: 1, component: DummyPluginComponent1})\n ]\n})\nclass DummyPlugin {}\n```", "```js\npluginService.plugins = [{\n  type: DummyPlugin,\n  config: DummyPlugin._pluginConfig,\n  instance: new DummyPlugin()\n}];\n```", "```js\nconst pluginSlot = fixture.debugElement\n .query(By.directive(PluginSlot))\n  .injector\n  .get(PluginSlot);\n```", "```js\npluginSlot.initialize().then(() => {\n  fixture.detectChanges();\n  expect(fixture.nativeElement.textContent).toBe('dummy-slot:dummy1');\n});\n```", "```js\n  it('should create two dummy components of same plugin into different slots',async(inject([TestComponentBuilder, PluginService], (tcb, pluginService) => {\n const template = 'dummy-slot1:<ngc-plugin-slot name=\"dummy-slot1\"></ngc-plugin-slot>dummy-slot2:<ngc-plugin-slot name=\"dummy-slot2\"></ngc-plugin-slot>';\n\n      tcb.overrideTemplate(DummyApplication, template)\n        .createAsync(DummyApplication).then((fixture) => {\n ...\n        });\n    }))\n  );\n```", "```js\n@PluginConfig({\n  name: 'dummy-plugin',\n  description: 'Dummy Plugin',\n  placements: [\n new PluginPlacement({slot: 'dummy-slot', priority: 1, component: DummyPluginComponent1}),\n new PluginPlacement({slot: 'dummy-slot', priority: 2, component: DummyPluginComponent2})\n  ]\n})\nclass DummyPlugin {}\n```", "```js\npluginService.plugins = [{\n  type: DummyPlugin,\n  config: DummyPlugin._pluginConfig,\n  instance: new DummyPlugin()\n}];\n```", "```js\nconst pluginSlots = fixture.debugElement\n .queryAll(By.directive(PluginSlot))\n .map((debugElement) => debugElement.injector.get(PluginSlot));\n\n```", "```js\nPromise.all(\n pluginSlots.map((pluginSlot) => pluginSlot.initialize())\n).then(() => {\n  fixture.detectChanges();\n expect(fixture.nativeElement.textContent).toBe('dummy-slot1:dummy1dummy-slot2:dumm\ny2');\n});\n```"]