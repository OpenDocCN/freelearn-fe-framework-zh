- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enhancing a Recipe-Sharing Site While Optimizing SEO Using Nuxt 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ll enrich a recipe-sharing site with Nuxt 3, focusing on
    SEO (Search Engine Optimization) for better online visibility. We’ll start with
    Nuxt SEO, a powerful collection of handcrafted Nuxt modules designed to enhance
    a website’s appeal to both search engines and audiences. It simplifies complex
    SEO tasks, ensuring our recipe-sharing site ranks high in search results.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we’ll learn about metadata, such as **Open Graph** (**OG**) tags, and
    how to customize them for each page. We will also examine the crucial role of
    schema markup. This structured data approach helps clarify our content for search
    engines, aiding in accurate and enhanced search result presentation.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll also introduce a unique feature – creating a custom `og:image` for each
    recipe using a Nuxt component, making each shared recipe visually distinctive.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we’ll cover dynamically generating XML site maps, which guide
    search engines efficiently through our site’s content.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining metadata for each page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing structured data for improved search engine rankings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing recipe images to load pages faster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom `og:image` for the recipe page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating dynamic site maps for the recipe-sharing site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code files for this chapter can be found at [https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter06](https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter06).
  prefs: []
  type: TYPE_NORMAL
- en: The CiA video for this chapter can be found on [https://packt.link/YQ8As](https://packt.link/YQ8As)
  prefs: []
  type: TYPE_NORMAL
- en: Essential background – Understanding Search Engine Optimization (SEO)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we prepare to start enhancing our recipe-sharing site with SEO using Nuxt
    3, it’s crucial to first get acquainted with the key concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SEO basics**: **SEO** involves techniques to improve a website’s visibility
    on search engines. It’s about making your site easily understandable to search
    engines, which helps in making it rank higher in search results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The OG protocol**: This protocol enhances the way web content is represented
    on social media platforms. By using specific tags, you can control how your content
    appears when shared.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Schema markup**: Schema markup is like a detailed label for your website’s
    content, helping search engines understand what your site is about. For instance,
    using recipe schema on a recipe-sharing site can dramatically improve its appearance
    in search results, displaying rich snippets such as ingredients and cooking time
    directly in the search listings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Site map generation**: A site map is a roadmap of your website that guides
    search engines to all your important pages. In just a couple of lines of code,
    Nuxt 3 can generate dynamic site maps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This background prepares you to effectively utilize Nuxt 3’s SEO capabilities
    on our recipe-sharing website. Armed with this knowledge, we’re ready to use Nuxt
    3’s SEO tools effectively. Let’s proceed to the practical application and exploration
    of our repository.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s take a moment to familiarize ourselves with the `chapter06/starter` folder
    in the root folder of our repository. This folder is designed to give you a head
    start, containing pre-defined components, basic page structures, data, and TypeScript
    interfaces. These elements are crafted to provide a solid foundation for our recipe-sharing
    site, allowing us to focus primarily on enhancing its SEO.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we won’t delve into every detail of these resources here, as our primary
    focus is to learn about the SEO concepts and practices needed to optimize our
    recipe-sharing site effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Defining metadata for each page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s start by setting up our new website as we’ve done in previous chapters.
    Add the Tailwind CSS and Google Fonts modules to the website to enhance styling.
    Once you’ve completed these steps, run the website and take a moment to ensure
    that everything works fine.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the project structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To set up the project, we’ll be using predefined files and components from
    the repository `starter` folder. Clone the repository, and then copy the entire
    contents of the `starter` folder into our new project’s root directory. If there
    are any existing files in your project that match the names of those in the `starter`
    folder, overwrite them with the `starter` files. Here’s a breakdown of the starter
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pages/index.vue`: This file sets up the homepage layout, including sections
    such as hero images and featured recipes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`components/RecipeCard.vue` and `components/RecipeInfo.vue`: These Vue components
    are used to display recipes and their details as cards on the home page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data/recipes.ts`: Contains the data structure for the recipes, which will
    be used to populate the content on your site'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`types/index.ts`: Provides TypeScript definitions for the data structures used
    in the project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pages/recipe/[slug].vue`: A dynamic route that creates individual pages for
    each recipe, based on its slug'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By copying the `starter` folder’s contents into your project, you can quickly
    set up the foundational elements of your recipe-sharing site and focus more on
    the SEO aspects, as outlined in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start your project to test the progress. You should see the home page of your
    recipe-sharing site, similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1: The home page](img/B19760_06_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.1: The home page'
  prefs: []
  type: TYPE_NORMAL
- en: Click on any recipe listed on the home page. This should take you to the detailed
    page of the selected recipe, thanks to the dynamic routing implemented in Nuxt.
    The detailed page will show more information about the recipe, as defined in `pages/recipe/[slug].vue`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2: The recipe details page](img/B19760_06_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: The recipe details page'
  prefs: []
  type: TYPE_NORMAL
- en: Having tested our project and seen our home page and recipe details come to
    life, let’s turn our attention to SEO.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up site configuration with nuxt SEO
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nuxt SEO is a powerful module that enhances your Nuxt site’s SEO capabilities.
    It simplifies the configuration process and ensures compatibility across various
    SEO modules. The module offers streamlined management of meta tags and best practices
    for metadata, including automatically generated canonical URLs and open-graph
    meta tags. This setup is essential for optimizing your site’s search engine presence
    and user engagement.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the module to your project run, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In your `nuxt.config.js`, add `@nuxtjs/seo` to the modules array, and then
    add a `site` property. Here’s an example configuration based on your setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you open the browser Devtools, you’ll notice a couple of automatically generated
    tags in the document’s `head` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UTF-8`: Ensures your website uses `UTF-8` character encoding for universal
    character representation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Viewport`: Sets up the viewport to control how your site displays on different
    devices, which is crucial for responsive design.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Favicon`: Utilizes `favicon.ico` from your `public` folder to display your
    site’s icon in browser tabs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Robots`: Instructs search engine robots on how to index your site, impacting
    SEO and site visibility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`og:type`: Defines the type of content for OG. The default value is website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url canonical`: Matches the `site.url` configuration. Helps prevent duplicate
    content issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`og:canonical`: The OG version of the canonical URL, which is important for
    social media platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title / og:title / og:site_name`: Sets the page title to `site.name` and is
    used in browser tabs, search results, and social media.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meta description / og:description`: Provides a brief description of your site.
    Used in search engine listings and social shares.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`og:locale`: Sets the locale to `site.defaultLocale`, indicating the language
    and regional settings for OG.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Imagine enhancing your website’s SEO with just four lines of code! Moreover,
    `nuxt/seo` features an enhanced page title functionality for internal pages. If
    you don’t set a title for a page, the module automatically generates one from
    the last slug segment.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we open our steak recipe page in the browser, the page title
    automatically becomes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3: The recipe details page title](img/B19760_06_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: The recipe details page title'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the URL is http://localhost:3000/recipe/steak-with-vegetables and
    the title is a combination of the capitalized version of the last slug and the
    main site title. Isn’t this awesome? This feature is especially handy for managing
    numerous pages, ensuring that each one has a descriptive, SEO-friendly title without
    manual input for each page. Now, let’s shift our focus to overriding metadata
    in custom pages.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding metadata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you inspect the meta description of the recipe details page, you’ll notice
    that it’s similar to the home page description. Ideally, we should tailor this
    to match the content of each specific page. To achieve this customization, we
    can utilize the `useSeoMeta` composable.
  prefs: []
  type: TYPE_NORMAL
- en: '`useSeoMeta` allows you to define your site’s SEO meta tags as a flat object
    with full TypeScript support. It helps you avoid common errors and ensures your
    meta tags are accurate and effective.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s apply this to our `pages/recipe/[slug].vue` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After refreshing the page, the updated description should appear in the head
    tag, reflecting the specific content of each recipe page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4: Overriding the meta description](img/B19760_06_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.4: Overriding the meta description'
  prefs: []
  type: TYPE_NORMAL
- en: With our metadata now dynamically ready and customized for each recipe page,
    let’s progress to learn about the structured data from [Schema.org](http://Schema.org)
    in order to further boost our site’s search engine rankings.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing structured data for improved search engine rankings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Schema.org](http://Schema.org) plays a pivotal role in enhancing your site’s
    visibility to search engines. It provides a shared vocabulary for structured data
    on the internet, allowing search engines to better understand and display your
    content. To check the pre-defined structured data for our website, click on the
    `nuxt-devtools` icon on the website, press *Ctrl* + *K*, or *Command* + *K*, and
    then type the word `Schema`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5: Nuxt Devtools](img/B19760_06_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.5: Nuxt Devtools'
  prefs: []
  type: TYPE_NORMAL
- en: 'It should reveal two key objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '**WebSite Object**: Represents the overall website, providing search engines
    with high-level information such as the site’s nature, its focus, and general
    details'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WebPage Object**: Describes individual pages on your site, offering more
    specific data such as the content of a particular page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These objects are automatically generated from the site configuration, leveraging
    the power of the `nuxt/seo` module. Taking our SEO strategy a step further, let’s
    learn how to create a recipe node.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a recipe node
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the context of SEO and structured data, a “node” refers to a set of information
    that represents a specific type of content on a web page, structured in a way
    that search engines can easily understand and index. In our case, a recipe node
    is a collection of structured data that specifically describes a recipe, including
    elements such as ingredients, cooking time, and nutritional information.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open Google and search for the term `fettuccine alfredo recipe`, you’ll
    get a similar result to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6: The recipe node in the search result](img/B19760_06_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.6: The recipe node in the search result'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the result includes a list of recipes with images, preparation times,
    ingredients, ratings, and so on. This card in this search result refers to a recipe
    node.
  prefs: []
  type: TYPE_NORMAL
- en: The `nuxt/seo` module supports the creation of various types of nodes, such
    as `defineRecipe` for recipes. You can learn more about the recipe node at https://unhead.unjs.io/schema-org/schema/recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement the recipe node, navigate to `pages/recipe/[slug].vue` and add
    the following to the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a breakdown of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cookTime` and `prepTime`: Specify the cooking and preparation times, respectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nutrition`: Details the nutritional information of the recipe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recipeYield`: Indicates the quantity or servings the recipe makes, such as
    “four servings” or “three cups.”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recipeCategory` and `recipeCuisine`: Classify the recipe into a specific category
    and cuisine, respectively, helping users find relevant dishes based on their preferences.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aggregateRating`: Shows the average rating value of the recipe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recipeIngredient`: An array of a string that lists the ingredients required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recipeInstructions`: An array where each element is an object detailing a
    specific step of the recipe. Each object can contain the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: The title or a brief description of the step (optional)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text`: The detailed instructions for that step'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image`: An optional image URL for the step, providing a visual guide'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After implementing the `defineRecipe` function in your `pages/recipe/[slug].vue`
    file, you can verify its effect by revisiting the Nuxt development tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your Nuxt project in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for the `Schema` section within the Nuxt Devtools.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, you should now see a new object labeled `Recipe`, representing the structured
    data for the specific recipe page you are viewing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This `Recipe` object will contain all the structured data you’ve defined using
    `defineRecipe`, such as the recipe’s name, description, cooking and preparation
    times, ingredients, and instructions. This visualization in the Nuxt Devtools
    is a great way to confirm that your structured data is correctly implemented and
    recognized by Nuxt. You can also validate the object using the [shcema.org](http://shcema.org)
    validator: https://validator.schema.org/.'
  prefs: []
  type: TYPE_NORMAL
- en: With our recipe node successfully implemented and visible in the Nuxt Devtools,
    let’s now turn our attention to optimizing recipe images for faster page-loading
    speeds.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing recipe images to load pages faster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To optimize recipe images and enhance page-loading speed, we will focus on the
    importance of image optimization in web performance. Large, unoptimized images
    can significantly slow down page load times, negatively impacting the user experience
    and SEO.
  prefs: []
  type: TYPE_NORMAL
- en: To optimize images in Nuxt, we can use `nuxt-img`, a component from Nuxt Image,
    designed to optimize and transform images efficiently. It provides features such
    as on-the-fly image resizing, modern format conversion, and lazy loading, a placeholder
    while the image is loading, all crucial for speed and performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implementing `nuxt-img` in our project is a key step toward optimizing our
    images. Let’s start by installing the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we add it to the `nuxt.config.ts` modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we go to the `pages/recipe/[slug].vue` file. There, replace the standard
    `<img>` tags with the `<nuxt-img>` tag to take advantage of Nuxt Image’s features:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Before implementing this change, let’s assess the current image size. Open
    your browser’s developer tools, navigate to the image tag, and open the image
    source in a new tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7: The image size before optimization](img/B19760_06_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.7: The image size before optimization'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you download the image, you might find it’s sizeable, perhaps around 4 MB,
    which is quite large for a web image. Now, let’s add the `format="webp"` property
    to the `nuxt-img` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: After making this change, redo the test. You’ll likely notice that the image
    size is now significantly reduced, by around 400 KB, which means we’ve achieved
    a 90% reduction in size while maintaining quality.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8: The Nuxt image after optimization](img/B19760_06_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.8: The Nuxt image after optimization'
  prefs: []
  type: TYPE_NORMAL
- en: Another important feature in the Nuxt image is `placeholder`. This significantly
    enhances the user experience by displaying a blurry placeholder image while the
    full-size image loads. This approach is much more visually appealing compared
    to the traditional method of loading an image line by line.
  prefs: []
  type: TYPE_NORMAL
- en: 'To utilize this feature, simply add the `placeholder` prop to the `nuxt-img`
    component – for instance, in the `pages/recipe/[slug].vue` image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: After adding this prop, when you visit the page, you’ll initially see a blurred
    version of the image, which gradually sharpens into the full image, resulting
    in a smoother visual experience.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9: The Nuxt image placeholder](img/B19760_06_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.9: The Nuxt image placeholder'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s discuss optimizing images further by specifying their width and height,
    which is especially useful when displaying images in smaller sizes.
  prefs: []
  type: TYPE_NORMAL
- en: '`nuxt-img` allows you to define the width and height attributes, ensuring that
    images are served in the most appropriate size for their intended display area.
    This will create a smaller image based on the specified size, reducing unnecessary
    data transfer and improving image optimization. For example, in the `components/RecipeCard.vue`
    file, let’s replace the `img` tag with `nuxt-img` and add webp format, placeholder,
    and a height of `250px`, as we specified in the TailwindCSS classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: By setting the height to `250` px, `nuxt-img` resizes the image to these dimensions.
    This resize operation, performed under the hood by Nuxt Image, dramatically reduces
    the file size.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the original image size, which was around 4 MB, is first reduced
    to about 400 KB by converting to WebP. Then, with the specified height, it’s further
    reduced to an astonishingly small size of approximately 18 KB! This significant
    reduction demonstrates the effectiveness of specifying dimensions in combination
    with the WebP format, showcasing how `nuxt-img` optimizes images to enhance the
    page-loading speed while maintaining image quality.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10: The Nuxt image after specifying a size](img/B19760_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.10: The Nuxt image after specifying a size'
  prefs: []
  type: TYPE_NORMAL
- en: Having optimized our recipe images, we now turn to a creative approach – using
    a custom Nuxt component to automatically generate unique OG images for each recipe
    page, improving their visual impact on social media.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom og:image for the recipe page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OG images (`og:image`) play a crucial role in how content is visually presented
    when shared on social media. For instance, when someone shares a recipe link from
    your site, `og:image` is what typically appears as the visual highlight of the
    post, drawing attention and potentially driving more traffic to your site.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `useSeoMeta` composable from Nuxt allows you to append an `og:image` link
    to each page, as explained in more detail in the Nuxt documentation: [https://nuxt.com/docs/api/composables/use-seo-meta#usage](https://nuxt.com/docs/api/composables/use-seo-meta#usage).'
  prefs: []
  type: TYPE_NORMAL
- en: However, in this section, we’re going to explore a more dynamic and creative
    solution. Instead of manually designing an image for each recipe, we’ll create
    a Nuxt component that automatically generates an OG image. This feature from the
    `nuxt/seo` module is useful to dynamically convert our component into an `og:image`,
    saving much time and effort in creating custom graphic design.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll start by creating a new component in `components/OgImage/CustomTemplate.vue`
    inside the template, by adding the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The template creates a recipe card. It features a combination of the site’s
    logo, the recipe’s title and description, the website URL, and the recipe’s image.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same component, add this script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<script>` section, we’re utilizing Nuxt composables to dynamically
    set up the component’s properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`useSiteConfig`: This composable from the `nuxt/seo` module retrieves the site
    configuration defined in `nuxt.config.ts`, allowing us to access global site settings
    such as the URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`withDefaults`: This function from Vue is used to assign default values to
    the component’s props. Specifically, it sets a default image (`''/images/hero.png''`)
    for scenarios where a specific recipe image isn’t provided, such as when creating
    an OG image for the home page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To use our custom component in the home page, we first need to modify the script
    in our `pages/index.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: By doing this, we set a custom title for the OG image. Since we haven’t specified
    a description, the default site description, defined globally in the `nuxt.config.ts`
    `site` object, will be used. Similarly, in the absence of a specified recipe image,
    our default hero image is automatically selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'To debug and view the results of these changes, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to http://localhost:3000/.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Nuxt Devtools icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the search bar (using *Ctrl* + *K* or *Command* + *K* on a Mac) and search
    for `og Image`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now see a preview of the OG image, which will look something like
    *Figure 6**.11*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.11: The Nuxt Devtools – og:image debugging](img/B19760_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.11: The Nuxt Devtools – og:image debugging'
  prefs: []
  type: TYPE_NORMAL
- en: This process confirms that our custom OG image was successfully implemented
    for the home page. Next, let’s apply a similar approach to create one for each
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `/pages/recipe/[slug].vue` file and append this to the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This code dynamically sets the title, description, and image for the OG image
    based on the specific recipe details. When you visit a recipe page and check the
    **OG Image** section in the Nuxt Devtools, you’ll see the custom image reflecting
    the recipe’s unique attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12: The recipe’s OG image](img/B19760_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.12: The recipe’s OG image'
  prefs: []
  type: TYPE_NORMAL
- en: Having personalized our OG images for each recipe, let’s now move on to our
    final task – generating dynamic site maps for the recipe-sharing site.
  prefs: []
  type: TYPE_NORMAL
- en: Generating dynamic site maps for the recipe-sharing site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we’ve customized our OG images for each recipe, our next and final step is
    to generate dynamic site maps for our recipe-sharing site. Site maps are crucial,
    as they guide search engines in discovering and indexing all the pages on your
    site, thereby enhancing SEO.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the `nuxt/seo` module automatically creates site maps for static pages
    such as the Homepage and About page, it doesn’t automatically detect dynamic pages
    such as individual recipes. To see the current site map, visit [http://localhost:3000/sitemap.xml](http://localhost:3000/sitemap.xml).
    You’ll notice that it includes only static pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13: The default Sitemap.xml](img/B19760_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.13: The default Sitemap.xml'
  prefs: []
  type: TYPE_NORMAL
- en: However, our site also features dynamic recipe pages that are not automatically
    included in this site map. To remedy this, we need to provide `nuxt/seo` with
    a way to identify these dynamic pages. We’ll achieve this by setting up an API
    endpoint that fetches a list of recipes. This list can then be fed into `nuxt/seo`
    to dynamically generate a comprehensive site map that includes both static and
    dynamic pages, ensuring complete visibility of our site to search engines.
  prefs: []
  type: TYPE_NORMAL
- en: In a typical project, the backend’s responsibility includes creating an external
    API to list dynamic pages. However, Nuxt offers a more integrated approach – using
    its `server` directory, we can create an internal API within our project. This
    method is particularly beneficial for scenarios such as ours, where we need to
    generate a dynamic site map.
  prefs: []
  type: TYPE_NORMAL
- en: The Nuxt server directory is a powerful feature that enables us to write server-side
    logic directly in our Nuxt application. It’s an ideal solution for internal APIs
    and server-side functionalities without needing a separate backend service.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this in our recipe-sharing site, we’ll create a file named `server/api/__sitemap__/urls.ts`.
    In this file, we’ll define a site map handler using `defineSitemapEventHandler`,
    which will dynamically generate URLs from our recipe data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In Nuxt’s server directory, the `api` folder is specially designed to create
    APIs, with each file path corresponding to an API route. This feature allows for
    easy integration of server-side APIs directly within the Nuxt project. In our
    case, the `server/api/__sitemap__/urls.ts` file will automatically be converted
    into an accessible API route. To test and see the output of this newly created
    API, you can navigate to http://localhost:3000/api/__sitemap__/urls. When you
    visit this URL, it will display the list of URLs generated for our dynamic recipe
    pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14: Testing the internal API](img/B19760_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.14: Testing the internal API'
  prefs: []
  type: TYPE_NORMAL
- en: 'To include our dynamically generated recipe URLs in the site map, we’ll adjust
    `nuxt.config.ts` by adding the following object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This line directs Nuxt to use the URLs from our internal API as a source for
    the site map, combining them with all the static pages that are automatically
    generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, revisit [http://localhost:3000/sitemap.xml](http://localhost:3000/sitemap.xml)
    in your browser. You should see that all the recipes, along with the static pages,
    are now correctly listed in the site map, ensuring they are discoverable by search
    engines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15: The final sitemap.xml result](img/B19760_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.15: The final sitemap.xml result'
  prefs: []
  type: TYPE_NORMAL
- en: With this final step, we’ve successfully completed our project, enhancing our
    recipe-sharing site with optimized SEO, dynamic OG images, and an effective site
    map. This achievement marks a significant milestone in our journey to create real-world
    Nuxt projects!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19760_06.xhtml#_idTextAnchor124) focused on elevating a recipe-sharing
    site using Nuxt 3, with a focus on SEO. We kickstarted with `nuxt/seo` for site
    configuration, efficiently adding key SEO elements such as meta tags and OG protocols,
    enhancing the site’s search engine visibility.'
  prefs: []
  type: TYPE_NORMAL
- en: Our journey included implementing `defineRecipe` for structured data, improving
    the recipe visibility in search results. The use of `nuxt-img` was crucial in
    optimizing images, significantly enhancing page loading speed. A highlight was
    creating dynamic OG images via a custom Nuxt component, automatically generating
    unique images for each recipe shared and enriching our social media engagement.
  prefs: []
  type: TYPE_NORMAL
- en: We overcame the challenge of dynamic site map generation by utilizing Nuxt’s
    server directory to create an internal API, ensuring complete site visibility
    for search engines.
  prefs: []
  type: TYPE_NORMAL
- en: As we close this chapter, we gear up for [*Chapter 7*](B19760_07.xhtml#_idTextAnchor141),
    Building a Quiz Game Application to Learn and Testing. This next adventure will
    dive into creating an interactive quiz game app, which will introduce Nuxt 3’s
    testing capabilities to build a scalable, error-free application. We’ll explore
    unit testing, Pinia store testing, end-to-end testing, further enhancing our Nuxt
    3 development skills.
  prefs: []
  type: TYPE_NORMAL
- en: Practice questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How do you set up a canonical URL using `nuxt/seo`?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can you convert images to the WebP format in Nuxt 3?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain how to implement a blurred placeholder for images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you customize OG images for social media sharing?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you test the implementation of a recipe node in Nuxt Devtools?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the importance of specifying width and height in `nuxt-img`?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you include dynamic page URLs in a sitemap?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the importance of `useSeoMeta`?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you verify the contents of a dynamically generated site map?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you add structured data or a schema to a Nuxt page?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nuxt SEO: [https://nuxtseo.com/](https://nuxtseo.com/%20)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useSeoMeta`: [https://nuxt.com/docs/api/composables/use-seo-meta](https://nuxt.com/docs/api/composables/use-seo-meta%0D)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nuxt SEO supported nodes: [https://nuxtseo.com/schema-org/guides/nodes](https://nuxtseo.com/schema-org/guides/nodes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nuxt Image: [https://image.nuxt.com/](https://image.nuxt.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OG: [https://www.semrush.com/blog/open-graph](https://www.semrush.com/blog/open-graph)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dynamic site map URLs from an external API: [https://nuxtseo.com/sitemap/guides/dynamic-urls#dynamic-urls-from-an-external-api](https://nuxtseo.com/sitemap/guides/dynamic-urls#dynamic-urls-from-an-external-api)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
