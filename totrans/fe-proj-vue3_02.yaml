- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Working with Data
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与数据一起工作
- en: In the previous chapter, you learned about the essentials of the Vue API and
    how to work with single-file Vue components. Building on these foundations, this
    chapter further explores different approaches to controlling data within a Vue
    component.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了Vue API的基本知识以及如何与单文件Vue组件一起工作。在这些基础之上，本章进一步探讨了在Vue组件中控制数据的不同方法。
- en: You will learn how to utilize Vue’s powerful data reactivity and cache system
    through computed properties and how to set up advanced watchers to observe the
    component’s data changes. You will also learn how to utilize asynchronous methods
    to fetch and handle data for your Vue components. By the end of this chapter,
    you will be able to watch, manage, and manipulate data from various sources in
    your Vue.js components.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您将学习如何通过计算属性利用Vue强大的数据响应性和缓存系统，以及如何设置高级监视器来观察组件的数据变化。您还将学习如何利用异步方法获取和处理Vue组件的数据。到本章结束时，您将能够监视、管理和操作Vue.js组件中的各种来源的数据。
- en: 'So, in this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将涵盖以下主题：
- en: Understanding computed properties
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解计算属性
- en: Understanding computed setters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解计算属性设置器
- en: Exploring watchers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索监视器
- en: Watching nested properties
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监视嵌套属性
- en: Exploring async methods and data fetching
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索异步方法和数据获取
- en: Comparing methods, watchers, and computed props
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较方法、监视器和计算属性
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, you need to set up a basic Vue project following the instructions
    in [*Chapter 1*](B18645_01.xhtml#_idTextAnchor015), *Starting Your First Vue Project*.
    You can create a single file Vue component to easily practice the examples and
    concepts mentioned.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您需要按照[*第1章*](B18645_01.xhtml#_idTextAnchor015)中“开始您的第一个Vue项目”的说明设置一个基本的Vue项目。您可以通过创建一个单文件Vue组件来轻松练习提到的示例和概念。
- en: 'You can find this chapter’s source code here: [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处找到本章的源代码：[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02)。
- en: Understanding computed properties
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解计算属性
- en: '**Computed properties** are unique data types that will reactively update only
    when the source data used within the property is updated. By defining a data property
    as a computed property, we can perform the following activities:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**计算属性**是独特的数据类型，只有当用于属性的源数据更新时，它们才会响应式地更新。通过将数据属性定义为计算属性，我们可以执行以下操作：'
- en: Apply custom logic on the original data property to calculate the computed property’s
    value
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在原始数据属性上应用自定义逻辑以计算计算属性的值
- en: Track the changes of the original data property to calculate the updated value
    of the computed property
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪原始数据属性的更改以计算计算属性的更新值
- en: Reuse the computed property as local data anywhere within the Vue component
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Vue组件的任何地方重用计算属性作为本地数据
- en: By default, the Vue engine automatically caches the computed properties, making
    them more performant at updating the UI than using the property of the returned
    value of `data`, or using a Vue component’s method.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Vue引擎自动缓存计算属性，这使得它们在更新UI方面比使用`data`返回值的属性或使用Vue组件的方法更高效。
- en: 'The syntax of a computed property is like writing a component method *with
    a return value*, nested under the computed property of the Vue component:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 计算属性的语法类似于编写一个带有返回值的组件方法，嵌套在Vue组件的计算属性下：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Within the computed property’s logic, you can access any component’s data property,
    method, or other computed property using the `this` instance, which is the reference
    to the Vue component instance itself. An example of using the `this` instance
    is shown here:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算属性的逻辑中，您可以使用`this`实例访问任何组件的数据属性、方法或其他计算属性，`this`实例是对Vue组件实例本身的引用。使用`this`实例的示例如下：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let’s look at some examples of where you should consider using a computed property:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些应该考虑使用计算属性的示例：
- en: '`input` field, which attaches to the `name` data property, and `error` is a
    computed property. If `name` contains a `falsy` value (which means `name` is an
    empty string, `0`, `undefined`, `null`, or `false`), `error` will be assigned
    a value of `"Name is required"`. Otherwise, it will be empty. The component then
    renders the value of the `error` property accordingly:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input` 字段，它附加到 `name` 数据属性上，而 `error` 是一个计算属性。如果 `name` 包含一个 `falsy` 值（这意味着
    `name` 是一个空字符串、`0`、`undefined`、`null` 或 `false`），则 `error` 将被分配一个值为 `"Name is
    required"` 的值。否则，它将为空。组件随后根据 `error` 属性的值渲染相应的值：'
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The error computed property updates itself whenever the `name` value is modified
    by the user. Hence when `name` is empty, the output will be as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户修改 `name` 值时，错误计算属性会自动更新自己。因此，当 `name` 为空时，输出将如下所示：
- en: '![Figure 2.1 – Output of the error computed property](img/B18645_02_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – 错误计算属性的输出](img/B18645_02_01.jpg)'
- en: Figure 2.1 – Output of the error computed property
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – 错误计算属性的输出
- en: 'And when `name` is valid, the output will display just the filled input field:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `name` 有效时，输出将仅显示填充的输入字段：
- en: '![Figure 2.2 – Output of error when name contains a valid value](img/B18645_02_02.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – 当 name 包含有效值时的错误输出](img/B18645_02_02.jpg)'
- en: Figure 2.2 – Output of error when name contains a valid value
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 当 name 包含有效值时的错误输出
- en: '`title` and `surname` – into one computed string, `formalName`, and render
    its value using `template`:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title` 和 `surname` – 合并成一个计算字符串，`formalName`，并使用 `template` 渲染其值：'
- en: '[PRE22]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This will generate the following output:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下输出：
- en: '[PRE41]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '**Calculating and displaying complex information**: Sometimes there is a need
    to perform an extra calculation or to extract specific information from one large
    data object source. Computed properties help to achieve this goal while keeping
    our code readable.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计算和显示复杂信息**：有时需要执行额外的计算或从一个大型的数据对象源中提取特定的信息。计算属性帮助我们实现这一目标，同时保持我们的代码可读。'
- en: 'Take a large data object, such as `post`. This data object has a nested `fields`
    property, which contains several additional information objects, such as the full
    name of `author` and an array of `entries` objects. Each entry in `entries` contains
    further information, such as `title`, `content`, and a `feature` flag indicating
    whether the entry should be featured:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 取一个大的数据对象，例如 `post`。此数据对象有一个嵌套的 `fields` 属性，其中包含几个附加信息对象，例如 `author` 的全名和一个
    `entries` 对象数组。`entries` 中的每个条目都包含进一步的信息，例如 `title`、`content` 和一个表示条目是否应被特色显示的
    `feature` 标志：
- en: '[PRE42]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In this scenario, you need to perform the following steps:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在此场景中，你需要执行以下步骤：
- en: Display the full name of the post’s `author`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示帖子的 `author` 的全名。
- en: Calculate and display the total number of `entries` included.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算并显示包含的 `entries` 的总数。
- en: 'Display a list of `entries` that have the `feature` flag turned on (`feature:
    true`).'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '显示具有开启 `feature` 标志的 `entries` 列表（`feature: true`）。'
- en: 'By using computed properties, we can decouple the previous `post` object into
    several computed data properties while keeping the original `post` object unchanged,
    as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用计算属性，我们可以将之前的 `post` 对象解耦成几个计算数据属性，同时保持原始的 `post` 对象不变，如下所示：
- en: '`fullName` for combining `firstName` and `lastName` of `post.fields.author`:'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fullName` 用于合并 `post.fields.author` 的 `firstName` 和 `lastName`：'
- en: '[PRE43]'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '`totalEntries` contains the length of the `post.fields.entries` array:'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`totalEntries` 包含 `post.fields.entries` 数组的长度：'
- en: '[PRE48]'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '`featuredEntries` contains the filtered list of `post.fields.entries` based
    on the `feature` property of each entry, by using the `filter` built-in array
    method:'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`featuredEntries` 包含基于每个条目的 `feature` 属性的 `post.fields.entries` 过滤列表，通过使用内置的
    `filter` 数组方法：'
- en: '[PRE51]'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'You then use the simplified and semantic computed properties to render the
    information in your component’s template. The full code is shown here:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你使用简化和语义化的计算属性在你的组件模板中渲染信息。完整的代码如下所示：
- en: '[PRE55]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'This will generate the following output:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下输出：
- en: '![Figure 2.3 – The computed name output](img/B18645_02_03.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – 计算名称输出](img/B18645_02_03.jpg)'
- en: Figure 2.3 – The computed name output
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 计算名称输出
- en: Computed properties are very valuable to Vue developers when creating performant
    components. In the next exercise, we will explore how to use them inside a Vue
    component.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 计算属性对于创建高性能组件的 Vue 开发者来说非常有价值。在下一个练习中，我们将探讨如何在 Vue 组件中使用它们。
- en: Exercise 2.01 – implementing computed data into a Vue component
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2.01 – 将计算数据实现到 Vue 组件中
- en: In this exercise, you will use a computed property to help cut down the amount
    of code you need to write inside your Vue templates by concisely outputting basic
    data.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将使用计算属性来帮助你减少在Vue模板中需要编写的代码量，通过简洁地输出基本数据。
- en: To access the code for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.01).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码，请参阅[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.01)。
- en: 'We are going to implement a component that receives the user’s first name and
    last name input, and displays the user’s full name accordingly, by performing
    the following steps:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现一个组件，该组件接收用户的姓氏和名字输入，并相应地显示用户的完整姓名，通过以下步骤进行：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate to the `Chapter02/Exercise2.01`
    folder, by using the following commands in order:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用由`npm init vue@3`生成的应用程序作为起点，或者在你的代码仓库的根目录下，使用以下命令导航到`Chapter02/Exercise2.01`文件夹：
- en: '[PRE56]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Open the exercise project in your `code .` command within the project directory),
    or your preferred **integrated development** **environment** (**IDE**).
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录中打开练习项目（在`code .`命令中），或者在你的首选**集成开发环境**（**IDE**）中打开。
- en: 'Let’s create a new Vue component called `Exercise2-01` by adding the `Exercise2-01.vue`
    file to the `./``src/components/` folder:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`./src/components/`文件夹中添加一个名为`Exercise2-01.vue`的新Vue组件：
- en: '![Figure 2.4 – The components directory hierarchy](img/B18645_02_04.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图2.4 – 组件目录层次结构](img/B18645_02_04.jpg)'
- en: Figure 2.4 – The components directory hierarchy
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4 – 组件目录层次结构
- en: 'Open `Exercise2-01.vue` and let’s create the code block structure for the Vue
    component, as follows:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Exercise2-01.vue`，让我们为Vue组件创建代码块结构，如下所示：
- en: '[PRE58]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'In `<template>`, create an `input` field for the first name, and use `v-model`
    to bind the `data` prop, `firstName`, to this field:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<template>`中，创建一个用于名字的`input`字段，并使用`v-model`将`data`属性`firstName`绑定到该字段：
- en: '[PRE64]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Create a second `input` field for the last name, and use `v-model` to bind
    the `data` prop, `lastName`, to this field:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用于姓氏的第二个`input`字段，并使用`v-model`将`data`属性`lastName`绑定到该字段：
- en: '[PRE65]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Include these new `v-model` data props in the Vue instance by returning them
    in the `data()` function:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`data()`函数中返回它们，将这些新的`v-model`数据属性包含在Vue实例中：
- en: '[PRE66]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Create a computed data variable called `fullName`:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`fullName`的计算数据变量：
- en: '[PRE72]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Underneath your `input` fields, output the computed data using the `h3` tag:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`input`字段下方，使用`h3`标签输出计算数据：
- en: '[PRE77]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Finally, run the application using the following command:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用以下命令运行应用程序：
- en: '[PRE78]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Upon visiting `http://localhost:3000` in the browser and keying the input `John`
    for first name, and `Doe` for last name, the page will generate the following
    output:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中访问`http://localhost:3000`，并输入`John`作为名字，`Doe`作为姓氏，页面将生成以下输出：
- en: '![Figure 2.5 – Output of the computed data will show the first and last name](img/B18645_02_05.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图2.5 – 计算数据的输出将显示姓氏和名字](img/B18645_02_05.jpg)'
- en: Figure 2.5 – Output of the computed data will show the first and last name
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5 – 计算数据的输出将显示姓氏和名字
- en: This exercise demonstrates how we can write an expression inside a computed
    data property using data received from `v-model`, and then combine the first name
    and last name into a single output variable with the `fullName` computed property
    that can be reused within the component.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习演示了如何在计算数据属性中使用从`v-model`接收的数据编写表达式，然后使用`fullName`计算属性将名字和姓氏合并成一个可重用的输出变量。
- en: We now understand how a computed property works and how to write a declarative,
    reusable, and reactive computed property. Next, we will look at how to intercept
    the mutation process of a computed property and add additional logic with the
    computed setter feature.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在理解了计算属性的工作原理以及如何编写声明式、可重用和响应的计算属性。接下来，我们将探讨如何拦截计算属性的突变过程，并使用计算属性设置器功能添加额外的逻辑。
- en: Understanding computed setters
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解计算属性设置器
- en: By default, computed data is a getter only, which means it will only output
    the outcome of your expression. In some practical scenarios, when a computed property
    is mutated, you may need to trigger an external API or mutate the original data
    elsewhere in the project. The function performing this feature is called a **setter**.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，计算数据仅是获取器，这意味着它只会输出你表达式的结果。在一些实际场景中，当计算属性被修改时，你可能需要触发外部API或在项目的其他地方修改原始数据。执行此功能的函数称为**设置器**。
- en: Using a setter in a computed property allows you to reactively listen to data
    and trigger a callback (setter) that contains the returned value from the getter,
    which can optionally be used in the setter.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算属性中使用设置器允许你响应式地监听数据并触发一个包含从获取器返回的值的回调（设置器），这个值可以可选地用于设置器中。
- en: 'But first, let’s look at JavaScript ES5’s getter and setter. Starting from
    ES5, you can use the built-in getter and setter to define Object accessors, such
    as the following:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，让我们看看JavaScript ES5的获取器和设置器。从ES5开始，你可以使用内置的获取器和设置器来定义对象访问器，如下所示：
- en: '`get` to bind the Object property to a function that returns a value for that
    property whenever it is looked up, as shown here:'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get`用于将对象属性绑定到函数，每当该属性被查询时，该函数都会返回该属性的值，如下所示：'
- en: '[PRE79]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '`set` to bind the specific Object property to a function whenever that property
    is modified:'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set`用于将特定对象属性绑定到函数，每当该属性被修改时：'
- en: '[PRE85]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Based on those features, Vue.js provides us with similar functionalities, `get()`
    as the getter and `set()` as the setter, for a specific computed property:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些功能，Vue.js为我们提供了类似的功能，`get()`作为获取器，`set()`作为设置器，用于特定的计算属性：
- en: '[PRE94]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'To understand how setter and getter work, let’s perform the following steps:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解设置器和获取器是如何工作的，让我们执行以下步骤：
- en: 'Define the returned value of `myComputedDataProp` to be `this.count + 1` whenever
    `myComputedDataProp` is looked up:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`myComputedDataProp`返回的值，每当`myComputedDataProp`被查询时，为`this.count + 1`：
- en: '[PRE95]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Then, whenever `myComputedDataProp` is modified, use the setter to update the
    `count` data prop to its new value, and then call a method within the component
    called `callAnotherApi` with this new `this.count` value:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，每当`myComputedDataProp`被修改时，使用设置器来更新`count`数据属性到其新值，然后调用组件内的一个方法`callAnotherApi`，并使用这个新的`this.count`值：
- en: '[PRE100]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: With `count` and `callAnotherApi` is the component’s local data and method,
    respectively.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`count`和`callAnotherApi`分别是组件的局部数据和方法的名称。'
- en: 'The full example code is as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的示例代码如下：
- en: '[PRE105]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Here the computed `myComputedDataProp` prop will output `1` in your Vue component.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，计算属性`myComputedDataProp`将在你的Vue组件中输出`1`。
- en: You will find out exactly how to use computed data as both getters and setters
    in the following exercise.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在以下练习中找到如何使用计算数据作为获取器和设置器的确切方法。
- en: Exercise 2.02 – using computed setters
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2.02 – 使用计算设置器
- en: In this exercise, you will use a computed prop as a setter and a getter, which
    will both output expressions and set data when triggered by a user’s input.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将使用一个计算属性作为设置器和获取器，这两个属性在用户输入触发时都会输出表达式并设置数据。
- en: The complete code can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.02).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码可以在[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.02)找到。
- en: 'We are going to implement a component that contains an `input` field that receives
    a number from the user, calculate the half value of the input, then display both
    values on the UI, by performing the following steps:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现一个组件，该组件包含一个`input`字段，用于接收用户输入的数字，计算输入的一半值，然后在UI上显示这两个值，通过以下步骤完成：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate to the `Chapter02/Exercise2.02`
    folder, by using the following commands in order:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用通过`npm init vue@3`生成的应用程序作为起点，或者在代码仓库的根目录中，使用以下命令导航到`Chapter02/Exercise2.02`文件夹：
- en: '[PRE106]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory), or your preferred IDE.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的VS Code中打开练习项目（在项目目录中使用`code .`命令），或者使用你喜欢的IDE。
- en: 'Let’s create a new Vue component called `Exercise2-02` by adding the `Exercise2-02.vue`
    file to the `./``src/components/` folder:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个新的Vue组件`Exercise2-02`，通过将`Exercise2-02.vue`文件添加到`./src/components/`文件夹中：
- en: '![Figure 2.6 – The components directory hierarchy](img/B18645_02_06.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图2.6 – 组件目录层次结构](img/B18645_02_06.jpg)'
- en: Figure 2.6 – The components directory hierarchy
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6 – 组件目录层次结构
- en: 'Open `Exercise2-02.vue` and let’s create the code block structure for the Vue
    component, as follows:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Exercise2-02.vue`，让我们为Vue组件创建以下代码块结构：
- en: '[PRE108]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Create an `input` field with a `v-model` value bound to a computed data value
    called `incrementOne`, return the value of a Vue data variable called `count`
    in the getter, and set the `count` variable in the setter:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`input`字段，其`v-model`值绑定到一个名为`incrementOne`的计算数据值，在getter中返回名为`count`的Vue数据变量的值，并在setter中设置`count`变量：
- en: '[PRE114]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'The output of the preceding code will be as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下所示：
- en: '![Figure 2.7 – The first steps of a computed setter and getter](img/B18645_02_07.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图2.7 – 计算setter和getter的第一步](img/B18645_02_07.jpg)'
- en: Figure 2.7 – The first steps of a computed setter and getter
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7 – 计算setter和getter的第一步
- en: 'Next, let’s utilize the setter again. We will divide whatever the new `val`
    argument is by `2`, and save that to a new data variable called `divideByTwo`:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们再次使用setter。我们将把新的`val`参数除以`2`，并将其保存到一个新的数据变量`divideByTwo`中：
- en: '[PRE141]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'Update the setter to divide `val` by `2`, and bind this new value to the `divideByTwo`
    variable:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新setter以将`val`除以`2`，并将这个新值绑定到`divideByTwo`变量：
- en: '[PRE159]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'Finally, run the application using the following command:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用以下命令运行应用程序：
- en: '[PRE163]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'Upon visiting `http://localhost:3000` in the browser, and keying the input
    as `1000`, the output of the `divideByTwo` value should generate an outcome from
    the value entered in the `input` field, as follows:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中访问`http://localhost:3000`，并键入输入`1000`，`divideByTwo`值的输出应该生成从`input`字段中输入的值的输出，如下所示：
- en: '![Figure 2.8 – The outcome of the divideByTwo value](img/B18645_02_08.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![图2.8 – divideByTwo值的输出](img/B18645_02_08.jpg)'
- en: Figure 2.8 – The outcome of the divideByTwo value
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8 – divideByTwo值的输出
- en: This exercise demonstrates how we can use computed data to both get and set
    data reactively in our template by binding computed variables to the `v-model`.
    In the next section, we will explore how we can use watchers to actively listen
    to changes in component data or its property.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习演示了我们可以如何使用计算数据通过将计算变量绑定到`v-model`来在我们的模板中反应性地获取和设置数据。在下一节中，我们将探讨我们可以如何使用观察者来积极监听组件数据或其属性的变化。
- en: Exploring watchers
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索观察者
- en: Vue `oldVal` and `newVal`. This can help you when writing expressions to compare
    data before writing or binding new values. Watchers can observe objects as well
    as other types, such as `string`, `number`, and `array` types.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: Vue `oldVal`和`newVal`。这可以帮助您在写入或绑定新值之前编写表达式来比较数据。观察者可以观察对象以及其他类型，如`string`、`number`和`array`类型。
- en: 'In [*Chapter 1*](B18645_01.xhtml#_idTextAnchor015), *Starting Your First Vue
    Project*, we introduced life cycle hooks that run at specific times during a component’s
    lifespan. If the `immediate` key is set to `true` on a watcher, then when this
    component initializes, it will run this watcher on creation. You can watch all
    keys inside any given object by including the key and value `deep: true` (the
    default is `false`).'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '在[*第一章*](B18645_01.xhtml#_idTextAnchor015)《开始您的第一个Vue项目》中，我们介绍了在组件生命周期中特定时间运行的生存周期钩子。如果在一个观察者上设置了`immediate`键为`true`，那么当这个组件初始化时，它将在创建时运行这个观察者。您可以通过包含键和值`deep:
    true`（默认为`false`）来观察任何给定对象内的所有键。'
- en: To clean up your watcher code, you can assign a `handler` argument to a defined
    component’s method, which is considered best practice for large projects.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清理您的观察者代码，您可以将一个`handler`参数分配给定义好的组件的方法，这在大型项目中被认为是最佳实践。
- en: Watchers complement the usage of computed data since they passively observe
    values and cannot be used as normal Vue data variables, while computed data must
    always return a value and can be looked up. Remember *not* to use arrow functions
    if you need the Vue context of `this`.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 观察者补充了计算数据的用法，因为它们被动地观察值，不能用作正常的Vue数据变量，而计算数据必须始终返回一个值，并且可以被查询。记住*不要*使用箭头函数，如果您需要Vue上下文中的`this`。
- en: 'The following example demonstrates the `immediate` and `deep` optional keys;
    if any key inside the `myDataProperty` object were to change, it would trigger
    a console log:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了`immediate`和`deep`可选键；如果`myDataProperty`对象中的任何键发生变化，它将触发控制台日志：
- en: '[PRE164]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: Now, let’s set some new values with the help of watchers.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在观察者的帮助下设置一些新值。
- en: Exercise 2.03 – using watchers to set new values
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2.03 – 使用观察者设置新值
- en: In this exercise, you will use watcher arguments to watch data properties for
    changes, then use this watcher to set variables via a method.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将使用观察者参数来观察数据属性的变化，然后使用此观察者通过方法设置变量。
- en: You can find the complete code for this exercise at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.03).
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.03)找到此练习的完整代码。
- en: 'We create a Vue component that displays the shop watcher’s price before and
    after the discount, with an option to update the discount price, by following
    these instructions:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个Vue组件，用于显示折扣前后的商店观察者价格，并提供更新折扣价格的功能，按照以下说明进行操作：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate to the `Chapter02/Exercise
    2.03` folder, by using the following commands in order:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用由`npm init vue@3`生成的应用程序作为起点，或者在代码仓库的根目录中，使用以下命令导航到`Chapter02/Exercise 2.03`文件夹：
- en: '[PRE165]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory), or your preferred IDE.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的VS Code中打开练习项目（在项目目录中使用`code .`命令），或使用您首选的IDE。
- en: 'Let’s create a new Vue component called `Exercise2-03` by adding the `Exercise2-03.vue`
    file to the `./``src/components/` folder:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个新的Vue组件`Exercise2-03`，通过将`Exercise2-03.vue`文件添加到`./src/components/`文件夹中：
- en: '![Figure 2.9 – The components directory hierarchy](img/B18645_02_09.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![图2.9 – 组件目录层次结构](img/B18645_02_09.jpg)'
- en: Figure 2.9 – The components directory hierarchy
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9 – 组件目录层次结构
- en: 'Open `Exercise2-03.vue` and let’s create the code block structure for the Vue
    component, as follows:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Exercise2-03.vue`，让我们为Vue组件创建代码块结构，如下所示：
- en: '[PRE167]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'Set up the document by adding a `discount` and an `oldDiscount` data:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加`discount`和`oldDiscount`数据属性来设置文档：
- en: '[PRE173]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: 'We want to listen to the changes in the `discount` property. This can be achieved
    by adding it to the `watch` object and manually updating the `oldDiscount` value
    to `oldValue` received as follows:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们想监听`discount`属性的变化。这可以通过将其添加到`watch`对象中，并手动将`oldDiscount`值更新为接收到的`oldValue`来实现：
- en: '[PRE193]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: 'Now let’s add a component method called `updateDiscount`. Inside the method,
    set the `oldDiscount` data prop to `this.discount +` `5`:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加一个名为`updateDiscount`的组件方法。在方法内部，将`oldDiscount`数据属性设置为`this.discount
    + 5`：
- en: '[PRE198]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: 'Then bind this method to `button` using the `@click` directive to trigger this
    method whenever the user clicks on the button and respectively trigger the watcher:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后使用`@click`指令将此方法绑定到`button`上，以便在用户点击按钮时触发此方法，并相应地触发观察者：
- en: '[PRE203]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: 'Add some CSS stylings to make our component look pretty:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一些CSS样式，使我们的组件看起来更美观：
- en: '[PRE204]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: 'Finally, run the application using the following command:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用以下命令运行应用程序：
- en: '[PRE222]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: 'Upon visiting `http://localhost:3000` in the browser, the output of the preceding
    command will be as follows:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中访问`http://localhost:3000`时，前面命令的输出将如下所示：
- en: '![Figure 2.10 – An example output of the shop watcher page](img/B18645_02_10.jpg)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![图2.10 – 商店观察者页面示例输出](img/B18645_02_10.jpg)'
- en: Figure 2.10 – An example output of the shop watcher page
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.10 – 商店观察者页面示例输出
- en: In this exercise, we explored how we can use watchers to observe and dynamically
    manipulate data when it is changed by triggering other methods in the Vue component.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们探讨了如何使用观察者来观察和动态操作数据，当数据发生变化时通过触发Vue组件中的其他方法。
- en: Next, we will learn how to actively watch a specific nested property within
    a data object through deep watching.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何通过深度观察来主动观察数据对象中的特定嵌套属性。
- en: Watching nested properties
  id: totrans-354
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观察嵌套属性
- en: When using Vue.js to watch a data property, you can observe changes belonging
    to nested keys of an object, rather than observing the changes to the object itself.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Vue.js观察数据属性时，您可以观察对象嵌套键的变化，而不是观察对象本身的变化。
- en: 'This is done by setting the optional `deep` property to `true`:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 这通过将可选的`deep`属性设置为`true`来完成：
- en: '[PRE223]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: This code example demonstrates how we watch all available keys inside the `organization`
    data object for changes. If the `name` property inside `organization` changes,
    the `organization` watcher will trigger.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码示例演示了如何观察`organization`数据对象内部的所有可用键的变化。如果`organization`中的`name`属性发生变化，`organization`观察者将触发。
- en: If you do not need to observe every key inside an object, it is more performant
    to assign a watcher to a specific key by specifying it following the syntax `<object>.<key>`
    string. For example, you may allow a user to edit their company name and trigger
    an API call when that specific key’s value has been modified.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不需要观察对象内的每个键，通过指定 `<object>.<key>` 字符串语法来为特定键分配观察者会更高效。例如，你可能允许用户编辑他们的公司名称，并在该特定键的值被修改时触发
    API 调用。
- en: 'In the following example, the watcher is explicitly observing the `name` key
    of the `organization` object:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，观察者明确地观察了 `organization` 对象的 `name` 键：
- en: '[PRE224]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: We have seen how deep watching works. Now, let’s try the next exercise and watch
    the nested properties of a data object.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了深度观察是如何工作的。现在，让我们尝试下一个练习，并观察数据对象的嵌套属性。
- en: Exercise 2.04 – watching nested properties of a data object
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2.04 – 观察数据对象的嵌套属性
- en: In this exercise, you will use watchers to observe keys within an object, which
    will update when a user triggers a method within the UI.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将使用观察者来观察对象内的键，当用户在 UI 中触发方法时，这些键会更新。
- en: The complete code for the exercise can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.04).
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 练习的完整代码可以在 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.04)
    找到。
- en: 'Follow the instructions to create a component that displays a product’s label
    and price, and dynamically modifies the discount price:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 按照说明创建一个组件，该组件显示产品的标签和价格，并动态修改折扣价格：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate to the `Chapter02/Exercise2.04`
    folder, by using the following commands in order:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用由 `npm init vue@3` 生成的应用程序作为起点，或者在你的代码仓库的根目录中，使用以下命令导航到 `Chapter02/Exercise2.04`
    文件夹：
- en: '[PRE225]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory), or your preferred IDE.
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 VS Code 中打开练习项目（在项目目录中使用 `code .` 命令），或者使用你偏好的 IDE。
- en: 'Let’s create a new Vue component called `Exercise2-04` by adding the `Exercise2-04.vue`
    file to the `./``src/components/` folder:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过将 `Exercise2-04.vue` 文件添加到 `./src/components/` 文件夹中，创建一个新的 Vue 组件，命名为 `Exercise2-04`：
- en: '![Figure 2.11 – The components directory hierarchy](img/B18645_02_11.jpg)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.11 – 组件目录层次结构](img/B18645_02_11.jpg)'
- en: Figure 2.11 – The components directory hierarchy
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11 – 组件目录层次结构
- en: 'In `Exercise2-04.vue`, let’s start by defining a `product` object that contains
    `price` and `label`, and a `discount` key. Output these values into the template:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Exercise2-04.vue` 中，让我们首先定义一个包含 `price` 和 `label` 的 `product` 对象，以及一个 `discount`
    键。将这些值输出到模板中：
- en: '[PRE227]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: 'Add CSS styling to our component:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们的组件添加 CSS 样式：
- en: '[PRE250]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE267]'
- en: Run the application using the following command and visit `http://localhost:3000`
    in the browser to view the component rendered.
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序，并在浏览器中访问 `http://localhost:3000` 来查看渲染的组件。
- en: '[PRE268]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: 'Now let’s set up a button that will modify the price of the product. We achieve
    this by adding a `button` element with a `click` event bound to an `updatePrice`
    method that decrements the value of the price:'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们设置一个按钮，该按钮将修改产品的价格。我们通过添加一个 `button` 元素，并将其 `click` 事件绑定到一个 `updatePrice`
    方法（该方法减少价格值）来实现这一点：
- en: '[PRE269]'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: 'When you click the button, it should reduce the price, as seen in the following
    screenshot:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击按钮时，它应该减少价格，如以下截图所示：
- en: '![Figure 2.12 – Screen displaying the reduced price of Blue juice](img/B18645_02_12.jpg)'
  id: totrans-436
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.12 – 显示 Blue juice 减少价格的屏幕](img/B18645_02_12.jpg)'
- en: Figure 2.12 – Screen displaying the reduced price of Blue juice
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12 – 显示 Blue juice 减少价格的屏幕
- en: 'Time for the nested watcher. We will watch the `product` object’s `price`,
    and increment the `discount` data prop:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到了嵌套观察者的时间了。我们将观察 `product` 对象的 `price` 属性，并增加 `discount` 数据属性：
- en: '[PRE284]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE288]'
- en: 'Now, as you reduce `price`, the `discount` value will go up because of the
    watcher:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你减少 `price` 时，由于观察者的作用，`discount` 值将会上升：
- en: '![Figure 2.13 – Output displaying an increased discount value](img/B18645_02_13.jpg)'
  id: totrans-445
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.13 – 显示增加折扣值的输出](img/B18645_02_13.jpg)'
- en: Figure 2.13 – Output displaying an increased discount value
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.13 – 显示增加折扣值的输出
- en: In this exercise, we used watchers to observe a key inside an object and then
    set new data with or without using the optional arguments parsed by the watcher.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们使用了观察者来观察对象内的一个键，然后使用或未使用观察者解析的可选参数设置新数据。
- en: In the next section, we will explore how to fetch and handle data using the
    Vue component’s async methods.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何使用 Vue 组件的异步方法获取和处理数据。
- en: Exploring async methods and data fetching
  id: totrans-449
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索异步方法和数据获取
- en: Asynchronous functions in JavaScript are defined by the `async` syntax and return
    a Promise. These functions operate asynchronously via the Event loop, using an
    implicit promise, which is an object that may return a result in the future.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的异步函数由 `async` 语法定义，并返回一个 Promise。这些函数通过事件循环异步操作，使用隐式 Promise，这是一个可能在未来返回结果的对象。
- en: As part of the JavaScript language, you can declare asynchronous blocks of code
    inside a Vue component’s method by including the `async` keyword in front of a
    method.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 JavaScript 语言的一部分，你可以在 Vue 组件的方法中声明异步代码块，通过在方法前包含 `async` 关键字来实现。
- en: You can use Promise chaining methods, such as the `then()` and `catch()` functions
    or try the `await` syntax of ES6 inside these Vue methods and return the results
    accordingly.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Promise 链式方法，例如 `then()` 和 `catch()` 函数，或者在 Vue 方法中使用 ES6 的 `await` 语法，并相应地返回结果。
- en: 'Here is an example using the built-in `fetch` API to fetch data inside a component
    method as an asynchronous function with `async/await` keywords:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例，使用内置的 `fetch` API 在组件方法中作为异步函数使用 `async/await` 关键字获取数据：
- en: '[PRE289]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '**Axios** is a popular JavaScript library that allows you to make external
    requests for data using Node.js. It has wide browser support making it a versatile
    library when making HTTP or API requests. We will be using this library in the
    next exercise.'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '**Axios** 是一个流行的 JavaScript 库，它允许你使用 Node.js 发起外部数据请求。它具有广泛的浏览器支持，使其在制作 HTTP
    或 API 请求时成为一个多才多艺的库。我们将在下一个练习中使用这个库。'
- en: Exercise 2.05 – using asynchronous methods to retrieve data from an API
  id: totrans-456
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2.05 – 使用异步方法从 API 获取数据
- en: In this exercise, you will asynchronously fetch data from an external API source
    and display it on the frontend using computed props.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将异步从外部 API 源获取数据，并使用计算属性在前端显示它。
- en: You can find the complete code for this exercise at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.05](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.05).
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.05](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.05)
    找到这个练习的完整代码。
- en: 'We will create a component that will fetch quotes from an external data source
    and display a quote on the UI by following these instructions:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个组件，按照以下说明从外部数据源获取引言并在 UI 上显示：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate to the `Chapter02/Exercise2.05`
    folder, by using the following commands in order:'
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用由 `npm init vue@3` 生成的应用程序作为起点，或者在你的代码仓库的根目录中，使用以下命令导航到 `Chapter02/Exercise2.05`
    文件夹：
- en: '[PRE290]'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE291]'
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory), or your preferred IDE.
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 VS Code 中打开练习项目（在项目目录中使用 `code .` 命令），或者使用你偏好的 IDE。
- en: 'Let’s create a new Vue component called `Exercise2-05` by adding the `Exercise2-05.vue`
    file to the `./``src/components/` folder:'
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过将 `Exercise2-05.vue` 文件添加到 `./src/components/` 文件夹来创建一个新的 Vue 组件 `Exercise2-05`：
- en: '![Figure 2.14 – The components directory hierarchy](img/B18645_02_14.jpg)'
  id: totrans-465
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.14 – 组件目录层次结构](img/B18645_02_14.jpg)'
- en: Figure 2.14 – The components directory hierarchy
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.14 – 组件目录层次结构
- en: 'In `Exercise2-05.vue`, let’s start by importing `axios` into our component
    and creating a method called `fetchAdvice()`. We use `axios` to call a response
    from [https://api.adviceslip.com/advice](https://api.adviceslip.com/advice) and
    then `console.log` the result. Also, let’s include a button that has a `click`
    event bound to the `fetchAdvice()` call:'
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Exercise2-05.vue` 中，让我们首先将 `axios` 导入到我们的组件中，并创建一个名为 `fetchAdvice()` 的方法。我们使用
    `axios` 调用 [https://api.adviceslip.com/advice](https://api.adviceslip.com/advice)
    的响应，然后使用 `console.log` 输出结果。同时，让我们包括一个按钮，该按钮将 `click` 事件绑定到 `fetchAdvice()` 调用：
- en: '[PRE292]'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE331]'
- en: 'Finally, run the application using the following command:'
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用以下命令运行应用程序：
- en: '[PRE332]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE332]'
- en: 'Upon visiting `http://localhost:3000` in the browser, the output of the preceding
    command will be as follows:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中访问 `http://localhost:3000` 后，前面命令的输出将如下所示：
- en: '![Figure 2.15 – Screen displaying a very large object in the console](img/B18645_02_15.jpg)'
  id: totrans-511
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.15 – 屏幕显示控制台中的一个非常大的对象](img/B18645_02_15.jpg)'
- en: Figure 2.15 – Screen displaying a very large object in the console
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.15 – 屏幕显示控制台中的一个非常大的对象
- en: 'We are only interested in the data object inside the `response` object. Assign
    this data object to a Vue data prop called `response`, which we can reuse:'
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们只对 `response` 对象中的数据对象感兴趣。将此数据对象分配给名为 `response` 的 Vue 数据属性，我们可以重用它：
- en: '[PRE333]'
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE348]'
- en: 'Output `quote` from inside the `response` prop object using a computed prop
    that will update every time the `response` prop changes. Use a ternary operator
    to perform a conditional statement to check whether the `response` prop contains
    the `slip` object to avoid errors:'
  id: totrans-530
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用计算属性从 `response` 属性对象中输出 `quote`，该计算属性将在 `response` 属性更改时更新。使用三元运算符执行条件语句以检查
    `response` 属性是否包含 `slip` 对象，以避免错误：
- en: '[PRE349]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '*Figure 2**.16* displays the output generated by the preceding code:'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2.16* 显示了前面代码生成的输出：'
- en: '![Figure 2.16 – Screen displaying the quote output in your template](img/B18645_02_16.jpg)'
  id: totrans-567
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.16 – 屏幕显示模板中引用输出](img/B18645_02_16.jpg)'
- en: Figure 2.16 – Screen displaying the quote output in your template
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.16 – 屏幕显示模板中引用输出
- en: 'As a final touch, include a `loading` data prop so the user can see when the
    UI is loading. Set `loading` to `false` by default. Inside the `fetchAdvice` method,
    set `loading` to `true`. When the GET request completes (resolve/reject), within
    the `finally()` chain, set it back to `false` after 4 seconds using the `setTimeout`
    function. You can use a ternary operator to change the button text between the
    loading state and its default state:'
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为最后的润色，包括一个 `loading` 数据属性，以便用户可以看到 UI 是否正在加载。默认将 `loading` 设置为 `false`。在 `fetchAdvice`
    方法内部，将 `loading` 设置为 `true`。当 GET 请求完成（解析/拒绝）时，在 `finally()` 链中，使用 `setTimeout`
    函数在 4 秒后将它设置回 `false`。你可以使用三元运算符在加载状态和默认状态之间更改按钮文本：
- en: '[PRE384]'
  id: totrans-570
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE388]'
- en: '[PRE389]'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '[PRE393]'
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-581
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '[PRE396]'
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '[PRE399]'
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '[PRE411]'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '[PRE412]'
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '[PRE416]'
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '[PRE417]'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '[PRE418]'
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '[PRE419]'
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[PRE420]'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '[PRE422]'
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE422]'
- en: '[PRE423]'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '[PRE424]'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '[PRE426]'
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE426]'
- en: '[PRE427]'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '[PRE428]'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE428]'
- en: 'The output of the preceding code will be as follows:'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的输出将如下所示：
- en: '![Figure 2.17 – Screen displaying the loading button state output in your template](img/B18645_02_17.jpg)'
  id: totrans-616
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.17 – 屏幕显示模板中加载按钮状态输出](img/B18645_02_17.jpg)'
- en: Figure 2.17 – Screen displaying the loading button state output in your template
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.17 – 屏幕显示模板中加载按钮状态输出
- en: In this exercise, we saw how we can fetch data from an external source, assign
    it to a computed prop, display it in our template, and apply a loading state to
    our content.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们看到了如何从外部源获取数据，将其分配给计算属性，在模板中显示它，并应用加载状态到我们的内容上。
- en: At this point, we have explored the different approaches to working with the
    local data of a Vue component. In the next section, we will examine the pros and
    cons of each approach.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探讨了处理 Vue 组件本地数据的不同方法。在下一节中，我们将检查每种方法的优缺点。
- en: Comparing methods, watchers, and computed properties
  id: totrans-620
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较方法、监视器和计算属性
- en: Methods are best used as a handler to an event occurring in the DOM, and in
    situations where you need to call a function or perform an API call, for example,
    `Date.now()`. All values returned by methods are not cached.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 方法最好用作 DOM 中发生的事件的处理程序，以及在需要调用函数或执行 API 调用的情况下，例如 `Date.now()`。所有由方法返回的值都不会被缓存。
- en: 'For example, you can compose an action denoted by `@click`, and reference a
    method:'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以组合一个由 `@click` 标记的动作，并引用一个方法：
- en: '[PRE429]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: This code block will display an alert bar with the current Unix epoch time whenever
    a user clicks on the **Click me** button. Methods should not be used to display
    computed data, since the return value of the method, unlike computed props, is
    not cached, potentially generating a performance impact on your application if
    misused.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 **点击我** 按钮时，此代码块将显示一个带有当前 Unix 纪元时间的警告栏。不应使用方法来显示计算数据，因为与计算属性不同，方法的返回值不会被缓存，如果误用，可能会对你的应用程序产生性能影响。
- en: 'As mentioned, computed props are best used when reacting to data updates or
    for composing complicated expressions in your template. In the following instance,
    if the `animalList` data changes, the `animals` computed prop will also update
    by slicing the second item from the array and returning the new value:'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，计算属性最好用于响应数据更新或在模板中组合复杂表达式。在以下示例中，如果 `animalList` 数据发生变化，`animals` 计算属性将通过从数组中切片第二个项目并返回新值来更新：
- en: '[PRE430]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: Their reactive nature makes computed properties perfect for composing new data
    variables from existing data, such as when you are referencing specific keys of
    a larger, more complicated object.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的响应性特性使得计算属性非常适合从现有数据中组合新的数据变量，例如当你引用更大的、更复杂对象的特定键时。
- en: 'Computed properties also help increase the readability of your Vue component’s
    template and logic. In the following example, we output the authors in two different
    ways, but with the `authorName` computed prop, you can compose conditional logic
    cleanly without bloating the HTML template:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 计算属性也有助于提高Vue组件模板和逻辑的可读性。在以下示例中，我们以两种不同的方式输出作者，但通过`authorName`计算属性，你可以干净地组合条件逻辑，而不会使HTML模板膨胀：
- en: '[PRE431]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: However, in many cases, using computed props can be overkill, such as when you
    only want to watch a specific data’s nested property rather than the whole data
    object. Or when you need to listen and perform an action upon any changes of a
    data property or a specific property key nested inside a data property object,
    and then perform an action. In this case, data watchers should be used.
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在许多情况下，使用计算属性可能会过度使用，例如当你只想监视特定数据的嵌套属性而不是整个数据对象时。或者当你需要监听并执行数据属性或嵌套在数据属性对象中的特定属性键的任何变化，然后执行操作时。在这种情况下，应该使用数据监视器。
- en: 'Because of the unique `newVal` and `oldVal` arguments of a watcher, you can
    watch a variable’s changes and perform an action only when a certain value is
    reached:'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 由于监视器的独特`newVal`和`oldVal`参数，你可以监视变量的变化，并且只有在达到某个特定值时才执行操作：
- en: '[PRE432]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: Based on these examples, we will build a simple search functionality using a
    method, computed props, and a watcher to achieve a similar outcome and demonstrate
    the ability of each method.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些示例，我们将构建一个简单的搜索功能，使用方法、计算属性和监视器来实现类似的结果，并展示每种方法的能力。
- en: Exercise 2.06 – handling the search functionality using a Vue method, a watcher,
    and computed props
  id: totrans-634
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2.06 – 使用Vue方法、监视器和计算属性处理搜索功能
- en: In this exercise, you will create a component that allows users to search data
    arrays using three different methods in Vue. By the end of the exercise, you will
    be able to see how each different method works.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将创建一个组件，允许用户使用Vue中的三种不同方法搜索数据数组。到练习结束时，你将能够看到每种不同方法是如何工作的。
- en: You can find the complete exercise at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.06](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.06).
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.06](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Exercise2.06)找到完整的练习。
- en: 'We will create a component that displays three different filtered lists according
    to three `input` fields, each using a different approach discussed in this topic,
    by following these instructions:'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个组件，根据三个`input`字段显示三个不同的过滤列表，每个列表使用本主题中讨论的不同方法，按照以下说明进行：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate to the `Chapter02/Exercise
    2.06` folder, by using the following commands in order:'
  id: totrans-638
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`npm init vue@3`生成的应用程序作为起点，或者在代码仓库的根目录下，使用以下命令导航到`Chapter02/Exercise 2.06`文件夹：
- en: '[PRE433]'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE433]'
- en: '[PRE434]'
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE434]'
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory), or your preferred IDE.
  id: totrans-641
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的VS Code中打开练习项目（在项目目录中使用`code .`命令），或者使用你偏好的IDE。
- en: 'Let’s create a new Vue component called `Exercise2-06` by adding the `Exercise2-06.vue`
    file to the `./``src/components/` folder:'
  id: totrans-642
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过将`Exercise2-06.vue`文件添加到`./src/components/`文件夹中，创建一个新的Vue组件，名为`Exercise2-06`：
- en: '![Figure 2.18 – The components directory hierarchy](img/B18645_02_18.jpg)'
  id: totrans-643
  prefs: []
  type: TYPE_IMG
  zh: '![图2.18 – 组件目录层次结构](img/B18645_02_18.jpg)'
- en: Figure 2.18 – The components directory hierarchy
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.18 – 组件目录层次结构
- en: 'In `Exercise2-06.vue`, within the `data` object, add a list of frameworks in
    an array, and assign it to the `frameworkList` property. Also, declare an `input`
    property with an empty string and `methodFilterList` with an initial value of
    an empty array:'
  id: totrans-645
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Exercise2-06.vue`中，在`data`对象内，添加一个框架列表到数组中，并将其分配给`frameworkList`属性。同时声明一个空字符串的`input`属性和初始值为空数组的`methodFilterList`：
- en: '[PRE435]'
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '[PRE436]'
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '[PRE439]'
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[PRE440]'
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '[PRE441]'
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '[PRE442]'
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE442]'
- en: '[PRE443]'
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE443]'
- en: '[PRE444]'
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '[PRE445]'
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '[PRE446]'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '[PRE447]'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '[PRE448]'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '[PRE449]'
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[PRE450]'
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE450]'
- en: '[PRE451]'
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE451]'
- en: '[PRE452]'
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE452]'
- en: '[PRE453]'
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE453]'
- en: '[PRE454]'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE454]'
- en: '[PRE455]'
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE455]'
- en: 'In the template, include a `div` container, `title`, and a `column` container.
    Inside this `column` container, create an input that is bound to the `v-model`
    input, and bind the `keyup` event to the input to the `searchMethod` method:'
  id: totrans-667
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板中，包括一个`div`容器、`title`和一个`column`容器。在这个`column`容器内部，创建一个绑定到`v-model`输入的输入框，并将`keyup`事件绑定到输入框的`searchMethod`方法：
- en: '[PRE456]'
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE456]'
- en: '[PRE457]'
  id: totrans-669
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE457]'
- en: '[PRE458]'
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE458]'
- en: '[PRE459]'
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE459]'
- en: '[PRE460]'
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE460]'
- en: '[PRE461]'
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE461]'
- en: '[PRE462]'
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE462]'
- en: '[PRE463]'
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE463]'
- en: '[PRE464]'
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE464]'
- en: '[PRE465]'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE465]'
- en: '[PRE466]'
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE466]'
- en: '[PRE467]'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE467]'
- en: '[PRE468]'
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE468]'
- en: '[PRE469]'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE469]'
- en: '[PRE470]'
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE470]'
- en: '[PRE471]'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE471]'
- en: '[PRE472]'
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE472]'
- en: '[PRE473]'
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE473]'
- en: '[PRE474]'
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE474]'
- en: '[PRE475]'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE475]'
- en: '[PRE476]'
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE476]'
- en: '[PRE477]'
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE477]'
- en: '[PRE478]'
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE478]'
- en: '[PRE479]'
  id: totrans-691
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE479]'
- en: '[PRE480]'
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE480]'
- en: '[PRE481]'
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE481]'
- en: '[PRE482]'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE482]'
- en: '[PRE483]'
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE483]'
- en: '[PRE484]'
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE484]'
- en: '[PRE485]'
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE485]'
- en: '[PRE486]'
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE486]'
- en: '[PRE487]'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE487]'
- en: '[PRE488]'
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE488]'
- en: '[PRE489]'
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE489]'
- en: '[PRE490]'
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE490]'
- en: '[PRE491]'
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE491]'
- en: '[PRE492]'
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE492]'
- en: '[PRE493]'
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE493]'
- en: '[PRE494]'
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE494]'
- en: '[PRE495]'
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE495]'
- en: '[PRE496]'
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE496]'
- en: '[PRE497]'
  id: totrans-709
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE497]'
- en: '[PRE498]'
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE498]'
- en: '[PRE499]'
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE499]'
- en: 'Then add some CSS stylings to make the output look pretty:'
  id: totrans-712
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后添加一些CSS样式，使输出看起来更美观：
- en: '[PRE500]'
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE500]'
- en: '[PRE501]'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE501]'
- en: '[PRE502]'
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE502]'
- en: '[PRE503]'
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE503]'
- en: '[PRE504]'
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE504]'
- en: '[PRE505]'
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE505]'
- en: '[PRE506]'
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE506]'
- en: '[PRE507]'
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE507]'
- en: '[PRE508]'
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE508]'
- en: '[PRE509]'
  id: totrans-722
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE509]'
- en: '[PRE510]'
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE510]'
- en: '[PRE511]'
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE511]'
- en: '[PRE512]'
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE512]'
- en: '[PRE513]'
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE513]'
- en: '[PRE514]'
  id: totrans-727
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE514]'
- en: '[PRE515]'
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE515]'
- en: '[PRE516]'
  id: totrans-729
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE516]'
- en: 'In the terminal, run the application using the following command:'
  id: totrans-730
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，使用以下命令运行应用程序：
- en: '[PRE517]'
  id: totrans-731
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE517]'
- en: 'Upon visiting `http://localhost:3000` in the browser, the output of the preceding
    command will be as follows:'
  id: totrans-732
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中访问`http://localhost:3000`后，前面命令的输出将如下所示：
- en: '![Figure 2.19 – Console output for the key input](img/B18645_02_19.jpg)'
  id: totrans-733
  prefs: []
  type: TYPE_IMG
  zh: '![图2.19 – 键输入的控制台输出](img/B18645_02_19.jpg)'
- en: Figure 2.19 – Console output for the key input
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.19 – 键输入的控制台输出
- en: 'Inside our `searchMethod` method, write a filter expression that binds the
    `methodFilterList` data prop to a filtered `frameworkList` array based on the
    input value. Trigger `searchMethod` on the `created()` life cycle hook so that
    when the component loads, a list is present:'
  id: totrans-735
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`searchMethod`方法中，编写一个过滤表达式，将`methodFilterList`数据属性绑定到一个基于输入值的过滤后的`frameworkList`数组。在`created()`生命周期钩子上触发`searchMethod`，以便当组件加载时，列表就存在：
- en: '[PRE518]'
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE518]'
- en: '[PRE519]'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE519]'
- en: '[PRE520]'
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE520]'
- en: '[PRE521]'
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE521]'
- en: '[PRE522]'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE522]'
- en: '[PRE523]'
  id: totrans-741
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE523]'
- en: '[PRE524]'
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE524]'
- en: '[PRE525]'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE525]'
- en: '[PRE526]'
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE526]'
- en: '[PRE527]'
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE527]'
- en: '[PRE528]'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE528]'
- en: '[PRE529]'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE529]'
- en: '[PRE530]'
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE530]'
- en: '[PRE531]'
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE531]'
- en: '[PRE532]'
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE532]'
- en: '[PRE533]'
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE533]'
- en: '[PRE534]'
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE534]'
- en: 'On running the preceding code, you will be able to filter the list, as shown
    in *Figure 2**:20*:'
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行前面的代码后，你将能够过滤列表，如图*图2*：20*所示：
- en: '![Figure 2.20 – You should be able to filter the list using a Vue method](img/B18645_02_20.jpg)'
  id: totrans-754
  prefs: []
  type: TYPE_IMG
  zh: '![图2.20 – 你应该能够使用Vue方法过滤列表](img/B18645_02_20.jpg)'
- en: Figure 2.20 – You should be able to filter the list using a Vue method
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.20 – 你应该能够使用Vue方法过滤列表
- en: 'Let’s make a filter using computed props. Include a new data prop called `input2`
    and create a `computed` prop called `computedList` that returns the same filter
    as `searchMethod` but does not need to bind to another data prop:'
  id: totrans-756
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用计算属性来创建一个过滤器。包括一个新的数据属性`input2`，并创建一个名为`computedList`的计算属性，它返回与`searchMethod`相同的过滤器，但不需要绑定到另一个数据属性：
- en: '[PRE535]'
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE535]'
- en: '[PRE536]'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE536]'
- en: '[PRE537]'
  id: totrans-759
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE537]'
- en: '[PRE538]'
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE538]'
- en: '[PRE539]'
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE539]'
- en: '[PRE540]'
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE540]'
- en: '[PRE541]'
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE541]'
- en: '[PRE542]'
  id: totrans-764
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE542]'
- en: '[PRE543]'
  id: totrans-765
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE543]'
- en: '[PRE544]'
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE544]'
- en: '[PRE545]'
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE545]'
- en: '[PRE546]'
  id: totrans-768
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE546]'
- en: '[PRE547]'
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE547]'
- en: '[PRE548]'
  id: totrans-770
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE548]'
- en: '[PRE549]'
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE549]'
- en: '[PRE550]'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE550]'
- en: '[PRE551]'
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE551]'
- en: '[PRE552]'
  id: totrans-774
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE552]'
- en: '[PRE553]'
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE553]'
- en: '[PRE554]'
  id: totrans-776
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE554]'
- en: '[PRE555]'
  id: totrans-777
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE555]'
- en: '[PRE556]'
  id: totrans-778
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE556]'
- en: '[PRE557]'
  id: totrans-779
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE557]'
- en: '[PRE558]'
  id: totrans-780
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE558]'
- en: '[PRE559]'
  id: totrans-781
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE559]'
- en: '[PRE560]'
  id: totrans-782
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE560]'
- en: '[PRE561]'
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE561]'
- en: '[PRE562]'
  id: totrans-784
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE562]'
- en: '[PRE563]'
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE563]'
- en: '[PRE564]'
  id: totrans-786
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE564]'
- en: '[PRE565]'
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE565]'
- en: '[PRE566]'
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE566]'
- en: '[PRE567]'
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE567]'
- en: '[PRE568]'
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE568]'
- en: '[PRE569]'
  id: totrans-791
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE569]'
- en: '[PRE570]'
  id: totrans-792
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE570]'
- en: '[PRE571]'
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE571]'
- en: '[PRE572]'
  id: totrans-794
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE572]'
- en: 'You should now be able to filter the second column of frameworks with the help
    of computed props, as shown in the following screenshot:'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能够使用计算属性帮助过滤框架的第二列，如下面的屏幕截图所示：
- en: '![Figure 2.21 – Filtering the second column of frameworks using computed props](img/B18645_02_21.jpg)'
  id: totrans-796
  prefs: []
  type: TYPE_IMG
  zh: '![图2.21 – 使用计算属性过滤框架的第二列](img/B18645_02_21.jpg)'
- en: Figure 2.21 – Filtering the second column of frameworks using computed props
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.21 – 使用计算属性过滤框架的第二列
- en: 'Finally, let’s filter the same list using a watcher. Include an `input3` prop
    with an empty string and a `watchFilterList` prop with an empty array. Also create
    a third `div` column, which contains an input bound to `input3` `v-model`, and
    a list outputting the `watchFilterList` array:'
  id: totrans-798
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们使用监视器来过滤相同的列表。包括一个带有空字符串的`input3`属性和一个带有空数组的`watchFilterList`属性。还要创建一个第三个`div`列，其中包含一个绑定到`input3`
    `v-model`的输入框，以及输出`watchFilterList`数组的列表：
- en: '[PRE573]'
  id: totrans-799
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE573]'
- en: '[PRE574]'
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE574]'
- en: '[PRE575]'
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE575]'
- en: '[PRE576]'
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE576]'
- en: '[PRE577]'
  id: totrans-803
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE577]'
- en: '[PRE578]'
  id: totrans-804
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE578]'
- en: '[PRE579]'
  id: totrans-805
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE579]'
- en: '[PRE580]'
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE580]'
- en: '[PRE581]'
  id: totrans-807
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE581]'
- en: '[PRE582]'
  id: totrans-808
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE582]'
- en: '[PRE583]'
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE583]'
- en: '[PRE584]'
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE584]'
- en: '[PRE585]'
  id: totrans-811
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE585]'
- en: '[PRE586]'
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE586]'
- en: '[PRE587]'
  id: totrans-813
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE587]'
- en: '[PRE588]'
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE588]'
- en: '[PRE589]'
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE589]'
- en: '[PRE590]'
  id: totrans-816
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE590]'
- en: '[PRE591]'
  id: totrans-817
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE591]'
- en: '[PRE592]'
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE592]'
- en: '[PRE593]'
  id: totrans-819
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE593]'
- en: '[PRE594]'
  id: totrans-820
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE594]'
- en: '[PRE595]'
  id: totrans-821
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE595]'
- en: '[PRE596]'
  id: totrans-822
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE596]'
- en: '[PRE597]'
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE597]'
- en: '[PRE598]'
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE598]'
- en: '[PRE599]'
  id: totrans-825
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE599]'
- en: 'Create a watcher that watches the `input3` prop for changes and binds the result
    of the `frameworkList` filter to the `watchFilterList` array. Set the immediate
    key of `input3` to `true` so it will run when the component is created:'
  id: totrans-826
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个监视器，监视`input3`属性的变化，并将`frameworkList`过滤的结果绑定到`watchFilterList`数组上。将`input3`的立即键设置为`true`，以便在组件创建时运行：
- en: '[PRE600]'
  id: totrans-827
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE600]'
- en: '[PRE601]'
  id: totrans-828
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE601]'
- en: '[PRE602]'
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE602]'
- en: '[PRE603]'
  id: totrans-830
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE603]'
- en: '[PRE604]'
  id: totrans-831
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE604]'
- en: '[PRE605]'
  id: totrans-832
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE605]'
- en: '[PRE606]'
  id: totrans-833
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE606]'
- en: '[PRE607]'
  id: totrans-834
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE607]'
- en: '[PRE608]'
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE608]'
- en: '[PRE609]'
  id: totrans-836
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE609]'
- en: '[PRE610]'
  id: totrans-837
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE610]'
- en: '[PRE611]'
  id: totrans-838
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE611]'
- en: '[PRE612]'
  id: totrans-839
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE612]'
- en: '[PRE613]'
  id: totrans-840
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE613]'
- en: '[PRE614]'
  id: totrans-841
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE614]'
- en: '[PRE615]'
  id: totrans-842
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE615]'
- en: '[PRE616]'
  id: totrans-843
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE616]'
- en: '[PRE617]'
  id: totrans-844
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE617]'
- en: 'With the help of a watcher, you should now be able to filter the third column,
    as shown in the following screenshot:'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用监视器之后，你现在应该能够过滤第三列，如下面的屏幕截图所示：
- en: '![Figure 2.22 – Filtering the list using a watcher in the third column](img/B18645_02_22.jpg)'
  id: totrans-846
  prefs: []
  type: TYPE_IMG
  zh: '![图2.22 – 在第三列使用监视器过滤列表](img/B18645_02_22.jpg)'
- en: Figure 2.22 – Filtering the list using a watcher in the third column
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.22 – 在第三列使用监视器过滤列表
- en: In this exercise, we have seen how we can achieve a filtered list using a method,
    computed props, and a watcher.
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们看到了如何使用方法、计算属性和监视器来实现过滤列表。
- en: This section briefly demonstrated the three approaches. Each approach has its
    own pros and cons, and choosing the most suitable approach to apply or to combine
    requires practice and further understanding of each use case or project goal.
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 本节简要介绍了三种方法。每种方法都有其优缺点，选择最合适的方案或组合方案需要实践和进一步理解每个用例或项目目标。
- en: In the next section, we will apply what we have learned so far in this chapter
    to create a blog list application with computed properties, methods, and watchers
    with an external data API query.
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将应用本章学到的知识，通过创建一个使用计算属性、方法和外部数据 API 查询的监视器的博客列表应用程序。
- en: Activity 2.01 – creating a blog list using the Contentful API
  id: totrans-851
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动二.01 – 使用 Contentful API 创建博客列表
- en: To access the code file for this activity, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Activity2.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Activity2.01)
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此活动的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Activity2.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter02/Activity2.01)
- en: This activity aims to leverage your knowledge regarding applying different approaches
    to working with an external data API source by building a blog that lists articles.
    This application activity will test your knowledge of Vue by using all the basic
    functions of a `async` methods to fetch remote data from an API and use computed
    properties to organize deeply nested object structures.
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 本活动旨在通过构建一个列出文章的博客来利用您关于应用不同方法与外部数据 API 源工作的知识。此应用程序活动将通过使用所有基本的 `async` 方法从
    API 获取远程数据并使用计算属性来组织深层嵌套的对象结构来测试您的 Vue 知识。
- en: '`Contentful` is a headless **content management system** (**CMS**) that allows
    you to manage content separately from your code repository. You can consume this
    content using the API inside as many code repositories as you need. For example,
    you may have a blog website that acts as a primary source of information, but
    your clients want a standalone page on a different domain that only pulls in the
    most recently featured articles. Using a headless CMS inherently allows you to
    develop these two separate code bases and use the same updated data source.'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: '`Contentful` 是一个无头 **内容管理系统**（**CMS**），允许您将内容与代码存储库分开管理。您可以使用 API 在所需的任何代码存储库中消费此内容。例如，您可能有一个作为信息主要来源的博客网站，但您的客户希望在另一个域上有一个独立的页面，该页面只拉取最近推出的文章。使用无头
    CMS 本质上允许您开发这两个独立的代码库并使用相同的数据源。'
- en: This activity will use the `Contentful` headless CMS. The access keys and endpoints
    will be listed in the solution.
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 本活动将使用 `Contentful` 无头 CMS。访问密钥和端点将列在解决方案中。
- en: 'The following steps will help you complete the activity:'
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您完成活动：
- en: Create a Vue project using the scaffolding tool with Vite as a bundle management
    tool.
  id: totrans-857
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用带有 Vite 作为打包管理工具的脚手架工具创建 Vue 项目。
- en: Install the `Contentful` dependency ([https://www.npmjs.com/package/contentful](https://www.npmjs.com/package/contentful))
    into your project using the `yarn add` `contentful` command.
  id: totrans-858
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `yarn add` 命令将 `Contentful` 依赖项（[https://www.npmjs.com/package/contentful](https://www.npmjs.com/package/contentful)）安装到您的项目中。
- en: Use computed properties to output the deeply nested data from the API response.
  id: totrans-859
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用计算属性输出 API 响应中的深层嵌套数据。
- en: Use data props to output the user’s name, job title, and description.
  id: totrans-860
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用数据属性输出用户的姓名、职位和描述。
- en: Use SCSS to style the page.
  id: totrans-861
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 SCSS 为页面添加样式。
- en: 'The expected outcome is as follows:'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 预期结果如下：
- en: '![Figure 2.23 – The expected outcome with Contentful blog posts](img/B18645_02_23.jpg)'
  id: totrans-863
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.23 – 使用 Contentful 博客文章的预期结果](img/B18645_02_23.jpg)'
- en: Figure 2.23 – The expected outcome with Contentful blog posts
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.23 – 使用 Contentful 博客文章的预期结果
- en: After the activity has been completed, you should be able to use the `async`
    methods to pull remote data from an API source into your Vue components. You will
    find that computed props are a sophisticated way of breaking down the information
    into smaller chunks of reusable data.
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 活动完成后，您应该能够使用 `async` 方法从 API 源中提取远程数据到您的 Vue 组件中。您会发现计算属性是将信息分解成更小的可重复数据块的一种复杂方式。
- en: Summary
  id: totrans-866
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you were introduced to Vue.js computed and watch properties,
    which allow you to observe and control reactive data. You also explored how to
    use methods to asynchronously fetch data from an API using the `axios` library.
    Then, you learned how to dynamically compose the received data into different
    outputs within the Vue template using computed props. The differences between
    using methods and computed and watch properties were demonstrated by building
    search functionality using each method.
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你被介绍了 Vue.js 的计算和观察属性，这些属性允许你观察和控制响应式数据。你还探索了如何使用方法通过 `axios` 库异步从 API
    获取数据。然后，你学习了如何使用计算属性在 Vue 模板中将接收到的数据动态组合成不同的输出。通过构建搜索功能，演示了使用方法和计算及观察属性之间的区别。
- en: The next chapter will cover Vite and show you how to use Vue DevTools to manage
    and debug your Vue.js applications that use these computed properties and events.
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍 Vite 并展示如何使用 Vue DevTools 来管理和调试使用这些计算属性和事件的 Vue.js 应用程序。
