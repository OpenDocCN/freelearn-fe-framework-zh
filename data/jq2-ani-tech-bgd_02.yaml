- en: Chapter 2. Image Animation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 图像动画
- en: '*In this chapter we''ll be creating a basic image rotator (slider) using jQuery
    animation functions. We''ll also be extending the functionality of our script
    to pause the animation when our users hover over the rotator. Then we''ll be adding
    previous and next links to the script to allow users the ability to scroll through
    our images at their own pace. Lastly, we''ll be adding in a pagination link, so
    that our user can page through the images in our image rotator.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本章中，我们将使用 jQuery 动画函数创建一个基本的图像轮换器（幻灯片）。我们还将扩展我们脚本的功能，以便在用户悬停在轮换器上时暂停动画。然后，我们将在脚本中添加上一页和下一页链接，以允许用户以自己的节奏滚动图像。最后，我们将添加分页链接，以便我们的用户可以翻页查看图像轮换器中的图像。*'
- en: Image animation
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像动画
- en: On your journey through the world of jQuery, you'll find that some form of content
    or image rotation is necessary at times. Image rotators are a more visually appealing
    way to display sets of images than having them displayed straight down the page.
    They can also lead to a more compact and efficient design, allow for preloading
    of content or images, and also can give us the ability to control what and when
    the user sees.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在您学习 jQuery 的过程中，您会发现有时需要某种形式的内容或图像旋转。图像轮换器比直接在页面上显示图像更具视觉吸引力。它们还可以导致更紧凑和高效的设计，允许预加载内容或图像，并且还可以使我们能够控制用户何时以及何时看到。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Image rotators are often referred to as a **slideshow**, **slider**, **scroller**,
    or **carousel**, based on the varying functionality.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图像轮换器通常被称为**幻灯片**、**滑块**、**滚动器**或**走马灯**，根据其不同的功能。
- en: 'We''ll be talking about the following animation methods in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下动画方法：
- en: '`fadeIn()`'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fadeIn()`'
- en: '`fadeOut()`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fadeOut()`'
- en: '`fadeToggle()`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fadeToggle()`'
- en: Fading animations
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渐变动画
- en: The `fadeIn()` and `fadeOut()` methods perform the least complex animations
    available via jQuery. They simply adjust the opacity of selected elements to either
    show or hide the element and can be used with no additional configuration. The
    `fadeToggle()` method is almost as simple, but does provide some basic logic to
    check the selected element's current state.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`fadeIn()` 和 `fadeOut()` 方法是通过 jQuery 实现的最简单的动画效果。它们只是简单地调整选定元素的不透明度，以显示或隐藏元素，并且可以在不需要额外配置的情况下使用。`fadeToggle()`
    方法几乎同样简单，但确实提供了一些基本逻辑来检查选定元素的当前状态。'
- en: Elements that are hidden with `display:none` will be set to their correct display
    type (either `display:block` for block-level elements or `display:inline` for
    inline elements) where possible at the start of a `fadeIn()` animation. It is
    important to note this as your CSS styles might impact the appearance of an element
    that you are fading in. An element's natural display type is used wherever possible,
    so hidden `<li>` elements are set to `display:list-item`, and hidden `<td>` elements
    are set to `display:table-cell`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `display:none` 隐藏的元素在 `fadeIn()` 动画开始时将尽可能设置为其正确的显示类型（对于块级元素为 `display:block`，对于内联元素为
    `display:inline`）。重要的是要注意这一点，因为您的 CSS 样式可能会影响您要淡入的元素的外观。尽可能使用元素的自然显示类型，因此隐藏的 `<li>`
    元素将设置为 `display:list-item`，隐藏的 `<td>` 元素将设置为 `display:table-cell`。
- en: Elements that are set to `display:block` (or are set to another display type
    but nevertheless visible on the page) will be set to `display:none` at the end
    of a `fadeOut()` animation. Elements will switch between their visible and non-visible
    states when the `fadeToggle()` method is used.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 被设置为 `display:block`（或被设置为另一种显示类型但仍然在页面上可见）的元素将在 `fadeOut()` 动画结束时设置为 `display:none`。使用
    `fadeToggle()` 方法时，元素将在其可见和不可见状态之间切换。
- en: Elements that are to be shown using the `fadeIn()` method must be initially
    hidden with `display:none` while the elements that are hidden with `visibility:hidden`
    for example, will remain hidden at the end of the animation because the fade methods
    specifically alter the `opacity` and `display` property, and not the `visibility`
    property.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `fadeIn()` 方法显示的元素必须最初使用 `display:none` 隐藏，而使用 `visibility:hidden` 等方式隐藏的元素在动画结束时将保持隐藏，因为淡入淡出方法专门修改
    `opacity` 和 `display` 属性，而不是 `visibility` 属性。
- en: 'In their simplest forms, these methods can be used without any additional configuration.
    We can simply call the methods on any collection of selected elements without
    using any arguments:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在它们最简单的形式中，这些方法可以在不使用任何额外配置的情况下使用。我们可以简单地在任何一组选定的元素上调用这些方法，而不使用任何参数：
- en: '`$(elements).fadeIn();`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$(elements).fadeIn();`'
- en: '`$(elements).fadeOut();`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$(elements).fadeOut();`'
- en: '`$(elements).fadeToggle();`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$(elements).fadeToggle();`'
- en: When no arguments are provided, the animations will have the default duration
    of 400 milliseconds and the default easing of `swing`. We'll talk about animation
    easing very shortly.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当未提供参数时，动画将具有默认持续时间400毫秒和默认缓动`swing`。我们很快会讨论动画缓动。
- en: Configuring the animations with arguments
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用参数配置动画
- en: 'With arguments, the fading methods may take the following form (square brackets
    denote optional arguments):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 带有参数的淡化方法可以采用以下形式（方括号表示可选参数）：
- en: '```js'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: $(elements).fadeIn([duration] [,easing] [,callback]);
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: $(elements).fadeIn([duration] [,easing] [,callback]);
- en: $(elements).fadeOut([duration] [,easing] [,callback]);
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: $(elements).fadeOut([duration] [,easing] [,callback]);
- en: $(elements).fadeToggle([duration] [,easing] [,callback]);
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: $(elements).fadeToggle([duration] [,easing] [,callback]);
- en: '```'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: We can control the duration of the animation using the `duration` argument to
    specify either an integer in milliseconds or strings `"slow"`, and `"fast"`. These
    strings are shortcuts for 600 and 200 milliseconds respectively. The default duration
    given if one isn't specified is 400.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`duration`参数来控制动画的持续时间，指定整数毫秒或字符串`"slow"`和`"fast"`。这些字符串是600毫秒和200毫秒的快捷方式，分别。如果未指定，则默认给出的持续时间为400。
- en: We can also supply `0` as the `duration` argument, which will effectively disable
    the animation. It's unlikely that we'd need to do this as it would be more efficient
    to not use an animation at all, but it is useful to know. I should point out that
    the fade will still occur; it will just happen over a duration of 0 milliseconds.
    Doing this would be the same as using `.hide()`, essentially.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将`duration`参数设置为`0`，这将有效地禁用动画。我们不太可能需要这样做，因为根本不使用动画会更高效，但了解这一点是有用的。我应该指出，淡出仍将发生；只是会在`0`毫秒的持续时间内发生。这样做基本上与使用`.hide()`相同。
- en: The easing argument can be changed from its default value of `swing` to `linear`,
    which causes the animation to progress at the same speed throughout the animation.
    The default, `swing`, causes the animation to start slowly, speed up slightly,
    and then slow down towards the end of the animation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 缓动参数可以从其默认值`swing`更改为`linear`，这会使动画在整个动画过程中以相同的速度进行。默认值`swing`会使动画开始缓慢，稍微加速，然后在动画结束时放慢速度。
- en: Tip
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `duration` argument relates to the length of time the animation takes to
    run and not the speed of the animation. Therefore, a higher value will mean a
    slower, longer animation and not a faster, shorter animation. The number of easing
    types can be greatly increased using plugins. We'll look at the extra easing types
    added by jQuery UI later in the book.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`duration`参数与动画运行的时间长度有关，而不是动画的速度。因此，较高的值将意味着较慢、较长的动画，而不是更快、更短的动画。使用插件可以大大增加缓动类型的数量。我们将在本书后面看到jQuery
    UI添加的额外缓动类型。'
- en: We may supply a **callback** function (either a function reference or an anonymous
    function, with the latter being more commonplace). This callback function will
    be executed after the animation ends for each element in the selection, so it
    may be triggered more than once if more than a single element is being animated.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以提供一个**回调**函数（可以是函数引用，也可以是匿名函数，后者更常见）。此回调函数将在选择集中的每个元素的动画结束后执行，因此如果有多个元素正在进行动画，可能会触发多次。
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A callback function is a function that is passed inside another function as
    a parameter.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数是作为参数传递给另一个函数内部的函数。
- en: 'The following example of callback code triggers an alert once the animation
    is complete (callback in bold):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的回调代码示例在动画完成后触发警报（回调部分加粗）：
- en: '```js'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: $(".selector").fadeOut("slow", function() { alert("callback triggered!"); });
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: $(".selector").fadeOut("slow", function() { alert("callback triggered!"); });
- en: '```'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'You''ll often see the preceding line formatted like the following block of
    code for readability:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了可读性，您经常会看到前面的行像以下代码块一样格式化：
- en: '```js'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: $(".selector").fadeOut("slow", function() {
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: $(".selector").fadeOut("slow", function() {
- en: alert("callback triggered!");
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: alert("callback triggered!");
- en: '});'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Time for action – setting up the markup and styling
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——设置标记和样式
- en: To begin with, we need to create the elements that will be used in the example
    and the styling to set their visual appearance.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建示例中将要使用的元素以及设置它们的视觉外观的样式。
- en: 'Create a new HTML document using the template file we created in [Chapter 1](ch01.html
    "Chapter 1. Getting Started"), *Getting Started*, and in between the `<body>`
    tag add the following underlying markup for our image slider:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们在[第1章](ch01.html "第1章. 入门")中创建的模板文件创建一个新的HTML文档，在`<body>`标签之间添加以下底层标记，用于我们的图像幻灯片演示：
- en: '```js'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: <div class="container">
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<div class="container">`'
- en: <div id="slider">
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<div id="slider">`'
- en: <img src="img/200?image=1">
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<img src="img/200?image=1">`'
- en: <img src="img/200?image=2">
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<img src="img/200?image=2">`'
- en: <img src="img/200?image=3">
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<img src="img/200?image=3">`'
- en: <img src="img/200?image=4">
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<img src="img/200?image=4">`'
- en: <img src="img/200?image=5">
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<img src="img/200?image=5">`'
- en: <img src="img/200?image=6">
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<img src="img/200?image=6">`'
- en: <img src="img/200?image=7">
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<img src="img/200?image=7">`'
- en: </div>
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`</div>`'
- en: </div>
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`</div>`'
- en: '```'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: Save the page in the `jquery-animation` directory as `image-rotator.html`.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将页面保存在`jquery-animation`目录下，文件名为`image-rotator.html`。
- en: We'll also need to add in our stylesheet for this example. In the HTML file
    we just created, add `image-rotator` to our placeholder stylesheet link.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要为这个示例添加样式表。在我们刚刚创建的HTML文件中，将`image-rotator`添加到我们的占位符样式表链接中。
- en: 'Next we should create the stylesheet we just linked to. In a new file, add
    the following code:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们应该创建我们刚刚链接的样式表。在一个新文件中，添加以下代码：
- en: '```js'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: .container {
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`.container {`'
- en: position:relative;
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`position:relative;`'
- en: width:200px;
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`width:200px;`'
- en: height:200px;
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: height:200px;
- en: '}'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#slider img {'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`#slider img {`'
- en: position:absolute;
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`position:absolute;`'
- en: display:none;
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`display:none;`'
- en: border-radius:3px;
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`border-radius:3px;`'
- en: '}'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '```'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: Save this file as `image-rotator.css` in the `css` folder within our project
    folder.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件保存为`image-rotator.css`，保存在我们项目文件夹中的`css`文件夹中。
- en: '*What just happened?*'
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: For this example, we'll be using seven images in our image rotator. This can
    easily be changed based on our needs by simply adding additional images to `<div
    id="slider">`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，我们将在我们的图像旋转器中使用七个图像。这可以根据我们的需求轻松更改，只需简单地将其他图像添加到`<div id="slider">`中即可。
- en: We wrapped our `#slider` element in a `<div>` element with a class of `container`
    so that we can set the dimensions of our image rotator in case all our images
    aren't of the same width and height. Also, we set `position:relative` to the `#slider`
    div so that the rotator images being set to `position:absolute` don't get removed
    from the page flow.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将我们的`#slider`元素包裹在一个类名为`container`的`<div>`元素中，这样我们可以设置我们的图像旋转器的尺寸，以防我们的所有图像的宽度和高度不同。另外，我们将`position:relative`设置为`#slider`
    div，这样被设置为`position:absolute`的旋转器图像就不会从页面流中移除。
- en: Note
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When an element is set to `position:absolute`, the element no longer holds open
    the space that it's placed in, which allows other elements behind or in front
    of it, based on the other CSS used on the surrounding elements. This is similar
    to what happens when an element is floated and it's removed from the page flow.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个元素被设置为`position:absolute`时，该元素不再保持其所在的空间，这使得其他元素可以根据周围元素上使用的其他CSS在其后面或其前面。这与浮动元素的情况相似，当浮动元素被移出页面流时。
- en: It's important to note that in some cases if an element (or group of elements)
    are set to `position:absolute` without a parent element being set to `position:relative`,
    the `position:absolute` elements could come out of their parent element, which
    would collapse the parent element.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，在某些情况下，如果一个元素（或一组元素）被设置为`position:absolute`，而没有父元素被设置为`position:relative`，那么`position:absolute`元素可能会脱离其父元素，导致父元素崩溃。
- en: The images are set to `position:absolute` because they need to stack behind
    each other so that our image rotator element doesn't jump around as the images
    are being faded in and out. This is needed because all of the images will occupy
    the same relative position on the page. However, we only want 1 image to display
    at a time. Using `display:none` will turn off the visibility on all our images.
    This is needed so that we don't have to worry about the **stacking order** of
    our images. We want a good presentation on our images so we added a small `border-radius`
    on the images to soften the corners.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图像被设置为`position:absolute`，因为它们需要在彼此之后堆叠，这样我们的图像旋转器元素在图像淡入淡出时不会跳动。这是必要的，因为所有的图像将占据页面上的同一相对位置。然而，我们只想要显示一张图像。使用`display:none`将关闭所有图像的可见性。这是必要的，这样我们就不必担心图像的**堆叠顺序**。我们希望我们的图像呈现良好，所以我们在图像上添加了一个小的`border-radius`来软化角落。
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Stack order** refers to the order in which elements are stacked on a page.
    If an element is loaded before another element, it will be before the following
    element. The stack order can be modified in CSS using `z-index`, and by adding
    `position` to an element.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**堆叠顺序** 指的是元素在页面上堆叠的顺序。如果一个元素在另一个元素之前加载，那么它将在后面的元素之前。可以通过在 CSS 中使用 `z-index`
    和为元素添加 `position` 来修改堆叠顺序。'
- en: Pop quiz – using fadeIn()
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 突然测验 —— 使用 fadeIn()
- en: Q1\. Which strings can be passed into the `fadeIn()` method as the first argument?
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. 作为 `fadeIn()` 方法的第一个参数，可以传递哪些字符串？
- en: The strings `"short"` or `"long"`, which refer to the duration of the animation.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字符串 `"short"` 或 `"long"`，它们指的是动画的持续时间。
- en: The strings `"low"` or `"high"`, which refer to the opacity that the element
    is faded to.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字符串 `"low"` 或 `"high"`，它们指的是元素淡出到的不透明度。
- en: The strings `"slow"` or `"fast"`, which refer to the duration of the animation.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字符串 `"slow"` 或 `"fast"`，它们指的是动画的持续时间。
- en: A hexadecimal string specifying `background-color` of the element
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个十六进制字符串，指定了元素的 `background-color`。
- en: Q2\. What else can be passed into the method?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. 还可以传递什么到这个方法里？
- en: A string specifying the easing function to use for the animation, and a callback
    function to be executed once the animation ends.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个字符串，指定了用于动画的缓动函数，以及在动画结束时执行的回调函数。
- en: An object containing additional configuration options.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含额外配置选项的对象。
- en: An array containing additional configuration options.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个包含额外配置选项的数组。
- en: A callback function to be executed at the start of an animation, and a callback
    function to be executed at the end of the animation.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在动画开始时执行的回调函数，以及在动画结束时执行的回调函数。
- en: Scripting the image slider
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写图片轮播脚本
- en: Next, we're going to add the finishing touches to our image rotator by adding
    the jQuery code that'll animate our images.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过添加 jQuery 代码为我们的图像旋转器添加最后的修饰。
- en: Time for action – scripting the image rotator
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 —— 编写图像旋转器
- en: 'Now let''s add the code for the script that will animate our images. Add the
    following code inside the anonymous function below the `<body>` tag:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加脚本的代码，这些代码将为我们的图像添加动画效果。在 `<body>` 标签下面的匿名函数中添加以下代码：
- en: '```js'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: var image = $("#slider img");
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: var image = $("#slider img");
- en: var numSlides = image.length;
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: var numSlides = image.length;
- en: var activeSlide = 0;
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: var activeSlide = 0;
- en: var speed = 2000;
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: var speed = 2000;
- en: var fade = 1000;
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: var fade = 1000;
- en: var timer = setInterval(rotate, speed);
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: var timer = setInterval(rotate, speed);
- en: image.eq(activeSlide).show();
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: image.eq(activeSlide).show();
- en: function rotate() {
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: function rotate() {
- en: activeSlide++;
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: activeSlide++;
- en: if (activeSlide == numSlides) {
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: if (activeSlide == numSlides) {
- en: activeSlide = 0;
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: activeSlide = 0;
- en: '}'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: image.not(activeSlide).fadeOut(fade);
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: image.not(activeSlide).fadeOut(fade);
- en: image.eq(activeSlide).fadeIn(fade);
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: image.eq(activeSlide).fadeIn(fade);
- en: '}'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: The first thing we did was we cached a reference to all the `<img>` elements
    located inside the `#slider` element. We'll be referencing it several times, so
    it is more efficient to only select it from the **Document Object Model** (**DOM**)
    once. For performance reasons, it is generally best to minimize the number of
    DOM operations that are carried out.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做的第一件事是缓存对位于 `#slider` 元素内的所有 `<img>` 元素的引用。我们将多次引用它，因此只从 **文档对象模型** (**DOM**)
    中选择一次更有效率。出于性能考虑，通常最好尽量减少执行的 DOM 操作数量。
- en: For counting the number of images we used `length()`. This counts the number
    of child elements (`<img>`) inside the parent element (`#slider`). For our example,
    we used seven images. Using the `length()` function to count the number of `<img>`
    elements, we can easily add or remove images from the image slider without altering
    the jQuery code.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `length()` 来计算图片数量。这会计算父元素 (`#slider`) 内的子元素 (`<img>`) 的数量。在我们的例子中，我们使用了七张图片。通过使用
    `length()` 函数来计算 `<img>` 元素的数量，我们可以在不更改 jQuery 代码的情况下轻松地添加或移除图片来实现图片轮播。
- en: Our `activeSlide` variable is set to `0` so that we start with the first image
    in our set. This is generally something you won't want to change unless you want
    to start on a specific image. This number can be changed to any number you like,
    as long as we have at least that number of images in our set of images.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `activeSlide` 变量设置为 `0`，以便从我们集合中的第一张图片开始。一般情况下，这是您不想更改的内容，除非您想要从特定的图片开始。只要我们的图片集合中至少有这个数量的图片，这个数字就可以更改为您喜欢的任何数字。
- en: The `activeSlide` variable represents the position within the group of elements
    we just selected. The `length()` function returns the number of elements, starting
    from `0`. In our example, `image.length()` will return `6` and therefore `activeSlide`
    can be `0` to `6` since there are seven `<img>` elements. We initialize `activeSlide`
    to `0`, so we start at the first image in the sequence. If we want to start on
    a different image, initialize `activeSlide` to that position within the group
    keeping in mind that the first position is `0` and not `1`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`activeSlide`变量表示我们刚刚选择的元素组内的位置。 `length()`函数返回元素的数量，从`0`开始。 在我们的示例中，`image.length()`将返回`6`，因此`activeSlide`可以为`0`至`6`，因为有七个`<img>`元素。
    我们将`activeSlide`初始化为`0`，因此我们从序列中的第一个图像开始。 如果我们想要从不同的图像开始，初始化`activeSlide`为该组内的位置，记住，第一个位置是`0`而不是`1`。'
- en: To set the time between each execution of the `rotate()` function, we set the
    `speed` variable to `2000` milliseconds (2 seconds). 2 seconds is a good speed
    for our example but you'll want to set it to a longer duration depending on the
    images that you're rotating. If you have text on your images that you want your
    users to read, you should set the rotation speed based on how long you think it
    will take your users to comfortably read all the text. If you have images with
    high detail in them, set the speed to something you think is a generous amount
    of time to take in all the detail. In case you have a clickable element that requires
    a "call to action", this time will need to be taken into consideration based on
    how long it takes the user to digest the information and take the action you want
    them to take.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置`rotate()`函数每次执行之间的时间，我们将`speed`变量设置为`2000`毫秒（2秒）。 对于我们的示例来说，2秒是一个很好的速度，但根据您旋转的图像而定，可能需要设置更长的持续时间。
    如果您的图像上有您希望用户阅读的文本，应基于您认为用户舒适阅读所有文本需要多长时间来设置旋转速度。 如果您的图像中有高度细节，将速度设置为您认为可以充分欣赏所有细节的时间。
    如果您有一个需要“呼吁行动”的可点击元素，那么这个时间将需要根据用户消化信息并采取您希望他们采取的行动所需要的时间来考虑。
- en: Our `fade` variable is set to `1000` (1 second) as this is a decent speed for
    fading out the images. This can be changed to fit your needs and you'll find that
    there is no standard time for it or the speed. You'll need to tailor these times
    to give your users the best possible experience on your website.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`fade`变量设置为`1000`（1秒），因为这是一个不错的淡出图像的速度。 这可以根据您的需求进行更改，您会发现没有标准时间或速度。 您需要调整这些时间，以便为您的用户在网站上提供最佳体验。
- en: The `setInterval()` (native JavaScript method) function creates a timer within
    the script which executes the function that's called every interval. In our example,
    `setInterval()` will execute the `rotate()` function, but wait to call it again
    until the amount of time specified in the `speed` variable has passed. Since `speed`
    is set to `2000`, the `rotate()` function will be executed every 2 seconds.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`setInterval()`（原生JavaScript方法）函数在脚本中创建一个计时器，在此期间执行被调用的函数。 在我们的示例中，`setInterval()`将执行`rotate()`函数，但会等待直到经过`speed`变量指定的时间量再次调用它。
    由于`speed`设置为`2000`，所以`rotate()`函数将每2秒执行一次。'
- en: Tip
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'With arguments, the `setInterval` event may take the following form:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 带有参数的，`setInterval` 事件可以采用以下形式：
- en: '`setInterval(function, duration);`'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`setInterval(function, duration);`'
- en: We then tell the script to display the active image using `show()`. Since we
    set the `activeSlide` variable to `0` initially, the first image in our set will
    be displayed first. This is needed because if you recall, in our CSS we're turning
    off the visibility of all of the images in our rotator using `display:none`. If
    you change the initial value of the `activeSlide` variable, then that image will
    be the first one to be shown when the script starts.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们告诉脚本使用`show()`来显示活动图像。 由于我们最初将`activeSlide`变量设置为`0`，所以我们设置的图像组中的第一个图像将首先显示。
    这是必要的，因为如果您回忆一下，在我们的CSS中，我们使用`display：none`关闭了旋转器中所有图像的可见性。 如果更改了`activeSlide`变量的初始值，则在脚本启动时将显示该图像。
- en: Next, we move on to the meat of our script. For our vegetarian readers, whatever
    protein equivalent you eat in your diet, Soy? Tofu? Anyway, the `rotate()` function
    is where we do most of the heavy lifting in our code. The code above the `rotate()`
    function is mostly the settings for our image rotator to use. Inside our beefy
    `rotate()` function we have a variable (`activeSlide`) that we're incrementing
    by one each time it is called. This is needed to set our active image to the next
    image in our set each time the function loops.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们转向脚本的主要部分。对于我们的素食主义读者，无论你在饮食中吃什么蛋白质等效物，豆浆？豆腐？总之，`rotate()` 函数是我们在代码中普遍进行大量工作的地方。`rotate()`
    函数上面的代码主要是设置我们的图像旋转器要使用的设置。在我们庞大的`rotate()`函数中，我们有一个变量（`activeSlide`），每次调用它时我们都会递增一次。这是为了在函数循环时将我们的活动图像设置为我们组中的下一个图像。
- en: The `if` statement is used to reset the `activeSlide` number back to `0` once
    the script has reached the last `<img>` element in the selected group.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句用于在脚本到达所选组中最后一个`<img>`元素时重置`activeSlide`编号为`0`。'
- en: Finally, we have the two most important lines in our code (arguably). We're
    using the `fadeOut()` animation function for all images that is `not()` our active
    image. Then we're using `fadeIn()` for the image that is equal to the `activeSlide`
    image. You'll notice the variable fade inside our `fadeOut()` and `fadeIn()` animations.
    This determines the speed at which the animation is performed. Along with some
    other jQuery animation functions, `"slow"` and `"fast"` can also be used—which
    is 600 and 200 milliseconds respectively.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有我们代码中最重要的两行（有人说的）。我们使用`fadeOut()`动画函数对所有非活动图像执行动画。然后，我们对等于`activeSlide`图像的图像使用`fadeIn()`。您会注意到我们的`fadeOut()`和`fadeIn()`动画中的fade变量。这决定了动画执行的速度。除了一些其他jQuery动画函数之外，“slow”和“fast”也可以使用—分别为600和200毫秒。
- en: This is a screenshot of what we just created using the previous code. You'll
    notice how the first image fades out at the same time our next image fades in.
    This effect is called **cross-fading**.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们使用之前的代码创建的截图。您会注意到第一张图像在我们的下一张图像淡入时减弱。这种效果被称为**交叉淡入**。
- en: '![What just happened?](img/9642OS_02_01.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/9642OS_02_01.jpg)'
- en: Pop quiz – length() and milliseconds
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 课堂测验 – length() 和毫秒
- en: Q1\. What does `length()` refer to?
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. `length()` 指的是什么？
- en: The character count of a variable.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 变量的字符计数。
- en: The number of elements in the object.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对象中的元素数量。
- en: The width of the object.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对象的宽度。
- en: The amount of time an animation should run for.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画运行的时间量。
- en: Q2\. How many milliseconds are there in 1 second?
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. 1秒中有多少毫秒？
- en: '10'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '10'
- en: '100'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '100'
- en: '1000'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1000'
- en: '10000'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '10000'
- en: Time for action – extending the pause-on-hover functionality
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 扩展悬停时暂停功能
- en: Pause-on-hover is necessary when your images have a lot of detail, text that
    your users need to read, or have a specific call to action that you want them
    to make. Even if you don't have need of any of those things, it's still a good
    idea to add this functionality as it allows the user to get a good look at the
    images if they wish.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的图像具有许多细节、用户需要阅读的文本或你希望他们采取的特定行动时，悬停暂停是必要的。即使你不需要这些东西中的任何一种，添加这个功能仍然是一个好主意，因为它允许用户在希望时好好查看图像。
- en: 'The following screenshot illustrates that the image rotation has stopped when
    the user hovered over the image:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图说明了当用户在图片上悬停时图像旋转停止的情况：
- en: '![Time for action – extending the pause-on-hover functionality](img/9642OS_02_02.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 – 扩展悬停时暂停功能](img/9642OS_02_02.jpg)'
- en: 'To detect when we hover on and off our image rotator so that we can pause our
    image rotator, we need to add the following code to the line below `image.eq(activeSlide).show();`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检测我们何时悬停在图像旋转器上和离开，以便我们可以暂停图像旋转器，我们需要将以下代码添加到`image.eq(activeSlide).show();`下面的行：
- en: '```js'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: $("#slider").hover(function() {
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: $("#slider").hover(function() {
- en: clearInterval(timer);
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: clearInterval(timer);
- en: '}, function() {'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '}, function() {'
- en: timer = setInterval(rotate, speed);
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: timer = setInterval(rotate, speed);
- en: '});'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We added a hover event to gain the ability to tell our script when we're hovering
    over the `#slider` element and when we've moved away from the element. We're using
    `clearInterval()` (native JavaScript method) on the `timer` variable to stop the
    timer on our rotator, effectively pausing the animation.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个悬停事件，以便告知我们的脚本当我们悬停在`#slider`元素上以及当我们离开该元素时。我们在`timer`变量上使用`clearInterval()`（原生
    JavaScript 方法）停止我们旋转器的计时器，有效暂停动画。
- en: Note
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'More about the hover event can be found here: [http://api.jquery.com/hover/](http://api.jquery.com/hover/)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于悬停事件的信息可以在这里找到：[http://api.jquery.com/hover/](http://api.jquery.com/hover/)
- en: It's important to note that `stop()` and `clearQueue()` are other methods to
    stop an animation or function from running. However, in this example, we don't
    want to use them because they stop our animations immediately. That can mean it
    will pause an animation halfway through and will display both (the current active
    and the next active) images partially faded on top of each other. Alternatively,
    we could have left the interval running and used a flag in the `rotate()` function
    to determine whether to perform the `fadeIn()` or `fadeOut()` methods.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，`stop()`和`clearQueue()`是停止动画或函数运行的其他方法。但是，在这个示例中，我们不想使用它们，因为它们会立即停止我们的动画。这意味着它会在动画进行到一半时暂停动画，并且会部分淡化显示当前活动和下一个活动的图像。或者，我们可以让间隔保持运行，并在`rotate()`函数中使用标志来确定是执行`fadeIn()`还是`fadeOut()`方法。
- en: The next line tells the script that we are no longer hovering over it and to
    resume animating the images. The timer is then reset back to what we originally
    set it to at the beginning using `setInterval` (native JavaScript method).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行告诉脚本我们不再悬停在其上，并且要恢复图像的动画。然后，使用`setInterval`（本机JavaScript方法）将计时器重置回最初设置的值。
- en: Time for action – extending the previous and next link features
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行操作的时机 - 扩展上一个和下一个链接功能
- en: 'To give your users more controls over the speed of your rotating images, we''re
    going to add next and previous links as shown in the following steps:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让用户更好地控制旋转图像的速度，我们将按照以下步骤添加上一个和下一个链接：
- en: 'We need to add the anchor tags that will be used for our previous and next
    links. To do this, add the following code between the last two `</div>` tags:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要添加用于上一个和下一个链接的锚标签。为此，请在最后两个`</div>`标签之间添加以下代码：
- en: '```js'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: <a id="prev">prev</a>
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <a id="prev">prev</a>
- en: <a id="next">next</a>
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <a id="next">next</a>
- en: '```'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: 'Our next and previous links will need some basic styling, so let''s add the
    following lines of CSS to the bottom of our `image-rotator.css` file:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的下一个和上一个链接需要一些基本的样式，所以让我们在我们的`image-rotator.css`文件的底部添加以下CSS行：
- en: '```js'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: '#prev, #next {'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#prev, #next {'
- en: position:absolute;
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: position:absolute;
- en: bottom:10px;
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bottom:10px;
- en: padding:5px 10px;
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: padding:5px 10px;
- en: color:#000;
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: color:#000;
- en: background:#FFF;
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: background:#FFF;
- en: border-radius:3px;
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: border-radius:3px;
- en: text-decoration:none;
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: text-decoration:none;
- en: opacity:0.7;
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: opacity:0.7;
- en: '}'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#prev:hover, #next:hover {'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#prev:hover, #next:hover {'
- en: opacity:1;
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: opacity:1;
- en: cursor:pointer;
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cursor:pointer;
- en: '}'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#prev {left:10px;}'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#prev {left:10px;}'
- en: '#next {right:10px;}'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#next {right:10px;}'
- en: '```'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: 'For handling the click events on the next and previous links, we''ll need to
    add the following code right above the `rotate()` function:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了处理下一个和上一个链接上的点击事件，我们需要在`rotate()`函数的上面添加以下代码：
- en: '```js'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: $("#prev").click(function(event) {
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $("#prev").click(function(event) {
- en: activeSlide--;
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: activeSlide--;
- en: rotate();
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: rotate();
- en: event.preventDefault();
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: event.preventDefault();
- en: '});'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: $("#next").click(function(event) {
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $("#next").click(function(event) {
- en: activeSlide++;
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: activeSlide++;
- en: rotate();
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: rotate();
- en: event.preventDefault();
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: event.preventDefault();
- en: '});'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add the following lines of code above `image.not(activeSlide).fadeOut(fade);`:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`image.not(activeSlide).fadeOut(fade);`上面添加以下代码行：
- en: '```js'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: if (activeSlide < 0) {
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (activeSlide < 0) {
- en: activeSlide = numSlides - 1;
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: activeSlide = numSlides - 1;
- en: '}'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: 'Update the `rotate()` function by replacing `activeSlide++` with the following
    code:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下代码替换`rotate()`函数来更新它：
- en: '```js'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: if (!pause == true) {
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (!pause == true) {
- en: activeSlide++;
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: activeSlide++;
- en: '}'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: 'Find the `hover()` function and replace it with the following code (the new
    code is highlighted):'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找`hover()`函数并用以下代码替换它（新代码已经突出显示）：
- en: '```js'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: '$("#slider, #prev, #next").hover(function() {'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '$("#slider, #prev, #next").hover(function() {'
- en: clearInterval(timer);
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: clearInterval(timer);
- en: pause = true;
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pause = true;
- en: '}, function() {'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}, function() {'
- en: timer = setInterval(rotate, speed);
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: timer = setInterval(rotate, speed);
- en: pause = false;
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pause = false;
- en: '});'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: 'The following screenshot shows that, after the next link is clicked, our image
    rotator moves to the next image:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示，在点击下一个链接后，我们的图像旋转器移动到下一个图像：
- en: '![Time for action – extending the previous and next link features](img/9642OS_02_03.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![执行操作的时机 - 扩展上一个和下一个链接功能](img/9642OS_02_03.jpg)'
- en: '*What just happened?*'
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: In the third step, we're adding in two click functions for the previous and
    next links. We are decrementing the active image number by one on the previous
    function and incrementing by one on the next function. Then we need to call the
    rotate function again so that our old image fades out and our new one fades in.
    We use `preventDefault()` (native JavaScript method) so that the previous and
    next links don't add a hashtag (**#**) to the URL in our address bar. This prevents
    the previous and next links from working like a traditional anchor tag.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三步中，我们为上一个和下一个链接添加了两个单击函数。在上一个函数中，我们将活动图像编号减一，在下一个函数中，我们将其加一。然后我们需要再次调用 rotate
    函数，以便我们的旧图像淡出，新图像淡入。我们使用 `preventDefault()`（本地 JavaScript 方法）使得上一个和下一个链接不会向我们地址栏中的
    URL 添加一个井号（**#**）。这样可以防止上一个和下一个链接像传统锚点标签一样工作。
- en: The fourth step allows us to move backwards in our image set. This `if` statement
    is similar to the `if` statement we already have in our `rotate()` function used
    to reset the active variable if it's equal to the number of images in our rotator.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 第四步允许我们在我们的图像集中向后移动。这个 `if` 语句类似于我们已经在 `rotate()` 函数中使用的 `if` 语句，用于在活动变量等于我们旋转器中的图像数时重置它。
- en: We need to change the `rotate()` function so it only increments the `active`
    image variable if our image rotator isn't being hovered over. To do this, we replaced
    the line that increments our `activeSlide` variable with an `if` statement. Using
    this `if` statement we're telling the script to only allow the `activeSlide` variable
    to increment if our user is not hovering over the image rotator.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更改 `rotate()` 函数，以便仅在我们的图像旋转器未悬停在其上时才递增 `active` 图像变量。为此，我们用一个 `if` 语句替换了递增
    `activeSlide` 变量的行。使用此 `if` 语句，我们告诉脚本仅在用户未悬停在图像旋转器上时才允许 `activeSlide` 变量递增。
- en: We'll need to add in our next and previous links to the pause-on-hover function
    so that the image rotation will pause when you hover over those as well. This
    can be achieved by adding a comma after `#slider`, and adding in our `#next` and
    `#previous` ID selectors. We're setting the `pause` variable to a Boolean value
    of `true` or `false` based on whether or not we've triggered the `hover` event.
    This is needed to tell the `rotate` function to only increment the `activeSlide`
    variable if we are not hovering over it. To tell our script we are hovering over
    it, we're setting the variable `pause` to a value of `true`. Then we set it to
    `false` once our cursor leaves the image rotator.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在暂停悬停功能中添加下一个和上一个链接，这样当您悬停在上面时，图像旋转也会暂停。这可以通过在 `#slider` 后面添加逗号，并添加我们的 `#next`
    和 `#previous` ID 选择器来实现。我们将 `pause` 变量设置为基于我们是否触发了 `hover` 事件的布尔值 `true` 或 `false`。这是告诉
    `rotate` 函数仅在我们没有悬停在其上时才递增 `activeSlide` 变量所需的。为了告诉我们的脚本我们正在悬停在其上，我们将变量 `pause`
    设置为值 `true`。然后一旦我们的光标离开图像旋转器，我们就将其设置为 `false`。
- en: Pop quiz – preventDefault() and setInterval()
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速测验 – preventDefault() 和 setInterval()
- en: Q1\. What is `preventDefault()` used for?
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. `preventDefault()` 用于什么？
- en: Preventing the script from defaulting variables in the function.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 防止脚本在函数中默认变量。
- en: Preventing the default action on an event it's used on.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 防止事件的默认操作被使用时。
- en: Turning off all JavaScript errors in the function that it's used in.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其所在的函数中关闭所有 JavaScript 错误。
- en: Turning off JavaScript errors for variables that return a value of null.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭返回空值的变量的 JavaScript 错误。
- en: Q2\. What are the two arguments for the `setInterval()` method that need to
    be used?
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. `setInterval()` 方法需要使用的两个参数是什么？
- en: '`speed` and `time`'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`speed` 和 `time`'
- en: '`function` and `duration`'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`function` 和 `duration`'
- en: '`duration` and `speed`'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`duration` 和 `speed`'
- en: '`speed` and `function`'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`speed` 和 `function`'
- en: Time for action – extending the pagination functionality
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 扩展分页功能
- en: 'To give our users even more control over our image rotator, we''re going to
    add what''s called **pagination**. Pagination allows you to move directly to a
    specific image in our rotator instead of having to click the next and previous
    links until we find the image we''re looking for. This function is very helpful
    if we have a large number of images in our image rotator. To add pagination we
    perform the following steps:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们的用户更多地控制我们的图像旋转器，我们将添加所谓的**分页**。分页允许您直接移动到我们旋转器中的特定图像，而不必点击下一个和上一个链接，直到找到所需的图像。如果我们的图像旋转器中有大量图像，此功能非常有用。为了添加分页，我们执行以下步骤：
- en: 'Let''s start by adding the following code to `image-rotator.css`:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先将以下代码添加到 `image-rotator.css` 中：
- en: '```js'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: '#pagination {'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '#pagination {'
- en: position:absolute;
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: position:absolute;
- en: top:10px;
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: top:10px;
- en: width:100%;
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: width:100%;
- en: text-align:center;
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: text-align:center;
- en: '}'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '#pagination a {'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '#pagination a {'
- en: padding:2px 5px;
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: padding:2px 5px;
- en: color:#000;
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: color:#000;
- en: background:#FFF;
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: background:#FFF;
- en: border-radius:3px;
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: border-radius:3px;
- en: text-decoration:none;
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: text-decoration:none;
- en: opacity:0.7;
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: opacity:0.7;
- en: '}'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '#pagination a:hover {'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '#pagination a:hover {'
- en: opacity:1;
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: opacity:1;
- en: cursor:pointer;
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: cursor:pointer;
- en: '}'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `image-rotator.html`, add the following line directly under `var pause;`:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `image-rotator.html` 中，在 `var pause;` 下方直接添加以下行：
- en: '```js'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: var paging = "";
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var paging = "";
- en: '```'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: 'In our HTML, we need to add the following code under `<a id="next" href="#">next</a>`:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 HTML 中，在 `<a id="next" href="#">next</a>` 下面添加以下代码：
- en: '```js'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: <div id="pagination"></div>
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div id="pagination"></div>
- en: '```'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: 'Place the following code below `image.eq(activeSlide).show();`:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `image.eq(activeSlide).show();` 下面放置以下代码：
- en: '```js'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: for (var page = 0; page < numSlides; page++) {
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: for (var page = 0; page < numSlides; page++) {
- en: paging += "<a rel=\"" + (page + 1) + "\">" + (page + 1) + "</a>\n";
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: paging += "<a rel=\"" + (page + 1) + "\">" + (page + 1) + "</a>\n";
- en: '}'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: $("#pagination").html(paging);
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $("#pagination").html(paging);
- en: '```'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: 'Find the `hover` event below and replace it with the following code (new code
    is highlighted):'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到下面的 `hover` 事件，并用以下代码替换（新代码已突出显示）：
- en: '```js'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: '$("#slider, #prev, #next, #pagination").hover(function() {'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '$("#slider, #prev, #next, #pagination").hover(function() {'
- en: clearInterval(timer);
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: clearInterval(timer);
- en: pause = true;
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pause = true;
- en: '}, function() {'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}, function() {'
- en: timer = setInterval(rotate, speed);
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: timer = setInterval(rotate, speed);
- en: pause = false;
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pause = false;
- en: '});'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add the following code directly above our `rotate()` function:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 `rotate()` 函数上方直接添加以下代码：
- en: '```js'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: $("#pagination a").click(function(event) {
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $("#pagination a").click(function(event) {
- en: event.preventDefault();
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: event.preventDefault();
- en: activeSlide = $(this).attr("rel") - 1;
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: activeSlide = $(this).attr("rel") - 1;
- en: rotate();
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: rotate();
- en: '});'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: 'The following screenshot illustrates the pagination feature we added, along
    with the fourth image displayed after clicking on the respective link:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图说明了我们添加的分页功能，以及在点击相应链接后显示的第四张图像：
- en: '![Time for action – extending the pagination functionality](img/9642OS_02_04.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![执行动作-扩展分页功能](img/9642OS_02_04.jpg)'
- en: '*What just happened?*'
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: The first thing we did was declare and set the new paging variable. Without
    this, we'll get nasty JavaScript errors in our code.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做的第一件事是声明并设置新的分页变量。如果没有这个变量，我们的代码将会出现严重的 JavaScript 错误。
- en: Using a `for` loop, we defined our page variable, telling it to continue looping
    until `page` is less than the number of images in our set and then increment that
    newly defined variable by one using `++`. The next line is the most complicated
    bit of code in our script so far, so stick with me! A variable followed by `+=`
    tells the variable to use what's already stored inside and to continue adding
    on to the end. This method of stringing together values or strings is called **concatenation**.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `for` 循环，我们定义了我们的 `page` 变量，告诉它继续循环直到 `page` 小于我们集合中的图像数量，然后使用 `++` 递增这个新定义的变量。下一行是到目前为止我们脚本中最复杂的代码，所以请跟着我走！一个变量后面跟着
    `+=` 告诉变量使用已经存储的内容，并继续添加到末尾。这种将值或字符串串在一起的方法称为 **串联**。
- en: We then need to build the HTML structure of the pagination links. We're building
    a series of seven `<a>` tags, one for each image in our group. To print the image
    numbers on the links, we'll use `(page + 1)`. We're using `+ 1` because JavaScript
    numbers things on what's called a **zero-index** or **zero-based numbering**,
    which means instead of starting at 1 when numbering a group or list of items,
    it starts with 0\. This hasn't been a problem until now (because we weren't printing
    out the value), but we now need to tell our script to start at 1 so that it displays
    the pagination links properly. The last line of the `for` loop replaces the contents
    of `#pagination` and replaces it with the value stored inside the `paging` variable
    using `html()`.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们需要构建分页链接的 HTML 结构。我们正在构建一系列七个 `<a>` 标签，每个标签对应我们组中的一个图像。为了在链接上打印图像编号，我们将使用
    `(page + 1)`。我们使用 `+ 1` 是因为 JavaScript 以所谓的 **零索引** 或 **基于零的编号** 对事物进行编号，这意味着在对组或列表中的项目进行编号时，它不是从
    1 开始，而是从 0 开始。直到现在这没有成为问题（因为我们没有打印出值），但现在我们需要告诉我们的脚本从 1 开始，以便正确显示分页链接。`for` 循环的最后一行用
    `html()` 替换 `#pagination` 的内容，并用 `paging` 变量内部存储的值替换它。
- en: Note
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: The `html()` method is used to get or set the HTML contents on the selected
    element(s).
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`html()` 方法用于获取或设置所选元素的 HTML 内容。'
- en: Again, we need to expand our pause-on-hover function to know to pause when we're
    hovering over our new `#pagination` element. If we don't do this, when you hover
    over the `#pagination` div, the images would continue to rotate.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们需要扩展我们的鼠标悬停暂停功能，以便在悬停在新的 `#pagination` 元素上时知道要暂停。如果不这样做，当您悬停在 `#pagination`
    div 上时，图像会继续旋转。
- en: We added another click function (`$("#pagination a").click`) to handle our pagination
    links. You'll notice the same `preventDefault()` we used before so that our links
    don't add the hashtag (#) to our page URL when clicking on the pagination links.
    The next line sets the `activeSlide` variable to the value of `rel` in our pagination
    anchor tag and then subtracts by one. This is done because we set it to increment
    by one to offset the zero-index problem we saw in the third step.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了另一个点击函数（`$("#pagination a").click`）来处理我们的分页链接。您会注意到我们之前使用的`preventDefault()`以确保在点击分页链接时不会向页面
    URL 中添加井号（#）。下一行将`activeSlide`变量设置为分页锚点标签中`rel`的值，然后减去一。这样做是因为我们将其设置为增加一，以抵消我们在第三步中看到的零索引问题。
- en: Finally, we added in the containing `<div>` element that'll hold all of our
    pagination links.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们添加了包含所有分页链接的 `<div>` 元素。
- en: Have a Go Hero – extending the image rotator further
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试进一步扩展图片轮播器
- en: In this example, we used `fadeIn()` and `fadeOut()` to rotate our images. Have
    a go at extending the example so that the script can detect the child elements
    that should be animated.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们使用 `fadeIn()` 和 `fadeOut()` 来轮换我们的图像。尝试扩展示例，使脚本能够检测应该进行动画处理的子元素。
- en: 'Other ideas for extending the image rotator:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展图片轮播的其他想法：
- en: Have the script to set the child element dimensions dynamically, allowing the
    script to scale to fit the content
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让脚本动态设置子元素的尺寸，使脚本能够按比例缩放以适应内容。
- en: Building the ability to show more than one element at a time
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建能够同时显示多个元素的功能
- en: Giving the current active link in the pagination bar a different look so that
    our user knows which image the rotator is currently on
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为分页栏中的当前活动链接提供不同的外观，以便我们的用户知道轮播器当前显示的是哪张图像。
- en: Adding in additional transition effects (for example, slide)
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加额外的过渡效果（例如，滑动）。
- en: Pop quiz – altering variables and zero index
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小测验 - 更改变量和零索引
- en: Q1\. What does using `++` after a variable do?
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. 在变量后使用 `++` 是什么意思？
- en: Merges the values of two variables together.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 合并两个变量的值。
- en: Tells the script to only allow adding to the variable and not subtracting.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉脚本只允许向变量添加，而不允许减去。
- en: Increments the variable by one.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将变量增加一个。
- en: Increments the variable by two.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将变量增加两个。
- en: Q2\. What does **zero-index** mean?
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. **零索引**是什么意思？
- en: That JavaScript counts starting with zero.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JavaScript 是从零开始计数的。
- en: That a variable's default value is zero if not specifically defined.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果未明确定义，变量的默认值为零。
- en: A method in which an element's index is set to zero.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将元素的索引设置为零的方法。
- en: A method to set a variable's value to zero after being used.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用后将变量的值设置为零的方法。
- en: Summary
  id: totrans-328
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at some of jQuery's most basic animation methods.
    The fade methods are the simplest animation methods found in jQuery, only animating
    the opacity of the selected element(s).
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一些 jQuery 最基本的动画方法。淡入淡出方法是 jQuery 中最简单的动画方法，只会动画选定元素的不透明度。
- en: The `show()`, `hide()`, and `toggle()` methods can also be used to perform animations
    but alter the dimensions of the element as well as its opacity. All of these methods
    are simple to use and require little or no additional configuration in order to
    run.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`show()`、`hide()` 和 `toggle()` 方法也可用于执行动画，但会改变元素的尺寸以及不透明度。所有这些方法都简单易用，几乎不需要额外的配置即可运行。'
- en: In the next chapter, we'll learn how to manipulate the background properties
    on elements to create background animations.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何操纵元素的背景属性以创建背景动画。
