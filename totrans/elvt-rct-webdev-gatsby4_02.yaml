- en: '*Chapter 1*: An Overview of Gatsby.js for the Uninitiated'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第一章*：Gatsby.js入门概述'
- en: In this book, we will take your existing React knowledge and supplement it with
    Gatsby.js (which we will refer to as Gatsby from now on) to create performant
    and accessible static sites. I hope to give you the tools you need to create better
    websites using Gatsby and get you to join the static site revolution. So, *happy
    hacking!*
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将利用你现有的React知识，并补充Gatsby.js（从现在起我们将称之为Gatsby）的知识，以创建性能优异且易于访问的静态网站。我希望给你提供使用Gatsby创建更好网站的工具，并让你加入静态网站革命。所以，*祝你好运*！
- en: This chapter starts with a brief historical look at the static web and why Gatsby
    was created. Then, we'll think about what Gatsby is and how it builds on React.
    Next, we'll go through some of the use cases of Gatsby and identify Gatsby's competitors.
    Finally, we'll set up a basic Gatsby project, having created our first few pages.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将从静态网页的简要历史和Gatsby的创建原因开始。然后，我们将思考Gatsby是什么以及它是如何建立在React之上的。接下来，我们将探讨Gatsby的一些用例，并确定Gatsby的竞争对手。最后，我们将设置一个基本的Gatsby项目，创建了我们的一些页面。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: A brief history of the static web
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态网页的简要历史
- en: What is Gatsby?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gatsby是什么？
- en: Gatsby use cases
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gatsby用例
- en: Gatsby's competitors
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gatsby的竞争对手
- en: Setting up a project
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置项目
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code present in this chapter can be found at [https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter01](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter01).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的代码可以在[https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter01](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter01)找到。
- en: A brief history of the static web
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态网页的简要历史
- en: Static sites have been around nearly as long as the internet itself. They are
    the original blueprint for any website – **HyperText Markup Language** (**HTML**),
    **Cascading Style Sheets** (**CSS**), and **JavaScript** (**JS**). In the 1990s,
    HTML was the only publishing mechanism for the web. To get content on the internet,
    you would have to create a static HTML file and expose it to the internet via
    a server. If you wanted to modify one of your web pages, you would need to change
    its corresponding HTML file directly.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 静态网站几乎与互联网本身一样历史悠久。它们是任何网站的原始蓝图——**超文本标记语言**（**HTML**）、**层叠样式表**（**CSS**）和**JavaScript**（**JS**）。在20世纪90年代，HTML是互联网上唯一的发布机制。要将内容发布到互联网上，你必须创建一个静态HTML文件，并通过服务器将其暴露给互联网。如果你想修改你的网页之一，你需要直接更改其相应的HTML文件。
- en: While learning HTML is part of primary education these days, back in the 1990s,
    it was a novel skill to understand and write the language. Creating or editing
    content was costly, as you would require someone with this skill set for every
    modification. Luckily, **Content Management Systems** (**CMSes**) (WordPress,
    Drupal, and so on) soon swooped in to allow non-technical users to control a webpage's
    design and content. It also gave users the ability to store and manage files via
    a user interface. CMSs continue to be utilized today with increasing popularity.
    The number of websites using a CMS has risen from 23.6% to 63% in the last decade.
    Over 75 million sites use WordPress today – that's 30% of the web!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然如今学习HTML是基础教育的一部分，但在20世纪90年代，理解和编写这种语言是一项新颖的技能。创建或编辑内容成本高昂，因为每次修改都需要具备这种技能的人。幸运的是，**内容管理系统**（**CMS**）（WordPress、Drupal等）很快出现，允许非技术用户控制网页的设计和内容。它还使用户能够通过用户界面存储和管理文件。CMS今天仍然被广泛使用，并且越来越受欢迎。在过去十年中，使用CMS的网站数量从23.6%增长到63%。今天，超过7500万个网站使用WordPress——这占到了整个网络的30%！
- en: At an almost identical pace, frontend frameworks and libraries have gained notoriety.
    Building single-page applications became commonplace. Today, the most dominant
    UI library in the JS world is Facebook's React.js, which is a small library with
    a handful of functions but some big ideas – a virtual DOM, **JavaScript Syntax
    Extension** (**JSX**), and componentization. There is no denying how much impact
    React has had on web development. In 2020, 80% of JS developers had used it, and
    70% of JS developers said they would use it again.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 前端框架和库几乎以相同的速度获得了知名度。构建单页应用变得司空见惯。如今，在JS世界中最为流行的UI库是Facebook的React.js，这是一个功能有限的库，但包含了一些重大理念——虚拟DOM、**JavaScript语法扩展**（**JSX**）和组件化。无法否认React对Web开发产生了多大的影响。在2020年，80%的JS开发者使用过它，70%的JS开发者表示他们还会再次使用它。
- en: Frontend frameworks have entirely changed how developers approach web development,
    giving them the flexibility to focus on functionality over content and drastically
    speeding up their workflows. But you're only as fast as your slowest team member.
    The clunky nature of CMS platforms was revealed when developers started to employ
    these frameworks and integrate them with CMSs. Traditional CMS workflows made
    use of databases and environments that frontend frameworks had removed from the
    equation. Combining this with CMS security and bottleneck issues led to the rebirth
    of static sites.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 前端框架已经彻底改变了开发者对待Web开发的方式，使他们能够专注于功能而非内容，并极大地加快了他们的工作流程。但你的速度取决于最慢的团队成员。当开发者开始使用这些框架并将它们与CMS集成时，CMS平台的笨拙性质暴露无遗。传统的CMS工作流程使用了前端框架从等式中移除的数据库和环境。结合CMS的安全性和瓶颈问题，导致了静态网站的复兴。
- en: Kyle Mathews, the founder of Gatsby, was a catalyst for this trend. He noticed
    that the expectations on website accessibility and performance increased dramatically.
    He observed apps investing millions of dollars in user experience. There is no
    denying that the disparity between a 2005 and 2015 website was significant. In
    a competitive environment such as the web, you have to have a product that can
    stand out. Mathews took a step back, identified gaps in existing tooling, and
    asked what the ideal product might be. This research is what led him to create
    Gatsby.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Gatsby的创始人Kyle Mathews是这一趋势的催化剂。他注意到对网站可访问性和性能的期望急剧增加。他观察到应用程序投入数百万美元用于用户体验。不可否认，2005年和2015年网站之间的差异是显著的。在像网络这样的竞争环境中，你必须有一个能够脱颖而出的产品。Mathews退后一步，识别了现有工具中的差距，并思考理想的产品可能是什么。这项研究引导他创建了Gatsby。
- en: It's almost poetic that we have gone full circle and returned to static content
    because there is no beating it when it comes to speed and performance.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎回到了起点，重新回到了静态内容，这在速度和性能方面是无与伦比的。
- en: What is Gatsby?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Gatsby？
- en: Gatsby is a free, open source static site generator that harnesses React. Static
    site generators are software applications that create static pages from a template
    or component and supplement them with content from a source. Static site generators
    are an alternative to a more traditional database-driven CMS, such as WordPress.
    In these conventional systems, content is managed and stored in a database. When
    the server receives a particular URL request, the server retrieves data from the
    database, mixes it with a template file, and generates an HTML page as its response.
    Generating HTML on demand can be a time-consuming process and can leave the user
    twiddling their thumbs or, worse, leaving your site. Bounce rates (the percentage
    of visitors to a particular website who navigate away from the site after viewing
    only one page) hover below 10% for websites that take less than 3 seconds to load,
    but the number jumps to 24% for a 4-second load time and 38% for a 5-second load
    time.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Gatsby是一个免费的开源静态站点生成器，它利用React。静态站点生成器是创建静态页面并从源中补充内容的软件应用程序。静态站点生成器是传统数据库驱动的CMS（如WordPress）的替代品。在这些传统系统中，内容在数据库中管理和存储。当服务器接收到特定的URL请求时，服务器从数据库检索数据，将其与模板文件混合，并生成一个HTML页面作为响应。按需生成HTML可能是一个耗时的过程，可能会让用户无所事事，或者更糟糕的是，离开你的网站。对于加载时间少于3秒的网站，跳出率（在特定网站上查看过一页后离开的访问者的百分比）低于10%，但对于加载时间为4秒的网站，跳出率跃升至24%，对于加载时间为5秒的网站，跳出率高达38%。
- en: Static site generators like Gatsby, on the other hand, generate pages during
    a build process. During this process, Gatsby brings in data to its GraphQL layer,
    where it can be queried in pages and templates. The requested data is then stored
    in JSON and accessed by the built pages, which are composed of HTML, JS, and CSS
    files. A user can deploy these generated pages to a server. When it receives a
    request, the server responds with predetermined, static, rendered HTML. As these
    static pages are generated at build time, they eliminate the latency that databases
    would introduce. You can even do away with web servers altogether and have your
    site served via a CDN pointing to a storage medium, such as an AWS **Simple Storage
    Service** (**S3**) bucket. The difference is striking; web experiences built with
    Gatsby are lightning fast, as nothing can be faster than sending static content.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，像 Gatsby 这样的静态网站生成器在构建过程中生成页面。在这个过程中，Gatsby 将数据引入其 GraphQL 层，在那里可以在页面和模板中进行查询。请求的数据随后以
    JSON 格式存储，并由构建的页面访问，这些页面由 HTML、JS 和 CSS 文件组成。用户可以将这些生成的页面部署到服务器。当它收到请求时，服务器会以预定的、静态的、渲染的
    HTML 响应。由于这些静态页面是在构建时生成的，因此它们消除了数据库会引入的延迟。你甚至可以完全放弃使用网络服务器，并通过指向存储介质（如 AWS **简单存储服务**（**S3**）存储桶的
    CDN 来提供你的网站。这种差异是显著的；使用 Gatsby 构建的网站体验非常快，因为没有什么比发送静态内容更快了。
- en: Important Note
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: A static site can contain dynamic and exciting experiences! It is a common misconception
    that "static" means the site is stationary. This could not be further from the
    truth. The word "static" only refers to the manner in which files are retrieved
    by a client.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个静态网站可以包含动态和令人兴奋的体验！一个常见的误解是“静态”意味着网站是静止的。这离事实相差甚远。单词“静态”仅指客户端检索文件的方式。
- en: While Gatsby is known for static site generation, recent versions also include
    server-side and deferred static generation, rendering functionality for when static
    generation is not enough.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Gatsby 以静态网站生成而闻名，但最新版本也包括了服务器端和延迟静态生成，为当静态生成不足时提供了渲染功能。
- en: Aside from creating a blazing-fast user experience, Gatsby also has a focus
    on developer experience. As we learn and build, I'm sure you will start to recognize
    how easy it is to use. The way it achieves this can be broken down into four steps.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除了创建一个飞快的用户体验外，Gatsby 还注重开发者体验。随着我们学习和构建，我相信你们会开始认识到使用它的简便性。它实现这一点的步骤可以分解为四个步骤。
- en: Community
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社区
- en: Gatsby has an incredibly supportive community backing. At the time of writing,
    over 3,600 people have contributed to the Gatsby repository. This is further amplified
    by the plugin ecosystem surrounding Gatsby; the community has created more than
    2,000+ plugins that abstract complex functionality that other developers may wish
    to use in their own projects. These plugins are distributed as packages stored
    on a JS repository, such as **NPM**, that can be added to your project in a few
    lines. They can extend your site by sourcing content, transforming data, creating
    pages, or theming your application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Gatsby 拥有一个极其支持性的社区。在撰写本文时，已有超过 3,600 人为 Gatsby 仓库做出了贡献。这还通过围绕 Gatsby 的插件生态系统得到了进一步的放大；社区已经创建了
    2,000 多个插件，这些插件抽象了其他开发者可能在他们的项目中希望使用的复杂功能。这些插件作为存储在 JS 仓库（如 **NPM**）上的包进行分发，可以在几行代码内添加到你的项目中。它们可以通过获取内容、转换数据、创建页面或为主题化应用程序来扩展你的网站。
- en: Sourcing content from anywhere
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从任何地方获取内容
- en: Every day, the amount of data we need to combine to create experiences is rising.
    In traditional React applications, managing multiple sources of data could become
    a nightmare. Storing, massaging, merging, and querying data all require complex
    solutions that struggle to scale.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每天我们需要组合的数据量以创建体验正在增加。在传统的 React 应用程序中，管理多个数据源可能会变得是一场噩梦。存储、处理、合并和查询数据都需要复杂的解决方案，而这些解决方案难以扩展。
- en: Gatsby does this differently. Whether you are sourcing data from a CMS, real-time
    database, or even a custom **Application Programming Interface** (**API**), you
    can merge all of this data into a unified data layer. The Gatsby community is
    constantly contributing source plugins to allow you to ingest data from your favorite
    sources with ease. Nine times out of ten, you won't need to write a single line
    of code to source your data, but for the times when you do, we will be covering
    plugin creation in [*Chapter 10*](B15983_10_ePub_RK.xhtml#_idTextAnchor141), *Creating
    Gatsby Plugins*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Gatsby以不同的方式做到这一点。无论你是从内容管理系统（CMS）、实时数据库，还是甚至自定义**应用程序编程接口**（**API**）中获取数据，你都可以将这些数据合并到一个统一的数据层中。Gatsby社区不断贡献源插件，让你能够轻松地从你喜欢的来源获取数据。十有八九，你不需要写一行代码来获取你的数据，但在你需要的时候，我们将在[*第10章*](B15983_10_ePub_RK.xhtml#_idTextAnchor141)，*创建Gatsby插件*中介绍插件创建。
- en: Once ingested into this data layer, we can explore and query all our sources
    of data in one place using a uniform data layer. Using the power of GraphQL, we
    can query our data in the same way when rendering pages regardless of their source.
    The GraphQL layer is transitory and doesn't exist after the application has been
    built, so doesn't affect the size of your production site. If GraphQL is something
    new to you, don't worry – I will be explaining how it works in [*Chapter 3*](B15983_03_ePub_RK.xhtml#_idTextAnchor057),
    *Sourcing and Querying Data (from Anywhere!)*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据被整合到这个数据层中，我们就可以在一个统一的数据层中探索和查询我们所有的数据源。利用GraphQL的力量，无论数据的来源如何，我们都可以以相同的方式查询数据来渲染页面。GraphQL层是临时的，在应用程序构建完成后就不存在了，因此不会影响你生产网站的尺寸。如果你对GraphQL还不太熟悉，不要担心——我将在[*第3章*](B15983_03_ePub_RK.xhtml#_idTextAnchor057)，*数据来源与查询（来自任何地方！）*中解释它是如何工作的。
- en: Building tooling you already know
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建你已知的工具
- en: Often when we approach new technologies, we are faced with a steep learning
    curve as we understand new syntax and ways of thinking. In Gatsby, we build on
    your existing knowledge of React instead of starting from scratch. Underpinning
    all of our code is the same React component model many of you already know. You
    should feel pretty confident from the beginning, as the code should look familiar,
    and if you're not, Gatsby can also help you learn React from a more "content-driven"
    approach.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通常当我们接触新技术时，我们会面临一个陡峭的学习曲线，因为我们需要理解新的语法和思维方式。在Gatsby中，我们基于你现有的React知识来构建，而不是从头开始。支撑我们所有代码的是许多你已经熟悉的相同的React组件模型。你应该从一开始就感到相当自信，因为代码看起来应该是熟悉的，如果你不熟悉，Gatsby也可以帮助你通过更“内容驱动”的方法来学习React。
- en: Supercharging web performance
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提升网页性能
- en: As web developers, we can spend considerable time tinkering with websites to
    squeeze every ounce out of their performance. Sometimes, this can take as long,
    if not longer, than building the design. Also, performance gains can sometimes
    be undone instantly by a change to the site design outside of your control. It's
    because of this that some large organizations have dedicated teams to improve
    site performance. But it doesn't have to be this way! As we start to build together,
    you will see that load times go from seconds to milliseconds, and your site will
    feel far more responsive than a conventional React app. Gatsby has plenty of tricks
    up its sleeve that improve performance, some of which we will touch on at the
    end of this chapter. It also turns your site into a **Progressive Web App** (**PWA**)
    with just a few lines of code – if that's not cool, I don't know what is!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 作为网页开发者，我们可以花费相当多的时间调整网站，以榨取它们的性能。有时，这可能会花费与构建设计一样多的时间，甚至更长。此外，性能的提升有时可能会因为超出你控制之外的网站设计变化而瞬间消失。正因为如此，一些大型组织有专门的团队来提高网站性能。但不必非得这样！当我们开始一起构建时，你会发现加载时间从秒级变为毫秒级，你的网站将比传统的React应用感觉更加响应。Gatsby有很多提高性能的技巧，其中一些我们将在本章末尾涉及。它还可以用几行代码将你的网站转变为**渐进式Web应用**（**PWA**）——如果这还不够酷，我不知道还有什么更酷的！
- en: Important Note
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: An essential distinction between Gatsby and React is that Gatsby is a "framework,"
    not a "library." When using a library, you control your application flow; you
    call it when you need it. When using a framework, however, there is an inversion
    of control. Frameworks command that you adhere to a particular flow and layout
    defined by them. Working within a framework can often be seen as a benefit, as
    any developer familiar with the framework will know where to find relevant files
    and code.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Gatsby与React之间一个基本的区别是，Gatsby是一个“框架”，而不是一个“库”。当使用库时，您控制应用程序的流程；您在需要时调用它。然而，当使用框架时，控制权发生了反转。框架要求您遵循它们定义的特定流程和布局。在框架内工作通常被视为一种优势，因为熟悉该框架的任何开发者都知道在哪里找到相关的文件和代码。
- en: I hope you are beginning to see some of the great reasons why Gatsby is such
    a powerful tool. Let's now see it in action.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望您已经开始看到一些Gatsby之所以如此强大的原因。现在让我们看看它的实际应用。
- en: Gatsby use cases
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gatsby用例
- en: You might be starting to realize that Gatsby could have applications across
    many different kinds of websites. Since Gatsby's v1 launch in 2017, the framework
    has been used in a multitude of different ways by companies both big and small.
    Here, I want to highlight some examples of use cases where Gatsby excels and suggest
    why companies may have chosen Gatsby for these sites.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能开始意识到Gatsby可以应用于许多不同类型的网站。自2017年Gatsby v1版本发布以来，这个框架已经被大小公司以多种不同的方式使用。在这里，我想强调一些Gatsby表现优异的用例，并建议为什么公司可能选择Gatsby来构建这些网站。
- en: Tip
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: While reading about these example sites here is great, I highly encourage you
    to visit them via your own device. One of Gatsby's best features is the speed
    of the sites it creates, and it is essential to experience this for yourself to
    understand the benefit.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在这里阅读这些示例网站很好，但我强烈建议您通过自己的设备访问它们。Gatsby的最好特性之一是它创建的网站速度，亲自体验这一点对于理解其优势至关重要。
- en: Documentation sites
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档网站
- en: 'Documentation sites are a perfect use case for Gatsby as their content is primarily,
    if not entirely, static. Their content does not shift often either, with pages
    needing infrequent updates. Their static nature means that we can generate all
    page routes during the build process and load them onto a CDN, meaning that when
    a page is requested, the request is near-instant. It is for this reason that you
    see sites such as the official React documentation ([https://reactjs.org](https://reactjs.org))
    being made with Gatsby:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 文档网站是Gatsby的完美用例，因为它们的内容主要是静态的，如果不是全部的话。它们的内容也不经常变动，页面需要不频繁的更新。它们的静态性质意味着我们可以在构建过程中生成所有页面路由并将它们加载到CDN上，这意味着当请求页面时，请求几乎是瞬时的。这就是为什么您会看到像官方React文档([https://reactjs.org](https://reactjs.org))这样的网站是用Gatsby制作的：
- en: '![Figure 1.1 – The React documentation website'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.1 – React文档网站'
- en: '](img/B15983_01_01.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15983_01_01.jpg)'
- en: Figure 1.1 – The React documentation website
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – React文档网站
- en: Due to the infrequent nature of updates to documentation pages, you can automate
    the build and deployment of your site as and when changes to documentation are
    made. With GitHub integrations or webhooks, you can get your documentation site
    to redeploy each change to a master branch or on a daily basis, for example. We
    will be exploring how to create these kinds of processes in [*Chapter 9*](B15983_09_ePub_RK.xhtml#_idTextAnchor127),
    *Deployment and Hosting*.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 由于文档页面的更新频率较低，您可以在文档更新时自动构建和部署您的网站。通过GitHub集成或webhooks，您可以让您的文档网站在每次对主分支或每日进行更改时重新部署。我们将在[*第9章*](B15983_09_ePub_RK.xhtml#_idTextAnchor127)，“部署和托管”中探讨如何创建这类流程。
- en: Online courses
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在线课程
- en: Online courses often have a unique structure – the majority of their content
    is in static learning modules, but they also require a small quantity of authenticated
    routes for logged-in user experiences.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在线课程通常具有独特的结构——它们的大部分内容都在静态学习模块中，但它们也需要少量经过身份验证的路由，以提供登录用户的体验。
- en: 'Websites such as *DesignCode.io* ([https://designcode.io/courses](https://designcode.io/courses))
    utilize Gatsby for their static content, meaning their static pages are incredibly
    performant, and they then render authenticated routes on the client. While this
    does increase bundle size, as they need to ship more JS, the benefit of the fast
    static pages far outweighs the cost of heavier authenticated pages:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 网站如 *DesignCode.io* ([https://designcode.io/courses](https://designcode.io/courses))
    使用 Gatsby 来处理他们的静态内容，这意味着他们的静态页面性能极优，并且它们在客户端渲染认证路由。虽然这确实会增加包的大小，因为它们需要发送更多的 JavaScript，但快速静态页面的好处远远超过了更重的认证页面的成本：
- en: '![Figure 1.2 – The DesignCode.io website'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.2 – DesignCode.io 网站'
- en: '](img/B15983_01_02.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15983_01_02.jpg)'
- en: Figure 1.2 – The DesignCode.io website
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – DesignCode.io 网站
- en: One of the most popular sources of data for Gatsby is MDX. MDX is a powerful
    format that allows you to write JSX within Markdown. Why is it awesome? Because
    you can include React components alongside documentation with no hassle at all.
    React components can be far more interactive and dynamic than text, and as a result,
    it is a powerful format to create online courses on, as you can create content
    that is more enticing for the user. Perhaps a more interactive course is a more
    memorable one? We will be diving into MDX in detail in [*Chapter 3*](B15983_03_ePub_RK.xhtml#_idTextAnchor057),
    *Sourcing and Querying Data (from Anywhere!)*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Gatsby 最受欢迎的数据来源之一是 MDX。MDX 是一种强大的格式，允许你在 Markdown 中编写 JSX。为什么它很棒？因为你可以毫无困难地将
    React 组件与文档一起包含。React 组件可以比文本更加互动和动态，因此，它是一种创建在线课程的强大格式，因为你可以创建对用户更具吸引力的内容。也许一个更具互动性的课程更容易让人记住？我们将在
    [*第 3 章*](B15983_03_ePub_RK.xhtml#_idTextAnchor057)，*从任何地方获取和查询数据* 中详细探讨 MDX。
- en: SaaS products
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SaaS 产品
- en: 'When selling **Software as a Service** (**SaaS**) online, your website''s performance
    can be considered a reflection of your product''s performance. As a result, having
    a clunky website can be the difference between your product being a success or
    not. As mentioned previously, this is an example where you could go down a rabbit
    hole to improve your site''s performance. Companies such as *Skupos* ([https://www.skupos.com/](https://www.skupos.com/))
    use Gatsby to get more performance benefits for free. Gatsby also works wonders
    for **Search Engine Optimization** (**SEO**). As pages are prerendered, all your
    page content is available to web crawlers such as Googlebot to navigate to your
    site. The speed and SEO improvements help their product''s website stand out and
    give the user confidence that they know what they are doing when it comes to technology:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当在线销售 **软件即服务** (**SaaS**) 时，你网站的性能可以被视为你产品性能的反映。因此，拥有一个笨拙的网站可能是你的产品成功与否的关键。正如之前提到的，这是一个你可以深入挖掘以改善网站性能的例子。例如，*Skupos*
    ([https://www.skupos.com/](https://www.skupos.com/)) 使用 Gatsby 免费获得更多性能优势。Gatsby
    对 **搜索引擎优化** (**SEO**) 也大有裨益。由于页面是预渲染的，你的所有页面内容都对网络爬虫（如 Googlebot）可用，以便导航到你的网站。速度和
    SEO 的改进有助于他们的产品网站脱颖而出，并使用户对他们在技术方面的能力充满信心：
- en: '![Figure 1.3 – The Skupos website'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.3 – Skupos 网站'
- en: '](img/B15983_01_03.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15983_01_03.jpg)'
- en: Figure 1.3 – The Skupos website
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – Skupos 网站
- en: '*Skupos* also supplement their site pages with metadata and alt-text, which
    further aids web crawlers in understanding site content. The more web crawlers
    understand your site''s content, the better your search engine ranking will be.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*Skupos* 还通过元数据和 alt-text 补充了他们的网站页面，这进一步帮助网络爬虫理解网站内容。网络爬虫越了解你的网站内容，你的搜索引擎排名就会越好。'
- en: Design agencies and photo-heavy sites
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计机构和图片密集型网站
- en: In cases where your work is more visual, your site often needs to make use of
    large quantities of high-resolution images. We've all visited a website and felt
    like we were transported back to the dial-up days as we've waited for large image
    files to load. This common mistake is often amplified further by a large amount
    of cumulative layout shift that happens when loading images. Gracefully handling
    the image's loading state to avoid this can be a headache.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的工作更注重视觉的情况下，你的网站通常需要使用大量的高分辨率图像。我们都访问过网站，等待大图像文件加载时感觉像是回到了拨号上网的时代。这种常见的错误往往在加载图像时发生的累积布局变化中被进一步放大。优雅地处理图像的加载状态以避免这种情况可能会很头疼。
- en: 'Gatsby performs magic for images within its application. It utilizes the `sharp`
    library ([https://github.com/lovell/sharp](https://github.com/lovell/sharp)) under
    the hood to convert your large images into smaller web-friendly sizes. When your
    website loads, it will first load in a smaller resolution version before blurring
    up to the maximum resolution required. This results in no layout shift and a far
    less "jumpy" experience for your site visitor. A great example of this is on the
    *Call Bruno Creative Agency* ([https://www.callbruno.com/en/reelevant](https://www.callbruno.com/en/reelevant))
    website developed with Gatsby:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Gatsby在其应用程序中对图像进行了魔法般的处理。它底层使用`sharp`库([https://github.com/lovell/sharp](https://github.com/lovell/sharp))将你的大图像转换为更小的、适合网页的大小。当你的网站加载时，它将首先加载一个较小的分辨率版本，然后模糊到所需的最高分辨率。这导致没有布局偏移，为网站访客提供了远比“跳跃”体验更少的“跳跃”感。一个很好的例子是在使用Gatsby开发的*Call
    Bruno Creative Agency*([https://www.callbruno.com/en/reelevant](https://www.callbruno.com/en/reelevant))网站上：
- en: '![Figure 1.4 – The Call Bruno Creative Agency website'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.4 – Call Bruno Creative Agency网站'
- en: '](img/B15983_01_04.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15983_01_04.jpg)'
- en: Figure 1.4 – The Call Bruno Creative Agency website
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – Call Bruno Creative Agency网站
- en: They use lots of imagery across their project pages, but the image load does
    not take you out of the experience. We will get into detail on handling images
    in [*Chapter 5*](B15983_05_ePub_RK.xhtml#_idTextAnchor080), *Working with Images*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 他们在其项目页面中使用了大量的图像，但图像加载并不会让你从体验中脱离出来。我们将在[*第5章*](B15983_05_ePub_RK.xhtml#_idTextAnchor080)，*与图像一起工作*中详细介绍处理图像的方法。
- en: By exploring these sites, we can see examples across industries where Gatsby
    is helping companies get ahead of their competition.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过探索这些网站，我们可以看到Gatsby在各个行业中帮助公司超越竞争对手的例子。
- en: Gatsby's competitors
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gatsby的竞争对手
- en: While this book focuses on Gatsby, it is crucial to understand that it is not
    the only React static site generator on the market. The competitor most often
    uttered in the same breath is Next.js.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这本书主要关注Gatsby，但理解它不是市场上唯一的React静态站点生成器是至关重要的。最常被提及的竞争对手是Next.js。
- en: Until recently, the key difference between Next.js and Gatsby was server-side
    rendering. Like Gatsby, a Next.js application can be hosted statically, but it
    also used to be able to server render pages where Gatsby could not. Instead of
    deploying a static build, a server is deployed to handle requests. When a page
    is requested, the server builds that page and caches it before sending it to the
    user. This means that subsequent requests to the resource are faster than the
    first call. As of version 4, Gatsby can have all of its pages prebuilt statically
    or it can create a hybrid build – a mixture of static and server-side rendered
    content. We will discuss this more in [*Chapter 9*](B15983_09_ePub_RK.xhtml#_idTextAnchor127),
    *Deployment and Hosting*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 直到最近，Next.js和Gatsby之间的关键区别在于服务器端渲染。与Gatsby一样，Next.js应用程序可以以静态方式托管，但它曾经能够服务器端渲染页面，而Gatsby则不能。不是部署静态构建，而是部署一个服务器来处理请求。当请求一个页面时，服务器构建该页面并在发送给用户之前将其缓存。这意味着对资源的后续请求比第一次调用更快。截至版本4，Gatsby可以预先构建所有页面为静态，或者它可以创建混合构建——静态和服务器端渲染内容的混合。我们将在[*第9章*](B15983_09_ePub_RK.xhtml#_idTextAnchor127)，*部署和托管*中进一步讨论这一点。
- en: One major drawback to Next.js is its data security. When building Gatsby sites
    as static builds, data is only taken from the source at build time, and as the
    content is static, it is secure. Next.js keeps data stored on the server and,
    as such, it is easier to exploit. Next.js commonly requires more initialization
    if you wish to set it up via a server or using databases. This also means that
    there is more maintenance required in Next.js applications. Both Next.js and Gatsby
    have additional utilities to help with the handling of images. Gatsby, however,
    can make images more performant on statically rendered pages, while Next cannot.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Next.js的一个主要缺点是其数据安全性。当构建Gatsby站点为静态构建时，数据仅在构建时从源获取，由于内容是静态的，因此它是安全的。Next.js将数据存储在服务器上，因此更容易被利用。如果你希望通过服务器或使用数据库来设置Next.js，通常需要更多的初始化。这也意味着在Next.js应用程序中需要更多的维护。Next.js和Gatsby都有额外的实用工具来帮助处理图像。然而，Gatsby可以使静态渲染页面上的图像性能更优，而Next.js则不能。
- en: The good news is that all static site generators follow a similar process. *The
    skills and mentality you learn in this book are easily transferable to a different
    generator in the future should you decide you want to make the switch.*
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，所有静态站点生成器都遵循类似的过程。*在这本书中学到的技能和心态可以轻松转移到未来的不同生成器中，如果你决定要切换的话。*
- en: Now that we understand where Gatsby excels, let's start creating our first Gatsby
    project.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Gatsby的优势所在，让我们开始创建我们的第一个Gatsby项目。
- en: Setting up a project
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目
- en: In order to help you put into practice what you're learning, we will be building
    a project together. Throughout this book, we will be working to build a personal
    portfolio, something that every developer needs and therefore something I think
    will be relevant for most readers. The portfolio will contain blog pages to aid
    your learning in public, project pages to demonstrate your work, a stats page
    showcasing interesting metrics on your site, as well as many more features that
    will help your portfolio stand out from the crowd.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您将所学知识付诸实践，我们将一起构建一个项目。在整个本书中，我们将致力于构建一个个人作品集，这是每个开发者都需要的东西，因此我认为它对大多数读者都将是相关的。这个作品集将包含博客页面，以帮助您在公众面前学习，项目页面以展示您的工作，一个展示您网站上有趣指标的统计页面，以及许多其他有助于您的作品集脱颖而出的功能。
- en: Throughout this book, you will be faced with options. We will discuss different
    implementations for styling your site, as well as data sources you may want to
    implement. This should give you the flexibility to align it with your current
    knowledge. Alternatively, you can throw yourself in the deep end – the choice
    is up to you. Everywhere there is a choice, I will also provide my personal recommendation
    for what might be best if you can't decide.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个本书中，您将面临选择。我们将讨论为您的网站提供不同实现方案，以及您可能想要实施的数据源。这应该会为您提供灵活性，以与您当前的知识相匹配。或者，您可以跳入深水区——选择权在您手中。在每一个选择的地方，如果您无法决定，我还会提供我的个人建议，以供参考。
- en: 'To see a finished version of the portfolio we will be building, visit this
    link:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看我们将要构建的作品集的完成版本，请访问此链接：
- en: '[https://elevating-react-with-gatsby.sld.codes/](https://elevating-react-with-gatsby.sld.codes/)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://elevating-react-with-gatsby.sld.codes/](https://elevating-react-with-gatsby.sld.codes/)'
- en: Tip
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Refer to the code repository ([https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4))
    that accompanies this book if you're struggling at any point. It includes a copy
    of the project as it should appear after every chapter.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在某个环节遇到困难，请参考本书附带的代码仓库([https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4))。它包含了每个章节后项目应有的副本。
- en: To start using Gatsby, we need to ensure we have a few prerequisite tools set
    up on our machines. Most of these prerequisites are most likely already on your
    device if you are a React developer, although I would still encourage you to read
    through this list, as some of your tools may need an update.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Gatsby，我们需要确保在我们的机器上设置了一些先决工具。如果您是React开发者，那么这些先决条件很可能已经存在于您的设备上，尽管我仍然鼓励您阅读此列表，因为您的某些工具可能需要更新。
- en: Node.js version 14.15.0+
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Node.js版本14.15.0+
- en: 'As of version 4.0, Gatsby supports all Node.js versions greater than 14.15.0\.
    You can quickly check if you have Node.js installed by opening up a terminal window
    and typing the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 截至4.0版本，Gatsby支持所有大于14.15.0的Node.js版本。您可以通过打开终端窗口并输入以下命令来快速检查您是否已安装Node.js：
- en: '[PRE0]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you have Node.js installed, this should print a version number. However,
    if you receive an error, you can download Node.js by navigating to the Node.js
    website ([https://nodejs.org](https://nodejs.org)). Node.js comes bundled with
    `npm`, a package repository, package manager, and command-line tool that we will
    be using to install Gatsby.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已安装Node.js，它应该会打印出一个版本号。然而，如果您收到错误，您可以通过访问Node.js网站([https://nodejs.org](https://nodejs.org))下载Node.js。Node.js附带`npm`，这是一个包仓库、包管理器和命令行工具，我们将使用它来安装Gatsby。
- en: Tip
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: You're most likely already using Node.js, and some of your pre-existing projects
    may require a different version than the requirements specified here. If you need
    to manage multiple versions of Node.js on the same device, you should check out
    the **Node.js Version Manager** (**NVM**)([https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm)).
    It gives you access to valuable commands, including installing new versions and
    switching between minor and major versions of Node.js.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您很可能已经在使用Node.js，并且您的一些现有项目可能需要与这里指定的要求不同的版本。如果您需要在同一设备上管理多个Node.js版本，您应该查看**Node.js版本管理器**（**NVM**）([https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm))。它为您提供了宝贵的命令，包括安装新版本和在不同版本之间切换。
- en: Gatsby command-line interface
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gatsby命令行界面
- en: The Gatsby **Command-Line Interface** (**CLI**) is a tool built by the core
    Gatsby team; it allows you to perform standard functions, such as creating new
    Gatsby projects, setting up local development servers, and building your production
    site. Although you can use it on a per-project basis, it is far more common to
    install the CLI globally so that you can use its features across multiple Gatsby
    projects without having to install it as a package in each project – got to save
    that hard-drive space!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Gatsby **命令行界面** (**CLI**) 是由 Gatsby 核心团队构建的工具；它允许你执行标准功能，例如创建新的 Gatsby 项目、设置本地开发服务器以及构建你的生产网站。虽然你可以按项目使用它，但更常见的是全局安装
    CLI，这样你就可以在多个 Gatsby 项目中使用其功能，而无需在每个项目中将其作为包安装 – 这样可以节省硬盘空间！
- en: 'To install the CLI globally, `npm install` it with the global flag:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要全局安装 CLI，使用带有全局标志的 `npm install`：
- en: '[PRE1]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To verify its installation, open up a terminal window and type the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证其安装，打开一个终端窗口并输入以下内容：
- en: '[PRE2]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If running this provides a list of commands and does not error out, then you're
    good to go.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行此命令提供命令列表且没有出错，那么你就准备好了。
- en: Important Note
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Throughout this book, I use `npm` as my package manager. If you prefer Yarn,
    you can use the Yarn equivalent commands.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书的整个过程中，我使用 `npm` 作为我的包管理器。如果你更喜欢 Yarn，你可以使用 Yarn 的等效命令。
- en: Directory and package setup
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录和包设置
- en: Here, we will begin to create the files and folders we need to start our project,
    as well as install necessary dependencies such as React and Gatsby.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将开始创建我们需要启动项目所需的文件和文件夹，以及安装必要的依赖项，如 React 和 Gatsby。
- en: 'First, create a folder to house our project. You can call it whatever you like.
    Throughout this book, I will refer to this folder as the `root` folder of the
    application. Open a terminal and navigate to your `root` folder. Initialize a
    new package in this folder by running the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个文件夹来存放我们的项目。你可以称它为任何你喜欢的名字。在这本书的整个过程中，我将把这个文件夹称为应用程序的 `root` 文件夹。打开终端并导航到你的
    `root` 文件夹。通过运行以下命令在这个文件夹中初始化一个新的包：
- en: '[PRE3]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With the package now initialized, let''s install React and Gatsby:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在包已经初始化，让我们安装 React 和 Gatsby：
- en: '[PRE4]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Open your `root` folder in your favorite `package.json`, `package-lock.json`,
    and a `node-modules` folder. Opening your `package.json`, you should see the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在你最喜欢的编辑器中打开你的 `root` 文件夹中的 `package.json`、`package-lock.json` 和 `node-modules`
    文件夹。打开你的 `package.json`，你应该会看到以下内容：
- en: '[PRE5]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding example, you can see that this file now contains references
    to the dependencies we have just installed.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，你可以看到这个文件现在包含了对我们刚刚安装的依赖项的引用。
- en: Development scripts
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发脚本
- en: 'Let''s start by modifying `package.json` so that it contains some useful scripts
    that will speed up our development process:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先修改 `package.json`，使其包含一些有用的脚本，这将加快我们的开发过程：
- en: '[PRE6]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s break down these scripts:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解这些脚本：
- en: '`build`: Runs the Gatsby CLI''s `build` command. This creates a compiled, production-ready
    build of our site. We will learn more about this in [*Chapter 9*](B15983_09_ePub_RK.xhtml#_idTextAnchor127),
    *Deployment and Hosting*.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build`: 运行 Gatsby CLI 的 `build` 命令。这将创建一个编译好的、生产就绪的网站构建版本。我们将在 [*第 9 章*](B15983_09_ePub_RK.xhtml#_idTextAnchor127)，*部署和托管*
    中了解更多关于这一点。'
- en: '`develop`: Runs the Gatsby CLI''s `develop` command. We will review it in detail
    in the next section, *Creating your first few pages*.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`develop`: 运行 Gatsby CLI 的 `develop` 命令。我们将在下一节 *创建你的第一个页面* 中详细审查它。'
- en: '`start`: The `start` script redirects to the `develop` script. This is in place
    as it is common to start packages with a `start` script.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start`: `start` 脚本重定向到 `develop` 脚本。这是常见的，因为通常使用 `start` 脚本来启动包。'
- en: '`serve`: Runs the Gatsby CLI''s `serve` command to serve up a Gatsby `build`
    folder. This is a useful way to review a production build.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`serve`: 运行 Gatsby CLI 的 `serve` 命令以提供 Gatsby `build` 文件夹。这是一种有用的方式来审查生产构建。'
- en: '`clean`: The `clean` script utilizes the Gatsby CLI''s `clean` command. This
    deletes the local Gatsby cache and any build data. It will be rebuilt with the
    next `develop` or `build` command.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clean`: `clean` 脚本使用 Gatsby CLI 的 `clean` 命令。这将删除本地 Gatsby 缓存和任何构建数据。它将在下一个
    `develop` 或 `build` 命令中重建。'
- en: 'All of these scripts can be run from the `root` folder with the following command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些脚本都可以通过以下命令在 `root` 文件夹中运行：
- en: '[PRE7]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Simply replace `script-name` with the name of the script you would like to run.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将 `script-name` 替换为你想要运行的脚本的名称。
- en: You'll notice the absence of a test script. Don't worry – we will get into how
    to test a Gatsby application in [*Chapter 7*](B15983_07_ePub_RK.xhtml#_idTextAnchor105),
    *Testing and Auditing Your Site*.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到缺少一个测试脚本。不用担心——我们将在[*第7章*](B15983_07_ePub_RK.xhtml#_idTextAnchor105)中介绍如何测试Gatsby应用程序，*测试和审计您的网站*。
- en: Framework files and folders
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 框架文件和文件夹
- en: As mentioned, Gatsby is a framework. Frameworks require certain files to exist
    in order to work. Let's set up our project with the files and folders where Gatsby
    expects to find them.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Gatsby是一个框架。框架需要存在某些文件才能工作。让我们使用Gatsby期望找到它们的文件和文件夹来设置我们的项目。
- en: 'Create a `gatsby-config.js` file in your `root` directory and add the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的`root`目录中创建一个`gatsby-config.js`文件，并添加以下内容：
- en: '[PRE8]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As the name might suggest, the `gatsby-config.js` file is the core configuration
    file for Gatsby. We will be coming back to this file frequently as we build out
    our project. By the time we are done with it, it will be full of plugins, metadata,
    styling, and even offline support.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称可能暗示的那样，`gatsby-config.js`文件是Gatsby的核心配置文件。随着我们构建项目，我们将经常回到这个文件。当我们完成时，它将充满插件、元数据、样式，甚至离线支持。
- en: Create `gatsby-browser.js` and `gatsby-node.js` files in your `root` directory.
    Both of these files can be left blank for now. The `gatsby-browser.js` file contains
    any code we would like to run on the client's browser. In the next chapter, we
    will be using this file to add styles to our website. The `gatsby-node.js` file
    contains code we would like to run during the process of building our site.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的`root`目录中创建`gatsby-browser.js`和`gatsby-node.js`文件。这两个文件现在都可以留空。`gatsby-browser.js`文件包含我们希望在客户端浏览器上运行的任何代码。在下一章中，我们将使用此文件为我们的网站添加样式。`gatsby-node.js`文件包含我们希望在构建网站过程中运行的代码。
- en: Finally, create an `src` folder in your `root` directory. This folder will contain
    the majority of our development work, much like in a traditional React application.
    Pages we create and components we define will all be contained within this folder.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在您的`root`目录中创建一个`src`文件夹。这个文件夹将包含我们大部分的开发工作，就像在传统的React应用程序中一样。我们创建的页面和定义的组件都将包含在这个文件夹中。
- en: Before we go any further, let's make sure we have our version control tracking
    the right files.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们确保我们的版本控制正在跟踪正确的文件。
- en: Using version control
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用版本控制
- en: 'I suspect many of you would like to use version control while you build out
    your Gatsby site. To ensure Git tracks only the files that matter, create a `.gitignore`
    file and add the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我怀疑你们中的许多人希望在构建Gatsby网站的同时使用版本控制。为了确保Git只跟踪重要的文件，创建一个`.gitignore`文件并添加以下内容：
- en: '[PRE9]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: These lines stop our dependencies, Gatsby builds, and cache folders from being
    tracked.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行阻止了依赖项、Gatsby构建和缓存文件夹被跟踪。
- en: Creating your first few pages
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建您的第一个几个页面
- en: We now have all the underlying code we need set up to allow us to start creating
    pages. In this section, we will create a three-page website using Gatsby. It's
    important to note that this is a basic example purely designed to solidify your
    understanding of how Gatsby works before we worry about styling and additional
    functionality.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经设置了所有必要的底层代码，以便我们可以开始创建页面。在本节中，我们将使用Gatsby创建一个包含三个页面的网站。重要的是要注意，这是一个基本示例，纯粹是为了在我们担心样式和附加功能之前巩固你对Gatsby工作原理的理解。
- en: 'Navigate to your `src` directory and create a new folder called `pages`. Any
    JS files we create within the `pages` folder will be treated as a route by Gatsby.
    This also applies to subfolders within the `pages` folder. There is, however,
    one exception – files called `index.js` are treated as the root of their directory.
    Let''s make sense of this with a few examples:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到您的`src`目录，并创建一个名为`pages`的新文件夹。我们在`pages`文件夹中创建的任何JS文件都将被Gatsby视为一个路由。这也适用于`pages`文件夹内的子文件夹。然而，有一个例外——名为`index.js`的文件被视为其目录的根。让我们通过几个示例来理解这一点：
- en: '`src/pages/index.js` will map to [yourwebsite.com](https://yourwebsite.com).'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/pages/index.js`将映射到[你的网站.com](https://yourwebsite.com)。'
- en: '`src/pages/about.js` will map to [yourwebsite.com/about](https://yourwebsite.com/about).'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/pages/about.js`将映射到[你的网站.com/about](https://yourwebsite.com/about)。'
- en: '`src/pages/blog/my-first-post.js` will map to [yourwebsite.com/docs/my-first-post](https://yourwebsite.com/docs/my-first-post).
    While we won''t be setting up a page at this URL now, we will start using routes
    such as this one in [*Chapter 3*](B15983_03_ePub_RK.xhtml#_idTextAnchor057), *Sourcing
    and Querying Data (from Anywhere!)*.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/pages/blog/my-first-post.js` 将映射到 [yourwebsite.com/docs/my-first-post](https://yourwebsite.com/docs/my-first-post)。虽然我们现在不会在这个URL上设置页面，但我们将开始使用此类路由，例如在
    [*第3章*](B15983_03_ePub_RK.xhtml#_idTextAnchor057)，*从任何地方获取和查询数据*。'
- en: '`src/pages/404.js` will map to any page that does not resolve on [yourwebsite.com](https://yourwebsite.com).'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/pages/404.js` 将映射到 [yourwebsite.com](https://yourwebsite.com) 上的任何页面。'
- en: Important Note
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: Any React components you place in the `pages` folder will become navigable routes
    on your site. As such, it is best to separate your components from your pages.
    A common pattern is to create a `components` folder that sits next to your `pages`
    folder in the `src` directory and import components you want to use in your pages.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你放置在 `pages` 文件夹中的任何 React 组件都将成为你网站上的可导航路由。因此，最好将你的组件与你的页面分开。一个常见的模式是在 `src`
    目录中创建一个与 `pages` 文件夹相邻的 `components` 文件夹，并导入你想要在页面中使用组件。
- en: The index page
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 首页
- en: 'Create an `index.js` file in your `pages` folder. As the index of the `pages`
    folder, this will become the landing of your website. We can now populate this
    file with the following code:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `pages` 文件夹中创建一个 `index.js` 文件。作为 `pages` 文件夹的索引，这将成为你网站的首页。现在我们可以用以下代码填充此文件：
- en: '[PRE10]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The contents of this file should look familiar; it's just a simple stateless
    ReactJS component.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件的 内容应该看起来很熟悉；它只是一个简单的无状态 ReactJS 组件。
- en: 'We could have also defined it as:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以将其定义为：
- en: '[PRE11]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Both examples will output the exact same result, so it's just personal preference.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个示例将输出完全相同的结果，所以这只是个人喜好。
- en: The about page
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于页面
- en: 'In a similar fashion, we can create an `about` page. Here, you have a choice
    – you can either create this page at `src/pages/about.js` or at `src/pages/about/index.js`.
    The question I always ask myself when deciding which option to go with is whether
    the page will have sub-pages. In the case of an `about` page, I think it''s unlikely
    to contain any sub-pages, so I will opt for `src/pages/about.js`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式，我们可以创建一个 `about` 页面。在这里，你有选择权——你可以在 `src/pages/about.js` 或 `src/pages/about/index.js`
    中创建这个页面。我在决定选择哪个选项时总是问自己，这个页面是否会有子页面。在 `about` 页面的情况下，我认为它不太可能包含任何子页面，所以我将选择 `src/pages/about.js`：
- en: '[PRE12]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we have defined another simple React component containing a heading and
    paragraph to create our `about` page.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了另一个包含标题和段落的简单 React 组件，以创建我们的 `about` 页面。
- en: The 404 page
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 404 页面
- en: Gatsby expects to find a `404.js` file in your `pages` directory. This page
    is special. It contains the page that will be shown when Gatsby cannot find a
    page that was requested. I am sure you have come across "Page not found" pages
    before. Without this page, on requesting a non-existent route, the browser will
    not find any resource and show a browser error to the user. While the `404` page
    is another form of displaying the same error, by creating this page, we can manage
    the error ourselves. We can link to working pages on our site or even suggest
    the page they might have been trying to visit (more on this in [*Chapter 3*](B15983_03_ePub_RK.xhtml#_idTextAnchor057),
    *Sourcing and Querying Data (from Anywhere!)*).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Gatsby 期望在 `pages` 目录中找到一个 `404.js` 文件。这个页面是特殊的。它包含当 Gatsby 找不到请求的页面时将显示的页面。我相信你之前一定遇到过“页面未找到”的页面。如果没有这个页面，在请求一个不存在的路由时，浏览器将找不到任何资源并向用户显示浏览器错误。虽然
    `404` 页面是显示相同错误的一种另一种形式，但通过创建这个页面，我们可以自己管理错误。我们可以链接到我们网站上的工作页面，甚至建议他们可能试图访问的页面（更多内容请参阅
    [*第3章*](B15983_03_ePub_RK.xhtml#_idTextAnchor057)，*从任何地方获取和查询数据*）。
- en: 'Let''s create our `404` page now in `src/pages/404.js`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在 `src/pages/404.js` 中创建我们的 `404` 页面：
- en: '[PRE13]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You should be starting to see a pattern. Creating pages is as simple as defining
    React components – something you should be familiar with already.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该开始看到一种模式。创建页面就像定义 React 组件一样简单——这应该是你已经熟悉的。
- en: Trying the develop command
  id: totrans-157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 尝试运行 develop 命令
- en: 'At this point, you''ve actually already created a fully working website. Congratulations!
    To test it out, open a terminal at your `root` directory and run the following:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你实际上已经创建了一个完全工作的网站。恭喜！为了测试它，在你的 `root` 目录中打开一个终端，并运行以下命令：
- en: '[PRE14]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As you will recall from our `package.json`, this will run the `gatsby develop`
    command. This will take a few seconds to run, but you should then see some terminal
    output that looks like this:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从我们的 `package.json` 中回忆的那样，这将运行 `gatsby develop` 命令。这可能需要几秒钟的时间来运行，但您应该会看到一些类似以下内容的终端输出：
- en: '[PRE15]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can now open a browser of your choice and navigate to `http://localhost:8000/`,
    and you should be greeted with something like this:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以打开您选择的浏览器并导航到 `http://localhost:8000/`，您应该会看到类似以下内容：
- en: '![Figure 1.5 – The landing page preview'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.5 – 着陆页预览'
- en: '](img/B15983_01_05.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15983_01_05.jpg](img/B15983_01_05.jpg)'
- en: Figure 1.5 – The landing page preview
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 着陆页预览
- en: This is the rendered version of our `index.js` page component. You can modify
    the URL in your browser to `http://localhost:8000/about` to see your `about` page
    and `http://localhost:8000/404` to see your `404` page. You can also see your
    `404` page in development by navigating to any invalid route and pressing the
    **Preview custom 404 page** button.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的 `index.js` 页面组件的渲染版本。您可以在浏览器中修改 URL 到 `http://localhost:8000/about` 以查看您的
    `about` 页面，以及到 `http://localhost:8000/404` 以查看您的 `404` 页面。您还可以通过导航到任何无效路由并按下**预览自定义
    404 页面**按钮在开发中查看您的 `404` 页面。
- en: Tip
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If you don't want to manually navigate to the browser and type in the URL, you
    can modify our scripts by appending the `gatsby develop` command with the `-o`
    option. This instructs Gatsby to open your default browser and navigate to the
    site automatically when you run the `develop` command.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想手动导航到浏览器并输入 URL，您可以通过将 `-o` 选项附加到 `gatsby develop` 命令来修改我们的脚本。这会指示 Gatsby
    在您运行 `develop` 命令时自动打开默认浏览器并导航到网站。
- en: gatsby develop in detail
  id: totrans-169
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Gatsby 详细开发
- en: Running `gatsby develop` starts the Gatsby development server. This might be
    a little confusing, as we have previously mentioned how a Gatsby site is delivered
    as static content, but it's actually there to speed up your development process.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `gatsby develop` 启动 Gatsby 开发服务器。这可能有点令人困惑，因为我们之前提到 Gatsby 网站作为静态内容交付，但实际上它是为了加快您的开发过程。
- en: Imagine your site contains 10,000 pages; building the entirety of your site
    every time you make a small change to one page would take a long time. To get
    around this in development, Gatsby uses a Node.js server to build only what you
    need as and when it's requested. Due to it building on demand, it can negatively
    affect the performance of a page and *you should never test performance on a page
    in development for this reason*.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，如果您的网站包含 10,000 页面；每次对一页进行小改动时，都需要构建整个网站，这将花费很长时间。为了在开发中解决这个问题，Gatsby 使用
    Node.js 服务器按需构建您所需的内容。由于它是按需构建的，可能会对页面的性能产生负面影响，*因此您绝对不应该因为这种原因在开发中对页面的性能进行测试*。
- en: Once the server is up, you can continue to edit your code without rerunning
    the command. The development server supports hot reloading, a concept that should
    be familiar to you.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务器启动，您就可以继续编辑您的代码，而无需重新运行命令。开发服务器支持热重载，这是一个您应该熟悉的概念。
- en: 'The `develop` command has a number of built-in options that allow you to customize
    it:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`develop` 命令具有许多内置选项，允许您对其进行自定义：'
- en: '`-H, --host`: Allows you to modify the host'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-H, --host`: 允许您修改主机'
- en: '`-p, --port`: Allows you to modify the port Gatsby runs on'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-p, --port`: 允许您修改 Gatsby 运行的端口'
- en: '`-o, --open`: Opens your project in the browser'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-o, --open`: 在浏览器中打开您的项目'
- en: '`-S, --https`: Turns on HTTPS'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-S, --https`: 启用 HTTPS'
- en: 'You can view your site on any device connected to the same network by using
    the host option. This can be useful when you want to compare how your site behaves
    on mobile browsers with that of a desktop experience. To achieve this, run the
    following command:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用主机选项在连接到同一网络的任何设备上查看您的网站。这可能在您想比较您的网站在移动浏览器上的行为与桌面体验时很有用。要实现这一点，请运行以下命令：
- en: '[PRE16]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If the command is successful, you will see a subtle difference in the output:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果命令成功执行，您将在输出中看到一些细微的差异：
- en: '[PRE17]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `develop` command has added a URL for testing on your network. Typing this
    into a browser on any device connected to the same network will render your site.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`develop` 命令为您的网络测试添加了一个 URL。在连接到同一网络的任何设备的浏览器中输入此 URL，将渲染您的网站。'
- en: Connecting your pages
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接您的页面
- en: Now that you have multiple pages, you may want to navigate between them. There
    are two different ways of achieving this – with the Gatsby Link component or via
    programmatic navigation. To some of you, these components and functions may sound
    familiar; this is because Gatsby wraps the `reach-router` ([https://reach.tech/router](https://reach.tech/router))
    library for navigation. For those who haven't used `reach-router` before, the
    library comes with support for server-side rendering and routing accessibility
    functionality built in. Gatsby has built on and enhanced this functionality to
    meet its high standards for user accessibility, ensuring a great website experience
    regardless of who you are.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您有多个页面，您可能想要在它们之间进行导航。有两种不同的方法可以实现这一点——使用 Gatsby Link 组件或通过编程式导航。对于一些人来说，这些组件和函数可能听起来很熟悉；这是因为
    Gatsby 对 `reach-router` ([https://reach.tech/router](https://reach.tech/router))
    库进行了封装。对于那些之前没有使用过 `reach-router` 的人来说，该库内置了服务器端渲染和路由无障碍功能的支持。Gatsby 在此基础上进行了增强，以满足其对用户无障碍的高标准，确保无论您是谁，都能获得良好的网站体验。
- en: The Gatsby Link component
  id: totrans-185
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Gatsby Link 组件
- en: It's important to use the Gatsby `<Link/>` component as a replacement for the
    `<a/>` tag whenever you are linking to a page that is internal. The `<Link/>`
    component works just like an `<a/>` tag, with one important distinction – it enables
    prefetching. Prefetching is the act of loading a resource before it is required.
    This means that when the resource is requested, the time waiting for that resource
    is decreased. By prefetching the links on your page, your next click navigates
    to content that is already loaded and is therefore practically instant. This is
    particularly noticeable on mobile devices in areas with reduced network conditions
    that would normally have a delay when loading pages.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在您链接到内部页面时，使用 Gatsby 的 `<Link/>` 组件替换 `<a/>` 标签是很重要的。`<Link/>` 组件的工作方式与 `<a/>`
    标签类似，但有一个重要的区别——它支持预取。预取是指在需要之前加载资源的行为。这意味着当请求资源时，等待该资源的时间会减少。通过预取您页面上的链接，您的下一次点击将导航到已经加载的内容，因此实际上几乎是瞬间的。这在网络条件较差的移动设备上尤为明显，通常在加载页面时会有延迟。
- en: 'The first place you could add a `Link` component is to your `404` page. It''s
    common for these pages to have a button that says something like "Take me home"
    that, when clicked, navigates to the landing page:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 `404` 页面添加 `Link` 组件的第一个地方。这些页面通常有一个按钮，上面写着“带我回家”之类的文字，当点击时，会导航到主页：
- en: '[PRE18]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see in the preceding code block, the `Link` component has a prop
    called `to`; this needs to be passed to the page that you want to navigate to
    relative to the root of your website. By passing the `"/"` prop, Gatsby will navigate
    to the root of your website.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的代码块中所见，`Link` 组件有一个名为 `to` 的属性；这需要传递到您想要导航到的相对于您网站根目录的页面。通过传递 `"/"` 属性，Gatsby
    将导航到您网站的根目录。
- en: 'You can also add a link to the `about` page from the `index` page:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从 `index` 页面添加到 `about` 页面的链接：
- en: '[PRE19]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can see here that we instead pass `"/about"` to the `to` prop in the `<Link/>`
    component; this will navigate to our previously created `about` page.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，我们在这里将 `"/about"` 传递给 `<Link/>` 组件中的 `to` 属性；这将导航到我们之前创建的 `about` 页面。
- en: Programmatic navigation
  id: totrans-193
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编程式导航
- en: 'Occasionally, you may need to trigger navigation with something other than
    a click. Perhaps you need to navigate as a result of a `fetch` request, or when
    a user submits a form. You can achieve this behavior by making use of the Gatsby
    `navigate` function:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能需要用除了点击之外的方式触发导航。也许您需要根据 `fetch` 请求或当用户提交表单时进行导航。您可以通过使用 Gatsby 的 `navigate`
    函数来实现这种行为：
- en: '[PRE20]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Like the `<Link/>` component, the `navigate` function will only work for navigating
    to internal pages.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `<Link/>` 组件一样，`navigate` 函数也仅适用于导航到内部页面。
- en: We now have a basic Gatsby site set up with the ability to navigate between
    pages.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经设置了一个基本的 Gatsby 网站，具有在页面之间导航的能力。
- en: Summary
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: I appreciate that most of the content in this chapter has been theoretical,
    but it's important to understand the "why" as well as the "how." In this chapter,
    we have cemented the baseline knowledge of what Gatsby is and grasped the guiding
    principles we will be using in further chapters to build our website. We've seen
    examples of where Gatsby is being used and the benefits it can bring. We discussed
    what dependencies you need and how to initialize Gatsby projects. We have also
    set up a complete basic Gatsby project and created the first few pages of our
    website. We then used the built-in Gatsby components and functions to link our
    pages together.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我很欣赏本章的大部分内容都是理论性的，但理解“为什么”同样重要，就像理解“如何”一样。在本章中，我们巩固了盖茨比是什么以及我们在后续章节中构建网站时将使用的指导原则的基础知识。我们看到了盖茨比被使用的例子以及它能带来的好处。我们讨论了你需要的依赖项以及如何初始化盖茨比项目。我们还设置了一个完整的盖茨比基本项目，并创建了我们的网站的前几页。然后，我们使用了内置的盖茨比组件和函数来链接我们的页面。
- en: We will be referencing the theory we've outlined in this chapter throughout
    this book, but for now, let's turn our focus to styling our web application. In
    the next chapter, we will identify various different styling methodologies and
    make an informed choice about which one you should use for your project.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在整本书中引用本章概述的理论，但就目前而言，让我们将注意力转向美化我们的Web应用程序。在下一章中，我们将确定不同的样式化方法，并为你选择一个适合你项目的明智选择。
