- en: Advanced Angular Topics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级Angular主题
- en: In previous chapters, we learned how to use directives and form validators.
    We will extend our knowledge in this chapter with custom directives and custom
    validators. We're also going to look at how to build **single-page applications** (**SPAs**)
    with Angular.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们学习了如何使用指令和表单验证器。在本章中，我们将通过自定义指令和自定义验证器来扩展我们的知识。我们还将学习如何使用Angular构建单页应用（SPA）。
- en: 'Additionally, we''ll explore integrating authentication into our Angular applications
    with two popular authentication providers: Google Firebase Authentication and
    Auth0.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将探讨如何将身份验证集成到我们的Angular应用程序中，使用两个流行的身份验证提供者：Google Firebase身份验证和Auth0。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Custom directives
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义指令
- en: Custom form validators
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义表单验证器
- en: Building SPAs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建SPA
- en: User authentication
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户身份验证
- en: Authentication with Firebase Authentication
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Firebase身份验证进行身份验证
- en: Authentication with Auth0
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Auth0进行身份验证
- en: Wiring up the client side
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端的连接
- en: Custom directives
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义指令
- en: In this section, we will learn how to create custom directives.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何创建自定义指令。
- en: '**Firstly, let''s understand what an Angular directive is. **'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**首先，让我们了解什么是Angular指令。**'
- en: Angular directives are a way to extend HTML functionality and the behavior of
    elements.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Angular指令是扩展HTML功能和元素行为的一种方式。
- en: In previous chapters, we learned about and implemented many built-in directives,
    such as `*ngIf`, `*ngFor`, `*ngSwitch`, and `ngModel`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们学习了并实现了许多内置指令，比如`*ngIf`、`*ngFor`、`*ngSwitch`和`ngModel`。
- en: In this section, we will learn how to create our own custom directive to extend
    the functionality of HTML elements.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何创建我们自己的自定义指令来扩展HTML元素的功能。
- en: '**Use case:** We want to create a custom directive for form elements and `onfocus`. The
    background color should be set to light blue, with the border dark blue, and the
    `onblur` event should be highlighted in red. So, let''s begin:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**用例：**我们想为表单元素和`onfocus`创建一个自定义指令。背景颜色应设置为浅蓝色，边框为深蓝色，`onblur`事件应以红色突出显示。所以，让我们开始：'
- en: 'Let''s generate the directive using the `ng` command:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`ng`命令生成指令：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On running the previous command, this is what will show up on our screen:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述命令后，屏幕上会显示以下内容：
- en: '![](assets/3cd1e54a-d931-4fc0-8139-5ddec3a42f17.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3cd1e54a-d931-4fc0-8139-5ddec3a42f17.png)'
- en: Notice that the directive files have been generated and that our `app.module.ts`
    file has also been updated, which means the directive is available across the
    app, to be used anywhere in any component.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，指令文件已经生成，并且我们的`app.module.ts`文件也已更新，这意味着该指令可以在整个应用程序中使用，在任何组件中使用。
- en: 'In the directive file, `on-focus-blur.directive.ts`, add the following lines
    of code:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在指令文件`on-focus-blur.directive.ts`中，添加以下代码行：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding code, the following important things should be noted:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，应注意以下重要事项：
- en: We are importing the required modules, that is, `Directive`, `HostListener`,
    and `HostBinding`.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在导入所需的模块，即`Directive`、`HostListener`和`HostBinding`。
- en: Using the `@directive` decorator, we are defining the name of the directive
    through the selector.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`@directive`装饰器，我们通过选择器定义指令的名称。
- en: '`@HostBinding` is used to set properties on the element.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@HostBinding`用于在元素上设置属性。'
- en: '`@HostListener` is used to listen to the events on the host element.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@HostListener`用于监听宿主元素上的事件。'
- en: We are binding the style background color property in the preceding example.
    We can bind any style, class, or event property on the host element.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们绑定了样式背景颜色属性。我们可以在宿主元素上绑定任何样式、类或事件属性。
- en: Using `@HostListener`, we are listening to the events and, with `onFocus`, we
    are changing the background color. By using `onBlur`, we reset the color.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`@HostListener`，我们监听事件，并使用`onFocus`改变背景颜色。通过使用`onBlur`，我们重置颜色。
- en: Now, we are good to use this decorator anywhere in our application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在应用程序的任何地方使用这个装饰器。
- en: 'We are going to use this in our `app.component.html` file on a form control
    input element:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在`app.component.html`文件中的表单控件输入元素中使用它：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the app using the `ng serve` command and click on the `Input button`. We
    should see the output and behavior, as shown in the following screenshot:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ng serve`命令运行应用程序，并单击`Input button`。我们应该看到以下截图中显示的输出和行为：
- en: '![](assets/cdf89346-2c82-4201-81be-8a2418dbdf4e.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cdf89346-2c82-4201-81be-8a2418dbdf4e.png)'
- en: Great. Now that we know how to write our custom directives, we will go ahead
    and try creating our own custom directives.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。现在我们知道如何编写自定义指令，我们将继续尝试创建我们自己的自定义指令。
- en: In the next section, we will learn about writing custom form validations.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何编写自定义表单验证。
- en: Custom form validations
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义表单验证
- en: In previous chapters, we learned about forms and implementing form validations.
    We used the built-in form validations or HTML5 attribute validations. But, in
    more complex scenarios, we will need to implement custom form validations. These
    validations differ from application to application. In this section, we will learn
    about custom form validations. To recap quickly, Angular provides us with various
    options through which we can implement form validations using the `Validators`
    module in Angular forms.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们学习了表单和实现表单验证。我们使用了内置的表单验证或HTML5属性验证。但是，在更复杂的场景中，我们将需要实现自定义表单验证。这些验证因应用程序而异。在本节中，我们将学习自定义表单验证。简而言之，Angular通过`Validators`模块为我们提供了各种选项，通过它们我们可以在Angular表单中实现表单验证。
- en: 'An example of using validators is shown in the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例中展示了使用验证器：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code, using the `Validators` module, we are applying validations
    of `required`, `maxLength`, and so on.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们使用`Validators`模块应用了`required`、`maxLength`等验证。
- en: 'Now, let''s learn how to create our own custom form validations. First, we
    will generate a component in which we will implement a form and a few elements
    so that we can apply our newly created directive:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习如何创建我们自己的自定义表单验证。首先，我们将生成一个组件，在其中我们将实现一个表单和一些元素，以便我们可以应用我们新创建的指令：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Upon running the preceding command successfully, we should see the following
    output:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 成功运行上述命令后，我们应该看到以下输出：
- en: '![](assets/284630e6-e257-49e4-a9cb-aeff46dd93d7.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/284630e6-e257-49e4-a9cb-aeff46dd93d7.png)'
- en: Now that we have generated our component, let's generate a directive in which
    we will implement custom form validations.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经生成了我们的组件，让我们生成一个指令，在其中我们将实现自定义表单验证。
- en: We will implement a custom directive to check the ISBN field.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现一个自定义指令来检查ISBN字段。
- en: '**What is an ISBN?** An ISBN is a unique identifier for each book that is ever
    published.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是ISBN？** ISBN是每本出版书籍的唯一标识符。'
- en: 'Here are the conditions that are required for an ISBN number:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是ISBN号码所需的条件：
- en: The ISBN number should be exactly 16 characters
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ISBN号码应该正好是16个字符
- en: Only integers are allowed for ISBNs
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只允许使用整数作为ISBN。
- en: 'Now, using the `ng` command, we will generate our directive:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用`ng`命令，我们将生成我们的指令：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Upon successful execution of the above command we should see the output as shown
    in the screenshot below
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 成功执行上述命令后，我们应该看到以下截图中显示的输出
- en: '![](assets/f28be244-663e-4cb2-af58-3629cdb61b26.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f28be244-663e-4cb2-af58-3629cdb61b26.png)'
- en: 'In the `valid-isbn.directive.ts` file, add the following lines of code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在`valid-isbn.directive.ts`文件中，添加以下代码行：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let's analyze the preceding code snippet in detail. First, using the `ng` CLI
    commands, we have generated a directive named `validISBN`. The Angular CLI will
    autogenerate the required file, with the basic syntax prepopulated. We are importing
    the required modules, namely `NG_VALIDATORS`, `ValidationErrors`, `Validator`,
    and `FormControl`. We are injecting the required modules as part of our providers.
    Next up, we have implemented a method named `validateISBN`, which is taking a
    parameter of the `FormControl` type. We are passing our form control field to
    this method, which will validate whether the value of the form control matches
    the conditions implemented in the method. Finally, we are invoking the `validateISBN` method
    in the method validate.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析上面的代码片段。首先，使用`ng` CLI命令，我们生成了一个名为`validISBN`的指令。Angular CLI将自动生成所需的文件，并预填充基本语法。我们正在导入所需的模块，即`NG_VALIDATORS`、`ValidationErrors`、`Validator`和`FormControl`。我们正在将所需的模块作为我们的提供者的一部分注入。接下来，我们实现了一个名为`validateISBN`的方法，它接受`FormControl`类型的参数。我们将我们的表单控件字段传递给这个方法，它将验证表单控件的值是否与方法中实现的条件匹配。最后，我们在`validate`方法中调用`validateISBN`方法。
- en: 'Now, we are good to use this custom form validation in any number of places,
    that is, wherever we need to verify or validate the ISBN number. Let''s run the
    application using the `ng serve` command. We should see the following output:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在任意数量的地方使用这个自定义表单验证，也就是说，无论我们需要验证或验证ISBN号码的地方。让我们使用`ng serve`命令运行应用程序。我们应该看到以下输出：
- en: '![](assets/96859ad5-94e1-450c-b8a7-0df0ae0d4521.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/96859ad5-94e1-450c-b8a7-0df0ae0d4521.png)'
- en: So far in this chapter, we have been applying some of them out of box, thinking
    and learning about how to build our custom directives and custom form validations.
    We have also learned how easy it is to integrate them into existing, or any new,
    applications effortlessly. All this can also form parts of single-page applications.
    Wait. What? Single-page applications? What's that? In the next section, we are
    going to learn all about single-page applications and build our own.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，我们已经在一些情况下应用了一些开箱即用的想法，并学习了如何构建我们自定义的指令和自定义表单验证。我们还学会了如何轻松地将它们集成到现有或任何新的应用程序中。所有这些也可以成为单页应用的一部分。等等。什么？单页应用？那是什么？在下一节中，我们将学习关于单页应用的一切，并构建我们自己的单页应用。
- en: Building single-page applications
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建单页应用
- en: In this section, we will learn about building single-page applications.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习构建单页应用。
- en: '**What exactly is a single-page application? **'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是单页应用？**'
- en: A single-page application is a web application or website that interacts with
    the user by dynamically rewriting the current page, rather than loading entirely
    new pages from a server.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 单页应用是一种与用户交互的Web应用程序或网站，它通过动态重写当前页面与用户交互，而不是从服务器加载全新的页面。
- en: Think of it as an application with only one HTML file, and the contents of the
    page load dynamically based on the request made by the user. We only create templates
    that get rendered in our browser dynamically at runtime.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 把它想象成一个只有一个HTML文件的应用程序，页面的内容根据用户的请求动态加载。我们只创建在运行时动态渲染在浏览器中的模板。
- en: Let me give you a good example.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我给你一个很好的例子。
- en: In [Chapter 15](f81ae891-b2dc-4620-bb4a-ad099c96e8a0.xhtml), *Deploying Angular
    Applications*, using the `ng build` command, we generated the compiled code of
    an Angular app.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第15章](f81ae891-b2dc-4620-bb4a-ad099c96e8a0.xhtml)中，*部署Angular应用程序*，使用`ng build`命令，我们生成了Angular应用程序的编译代码。
- en: 'Take a look at the compiled source code that was generated by Angular:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 查看由Angular生成的编译源代码：
- en: '![](assets/5efe3043-eabe-4d01-8840-dfbc4b6585be.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5efe3043-eabe-4d01-8840-dfbc4b6585be.png)'
- en: In the preceding screenshot, you will see only one HTML file, named `index`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，你将只看到一个名为`index`的HTML文件。
- en: Go ahead and open the file—you will see it's blank. That's because Angular applications
    are single-page apps, which means the content and data will be generated on the
    fly dynamically based on user actions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 继续打开文件 - 您会发现它是空白的。这是因为Angular应用程序是单页面应用程序，这意味着内容和数据将根据用户操作动态生成。
- en: It's safe to say that all Angular applications are single-page applications.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说所有的Angular应用程序都是单页面应用程序。
- en: 'The following are some of the advantages of building a single-page application:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是构建单页面应用程序的一些优势：
- en: The pages are rendered dynamically, and therefore our application source code
    is secure.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面是动态呈现的，因此我们的应用程序源代码是安全的。
- en: As the compiled source code renders in the user's browser, the pages load much
    faster than in the traditional request and response model.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于编译后的源代码在用户的浏览器中呈现，页面加载速度比传统的请求和响应模型快得多。
- en: Since pages load faster, this leads to a better user experience.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于页面加载速度更快，这导致了更好的用户体验。
- en: Using the `Router` component, we only load components and modules that are needed
    for certain features and do not load all of the modules and components in one
    go.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Router`组件，我们只加载特定功能所需的组件和模块，而不是一次性加载所有模块和组件。
- en: Throughout the course of this book, we have created many Angular apps, and each
    one of them has been a single-page application.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的整个过程中，我们创建了许多Angular应用程序，每个应用程序都是单页面应用程序。
- en: User authentication
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户认证
- en: In this section, we will learn how to implement user authentication in our Angular
    applications.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何在我们的Angular应用程序中实现用户认证。
- en: User authentication, in a broad context, consists of safely logging the user
    into our application, who should be able to view, edit, and create data on secure
    pages, and finally, log out of the application!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在广义上，用户认证包括安全地将用户登录到我们的应用程序中，用户应该能够在安全页面上查看、编辑和创建数据，最后从应用程序中注销！
- en: In a real-world application, there will be a lot of additional checks and security
    implementations to be done to sanitize user inputs, as well as checking whether
    they're a valid user, or verifying the authentication token for session timeouts,
    and other data checks to make sure no bad elements creep into the app.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界的应用程序中，需要进行大量的额外检查和安全实施，以清理用户输入，并检查他们是否是有效用户，或验证会话超时的身份验证令牌，以及其他数据检查，以确保不良元素不会进入应用程序。
- en: 'The following are some important modules for user authentication:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些重要的用户认证模块：
- en: Signing up new users
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册新用户
- en: Login for existing users
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有用户的登录
- en: Password reset
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码重置
- en: Session management for logged-in users
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已登录用户的会话管理
- en: One-time password or dual authentication
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一次性密码或双重认证
- en: Logging out an already logged in user
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注销已登录的用户
- en: In the upcoming sections, we will learn about implementing the preceding functionality
    using the Firebase and Auth0 frameworks.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习如何使用Firebase和Auth0框架实现上述功能。
- en: User authentication with Firebase
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Firebase进行用户认证
- en: In this section, we will learn how to implement user authentication using Firebase.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用Firebase实现用户认证。
- en: '**What is Firebase?**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是Firebase？**'
- en: Firebase is a managed service provided by Google. Firebase gives us functionality
    such as analytics, databases, messaging, and crash reporting, so that we can move
    quickly and focus on our users. You can learn more about the service at [https://firebase.com](https://firebase.com). Now,
    let's jump right in and implement Firebase in our Angular app.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase是由Google提供的托管服务。Firebase为我们提供了诸如分析、数据库、消息传递和崩溃报告等功能，使我们能够快速移动并专注于我们的用户。您可以在[https://firebase.com](https://firebase.com)了解更多有关该服务的信息。现在，让我们立即开始在我们的Angular应用程序中实现Firebase。
- en: 'The first step is to create an account with Google to use the Firebase service.
    You can use your Google account to log in to Firebase. Once you have successfully
    created your Firebase account, you should see the following output:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建一个谷歌账户来使用Firebase服务。您可以使用您的谷歌账户登录Firebase。一旦您成功创建了Firebase账户，您应该会看到以下输出：
- en: '![](assets/f161ba0f-5805-4ce3-8f99-63d49865c3b5.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f161ba0f-5805-4ce3-8f99-63d49865c3b5.png)'
- en: To create a new project, click on the Add Project link.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新项目，请点击“添加项目”链接。
- en: 'You will see the following dialog window, prompting you to enter the project''s
    name; in our case, we are making our project name AutoStop:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下对话框窗口，提示您输入项目名称；在我们的情况下，我们正在将我们的项目命名为AutoStop：
- en: '![](assets/171935b2-bfb4-4c12-b7cc-9d7a9534f42d.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/171935b2-bfb4-4c12-b7cc-9d7a9534f42d.png)'
- en: Note that Google will assign a unique project ID to your project.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，谷歌将为您的项目分配一个唯一的项目ID。
- en: 'Now, click on the Authentication link on the left-hand-side menu to set up
    user authentication features, which we can embed and set up in our Angular application:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击左侧菜单上的认证链接，设置用户认证功能，我们可以在我们的Angular应用程序中嵌入和设置：
- en: '![](assets/d4d69032-fb5a-4baf-b146-f22c19e9235f.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d4d69032-fb5a-4baf-b146-f22c19e9235f.png)'
- en: We can do a lot of other cool stuff here, but we will focus on the Authentication
    module for now.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这里做很多其他很酷的事情，但现在我们将专注于认证模块。
- en: 'Now, click on the Sign-in method tab to set up options for how to allow users
    to sign in to our Angular application:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击登录方法选项卡，设置如何允许用户登录到我们的Angular应用程序的选项：
- en: '![](assets/0981bfab-bb5f-4c86-9f5a-2f4fedee1a15.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0981bfab-bb5f-4c86-9f5a-2f4fedee1a15.png)'
- en: 'In the preceding screenshot, you will notice the following important things:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，您将注意到以下重要事项：
- en: Google Firebase provides various options that we can enable, through which we
    would want users of our application to sign in.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌Firebase提供了各种选项，我们可以启用这些选项，通过这些选项，我们希望我们应用程序的用户登录。
- en: We need to enable each provider option individually .
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要单独启用每个提供者选项。
- en: We have enabled Email/Password and Google options in our application.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已在我们的应用程序中启用了电子邮件/密码和谷歌选项。
- en: In order to enable Facebook, Twitter, and other apps, we will need to enter
    the developer API keys provided by the respective services.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了启用Facebook、Twitter和其他应用程序，我们需要输入各自服务提供的开发者API密钥。
- en: Now, scroll down a little bit on the page and you will see an option to set
    up called Authorised Domains.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在页面上向下滚动一点，您将看到一个名为授权域的设置选项。
- en: 'We will see two default values set up, that is, localhost and a unique subdomain,
    on the Firebase application, as shown in the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到Firebase应用程序上设置了两个默认值，即localhost和一个唯一的子域，在下面的截图中显示：
- en: '![](assets/4a79ada7-380a-4fc1-934c-a37b910ec01e.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4a79ada7-380a-4fc1-934c-a37b910ec01e.png)'
- en: We have made the required changes. Now, we need to set up Google Firebase's
    app settings. It's time to implement the user authentication in our Angular application.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经做出了必要的更改。现在，我们需要设置Google Firebase的应用设置。现在是在我们的Angular应用程序中实现用户认证的时候了。
- en: '**Prerequisite:** We expect users to have an Angular application up and running.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**先决条件：**我们期望用户已经有一个正在运行的Angular应用程序。'
- en: 'Open the Angular CLI command prompt; we need to install a few modules. We will
    need to install Angular Fire2 and Firebase first:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Angular CLI命令提示符；我们需要安装一些模块。我们需要先安装Angular Fire2和Firebase：
- en: Please note that Angular Fire2 is now Angular Fire.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Angular Fire2现在是Angular Fire。
- en: 'We will need to run the following command to install Angular Fire in our application:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要运行以下命令在我们的应用程序中安装Angular Fire：
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Upon successful execution of the preceding command, we should see the output
    shown in the following screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功执行上述命令后，我们应该看到以下截图中显示的输出：
- en: '![](assets/8d6bb008-a169-42f7-a493-6da0b51b88d5.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8d6bb008-a169-42f7-a493-6da0b51b88d5.png)'
- en: 'All set. Now, we need to create a service that will handle our authentication
    functionality:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一切就绪。现在，我们需要创建一个处理身份验证功能的服务。
- en: '[PRE8]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Using the `ng` command, we are generating a new service, named `appAuth`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ng`命令，我们正在生成一个名为`appAuth`的新服务：
- en: '![](assets/7e87e822-d886-4deb-9fff-9119466bb08e.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7e87e822-d886-4deb-9fff-9119466bb08e.png)'
- en: 'Now, it''s time to modify the `appAuth.service.ts` file and add the following
    code to it:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候修改`appAuth.service.ts`文件并添加以下代码了：
- en: '[PRE9]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the preceding code, we are making changes to the `app-auth.service.ts` file.
    The following important points should be noted:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们正在对`app-auth.service.ts`文件进行更改。应注意以下重要点：
- en: We are importing the required classes, namely `AngularFireAuth`, `Auth`, and
    `Router`, into the service.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在将所需的类，即`AngularFireAuth`，`Auth`和`Router`，导入到服务中。
- en: Using `@Injectable`, we are specifying that the service is injected at the root
    level in the Angular tree structure.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`@Injectable`，我们指定该服务在Angular树结构中的根级别注入。
- en: We are defining a few private variables that we will use across our application.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在定义一些私有变量，我们将在整个应用程序中使用。
- en: In the constructor method, we are injecting the `AngularFireAuth` and `Router`
    classes.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构造函数方法中，我们正在注入`AngularFireAuth`和`Router`类。
- en: 'We are defining three methods: `Login`, `Logout`, and `isLoggedInUser`.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在定义三种方法：`Login`，`Logout`和`isLoggedInUser`。
- en: 'In the `login` method, we are using the `this.afAuth` instance, calling the
    `signInWithPopup` method, and passing the `auth.GoogleAuthProvider` argument, which
    we get from the Firebase app that we installed locally:'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`login`方法中，我们正在使用`this.afAuth`实例，调用`signInWithPopup`方法，并传递`auth.GoogleAuthProvider`参数，该参数来自我们在本地安装的Firebase应用程序：
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When this method is invoked, a new window will open up, in which we can see
    the Google sign-in option, using which we can log in to the app.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当调用此方法时，将打开一个新窗口，在其中我们可以看到谷歌登录选项，使用它我们可以登录到应用程序。
- en: We are setting the `this.loggedInUser` variable to `true`.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在将`this.loggedInUser`变量设置为`true`。
- en: We are setting the logged-in user's token to the `this.userToken` variable.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将已登录用户的令牌设置为`this.userToken`变量。
- en: We are also subscribing to get the `authState` response.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还订阅以获取`authState`响应。
- en: Finally, using the router instance and using the `navigate` method, we are redirecting
    the user to the profile page.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，使用路由器实例和使用`navigate`方法，我们将用户重定向到个人资料页面。
- en: Inside the `isLoggedInUser` method, we are verifying whether the `userToken`
    is set or not. `userToken` will be set if the user has logged in correctly; otherwise,
    the method will return `false`.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`isLoggedInUser`方法中，我们正在验证`userToken`是否已设置。如果用户已正确登录，`userToken`将被设置；否则，该方法将返回`false`。
- en: In the `logout` method, again using the instance of `afauth`, we are calling
    the `signout` method, which will log the user out.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`logout`方法中，再次使用`afauth`的实例，我们正在调用`signout`方法，这将注销用户。
- en: Finally, we are setting the `userToken` to `empty`.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们将`userToken`设置为`empty`。
- en: 'Awesome. We have done all the heavy lifting in our `app-auth.service.ts` file.
    Now, it''s time to call these methods in our components: `login`, `profile`, and
    `log out`.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。我们已经在`app-auth.service.ts`文件中完成了所有繁重的工作。现在，是时候在我们的组件中调用这些方法了：`login`，`profile`和`log
    out`。
- en: 'In the `login.component.html` file, we will add the following login form:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在`login.component.html`文件中，我们将添加以下登录表单：
- en: '[PRE11]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding code, we are just adding an Angular reactive login form using
    `FormGroup` and `FormControllers`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们只是使用`FormGroup`和`FormControllers`添加了一个Angular响应式登录表单。
- en: 'The output of the login form is shown in the following screenshot:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 登录表单的输出显示在以下截图中：
- en: '![](assets/f839e4c3-7077-4f1b-9572-32342ecbd4f4.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f839e4c3-7077-4f1b-9572-32342ecbd4f4.png)'
- en: 'And in the `profile.component.ts` file, we are just making a call to the `login`
    method:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在`profile.component.ts`文件中，我们只是调用了`login`方法：
- en: '[PRE12]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, in the `profile.component.ts` file, we add a check to see whether the
    user is logged in or not:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`profile.component.ts`文件中，我们添加了一个检查，以查看用户是否已登录：
- en: '[PRE13]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When the user navigates to the profile page, if they are logged in, they will
    see the details; otherwise, the user will be redirected to the login page.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户导航到个人资料页面时，如果他们已登录，他们将看到详细信息；否则，用户将被重定向到登录页面。
- en: 'Now, on to the final part; we will have a logout link in our `app.component.html`
    file:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，进入最后一部分；我们将在我们的`app.component.html`文件中有一个注销链接：
- en: '[PRE14]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We are adding links with `*ngIf` conditions to show the corresponding links
    when the user is logged in or not:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在添加带有`*ngIf`条件的链接，以在用户已登录或未登录时显示相应的链接：
- en: '[PRE15]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When the user clicks on the logout link, we are calling the logout method of
    `appAuthService` and, on successful logout, we are redirecting the user back to
    the login page.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击注销链接时，我们调用`appAuthService`的注销方法，并在成功注销后将用户重定向回登录页面。
- en: 'Now, let''s run the app using the `ng serve` command. We should see the following
    output:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`ng serve`命令来运行应用程序。我们应该看到以下输出：
- en: '![](assets/f7d425f0-5387-430c-a217-066b2e675169.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f7d425f0-5387-430c-a217-066b2e675169.png)'
- en: User authentication with Auth0
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Auth0进行用户身份验证
- en: 'In this section, we will learn how to implement user authentication using Auth0.
    Before we go ahead and implement Auth0 in our Angular application, we will need
    to implement some prerequisites. Let''s get right to it:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用Auth0实现用户身份验证。在我们继续在我们的Angular应用程序中实现Auth0之前，我们需要实现一些先决条件。让我们开始吧：
- en: 'First, we will need to create an account with Auth0 at Auth0.com. Upon successfully
    logging in to the account, we should see the following dashboard screen:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在Auth0.com上创建一个帐户。成功登录到帐户后，我们应该看到以下仪表板屏幕：
- en: '![](assets/92b08610-8389-4261-9123-c434ccc805c5.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/92b08610-8389-4261-9123-c434ccc805c5.png)'
- en: We will have to register our application so that we can create the required
    settings to implement `Auth0` in our app.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不得不注册我们的应用程序，以便我们可以创建所需的设置来在我们的应用程序中实现`Auth0`。
- en: 'Click on the Applications link on the left-hand-side menu:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧菜单上的“应用程序”链接：
- en: '![](assets/5b8583b7-7cb0-4b2a-999b-ce56a4481b66.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5b8583b7-7cb0-4b2a-999b-ce56a4481b66.png)'
- en: 'Now, click on the Create Application button to create an application:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击“创建应用”按钮创建一个应用：
- en: '![](assets/5748b7e1-b1a5-429d-99a9-bace80b4880a.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5748b7e1-b1a5-429d-99a9-bace80b4880a.png)'
- en: We will need to enter the name of the application and select the type of application
    we are building. In our case, it's a Single Page Web App, so go ahead and select
    the option and click on the CREATE button.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要输入应用程序的名称并选择我们正在构建的应用程序类型。在我们的情况下，这是一个单页Web应用程序，所以请继续选择该选项并点击“创建”按钮。
- en: 'The next thing we need to do is update the important settings of our application.
    So, click on the application name and navigate to the Settings tab:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要做的下一件事是更新应用程序的重要设置。因此，点击应用程序名称并导航到“设置”选项卡：
- en: '![](assets/2c8b132e-a199-481c-880e-ce8f011e8485.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2c8b132e-a199-481c-880e-ce8f011e8485.png)'
- en: 'The following are some important things to keep in mind:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些需要牢记的重要事项：
- en: We need to update the Allowed Callback URLs, Allowed Web Origins, and Allowed
    Origins (CORS).
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要更新允许的回调URL、允许的Web起源和允许的起源（CORS）。
- en: If we do update the details for Allowed Web Origins and Allowed Origins, we
    will get a cross-origin request (CORS) error.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们更新了允许的Web起源和允许的起源的详细信息，我们将收到跨源请求（CORS）错误。
- en: We have adjusted the required settings in Auth0, so we are good to implement
    Auth0 in our application now.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在Auth0中调整了所需的设置，所以现在可以在我们的应用程序中实现Auth0了。
- en: 'In order to implement Auth0 in our application, we will need to install a few
    modules, namely `auth0-js`, `auth0-lock`, and `angular2-jwt`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的应用程序中实现Auth0，我们需要安装一些模块，即`auth0-js`，`auth0-lock`和`angular2-jwt`：
- en: '![](assets/346d273a-4246-49df-adaf-3d84e1098e9e.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/346d273a-4246-49df-adaf-3d84e1098e9e.png)'
- en: In the preceding screenshot, using the `npm install` command, we installed the
    required `Auth0` modules. Now, it's time to generate the services and components
    for our application.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，使用`npm install`命令，我们安装了所需的`Auth0`模块。现在，是时候为我们的应用程序生成服务和组件了。
- en: 'First, we will need to generate our service; let''s call it `authService`.
    We need to run the following command to generate our service:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要生成我们的服务；让我们称之为`authService`。我们需要运行以下命令来生成我们的服务：
- en: '[PRE16]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Upon successful execution of the preceding command, we should see the following
    output:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功执行上述命令后，我们应该看到以下输出：
- en: '![](assets/e5103f9e-b704-4367-974a-954c468f1332.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e5103f9e-b704-4367-974a-954c468f1332.png)'
- en: 'We can verify and confirm that our service has been generated, along with the
    spec file (the file used to write our test specifications). Now that we have created
    our service, it''s time to generate the components. We will run the following
    commands using the `ng` CLI in order to generate the required components:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以验证并确认我们的服务已经生成，以及规范文件（用于编写我们的测试规范的文件）。现在我们已经创建了我们的服务，是时候生成组件了。我们将使用`ng`
    CLI运行以下命令以生成所需的组件：
- en: '[PRE17]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Upon successful execution of the preceding commands, we should see the following
    output:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功执行上述命令后，我们应该看到以下输出：
- en: '![](assets/feacc766-c992-4b57-a824-7bf0f92b9e2e.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/feacc766-c992-4b57-a824-7bf0f92b9e2e.png)'
- en: In the preceding screenshot, we can verify and confirm that our required components,
    namely `login` and `profile`, have been generated successfully. Now, we are good
    to go ahead with implementing the functionality for our components.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，我们可以验证并确认我们的所需组件，即`login`和`profile`，已成功生成。现在，我们可以继续实现我们组件的功能了。
- en: 'To make our application beautiful, let''s install the `bootstrap` CSS framework
    as well:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的应用程序更美观，让我们也安装`bootstrap` CSS框架：
- en: '[PRE18]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We will also need to install the `jquery` module:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要安装`jquery`模块：
- en: '[PRE19]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Upon successful execution of the preceding command, we should see the following
    output:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功执行上述命令后，我们应该看到以下输出：
- en: '![](assets/76143367-3d5f-427f-93f8-64f80ae8ab07.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/76143367-3d5f-427f-93f8-64f80ae8ab07.png)'
- en: 'Super cool. Now, it''s time to add a few links in the `Nav` component:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了。现在，是时候在`Nav`组件中添加一些链接了：
- en: '[PRE20]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the preceding code, the following important points should be noted:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，应该注意以下重要点：
- en: We are using the `nav` component of Bootstrap.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在使用Bootstrap的`nav`组件。
- en: We are adding a few links and attaching a click event, such as login and logout
    depending on the state of the user. If the user is logged in we will display logout
    link, else we will display register link
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在添加一些链接并附加点击事件，例如根据用户状态登录和注销。如果用户已登录，我们将显示注销链接，否则我们将显示注册链接。
- en: We will implement these methods in our nav.component.ts file.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将在我们的nav.component.ts文件中实现这些方法。
- en: We are using `*ngIf` to check whether the user is logged in and toggle the login
    and logout links accordingly
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在使用`*ngIf`来检查用户是否已登录，并相应地切换登录和注销链接。
- en: 'The output of the preceding code is shown in the following screenshot:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下截图所示：
- en: '![](assets/d902fda2-9707-4a73-9c1c-42c965b1209d.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d902fda2-9707-4a73-9c1c-42c965b1209d.png)'
- en: 'We will now need to work on the `auth` service that we have generated. In the
    `services/auth.service.ts` file, we need to import the required modules first
    and then add our methods, `login` and `logout`:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在我们生成的`auth`服务上工作。在`services/auth.service.ts`文件中，我们需要首先导入所需的模块，然后添加我们的方法`login`和`logout`：
- en: '[PRE21]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Once we have imported the `Auth0Lock` and `TokenNotExpired` classes, we will
    create instances so that we can use them.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们导入了`Auth0Lock`和`TokenNotExpired`类，我们将创建实例以便我们可以使用它们。
- en: 'Take a look at the basic `Auth0Lock` object instance creation code:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下基本的`Auth0Lock`对象实例创建代码：
- en: '[PRE22]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In order to create a new object of the `Lock` class, we will need to pass the
    client ID and domain name to the instance.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个`Lock`类的新对象，我们需要将客户端ID和域名传递给实例。
- en: 'Let''s implement this in our `auth.service.ts` file:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的`auth.service.ts`文件中实现这个：
- en: '[PRE23]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the preceding code, the following important points should be noted:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，应该注意以下重要点：
- en: We are creating three variables, namely `_idToken`, `_accessToken`, and `_expiresAt`.
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了三个变量，分别是`_idToken`、`_accessToken`和`_expiresAt`。
- en: We are creating an instance of `Auth0Lock` and we need to pass params to the
    object.
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在创建一个`Auth0Lock`的实例，并且需要向对象传递参数。
- en: The `Auth0Lock` object will require two mandatory params to be passed. The first
    param is `ClientId`, and the second is the domain name.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Auth0Lock`对象将需要传递两个必需的参数。第一个参数是`ClientId`，第二个是域名。'
- en: The third param includes options such as `allowedConnections`, theme, and so
    on, as it says they are optional.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个参数包括`allowedConnections`、主题等选项，因为它说它们是可选的。
- en: 'Client Id and Domain can be obtained from the Auth0 app settings, as shown
    in the following screenshot:'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端ID和域名可以从Auth0应用程序设置中获取，如下面的截图所示：
- en: '![](assets/002c661a-20db-48b6-8d42-877fb5bf05fd.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/002c661a-20db-48b6-8d42-877fb5bf05fd.png)'
- en: 'We can now listen to events attached to the `lock` object:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以监听附加到`lock`对象的事件：
- en: '[PRE24]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the preceding code, we are performing the following steps:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们正在执行以下步骤：
- en: In the `constructor` method, we are listening to the `on` event for the `authenticated`
    and `authorization_error` states.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`constructor`方法中，我们正在监听`authenticated`和`authorization_error`状态的`on`事件。
- en: When we get an authenticated message from the `lock` instance, we are storing
    a `localStorage` item called `userToken` and setting `accessToken` as its value.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们从`lock`实例获得认证消息时，我们正在存储一个名为`userToken`的`localStorage`项目，并将`accessToken`设置为其值。
- en: We are also listening to the error message and logging the message in the console.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还在监听错误消息并将消息记录在控制台中。
- en: 'Now, it''s time to implement the `login` and `logout` methods:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候实现`login`和`logout`方法了：
- en: '[PRE25]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In the `login` method, we are calling the `show` method of the `lock` object.
    This will bring you to the dialog box of Auth0, with options to Log In, Sign Up,
    or Don't remember your password? The login dialog box will have social options
    if you selected any.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在`login`方法中，我们正在调用`lock`对象的`show`方法。这将带您进入Auth0的对话框，其中有登录、注册或忘记密码的选项。如果您选择了任何社交选项，登录对话框将包含社交选项。
- en: 'For the `logout` method, we just clear the `userToken` that we set when the
    user logs in and redirect the user back to the home login page:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`logout`方法，我们只需清除用户登录时设置的`userToken`，并将用户重定向回主页登录页面。
- en: '[PRE26]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Once we clear `userToken`, the application will know that the user is not logged
    in.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 清除`userToken`后，应用程序将知道用户未登录。
- en: 'We have implemented the `login` and `logout` methods, but we also need a method
    to check whether the user is logged in or not:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经实现了`login`和`logout`方法，但我们还需要一个方法来检查用户是否已登录：
- en: '[PRE27]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the `isLoggedIn` method, we are checking whether the value of the `userToken`
    variable in local storage is set or not. If the value is set, it means that the
    user is logged in; otherwise, the user is not logged in.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在`isLoggedIn`方法中，我们正在检查本地存储中`userToken`变量的值是否设置。如果设置了值，这意味着用户已登录；否则，用户未登录。
- en: 'Just import the service into our `app.component.ts` file and inject it into
    the constructor:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将服务导入到我们的`app.component.ts`文件中，并将其注入到构造函数中：
- en: '[PRE28]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: That's it. Wasn't that simple?
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。是不是很简单？
- en: 'We should see the following output:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到以下输出：
- en: '![](assets/f5ad21f4-0db1-4521-9926-36055712db9b.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f5ad21f4-0db1-4521-9926-36055712db9b.png)'
- en: 'If we click on the Login link, we should see the Auth0 dialog window pop up:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击登录链接，我们应该看到Auth0对话框弹出窗口：
- en: '![](assets/79c791e3-7840-462a-b7de-7c3cd67d5828.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/79c791e3-7840-462a-b7de-7c3cd67d5828.png)'
- en: 'Now, go ahead and click on the Sign Up tab to create an account and, once registered
    successfully, you should see that the user has been added to the Auth0 dashboard
    as well:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，继续点击“注册”选项卡创建一个账户，一旦成功注册，您应该看到该用户也已添加到Auth0仪表板中：
- en: '![](assets/6208686e-8b0a-4e39-845d-ebc4c44b3eff.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6208686e-8b0a-4e39-845d-ebc4c44b3eff.png)'
- en: 'Once we log in successfully, we should see only the Logout link, as shown in
    the following screenshot:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 成功登录后，我们应该只能看到注销链接，如下面的屏幕截图所示：
- en: '![](assets/63ae6c9f-5546-4853-810c-5f09b9c876d3.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/63ae6c9f-5546-4853-810c-5f09b9c876d3.png)'
- en: When we click on the Logout link, the user should be taken back to the default
    landing page and should see the login and register options. Also, notice the params
    provided in the URL, such as `access_token expires_in`, and so on.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击注销链接时，用户应该被带回默认的登陆页面，并应该看到登录和注册选项。还要注意URL中提供的参数，如`access_token expires_in`等。
- en: Awesome! We just implemented the entire user authentication using Auth0 in our
    application.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们刚刚在我们的应用程序中使用Auth0实现了整个用户身份验证。
- en: Summary
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about some advanced Angular topics, from creating
    custom directives that are way too cool, to extending the behavior of our native
    HTML elements. We also created custom form validations, which are really useful
    when developing a really complex application with a lot of validations and compliance
    requirements. We dove into Angular single-page applications and looked at how
    they work and behave. We implemented user authentication in our Angular applications
    through native code.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了一些高级的Angular主题，从创建自定义指令到扩展原生HTML元素的行为。我们还创建了自定义表单验证，这在开发具有许多验证和合规性要求的复杂应用程序时非常有用。我们深入研究了Angular单页应用程序，并了解了它们的工作和行为。我们通过原生代码在我们的Angular应用程序中实现了用户身份验证。
- en: We also learned how to build and implement a secure user authentication management
    system using the available frameworks, that is, Firebase and Auth0\. We then learned
    to implement login, registration, and logout features to make sure we can secure
    the data and features of applications. Now that we have mastered the preceding
    concepts, we are good to implement a complete, wired end-to-end Angular application.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何使用现有框架构建和实现安全的用户身份验证管理系统，即Firebase和Auth0。然后，我们学习了如何实现登录、注册和注销功能，以确保我们可以保护应用程序的数据和功能。现在我们已经掌握了前面的概念，可以实现一个完整的、有线的端到端Angular应用程序了。
- en: Now that we have learned how to develop our Angular applications, the only thing
    between our applications and real users is the deployment of our applications.
    That's the focus of our next chapter. In the next and final chapter of this book,
    we will learn all about deploying our Angular applications.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何开发我们的Angular应用程序，唯一隔我们的应用程序和真实用户之间的就是部署我们的应用程序。这是我们下一章的重点。在本书的下一章和最后一章中，我们将学习如何部署我们的Angular应用程序。
