- en: Chapter 6. HTML5 Audio
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章。HTML5音频
- en: Let's take what we've learned so far and turn our eyes to the music scene. We're
    going to take the jQuery Mobile interface and turn it into a media player, artist
    showcase, and information hub that can be saved to people's home screens.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把迄今为止学到的东西转向音乐领域。我们将把jQuery Mobile界面转化为一个媒体播放器、艺术家展示和信息中心，并可以保存到人们的主屏幕上。
- en: 'In this chapter, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖：
- en: HTML5 Audio (the progressive enhancement way)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML5音频（渐进增强方式）
- en: Fixed position, persistent toolbars (really!?)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 固定位置，持久工具栏（真的！？）
- en: Custom JavaScript controls for HTML5 Audio
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML5音频的自定义JavaScript控件
- en: HTML5 Audio in iOS and how it is different
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS中的HTML5音频及其区别
- en: The all-in-one solution (multipage made useful)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全能解决方案（多页面实用）
- en: Saving to the home screen with HTML5 manifest
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTML5清单将内容保存到主屏幕
- en: HTML5 Audio
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5音频
- en: Say hello to Lindsey Stirling. Lindsey burst onto the scene on season five of
    America's Got Talent. Have you ever seen a violinist *rock out*? Since her appearance
    on the national stage, she's been lighting up YouTube with millions of views per
    video. On September 18, 2012, she released her first self-titled album. This chapter
    will be a fan tribute centering on her music and digital presence. If you want
    the full experience, go to her YouTube channel [http://youtube.com/lindseystomp](http://youtube.com/lindseystomp).
    Her 2 million subscribers can't be wrong!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与琳赛·施特林问好。琳赛在美国达人秀第五季上首次登场。你看过小提琴手*摇滚表演*吗？自她在全国舞台上的表现以来，她在YouTube上的视频每个都有数百万次观看。2012年9月18日，她发布了她的首张同名专辑。这一章将是对她的音乐和数字存在的粉丝致敬。如果你想要完整的体验，就去她的YouTube频道[http://youtube.com/lindseystomp](http://youtube.com/lindseystomp)。她的200万订阅者不会错！
- en: '![HTML5 Audio](img/0069_06_00.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![HTML5音频](img/0069_06_00.jpg)'
- en: 'Now, back to business. As we''ve seen so far, jQuery Mobile makes everything
    easy. You almost have to try to make things complicated. HTML5 Audio can be as
    complicated as you want it to be and we will get there. For now, let''s see just
    how ridiculously simple it can be to bring audio into your jQuery Mobile pages.
    Consider the following code snippet:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到正题。正如我们迄今所见，jQuery Mobile使一切变得容易。你几乎必须要尝试才能把事情搞复杂。HTML5音频可以像你希望它那样复杂，我们会到那一步的。现在，让我们看看把音频带入你的jQuery
    Mobile页面有多么简单。考虑下面的代码片段：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That's it. That's all it took to get that music control bar in the previous
    image. Let's break this down just a little.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。这就是在上一张图片中得到音乐控制条所需的全部内容。我们来稍微分解一下。
- en: Just like in the video from [Chapter 4](ch04.html "Chapter 4. QR Codes, Geolocation,
    Google Maps API, and HTML5 Video"), *QR Codes, Geolocation, Google Maps API, and
    HTML5 Video*, the `audio` tags can support multiple sources and the browser will
    simply choose the first one it knows how to deal with. Older browsers won't have
    a clue what to do and will simply parse this like XML, which means that the only
    thing that will show up is the text, "Your browser is so old that you can't hear
    the music."
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在[第四章](ch04.html "第四章。二维码，地理定位，谷歌地图API和HTML5视频")的视频中一样，*二维码，地理定位，谷歌地图API和HTML5视频*，`音频`标签可以支持多个来源，浏览器将简单地选择它知道如何处理的第一个。老旧的浏览器将毫无头绪，只会简单地解析这个像XML，这意味着唯一显示的是文本，“你的浏览器太老了，无法播放音乐。”
- en: Each browser provides its own native interface for controlling the audio. Some
    are tiny and shiny like the iOS version you just saw, and some are completely
    ugly but more usable such as Android. Regardless, they all leave something to
    be desired so let's turn jQuery Mobile into a media player.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每个浏览器都提供自己的本机界面来控制音频。有些像iOS版本那样又小又亮，而有些则完全丑陋但更可用，比如Android。无论如何，它们都有所不足，所以让我们把jQuery
    Mobile变成一个媒体播放器。
- en: 'Here is our base starting page. You can find the source for this in `electricdaisy_basic.html`
    in the code files:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的基本起始页面。你可以在代码文件中的`electricdaisy_basic.html`中找到其源代码：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This well-constructed jQuery Mobile page doesn't need JavaScript for any purpose
    other than beautification. You can turn off JS and the whole page still works
    and still plays music. For all those progressive enhancement fans out there, we're
    starting off on the right foot. After all, everyone is a fan of music, not just
    people with smartphones.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个构建良好的jQuery Mobile页面除了美化之外无需任何JavaScript。你可以关闭JS，整个页面仍能正常工作，还能播放音乐。对于所有的渐进增强粉丝来说，我们正从正确的角度开始。毕竟，每个人都是音乐的粉丝，不仅仅是智能手机用户。
- en: Now let's see what we can do around creating a better control interface using
    JavaScript and fixed position toolbars.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何使用 JavaScript 和固定位置工具栏来创建更好的控制界面。
- en: Fixed position persistent toolbars (really!?)
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 固定位置的持续工具栏（真的！？）
- en: I'll be honest; I have a generally low opinion of fixed position toolbars in
    the mobile space. From a usability standpoint, they're a disaster. Mobile screens
    have very little usable space to begin with. To waste that much more real estate
    without providing a *strong* benefit to the user, is unthinkable. Moreover, because
    of the CSS involved, ancient versions of Android (less than Version 2.3) will
    not support the fixed position toolbar.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我要诚实地说；我对移动空间中的固定位置工具栏的看法普遍很低。从可用性的角度来看，它们是一场灾难。移动屏幕本来可用空间就很少。在没有为用户提供*强大*的好处的情况下浪费更多的屏幕空间是不可想象的。此外，由于涉及到的
    CSS，古老版本的 Android（低于版本 2.3）将不支持固定位置工具栏。
- en: <rant>Yet, we see it all the time don't we? Companies slap their logo on a top
    toolbar that never goes away. They throw on a little global navigation and call
    it a benefit to the user when really it's all about them reinforcing their branding.
    You can tell because the only interactive parts on the bar are a menu button and
    possibly a search button (as if we couldn't have found them again at the top).
    There are many better techniques to provide global navigation. </rant>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <rant>然而，我们经常看到这种情况，不是吗？公司把他们的标志贴在永远不会消失的顶部工具栏上。他们加上一点全局导航，并称之为对用户的一个好处，而实际上这完全是为了加强他们的品牌形象。你可以从工具栏上唯一的可交互部分——一个菜单按钮和可能的一个搜索按钮上看出来（好像我们不能再次在顶部找到它们一样）。有许多更好的技术来提供全局导航。</rant>
- en: '![Fixed position persistent toolbars (really!?)](img/0069_06_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![固定位置的持续工具栏（真的！？）](img/0069_06_01.jpg)'
- en: Today, we have a valid use for these bars. We're going to put music controls
    in them that will persist as we transition tracks. If we do the job right, this
    music website will feel more like an app and give the user constant control over
    the sound coming from their device.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我们有一个合理的用途来使用这些工具栏。我们将在其中放置音乐控制，这些音乐控制将随着我们切换曲目而持续存在。如果我们做得对，这个音乐网站将更像一个应用程序，并让用户始终控制设备发出的声音。
- en: If you've already played with this part of the jQM UI, skip to the next paragraph
    now.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经玩过 jQM UI 的这一部分，请立即跳到下一段。
- en: Making a toolbar fixed (doesn't move as you scroll) and persistent (doesn't
    move as you change pages) is pretty simple really. All you have to do is add `data-position="fixed"`
    to make it fixed and give `data-id="whatever"` to the footers on the pages where
    you want the footer to hold still as the page transitions behind it. This functionality
    also works with headers.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使工具栏固定（滚动时不移动）和持续（在更改页面时不移动）其实很简单。你所要做的就是添加 `data-position="fixed"` 来使其固定，然后在你想要页脚在页面转换时保持不动的页面上添加
    `data-id="whatever"` 给页脚。这个功能也适用于头部。
- en: 'Here is the basis for our persistent footer:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们持续页脚的基础：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'See that class up at the top of the footer (`jsShow`)? Let''s add another class
    (`jsHide`) to the paragraph surrounding the `audio` tag:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 见到页脚顶部的那个类（`jsShow`）了吗？让我们在围绕`audio`标签的段落中添加另一个类（`jsHide`）：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the CSS, let''s add the following rules:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CSS 中，让我们添加以下规则：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then we''ll add a line to our `global.js` file to pull the whole thing together:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将在我们的 `global.js` 文件中添加一行代码来将整个内容组合在一起：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is a technique used by the HTML5 boilerplate ([http://html5boilerplate.com/](http://html5boilerplate.com/))
    and Modernizer ([http://modernizr.com/](http://modernizr.com/)). If you've not
    looked at these two marvels, it's worth your time. The long and short of it is
    that we now have a handy, lightweight way of handling progressive enhancement.
    Voice assist also works perfectly for those who need the assistance.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 HTML5 模板 ([http://html5boilerplate.com/](http://html5boilerplate.com/)) 和
    Modernizer ([http://modernizr.com/](http://modernizr.com/)) 使用的一种技术。如果你还没有看过这两个奇迹，那值得你的时间。简单来说，我们现在有了一种方便、轻量级的处理渐进增强的方法。对于那些需要帮助的人，语音辅助也非常完美。
- en: 'We''re very close now to having a nice universal UI for a media player, but
    if you''ve been typing along, you''ve notice that the input `type="range"` is
    showing a textbox. On its own this probably wouldn''t be too offensive but the
    fact that HTML5 Audio keeps track of its current position in terms of seconds
    makes it pretty useless as a display element. So, let''s hide it and expand the
    bar a bit with some simple CSS:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们离一个好用的通用媒体播放器 UI 很近了，但是如果你一直在输入代码，你可能已经注意到输入`type="range"`正在显示一个文本框。单独看这可能不算太糟糕，但
    HTML5 音频以秒为单位跟踪其当前位置，这使得它作为显示元素相当无用。所以，让我们隐藏它，并通过一些简单的 CSS 扩展一下进度条：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, that we're looking good, let's wire the thing together and make it work.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们看起来不错了，让我们将它们连接起来使其工作。
- en: Controlling HTML5 Audio with JavaScript
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 JavaScript 控制 HTML5 音频
- en: Alright then, here we start to get a little bit more hairy with JavaScript.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在我们开始用 JavaScript 变得有点复杂了。
- en: 'First, let''s set up an interval to update the progress bar. It''s going to
    have to serve two functions, displaying the current time and changing the time.
    We''ll start by adding references to these objects as well as placing event hooks
    for every one of the audio events that we might want to attach to. The comments
    describe which events are fired when:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们设置一个间隔来更新进度条。它将有两个功能，显示当前时间和更改时间。我们将首先添加对这些对象的引用，并为我们可能想要附加到的每一个音频事件放置事件挂钩。注释描述了何时触发哪些事件：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, let''s create the function that will run the interval:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建运行间隔的函数：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we''ll just kick off the interval when the play button is clicked and do
    the other necessary things. As usual, everything is well commented:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击播放按钮时，我们将启动间隔并执行其他必要的操作。和往常一样，所有内容都有很好的注释：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Setting seek controls:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 设置搜索控件：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, let''s create a JSON object to track our current state and track list:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个 JSON 对象来跟踪我们的当前状态和跟踪列表：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next up, the skip back and forward buttons. We could set up the random button
    but for now we''ll skip that:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，是跳过后退和前进按钮。我们可以设置随机按钮，但现在我们会跳过：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Performance Note**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**性能注解**'
- en: Notice how I've have shifted away from using the `click` event and I'm now using
    the `vclick` event. The `vclick` event is a custom event in jQuery Mobile that
    attempts to bridge the performance gap between click (a desktop-based event) and
    tap/touchstart (touch-based events). There is generally about a 300-millisecond
    gap between the two and which browser supports what is always a hard thing to
    figure out. By using `vclick` you can still support desktop and touch devices
    but you can hopefully realize a slight performance boost. For more about this,
    check out the blog post by one of the jQuery Mobile contributors, John Bender
    at [https://coderwall.com/p/bdxjzg](https://coderwall.com/p/bdxjzg).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我已经不再使用`click`事件，而是现在使用`vclick`事件。`vclick`事件是 jQuery Mobile 中的自定义事件，旨在弥合 click（桌面事件）和
    tap/touchstart（触摸事件）之间的性能差距。两者之间通常存在约 300 毫秒的差距，而支持什么样的浏览器是一件难以确定的事情。通过使用`vclick`，您仍然可以支持桌面和触摸设备，但您可以希望获得轻微的性能提升。有关更多信息，请参阅
    jQuery Mobile 贡献者之一 John Bender 在 [https://coderwall.com/p/bdxjzg](https://coderwall.com/p/bdxjzg)
    的博客文章。
- en: HTML5 Audio in iOS is different
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS 中的 HTML5 音频不同
- en: Understanding the event cycle of HTML5 Audio is critical to making it work right.
    This can get especially confusing when you start mixing in the odd event cycles
    of jQuery Mobile. Add to that a confusing set of resource restrictions that differ
    per device and you've got a real recipe for confusion.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 HTML5 音频的事件循环对于使其正常工作至关重要。当您开始混合 jQuery Mobile 的奇怪事件循环时，情况可能会变得特别混乱。再加上一系列因设备而异的资源限制，您就真的会变得很困惑。
- en: As a quick and easy way of testing mobile sites, you can usually just open up
    Google Chrome (since its WebKit) or IE9 (for the Windows Phone) and shrink it
    down to mobile size. Naturally, this does not substitute for real testing. Always
    check your creations on real devices. That being said, the shrunken browser approach
    will usually get you 97.5 percent of the way there. Well... HTML5 Audio throws
    that operating model right out the window.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 作为测试移动站点的快速简便方法，你通常只需打开 Google Chrome（因为它是 WebKit）或 IE9（用于 Windows Phone）并将其缩小到移动尺寸。当然，这不能替代真正的测试。始终要在真实设备上检查你的作品。话虽如此，缩小的浏览器方法通常可以让你达到
    97.5% 的目标。好吧... HTML5 音频彻底改变了这种操作模式。
- en: On iOS, even if you've tagged the `audio` tag to preload and autoplay, it won't.
    No error is thrown; no indication is given that your coded requests were completely
    ignored. If you look at the code included for this chapter, you'll see in the
    `basicPlayer.js` script how many try/catch and debug statements I've put in while
    trying to make this work, and figure out what was going wrong.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS上，即使你已经标记了`audio`标签以预加载和自动播放，它也不会。不会抛出错误；也没有任何迹象表明你的编码请求被完全忽视了。如果你查看本章中包含的代码，你会看到在`basicPlayer.js`脚本中我放了多少try/catch和debug语句来尝试让它起作用，并找出出了什么问题。
- en: Technically, `pageinit` is the event that the documentation says is equivalent
    to `document.ready` but that doesn't mean that the page is actually visible yet.
    The end of the event chain leading to page reveal is the `pageshow` event. So,
    no matter what, that should be the end and it should be ready for whatever you
    might want to do. At this time, you should (theoretically) be able to tell the
    song to play (`.play()`) using JavaScript. Alas, it just doesn't work this way.
    You can take the exact same function used to trigger the audio play from pressing
    the play button and even kick it off with a time delay and yet nothing works.
    It's not a timing issue. iOS requires direct user interaction to kick off the
    audio for the first time. *Tie it directly to the click event or it won't work.*
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，`pageinit`是文档中说等同于`document.ready`的事件，但这并不意味着页面实际上已经可见。导致页面显示的事件链的最后是`pageshow`事件。所以，不管怎样，那应该是结束，并且应该为你可能想做的任何事情做好准备。在这个时候，你应该（理论上）能够使用JavaScript告诉歌曲播放（`.play()`）。然而，事实并非如此。你可以使用完全相同的函数来触发音频播放，甚至延迟一段时间再启动它，但仍然没有任何效果。这不是一个时间问题。iOS需要直接用户交互才能首次启动音频。*直接将其绑定到点击事件，否则不起作用。*
- en: The all-in-one solution (multipage made useful)
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全能解决方案（多页面实用化）
- en: We now have a full-blown player with a unified interface that could be used
    to manage a playlist. The only real problem we have at this point is network latency.
    Even in this new age of 4G and LTE, cellular latency can get ridiculous. This
    is especially true if you work at a place like I do where the building pushes
    back signals like a Spartan phalanx. So, in order to give this an even better
    user experience, we're going to abandon this page-by-page business.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个完整的播放器，具有统一的界面，可以用来管理播放列表。我们目前唯一真正的问题是网络延迟。即使在这个新的4G和LTE时代，蜂窝网络的延迟也可能变得荒谬。如果你像我一样在一个像斯巴达的方阵一样阻挡信号的建筑物工作，这一点尤为真实。所以，为了给用户带来更好的体验，我们将放弃这种逐页的方式。
- en: While we're at it, let's pack in some of what we've done in previous chapters
    such as bringing in Lindsey's latest tweet and the content from her blog. We'll
    use the same CSS from before but we'll change the rest.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，让我们把我们在之前章节中所做的一些工作也整合进来，比如引入林赛最新的推文和她博客的内容。我们将使用之前的CSS，但其他方面会有所改变。
- en: '![The all-in-one solution (multipage made useful)](img/0069_06_02.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![全能解决方案（多页面实用化）](img/0069_06_02.jpg)'
- en: 'One of the first things that starts to annoy server-side and object-oriented
    types is how often you have to repeat a chunk of code. This becomes a real issue
    if there is a global header or footer. So, let''s create a `div` tag to house
    the universal footer content and a script to pull it in at the right time:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些对服务器端和面向对象类型的人来说，最令人烦恼的事情之一就是你经常不得不重复一段代码。如果有一个全局头部或页脚，这就成为了一个真正的问题。所以，让我们创建一个`div`标签来容纳通用页脚内容，并创建一个脚本在适当的时候将其引入：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now on any page load that wants to have these controls in the footer, we''ll
    just copy this content right into the footer before the page is marked up by jQM:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于任何想要在页脚中具有这些控件的页面加载，我们将在jQM标记页面之前将这些内容直接复制到页脚中：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, it''s time to take every song page and make it dynamic. We remove
    the individual audio elements and simply link to them in data attributes of the
    "page". The footer is gone and in its place is empty footer ready for the injection
    of the controls:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是时候使每个歌曲页面都变得动态了。我们移除了单独的音频元素，简单地在“页面”的数据属性中链接到它们。页脚消失了，取而代之的是一个空的页脚，准备好注入控件：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'All this will require us to revamp our JavaScript. Some of the pieces will
    remain the same but since we''re down to a single audio element, the code can
    be simplified. Here is the final source code for the all-in-one version that is
    in the `index.html` file of the code bundle available at the Packt Publishing
    website:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都将要求我们重新调整我们的 JavaScript。一些部分将保持不变，但由于我们只剩下一个音频元素，代码可以简化。以下是在 Packt Publishing
    网站提供的代码捆绑包的 `index.html` 文件中的所有合并版本的最终源代码：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'With all the usual stuff out of the way, here is the first "page" of the experience:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成所有常规工作之后，这是体验的第一个“页面”：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following page lists all the tracks available to preview:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下页面列出了所有可预览的曲目：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here are the individual song pages. I have not included every song page because
    that would just be a waste of pages. You''ll get the idea of how this works. Note
    that each page has footer with the same `data-id` attribute. The following allows
    for the footer to remain in place as pages transition between songs:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是各个歌曲页面。我没有包含每个歌曲页面，因为那只是页面的浪费。你会明白这是如何工作的。请注意，每个页面都有相同的 `data-id` 属性的页脚。以下允许在歌曲之间转换时保持页脚不变：
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This part is not a page. It''s the hidden master controls that will be imported
    into each page that plays songs:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分不是页面。这是将被导入到播放歌曲的每个页面中的隐藏式主控制器：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following code is the template for rendering the imported blog content:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是呈现导入的博客内容的模板：
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following code is the template for rendering the Twitter feed:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是呈现 Twitter 动态的模板：
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: With it all built together into one huge multipage app like this, you will feel
    the buttery smoothness of the interface. We're using the exact same CSS in this
    file that we did in the standalone song files.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有内容构建到一个像这样的巨大的多页应用程序中，你将感受到界面的丝般顺滑。我们在这个文件中使用的 CSS 与独立歌曲文件中使用的完全相同。
- en: Saving to the home screen with HTML5 manifest
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 HTML5 清单保存到主屏幕
- en: With great power comes great responsibility. This is a power feature. If you
    properly leverage the HTML5 manifest and a few other meta tags, your application
    will become a full-screen, chrome-less app.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 伴随着巨大的力量而来的是巨大的责任。这是一个强大的功能。如果你充分利用 HTML5 清单和其他一些元标签，你的应用程序将成为一个全屏、无浏览器边框的应用程序。
- en: '![Saving to the home screen with HTML5 manifest](img/0069_06_04.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![使用 HTML5 清单保存到主屏幕](img/0069_06_04.jpg)'
- en: 'To make your apps save down and launch as full-screen apps you''ll need icons
    for your home screen. They''ll be squares in sizes of 144, 114, 72, and 57 pixels.
    Link to them like so:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要使你的应用程序在保存并启动时作为全屏应用程序，你需要为你的主屏幕准备图标。它们将是大小为 144、114、72 和 57 像素的正方形。像这样链接到它们：
- en: '[PRE23]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The user''s navigation buttons can be made to disappear on iOS. Be aware that
    if you choose to do this, you need to provide full navigation within your app.
    This means you''ll probably want to add either a back button. If you want to make
    the app go full screen, use these tags:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 用户的导航按钮可以在 iOS 上隐藏。请注意，如果你选择这样做，你需要在你的应用程序中提供完整的导航。这意味着你可能想要添加返回按钮。如果你想让应用程序全屏，使用以下标签：
- en: '[PRE24]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: To make the thing available in the offline mode, we'll use the manifest. Manifest
    uses the application cache to store the assets. There is a limit to how much you
    can store. This differs from device to device but it's probably less than 25 MB.
    List what you want saved in the order of priority just to be saved. For a complete
    breakdown of what all the manifest can do, check out [http://www.html5rocks.com/en/tutorials/appcache/beginner/](http://www.html5rocks.com/en/tutorials/appcache/beginner/).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要使该内容在离线模式下可用，我们将使用清单。清单使用应用程序缓存来存储资产。你可以存储的内容有限。这因设备而异，但可能少于 25 MB。列出你想要按优先级保存的所有内容。要了解清单的所有功能，可以查看
    [http://www.html5rocks.com/en/tutorials/appcache/beginner/](http://www.html5rocks.com/en/tutorials/appcache/beginner/)。
- en: 'Here are the contents of our manifest. It is saved under `app.manifest`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们清单的内容。它保存在 `app.manifest` 下：
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To use the manifest file, your web server or `.htaccess` will have to be configured
    to return the type of `text/cache-manifest`. In the HTML file, all you have to
    do is add it as an attribute to the `html` tag itself, like so:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用清单文件，你的网络服务器或 `.htaccess` 将需要配置为返回 `text/cache-manifest` 类型。在 HTML 文件中，你只需将它作为
    `html` 标签本身的属性添加即可，像这样：
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If you want to clear your cache, you can always do it through your browser settings.
    You can also control the cache with JavaScript. The earlier article I linked to
    provides plenty of detail if you really want to dig in.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想清除缓存，你可以随时通过浏览器设置来执行。你也可以通过 JavaScript 控制缓存。我之前提供的链接提供了丰富的细节，如果你真的想深入了解的话。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This was a meaty chapter despite its simplistic start. But, you now know pretty
    much everything there is to know about combining HTML5 Audio with jQuery Mobile.
    You can create the wonderful academic, progressively enhanced pages and even make
    complex apps to be saved to devices. If this chapter didn't scare you off, you
    could really start making some powerful mobile sites for media outlets and venues.
    The only thing this chapter could have really used is a picture gallery for artists
    and venues. But, don't worry; we'll approach that in the next chapter where we'll
    be creating a showcase for photographers.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内容丰富的章节，尽管开始很简单。但是，你现在基本上已经了解了如何将 HTML5 音频与 jQuery Mobile 结合使用的所有知识。你可以创建出精彩的学术页面，并且甚至可以制作复杂的应用程序以保存到设备中。如果这一章没有吓到你，你确实可以开始为媒体机构和场馆制作一些强大的移动站点。这一章唯一真正缺少的是为艺术家和场馆提供的图片画廊。但是，别担心；在下一章中，我们将创建一个为摄影师展示作品的平台。
