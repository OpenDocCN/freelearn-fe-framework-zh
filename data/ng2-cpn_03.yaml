- en: Chapter 3. The TypeScript Primer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章 TypeScript入门
- en: Angular 2 is written with TypeScript, but that doesn't mean we have to write
    our application with TypeScript. Angular 2 applications can be written with ES6
    (JavaScript 2015) or even ES5 (JavaScript 1.5). In this book, we will use TypeScript,
    mainly (but not only) because of the implementations of decorators, which can
    clean our Angular 2 code compared to ES6 and ES5.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 2是用TypeScript编写的，但这并不意味着我们必须用TypeScript编写我们的应用程序。Angular 2应用程序可以用ES6（JavaScript
    2015）甚至ES5（JavaScript 1.5）编写。在本书中，我们将主要使用TypeScript，主要是因为装饰器的实现可以使我们的Angular 2代码比ES6和ES5更清晰。
- en: I will assume that you already know how to write JavaScript 2015 (ES6) code.
    Through this chapter, we will cover just what we need to know about TypeScript;
    most of the code is compatible with JavaScript 2015 as is. If you are not familiar
    with ES6 at all, it's highly recommended to catch up with the new syntax and features.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设你已经知道如何编写JavaScript 2015（ES6）代码。在本章中，我们将只涵盖我们需要了解的TypeScript知识；大部分代码与JavaScript
    2015兼容。如果你完全不熟悉ES6，强烈建议你赶上新的语法和特性。
- en: 'The following are the topics that we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: An introduction to the TypeScript language
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript语言简介
- en: Manage dependencies with modules
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模块管理依赖关系
- en: Class declarations and usage
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类的声明和使用
- en: System, built-in, and custom types
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统、内置和自定义类型
- en: How to use decorators
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用装饰器
- en: Introduction to TypeScript
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TypeScript简介
- en: The most important thing that you should know about TypeScript is that it's
    not a completely new language. It's a superset of ES6\. This means an ES6 code
    can be *converted* to TypeScript just by changing the file extension from `.js`
    to `.ts`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该知道的最重要的一点是，TypeScript并不是一个全新的语言。它是ES6的超集。这意味着ES6代码可以通过将文件扩展名从`.js`改为`.ts`来*转换*为TypeScript。
- en: 'For example, the following code is a valid ES6 or TypeScript:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码是有效的ES6或TypeScript：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: On the other hand, the TypeScript compiler can target various versions of JavaScript,
    including ES6\. The compiler will peel all the *extra* code and output clean and
    readable JavaScript code that is almost identical to the source.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，TypeScript编译器可以将代码目标定为各种JavaScript版本，包括ES6。编译器将剥离所有*额外*的代码，并输出干净可读的JavaScript代码，几乎与源代码相同。
- en: 'This is a simple TypeScript class:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的TypeScript类：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Targeting ES6 will output this code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 目标为ES6将输出这段代码：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And this is the completion result when targeting ES5:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当目标为ES5时，这是完成的结果：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, the compilation results in a clean and readable code, which
    is almost identical to the source code (in case of ES6).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，编译结果是干净可读的代码，几乎与源代码相同（在ES6的情况下）。
- en: Next, we will explore the language features. Note that most of the features
    that we will go through are part of ES6 and not TypeScript. I will mention which
    feature belongs to TypeScript and which does not.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探索语言特性。请注意，我们将要介绍的大部分特性都是ES6的一部分，而不是TypeScript。我会提到哪些特性属于TypeScript，哪些不属于。
- en: Managing dependencies with modules
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模块管理依赖关系
- en: One of the most important changes introduced in JavaScript is modules. A module
    is a JavaScript file that gets loaded in a special way. All variables and declarations
    are scoped to the module. If we like to expose some code to the outside world,
    we need to export it explicitly. If you try to log the value of `this` in the
    top level of the module, you will get undefined.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript引入的最重要的变化之一是模块。模块是以特殊方式加载的JavaScript文件。所有变量和声明都作用域限定在模块内。如果我们想要向外部公开一些代码，就需要显式地导出它。如果你尝试在模块的顶层记录`this`的值，你会得到undefined。
- en: The export and import statements
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出和导入语句
- en: 'The `export` and `import` keywords are used to define which part of the code
    should be exposed to other modules, and which code we will like to import from
    another module. The following module exposes a function, a class, and a variable:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`export` 和 `import` 关键字用于定义代码中应该暴露给其他模块的部分，以及我们想要从另一个模块导入的代码。以下模块暴露了一个函数、一个类和一个变量：'
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To use this exported code, we need to import it in another module. We can import
    this code in various ways:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个导出的代码，我们需要在另一个模块中导入它。我们可以以各种方式导入这段代码：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The default exports
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认导出
- en: 'We can import only what we need from the module, import multiple code and import
    everything that the module exported. There is another option to export code from
    a module, which is called a `default` export:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从模块中导入我们需要的内容，导入多个代码和导入模块导出的所有内容。还有另一种从模块中导出代码的选项，称为 `default` 导出：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When importing code that is exported using the default keyword, we don''t have
    to use the exact name of the function or class or variable that we exported:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当导入使用默认关键字导出的代码时，我们不必使用导出的函数、类或变量的确切名称：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: A `default` export can be declared only once per module. We can mix the default
    and named exports in the same module. Note that we don't have to use curly braces
    when importing code that has been exported as default.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模块只能声明一个 `default` 导出。我们可以在同一个模块中混合使用默认导出和命名导出。请注意，当导入默认导出的代码时，我们不必使用大括号。
- en: Classes
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类
- en: 'The JavaScript language''s object-oriented capabilities are built around the
    concept of prototypes. The prototype model defines links between objects, instead
    of inheritance trees. The prototype model, as powerful as it is, is not very friendly
    to the average JavaScript programmer. TypeScript enables us to create classes
    with a familiar syntax, and it''s completely identical to JavaScript 1.5 classes
    (if we choose not to use TypeScript exclusive features). To define a class in
    TypeScript, we use the `class` keyword:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 语言的面向对象能力是围绕原型的概念构建的。原型模型定义了对象之间的链接，而不是继承树。原型模型虽然强大，但对于普通的 JavaScript
    程序员来说并不友好。TypeScript 让我们能够使用熟悉的语法创建类，它与 JavaScript 1.5 类完全相同（如果我们选择不使用 TypeScript
    的独有功能）。要在 TypeScript 中定义一个类，我们使用 `class` 关键字：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Classes in TypeScript might have a constructor and methods just like JavaScript
    2015\. TypeScript also adds the ability to define class properties. The following
    example shows our `Product` class with a constructor, property, and a method:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TypeScript 中，类可能有构造函数和方法，就像 JavaScript 2015 一样。TypeScript 还添加了定义类属性的能力。以下示例展示了我们的
    `Product` 类，其中包含构造函数、属性和方法：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In TypeScript, just like JavaScript 2015, inheritance is achieved through the
    `extends` keyword, and the `super` keyword is used to call the parent class when
    necessary. The following example illustrates how to use it:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TypeScript 中，就像 JavaScript 2015 一样，通过 `extends` 关键字实现继承，当需要调用父类时使用 `super`
    关键字。以下示例说明了如何使用它：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It's important to realize that classes are just a *sugar* on top of prototypes.
    This means the way JavaScript deals with objects' instantiation and inheritance
    behind the scenes hasn't changed. It just has a friendly syntax.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要意识到，类只是原型的一种“糖”，这意味着 JavaScript 处理对象实例化和继承的方式在幕后并没有改变。它只是有一个友好的语法。
- en: In Angular 2, the component that contains all the component behavior is defined
    as a class. The rest is just a metadata decorator, which we will learn about in
    the future chapters.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular 2 中，包含所有组件行为的组件被定义为一个类。其余部分只是元数据装饰器，我们将在未来的章节中学习。
- en: The type system
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型系统
- en: The most famous feature that made TypeScript what it is, is the type system
    that enables us to leverage a static type checking at compile time. We have already
    seen the use of types in the previous code examples. It's important to understand
    that in TypeScript the use of types is optional but highly recommended. As we
    saw at the beginning of this chapter, the TypeScript compiler breakdown all the
    types declaration, so the compilation result will be plain JavaScript.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript最著名的特性是类型系统，它使我们能够在编译时利用静态类型检查。我们已经在之前的代码示例中看到了类型的使用。重要的是要理解，在TypeScript中，类型的使用是可选的，但强烈建议使用。正如我们在本章开头看到的，TypeScript编译器会将所有类型声明都分解，因此编译结果将是普通的JavaScript。
- en: The basic types
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本类型
- en: 'TypeScript supports all the basic JavaScript types you expected: Booleans,
    Numbers, Strings, and Arrays. The following example shows how to use it in code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript支持您期望的所有基本JavaScript类型：布尔值、数字、字符串和数组。以下示例显示了如何在代码中使用它：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'TypeScript also includes extra three types to the mix, namely, `enum`, `any`,
    and `void`. The type `any`, as the name suggests, is used when we are dealing
    with dynamic data and we can''t tell which type of data we are expecting. If we
    don''t specify a type at all, TypeScript defaults to the `any` type:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript还将额外的三种类型添加到混合中，即`enum`、`any`和`void`。类型`any`顾名思义，用于处理动态数据，我们无法确定期望的数据类型。如果根本不指定类型，TypeScript默认为`any`类型：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `void` type is like the opposite of `any`. It means *no type*. Most of
    the time, it is used as a return type for a function that doesn''t return:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`void`类型就像`any`的相反。它表示*没有类型*。大多数情况下，它被用作不返回任何值的函数的返回类型：'
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'An `enum` is just a way of giving more friendly names to sets of numeric values.
    Nothing more. The default numbering starts with `0`, and can be set manually to
    any other numeric value:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`enum`只是一种为一组数字值提供更友好名称的方式。没有其他。默认编号从`0`开始，可以手动设置为任何其他数字值：'
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The custom types
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义类型
- en: Besides the built-in basic types, you can (and you probably will) use your own
    types for code that you have written. There are three ways in TypeScript to define
    types, namely, creating a class, defining an interface, and using special files
    that declare types for an existing library.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除了内置的基本类型，您可以（而且可能会）为自己编写的代码使用自己的类型。在TypeScript中有三种定义类型的方式，即创建类、定义接口和使用声明现有库类型的特殊文件。
- en: An interface in TypeScript can be described as the *shape* of the object, and
    usually includes class members and methods without implementation. Interfaces
    are only at design time; for example, you can't use it as type when defining providers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript中，接口可以描述对象的*形状*，通常包括没有实现的类成员和方法。接口仅在设计时存在；例如，在定义提供程序时，您不能将其用作类型。
- en: 'The following example illustrates how to use your own classes as types:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了如何将自己的类用作类型：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following example illustrates how to create an interface for defining a
    type:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了如何创建用于定义类型的接口：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The third option is to create a file with a `.d.ts` extension, which maps an
    existing code (third party) to types. The process of creating this file is behind
    the scope of this book, and you can visit [http://www.typescriptlang.org/Handbook#writing-dts-files](http://www.typescriptlang.org/Handbook#writing-dts-files)
    to learn more about it.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种选择是创建一个带有`.d.ts`扩展名的文件，将现有代码（第三方）映射到类型。创建此文件的过程超出了本书的范围，您可以访问[http://www.typescriptlang.org/Handbook#writing-dts-files](http://www.typescriptlang.org/Handbook#writing-dts-files)了解更多信息。
- en: The good news is that you can find the Definition map for almost any library
    out there (including Angular). Visit [https://github.com/typings/typings](https://github.com/typings/typings)
    where you can browse for repositories of Definition maps, and learn more about
    typings, which is a command-line tool for managing those maps.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，你几乎可以在任何库中找到定义映射（包括Angular）。访问[https://github.com/typings/typings](https://github.com/typings/typings)，在那里你可以浏览定义映射的存储库，并了解更多关于typings的信息，它是一个用于管理这些映射的命令行工具。
- en: About generics
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于泛型
- en: There is another feature that is related to types and that should be mentioned,
    called *generics*. This feature enables us to create a component that can work
    over a variety of types rather than a single one.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个与类型相关的特性，应该提到的是*泛型*。这个特性使我们能够创建一个可以处理多种类型而不是单一类型的组件。
- en: The generics API is out of the scope of this book, and we won't use this feature
    through our code example. You can learn more about generics by visiting [http://www.typescriptlang.org/Handbook#generics](http://www.typescriptlang.org/Handbook#generics).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 泛型API超出了本书的范围，我们不会在代码示例中使用这个特性。你可以通过访问[http://www.typescriptlang.org/Handbook#generics](http://www.typescriptlang.org/Handbook#generics)来了解更多关于泛型的信息。
- en: Using decorators
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用装饰器
- en: 'Decorators are functions that modify a class, property, method, or method parameter.
    The following example illustrates how to define and use a simple decorator that
    adds a static parameter to the class:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器是修改类、属性、方法或方法参数的函数。下面的例子说明了如何定义和使用一个简单的装饰器，它给类添加了一个静态参数：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The three dots syntax (`...`) is the *spread operator,* which is a feature of
    JavaScript 2015 that deconstructs the items of a given array.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 三个点的语法（`...`）是*展开运算符*，这是JavaScript 2015的一个特性，它可以解构给定数组的项目。
- en: Decorators versus annotations
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 装饰器与注解
- en: You might have heard the term annotations; they are simply metadata related
    to Angular 2\. Before the Angular team decided to use TypeScript, they introduced
    us to a new language that they called AtScript. This language included a feature
    called annotations, which look exactly like decorators. So what's the difference?
    The decorator is an interface for creating those Angular annotations. Decorators
    are executed and in Angular 2, they have the responsibility to set metadata leveraging
    the Reflect Metadata library. Furthermore, decorators are a proposal for ES7—the
    next version of JavaScript. For that reason, we can focus on decorators.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听说过注解这个术语；它们只是与Angular 2相关的元数据。在Angular团队决定使用TypeScript之前，他们向我们介绍了一种他们称为AtScript的新语言。这种语言包括一个叫做注解的特性，看起来与装饰器完全相同。那么有什么区别呢？装饰器是创建这些Angular注解的接口。装饰器被执行，在Angular
    2中，它们负责使用Reflect Metadata库设置元数据。此外，装饰器是ES7的一个提案——JavaScript的下一个版本。因此，我们可以专注于装饰器。
- en: Summary
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: TypeScript is a superset of JavaScript. This means you can write plain JavaScript
    in `.ts` files. The TypeScript compiler will peel all the extra TypeScript code
    and produce code that is plain, readable, and almost identical to the source code.
    The Angular 2 team uses TypeScript for developing the Angular platform (the source
    code is written with TypeScript, but a compiled JavaScript version is also available).
    As developers, we can choose whatever we want to use; TypeScript, JavaScript 2015
    (ES6), or JavaScript 1.5.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript是JavaScript的超集。这意味着你可以在`.ts`文件中编写纯粹的JavaScript。TypeScript编译器将去除所有额外的TypeScript代码，并生成纯净、可读的代码，几乎与源代码相同。Angular
    2团队使用TypeScript开发Angular平台（源代码是用TypeScript编写的，但也有编译后的JavaScript版本）。作为开发者，我们可以选择使用TypeScript、JavaScript
    2015（ES6）或JavaScript 1.5。
- en: If you choose to use TypeScript, it's highly recommended to visit [http://www.typescriptlang.org/](http://www.typescriptlang.org/)
    and learn more about the language's capabilities that go beyond the scope of this
    book.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择使用TypeScript，强烈建议访问[http://www.typescriptlang.org/](http://www.typescriptlang.org/)，了解更多关于这种语言能力的信息，这超出了本书的范围。
