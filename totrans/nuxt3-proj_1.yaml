- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up Your Nuxt 3 Environment for a Basic “Hello Nuxt” App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web development has seen a transformative journey over the years, evolving from
    static web pages to dynamic applications that offer a seamless user experience.
    As the demand for more interactive and performant web applications grew, the need
    for frameworks that could simplify and streamline the development process became
    evident. This was the backdrop against which Nuxt was born – a framework designed
    to build Vue.js applications with particular attention to making the development
    process as intuitive as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Nuxt 3, the latest version of the framework, is a significant step forward in
    web development. For those who’ve been in front-end development over the years,
    it’s clear that Nuxt 3 brings a lot to the table. Beyond the basics, such as automatic
    routing and server-side rendering, Nuxt 3 integrates TypeScript, offering better,
    error-free coding. The new Nitro Engine boosts performance, making applications
    run faster and smoother. With Vue 3’s Composition API, building components becomes
    more intuitive. Plus, improved modules and new DevTools make development even
    more efficient. In short, Nuxt 3 offers a powerful set of tools that makes web
    development faster, easier, and more robust.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll be introduced to the world of Nuxt 3 and delve deep
    into its origins, exploring the minds behind its creation and its core mission.
    You’ll gain a clear understanding of what makes Nuxt unique and why it’s become
    a favored choice for many developers around the world. As you progress, you’ll
    also take the practical step of setting up your very first Nuxt application. By
    the end of this chapter, you’ll not only have a clearer perspective on the basics
    of Nuxt 3 and its underlying principles but also a running Nuxt application, setting
    the stage for deeper dives in subsequent chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the code content in this book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Nuxt 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The architecture and features of Nuxt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and setting up the Nuxt 3 environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first “Hello Nuxt” app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommended extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To ensure a seamless experience as we venture into setting up and exploring
    Nuxt 3, certain prerequisites must be met. The following technologies and installations
    are required:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js**: v18.10.0 or newer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Package manager**: While installing Node.js provides you with npm by default,
    I have a penchant for pnpm as it offers efficient disk space usage by sharing
    packages across projects and ensures that dependencies are never hoisted, leading
    to more predictable builds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text editor**: I recommend using **Visual Studio Code** (VS Code) with the
    Vue – Official Extension, but https://www.jetbrains.com/webstorm/ or any other
    editor will work fine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Terminal**: You will need one to run Nuxt commands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code files for this chapter can be found at [https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter01](https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter01).
  prefs: []
  type: TYPE_NORMAL
- en: The CiA video for this chapter can be found on [https://packt.link/UhVbH](https://packt.link/UhVbH)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Nuxt 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being in the web development sphere for a good chunk of time teaches you the
    importance of evolution. It’s similar to watching a city grow. What started as
    a few buildings (or in our case, static web pages) has now turned into a sprawling
    metropolis with skyscrapers, interconnected transit systems, and vibrant hubs
    of activity. Similarly, our web development tools have transformed to keep up
    with the times. Nuxt stands tall in this city of tools, especially for those of
    us who’ve been crafting with Vue.js. This section will act as a guided tour of
    Nuxt 3, taking you through its historical streets, its bustling downtown, and
    the architectural marvels that make developers like us tip our hats in appreciation.
  prefs: []
  type: TYPE_NORMAL
- en: The evolution of web development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the early days of the web, sites were straightforward. Think of them as the
    digital equivalent of a hand-drawn map. They showed you the way, but the journey
    was pretty much on you. As time passed, and as the web began to grow, demands
    became more complex. Websites transformed into web applications, and these applications
    needed to be dynamic, responsive, and interactive. It was no longer just about
    displaying information; it was about engagement, about creating experiences. In
    this dynamic landscape, Vue.js emerged as a beacon, simplifying the complexities
    and making developers’ lives a tad easier. But as any seasoned developer will
    tell you, there’s always room for improvement, for evolution.
  prefs: []
  type: TYPE_NORMAL
- en: The birth of Nuxt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s a scenario many of us can relate to: You’re deep into a Vue.js project,
    appreciating its elegance, but there are moments when you think, “Could this be
    more streamlined? Could some repetitive tasks be automated?” This quest for efficiency
    is where Nuxt enters the story. Conceived by the visionary Chopin brothers, Nuxt
    was Vue.js with wings. It wasn’t just about adding features; it was about smart
    integration, about making the entire development process smoother. Imagine not
    having to set up routing manually for every page or having out-of-the-box solutions
    for SEO challenges. Nuxt was that fresh perspective, that innovative approach
    to challenges we’d taken as “just part of the process.”'
  prefs: []
  type: TYPE_NORMAL
- en: Why Nuxt?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Simply put, if you’re using Vue.js, Nuxt is your next logical step. It brings
    a suite of enhanced features. Nuxt comes packed with built-in tools such as automated
    routing, middleware support, universal (SSR and SPA) rendering, and flexible layouts.
    This means less boilerplate and more productivity. Nuxt seamlessly extends Vue’s
    capabilities, providing an integrated, efficient solution for building solid web
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve explored Nuxt’s unique offerings in the Vue.js ecosystem, our
    next step is to delve into the architectural elements and foundational concepts
    of Nuxt 3.
  prefs: []
  type: TYPE_NORMAL
- en: The architecture and principles of Nuxt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the ever-evolving domain of web development, understanding the inner workings
    of a tool can be the key to mastering it. Nuxt 3, with its intricate design and
    powerful features, is no exception. For those of us who’ve been around the block,
    unraveling such complexities isn’t just a necessity – it’s a passion. Let’s embark
    on this deep dive into Nuxt 3, peeling back the layers to reveal the principles
    and architecture that power it.
  prefs: []
  type: TYPE_NORMAL
- en: Built on top of Vue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At its core, Nuxt 3 is built on top of Vue.js. While reactivity and component-based
    architectures have found their way into many modern frameworks, what sets Vue.js
    apart is its approachability. It’s designed in a way that both newcomers and seasoned
    developers can grasp its concepts with ease. But beyond the framework itself,
    Vue’s vibrant and supportive community plays a significant role. This positive
    community feedback creates the perfect foundation for Nuxt 3, allowing it to offer
    an enriched development experience.
  prefs: []
  type: TYPE_NORMAL
- en: Universal rendering and static site generation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember the days when we’d enter a website and there’d be this brief moment
    of emptiness before the content magically appeared? That’s client-side rendering
    in action. While it has its merits, this approach sometimes feels like entering
    a dimly lit room and waiting for the lights to slowly turn on. Universal rendering
    changes the game by merging the best of server-side and client-side rendering.
    With this approach, the content is pre-rendered on the server, providing immediate
    access upon entering the website. Once the page is loaded, the client-side script
    “hydrates” the page, enabling dynamic interactions and enhancing the user experience.
    The benefits?
  prefs: []
  type: TYPE_NORMAL
- en: Faster initial page load
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved SEO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better overall user experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And speaking of smooth web experiences, have you noticed that some websites
    are fast and don’t seem to have any glitches? Many of these are static sites.
    They’re like web pages that are ready to go as soon as you open them, without
    needing extra loading time. But modern static sites aren’t just about serving
    fixed content; they can be as dynamic and interactive as any other site. Nuxt’s
    **static site generation** (**SSG**) capability means developers get the benefits
    of static sites (speed and security) and the dynamism of web apps. With Nuxt,
    crafting a static site is as intuitive as building any other application, but
    with the added advantages of performance and security.
  prefs: []
  type: TYPE_NORMAL
- en: Performance optimizations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the world of web development, speed isn’t just a luxury; it’s a necessity.
    Users expect web pages to load quickly, and search engines reward fast-loading
    sites with better rankings. Recognizing this, Nuxt 3 has been designed with performance
    at its core. But what does this mean for developers and users? Let’s break down
    some of the key performance optimization techniques that Nuxt 3 employs to enhance
    both the developer and user experience:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code splitting**: Instead of sending a large JavaScript bundle, Nuxt 3 leverages
    Vite and Rollup to split code intelligently. This means users only download what’s
    necessary for the current page, reducing load times.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tree shaking**: Unnecessary code can bloat applications. Tree shaking ensures
    that only the code that’s used gets included in the final bundle. It’s like trimming
    the branches of a tree to keep it healthy and vibrant.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Link prefetching**: While a user is browsing a page, Nuxt 3 is already hard
    at work, prefetching resources for linked pages. This proactive approach means
    subsequent pages load almost instantly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nuxt uses Vite under the hood. Vite is a tool that changes how we think about
    web development. It starts up almost instantly, which means no more waiting to
    start working. When you change your code, Vite updates it right away so that you
    can see your changes immediately. It has a straightforward build system, which
    means less time figuring things out and more time coding. Plus, it’s designed
    to be fast in every way, making the whole development process smoother.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we covered Nuxt 3’s architecture, its advantages in rendering,
    and its focus on performance. As we proceed, we’ll shift from theory to hands-on
    practice, guiding you through setting up your first Nuxt 3 environment.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and setting up the Nuxt 3 environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before diving into the depths of Nuxt 3, it’s essential to set up a conducive
    environment. Think of it as preparing the soil before planting a tree. The better
    the preparation, the healthier the tree will be as it grows. In this section,
    we’ll walk you through the prerequisites and installation steps, ensuring you
    have a robust foundation to start your Nuxt 3 journey.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work with Nuxt 3, there are a few things you need to have installed and
    set up. Based on the Nuxt 3 official website, here are the prerequisites:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js**: It’s essential to ensure you have Node.js installed and that it’s
    at least version 18.10.0\. To check whether Node.js is installed, as well as its
    version, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you see a version number, that means Node.js is installed. If it’s below
    18.10.0 or if Node.js isn’t installed, you can download the latest version from
    the official Node.js website: [https://nodejs.org/](https://nodejs.org/).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Package manager**: While npm comes bundled with Node.js, for this guide,
    we’ll be using pnpm. It’s efficient and fast and ensures that packages are shared
    across projects. To install it, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Code editor**: While you can use any code editor, we recommend VS Code. It’s
    versatile, supports a plethora of extensions, and is widely adopted in the developer
    community.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, you set up your Nuxt 3 environment. Next, you’ll build a “Hello
    Nuxt” application and explore the basic project structure.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first “Hello Nuxt” app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll take the first step together – that is, crafting your
    very first Nuxt application. By the end, you’ll have a running application and
    a foundational understanding of the Nuxt project structure.
  prefs: []
  type: TYPE_NORMAL
- en: Initialization – the steps to create a new Nuxt project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps for initialization :'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new starter project by designating a space for your project. Open
    your Terminal (macOS/Linux) or terminal (Windows), and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 1.1: use pnpm as a package manager](img/B19760_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1: use pnpm as a package manager'
  prefs: []
  type: TYPE_NORMAL
- en: After the dependencies are installed, you may also be asked whether you want
    to initialize a Git repository. If you prefer not to set up a Git repository during
    this process, you can choose no when this question appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the project has been created, you’ll get a message similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.2: After creating the project](img/B19760_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.2: After creating the project'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we must go to the folder where the project was created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that you can still install dependencies using npm or Yarn.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To start the project, we can run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command starts your Nuxt application in development mode. It’s optimized
    for a developer experience, which means the following is true:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Hot module replacement** (**HMR**) is active, so changes in your files will
    automatically update the application without a full page reload'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Errors and warnings are displayed in the console and, often, in an overlay on
    your application
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A local development server will be started, typically accessible at [http://localhost:3000](http://localhost:3000).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The terminal should display the following message after a successful build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.3: Build output](img/B19760_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.3: Build output'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the link and voila! You have your first “Hello Nuxt” application!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.4: Nuxt application on a browser](img/B19760_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.4: Nuxt application on a browser'
  prefs: []
  type: TYPE_NORMAL
- en: The Nuxt CLI establishes a basic Nuxt application as a starting point for our
    project. This includes a built-in component called NuxtWelcome. In the upcoming
    sections, we’ll explore how to modify and expand upon this foundation so that
    it aligns with our specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, let’s open VS code and discover our new “Hello Nuxt” project!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will open the current directory in VS Code. You might need to set up VS
    Code so that it can be launched from the command line. For instructions on how
    to set this up, please refer to [https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line](https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that VS Code is opened, let’s discover the default project structure that
    was made after initializing.
  prefs: []
  type: TYPE_NORMAL
- en: The default project structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the world of Nuxt, a well-organized structure greets you from the outset.
    This deliberate setup ensures clarity and efficiency, guiding developers through
    a logical flow. While we’ll delve into the directories presented in the starter
    project, it’s essential to note that as your project grows and evolves, other
    folders, such as those for pages, plugins, middleware, and will come into play.
    Fear not, for these will be explored in depth in the subsequent chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'But for now, let’s familiarize ourselves with the foundational structure of
    a Nuxt 3 project:'
  prefs: []
  type: TYPE_NORMAL
- en: '`README.md`: A starting point for most projects. This file traditionally offers
    a brief introduction and might include basic setup or usage instructions, making
    onboarding easier for newcomers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server`: This houses custom server-side logic, enhancing Nuxt’s default server
    capabilities. We’ll dive deeper into its potential in future chapters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tsconfig.json`: A TypeScript configuration tailored for Nuxt. There’s no need
    to delve into its details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json`: Within the scripts, you’ll find the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dev`: Initiates the development environment, enabling HMR'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build`: Initiates the local development environment with live reloading'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generate`: For applications that use SSG, this script generates the static
    pages of the application'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`preview`: Previews the generated static site locally'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postinstall`: Prepares the Nuxt environment post-installation'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.npmrc`: Holds npm’s configuration settings. There’s no need to delve into
    its details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Public`: A sanctuary for static assets that you’d want to remain unprocessed
    by Vite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pnpm-lock.yaml`: Essential for pnpm users, this file ensures consistent package
    installations across environments. You might find `package-lock.json` if you’re
    using npm or `yarn.lock` if you’re using Yarn.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nuxt.config.ts`: The cornerstone of your Nuxt project. This configuration
    file orchestrates various aspects of your application, from global CSS to plugins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`App.vue`: The heart and soul of your application. As the root Vue component,
    it sets the stage for the rest of your application’s components:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.5: Project structure](img/B19760_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.5: Project structure'
  prefs: []
  type: TYPE_NORMAL
- en: We’ve just set up our first “Hello Nuxt” app and got a peek into its structure.
    Next, we’ll cover some handy extensions to make our Nuxt journey even smoother.
  prefs: []
  type: TYPE_NORMAL
- en: Recommended extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The VS Code marketplace offers a wide range of extensions that are designed
    to improve the development experience. For those working with Nuxt, there are
    specific extensions that stand out, proving invaluable in day-to-day coding tasks.
    In this section, we’ll explore some of the top extensions tailored for Nuxt, highlighting
    how they can make your development smoother and more efficient:'
  prefs: []
  type: TYPE_NORMAL
- en: Vue - Official
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nuxtr
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vue VSCode Snippets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-Vue-related extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s go through them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Vue - Official
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Vue - Official is an extension for VS Code that provides enhanced support for
    Vue 3 projects. Acting as a comprehensive toolset for Vue developers, here’s what
    Vue - Official brings to the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ref` value in your Vue component defined as `name: String`. If you mistakenly
    assign a number to it, the extension will highlight this discrepancy, indicating
    a type mismatch:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.6: Vue – Official: TypeScript support](img/B19760_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.6: Vue – Official: TypeScript support'
  prefs: []
  type: TYPE_NORMAL
- en: '`message` in your Vue component, when you start typing `{{ me... }}` in the
    template, the extension will suggest auto-completing it to `{{` `message}}`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.7: Vue – Official: template interpolation](img/B19760_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.7: Vue – Official: template interpolation'
  prefs: []
  type: TYPE_NORMAL
- en: '`.vue` file, the `<script>` section might be highlighted in one color scheme,
    while the `<template>` and `<style>` sections will have distinct color palettes,
    making it easier to differentiate between them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`firstName` to `givenName`, Vue Official extension can help you rename it across
    your component, ensuring consistency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<script>` section without proper indentation or spacing, using Vue Official
    extension’s integration with Prettier can automatically format the code so that
    it adheres to best practices and consistent styling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nuxtr
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Nuxtr is like your friendly coding companion for Nuxt.js projects. It’s packed
    with handy tools and commands, making your coding sessions smoother. Here’s a
    breakdown of its core offerings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nuxtr: create`. You’ll see a list of Nuxt files and folders that can be created,
    at which point you can select the desired ones:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.8: Nuxtr – creating project files and folders](img/B19760_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.8: Nuxtr – creating project files and folders'
  prefs: []
  type: TYPE_NORMAL
- en: '**Run Nuxt commands**: Simply write the command’s name in the command palette:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.9: Nuxtr – running Nuxt commands](img/B19760_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.9: Nuxtr – running Nuxt commands'
  prefs: []
  type: TYPE_NORMAL
- en: '**Activate Nuxt DevTools via your status bar**: Nuxt DevTools is a lifesaver
    for any Nuxt developer. It gives you a clear picture of your app’s components,
    lets you see state changes in real time, provides performance metrics, and even
    tracks events. The extension works with Nuxt > 3.4.0\. You can easily activate
    it from your status bar. The extension recognizes your Nuxt.js version and suggests
    updates if needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Set up CSS frameworks and linters**: You can integrate various CSS frameworks
    (Tailwind CSS, UnoCSS, and Vueitfy), as well as linters (Stylelint and Eslint):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.10: Setting up CSS frameworks and linters](img/B19760_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.10: Setting up CSS frameworks and linters'
  prefs: []
  type: TYPE_NORMAL
- en: As we’ve seen, these extensions are more than just add-ons; they’re essential
    tools that can significantly streamline your Nuxt development process.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we dived into the transformative world of Nuxt 3 and its role
    in modern web development. We started by discussing its architecture and its built-in
    performance optimizations, which include code splitting, tree shaking, and link
    prefetching. We also touched upon its capability for server-side rendering and
    SSG. Then, we walked through the steps of setting up the Nuxt 3 environment, including
    the prerequisites and initialization steps for creating a “Hello Nuxt” app. We
    also got a taste of the Nuxt project structure and discussed some recommended
    extensions for VS Code to enhance the development experience.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll build a simple portfolio website using Nuxt 3 and
    Tailwind CSS, further enhancing our hands-on experience with the framework.
  prefs: []
  type: TYPE_NORMAL
- en: Practice questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the prerequisites for setting up a Nuxt 3 environment?
  prefs: []
  type: TYPE_NORMAL
- en: What commands are used to initialize a new Nuxt 3 project?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain the benefits of server-side rendering in Nuxt 3.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What role does the `nuxt.config.ts` file play in a Nuxt project?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe the default project structure of a Nuxt 3 application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can you open your Nuxt project in VS Code using the terminal?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are some recommended extensions for VS Code when working with Nuxt?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does Nuxt 3 benefit from being built on top of Vue.js?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain how Nuxt 3 handles SSG.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nuxt official documentation: [https://nuxt.com/docs/getting-started/introduction](https://nuxt.com/docs/getting-started/introduction)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rendering modes: [https://nuxt.com/docs/guide/concepts/rendering](https://nuxt.com/docs/guide/concepts/rendering)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How Nuxt works: [https://nuxt.com/docs/guide/going-further/internals](https://nuxt.com/docs/guide/going-further/internals)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'TypeScript with Nuxt: [https://nuxt.com/docs/guide/concepts/typescript](https://nuxt.com/docs/guide/concepts/typescript)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VS Code extensions for Nuxt: [https://masteringnuxt.com/blog/the-best-vscode-extensions-for-nuxt-developers](https://masteringnuxt.com/blog/the-best-vscode-extensions-for-nuxt-developers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
