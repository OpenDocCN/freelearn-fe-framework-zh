- en: Working with Angular Material
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular Material
- en: Welcome to the chapter on Angular Material. I must say, I'm impressed. Statistics
    show that most of the people who buy tech books don't get very far into them.
    You are a little more than halfway through the book—a job well done, Angular Jedi!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到关于Angular Material的章节。我必须说，我印象深刻。统计数据显示，购买技术书籍的大多数人并没有读很远。您已经完成了大部分书籍——干得好，Angular绝地！
- en: This will be a short chapter for a couple of reasons. First, this book is heavily
    intended to be used for building applications, primarily using Angular and Bootstrap.
    So think of this chapter as an added bonus for us. The other reason is this chapter
    is only intended to be an introduction to an alternative **user interface** (**UI**)
    component library, to Bootstrap when working with Angular. There should be a separate
    book on Angular Material alone, but this chapter will cover a lot of ground in
    terms of showing you the capabilities and components that the library offers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个简短的章节，原因有几个。首先，这本书主要用于构建应用程序，主要使用Angular和Bootstrap。因此，可以将这一章视为我们的额外奖励。另一个原因是，这一章仅旨在介绍在使用Angular时与Bootstrap一起使用的另一种用户界面（UI）组件库。应该有一本单独的关于Angular
    Material的书，但这一章将在展示库提供的功能和组件方面涵盖很多内容。
- en: We will learn about navigation and menu components, layout components, form
    field elements, buttons, dialog and pop-up components, and lots of fun elements
    that you will definitely appreciate, and possibly consider for the framework in
    your next project.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将了解导航和菜单组件、布局组件、表单字段元素、按钮、对话框和弹出组件，以及许多有趣的元素，您肯定会喜欢，并可能考虑在下一个项目的框架中使用。
- en: 'By summarizing, the topics we will be covering in this chapter are:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，本章将涵盖的主题有：
- en: What is Angular Material?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Angular Material？
- en: Installing Angular Material
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Angular Material
- en: Categories of components
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件的类别
- en: Okay, let's get right to it by starting with the description of what Angular
    Material is.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们直接开始，从描述Angular Material开始。
- en: What is Angular Material?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Angular Material？
- en: 'Angular Material is a rich collection of components, which can be easily plugged
    into Angular applications, and also works on web, mobile, and desktop applications.
    Material Design comes from Google, the makers of Angular, which essentially means
    that there is a lot of native support, optimization, and performance tuning done
    for the components, as well as for the new ones that will be rolled out in future.
    The following list shows some of the benefits we get when we consider using Material
    Design in our applications:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material是一个丰富的组件集合，可以轻松地插入到Angular应用程序中，并且也适用于Web、移动和桌面应用程序。Material
    Design来自谷歌，是Angular的制造商，这意味着对组件以及将来推出的新组件进行了大量的本地支持、优化和性能调整。以下列表显示了在我们的应用程序中使用Material
    Design时我们可以获得的一些好处：
- en: The UI components are ready to be used right away, without any extra development
    efforts
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI组件可以立即使用，无需额外的开发工作
- en: We can selectively choose to use the components individually, rather than being
    forced to import all the modules in one go
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以选择性地选择单独使用组件，而不是被迫一次性导入所有模块
- en: The rendering of the components is extremely fast
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件的渲染非常快
- en: It is easy to plug data into components via a two-way or one-way data binding
    functionality, which is an extremely powerful feature of Angular
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过双向或单向数据绑定功能，可以轻松地将数据插入组件中，这是Angular的一个非常强大的功能
- en: The components have the same look, feel, and behavior across web, mobile, and
    desktop applications, which solves a lot of cross-browser and cross-device issues
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件在Web、移动和桌面应用程序中具有相同的外观、感觉和行为，这解决了许多跨浏览器和跨设备的问题
- en: The performance is tuned and optimized for integration with Angular applications
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能经过调整和优化，以便与Angular应用程序集成
- en: 'You can find all the required documentation about Angular Material on the official website
    at: [http://material.angular.com](https://material.angular.io/).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方网站[http://material.angular.com](https://material.angular.io/)上找到有关Angular
    Material的所有必要文档。
- en: 'Before we proceed any further in this chapter, let''s quickly generate the
    application where we will implement all of the Angular Material components. Run
    the following `ng` command in order to generate a new application named `AngularMaterial`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中继续之前，让我们快速生成一个应用程序，在这个应用程序中我们将实现所有的Angular Material组件。运行以下`ng`命令以生成一个名为`AngularMaterial`的新应用程序：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the command has been successfully executed, we should see the output shown
    in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，我们应该看到以下截图中显示的输出：
- en: '![](assets/c0174b28-d32b-40aa-a72a-d5587896fc8b.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c0174b28-d32b-40aa-a72a-d5587896fc8b.png)'
- en: Now that our application has been generated, let's learn how to install the
    Angular Material library in our project.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的应用程序已经生成，让我们学习如何在项目中安装Angular Material库。
- en: Installing Angular Material
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Angular Material
- en: By now, you will have a strong gut feeling that when we want to install anything
    in Angular applications, we have a powerful **command-line interface** (**CLI**)
    tool. We will continue to use the same CLI, and with the help of `npm`, we will
    install Angular Material.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您一定有一种强烈的直觉，即当我们想在Angular应用程序中安装任何东西时，我们有一个强大的**命令行界面**（**CLI**）工具。我们将继续使用相同的CLI，并借助`npm`来安装Angular
    Material。
- en: You can also choose to install Angular Material via the YARN command—different
    packaging systems, same outcome.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以选择通过YARN命令安装Angular Material—不同的打包系统，同样的结果。
- en: 'Angular Material has a core dependency and prerequisite to install two packages—CDK
    and Animations. So, let''s install these first, and then we will install Angular
    Material:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material有一个核心依赖和先决条件，需要安装两个包—CDK和Animations。所以，让我们先安装这些，然后再安装Angular
    Material：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After successfully running the preceding commands, we should see the output
    shown in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 成功运行上述命令后，我们应该看到以下截图中显示的输出：
- en: '![](assets/2432176e-e0d9-4615-a0c9-7b7481accdee.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2432176e-e0d9-4615-a0c9-7b7481accdee.png)'
- en: Open the `package.json` file; we should see the packages that have been installed,
    and the corresponding version numbers listed alongside them. If you see the three
    packages that we have recently installed, it means we are ready to start creating
    some awesome UI screens using Angular Material.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`package.json`文件；我们应该看到已安装的包，以及它们旁边列出的相应版本号。如果你看到我们最近安装的三个包，那就意味着我们准备好开始使用Angular
    Material创建一些很棒的UI界面了。
- en: 'Once we have installed Angular Material, we will need to import all the required
    modules into our `app.module.ts` file. There are a lot of modules provided by
    Material, each for a specific purpose. For example, we will need to import `MatCardModule`
    if we plan to use Material cards. Similarly, we need to import `MatChipsModule`
    if we want to use Material chips in our application. While we can definitely import
    only the required modules into `AppModule`, in most applications using Material
    UI, we will need all the modules. Now, let''s quickly learn how to import all
    the modules in one go. We can import all the modules into a generic module, and
    then use the newly created generic module in the `app.module.ts` file. First,
    let''s create a file in our project structure and name it `material-module.ts`,
    then we can add the following code to in order import all the modules into this
    file:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们安装了Angular Material，我们将需要将所有必需的模块导入到我们的`app.module.ts`文件中。Material提供了许多模块，每个模块都有特定的目的。例如，如果我们打算使用Material卡片，我们将需要导入`MatCardModule`。同样，如果我们想在应用程序中使用Material芯片，我们需要导入`MatChipsModule`。虽然我们可以在`AppModule`中确实只导入所需的模块，但在大多数使用Material
    UI的应用程序中，我们将需要所有模块。现在，让我们快速学习如何一次性导入所有模块。我们可以将所有模块导入到一个通用模块中，然后在`app.module.ts`文件中使用新创建的通用模块。首先，在我们的项目结构中创建一个文件，并将其命名为`material-module.ts`，然后我们可以添加以下代码以一次性导入所有模块到这个文件中：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the preceding code, we imported all the required modules into the file.
    Don''t worry about categorizing the previously listed modules just yet. We learn
    about the modules when we learn about the components that are provided by Material.
    The next step is pretty obvious—we will need to import this newly created module
    into our `app.module.ts` file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们将所有必需的模块导入到文件中。暂时不要担心对先前列出的模块进行分类。当我们学习Material提供的组件时，我们会了解这些模块。下一步非常明显——我们需要将这个新创建的模块导入到我们的`app.module.ts`文件中：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once we have imported the module, don't forget to add it to the imports of `AppModule`.
    That's it. We are all set to start learning and implementing the components that
    are provided by Angular Material.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们导入了模块，不要忘记将其添加到`AppModule`的导入中。就这样。我们已经准备好开始学习和实现由Angular Material提供的组件了。
- en: Did you know? Google has also released a lightweight CSS- and JavaScript-based,
    Lite library, Material Design Lite, which starts by using the components in the
    same way as in any other UI library. However, there may be some components that
    do not have full support. Learn more about it at [https://getmdl.io/](https://getmdl.io/).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道吗？谷歌还发布了一个轻量级的基于CSS和JavaScript的Lite库，Material Design Lite，它开始使用组件的方式与任何其他UI库一样。然而，可能有一些组件不具有完全支持。在[https://getmdl.io/](https://getmdl.io/)了解更多信息。
- en: Let's jump right into learning about the components of Angular Material.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们立即开始学习Angular Material的组件。 '
- en: Categories of components
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件类别
- en: 'As a frontend developer, you will have used a lot of UI components, or even
    better, you might have created your own custom components in past projects. As
    previously mentioned, Angular Material provides a lot of components that can be
    readily and easily used in our applications. The UI components provided by Angular
    Material can be categorized under the following categories:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 作为前端开发人员，你可能已经使用了许多UI组件，甚至更好的是，你可能在过去的项目中创建了自己的自定义组件。正如前面提到的，Angular Material提供了许多组件，可以在我们的应用程序中方便地使用。Angular
    Material提供的UI组件可以归类为以下类别：
- en: Layouts
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布局
- en: Material cards
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 材料卡片
- en: Form controls
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单控件
- en: Navigation
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航
- en: Buttons and indicators
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮和指示器
- en: Modals and popups
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模态框和弹出窗口
- en: Tables
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格
- en: It's a good idea to generate components for each of these categories, so that
    the placeholders will be available when we start implementing our application.
    These components will host all the components in a clearly categorized manner,
    and they will become your one-stop components that you can use to refer to any
    of the component implementations in the Material library.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个类别生成组件是一个好主意，这样当我们开始实现应用程序时，占位符将可用。这些组件将以清晰的分类方式托管所有组件，并且它们将成为您可以用来参考Material库中任何组件实现的一站式组件。
- en: 'First, let''s generate the components for our categories. Run the following
    `ng` commands one after another:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们为我们的类别生成组件。依次运行以下`ng`命令：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Following the successful running of the commands, we should see that the components
    are generated and added to our project structure, as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功运行命令后，我们应该看到生成的组件已添加到我们的项目结构中，如下截图所示：
- en: '![](assets/5e3af425-e7e2-41d1-a6b6-d0721ace3089.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5e3af425-e7e2-41d1-a6b6-d0721ace3089.png)'
- en: 'Great. We have generated our application; we have installed Angular Material.
    We have also imported all the required modules into our `AppModule` file, and
    finally, we have generated the components for each category in the UI components
    of Material. The last thing we need to do before we start implementing the Material
    components is to add the routes for each of the previously listed categories.
    Open the `app-routing.module.ts` file, import all the newly created components,
    and add the routes to the file:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。我们已经生成了我们的应用程序；我们已经安装了Angular Material。我们还将所有所需的模块导入到了我们的`AppModule`文件中，最后，我们为Material的UI组件中的每个类别生成了组件。在我们开始实现Material组件之前，我们需要做的最后一件事是为之前列出的每个类别添加路由。打开`app-routing.module.ts`文件，导入所有新创建的组件，并将路由添加到文件中：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding code, we imported all the newly created components and created
    route paths for each of the them. So far, so good. Now, the big stage is all set
    and ready to be rocked. Let's start with our layouts first.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们导入了所有新创建的组件，并为每个组件创建了路由路径。到目前为止，一切都很顺利。现在，大舞台已经准备就绪，可以开始了。让我们先从我们的布局开始。
- en: Navigation
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航
- en: One of the most common and basic necessities of any web application is a navigational
    menu or toolbar. Angular Material provides us with multiple options, with which
    we can choose the type of menu that is most suitable for our application.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 任何Web应用程序最常见和基本的需求之一是导航菜单或工具栏。Angular Material为我们提供了多种选项，我们可以选择最适合我们应用程序的菜单类型。
- en: Navigation components using schematics
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用原理图生成导航组件
- en: 'We will start with the simplest and fastest way to get the navigation added
    to our apps by using schematics. That''s right, we are just a command away from
    getting our menu up and running. Angular CLI provides schematics in order to get
    a wide range of components. To install the navigation menu in our app, run the
    following command in the Angular CLI command prompt:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从最简单和最快的方式开始，通过使用原理图来将导航添加到我们的应用程序中。没错，离我们的菜单上线只有一步之遥。Angular CLI提供了原理图，以便获得各种组件。要在我们的应用程序中安装导航菜单，请在Angular
    CLI命令提示符中运行以下命令：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding command, we used schematics to generate a new menu component
    called `myMenu`. Upon the successful running of the command, we should see the
    output shown in the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，我们使用原理图生成了一个名为`myMenu`的新菜单组件。在成功运行命令后，我们应该看到以下截图中显示的输出：
- en: '![](assets/319b20ae-4874-400b-bb44-b6b52d48bb54.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/319b20ae-4874-400b-bb44-b6b52d48bb54.png)'
- en: 'Run the app using the `ng serve` command, and we should see the output shown
    in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ng serve`命令运行应用程序，我们应该看到以下截图中显示的输出：
- en: '![](assets/05466c30-f141-438f-9d69-6fa346e37940.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/05466c30-f141-438f-9d69-6fa346e37940.png)'
- en: Isn't that a really cool navigation menu? It comes with a top header toolbar,
    and a sidebar menu that is collapsible . This component is autogenerated by the
    schematics. If you are not a big fan of autogenerated components, it's okay, we
    developers can be picky about these things. Let's see how we can create our own
    menu.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个非常酷的导航菜单吗？它带有一个顶部标题工具栏和一个可折叠的侧边栏菜单。这个组件是由原理图自动生成的。如果你不是自动生成组件的忠实粉丝，没关系，我们开发人员对这些事情可能会挑剔。让我们看看如何创建我们自己的菜单。
- en: Custom Material menus and navigation
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义Material菜单和导航
- en: 'Angular Material provides a `MatMenuModule` module, which provides directives,
    `<mat-menu>`, and `MatToolBarModule`. Also provided is `<mat-toolbar>`, which
    will be used to implement the menu and the header in our application. Open the
    `material-navigation.component.html` file and add the following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material提供了`MatMenuModule`模块，其中提供了`<mat-menu>`和`MatToolBarModule`指令。还提供了`<mat-toolbar>`，它将用于在我们的应用程序中实现菜单和标题。打开`material-navigation.component.html`文件并添加以下代码：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the preceding code, we implemented the toolbar directive using `<mat-toolbar>` as
    a wrapper, and we added a heading title using `<h1>`. We also added some links
    to the header sections. Run the app using `ng serve`, and we should see the output
    shown in the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们使用`<mat-toolbar>`作为包装器实现了工具栏指令，并使用`<h1>`添加了一个标题。我们还在标题部分添加了一些链接。使用`ng
    serve`运行应用程序，我们应该看到以下截图中显示的输出：
- en: '![](assets/88e74315-d203-4418-a9bb-9ecfd0e0e0d9.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/88e74315-d203-4418-a9bb-9ecfd0e0e0d9.png)'
- en: 'That''s wonderful. Let''s enhance it a little more. We want to add a drop-down
    menu our header toolbar. Remember I told you that we have the `<mat-menu>` directive
    provided by the `MatMenuModule` module? Let''s add the menu directive to the header
    toolbar in the preceding code as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。让我们再增强一下。我们想要在标题工具栏中添加一个下拉菜单。记得我告诉过你，我们有`MatMenuModule`模块提供的`<mat-menu>`指令吗？让我们在上述代码中的标题工具栏中添加菜单指令如下：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Notice that we have added a button using the `mat-button` attribute, and we
    are binding the `matMenuTriggerFor` attribute. This will show the drop-down menu
    defined with `<mat-menu>` directives. Now let''s run the app using the `ng serve`
    command, and we should see the output as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用`mat-button`属性添加了一个按钮，并绑定了`matMenuTriggerFor`属性。这将显示使用`<mat-menu>`指令定义的下拉菜单。现在让我们使用`ng
    serve`命令运行应用程序，我们应该看到以下输出：
- en: '![](assets/2ee0cf78-0bdf-45fd-bcb4-196931da3229.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2ee0cf78-0bdf-45fd-bcb4-196931da3229.png)'
- en: Custom sidebar menus
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义侧边栏菜单
- en: 'Awesome. So, now we have our custom-made menu ready to use. I know you want
    more, don''t you? You want to add a sidebar too? Let''s do it. To add the sidebar
    to our application, Angular Material provides us with a `MatSidenavModule` module,
    which provides the `<mat-sidenav>` directive that we can use in our application.
    So, let''s continue to modify the preceding code as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。现在我们有了自制菜单可以使用。我知道你想要更多，对吧？你也想要添加一个侧边栏吗？让我们来做吧。为了将侧边栏添加到我们的应用程序中，Angular
    Material为我们提供了一个`MatSidenavModule`模块，其中提供了我们可以在应用程序中使用的`<mat-sidenav>`指令。因此，让我们继续修改上述代码如下：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Don''t get scared by looking at the number of lines of code. We have just made
    a few changes, such as adding the `<mat-sidenav>` directive, which will contain
    the content of the sidebar. Finally, we are wrapping the entire content inside
    the `<mat-sidenav-container>` directive; this is important, as the sidebar will
    overlay on the content. Run the app using the `ng serve` command, and we should
    see the output shown in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 不要被代码行数吓到。我们只是做了一些改动，比如添加了`<mat-sidenav>`指令，它将包含侧边栏的内容。最后，我们将整个内容包装在`<mat-sidenav-container>`指令内；这很重要，因为侧边栏将覆盖在内容上方。使用`ng
    serve`命令运行应用程序，我们应该看到以下截图中显示的输出：
- en: '![](assets/3468908b-0cf1-42c8-b0b3-5dd7b59ae589.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3468908b-0cf1-42c8-b0b3-5dd7b59ae589.png)'
- en: If you see the output shown in the preceding screenshot, give yourself a pat
    on the back. Kudos! You are doing absolutely wonderfully. So, we have learned
    two ways to implement the navigation and the menu in our applications. We can
    either use schematics to generate the navigation component, or we can write a
    custom menu navigation component. Either way, **user experience** (**UX**) wins!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到了上面截图中显示的输出，给自己一个鼓励。太棒了！你做得非常好。所以，我们已经学会了两种在我们的应用程序中实现导航和菜单的方法。我们可以使用原理图生成导航组件，也可以编写自定义菜单导航组件。无论哪种方式，**用户体验**（**UX**）都是赢家！
- en: Now that we have our navigational menu component, let's learn about the other
    components of the Angular Material library.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了导航菜单组件，让我们学习一下Angular Material库的其他组件。
- en: Cards and layout
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卡片和布局
- en: In this section, we will learn about Angular Material cards and layouts. The
    basic layout component of Angular Material is a card. The card wrapper layout
    component can also include lists, accordions or expansion panels, tabs, steppers,
    and so on.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将学习关于Angular Material卡片和布局的知识。Angular Material的基本布局组件是卡片。卡片包装布局组件还可以包括列表、手风琴或展开面板、选项卡、步进器等等。
- en: Material cards
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 材料卡片
- en: A card is a content container for text, images, links, and actions that are
    used to group the data of a single subject. Cards can have a header, a body, an
    image, or links, which can be displayed to the user based on their availability
    and functionality. Angular Material provides a module named `MatCardModule`, which
    provides the `<mat-card>` directive. We will use this to group the content of
    our application.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 卡片是用于组合单个主题的数据的文本、图像、链接和操作的内容容器。卡片可以有标题、正文、图像或链接，根据它们的可用性和功能，可以显示给用户。Angular
    Material提供了一个名为`MatCardModule`的模块，其中提供了`<mat-card>`指令。我们将使用这个来组合我们应用程序的内容。
- en: 'A basic example of creating a card is given as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 创建卡片的基本示例如下：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding code, we made use of the directives provided by `MatCardModule`.
    We will use `<mat-card>` as a wrapper directive in order to group the content.
    By using the `<mat-card-title>` directive, we are setting the title of the card.
    We are setting a subtitle by using the  `<mat-card-subtitle>` directive inside
    the `<mat-card>` directive. Inside `<mat-card-content>`, we place all the content
    that we need to display to the user. Each card may have the actions that we want
    the user to perform, such as sharing, editing, approving, and so on. We can display
    the card actions using the `<mat-card-actions>` directive.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们使用了`MatCardModule`提供的指令。我们将使用`<mat-card>`作为包装指令，以便将内容分组。通过使用`<mat-card-title>`指令，我们设置了卡片的标题。我们使用`<mat-card-subtitle>`指令在`<mat-card>`指令内设置副标题。在`<mat-card-content>`内，我们放置所有需要显示给用户的内容。每个卡片可能有我们希望用户执行的操作，例如分享、编辑、批准等。我们可以使用`<mat-card-actions>`指令显示卡片操作。
- en: 'Run the app using the `ng serve` command, and we should see the output shown
    in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ng serve`命令运行应用程序，我们应该看到以下截图中显示的输出：
- en: '![](assets/323a6edf-28da-483d-a148-e126f0335576.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/323a6edf-28da-483d-a148-e126f0335576.png)'
- en: Notice that we have added some content inside the Angular Material card. Are
    you wondering what kind of content can be displayed inside the cards? You name
    it, and we can use it. We can add links, images, lists, accordions, steppers,
    and more. In the next section, we will learn how to add lists to our cards.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在Angular Material卡片内添加了一些内容。您是否想知道卡片内可以显示什么样的内容？只要您想，我们都可以使用。我们可以添加链接、图片、列表、手风琴、步进器等。在下一节中，我们将学习如何将列表添加到我们的卡片中。
- en: Lists
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表
- en: 'Lists are collections of items grouped together. We can have either ordered
    list, or unordered in our applications. In this section, we will learn how to
    add different types of lists inside the cards. Take a look at the following sample
    code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 列表是一组项目的集合。在我们的应用程序中，可以是有序列表，也可以是无序列表。在本节中，我们将学习如何在卡片内添加不同类型的列表。看看下面的示例代码：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the preceding code, we added a list of a few cities. We used the `<mat-list>`
    and `<mat-list-item>` directives provided inside `MatListModule`, in order to
    create and display the list of cities inside the cards. The output of the preceding
    code is as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们添加了几个城市的列表。我们使用了`MatListModule`中提供的`<mat-list>`和`<mat-list-item>`指令，以便在卡片内创建和显示城市列表。上面的代码输出如下：
- en: '![](assets/fcc17b3f-51e2-4b64-84c7-7463058f3630.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fcc17b3f-51e2-4b64-84c7-7463058f3630.png)'
- en: Lists with dividers
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带分隔线的列表
- en: 'We can also easily add a `divider` class for the list items in order to visually
    separate them into rows. We need to add the `<mat-divider>` directive in order
    to achieve that functionality. Take a look at the updated code as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以很容易地为列表项添加`divider`类，以便在视觉上将它们分隔成行。我们需要添加`<mat-divider>`指令以实现该功能。看看下面更新的代码：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Navigation lists
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航列表
- en: 'We can extend the lists to make them clickable, and therefore make them into
    navigational links. To make the list items clickable, we will need to use the
    `<mat-nav-list>` directive. Take a look at the sample code as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以扩展列表使其可点击，从而将其转换为导航链接。要使列表项可点击，我们需要使用`<mat-nav-list>`指令。看看下面的示例代码：
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the preceding code, we created a navigation type of list and the list items
    inside our cards, using the `<mat-nav-list>` and `<mat-list-item>` directives
    that are provided in the `MatListModule` module. The output of the preceding code
    is given as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们使用了`MatListModule`模块中提供的`<mat-nav-list>`和`<mat-list-item>`指令，创建了导航类型的列表和卡片内的列表项。上面的代码输出如下：
- en: '![](assets/823821fa-d49d-4c3f-ad0f-c6244e57222f.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/823821fa-d49d-4c3f-ad0f-c6244e57222f.png)'
- en: Accordions and expansion panels
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手风琴和展开面板
- en: 'One other very cool UI component is accordions, or expansion panels. It''s
    very handy to use when we need to group data together. We will need to use `<mat-accordion>`
    and `<mat-expansion-panel>`, which are provided in the `MatExpansionModule` module,
    to implement the accordion functionality in our application. Take a look at the
    following sample code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常酷的UI组件是手风琴或展开面板。当我们需要将数据分组在一起时，使用它非常方便。我们需要使用`MatExpansionModule`模块中提供的`<mat-accordion>`和`<mat-expansion-panel>`来实现我们应用程序中的手风琴功能。看看下面的示例代码：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Each `<mat-expansion-panel>` will have a `<mat-expansion-panel-header>`, where
    we can provide the title and description for the expansion panel, and we place
    the content inside the `<mat-expansion-panel>` directive itself. The output of
    the preceding code is as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`<mat-expansion-panel>`都将有一个`<mat-expansion-panel-header>`，我们可以在其中为展开面板提供标题和描述，并将内容放在`<mat-expansion-panel>`指令本身内。上面的代码输出如下：
- en: '![](assets/2048cc2a-8f6c-4e4f-9c97-fe337655a8e6.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2048cc2a-8f6c-4e4f-9c97-fe337655a8e6.png)'
- en: There will be use cases where we need to walk the user through a series of steps.
    That's where our next component comes into the picture. It's called a stepper.
    As the name suggests, this will be used to design steps either horizontally or
    vertically, and will group a series of steps that the user can navigate to.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们需要引导用户完成一系列步骤的用例。这就是我们下一个组件发挥作用的地方。它被称为步进器。顾名思义，这将用于设计水平或垂直的步骤，并将一系列步骤分组，用户可以导航到这些步骤。
- en: Steppers
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步进器
- en: 'Similar to what we learned in the *Accordions and expansion panels* section,
    we will need to add a `wrapper`, and a `<mat-horizontal-stepper>` directive, and
    inside that, we will create `<mat-step>` directives. For each step that we want
    to add, we will need to create a new `<mat-step>` directive for our application.
    We can also create a vertical stepper. For that, the `wrapper` class we will use
    is the `<mat-vertical-stepper>` directive. Take a look at the following code;
    we are creating a horizontal stepper:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在*手风琴和展开面板*部分学到的类似，我们需要添加一个`包装器`和一个`<mat-horizontal-stepper>`指令，在其中，我们将创建`<mat-step>`指令。对于我们想要添加的每个步骤，我们需要为我们的应用程序创建一个新的`<mat-step>`指令。我们也可以创建一个垂直步进器。为此，我们将使用`<mat-vertical-stepper>`指令作为`包装器`类。请看下面的代码；我们正在创建一个水平步进器：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the preceding code, we created a horizontal stepper with three steps. To
    define the stepper, we have used `<mat-horizontal-stepper>`, and for defining
    the actual steps, we have used the `<mat-step>` directive. The output of the preceding
    code is given as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们创建了一个包含三个步骤的水平步进器。为了定义步进器，我们使用了`<mat-horizontal-stepper>`，用于定义实际步骤，我们使用了`<mat-step>`指令。上面代码的输出如下：
- en: '![](assets/69a83ba5-3466-4b3f-94e7-47e98d94707b.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/69a83ba5-3466-4b3f-94e7-47e98d94707b.png)'
- en: Tabs
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标签页
- en: 'The last layout component that we are going to learn about is tabs. Angular
    Material provides a module called `MatTabsModule`, which provides the `<mat-tab-group>`
    and `<mat-tab>` directives so that we can easily create a tabs component in our
    application. Take a look at the following sample code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要学习的最后一个布局组件是标签页。Angular Material提供了一个名为`MatTabsModule`的模块，该模块提供了`<mat-tab-group>`和`<mat-tab>`指令，以便我们可以轻松地在我们的应用程序中创建一个标签页组件。请看下面的示例代码：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the preceding code, we used the `<mat-tab-group>` wrapper directive, and
    inside this, we use the `<mat-tab>` directive for each specific tab. Each tab
    will have a label that will be displayed at the top of the tab. Inside `<mat-tab>`,
    we will display the content of each tab. Take a look at the output of the preceding
    code in the following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们使用了`<mat-tab-group>`包装指令，在其中，我们使用了`<mat-tab>`指令来指定每个特定的标签页。每个标签页都有一个标签，将显示在标签页的顶部。在`<mat-tab>`内部，我们将显示每个标签页的内容。请看下面截图中上面代码的输出：
- en: '![](assets/27a9c3bf-23ed-49f3-963f-f591dea8cb06.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/27a9c3bf-23ed-49f3-963f-f591dea8cb06.png)'
- en: In the next section, we will learn about Angular Material forms. Read on.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习关于Angular Material表单的知识。继续阅读。
- en: Form controls
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单控件
- en: Forms are the main ingredient in any interactive and dynamic application. Angular
    Material natively supports forms and form controls that can easily be integrated
    into our applications. In this section, we will learn how to put together forms
    using Angular Material.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 表单是任何交互式和动态应用程序的主要组成部分。Angular Material原生支持表单和表单控件，可以轻松地集成到我们的应用程序中。在本节中，我们将学习如何使用Angular
    Material组合表单。
- en: Forms, in general, have evolved a lot in terms of UX/UI. Angular Material supports
    basic form field elements that involve text fields, textareas, drop-down select
    options, radio buttons, and checkbox elements. Angular Material also provides
    advanced form elements, such as autocomplete, the datepicker, slide toggles, and
    so on. We will learn how to add all of this to our form as we work through our
    hands-on examples.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，表单在UX/UI方面已经有了很大的发展。Angular Material支持涉及文本字段、文本区域、下拉选择选项、单选按钮和复选框等基本表单字段元素。Angular
    Material还提供了高级表单元素，例如自动完成、日期选择器、滑动开关等。在我们进行实际示例的过程中，我们将学习如何将所有这些添加到我们的表单中。
- en: 'Angular Material provides a lot of modules that are related to forms and form
    field elements, including the following listed modules:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material提供了许多与表单和表单字段元素相关的模块，包括以下列出的模块：
- en: '`MatFormFieldModule`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MatFormFieldModule`'
- en: '`MatInputField`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MatInputField`'
- en: '`MatRadioModule`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MatRadioModule`'
- en: '`MatChipModule`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MatChipModule`'
- en: '`MatProgressBarModule`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MatProgressBarModule`'
- en: '`MatSelectModule`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MatSelectModule`'
- en: '`MatSlideModule`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MatSlideModule`'
- en: '`MatSlideToggleModule`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MatSlideToggleModule`'
- en: '``MatListModule``'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '``MatListModule``'
- en: '`MatDatePickerModule`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MatDatePickerModule`'
- en: '`MatAutocompleteModule`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MatAutocompleteModule`'
- en: '`MatCheckboxModule`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MatCheckboxModule`'
- en: 'As previously mentioned, we can import these individually, or all in one go,
    as we did in the previous section in our `MaterialModule` file. We have our modules
    imported in `AppModule`; we are good to start implementing the form fields into
    our form. We will wrap each of the `input` and `textarea` form elements in a `<mat-form-field>`
    wrapper directive. To implement the input textbox, we will make use of the `matInput`
    attribute, along with our `HTML` input tag:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们可以单独导入这些，或者像在前一节中的`MaterialModule`文件中那样一次性导入所有模块。我们已经在`AppModule`中导入了我们的模块；我们可以开始将表单字段实现到我们的表单中。我们将把每个`input`和`textarea`表单元素包装在一个`<mat-form-field>`包装指令中。为了实现输入文本框，我们将使用`matInput`属性，以及我们的`HTML`输入标签：
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'That was very simple and straightforward, right? You bet it is. Now, similarly,
    we can easily add a `textarea` field to our form:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常简单明了，对吧？当然。现在，同样地，我们可以轻松地向我们的表单中添加一个`textarea`字段：
- en: '[PRE18]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Okay, so it wasn''t rocket science to add the `Input` and `Textarea` form elements.
    Next, we are going to implement a radio button and checkbox field element:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，添加`Input`和`Textarea`表单元素并不是什么难事。接下来，我们将实现单选按钮和复选框字段元素：
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To implement a radio button in our form, we will use the `<mat-radio-button>` directive. In
    most cases, we will also use multiple radio buttons in order to provide different
    options. That''s where we will use a `<mat-radio-group>` wrapper directive. Similar
    to the radio button, Material provides a directive that we can easily use to integrate
    checkboxes into our application. We will make use of the `<mat-checkbox>` directive
    as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的表单中实现单选按钮，我们将使用`<mat-radio-button>`指令。在大多数情况下，我们还将使用多个单选按钮来提供不同的选项。这就是我们将使用`<mat-radio-group>`包装指令的地方。与单选按钮类似，Material提供了一个指令，我们可以轻松地将复选框集成到我们的应用程序中。我们将使用`<mat-checkbox>`指令如下：
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The directive is provided by the `MatCheckboxModule` module, and provides a
    lot of properties that can we use to extend or process the data.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 该指令由`MatCheckboxModule`模块提供，并提供了许多属性，我们可以用来扩展或处理数据。
- en: 'To implement the drop-down options in our form, we will need to use the HTML
    `<select>` and `<option>` tags. The Material library provides directives that
    we can easily use to extend the is capability in our form:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的表单中实现下拉选项，我们需要使用HTML的`<select>`和`<option>`标签。Material库提供了我们可以轻松使用的指令，以扩展我们表单的功能：
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the preceding code, for using the `<select>` and `<option>` tags, we'll be
    using the `<mat-select>` and `<mat-option>` directives. We are making very good
    progress here. Let's keep the momentum going. The next form field element that
    we are going to implement is a slider component.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，为了使用`<select>`和`<option>`标签，我们将使用`<mat-select>`和`<mat-option>`指令。我们在这里取得了很好的进展。让我们保持这种势头。我们要实现的下一个表单字段元素是滑块组件。
- en: 'Sliders can be really helpful when the user wants to specify a start value
    and an end value. It improves the user''s experience when they can just start
    scrolling through the range, and the data gets filtered based on the selected
    range. To add a slider to our form, we will need to add the `<mat-slider>` directive:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户想要指定起始值和结束值时，滑块可以非常有帮助。当用户可以开始浏览范围并且数据根据所选范围进行过滤时，它可以改善用户体验。要向我们的表单添加滑块，我们需要添加`<mat-slider>`指令：
- en: '[PRE22]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'That was very simple. The `MatSliderModule` API provides a lot of options to
    extend and use the directive in many useful ways. We can specify maximum and minimum
    ranges. We can set interval values, and much more. Talking about slider functionality
    in the UI, there is a component that we can use, called a slide toggle. We can
    implement a slide toggle using the `<mat-slide-toggle>` directive:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 那很简单。`MatSliderModule` API提供了许多选项，以便以许多有用的方式扩展和使用指令。我们可以指定最大和最小范围。我们可以设置间隔值，等等。谈到UI中的滑块功能，有一个组件可以使用，称为滑动切换。我们可以使用`<mat-slide-toggle>`指令来实现滑动切换：
- en: '[PRE23]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We made use of the `<mat-slide-toggle>` directive that was provided by the `MatSlideToggleModule`
    module. The API provides a lot of properties, such as `dragChange`, `toggleChange`,
    setting color or validation as required, and so on.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`MatSlideToggleModule`模块提供的`<mat-slide-toggle>`指令。该API提供了许多属性，例如`dragChange`、`toggleChange`、根据需要设置颜色或验证等。
- en: 'Now that we have put together all of the preceding form field elements in our
    template file, let''s run the app to see the output. Run the app using the `ng
    serve` command, and we should see the output shown in the following screenshot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在模板文件中放置了所有前面的表单字段元素，让我们运行应用程序以查看输出。使用`ng serve`命令运行应用程序，我们应该看到以下截图中显示的输出：
- en: '![](assets/50f8506a-1761-4ec3-965a-cde69e7e0120.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/50f8506a-1761-4ec3-965a-cde69e7e0120.png)'
- en: In the next section, we will learn about the buttons and indicator components
    that are provided by Angular Material.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习由Angular Material提供的按钮和指示器组件。
- en: Buttons and indicators
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按钮和指示器
- en: A quick bit of trivia here—ave you seen any website or application without any
    sort of buttons? If you have, please write to me.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个小小的趣闻——你见过没有任何按钮的网站或应用程序吗？如果有的话，请写信给我。
- en: As far as my experience goes, buttons are an integral part of web applications. In
    this section, we will learn all about buttons, button groups, and indicators.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 就我的经验而言，按钮是Web应用程序的一个组成部分。在本节中，我们将学习有关按钮、按钮组和指示器的所有内容。
- en: 'Angular Material provides a lot of useful and easy attributes that we can attach
    to the button tags, and, voila. Magic happens. The simplest way to start using
    an Angular Material button is by adding a `mat-button` attribute to the `<button>`
    tag:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material提供了许多有用且易于附加到按钮标签的属性，然后，神奇发生了。开始使用Angular Material按钮的最简单方法是将`mat-button`属性添加到`<button>`标签中：
- en: '[PRE24]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the preceding code, we added the `mat-button` attribute to all the buttons
    that we have added to our `material-button.component.html` template file. We also
    customized the look, feel, and the behavior of the buttons using properties such
    as `color` and `disabled`. The output of the preceding code is displayed as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们为添加到`material-button.component.html`模板文件中的所有按钮添加了`mat-button`属性。我们还使用了`color`和`disabled`等属性来自定义按钮的外观和行为。上述代码的输出如下：
- en: '![](assets/cf352d5c-b16c-4dea-b9b9-7110f6ca895b.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cf352d5c-b16c-4dea-b9b9-7110f6ca895b.png)'
- en: 'The buttons in the preceding screenshot appear more like links and not buttons,
    right? Let''s customize them to make them look more like buttons. We can easily
    do this by adding the  `mat-raised-button` attribute. Notice that in the previous
    example, we used the `mat-button` attribute, and in this example, we are adding
    `mat-raised-button`. The updated code is as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图中的按钮看起来更像链接而不是按钮，对吧？让我们自定义它们，使它们看起来更像按钮。我们可以通过添加`mat-raised-button`属性来轻松实现这一点。请注意，在上一个示例中，我们使用了`mat-button`属性，在这个示例中，我们添加了`mat-raised-button`。更新后的代码如下：
- en: '[PRE25]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output of the preceding code is as follows. Notice the difference in the
    look and feel of the buttons now that the new attribute has been added:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下。请注意，现在添加了新属性后，按钮的外观和感觉有所不同：
- en: '![](assets/b38f8db1-2cea-4752-b7b4-38a0159cff3d.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b38f8db1-2cea-4752-b7b4-38a0159cff3d.png)'
- en: They are pretty buttons! Using the predefined attributes allows us to maintain
    the uniformity of the buttons across the application.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是漂亮的按钮！使用预定义的属性可以让我们在整个应用程序中保持按钮的统一性。
- en: Next, we are going to explore the indicators provided by Angular Material. We
    will learn about badges and progress bar components as part of the indicator components.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探索Angular Material提供的指示器。作为指示器组件的一部分，我们将学习徽章和进度条组件。
- en: Badges are a way to highlight some data along with other UI elements. We may
    come across use cases where we want to use badges along with buttons. You must
    already be thinking, can we also add some UX for the buttons to design some functionality,
    too? Yes, we can!
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 徽章是突出显示一些数据以及其他UI元素的一种方式。我们可能会遇到一些使用案例，希望在按钮上使用徽章。你可能已经在想，我们是否也可以为按钮添加一些UX来设计一些功能呢？是的，我们可以！
- en: 'Angular Material provides a module called `MatBadgeModule`, which has implementations
    for the `matBadge`, `matBadgePosition`, and `matBadgeColor` attributes, which
    can easily be used to set badges to the buttons. Take a look at the following sample
    code:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material提供了一个名为`MatBadgeModule`的模块，其中包含了`matBadge`、`matBadgePosition`和`matBadgeColor`属性的实现，可以轻松地用于设置按钮的徽章。看一下以下示例代码：
- en: '[PRE26]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the preceding code, we added a button element, and we specified the attributes,
    such as `matBadge`, `matBadgePosition`, and `matBadgeColor`. The output of the
    preceding code is as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们添加了一个按钮元素，并指定了属性，如`matBadge`、`matBadgePosition`和`matBadgeColor`。上述代码的输出如下：
- en: '![](assets/c852e365-4b85-4b14-89d8-9bdb9817a597.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c852e365-4b85-4b14-89d8-9bdb9817a597.png)'
- en: 'This was a button with badges. There is another UI component called chips.
    We can easily use these in order to enhance the UX as well. Think of material
    chips as *tags* in any other application you have used previously. Angular Material
    provides a module called `MatChipModule`, which provides the `<mat-chip-list>`
    and `<mat-chip>` directives, which we can easily integrate into our application.
    Take a look at the following sample code:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个带徽章的按钮。还有另一个名为chips的UI组件。我们也可以轻松使用这些来增强UX。将Material chips想象成之前使用过的任何其他应用程序中的*标签*。Angular
    Material提供了一个名为`MatChipModule`的模块，其中提供了`<mat-chip-list>`和`<mat-chip>`指令，我们可以轻松地集成到我们的应用程序中。看一下以下示例代码：
- en: '[PRE27]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the preceding code, we used the directives resulting from `MatChipModule`,
    and from putting together the tags. The output of the preceding code is as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了从`MatChipModule`中得到的指令，并将标签组合在一起。前面代码的输出如下：
- en: '![](assets/469aa4f0-551d-46f9-b52a-dbeabb2312a6.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/469aa4f0-551d-46f9-b52a-dbeabb2312a6.png)'
- en: That was neat. The next indicator that we will learn to implement is a very
    important one; the progress bar. We need to show and inform our users about actions
    that are being performed in the background, or show the progress of processing
    some user data. In such situations, we will need to clearly show this using a
    progress bar.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。我们将学习实现的下一个指示器是非常重要的；进度条。我们需要向用户显示并告知正在后台执行的操作，或显示处理某些用户数据的进度。在这种情况下，我们需要清楚地使用进度条来显示这一点。
- en: 'Angular Material provides modules named `MatProgressBarModule` and `MatProgressSpinnerModule`,
    using which, we can easily add a loading icon or spinner to our web application.
    Using the API properties and events, we can easily capture and process the data
    as well. Take a look at the following sample code:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material提供了名为`MatProgressBarModule`和`MatProgressSpinnerModule`的模块，使用这些模块，我们可以轻松地向我们的Web应用程序添加加载图标或旋转器。使用API属性和事件，我们还可以轻松地捕获和处理数据。看一下以下示例代码：
- en: '[PRE28]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'That''s it? Really? Are we kidding? No, we are not. Just by using this module,
    we should see the spinning wheel displayed in our application. Take a look at
    the output of the preceding code:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样？真的吗？我们在开玩笑吗？不，我们不是。只需使用这个模块，我们应该在我们的应用程序中看到旋转的轮子。看一下前面代码的输出：
- en: '![](assets/68f67a97-e278-4a6a-9539-937327e36fa2.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/68f67a97-e278-4a6a-9539-937327e36fa2.png)'
- en: In the next section, we will learn all about the modals and dialog windows that
    are provided by Angular Material.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习Angular Material提供的所有有关模态窗口和对话框窗口的信息。
- en: Popups and modals
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弹出窗口和模态窗口
- en: Modern web applications have introduced a lot of innovative UX features and
    functionalities. One feature that really stands out has to be modal windows. Take
    any major web application; it will have some flavor of modal window implemented
    in it. The Angular Material library, too, provides us with an easy way to implement
    modal or dialog pop-up windows.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现代Web应用程序引入了许多创新的UX功能和功能。一个真正突出的功能必须是模态窗口。打开任何主要的Web应用程序；它都会有一些模态窗口的实现。Angular
    Material库也为我们提供了一种轻松实现模态或对话框弹出窗口的方法。
- en: 'Angular Material has a module named `MatDialogModule`, which provides various
    classes that we can use in our component classes. Unlike other UI components,
    there are no directives that you can directly use in the template file; instead,
    we need to achieve this functionality programmatically. Before we get into creating
    our dialog window implementation, we will need a component in which we can store
    the modal window content. Run the following command and generate a component.
    Let''s call it the `addDialog` component:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material有一个名为`MatDialogModule`的模块，它提供了我们可以在组件类中使用的各种类。与其他UI组件不同，没有指令可以直接在模板文件中使用；相反，我们需要以编程方式实现此功能。在我们开始创建对话框窗口实现之前，我们将需要一个组件来存储模态窗口内容。运行以下命令并生成一个组件。让我们称之为`addDialog`组件：
- en: '[PRE29]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'When the command is executed successfully, we should see the output shown in
    the following screenshot:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 当命令成功执行时，我们应该看到以下截图中显示的输出：
- en: '![](assets/70d10286-0b19-48e2-b30c-233f38def789.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/70d10286-0b19-48e2-b30c-233f38def789.png)'
- en: Now, open the newly created `add-dialog.component.html` file, and add some content.
    Even *Hello World* is just fine for now.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开新创建的`add-dialog.component.html`文件，并添加一些内容。即使现在只是*Hello World*也可以。
- en: 'Next, let''s start modifying our `MaterialModalComponent` class, and add the
    following code into it:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们开始修改我们的`MaterialModalComponent`类，并将以下代码添加到其中：
- en: '[PRE30]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Let's analyze the preceding code. We imported all the required modules into
    the file. We then imported `VERSION`, `MatDialogRef`, and `MatDialog` into our
    component class. We also imported `AddNewComponent`, which we want to display
    in the modal window. Since we imported `MatDialog` into the class, we need to
    inject it into our constructor method, and then create an instance of it. We will
    then create another method, named `openDialog`. In this method, by using the `MatDialog`
    instance, we are calling the method open and passing `AddNewComponent` as the
    parameter. We have implemented the functionality of the modal window, but this
    won't work until we actually call the `openDialog` method.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析前面的代码。我们将所有所需的模块导入到文件中。然后我们将`VERSION`，`MatDialogRef`和`MatDialog`导入到我们的组件类中。我们还导入了`AddNewComponent`，我们希望在模态窗口中显示它。由于我们在类中导入了`MatDialog`，我们需要将其注入到我们的构造方法中，然后创建一个实例。然后我们将创建另一个名为`openDialog`的方法。在这个方法中，通过使用`MatDialog`实例，我们调用open方法并将`AddNewComponent`作为参数传递。我们已经实现了模态窗口的功能，但在实际调用`openDialog`方法之前，这不会起作用。
- en: 'So, let''s open our `material-modal.component.html` template file, and add
    the following line to it:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们打开我们的`material-modal.component.html`模板文件，并在其中添加以下行：
- en: '[PRE31]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'There''s not much to describe here. We just added a button and attached an
    `onclick` event in order to call the `openDialog` method: simple and sweet. Let''s
    run the app using the `ng serve` command, and we should see the following output:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有太多要描述的。我们只是添加了一个按钮，并附加了一个`onclick`事件，以便调用`openDialog`方法：简单而甜蜜。让我们使用`ng serve`命令运行应用程序，我们应该看到以下输出：
- en: '![](assets/82648a01-8f32-4ba5-9ff1-f0da8ca80696.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/82648a01-8f32-4ba5-9ff1-f0da8ca80696.png)'
- en: In my `AddDialogComponent`, I have added some text and a button. You can add
    or design your own template as well. The API provides a lot of properties and
    events that we can associate with the dialog window.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的`AddDialogComponent`中，我添加了一些文本和一个按钮。您也可以添加或设计自己的模板。API提供了许多属性和事件，我们可以与对话框窗口关联起来。
- en: In the next section, we will learn about the data tables feature that is provided
    by Angular Material.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习Angular Material提供的数据表功能。
- en: Data tables
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据表
- en: 'Tables are one of the key aspects of designing complex behind-the-login screen
    functionalities. I say behind the login screen, because that way, the search engine
    optimization debate won''t come into the picture. The problem with traditional
    tables is that we need to map the data, rows, and columns ourselves, along with
    implementing pagination and responsiveness. Thanks to Angular Material, we can
    now have all of that generated for us with just one line of command. That''s right,
    you read it correctly—with only one command, when we use schematics. Run the following
    command, and we should have our data table ready in no time:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 表格是设计复杂的登录后屏幕功能的关键方面之一。我说在登录屏幕后面，因为这样，搜索引擎优化的争论就不会出现。传统表格的问题在于我们需要自己映射数据、行和列，并实现分页和响应性。多亏了Angular
    Material，我们现在可以用一行命令就能生成所有这些。没错，你没看错——只用一个命令，当我们使用原理图时。运行以下命令，我们应该很快就能准备好我们的数据表：
- en: '[PRE32]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We use the `ng` command to specify to the schematics with which we want to
    generate the table from Angular Material, and that it should be created in a new
    component named `issueList`. Upon the successful running of the command, we should
    see the output shown in the following screenshot:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`ng`命令来指定我们要从Angular Material生成表格的原理图，并且应该在名为`issueList`的新组件中创建它。成功运行命令后，我们应该看到以下截图中显示的输出：
- en: '![](assets/e0be43c4-5d3e-4aeb-b5c4-7598cc5a125c.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e0be43c4-5d3e-4aeb-b5c4-7598cc5a125c.png)'
- en: 'Run the app using the `ng serve` command, and navigate to the route of the
    table. We should see the output shown in the following screenshot:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ng serve`命令运行应用程序，并导航到表的路由。我们应该看到以下截图中显示的输出：
- en: '![](assets/4b274d70-640f-435b-a8f4-8b8a7cfe7007.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4b274d70-640f-435b-a8f4-8b8a7cfe7007.png)'
- en: Voila! We now have our dynamic table ready to use. We can customize the data
    source values and the columns that we need to display and update the pagination
    just using the configurations in our `component` class. Go ahead and give it a
    try.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 看！我们现在已经准备好使用我们的动态表格了。我们可以自定义数据源的值和需要显示和更新的列，只需使用我们`component`类中的配置。继续尝试一下吧。
- en: Summary
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We started this chapter by creating the placeholder components for each of the
    main categories of the UI components. The components are categorized under various
    category layouts, material cards, form controls, navigations, buttons and indicators,
    modals and popups, and tables.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过为UI组件的每个主要类别创建占位符组件来开始本章。这些组件分为各种类别布局、材料卡片、表单控件、导航、按钮和指示器、模态和弹出窗口以及表格。
- en: We started by creating the navigation menu component. We learned how to autogenerate
    the navigation menu component using schematics. We then also learned how to implement
    a custom menu for our apps. Next, we started learning and implementing the layout
    components that are provided by Angular Material. In the layout components, we
    learned about Material cards. We learned how to include various content inside
    the Material cards. We learned about various lists that are supported by Material.
    We learned about lists with dividers, and navigation lists. We also learned how
    to implement accordions and expansion panels to better group and arrange the data.
    We also explored how to use the stepper component, which is very useful when designing
    UX for data that requires various steps. Along the same lines, we learned about
    grouping things using tabs.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建了导航菜单组件。我们学习了如何使用原理图自动生成导航菜单组件。然后，我们还学习了如何为我们的应用程序实现自定义菜单。接下来，我们开始学习并实现由Angular
    Material提供的布局组件。在布局组件中，我们了解了Material卡片。我们学习了如何在Material卡片中包含各种内容。我们了解了Material支持的各种列表。我们了解了带有分隔线的列表和导航列表。我们还学习了如何实现手风琴和扩展面板，以更好地对数据进行分组和排列。我们还探索了如何使用步进器组件，在设计需要各种步骤的数据的UX时非常有用。同样，我们学习了如何使用选项卡来对事物进行分组。
- en: Next, we explored Material forms and learned how to implement form field elements
    including input, textarea, radio and checkbox buttons, sliders, and slide toggles. We
    also learned about different types of buttons and indicators, including badges
    and tags that are provided by Material. We then learned about and implemented
    the modals and pop-up windows that are provided by Angular Material.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们探索了Material表单，并学习了如何实现表单字段元素，包括输入、文本区域、单选和复选按钮、滑块和滑动切换。我们还学习了Material提供的不同类型的按钮和指示器，包括徽章和标签。然后，我们了解并实现了由Angular
    Material提供的模态框和弹出窗口。
- en: Finally, we learned about data tables, and how schematics help us to set up
    data tables quickly in our applications.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们了解了数据表，以及原理图如何帮助我们快速在应用程序中设置数据表。
- en: A separate book is required if we want to cover every nook and hook of the Angular
    Material components. We have tried to give you an overview of the different components
    available, and why you might consider Material in your next project when it makes
    sense to do so and suits you/your clients.  It's definitely worth a try!
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要涵盖Angular Material组件的每一个细节，就需要一本单独的书。我们试图为您概述不同的可用组件，以及在下一个项目中为什么您可能考虑使用Material，并在合适的时候适合您/您的客户。这绝对值得一试！
