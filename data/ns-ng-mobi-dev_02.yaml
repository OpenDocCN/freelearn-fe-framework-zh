- en: Feature Modules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能模块
- en: We are going to continue building the foundation of our app by scaffolding the
    core feature modules our app will need, the player and recorder. We will also want
    to keep in mind that the recording features will only be loaded and available when
    a user authenticates. Lastly, we will finish the implementation of our services
    from the `CoreModule` we created in [Chapter 1](part0023.html#LTSU0-289fe2426d594f99a90e4363b2c9c34d), *Get
    Into Shape with @NgModule*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续通过搭建我们的应用的核心功能模块来构建我们应用的基础，即播放器和录音机。我们还将要记住，录音功能只有在用户进行身份验证时才会被加载和可用。最后，我们将完成我们在[第1章](part0023.html#LTSU0-289fe2426d594f99a90e4363b2c9c34d)中创建的`CoreModule`中的服务的实现，*使用@NgModule塑造*。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating feature modules
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建功能模块
- en: Separation of concerns with app features
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用功能的分离
- en: Setting up the `AppModule` to bootstrap efficiently, only loading upfront the
    feature modules we need for our first view
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置`AppModule`以有效地引导，仅在我们第一个视图中需要时加载功能模块
- en: Using the NativeScript `application-settings` module as our key/value store
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用NativeScript的`application-settings`模块作为我们的键/值存储
- en: Providing the ability to control our app's debug logs at one spot
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供在一个地方控制我们应用的调试日志的能力
- en: Creating a new service that will use other services to demonstrate our scalable
    architecture
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的服务，该服务将使用其他服务来演示我们可扩展的架构
- en: Player and recorder modules
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放器和录音机模块
- en: 'Let''s create the shell of our two main feature modules. Take note that we
    also add `NativeScriptModule` to the imports of both of the following modules:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建两个主要功能模块的框架。请注意，我们还将`NativeScriptModule`添加到以下两个模块的导入中：
- en: '`PlayerModule`: It will provide player-specific services and components that
    will be usable whether the user is authenticated or not.'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PlayerModule`：它将提供特定于播放器的服务和组件，无论用户是否经过身份验证都可以使用。'
- en: 'Let''s create `app/modules/player/player.module.ts`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`app/modules/player/player.module.ts`：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`RecorderModule`: This will provide recording-specific services and components
    that will only be loaded if the user is authenticated and enters the record mode
    for the first time.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RecorderModule`：这将提供特定于录音的服务和组件，仅在用户进行身份验证并首次进入录音模式时才会加载。'
- en: 'Let''s create `app/modules/recorder/recorder.module.ts`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`app/modules/recorder/recorder.module.ts`：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A shared model for our data
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们数据的共享模型
- en: 'Before we go about creating our services, let''s create an interface and model
    implementation for the core piece of data our app will be using. The `TrackModel`
    will represent a single track with the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建服务之前，让我们为我们的应用将使用的核心数据创建一个接口和模型实现。`TrackModel`将表示具有以下内容的单个轨道：
- en: '`filepath`: (to the local file)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filepath`：（到本地文件）'
- en: '`name`: (for our view)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：（用于我们的视图）'
- en: '`order`: Position (for the view listing of tracks)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order`：位置（用于轨道的视图列表）'
- en: '`volume`: We want our player to be able to mix different tracks together with
    different volume level settings'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`volume`：我们希望我们的播放器能够以不同的音量级别设置混合不同的轨道。'
- en: '`solo`: Whether we want to hear just this track in our mix'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`solo`：我们是否只想在我们的混音中听到这个轨道'
- en: We will also add a convenient constructor to our model, which will take an object
    to initialize our model with.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将为我们的模型添加一个方便的构造函数，该构造函数将使用对象来初始化我们的模型。
- en: 'Create `app/modules/core/models/track.model.ts`, since it will be shared across
    both our player and recorder:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`app/modules/core/models/track.model.ts`，因为它将在我们的播放器和录音机之间共享：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Scaffolding out the service APIs
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搭建服务API
- en: 'Now, let''s create the API our services will provide to our app. Starting with
    `PlayerService`, we could imagine the following API might be useful to manage
    tracks and control playback. Most of it should be fairly self-explanatory. We
    may refactor this later but this is a great start:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建我们的服务将为我们的应用程序提供的API。从`PlayerService`开始，我们可以想象以下API可能对管理轨道和控制播放很有用。大部分内容应该是相当不言自明的。我们以后可能会重构这个，但这是一个很好的开始：
- en: '`playing: boolean;`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`playing: boolean;`'
- en: '`tracks: Array<ITrack>;`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tracks: Array<ITrack>;`'
- en: '`play(index: number): void;`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`play(index: number): void;`'
- en: '`pause(index: number): void;`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pause(index: number): void;`'
- en: '`addTrack(track: ITrack): void;`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addTrack(track: ITrack): void;`'
- en: '`removeTrack(track: ITrack): void;`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`removeTrack(track: ITrack): void;`'
- en: '`reorderTrack(track: ITrack, newIndex: number): void;`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reorderTrack(track: ITrack, newIndex: number): void;`'
- en: 'Create `app/modules/player/services/player.service.ts` and stub out a few of
    the methods; some of them we could go ahead and implement:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`app/modules/player/services/player.service.ts`并且存根一些方法；其中一些我们可以继续实现：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, let's apply our standard by exporting this service for our module.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们按照标准导出这个服务给我们的模块。
- en: 'Create `app/modules/player/services/index.ts`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`app/modules/player/services/index.ts`：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Lastly, modify our `PlayerModule` to specify the correct providers so our final
    module should look like the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，修改我们的`PlayerModule`以指定正确的提供者，这样我们最终的模块应该如下所示：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, we can design `RecorderService` to provide a simple recording API.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以设计`RecorderService`来提供一个简单的录制API。
- en: 'Create `app/modules/recorder/services/recorder.service.ts`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`app/modules/recorder/services/recorder.service.ts`：
- en: '`record(): void`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`record(): void`'
- en: '`stop(): void`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stop(): void`'
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, apply our standard by exporting this service for our module.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照标准导出这个服务给我们的模块。
- en: 'Create `app/modules/recorder/services/index.ts`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`app/modules/recorder/services/index.ts`：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Lastly, modify our `RecorderModule` to specify the correct providers so our
    final module should look like the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，修改我们的`RecorderModule`以指定正确的提供者，这样我们最终的模块应该如下所示：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With our two primary feature modules scaffolded and ready to go, let's revisit
    the two low-level services we created in Chapter 1, *Get Into Shape with @NgModule*, and
    provide implementations.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的两个主要功能模块已经搭好架子，准备就绪，让我们重新审视我们在第1章“使用@NgModule进入形状”中创建的两个低级服务，并提供实现。
- en: Implementing LogService
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现LogService
- en: Logging is an important ally that you want during the development lifecycle
    of your app as well as in production. It can help you debug as well as gain important
    insights into how your app is used. Having a single pathway to run all logging
    through also provides an opportunity to reroute all the app logs somewhere else
    with the flip of a switch. For example, you could use a third-party debug tracking
    service, such as TrackJS ([https://trackjs.com](https://trackjs.com)), via Segment
    ([https://segment.com](https://segment.com)). You will want to run a lot of important
    aspects of your app through logging and it serves as a great place to have a lot
    of control and flexibility.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录是您在应用程序的开发生命周期以及在生产中想要的重要工具。它可以帮助您调试，以及获得对应用程序使用方式的重要见解。通过一个单一的路径运行所有日志也提供了一个机会，通过翻转开关重新路由所有应用程序日志到其他地方。例如，您可以使用第三方调试跟踪服务，如TrackJS（[https://trackjs.com](https://trackjs.com)），通过Segment（[https://segment.com](https://segment.com)）。您将希望通过日志记录运行应用程序的许多重要方面，它是一个很好的地方，可以有很多控制和灵活性。
- en: 'Let''s open `app/modules/core/services/log.service.ts` and get to work. Let''s
    start by defining a static boolean that will serve as a simple flag we can toggle
    in our `AppModule` to enable/disable. Let''s also add a few helpful methods:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开`app/modules/core/services/log.service.ts`并开始工作。让我们首先定义一个静态布尔值，它将作为一个简单的标志，在我们的`AppModule`中可以切换启用/禁用。让我们还添加一些有用的方法：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`debug`: This will serve as our most commonly used output API for logging.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`debug`：这将作为我们最常用的日志输出API。'
- en: '`error`: When we know a certain condition is an error, this will help identify
    those spots in our log.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`error`：当我们知道某种条件是错误时，这将有助于识别我们日志中的这些位置。'
- en: '`inspect`: There are times when viewing an object can help find a bug or help
    us understand the state of our app at any given moment.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inspect`：有时查看对象可以帮助找到错误或帮助我们了解我们的应用程序在任何给定时刻的状态。'
- en: With our `LogService` implemented, we will now use it throughout our app and
    the rest of this book instead of using the console directly.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们实现的`LogService`，我们现在将在整个应用程序和本书的其余部分中使用它，而不是直接使用控制台。
- en: Implementing DatabaseService
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现DatabaseService
- en: 'Our `DatabaseService` needs to provide several things:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`DatabaseService`需要提供几件事情：
- en: A persistent store to save and retrieve any data our app needs.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个持久存储来保存和检索我们的应用程序需要的任何数据。
- en: It should allow any type of data to be stored; however, we will specifically
    want it to handle JSON serialization.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该允许存储任何类型的数据；然而，我们特别希望它处理JSON序列化。
- en: Static keys of all the data we will want to store.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将要存储的所有数据的静态键。
- en: A static reference to a saved user? Well, yes it could. However, this brings
    up a point that we will address in a moment.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态引用保存的用户？是的，它可以。然而，这引出了一个我们将在一会儿讨论的观点。
- en: 'Regarding the first item, we can use NativeScript''s `application-settings`
    module. Under the hood, this module provides a consistent API to work with two
    native mobile APIs:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 关于第一项，我们可以使用NativeScript的`application-settings`模块。在底层，该模块提供了一个一致的API，用于处理两个本机移动API：
- en: '**iOS**: `NSUserDefaults`: [https://developer.apple.com/reference/foundation/userdefaults](https://developer.apple.com/reference/foundation/userdefaults)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS**：`NSUserDefaults`：[https://developer.apple.com/reference/foundation/userdefaults](https://developer.apple.com/reference/foundation/userdefaults)'
- en: '**Android**: `SharedPreferences`: [https://developer.android.com/reference/android/content/SharedPreferences.html](https://developer.android.com/reference/android/content/SharedPreferences.html)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android**：`SharedPreferences`：[https://developer.android.com/reference/android/content/SharedPreferences.html](https://developer.android.com/reference/android/content/SharedPreferences.html)'
- en: Regarding serializing JSON data, the `application-settings` module provides
    a `setString` and `getString` method, which will allow us to use it in conjunction
    with `JSON.stringify` and `JSON.parse`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 关于序列化JSON数据，`application-settings`模块提供了`setString`和`getString`方法，这将允许我们将其与`JSON.stringify`和`JSON.parse`一起使用。
- en: Using string values throughout your codebase in several different spots to refer
    to the same key that should remain constant can become error prone. Because of
    this, we will keep a typed (for type safety) static hash of valid keys that our
    app will use. We may only know one at this point in time (authenticated user as
    `'current-user'`) but creating this will provide a single spot to scale these
    out over time.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个代码库中使用字符串值来引用应保持不变的相同键的几个不同位置可能会出现错误。因此，我们将保留一个类型化（用于类型安全）的静态哈希，其中包含我们的应用程序将使用的有效键。我们可能目前只知道一个（经过身份验证的用户为`'current-user'`），但创建这个将提供一个单一的地方来随着时间的推移扩展这些。
- en: Four? We will address four in a moment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 四个？我们将在一会儿讨论四个。
- en: 'Open `app/modules/core/services/database.service.ts` and modify it to provide
    a similar API to the web''s `localStorage` API for simplicity:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`app/modules/core/services/database.service.ts`并修改它，以提供类似于Web的`localStorage`
    API的简化API：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This service now provides a way to store an object via `setItem`, which ensures
    the object is properly stored as a string via `JSON.stringify`. It also provides
    a way to retrieve values via `getItem`, which also handles the serialization back
    to an object for us via `JSON.parse`. We also have the `remove` API to simply
    remove values from our persisted store. Lastly, we have a nice static reference
    to all the valid keys that our persistent store will keep track of.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务现在提供了一种通过`setItem`存储对象的方式，该方式通过`JSON.stringify`确保对象被正确存储为字符串。它还提供了一种通过`getItem`检索值的方式，该方式还通过`JSON.parse`处理反序列化为对象。我们还有`remove`
    API来简单地从持久存储中删除值。最后，我们有一个对我们持久存储将跟踪的所有有效键的静态引用。
- en: Now, what about that static reference to the saved user?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，关于保存用户的静态引用呢？
- en: We want to be able to easily access our authenticated user from anywhere in
    the app. We could provide a static reference in our `DatabaseService` for simplicity,
    but our aim here is to have a clear separation of concerns. Since we know we will
    want the ability to show a modal asking the user to register and unlock those
    recording features, a new service to manage this makes sense. Since we have designed
    scalable architecture, we can easily add another service into the mix, so let's
    do that now!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望能够轻松地从应用程序的任何位置访问我们经过身份验证的用户。为简单起见，我们可以在`DatabaseService`中提供一个静态引用，但我们的目标是清晰地分离关注点。由于我们知道我们将希望能够显示一个模态框，要求用户注册并解锁那些录制功能，因此管理这一点的新服务是有意义的。由于我们设计了可扩展的架构，我们可以轻松地将另一个服务添加到其中，所以现在让我们这样做！
- en: Create AuthService to help handle the authenticated state of our app
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建`AuthService`来帮助处理我们应用程序的经过身份验证的状态。
- en: One important consideration for our `AuthService` is to understand that certain
    components in our app may benefit from getting notified when the authenticated
    state changes. This is a perfect use case to utilize RxJS. RxJS is a very powerful
    library that is used to simplify dealing with changing data and events using observables.
    An observable is a data type that you can use not only to listen to events, but
    filter, map, reduce, and run sequences of code against anytime something occurs.
    By using observables, we can simplify our asynchronous development dramatically.
    We will use a specific type of observable called the `BehaviorSubject` to emit
    changes that our components could subscribe to.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的`AuthService`的一个重要考虑是要理解我们应用程序中的某些组件可能会受益于在经过身份验证状态发生变化时得到通知。这是利用RxJS的一个完美用例。RxJS是一个非常强大的库，用于简化使用可观察对象处理变化的数据和事件。可观察对象是一种数据类型，您不仅可以使用它来监听事件，还可以对事件进行过滤、映射、减少，并在发生任何事情时运行代码序列。通过使用可观察对象，我们可以大大简化我们的异步开发。我们将使用一种特定类型的可观察对象，称为`BehaviorSubject`来发出我们的组件可以订阅的更改。
- en: 'Create `app/modules/core/services/auth.service.ts` and add the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`app/modules/core/services/auth.service.ts`并添加以下内容：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We have a few interesting things going on here. We are putting two other services
    we designed to work right away, `LogService` and `DatabaseService`. They are helping
    us check whether a user was saved/authenticated as well as log that result.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些有趣的事情正在发生。我们立即让我们设计的另外两个服务`LogService`和`DatabaseService`开始工作。它们帮助我们检查用户是否已保存/经过身份验证，并记录结果。
- en: We are also calling on a `private _init` method when our service gets constructed
    via Angular's dependency injection system. This allows us to immediately check
    whether an authenticated user exists in our persistent store. Then, we call a
    private reusable method `_notifyState`, which will emit `true` or `false` on our
    `authenticated$` observable. This will provide a nice way for other components
    to easily get notified when the auth state changes by subscribing to this observable.
    We have made `_notifyState` reusable because our login and register methods (to
    be implemented in the future) will be able to use it when the results are returned
    from modals we may display in the UI.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的服务通过Angular的依赖注入系统构建时，我们还调用了一个`private _init`方法。这允许我们立即检查持久存储中是否存在经过身份验证的用户。然后，我们调用一个私有的可重用方法`_notifyState`，它将在我们的`authenticated$`可观察对象上发出`true`或`false`。这将为其他组件提供一个很好的方式，通过订阅这个可观察对象，轻松地得到通知当身份验证状态发生变化时。我们已经使`_notifyState`可重用，因为我们将来要实现的登录和注册方法将能够在UI中显示的模态返回结果时使用它。
- en: We can now easily add `AuthService` to our `PROVIDERS` and we don't need to
    do anything else to ensure it's added to our `CoreModule` because our `PROVIDERS`
    are already added to the `CoreModule`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以很容易地将`AuthService`添加到我们的`PROVIDERS`中，而且我们不需要做任何其他事情来确保它被添加到我们的`CoreModule`中，因为我们的`PROVIDERS`已经被添加到`CoreModule`中。
- en: 'All we need to do is modify `app/modules/core/services/index.ts` and add our
    service:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所需要做的就是修改`app/modules/core/services/index.ts`并添加我们的服务：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: WAIT! There is one important thing we want to do to ensure our AuthService initializes!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 等等！有一件重要的事情我们想要做，以确保我们的AuthService初始化！
- en: Angular's dependency injection system will only instantiate a service that is
    injected somewhere. Although we have all our services specified as providers in
    our `CoreModule`, they will not actually be constructed until they are injected
    somewhere!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Angular的依赖注入系统只会实例化在某处被注入的服务。虽然我们在`CoreModule`中将所有服务指定为提供者，但直到它们在某处被注入之前，它们实际上都不会被构建！
- en: 'Open `app/app.component.ts` and replace its contents with this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`app/app.component.ts`并用以下内容替换它：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We inject our `AuthService` by specifying it as an argument to our component's
    constructor. This will cause Angular to construct our service. All subsequent
    injects throughout our code will all receive the same singleton.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将其指定为组件构造函数的参数来注入我们的`AuthService`。这将导致Angular构造我们的服务。我们代码中的所有后续注入都将接收相同的单例。
- en: Prepare to bootstrap the AppModule
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备引导AppModule
- en: We now have a good setup for our feature modules and it's time to bring them
    all together in our root `AppModule` responsible for bootstrapping our app.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经为我们的特性模块建立了一个良好的设置，现在是时候将它们全部汇集在我们的根`AppModule`中，负责引导我们的应用程序。
- en: Bootstrap only what is needed for your initial view. Lazy load the rest.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 只引导初始视图所需的内容。延迟加载其余部分。
- en: It's important to keep the bootstrap of our app as fast as possible. To achieve
    that, we only want to bootstrap the app with the main features needed for our
    initial view and lazy load the rest when needed. We know we want our low-level
    services to be available and ready to use anywhere in the app, so we will definitely
    want `CoreModule` upfront.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 保持应用程序的引导尽可能快速是很重要的。为了实现这一点，我们只想在初始视图中引导应用程序所需的主要功能，并在需要时进行延迟加载其余部分。我们知道我们希望我们的低级服务在应用程序中随时可用和准备就绪，所以我们肯定会希望`CoreModule`是最前面的。
- en: Our initial view from our sketch is going to start with the player and 2-3 tracks
    on the list, so the user can immediately playback a mix of pre-recorded tracks
    we will ship with the app for demonstration purposes. For this reason, we will
    specify the `PlayerModule` to load upfront when our app bootstraps, since it will
    be a primary feature we want to immediately engage with.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的草图中的初始视图将从播放器和列表中的2-3个轨迹开始，因此用户可以立即回放我们将与应用程序一起提供的预先录制轨迹的混音，以进行演示。因此，我们将指定在我们的应用程序引导时预先加载`PlayerModule`，因为这将是我们希望立即参与的主要功能。
- en: We will set up a routing configuration, which will lazy load our `RecorderModule`
    when the user taps the record button at the top right of our initial view to begin
    a recording session.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设置路由配置，当用户点击初始视图右上角的录制按钮开始录制会话时，将懒加载我们的`RecorderModule`。
- en: 'With this in mind, we can set up our `AppModule` located at `app/app.module.ts`,
    as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，我们可以设置位于`app/app.module.ts`的`AppModule`如下：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout, we have been working hard creating a solid foundation to build our
    app on. We created a `CoreModule` to provide some low-level services, such as
    logging, and a persistent store and designed the module to easily scale in more
    services as needed . Plus, this module is portable and can be dropped into other
    projects with your own company's special sauce intact.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个过程中，我们一直在努力创建一个坚实的基础来构建我们的应用程序。我们创建了一个`CoreModule`来提供一些低级服务，如日志记录和持久存储，并设计了该模块，以便根据需要轻松扩展更多服务。此外，该模块是可移植的，并且可以与您公司自己的特殊功能一起放入其他项目中。
- en: In typical app development, you may want to run your app on the iOS and/or Android
    simulator along the way, during this process to double-check some of your design/architecture
    choices and that would be advisable! We just haven't done that yet, since we have
    an app pre-planned here and want you to stay focused on the choices we are making
    and why.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型的应用程序开发中，您可能希望在整个过程中在iOS和/或Android模拟器上运行您的应用程序，以便再次检查一些设计/架构选择，这是明智的！我们还没有做到这一点，因为我们在这里预先规划了一个应用程序，并希望您专注于我们正在做出的选择以及原因。
- en: We also created the two primary feature modules that our app needs for its core
    competency, `PlayerModule` and `RecorderModule`. The player will be pre-setup
    with 2-3 recorded tracks loaded and ready to play right upon launch, so we will
    be bootstrapping our app with the `PlayerModule` features.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了我们的应用程序核心竞争力所需的两个主要功能模块，`PlayerModule`和`RecorderModule`。播放器将预先设置为加载2-3个已录制的轨迹，并在启动时准备好播放，因此我们将使用`PlayerModule`功能引导我们的应用程序。
- en: We will provide a simple way to allow a user to register an account, which will
    allow them to record their own tracks to throw in the mix. Once they are logged
    in, they will be able to enter the record mode via a route, which will lazily
    load the `RecorderModule`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提供一种简单的方式，允许用户注册一个帐户，这将允许他们记录自己的轨迹以投入混音中。一旦他们登录，他们将能够通过路由进入录制模式，该模式将懒加载`RecorderModule`。
- en: In the next chapter, we will create our first view, configure our routes, and
    finally, get our first glimpse at our app.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将创建我们的第一个视图，配置我们的路由，并最终看到我们的应用程序的第一印象。
