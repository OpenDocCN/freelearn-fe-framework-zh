- en: Chapter 4. Building a Basic Component
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。构建基本组件
- en: At its core, an Angular 2 component is a class that is responsible for exposing
    data to the view and implementing user interaction logic. An Angular 2 component
    can be compared to the controller, scope, and view of Angular 1.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在其核心，Angular 2组件是一个负责向视图公开数据并实现用户交互逻辑的类。Angular 2组件可以与Angular 1的控制器、作用域和视图进行比较。
- en: How does Angular 2 know how to treat our class as a component? We need to attach
    metadata to the class to tell Angular how to treat it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 2如何知道如何处理我们的类作为组件？我们需要向类附加元数据，告诉Angular如何处理它。
- en: The term metadata describes the additional information that we add to our code.
    This information is used by Angular 2 at runtime.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据一词描述了我们添加到代码中的附加信息。这些信息在运行时由Angular 2使用。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The anatomy of an Angular 2 component
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 2组件的解剖
- en: The component selector
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件选择器
- en: Component template
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件模板
- en: Component style
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件样式
- en: View encapsulation (the shadow DOM)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图封装（影子DOM）
- en: Data binding
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据绑定
- en: Anatomy of an Angular 2 component
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 2组件的解剖
- en: In [Chapter 2](part0020.xhtml#aid-J2B81 "Chapter 2. Setting Up an Angular 2
    Development Environment with angular-cli"), *Setting Up an Angular 2 Development
    Environment with angular-cli*, setting the development environment, we generated
    an Angular 2 project from scratch using the `angular-cli` tool and served it to
    the browser. If you haven't done so, refer to [Chapter 2](part0020.xhtml#aid-J2B81
    "Chapter 2. Setting Up an Angular 2 Development Environment with angular-cli"),
    *Setting Up an Angular 2 Development Environment with angular-cli*, and follow
    the steps.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](part0020.xhtml#aid-J2B81 "第2章。使用angular-cli设置Angular 2开发环境"), *使用angular-cli设置Angular
    2开发环境*，设置开发环境时，我们使用`angular-cli`工具从头开始生成了一个Angular 2项目，并将其提供给浏览器。如果您还没有这样做，请参考[第2章](part0020.xhtml#aid-J2B81
    "第2章。使用angular-cli设置Angular 2开发环境"), *使用angular-cli设置Angular 2开发环境*，并按照步骤进行操作。
- en: 'After you are done, it''s time to open the project in our favorite IDE (also
    described in [Chapter 2](part0020.xhtml#aid-J2B81 "Chapter 2. Setting Up an Angular
    2 Development Environment with angular-cli"), *Setting Up an Angular 2 Development
    Environment with angular-cli*), to inspect the code. It should be similar to the
    following screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，是时候在我们喜爱的IDE中打开项目（也在[第2章](part0020.xhtml#aid-J2B81 "第2章。使用angular-cli设置Angular
    2开发环境"), *使用angular-cli设置Angular 2开发环境*中描述），检查代码。它应该类似于以下截图：
- en: '![Building a Basic Component](../Images/image00096.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![构建基本组件](../Images/image00096.jpeg)'
- en: 'When we generate our project using `angular-cli`, a component with our application
    name (that we supplied to the `ng new` command) is created for us. We can find
    it under the `src/app` directory as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`angular-cli`生成项目时，会为我们创建一个带有我们应用程序名称的组件（我们提供给`ng new`命令）。我们可以在`src/app`目录下找到它，如下所示：
- en: '![Building a Basic Component](../Images/image00097.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![构建基本组件](../Images/image00097.jpeg)'
- en: Locate the file named `app.component.ts` and open it in the editing view (the
    editing view can be differ from one IDE to another).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 找到名为`app.component.ts`的文件，并在编辑视图中打开它（编辑视图可能因IDE而异）。
- en: Let's explore the component code line by line, here is the code of `app.component.ts`
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐行探索组件代码，这是`app.component.ts`的代码
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the first line, we are importing the `Component` decorator from the Angular
    core module
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们从Angular核心模块导入`Component`装饰器
- en: Then, we declare the `Component` decorator by assigning the `@` symbol following
    the name of the decorator. Because the decorator is just a function (refer to
    [Chapter 3](part0025.xhtml#aid-NQU21 "Chapter 3. The TypeScript Primer"), *The
    TypeScript Primer* for an explanation), we need to invoke it just like any other
    function using parenthesis.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们通过在装饰器名称后面分配`@`符号来声明`Component`装饰器。因为装饰器只是一个函数（参考[第3章](part0025.xhtml#aid-NQU21
    "第3章。TypeScript入门")，“TypeScript入门”中的解释），我们需要像调用任何其他函数一样使用括号来调用它。
- en: The `Component` decorator accepts an object as a parameter, which defines the
    component metadata. We will explore it in a second.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Component`装饰器接受一个对象作为参数，该对象定义了组件的元数据。我们稍后会探讨它。'
- en: Right after the decorator, we declare the component class, which should hold
    our component logic and currently declares the string named `title`
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在装饰器之后，我们声明组件类，它应该包含我们的组件逻辑，并且当前声明了名为`title`的字符串。
- en: The class needs to be exported so it can be used in other places in the code
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类需要被导出，这样它才能在代码的其他地方使用。
- en: 'As we can see, Angular 2 components must be built from two distinct parts:
    a simple class and a decorator.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，Angular 2组件必须由两个不同的部分构建：一个简单的类和一个装饰器。
- en: Before we dive into this code, let's open the browser and explore the elements
    that have been rendered to the browser.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究这段代码之前，让我们打开浏览器，探索已经呈现到浏览器的元素。
- en: 'To do so, point your browser to `http://localhost:4200/` (I''m using Google
    Chrome), right-click on the title and choose **Inspect** from the pop-up menu:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，将浏览器指向`http://localhost:4200/`（我正在使用Google Chrome），右键单击标题，然后从弹出菜单中选择**检查**：
- en: '![Building a Basic Component](../Images/image00098.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![构建基本组件](../Images/image00098.jpeg)'
- en: 'This will open up the Chrome DevTool where we will explore the DOM:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开Chrome DevTool，我们将在其中探索DOM：
- en: '![Building a Basic Component](../Images/image00099.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![构建基本组件](../Images/image00099.jpeg)'
- en: The `selector` that we defined in our metadata becomes an element with the same
    name, and the `title` that we defined on the component class is rendered as an
    `<h1>` tag inside it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在元数据中定义的`selector`成为了具有相同名称的元素，我们在组件类中定义的`title`作为`<h1>`标签呈现在其中。
- en: How has the `<app-root>` found its way to the DOM? Where does that `<h1>` tag
    come from?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`<app-root>`是如何找到DOM的？`<h1>`标签是从哪里来的？'
- en: Bootstrapping the application
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引导应用程序
- en: Before dealing with how the link is made between components and the DOM, let's
    introduce the concept of module and how it's used to bootstrap the application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理组件和DOM之间的链接之前，让我们介绍模块的概念以及如何使用它来引导应用程序。
- en: 'Under the `src` directory in the project root, locate and open the `main.ts`
    file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目根目录的`src`目录下，找到并打开`main.ts`文件：
- en: '![Bootstrapping the application](../Images/image00100.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![引导应用程序](../Images/image00100.jpeg)'
- en: 'This file is the starting point of our Angular application. It is responsible
    for instantiating the main module of the application and the root component in
    it. To do so, we import a `platformBrowserDynamic` method from the `platform-browser-dynamic`
    module, which is a part of Angular. This method returns an object to bootstrap
    the application. The `bootstrapModule` method of this object is responsible for
    kicking off Angular by rendering the root component of the component tree. It
    requires the main module to be passed as an argument, so we import our module
    class `AppModule` and pass it to `bootstrap`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件是我们Angular应用程序的起点。它负责实例化应用程序的主模块和其中的根组件。为此，我们从`platform-browser-dynamic`模块中导入`platformBrowserDynamic`方法，该方法是Angular的一部分。这个方法返回一个对象来启动应用程序。这个对象的`bootstrapModule`方法负责通过渲染组件树的根组件来启动Angular。它需要传递主模块作为参数，所以我们导入我们的模块类`AppModule`并将其传递给`bootstrap`：
- en: 'The following code is from the `main.ts` file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码来自`main.ts`文件：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The rest of the code doesn't have any effect on bootstrapping Angular with a
    root module. The `enableProdMode` method is a method from Angular core that runs
    the application in production mode. The environment is just a constant that holds
    a Boolean that indicates if we are running in the production environment.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的代码对使用根模块引导Angular没有任何影响。`enableProdMode`方法是Angular核心中的一个方法，它在生产模式下运行应用程序。环境只是一个常量，它保存一个布尔值，指示我们是否在生产环境中运行。
- en: Modules are a convenient way to gather a set of components, directives, services
    and pipes into a single entity that can into other modules. Each Angular application
    contains a single root module, in our case, `AppModule`. It contains the root
    component of the application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是将一组组件、指令、服务和管道聚合到一个单一实体中的便捷方式，可以进入其他模块。每个Angular应用程序都包含一个根模块，在我们的情况下是`AppModule`。它包含应用程序的根组件。
- en: A module is simply a class decorated with `@NgModule` that accepts an object
    as a parameter, which defines the module metadata.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 模块只是一个用`@NgModule`装饰的类，它接受一个对象作为参数，该对象定义了模块的元数据。
- en: Note that we use the dynamic bootstrapping approach leveraging the Just-in-Time
    compiler. This compiles components on the fly, in memory, and in the browser.
    Another alternative, called **Ahead of Time** (**AoT**), is possible in Angular
    2 to precompile the application. In this case, there is no need to ship the Angular
    compiler to the browser and the performance boost can be significant.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用了动态引导的方法，利用了即时编译器。这会在内存中和浏览器中动态编译组件。另一种称为**预编译**（**AoT**）的替代方法在Angular
    2中也是可能的。在这种情况下，无需将Angular编译器发送到浏览器，性能提升可能是显著的。
- en: 'In this case, after having precompiled the application, you need to use the
    `platformBrowserDynamic` method from the `platform-browser-dynamic` module for
    the `main`.`ts` file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，在预编译应用程序之后，您需要在`main.ts`文件中使用`platform-browser-dynamic`模块的`platformBrowserDynamic`方法：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The component selector
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件选择器
- en: As we have seen in the first example of this chapter, the **selector** that
    we defined in the component decorator becomes an element that renders to the DOM.
    Before we explore our selector options, let's understand how Angular renders this
    component.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章的第一个示例中所看到的，我们在组件装饰器中定义的**选择器**成为一个呈现到DOM中的元素。在我们探索选择器选项之前，让我们了解一下Angular如何呈现这个组件。
- en: As we discussed in [Chapter 1](part0014.xhtml#aid-DB7S1 "Chapter 1. Angular
    2 Component Architecture"), *Angular 2 Component Architecture*, an Angular 2 application
    can be described as a tree of components. Like any other tree structure, there
    is only one root node. Currently in our project we got only one component, which
    is used as the tree node.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第1章](part0014.xhtml#aid-DB7S1 "Chapter 1. Angular 2 Component Architecture")中讨论的*Angular
    2组件架构*，Angular 2应用程序可以被描述为一个组件树。就像任何其他树结构一样，只有一个根节点。目前在我们的项目中，我们只有一个组件，它被用作树节点。
- en: 'With this information, let''s see how Angular instantiates our root component
    and renders it:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些信息，让我们看看Angular如何实例化我们的根组件并将其呈现出来：
- en: 'Under the `src/app` directory in the project root, locate and open the `app.module.ts`
    file. This file contains the definition of the root module of the application:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目根目录的`src/app`目录下，找到并打开`app.module.ts`文件。这个文件包含了应用程序的根模块的定义：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `app.module.ts` is responsible for instantiating the component class. When
    this happens, Angular searches for the selector that we defined in the component
    decorator in the `index.html` file. The only component that we need to place inside
    our `index.html` is our root component defined in the `bootstrap` attribute of
    the root module in the `app.module.ts`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.module.ts` 负责实例化组件类。当这发生时，Angular会在`index.html`文件中搜索我们在组件装饰器中定义的选择器。我们需要放置在`index.html`中的唯一组件是在`app.module.ts`中的根模块的`bootstrap`属性中定义的根组件。'
- en: Note that this component needs to be specified in the `declarations` attribute
    listing all usable components for the module.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此组件需要在`declarations`属性中指定，列出模块中所有可用的组件。
- en: 'Open `index.html` which is located next to `main.ts` and inspect the code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`index.html`，它位于`main.ts`旁边，检查代码：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first thing we see is that we used our selector as element in our `html`
    file. This is the default behavior of Angular.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的第一件事是，在我们的`html`文件中，我们将选择器用作元素。这是Angular的默认行为。
- en: The other code that you find in `index.html` is related to the build system
    that `angular-cli` uses, which is out of the scope of this book.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您在`index.html`中找到的其他代码与`angular-cli`使用的构建系统相关，这超出了本书的范围。
- en: All you need to know is that when this HTML is loaded into the server, all the
    required dependencies are loaded for Angular and you need to run the code in `main.ts`
    to kickstart the framework.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要知道的是，当这个HTML加载到服务器时，Angular会加载所有必需的依赖项，你需要运行`main.ts`中的代码来启动框架。
- en: Selector options
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择器选项
- en: 'When we build components, we are creating new html elements. That''s the reason
    that, by default, our selector name is used as an element in the HTML. But we
    have other options as well for building components. Let''s explore them:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们构建组件时，我们正在创建新的HTML元素。这就是为什么默认情况下我们的选择器名称在HTML中用作元素的原因。但是，我们还有其他选项可以用于构建组件。让我们来探索一下：
- en: 'Select by CSS class name:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按CSS类名选择：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Use in markup:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在标记中使用：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Select by attribute name:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按属性名选择：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Use in markup:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在标记中使用：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Select by attribute name and value:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按属性名和值选择：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Use in markup:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在标记中使用：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Select only if the element does not match the selector:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅在元素不匹配选择器时选择：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Use in markup:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在标记中使用：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Select if one of the selectors matches:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果其中一个选择器匹配，则选择：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Use in markup:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在标记中使用：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Most of the time, leaving the default—which is the component selector—is exactly
    what we want when building common components. In the later chapters, we will see
    other usages as well.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，保留默认值——即组件选择器——正是我们在构建常见组件时想要的。在后面的章节中，我们还将看到其他用法。
- en: For now, we will leave the selector as default.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将保留选择器为默认值。
- en: The component template
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件模板
- en: 'The template is the heart of the component in Angular 2\. Without a template
    there is nothing to render to the DOM. There are two ways to attach a template
    to the component:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 模板是Angular 2中组件的核心。没有模板，就没有东西可以渲染到DOM中。有两种方法可以将模板附加到组件上：
- en: Providing a URL to an external `html` file
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供外部`html`文件的URL
- en: Define the template inline
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联定义模板
- en: 'The `app-root` that is created by the `angular-cli` includes an external template.
    It is defined with the `templateUrl` property:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 由`angular-cli`创建的`app-root`包含外部模板。它是用`templateUrl`属性定义的：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can find the template next to `app.component.ts` as an HTML file with the
    same name `app.component.html`. Let''s open it to inspect the code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`app.component.ts`旁边找到模板，它是一个与`app.component.html`同名的HTML文件。让我们打开它来检查代码：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now we know where the `<h1>` came from. As you can guess, the double curly braces
    render the title from the component class.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道`<h1>`是从哪里来的。你可以猜到，双大括号会从组件类中渲染标题。
- en: If we want to declare our templates inline, we should use the template property
    instead. Luckily, in ES6, we are introduce with a way to create multiline strings
    easily. This feature is called **template strings** and it's declared with the
    back tick ([PRE17]
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要内联声明我们的模板，我们应该使用模板属性。幸运的是，在ES6中，我们有一种简单创建多行字符串的方法。这个功能称为**模板字符串**，并且用反引号（[PRE17]
- en: '[app.component.ts]'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[app.component.ts]'
- en: '@Component({'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '@Component({'
- en: 'selector: ''app-root'','
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 'selector: ''app-root'','
- en: 'template: `'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 'template: `'
- en: <h1>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>
- en: '{{title}}'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '{{title}}'
- en: </h1>
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: </h1>
- en: '`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`'
- en: '})'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[app.component.ts]'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[app.component.ts]'
- en: '@Component({'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '@Component({'
- en: 'selector: ''app-root'','
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 'selector: ''app-root'','
- en: 'template: `'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 'template: `'
- en: <h1>
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>
- en: '{{title}}'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '{{title}}'
- en: </h1>
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: </h1>
- en: '`,'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`,'
- en: 'styleUrls: [''./app.component.css'']'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 'styleUrls: [''./app.component.css'']'
- en: '})'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[app.component.ts]'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[app.component.ts]'
- en: '@Component({'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '@Component({'
- en: 'selector: ''app-root'','
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 'selector: ''app-root'','
- en: 'template: `'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 'template: `'
- en: <h1>
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>
- en: '{{title}}'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '{{title}}'
- en: </h1>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: </h1>
- en: '`,'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`,'
- en: 'styles: [`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 'styles: [`'
- en: 'h1 { color: darkblue }'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 'h1 { color: darkblue }'
- en: '`]'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`]'
- en: '})'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE20]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: <!doctype html>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: <!doctype html>
- en: <html lang="en">
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: <html lang="en">
- en: <head>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: <head>
- en: <meta charset="UTF-8">
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <meta charset="UTF-8">
- en: <title>Document</title>
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: <title>Document</title>
- en: </head>
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: </head>
- en: <body>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <body>
- en: <select>
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: <select>
- en: <option>ONE</option>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <option>ONE</option>
- en: <option>TWO</option>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <option>TWO</option>
- en: <option>THREE</option>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <option>THREE</option>
- en: </select>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: </select>
- en: </body>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: </body>
- en: </html>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: </html>
- en: '[PRE21]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[app.component.ts]'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[app.component.ts]'
- en: '@Component({'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '@Component({'
- en: 'selector: ''app-root'','
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 'selector: ''app-root'','
- en: 'encapsulation: ViewEncapsulation.None,'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 'encapsulation: ViewEncapsulation.None,'
- en: 'template: `'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 'template: `'
- en: <h1>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>
- en: '{{title}}'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '{{title}}'
- en: </h1>
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: </h1>
- en: '`,'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`,'
- en: 'styles: [`'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 'styles: [`'
- en: 'h1 { color: darkblue }'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 'h1 { color: darkblue }'
- en: '`]'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`]'
- en: '})'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE22]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[app.component.ts]'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[app.component.ts]'
- en: import { Component, ViewEncapsulation } from '@angular/core';
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: import { Component, ViewEncapsulation } from '@angular/core';
- en: '@Component({'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '@Component({'
- en: 'selector: ''app-root'','
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 'selector: ''app-root'','
- en: 'encapsulation: ViewEncapsulation.None,'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 封装：ViewEncapsulation.None，
- en: 'template: `'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 'template: `'
- en: <h1>
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>
- en: '{{title}}'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '{{title}}'
- en: </h1>
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: </h1>
- en: '`,'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`,'
- en: 'styles: [`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 'styles: [`'
- en: 'h1 { color: darkblue }'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 'h1 { color: darkblue }'
- en: '`]'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`]'
- en: '})'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: export class AppComponent {
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: export class AppComponent {
- en: title = 'app works!';
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: title = 'app works!';
- en: '}'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: It's not hard to spot the double curly braces in the template. This is a part
    of Angular's template syntax, which is responsible for one way binding of data
    from the component class. In this case, we are binding the title property (which
    is a string) to be rendered between the `<h1>` tag.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易在模板中发现双大括号。这是Angular模板语法的一部分，负责从组件类进行单向数据绑定。在这种情况下，我们将title属性（字符串）绑定到`<h1>`标签之间呈现。
- en: Later in this book, we will explore some more binding options.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的后面，我们将探索更多的绑定选项。
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In Angular 2, a component is a class with a decorator that adds important metadata
    to it. The component decorator defines how we can use it, and what it can do.
    The selector and the template are the minimum required fields when calling the
    decorator (Angular will throw an error if one of them is missing).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular 2中，组件是一个带有装饰器的类，该装饰器为其添加重要的元数据。组件装饰器定义了我们如何使用它以及它可以做什么。当调用装饰器时，选择器和模板是最低要求的字段（如果其中一个缺少，Angular将抛出错误）。
- en: If we defined the view encapsulation as native, Angular will create a shadow
    DOM for our component, which protects the embedded styles from being affected
    by external CSS on the page.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将视图封装定义为本地，Angular将为我们的组件创建一个影子DOM，这样可以保护嵌入样式不受页面上外部CSS的影响。
- en: In the next chapter, we will continue to develop our component and make it dynamic.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续开发我们的组件并使其动态化。
