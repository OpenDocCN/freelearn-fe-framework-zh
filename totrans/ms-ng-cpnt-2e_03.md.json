["```js\nimport {from} from 'rxjs';\nimport {map, filter} from 'rxjs/operators';\n\nfrom([1, 2, 3, 4])\n  .pipe(\n    map((num) => num * num),\n    filter((num) => num < 10)\n  )\n  .subscribe((num) => console.log(num));\n\n// This script is finishing with the following output on the console:\n// 1\n// 4\n// 9\n```", "```js\nimport {fromEvent} from 'rxjs';\nimport {throttleTime, map} from 'rxjs/operators';\n\nfromEvent(window, 'mousemove')\n  .pipe(\n    throttleTime(200),\n    map((event: MouseEvent) => `Move(${event.screenX}, ${event.screenY})`)\n  )\n  .subscribe((move) => console.log(move));\n```", "```js\nnpm install --save angular-in-memory-web-api@0.5.1\n```", "```js\nimport {InMemoryDbService} from 'angular-in-memory-web-api';\nimport {Task} from './model';\n\nexport class Database implements InMemoryDbService {\n  createDb() {\n    const tasks: Task[] = [\n      {id: 1, title: 'Task 1', done: false},\n      {id: 2, title: 'Task 2', done: false},\n      {id: 3, title: 'Task 3', done: true},\n      {id: 4, title: 'Task 4', done: false}\n    ];\n    return {tasks};\n  }\n}\n```", "```js\n...\nimport {HttpClientModule} from '@angular/common/http';\nimport {HttpClientInMemoryWebApiModule} from 'angular-in-memory-web-api';\n\nimport {Database} from './database';\n...\n\n@NgModule({\n  ...\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n HttpClientInMemoryWebApiModule.forRoot(Database, {\n delay: 0\n })\n  ],\n  ...\n})\nexport class AppModule {\n}\n```", "```js\nthis.http.get<Task[]>('/api/tasks')\n  .subscribe((tasks) => console.log(tasks));\n```", "```js\nconst subject = new BehaviorSubject<number>(0);\nsubject.asObservable().subscribe(num => console.log(`Item: ${num}`));\n// console output -> Item: 0\n\nsubject.next(1);\n// console output -> Item: 1\n\nsubject.next(2);\n// console output -> Item: 2\n\nsubject.asObservable().subscribe(num => console.log(`Second subscription: ${num}`));\n// console output -> Second subscription: 2\n```", "```js\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {BehaviorSubject} from 'rxjs';\nimport {Task} from '../model';\n\n@Injectable()\nexport class TaskService {\n  private tasks = new BehaviorSubject<Task[]>([]);\n\n  constructor(private http: HttpClient) {\n    this.loadTasks();\n  }\n\n  private loadTasks() {\n    this.http.get<Task[]>('/api/tasks')\n      .subscribe((tasks) => this.tasks.next(tasks));\n  }\n\n  getTasks() {\n    return this.tasks.asObservable();\n  }\n\n  addTask(task: Task) {\n    return this.http\n      .post<Task>('/api/tasks', task)\n      .subscribe(() => this.loadTasks());\n  }\n\n  updateTask(task: Task) {\n    return this.http\n      .post(`/api/tasks/${task.id}`, task)\n      .subscribe(() => this.loadTasks());\n  }\n}\n```", "```js\nimport {Component, ViewEncapsulation} from '@angular/core';\nimport {TaskService} from '../../tasks/task.service';\nimport {Task, TaskListFilterType} from '../../model';\nimport {Observable, combineLatest, BehaviorSubject} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n@Component({\n  selector: 'mac-task-list',\n  templateUrl: './task-list.component.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class TaskListComponent {\n  tasks: Observable<Task[]>;\n  filteredTasks: Observable<Task[]>;\n  taskFilterTypes: TaskListFilterType[] = ['all', 'open', 'done'];\n  activeTaskFilterType = new BehaviorSubject<TaskListFilterType>('all');\n\n  constructor(private taskService: TaskService) {\n    this.tasks = taskService.getTasks();\n\n    this.filteredTasks = combineLatest(this.tasks, this.activeTaskFilterType)\n .pipe(\n map(([tasks, activeTaskFilterType]) => {\n return tasks.filter((task: Task) => {\n if (activeTaskFilterType === 'all') {\n return true;\n } else if (activeTaskFilterType === 'open') {\n return !task.done;\n } else {\n return task.done;\n }\n });\n })\n );\n  }\n\n  activateFilterType(type: TaskListFilterType) {\n    this.activeTaskFilterType.next(type);\n  }\n\n  addTask(title: string) {\n    const task: Task = {\n      title, done: false\n    };\n    this.taskService.addTask(task);\n    // Two lines got removed from there\n  }\n\n  updateTask(task: Task) {\n    this.taskService.updateTask(task);\n // Two lines got removed from there\n  }\n}\n```", "```js\nimport {OnDestroy} from '@angular/core';\nimport {Observable, Subscription, fromEvent} from 'rxjs';\n\n...\nexport class MousePositionComponent implements OnDestroy {\n  mouseObservable: Observable<MouseEvent> = fromEvent(window, 'mousemove')\n    .map(e => `${e.screenX}, ${e.screenY}`);\n  mousePosition: string;\n  mouseSubscription: Subscription = this.mouseObservable\n    .subscribe((position: string) => this.mousePosition = position);\n\n  ngOnDestroy() {\n    this.mouseSubscription.unsubscribe();\n  }\n}\n```", "```js\nimport {Observable, fromEvent} from 'rxjs';\n\n...\nexport class MousePositionComponent implements OnDestroy {\n  mouseObservable: Observable<MouseEvent> = fromEvent(window, 'mousemove')\n    .map(e => `${e.screenX}, ${e.screenY}`);\n}\n```", "```js\n<strong>Mouse position:</strong>\n<p>{{mouseObservable | async}}</p>\n```", "```js\n<mac-toggle [buttonList]=\"taskFilterTypes\"\n            [activeButton]=\"activeTaskFilterType | async\"\n            (outActivate)=\"activateFilterType($event)\">\n</mac-toggle>\n<mac-enter-task (outEnterTask)=\"addTask($event)\"></mac-enter-task>\n<div class=\"tasks\">\n  <mac-task *ngFor=\"let task of filteredTasks | async\"\n            [task]=\"task\"\n            (outUpdateTask)=\"updateTask($event)\"></mac-task>\n</div>\n```", "```js\nconst list = [1, 2, 3]; \nconsole.log(list === list.reverse()); // true \n```", "```js\nconst list = [1, 2, 3]; \nconsole.log(list === list.slice().reverse()); // false \n```", "```js\nclass Sum { \n  constructor(data) { \n    this.data = data; \n    this.data.sum = data.a + data.b; \n  } \n  getSum() { \n    return this.data.sum; \n  } \n} \n\nconst data = {a: 5, b: 8}; \nvar sum = new Sum(data); \nconsole.log(sum.getSum()); // 13 \nconsole.log(data.sum); // 13 \n```", "```js\nlet originalString = 'Hello there!'; \nlet modifiedString = originalString.replace(/e/g, 3); \nconsole.log(originalString); // Hello there! \nconsole.log(modifiedString); // H3llo th3r3! \n```", "```js\nexport interface Person {\n  readonly firstName: string;\n  readonly lastName: string;\n}\n\nlet person: Person = {\n  firstName: 'Peter',\n  lastName: 'Griffin'\n};\n\n// This will result in a compile time error\nperson.firstName = 'Mag';\n```", "```js\nexport interface Person {\n    readonly firstName: string;\n    readonly lastName: string;\n}\n\nlet person: Person = {\n    firstName: 'Peter',\n    lastName: 'Griffin'\n};\n\nperson = {\n  ...person,\n  firstName: 'Mag'\n};\n```", "```js\nperson = Object.assign({}, person, {\n  firstName: 'Meg'\n});\n```", "```js\nimport {Component, ChangeDetectionStrategy, EventEmitter, Input, Output, ViewEncapsulation} from '@angular/core';\nimport {Task, TaskListFilterType} from '../../model';\n\n@Component({\n  selector: 'mac-task-list',\n  templateUrl: './task-list.component.html',\n  encapsulation: ViewEncapsulation.None,\n changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskListComponent {\n  @Input() taskFilterTypes: TaskListFilterType[];\n @Input() activeTaskFilterType: TaskListFilterType;\n @Input() tasks: Task[];\n @Output() outAddTask = new EventEmitter<string>();\n @Output() outActivateFilterType = new EventEmitter<TaskListFilterType>();\n @Output() outUpdateTask = new EventEmitter<Task>();\n\n  addTask(title: string) {\n    this.outAddTask.emit(title);\n  }\n\n  activateFilterType(filterType: TaskListFilterType) {\n    this.outActivateFilterType.emit(filterType);\n  }\n\n  updateTask(task: Task) {\n    this.outUpdateTask.emit(task);\n  }\n}\n```", "```js\n...\n<div class=\"tasks\">\n  <mac-task *ngFor=\"let task of tasks\"\n            [task]=\"task\"\n            (outUpdateTask)=\"updateTask($event)\"></mac-task>\n</div>\n```", "```js\nng generate component --spec false -ve none -cd onpush container/task-list-container\n```", "```js\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {TaskService} from '../../tasks/task.service';\nimport {Task, TaskListFilterType} from '../../model';\nimport {Observable, combineLatest, BehaviorSubject} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n@Component({\n  selector: 'mac-task-list-container',\n  templateUrl: './task-list-container.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskListContainerComponent {\n  tasks: Observable<Task[]>;\n  filteredTasks: Observable<Task[]>;\n  taskFilterTypes: TaskListFilterType[] = ['all', 'open', 'done'];\n  activeTaskFilterType = new BehaviorSubject<TaskListFilterType>('all');\n\n  constructor(private taskService: TaskService) {\n    this.tasks = this.taskService.getTasks();\n\n    this.filteredTasks = combineLatest(this.tasks, this.activeTaskFilterType)\n      .pipe(\n        map(([tasks, activeTaskFilterType]) => {\n          return tasks.filter((task: Task) => {\n            if (activeTaskFilterType === 'all') {\n              return true;\n            } else if (activeTaskFilterType === 'open') {\n              return !task.done;\n            } else {\n              return task.done;\n            }\n          });\n        })\n      );\n  }\n\n  activateFilterType(type: TaskListFilterType) {\n    this.activeTaskFilterType.next(type);\n  }\n\n  addTask(title: string) {\n    const task: Task = {\n      title, done: false\n    };\n    this.taskService.addTask(task);\n  }\n\n  updateTask(task: Task) {\n    this.taskService.updateTask(task);\n  }\n}\n```", "```js\n<mac-task-list\n  [tasks]=\"filteredTasks | async\"\n  [taskFilterTypes]=\"taskFilterTypes\"\n  [activeTaskFilterType]=\"activeTaskFilterType | async\"\n  (outUpdateTask)=\"updateTask($event)\"\n  (outActivateFilterType)=\"activateFilterType($event)\"\n  (outAddTask)=\"addTask($event)\">\n</mac-task-list>\n```"]