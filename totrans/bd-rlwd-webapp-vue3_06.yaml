- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a Fitness Tracker with Data Visualization
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until this point, we’ve relied on stateless apps or storing the state on
    the users’ browser. In this chapter, we’ll cover using a database to store data
    in a centralized place, and we’ll learn how to modify and read from the data source.
    We’ll use the opportunity to incorporate some data visualizations as well, using
    a third-party library.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: While we’re using a database and have to set up tables, this is by no means
    a guide to production-ready database configuration and management. I suggest brushing
    up on those skills in different ways. It does serve as a valuable prototype to
    familiarize yourself with patterns concerning database handling.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Again, we’ll build upon the knowledge we’ve acquired so far, and we’ll incorporate
    composables, a store, and a component library to build our product.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Creating dashboards and reports
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving data with Supabase
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing data using Supabase
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding various visualizations using `vue-chartjs`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There’s some overlap in requirements from the previous chapter. We’ll make use
    of **Vuetify** ([https://vuetifyjs.com/en/](https://vuetifyjs.com/en/)) and **Pinia**
    ([https://pinia.vuejs.org/](https://pinia.vuejs.org/)). For storing data, we’ll
    make use of **Supabase** ([https://supabase.com/](https://supabase.com/)), which
    is an open source database provider with built-in authentication. For the database,
    I’ve prepared a script to create databases and another one to add example data.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the GitHub link: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/tree/main/06.fitness](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/tree/main/06.fitness).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: We’ll cover those steps during the chapter. Lastly, for data visualization,
    we’ll install and use `vue-chartjs` ([https://vue-chartjs.org/](https://vue-chartjs.org/)),
    which is a Vue-compatible wrapper for the `chart.js` ([https://www.chartjs.org/](https://www.chartjs.org/))
    library.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Creating a client
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to start our project, we’ll use the Vuetify installer, just as we
    did in the last chapter. Here’s the command for that:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Choose `vue-fitness-tracker` as the project name and select these options,
    as shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Setting up the Vuetify project](img/B19563_06_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Setting up the Vuetify project
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: With our project initialized, we’ll create and configure a database to store
    our data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the database
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After registering for a free account on `fitness-tracker` as the name and choose
    a strong database password. For the region, pick one that is geographically close
    to you for better latency. We’ll stick with the free plan!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next page (*Figure 6**.2*), you will see the project API keys:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Overview of the project API keys](img/B19563_06_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Overview of the project API keys
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll store them in our `.env` file in the root of our project:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把它们存储在我们的项目根目录下的 `.env` 文件中：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that sharing keys like this via a client-side app always exposes them to
    the public. Luckily, Supabase has its own means of ensuring authentication while
    interacting with the database.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，通过客户端应用以这种方式共享密钥总是会将它们暴露给公众。幸运的是，Supabase 有自己的方法来确保在交互数据库时进行身份验证。
- en: 'I’ve created a script that sets up the database with the table structure for
    our app. Via the dashboard and SQL editor, you can add and execute the query from
    the `example-structure.sql` file in the example repository, as shown in *Figure
    6**.3*:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个脚本，用于设置数据库并包含我们应用的表结构。通过仪表板和 SQL 编辑器，你可以从示例仓库中的 `example-structure.sql`
    文件添加和执行查询，如图 *图 6.3* 所示：
- en: '![Figure 6.3 – Once the query is successfully executed, you should see four
    tables in the table editor overview](img/B19563_06_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – 查询成功执行后，你应该在表编辑器概览中看到四个表格](img/B19563_06_03.jpg)'
- en: Figure 6.3 – Once the query is successfully executed, you should see four tables
    in the table editor overview
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 查询成功执行后，你应该在表编辑器概览中看到四个表格
- en: 'Once that’s executed, you can set up some data using the `example-exercises.sql`
    script, as seen in *Figure 6**.4*:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 执行完毕后，你可以使用 `example-exercises.sql` 脚本设置一些数据，如图 *图 6.4* 所示：
- en: '![Figure 6.4 – Inserting example exercises into the exercise table](img/B19563_06_04.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – 将示例练习插入到练习表中](img/B19563_06_04.jpg)'
- en: Figure 6.4 – Inserting example exercises into the exercise table
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 将示例练习插入到练习表中
- en: 'To streamline interactions with the database, we’ll use the Supabase JavaScript
    client by installing the dependency:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化与数据库的交互，我们将使用 Supabase JavaScript 客户端，通过安装依赖项：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s turn that package into a composable that handles our database connection
    within the app. In `src/composables`, we’ll create a `supabase.ts` file and add
    the following contents:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个包转换成一个可组合的组件，在应用中处理数据库连接。在 `src/composables` 中，我们将创建一个 `supabase.ts` 文件并添加以下内容：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'One final change I made was cleaning up the `layouts` folder with the boilerplate
    components. I deleted all files except `Default.vue` and updated its contents
    to match this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我做的最后一个改动是清理 `layouts` 文件夹中的样板组件。我删除了所有文件，除了 `Default.vue`，并更新了其内容以匹配以下内容：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That’s our baseline to start building our app. Next, we’re going to make sure
    that the app shows individual results, using the built-in tooling that Supabase
    provides.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的起点，开始构建我们的应用。接下来，我们将确保应用显示个人结果，使用 Supabase 提供的内置工具。
- en: Handling the user
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理用户
- en: 'The goal of the app is to allow for individual metrics to be tracked and viewed,
    so for that purpose, we need to make sure that we can identify our users. Supabase
    supports authentication out of the box, and we’re going to use a very basic method:
    a **magic link**.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的目标是允许跟踪和查看个人指标，因此为此目的，我们需要确保我们可以识别我们的用户。Supabase 默认支持身份验证，我们将使用一个非常基本的方法：一个**魔法链接**。
- en: A magic link allows you to sign up and sign in with just a valid email address.
    On logging in, the service sends an email containing a unique identifier, and
    when clicked, the user is verified to that email address. In our case, the backend
    handles verifying whether it’s a new user or an existing one, which is perfect
    for our use case.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 魔法链接允许你仅使用有效的电子邮件地址进行注册和登录。登录时，服务会发送包含唯一标识符的电子邮件，点击后，用户将被验证到该电子邮件地址。在我们的情况下，后端处理验证它是一个新用户还是一个现有用户，这对于我们的用例来说非常完美。
- en: Since we can identify users, we need to connect our app to retrieve information
    that Supabase provides. We can also introduce authentication to make sure that
    users have access to parts that they want to use or visit.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们可以识别用户，我们需要将我们的应用连接到 Supabase 以获取它提供的信息。我们还可以引入身份验证，以确保用户可以访问他们想要使用或访问的部分。
- en: User store
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户存储
- en: We will want to have access and the ability to update the status of the user
    at all times, so we’ll set up a user store in Pinia that will keep track of the
    current state and provide actions on updating the state and logging in and out.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将希望始终能够访问和更新用户的状态，因此我们将在 Pinia 中设置一个用户存储，以跟踪当前状态并提供更新状态、登录和登出的操作。
- en: 'We’ll go over the contents of the store, after creating a `user.ts` file in
    the `src/store` folder with the following contents: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.1-user.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.1-user.ts).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: In the session (*line 11*), we’ll store the authentication state of the user.
    It can either be `null` for not logged in or the state can hold an object (as
    defined in the `UserSession` interface), which gets populated by the Supabase
    authorization service.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: With the `login` (*lines 13-20*) and `logout` (*lines 22-30*) methods, we are
    calling the Supabase authentication services and executing a provided callback
    function. We will see these in action shortly!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: To store the user, we have the `insertProfile` function (*lines 32-44*), which
    upserts any authenticated user to our database for future reference.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Storing personal data may be subject to local law and governance. Be very diligent
    and transparent in what you store, why you’re storing it, and how you remove personal
    data.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '`setUserSession` (*lines 47-49*) simply passes the data to the state for further
    reference. Lastly, `userIsLoggedIn` (*lines 51-58*) checks whether the current
    session data is still valid, and if not, it returns `false`. We can use this for
    quick assessments on displaying user interface elements.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Having the store in place, we can incorporate profiles in our app with some
    sensible safety measures.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating users
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s create a form where the user can provide an email address that will result
    in a `FormLogin.vue` in the `components` folder: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.2-FormLogin.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.2-FormLogin.vue).'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we’re using our user store to dispatch a `login` action (*lines
    11-14*, *25*) with the email address provided by the user. The template is built
    with Vuetify components. It holds a `form` and a `dialog` component that is triggered
    on submission, to inform the user to look at their email.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'The OTP login sends a login link to the provided email address, which means
    the user will enter the app from an external link. We need to make sure to try
    to validate the user’s session when the app gets loaded. For that, we’ll update
    the `App.vue` file in the root:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this script, we’ll validate the user session via Supabase. On receiving data,
    we store it on the user store and use the store to upsert a profile in our database.
    We also keep track of the state change, in order to handle updated tokens or invalidation.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Protected routes
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having access to the state of the user, we can use the `beforeEnter` lifecycle
    hook to validate if a user is allowed access to a route. The `beforeEnter` method
    acts as middleware and executes a function whereby you can decide how to handle
    the route change.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll first create a view for the login state, called `Login.vue`, in the `views`
    folder:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the router file, we’ll add a function called `loginGuard` (*lines 7-14*)
    to check whether the user is logged in, and we’ll call that function on the `beforeEnter`
    method for protected routes (*line 37*). If the user session is present, you will
    be allowed to follow the route. Otherwise, you will be redirected to the newly
    added `loginRoute` function (*lines 12*, *39-44*): [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.3-router-index.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.3-router-index.ts).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the development app, on the first visit, you will be presented with
    a login form since you are not yet authenticated, as shown in *Figure 6**.5*:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – The user is not logged in and is redirected to the /login route](img/B19563_06_05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – The user is not logged in and is redirected to the /login route
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'After providing your email address, a fullscreen popup appears to direct our
    user to the next steps. If you open your email client, you should receive an email
    containing a magic link shortly:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Default email containing a magic link](img/B19563_06_06.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Default email containing a magic link
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the magic link opens a new browser window and should now direct
    you to the home page, which is only accessible for logged-in users:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – The home page is only visible to logged-in users](img/B19563_06_07.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – The home page is only visible to logged-in users
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: This means if you’re seeing the Vuetify default home page, you are a logged-in
    user! You have no way of logging out for now, so let’s work on that to complete
    the authentication flow.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Logging out
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete the user flow, we’ll add a feature for the user to log out as well.
    For that, we’ll add a menu with a button that is attached to the user logout method
    on the store.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create an `AppMenu.vue` file in the `src` folder and add **Log out**
    and **Log in** buttons. We’ll expand upon the menu later as well: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.4-AppMenu.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.4-AppMenu.vue).'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'In the menu, depending on the user state (*lines 5-6*, *10*, *18*), we’ll show
    a button to either log in or log out. With some small modifications to our `App.vue`
    file, we can quickly include the `AppMenu.vue` file for our app (*lines 6*, *21-26*):
    [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.5-AppMenu.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.5-AppMenu.vue).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: We have now completed the user flow in our app. We can have new users logging
    in and existing users logging in, and logged-in users can sign out of the app.
    As you can see, we’ll let Supabase handle the logic, and we’re just consuming
    the data from Supabase.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: This is a common pattern in frontend development, to leave the authentication
    to the server and never the client. For our upcoming features, we don’t have to
    worry about who has access to what data since we’ve configured Supabase (with
    **Row Level Security** (**RLS**) policies ([https://supabase.com/docs/guides/auth#row-level-security](https://supabase.com/docs/guides/auth#row-level-security)))
    and the authentication methods to take care of the data for us.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a way for users to sign up and log in, we can start adding
    features for adding personal data to the app.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: App state
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make it easier for us to control the state of the app, we’ll add a new store
    to track the current state of the user interface.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'Vuetify has created a placeholder app store for us in the `store/app.ts` file,
    so we’ll add some features to handle page transitions (*lines 28*, *30-35*), toggling
    a menu (*lines 18*, *20-26*) and controlling a dialog (*lines 37-55*) for app-level
    notifications: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.6-app.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.6-app.ts).'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Having access to these kinds of user interface utilities in a centralized place
    eliminates the need to repeat certain patterns in our app, such as showing or
    hiding a dialog. It means that those utilities are part of the app and are therefore
    available throughout the whole app.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Centralized dialog
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s update the `FormLogin.vue` file to make use of the store options on the
    app level. We can clean up the existing dialog options and replace them with calling
    store methods: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.7-FormLogin.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.7-FormLogin.vue).'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, by using the generic app store (*lines 5*, *8*), we can now
    also easily add additional dialogs; for instance, when an email address is missing
    (*lines 13-17*) or when the OTP has been sent (*lines 18-24*). The only thing
    we need to do is add a central place to show the dialog, and we’ll open and modify
    `App.vue` for that: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.8-App.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.8-App.vue).'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，通过使用通用的应用存储（*第5行*，*第8行*），我们现在也可以轻松地添加额外的对话框；例如，当缺少电子邮件地址（*第13-17行*）或OTP已发送（*第18-24行*）时。我们唯一需要做的是添加一个中央位置来显示对话框，我们将为此打开并修改`App.vue`：[https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.8-App.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.8-App.vue)。
- en: This way, we have a dialog (*lines 13*, *31-39*) that’s part of the app, and
    we can control it from anywhere using our store (*lines 4*, *11*)! The same goes
    for the app menu, so let’s modify our app to have centralized control over the
    app menu.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们有一个对话框（*第13行*，*第31-39行*），它是应用的一部分，我们可以通过我们的存储（*第4行*，*第11行*）从任何地方控制它！对于应用菜单也是如此，所以让我们修改我们的应用以实现对应用菜单的集中控制。
- en: Centralized app menu
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集中化应用菜单
- en: 'We can apply a similar pattern to a menu. We’ll convert it to a drawer link
    feature that slides in and out of view. Let’s start with modifying `AppMenu.vue`
    by adding the necessary app store references:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将类似的模式应用到菜单上。我们将将其转换为滑动进出视图的抽屉链接功能。让我们从通过添加必要的应用存储引用来修改`AppMenu.vue`开始：
- en: '[PRE7]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the template, we’ve wrapped the menu in a `navigation-drawer` component from
    Vuetify, which uses the `drawer` state variable to display as opened or closed.
    We’ve also replaced the `router-link` component with a method for navigating to
    new pages.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板中，我们用Vuetify的`navigation-drawer`组件包裹了菜单，该组件使用`drawer`状态变量来显示为打开或关闭。我们还用导航到新页面的方法替换了`router-link`组件。
- en: 'To complete the setup, we need to modify the `App.vue` file to adapt to the
    new interface and finalize the app layout:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成设置，我们需要修改`App.vue`文件以适应新的界面并最终确定应用布局：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So far, we have the foundation of an app that supports a personalized experience,
    depending on authentication by a third party, and the ability to have both public
    and secured routes. We have some centralized features to control the state of
    the app’s user interface. The next step will be to add features where the user
    can insert their own data!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有一个支持个性化体验的应用基础，这取决于第三方认证，并且能够拥有公共和受保护的路由。我们有一些集中化的功能来控制应用用户界面的状态。下一步将是添加用户可以插入他们自己的数据的功能！
- en: We’ve already prepared and set up our database with tables and some prefilled
    exercises. Feel free to take a look at the tables and the contents of the `exercises`
    table, because it will help you understand our next steps.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备并设置了我们的数据库，包括表和一些预填充的练习。请随意查看表和`exercises`表的内容，因为它将帮助您理解我们的下一步。
- en: We have a table exercise where different types of gym exercises are stored.
    The user data (limited to just an email address) is stored in the table. If you’ve
    signed up via the login form, you should see your email address already there!
    We have workouts where the training is logged per user, and the sets table combines
    performed exercises with a workout. Lastly, we have added a view for a dashboard,
    which we’ll build later on.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个表格练习，其中存储了不同类型的健身房练习。用户数据（仅限于电子邮件地址）存储在表中。如果你通过登录表单注册，你应该已经看到了你的电子邮件地址！我们还有记录每个用户的训练的锻炼，以及将执行练习与锻炼组合的集合表。最后，我们添加了一个仪表板视图，我们将在稍后构建它。
- en: Now, let’s make sure users can add data to the database by building an exercise
    tracker.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们确保用户可以通过构建一个锻炼跟踪器来向数据库添加数据。
- en: Exercise tracking
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 锻炼跟踪
- en: 'Let’s add a new route to have our users add a routine to the database. Let’s
    start by adding a new route entry on the routes:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个新的路由，让我们的用户将常规添加到数据库中。让我们首先在路由上添加一个新的路由条目：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can see, this is a page that is only accessible by authenticated users.
    Our entry also means that we need to create a view, called `Track.vue`, so let’s
    continue:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，这是一个只有经过认证的用户才能访问的页面。我们的入口也意味着我们需要创建一个名为`Track.vue`的视图，让我们继续：
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We’ll complete the initialization with the creation of an empty `TrackExercise.vue`
    file in the `components` folder, and we’ll focus on creating an interface that
    matches the way we want to track activities.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'To navigate to our route, we can modify our `AppMenu.vue` file. Since we can
    expect some more menu items, we can define a pattern for items in the `script`
    block and have the template repeat over those items. We’ll start with a single
    item in the collection, like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In our template, we’ll expand `v-list` for logged-in users to iterate over
    our `menuItems` collection:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We can now, from the menu, navigate to our new page in the app.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Next, we can define input fields. We’ll start by creating a date picker for
    our users.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a date
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We want to add a date to our workout. Vuetify at the moment supports `datepicker`
    as an experimental feature. We need to explicitly import it into our newly created
    `TrackExercise.vue` file, and in addition, we’ll configure some variables to keep
    track of the user interface state as well as the selected date:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In our template, we’ll build controls to add a workout, beginning with a date
    selection:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This should look pretty familiar. We’ve added a button that controls a dialog
    and have some configuration for the dialog. The reason we’re not using our app-wide
    dialog is that this contains more advanced content and has hooks attached. The
    app dialog is meant to display short messages to our users.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'If you try this out, you’ll notice that selecting a date results in an unformatted
    date shown in the interface. We’ll fix that before we move on by using the `computed`
    method and the browser’s built-in `Intl` API:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In our template, we’ll replace `{{ selectedDate }}` with a nicely formatted
    date representation:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Adding a routine
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For adding a routine, we want the user to be able to select a routine from our
    database. We want to offer something of a routine picker, so let’s build one!
    The component should read the exercises from the database and have a user select
    one to add properties of a set (weight and repetitions).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'With a need for centralized data, we can create a store for all our fitness-related
    data and methods. Let’s create a `fitness.ts` file in the store, and we’ll start
    with retrieving exercises from the database: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.9-fitness.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.9-fitness.ts).'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: The store exposes the exercises and a method of retrieving them. Since we want
    to immediately populate the `exercises` list, we can call the `getExercises` method
    (*lines 13-28*, *29*) when initializing the store!
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll add more of this store in the future, but for now, we can start using
    the data in a new component: an `components` folder called `SelectExercise.vue`,
    we’ll import the store and use it to populate a Vuetify `select` component:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Very straightforward! We access the store and map the values to the `v-select`
    component. In addition to `exercise`, we want the user to be able to add `weight`
    and `repetitions` as part of a routine. So, let’s wrap our created component in
    a parent called `AddRoutine.vue`: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.10-AddRoutine.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.10-AddRoutine.vue).'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Let’s break this down before we move to the template. We have the `exercise`
    (*line 10*) and `routine` (*line 9*) variables, where a routine consists of an
    exercise in combination with a set of weights and repetitions.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of `routines` could be similar to this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The flow starts with selecting an exercise, and the watcher (*lines 38-40*)
    then prepares the routine to be filled with new values (clearing the `routines`
    array). The interface in the template is modeled to the weight and repetitions,
    as you will see in a moment.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: As usual, several rows can be added to the `routines` property using the `addRow`
    function (*lines 16-21*). If a user makes an error, a row can be removed from
    the property (*lines 23-25*).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: The `add` function (*lines 33-36*) emits the `routine` object to the parent
    component and resets any values on the form.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: In the template part, we start with the `select-exercise` component (*line 48*)
    to trigger the flow, and we use Vuetify expansion panels to show the forms for
    adding a set (*lines 52-86*) as well as give a summary of sets that you’ve added
    (*lines 87-131*).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: The second expansion panel also uses a Vuetify badge to indicate the number
    of unsaved changes (*lines 92-100*). At the bottom, there’s a button (*lines 135-144*)
    that calls the `emit` function to have the `routine` object sent to the parent.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: We can now move back to the `TrackExercise.vue` file to pick up on the emitted
    event and combine the selected date with the modeled routine to eventually store
    it in the database.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `script` block, we’ll add the following code to keep track of the routine
    and the child component:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In our template, below the representation of the date picker, we can add a
    dialog for creating a routine:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After this code change, once a date has been selected, we show a button to
    start adding a routine. The routine selection component opens in a dedicated dialog,
    and on the `add` event, it calls the `addRoutineToExercise` function, which adds
    a newline to the object in this component. You can try it out yourself since we’re
    showing `{{ routines }}` inline for the moment. It should look similar to *Figure
    6**.8*:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Our interface for compiling a workout](img/B19563_06_08.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Our interface for compiling a workout
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Our next step will be to format the display of the workout that we want to add
    to the database and, of course, store the workout in the database itself.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Saving to the database
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ve created a feature for our users to model a workout so that we can start
    saving the hard work. We’re going to use our fitness store file for this, so let’s
    add some new methods and export them for usage: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.11-fitness.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.11-fitness.ts).'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: We need to have access to the user ID, so we’ll import the `userStore` function
    (*line 2*), and we’ll import some of the data types that we’ll use.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve added our main `saveWorkout` function (*lines 40-70*), which executes
    two helpers: first, it saves the workout to the workout table using the `insertWorkout`
    function (*lines 11-25*). On retrieving the `id` property from the workout, we
    can start saving the sets. For that, we iterate over the routines to compile a
    list of sets, and we can save them all at once with the `insertSets` method (*lines
    27-38*).'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'With those additions, let’s flip back to our `TrackExercise.vue` file to add
    a `saveWorkout` action. We’ll import both the fitness and app store:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We’ll also add functions to validate if a workout can actually be saved – one
    to reset the form state and one that passes the information to our store action:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Again, we’re using the app dialog to show our systems’ messages; nice and reusable.
    We’ll end our form with the conditional **Save** button at the bottom of our template:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can try it out. The data should show up in the tables of your Supabase instance.
    In [*Chapter 7*](B19563_07.xhtml#_idTextAnchor204)*,* we’ll start to retrieve
    this data in various ways. As you can see, sometimes during development it makes
    sense to go back and forth between various components that make up the chain.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: I’m trying to demonstrate this process a bit since it’s close to the development
    in practice. It is rare to come up with the ideal solution (or specifications!)
    in one go.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Our hard work visualized
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is one thing to store the data. For the user, the data only has value if
    we can present it within a certain context. We’ve done a small exercise when displaying
    the compilation of a routine before saving. In this part, we’ll see a couple of
    different examples of displaying the data.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: We’ll make sure to accommodate an empty state (so feel free to delete any items
    or try a new login), and after we’ve added some workouts, we’ll find ways to display
    the data.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by replacing the home page. In this case, we already have a route
    and we have the `Home.vue` view, but we’ll remove the reference to the `HelloWorld.vue`
    component and create an empty `History.vue <template>` component instead. And
    then, in `Home.vue`, we’ll reference the `History.vue` file instead of `HelloWorld.vue`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: A view-based dashboard
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can start with a quick component to show the latest statistics of the user.
    When executing the script on the database, it included a view, called `workout_dashboard_view`.
    This is like an aggregate of read-only queries that we can in turn query as if
    it were a table on its own.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll add methods for getting data to the fitness store, similar to what we
    did with the exercises, by adding and exposing the `dashboard` variable (*lines
    15*, *42*), which in turn gets data from the `getDashboard` method (*lines 17-40*,
    *42*): [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.12-fitness.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.12-fitness.ts).'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'With that in place, we can create a component to access the dashboard from
    the store and show the contents. Let’s call it `WorkoutStats.vue`, and we’ll add
    a reference to the fitness store and load the dashboard:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We’re adding one function to calculate the difference between today and the
    last exercise date, but it’s a concise setup. In the template, we can expect four
    values for the dashboard, each of which we’ll show on its own card:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We’re using an expression to default to `0` values if we have no results from
    the dashboard. Once it gets filled with values, though, we populate the template
    with the values. There is some room for optimization since there’s some repetition
    involved in the template. This would be a good exercise to improve on your own!
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have some means of motivating our users to start filling in more exercises!
    Let’s now see if we can display individual workouts too.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: History and overview
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To retrieve our workouts, we’ll add a new method to our fitness store. We have
    another view lined up for this particular goal! Let’s take a look at the updated
    fitness store file: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.13-fitness.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.13-fitness.ts).'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, with the workouts (*line 15*) and the method of retrieving the
    workouts (*lines 20-46*), we’ve exposed a new dataset to show in the app.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'With these changes, we can add some additional content to our `History.vue`
    file. We’ll begin by importing the data from the store and simply outputting it
    in the template: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.14-History.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.14-History.vue).'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'This addition provides us with an overview of workout entries from the database
    view (*lines 6-7*, *9*, *28*), which are presented in expansion panels from Vuetify
    (*lines 36-45*). But as you can see, we need to massage the data a bit, since
    it’s now showing an individual line per combination of workout and exercise. We
    want to group the data by workout, so we’ll create a function to transform our
    data and add a bit more structure. Take a look at the next iteration of the `History.vue`
    file: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.15-History.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.15-History.vue).'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'This will net us with unique IDs so that we can identify every workout, and
    we’ve remodeled the data so that every unique workout has a collection of corresponding
    exercises as a child (*lines 23-33*). We’re doing something similar with exercises:
    grouping them based on the `exercise_name` property.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we’re opting for this particular approach because we only have
    to query the database once. There are multiple ways of optimizing database queries,
    and we’re now choosing to take the data from the database as is and model it in
    our app to suit our needs.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: We’ve also updated the panels to iterate over `workoutIds` and display the restructured
    (part of the) workout based on the `id` property (*lines 53-63*).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'As a final step, we can create a small component to show the exercise. We’ll
    create a `GroupedExerciseView.vue` component and add the following contents: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.16-GroupedExerciseView.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.16-GroupedExerciseView.vue).'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then import and use the Vue component in our panel by passing the exercise
    set as a property:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We can then pass it to the template:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We can use this last component, slightly modified in our overview of adding
    a workout as well, to display what the user will be saving in a nicely formatted
    manner.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'The data will be slightly different, so we’ll create a `wrapper` component
    to modify the data before sending it as an exercise to the `GroupedExerciseView.vue`
    component. We’ll name the new file `ExerciseGrouping.vue`: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.17-ExerciseGrouping.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.17-ExerciseGrouping.vue).'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we’re also using the component, but we make sure that data in a different
    format is modified to fit with the component. To make this visible, we’ll import
    the `ExerciseGrouping.vue` component in our `TrackExercise.vue` file and display
    its values:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This helps our users in tracking their future exercises even better. These are
    relatively simple representations of data. Let’s see if we can add more complex
    visualizations such as graphs.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Graphs
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When working with larger sets of data, it is very common to need visualization
    at some point. We’ll implement different graphs by adopting a third-party library
    (`chart.js`) and have it render our tracked data! At this point, it would be helpful
    to have multiple workouts tracked over a certain timespan as well. This creates
    a more useful experience in visualizing the data.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: With specific and complex challenges, it is often more efficient to reach for
    a third-party library than build a solution on your own. In this case, we’ll have
    a look at a library that connects `chart.js` to Vue.js and apply it to our app.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Depending on vue-chartjs
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We use a library for displaying charts. In this case, the `vue-chartjs` package
    helps us integrate the framework-agnostic `chart.js` with our Vue.js app. It is
    quite common to use a third-party wrapper to better embed an underlying library
    into your framework.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: This usually helps in abstracting concepts and behavior that we know from our
    framework and translating it to and from the library, which acts unaware of its
    ecosystem. This way, we don’t have to deal with the integration layer and can
    focus on adding features that matter to our end users.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s build some graphs! We’re going to install both `vue-chartjs` and the
    core `chart.js` libraries:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We’ll create a new route called `graph` with a view that loads an empty component
    and an addition to the menu.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 'In the router file, we add the following entry:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This indicated to us that we need to create a `Graph.vue` file in the `views`
    folder, so let’s do that:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'And we’ll create a `Graph.vue` component to start building different kinds
    of graphs on the route. Let’s start with a `panel` expansion template: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.18-Graph.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.18-Graph.vue).'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'As soon as we add the entry to the `menuItems` collection in our `AppMenu.ts`
    file, we can navigate to our final page for this project:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As you can see from the page, we’ll implement three types of charts, with various
    content of our tracked workouts.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Piece of pie (chart)
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we will see, generating a chart using a library is very straightforward!
    We have to bear in mind that a `chart` component expects data in a fixed format,
    as in this example:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This inevitably means that we need to do some data remodeling, so let’s do
    that first. We actually need a bit more of a detailed response from our data,
    so we’ll add the following functions to our fitness store:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The key difference is in the `select` query, where we also request sets with
    their properties. Of course, we also need to return these new methods from the
    store. The data from the database, however, is not ready to be used in the graph,
    since it expects a different format. Again, this happens regularly in real-life
    scenarios, so let’s build a solution.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'We create a new store called `graph.ts`, and we’ll start with a function that
    returns data for our pie chart: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.19-graph.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.19-graph.ts).'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Here, we’re getting the workout data and returning it as an object that’s compatible
    with a pie chart.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we’ll create a component called `GraphPie.vue` in our `components` folder
    where we use the store, with some configuration for the graph type, to render
    a pie chart based on workout data: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.20-GraphPie.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.20-GraphPie.vue).'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 'With our `PieChart` component completed, we’ll import it into the `Graph.vue`
    component, and then we can replace the line in the collapsible:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Depending on the availability and content of the data, you will end up with
    a user interface that resembles this:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Example workout data represented in a pie chart](img/B19563_06_09.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – Example workout data represented in a pie chart
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Using `vue-chartjs`, it’s been relatively easy for us to visualize datasets.
    We have worked on making sure that our data is formatted in the way the library
    expects. With that in mind, we can proceed in expanding to different types of
    visualizations.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: More charts!
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Looking at our collapsible examples, we’re going to build two more charts,
    just to get a feel of multiple implementations. We’ll update our graph store with
    more features. We’ll create an internal method that we can reuse in both our graphs
    and then create a public method on the store to retrieve data: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.21-graph.ts](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.21-graph.ts).'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: We’re creating a helper function (`createGraphData`, *lines 11-46*) to gather
    and format the data based on a monthly average. For our two distinct types of
    graphs, we’ll create one function called `getGraphMonthlyAverage` (*lines 48-58*).
    Since the library expects data in a predefined format, we can use the same data
    presented in different ways.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'To showcase this, we’ll create a bar graph as well as a line graph from the
    same data. First, the bar graph; the code is very similar to the pie graph, with
    our abstractions in place. We’ll call this component `GraphBar.vue`: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.22-GraphBar.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.22-GraphBar.vue).'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the bar graph would render to the browser:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Example workout data represented in a bar chart](img/B19563_06_10.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Example workout data represented in a bar chart
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'Not so different from our previous graph component! We’ll do the same for a
    line graph, called `GraphLine.vue`, as you might have guessed: [https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.23-GraphLine.vue](https://github.com/PacktPublishing/Building-Real-world-Web-Applications-with-Vue.js-3/blob/main/06.fitness/.notes/6.23-GraphLine.vue).'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the line graph would render to the browser:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Example workout data represented in a line chart](img/B19563_06_11.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Example workout data represented in a line chart
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: We could even abstract repetitive code in a Vue component that is capable of
    rendering the data as different types of graphs. That would be a nice exercise
    for you to pursue as an extra assignment. Try swapping out the `getGraphPie` data
    with the `getGraphMonthlyAverage` data, and you’ll see that the graph just accepts
    these new values since they follow the right shape.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: 'To complete this chapter, we’ll add the components to our user interface, in
    the `Graph.vue` file:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: With that, we’ve built an app where users can log in and track and retrieve
    their individual results.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve seen how we can use the concepts of stores, composables, and nested components
    to build a relatively complex user flow. For security, we depend on the authorization
    model by Supabase, which helps us achieve our results in an efficient way.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Taking a look at the Supabase structure and data is helpful in understanding
    the way certain endpoints store and offer their data. Up until this point, we’ve
    just been consuming data. Under the hood, every Supabase instance is a dedicated
    PostgreSQL database. If you want to know more about PostgreSQL, I highly recommend
    checking out *Developing Modern Database Applications with PostgreSQL* by Dr.
    Quan Ha Le and Marcelo Diaz, at [https://www.packtpub.com/product/developing-modern-database-applications-with-postgresql/9781838648145](https://www.packtpub.com/product/developing-modern-database-applications-with-postgresql/9781838648145).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: With more complex tasks, it makes sense to take a step-by-step approach to building
    the feature, which is something I’ve also demonstrated. This sometimes means revisiting
    certain files to make small additions while we learn more about features along
    the way. Even when requirements are very clear upfront, it can be really helpful
    to break features up into smaller parts and follow their path in the app file
    structure while building.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve applied a certain level of abstraction but also took a pragmatic approach
    in parts. It can be difficult to find this balance, but I do tend to favor some
    repetition to prevent over-engineering: this often results in more readable code
    that is easier to make small changes to.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: I do favor separating a component into parts with a specific role. The store
    composition is a good example of this, just as with our Supabase client file.
    With the **separation of concerns** (**SoC**), we can limit the complexity of
    each individual part to make it more scalable and manageable in the future.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: We’ve built apps specifically for the web. In the next chapter, we’ll see how
    we can create projects to target different environments.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
