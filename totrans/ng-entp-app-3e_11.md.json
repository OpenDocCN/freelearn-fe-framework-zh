["```js\nPS> Install-Script -Name setup-windows-dev-env\nPS> setup-windows-dev-env.ps1 \n```", "```js\n$> bash <(wget -O - https://git.io/JvHi1) \n```", "```js\n    PS> Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net. ServicePointManager]::SecurityProtocol = [System.Net.ServicePointM anager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net. WebClient).DownloadString('https://chocolatey.org/install.ps1')) \n    ```", "```js\n    $ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" \n    ```", "```js\n    $ brew tap caskroom/cask \n    ```", "```js\n    setup-windows-dev-env.ps1\n    # This script is intentionally kept simple to demonstrate basic automation techniques.\n    Write-Output \"You must run this script in an elevated command shell, using 'Run as Administator'\"\n    $title = \"Setup Web Development Environment\"\n    $message = \"Select the appropriate option to continue (Absolutely NO WARRANTIES or GUARANTEES are provided):\"\n    $yes = New-Object System.Management.Automation.Host.ChoiceDescription \"&Install Software using Chocolatey\", `\n      \"Setup development environment.\"\n    $no = New-Object System.Management.Automation.Host.ChoiceDescription \"&Exit\", `\n      \"Do not execute script.\"\n    $options = [System.Management.Automation.Host.ChoiceDescription[]]($yes, $no)\n    $result = $host.ui.PromptForChoice($title, $message, $options, 1)\n    switch ($result) {\n      0 {\n        Write-Output \"Installing chocolatey\"\n        Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n        Write-Output \"Refreshing environment variables. If rest of the script fails, restart elevated shell and rerun script.\"\n        $env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\", \"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\", \"User\")\n        Write-Output \"Assuming chocolatey is already installed\"\n        Write-Output \"Installing Git & GitHub Desktop\"\n        choco.exe upgrade git github-desktop -y\n        Write-Output \"Installing NodeJS and NVS\"\n        choco.exe upgrade nodejs-lts nvs -y\n        Write-Output \"Installing Docker\"\n        choco.exe upgrade docker-cli docker-for-windows -y\n        Write-Output \"Installing AWS\"\n        choco.exe upgrade awscli -y\n        Write-Output \"Installing VS Code\"\n        choco.exe upgrade VisualStudioCode -y\n        RefreshEnv.cmd\n        Write-Output \"Results:\"\n        Write-Output \"Verify installation of GitHub Desktop and VS Code manually.\"\n        $awsVersion = aws.exe --version\n        Write-Output \"aws: $awsVersion\"\n        $dockerVersion = docker.exe --version\n        Write-Output \"docker: $dockerVersion\"\n        $gitVersion = git.exe --version\n        Write-Output \"git: $gitVersion\"\n        $nodeVersion = node.exe -v\n        Write-Output \"Node: $nodeVersion\"\n        $npmVersion = npm.cmd -v\n        Write-Output \"npm: $npmVersion\"\n      }\n      1 { \"Aborted.\" }\n    } \n    ```", "```js\n    PS> Set-ExecutionPolicy Unrestricted; .\\setup-windows-dev-env.ps1 \n    ```", "```js\nPS> Install-Script -Name setup-windows-dev-env PS> setup-windows-dev-env.ps1 \n```", "```js\n     #!/bin/bash\n\n          # In order to be able to execute this script, run 'chmod a+x setup-mac-dev-env.sh' to make the file executable\n\n          echo \"Execute Installation Script\"\n          read -r -p \"Absolutely NO WARRANTIES or GUARANTEES are provided. Are you sure you want to continue? [y/N] \" response\n          if [[ \"$response\" =~ ^([yY][eE][sS]|[yY])+$ ]]\n          then\n              echo \"Installing brew\"\n              /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n              echo \"Installing git\"\n              brew install git\n              brew upgrade git\n\n              echo \"Installing GitHub Desktop\"\n              brew install github\n              brew upgrade github\n\n              echo \"Installing NodeJS\"\n              brew install node@20\n              brew upgrade node@20\n\n              echo \"Installing Docker\"\n              brew install docker\n              brew upgrade docker\n\n              echo \"Installing AWS\"\n              brew install awscli\n              brew upgrade awscli\n\n              echo \"Installing VS Code\"\n              brew install visual-studio-code\n              brew upgrade visual-studio-code\n\n              echo \"Results:\"\n              echo \"Verify installation of AWS, Docker, GitHub Desktop and VS Code manually.\"\n              gitVersion=$(git --version)\n              echo \"git: $gitVersion\"\n              nodeVersion=$(node -v)\n              echo \"Node: $nodeVersion\"\n              npmVersion=$(npm -v)\n              echo \"npm: $npmVersion\"\n\n              echo \"Ensuring Node LTS is installed\"\n              npm i -g n@latest\n              n lts\n          else\n              echo \"Aborted.\"\n          fi \n    ```", "```js\n    $ ./setup-mac-dev-env.sh \n    ```", "```js\necho \"Checking if brew is installed\" which -s brew\nif [[ $? != 0 ]] ; then echo \"Installing brew\"\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/ Homebrew/install/master/install)\" < /dev/null\nelse\necho \"Found brew\"\nfi\necho \"Checking for Node version ${NODE_VERSION}\" node -v | grep ${NODE_VERSION}\nif [[ $? != 0 ]] ; then\necho \"Installing Node version ${NODE_VERSION}\" brew install nodejs\nelse\necho \"Found Node version ${NODE_VERSION}\"\nfi \n```", "```js\nPS> mkdir c:\\dev\nPS> cd c:\\dev \n```", "```js\n$ mkdir ~/dev\n$ cd ~/dev \n```", "```js\n    npm create @angular \n    ```", "```js\n    npx mrm angular-vscode \n    ```", "```js\n    npx mrm npm-docker \n    ```"]