- en: Chapter 5. Creating an Angular Single-Page Application in Visual Studio
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第5章。在 Visual Studio 中创建 Angular 单页应用程序
- en: This chapter guides you through the process of creating an AngularÂ **Single
    Page Application**Â (**SPA**) using Visual Studio.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将指导您通过使用 Visual Studio 创建 Angular **单页应用程序** （**SPA**）的过程。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating an ASP.NET Core web application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 ASP.NET Core web 应用程序
- en: Adding client-side packages using NPM package manager
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NPM 软件包管理器添加客户端软件包
- en: Using Gulp to run tasks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Gulp 运行任务
- en: Adding Angular components and templates
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 Angular 组件和模板
- en: Creating an ASP.NET core web application
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个 ASP.NET Core web 应用程序
- en: '* * *'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Let''s start this chapter by creating an ASP.NET Core web application. I am
    assuming that you have Visual Studio 2017 or a later version installed in your
    development environment. Follow these steps to create the application:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建 ASP.NET Core web 应用程序开始这一章。我假设您在开发环境中已经安装了 Visual Studio 2017 或更新版本。按照以下步骤创建应用程序：
- en: Open Visual Studio and click on the menu item by navigating to `File` | `New`
    | `Project`.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio，然后通过导航到 `File` | `New` | `Project` 来点击菜单项。
- en: Navigate to **`Visual C#`** from the installed template and select **`Web`**.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从安装模板中导航到 **`Visual C#`**，然后选择 **`Web`**。
- en: 'Then, select **`ASP.NET Core Web Application`** and enter the application name
    as `My Todo`, as shown in the following screenshot:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择 **`ASP.NET Core Web Application`** 并输入应用程序名称为 `My Todo`，如下图所示：
- en: '![](img/image_05_001.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_001.png)'
- en: CreatingÂ a project named My Todo
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 创建名为 My Todo 的项目
- en: 'Select the **`ASP.NET Core Empty`** template and click on **`Ok`** to create
    the project, as illustrated:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **`ASP.NET Core Empty`** 模板，然后点击 **`Ok`** 创建项目，如图所示：
- en: '![](img/image_05_002.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_002.png)'
- en: Select an empty ASP.NET Core template
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个空的 ASP.NET Core 模板
- en: 'The solution structure of the `My Todo` application that we created is shown
    in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的 `My Todo` 应用程序的解决方案结构如下图所示：
- en: '![](img/image_05_003.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_003.png)'
- en: The default solution structure of My Todo
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: My Todo 的默认解决方案结构
- en: 'The `Startup` class is the entry point of an ASP.NET Core web application.
    The `Configure` method in the `Startup` class is used to set up a request pipeline
    to handle all the requests coming to the application. Here, the default code of
    the `Startup` class is configured to return the `Hello World!`Â text by default:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`Startup` 类是 ASP.NET Core web 应用程序的入口点。 `Startup` 类中的 `Configure` 方法用于设置用于处理应用程序中所有请求的请求管道。在这里，`Startup`
    类的默认代码被配置为默认返回 `Hello World!` 文本：'
- en: '![](img/image_05_004.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_004.png)'
- en: The default code of the Startup class
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`Startup` 类的默认代码'
- en: 'So, when you run the application, you will get the following output in the
    browser:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，当您运行应用程序时，您将在浏览器中获得以下输出：
- en: '![](img/image_05_005.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_005.png)'
- en: The default output of the 'My Todo' project
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '''My Todo'' 项目的默认输出'
- en: 'Now, let''s make the application to serve a default page for any request coming
    through. Follow these steps to do so:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们让应用程序为任何请求提供默认页面。按照以下步骤进行操作：
- en: 'Select the `wwwroot` folder under the `My Todo` project. Right-click on selecting
    the project and navigate to **`Add`** and click **`New Item`**:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `My Todo` 项目下的 `wwwroot` 文件夹。右键单击选择项目，转到 **`Add`**，然后点击 **`New Item`**：
- en: '![](img/image_05_006.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_006.png)'
- en: Navigate to the Add New Item menu
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 转到添加新项目菜单
- en: 'In the **`Add New Item`** window, click onÂ **`Content`** under **`Web`**,
    and then select **`HTML Page`** from the center pane. Enter `index.html` as the
    filename and click on **`Add`**:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **`Add New Item`** 窗口中，点击 **`Web`** 下的 **`Content`**，然后从中心窗格中选择 **`HTML Page`**。输入
    `index.html` 作为文件名，然后点击 **`Add`**：
- en: '![](img/image_05_007.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_007.png)'
- en: Name the HTML file as index.html
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 将 HTML 文件命名为 index.html
- en: 'Update the content of the `index.html` file, as follows:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `index.html` 文件的内容如下：
- en: '![](img/image_05_008.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_008.png)'
- en: The updated code of index.html
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: index.html 的更新代码
- en: 'Open the `Startup` class and delete the following code snippet that writes
    the `Hello World` default text to a response for each request:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Startup` 类并删除以下代码片段，该代码片段将 `Hello World` 默认文本写入每个请求的响应中：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following code to the `Configure` method so that the pipeline serves
    default and static files to the request:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `Configure` 方法中，以便管道为请求提供默认和静态文件：
- en: '![](img/image_05_009.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_009.png)'
- en: The code to enable the pipeline to serve static and default files
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 启用管道为静态和默认文件提供服务的代码
- en: 'You need to add the `Microsoft.AspNetCore.StaticFiles` NuGet package, as shown,
    in order to use these extensions:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '你需要添加 `Microsoft.AspNetCore.StaticFiles` NuGet 软件包，如图所示，以使用这些扩展:'
- en: '![](img/image_05_010.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_010.png)'
- en: Adding a reference to a namespace if required
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如有需要，请向命名空间添加引用
- en: 'Now, add an `index.html` file under theÂ `wwwroot` folder and run the application
    by pressing *F5*. You will note that the application serves the `index.html` file
    as the default file for the request. Here, I have added an `h1` tag with the content
    **`My Todo Landing Page`**:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '现在，在 `wwwroot` 文件夹下添加一个 `index.html` 文件，并通过按下 *F5* 运行应用程序。你会注意到应用程序为请求提供了 `index.html`
    文件作为默认文件。在这里，我已经添加了一个内容为 **`My Todo Landing Page`** 的 `h1` 标签:'
- en: '![](img/image_05_011.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_011.png)'
- en: The output of the application after adding index.html
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加了 index.html 后的应用程序输出
- en: Adding client-side packages using NPM package manager
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 NPM 软件包管理器添加客户端软件包
- en: '* * *'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: When we develop applications, we add references to many frameworks and libraries
    as dependencies. In Visual Studio, we have the NuGet package manager tool to manage
    all those packages in our application.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开发应用程序时，我们将很多框架和库添加为依赖项的引用。在 Visual Studio 中，我们有 NuGet 软件包管理工具来管理应用程序中的所有这些软件包。
- en: 'In the frontend web community, using Bower, Grunt, Gulp, and NPM to manage
    packages and running build tasks to develop modern web applications has become
    widely popular. As this ecosystem is very rich and widely accepted, Visual Studio
    2015 has adopted these systems to manage client-side frameworks and libraries,
    as illustrated. NuGet is ideal to manage server-side packages:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '在前端网络社区中，使用 Bower、Grunt、Gulp 和 NPM 来管理软件包和运行构建任务，开发现代 Web 应用已经变得广泛流行。由于这个生态系统非常丰富并且得到了广泛接受，Visual
    Studio 2015 已经采用了这些系统来管理客户端框架和库，如图所示。NuGet 是管理服务器端软件包的理想选择:'
- en: '![](img/image_05_012.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_012.png)'
- en: Various package managing tools
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 各种软件包管理工具
- en: 'We saw how to manage client-side packages using NPM in Visual Studio Code.
    Similarly, we use NPM in Visual Studio 2015 or later to manage frontend frameworks
    and libraries in our project. Let''s add the Angular framework and other required
    JavaScript libraries as dependencies to our project using NPM by following these
    steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到如何在 Visual Studio Code 中使用 NPM 管理客户端软件包。类似地，我们在 Visual Studio 2015 或更高版本中使用
    NPM 来管理项目中的前端框架和库。让我们通过以下步骤使用 NPM 将 Angular 框架和其他所需的 JavaScript 库作为项目的依赖项添加到我们的项目中：
- en: First, let's add **`NPM Configuration File`** to our project. Right-click on
    the project node and navigate to `Add` | `New Item`. Select **`General`** under
    **`Web`**Â from the left-hand side pane and **`NPM Configuration File`** from
    the middle pane.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们向我们的项目添加 **`NPM 配置文件`**。右键单击项目节点，导航到 `Add` | `New Item`。从左侧窗格中选择 **`Web`**
    下的 **`General`**，并且从中间窗格选择 **`NPM 配置文件`**。
- en: 'Then, click on **`Add`**, leaving the default name as `package.json`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '然后，点击 **`Add`**，将默认名称保留为 `package.json`:'
- en: '![](img/image_05_013.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_013.png)'
- en: The NPM configuration file named package.json
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 名为 package.json 的 NPM 配置文件
- en: 'The `package.json` file will be added to your project with the following default
    JSON code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 文件将被添加到您的项目中，其默认 JSON 代码如下:'
- en: '![](img/image_05_014.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_014.png)'
- en: The code snippet of package.json
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: package.json 的代码片段
- en: 'Update the `name` field with `my-todo` and add the required dependencies to
    the `package.json` file, as shown:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将 `name` 字段更新为 `my-todo` 并将所需的依赖项添加到 `package.json` 文件中，如图所示:'
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The moment we save `package.json` with all the dependency information, Visual
    Studio adds the required packages to our project under the `node_modules` hidden
    folder, and you can see the list of loaded dependencies by navigating to theÂ `npm`
    folder under the `Dependencies` node, as illustratedÂ in the following screenshot:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们保存了带有所有依赖信息的 `package.json` 文件时，Visual Studio 将所需的软件包添加到我们的项目下的 `node_modules`
    隐藏文件夹中，你可以通过导航到 `Dependencies` 节点下的 `npm` 文件夹来查看加载的依赖项列表，如下图所示：
- en: '![](img/image_05_015.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_015.png)'
- en: The NPM folder with dependency libraries
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 具有依赖库的 NPM 文件夹
- en: We have all the client-side frameworks and libraries in our project dependency
    node that we need. However, we need to add the dependent libraries to our `wwwroot`
    folder for our application to refer and consume. We will discuss this in the next
    section.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目依赖节点中已经有了我们需要的所有客户端框架和库。但是，我们需要将依赖库添加到我们的 `wwwroot` 文件夹中，以便我们的应用程序引用和消耗。我们将在下一节中讨论这一点。
- en: Using Gulp to run tasks
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Gulp 运行任务
- en: '* * *'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Gulp is a task runner that runs on `node.js`. Using Gulp, we can automate activities
    such as moving or copying files, and bundling and minification. In ASP.NET Core,
    Microsoft also integrated Gulp with Visual Studio as it has been widely accepted
    by the web community to run and manage complex tasks very easily. You can find
    more information by visiting the official site atÂ [http://gulpjs.com/](http://gulpjs.com/)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Gulp是一个在`node.js`上运行的任务运行器。使用Gulp，我们可以自动化活动，如移动或复制文件，以及捆绑和最小化。在ASP.NET Core中，微软还将Gulp与Visual
    Studio集成在一起，因为它已被Web社区广泛接受，可以非常轻松地运行和管理复杂的任务。您可以访问官方网站了解更多信息：[http://gulpjs.com/](http://gulpjs.com/)
- en: 'Let''s use Gulp to push the required JavaScript frameworks and libraries from
    the `node_modules` folder hidden in the solution to the `libs` folder under `wwwroot`.
    Installing Gulp in Visual Studio is easy. Perform the following steps to install
    and run Gulp tasks:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Gulp将解决方案中隐藏的`node_modules`文件夹中所需的JavaScript框架和库推送到项目`wwwroot`下的`libs`文件夹中。在Visual
    Studio中安装Gulp很容易。执行以下步骤来安装和运行Gulp任务：
- en: 'Add Gulp as a dev dependency in the `package.json` NPM configuration file,
    as shown, and save the file:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`package.json`的NPM配置文件中添加Gulp作为开发依赖项，如图所示，并保存文件：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When we save the `package.json` file with Gulp added in the dev dependencies,
    Visual Studio installs the package into our application under the node `Dependencies`
    | `npm` folder, as in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在`package.json`文件中添加了Gulp作为开发依赖项并保存时，Visual Studio会将该包安装到我们的应用程序中的`node`
    Dependencies` | `npm`文件夹下，如下截图所示：
- en: '![](img/image_05_016.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_016.png)'
- en: The Gulp dependency under the added npm folder
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 添加的npm文件夹下的Gulp依赖项
- en: 'We have the gulp package in our application. Now, we need to write a task in
    JavaScript to copy the required JavaScript libraries from the `node_modules` folder
    that is hidden in a solution, as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序中有Gulp包。现在，我们需要在JavaScript中编写一个任务，从隐藏在解决方案中的`node_modules`文件夹中复制所需的JavaScript库，如下所示：
- en: '![](img/image_05_017.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_017.png)'
- en: The node_modules hidden folder
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 某个`node_modules`隐藏文件夹
- en: 'Now, let''s add theÂ **`Gulp Configuration File`** to our project. Right-click
    on the project and navigate to `Add` | `New Item`. Select **`General`** under
    **`Web`** on the left-hand side pane, and then select **`Gulp Configuration File`**
    from the middle pane. Then, click on **`Add`**, leaving the default name asÂ `gulpfile.js`:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将**`Gulp配置文件`**添加到我们的项目中。右键单击项目，导航到`添加` | `新建项`。在左侧窗格中选择**`Web`**下的**`General`**，然后在中间窗格中选择**`Gulp配置文件`**。然后，单击**`添加`**，保持默认名称为`gulpfile.js`：
- en: '![](img/image_05_018.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_018.png)'
- en: Adding the Gulp configuration file
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 添加Gulp配置文件
- en: 'The default content of the Gulp configuration file `gulpfile.js` is as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Gulp配置文件`gulpfile.js`的默认内容：
- en: '![](img/image_05_019.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_019.png)'
- en: The default code snippet of the Gulp configuration file
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Gulp配置文件的默认代码片段
- en: 'Let''s write another task to copy the required JavaScript libraries from the
    `node_modules` hidden folder to the `libs` folder under the `wwwroot` node of
    the project. Add the following code snippet to `gulpfile.js` for the new task:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再写一个任务，将隐藏在解决方案中的`node_modules`文件夹中所需的JavaScript库复制到项目`wwwroot`节点下的`libs`文件夹中。将以下代码片段添加到新任务的`gulpfile.js`中：
- en: '[PRE3]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `paths` variable holds the source and target folder of the libraries to
    be moved, and the `librariesToMove` variable holds the list of libraries to be
    moved to the `libs` folder. The last statement in the file is the new task that
    copies the required JavaScript libraries to the `libs` folder when it is run.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`paths`变量保存要移动的库的源和目标文件夹，`librariesToMove`变量保存要移动到`libs`文件夹的库列表。文件中的最后一条语句是在运行时将所需的JavaScript库复制到`libs`文件夹的新任务。'
- en: 'We have the code for the Gulp task ready, and now, we need to run the Gulp
    task to copy the libraries. So, to run the task, open **`Task Runner Explorer`**
    by right-clicking on `gulpfile.js`, as shown in the following screenshot:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经准备好了Gulp任务的代码，现在，我们需要运行Gulp任务来复制这些库。所以，要运行任务，右键单击`gulpfile.js`并打开**`任务运行器资源管理器`**，如下截图中所示：
- en: '![](img/image_05_020.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_020.png)'
- en: Opening Task Runner Explorer
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 打开任务运行器资源管理器
- en: 'Task Runner Explorer will list the available tasks written in `gulpfile.js`
    as a child tree node under **`Tasks`**, as in the screenshot here:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 任务运行器资源管理器将在**`Tasks`**下列出在`gulpfile.js`中编写的可用任务，如下截图所示：
- en: '![](img/image_05_021.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_021.png)'
- en: The list of tasks available in gulpfile.js
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: gulpfile.js中可用的任务列表
- en: 'Right-click on the `librariesToMove` task listed in ****`Task Runner Explorer`****
    and select **`Run`** from the menu, as follows:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 ****`Task Runner Explorer`**** 中右键点击列表中的 `librariesToMove` 任务，然后从菜单中选择 **`Run`**，如下所示：
- en: '![](img/image_05_022.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_022.png)'
- en: Running the librariesToMove task in gulpfile.js
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在 gulpfile.js 中运行 librariesToMove 任务
- en: 'You can see the command getting executed to run the task on the right-hand
    side pane of **`Task Runner Explorer`**:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 **`Task Runner Explorer`** 的右侧窗格中看到执行该任务的命令：
- en: '![](img/image_05_023.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_023.png)'
- en: The task completed with zero errors
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 任务完成时没有错误
- en: 'Note that the libraries are copied to `wwwroot` under the `libs` folder, as
    illustratedÂ in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，库会被复制到 `wwwroot` 下的 `libs` 文件夹，如下截图所示：
- en: '![](img/image_05_024.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_024.png)'
- en: The libs folder created with the required JavaScript libraries
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了包含所需 JavaScript 库的 libs 文件夹
- en: 'Now that we have the required libraries under the `libs` folder in the `wwwroot`
    node, let''s update `index.html` by adding both the script references to the libraries
    in the `libs` folder and the code to configure `SystemJS`, as demonstrated:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经在 `wwwroot` 节点下的 `libs` 文件夹中拥有了所需的库，请按照以下示例更新 `index.html`，向其中添加对 `libs`
    文件夹中库的脚本引用以及配置 `SystemJS` 的代码：
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add a `system.js` configuration file `systemjs.config.js` and update it withÂ the
    followingÂ content. This has the mapping information to load the angular libraries
    when running the applications:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `system.js` 配置文件 `systemjs.config.js`，并更新其中的以下内容。这包含了运行应用程序时加载 Angular 库的映射信息：
- en: '[PRE5]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We created a project to develop the `My Todo`Â application and managed all the
    client-side dependencies using NPM package manager. We also used Gulp to run a
    task in order to copy JavaScript libraries to the `wwwroot` node. In the next
    section, let's create the required Angular components for our application.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个项目来开发`My Todo` 应用程序，并使用 NPM 包管理器管理所有客户端依赖项。我们还使用了 Gulp 运行一个任务，将 JavaScript
    库复制到 `wwwroot` 节点。在下一节中，让我们为我们的应用程序创建所需的 Angular 组件。
- en: Adding Angular components and templates
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 Angular 组件和模板
- en: '* * *'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: We will be writing Angular components for our application using TypeScript.
    The TypeScript files should be compiled to JavaScript, targeting ECMAScript 5.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 TypeScript 为我们的应用程序编写 Angular 组件。TypeScript 文件应该编译为 ECMAScript 5 目标的 JavaScript。
- en: Configuring TypeScript compiler options
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 TypeScript 编译器选项
- en: 'We need to inform Visual Studio about the compiler options required to compile
    TypeScript for our application to consume when it is running. With the help of
    a TypeScript configuration file, we can configure the compiler options and other
    details using the following steps:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要告知 Visual Studio 编译 TypeScript 所需的编译器选项，以便在运行时消耗我们的应用程序。通过 TypeScript 配置文件，我们可以使用以下步骤配置编译器选项和其他详细信息：
- en: 'Let''s add **`TypeScript Configuration File`** by right-clicking on the project
    and navigating to `Add`**`|`**`New Item` in the menu, leaving the filename to
    default, as shown in this screenshot:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目上右键点击，然后导航到 `Add | New Item`，保持文件名默认，添加 **`TypeScript Configuration File`**，如下截图所示：
- en: '![](img/image_05_025.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_025.png)'
- en: Adding the TypeScript configuration file
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 TypeScript 配置文件
- en: A file named `tsconfig.json` will be added to the project root directory.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个名为 `tsconfig.json` 的文件添加到项目根目录。
- en: 'Replace the content of the TypeScript configuration file with the following
    configuration:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下配置替换 TypeScript 配置文件的内容：
- en: '[PRE6]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Adding an Angular component
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 Angular 组件
- en: 'We configured the project with TypeScript compiler options. Now, let''s add
    an Angular root component for our application. Follow these steps to do so:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经配置了 TypeScript 编译器选项。现在，让我们为我们的应用程序添加一个 Angular 根组件。按照以下步骤操作：
- en: 'First, create an `app` folder under `wwwroot` by right-clicking on it and navigate
    to `Add` | `New Folder`, as shown in the following screenshot:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过右键点击 `wwwroot`，然后导航到 `Add | New Folder`，在 `wwwroot` 下创建一个 `app` 文件夹，如下截图所示：
- en: '![](img/image_05_026.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_026.png)'
- en: Adding a new folder named app for the Angular application folder
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Angular 应用程序文件夹添加一个名为 app 的新文件夹
- en: 'We have the `app` folder ready. Let''s add the TypeScript file to create a
    root component by right-clicking on the `app` folder and navigating to `Add` |
    `New Item`. Select **`Scripts`** under **`Web`**Â from the left-hand side pane
    and select **`TypeScript File`** from the middle pane. Name the file as theÂ `app.component.ts`
    file and click on **`Add`**:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经准备好了`app`文件夹。让我们通过右键单击`app`文件夹并导航到`Add` | `New Item`来添加TypeScript文件，以创建一个根组件。从左侧面板下选择**`Web`**下的**`Scripts`**，并在中间面板选择**`TypeScript
    File`**。将文件命名为`app.component.ts`，然后单击**`Add`**：
- en: '![](img/image_05_027.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_027.png)'
- en: Adding a root component named app.component.ts
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 添加名为app.component.ts的根组件
- en: 'Add the following code snippet to `app.component.ts`:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码片段添加到`app.component.ts`：
- en: '[PRE7]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: A root component named `AppComponent` is created and decorated with the component
    metadata `selector` and `templateUrl`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个名为`AppComponent`的根组件，并用组件元数据`selector`和`templateUrl`进行修饰。
- en: Adding app module
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加应用程序模块
- en: 'In the preceding section, we created an Angular component named `AppComponent`.
    Now we need to bootstrap this `AppComponent` so that Angular will consider this
    as a root component of the application. We can bootstrap a component by decorating
    an `AppModule` class with the `NgModule` and adding the metadata bootstrap assigned
    with `AppComponent`. Follow these steps to create `AppModule`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们创建了一个名为`AppComponent`的Angular组件。现在我们需要引导这个`AppComponent`，这样Angular才会将其视为应用程序的根组件。我们可以通过在`AppModule`类上添加`NgModule`元数据并将其分配给`AppComponent`来引导一个组件。按照以下步骤创建`AppModule`：
- en: 'Create a `TypeScript` by right-clicking on the `app` folder and navigating
    to `Add` | `New Item`. Select **`Scripts`** under **`Web`** from the left-hand
    side pane and select **`TypeScript File`** from the middle pane. Add a file named
    `app.module.ts`, and click on **`Add`**:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过右键单击`app`文件夹并导航到`Add` | `New Item`来创建一个`TypeScript`文件。在左侧面板下选择**`Web`**下的**`Scripts`**，并在中间面板选择**`TypeScript
    File`**。添加一个名为`app.module.ts`的文件，然后单击**`Add`**：
- en: '![](img/image_05_028.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_028.png)'
- en: Adding the TypeScript file namedÂ app.module.ts
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 添加名为`app.module.ts`的TypeScript文件
- en: 'Add the following code snippet to `app.module.ts`:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码片段添加到`app.module.ts`：
- en: '[PRE8]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, we added `AppComponent` as root component and imported `BrowserModule`
    as our application will be consumed via browser and `FormsModule` two bindings.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将`AppComponent`添加为根组件，并导入`BrowserModule`，因为我们的应用将通过浏览器消耗，还有`FormsModule`两个绑定。
- en: Adding an Angular component
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个Angular组件
- en: 'Now we need to bootstrap the `AppModule` created in the preceding section.
    Perform the following steps:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要引导前面部分中创建的`AppModule`。执行以下步骤：
- en: 'Let''s create a `TypeScript` file,Â `main.ts`, to bootstrap `AppModule`. Right-click
    on the `wwwroot` folder and navigate to `Add` | `New Item`. Select **`Scripts`**
    under **`Web`** on the left-hand side pane and select **`TypeScript File`** from
    the middle pane. Name the file as `main.ts`, and click on **`Add`**:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个`TypeScript`文件，`main.ts`，用于引导`AppModule`。在`wwwroot`文件夹上右键单击并导航到`Add`
    | `New Item`。从左侧面板下选择**`Web`**下的**`Scripts`**，并在中间面板选择**`TypeScript File`**。将文件命名为`main.ts`，然后单击**`Add`**：
- en: '![](img/image_05_029.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_029.png)'
- en: Adding the TypeScript file named main.ts
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 添加名为main.ts的TypeScript文件
- en: 'Update the `main.ts` file with this code snippet:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这段代码更新`main.ts`文件：
- en: '[PRE9]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, platform browser dynamic contains angular features that make the app run
    in the browser by bootstrapping application module. We can ignore this if our
    application is not targeting to run on the browser.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，平台浏览器动态包含使应用在浏览器中运行的Angular功能。如果我们的应用程序不是针对在浏览器上运行的话，可以忽略这一点。
- en: 'We have all that we need to verify that our Angular application is running
    properly. Note how nicely Visual Studio has organized the template files, TypeScript
    files, and their respective compiled JavaScript files under the solution explorer,
    as shown in the following screenshot:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好验证我们的Angular应用程序是否正常运行。请注意Visual Studio如何在解决方案资源管理器中整齐地组织了模板文件、TypeScript文件以及它们各自的已编译JavaScript文件，如下面的屏幕截图所示：
- en: '![](img/image_05_030.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_030.png)'
- en: Compiled TypeScript files to JavaScript files
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 编译TypeScript文件到JavaScript文件
- en: Note that Visual Studio will automatically generate JavaScript files after compiling
    the TypeScript files in the app folder as and when you make changes and save the
    files.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '*请注意，Visual Studio在对app文件夹中的TypeScript文件进行编译并进行更改并保存文件时，将自动生成JavaScript文件。*'
- en: 'Let''s run the application by pressing *F5*, and, if it builds successfully,
    you will get to see the output in the browser, as shown in the following screenshot:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按下*F5*键来运行应用程序，如果成功构建，您将看到浏览器中的输出，如下面的截图所示：
- en: '![](img/image_05_031.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_031.png)'
- en: The output of the application
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 应用的输出
- en: Note
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the inner text of the `<my-app>` tag is inserted with the content
    in `app.component.html`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`<my-app>`标签的内部文本是使用`app.component.html`中的内容插入的。
- en: Adding a Todo class
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加Todo类
- en: 'Our application deals with `Todo` items. So, let''s create a class named `Todo`
    and add properties such as `title` and `completed` to it, as illustrated:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用处理`Todo`项目。因此，让我们创建一个名为`Todo`的类，并向其添加`title`和`completed`属性，如下所示：
- en: '[PRE10]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This `Todo` class also has a constructor that takes `title` as a parameter and
    a method that sets the `todo` item as `completed`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Todo`类还有一个以`title`为参数的构造函数和一个设置`todo`项目为`completed`状态的方法。
- en: Adding a TodoService class
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个TodoService类
- en: '[PRE11]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We have created the `TodoService` class with various methods to add, remove,
    and return the collection of `todo` items.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了`TodoService`类，其中包含各种方法来添加、删除和返回`todo`项目的集合。
- en: Updating the AppComponent class
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新AppComponent类
- en: 'Now that we have the `TodoService` class in place, let''s update the `AppComponent`
    class, as shown, to consume the `TodoService` class:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有了`TodoService`类，让我们更新`AppComponent`类，如下所示，来消费`TodoService`类：
- en: '[PRE13]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that the metadataÂ `template` in the `@Component` has been replaced with
    the `templateUrl` and is assigned with an `AppComponent` template file `app.component.html`.
    As the template content is complex now, we need to introduce an HTML file for
    theÂ `AppComponent` view.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`@Component`里的metadata `template`已被替换为`templateUrl`，并且指定了一个`AppComponent`模板文件`app.component.html`。由于模板内容现在比较复杂，我们需要为`AppComponent`视图引入一个HTML文件。
- en: Updating the AppModule
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新AppModule
- en: '[PRE14]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Adding the AppComponent template
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加AppComponent模板
- en: '[PRE16]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, we applied two-way binding using `ngModel` to the input control
    in order to bind the new `todo` item, `title`. We assigned the `addTodo` method
    to the click event of the `Add` button to add a new `todo` item to the in-memory
    collection of `Todo` items in `todoService`. We applied `ngFor` to the `<li>`
    tag to iterate each `Todo` item in `todoService`. The checkbox rendered for each
    `Todo` item has its `click` event, the `checked` property mapped with the `toggleCompletion`
    method, and a `completed` property of the `Todo` item, respectively. Next, the
    remove button has its `click` event mapped with the `remove` method in `AppComponent`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们使用`ngModel`在输入控件上应用了双向绑定来绑定新的`todo`项目`title`。我们将`addTodo`方法分配给`Add`按钮的点击事件，以将新的`todo`项目添加到`todoService`中的内存中的`Todo`项目集合。我们对`<li>`标签应用了`ngFor`来迭代`todoService`中的每个`Todo`项目。为每个`Todo`项目呈现的复选框有其自己的`click`事件，`checked`属性与`toggleCompletion`方法，以及`Todo`项目的`completed`属性分别映射。接下来，删除按钮将其`click`事件映射为`AppComponent`中的`remove`方法。
- en: The footer tag has a span that displays the pending `Todo` items' count and
    a button to remove the completed `todo` items from the list. This button has a
    `click` event mapped with the `removeCompleted` method in `AppComponent`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: footer标签有一个显示待办`todo`项目数量的span，以及一个按钮来从列表中删除已完成的`todo`项目。该按钮的`click`事件与`AppComponent`中的`removeCompleted`方法相映射。
- en: 'Let''s run the application by pressing *F5*, and you will be able to perform
    all the operations, such as adding, removing, and listing `todo` items:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按下*F5*键来运行应用程序，您将能够执行所有操作，如添加，删除和列举`todo`项目：
- en: '![](img/image_05_032.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_05_032.png)'
- en: My Todo App operations
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我的Todo应用操作
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: '* * *'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Hurray! You actually learned the very important and core objective of the book
    in this chapter. Yes! I am talking about integrating Angular with .NET applications.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！你实际上在本章中学到了这本书非常重要且核心的目标。是的！我在谈论将Angular与.NET应用程序集成。
- en: We started the chapter by creating a new ASP.NET Core empty application and
    updated the `Startup` class to serve static and default pages for any request.
    Then, you learned about managing client-side packages using NPM in Visual Studio,
    and we managed to automate and run tasks using Gulp in Visual Studio.Â Next, you
    learned how to add the required components for the application and bootstrap it.
    Later, we designed a model class and a service class that handle the core business
    logic of the application. Finally, we designed a template to list the `Todo` items,
    and also, we added a few controls and hooked them to certain methods in `TodoService`
    and `AppComponent`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过创建一个新的ASP.NET Core空应用程序开始了这一章,并更新了`Startup`类以服务静态页面和默认页面。然后,您学习了如何在Visual
    Studio中使用NPM管理客户端包,我们还设法使用Visual Studio中的Gulp自动化和运行任务。接下来,您学习了如何添加应用程序所需的组件并将其引导。后来,我们设计了一个模型类和一个服务类来处理应用程序的核心业务逻辑。最后,我们设计了一个模板来列出`Todo`项目,并添加了一些控件并将它们挂钩到`TodoService`和`AppComponent`中的某些方法。
- en: This application only deals with the in-memory todo items. However, in the real-time
    application, we consume a service to add, delete, or fetch the `todo` items. In
    the next chapter, we will discuss how to create an ASP.NET Core Web API service
    that handles retrieving, saving, and deleting `todo` items and also consuming
    it from our Angular application that we just built.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序只处理内存中的待办事项。然而，在实时应用程序中,我们会使用一个服务来添加、删除或获取`todo`项目。在下一章中,我们将讨论如何创建一个ASP.NET
    Core Web API服务来处理检索、保存和删除`todo`项目,并从我们刚刚构建的Angular应用程序中使用它。
