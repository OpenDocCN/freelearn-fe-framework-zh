["```js\n// Import Angular bootstrap function\nimport {bootstrap} from '@angular/platform-browser-dynamic';\nimport {DataProvider} from '../data-access/data-provider';\n// Import our main app component\nimport {App} from './app';\n\nbootstrap(App, [\n DataProvider\n]);\n\n```", "```js\nimport {Injectable, Inject} from '@angular/core';\nimport {ReplaySubject} from 'rxjs/Rx';\nimport {DataProvider} from '../../../data-access/data-provider';\n\n@Injectable()\nexport class ProjectService {\n  constructor(@Inject(DataProvider) dataProvider) {\n    …\n  }\n}\n```", "```js\nthis.dataProvider = dataProvider;\nthis.projects = [];\n// We're exposing a replay subject that will emit events whenever \n// the projects list change\nthis.change = new ReplaySubject(1);\n\n```", "```js\n// Setting up our functional reactive subscription to receive\n// project changes from the database\nthis.projectsSubscription = this.dataProvider.getLiveChanges()\n  // First convert the change records to actual documents\n .map((change) => change.doc)\n  // Filter so that we only receive project documents\n .filter((document) => document.type === 'project')\n  // Finally we subscribe to the change observer and deal with \n  // project changes in the function parameter\n .subscribe((changedProject) => {\n    this.projects = this.projects.slice();\n    // On every project change we need to update our projects list \n    const projectIndex = this.projects.findIndex(\n      (project) => project._id === changedProject._id\n    );\n    if (projectIndex === -1) {\n      this.projects.push(changedProject);\n    } else {\n      this.projects.splice(projectIndex, 1, changedProject);\n    }\n // Emit an event on our replay subject\n this.change.next(this.projects);\n  });\n```", "```js\n.map((change) => change.doc)\n\n```", "```js\n.filter((document) => document.type === 'project')\n\n```", "```js\n.subscribe((changedProject) => {})\n\n```", "```js\nthis.change.next(this.projects);\n\n```", "```js\nimport {Component, ViewEncapsulation, Inject} from '@angular/core';\nimport {ProjectService} from './project/project-service/project-service';\nimport template from './app.html!text';\n\n@Component({\n  selector: 'ngc-app',\n  template,\n  encapsulation: ViewEncapsulation.None,\n  providers: [ProjectService]\n})\nexport class App {\n constructor(@Inject(ProjectService) projectService) {\n this.projectService = projectService;\n this.projects = [];\n\n    // Setting up our functional reactive subscription to receive \n    // project changes\n this.projectsSubscription = projectService.change\n // We subscribe to the change observer of our service\n .subscribe((projects) => {\n this.projects = projects;\n });\n }\n\n  // If this component gets destroyed, we need to remember to \n  // clean up the project subscription\n ngOnDestroy() {\n this.projectsSubscription.unsubscribe();\n }\n}\n```", "```js\nconst list = [1, 2, 3];\nconsole.log(list === list.reverse()); // true\n```", "```js\nconst list = [1, 2, 3];\nconsole.log(list === list.slice().reverse()); // false\n```", "```js\nclass Sum {\n  constructor(data) {\n this.data = data;\n this.data.sum = data.a + data.b;\n  }\n  getSum() {\n    return this.data.sum;\n  }\n}\n\nconst data = {a: 5, b: 8};\nvar sum = new Sum(data);\nconsole.log(sum.getSum()); // 13\nconsole.log(data.sum); // 13\n```", "```js\nlet originalString = 'Hello there!';\nlet modifiedString = originalString.replace(/e/g, 3);\nconsole.log(originalString); // Hello there!\nconsole.log(modifiedString); // H3llo th3r3!\n```", "```js\nimport {Component, ViewEncapsulation, Input, Output, EventEmitter, ChangeDetectionStrategy} from '@angular/core';\nimport template from './task-list.html!text';\nimport {Task} from './task/task';\nimport {EnterTask} from './enter-task/enter-task';\nimport {Toggle} from '../ui/toggle/toggle';\n\n@Component({\n  selector: 'ngc-task-list',\n  host: {\n    class: 'task-list'\n  },\n  template,\n  encapsulation: ViewEncapsulation.None,\n  directives: [Task, EnterTask, Toggle],\n changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskList {\n @Input() tasks;\n // Event emitter for emitting an event once the task list has \n // been changed\n @Output() tasksUpdated = new EventEmitter();\n\n  constructor() {\n    this.taskFilterList = ['all', 'open', 'done'];\n    this.selectedTaskFilter = 'all';\n  }\n\n  ngOnChanges(changes) {\n    if (changes.tasks) {\n      this.taskFilterChange(this.selectedTaskFilter);\n    }\n  }\n\n  taskFilterChange(filter) {\n    this.selectedTaskFilter = filter;\n    this.filteredTasks = this.tasks ? this.tasks.filter((task) => {\n        if (filter === 'all') {\n          return true;\n        } else if (filter === 'open') {\n          return !task.done;\n        } else {\n          return task.done;\n        }\n      }) : [];\n  }\n\n  // Function to add a new task\n  addTask(title) {\n const tasks = this.tasks.slice();\n tasks.push({ created: +new Date(), title, done: null });\n this.tasksUpdated.next(tasks);\n  }\n}\n```", "```js\n@Component({\n  selector: 'ngc-task-list',\n  …\n changeDetection: ChangeDetectionStrategy.OnPush\n})\n```", "```js\nimport {Component, Input, Output, EventEmitter, ViewEncapsulation, HostBinding, ChangeDetectionStrategy} from '@angular/core';\nimport template from './task.html!text';\nimport {Checkbox} from '../../ui/checkbox/checkbox';\n\n@Component({\n  selector: 'ngc-task',\n  host: {\n    class: 'task'\n  },\n  template,\n  encapsulation: ViewEncapsulation.None,\n  directives: [Checkbox],\n changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Task {\n @Input() task;\n // We are using an output to notify our parent about updates\n @Output() taskUpdated = new EventEmitter();\n\n  @HostBinding('class.task--done')\n  get done() {\n    return this.task && this.task.done;\n  }\n\n // We use this function to update the checked state of our task\n markDone(checked) {\n this.taskUpdated.next({\n title: this.task.title,\n done: checked ? +new Date() : null\n });\n }\n}\n```", "```js\nimport {Component, ViewEncapsulation, Input, Output, EventEmitter, ChangeDetectionStrategy} from '@angular/core';\nimport template from './project.html!text';\nimport {TaskList} from '../task-list/task-list';\n\n@Component({\n  selector: 'ngc-project',\n  host: {\n    class: 'project'\n  },\n  template,\n  encapsulation: ViewEncapsulation.None,\n directives: [TaskList],\n changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Project {\n @Input() title;\n @Input() description;\n @Input() tasks;\n @Output() projectUpdated = new EventEmitter();\n\n // This function should be called if the task list of the \n // project was updated\n updateTasks(tasks) {\n this.projectUpdated.next({\n title: this.title,\n description: this.description,\n tasks\n });\n  } \n}\n```", "```js\n<div class=\"project__l-header\">\n  <h2 class=\"project__title\">{{title}}</h2>\n  <p>{{description}}</p>\n</div>\n<ngc-task-list [tasks]=\"tasks\"\n (tasksUpdated)=\"updateTasks($event)\">\n</ngc-task-list>\n```", "```js\n@Component({\n  selector: 'child',\n  template: `\n    <article>\n      <header>\n        <h1><ng-content select=\"[data-header]\"></ng-content></h1>\n      </header>\n      <ng-content></ng-content>\n    </article>\n  `\n})\nexport class Child {}\n\n@Component({\n  selector: 'app',\n  template: `\n <child>\n <header data-header>Content projection is great</header>\n <p>Insert content in a controlled manner</p>\n </child>\n  `,\n  directives: [Child]\n})\nexport class App {}\n```", "```js\nimport {Component, Input, ViewEncapsulation, HostBinding} from '@angular/core';\nimport template from './tab.html!text';\n\n@Component({\n  selector: 'ngc-tab',\n  host: {\n    class: 'tabs__tab'\n  },\n  template,\n  encapsulation: ViewEncapsulation.None\n})\nexport class Tab {\n @Input() name;\n @HostBinding('class.tabs__tab--active') active = false;\n}\n```", "```js\n<ng-content></ng-content>\n\n```", "```js\nimport {Component, ViewEncapsulation, ContentChildren} from '@angular/core';\nimport template from './tabs.html!text';\n// We rely on the Tab component\nimport {Tab} from './tab/tab';\n\n@Component({\n  selector: 'ngc-tabs',\n  host: {\n    class: 'tabs'\n  },\n  template,\n  encapsulation: ViewEncapsulation.None,\n directives: [Tab]\n})\nexport class Tabs {\n // This queries the content inside <ng-content> and stores a \n // query list that will be updated if the content changes\n @ContentChildren(Tab) tabs;\n\n  // The ngAfterContentInit lifecycle hook will be called once the \n  // content inside <ng-content> was initialized\n ngAfterContentInit() {\n this.activateTab(this.tabs.first);\n }\n\n  activateTab(tab) {\n    // To activate a tab we first convert the live list to an \n    // array and deactivate all tabs before we set the new \n    // tab active\n this.tabs.toArray().forEach((t) => t.active = false);\n tab.active = true;\n  }\n} \n```", "```js\n<ul class=\"tabs__tab-list\">\n  <li *ngFor=\"let tab of tabs\">\n    <button class=\"tabs__tab-button\"\n [class.tabs__tab-button--active]=\"tab.active\"\n (click)=\"activateTab(tab)\">{{tab.name}}</button>\n  </li>\n</ul>\n<div class=\"tabs__l-container\">\n <ng-content select=\"ngc-tab\"></ng-content>\n</div>\n```", "```js\n<ngc-tabs>\n <ngc-tab name=\"Tasks\">\n    <ngc-task-list [tasks]=\"tasks\"\n                   (tasksUpdated)=\"updateTasks($event)\">\n    </ngc-task-list>\n </ngc-tab>\n <ngc-tab name=\"Comments\"></ngc-tab>\n <ngc-tab name=\"Activities\"></ngc-tab>\n</ngc-tabs>\n\n```", "```js\n// We rely on the navigation component to know if we are active\nimport {Navigation} from '../../navigation';\n\n@Component({\n  selector: 'ngc-navigation-item'\n})\nexport class NavigationItem {\n  @Input() title;\n  @Input() link;\n\n  constructor(@Inject(Navigation) navigation) {\n    this.navigation = navigation;\n  }\n\n  // Here, we are delegating to the navigation component to see if\n  // we are active or not\n  isActive() {\n return this.navigation.isItemActive(this);\n  }\n\n  // If this link is activated we need to tell the navigation component\n  onActivate() {\n this.navigation.activateLink(this.link);\n  }\n}\n```", "```js\n@Component({\n  selector: 'ngc-navigation-section',\n  directives: [NavigationItem]\n})\nexport class NavigationSection {\n  @Input() title;\n @Input() items;\n}\n```", "```js\n<h2 class=\"navigation-section__title\">{{title}}</h2>\n<ul class=\"navigation-section__list\">\n <ng-content select=\"ngc-navigation-item\"></ng-content>\n <ngc-navigation-item *ngFor=\"let item of items\"\n [title]=\"item.title\"\n [link]=\"item.link\"></ngc-navigation-item>\n</ul>\n```", "```js\nimport {NavigationSection} from './navigation-section/navigation-section';\n\n@Component({\n  selector: 'ngc-navigation',\n  directives: [NavigationSection]\n})\nexport class Navigation {\n @Input() activeLink;\n\n  // Checks if a given navigation item is currently active by its \n  // link. This function will be called by navigation item child \n  // components.\n isItemActive(item) {\n return item.link === this.activeLink;\n }\n\n  // If a link wants to be activated within the navigation, this \n  // function needs to be called. This way child navigation item \n  // components can activate themselves.\n activateLink(link) {\n this.activeLink = link;\n this.activeLinkChange.next(this.activeLink);\n }\n}\n```", "```js\n<div class=\"app\">\n  <div class=\"app__l-side\">\n <ngc-navigation \n [activeLink]=\"getSelectedProjectLink()\"\n (activeLinkChange)=\"selectProjectByLink($event)\">\n <ngc-navigation-section \n title=\"Projects\"\n [items]=\"getProjectNavigationItems()\">\n </ngc-navigation-section>\n </ngc-na\nvigation>\n  </div>\n  <div class=\"app__l-main\">\n    …\n  </div>\n</div>\n```"]