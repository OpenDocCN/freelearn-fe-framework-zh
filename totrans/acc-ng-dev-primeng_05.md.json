["```js\ninterface Listener {\n  callback: (value: any) => any;\n  element: Element;\n  name: string;\n  type: 'dom' | 'output';\n  useCapture: boolean;\n}\n```", "```js\ninterface DirectiveDebugMetadata {\n  inputs: Record<string, string>;\n  outputs: Record<string, string>;\n}\ninterface ComponentDebugMetadata extends DirectiveDebugMetadata {\n  changeDetection: ChangeDetectionStrategy;\n  encapsulation: ViewEncapsulation;\n}\n```", "```js\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'app-random-number',\n  templateUrl: './random-number.component.html',\n  styleUrls: ['./random-number.component.css'],\n})\nexport class RandomNumberComponent {\n  generatedNumber?: number;\n  onNumberGenerated(generatedNumber: number): void {\n    this.generatedNumber = generatedNumber;\n  }\n}\n```", "```js\n<ng-container\n  #generator=\"appRandomNumber\"\n  appRandomNumber\n  (numberGenerated)=\"onNumberGenerated($event)\"\n  ></ng-container>\n<mat-card>\n  <mat-card-header>\n    <mat-card-title>Random number generator</mat-card-\n     title>\n  </mat-card-header>\n  <mat-card-content>\n    <p>Your random number is {{ generatedNumber }}</p>\n  </mat-card-content>\n  <mat-card-actions>\n    <button mat-button (click)= \"generator.generateNumber()\">GENERATE</button>\n  </mat-card-actions>\n</mat-card>\n```", "```js\nng.getComponent($0);\n// -> MatButton\nng.getOwningComponent($0);\n// -> RandomNumberComponent\n```", "```js\nconst component = ng.getOwningComponent($0);\ncomponent.generatedNumber = 42;\n```", "```js\nng.applyChanges(component);\n```", "```js\nimport {\n  Directive, EventEmitter, OnInit, Output\n} from '@angular/core';\n@Directive({\n  exportAs: 'appRandomNumber',\n  selector: '[appRandomNumber]'\n})\nexport class RandomNumberDirective implements OnInit {\n  #generatedNumber?: number;\n  @Output()\n  numberGenerated = new EventEmitter<number>();\n  ngOnInit(): void {\n    this.generateNumber();\n  }\n  generateNumber(): void {\n    this.#generatedNumber = \n      Math.floor(1000 * Math.random());\n    this.numberGenerated.emit(this.#generatedNumber);\n  }\n}\n```", "```js\nconst [onButtonClick] = ng.getListeners($0);\n// onButtonClick -> Listener\nonButtonClick.callback();\n```", "```js\nconst component = ng.getOwningComponent($0);\nng.applyChanges(component);\n```", "```js\nconst [domListener, outputListener] = ng.getListeners($0);\n// domListener -> Listener { element: span, name: \"numberGenerated\", useCapture: false, type: \"dom\", callback: ƒ }\n// outputListener -> Listener { element: span, name: \"numberGenerated\", useCapture: false, type: \"output\", callback: ƒ }\n```", "```js\nconst component = ng.getOwningComponent($0);\noutputListener.callback(7);\nng.applyChanges(component);\n```", "```js\ninterface NgIfContext {\n  $implicit: boolean;\n  ngIf: boolean;\n}\n```", "```js\ninterface NgForOfContext<T> {\n  $implicit: T;\n  count: number;\n  index: number;\n  ngForOf: T[];\n  even: boolean;\n  first: boolean;\n  last: boolean;\n  odd: boolean;\n}\n```", "```js\n<ul>\n  <li *ngFor=\"let user of users; index as i; first as \n   isFirst\">\n    {{i}}/{{users.length}}.\n    {{user}} <span *ngIf=\"isFirst\">(default)</span>\n  </li>\n</ul>\n```", "```js\nconst listItems = document.querySelectorAll('li');\nng.getContext(listItems[0]);\n// -> NgForOfContext { $implicit: \"Nacho\", count: 4, index: 0, ngForOf: [\"Nacho\", \"Santosh\", \"Serkan\", \"Lars\"], even: true, first: true, last: false, odd: false }\nng.getContext(listItems[1]);\n// -> NgForOfContext { $implicit: \"Santosh\", count: 4, index: 1, ngForOf: [\"Nacho\", \"Santosh\", \"Serkan\", \"Lars\"], even: false, first: false, last: false, odd: true }\n```", "```js\nng.getContext(document.querySelector('span'));\n// -> NgIfContext { $implicit: true, ngIf: true }\n```"]