["```js\nyarn && yarn start\n```", "```js\nyarn start-server\n```", "```js\n    Ipconfig\n    ```", "```js\n    ipconfig getifaddr en0\n    ```", "```js\n192.168.1.107\n```", "```js\nexport default {\n    extra: {\n      apiUrl: 'http://LOCAL_IP_ADDRESS:3000',\n    },\n  };\n```", "```js\nimport React from 'react';\nimport { createContext, useReducer } from 'react';\nimport Constants from 'expo-constants';\nconst { apiUrl } = Constants.manifest.extra;\nexport const PostsContext = createContext();\n  // ...\n```", "```js\nchapter-9-initial  \n  |- /.expo\n  |- /.expo-shared   \n  |- /node_modules \n  |- /assets\n  |- /components \n     |- Button.js\n     |- FormItem.js\n     |- PostItem.js \n  |- /context \n     |- AppContext.js \n     |- PostsContext.js \n     |- UserContext.js \n  |- /screens \n     |- Login.js\n     |- PostDetail.js \n     |- PostForm.js\n     |- Posts.js\n     |- Profile.js\n  app.config.js\n  app.json  \n  App.js\n  babel.config.js\n  db.json\n  server.js\n```", "```js\n    yarn add @react-navigation/bottom-tabs\n    ```", "```js\n      import { StatusBar } from 'expo-status-bar';\n      import React from 'react';\n      import { NavigationContainer } from \n        '@react-navigation/native';\n      import { createStackNavigator } from \n        '@react-navigation/stack';\n    + import { createBottomTabNavigator } from \n        '@react-navigation/bottom-tabs';\n      // ...\n    ```", "```js\n      // ...\n    + const Tab = createBottomTabNavigator();\n    + function Home() {\n    +   return (\n    +     <Tab.Navigator>\n    +       <Stack.Screen \n    +         name='Posts' \n    +         component={Posts} \n    +         options={{ headerShown: false }}\n    +       />\n    +       <Stack.Screen \n    +         name='Profile' \n    +         component={Profile} \n    +         options={{ headerShown: false }}\n    +         />\n    +       <Stack.Screen \n    +         name='PostForm' \n    +         component={PostForm} \n    +         options={{ headerShown: false }}\n    +       />\n    +     </Tab.Navigator>\n    +   );\n    + }\n      export default function App() {\n        // ...\n    ```", "```js\n      export default function App() {\n        return (\n          <AppContext>\n            <NavigationContainer>\n              <StatusBar style='auto' />\n    -         <Stack.Navigator initialRouteName='Posts'>\n    -           <Stack.Screen name='Posts' \n                  component={Posts} />\n    -           <Stack.Screen name='Profile'\n                  component={Profile} />\n    -           <Stack.Screen name='PostForm' \n                  component={PostForm} />\n    +         <Stack.Navigator initialRouteName='Home'>\n    +           <Stack.Screen name='Home' component={Home} />\n                <Stack.Screen name='PostDetail'\n                  component={PostDetail} />\n                <Stack.Screen name='Login' \n                  component={Login} />\n              </Stack.Navigator>\n            </NavigationContainer>\n          </AppContext>\n        );\n      }\n    ```", "```js\n      import { StatusBar } from 'expo-status-bar';\n      import React from 'react';\n    - import { NavigationContainer } from \n       '@react-navigation/native';\n    + import { NavigationContainer,\n        getFocusedRouteNameFromRoute }\n          from '@react-navigation/native';\n\n      // ...\n\n      export default function App() {\n        return (\n          <AppContext>\n            <NavigationContainer>\n              <StatusBar style='auto' />\n              <Stack.Navigator>\n                <Stack.Screen\n                  name='Home'\n                  component={Home}\n    +             options={({ route }) => ({\n    +               headerTitle:\n                      getFocusedRouteNameFromRoute(route),\n    +             })}\n                />\n                <Stack.Screen name='PostDetail'\n                 component={PostDetail} />\n                <Stack.Screen name='Login'\n                 component={Login} />\n              </Stack.Navigator>\n            </NavigationContainer>\n          </AppContext>\n        );\n      }\n    ```", "```js\n      import { StatusBar } from 'expo-status-bar';\n      + import { FontAwesome } from '@expo/vector-icons';\n      import React from 'react';\n\n      // ...\n\n      function Home() {\n        return (\n          <Tab.Navigator\n    +       screenOptions={({ route }) => ({\n    +         tabBarActiveTintColor: 'blue',\n    +         tabBarInactiveTintColor: 'gray',\n    +         tabBarIcon: ({ color, size }) => {\n    +           const iconName =\n    +             (route.name === 'Posts' && 'feed') ||\n    +             (route.name === 'PostForm' && \n                    'plus-square') ||\n    +             (route.name === 'Profile' && 'user');\n    +            return <FontAwesome name={iconName} \n                   size={size} color={color} />;\n              },\n    +       })}\n          >\n            // ...\n          </Tab.Navigator>\n        );\n      }\n      // ...\n    ```", "```js\n      // ...\n      function Home() {\n        return (\n          <Tab.Navigator\n            // ...\n          >\n              <Stack.Screen\n              name='PostForm'\n              component={PostForm}\n              options={{\n                headerShown: false,\n    +           tabBarLabel: 'Add post',\n              }}\n            />\n            <Stack.Screen name='Profile' component={Profile} \n            />\n          </Tab.Navigator>\n        );\n      }\n      // ...\n    ```", "```js\n      // ...\n    + function Navigator() {\n    +   return (\n    +     <NavigationContainer>\n    +       <StatusBar style='auto' />\n    +       <Stack.Navigator>\n    +         <Stack.Screen name='Login' component={Login}\n              />\n    +         <Stack.Screen\n    +           name='Home'\n    +           component={Home}\n    +           options={({ route }) => ({\n    +             headerTitle:  \n                    getFocusedRouteNameFromRoute(route),\n    +           })}\n    +         />\n    +         <Stack.Screen name='PostDetail'\n                component={PostDetail} />\n    +       </Stack.Navigator>\n    +     </NavigationContainer>\n    +   );\n    + }\n      export default function App() {\n        // ...\n    ```", "```js\n      // ...\n      export default function App() {\n        return (\n          <AppContext>\n    -       // ...\n    +       <Navigator />\n          </AppContext>\n        );\n      }\n    ```", "```js\n      import { StatusBar } from 'expo-status-bar';\n      import { FontAwesome } from '@expo/vector-icons';\n    - import React from 'react';\n    + import React, { useContext } from 'react';\n      // ...\n      import AppContext from './context/AppContext';\n    + import UserContext from './context/UserContext';\n      const Stack = createStackNavigator();\n      const Tab = createBottomTabNavigator();\n      function Home() {\n        // ...\n    ```", "```js\n      // ...\n      function Navigator() {\n    +   const { user } = useContext(UserContext);\n        return (\n          <NavigationContainer>\n            <StatusBar style='auto' />\n    -       <Stack.Navigator>\n    +       <Stack.Navigator initialRouteName=\n              {user.token.length ? 'Home' : 'Login'}>\n              <Stack.Screen\n                   name='Home'\n                   // ...\n                  />\n                  <Stack.Screen name='PostDetail'\n                   component={PostDetail} />\n    <Stack.Screen name='Login' \n                   component={Login} />\n                )}\n              </Stack.Navigator>\n            </NavigationContainer>\n          );\n        }\n        export default function App() {\n        // ...\n    ```", "```js\n    + import { useNavigation } from \n       '@react-navigation/core';\n    + import React, { useContext, useState } from 'react';\n    - import React, { useContext, useEffect, useState } \n        from 'react';\n      // ...\n      export default function Login() {\n        const [username, setUsername] = useState('');\n        const [password, setPassword] = useState('');\n    -    const { error, loginUser } = \n           useContext(UserContext);\n    +    const { user, error, loginUser } = \n           useContext(UserContext);\n    +   const navigation = useNavigation();\n    +   useEffect(() => {\n    +     if (user.token) {\n    +       navigation.navigate('Home');\n    +     }\n    +   }, [user.token]);\n        return (\n         // ...\n    ```", "```js\n    expo install @react-native-async-storage/async-storage\n    ```", "```js\n      import React, { createContext, useReducer } \n        from 'react';\n    + import AsyncStorage from \n       '@react-native-community/async-storage';\n      import Constants from 'expo-constants';\n      // ...\n    ```", "```js\n      // ...\n      export const UserContextProvider = ({ children }) => {\n        const [state, dispatch] = useReducer(reducer,\n          initialState);\n        async function loginUser(username, password) {\n          try {\n            // ...\n            if (result) {\n              dispatch({ type: 'SET_USER_TOKEN',\n                         payload: result.token });\n    +         AsyncStorage.setItem('token', result.token);\n            }\n          } catch (e) {\n            dispatch({ type: 'SET_USER_ERROR',\n                       payload: e.message });\n          }\n        }\n        // ...\n    ```", "```js\n        // ...  \n    +   async function getToken() {\n    +     try {\n    +       const token = \n              await AsyncStorage.getItem('token');\n    +       if (token !== null) {\n    +         dispatch({ type: 'SET_USER_TOKEN', \n                        payload: token });\n    +       }\n    +     } catch (e) {}\n    +   }\n        return (\n    -     <UserContext.Provider value={{ ...state, \n            loginUser, logoutUser }}>\n    +     <UserContext.Provider value={{ ...state, \n            loginUser, logoutUser, getToken }}>\n            {children}\n          </UserContext.Provider>\n        );\n      };\n      export default UserContext;\n    ```", "```js\n      import { StatusBar } from 'expo-status-bar';\n      import { FontAwesome } from '@expo/vector-icons';\n    - import React, { useContext } from 'react';\n    + import React, { useContext, useEffect } from 'react';\n      // ...\n      function Navigator() {\n    -   const { user } = useContext(UserContext);\n    +   const { user, getToken } =\n          useContext(UserContext);\n    +   useEffect(() => {\n    +     getToken();\n    +   }, []);\n        return (\n          // ...\n    ```", "```js\n      // ...\n      async function logoutUser() {\n    +   try {\n    +     await AsyncStorage.removeItem('token');\n          dispatch({ type: 'REMOVE_USER_TOKEN' });\n    +   } catch (e) { }\n      }\n      async function getToken() {\n        // ...\n    ```", "```js\n    import React, { createRef } from 'react';\n    export const navigationRef = createRef(); \n    ```", "```js\n      // ...\n      import AppContext from './context/AppContext';\n      import UserContext from './context/UserContext';\n    + import { navigationRef } from './routing';\n\n       // ...\n      function Navigator() {\n        const { user, getToken } = \n          useContext(UserContext);\n        // ...\n        return (\n    -     <NavigationContainer>\n    +     <NavigationContainer ref={navigationRef}>\n            // ...\n    ```", "```js\n      // ...\n    + import { navigationRef } from '../routing';\n      export default function Profile() {\n        const { logoutUser } = useContext(UserContext);\n        return (\n          <View style={styles.container}>\n            <Button\n              onPress={() => {\n                logoutUser();\n    +           navigationRef.current.reset({\n    +             index: 0,\n    +             routes: [{ name: 'Login' }],\n    +           });\n              }}\n              label='Logout'\n            />\n          </View>\n        );\n      }\n      // ...\n    ```", "```js\n    expo install expo-image-picker\n    ```", "```js\n      import React, { useContext, useState } from 'react';\n      import { StyleSheet, TouchableOpacity, View, Text,\n        KeyboardAvoidingView, Platform, Alert, Image } from \n          'react-native';\n    + import * as ImagePicker from 'expo-image-picker';\n      // ...\n      export default function PostForm() {\n        // ...\n    +   async function uploadImage() {\n    +     const { status } = await ImagePicker\n            .requestMediaLibraryPermissionsAsync();\n    +     if (status !== 'granted') {\n    +       Alert.alert('Sorry', 'We need camera roll \n              permissions to make this work!');\n    +     }\n    +   }\n        return (\n          // ...\n    ```", "```js\n      // ...\n      return (\n        <KeyboardAvoidingView\n          behavior={Platform.OS == 'ios' ? 'padding' :\n         'height'}\n          style={styles.container}\n        >\n          <View style={styles.form}>\n            <TouchableOpacity\n    +         onPress={() => uploadImage()}\n              style={styles.imageButton}\n            >\n              <Text style={styles.imageButtonText}>+\n              </Text>\n            </TouchableOpacity>\n            // ...\n    ```", "```js\n      // ...\n      async function uploadImage() {\n        const { status } = await ImagePicker\n          .requestMediaLibraryPermissionsAsync();\n        if (status !== 'granted') {\n          Alert.alert(\n            'Sorry',\n            'We need camera roll permissions to make this \n             work!',\n          );\n    +   } else {\n    +     const result = \n            await ImagePicker.launchImageLibraryAsync({\n    +       mediaTypes: ImagePicker.MediaTypeOptions.All,\n    +       allowsEditing: true,\n    +       aspect: [4, 3],\n    +       quality: 1,\n    +     });\n    +     if (!result.cancelled) {\n    +       setImageUrl(result.uri);\n    +     }\n        }\n      }\n      return (\n        // ...\n    ```", "```js\n      // ...\n      return (\n        <KeyboardAvoidingView\n          behavior={Platform.OS == 'ios' ? 'padding' :\n            'height'}\n          style={styles.container}\n        >\n          <View style={styles.form}>\n            <TouchableOpacity onPress={() =>\n              uploadImage()} style={styles.imageButton}>\n    +         {imageUrl.length ? (\n    +           <Image\n    +             source={{ uri: imageUrl }}\n    +             style={{ width: '100%', height: '100%' \n                        }}\n    +           />\n    +         ) : (\n                <Text style={styles.imageButtonText}>+</Text>\n    +         )}\n            </TouchableOpacity>\n            // ...\n    ```", "```js\n    yarn add @expo/react-native-action-sheet\n    ```", "```js\n      import { StatusBar } from 'expo-status-bar';\n      import { FontAwesome } from '@expo/vector-icons';\n      import React, { useContext, useEffect } from 'react';\n      import { NavigationContainer, \n        getFocusedRouteNameFromRoute } \n        from '@react-navigation/native';\n      import { createNativeStackNavigator } \n        from '@react-navigation/native-stack';\n      import { createBottomTabNavigator } \n        from '@react-navigation/bottom-tabs';\n    + import { ActionSheetProvider } \n        from '@expo/react-native-action-sheet';\n      // ...\n    ```", "```js\n      function Home() {\n        return (\n    +     <ActionSheetProvider>\n            // ...\n    +     </ActionSheetProvider>\n        );\n      }\n      function Navigator() {\n        // ...\n    ```", "```js\n      // ...\n      import * as ImagePicker from 'expo-image-picker';\n    + import { useActionSheet } from \n       '@expo/react-native-action-sheet';\n      import { useNavigation } from '@react-navigation/core';\n      import Button from '../components/Button';\n      import FormInput from '../components/FormInput';\n      import PostsContext from '../context/PostsContext';\n      export default function PostForm() {\n        // ...\n    ```", "```js\n      // ...\n      export default function PostForm() {\n        // ...\n        const { addPost } = useContext(PostsContext);\n        const navigation = useNavigation();\n    +   const { showActionSheetWithOptions } = \n          useActionSheet();\n        // ...\n    +   function openActionSheet() {\n    +     const options = ['Camera roll', 'Camera',\n            'Cancel'];\n    +     const cancelButtonIndex = 2;\n    +     showActionSheetWithOptions(\n    +       { options, cancelButtonIndex },\n    +       (buttonIndex) => {\n    +         if (buttonIndex === 0) {\n    +           uploadImage()\n    +         }\n    +       },\n    +     );\n    +   }\n        return (\n          // ...\n    ```", "```js\n      // ...\n    + async function takePicture() {\n    +   const { status } = await \n          ImagePicker.requestCameraPermissionsAsync();\n    +   if (status !== 'granted') {\n    +     Alert.alert('Sorry', 'We need camera permissions \n            to make this work!');\n    +   } else {\n    +     const result = \n            await ImagePicker. launchCameraAsync ({\n    +       mediaTypes: ImagePicker.MediaTypeOptions.All,\n    +       aspect: [4, 3],\n    +       quality: 1,\n    +     });\n    +     if (!result.cancelled) {\n    +       setImageUrl(result.uri);\n    +     }\n    +   }\n    + }\n      function openActionSheet() {\n        // ...\n    ```", "```js\n      // ...\n      return (\n        <KeyboardAvoidingView\n          behavior={Platform.OS == 'ios' ? 'padding' : \n            'height'}\n          style={styles.container}\n        >\n          <View style={styles.form}>\n            <TouchableOpacity\n    -         onPress={() => uploadImage()}\n    +         onPress={() => openActionSheet()}\n              style={styles.imageButton}\n            >\n            // ...\n    ```", "```js\n      import { StatusBar } from 'expo-status-bar';\n      import { \n        FontAwesome,\n    +   MaterialIcons, \n      } from '@expo/vector-icons';\n      import React, { useContext, useEffect } \n        from 'react';\n    + import { Platform } from 'react-native';\n      // ...\n    ```", "```js\n      // ...\n      function Home() {\n        return (\n          <ActionSheetProvider>\n            <Tab.Navigator\n              // ...\n              screenOptions={({ route }) => ({\n                tabBarIcon: ({ color, size }) => {\n                  // ...\n    -             return <FontAwesome name={iconName} \n                    size={size} color={color} />;\n    +             return Platform.OS === 'ios' ? (\n    +               <FontAwesome name={iconName} \n                     size={size} color={color} />\n    +             ) : (\n    +               <MaterialIcons name={iconName} \n                      size={size} color={color} />\n    +           );\n              },\n            })}\n          >\n          // ...\n    ```", "```js\n      // ...\n      function Home() {\n        return (\n          <ActionSheetProvider>\n            <Tab.Navigator\n              // ...\n              screenOptions={({ route }) => ({\n                tabBarIcon: ({ color, size }) => {\n                  const iconName =\n    -               (route.name === 'Posts' && 'feed') ||\n    -               (route.name === 'PostForm' && \n                     'plus-square') ||\n    -               (route.name === 'Profile' && 'user');\n    +               (route.name === 'Posts' &&\n    +                 (Platform.OS === 'ios' ? 'feed' :\n                       'rss-feed')) ||\n    +               (route.name === 'PostForm' &&\n    +                 (Platform.OS === 'ios' ? \n                       'plus-square' : 'add-box')) ||\n    +               (route.name === 'Profile' &&\n                      (Platform.OS === 'ios' ? 'user' :\n                       'person'));\n                  return Platform.OS === 'ios' ? (\n                    // ...\n    ```", "```js\n      import React from 'react';\n      import {\n        StyleSheet,\n        TouchableOpacity,\n        View,\n        Text,\n    +   Platform,\n      } from 'react-native';\n      export default function Button({ onPress, label }) {\n        // ...\n    ```", "```js\n      // ... \n      const styles = StyleSheet.create({\n        button: {\n          width: '100%',\n          padding: 20,\n          borderRadius: 5,\n    -     backgroundColor: 'blue',\n    +     ...Platform.select({\n    +       ios: {\n    +         backgroundColor: 'blue',\n    +       },\n    +       android: {\n    +         backgroundColor: 'purple',\n    +       },\n          }),\n        },\n        // ...\n    ```", "```js\n    import React from 'react';\n    import { StyleSheet, Text, Dimensions, Image, View }\n      from 'react-native';\n    const PostItem = ({ data }) => (\n      <View style={styles.container}>\n        <View style={styles.details}>\n          <Text>{data.description}</Text>\n        </View>\n        <Image source={{ uri: data.imageUrl }} \n         style={styles.thumbnail} />\n      </View>\n    );\n    ```", "```js\n    // ...\n    const styles = StyleSheet.create({\n      container: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        backgroundColor: 'white',\n        borderWidth: 1,\n        borderColor: '#ccc',\n        marginBottom: '2%',\n      },\n      thumbnail: {\n        width: Dimensions.get('window').width * 0.98,\n        height: Dimensions.get('window').width * 0.98,\n        margin: Dimensions.get('window').width * 0.01,\n      },\n      details: {\n        width: '95%',\n        margin: '2%',\n      },\n    });\n    export default PostItem;\n    ```", "```js\n    // ...\n    const styles = StyleSheet.create({\n      container: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        backgroundColor: 'white',\n    shadowRadius rule, while Android uses the elevation rule. \n    ```", "```js\n    // ...\n    const styles = StyleSheet.create({\n      // ...\n      thumbnail: {\n    -   width: Dimensions.get('window').width * 0.98,\n    -   height: Dimensions.get('window').width * 0.98,\n    +   width: Dimensions.get('window').width * 0.94,\n    +   height: Dimensions.get('window').width * 0.94,\n        margin: Dimensions.get('window').width * 0.01,\n      },\n    ```"]