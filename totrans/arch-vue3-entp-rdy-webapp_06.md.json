["```js\n  ```", "```js\n```", "```js\n```", "```js\n```", "```js\n<template>\n <main>\n   <Header></Header>\n   <section style=\"mt-20\">\n     <Cards />\n   </section>\n </main>\n</template>\n<script setup>\nimport Header from '../organisms/Header.vue'\nimport Cards from '../organisms/Cards.vue'\n</script>\n```", "```js\n<template>\n <div class=\"pin_container sm:justify-center\">\n   <div class=\"card card_small h-[16.25rem] relative\">\n     <!-- // Medium -->\n     <Card />\n   </div>\n   <div class=\"card card_medium h-[20.625rem] relative\">\n     <!-- // Small -->\n     <Card />\n   </div>\n   <div class=\"card card_large h-[28.125rem] relative\">\n     <!-- // Smaller -->\n     <Card />\n   </div>\n   <div class=\"card card_smaller h-[11.063rem] relative\">\n     <!-- // Medium -->\n     <Card />\n   </div>\n   <div class=\"card card_small h-[16.25rem] relative\">\n     <!-- // Large -->\n     <Card />\n   </div>\n </div>\n</template>\n<script setup>\nimport Card from '../molecules/Card.vue';\n</script>\n```", "```js\n```", "```js\n\nBecause of the `index.js` file inside the `graphql` folder, the folder location is shortened a little; you can reduce it more depending on your use case.\n\nThis is why it is important to always add an export inside the `index.js` file for any GraphQL mutation or query created.\n\nThe following steps show you how to implement logging authentication with GraphQL in our Pinterest clone application example.\n\n**Step 1**\n\nWhen a user tries to log in, we execute the `loginUser` function to retrieve some user-specific data:\n\n```", "```js\n\n**Step 2**\n\nThe `loginUser` function executes the `LOGIN_USER` mutation we imported using the `useMutation` hook imported from the Apollo Composable library as follows:\n\n```", "```js\n\n**Code walkthrough**\n\nIf you haven’t used GraphQL with Vue.js before, here is a quick walkthrough.\n\n`useMutation` executes any mutation using the information passed in the `variables` object:\n\n```", "```js\n\nEvery `useMutation` execution returns the `mutate` function, which we rename to the name of the executed mutation called when our users try to log in. The `loginUser` function executes the `LOGIN_USER` mutation and returns the data.\n\nThis example demonstrates how we execute a single mutation; we will use this approach throughout the project to execute all the mutations.\n\n### Implementing queries with a Photo example\n\nNext, we are going to learn how to implement a query operation, and we will look at how to handle GraphQL queries in Vue 3\\. To do this, follow these steps:\n\n1.  First, let’s define the `GET_PINS` query inside the `/graphql/photos/queries.js` file to retrieve all the pins for a particular board:\n\n    ```", "```js\n\n2.  Next, we will use the `useQuery` hook to execute this GraphQL query and return the data to a variable. As usual, we imported the `GET_PINS` query and the `useQuery` hook from their respective locations:\n\n    ```", "```js\n\n3.  Next, we created a user-facing function called `getBoardPins`, which executes our query to retrieve and return the respective queries:\n\n    ```", "```js\n\n4.  Lastly, the `getPins` function executes the GraphQL query with the required variables and returns the result, as shown in the following snippet:\n\n    ```"]