- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with Internationalization and Localization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the digital age, applications are accessed by users from every corner of
    the world. Catering to a global audience requires more than just translating content;
    it’s about providing a seamless user experience that respects cultural nuances
    and user preferences. Ensuring that your application speaks the user’s language,
    both literally and figuratively, can significantly enhance user satisfaction and
    engagement.
  prefs: []
  type: TYPE_NORMAL
- en: So, throughout this chapter, our primary objective is to equip you with the
    knowledge and tools necessary to make your applications universally accessible
    and user-friendly. We’ll do this by deeply exploring the realms of internationalization
    and localization, guiding you through the process of making your Angular applications
    globally friendly with the aid of PrimeNG components. By the end of this chapter,
    you’ll be adept at configuring language support, ensuring your application resonates
    with users irrespective of their geographical or cultural background.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing internationalization and localization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring popular internationalization libraries for Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with ngx-translate for internationalization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with PrimeNG Locale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains various working code samples on internationalization
    and localization. You can find the related source code in the `chapter-12` folder
    of the following GitHub repository: [https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-12](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-12).'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing internationalization and localization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the realm of global web development, ensuring that applications cater to
    a worldwide audience is paramount. This is where **internationalization** (**i18n**)
    and **localization** (**l10n**) come into play, especially in the context of **Angular**
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing internationalization (i18n) in Angular applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Internationalization, often abbreviated as i18n (because there are 18 letters
    between the ‘i’ and the ‘n’), is the process of designing and preparing your application
    to be usable in different languages. For instance, i18n requires considering language
    and cultural variations during product design, including the use of **Unicode**
    character encoding, avoiding hardcoded text, and allowing sufficient room for
    text expansion.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Unicode provides universal character encoding, which means that each character
    is assigned a unique code point regardless of the platform, language, or application.
    It ensures that software can handle and display text from different languages
    and scripts, making applications accessible and usable across diverse linguistic
    and cultural contexts. You can read more at [https://unicode.org](https://unicode.org).
  prefs: []
  type: TYPE_NORMAL
- en: There are a plethora of Angular libraries that can support this, allowing you
    to define translations for the content and switch between them seamlessly. We
    will look at these libraries shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the role of localization (l10n) in creating multi-lingual experiences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Localization, abbreviated as l10n (as there are 10 letters between ‘l’ and ‘n’),
    is the subsequent step after i18n. It involves adapting the internationalized
    application for a specific region or language by adding locale-specific translations
    and adjusting formats. In essence, while i18n is about making an application translatable,
    l10n is about doing the actual translation and adaptation.
  prefs: []
  type: TYPE_NORMAL
- en: In Angular, once the translations are provided, the application can be compiled
    with these translations to produce a version of the application for a specific
    language or locale.
  prefs: []
  type: TYPE_NORMAL
- en: Challenges and considerations for designing internationally friendly applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating an application that resonates with a global audience is not without
    its challenges:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Text expansion**: Some languages might have longer translations for the same
    content. For example, in English, “I’m happy” can be translated as “*Tôi đang
    cảm thấy hạnh phúc*” in Vietnamese; this can cause the UI layout to be affected
    if not properly handled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Right-to-left languages**: Languages, such as Arabic or Hebrew, are written
    from right to left, which can require significant layout adjustments. For example,
    the menu items that were originally on the left side need to be moved to the right
    side in Arabic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cultural nuances**: Colors, symbols, and images might have different cultural
    connotations in different regions. For example, a thumbs-up gesture is commonly
    used to indicate approval in Western cultures, but it can be offensive or inappropriate
    in some other countries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Date, time, and number formats**: Different regions have different formats
    for displaying dates, times, and numbers. For example, in the United States, the
    date format is typically “mm/dd/yyyy”, whereas in many European countries, it’s
    “dd/mm/yyyy”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Translation management**: Managing translations efficiently can be challenging,
    especially in large-scale applications with numerous text strings. For instance,
    using translation management systems can provide features, such as translation
    memory, where previously translated phrases are stored and reused, reducing the
    effort and time required for translating repetitive content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Always be aware of cultural nuances; what’s acceptable or neutral in one culture
    might be offensive in another.
  prefs: []
  type: TYPE_NORMAL
- en: When working with Angular, it’s beneficial to be aware of these challenges from
    the outset. By doing so, you can design your application in a way that minimizes
    potential issues when adding support for new languages or regions.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring popular internationalization libraries for Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: i18n is a crucial aspect of building Angular applications that cater to a global
    audience. Fortunately, there are several reliable i18n libraries available for
    Angular that simplify the process of translating and localizing applications.
    In this section, we will explore some popular i18n libraries for Angular, including
    `@angular/localize`, `ngx-translate`, `@ngneat/transloco`, and `angular-i18next`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the current stats of those libraries from NPM trends:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 - Angular i18n library stats from NPM trends](img/B18805_12_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.1 - Angular i18n library stats from NPM trends
  prefs: []
  type: TYPE_NORMAL
- en: From the trend, it is evident that `@angular/localize` and `ngx-translate` are
    the prominent players with approximately 500,000 downloads per day, whereas `@ngneat/transloco`
    receives around 100,000 downloads per day and `angular-i18next` about 13,000 downloads
    per day. The latest updates also have been made to `@angular/localize` and `@ngneat/transloco`.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Considering security-related vulnerabilities and updates is a crucial aspect
    when selecting a third-party library. You can assess these factors by referring
    to [https://snyk.io/advisor](https://snyk.io/advisor).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s compare their features, discuss their pros and cons, and provide recommendations
    for different scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: '@angular/localize'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`@angular/localize` leverages Angular’s compiler to extract and replace translatable
    text in templates. Here are some key features:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@angular/localize` performs translation during the build process by statically
    analyzing templates. This approach allows for efficient translations and eliminates
    the need for runtime translation libraries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng extract-i18n`) that extracts translatable text from the application’s templates
    and generates translation files. These files can then be translated by language
    experts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@angular/localize` supports pluralization and gender agreement by providing
    special syntax in template expressions. This allows for accurate translations
    in various linguistic contexts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are some disadvantages, though:'
  prefs: []
  type: TYPE_NORMAL
- en: Requires a compilation step during the build process, which may increase build
    times for larger applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has limited support for dynamic content translation and runtime language switching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In general, `@angular/localize` is suitable for projects where efficient translation
    during the build process is a priority and dynamic translation or runtime language
    switching is not a requirement.
  prefs: []
  type: TYPE_NORMAL
- en: ngx-translate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**ngx-translate** ([https://github.com/ngx-translate/core](https://github.com/ngx-translate/core))
    is a popular third-party i18n library for Angular, providing a flexible and feature-rich
    solution for translating Angular applications. Here are some notable features:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ngx-translate` performs translations at runtime, allowing for dynamic language
    switching and on-the-fly translation updates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Translation loading**: Translations can be loaded from various sources, including
    JSON files, APIs, and even inline definitions. This flexibility makes it easy
    to integrate with different translation management systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ngx-translate` supports pluralization and variable substitution in translations,
    providing rich language-specific functionalities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some disadvantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Splitting translations doesn’t work well, and the setup is complicated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a translation at runtime may result in the **flash of content** (**FOC**)
    effect, where translations are loaded and applied, potentially causing a momentary
    visual flash
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In general, `ngx-translate` is suitable for projects that require dynamic translation
    updates, runtime language switching, and flexible translation loading.
  prefs: []
  type: TYPE_NORMAL
- en: '@ngneat/transloco'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**@ngneat/transloco** ([https://ngneat.github.io/transloco](https://ngneat.github.io/transloco))
    is a relatively new i18n library for Angular that aims to provide a flexible and
    scalable approach to translations. It offers unique features and a modern approach
    to i18n. Here are its key features:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@ngneat/transloco` supports the lazy loading of translation files, allowing
    for the optimized loading of translations. This is particularly beneficial for
    large applications with a significant number of translatable texts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@ngneat/transloco` allows for scoping translations to specific components
    or modules. This feature is useful when different parts of an application require
    different translation sets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@ngneat/transloco` provides support for in-line translations, allowing developers
    to define translations directly in the template. This feature simplifies the translation
    process and reduces the need for separate translation files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There’s just one main disadvantage:'
  prefs: []
  type: TYPE_NORMAL
- en: It is a less popular library with a smaller community compared to other established
    i18n libraries. Since it has a smaller community, there may be fewer available
    resources, tutorials, and examples to help developers get started and troubleshoot
    issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In general, `@ngneat/transloco` is suitable for projects that require the lazy
    loading of translations, scoped translations, and a modern approach to i18n.
  prefs: []
  type: TYPE_NORMAL
- en: angular-i18next
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`angular-i18next` ([https://github.com/Romanchuk/angular-i18next](https://github.com/Romanchuk/angular-i18next))
    is an integration library that combines the powerful `i18next` library with Angular.
    `i18next` is a widely used i18n library in the JavaScript ecosystem. Here are
    some notable features of `angular-i18next`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`angular-i18next` leverages the extensive feature set of `i18next`, including
    support for interpolation, pluralization, context, and much more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flexible translation sources**: Translations can be loaded from various sources,
    such as JSON, XHR, or even from a backend API. This flexibility makes it easy
    to integrate with different translation management systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`angular-i18next` provides additional l10n features, such as date and number
    formatting, that can be beneficial in certain scenarios.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some disadvantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Requires familiarity with both Angular and `i18next`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is complicated, with a huge bundle size compared to the others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In general, `angular-i18next` is suitable for projects that require extensive
    i18n features, flexibility in translation loading, and additional l10n functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that these comparisons and recommendations are not exhaustive,
    and the suitability of a library may vary depending on specific project requirements
    and constraints. You should carefully evaluate the features, trade-offs, and community
    support of each library before making a decision.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming section, we will explore i18n using the `ngx-translate` library,
    which is also prominently featured on the official PrimeNG website.
  prefs: []
  type: TYPE_NORMAL
- en: Working with ngx-translate for internationalization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By building upon the previous section, `ngx-translate` offers a simple and adaptable
    method for translating Angular applications. In this section, we will delve into
    the steps of integrating ngx-translate into an Angular application and provide
    valuable insights and strategies for maximizing productivity with ngx-translate.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating ngx-translate into an Angular application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with `ngx-translate`, follow these steps to integrate it into
    your Angular application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install the `ngx-translate` library. Open a terminal and navigate to
    your Angular project’s root directory. Then, run the following command to install
    `ngx-translate`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will install the `core` and `http-loader` package for initializing
    and loading the translation from the files using `HttpClient`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In your Angular application, open the `app.config.ts` file and import the necessary
    modules and configurations from `ngx-translate`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The provided code is responsible for configuring and providing translation
    functionality using `ngx-translate` in an Angular application. Let’s break it
    down to understand its purpose:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`export function HttpLoaderFactory() {...}`: This code exports a factory function
    called `HttpLoaderFactory`. This function is used to create an instance of the
    `TranslateHttpLoader` class, which is responsible for loading translation files
    using the HTTP protocol from the `/assets/i18n/[lang].json` file (in this case,
    lang is `en`). It takes an instance of the `HttpClient` class as a parameter and
    returns a new `TranslateHttpLoader` instance.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`export const provideTranslation =` `()...`: This function returns the result
    of calling `makeEnvironmentProviders`, which is a utility function provided by
    Angular for generating providers. This function imports the providers from the
    `TranslateModule.forRoot({...})` method, which is responsible for configuring
    the `ngx-translate` module at the application level with the following configuration:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`defaultLanguage:` `''en''`: This option indicates that English is the default
    language. For larger projects, it’s advisable to adopt the `<language>-<REGION>`
    pattern, e.g., `en-US` (English (United States)) or `en-CA` (English (Canada)).
    As a company expands, there might be a requirement to accommodate similar languages
    with variations in different regions.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loader:` `{...}`: This property sets the provide property to `TranslateLoader`,
    indicating that the `TranslateLoader` class is used for translation loading. The
    `useFactory` property is set to `HttpLoaderFactory`, which is the factory function
    defined earlier. The `deps` property specifies the dependencies required by the
    factory function, in this case, `HttpClient`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`export const appConfig...`: The `provideHttpClient()` and `provideTranslation()`
    providers are added to the application’s dependency injection system, making `HttpClient`
    and the translation functionality available throughout the application.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create translation files for each supported language. For example, create a
    `en.json` file for English translations and a `vi.json` file for Vietnamese translations.
    Place these files in an appropriate directory, such as `src/assets/i18n/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The translation files should follow a key-value structure, where the keys represent
    the translation keys, and the values represent the translated text. Here is an
    example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you can use the `translate` pipe to translate text in your Angular templates.
    Simply add the `translate` pipe to the text you want to translate, passing the
    translation key as an argument. Here is an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By importing the `TranslateModule`, you will have access to the `translate`
    pipe, which will replace the translation keys with the corresponding translated
    text.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s have a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2 – Example of English translation using ngx-translate](img/B18805_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.2 – Example of English translation using ngx-translate
  prefs: []
  type: TYPE_NORMAL
- en: From the image, we can see that the `translate` pipe is working correctly. The
    `greeting` key now becomes `Hello!` from the `en.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks for working with ngx-translate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work effectively with `ngx-translate`, consider the following tips and tricks:'
  prefs: []
  type: TYPE_NORMAL
- en: Language switching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`ngx-translate` provides a convenient method for switching between different
    languages at runtime. You can achieve this by using the “use” method of `TranslateService`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take the following `LanguageComponent` as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The provided code is a shared component that represents a language selector
    dropdown using PrimeNG’s `DropdownModule` and ngx-translate’s `TranslateService`.
    Let’s break it down more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-dropdown ... />`: This code uses PrimeNG’s `p-dropdown` component to render
    a dropdown list. The options property is bound to the `languages` array, which
    contains an array of language objects. The `optionLabel` property specifies the
    property to use as the `label` for each option, and the `optionValue` property
    specifies the property to use as the `value` for each option. The `(onChange)`
    event binding calls the `switchLanguage()` method when the dropdown selection
    changes, passing the `event` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`switchLanguage(event) {...}`: This method is called when the dropdown selection
    changes. It receives the `event` object of type `DropdownChangeEvent` and uses
    `translationService` to switch the active language to the selected value from
    the dropdown menu.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3 – Switch language to Vietnamese](img/B18805_12_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.3 – Switch language to Vietnamese
  prefs: []
  type: TYPE_NORMAL
- en: From the image, you can see that when we switch the language from English to
    Vietnamese, the application dynamically loads the `vi.json` file containing the
    translated Vietnamese version. Consequently, the changes are promptly reflected
    at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Lazy loading
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`ngx-translate` provides a useful feature called lazy loading, which allows
    translations to be loaded on-demand when they are needed. This feature is particularly
    beneficial for large applications with multiple languages, as it helps optimize
    the initial loading time by only loading translations when they are required.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable lazy loading in `ngx-translate`, you need to modify the translation
    loader configuration. Instead of loading all translation files upfront, you can
    set up the loader to load translations dynamically as they are requested. Here
    is an example of the translation files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4 – Reorganize translation files](img/B18805_12_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.4 – Reorganize translation files
  prefs: []
  type: TYPE_NORMAL
- en: Based on the image, we transfer all the translation content located at the root
    level to the `assets/i18n/main` directory. As for the translation files for the
    lazy-loaded components, we can store them in a separate path, such as `assets/i18n/lazy`,
    which will be loaded as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the updated code for our main translation loader:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the path for loading the translation files changed from `./assets/i18n`
    to `./assets/i18n/main`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we create the translation configuration for the lazy loading components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the code snippet, the configuration for lazy loading translation is the
    same as the main configuration (`translation.provider.ts`). However, there are
    some differences:'
  prefs: []
  type: TYPE_NORMAL
- en: '`function HttpLoaderFactory(http: HttpClient) { ... }`: The function returns
    a new instance of `TranslateHttpLoader`, configured to load translation files
    from the `''./assets/i18n/lazy/''` directory with a `.json` file extension.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TranslateModule.forChild({..})`: This function is for the lazy load module/route.
    It takes an `options` object containing various configuration properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isolate: true`: This indicates that the translations should be isolated for
    the lazy-loaded module, meaning they won’t be shared with other modules'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useFactory: HttpLoaderFactory`: This specifies the translation loaders that
    will load the translation files from `HttpLoaderFactory` configuration'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`providers: [provideLazyTranslation()]`: This specifies an array of providers
    for this route. In this case, it includes the result of calling the `provideLazyTranslation()`
    function, which will trigger the lazy loading translations process, as explained
    in the previous code explanation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s have a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5 – Lazy load translation](img/B18805_12_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.5 – Lazy load translation
  prefs: []
  type: TYPE_NORMAL
- en: Now, in the image, you’ll observe the application’s loading behavior. Upon the
    initial load, the translation file (labeled `ngx-lazy-translate` route, the application
    will dynamically load the translation file specific to that route (labeled **2**)
    and correctly display the translated values.
  prefs: []
  type: TYPE_NORMAL
- en: Right-to-left languages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In **right-to-left** (**RTL**) languages, the layout of the user interface is
    mirrored in comparison to **left-to-right** (**LTR**) languages. This includes
    the reversal of the order of elements, such as text, buttons, and navigation.
    The primary goal is to align content to the right side of the screen, creating
    a natural flow for RTL readers.
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with an i18n library, a common practice is to set the direction
    of the text after switching the language. Here is the example code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The provided code represents a method that updates the HTML tag attributes of
    the document according to the specified language parameter. By default, the text
    direction is left-to-right (`ltr`). However, if the language is changed to Arabic
    (`ar`), the code will update the text direction to right-to-left (`rtl`) for the
    body element, and the `lang` attribute for the `html` element will also be changed
    to `ar`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6 – Right-to-left languages](img/B18805_12_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.6 – Right-to-left languages
  prefs: []
  type: TYPE_NORMAL
- en: From the image, you can see that after we switch the language to Arabic (`ar`),
    the layout is shifted from left to right to right to left.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, by utilizing ngx-translate, you can easily handle multi-language
    support and dynamically switch between the different language versions of their
    applications. Now, let’s transition to exploring **PrimeNG Locale**, another essential
    tool for configuring and customizing l10n settings for PrimeNG components.
  prefs: []
  type: TYPE_NORMAL
- en: Working with PrimeNG Locale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PrimeNG Locale is a feature provided by PrimeNG that enables you to configure
    and customize the l10n settings for its components. It allows you to define the
    locale-specific configurations, such as language, date format, time format, and
    number format. By utilizing PrimeNG Locale, you can ensure your application caters
    to the needs of users from different regions and cultures.
  prefs: []
  type: TYPE_NORMAL
- en: To utilize PrimeNG Locale, it is necessary to comprehend the configuration and
    application process within your Angular project. By default, PrimeNG only includes
    English translations for the locale. To localize PrimeNG components, manually
    updating the translations is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following are locale options along with their corresponding
    translations for the PrimeNG `Calendar` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.7 – Example of translation for calendar component](img/B18805_12_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.7 – Example of translation for calendar component
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the code, it is clear that PrimeNG incorporates these wordings for
    English translation within the `Calendar` component. This indicates that upon
    opening the `Calendar` component, you will observe the relevant text displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.8 – Calendar component in English](img/B18805_12_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.8 – Calendar component in English
  prefs: []
  type: TYPE_NORMAL
- en: After opening the date picker, you can observe that the month and day come from
    the `monthNames` and `dayNamesMin` options.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: PrimeNG also provides a community-supported `PrimeLocale` repository ([https://github.com/primefaces/primelocale](https://github.com/primefaces/primelocale))
    that you utilize or contribute to the translation content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s take an example of how to add the translation to the PrimeNG `Calendar`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To incorporate translated versions of the locale options from PrimeNG, you
    have two options: either engage a translator to provide the translations or retrieve
    them from the `PrimeLocale` repository. As an illustration, here is the translated
    version (*Figure 12**.7*) of the locale options in Vietnamese obtained from `PrimeLocale`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After that, we put it into our translation file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure that those translations are under the `primeng` key in the translation
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, when switching languages, we need to extract the translated content
    and set the global translation via `PrimeNGConfig`. Here is the example code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s have a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.9 – Example of calendar in Vietnamese](img/B18805_12_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.9 – Example of calendar in Vietnamese
  prefs: []
  type: TYPE_NORMAL
- en: From the image, you can see that after switching the language option from English
    to Vietnamese, the PrimeNG `Calendar` will also have its translations updated.
  prefs: []
  type: TYPE_NORMAL
- en: To wrap up, working with PrimeNG Locale empowers you to seamlessly handle l10n
    in Angular applications. By leveraging PrimeNG’s features, developers can easily
    configure language settings, customize date and time formats, and format numbers
    according to locale-specific conventions. The ability to adapt applications to
    different regions and cultures ensures a more inclusive and user-friendly experience.
    As we conclude this chapter, it is valuable to pause and recap the main points
    covered in our summary section.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we’ve embarked on a journey through the realms of i18n
    and l10n within the Angular framework, focusing on how PrimeNG components can
    be leveraged to create applications that resonate with a global audience. We’ve
    delved into the intricacies of adapting applications to various locales, ensuring
    that every user experiences the application in a way that feels native to them.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve uncovered the significance of i18n and l10n, understanding that while
    they are closely related, they serve distinct purposes. i18n is the process of
    designing a software application so that it can be adapted to various languages
    and regions without engineering changes. l10n, on the other hand, is the process
    of adapting internationalized software for a specific region or language by adding
    locale-specific components and translating text.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed the different options for i18n in Angular and showcased the ngx-translate
    library as a powerful tool for managing translations in Angular applications.
    Additionally, we explored PrimeNG Locale and its configuration process for achieving
    effective l10n.
  prefs: []
  type: TYPE_NORMAL
- en: Moving forward, in the next chapter, we will shift our focus to testing and
    debugging PrimeNG components. Testing is a critical aspect of application development
    as it ensures the reliability and stability of your codebase. We will explore
    various testing techniques and learn how to effectively debug PrimeNG components
    to identify and resolve issues.
  prefs: []
  type: TYPE_NORMAL
