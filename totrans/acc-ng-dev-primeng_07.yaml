- en: '*Chapter 11*: Migrating Your Angular Application from View Engine to Ivy'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第11章*：从View Engine迁移到Ivy的Angular应用程序'
- en: Several Angular feature releases are published every year. Updating our Angular
    application requires knowledge of the Angular update process, especially when
    migrating from Angular View Engine to Angular Ivy as there are many differences,
    most of which are managed by automated Angular migrations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 每年都会发布几个Angular功能版本。更新我们的Angular应用程序需要了解Angular更新过程，尤其是在从Angular View Engine迁移到Angular
    Ivy时，因为有很多差异，其中大部分由自动化的Angular迁移管理。
- en: In this chapter, you will learn about the steps required to update an Angular
    application, following the *Angular Update Guide's* instructions, how to manage
    Angular's third-party dependencies, the most useful parameters for the `ng update`
    command, how the most important automated Angular Ivy migrations change our applications,
    and how both automated and manual recommended but optional Angular Ivy migrations
    are applied.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解更新Angular应用程序所需的步骤，按照*Angular更新指南*的说明，如何管理Angular的第三方依赖项，`ng update`命令最有用的参数，最重要的自动化Angular
    Ivy迁移如何改变我们的应用程序，以及如何应用推荐的但可选的自动化和手动Angular Ivy迁移。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Learning the Angular update process
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习Angular更新过程
- en: Performing automated Angular Ivy migrations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行自动化的Angular Ivy迁移
- en: Performing manual Angular Ivy migrations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行手动Angular Ivy迁移
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The migrations discussed in this chapter apply to applications at or higher
    than the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的迁移适用于以下或更高版本的应用程序：
- en: Angular Ivy version 12.1
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular Ivy版本12.1
- en: TypeScript version 4.2
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript版本4.2
- en: Make sure you have a recent version of Angular CLI installed globally so that
    you can run the `ng update` command from a terminal.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已全局安装了Angular CLI的最新版本，以便你可以在终端中运行`ng update`命令。
- en: Learning the Angular update process
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习Angular更新过程
- en: Angular CLI gives us a structured approach to update Angular-specific parts
    of our application. One type of Angular schematics is **migration**, which modifies
    our application code to comply with breaking changes. Major and minor version
    releases of Angular often come with migration schematics.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI为我们提供了一个结构化的方法来更新应用程序的Angular特定部分。Angular schematics的一种类型是**迁移**，它修改我们的应用程序代码以符合破坏性更改。Angular的主要和次要版本发布通常伴随着迁移schematics。
- en: It is recommended to follow the update process, one major version release at
    a time. For example, if our application is currently using Angular View Engine
    version 8.2, we update it to Angular Ivy version 9.1 and verify that all aspects
    are behaving as expected before we take the next step to update from Angular version
    9.1 to version 10.2, and so on until we reach the Angular release version we have
    planned to update to.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 建议按顺序逐个主要版本更新过程。例如，如果我们的应用程序当前正在使用Angular View Engine版本8.2，我们将其更新到Angular Ivy版本9.1，并在我们采取下一步更新从Angular版本9.1到版本10.2之前，验证所有方面是否按预期运行，依此类推，直到我们达到计划更新的Angular发布版本。
- en: The fewer update steps we perform at a time, the easier it is to identify what
    went wrong when something did not go as planned.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一次执行的更新步骤越少，当事情没有按计划进行时，就越容易识别出了什么问题。
- en: In this section, we will first learn about the Angular Update Guide, an official
    web app listing step-by-step instructions. After that, we will discuss Angular's
    third-party dependencies and how their releases affect our Angular application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将首先了解Angular更新指南，这是一个官方网络应用程序，列出了逐步说明。之后，我们将讨论Angular的第三方依赖项及其发布如何影响我们的Angular应用程序。
- en: The Angular Update Guide
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular更新指南
- en: An important tool for the Angular update process is the Angular Update Guide.
    Located at [https://update.angular.io](https://update.angular.io), this web app
    presents step-by-step instructions for updating our Angular application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Angular更新过程的一个重要工具是Angular更新指南。位于[https://update.angular.io](https://update.angular.io)，这个网络应用程序提供了更新我们的Angular应用程序的逐步说明。
- en: 'To use the Angular Update Guide, we first choose the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Angular更新指南，我们首先选择以下内容：
- en: Which Angular version we are currently using
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们目前正在使用哪个Angular版本
- en: Which Angular version we want to update to
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们想要更新到哪个Angular版本
- en: The complexity of our application
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应用程序的复杂性
- en: Whether our application is a hybrid AngularJS and Angular application using
    `ngUpgrade`
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的应用程序是否是使用`ngUpgrade`的混合AngularJS和Angular应用程序
- en: Whether we are using Angular Material
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们是否正在使用Angular Material
- en: Even if we are in a hurry, we should select **Advanced** as our **App complexity**
    and go through all available instructions to make sure we do not miss any recommended
    migration steps.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们在赶时间，我们也应该选择**高级**作为我们的**应用复杂度**，并遍历所有可用的指令，以确保我们不遗漏任何推荐的迁移步骤。
- en: 'After choosing the option that matches our application, we are presented with
    a checklist of instructions, divided into the following sections:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择与我们的应用程序匹配的选项后，我们将会看到一个包含以下部分的指令清单：
- en: '**Before updating**'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在更新前**'
- en: '**During the update**'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在更新期间**'
- en: '**After the update**'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新后**'
- en: It is not always clear what makes a difference regarding whether an instruction
    is listed in the **During the update** or **After the update** sections. For a
    pleasant update process, we make sure to follow the instructions in the **Before
    updating** section before we follow the instructions in the **During the update**
    section.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 并非总是清楚哪些指令被列在**在更新期间**或**更新后**部分。为了有一个愉快的更新过程，我们在遵循**在更新期间**部分的指令之前，确保遵循**在更新前**部分的指令。
- en: The instructions in the **During the update** section must be followed in the
    order they are listed in because update and migration commands often depend on
    each other.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**在更新期间**部分的指令必须按照列出的顺序执行，因为更新和迁移命令通常相互依赖。'
- en: The instructions in the `ng update` command but are not listed in the Angular
    Update Guide. Similarly, some recommended automated and manual migrations are
    listed in the Angular documentation but not in the Angular Update Guide.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`ng update`命令中的指令，但在Angular更新指南中未列出。同样，一些推荐的自动和手动迁移在Angular文档中列出，但在Angular更新指南中未列出。'
- en: Managing Angular dependencies
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理Angular依赖
- en: 'Outside of official Angular packages, Angular only has a few dependencies.
    The following package dependencies are listed in Angular''s `package.json` files:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 除了官方的Angular包之外，Angular只有少数依赖。以下包依赖在Angular的`package.json`文件中列出：
- en: '**RxJS**'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RxJS**'
- en: '**tslib**'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**tslib**'
- en: '**Zone.js**'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Zone.js**'
- en: Historically, the versions of these package dependencies are managed by the
    Angular update process. However, migrations for breaking changes are not always
    available. For example, RxJS has no migrations planned for updating from version
    6.x to version 7.x.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，这些包依赖的版本由Angular更新过程管理。然而，对于破坏性变更的迁移并不总是可用。例如，RxJS没有计划从6.x版本更新到7.x版本的迁移。
- en: Zone.js
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Zone.js
- en: At the time of writing, Zone.js is still in a prerelease version. Every minor
    prerelease version contains breaking changes. Typically, migrations are not necessary
    for our Angular application because we do not use Zone.js directly. Instead, the
    `NgZone` API wraps Zone.js.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Zone.js仍处于预发布版本。每个小版本预发布都包含破坏性变更。通常，对于我们的Angular应用程序，迁移不是必需的，因为我们没有直接使用Zone.js。相反，`NgZone`
    API包装了Zone.js。
- en: However, we import Zone.js in several of our application files, and Zone.js
    version 0.11.1 changes its import paths. Angular version 11 offers an automated
    migration to update Zone.js.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们在几个应用程序文件中导入了Zone.js，Zone.js版本0.11.1改变了其导入路径。Angular版本11提供了一个自动迁移来更新Zone.js。
- en: TypeScript
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TypeScript
- en: TypeScript does not follow semantic versioning. Every minor release version
    contains breaking changes. No automated migrations are available for TypeScript
    so if our application outputs compilation errors after updating Angular, we must
    refer to the *Breaking Changes* section of TypeScript's official announcement
    blog post.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript不遵循语义版本控制。每个小版本都包含破坏性变更。没有可用的自动迁移，所以如果我们的应用程序在更新Angular后输出编译错误，我们必须参考TypeScript官方公告博客文章的**破坏性变更**部分。
- en: RxJS
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RxJS
- en: The RxJS versions officially supported by Angular can be read by inspecting
    the `dependencies` property of the `@angular/core` `package.json` file. Angular
    versions 9.0–10.0 officially support RxJS versions 6.5 and 6.6 while Angular versions
    10.1–12.1 only have official support for RxJS version 6.6\. Angular version 12.2
    has opt-in support for RxJS version 7.0 and later minor versions.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过检查`@angular/core`的`package.json`文件的`dependencies`属性来读取Angular官方支持的RxJS版本。Angular版本9.0–10.0官方支持RxJS版本6.5和6.6，而Angular版本10.1–12.1仅对RxJS版本6.6提供官方支持。Angular版本12.2可选择支持RxJS版本7.0及以后的次要版本。
- en: Node.js
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Node.js
- en: Angular CLI usually has official support for two major versions of Node.js.
    Unstable (odd) major version Node.js releases are not officially supported by
    Angular CLI. Angular CLI versions 9.0–11.2 have official support for Node.js 10.13
    and 12.11 or later minor versions. Angular version 12 removes support for Node.js
    10 but adds official support for Node.js 14.15 or later minor versions in addition
    to Node.js 12.14 or later minor versions.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI 通常对两个主要版本的 Node.js 有官方支持。不稳定的（奇数）主要版本 Node.js 发布版不受 Angular CLI
    的官方支持。Angular CLI 版本 9.0–11.2 对 Node.js 10.13 和 12.11 或更高版本的次要版本有官方支持。Angular
    版本 12 移除了对 Node.js 10 的支持，但除了对 Node.js 12.14 或更高版本的次要版本外，还增加了对 Node.js 14.15 或更高版本的次要版本的官方支持。
- en: In this section, we learned about the Angular Update Guide and how to manage
    Angular's dependencies. In the next section, we will learn about the `ng update`
    command and automated Angular Ivy migrations.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了 Angular 更新指南以及如何管理 Angular 的依赖。在下一节中，我们将学习 `ng update` 命令和自动化的 Angular
    Ivy 迁移。
- en: Performing automated Angular Ivy migrations
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行自动化的 Angular Ivy 迁移
- en: Angular CLI supports automated migrations for both Angular framework packages
    and third-party Angular libraries. In this section, we will learn how to make
    the most out of the `ng update` command. Finally, we will discuss important automated
    Angular Ivy migrations.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI 支持对 Angular 框架包和第三方 Angular 库的自动化迁移。在本节中，我们将学习如何充分利用 `ng update`
    命令。最后，我们将讨论重要的自动化 Angular Ivy 迁移。
- en: Making the most of the ng update command
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 充分利用 ng update 命令
- en: The `ng update` command is used to update Angular-specific package dependencies,
    both Angular framework packages and third-party Angular libraries. The `ng update`
    command looks for automated migrations in the package bundle when updating to
    the specified package version.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`ng update` 命令用于更新 Angular 特定的包依赖，包括 Angular 框架包和第三方 Angular 库。在更新到指定包版本时，`ng
    update` 命令会在包捆绑中寻找自动迁移。'
- en: 'To update Angular, the following command can be used:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 Angular 时，可以使用以下命令：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will update all the main Angular framework packages to the latest version
    as well as performing their automated migrations. Angular CLI is responsible for
    workspace migrations while the Angular Core package is responsible for migrations
    to Angular's runtime packages.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这将更新所有主要的 Angular 框架包到最新版本，并执行它们的自动化迁移。Angular CLI 负责工作区迁移，而 Angular 核心包负责迁移到
    Angular 的运行时包。
- en: 'In the *Learning the Angular update process* section, we recommended only updating
    one major version at a time. To specify, for example, Angular version 9, use the
    following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *学习 Angular 更新过程* 这一部分，我们建议一次只更新一个主要版本。例如，要指定 Angular 版本 9，请使用以下命令：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will update the main Angular framework packages to the latest version 9
    patch versions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将更新主要的 Angular 框架包到最新的版本 9 补丁版本。
- en: 'It is possible to perform each migration in a separate commit by specifying
    the `--create-commits` parameter, as shown in the following command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过指定 `--create-commits` 参数来分别在每个提交中执行每个迁移，如下所示：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This option is recommended as it makes it easier to inspect the changes related
    to each migration or use Git to cherry-pick the automated migrations we want,
    or even revert a migration's changes.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 建议使用此选项，因为它使得检查每个迁移相关的更改变得更容易，或者可以使用 Git 进行 cherry-pick 我们想要的自动迁移，甚至可以撤销迁移的更改。
- en: 'If we choose to revert or omit a migration through Git cherry-picking, we usually
    want to perform the migration manually. Alternatively, we can rerun a specific
    migration using the following command format:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们选择通过 Git cherry-pick 撤销或省略迁移，我们通常希望手动执行迁移。或者，我们可以使用以下命令格式重新运行特定的迁移：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We find the name of the migration in the message of the Git commits that are
    created when specifying the `--create-commits` parameter.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在指定 `--create-commits` 参数时创建的 Git 提交消息中找到迁移的名称。
- en: 'In some cases, optional migrations are available. For example, Angular version
    12 introduces an optional automated migration for making the `production` build
    configuration the default:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，可选的迁移是可用的。例如，Angular 版本 12 引入了一个可选的自动化迁移，用于将 `production` 构建配置设置为默认：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As for when to run the main `ng update` command, we follow the Angular Update
    Guide's instructions as described in the *Learning the Angular update process*
    section.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 至于何时运行主要的 `ng update` 命令，我们遵循 *学习 Angular 更新过程* 部分中描述的 Angular 更新指南的说明。
- en: For every migration run by the `ng update` command, we see a list of files affected
    by the migration – if any – before `Migration completed` is displayed.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于通过`ng update`命令运行的每个迁移，我们都会在显示`迁移完成`之前看到受迁移影响的文件列表——如果有的话。
- en: Some migrations refer to a web page describing the migration. For example, why
    the change is needed in addition to code snippets with examples of code before
    and after running the migration. This is excellent information to review the changes
    made by the automated migration or to perform the migration steps manually.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一些迁移会引用一个描述迁移的网页。例如，除了在运行迁移前后提供代码片段的示例之外，还需要说明为什么需要这种变化。这是审查自动化迁移所做的更改或手动执行迁移步骤的极好信息。
- en: Reviewing automated Angular Ivy migrations
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查自动化Angular Ivy迁移
- en: Let's review some of the most important automated Angular Ivy migrations to
    understand their importance.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一些最重要的自动化Angular Ivy迁移，以了解它们的重要性。
- en: Angular workspace version 9 migration
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Angular工作区版本9迁移
- en: Named `workspace-version-9`, this migration modifies build configurations so
    that the `aot` option is set to `true`, even in the default development build
    configuration. In fact, if we generate a new Angular Ivy workspace or application
    using Angular CLI 12, there is no `aot` option specified because its value is
    `true` by default.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 命名为`workspace-version-9`的这次迁移修改了构建配置，使得`aot`选项被设置为`true`，即使在默认的开发构建配置中也是如此。实际上，如果我们使用Angular
    CLI 12生成一个新的Angular Ivy工作区或应用程序，则没有指定`aot`选项，因为它的默认值是`true`。
- en: This migration also changes the `include` property of `tsconfig.app.json` files
    to match the `"src/**/*.d.ts"` pattern.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这次迁移还改变了`tsconfig.app.json`文件的`include`属性，以匹配`"src/**/*.d.ts"`模式。
- en: Lazy loading syntax migration
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 懒加载语法迁移
- en: 'This migration, named `lazy-loading-syntax`, changes string-based lazy loaded
    route paths to use dynamic `import` statements instead. For example, look at the
    following route configuration:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这次名为`lazy-loading-syntax`的迁移将基于字符串的懒加载路由路径更改为使用动态`import`语句。例如，看看以下路由配置：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It is changed to the following by the migration:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移后，它被更改为以下内容：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The string-based lazy loading route syntax is deprecated and must be avoided.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 基于字符串的懒加载路由语法已被弃用，必须避免使用。
- en: Static flag migration
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 静态标志迁移
- en: Be careful with this migration named `migration-v9-dynamic-queries`. In Angular
    version 8, the required `static` option is added to `ViewChild` and `ContentChild`
    queries. In Angular version 9, the `static` option is made optional, defaulting
    to `false`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意名为`migration-v9-dynamic-queries`的这次迁移。在Angular版本8中，将必需的`static`选项添加到`ViewChild`和`ContentChild`查询中。在Angular版本9中，`static`选项变为可选，默认为`false`。
- en: 'Consider the following Angular version 9 component:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下Angular版本9组件：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In Angular View Engine version 7, before the static `option` was available,
    its view query properties would start out like so:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular View Engine版本7中，在静态`option`可用之前，其视图查询属性会是这样：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After migrating to Angular View Engine version 8, we have the following view
    query properties because the `static` option is required:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移到Angular View Engine版本8之后，我们有了以下视图查询属性，因为需要`static`选项：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you might be able to see, the Angular version 8 *static query migration*
    is good at guessing the best option for view query and content query properties.
    Queries for items nested in embedded views such as that created by a structural
    directive are converted to dynamic queries, that is, `{ static: false }.`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '如您可能看到的，Angular版本8的`static query migration`擅长猜测视图查询和内容查询属性的最佳选项。嵌套在嵌入视图中的项目查询，例如由结构指令创建的视图，被转换为动态查询，即`{
    static: false }`。'
- en: 'When we migrate to Angular Ivy version 9, the `static` option is optional but
    defaults to `false`, so we have the following view query properties:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们迁移到Angular Ivy版本9时，`static`选项是可选的，但默认为`false`，因此我们有以下视图查询属性：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Dynamic queries automatically have the `static` option removed by the Angular
    version 9 *static flag migration*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 动态查询自动通过Angular版本9的`static`标志迁移移除了`static`选项。
- en: Important Note
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Query lists are not affected by the historic changes covered by this section
    because query lists are always dynamic.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 查询列表不受本节中涵盖的历史性变化的影响，因为查询列表始终是动态的。
- en: Before migrating to Angular Ivy version 9, make sure to review your content
    and view queries. Refer to the *Static query migration guide* and *Dynamic queries
    flag migration* guides, which are still available in the Angular documentation
    at [https://angular.io/guide/static-query-migration](https://angular.io/guide/static-query-migration)
    and [https://angular.io/guide/migration-dynamic-flag](https://angular.io/guide/migration-dynamic-flag),
    respectively, as of Angular version 12.2.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在迁移到Angular Ivy版本9之前，请确保审查您的内容和视图查询。请参阅*静态查询迁移指南*和*动态查询标志迁移*指南，这些指南在Angular版本12.2中仍然可在Angular文档中找到，分别位于[https://angular.io/guide/static-query-migration](https://angular.io/guide/static-query-migration)和[https://angular.io/guide/migration-dynamic-flag](https://angular.io/guide/migration-dynamic-flag)。
- en: async to waitForAsync migration
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 异步等待`waitForAsync`迁移
- en: This migration, named `migration-v11-wait-for-async`, renames the `async` testing
    callback wrapper to `waitForAsync` to avoid confusion with `async`-`await`. The
    new name better explains what happens when we wrap a test case callback in this
    testing function.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此迁移，名为`migration-v11-wait-for-async`，将`async`测试回调包装器的名称重命名为`waitForAsync`，以避免与`async`-`await`混淆。新名称更好地解释了当我们在这个测试函数中包装测试用例回调时会发生什么。
- en: '`waitForAsync` waits for all microtasks and macrotasks to finish before completing
    the wrapped test case. This is somewhat like injecting Jasmine and Jest''s `done`
    callback parameter and calling it after the final asynchronous side effect in
    a test case.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`waitForAsync`在完成包装的测试用例之前等待所有微任务和宏任务完成。这有点像注入Jasmine和Jest的`done`回调参数，并在测试用例中的最终异步副作用之后调用它。'
- en: Missing @Injectable and incomplete provider definition migration
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缺少@Injectable和不完整提供者定义迁移
- en: 'This automated Angular version 9 migration named `migration-v9-missing-injectable`
    makes the following types of code changes:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个名为`migration-v9-missing-injectable`的自动Angular版本9迁移会进行以下类型的代码更改：
- en: An `@Injectable` decorator is added to classes that are registered using class-based
    module providers.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于类的模块提供者注册的类中添加了`@Injectable`装饰器。
- en: Incomplete Angular View Engine module providers are turned into value providers
    for the `undefined` value.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不完整的Angular View Engine模块提供者被转换为`undefined`值的值提供者。
- en: 'A class-based module provider can have one of the following formats:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 基于类的模块提供者可以有以下格式之一：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If `DashboardService` or `HttpWeatherService` do not have `Injectable` decorators
    applied, this migration adds an `Injectable` decorator to their class definitions.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`DashboardService`或`HttpWeatherService`没有应用`Injectable`装饰器，此迁移将向它们的类定义添加`Injectable`装饰器。
- en: 'A module provider using the following format is evaluated differently by Angular
    View Engine and Angular Ivy:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下格式的模块提供者在Angular View Engine和Angular Ivy中的评估方式不同：
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Angular View Engine evaluates the provider as the following value provider:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Angular View Engine将提供者评估为以下值提供者：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Angular Ivy evaluates the provider as the following class provider:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Ivy将提供者评估为以下类提供者：
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Note that the preceding class provider is equivalent to the following class
    provider shorthand:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，前面的类提供者等同于以下类提供者简写：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Because of that difference between provider evaluation, this migration changes
    incomplete Angular View Engine providers to value providers specifying the `undefined`
    value.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 由于提供者评估之间的差异，此迁移将不完整的Angular View Engine提供者更改为指定`undefined`值的值提供者。
- en: 'Review all providers with the `useValue: undefined` part after this migration
    is run. This is most likely not the intent of our application.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '迁移运行后，请审查所有包含`useValue: undefined`部分的提供者。这很可能不是我们应用程序的意图。'
- en: Optional migration to update Angular CLI workspace configurations to production
    mode by default
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可选迁移以将Angular CLI工作区配置更新为默认生产模式
- en: Angular CLI version 12 generates project build configurations with `production`
    being the default configuration. The result of this is that we do not have to
    specify the `--configuration=production` parameter to the `ng build` command.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI版本12生成项目构建配置，其中`production`是默认配置。结果是，我们不需要在`ng build`命令中指定`--configuration=production`参数。
- en: However, existing projects are not automatically migrated to use the production
    configuration by default. Use the optional migration named `production-by-default`
    to migrate existing projects to this new default setting. This is done primarily
    using the `defaultConfiguration` setting introduced by Angular version 12.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现有项目默认不会自动迁移到使用生产配置。使用名为`production-by-default`的可选迁移将现有项目迁移到这个新默认设置。这主要使用Angular版本12引入的`defaultConfiguration`设置来完成。
- en: These are some of the most noteworthy, automated migrations to be aware of when
    updating from Angular View Engine to Angular Ivy. In the next section, we will
    discuss optional manual migrations to make sure our Angular Ivy application is
    in its best possible shape.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是从Angular View Engine更新到Angular Ivy时需要注意的一些最值得注意的自动化迁移。在下一节中，我们将讨论可选的手动迁移，以确保我们的Angular
    Ivy应用程序处于最佳状态。
- en: Performing manual Angular Ivy migrations
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行手动Angular Ivy迁移
- en: In this section, we will walk through optional migrations that put our application
    on track for future Angular versions. We will discuss fine-tuning initial navigation,
    optimizing change detection with `NgZone`, and improving the type safety of our
    unit tests.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍可选的迁移，使我们的应用程序为未来的Angular版本做好准备。我们将讨论微调初始导航、通过配置`NgZone`优化变更检测以及提高单元测试的类型安全性。
- en: Managing initial navigation
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理初始导航
- en: 'The following legacy values for the `initialNavigation` option for `RouterModule.forRoot`
    are removed by Angular Ivy version 11:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Ivy版本11移除了`RouterModule.forRoot`的`initialNavigation`选项的以下旧值：
- en: '`true`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`true`'
- en: '`false`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`false`'
- en: '`''legacy_enabled''`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''legacy_enabled''`'
- en: '`''legacy_disabled''`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''legacy_disabled''`'
- en: 'Angular Ivy version 11 also deprecates the `''enabled''` value but introduces
    the following new values:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Ivy版本11也弃用了`'enabled'`值，但引入了以下新值：
- en: '`''enabledBlocking''`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''enabledBlocking''`'
- en: '`''enabledNonBlocking''` (default)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''enabledNonBlocking''`（默认）'
- en: '`''enabledBlocking''` is equivalent to `''enabled''` and is recommended for
    server-side rendering using Angular Universal. This value starts the initial navigation
    process before Angular creates an instance of the root component of our application
    but blocks bootstrapping of the root component until the initial navigation completes.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`''enabledBlocking''`与`''enabled''`等价，并推荐用于Angular Universal的服务器端渲染。此值在Angular创建我们应用程序根组件实例之前启动初始导航过程，但直到初始导航完成之前阻止根组件的引导。'
- en: The default `'enabledNonBlocking'` value starts the initial navigation after
    Angular has created an instance of the root component of our application but allows
    the root component to be bootstrapped before the initial navigation completes.
    This behavior is like the `true` value, which has now been removed.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的`'enabledNonBlocking'`值在Angular创建我们应用程序根组件实例之后启动初始导航，但允许在初始导航完成之前引导根组件。这种行为类似于已删除的`true`值。
- en: '`''disabled''` is the third available, non-deprecated value. It disables the
    initial navigation process and defers to our application code to perform it by
    using the `Location` and `Router` services. This value should only be used for
    advanced use cases.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`''disabled''`是第三个可用的、非弃用值。它禁用初始导航过程，并推迟到我们的应用程序代码通过使用`Location`和`Router`服务来执行。此值仅应用于高级用例。'
- en: Optimizing change detection by configuring NgZone
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过配置NgZone优化变更检测
- en: When we call the `PlatformRef#bootstrapModule` method—usually in our application's
    main file—we can specify both compiler and bootstrap options. Bootstrap options
    are not listed in the Angular documentation as of Angular version 12.2\. However,
    inline documentation is available.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用`PlatformRef#bootstrapModule`方法——通常在我们的应用程序主文件中——我们可以指定编译器和引导选项。截至Angular版本12.2，引导选项未在Angular文档中列出。然而，内联文档是可用的。
- en: 'Other than the traditional `ngZone` option, which allows us to disable `NgZone`
    entirely, the following two options are added by Angular Ivy:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 除了允许我们完全禁用`NgZone`的传统`ngZone`选项之外，Angular Ivy还添加了以下两个选项：
- en: '`ngZoneEventCoalescing`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngZoneEventCoalescing`'
- en: '`ngZoneRunCoalescing`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngZoneRunCoalescing`'
- en: They both accept a Boolean value that defaults to `false`. Both options optimize
    change detection for specific use cases by turning multiple change detection cycle
    requests in the same VM turn into a single operation, scheduled using an animation
    frame to synchronize change detection with the current frame rate.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 它们都接受一个默认为`false`的布尔值。这两个选项通过将同一VM转换中的多个变更检测周期请求合并为一个操作，并使用动画帧来同步变更检测与当前帧率，从而针对特定用例优化变更检测。
- en: Event coalescing (`ngZoneEventCoalsecing`) refers to native DOM event bubbling.
    For example, if multiple click event handlers are triggered by a single user click,
    change detection is only triggered once.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 事件合并（`ngZoneEventCoalescing`）指的是原生DOM事件冒泡。例如，如果单个用户点击触发了多个点击事件处理器，则变更检测只会触发一次。
- en: '`ngZoneRunCoalescing` manages the `NgZone#run` method being called multiple
    times in the same VM turn.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`ngZoneRunCoalescing`管理在同一个VM转换中多次调用`NgZone#run`方法。'
- en: It is a good default to enable both these options because they increase performance.
    However, they might change our application's behavior in certain edge cases, causing
    for example the *NG0100* error, `ExpressionChangedAfterItHasBeenCheckedError`,
    to be thrown in Angular development mode.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它们可以提高性能，因此启用这两个选项是一个好的默认设置。然而，它们可能会在某些边缘情况下改变我们的应用程序行为，例如在Angular开发模式下抛出`NG0100`错误，即`ExpressionChangedAfterItHasBeenCheckedError`。
- en: Because of this, take special care when enabling these bootstrap settings for
    our application.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在启用这些引导设置时，请特别注意。
- en: Improving unit test type safety with TestBed.inject
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用TestBed.inject提高单元测试类型安全性
- en: Angular Ivy introduces the static `TestBed.inject` method, which is a strongly
    typed method that replaces the weakly typed static `TestBed.get` method.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Ivy引入了静态的`TestBed.inject`方法，这是一个强类型方法，它取代了弱类型的静态`TestBed.get`方法。
- en: 'The `TestBed.get` method returns a value of type `any`. In the following example,
    we see how this forces us to specify a type of annotation to the variable we store
    the returned dependency in:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestBed.get`方法返回一个`any`类型的值。在下面的示例中，我们看到这迫使我们为存储返回依赖项的变量指定类型注解：'
- en: '[PRE16]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When migrating to `TestBed.inject`, we can often omit the type annotation,
    as shown in the following equivalent code snippet:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当迁移到`TestBed.inject`时，我们通常可以省略类型注解，如下面的等效代码片段所示：
- en: '[PRE17]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If the provided type is different from the provider token, we now must cast
    the returned dependency to `unknown` before casting it to the registered type,
    as shown in the following example:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供的类型与提供者令牌不同，我们现在必须在将其转换为注册类型之前将返回的依赖项转换为`unknown`，如下面的示例所示：
- en: '[PRE18]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: It is worth noting that `TestBed.inject` is also stricter than `TestBed.get`
    in that it only accepts a provider token arguments of type `Type<T> | AbstractType<T>
    | InjectionToken<T>`, that is, a concrete class, an abstract class, or a dependency
    injection token.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，`TestBed.inject`在严格性上比`TestBed.get`更强，因为它只接受类型为`Type<T> | AbstractType<T>
    | InjectionToken<T>`的提供者令牌参数，即一个具体类、一个抽象类或依赖注入令牌。
- en: This is different from `TestBed.get`, which supports a provider token of type
    `any`, for example a string, a number, or a symbol.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这与`TestBed.get`不同，它支持类型为`any`的提供者令牌，例如字符串、数字或符号。
- en: Avoid provider tokens that are not supported by `TestBed.inject` as they have
    been deprecated since Angular version 4, like the weakly typed `Injector#get`
    signature used for resolving dependencies at runtime.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 避免使用`TestBed.inject`不支持提供者令牌，因为这些自Angular版本4以来已被弃用，例如用于在运行时解析依赖项的弱类型`Injector#get`签名。
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the Angular update process, including the *Angular
    Update Guide,* the `ng update` command, and managing Angular's third-party dependencies.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了Angular更新过程，包括*Angular更新指南*、`ng update`命令以及管理Angular的第三方依赖项。
- en: We learned how to review certain important automated Angular Ivy migrations
    by going through simple code examples.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何通过简单的代码示例来审查某些重要的自动化Angular Ivy迁移。
- en: Finally, we considered several optional migrations, both automated and manual
    Angular Ivy migrations. We learned how to fine-tune the Angular router's initial
    navigation based on our application platform.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们考虑了几种可选的迁移，包括自动和手动迁移Angular Ivy。我们学习了如何根据我们的应用程序平台微调Angular路由器的初始导航。
- en: After that, we discussed two undocumented configuration settings for `NgZone`
    that optimize change detection by coalescing multiple requested change detection
    cycles into one for certain native events and use cases.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们讨论了两个未记录的`NgZone`配置设置，这些设置通过合并多个请求的变更检测周期为某些原生事件和用例优化变更检测。
- en: The final manual migration we discussed improves type safety in our unit tests
    by using the strongly typed static `TestBed.inject` method instead of the deprecated
    static `TestBed.get` method.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论的最后一种手动迁移通过使用强类型的静态`TestBed.inject`方法而不是已弃用的静态`TestBed.get`方法，提高了我们的单元测试类型安全性。
- en: In the next chapter, we will explore the impact and limitations of the Angular
    Ahead-of-Time compiler, which is the default for applications in Angular Ivy.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Angular预编译编译器的影响和限制，这是Angular Ivy中应用程序的默认编译器。
