- en: Chapter 12. Improving Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章。改善表单
- en: If you've ever tried to work with web forms, you know what a headache they can
    be. Luckily, the authors of HTML5 are working hard to make sure that experience
    improves. We're all waiting patiently for browsers to support those nice new features,
    but in the meantime we have to build sites and turn out beautiful functioning
    forms.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你曾经尝试过使用网络表单，你就知道它们可以是多么令人头疼。幸运的是，HTML5 的作者们正在努力确保这种体验得到改善。我们都在耐心地等待浏览器支持那些不错的新功能，但与此同时，我们必须建立站点并制作出漂亮且功能良好的表单。
- en: 'In this chapter, you''ll learn the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下主题：
- en: Marking up a form with some of the new HTML5 attributes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一些新的 HTML5 属性标记一个表单
- en: Placing the cursor in the first form field
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将光标放在第一个表单字段中
- en: Using placeholder text in form fields
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表单字段中使用占位符文本
- en: Validating your site visitors' form entries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证您网站访客的表单输入
- en: Styling stubborn form elements such as file uploads and select drop downs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计样式顽固的表单元素，如文件上传和选择下拉框
- en: An HTML5 web form
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个 HTML5 网络表单
- en: We'll get started by taking advantage of some of the new attributes made available
    to us in HTML5\. The great thing about these additions is that they are completely
    backward compatible. Browsers that don't know how to handle them will either ignore
    them or default to a simple text input, and our site visitors on older browsers
    will be able to use our forms without even knowing what they're missing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用 HTML5 中提供给我们的一些新属性开始。这些增加的好处在于它们完全向后兼容。不了解如何处理它们的浏览器将要么忽略它们，要么默认为简单的文本输入，而我们网站上的老式浏览器访客甚至可以在不知道自己错过什么的情况下使用我们的表单。
- en: First, a word of warning about web forms. A web form doesn't work by itself
    — it needs to have some fancy backend programming on a server somewhere to collect
    the form entries and process them, whether that means writing fields to the database
    or sending the form information via e-mail. Because of this, the forms we build
    in this chapter won't actually work — nothing will happen after clicking the **Submit**
    button on the form.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，关于网络表单的一个警告。一个网络表单不能单独工作 —— 它需要在某个服务器上进行一些花哨的后端编程来收集表单条目并处理它们，无论是将字段写入数据库还是通过电子邮件发送表单信息。因此，在点击表单上的
    **提交** 按钮后，本章中构建的表单实际上不会起作用 —— 什么也不会发生。
- en: 'If you want to add a functioning web form to a project, you have a few options.
    They are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要在项目中添加一个可用的网络表单，您有几个选择。它们如下：
- en: You can learn to do server-side programming to handle your form, but server-side
    programming is well beyond the scope of this book.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以学习进行服务器端编程来处理您的表单，但服务器端编程远远超出了本书的范围。
- en: You can use a CMS that will likely include form handling either in its core
    functionality or as an add-on. Good candidates include Drupal, WordPress, and
    Joomla!.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用 CMS，它可能会将表单处理作为其核心功能或作为附加功能之一。好的候选包括 Drupal、WordPress 和 Joomla！。
- en: You can hire a server-side developer to get your form working. Or make friends
    with one and barter your design skills for their coding skills.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以雇用一个服务器端开发人员来使您的表单工作。或者与一个交朋友，用您的设计技能交换他们的编码技能。
- en: You can use a web form service to handle all the server-side processing of your
    form. My personal favorite is WuFoo, which I have used for years without a single
    hiccup. ([http://wufoo.com](http://wufoo.com))
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用网络表单服务来处理您表单的所有服务器端处理。我个人最喜欢的是 WuFoo，我已经使用了多年而且没有出现过任何问题。([http://wufoo.com](http://wufoo.com))
- en: Any of these methods will help you create a working form to be included in your
    project. However, let's take a look at how we can make the front end of our form
    the best it can be.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 任何这些方法都将帮助您创建一个可包含在您的项目中的工作表单。但是，让我们看看如何使我们的表单的前端尽可能好。
- en: Time for action — setting up an HTML5 web form
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 —— 设置 HTML5 网络表单
- en: 'We''ll get started with a simple HTML document and the associated files and
    folders, just like we set up in [Chapter 1](ch01.html "Chapter 1. Designer, Meet
    jQuery"), *Designer, Meet jQuery*. We want to make sure to use the HTML5 doctype
    in our document type declaration at the top of the document:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从一个简单的 HTML 文档和关联的文件和文件夹开始，就像我们在[第 1 章](ch01.html "第 1 章。设计师，见 jQuery")中设置的那样，*设计师，见
    jQuery*。我们要确保在文档顶部的文档类型声明中使用 HTML5 文档类型：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After all those long and convoluted document type declarations used by HTML
    4 and xHTML, this one is a breath of fresh air, isn't it?
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 HTML 4 和 xHTML 中使用的所有长而复杂的文档类型声明之后，这个声明简直是一股清新的空气，不是吗？
- en: 'Now, inside the`<body>` tag, open up a`<form>` tag as follows:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`<body>`标签内，按照以下方式打开一个`<form>`标签：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `form` tag needs an `action` attribute in order to work. Since our forms
    are just dummy forms for scripting and styling purposes, we''ll just use # as
    the value of that attribute. The value of the action attribute is usually a URL
    — the place on the server where we''re going to send our form data for processing.
    We also added an `id` attribute to make it easy to select the form for CSS and
    JavaScript purposes later.'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`form`标签需要一个`action`属性才能工作。由于我们的表单只是用于脚本和样式目的的虚拟表单，我们将使用#作为该属性的值。`action`属性的值通常是一个URL——我们将发送表单数据进行处理的服务器上的位置。我们还添加了一个`id`属性，以便稍后轻松选择表单用于CSS和JavaScript目的。'
- en: Next up, we'll create a section for our site visitor to create a username and
    password. We'll wrap these two fields up in a `fieldset` with a `legend` to group
    them together.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为我们的网站访问者创建一个用户名和密码的部分。我们将把这两个字段放在一个`fieldset`中，并使用一个`legend`将它们组合起来。
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I've wrapped each field and its associated label in a paragraph tag (`<p>`).
    There is a world of opinion out there on the best tags to use to mark up your
    form fields. Some developers swear by simple `<div>` tags, others like to make
    the form a list (`<ul>`) with each field a list item (`<li>`). Others like to
    use a definition list (`<dl>`) and place the labels inside the `<dt>` tags and
    the form fields inside the `<dd>` tag. At the end of the day, any of these will
    do just fine and your form will work as expected for your site visitors. Use whatever
    tags are your personal preference.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我用段落标签（`<p>`）包装了每个字段及其相关的标签。关于用什么标签标记您的表单字段，世界上有各种各样的意见。有些开发人员喜欢简单的`<div>`标签，而其他人喜欢将表单制作为列表（`<ul>`），每个字段为列表项（`<li>`）。其他人喜欢使用定义列表（`<dl>`），将标签放在`<dt>`标签内，将表单字段放在`<dd>`标签内。归根结底，这些任何一种都可以很好地完成任务，并且您的表单将按预期为您的网站访问者工作。使用您个人偏好的任何标签。
- en: 'Look carefully at the HTML markup we''ve written so far for our form. There
    are a few important things to note. They are as follows:'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仔细看看我们到目前为止为我们的表单编写的HTML标记。有一些重要的事情需要注意。它们如下：
- en: Each`<input>` has a `type` that is relevant to its purpose. **Username** has
    a `text` type and **Password** has a `password` type.
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个`<input>`的`type`与其用途相关。**用户名**具有`text`类型，而**密码**具有`password`类型。
- en: Each`<input>` has a unique `id`. Remember that an `id` has to be unique on the
    page, so select the `id` of your form inputs carefully.
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个`<input>`都有一个唯一的`id`。请记住，`id`在页面上必须是唯一的，因此请谨慎选择您的表单输入的`id`。
- en: Each`<input>` has a `name` attribute. This is passed to whatever code is handling
    your form on the server side. It's a common practice to use the same value for
    the `name` and `id` of a form element, but it's not compulsory. You may easily
    select a different value for the `id` anytime you'd like, but if you'd like to
    change the `name` value, you should first check with your server-side developer
    to make sure the code he or she has written will continue to work.
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个`<input>`都有一个`name`属性。这将传递给服务器端处理您的表单的任何代码。通常的做法是为表单元素的`name`和`id`使用相同的值，但这不是强制性的。您可以随时为`id`选择不同的值，但如果您想更改`name`值，您应该首先与您的服务器端开发人员核实他或她编写的代码是否仍然有效。
- en: Each`<label>` has a `for` attribute that associates it with a particular form
    element. The value in the `for` attribute is equal to the `id` of the form element
    with which it is associated (not the `name)`. This makes some nice functionality
    available to our site visitors clicking on a `label` will bring focus to the associated
    form element. This behavior is especially useful for checkbox and radio button
    inputs, which are small and can be difficult to click.
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个`<label>`都有一个`for`属性，将其与特定的表单元素关联起来。`for`属性中的值等于与之关联的表单元素的`id`（而不是`name`）。这为我们的网站访问者提供了一些很好的功能，点击标签将聚焦于相关的表单元素。这种行为对于复选框和单选按钮输入特别有用，因为它们很小，可能很难点击。
- en: 'Each browser will have its own way of styling form elements, but here''s what
    the **My Account** section looks like for me (Google Chrome on Mac OSX):'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个浏览器都有自己的方式来为表单元素设置样式，但这是我的**我的账户**部分的样式（在Mac OSX上的Google Chrome中）：
- en: '![Time for action — setting up an HTML5 web form](img/6709OS_12_img14.jpg)'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——设置HTML5网络表单](img/6709OS_12_img14.jpg)'
- en: Next up, we'll create an **About Me** section for our form.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为我们的表单创建一个**关于我**部分。
- en: '[PRE3]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Again, the `text` type was used for the **Name** input, since names are strings.
    However, take a look at the `type` attribute for the **Email, Website**, and **Birth
    Date** fields. We're using the new HTML5 input types here. In browsers where these
    input types are not supported, these fields will look and work just like inputs
    with a `type` of `text`. But in browsers where these input types are recognized,
    they'll behave in a slightly different way. User input will automatically be validated
    by the browser. For example, if a site visitor types an invalid e-mail address
    into an input with the type email, the browser will warn them that they've entered
    an invalid e-mail address.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同样，**Name**输入使用了`text`类型，因为名称是字符串。然而，看一下**Email、Website**和**Birth Date**字段的`type`属性。我们在这里使用了新的HTML5输入类型。在不支持这些输入类型的浏览器中，这些字段将看起来和使用`text`类型的输入框一样工作。但在识别这些输入类型的浏览器中，它们的行为会有所不同。用户输入将被浏览器自动验证。例如，如果站点访客在具有`email`类型的输入框中输入一个无效的电子邮件地址，浏览器会警告他们输入了一个无效的电子邮件地址。
- en: Also, on devices with soft keyboards, the keyboard keys will be altered to reflect
    the characters necessary for entering that data type. For example, an input with
    a type of `email` will open a keyboard with the . and the `@` showing on an iPhone
    or an iPad, making it easier for your site visitors on these devices to complete
    the required information.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，在具有软键盘的设备上，键盘键将被更改以反映输入该数据类型所需的字符。例如，在iPhone或iPad上，具有`email`类型的输入将打开一个键盘，显示`.`和`@`，这样使得您的站点访客在这些设备上更容易完成所需的信息输入。
- en: '![Time for action — setting up an HTML5 web form](img/6709OS_12_img15.jpg)'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![执行动作的时间——设置HTML5网络表单](img/6709OS_12_img15.jpg)'
- en: 'The next section in my form will be a section about beverage preferences. I
    want the site visitor to select their favorite beverages from a list and then
    answer a question about how many days per year they drink a beverage. Here''s
    a sample of what my list looks like:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我表单中的下一部分将是有关饮料偏好的部分。我希望站点访客从列表中选择他们喜欢的饮料，然后回答一个关于他们每年喝多少天饮料的问题。以下是我的列表样本：
- en: '[PRE4]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Time for action — setting up an HTML5 web form](img/6709OS_12_img16.jpg)'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![执行动作的时间——设置HTML5网络表单](img/6709OS_12_img16.jpg)'
- en: 'A few new things to note with the HTML we''ve used to mark up this section
    are as follows:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于我们用于标记此部分的HTML的一些新内容如下：
- en: '`Fieldsets` can be nested. A `fieldset` is an excellent way to group a set
    of checkboxes or radio buttons together, and we can use the `legend` of the `fieldset`
    to create a header for our radio or checkbox group.'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fieldsets`可以嵌套。`fieldset`是将一组复选框或单选按钮分组的绝佳方式，我们可以使用`fieldset`的`legend`来为我们的单选按钮或复选框组创建标题。'
- en: A set of checkboxes are identified as such because they will all share the same
    `name`. As a site visitor can select more than one item in a set of checkboxes,
    we add square brackets ([]) to the end of the name so that the server will collect
    all of the answers into an array.
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组复选框之所以被识别为复选框，是因为它们将共享相同的`name`。由于站点访客可以在一组复选框中选择多个项目，因此我们在名称的末尾添加方括号（[]），以便服务器将所有答案收集到一个数组中。
- en: Each checkbox in the set has its own unique `id` and `value`. The `id` and `value`
    do not necessarily have to match, but it's often easy to make them the same.
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合中的每个复选框都有自己独特的`id`和`value`。`id`和`value`不一定要匹配，但通常很容易使它们相同。
- en: Finally, the number of days per year is given an input type of `number`, since
    only a number would be acceptable here. Be careful with this input type. It is
    very strict and will not accept any non-numeric characters. Some bits of data
    appear to be numbers, but are actually strings&,mdash;for example, telephone numbers
    and credit card numbers. If you wouldn't do some sort of math with your number
    then it shouldn't be the `number` input type.
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，每年的天数被赋予了`number`类型的输入，因为这里只接受数字。对于此输入类型要小心。它非常严格，不会接受任何非数字字符。一些数据位看起来是数字，但实际上是字符串，比如电话号码和信用卡号。如果您不打算对您的数字执行某种数学操作，那么它不应该是`number`输入类型。
- en: 'The next section we''ll add to our form is a payment information section:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将添加到表单中的下一个部分是支付信息部分：
- en: '[PRE5]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Much like the checkboxes, we've grouped a set of radio controls inside a `fieldset`
    with the `legend` acting as the header for this section. Just like checkboxes,
    a set of radio controls all share the same name, but each has its own unique `id`
    and value. However, in the case of radio buttons, only one can be selected at
    a time, so there is no need to mark them as an array.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 就像复选框一样，我们在`fieldset`内分组了一组单选控件，`legend`充当了该部分的标题。与复选框类似，一组单选控件共享相同的名称，但每个控件都有自己独特的`id`和值。但是，在单选按钮的情况下，只能选择一个，所以不需要将它们标记为数组。
- en: We've also added a field for collecting our site visitor's credit card number.
    Note that we've assigned an input type of `text` to this field. Even though a
    credit card number appears to be a number, we want to store it just as it is,
    and won't ever be adding to or subtracting from this number. Also, customers may
    wish to type spaces or hyphens in their credit card number.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还添加了一个字段，用于收集我们站点访问者的信用卡号码。请注意，我们将此字段的输入类型设置为`text`。即使信用卡号看起来是一个数字，我们也希望将它存储为它本来的样子，永远不会对这个数字进行加减操作。此外，客户可能希望在他们的信用卡号中输入空格或连字符。
- en: '![Time for action — setting up an HTML5 web form](img/6709OS_12_img17.jpg)'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——设置 HTML5 网页表单](img/6709OS_12_img17.jpg)'
- en: Finally, we'll add a checkbox for our site visitor to accept our terms of service
    and a submit button for them to submit the form information to us.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将添加一个复选框，供我们的站点访问者接受我们的服务条款，并添加一个提交按钮，让他们向我们提交表单信息。
- en: '[PRE6]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The only new thing here is the **Submit** button. By default, an input with
    a type of `submit` will read **Submit.** We can change that by adding a `value`
    attribute with the text we'd like to actually appear on the button.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里唯一的新东西就是**提交**按钮。默认情况下，带有`submit`类型的输入框将显示**提交**。我们可以通过添加一个带有实际想要出现在按钮上的文本的`value`属性来更改它。
- en: '![Time for action — setting up an HTML5 web form](img/6709OS_12_img18.jpg)'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——设置 HTML5 网页表单](img/6709OS_12_img18.jpg)'
- en: 'The only thing left to do is to style our form with a bit of CSS. The following
    is the CSS I''ve used for my simple form:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 唯一剩下的事情就是用一点 CSS 为我们的表单添加样式。以下是我为我的简单表单使用的 CSS：
- en: '[PRE7]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that the `type` attribute of our inputs can be used to select them for
    styling. In this case, I've styled them all identically, but it would also be
    possible to give each one its own set of styles if desired.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意我们输入框的`type`属性可用于选择它们进行样式设置。在这种情况下，我已经将它们全部样式设置为相同，但如果需要的话，也可以为每个输入框设置自己的样式。
- en: Here's how the form looks with my CSS. Feel free to get creative and write your
    own styles for the form.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是我的 CSS 样式的表单外观。随意发挥创造力，为表单编写你自己的样式。
- en: '![Time for action — setting up an HTML5 web form](img/6709OS_12_img19.jpg)'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——设置 HTML5 网页表单](img/6709OS_12_img19.jpg)'
- en: What just happened?
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We took a look at some of the new HTML5 input types and how to use them properly
    to put together a web form. We saw how to use fieldsets and legends to group fields
    together under a heading and how to associate labels with form elements. We learned
    the proper use of the text, password, e-mail, URL, date, checkbox, radio, and
    number input types.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看了一些新的 HTML5 输入类型以及如何正确使用它们来组合一个网页表单。我们了解了如何使用`fieldset`和`legend`来将字段组合在一起并添加标题，以及如何将标签与表单元素关联起来。我们学习了文本、密码、电子邮件、URL、日期、复选框、单选按钮和数字输入类型的正确使用。
- en: Setting focus
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置焦点
- en: If you head over to [http://google.com](http://google.com), you'll see that
    they've made it really easy for you to conduct a web search — as soon as the page
    is loaded up in the browser, the cursor is blinking in the search field. There
    are other sites on the web that behave this way too, making it quick and easy
    to get started filling in a form.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你访问[http://google.com](http://google.com)，你会发现他们让你很容易进行网页搜索——只要页面在浏览器中加载完成，光标就会在搜索字段中闪烁。还有其他一些网站也是这样做的，这样就可以快速轻松地开始填写表单。
- en: Any time you have a page where the site visitor's main task on the page will
    be completing a form, you can make things easy on your site visitor by placing
    the cursor into the first form field so they can just start typing. And it's wicked
    easy with jQuery. Here's how to do it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你有一个页面，站点访问者在该页面的主要任务是填写表单时，你都可以通过将光标放在第一个表单字段中来为站点访问者提供便利。使用 jQuery 很容易实现。以下是如何做的。
- en: Time for action — setting focus to the first field
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——将焦点设置到第一个字段
- en: We'll keep working with the sample form we set up in the last example. Here's
    how to set the focus to the first field in the form.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用上一个示例中设置的示例表单进行操作。以下是如何将焦点设置到表单中的第一个字段。
- en: Open up your empty `scripts.js` file and add a document ready statement.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的空白`scripts.js`文件，并添加一个文档就绪的声明。
- en: '[PRE8]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Next up, we want to select the first field in our form. There are many different
    ways to go about that. In this case, I'm going to use the `id` of the first form
    element.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们想要选择表单中的第一个字段。有许多不同的方法可以做到这一点。在这种情况下，我将使用第一个表单元素的`id`。
- en: '[PRE9]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: All that's left to do is call the `focus()` method for that element.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 剩下的就是调用那个元素的`focus()`方法。
- en: '[PRE10]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now if you refresh the page in the browser, you'll see that the cursor is blinking
    in the **Username** field of the form — the very first field.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果你在浏览器中刷新页面，你会看到光标在表单的**用户名**字段中闪烁——正是第一个字段。
- en: What just happened?
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We used a couple of lines of jQuery to move focus to the first field in our
    form to make it easy for our site visitors to jump right into completing our form.
    It was as simple as selecting the first form element and then calling the `focus()`
    method for that element.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了几行jQuery代码来将焦点移动到表单中的第一个字段，这样我们的网站访问者可以轻松地开始填写表单。只需选择第一个表单元素，然后调用该元素的`focus()`方法即可。
- en: Placeholder text
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 占位文本
- en: Isn't it nice when you visit a site, and there's some soft grayed-out text in
    a form field giving you a hint about what you're supposed to put there? There
    are umpteen different jQuery plugins that have been written over the past several
    years to handle this because it can be a bit of a hassle.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当你访问一个网站时，有一个软灰色的文本在表单字段中给你一些提示，这不是很好吗？过去几年里已经写了无数不同的jQuery插件来处理这个问题，因为这可能有点麻烦。
- en: However, I'm here with good news. HTML5 provides a `placeholder` attribute that
    can be used to create this kind of text in form fields automatically without any
    help from JavaScript. Of course, as with any other cutting-edge technology, browser
    support can be a bit lacking. We don't have the luxury of waiting years for browser
    support for this new feature to be universal—we have to build functioning websites
    now. You could continue using all those old jQuery plugins, but why not take advantage
    of support for the placeholder attribute if it's there and only use jQuery to
    fill in the gaps for those browsers that don't recognize it yet?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我有个好消息要告诉你。HTML5提供了一个`placeholder`属性，可以自动在表单字段中创建这种文本，而无需JavaScript的帮助。当然，与任何其他尖端技术一样，浏览器支持可能有些欠缺。我们没有等待多年让浏览器支持这一新功能变得普遍——我们现在就必须构建功能性的网站。你可以继续使用所有那些旧的jQuery插件，但如果支持placeholder属性，为什么不利用它，并只在那些尚未识别它的浏览器中使用jQuery来填补空白呢？
- en: This type of script is called a **polyfill**. It's used to fill in functionality
    that might be missing from some browsers. If a browser does support the `placeholder`
    attribute, the polyfill script does nothing, and just lets the browser handle
    the placeholders. For all those site visitors without support for the `placeholder`
    attribute, the script springs into action, providing the placeholder text functionality
    for everyone.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这种脚本称为**polyfill**。它用于填补一些浏览器可能缺少的功能。如果浏览器支持`placeholder`属性，polyfill脚本就什么都不做，只是让浏览器处理占位符。对于那些不支持`placeholder`属性的网站访问者，脚本会立即生效，为所有人提供占位文本功能。
- en: Time for action — adding placeholder text
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候行动起来了——添加占位文本
- en: Follow these steps to add placeholder text to your form fields for as many of
    your site visitors as possible, whether or not their browser supports the new
    HTML5 placeholder attribute.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤，为尽可能多的网站访问者添加表单字段的占位文本，无论他们的浏览器是否支持新的HTML5占位属性。
- en: 'We''ll keep using the same form that we''ve built in the last two sections.
    The first thing we''ll do is revisit each form field and add a placeholder attribute
    where it makes sense. Here are some examples from my form:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将继续使用我们在前两节中构建的相同表单。我们首先要做的是重新检查每个表单字段，并在合适的地方添加一个占位属性。以下是我的表单中的一些示例：
- en: '[PRE11]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, I've added a hint about the required length of the username.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我增加了关于用户名所需长度的提示。
- en: '[PRE12]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Because you can never say it too much, here I've reminded my site visitor to
    create a secure password.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为再怎么说都不嫌多，我在这里提醒我的网站访问者创建一个安全的密码。
- en: '[PRE13]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It can be helpful to remind site visitors that valid URLs include the protocol
    at the beginning.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提醒网站访问者，有效的URL包括开头的协议。
- en: '[PRE14]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Anytime a field requires special formatting, placeholder text can give a hint
    to the site visitor what that should be.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 任何时候一个字段需要特殊格式，占位文本都可以为网站访问者提供提示。
- en: When you're finished adding placeholder text, view your page in Safari or Chrome
    to see the placeholder text in action.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你添加完占位符文本后，可以在Safari或Chrome中查看你的页面，以查看占位符文本的效果。
- en: '![Time for action — adding placeholder text](img/6709OS_12_img20.jpg)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——添加占位符文本](img/6709OS_12_img20.jpg)'
- en: Now we need to add support for those browsers that don't yet support placeholder
    text.
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在我们需要为那些尚未支持占位符文本的浏览器添加支持。
- en: We'll use Dan Bentley's Placeholder polyfill. To download it, just head over
    to [https://github.com/danbentley/placeholder](http://https://github.com/danbentley/placeholder).
    Just like the other plugins we've downloaded from GitHub, click on the **ZIP**
    button to download a zipped folder.![Time for action — adding placeholder text](img/6709OS_12_img1.jpg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用丹·本特利（Dan Bentley）的占位符兼容性补丁。要下载它，只需访问 [https://github.com/danbentley/placeholder](http://https://github.com/danbentley/placeholder)。就像我们从GitHub下载的其他插件一样，点击
    **ZIP** 按钮下载一个压缩文件夹。![行动时间——添加占位符文本](img/6709OS_12_img1.jpg)
- en: Unzip the folder and take a look inside. It's a pretty simple and straightforward
    plugin.![Time for action — adding placeholder text](img/6709OS_12_img2.jpg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压文件夹并查看其内容。这是一个非常简单直接的插件。![行动时间——添加占位符文本](img/6709OS_12_img2.jpg)
- en: You've got a sample `index.html` file, a `style.css` file, and a `jquery.placeholder.js`
    file, along with a license and a readme.
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您有一个样本 `index.html` 文件，一个 `style.css` 文件和一个 `jquery.placeholder.js` 文件，以及一个许可证和一个自述文件。
- en: 'The good news about this plugin is that it works its magic just by being on
    the page. Copy `jquery.placeholder.js` to your own `scripts` folder. Then head
    down to the bottom of your page and attach the script to the page after jQuery
    and before your own `scripts.js` file:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有关此插件的好消息是，它只需在页面上存在即可发挥其魔力。将 `jquery.placeholder.js` 复制到您自己的 `scripts` 文件夹中。然后，转到页面底部，并在
    jQuery 之后、您自己的 `scripts.js` 文件之前将脚本附加到页面上：
- en: '[PRE15]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, if you open the page in a browser that doesn't support placeholder attributes,
    you'll see placeholders working. Those browsers are Firefox 3.6 and lower, Safari
    3 and lower, Internet Explorer 9 and lower, and Opera 10 and lower.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果您在不支持占位符属性的浏览器中打开页面，您将看到占位符正常工作。这些浏览器是 Firefox 3.6 及更低版本，Safari 3 及更低版本，Internet
    Explorer 9 及更低版本以及 Opera 10 及更低版本。
- en: What just happened?
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We used Dan Bentley's Placeholder polyfill to add placeholder support to browsers
    where it is lacking. We added `placeholder` attributes to the form fields where
    appropriate, then included Dan's script on our page to get those placeholder attributes
    working in as many browsers as possible.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了丹·本特利的占位符兼容性补丁来为不支持的浏览器添加占位符支持。我们在适当的地方给表单字段添加了 `placeholder` 属性，然后在我们的页面上包含了丹的脚本，以使这些占位符属性在尽可能多的浏览器中工作。
- en: Validating user entry
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证用户输入
- en: Sometimes it can feel frustrating for a site visitor when they have to submit
    a form several times over, correcting errors that they've made filling it out.
    Without JavaScript, the only way to validate the information the site visitor
    has entered is to wait for them to submit the form, then identify the issues on
    the server, and send back a page that contains the form along with any error messages
    that might help the site visitor correct the problem.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，当网站访问者不得不多次提交表单来纠正他们填写的错误时，他们可能会感到沮丧。没有 JavaScript，验证网站访问者输入的信息的唯一方法是等待他们提交表单，然后在服务器上识别问题，并返回一个包含表单以及可能帮助网站访问者纠正问题的任何错误消息的页面。
- en: Showing errors as soon as they happen goes a long way toward making your form
    feel snappy and responsive and helping your site visitors submit the form correctly
    on the first try. In this section, we'll learn how to use the Validation plugin
    from Jörn Zaefferer. This plugin is powerful and flexible and can handle validation
    in several different ways. We'll take a look at the most straightforward way of
    adding client-side validation to your form.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦出现错误，立即显示错误将大大提高您的表单的灵活性和响应性，并帮助您的网站访问者在第一次尝试时正确提交表单。在本节中，我们将学习如何使用Jörn Zaefferer的验证插件。此插件功能强大且灵活，可以以多种不同的方式处理验证。我们将看一下将客户端验证添加到您的表单中最简单的方法。
- en: Time for action — validating form values on the fly
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——即时验证表单值
- en: 'We''ll continue working with the form we''ve been creating through the last
    three sections. Follow these steps to validate user entry into the form:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用我们在过去三个部分中创建的表单。按照以下步骤验证用户对表单的输入：
- en: The first thing we'll do is download the Validation plugin and get it attached
    to our page.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们要做的第一件事是下载验证插件并将其附加到我们的页面上。
- en: Head over to [http://bassistance.de/jquery-plugins/jquery-plugin-validation/](http://bassistance.de/jquery-plugins/jquery-plugin-validation/)
    and click on the **Download** button in the **Files** section to download a ZIP
    file.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前往[http://bassistance.de/jquery-plugins/jquery-plugin-validation/](http://bassistance.de/jquery-plugins/jquery-plugin-validation/)，并在**Files**部分点击**Download**按钮下载ZIP文件。
- en: '![Time for action — validating form values on the fly](img/6709OS_12_img3.jpg)'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——动态验证表单值](img/6709OS_12_img3.jpg)'
- en: Open up the ZIP file and take a look at what we've got.![Time for action — validating
    form values on the fly](img/6709OS_12_img4.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开ZIP文件并看看我们得到了什么。![行动时间——动态验证表单值](img/6709OS_12_img4.jpg)
- en: There's a lot going on here. Several different JavaScript files, a changelog,
    and so on. Remember how I said this plugin is powerful and can handle lots of
    different approaches to validation? That's what all this is for. Handling form
    validation in just about any old crazy situation you might find yourself in.
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里有很多内容。几个不同的JavaScript文件，一个更改日志等等。记得我说过这个插件功能强大，可以处理各种各样的验证方法吗？这就是所有这些的用途。处理几乎任何你可能遇到的旧的疯狂的验证情况。
- en: Luckily, though, our situation is pretty simple, so we don't have to do anything
    complicated.
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 幸运的是，我们的情况相当简单，所以我们不需要做任何复杂的事情。
- en: Copy `jquery.validate.min.js` to your own `scripts` folder and attach it to
    your page.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`jquery.validate.min.js`复制到您自己的`scripts`文件夹并将其附加到您的页面。
- en: '[PRE16]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this case, there's no dependency between the placeholder script and the validation
    script, so it doesn't matter which order they appear in, as long as they're both
    after jQuery itself.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，占位符脚本与验证脚本之间没有依赖关系，因此它们出现的顺序不重要，只要它们都在jQuery之后即可。
- en: 'Next, we''re going to go back through our form and add some information that
    the Validation plugin will use. Let''s start with the username field:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将回顾一下我们的表单，并添加一些验证插件将使用的信息。让我们从用户名字段开始：
- en: '[PRE17]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is a required field — any site visitor who completes this form must select
    a username, so I'll simply add a `class` of `required`. I can use that class name
    to create a special style for this form field with CSS if I'd like. Even if I
    don't, Validation will use this to make sure this field is filled in.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个必填字段——任何填写此表单的网站访问者都必须选择一个用户名，所以我只需添加一个`class`为`required`。如果我愿意，我可以使用该类名为此表单字段创建特殊的样式。即使我不这样做，验证也会使用此信息确保此字段已填写。
- en: Next, all usernames must be between 5 and 20 characters long. So I've added
    a `minlength` and `maxlength` attribute.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，所有用户名必须介于5到20个字符之间。所以我添加了`minlength`和`maxlength`属性。
- en: Next up is the password field, which is also required. So I'll add the required
    class.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是密码字段，它也是必填的。所以我会添加所需的类。
- en: '[PRE18]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: While I'm at it, I'll add the required class to the e-mail field too.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 顺便说一句，我也会在电子邮件字段中添加所需的类。
- en: '[PRE19]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, let''s take a look at that list of favorite beverages. Remember we had
    a note on there for the site visitor to select at least three but no more than
    six? We can actually enforce that with the Validation plugin. Go to the first
    checkbox in the series and add `minlength` and `maxlength` attributes as follows:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们看一下喜爱饮料的列表。记得我们在那里给网站访问者留了一条注释，要求他们至少选择三种但不要超过六种？我们实际上可以通过验证插件来强制执行。进入系列中的第一个复选框并添加`minlength`和`maxlength`属性，如下所示：
- en: '[PRE20]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We only have to add this on the first checkbox, not all of them. Validation
    is smart enough to figure out that we're talking about this set of checkboxes.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们只需要在第一个复选框上添加这个，而不是所有的复选框。验证足够智能，可以理解我们谈论的是这组复选框。
- en: Now, let's take a look at the field where we ask the site visitor how many days
    per year they drink a beverage. Obviously, since there are only 365 days in a
    year, that's the highest number they could enter in this field. So we'll add a
    `max` attribute to specify the highest possible number.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们看一下我们询问网站访问者每年喝多少天饮料的领域。显然，一年只有365天，这是他们可以在这个领域输入的最高数字。所以我们会添加一个`max`属性来指定最高可能的数字。
- en: '[PRE21]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: And that brings us to the payment section. Whatever we're selling, it's not
    free, so we're going to require both the credit card type and credit card number.
    To require entry for radio buttons, we just have to add the `required` class to
    the first radio button in the set.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将我们带到了支付部分。无论我们在卖什么，它都不是免费的，所以我们将要求输入信用卡类型和信用卡号。要求输入单选按钮，我们只需要在一组中的第一个单选按钮中添加`required`类。
- en: '[PRE22]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We don't have to make any other changes to the radio button series.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们不必对单选按钮系列进行任何其他更改。
- en: Now, let's handle the credit card number itself. We need to add the `required`
    class. We also need to add a `creditcard` class to validate that the number entered
    is, in fact, a valid credit card number.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们处理信用卡号本身。我们需要添加`required`类。我们还需要添加一个`creditcard`类来验证输入的号码实际上是一个有效的信用卡号。
- en: '[PRE23]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: And at the bottom of our form, we have our **Terms of Service** checkbox. This
    is required too, so we'll add the `required` class.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 而在我们的表单底部，有我们的**服务条款**复选框。这也是必需的，所以我们将添加`required`类。
- en: '[PRE24]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, we just need to call the `validate()` method that Validation makes available
    to us. Inside your document ready statement, select the form and call the `validate()`
    method.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们只需要调用Validation使我们可以使用的`validate()`方法。在你的文档准备好的声明中，选择表单并调用`validate()`方法。
- en: '[PRE25]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now if you refresh the page in the browser, you'll see that you can't submit
    the form without filling anything in — the required fields will be marked with
    an error message saying the field is required. If you try to type an invalid URL
    or e-mail address into the **Website** or **Email address** fields, you'll get
    an error message letting you know there's a problem to be corrected. Just one
    problem those error messages are sort of in a weird place for our checkboxes and
    radio buttons.![Time for action — validating form values on the fly](img/6709OS_12_img5.jpg)
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果您在浏览器中刷新页面，您将看到您无法在没有填写任何内容的情况下提交表单 - 必填字段将被标记为错误消息，说明该字段是必需的。如果您尝试在**网站**或**电子邮件地址**字段中输入无效的网址或电子邮件地址，您将收到一条错误消息，让您知道需要纠正的问题。只是一个问题，这些错误消息在我们的复选框和单选按钮的位置有点奇怪。![动作时间-即时验证表单值](img/6709OS_12_img5.jpg)
- en: That doesn't really help people understand exactly what's going on. Luckily,
    Validation allows us to add our own error messages to the page wherever we'd like
    them to display.
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 那实际上并不能帮助人们准确理解发生了什么。幸运的是，Validation允许我们在页面上添加自己的错误消息，无论我们想要它们显示在哪里。
- en: We're going to add an error message after the list of credit card type radio
    buttons.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在信用卡类型单选按钮列表后添加错误消息。
- en: '[PRE26]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We'll add a `<label>`. The for attribute will refer to the `name` of the field
    in this case, all the radio buttons share the `cc-type` name. We'll add a class
    of error, and add whatever `error` message we'd like inside.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将添加一个`<label>`。在这种情况下，for属性将指向字段的`name`，所有单选按钮共享`cc-type`名称。我们将添加一个错误类，并在内部添加我们想要的任何`error`消息。
- en: Note that for this case, the `for` attribute of our `label` is referring to
    the `name` of the field rather than the ID. This is a special case created by
    the Validation plugin. If you're not using custom error messages with the Validation
    plugin, then your label's `for` attribute should always reference the `id` of
    the form element.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，在这种情况下，我们的`label`的`for`属性指的是字段的`name`，而不是ID。这是Validation插件创建的特殊情况。如果你不是使用Validation插件的自定义错误消息，那么你的标签的`for`属性应该始终引用表单元素的`id`。
- en: 'Next, we don''t want those error messages showing up on the page unless they''re
    needed. We''d also like them to display in red so they stick out and are easy
    to find. Open your `styles.css` file and add some styles for the error message:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们不希望这些错误消息出现在页面上，除非它们是需要的。我们也希望它们以红色显示，这样它们就很显眼，易于找到。打开你的`styles.css`文件，为错误消息添加一些样式：
- en: '[PRE27]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We're adding a width since I've set my other labels to be short and floated
    to the left. And we're adding a little margin for some space between the error
    message and the field it's referring to.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们添加了一个宽度，因为我已经将我的其他标签设置为短并且浮动到左侧。并且我们添加了一点边距，为了在错误消息和它所指的字段之间添加一些空间。
- en: 'Now if you refresh the browser and try to submit the form without selecting
    a credit card type, you''ll get the error message in a much better place as follows:'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在如果你刷新浏览器，并尝试在没有选择信用卡类型的情况下提交表单，你将得到一个更好的错误消息位置，如下所示：
- en: '![Time for action — validating form values on the fly](img/6709OS_12_img6.jpg)'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![动作时间-即时验证表单值](img/6709OS_12_img6.jpg)'
- en: 'Next we need to do the same thing for our favorite beverages and our **Terms
    of Service** checkbox: Here''s what we''ll add for favorite beverages:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要为我们喜爱的饮料和我们的**服务条款**复选框做同样的事情：这是我们将添加的喜爱的饮料：
- en: '[PRE28]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: And here's what we'll add for **Terms of Service:**
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是我们将添加的**服务条款：**
- en: '[PRE29]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Now, if you refresh the page in the browser and try to submit the form without
    completing required fields or try to enter invalid information in the form, you'll
    get an appropriate error message as soon as the problem is detected.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您在浏览器中刷新页面，并且尝试在没有完成必填字段或在表单中输入无效信息的情况下提交表单，您将在检测到问题时立即得到适当的错误消息。
- en: What just happened?
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We used the Validation plugin to add some simple client-side validation to our
    form. The simplest way to use the Validation plugin is to simply add some class
    names and attributes to your form elements. Validation will take care of the rest
    — it's smart enough to recognize the HTML5 input types and validate those and
    offers some other useful validation rules such as required fields, a maximum number
    value, minimum and maximum lengths, and credit card numbers. We dropped in a line
    of CSS to style the error messages the way we wanted.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用验证插件向表单添加了一些简单的客户端验证。使用验证插件的最简单方法就是向表单元素添加一些类名和属性。验证插件会处理剩下的事情——它足够智能，能够识别HTML5输入类型并验证这些类型，并提供一些其他有用的验证规则，如必填字段、最大数字值、最小和最大长度以及信用卡号码。我们添加了一行CSS来样式化我们想要的错误消息。
- en: Improving appearance
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改善外观
- en: If you've tried styling web forms with CSS, then you've probably discovered
    that some form elements, like text inputs and buttons, are pretty easy to style.
    There are a few quirks, but once you get those figured out, you can get those
    form elements looking just about any way you'd like. Other form elements, however,
    are much more stubborn and don't respond much, if at all, to CSS styles. It's
    so frustrating to design a lovely form only to realize that it's technically impossible.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试过用CSS样式化Web表单，那么你可能发现一些表单元素，如文本输入和按钮，非常容易样式化。有一些怪癖，但一旦你弄清楚了，你就可以让这些表单元素看起来几乎任何你想要的样子。然而，其他一些表单元素却更为顽固，对CSS样式几乎没有什么响应。设计一个可爱的表单，然后意识到从技术上讲它是不可能的，这实在令人沮丧。
- en: 'These troublesome form elements are:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这些令人头痛的表单元素是：
- en: '[PRE30]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Not only are these four form elements impossible to style with CSS, they also
    look radically different from one browser and operating system to another, leaving
    us with little control over the appearance of our form. Let's see how Pixel Matrix's
    Uniform plugin can help us out.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅这四个表单元素在CSS中无法样式化，而且它们在不同浏览器和操作系统中的外观差异巨大，让我们对表单的外观几乎没有控制。让我们看看Pixel Matrix的Uniform插件如何帮助我们。
- en: Time for action — improving form appearance
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 — 改善表单外观
- en: 'Follow these steps to take advantage of the styling options made possible by
    the Uniform plugin:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤利用Uniform插件实现可能的样式选项：
- en: 'We''ll get started with a basic HTML file and associated files and folders,
    just like we set up in [Chapter 1](ch01.html "Chapter 1. Designer, Meet jQuery"),
    *Designer, Meet jQuery*. For this example, in the body of the HTML document, we''re
    going to set up a simple form with examples of each type of hard-to-style form
    element. Get started with a`<form>` tag:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们会从一个基本的HTML文件和相关文件和文件夹开始，就像我们在[第一章](ch01.html "第1章. 设计师，见到jQuery")中设置的那样，*设计师，见到jQuery*。例如，在HTML文档的正文中，我们将建立一个简单的表单，其中包含每种难以样式化的表单元素的示例。从`<form>`标签开始：
- en: '[PRE31]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, inside our form we''ll add our form elements. We''ll start off with a
    `select` drop down:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在我们的表单中，我们将添加我们的表单元素。我们将从一个`select`下拉框开始：
- en: '[PRE32]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We're following all the same rules we followed for the last form, making sure
    the form works properly and is accessible.
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们遵循了与上一个表单相同的规则，确保表单正常工作并且易于访问。
- en: 'Exactly what this `<select>` looks like will depend on your browser and operating
    system, but here''s how mine looks in Chrome on Mac OSX:'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<select>`的外观将取决于您的浏览器和操作系统，但在我这里，它在Chrome上的Mac OSX上的样子是这样的：'
- en: '![Time for action — improving form appearance](img/6709OS_12_img21.jpg)'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 — 改善表单外观](img/6709OS_12_img21.jpg)'
- en: Next, we'll add a file input.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加一个文件输入。
- en: '[PRE33]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Hard to believe this innocent-looking little tag could be the source of so
    much styling headache, but there you are. Here''s how it looks in Chrome on Mac
    OSX:'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 很难相信这个看似无害的标签竟然可能是如此头痛的样式来源，但事实就是如此。这是Chrome在Mac OSX上的样子：
- en: '![Time for action — improving form appearance](img/6709OS_12_img22.jpg)'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 — 改善表单外观](img/6709OS_12_img22.jpg)'
- en: 'Next up, let''s add a few checkboxes as follows:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们添加一些复选框，如下所示：
- en: '[PRE34]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![Time for action — improving form appearance](img/6709OS_12_img23.jpg)'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 — 改善表单外观](img/6709OS_12_img23.jpg)'
- en: And then some radio buttons.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后是一些单选按钮。
- en: '[PRE35]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '![Time for action — improving form appearance](img/6709OS_12_img24.jpg)'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 — 改善表单外观](img/6709OS_12_img24.jpg)'
- en: 'And the last thing we''ll add to our form is just a few easily styleable elements,
    so that we can learn how to style these to match our Uniform styles:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将向表单中添加的最后一件事只是一些易于样式化的元素，以便我们学习如何将它们样式化以匹配我们的Uniform样式：
- en: '[PRE36]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '![Time for action — improving form appearance](img/6709OS_12_img25.jpg)'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![执行动作的时间 — 改善表单外观](img/6709OS_12_img25.jpg)'
- en: What just happened?
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: Now we've got our unstyled form set up. Exactly what our form looks like will
    depend on your browser and operating system. We followed all the rules established
    earlier in this chapter for setting up a correct and accessible form. Except this
    time, we've included some difficult-to-style form elements. Let's take a look
    now at how we can use the Uniform plugin — to get our form looking consistent
    across as many browsers as possible.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们设置了未经样式处理的表单。我们的表单实际上看起来取决于您的浏览器和操作系统。我们按照本章前面建立的所有正确和可访问的表单设置规则进行设置。但是，这一次，我们包含了一些难以样式化的表单元素。现在让我们看看如何使用
    Uniform 插件 —— 让我们的表单在尽可能多的浏览器中保持一致。
- en: Styling the unstylable
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式化无法样式化的元素
- en: If you want to take a little time out and try writing some CSS to style these
    form elements, you'll see that there's not much that touches them. Some of them
    don't seem to be affected by CSS at all, and when they are, it's not always in
    the way that you'd expect. No wonder these form fields give everyone so much trouble.
    JQuery to the rescue.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想抽出一点时间尝试写一些 CSS 来样式化这些表单元素，你会发现它们几乎没什么影响。其中一些似乎根本不受 CSS 的影响，而当它们受到影响时，效果并不总是符合您的期望。难怪这些表单字段让每个人都头疼。JQuery
    来拯救。
- en: Time for action — adding uniform for styling the unstylable
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间来采取行动 —— 添加用于为无样式元素添加样式的 Uniform
- en: 'Follow these steps to use the Uniform plugin to gain styling control over your
    form elements:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Uniform 插件控制表单元素的样式，请按以下步骤操作：
- en: Let's get the Uniform plugin and take a look at how that works. Head over to
    [http://uniformjs.com/](http://uniformjs.com/) and click on the big **Download
    Uniform** button.![Time for action — adding uniform for styling the unstylable](img/6709OS_12_img7.jpg)
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们获取 Uniform 插件并看看它是如何工作的。前往 [http://uniformjs.com/](http://uniformjs.com/)
    并点击大的**下载 Uniform**按钮。![执行动作的时间 — 添加用于为无样式元素添加样式的 Uniform](img/6709OS_12_img7.jpg)
- en: Unzip the folder and take a look inside.![Time for action — adding uniform for
    styling the unstylable](img/6709OS_12_img8.jpg)
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压文件夹并查看其中的内容。![执行动作的时间 — 添加用于为无样式元素添加样式的 Uniform](img/6709OS_12_img8.jpg)
- en: This is pretty straightforward, right? Some styles, a demo, some images, and
    two versions of the Uniform plugin — one minified and one not. We've seen this
    before.
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这很简单，对吧？一些样式，一个演示，一些图片，以及两个版本的 Uniform 插件 —— 一个压缩和一个未压缩。我们以前见过这个。
- en: By default, Uniform comes with a default stylesheet and images. However, other
    styles are available. Back on `uniformjs.com`, if you click on **Themes** in the
    navigation, you'll see the themes that are currently available. I really like
    the look of Aristo, so I'm going to download that.
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，Uniform 自带一个默认样式表和图片。但是，还有其他样式可用。回到 `uniformjs.com`，如果在导航中点击**主题**，您将看到当前可用的主题。我非常喜欢
    Aristo 的外观，所以我要下载它。
- en: '![Time for action — adding uniform for styling the unstylable](img/6709OS_12_img9.jpg)'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![执行动作的时间 — 添加用于为无样式元素添加样式的 Uniform](img/6709OS_12_img9.jpg)'
- en: 'This gets me a simple ZIP file with just some css and images inside:'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这给我一个简单的 ZIP 文件，里面只有一些 css 和图片：
- en: '![Time for action — adding uniform for styling the unstylable](img/6709OS_12_img10.jpg)'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![执行动作的时间 — 添加用于为无样式元素添加样式的 Uniform](img/6709OS_12_img10.jpg)'
- en: 'Next, we need to get these files into our own project and attached to our HTML
    page. Let''s start with the JavaScript. Copy `jquery.uniform.min.js` to your own
    `scripts` folder and attach the Uniform script between jQuery and your own `scripts.js`
    file:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要将这些文件放入我们自己的项目中，并附加到我们的 HTML 页面中。让我们从 JavaScript 开始。将 `jquery.uniform.min.js`
    复制到您自己的 `scripts` 文件夹中，并将 Uniform 脚本在 jQuery 和您自己的 `scripts.js` 文件之间引用：
- en: '[PRE37]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now copy the CSS file for the theme you''d like to use to your own `styles`
    folder and attach it in the head of the document:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将您想要使用的主题的 CSS 文件复制到您自己的 `styles` 文件夹中，并在文档的头部引用它：
- en: '[PRE38]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The last thing we need to grab is the associated images. Copy the contents of
    your chosen theme's images folder to your own `images` folder. Your own project's
    structure should now look similar to the following screenshot:![Time for action
    — adding uniform for styling the unstylable](img/6709OS_12_img11.jpg)
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要获取的最后一样东西是关联的图片。将您选择的主题的图像文件夹的内容复制到您自己的 `images` 文件夹中。现在，您自己项目的结构应该看起来类似于以下截图:![执行动作的时间
    — 添加用于为无样式元素添加样式的 Uniform](img/6709OS_12_img11.jpg)
- en: 'Now, we''re ready to call the `uniform()` method to style our unstylable form
    elements. Open up your `scripts.js` file, and insert a document ready statement:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以调用 `uniform()` 方法来为我们的无法样式化的表单元素添加样式了。打开您的 `scripts.js` 文件，并插入一个文档就绪语句：
- en: '[PRE39]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Uniform allows us to pick and choose which form elements we''d like to style.
    In this case, we want to style all four stubborn elements, so our selector will
    be:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Uniform 允许我们选择我们想要样式化的表单元素。在这种情况下，我们想要样式化所有四个顽固的元素，所以我们的选择器将是：
- en: '[PRE40]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Then, all that''s left to do is call the `uniform()` method:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，剩下的就是调用 `uniform()` 方法：
- en: '[PRE41]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Now if you refresh the page in the browser, you'll see these stubborn and unstylable
    form elements now match the Uniform theme that you've selected.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果您在浏览器中刷新页面，您将看到这些顽固且不可样式化的表单元素现在与您选择的 Uniform 主题相匹配。
- en: '![Time for action — adding uniform for styling the unstylable](img/6709OS_12_img26.jpg)'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 — 为不可样式化的元素添加统一样式](img/6709OS_12_img26.jpg)'
- en: There are still some funky CSS things to take care of, and our fieldsets, legends,
    buttons, and text inputs don't match. Let's write a bit of CSS to bring it all
    together.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仍然有一些奇怪的 CSS 问题需要处理，我们的 fieldsets、legends、按钮和文本输入框不匹配。让我们写一点 CSS 将它们整合在一起。
- en: Styles for all
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 所有样式
- en: We still have some CSS things to clean up — our lists of checkboxes and radio
    buttons still have their bullets and our text inputs, buttons, fieldsets, and
    so on are still unstyled. Let's style everything to match the Uniform theme we've
    selected.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一些 CSS 问题需要解决 — 我们的复选框和单选按钮列表仍然有它们的项目符号，我们的文本输入、按钮、fieldsets 等仍未经过样式化。让我们将所有东西都样式化，以匹配我们选择的
    Uniform 主题。
- en: Time for action — styling the styleable
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 — 为可样式化元素添加样式
- en: 'Open up your `styles.css` file. We''ll start off by styling the fieldsets and
    legends:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的 `styles.css` 文件。我们将从样式化 fieldsets 和 legends 开始：
- en: '[PRE42]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: I've selected shades of blue that match the Aristo theme that I selected. If
    you chose a different theme, feel free to use different colors and styles to match
    your chosen theme.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我选择了与我选用的 Aristo 主题相匹配的蓝色。如果您选择了不同的主题，请随意使用不同的颜色和样式来匹配您选择的主题。
- en: 'Next, we''ll style some of the container elements we''re using in the form:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为表单中使用的某些容器元素添加样式：
- en: '[PRE43]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Next, we''ll add some styles to that text input and textarea so they match
    our Aristo form elements:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为文本输入和文本区域添加一些样式，以匹配我们的 Aristo 表单元素：
- en: '[PRE44]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'And last, but not least, we''ll style our buttons. The Aristo theme makes use
    of a nice blue gradient, so I''m going to use a gradient for my buttons. I''ll
    have to write quite a lot of code for supporting all the browsers, but here it
    is:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，但同样重要的是，我们将样式化我们的按钮。Aristo 主题使用了一个漂亮的蓝色渐变，所以我将为我的按钮使用渐变。我将不得不为支持所有浏览器编写相当多的代码，但这是它：
- en: '[PRE45]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: I'm adding a subtle text color change on hover and reversing the gradient when
    the buttons are clicked. Now, refresh the page in the browser and take a look
    at our beautiful form.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我在鼠标悬停时添加了微妙的文字颜色变化，并在点击按钮时反转了渐变。现在，刷新浏览器中的页面，看看我们美丽的表单。
- en: '![Time for action — styling the styleable](img/6709OS_12_img12.jpg)'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 — 为可样式化元素添加样式](img/6709OS_12_img12.jpg)'
- en: What just happened?
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We used the Pixelmatrix's Uniform jQuery plugin to style formerly stubborn and
    unstyleable form elements. We chose one of the pre-made themes and attached all
    relevant CSS and images to our page, then selected each type of form element we
    wanted to style and called the `uniform()` method. We then used our CSS skills
    to style the other form elements, a simple text input, a textarea, and some buttons,
    to match the theme we selected. The result is a gorgeous form that will look consistent
    across different browsers and will still work perfectly for users with JavaScript
    disabled.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了 Pixelmatrix 的 Uniform jQuery 插件来样式化以前顽固且无法样式化的表单元素。我们选择了一个预设主题，并将所有相关的
    CSS 和图像附加到我们的页面上，然后选择我们想要样式化的每一种表单元素，并调用 `uniform()` 方法。然后，我们使用我们的 CSS 技能来样式化其他表单元素，如简单的文本输入、文本区域和一些按钮，以匹配我们选择的主题。结果是一个漂亮的表单，在不同的浏览器中看起来一致，并且对于禁用
    JavaScript 的用户仍然完美地工作。
- en: Our own theme
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们自己的主题
- en: 'Sure, this Aristo theme is nice, but what if it doesn''t match our site? Do
    we have any other option? Of course we do! If none of the prebuilt themes match
    your site, you can make your own theme using your own styles and colors to match
    any site you''d like. In fact, Pixelmatrix has made it super easy. Here''s how
    you do it:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个 Aristo 主题很不错，但是如果它不匹配我们的网站怎么办？我们还有其他选择吗？当然有！如果预设的主题都不符合您的网站，您可以使用自己的样式和颜色制作自己的主题，以匹配您喜欢的任何网站。事实上，Pixelmatrix
    已经使这变得超级简单了。以下是您可以做到的：
- en: Time for action — creating a custom uniform theme
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 — 创建自定义的统一主题
- en: Start off by downloading the theme kit from Pixelmatrix. It's available in the
    themes section on [uniformjs.com:](http://uniformjs.com)![Time for action — creating
    a custom uniform theme](img/6709OS_12_img9.jpg)
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先从Pixelmatrix下载主题工具包。你可以在 [uniformjs.com](http://uniformjs.com) 的主题部分找到它！[行动时间
    — 创建自定义Uniform主题](img/6709OS_12_img9.jpg)
- en: Unzip the folder and inside you'll find two PSD files — `sprite.psd` and `sprites.psd`.
    Open up `sprite.psd` in Photoshop and style the form elements to your heart's
    content. You can change the sizes of the elements if you'd like to have larger
    or smaller form elements. `Sprites.psd` is only for explaining what each style
    is for. You can use it as a reference to make sure you get all the possibilities
    covered, but you won't actually need to use it to create your theme.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压缩文件夹，里面有两个PSD文件 — `sprite.psd` 和 `sprites.psd`。在Photoshop中打开 `sprite.psd`
    并按照您的喜好为表单元素添加样式。如果您想要更大或更小的表单元素，您可以更改元素的大小。`Sprites.psd` 仅用于说明每种样式的用途。您可以将其用作参考，以确保覆盖所有可能性，但实际上您不需要使用它来创建您的主题。
- en: When your sprite is ready, head over to [http://uniformjs.com/themer.html](http://uniformjs.com/themer.html).![Time
    for action — creating a custom uniform theme](img/6709OS_12_img13.jpg)
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你的精灵准备好时，转到 [http://uniformjs.com/themer.html](http://uniformjs.com/themer.html)。![行动时间
    — 创建自定义Uniform主题](img/6709OS_12_img13.jpg)
- en: Fill out the form with height of your select sprite, the width and height of
    your checkboxes and radio buttons, and the height of your file input. Then click
    Generate code. The CSS that you'll need to have Uniform work with your sprite
    will be generated for you. Copy and paste it into a CSS file and save it to your
    project.
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填写表单，包括选择精灵的高度、复选框和单选按钮的宽度和高度，以及文件输入的高度。然后点击生成代码。生成用于使Uniform与你的精灵配合工作所需的CSS将为您生成。将其复制粘贴到CSS文件中并保存到您的项目中。
- en: Attach your new CSS file to your HTML document and save your sprite as a PNG
    file to the `images` folder in your project, and you should be all set. You might
    find a few things that need some minor tweaks, but setting up a custom Uniform
    theme is that straightforward.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的新CSS文件附加到HTML文档中，并将你的精灵保存为PNG文件，保存到你项目的`images`文件夹中，然后你应该一切就绪了。你可能会发现一些需要进行微小调整的地方，但设置一个自定义Uniform主题就是这么简单。
- en: Note
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you'd like to contribute your theme back to the Uniform community for other
    designers and developers to use, you can submit it to Pixelmatrix by e-mailing
    a zip of your theme to `<[josh@pixelmatrixdesign.com](mailto:josh@pixelmatrixdesign.com)>`.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想将您的主题贡献给Uniform社区，让其他设计师和开发人员使用，您可以通过将您的主题的zip文件发送到 `<[josh@pixelmatrixdesign.com](mailto:josh@pixelmatrixdesign.com)>`
    来将其提交给Pixelmatrix。
- en: What just happened?
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We learned how to use the theme kit and custom theme CSS generator provided
    by Pixelmatrix to quickly and easily create our own Uniform theme.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何使用Pixelmatrix提供的主题工具包和自定义主题CSS生成器，快速轻松地创建我们自己的Uniform主题。
- en: Summary
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: Well, that wraps up the chapter on forms. We learned how to use the new HTML5
    form elements properly to create a form that functions perfectly and is accessible
    to boot. We learned how to focus the first field in the form, use placeholder
    text in all browsers, validate our site visitor's form input and style those stubborn
    and notoriously unstyleable form elements. Now you've got an arsenal of tools
    on your side to create gorgeous-looking forms that enhance your site visitors'
    experience on your site. And best of all, they all degrade gracefully for users
    with JavaScript disabled since we approached our forms with the progressive enhancement
    mindset — first building out a working form, then layering in enhancements for
    those site visitors whose browsers support them.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这就结束了有关表单的章节。我们学会了如何正确使用新的HTML5表单元素来创建一个功能完美且易于访问的表单。我们学会了如何将焦点放在表单中的第一个字段上，在所有浏览器中使用占位文本，验证我们网站访客的表单输入，并为那些难以样式化的固执和臭名昭著的表单元素添加样式。现在你拥有了一系列工具来创建在你的网站上增强你的网站访客体验的美观表单。最重要的是，它们都能够在禁用JavaScript的用户上优雅地降级，因为我们采用了渐进增强的思维方式来处理我们的表单
    —— 首先构建一个可工作的表单，然后逐步添加增强功能，以供那些浏览器支持的网站访客使用。
- en: I know that JavaScript can be a scary subject for designers. Kudos to you for
    sticking with me to the end of the book! I hope now that you have a basic understanding
    of jQuery and feel sure that you'll be able to tackle your next JavaScript challenge
    with confidence. You know how to put the jQuery library to good use to enhance
    your sites. You know how to find good plugins to make coding up interactions quick
    and easy. You know how CSS and JavaScript can work together to enhance the site
    visitor's experience on your site. And you know that there is no shortage of tutorials,
    resources, help forums, articles, and discussions online to help you along if
    you get stuck.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道对于设计师来说，JavaScript 可能是一个可怕的主题。感谢你一直陪伴我到书的最后！我希望现在你对 jQuery 有了基本的理解，并且确信自己能够自信地应对下一个
    JavaScript 挑战。你知道如何有效地利用 jQuery 库来增强你的网站。你知道如何找到好的插件，快速轻松地编写交互功能。你知道 CSS 和 JavaScript
    如何共同工作，以增强网站访客在你的网站上的体验。你也知道，如果遇到困难，网络上有很多教程、资源、帮助论坛、文章和讨论可以帮助你。
- en: For its part, jQuery gets better with every release — sleeker, faster, and more
    capable. The jQuery team is careful to keep the documentation updated so you'll
    always be able to figure out just how to use each method. The jQuery team is smart
    and quick, and new jQuery updates are being announced on a regular schedule. All
    of this points to a lively and useful library that will only continue to grow
    in popularity across the Web. It's a favorite of many coders, from experienced
    hackers to beginners like you.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 jQuery 而言，每一次发布都会变得更加出色 — 更加简洁、更快、更有能力。jQuery 团队会注意保持文档的更新，因此你总能弄清楚如何使用每个方法。jQuery
    团队聪明而迅速，新的 jQuery 更新定期发布。所有这些都指向一个活跃且有用的库，在 Web 上的受欢迎程度将继续增长。它是许多程序员的最爱，从经验丰富的黑客到像你这样的初学者。
- en: I hope that you've enjoyed this book and that it's given you many new ideas
    for interactive elements you can design and build for your sites. Be sure to stay
    connected to the jQuery community — it will be your best resource moving forward
    with further improving and growing your JavaScript skills.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢这本书，并且它给你带来了许多新的想法，可以为你的网站设计和构建交互式元素。一定要与 jQuery 社区保持联系 —— 这将是你在进一步改进和发展
    JavaScript 技能方面的最佳资源。
