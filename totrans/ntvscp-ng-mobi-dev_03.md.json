["```js\n<ActionBar title=\"TNSStudio\">\n</ActionBar>\n<GridLayout rows=\"*, 100\" columns=\"*\">\n  <track-list row=\"0\" col=\"0\"></track-list>\n  <player-controls row=\"1\" col=\"0\"></player-controls>\n</GridLayout>\n```", "```js\n// angular\nimport { Component, Input } from '@angular/core';\n\n// app\nimport { ITrack } from '../../../core/models';\nimport { LogService } from '../../../core/services';\nimport { PlayerService } from '../../services/player.service';\n\n@Component({\n moduleId: module.id,\n selector: 'track-list',\n templateUrl: 'track-list.component.html'\n})\nexport class TrackListComponent {\n\n constructor(\n   private logService: LogService,\n   public playerService: PlayerService\n ) { }\n\n public record(track: ITrack) {\n   this.logService.inspect(track);\n }\n}\n```", "```js\n<ListView [items]=\"playerService.tracks\">\n  <ng-template let-track=\"item\">\n    <GridLayout rows=\"auto\" columns=\"75,*,100\">\n      <Button text=\"Record\" (tap)=\"record(track)\" \n          row=\"0\" col=\"0\"></Button>\n      <Label [text]=\"track.name\" row=\"0\" col=\"1\"></Label>\n      <Switch [checked]=\"track.solo\" row=\"0\" col=\"2\">\n      </Switch>\n    </GridLayout>\n  </ng-template>\n</ListView>\n```", "```js\n// angular\nimport { Injectable } from '@angular/core';\n\n// nativescript\nimport * as dialogs from 'ui/dialogs';\n\n@Injectable()\nexport class DialogService {\n\n  public alert(msg: string) {\n    return dialogs.alert(msg);\n  }\n\n  public confirm(msg: string) {\n    return dialogs.confirm(msg);\n  }\n\n  public prompt(msg: string, defaultText?: string) {\n    return dialogs.prompt(msg, defaultText);\n  }\n\n  public login(msg: string, userName?: string, password?: string) {\n    return dialogs.login(msg, userName, password);\n  }\n\n  public action(msg: string, cancelButtonText?: string, \n    actions?: string[]) {\n    return dialogs.action(msg, cancelButtonText, actions);\n  }\n}\n```", "```js\nimport { AuthService } from './auth.service';\nimport { DatabaseService } from './database.service';\nimport { DialogService } from './dialog.service';\nimport { LogService } from './log.service';\n\nexport const PROVIDERS: any[] = [\n AuthService,\n DatabaseService,\n DialogService,\n LogService\n];\n\nexport * from './auth.service';\nexport * from './database.service';\nexport * from './dialog.service';\nexport * from './log.service';\n```", "```js\n// angular\nimport { Component, Input } from '@angular/core';\n\n// app\nimport { ITrack } from '../../../core/models';\nimport { AuthService, LogService, DialogService } from '../../../core/services';\nimport { PlayerService } from '../../services/player.service';\n\n@Component({\n  moduleId: module.id,\n  selector: 'track-list',\n  templateUrl: 'track-list.component.html'\n})\nexport class TrackListComponent {\n\n constructor(\n   private authService: AuthService,\n   private logService: LogService,\n   private dialogService: DialogService,\n   public playerService: PlayerService\n ) { }\n\n public record(track: ITrack, usernameAttempt?: string) {\n   if (AuthService.CURRENT_USER) {\n     this.dialogService.confirm(\n       'Are you sure you want to re-record this track?'\n     ).then((ok) => {\n       if (ok) this._navToRecord(track);\n     });\n   } else {\n     this.authService.promptLogin(\n       'Provide an email and password to record.',\n       usernameAttempt\n     ).then(\n       this._navToRecord.bind(this, track), \n       (usernameAttempt) => {\n         // initiate sequence again\n         this.record(track, usernameAttempt);\n       }\n     ); \n    }\n  }\n\n  private _navToRecord(track: ITrack) {\n    // TODO: navigate to record screen\n    this.logService.debug('yes, re-record', track);\n  }\n}\n```", "```js\n// angular\nimport { Injectable } from '@angular/core';\n\n// lib\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n// app\nimport { DatabaseService } from './database.service';\nimport { DialogService } from './dialog.service';\nimport { LogService } from './log.service';\n\n@Injectable()\nexport class AuthService {\n\n // access our current user from anywhere\n public static CURRENT_USER: any;\n\n // subscribe to authenticated state changes\n public authenticated$: BehaviorSubject<boolean> = \n   new BehaviorSubject(false);\n\n constructor(\n private databaseService: DatabaseService,\n private dialogService: DialogService,\n private logService: LogService\n ) {\n   this._init();\n } \n\n public promptLogin(msg: string, username: string = '')\n   : Promise<any> {\n   return new Promise((resolve, reject) => {\n     this.dialogService.login(msg, username, '')\n       .then((input) => {\n         if (input.result) { // result = false when canceled\n           if (input.userName && \n               input.userName.indexOf('@') > -1) {\n               if (input.password) {\n                 // persist user credentials\n                 this._saveUser(\n                   input.userName, input.password\n                 );\n                 resolve();\n               } else {\n                 this.dialogService.alert(\n                   'You must provide a password.'\n                 ).then(reject.bind(this, input.userName));\n               }\n           } else {\n             // reject, passing userName back\n             this.dialogService.alert(\n               'You must provide a valid email address.'\n             ).then(reject.bind(this, input.userName));\n           }\n         }\n       });\n     });\n }\n\n private _saveUser(username: string, password: string) {\n   AuthService.CURRENT_USER = { username, password };\n   this.databaseService.setItem(\n     DatabaseService.KEYS.currentUser,\n     AuthService.CURRENT_USER\n   );\n   this._notifyState(true);\n }\n\n  private _init() {\n    AuthService.CURRENT_USER =\n      this.databaseService\n      .getItem(DatabaseService.KEYS.currentUser);\n    this.logService.debug(\n      `Current user: `, AuthService.CURRENT_USER\n    );\n    this._notifyState(!!AuthService.CURRENT_USER);\n  }\n\n  private _notifyState(auth: boolean) {\n    this.authenticated$.next(auth);\n  }\n}\n```", "```js\n<ListView [items]=\"playerService.tracks | orderBy: 'order'\">\n```", "```js\nimport { Pipe } from '@angular/core';\n\n@Pipe({\n name: 'orderBy'\n})\nexport class OrderByPipe {\n\n // Comparator method\n static comparator(a: any, b: any): number {\n   if (a === null || typeof a === 'undefined') a = 0;\n   if (b === null || typeof b === 'undefined') b = 0;\n\n   if ((isNaN(parseFloat(a)) || !isFinite(a)) || \n       (isNaN(parseFloat(b)) || !isFinite(b))) {\n      // lowercase strings\n      if (a.toLowerCase() < b.toLowerCase()) return -1;\n      if (a.toLowerCase() > b.toLowerCase()) return 1;\n   } else {\n     // ensure number values\n     if (parseFloat(a) < parseFloat(b)) return -1;\n     if (parseFloat(a) > parseFloat(b)) return 1;\n   }\n\n   return 0; // values are equal\n }\n\n // Actual value transformation\n transform(value: Array<any>, property: string): any {\n   return value.sort(function (a: any, b: any) {\n     let aValue = a[property];\n     let bValue = b[property];\n     let comparison = OrderByPipe\n                      .comparator(aValue, bValue);\n     return comparison;\n   });\n } \n}\n```", "```js\nimport { OrderByPipe } from './order-by.pipe';\n\nexport const PIPES: any[] = [\n OrderByPipe\n];\n```", "```js\n// nativescript\nimport { NativeScriptModule } from 'nativescript-angular/nativescript.module'; \n\n// angular\nimport { NgModule } from '@angular/core';\n\n// app\nimport { PIPES } from './pipes';\nimport { PROVIDERS } from './services';\n\n@NgModule({\n imports: [\n   NativeScriptModule\n ],\n declarations: [\n   ...PIPES\n ],\n providers: [\n   ...PROVIDERS\n ],\n exports: [\n   NativeScriptModule,\n   ...PIPES\n ]\n})\nexport class CoreModule { }\n```", "```js\nCONSOLE ERROR file:///app/tns_modules/tns-core-modules/trace/trace.js:160:30: ns-renderer: ERROR BOOTSTRAPPING ANGULAR\nCONSOLE ERROR file:///app/tns_modules/tns-core-modules/trace/trace.js:160:30: ns-renderer: Template parse errors:\n The pipe 'orderBy' could not be found (\"\n </ListView>-->\n\n <ListView [ERROR ->][items]=\"playerService.tracks | orderBy: 'order'\">\n   <ng-template let-track=\"item\">\n     <GridLayout rows\"): TrackListComponent@10:10\n```", "```js\n// angular\nimport { NgModule } from '@angular/core';\n\n// app\nimport { CoreModule } from '../core/core.module';\nimport { COMPONENTS } from './components';\nimport { PROVIDERS } from './services';\n\n@NgModule({\n imports: [\n   CoreModule \n ],\n providers: [...PROVIDERS],\n declarations: [...COMPONENTS],\n exports: [...COMPONENTS]\n})\nexport class PlayerModule { }\n```", "```js\n<GridLayout rows=\"100\" columns=\"75,*\" row=\"1\" col=\"0\">\n  <Button [text]=\"playStatus\" (tap)=\"togglePlay()\" row=\"0\" col=\"0\"></Button>\n  <Slider minValue=\"0\" [maxValue]=\"duration\" \n          [value]=\"currentTime\" row=\"0\" col=\"1\"></Slider>\n</GridLayout>\n```", "```js\n// angular\nimport { Component, Input } from '@angular/core';\n\n// app\nimport { ITrack } from '../../../core/models';\nimport { LogService } from '../../../core/services';\nimport { PlayerService } from '../../services';\n\n@Component({\n moduleId: module.id,\n selector: 'player-controls',\n templateUrl: 'player-controls.component.html'\n})\nexport class PlayerControlsComponent {\n\n public currentTime: number = 0; \n public duration: number = 0; \n public playStatus: string = 'Play';\n\n constructor(\n   private logService: LogService,\n   private playerService: PlayerService\n ) { }\n\n public togglePlay() {\n   let playing = !this.playerService.playing;\n   this.playerService.playing = playing;\n   this.playStatus = playing ? 'Stop' : 'Play';\n }\n\n}\n```", "```js\nconstructor() {\n  this.tracks = [\n    {name: \"Guitar\"},\n    {name: \"Vocals\"},\n  ];\n}\n```", "```js\ntns run ios --emulator\n```", "```js\ntns run android --emulator\n```"]