- en: '*Chapter 1*: Creating a Single-Page Application in React'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you bought this book, you'd probably heard of React before and maybe even
    tried out some of the code examples that can be found online. This book is constructed
    in such a way that the code examples in each chapter gradually increase in complexity,
    so even if you feel your experience with React is limited, each chapter should
    be understandable if you've read the previous one. By the end of this book, you
    will know how to work with React and its stable features, up until version 18,
    and you will also have experience with GraphQL and React Native.
  prefs: []
  type: TYPE_NORMAL
- en: This first chapter kicks off with us learning how to build a single-page application
    based on the popular TV show *Rick and Morty*; the application will provide us
    with information about its characters that we'll fetch from an external source.
    The core concepts for getting started with React will be applied to this project,
    which should be understandable if you've got some prior experience in building
    applications with React. If you haven't worked with React before, that's no problem
    either; this book describes the React features that are used in the code examples
    along the way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a new React project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structuring a project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's dive in!
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create a single-page application in React that retrieves
    data from an API and runs in the browser with Webpack and Babel. Styling will
    be done using Bootstrap. The application that you'll build will show information
    about the popular TV show *Rick and Morty*, along with images.
  prefs: []
  type: TYPE_NORMAL
- en: The build time is 1 hour.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The complete code for this chapter can be found on GitHub: [https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter01](https://github.com/PacktPublishing/React-Projects-Second-Edition/tree/main/Chapter01).'
  prefs: []
  type: TYPE_NORMAL
- en: For the applications created in this book, you'll need to have at least Node.js
    v14.17.0 installed on your machine so that you can run npm commands. If you haven't
    installed Node.js on your machine, please go to [https://nodejs.org/en/download/](https://nodejs.org/en/download/),
    where you can find the download instructions for macOS, Windows, and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing Node.js, run the following commands in your command line to
    check the installed versions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Node.js (which should be v14.17.0 or higher), use this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For npm (which should be v6.14.3 or higher), use this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Also, you should have installed the React Developer Tools plugin (for Chrome
    and Firefox) and added it to your browser. This plugin can be installed from the
    Chrome Web Store ([https://chrome.google.com/webstore](https://chrome.google.com/webstore))
    or Firefox Add-ons ([https://addons.mozilla.org](https://addons.mozilla.org)).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a single-page application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create a new single-page React application from scratch,
    starting with setting up a new project with Webpack and Babel. Setting up a React
    project from scratch will help you understand the basic needs of a project, which
    is crucial for any project you create.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every time you create a new React project, the first step is to create a new
    directory on your local machine. Since this is the first chapter for which you're
    going to build a single-page application, name this directory `chapter-1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside this new directory, execute the following from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Running this command will create a fresh `package.json` file with the bare minimum
    of information needed to run a JavaScript/React project. By adding the `-y` flag
    to the command, we can automatically skip the steps where we set information such
    as the name, version, and description.
  prefs: []
  type: TYPE_NORMAL
- en: 'After running this command, the following `package.json` file will be created
    for the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about the workings of `package.json`, make sure to read the documentation
    from npm: [https://docs.npmjs.com/cli/v6/configuring-npm/package-json](https://docs.npmjs.com/cli/v6/configuring-npm/package-json).'
  prefs: []
  type: TYPE_NORMAL
- en: After creating `package.json` in this section, we're ready to add Webpack, which
    we will do in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Webpack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To run the React application, we need to install Webpack 5 (at the time of
    writing, the current stable version of Webpack is version 5) and the Webpack CLI
    as `devDependencies`. Webpack is a library that lets us create a bundle out of
    JavaScript/React code that can be used in a browser. The following steps will
    help you set up Webpack:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the required packages from npm using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After installation, these packages are included inside the `package.json` file
    where we can have them run in our `start` and `build` scripts. But first, we need
    to add some files to the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will add the `index.js` file to a new directory called `src`. Later on,
    we'll configure Webpack so that this file is the starting point for our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the following code block must be added to this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To run the preceding code, we will add the `start` and `build` scripts to our
    application using Webpack. The test script is not needed in this chapter, so this
    can be deleted. Also, the `main` field can be changed to `private` with the `true`
    value, as the code we''re building is a local project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `npm start` command will run Webpack in development mode, while `npm run
    build` will create a production bundle using Webpack. The biggest difference is
    that running Webpack in production mode will minimize our code and decrease the
    size of the project bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now run the `start` or `build` command from the command line; Webpack will
    start up and create a new directory called `dist`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside this directory, there will be a file called `main.js` that includes
    our project code and is also known as our bundle. If successful, the following
    output will be visible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Depending on whether we've run Webpack in development or production mode, the
    code will be minimized in this file.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check whether your code is working by running the `main.js` file in
    your bundle from the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command runs the bundled version of our application and should return
    the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now, we're able to run JavaScript code from the command line. In the next part
    of this section, we will learn how to configure Webpack so that it works with
    React.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Webpack to work with React
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we've set up a basic development environment with Webpack for a JavaScript
    application, we can start installing the packages we need in order to run any
    React application.
  prefs: []
  type: TYPE_NORMAL
- en: 'These packages are `react` and `react-dom`, where the former is the generic
    core package for React and the latter provides an entry point to the browser''s
    DOM and renders React. Install these packages by executing the following command
    in the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Installing only the dependencies for React is not sufficient to run it, since,
    by default, not every browser can read the format (such as ES2015+ or React) that
    your JavaScript code is written in. Therefore, we need to compile the JavaScript
    code into a readable format for every browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, we''ll use Babel and its related packages to create a toolchain to
    use React in the browser with Webpack. These packages can be installed as `devDependencies`
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Next to the Babel core package, we'll also install `babel-loader`, which is
    a helper so that Babel can run with Webpack and two preset packages. These preset
    packages help determine which plugins will be used to compile our JavaScript code
    into a readable format for the browser (`@babel/preset-env`) and to compile React-specific
    code (`@babel/preset-react`). With the packages for React and the correct compilers
    installed, the next step is to make them work with Webpack so that they are used
    when we run our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, configuration files for both Webpack and Babel need to be created
    in the `src` directory of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The configuration for Webpack is added to the `webpack.config.js` file to use
    `babel-loader`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The configuration in this file tells Webpack to use `babel-loader` for every
    file that has the `.js` extension and excludes files in the `node_modules` directory
    for the Babel compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the Babel presets, the following configuration must be added to `babel.config.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`@babel/preset-env` must be set to target `esmodules` in order to use the latest
    Node modules. Also, defining the JSX runtime to `automatic` is needed, since React
    18 has adopted the new JSX Transform functionality: [https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The configuration for `babel-loader` can also be placed in the configuration
    inside `webpack.config.json`. But by creating a separate Babel configuration file
    for this, these settings can also be used by other tools in the JavaScript/React
    ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've set up Webpack and Babel, we can run JavaScript and React from
    the command line. In the next part of this section, we'll create our first React
    code and make it run in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering a React project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With the packages we''ve installed and configured in the previous sections
    to set up Babel and Webpack, we need to create an actual React component that
    can be compiled and run. Creating a new React project involves adding some new
    files to the project and making changes to the setup for Webpack:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s edit the `index.js` file that already exists in our `src` directory
    so that we can use `react` and `react-dom`. The contents of this file can be replaced
    with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, this file imports the `react` and `react-dom` packages, defines
    a simple component that returns an `h1` element containing the name of your application,
    and has this component rendered in the browser with `react-dom`. The last line
    of code mounts the `App` component to an element with the `root` ID selector in
    your document, which is the entry point of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create a file that has this element in a new directory called `public`
    and name that file `index.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After adding a new file called `index.html` to this directory, we add the following
    code inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This adds an HTML heading and body. Within the `head` tag is the title of our
    application, and inside the `body` tag is a section with the "root" ID selector.
    This matches with the element we've mounted the `App` component to in the `src/index.js`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final step in rendering our React component is extending Webpack so that
    it adds the minified bundle code to the body tags as scripts when running. Therefore,
    we should install the `html-webpack-plugin` package into our `devDependencies`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To use this new package to render our files with React, the Webpack configuration
    in the `webpack.config.js` file must be extended:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we run `npm start` again, Webpack will start in development mode and
    add the `index.html` file to the `dist` directory. Inside this file, we''ll see
    that, inside our `body` tag, a new `scripts` tag has been inserted that directs
    us to our application bundle – that is, the `dist/main.js` file. If we open this
    file in the browser or run `open dist/index.html` from the command line, it will
    return the result directly inside the browser. We can do the same when running
    the `npm run build` command to start Webpack in production mode; the only difference
    is that our code will be minified:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Rendering React in the browser'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.1_B17390.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.1 – Rendering React in the browser
  prefs: []
  type: TYPE_NORMAL
- en: This process can be sped up by setting up a development server with Webpack.
    We'll do this in the final part of this section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a development server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While working in development mode, every time we make changes to the files in
    our application, we need to rerun the `npm start` command. Since this is a bit
    tedious, we will install another package called `webpack-dev-server`. This package
    adds the option to force Webpack to restart every time we make changes to our
    project files and manages our application files in memory instead of by building
    the `dist` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `webpack-dev-server` package can be installed with `npm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we need to edit the `dev` script in the `package.json` file so that it
    uses `webpack-dev-server` instead of Webpack. This way, you don''t have to recompile
    and reopen the bundle in the browser after every code change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The preceding configuration replaces Webpack in the `start` scripts with `webpack-dev-server`,
    which runs Webpack in development mode. This will create a local development server
    that runs the application, which makes sure that Webpack is restarted every time
    an update is made to any of your project files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This will cause the local development server to become active at `http://localhost:8080/`,
    and it will refresh every time we make an update to any file in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we've created the basic development environment for our React application,
    which we'll develop and structure further in the next section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Structuring a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the development environment set up, it''s time to start creating the single-page
    application. In the preceding sections, we''ve already added new directories to
    the project. But let''s recap the current structure of the project, where two
    of the directories within our project''s root directory are important:'
  prefs: []
  type: TYPE_NORMAL
- en: The first directory is called `dist` and is where the output from Webpack's
    bundled version of our application can be found.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second one is called `src` and includes the source code of our application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Another directory that can be found in the root directory of our project is
    called `node_modules`. This is where the source files for every package that we
    install using `npm` are placed. It is recommended you don't make any manual changes
    to files inside this directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the following subsections, we will learn how to structure our React projects.
    This structure will be used in the rest of the chapters in this book as well.
  prefs: []
  type: TYPE_NORMAL
- en: Creating new components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The official documentation for React doesn''t state any preferred approach
    regarding how to structure our React project, although two common approaches are
    popular within the community: either structuring your files by feature/page or
    structuring them by file type.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The single-page application in this chapter will use a hybrid approach, where
    files are structured by file type first and by feature second. In practice, this
    means that there will be two types of components: top-level components, which
    are sometimes called containers, and low-level components, which relate to these
    top-level components. Creating these components requires that we add the following
    files and code changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step to achieving this structure is by creating a new subdirectory
    of `src` called `components`. Inside this directory, create a file called `List.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This file will return the component that lists all the information about *Rick
    and Morty*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This component should be included in the entry point of our application so
    that it''s visible. Therefore, we need to include it in the `index.js` file, inside
    the `src` directory, and refer to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we still have the development server running (if not, execute the `npm start`
    command again), we'll see that our application now returns the **Characters**
    heading below the title.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to add a component to the `List` component, making it a so-called
    composed component, which is a component that consists of multiple components.
    This component will be called `Character` and should also be located in the `src`
    subdirectory called `components`. Inside this directory, create a file called
    `Character.js` and add the following code block to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you have probably guessed from the name of this component, it will be used
    to return information about a character from *Rick and Morty* later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, import this `Character` component into the `List` component and return
    this component after the `h2` element by replacing the `return` function with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we visit our application in the browser again at `http://localhost:8080/`,
    the words **Character** will be displayed below the title and heading of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Adding components to React'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.2_B17390.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.2 – Adding components to React
  prefs: []
  type: TYPE_NORMAL
- en: 'From this, we cannot see which components are being rendered in the browser.
    But luckily, we can open the React Developer Tools plugin in our browser; we''ll
    notice that the application currently consists of multiple stacked components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the next part of this section, we will use our knowledge of structuring a
    React project and create new components to fetch data about *Rick and Morty* that
    we want to display in this single-page application.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With both the development server and the structure for our project set up, it's
    time to finally add some data to it. For this, we'll be using the *Rick and Morty*
    REST API ([https://rickandmortyapi.com/documentation/#rest](https://rickandmortyapi.com/documentation/#rest)),
    which provides information about this popular TV show.
  prefs: []
  type: TYPE_NORMAL
- en: Information from APIs can be retrieved in JavaScript using, for example, the
    `fetch` method, which is already supported by our browser. This data will be retrieved
    in the top-level components only, meaning that we should add a `fetch` function
    in the `List` container to retrieve and store that information.
  prefs: []
  type: TYPE_NORMAL
- en: To store the information, we'll be using the built-in state management ([https://reactjs.org/docs/state-and-lifecycle.html](https://reactjs.org/docs/state-and-lifecycle.html))
    in React. Anything stored in the state can be passed down to the low-level components,
    after which they are called props. A simple example of using state in React is
    by using the `useState` Hook, which can be used to store and update variables.
    Every time these variables change using the `update` method that is returned by
    the `useState` Hook, our component will re-render.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the release of version 16.8.0, React has used the concept of Hooks, which
    are methods supplied by React that let you use its core features without using
    class components. More information about Hooks can be found in the documentation:
    [https://reactjs.org/docs/hooks-intro.html](https://reactjs.org/docs/hooks-intro.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Before adding the logic to retrieve data from the *Rick and Morty* REST API,
    let's inspect that API to see what fields will be returned. The base URL for the
    API is [https://rickandmortyapi.com/api](https://rickandmortyapi.com/api).
  prefs: []
  type: TYPE_NORMAL
- en: 'This URL returns a JSON output with all the possible endpoints for this API,
    which are all `GET` requests, meaning read-only, and work over `https`. From this
    base URL, we''ll be using the `/character` endpoint to get information about the
    characters from *Rick and Morty*. Not all information returned by this endpoint
    will be used; the following are the fields that we''ll actually be using:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id` (int): The unique identifier of the character'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` (string): The name of the character'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`origin` (object): The object containing the name and the link to the character''s
    origin location'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image` (string): The link to the character''s image with the dimensions 300
    x 300 px'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before retrieving the data for *Rick and Morty*, the `Character` component
    needs to be prepared to receive this information. To display information about
    *Rick and Morty*, we need to add the following lines to the `Character` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the logic to retrieve the data can be implemented by importing `useState`
    from React and adding this Hook to the `List` component, which will contain an
    empty array as a placeholder for the characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: To do the actual data fetching, another Hook should be imported, which is the
    `useEffect` Hook. This one can be used to handle side effects, either when the
    application mounts or when the state or a prop gets updated. This Hook takes two
    parameters, where the first one is a callback and the second one is an array containing
    all of the variables this Hook depends on – the so-called dependency array. When
    any of these dependencies change, the callback for this Hook will be called. When
    there are no values in this array, the Hook will be called constantly. After the
    data is fetched from the source, the state will be updated with the results.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our application, we need to add this Hook and retrieve the data from the
    API, and we should use an `async/await` function, since the `fetch` API returns
    a promise. After fetching the data, `state` should be updated by replacing the
    empty array for data with the character information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `useEffect` Hook, the new `fetchData` function will be called, as
    it''s advised to not use an `async/await` function directly. The Hook is only
    calling the logic to retrieve the data from the API when the length of the `characters`
    state changes. You can extend this logic by also adding a `loading` state to the
    application so that the user will know when the data is still being fetched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The previous method that we used to retrieve information from JSON files using
    `fetch` doesn't take into account that the request to this file may fail. If the
    request fails, the `loading` state will remain `true`, meaning that the user will
    keep seeing the loading indicator. If you want to display an error message when
    the request doesn't succeed, you'll need to wrap the `fetch` method inside a `try...catch`
    block, which will be shown later on in this book.
  prefs: []
  type: TYPE_NORMAL
- en: To display the character information in the application, we need to pass it
    to the `Character` component, where it can ultimately be shown in the `Character`
    component that we changed in the first step.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the data is being retrieved from the API, the `loading` state is `true`,
    so we cannot display the `Character` component yet. When data fetching is finished,
    loading will be `false`, and we can iterate over the `character` state, return
    the `Character` component, and pass the character information as props. This component
    will also get a `key` prop, which is required for every component that is rendered
    within an iteration. Since this value needs to be unique, the id of the character
    is used, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'If we visit our application in the browser again, we''ll see that it now shows
    a list of characters, including some basic information and an image. At this point,
    our application will look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Rendering a list of components from the local state](img/Figure_1.3_B17390.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Rendering a list of components from the local state
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, limited styling has been applied to the application, and it's
    only rendering the information that's been fetched from the API. Styling will
    be added in the next part of this section using a package called Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Adding styling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Showing just the character information isn't enough. We also need to apply some
    basic styling to the project. Adding styling to the project is done with the Bootstrap
    package, which adds styling to our components based on class names.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bootstrap can be installed from npm using the following and added to `devDependencies`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, import this file into the entry point of our React application, `src/index.js`,
    so that we can use the styling throughout the entire application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Webpack is unable to compile CSS files by itself; we need to add the appropriate
    loaders to make this happen. We can install these by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add these packages as a rule to the Webpack configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The order in which loaders are added is important since `css-loader` handles
    the compilation of the CSS file and `style-loader` adds the compiled CSS files
    to the React DOM. Webpack reads these settings from right to left, and the CSS
    needs to be compiled before it's attached to the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: 'The application should run in the browser correctly now and should have picked
    up some small styling changes from the default Bootstrap stylesheet. Let''s make
    some changes to the `index.js` file first and style it as the container for the
    entire application. We need to change the `App` component that is rendered to
    the DOM and wrap the `List` component with a `div` container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `List` component, we need to set the grid to display the `Characters`
    components, which display the character information. Wrap the `map` function in
    a `div` element to treat it as a row container for Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The code for the `Character` component must also be altered to add styling
    using Bootstrap; you can replace the current contents of that file with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This lets us use the Bootstrap container layout with a column size of 3 ([https://getbootstrap.com/docs/5.0/layout/columns/](https://getbootstrap.com/docs/5.0/layout/columns/))
    and style the `Character` component as a Bootstrap card component ([https://getbootstrap.com/docs/5.0/components/card/](https://getbootstrap.com/docs/5.0/components/card/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the finishing touches, open the `index.js` file and insert the following
    code to add a header that will be placed above our list of *Rick and Morty* characters
    in the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'After making sure that the development server is running, we''ll see that the
    application has had styling applied through Bootstrap, which will make it look
    as follows in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Our application styled with Bootstrap'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.4_B17390.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.4 – Our application styled with Bootstrap
  prefs: []
  type: TYPE_NORMAL
- en: The style rules from Bootstrap have been applied to our application, making
    it look far more complete than it did before. In the final part of this section,
    we'll add the **ESLint** package to the project, which will make maintaining our
    code easier by synchronizing patterns across the project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding ESLint
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, we will add ESLint to the project to make sure our code meets certain
    standards – for instance, that our code follows the correct JavaScript patterns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install ESLint from npm by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The first package, called `eslint`, is the core package and helps us identify
    any potentially problematic patterns in our JavaScript code. `eslint-webpack-plugin`
    is a package that is used by Webpack to run ESLint every time we update our code.
    Finally, `eslint-plugin-react` adds specific rules to ESLint for React applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure ESLint, we need to create a file called `.eslintrc` in the project''s
    root directory and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The `env` field sets the actual environment our code will run in and will use
    `es6` functions in it, while the `parserOptions` field adds extra configuration
    for using `jsx` and modern JavaScript. Where things get interesting, however,
    is the `plugins` field, which is where we specify that our code uses `react` as
    a framework. The `extends` field is where the `recommended` settings for `eslint`
    are used, as well as framework-specific settings for React. Also, the `rules`
    field contains a rule to disable the notification about React not being imported,
    as this is no longer required in React 18.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We can run the `eslint --init` command to create custom settings, but using
    the preceding settings is recommended so that we ensure the stability of our React
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look at our command line or browser, we will see no errors. However,
    we have to add the `eslint-webpack-plugin` package to the Webpack configuration.
    In the `webpack.config.js` file, you need to import this package and add it as
    a plugin to the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: By restarting the development server, Webpack will now use ESLint to check whether
    our JavaScript code complies with the configuration of ESLint. In our command
    line (or the **Console** tab in the browser), any misuse of React (or JavaScript)
    functionalities will be shown.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have created a basic React application from scratch using
    React, ReactDOM, Webpack, Babel, and ESLint.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you've created a single-page application for React from scratch
    and learned about core React concepts. This chapter started with you creating
    a new project with Webpack and Babel. These libraries help you compile and run
    your JavaScript and React code in a browser with minimal setup. Then, we described
    how to structure a React application, and this structure will be used throughout
    this book. Also, you learned about state management and data fetching using React
    Hooks and basic styling with Bootstrap. The principles that were applied provided
    you with the basics from which to create React applications from nothing and structure
    them in a scalable way.
  prefs: []
  type: TYPE_NORMAL
- en: If you've worked with React before, then these concepts probably weren't that
    hard to grasp. If you haven't, then don't worry if some concepts felt strange
    to you. The upcoming chapters will build upon the features that you used in this
    chapter, giving you enough time to fully understand them.
  prefs: []
  type: TYPE_NORMAL
- en: The project you'll build in the next chapter will focus on creating reusable
    React components with more advanced styling. This will be available offline, since
    it will be set up as a **Progressive Web Application** (**PWA**).
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Thinking in React: [https://reactjs.org/docs/thinking-in-react.html](https://reactjs.org/docs/thinking-in-react.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bootstrap: [https://getbootstrap.com/docs/4.3/getting-started/introduction/](https://getbootstrap.com/docs/4.3/getting-started/introduction/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ESLint: [https://eslint.org/docs/user-guide/getting-started](https://eslint.org/docs/user-guide/getting-started)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
