- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Hooks for Handling Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to use Hooks for Data Fetching and React
    Suspense for showing a fallback while waiting on the data to finish loading.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn how to use Hooks to handle forms and
    form state in React. We have already implemented a form for the `CreatePost` component
    earlier. However, instead of manually handling the form submission, we can use
    **React Form Actions**, which not only make it easier to deal with form submission,
    but also allow us to use Hooks that access the form state. Additionally, we are
    going to learn about the **Optimistic Hook** to implement optimistic updates,
    that is, showing the preliminary result on the client-side before the server-side
    finishes processing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Handling form submission with the **Action State Hook**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulating **blocking UI**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding blocking UI with the **Transition Hook**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the **Optimistic Hook** to implement optimistic updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A fairly recent version of Node.js should already be installed. The Node Package
    Manager (`npm`) also needs to be installed (it should come with Node.js). For
    more information on how to install Node.js, please check out their official website:
    [https://nodejs.org/](https://nodejs.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to use **Visual Studio Code** (**VS Code**) for the guides in
    this book, but everything should work similarly in any other editor. For more
    information on how to install VS Code, please refer to their official website:
    [https://code.visualstudio.com](https://code.visualstudio.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we use the following versions:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js v22.14.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm` v10.9.2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Code v1.97.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The versions mentioned in the preceding list are the ones used in the book.
    While installing a newer version should not be an issue, please note that certain
    steps might work differently on a newer version. If you are having an issue with
    the code and steps provided in this book, please try using the mentioned versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter07](https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter07)'
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended that you write the code on your own. Do not simply
    run the code examples that are provided with the book. It is important to write
    the code yourself to be able to learn and understand it properly. However, if
    you run into any issues, you can always refer to the code example.
  prefs: []
  type: TYPE_NORMAL
- en: Handling form submission with the Action State Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React 19 introduced a new feature called **Form Actions**. As we have seen in
    the previous chapters, performing data mutations in response to user actions is
    a common use case in web applications. Often, these data mutations require making
    an API request and handling the response, which means dealing with loading and
    error states. For example, when we made the `CreatePost` component, we created
    a form that inserts a new post into the database upon submission. In this case,
    **React Query** already helped us out a lot by simplifying loading and error states.
    However, with React Form Actions there is now a native way to deal with these
    states, by using the Action State Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Action State Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Action State Hook is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break it down a bit to get a better understanding of it. To define an
    Action State Hook, we need to provide at least a function to it as an argument.
    This function will be called when the form is submitted, and has the following
    signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The action function gets the current state of the action as the first argument,
    and the form data (as a `FormData` object) as the second argument. Anything returned
    from the action function will be the new state of the Action State Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `FormData` API is a web standard used to represent form fields and their
    values. It can be used to handle form submission and sent over the network, for
    example, using `fetch()`. It is an iterable object (can be iterated over with
    a `for … of` loop) and provides getter and setter functions to access the values.
    More information can be found here: [https://developer.mozilla.org/en-US/docs/Web/API/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData).'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, it is possible to provide an `initialState` for the Action State
    Hook.
  prefs: []
  type: TYPE_NORMAL
- en: The Hook then returns the current state of the action, the action itself (to
    be passed to the `<form>` element), and the `isPending` state to check whether
    the action is currently pending (while the `actionFn` is being executed).
  prefs: []
  type: TYPE_NORMAL
- en: Using the Action State Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s get started refactoring the `CreatePost` component to use the Action
    State Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter06_4` folder to a new `Chapter07_1` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter07_1` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `src/components/post/CreatePost.jsx` and import the `useActionState` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Inside the *CreatePost* component, *remove* the whole `handleSubmit` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Replace* it with the following Action State Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this case, we are going to use the `state` of the action to store an error
    state. If there was an error, we will return it from the action function. Otherwise,
    we return nothing, so the error state is `undefined`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the action function, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this case, we are not going to make use of the `currentState` passed to the
    function, but we need to define it anyway as we need the second argument to get
    the `formData`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, get the title and content from the form by making use of the `FormData`
    API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `FormData` API uses the `name` prop to identify input fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create the post object and call the mutation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Since we now have an `async` function, we can use the `mutateAsync` method from
    the mutation to be able to `await` the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'If there was an error, return it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We do not need to manually reset the form anymore. When using form actions,
    all uncontrolled fields in the form will be reset automatically once the form
    action function completes successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adjust the `<form>` element to pass the `action` to it instead of an `onSubmit`
    handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Adjust the submit button and error message, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: On the blog app, log in and create a new post, you will see that it works the
    same way as before, but we are now using the Action State Hook for form submission!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After learning how to handle form submission with the Action State Hook, let’s
    move on to learning about blocking UI.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter07/Chapter07_1`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Simulating blocking UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we learn about the Transition Hook, let’s first introduce the problem
    that it attempts to solve: blocking UI. When certain components are computationally
    intensive, rendering them may cause the whole user interface to be unresponsive.
    This can result in a bad user experience, as users cannot do anything else while
    the components are rendering.'
  prefs: []
  type: TYPE_NORMAL
- en: We are now going to implement a comment section in our blog to simulate blocking
    UI.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a (purposefully slow) Comment component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by implementing a Comment component, which we make slow on purpose
    to simulate a computationally expensive component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started implementing the Comment component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter07_1` folder to a new `Chapter07_2` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter07_2` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `src/components/comment/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new `src/components/comment/Comment.jsx` file. Inside it, define and
    export a `Comment` component, which accepts `content` and `author` props:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the component, we simulate a computationally intensive operation by delaying
    the rendering by 1ms:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, render the comment, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Implementing a CommentList component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we are going to implement a CommentList component, which will render 1000
    comments:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/components/comment/CommentList.jsx` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, import the `Comment` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define and export a `CommentList` component, which generates 1000 comments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render the comments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Implementing the CommentSection component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lastly, we are going to implement a `CommentSection` component, which will allow
    us to show/hide comments of a post by pressing a button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started implementing the `CommentSection` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/components/comment/CommentSection.jsx` file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, import the `useState` function from React and the `CommentList`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define and export the `CommentSection` component, in which we define
    a State Hook to toggle the comment list on and off:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a `handleClick` function which will toggle the comment list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render a button and conditionally render the `CommentList` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, edit `src/components/post/Post.jsx` and import the `CommentSection`
    component there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render it at the end of the post, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing out the simulated blocking UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can test the comment section and see how it causes the UI to block.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the project, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the frontend in your browser by going to `http://localhost:5173/`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on one of the **Show comments** buttons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see that after pressing the button, the whole UI is unresponsive. Try
    pressing one of the other **Show comments** buttons – it does not work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see, rendering computationally expensive components can cause the
    whole UI to become unresponsive. To fix this, we need to use Transitions – which
    we are going to learn about in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter07/Chapter07_2`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding blocking UI with the Transition Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Transition Hook lets you handle asynchronous operations by updating state
    without blocking the UI. This is especially useful for rendering computationally
    expensive component trees, such as rendering tabs and their (potentially complex)
    contents, or when making a client-side router. The Transition Hook has the following
    signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `isPending` state can be used to handle the loading state. The `startTransition`
    function allows us to pass a function to start the transition. This function needs
    to be synchronous. While the updates (for example, setting state) triggered inside
    the functions are being executed and their effects on components evaluated, `isPending`
    will be set to `true`. This does not block the UI in any way, so other components
    still behave normally while the transition is executing.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Transition Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are now going to use the Transition Hook to avoid blocking the UI when showing
    lots of comments. Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter07_2` folder to a new `Chapter07_3` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter07_3` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `src/components/comment/CommentSection.jsx` and import the `useTransition`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a Transition Hook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `handleClick` function, start a transition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Transitions have specific use cases and certain limitations. For example, do
    not use Transitions for handling controlled input state, because Transitions are
    non-blocking, but we actually want the input state to update immediately. Additionally,
    inside a Transition, all updates need to be called immediately. While it is generally
    possible to await asynchronous functions in Transitions, it is not possible to
    wait for an asynchronous request to finish *before updating the state* inside
    a Transition. If you need to wait for an asynchronous request before updating
    state, it is better to `await` it in the handler function and then start the Transition
    afterward. For more information, check out the troubleshooting guide on the React
    docs: [https://react.dev/reference/react/useTransition#troubleshooting](https://react.dev/reference/react/useTransition#troubleshooting)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now disable the button while the transition is pending:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing out the non-blocking Transition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can test the comment section and see how it does not block the UI anymore.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the project, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the frontend in your browser by going to `http://localhost:5173/`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on one of the **Show comments** buttons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see that after pressing the button, the rest of the UI remains responsive.
    Try pressing one of the other **Show comments** buttons – it works now and triggers
    another Transition!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see, by using Transitions we can keep the UI responsive while causing
    state updates that render computationally expensive components!
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter07/Chapter07_3`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Optimistic Hook to implement optimistic updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two ways to handle updates/mutations:'
  prefs: []
  type: TYPE_NORMAL
- en: Show a loading state and disable certain actions while it is loading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do an optimistic update, which immediately shows the result of the action on
    the client, while the mutation is still pending. Then, update the local state
    from the server state when the mutation finishes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on your use case, one or the other option will be a better fit. Usually,
    optimistic updates are great for *fast-paced* actions, such as a chat app. While
    a loading state without optimistic updates is better for critical actions, such
    as making a bank transfer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Optimistic Hook has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, it accepts a `state` (usually, this is a server state) and an
    `updateFn` function to process the update. Then, it returns an `optimisticState`
    and an `addOptimistic` function, which can be used to optimistically add a new
    item to the state.
  prefs: []
  type: TYPE_NORMAL
- en: The `updateFn` accepts two arguments, the `currentState` and the `optimisticValue`
    passed to the `addOptimistic` function. It then returns a new optimistic state.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing optimistic comment creation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our case, we are going to implement a way to create new comments using optimistic
    updates. Let’s get started doing it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter07_3` folder to a new `Chapter07_4` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter07_4` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new `src/components/comment/CreateComment.jsx` file and import the
    `useContext` function and the `UserContext`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `CreateComment` component, which accepts an `addComment` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the `username` of the currently logged in user from the context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a `submitAction`, which calls the `addComment` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a `<form>` and pass the `submitAction` to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can see, it is also possible to define Form Actions without using the
    Action State Hook. However, then we only get a simple function to handle form
    submission, without any of the form state handling functionality (such as pending
    and error states).
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/components/comment/CommentList.jsx` and import the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Remove* the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a Context Hook to get the `username` of the currently logged in
    user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define a State Hook to store the comments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To keep this section short and to the point, we only focus on optimistic updates,
    feel free to implement a way to store the comments in the database on your own
    here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, define the Optimistic Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the update function, we add the comment to the array with a `sending` prop
    set to `true`. We are going to use this prop later to visually distinguish optimistically
    created comments from real comments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We also defined a temporary ID for the optimistic comments here, which we can
    use later for the `key` prop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, define the `addComment` function, which first adds the comment optimistically,
    then waits for a second, and then adds it to the “database”:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render the optimistic comments, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If there are no comments yet, we can show an empty state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the user is logged in, we allow them to create new comments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, edit `src/components/comment/Comment.jsx` and add the `sending` prop
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, *remove* the following code from it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, change the color depending on the sending prop, showing optimistically
    inserted comments in a gray color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the project, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the frontend in your browser by going to `http://localhost:5173/`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in using the form at the top, then press one of the **Show comments** buttons.
    It should show the **No comments** message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in a new comment and press **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the comment being optimistically inserted in gray color at first,
    and then after a second it will appear in black, signifying that the comment has
    been successfully stored in the “database”:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Optimistically inserting a new comment](img/B31327_07_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Optimistically inserting a new comment
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter07/Chapter07_4`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the Optimistic Hook is a great way to implement optimistic updates
    and keep your app fast and responsive!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we first learned about handling form submission and states
    using Form Actions and the Action State Hook. Then, we simulated a potential issue
    when dealing with rendering computationally expensive components: Blocking the
    UI. Next, we solved this issue by introducing a Transition Hook to change the
    state in a non-blocking way, allowing the UI to remain responsive while the computationally
    expensive components are rendering. Finally, we learned about implementing optimistic
    updates to show results immediately while waiting for an asynchronous operation
    to finish.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn how to use Hooks to implement client-side
    routing in our blog application.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To recap what we have learned in this chapter, try to answer the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Which feature can we use to handle form submission in React 19?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which web standard is used for handling form data in React 19?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Hook is used to handle different form states?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a potential problem that can happen when rendering computationally expensive
    components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we avoid that problem?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are limitations of Transitions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Hook can we use to display state on the client before it finished persisting
    to the server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FormData` API: [https://developer.mozilla.org/en-US/docs/Web/API/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Form submission with React: [https://react.dev/reference/react-dom/components/form](https://react.dev/reference/react-dom/components/form)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Action State Hook: [https://react.dev/reference/react/useActionState](https://react.dev/reference/react/useActionState)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Transition Hook: [https://react.dev/reference/react/useTransition](https://react.dev/reference/react/useTransition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Optimistic Hook: [https://react.dev/reference/react/useOptimistic](https://react.dev/reference/react/useOptimistic)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More information on optimistic updates: [https://dev.to/_jhohannes/why-your-applications-need-optimistic-updates-3h62](https://dev.to/_jhohannes/why-your-applications-need-optimistic-updates-3h62)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/wnXT0](Chapter_07.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_%283%29.png)'
  prefs: []
  type: TYPE_IMG
