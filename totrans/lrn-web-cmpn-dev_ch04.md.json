["```js\nnpm install --save b-sortable\n\n```", "```js\nnpm install\n\n```", "```js\ngrunt demo\n\n```", "```js\nnpm install --save b-toggle-button\n\n```", "```js\nnpm install\n\n```", "```js\ngrunt demo\n\n```", "```js\n<element name=\"red-message\">\n    <style>\n        h1{\n            color: red;\n        }\n    </style>\n <template>\n        <h1>Welcome to Bosonic framework.</h1>\n </template>\n <script>\n        ({\n            createdCallback: function() {\n this.appendChild(this.template.content.cloneNode(true));\n }\n        });\n    </script>\n</element>\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Demo</title>\n    <meta charset=\"utf-8\">\n    <script src=\"img/strong>\"></script>\n    <script src=\"img/strong>\"></script>\n    <link href=\"css/red-message.css\" rel=\"stylesheet\">\n</head>\n<body>\n    <red-message> </red-message>\n</body>\n</html>\n```", "```js\n(function () {\n    var RedMessagePrototype = Object.create(HTMLElement.prototype, {\n            createdCallback: {\n                enumerable: true,\n                value: function () {\n                    this.appendChild(this.template.content.cloneNode(true));\n                }\n            }\n        });\n    window.RedMessage = document.registerElement('red-message', { prototype: RedMessagePrototype });\n    Object.defineProperty(RedMessagePrototype, 'template', {\n        get: function () {\n            var fragment = document.createDocumentFragment();\n            var div = fragment.appendChild(document.createElement('div'));\n            div.innerHTML = ' <h1>Welcome to Bosonic framework.</h1> ';\n            while (child = div.firstChild) {\n                fragment.insertBefore(child, div);\n            }\n            fragment.removeChild(div);\n            return { content: fragment };\n        }\n    });\n}());\n```", "```js\n<element name=\"say-hello\" message=\"\">\n    <template>\n        <h1>Hello <span></span></h1>\n    </template>\n    <script>\n    ({\n       createdCallback: function(){\n         console.log(this.localName+\" Element is created.\");\n         var shadowRootNode = this.createShadowRoot(),\n templateContent = this.template.content.cloneNode(true),\n spanPlaceHolder = templateContent.querySelector(\"span\");\n spanPlaceHolder.innerText = this.getAttribute(\"message\");\n shadowRootNode.appendChild(templateContent);\n       },\nattachedCallback: function(){\n         console.log(this.localName+\" is attached to DOM.\");\n       },\ndetachedCallback: function(){\n        console.log(this.localName+\" is removed from DOM.\");\n       },\t\nattributeChangedCallback: function(attributeName){\n          var newMessageValue = this.getAttribute(\"message\");\nconsole.log(attributeName+\" value is changed to \"+ newMessageValue);  \n         this.createdCallback();\n       }\n    });\n    </script>\n</element>\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Say-Hello Element Demo</title>\n    <meta charset=\"utf-8\">\n    <script src=\"img/say-hello.js\"></script>\n</head>\n<body>\n    <div id=\"elementContainer\">\n <say-hello message=\"Web Component\">\n </say-hello>\n    </div>\n\n <input type=\"text\" id=\"messageElement\" placeholder=\"Enter some message\">\n    <br><br>\n\n <button onclick=\"changeMessageHandler()\">Change Message</button>\n <button onclick=\"deleteElementHandler()\">Delete SayHello Element</button>\n <button onclick=\"createElementHandler()\">Create SayHello Element</button>\n\n    <script type=\"text/javascript\">\n        //changes the value of the message\n       var changeMessageHandler = function(){\n           var sayHelloElement = document.querySelector(\"say- hello\"),messageText = document.getElementById(\"messageElement\").value;\nsayHelloElement.setAttribute(\"message\",messageText);\n       },\n       //delete the say-hello element\n       deleteElementHandler = function(){\n           var sayHelloElement = document.querySelector(\"say- hello\");\n           sayHelloElement.remove();\n       },\n       //create new say-hello element\n       createElementHandler = function(){\n           var sayHelloElement = document.createElement(\"say- hello\"),elementContainer = document.getElementById(\"elementContainer\");\nsayHelloElement.setAttribute(\"message\",\"Developers\");\nelementContainer.appendChild(sayHelloElement);\n       };\n    </script>\n</body>\n</html>\n```", "```js\n    <element name=\"ts-clock\" hour=\"\" minute=\"\" second=\"\">\n        <template>\n       \t<!--HTML template content for ts-clock element -->\n       <!--CSS style attributes for shadow DOM element-->\n        </template>\n        <script>\n       // Lifecycle callback method for ts-clock element\n        </script>\n    </element>\n    ```", "```js\n    <template>\n       <style>\n         :host .clock{\n            display: inline-flex;\n            justify-content: space-around;\n            background: floralwhite;\n            font-size: 2rem;\n            font-family: serif;\n          }\n         :host .clock .hour,\n      :host .clock .minute, \n      :host .clock .second{\n            color: tomato;\n            padding: 1.5rem;\n            text-shadow: 0px 1px grey;\n          }\n       </style>\n     <div class=\"clock\">\n     <div class=\"hour\"></div>\n     <div class=\"minute\"></div>\n     <div class=\"second\"></div>\n     </div>\n    </template>\n    ```", "```js\n    <script>\n        ({\n            createdCallback: function() {\n                var shadowRootNode = this.createShadowRoot(),\n                    content = this.template.content.cloneNode(true);\n                shadowRootNode.appendChild(content);\n            },\n            attachedCallback: function() {\n                var clockElement = this;\n                window.setInterval(function() {\n     var date = new Date();\n     clockElement.setAttribute(\"hour\", date.getHours());\n     clockElement.setAttribute(\"minute\", date.getMinutes());\n     clockElement.setAttribute(\"second\", date.getSeconds());\n     }, 1000);\n     },\n     attributeChangedCallback: function(attributeName) {\n                var shadowRootNode = this.shadowRoot,\n                    hourPlaceholder = shadowRootNode.querySelector('.hour'),\n                    minutePlaceholder = shadowRootNode.querySelector('.minute'),\n                    secondPlaceHolder = shadowRootNode.querySelector('.second');\n                switch (attributeName) {\n     case \"hour\":\n     hourPlaceholder.innerText = this.getAttribute(\"hour\");\n     break;\n     case \"minute\":\n     minutePlaceholder.innerText = this.getAttribute(\"minute\");\n     break;\n     case \"second\":\n     secondPlaceHolder.innerText = this.getAttribute(\"second\");\n     break;\n     }\n            }\n        });\n    </script>\n    ```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Digital Clock Demo</title>\n    <meta charset=\"utf-8\">\n    <script src=\"img/strong>\"></script>\n    <link href=\"css/ts-clock.css\" rel=\"stylesheet\">\n</head>\n<body>\n   <ts-clock hour=\"HH\" minute=\"MM\" second=\"SS\">\n </ts-clock>\n</body>\n</html>\n```"]