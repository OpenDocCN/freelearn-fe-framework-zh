["```js\n<p class=\"text-content max-w-2xl m-auto\" appHighlight\n  [highlightText]=\"'de'\">\n  <!--text here --> \n```", "```js\n    npm run serve ng-attribute-directive \n    ```", "```js\n    ...\n    export class AppComponent {\n      searchText = '';\n    } \n    ```", "```js\n    ...\n    <div class=\"content\" role=\"main\">\n      ...\n         <input [(ngModel)]=\"searchText\" type=\"text\"\n    placeholder=\"Quick Search...\" class=\"pr-4 !pl-10\n    py-2\">\n    </div> \n    ```", "```js\n    ...\n    import { FormsModule } from '@angular/forms';\n     @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      standalone: true,\n      styleUrls: ['./app.component.scss'],\n      imports: [CommonModule, RouterModule, FormsModule],\n    })\n    export class AppComponent {\n      searchText = '';\n    } \n    ```", "```js\n    cd start && nx g directive highlight --directory apps/chapter02/ng-attribute-directive/src/app --standalone \n    ```", "```js\n    import { Directive**,** **Input** } from '@angular/core';\n    @Directive({\n      selector: '[appHighlight]',\n      standalone: true\n    })\n    export class HighlightDirective {\n      **@****Input****() highlightText =** **''****;**\n    **@****Input****() highlightColor =** **'yellow'****;**\n    } \n    ```", "```js\n    <div class=\"content\" role=\"main\">\n      ...\n      <p class=\"text-content\" **appHighlight**\n    **[****highlightText****]=****\"searchText\"**>\n        ...\n      </p>\n    </div> \n    ```", "```js\n    import { Directive, Input, OnChanges, SimpleChanges } from '@angular/core';\n    ...\n    export class HighlightDirective implements OnChanges {\n      @Input() highlightText = '';\n      @Input() highlightColor = 'yellow';\n      ngOnChanges(changes: SimpleChanges) {\n        if (changes['highlightText']?.firstChange) {\n          return;\n        }\n        const { currentValue } = changes['highlightText'];\n        console.log({ currentValue });\n      }\n    } \n    ```", "```js\n    import { Directive, Input, SimpleChanges, OnChanges, **ElementRef** } from '@angular/core';\n    @Directive({\n      selector: '[appHighlight]'\n    })\n    export class HighlightDirective implements OnChanges {\n      @Input() highlightText = '';\n      @Input() highlightColor = 'yellow';\n      constructor(**private el: ElementRef**) { }\n      ...\n    } \n    ```", "```js\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.highlightText.firstChange) {\n          return;\n        }\n        const { currentValue } = changes.highlightText;\n        **if** **(currentValue) {**\n    **const** **regExp =** **new****RegExp****(****`(****${currentValue}****)`****,****'gi'****)**\n    **this****.****el****.****nativeElement****.****innerHTML** **=** **this****.****el**\n    **.****nativeElement****.****innerHTML****.****replace****(regExp,** **`<span**\n    **style=\"background-color:** **${****this****.highlightColor}****\"**\n    **>\\$1</span>`****)**\n    **}**\n    } \n    ```", "```js\n    ...\n    export class HighlightDirective implements OnChanges {\n      @Input() highlightText = '';\n      @Input() highlightColor = 'yellow';\n      **originalHTML =** **''****;**\n    constructor(private el: ElementRef) { }\n      ngOnChanges(changes: SimpleChanges) {\n        if (changes.highlightText.firstChange) {\n          **this****.****originalHTML** **=** **this****.****el**\n    **.****nativeElement****.****innerHTML****;**\n    return;\n        }\n        const { currentValue } = changes.highlightText;\n        if (currentValue) {\n          const regExp = new RegExp(`(${currentValue})`,'gi')\n          this.el.nativeElement.innerHTML = **this****.****originalHTML**\n    **.****replace**(regExp, `<span style=\"background-color:\n    ${this.highlightColor}\">\\$1</span>`)\n        }\n      }\n    } \n    ```", "```js\n    ...\n    export class HighlightDirective implements OnChanges {\n      ...\n      ngOnChanges(changes: SimpleChanges) {\n       ...\n        if (currentValue) {\n          const regExp = new RegExp(`(${currentValue})`,'gi')\n          this.el.nativeElement.innerHTML = this.originalHTML\n            .replace(regExp, `<span       style=\"background-\n    color: ${this.highlightColor}\">\\$1</span>`)\n        } **else** **{**\n    **this****.****el****.****nativeElement****.****innerHTML** **=**\n    **this****.****originalHTML****;**\n    **}**\n      }\n    } \n    ```", "```js\n    npm run serve ng-read-time-directive \n    ```", "```js\n    cd start && nx g directive read-time --directory apps/chapter02/ng-read-time-directive/src/app/directives --standalone=false \n    ```", "```js\n    ...\n    <div class=\"content\" role=\"main\" id=\"mainContent\"\n    **appReadTime**>\n    ...\n    </div> \n    ```", "```js\n    import { Directive, **Input** } from '@angular/core';\n    **export** **interface** **ReadTimeConfig** **{**\n    **wordsPerMinute****: number;**\n    **}**\n    @Directive({\n      selector: '[appReadTime]'\n    })\n    export class ReadTimeDirective {\n      **@****Input****()** **configuration****:** **ReadTimeConfig** **= {**\n    **wordsPerMinute****:** **200**\n    **}**\n    constructor() { }\n    } \n    ```", "```js\n    import { Directive, Input, ElementRef**,** **OnInit** } from '@angular/core';\n    ...\n    export class ReadTimeDirective **implements** **OnInit** {\n      @Input() configuration: ReadTimeConfig = {\n        wordsPerMinute: 200\n      }\n      constructor(**private el: ElementRef****) { }**\n    **ngOnInit****() {**\n    **const** **text =** **this****.****el****.****nativeElement****.****textContent****;**\n    **}**\n    } \n    ```", "```js\n    ...\n    export class ReadTimeDirective implements OnInit {\n      ...\n      ngOnInit() {\n        const text = this.el.nativeElement.textContent;\n        **const** **time =** **this****.****calculateReadTime****(text);**\n    **console****.****log****({** **readTime****: time });**\n      }\n      **calculateReadTime****(****text: string****) {**\n    **const** **wordsCount = text.****split****(****/\\s+/g****).****length****;**\n    **const** **minutes = wordsCount /** **this****.****configuration****.**\n    **wordsPerMinute;**\n    **return****Math****.****ceil****(minutes);**\n    **}**\n    } \n    ```", "```js\n    ...\n    @Directive({\n      selector: '[appReadTime]'\n    })\n    export class ReadTimeDirective implements OnInit {\n    ...\n      ngOnInit() {\n        const text = this.el.nativeElement.textContent;\n        const time = this.calculateReadTime(text);\n        **const** **timeStr =** **this****.****createTimeString****(time);**\n    **console****.****log****({** **readTime****: timeStr });**\n      }\n    ...\n      **createTimeString****(****timeInMinutes: number****) {**\n    **if** **(timeInMinutes <** **1****) {**\n    **return****'< 1 minute'****;**\n    **}** **else****if** **(timeInMinutes ===** **1****) {**\n    **return****'1 minute'****;**\n    **}** **else** **{**\n    **return****`****${timeInMinutes}** **minutes`****;**\n    **}**\n    **}**\n    } \n    ```", "```js\n    import { Directive, Input, ElementRef, OnInit, **Output****,** **EventEmitter** } from '@angular/core';\n    ...\n    export class ReadTimeDirective implements OnInit {\n      @Input() configuration: ReadTimeConfig = {\n        wordsPerMinute: 200\n      }\n      **@****Output****() readTimeCalculated =** **new** **EventEmitter****<string>();**\n    constructor(private el: ElementRef) { }\n    ...\n    } \n    ```", "```js\n    ...\n    export class ReadTimeDirective {\n    ...\n      ngOnInit() {\n        const text = this.el.nativeElement.textContent;\n        const time = this.calculateReadTime(text);\n        const timeStr = this.createTimeString(time);\n        **this****.****readTimeCalculated****.****emit****(timeStr);**\n      }\n    ...\n    } \n    ```", "```js\n    ...\n    export class AppComponent {\n      **readTime****!: string;**\n    **onReadTimeCalculated****(****readTimeStr: string****) {**\n    **this****.****readTime** **= readTimeStr;**\n    **}**\n    } \n    ```", "```js\n    ...\n    <div class=\"content\" role=\"main\" id=\"mainContent\" appReadTime\n     **(****readTimeCalculated****)=** **\"onReadTimeCalculated($event)\"****>**\n    ...\n    </div> \n    ```", "```js\n    <div class=\"content\" role=\"main\" id=\"mainContent\" appReadTime\n      (readTimeCalculated)=\"onReadTimeCalculated($event)\">\n    **<****h4****class****=****\"text-3xl\"****>****Read Time = {{readTime}}****</****h4****>**\n    <p class=\"text-content\">\n        Silent sir say desire fat him letter. Whatever settling\n        goodness too and honoured she building answered her. ...\n      </p>\n    ...\n    </div> \n    ```", "```js\n    npm run serve ng-scroll-to-directive \n    ```", "```js\n    cd start && nx g directive scroll-to --directory apps/chapter02/ng-scroll-to-directive/src/app/directives \n    ```", "```js\n    import { Directive, Input } from '@angular/core';\n    @Directive({\n      selector: '[appScrollTo]'\n    })\n    export class ScrollToDirective {\n      @Input() target = '';\n    } \n    ```", "```js\n    ...\n    <main class=\"content\" role=\"main\">\n    <div class=\"page-links\">\n    <h4 class=\"page-links__heading\">\n          Links\n        </h4>\n    <a class=\"page-links__link\" **appScrollTotarget****=**\n    **\"#resources\"**>Resources</a>\n    <a class=\"page-links__link\" **appScrollTotarget****=**\n    **\"#nextSteps\"****>**Next Steps</a>\n    <a class=\"page-links__link\" **appScrollTotarget****=**\n    **\"#moreContent\"**>More Content</a>\n    <a class=\"page-links__link\" **appScrollTotarget****=**\n    **\"#furtherContent\"**>Further Content</a>\n    <a class=\"page-links__link\" **appScrollTotarget****=**\n    **\"#moreToRead\"**>More To Read</a>\n    </div>\n    </main>\n      ...\n    <a **appScrollTo****target****=****\"#toolbar\"** class=\"to-top-button w-12\n    h-12 text-white flex items-center justify-center\">\n    <span class=\"material-symbols-outlined text-3xl text-\n    white\"> expand_less </span>\n    </a> \n    ```", "```js\n    import { Directive, Input, **HostListener** } from '@angular/core';\n    @Directive({\n      selector: '[appScrollTo]'\n    })\n    export class ScrollToDirective {\n      @Input() target = '';\n      **@****HostListener****(****'click'****)**\n    **onClick****() {**\n    **console****.****log****(****this****.****target****);**\n    **}**\n      ...\n    } \n    ```", "```js\n    ...\n    export class ScrollToDirective {\n      @Input() target = '';\n      @HostListener('click')\n      onClick() {\n        **const** **targetElement =**\n    **document****.****querySelector****(****this****.****target****);**\n    **if** **(!targetElement) {**\n    **throw****new****Error****(****'`target' is required.`****);**\n    **}**\n    **targetElement.****scrollIntoView****();**\n      }\n      ...\n    } \n    ```", "```js\n    ...\n    export class ScrollToDirective {\n      @Input() target = '';\n      @HostListener('click')\n      onClick() {\n        const targetElement = document.querySelector\n          (this.target);\n        targetElement.scrollIntoView(**{****behavior****:** **'smooth'****});**\n      }\n    } \n    ```", "```js\n    npm run serve ng-show-for-directive \n    ```", "```js\n    cd start && nx g directive show-for --directory apps/chapter02/ng-show-for-directive/src/app/directives --standalone=false \n    ```", "```js\n    ...\n    <main class=\"content\" role=\"main\">\n    <button (click)=\"toggleDialog()\">Toggle Dialog</button>\n    <div class=\"dialog\" *******appShowFor****=****\"showDialog\"**>\n    <div class=\"dialog__heading\">...</div>\n    <div class=\"dialog__body\">...</div>\n    </div>\n    </main> \n    ```", "```js\n    import { Directive**,** **Input** } from '@angular/core';\n    @Directive({\n      selector: '[appShowFor]',\n    })\n    export class ShowForDirective {\n      **@****Input****() duration =** **1500****;**\n    **@****Input****()** **set****appShowFor****(****value: boolean****) {**\n    **console****.****log****({** **showForValue****: value });**\n    **}**\n    } \n    ```", "```js\n    import { Directive, Input**,** **TemplateRef****,** **ViewContainerRef** } from '@angular/core';\n    @Directive({\n      selector: '[appShowFor]'\n    })\n    export class ShowForDirective{\n      @Input() duration = 1500;\n      @Input() set appShowFor(value: boolean) {\n         console.log({ showForValue: value });\n       }\n       **constructor****(**\n    **private templateRef: TemplateRef<any>,**\n    **private viewContainerRef: ViewContainerRef**\n    **) {}**\n    } \n    ```", "```js\n    ...\n    export class ShowForDirective {\n      @Input() duration = 1500;\n      @Input() set appShowFor(value: boolean) {\n        console.log({ showForValue: value });\n        **if** **(value) {**\n    **this****.****show****();**\n    **}**\n      }\n      **show****() {**\n    **this****.****viewContainerRef****.****createEmbeddedView****(**\n    **this****.****templateRef**\n    **);**\n    **}**\n    constructor(...) {}\n    } \n    ```", "```js\n    import { ... , **EventEmitter**} from '@angular/core';\n    ...\n    export class ShowForDirective {\n      @Input() duration = 1500;\n      @Input() set appShowFor(value: boolean) {\n        ...\n      }\n      **@****Output****() elementHidden =** **new****EventEmitter****();**\n    show() {...}\n      **hide****() {**\n    **this****.****viewContainerRef****.****clear****();**\n    **}**\n    constructor(...) {}\n    } \n    ```", "```js\n    show() {\n      this.viewContainerRef.createEmbeddedView(\n       this.templateRef\n      );\n      **setTimeout****(****() =>** **{**\n    **this****.****elementHidden****.****emit****();**\n    **},** **this****.****duration****);**\n     } \n    ```", "```js\n    <div class=\"dialog\" *appShowFor=\"showDialog\"\n     **(****elementHidden****)=****\"toggleDialog()\"**>\n    <div class=\"dialog__heading\">\n                I am a Dialog\n        </div>\n    <div class=\"dialog__body\">\n          And this is some random content\n        </div>\n    </div> \n    ```", "```js\n    @Input() set appShowFor(value: boolean) {\n        console.log({ showForValue: value });\n        if (value) {\n          this.show();\n        } **else** **{**\n    **this****.****hide****();**\n    **}**\n      } \n    ```", "```js\n    <main class=\"content\" role=\"main\">\n    <button (click)=\"toggleDialog()\">Toggle Dialog</button>\n    **<****ng-template** **[****appShowFor****]=****\"showDialog\"**\n    **(****elementHidden****)=****\"toggleDialog()\"****>**\n    <div class=\"dialog\">\n    <div class=\"dialog__heading\">\n            I am a Dialog\n          </div>\n    <div class=\"dialog__body\">\n            And this is some random content\n          </div>\n    </div>\n    **</****ng-template****>**\n    </main> \n    ```", "```js\n    ...\n    export class ShowForDirective {\n      ...\n      **timer!:** **ReturnType****<****typeof****setTimeout****>;**\n    show() {\n        this.viewContainerRef.createEmbeddedView(\n          this.templateRef\n        );\n        **this****.****timer** **=** setTimeout(() => {\n          this.elementHidden.emit();\n        }, this.duration);\n      }\n      hide() {\n        **clearTimeout****(****this****.****timer****);**\n    this.viewContainerRef.clear();\n      }\n      constructor(...) {}\n    } \n    ```", "```js\n    npm run serve ng-multi-struc-directives \n    ```", "```js\n    <div class=\"fruits\">\n        ...\n        **<****ng-template** **#****bucketEmptyMessage****>**\n    **<****div****class****=****\"fruits__no-items-msg\"****>**\n    **No items in bucket. Add some fruits!**\n    **</****div****>**\n    **</****ng-template****>**\n    </div> \n    ```", "```js\n    ...\n    <div class=\"fruits\">\n    <div\n     class=\"fruits__item\"\n          *ngFor=\"let item of bucket\"\n     *******ngIf****=****\"bucket.length > 0; else bucketEmptyMessage\"** >...</div>\n    <ng-template #bucketEmptyMessage>...</ng-template>\n    </div> \n    ```", "```js\n    <div class=\"fruits\">\n    **<****ng-container** *******ngIf****=****\"bucket.length > 0; else**\n    **bucketEmptyMessage\"****>**\n    <div class=\"fruits__item\" *ngFor=\"let item of bucket\">\n          ...\n        </div>\n    **</****ng-container****>**\n    <ng-template #bucketEmptyMessage>...</ng-template>\n    </div> \n    ```", "```js\n    npm run serve ng-directive-comp-api \n    ```", "```js\n    nx g directive button-filled --directory apps/chapter02/ng-directive-comp-api/src/app/directives --standalone=false\n    nx g directive button-outlined --directory apps/chapter02/ng-directive-comp-api/src/app/directives --standalone=false\n    nx g directive button-with-tooltip --directory apps/chapter02/ng-directive-comp-api/src/app/directives --standalone=false \n    ```", "```js\n    ...\n    @Directive({\n      selector: '[appButton]',\n      **standalone****:** **true****,**\n    })\n    export class ButtonDirective {\n      ...\n    } \n    ```", "```js\n    ...\n    **import** **{** **ButtonDirective** **}** **from****'****./directives/button.directive'****;** **// <-- remove the import**\n    ...\n    @NgModule({\n      declarations: [\n        ...,\n        **ButtonDirective****,** **// <-- remove this**\n        ...\n      ],\n      ...\n    })\n    export class AppModule {} \n    ```", "```js\n    import { Directive**,** **HostBinding** } from '@angular/core';\n    **import** **{** **ButtonDirective** **}** **from****'./button.directive'****;**\n    @Directive({\n      selector: '[appButtonFilled]',\n      **hostDirectives****: [**\n    **{**\n    **directive****:** **ButtonDirective****,**\n    **inputs****: [****'color'****],**\n    **},**\n    **],**\n    })\n    export class ButtonFilledDirective {\n      **@****HostBinding****(****'attr.fill'****)**\n    **fill =** **'filled'****;**\n    } \n    ```", "```js\n    ...\n    <main class=\"content\" role=\"main\">\n    <ul class=\"flex flex-col\">\n    <li class=\"flex gap-4 items-center border-b justify-\n          between border-slate-300 py-3\">...</li>\n    <li class=\"flex gap-4 items-center border-b justify-\n          between border-slate-300 py-3\">\n    <h4 class=\"text-lg\">Filled Button:</h4>\n    **<****button****appButtonFilled****color****=****\"****yellow\"****>****Click**\n    **Me****</****button****>**\n    </li>\n    <li class=\"flex gap-4 items-center border-b justify-\n          between border-slate-300 py-3\">...</li>\n    <li class=\"flex gap-4 items-center border-b justify-\n          between border-slate-300 py-3\">...</li>\n    </ul>\n    </main> \n    ```", "```js\n    import { Directive**,** **HostBinding** } from '@angular/core';\n    **import** **{** **ButtonDirective** **}** **from****'./button.directive'****;**\n    @Directive({\n      selector: '[appButtonOutlined]',\n      **hostDirectives****: [**\n    **{**\n    **directive****:** **ButtonDirective****,**\n    **inputs****: [****'color'****],**\n    **},**\n    **],**\n    })\n    export class ButtonOutlinedDirective {\n      **@****HostBinding****(****'attr.fill'****)**\n    **fill =** **'outlined'****;**\n    } \n    ```", "```js\n    import { Directive } from '@angular/core';\n    **import** **{** **ButtonDirective** **}** **from****'./button.directive'****;**\n    **import** **{** **TooltipDirective** **}** **from****'./tooltip.directive'****;**\n    @Directive({\n      selector: '[appButtonWithTooltip]',\n      **hostDirectives****: [**\n    **{**\n    **directive****:** **ButtonDirective****,**\n    **inputs****: [****'color'****,** **'fill'****],**\n    **},**\n    **{**\n    **directive****:** **TooltipDirective****,**\n    **inputs****: [****'appTooltip: tooltip'****],**\n    **},**\n    **],**\n    })\n    export class ButtonWithTooltipDirective {} \n    ```", "```js\n    ...\n    <main class=\"content\" role=\"main\">\n    <ul class=\"flex flex-col\">\n    <li class=\"flex gap-4 items-center border-b justify-\n          between border-slate-300 py-3\">...</li>\n    <li class=\"flex gap-4 items-center border-b justify-\n          between border-slate-300 py-3\">...</li>\n    <li class=\"flex gap-4 items-center border-b justify-\n          between border-slate-300 py-3\">\n    <h4 class=\"text-lg\">Outlined Button:</h4>\n    **<****button****appButtonOutlined****>****Click Me****</****button****>**\n    </li>\n    <li class=\"flex gap-4 items-center border-b justify-\n          between border-slate-300 py-3\">\n    <h4 class=\"text-lg\">Button with Tooltip:</h4>\n    <div class=\"flex flex-col gap-4\">\n    **<****button****appButtonWithTooltip****tooltip****=****\"code with**\n    **ahsan\"****fill****=****\"****outlined\"****color****=****\"blue\"****>**\n    **Click Me**\n    **</****button****>**\n    **<****button****appButtonWithTooltip****tooltip****=****\"code with**\n    **ahsan\"****fill****=****\"filled\"****color****=****\"blue\"****>**\n    **Click Me**\n    **</****button****>**\n    </div>\n    </li>\n    </ul>\n    </main> \n    ```", "```js\nhostDirectives: [\n  ButtonDirective,\n  TooltipDirective\n], \n```"]