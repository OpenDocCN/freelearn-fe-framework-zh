- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying Your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working on and developing our application would come to a sad end if we could
    not publish the final product. While quite straightforward, presenting our application
    on the internet does require attention to a few details and being familiar with
    some terms and hosting possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What is involved in publishing a web application on the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Considerations for building our application for deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Becoming familiar with the terms and processes to register a domain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a web server to host our **Single-Page Application** (**SPA**) or
    **Progressive Web** **Application** (**PWA**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing our web application's server with Let’s Encrypt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main purpose of this chapter is to give you the tools to understand the
    steps needed to publish and secure a website, and by extension, also our SPA or
    PWA.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter is mostly informative, but a few configuration files have been
    uploaded to the book’s repository as examples, which can be found here: [https://github.com/PacktPublishing/Vue.js-3-Design-Patterns-and-Best-Practices/tree/main/Chapter10](https://github.com/PacktPublishing/Vue.js-3-Design-Patterns-and-Best-Practices/tree/main/Chapter10).'
  prefs: []
  type: TYPE_NORMAL
- en: What is involved in publishing a web application?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Publishing a Vue 3 web application is not that much different from doing so
    for any other website, save for a few key differences. In this chapter, we will
    consider a clean installation, meaning that we will procure all the elements involved
    by ourselves. At its most basic, we need to consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A domain name for our site/application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The destination path for our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The hosting service or type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The web server software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Procuring a security certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding items also give us a simple formula for our preparations. Let’s
    go one by one, explaining each necessary term and concern as we move forward.
  prefs: []
  type: TYPE_NORMAL
- en: Domains, Domain Name Servers (DNS), and DNS records
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every computer connected to a network receives a unique identificatory address
    to distinguish it from the others on the same network. These are called **Internet
    Protocol** (**IP**) addresses, and nowadays, there are two in operation – IP versions
    4 and 6.
  prefs: []
  type: TYPE_NORMAL
- en: '`127.0.0.1`, which represents a loopback to our own computer. These addresses
    can also have a mask that defines a sub-segment in a network. Most likely, your
    home network uses this protocol internally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`127.0.0.1` in IPv6 is `0000:0000:0000:0000:0000:0000:0000:0001`, which then
    can be abridged as `0:0:0:0:0:0:0:1` or just `::1`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is much more regarding network addresses, but only with this brief introduction,
    it is already possible to see a usability issue here. These addresses work great
    for computers but don’t play nice with “*human memory.*” On the great internet,
    with millions of connected computers, using only IP addresses for navigation would
    be impossible. That is why there are special servers in the infrastructure of
    the web that provide a conversion from a “*human-friendly name*” into the right
    IP address. These friendly names are called **domains**, and the servers that
    provide the conversion are the **Domain Name Service** (**DNS**). All this is
    regulated by the **Internet Corporation for Assigned Names and Numbers** (**ICANN**)
    organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Domain names are what we use every day to access any website or application
    on the internet today. These are bought for a limited time from an entity authorized
    to sell them, called a **registrar**. Once the period has expired, there is the
    possibility for a limited time to renew the domain, and if not, it can be acquired
    by anyone else. Usually, domains are sold in terms of years, and prices vary greatly
    from a few cents to thousands of dollars. Domains are also organized in groups,
    separated by dots from right to left, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – The parts that make up a full domain name](img/Figure_10.01_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – The parts that make up a full domain name
  prefs: []
  type: TYPE_NORMAL
- en: 'The top-level domain is managed by the ICANN, and while `.com` for commercial
    websites is the most famous, there are plenty of others to choose from, such as
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.org`: For organizations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.net`: For networks or portals of corporate intranets and other organizations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.mil`: For military use'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.gov`: For official government sites'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New top-level domains are created often. You can find a growing list of them
    here: [https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains).'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we buy a domain (such as **mydomain** in the previous figure), it is attached
    to a top-level domain of our choosing. **Registrars** give us the option to select
    a domain and check whether they are available for purchase. To be of any use,
    the domain needs to be registered on a DNS to point to an IP address. The way
    to do that is to create **DNS records**, which is often done through the same
    registrar that sells the domain, or we can record in the registrar the DNS that
    will have the destination IP. There’ll be more about this later, but for now,
    just keep present the concept in your mind. The most common DNS records for a
    domain are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Record** **Type (name)** | **Value** **and description** |'
  prefs: []
  type: TYPE_TB
- en: '| `A` | An IPv4 address. This is the main record that points to the public
    IP of your server. |'
  prefs: []
  type: TYPE_TB
- en: '| `AAAA` | An IPv6 address. Points to the public IPv6 address of your server.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `CNAME` | Creates an alias to a domain, so you can point multiple domains
    to the same destination without creating multiple A/AAAA records. This can be
    used to create subdomains. |'
  prefs: []
  type: TYPE_TB
- en: '| `TXT` | A plain text record, which is often used with some form of validation
    of ownership for a domain. |'
  prefs: []
  type: TYPE_TB
- en: Table 10.1 – DNS record types
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the registrar and the service hired, you may never see or have
    to deal with these records, as some registrars/web hostings manage them automatically
    for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Subdomains do not need to be bought from a registrar, only configured. You
    can create as many as you please for your own domain. Some common subdomains are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`www`: For **World Wide Web**, or a web page. Nowadays, this subdomain is often
    used as a synonym for the domain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app`: For applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`admin`: For administration access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mail`: For email services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using subdomains, you can host multiple websites off the same domain/host. We
    will see later how to configure one for our application on our web server. At
    this point, what we need to remember is that a domain or a subdomain will point
    as a final destination to your server.
  prefs: []
  type: TYPE_NORMAL
- en: A note about the loopback address
  prefs: []
  type: TYPE_NORMAL
- en: Following the previous examples, the “domain” name reserved for the loopback
    (home) address is `localhost`.
  prefs: []
  type: TYPE_NORMAL
- en: The domain where our application will be hosted is the first step to having
    a presence on the internet. With it, we are in place to move to the next consideration
    – where it will be placed in that domain.
  prefs: []
  type: TYPE_NORMAL
- en: Considerations for building our application for deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we have our domain/subdomain, we need to decide (or know) on which path
    the application will be located. The path is what follows the domain, in segments
    separated by a forward slash (`/`) – for example, `mydomain.com/store/product.html`.
    These sections are called “paths” because they follow the same directory structure
    as mirrored in the local storage. Our application will be served through a `folder/subfolder/file...`).
    Internally, our server will match a domain request to the files in a local directory.
    Here is where we need to know whether the Vue application will be placed at the
    root, or on a path (directory), as we need to indicate this for the build process
    if we are using Vue Router in the web history mode (review [*Chapter 5*](B18602_05.xhtml#_idTextAnchor130),
    *Single-Page Applications*, if you need a refresher on this topic). In this case,
    we need to make two modifications:'
  prefs: []
  type: TYPE_NORMAL
- en: Indicate the *root* path for the application in our Router configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the web server to alter the directory/file service and route all the
    requests to the `index.html` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If our application is placed in `mydomain.com`**/app** using the web history
    mode, then we need to alter our router definition by passing the “base path” to
    the creator function. So, if we look at the router from our SPA example application
    in [*Chapter 5*](B18602_05.xhtml#_idTextAnchor130), *Single-Page Applications*,
    we can modify it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: /chapter 5/to-do SPA/src/router/index.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note the minor change, where we pass the base path to the `createWebHistory`
    constructor instead of using `createWebHashHistory()`. Of course, if the application
    uses the hash mode, it doesn’t matter where it is placed in our path. This is
    because in this mode, all routing navigation will be passed after the hash while
    pointing to our `index.html` file. For example, if our router has a route called
    `/description`, using the hash mode will make the address `mydomain.com/app``mydomain.com/app`**/description**
    (the web history mode).
  prefs: []
  type: TYPE_NORMAL
- en: Hashes in web addresses
  prefs: []
  type: TYPE_NORMAL
- en: The hash in an address indicates a link to a section on the page/file, according
    to the HTML standard, and is used by Vue to manage the defined routes when in
    the hash mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having provisioned the destination of our application, we can now build the
    production code through Vite with the following command on the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By default, the final production-ready files for our entire application will
    be placed in the `/dist` folder (at the same level as our `/src` folder). Now,
    with our built distribution files, we are ready to upload them to a server once
    we have set the proper configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Web server options and configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When is time to upload our application to a server, we are faced with many
    options, based on the type of service and web server application provided. This
    combination of items is usually referred to as the “hosting” server, which includes
    the operating system, machine configuration, architecture type, and especially,
    the web server software. Here is a list of some of the most common options for
    each category:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operating system** | **Linux** **or Windows** | **For our Vue 3 application,
    this choice** **is inconsequential** |'
  prefs: []
  type: TYPE_TB
- en: '| **Hosting type** | **Shared** | Our application will reside in a server in
    a private area of the storage but will share all the resources with other applications.
    Access to configuration is usually done through a web control panel |'
  prefs: []
  type: TYPE_TB
- en: '| **Virtual Private** **Server (VPS)** | We are provided with a virtual machine
    with full access to the entire configuration and resources, usually through a
    direct connection with a remote terminal |'
  prefs: []
  type: TYPE_TB
- en: '| **Managed VPS** | Like a VPS, but we are provided with a web control panel
    or other services to manage the machine |'
  prefs: []
  type: TYPE_TB
- en: '| **Private server** | Here, we rent real hardware from the hosting provider
    and have full liberty to all their resources |'
  prefs: []
  type: TYPE_TB
- en: '| **Self-hosted** | We connect a server directly to the internet by our own
    means and an internet connection |'
  prefs: []
  type: TYPE_TB
- en: '| **Collocated** | We provide a server to a server farm, where they take care
    of physical needs. We manage the server remotely with full control of software
    and hardware |'
  prefs: []
  type: TYPE_TB
- en: '| **Web server** | **Apache HTTP** | This server is stable and heavily used
    in Linux and shared hosting |'
  prefs: []
  type: TYPE_TB
- en: '| **Nginx** | A smaller and fast web server, famous for managing very well
    a large number of concurrent connections, with efficient use of resources. Very
    easy to manage and very popular for VPS hosting |'
  prefs: []
  type: TYPE_TB
- en: Table 10.2 - Common hosting options per category
  prefs: []
  type: TYPE_NORMAL
- en: In the case of Vue 3 applications, we aim to have a web server that is fast
    and reliable to attend to multiple requests simultaneously by serving static files.
    We do not require much CPU processing power, as we do not run code on the server,
    so our requirements for hardware and software are very low, so much so that practically
    any “static file server” would do. Most likely, our application will be part of
    a much larger infrastructure with other requirements, but those used to serve
    our Vue 3 app in and of itself are low.
  prefs: []
  type: TYPE_NORMAL
- en: The key consideration here is, again, whether we are using the web history mode
    in our router. In that case, we need to include a configuration to the web server
    software to direct all requests to the entry point of our Vue application (our
    `index.html`) when a request does not match the standard (a file in the folder
    directory). This may sound complicated but is rather simple. Directly from the
    official Vue Router documentation, here are examples of the two web servers.
  prefs: []
  type: TYPE_NORMAL
- en: Apache HTTP Server configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Apache HTTP Server is used heavily in shared hosting providers and allows
    us to alter the configuration for requests by placing a single file in the root
    directory of the web application. This is very convenient and simple, but it does
    require that the hosting provider has enabled (or through the administration panel,
    allowed the user to enable) a special module that allows us to rewrite the incoming
    requests. The official documentation ([https://router.vuejs.org/guide/essentials/history-mode.html#apache](https://router.vuejs.org/guide/essentials/history-mode.html))
    shows this example:'
  prefs: []
  type: TYPE_NORMAL
- en: /.htaccess
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding file should be placed alongside our `index.html` file. Every incoming
    request will then be routed to it and captured by Vue Router in the web history
    mode. Also, note in line `//1`, the `RewriteBase` rule. Here is where we change
    the path of our application, if not placed at the root of the domain.
  prefs: []
  type: TYPE_NORMAL
- en: Nginx server configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the case of VPSes and private servers, the NGINX server is quite popular
    for how flexible and performant it is. It can behave as a reverse proxy, load
    balancer, and much more. Installing this server in a VPS with Linux/Windows is
    rather trivial, but we will not cover it here. You can see the documentation for
    each system at [https://www.nginx.com/resources/wiki/start/topics/tutorials/install/](https://www.nginx.com/resources/wiki/start/topics/tutorials/install/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike Apache with the `.htaccess` files, we need to modify the server configuration
    file for our site. In Linux, this is usually placed in /etc/nginx/sites-available.
    The file follows a simple schema where, for each virtual server, we declare the
    location path (as in the domain path) and the location on the local storage (the
    directory or folder). Here is an example file from a Linux server:'
  prefs: []
  type: TYPE_NORMAL
- en: /etc/nginx/sites-available/default
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s look at the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: In line *//1*, we place the local storage absolute path to our application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In line *//2*, we declare the domains and subdomains that will be associated
    with this server block.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In line *//3,* we declare the location path to process. In this example, we
    are placing the application at the root (`/`). If placed in `mydomain.com/app`,
    we would write `location /app`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, in line *//4,* we tell NGINX to try to find a valid directory/file
    and, if not, pass it through to our `index.html` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As before, if we are using the web hash mode, then we do not need to do these
    changes. We can just use the default configuration to serve the files from the
    disk.
  prefs: []
  type: TYPE_NORMAL
- en: Other servers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many other servers in use and possible configurations that are not
    possible to cover here. However, the official Vue Router documentation has very
    good examples for other servers and guidelines for those not covered. You can
    find the reference at this link: [https://router.vuejs.org/guide/essentials/history-mode.html#example-server-configurations](https://router.vuejs.org/guide/essentials/history-mode.html#example-server-configurations).'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see now how to move our files onto our online server.
  prefs: []
  type: TYPE_NORMAL
- en: Transferring your files to the server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Armed now with the domain pointing to our server and the configurations in place,
    it is time to upload our distribution files. Depending on your choice of hosting,
    this could be done through a web interface, a **File Transfer Protocol** (**FTP**)
    application, or secure transfer over the **Secure Shell Protocol** (**SSH**).
    For the last two options, it is recommended to use an application that takes care
    of the heavy lifting. An excellent option is to use FileZilla ([https://filezilla-project.org/](https://filezilla-project.org/)),
    which handles the aforementioned protocols. It is available for Linux, Windows,
    and macOS.
  prefs: []
  type: TYPE_NORMAL
- en: As we mentioned in [*Chapter 9*](B18602_09.xhtml#_idTextAnchor199), *Testing
    and Source Control*, you can also configure your VPS/server to pull the source
    code from a remote repository using `/dist` folder in the local repository. We
    could, for example, open a remote terminal to the server, trigger a synchronization
    (pull), and then bundle the application on the server itself, pull a branch that
    already has the application bundled, push our commits directly to the server,
    and so on. There are many options when using Git, and a few more when using a
    service such as `GitHub` or `GitLab` with powerful tools for *continuous integration
    and delivery*. This is a topic worth exploring if you do not want to use S/FTP
    applications or want to automate the process. Each implementation would be specific
    and out of the scope of this book, so we will move on to the next topic, assuming
    that our files are now on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting your web application with Let’s Encrypt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Internet addresses are included at the very beginning of the protocol being
    used. By default, all web navigation is done using the **Hypertext Transfer Protocol**
    (**HTTP**), which, while foundational, is not considered secure. When an encryption
    layer between the client and the server is provided, then the communication is
    done over **HTTPS** (the **S** standing for **Secure**). This encryption layer
    is provided and validated by a certifying authority, so the certificate must be
    bought from such one. Hosting providers usually have the option to buy and install
    one on their servers, but there is also a free and reliable alternative provided
    by the **Let’s Encrypt** foundation ([https://letsencrypt.org/](https://letsencrypt.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install a *Let’s Encrypt* certificate, you need shell access to your server.
    If not, then you must rely on the service provided by the hosting. The list of
    certified hosting providers compatible is here: [https://certbot.eff.org/hosting_providers](https://certbot.eff.org/hosting_providers).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case that we have access to a server through remote shell access, the
    process is also straightforward. The Let’s Encrypt foundation and the **Electronic
    Frontier Foundation** (**EFF**) provide an application called **certbot** (certification
    robot), which automates the installation of security certificates and also configures
    the local web server files to use HTTPS. In this case, we have two options:'
  prefs: []
  type: TYPE_NORMAL
- en: Install a certificate for each domain and each subdomain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install a *wild card certificate*, which covers each domain and all possible
    subdomains
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The instructions to install the *certbot* and then run the process differ for
    each operating system and web server, and the type of certificate mentioned. Because
    of this, the EFF provides a web page with configurable options for each possible
    variation and easy-to-follow steps. The wizard can be found here: [https://certbot.eff.org/](https://certbot.eff.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Certbot instructions for NGINX and Ubuntu 20](img/Figure_10.02_B18602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Certbot instructions for NGINX and Ubuntu 20
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, the instructions follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install **certbot**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run **certbot**. This will present a series of options, with all the found dominions
    found on the given web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the type of certificate to install.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select, if active, the auto-renewal of the certificate. Rejecting this will
    require manual renewal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The free certificate is only valid for 3 months at a time, as opposed to a commercial
    certificate, which can be bought for more time. After 3 months, it must be manually
    renewed. Luckily, *certbot* includes a function to perform automatic updates before
    the expiration period is due.
  prefs: []
  type: TYPE_NORMAL
- en: Even for simple test applications, it is important and recommendable to always
    protect a website with a security certificate. Let’s also remember that having
    a security certificate and serving an application over HTTPS is a hard requirement
    for PWAs.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the basics for publishing our Vue application in
    its own public space on the internet. We also learned important concepts for understanding
    instructions when buying and reserving a domain and setting DNS records if and
    when prompted to do so. We also learned about how to accommodate our bundle configuration
    when using the HTML5 history mode in Vue Router, the different types of online
    hosting we can hire, options for copying our distribution files onto the production
    server, and guidelines for securing our website with a free Let’s Encrypt certificate
    to serve our applications over HTTPS. All of these are important skills, and you
    will benefit from having the experience of executing these skills at least once.
  prefs: []
  type: TYPE_NORMAL
- en: With the deployment of our application, we have covered in this book the main
    steps and topics to construct a Vue 3 application, from the introduction of the
    framework all the way to testing our individual components and installing our
    production-ready files in a web server. In some cases, we have gone beyond the
    basics to see advanced topics, which are an important addition to a professional
    developer. If you have followed the concepts and code examples this far, you have
    acquired important skills to help you in your professional development. But this
    is not the end of this book, as you can find additional bonus content next.
  prefs: []
  type: TYPE_NORMAL
- en: I extend my appreciation and gratitude to you, dear reader, for your interest
    in Vue 3 and in acquiring this book, which summarizes many years of experience
    developing applications. I hope it becomes a source of reference and encouragement
    to keep learning, and I wish you the best of success in your personal and professional
    career.
  prefs: []
  type: TYPE_NORMAL
- en: Sincerely,
  prefs: []
  type: TYPE_NORMAL
- en: '**Pablo** **D. Garaguso**'
  prefs: []
  type: TYPE_NORMAL
- en: Review questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a top-level domain, and how is it different from a domain?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is there a limit to the number of subdomains we can create for our domain? Why?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a DNS? What are DNS records?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the options currently for publishing your web application on the internet?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What considerations in our code and web server do we need to make when using
    Vue Router in web history mode?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are some common web servers found in shared hosting and VPSes?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is certbot and what does it do?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
