["```js\nsudo npm install flux\n\n```", "```js\nmodule.exports = {\n ADD_BOOK: 'ADD_BOOK',\n DELETE_BOOK: 'DELETE_BOOK',\n INC_BOOK_COUNT: 'INC_BOOK_COUNT',\n\nDEC_BOOK_COUNT: 'DEC_BOOK_COUNT'\n}\n```", "```js\nvar AppConstants = require('../constants/app-constants');\nvar AppDispatcher = require('../dispatchers/app-dispatchers');\n\nvar AppActions = {\n  addBook:function(item){\n        AppDispatcher.handleViewAction({\n          actionType: AppConstants.ADD_BOOK,\n          item: item\n        })\n  },\n  removeBook:function(index){\n        AppDispatcher.handleViewAction({\n          actionType: AppConstants.REMOVE_BOOK,\n          index: index\n        })\n  },\n  incBookCount:function(index){\n        AppDispatcher.handleViewAction({\n          actionType: AppConstants.INC_BOOK_COUNT,\n          item: index\n        })\n  },\n  decBookCount:function(index){\n        AppDispatcher.handleViewAction({\n          actionType: AppConstants.DEC_BOOK_COUNT,\n          item: index\n        })\n  }\n}\n\nmodule.exports =  AppActions;\n```", "```js\n   // Registers a callback to be invoked with every dispatched payload. Returns\n   // a token that can be used with `waitFor()`.   \n\n  Dispatcher.prototype.register = function register(callback) {\n    var id = _prefix + this._lastID++;\n    this._callbacks[id] = callback;\n    return id;\n  };\n```", "```js\n  /**\n   * Dispatches a payload to all registered callbacks. The highlighted code below ensures the fact that dispatches cannot be triggered in the middle of another dispatch.\n\n   */\n\n Dispatcher.prototype.dispatch = function dispatch(payload) {\n !!this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : undefined;\n    this._startDispatching(payload);\n    try {\n      for (var id in this._callbacks) {\n        if (this._isPending[id]) {\n          continue;\n        }\n        this._invokeCallback(id);\n      }\n    } finally {\n      this._stopDispatching();\n    }\n  };\n```", "```js\napp-dispatcher class.\n```", "```js\nvar Dispatcher = require('flux').Dispatcher;\nvar assign = require('react/lib/Object.assign');\n\nvar AppDispatcher = assign(new Dispatcher(),{\n        handleViewAction: function(action){\n          console.log('action',action);\n          this.dispatch ({\n            source: 'VIEW_ACTION',\n            action: action\n          })\n        }\n});\n\nmodule.exports = AppDispatcher;\n```", "```js\nvar React = require('react');\nvar ReactDOM = require('react-dom');\n\n//call the AppActions directly, before creation of the Store\nvar AppActions = require('../actions/app-actions');\n\n//create a App component\nvar App = React.createClass({\n        handler: function(){\n          AppActions.addBook('This is the book..Sherlock Holmes')\n        },\n        render:function(){\n          return <h1 onClick={this.handler}>My First Flux App </h1>\n        }\n\n});\nmodule.exports = App;\n```", "```js\ndoel@doel-Vostro:~/reactjs/ch6_flux_library$httpster\nStarting HTTPster v1.0.1 on port3333 from /home/doel/reactjs/ch6_flux_library\n\n```", "```js\nvar AppDispatcher = require('../dispatchers/app-dispatchers');\nvar AppConstants = require('../constants/app-constants');\nvar assign = require('react/lib/Object.assign');\n\n//eventEmitter allows the Stores to listen/broadcast changes to the \n//Controller-Views/React-Components\nvar EventEmitter = require('events').EventEmitter;\n\nvar CHANGE_EVENT = 'change';\n\nvar _library = [];\n\nfor(var i=1; i<6; i++){\n  _library.push({\n    'id': 'Book_' + i,\n    'title':'Sherlock Holmes Story ' + i,\n    'description': 'Sherlock Series by Sir Arthur Conan Doyle'\n  });\n}\n\nvar _readingItems = [];\n\nfunction _removeItem(index){\n  _readingItems[index].inReadingList = false;\n  _readingItems.splice(index, 1);\n}\n\nfunction _increaseItem(index){\n  _readingItems[index].qty++;\n}\n\nfunction _decreaseItem(index){\n  if(_readingItems[index].qty>1){\n    _readingItems[index].qty--;\n  }\n  else {\n    _removeItem(index);\n  }\n}\n\nfunction _addItem(item){\n  if(!item.inReadingList){\n    item['qty'] = 1;\n    item['inReadingList'] = true;\n    _readingItems.push(item);\n  }\n  else {\n    _readingItems.forEach(function(cartItem, i){\n      if(cartItem.id===item.id){\n        _increaseItem(i);\n      }\n    });\n  }\n}\nvar AppStore = assign(EventEmitter.prototype, {\n  emitChange: function(){\n    this.emit(CHANGE_EVENT)\n  },\n  addChangeListener: function(callback){\n    this.on(CHANGE_EVENT, callback)\n  },\n  removeChangeListener: function(callback){\n    this.removeListener(CHANGE_EVENT, callback)\n  },\n  getReadingList: function(){\n    return _readingItems\n  },\n  getLibrary: function(){\n    return _library\n  }\n```", "```js\ndispatcherIndex: AppDispatcher.register(function(payload){\n    var action = payload.action; \n    switch(action.actionType){\n      case AppConstants.ADD_BOOK:\n        _addItem(payload.action.item);\n        break;\n\n      case AppConstants.DELETE_BOOK:\n        _removeItem(payload.action.index);\n        break;\n\n      case AppConstants.INC_BOOK_COUNT:\n        _increaseItem(payload.action.index);\n        break;\n\n      case AppConstants.DEC_BOOK:\n        _decreaseItem(payload.action.index);\n        break;\n    }\n\n    AppStore.emitChange();\n\n    return true;\n  })\n})\nmodule.exports = AppStore;\n```", "```js\nvar React = require('react');\nvar AppStore = require('../stores/app-stores');\nvar AddBookToReadingList = require('./app-addbooktoreadinglist')\n\nfunction getLibrary(){\n  return {items: AppStore.getLibrary()}\n}\n\nvar BookList = React.createClass({\n  getInitialState:function(){\n    return getLibrary()\n  },\n  render:function(){\n    var items = this.state.items.map(function(item){\n      return (\n        <tr key={item.id}>\n          <td>{item.title}</td>\n          <td><AddBookToReadingList item={item} /></td>\n        </tr>\n      );\n    })\n    return (\n      <table className=\"table table-hover\">\n        {items}\n      </table>\n    )\n  }\n});\n\nmodule.exports = BookList;\n```", "```js\nvar React = require('react');\nvar AppActions = require('../actions/app-actions');\n\n//create a AddBookToLibrary component\nvar AddBookToReadingList = React.createClass({\n        handleClick: function(){\n          AppActions.addBook(this.props.item)\n        },\n        render:function(){\n          return <button onClick={this.handleClick}>I want to borrow </button>\n        }\n\n});\nmodule.exports = AddBookToReadingList;\n```", "```js\nvar React = require('react');\nvar AppStore = require('../stores/app-stores.js');\nvar RemoveFromReadingList = require('./app-removefromreadinglist');\n\nfunction readingItems(){\n  return {items: AppStore.getReadingList()}\n}\n\nvar ReadingList = React.createClass({\n  getInitialState:function(){\n    return readingItems()\n  },\n  componentWillMount:function(){\n    AppStore.addChangeListener(this._onChange)\n  },\n  _onChange: function(){\n    this.setState(readingItems())\n  },\n  render:function(){\n    var total = 0;\n    var items = this.state.items.map(function(item, i){\n      return (\n          <tr key={i}>\n            <td><RemoveFromReadingList index={i} /></td>\n            <td>{item.title}</td>\n            <td>{item.qty}</td>\n          </tr>\n      );\n    })\n    return (\n      <table className=\"table table-hover\">\n          <thead>\n              <tr>\n                <th></th>\n                <th>Book Name</th>\n                <th>Qty</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n          </table>\n    )\n  }\n});\nmodule.exports = ReadingList\n```", "```js\n    componentWillMount:function(){\n        AppStore.addChangeListener(this._onChange)\n      },\n      _onChange: function(){\n        this.setState(readingItems())\n      }\n    ```", "```js\nvar React = require('react');\nvar AppActions = require('../actions/app-actions');\n\n//create a DeleteBookFromLibrary component\nvar DeleteBookFromReadingList = React.createClass({\n        handleClicr: function(){\n          AppActions.deleteBook(this.props.index)\n        },\n        render:function(){\n          return <button onClick={this.handleClicr}>Book Completed</button>\n        }\n});\nmodule.exports = DeleteBookFromReadingList;\n```", "```js\nvar React = require('react');\nvar BookList = require('./app-booklist');\nvar ReadingList = require('./app-readinglist');\n//create a App component\nvar App = React.createClass({\n        render:function(){\n          return <div><h1>Book List</h1><BookList /><h1>Reading List</h1><ReadingList /></div>\n        }\n});\nmodule.exports = App\n```"]