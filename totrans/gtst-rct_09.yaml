- en: Chapter 9. Preparing Your Code for Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Going through the ReactJS fundamentals and flux, we have almost approached the
    end of this book. After developing any application, we are left with the most
    crucial part of making the application available to the outside world, thus deploying
    your application. It's a good practice to keep the code in a source control repository
    such as GitHub or Bitbucket and to version control the code using Git. These help
    while working in a group and retrieval of any code as and when necessary. The
    explanation of how to set up the earlier-mentioned things is beyond the scope
    of this book, but there are a plenty of resources available for the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be exploring the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Webpack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ways of deploying a React application using Webpack and Gulp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The configuration options used for browserify
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a simple web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to Webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Webpack** is a module bundler, which is used to deploy JavaScript-based applications.
    It takes the input as modules with dependencies and then outputs these into static
    assets.'
  prefs: []
  type: TYPE_NORMAL
- en: From the Webpack documentation site ([https://webpack.github.io/docs/what-is-webpack.html#how-is-webpack-different](https://webpack.github.io/docs/what-is-webpack.html#how-is-webpack-different)),
    the following image explains the same.
  prefs: []
  type: TYPE_NORMAL
- en: '![An introduction to Webpack](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Building a simple React application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As in the earlier chapters, let's build a simple React-based application with
    which we will be integrating the Webpack and deploy thereafter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the packages `vis npm` from a terminal as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`httpster`: It is a simple http server to run the static content. In chrome
    browser, the `index.html` file sometimes doesn''t render due to the X-origin error.
    Hence, running this webserver from your application directory will be easier to
    test your application in Chrome. Just run the command `httpster`.'
  prefs: []
  type: TYPE_NORMAL
- en: By default, the server runs in port `3333`, thus `localhost:3333` in the browsers
    should render the `index.html` page of your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have created the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`src/bundle.js`: This is where Webpack writes its output to, after transpiling
    the code and performing any other transformations of the file to plain JS. The
    details of this file are discussed in the latter section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.html`: Application landing page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.js`: React-based components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '.`babelrc`: presets and environments of babel are declared here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`node_modules`: Installed `npm` packages are present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Webpack.config.js`: Webpack-related configurations are present here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a console screenshot, showing app directory structure using
    Webpack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a simple React application](img/00055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Take a look at the simple React app code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '**index.html:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**index.js:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Setting up Webpack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we got an overview of what Webpack is, let's install and configure
    it so that we can use it in our React application, as mentioned later.
  prefs: []
  type: TYPE_NORMAL
- en: 'In you terminal, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `-g` option installs the Webpack library globally in your computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, in the following screenshot, there are many dependent packages,
    which also gets installed while installing Webpack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Webpack](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A console screenshot, showing webpack package installation with all the dependencies
  prefs: []
  type: TYPE_NORMAL
- en: 'After Webpack''s installation, we will be creating the `webpack-config.js`
    file, with entries given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Let''s explain the preceding code.**'
  prefs: []
  type: TYPE_NORMAL
- en: We start off with the entry point of our application. As React-based applications
    generally have many components, having a common entry point for all of these components
    will be easier to manage and important for well-structured modular applications.
  prefs: []
  type: TYPE_NORMAL
- en: We then direct the output to a file `bundle.js` and combine all components and
    its children.
  prefs: []
  type: TYPE_NORMAL
- en: After loading the test loader, we mention which packages are to be excluded
    within the `node_modules` directory.
  prefs: []
  type: TYPE_NORMAL
- en: We then use the loaders, specifying which one of them to use. The presets loader
    does all the transformations that Babel does while transpiling the ES6 code into
    the current browser-compatible code.
  prefs: []
  type: TYPE_NORMAL
- en: Let's run the Webpack command in our terminal now,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`sudo` is used as we need the sudo/root permission in order to execute the
    Webpack commands or we need to change the ownership/permissions of the specific
    directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `-w` option ensures to watch any file that changes. It''ll watch the source
    files for changes, and when changes are made, the bundle will be recompiled. (Source:
    [https://webpack.github.io/docs/webpack-dev-server.html](https://webpack.github.io/docs/webpack-dev-server.html)).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `-v` option gives the verbose output.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`webpack --help`: This command gives the output of all the options and their
    corresponding meanings, which can be passed as arguments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Setting up Webpack](img/00057.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A console screenshot, after the webpack execution on the terminal
  prefs: []
  type: TYPE_NORMAL
- en: Thus, all the transformations and transpirations of the code is there in the
    `src/bundle.js` output file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typical out of the `bundle.js` file from the app mentioned earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Refer to the Webpack documentation at [https://webpack.github.io/docs/webpack-dev-server.html](https://webpack.github.io/docs/webpack-dev-server.html).
  prefs: []
  type: TYPE_NORMAL
- en: The newly generated `bundle.js` is stored in the memory in a location, which
    is the relative path specified in publicPath.
  prefs: []
  type: TYPE_NORMAL
- en: For example, with the preceding configuration, the bundle will be available
    at `localhost:8080/assets/bundle.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to load the bundled files, we create the html file (mostly named as
    the `index.html` file) in the `build` folder from which static files are served:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: By default, the application runs in `localhost:8080/` to launch your app. For
    example, with the configuration mentioned earlier (with publicPath), go to `localhost:8080/assets/`.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of Webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Along the various advantages of using Webpack, as yet another bundler, these
    are the most important ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code splitting**: Based on the code size, it helps modularize the code chunks
    of code and loads these modules as and when needed. You can define the split points
    on your code, based on which the code chunks will be used. Thus, it helps in faster
    page load and performance improvement.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Loaders**: As in the earlier-mentioned image, in the left-hand side, you
    can see that there are various other formats such as `coffescripts`/`jsx` instead
    of JavaScript and .less instead of `.css`. Thus, these loaders (`npm` packages)
    are used to convert these other formats into the accepted standardized formats,
    which makes the life of the developers much easy to code into any format they
    want. In React-based applications that we were seeing earlier, JSX formats are
    widely used. Hence, these loaders will come handy.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Clever parsing**: It helps to parse most of the third-party library and handles
    the widely used styles in CommonJS and AMD.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Plugin system**: In case you want to extend Webpack to create a step within
    the build process, you can create a plugin that uses a callback to the Webpack
    reference point, where you want to call it.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Introduction to Gulp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have seen a module bundler, let's see what Gulp will do for us.
    Gulp is a build tool for compiling and compressing JS/assets, and it does live
    reload on the browsers. Gulp file is basically a file with the set of instructions,
    which Gulp should do. The file can have a default task or several other tasks
    to be called from one another.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Gulp and creating Gulp file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s install `gulp` and configure it with our existing application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a simple `gulpfile.js` file at the root of your app directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s execute the command from terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Gulp and creating Gulp file](img/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A console screenshot, after the gulp command is executed
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we are installing some other packages for Gulp-related tasks. We are
    adding these in our `package.json` file and running `npm` install, in order to
    install these:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A few of the key things in gulp:'
  prefs: []
  type: TYPE_NORMAL
- en: Initially, we need to require all the gulp and related gulp plugins/packages,
    which are required while executing the tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The gulp tasks are declared with `gulp.task`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The .`pipe` command is used to stream data that needs to be processed. This
    command is used concatenated, which results in getting the output together.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now if we add some tasks in the Gulp file, it will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Let''s go** **through** **the preceding code:**'
  prefs: []
  type: TYPE_NORMAL
- en: Four Gulp tasks are declared earlier and are highlighted. The **default** mandatory
    task is calling three tasks internally, as in the last highlighted line. In Gulp
    terms, any task calling other tasks are mentioned as array elements of the parent
    task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gulp.task (''eslinting'', function)`: This task is used to check any issue
    with the code in the `js` & `jsx` files. In order to check the `jsx` with `gulp-eslint`
    plugin, the `ecmaFeature: {"jsx": true}` option is set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gulp.watch`: As the name suggests, this task watches any change in the JS
    files, and recompiles the files thereafter. In case it''s not required to watch
    any files, we need to pass `read: false` to the `options` object. After the change
    in the `js`/`jsx` files, we can call `browserSync.reload` or add tasks in order
    to reload your html page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`browsersync`: This plugin is not officially for gulp; though it can work with
    any gulp task. Any change in the `js`/`jsx` files will be synced to the browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After executing the gulp command from app''s root directory in the terminal,
    we should be able to see such an output in the terminal. See the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Gulp and creating Gulp file](img/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A console screenshot, after the gulp command with tasks been executed
  prefs: []
  type: TYPE_NORMAL
- en: Let's check once how the `gulp-eslint` works. Add a line such as require 'react',
    at the beginning of the `index.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Installing Gulp and creating Gulp file](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A console screenshot, after the gulp command with an eslint task with error
    been executed
  prefs: []
  type: TYPE_NORMAL
- en: As we know, it should be `var React = require("react")`; is the correct way
    of requiring the React package.
  prefs: []
  type: TYPE_NORMAL
- en: There are many for Gulp plugins, which are helpful in our day-to-day application
    development apart from the ones mentioned in the earlier-mentioned example. Please
    feel free to see the Gulp documentation and related plugins from their website
    [http://gulpjs.com/](http://gulpjs.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we came to know how we can deploy our React applications using
    Webpack and the way Gulp eases our life by automating tasks, minifying our assets
    (JS, JSX, CSS, SASS, images, and so on), watching any changes on these files and
    live-reload built in the browser. In [Chapter 10](part0057_split_000.html#page
    "Chapter 10. What's Next"), *What's Next*, we will be exploring some advanced
    concepts of ReactJS.
  prefs: []
  type: TYPE_NORMAL
