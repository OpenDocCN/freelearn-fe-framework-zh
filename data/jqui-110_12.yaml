- en: Chapter 12. The Resizable Component
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章。可调整大小组件
- en: We have already seen resizables in action briefly when we looked at the dialog
    widget, earlier in the book. In this chapter, we're going to focus on it directly.
    However, the dialog is a perfect example of how useful the resizable component
    can be in a real-world implementation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在本书前面查看对话框小部件时，我们已经简要地看到了可调整大小的效果。在本章中，我们将直接关注它。然而，对话框是一个很好的例子，说明了在实际应用中可调整大小的组件可以有多么有用。
- en: The resizable widget adds the same functionality that is automatically added
    to `<textarea>` elements in WebKit browsers such as Safari or Chrome, or newer
    versions of Firefox. In these browsers, a resize handle is added to the bottom-right
    corner, which allows the element to be resized. With the jQuery UI resizable component,
    we can add this behavior to almost any element on the page.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 可调整大小小部件添加了与在 WebKit 浏览器（如 Safari 或 Chrome）或较新版本的 Firefox 中自动添加到 `<textarea>`
    元素中的相同功能。在这些浏览器中，会添加一个调整大小的手柄到右下角，允许调整元素的大小。使用 jQuery UI 可调整大小组件，我们可以将此行为添加到页面上几乎任何元素中。
- en: 'In this chapter, we''ll be looking at the following aspects of the component:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将关注该组件的以下方面：
- en: Implementing basic resizability
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现基本的可调整大小
- en: The configurable options available for use
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用于使用的可配置选项
- en: Specifying which resize handles to add
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定要添加的调整大小手柄
- en: Managing the resizable's minimum and maximum sizes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理可调整大小的最小和最大尺寸
- en: The role of resize helpers and ghosts
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整大小帮助器和幽灵的角色
- en: A look at the built-in resize animations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看内置的调整大小动画
- en: How to react to resize events
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何响应调整大小事件
- en: Determining the new size of a resizable
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定可调整大小的新尺寸
- en: Using a resizable with other library widgets
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他库小部件一起使用可调整大小
- en: The resizable widget is a flexible component that can be used with a wide range
    of different elements. Throughout the examples in this chapter, we'll mostly be
    using simple `<div>` elements so that the focus remains on the component and not
    on the underlying HTML. We will also look at some brief examples using `<img>`
    and `<textarea>` elements, towards the end of the chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 可调整大小小部件是一个灵活的组件，可以与各种不同的元素一起使用。在本章的示例中，我们将主要使用简单的 `<div>` 元素，以便将重点放在组件上，而不是底层的
    HTML 上。我们还将在本章末尾看一些简短的示例，使用 `<img>` 和 `<textarea>` 元素。
- en: The resizable component works well with other components and is very often used
    in conjunction with draggables. However, while you can easily make draggable components
    resizable (think dialog), the two classes are in no way related.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 可调整大小的组件与其他组件配合得很好，并且经常与可拖动的组件一起使用。然而，虽然你可以轻松地使可拖动的组件可调整大小（比如对话框），但是这两个类别并没有任何关联。
- en: Implementing a basic resizable widget
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现基本的可调整大小小部件
- en: 'Let''s implement the basic resizable so we can see how easy making elements
    resizable is, when you use jQuery UI as the driving force behind your pages. In
    a new file in your text editor add the following code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现基本的可调整大小，这样我们就可以看到当你使用 jQuery UI 作为页面的驱动力时，使元素可调整大小是多么容易的事情。在文本编辑器中的一个新文件中添加以下代码：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save this as `resizable1.html`. The basic widget method used with no arguments
    for the default implementation uses the same simplified syntax as the rest of
    the library. This requires just one line of code for the example to work.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`resizable1.html`。默认实现中使用的基本小部件方法没有参数，其使用与库的其余部分相同的简化语法。这只需要一行代码即可使示例工作。
- en: 'Along with the CSS framework files that we need for any resizable implementations,
    we also use a custom stylesheet to add basic dimensions and borders to our resizable
    `<div>`. Use the following CSS in a new file in your text editor:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们需要用于任何可调整大小实现的 CSS 框架文件外，我们还使用自定义样式表为我们的可调整大小的 `<div>` 添加了基本的尺寸和边框。在文本编辑器中的一个新文件中使用以下
    CSS：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Save this file as `resize.css` in the `css` folder. We''ve specified the dimensions
    of our resize `<div>` in the CSS, as without them the `<div>` element will stretch
    the width of the screen. We''ve also specified a border to clearly define it,
    as the default implementation only adds a single resize handle to the bottom-right
    corner of the targeted element. The following screenshot shows how our basic page
    should look after the `<div>` element has been resized:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`resize.css`，放在`css`文件夹中。我们在 CSS 中指定了调整大小的 `<div>` 的尺寸，因为如果没有这些尺寸，`<div>`
    元素将拉伸到屏幕的宽度。我们还指定了一个边框来清晰地定义它，因为默认实现只会在目标元素的右下角添加一个调整大小的手柄。下面的截图显示了在 `<div>` 元素调整大小后我们的基本页面应该是什么样子的：
- en: '![Implementing a basic resizable widget](img/2209OS_12_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![实现基本的可调整大小小部件](img/2209OS_12_01.jpg)'
- en: 'The files required for the resizable component are as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 可调整大小组件所需的文件如下：
- en: '`jquery-2.0.3.js`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery-2.0.3.js`'
- en: '`jquery.ui.core.js`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.ui.core.js`'
- en: '`jquery.ui.widget.js`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.ui.widget.js`'
- en: '`jquery.ui.mouse.js`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.ui.mouse.js`'
- en: '`jquery.ui.resizable.js`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.ui.resizable.js`'
- en: The component automatically adds the three required elements for the drag handles.
    Although the only visible resize handle is the one in the bottom-right corner,
    both the bottom and right edges can be used to resize the widget.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件自动添加了三个必需的拖动手柄元素。尽管唯一可见的调整大小手柄是右下角的手柄，但底部和右侧边缘都可以用于调整大小小部件。
- en: Listing the resizable options
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出可调整大小选项
- en: 'The following table lists the configurable options that we have at our disposal
    while working with the resizable component:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了我们在使用可调整大小组件时可以使用的可配置选项：
- en: '| Option | Default value | Used to… |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 默认值 | 用于… |'
- en: '| --- | --- | --- |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `alsoResize` | `false` | Automatically resize specified elements in sync
    with the resizable. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `alsoResize` | `false` | 自动调整指定的元素以与可调整大小元素同步。'
- en: '| `animate` | `false` | Animate the resizable element to its new size. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `animate` | `false` | 将可调整大小元素动画到其新大小。'
- en: '| `animateDuration` | `slow` | Set the speed of the animation. Values can be
    integers, specifying the number of milliseconds, or one of the string values `slow`,
    `normal`, or `fast`. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `animateDuration` | `slow` | 设置动画的速度。值可以是整数，指定毫秒数，或者是字符串值 `slow`，`normal`
    或 `fast`。'
- en: '| `animateEasing` | `swing` | Add easing effects to the resize animation. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `animateEasing` | `swing` | 为调整大小动画添加缓动效果。'
- en: '| `aspectRatio` | `false` | Maintain the aspect ratio of the resize element.
    Accepts numerical custom aspect ratios in addition to Boolean values. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `aspectRatio` | `false` | 保持调整大小元素的纵横比。除了布尔值之外，还接受数字自定义纵横比。'
- en: '| `autoHide` | `false` | Hide the resize handles until the resizable is hovered
    over with the mouse pointer. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `autoHide` | `false` | 隐藏调整大小手柄，直到鼠标指针悬停在可调整大小元素上。'
- en: '| `cancel` | `'':input, option''` | Stop specified elements from being resizable.
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `cancel` | `'':input, option''` | 阻止指定元素可调整大小。'
- en: '| `containment` | `false` | Constrain the resizable within the boundary of
    the specified container element. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `containment` | `false` | 将可调整大小限制在指定容器元素的边界内。'
- en: '| `delay` | `0` | Set a delay in milliseconds from when the pointer is clicked
    on a resizable handle to when the resizing begins. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `delay` | `0` | 设置从单击可调整大小手柄到开始调整大小之间的延迟时间（以毫秒为单位）。'
- en: '| `disabled` | `false` | Disable the component at page load. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `disabled` | `false` | 在页面加载时禁用组件。'
- en: '| `distance` | `1` | Set the number of pixels the mouse pointer must move with
    the mouse button held down before the resizing begins. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `distance` | `1` | 设置鼠标指针在按住鼠标按钮的情况下必须移动的像素数，然后调整大小开始。'
- en: '| `ghost` | `false` | Show a semi-transparent helper element while the resizing
    is taking place. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `ghost` | `false` | 在调整大小时显示半透明的辅助元素。'
- en: '| `grid` | `false` | Snap the resize to imaginary grid lines while resizing
    is taking place. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `grid` | `false` | 在调整大小时将调整大小捕捉到虚拟网格线。'
- en: '| `handles` | `''e, se, s''` | Define which handles to use for resizing. Accepts
    a string containing any of the following values: `n`, `ne`, `e`, `se`, `s`, `sw`,
    `w`, `nw`, or all. The string could also be an object where the properties are
    any of the preceding values and the values are jQuery selectors matching the elements
    to use as handles. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `handles` | `''e, se, s''` | 定义用于调整大小的手柄。接受包含以下任意值的字符串：`n`，`ne`，`e`，`se`，`s`，`sw`，`w`，`nw`，或所有。该字符串也可以是一个对象，其属性是前述任何值，值是与用作手柄的元素匹配的
    jQuery 选择器。'
- en: '| `helper` | `false` | Add a class name to the helper element that is applied
    during resizing. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `helper` | `false` | 在调整大小期间应用于辅助元素的类名。'
- en: '| `maxHeight` | `null` | Set the maximum height the resizable may be changed
    to. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `maxHeight` | `null` | 设置可调整大小的最大高度。'
- en: '| `maxWidth` | `null` | Set the maximum width the resizable may be set to.
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `maxWidth` | `null` | 设置可调整大小的最大宽度。'
- en: '| `minHeight` | `null` | Set the minimum height the resizable may be changed
    to. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `minHeight` | `null` | 设置可调整大小的最小高度。'
- en: '| `minWidth` | `null` | Set the minimum width the resizable may be set to.
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `minWidth` | `null` | 设置可调整大小的最小宽度。'
- en: Configuring the resize handles
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置调整大小手柄
- en: 'Thanks to the `handles` configuration option, specifying which handles we would
    like to add to our target element is exceptionally easy. In `resizable1.html`,
    change the final `<script>` element so that it appears as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢`handles`配置选项，指定我们希望添加到目标元素的handles非常容易。在`resizable1.html`中，将最后的`<script>`元素更改为以下内容：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save this as `resizable2.html`. When you run the example in a browser, you'll
    see that although the component looks exactly as it did before, we can now use
    any edge or corner to resize the `<div>` element.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`resizable2.html`。当你在浏览器中运行示例时，你会发现尽管组件看起来和以前一样，但现在我们可以使用任何边缘或角来调整`<div>`元素的大小。
- en: Adding additional handle images
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加额外的handle图片
- en: One thing you'll notice straight away is that although the element is resizable
    along any axis, there's no visual cue to make this obvious; the component will
    automatically add the resize stripes to the bottom-right corner, but it's up to
    us to add the rest.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你会立即注意到的一件事是，尽管元素沿任何轴都是可调整大小的，但没有视觉提示来使这一点明显；该组件会自动将调整大小条添加到右下角，但我们需要自己添加其他三个角。
- en: There are several different ways to do this. Although the method doesn't add
    images to the other three corners, it does insert DOM elements with class names,
    so we can easily target these with CSS and provide our own images. This is what
    we'll do next.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种不同的方法可以做到这一点。虽然这种方法不会在其他三个角添加图片，但它会插入具有class名称的DOM元素，因此我们可以轻松地用CSS来定位它们并提供我们自己的图片。这就是我们接下来要做的。
- en: 'In a new page in your text editor, add the following style rules:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器中新建一个页面，并添加以下样式规则：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Save this file in the `css` folder as `resizeHandles.css`. We provide our own
    image for this example, which is a single image containing copies of the standard
    bottom-right image flipped and reversed (this can be found in the code download).
    We can then reference them by setting the background-position attribute in our
    CSS style rules. Use of a single image or sprite reduces the need to cache multiple
    images; all of the individual images we've used are actually segments from a single,
    larger file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存在`css`文件夹中，文件名为`resizeHandles.css`。我们提供了一个示例图片，其中包含了标准右下角图片的翻转和镜像拷贝（可在代码下载中找到）。然后，我们可以通过在CSS样式规则中设置background-position属性来引用它们。使用单个图片或精灵图可以减少缓存多个图片的需求；我们所使用的所有单独图片实际上都是来自一个更大的文件的片段。
- en: Tip
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Chris Coyier has written a useful article, explaining how to implement sprites,
    that can be found at [http://css-tricks.com/css-sprites/](http://css-tricks.com/css-sprites/).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Chris Coyier撰写了一篇有用的文章，解释了如何实现精灵图，可以在[http://css-tricks.com/css-sprites/](http://css-tricks.com/css-sprites/)找到。
- en: 'Our selectors target the class names that are automatically added to the handle
    elements by the control. Link to the new stylesheet in the `<head>` element of
    `resizable2.html` and resave it as `resizable3.html`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的选择器会目标自动添加到handle元素的class名称。在`resizable2.html`的`<head>`元素中链接到新样式表，并将其另存为`resizable3.html`：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The new stylesheet should give our element the following appearance:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 新样式表应使我们的元素呈现如下外观：
- en: '![Adding additional handle images](img/2209OS_12_02.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![添加额外的handle图片](img/2209OS_12_02.jpg)'
- en: 'Another configuration option related to resize handles and how they are displayed
    is `autoHide`. Let''s take a quick look at this option next. Change the configuration
    object in `resizable3.html` to the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 与调整大小handles和它们的显示方式相关的另一个配置选项是`autoHide`。让我们下面快速看一下这个选项。将`resizable3.html`中的配置对象更改为以下内容：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save this version as `resizable4.html`. We've added the `autoHide` option and
    set its value to `true` in this example. Configuring this option hides all of
    the resize handles until the mouse pointer moves onto the resizable element. This
    is great for a minimal intrusion of the additional DOM elements when there is
    pictorial content inside the resizable element.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将此版本保存为`resizable4.html`。在这个示例中，我们已添加了`autoHide`选项并将其值设置为`true`。配置此选项会隐藏所有的调整大小handles，直到鼠标指针移动到可调整大小的元素上。当可调整大小的元素中有图片内容时，这对于最小干扰额外的DOM元素是非常有益的。
- en: Defining size limits
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义尺寸限制
- en: 'Restricting the minimum or maximum sizes that the target element can be resized
    to is made exceptionally easy with four configurable options. They are `maxWidth`,
    `maxHeight`, `minWidth`, and `minHeight`. We will see in action in the next example.
    It''s better to have some content in the container for this example, so add some
    layout text in a `<p>` element within our resizable `<div>` in `resizable4.html`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过四个可配置选项，限制目标元素可以调整的最小或最大尺寸变得非常容易。它们分别是`maxWidth`、`maxHeight`、`minWidth`和`minHeight`。我们将在下一个示例中看到它们的作用。为了这个示例最好在容器中添加一些内容，所以在我们的可调整大小的`<div>`中的`<p>`元素中添加一些布局文本在`resizable4.html`中：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Change the configuration object that we used in `resizable4.html` to as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们在`resizable4.html`中使用的配置对象更改为如下所示：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save this as `resizable5.html`. This time, the configuration object uses the
    dimension-boundary options to specify the minimum and maximum height and width
    that the resizable may be adjusted to. These options take simple integers as their
    values.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存为`resizable5.html`。这次，配置对象使用了与尺寸边界有关的选项，以指定可调整大小元素的最小和最大高度和宽度。这些选项的值是简单的整数。
- en: As we can see when we run this example, the resizable now adheres to the sizes
    we have specified, whereas in previous examples, the resizable element's minimum
    size was the combined size of its resize handles, and it had no maximum size.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这个示例时，我们可以看到可调整大小的元素现在遵循我们指定的尺寸，而在以前的示例中，可调整大小元素的最小尺寸是其调整大小手柄的组合尺寸，而最大尺寸是没有限制的。
- en: 'So far, our resizable has been an empty `<div>` element and you may be wondering
    how the resizable handles minimum and maximum sizes when there is content within
    the target element. The restrictions are maintained, but we''ll need to add `overflow:
    hidden` to the CSS. Otherwise, the content may overflow the resizable if there
    is too much for the minimum size to handle.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '到目前为止，我们的可调整大小元素一直是一个空的`<div>`元素，你可能会想知道，当目标元素内有内容时，可调整大小如何处理最小和最大尺寸。约束条件是保持的，但我们需要在CSS中添加`overflow:
    hidden`。否则，如果内容太多，最小尺寸无法处理，内容可能会溢出可调整大小的区域。'
- en: 'Of course, we can also use `overflow: auto` as well to add a scroll bar when
    there is too much content, which can sometimes be the desired behavior.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '当然，当内容太多时，我们还可以使用`overflow: auto`来添加滚动条，有时这可能是期望的行为。'
- en: Resizing ghosts
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整大小的幽灵元素
- en: Ghost elements, which are semi-transparent helper elements, are very similar
    to the proxy element that we used when we looked at the draggables component in
    the previous chapter. A ghost element can be enabled with the configuration of
    just one option. Let's see how this is done.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 幽灵元素是半透明的辅助元素，非常类似于我们在上一章中看到的拖动组件时使用的代理元素。通过配置一个选项就可以启用幽灵元素。让我们看看如何实现这一点。
- en: 'Change the configuration object we used in `resizable5.html` to the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们在`resizable5.html`中使用的配置对象更改为以下内容：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Save this file as `resizable6.html`. All that is needed to enable a resize ghost
    is to set the `ghost` option to `true`. The effect of the resizable ghost is very
    subtle. It is basically a clone of the existing resizable element, but is only
    a quarter of the opacity. This is why we've left the layout text from the previous
    example within the resizable element.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存为`resizable6.html`。启用调整大小幽灵元素所需的全部内容就是将`ghost`选项设置为`true`。可调整大小的幽灵元素的效果非常微妙。它基本上是现有可调整大小元素的克隆，但是只有四分之一的不透明度。这就是为什么在可调整大小元素中留下了上一个示例中的布局文本的原因。
- en: 'We''re also linking to a new stylesheet in this example, which is exactly the
    same as `resize.css` with a background color specified:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们还链接到一个新的样式表，其与`resize.css`完全相同，只是指定了背景色：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Save this as `resizeGhosts.css` in the `css` folder. The next screenshot shows
    how the resizable ghost will appear while it is visible when being dragged:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存为`resizeGhosts.css`在`css`文件夹中。下一张截图显示了可调整大小的幽灵元素在被拖动时的可见外观：
- en: '![Resizing ghosts](img/2209OS_12_03.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![调整大小的幽灵元素](img/2209OS_12_03.jpg)'
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In some versions of Internet Explorer, ghost elements may cause issues when
    transparent PNGs are within the resizable. If you find this is the case, there
    is a useful article available at [http://www.pixelthemestudio.ca/news-and-updates/156-fixing-that-png-image-optimization-for-ie](http://www.pixelthemestudio.ca/news-and-updates/156-fixing-that-png-image-optimization-for-ie)
    that details how to fix these issues using TweakPNG.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些版本的Internet Explorer中，当透明PNG图像位于可调整大小元素中时，幽灵元素可能会导致问题。如果您发现情况是如此，那么可以在[http://www.pixelthemestudio.ca/news-and-updates/156-fixing-that-png-image-optimization-for-ie](http://www.pixelthemestudio.ca/news-and-updates/156-fixing-that-png-image-optimization-for-ie)上找到一篇有用的文章，详细介绍了如何使用TweakPNG解决这些问题。
- en: 'The ghost element is just a helper element that has been made semitransparent.
    If this is not suitable and further control over the appearance of the helper
    element is required; we can use the `helper` option to specify a class name to
    be added to the helper element, which we can then use to style it. Change the
    configuration object in `resizable6.html`, so that it appears as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ghost 元素只是一个已被制成半透明的辅助元素。如果这不合适，并且需要进一步控制助手元素的外观，则可以使用 `helper` 选项来指定要添加到助手元素的类名，然后我们可以使用该类名来为其设置样式。更改
    `resizable6.html` 中的配置对象，使其如下所示：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Save this revision as `resizable7.html`. We''ve simply specified the class
    name that we''d like to be added as the value of the `helper` option. We can target
    the new class name from a CSS file. Open `resize.css` and add the following code
    to it:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 将此修订保存为 `resizable7.html`。我们只是指定了我们希望添加为 `helper` 选项值的类名。我们可以从 CSS 文件中定位新的类名。打开
    `resize.css` 并将以下代码添加到其中：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Save the new stylesheet as `resizeHelper.css` and don''t forget to link it
    at the top of `resizable7.html`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将新样式表保存为 `resizeHelper.css`，并不要忘记在 `resizable7.html` 的顶部链接它：
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The only thing we do in this example is give the helper a simple background
    color, which in this case is yellow. This is how it looks when the new page is
    run and a resize is in action:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们唯一做的就是给助手添加了一个简单的背景颜色，这种情况下是黄色。当新页面运行并且调整大小动作正在进行时，它的外观如下所示：
- en: '![Resizing ghosts](img/2209OS_12_04.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![调整大小的虚像](img/2209OS_12_04.jpg)'
- en: The `ghost` and `helper` options don't have to be used together; we can use
    either one separately, but if we use the `helper` option without the `ghost` option,
    we do not get the semi-transparent content within the resize helper.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`ghost` 和 `helper` 选项不必一起使用；我们可以分别使用其中一个，但如果我们使用 `helper` 选项而不使用 `ghost` 选项，则无法获得调整大小助手内的半透明内容。'
- en: Containing the resize
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包含调整大小
- en: 'The resizable component makes it easy to ensure that a resized element is contained
    within its parent element. This is great if we have other content on the page
    that we don''t want moving around all over the place during a resize interaction.
    In `resizable7.html`, change the elements on the page so that they appear as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 可调整大小组件使得确保调整大小的元素被包含在其父元素中变得容易。如果我们在页面上有其他内容，我们不希望在调整大小交互期间随意移动，这将非常有用。在 `resizable7.html`
    中，更改页面上的元素，使其如下所示：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, change the `configuration` object to use the `containment` option:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将 `configuration` 对象更改为使用 `containment` 选项：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Save this as `resizable8.html`. On the page, we've added a container element
    for the resizable and have switched from using a `<div>` element to an image as
    the resizable element.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为 `resizable8.html`。在页面上，我们为可调整大小添加了一个容器元素，并已从使用 `<div>` 元素更改为使用图像作为可调整大小的元素。
- en: 'Once again, we need some slightly different CSS for this example. In a new
    file in your text editor, add the following code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，对于此示例，我们需要一些略有不同的 CSS。在文本编辑器中的新文件中，添加以下代码：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Save this as `resizeContainer.css` in the `css` folder and change the `<link>`
    in the `<head>` element of the page from `resizeHelper.css` to the new stylesheet:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为 `resizeContainer.css` 在 `css` 文件夹中，并将页面的 `<head>` 元素中的 `<link>` 从 `resizeHelper.css`
    更改为新样式表：
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `containment` option allows us to specify a container for the resizable,
    which will limit how large the resizable can be made, forcing it to stay within
    its boundaries.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`containment` 选项允许我们指定可调整大小的容器，这将限制可调整大小的大小，强制它保持在其边界内。'
- en: We specify a jQuery selector as the value of this option. When we view the page,
    we should see that the image cannot be resized to larger than its container.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一个 jQuery 选择器指定为此选项的值。当我们查看页面时，应该看到图像无法调整大小以大于其容器的尺寸。
- en: Handling aspect ratio
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理纵横比
- en: 'In addition to maintaining the aspect ratio of the resizable element, we can
    also define it manually. Let''s see what control this interaction gives us over
    the resize. Change the configuration object used in `resizable8.html` to the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 除了保持可调整大小元素的纵横比之外，我们还可以手动定义它。让我们看看这种交互给我们调整大小带来了什么控制。将 `resizable8.html` 中使用的配置对象更改为以下内容：
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Save this file as `resizable9.html`. Setting the `aspectRatio` option to `true`
    ensures that our image will maintain its original aspect ratio. So in this example,
    the image will always be a perfect square.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为 `resizable9.html`。将 `aspectRatio` 选项设置为 `true` 可确保我们的图像保持其原始纵横比。因此，在此示例中，图像将始终是一个完美的正方形。
- en: 'For a greater degree of control, we can instead specify the actual aspect ratio
    that the resizable should maintain:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地控制，我们可以指定可调整大小应保持的实际宽高比：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: By specifying the floating-point value of `0.5`, we're saying that when the
    image is resized, the x-axis of the image should be exactly half of the y-axis.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定`0.5`的浮点值，我们要说的是当图像调整大小时，图像的x轴应该正好是y轴的一半。
- en: Note
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Care should be taken when deviating from the aspect ratio of any images; it
    is wise to try to keep the element and container sizes in proportion, otherwise
    you may find an object doesn't resize to the full extent of its container, as
    happened in our example. If you change `aspectRatio` to `1`, you will find that
    it resizes to the full size of our container correctly.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当偏离任何图像的宽高比时，应谨慎； 最好尝试保持元素和容器大小成比例，否则您可能会发现对象未调整到其容器的全部大小，就像我们的示例中发生的那样。 如果将`aspectRatio`更改为`1`，则会发现它会正确地调整为容器的全尺寸。
- en: Resizable animations
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可调整大小的动画
- en: 'The resizable API exposes three configuration options related to animations:
    `animate`, `animateDuration`, and `animateEasing`. By default, animations are
    switched off in resizable implementations. However, we can easily enable them
    to see how they enhance this component.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 可调整大小的API公开了与动画相关的三个配置选项：`animate`，`animateDuration`和`animateEasing`。 默认情况下，在可调整大小的实现中关闭了动画。
    但是，我们可以轻松地启用它们以查看它们如何增强此组件。
- en: 'In this example, change the markup from the previous couple of examples so
    that the resizable element goes back to a plain `<div>`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，将标记从前面的几个示例更改为可调整大小的元素返回到普通的`<div>`：
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We should also switch back to the `resizeGhosts.css` stylesheet:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该切换回`resizeGhosts.css`样式表：
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, change the configuration object to use the following options:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将配置对象更改为使用以下选项：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Save this as `resizable10.html`. The configuration object we use in this example
    starts with the `ghost` option.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`resizable10.html`。 我们在此示例中使用的配置对象以`ghost`选项开头。
- en: Note
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While using animations, the resizable element is not resized until after the
    interaction has ended, so it's useful to show the ghost as a visual cue that the
    element will be resized.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用动画时，可调整大小的元素在交互结束后才被调整大小，因此显示幽灵作为视觉提示是有用的，以表示元素将被调整大小。
- en: All we need to do to enable animation is set the `animate` option to `true`.
    That's it; no further configuration is required. Another option we can change
    is the speed of the animation, which we have done in this example by setting the
    `animateDuration` option. This accepts any of the standard values that can be
    used with jQuery's `animate()` method.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用动画，我们只需将`animate`选项设置为`true`。 就是这样； 不需要进一步配置。 我们可以更改的另一个选项是动画的速度，在此示例中，我们通过设置`animateDuration`选项来完成。
    这可以接受与jQuery的`animate()`方法一起使用的任何标准值。
- en: When we run this page in a browser, we should find that the `resize` div will
    smoothly animate to its new size, once we let go of the mouse button.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在浏览器中运行此页面时，我们应该发现`resize` div将平滑地动画到其新大小，一旦我们松开鼠标按钮。
- en: Simultaneous resizing
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 同时调整大小
- en: We can easily make several elements on the same page individually resizable
    by passing references to them to the resizable widget method. But, in addition
    to doing this, we can make use of the `alsoResize` property to specify additional
    elements that are to be resized together as a group, whenever the actual resizable
    element is resized. Let's see how.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将对它们的引用传递给可调整大小的小部件方法，轻松地使同一页上的几个元素单独可调整大小。 但是，除此之外，我们还可以使用`alsoResize`属性来指定额外的要作为组一起调整大小的元素，每当实际可调整大小的元素被调整大小时。
    让我们看看如何做到这一点。
- en: 'First, we''ll need to reference to a new stylesheet once again:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要再次引用新的样式表：
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we''ll need to change the elements in `<body>` of the page as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将页面的`<body>`中的元素更改为如下所示：
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then change the configuration object to the following:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将配置对象更改为以下内容：
- en: '[PRE24]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Save this file as `resizable11.html`. We provide a selector as the value of
    the `alsoResize` option, in order to target the second `<div>` element. The secondary
    element will automatically pick up the resizable attributes of the actual resizable.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`resizable11.html`。 我们以第二个`<div>`元素的值作为`alsoResize`选项的值，以便目标第二个`<div>`元素。
    次要元素将自动获取实际可调整大小的可调整大小属性。
- en: So, if we limit the resizable to having just an `e` handle, the secondary element
    will also only resize in this direction.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们将可调整大小限制为仅具有`e`手柄，则次要元素也将仅在此方向上调整大小。
- en: 'The new stylesheet referenced in this example should contain the following
    code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例中引用的新样式表应包含以下代码：
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Save this file as `resizeSimultaneous.css` in the `css` folder. When we run
    the file, we should see that the second `<div>` element is resized at the same
    time as the first:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件另存为`css`文件夹中的`resizeSimultaneous.css`。运行文件时，我们应该看到第二个`<div>`元素与第一个同时调整大小：
- en: '![Simultaneous resizing](img/2209OS_12_05.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![同时调整大小](img/2209OS_12_05.jpg)'
- en: Preventing unwanted resizes
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止不必要的调整大小
- en: There may be times when we'd like to make an element resizable, but it also
    has other functionality, perhaps it listens for click events too. In this situation,
    it may be desirable to prevent the resize unless it is definitely required, enabling
    us to easily differentiate between clicks and true drags. We can use two options
    to achieve this.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能希望使一个元素可以调整大小，但它还具有其他功能，或许它也监听点击事件。在这种情况下，除非绝对需要调整大小，否则最好防止调整大小，这样我们就可以轻松区分点击和真正的拖动。我们可以使用两个选项来实现这一点。
- en: 'First, in `resizable10.html`, revert to the original stylesheet `resize.css`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`resizable10.html`中，恢复原始样式表`resize.css`：
- en: '[PRE26]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We can also return to the simple empty resizable `<div>`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以返回到简单的空可调整大小的`<div>`：
- en: '[PRE27]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then change the configuration object to the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将配置对象更改为以下内容：
- en: '[PRE28]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Save this version as `resizable12.html`. The `delay` option accepts an integer
    that represents the number of milliseconds that need to pass with the mouse button
    held down after clicking on a resize handle before the resize will begin.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 将此版本另存为`resizable12.html`。`delay`选项接受一个整数，代表在点击调整大小手柄后保持鼠标按下状态的毫秒数。
- en: We've used `1000` as the value in this example that is equal to one second.
    Try it out and you'll see that if you click on a resize handle and release the
    mouse button too soon, the resize won't take place.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了`1000`作为值，相当于一秒。试一试，您会发现，如果您在点击调整大小手柄后太快放开鼠标按钮，调整大小就不会发生。
- en: Along with delaying the resize, we could also use the `distance` option instead
    to specify that the mouse pointer must move a certain number of pixels, with the
    button held down after clicking on a resize handle, before the resize occurs.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 除了延迟调整大小，我们还可以使用`distance`选项来指定鼠标指针必须在单击调整大小手柄后保持按下的状态下移动一定数量的像素，然后调整大小才会发生。
- en: 'Change the configuration object in `resizable12.html`, so that it appears as
    follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 更改`resizable12.html`中的配置对象，使其如下所示：
- en: '[PRE29]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Save this as `resizable13.html`. Now when the page runs, instead of having to
    wait with the mouse button held down, the mouse pointer will need to travel `30`
    pixels with the mouse button held down, before the resize occurs.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`resizable13.html`。现在当页面运行时，鼠标指针需要在鼠标按钮按下的状态下移动`30`个像素，然后调整大小才会发生。
- en: Both of these options present certain usability issues, especially when set
    to `high` as in these examples. They both make it harder to resize an element
    along more than one axis at a time. They should be used sparingly, with as low
    values as possible.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个选项都会带来一定的可用性问题，特别是当设置为高值时，就像这些例子一样。它们都会使元素沿多个轴方向同时调整大小更加困难。应尽可能少地使用它们，并尽可能使用低值。
- en: Defining resizable events
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义可调整大小事件
- en: Like other components of the library, resizable defines a selection of custom
    events, and allows us to easily execute functions when these events occur. This
    makes the most of interactions between your visitors and the elements on your
    pages.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 与库的其他组件一样，可调整大小定义了一系列自定义事件，并允许我们在这些事件发生时轻松执行功能。这充分利用了您的访问者和页面元素之间的交互。
- en: 'Resizable defines the following callback options:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 可调整大小定义了以下回调选项：
- en: '| Option | Triggered when… |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 触发时… |'
- en: '| --- | --- |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `create` | The resizable is initialized |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `create` | 可调整大小已初始化 |'
- en: '| `resize` | The resizable is in the process of being resized |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `resize` | 可调整大小正在进行中 |'
- en: '| `start` | A resize interaction begins |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `start` | 调整大小交互开始 |'
- en: '| `stop` | A resize interaction ends |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `stop` | 调整大小交互结束 |'
- en: Hooking into these custom methods is just as easy for resizables as it has been
    for the other components of the library we have looked at.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可调整大小的自定义方法的钩子就像我们之前看过的库的其他组件一样容易。
- en: 'Let''s explore a basic example to highlight this fact the following screenshot
    shows how our page will look before `<div>` fades away:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来探索一个基本的例子来突出这一事实，以下屏幕截图显示了在`<div>`消失之前我们的页面将如何展示：
- en: '![Defining resizable events](img/2209OS_12_06.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![定义可调整大小事件](img/2209OS_12_06.jpg)'
- en: 'In `resizable13.html`, change the second `<link>` to point to a new stylesheet
    as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在`resizable13.html`中，将第二个`<link>`更改为指向一个新样式表，如下所示：
- en: '[PRE30]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then change the final `<script>` element so that it appears as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将最终的`<script>`元素更改为如下所示：
- en: '[PRE31]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Save this as `resizable14.html`. In `resize.css`, add the following selector
    and rules:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`resizable14.html`。在`resize.css`中，添加以下选择器和规则：
- en: '[PRE32]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Save this as `resizeStop.css` in the `css` folder.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`resizeStop.css`在`css`文件夹中。
- en: We define a function called `reportNewSize`; this function (along with all of
    the other event handlers) is automatically passed two objects. The first is the
    event object and the second is an object containing useful information about the
    resizable.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个名为`reportNewSize`的函数；这个函数（以及所有其他事件处理程序）会自动传递两个对象。第一个是事件对象，第二个是一个包含有关可调整大小的有用信息的对象。
- en: We can use the `size` property of the second object to find out what the `width`
    and `height` the resizable has been changed to. These values are stored as variables
    within the function. We use the JavaScript `Math.round()` function to make sure
    that we end up with an integer.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用第二个对象的`size`属性来查找可调整大小已更改为的`width`和`height`。这些值被存储为函数内的变量。我们使用JavaScript的`Math.round()`函数确保我们得到一个整数。
- en: We then create a new `<div>` element and give it a class name for styling. We
    also set the text of the new element to display the `width` and `height` variables
    along with a brief message. We also set the width of the new element to match
    the resizable. Once created, we append the message to the page and then fade it
    in with jQuery's `fadeIn()` method. We then use the `delay()` method to pause
    for `2` seconds before fading the message out again.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建一个新的`<div>`元素并为其设置一个样式类名。我们还设置新元素的文本以显示`width`和`height`变量以及简短消息。我们还将新元素的宽度设置为与可调整大小相匹配。创建后，我们将消息附加到页面，然后使用jQuery的`fadeIn()`方法淡入它。然后，我们使用`delay()`方法暂停`2`秒，然后再次淡出消息。
- en: Looking at the resizable methods
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看可调整大小的方法
- en: This component comes with the four basic methods found with all of the interaction
    components of the library, namely the `destroy`, `disable`, `enable`, and `option`
    methods. Unlike most of the other components, the resizable component has no custom
    methods unique to it. For clarification on these basic API methods, see the API
    introduction section in [Chapter 1](ch01.html "Chapter 1. Introducing jQuery UI"),
    *Introducing jQuery UI*.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件与库中所有交互组件具有的四种基本方法一起提供，即`destroy`、`disable`、`enable`和`option`方法。与大多数其他组件不同，可调整大小组件没有其独有的自定义方法。有关这些基本API方法的澄清，请参阅[第1章](ch01.html
    "第1章。介绍jQuery UI")*介绍jQuery UI*中的API介绍部分。
- en: Creating resizable tabs
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建可调整大小的标签页
- en: 'In our final resizable example, let''s look at combining this component with
    one of the widgets that we looked at earlier. This will help us see how compatible
    it is with the rest of the library. We''ll be working with the tabs component
    in the following example. The following screenshot shows the page we will end
    up with:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们最终的可调整大小示例中，让我们看看如何将此组件与我们之前查看的小部件之一结合起来。这将帮助我们了解它与库中其余部分的兼容性。我们将在以下示例中使用标签页组件。以下屏幕截图显示了我们最终会得到的页面：
- en: '![Creating resizable tabs](img/2209OS_12_07.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![创建可调整大小的标签页](img/2209OS_12_07.jpg)'
- en: 'In your text editor, add the following `CSS` style to a new file, and save
    it as `resizeTabs.css`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的文本编辑器中，将以下`CSS`样式添加到一个新文件中，并将其保存为`resizeTabs.css`：
- en: '[PRE33]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next, add the following code to a new file:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将以下代码添加到一个新文件中：
- en: '[PRE34]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Save this as `resizable15.html`. Making the tabs widget resizable is extremely
    easy and only requires calling the resizable method on the tab's underlying `<ul>`.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`resizable15.html`。使标签页小部件可调整大小非常容易，只需在标签页的底层`<ul>`上调用可调整大小方法即可。
- en: We're using a single configuration object in this example. The tabs component
    can be initialized without the need for any configuration. Apart from setting
    the `autoHide` option for the resizable in our configuration object to `true`,
    we also define `minWidth` and `minHeight` values for usability purposes.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们使用了单个配置对象。标签页组件可以初始化而无需任何配置。除了在我们的配置对象中将可调整大小的`autoHide`选项设置为`true`外，我们还为了可用性目的定义了`minWidth`和`minHeight`值。
- en: Summary
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the resizable. This is a component that allows us
    to easily resize any on-screen element. It dynamically adds resize handles to
    the specified sides of the target element and handles all of the tricky DHTML
    resizing for us, neatly encapsulating the behavior into a compact, easy-to-use
    class.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了可调整大小的组件。这是一个组件，可以让我们轻松调整屏幕上的任何元素。它会动态地向目标元素的指定边添加调整大小手柄，并为我们处理所有棘手的DHTML调整，将行为整洁地封装到一个简洁易用的类中。
- en: We then looked at some of the configurable options that we can use with the
    widget, such as how to specify which handles to add to the resizable, and how
    the minimum and maximum sizes of the element can be limited.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们看了一些可用于小部件的可配置选项，比如如何指定要添加到可调整大小的手柄，以及如何限制元素的最小和最大尺寸。
- en: We briefly looked at how to maintain an image's aspect ratio, or how to work
    with custom ratios, while it is being resized. We also explored how to use ghosts,
    helpers, and animations to improve the usability and appearance of the resizable
    component.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要讨论了如何保持图像的宽高比，或者在调整大小时如何使用自定义比例。我们还探讨了如何使用幻影、助手和动画来改善可调整大小组件的可用性和外观。
- en: We also looked at the event model exposed by the component's API and how we
    can react to elements being resized in an easy and effective way. Our final example
    explored resizable's compatibility with other components of the library. In the
    next chapter, we'll look at how you can select, filter, and sort objects with
    the Selectable and Sortable widgets.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看了组件API公开的事件模型以及我们如何以简单有效的方式对元素的调整作出反应。我们的最终示例探讨了可调整大小组件与库中其他组件的兼容性。在下一章中，我们将学习如何使用可选择和可排序的小部件选择、过滤和排序对象。
