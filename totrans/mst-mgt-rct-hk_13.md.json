["```js\nconst NameContext = createContext([\n  { firstName: 'react', lastName: 'hooks' },\n  () => {},\n]);\n```", "```js\nconst NameProvider = ({ children }) => (\n  <NameContext.Provider\n    value={\n      useState({ firstName: 'react', lastName: 'hooks' })\n    }\n  >\n    {children}\n  </NameContext.Provider>\n};\n```", "```js\nconst useFirstName = () => {\n  const [{ firstName }] = useContext(NameContext);\n  return firstName;\n};\n```", "```js\nconst useFirstName = () => {\n  const [{ firstName }] = useTracked();\n  return firstName;\n};\n```", "```js\nconst useValue = () =>\n  useState({ count: 0, text: \"hello\" });\n```", "```js\nconst StateContext = createContext<\n  ReturnType<typeof useValue> | null\n>(null);\n```", "```js\nconst Provider = ({ children }: { children: ReactNode }) => (\n  <StateContext.Provider value={useValue()}>\n    {children}\n  </StateContext.Provider>\n);\n```", "```js\nconst useStateContext = () => {\n  const contextValue = useContext(StateContext);\n  if (contextValue === null) {\n    throw new Error(\"Please use Provider\");\n  }\n  return contextValue;\n};\n```", "```js\nconst Counter = () => {\n  const [state, setState] = useStateContext();\n  const inc = () => {\n    setState((prev) => ({\n      ...prev,\n      count: prev.count + 1,\n    }));\n  };\n  return (\n    <div>\n      count: {state.count}\n      <button onClick={inc}>+1</button>\n    </div>\n  );\n};\n```", "```js\nconst TextBox = () => {\n  const [state, setState] = useStateContext();\n  const setText = (text: string) => {\n    setState((prev) => ({ ...prev, text }));\n  };\n  return (\n    <div>\n      <input\n        value={state.text}\n        onChange={(e) => setText(e.target.value)}\n      />\n    </div>\n  );\n};\n```", "```js\nconst App = () => (\n  <Provider>\n    <div>\n      <Counter />\n      <Counter />\n      <TextBox />\n      <TextBox />\n    </div>\n  </Provider>\n);\n```", "```js\nimport { createContainer } from \"react-tracked\";\n```", "```js\nconst { Provider, useTracked } = \n  createContainer(useValue);\n```", "```js\nconst Counter = () => {\n  const [state, setState] = useTracked();\n  const inc = () => {\n    setState(\n      (prev) => ({ ...prev, count: prev.count + 1 })\n    );\n  };\n  return (\n    <div>\n      count: {state.count}\n      <button onClick={inc}>+1</button>\n    </div>\n  );\n};\n```", "```js\nconst TextBox = () => {\n  const [state, setState] = useTracked();\n  const setText = (text: string) => {\n    setState((prev) => ({ ...prev, text }));\n  };\n  return (\n    <div>\n      <input\n        value={state.text}\n        onChange={(e) => setText(e.target.value)}\n      />\n    </div>\n  );\n};\n```", "```js\nconst App = () => (\n  <Provider>\n    <div>\n      <Counter />\n      <Counter />\n      <TextBox />\n      <TextBox />\n    </div>\n  </Provider>\n);\n```", "```js\nconst useValue = () => {\n  type State = { count: number; text: string };\n  type Action =\n    | { type: \"INC\" }\n    | { type: \"SET_TEXT\"; text: string };\n  const [state, dispatch] = useReducer(\n    (state: State, action: Action) => {\n      if (action.type === \"INC\") {\n        return { ...state, count: state.count + 1 };\n      }\n      if (action.type === \"SET_TEXT\") {\n        return { ...state, text: action.text };\n      }\n      throw new Error(\"unknown action type\");\n    },\n    { count: 0, text: \"hello\" }\n  );\n  useEffect(() => {\n    console.log(\"latest state\", state);\n  }, [state]);\n  return [state, dispatch] as const;\n};\n```", "```js\nconst { Provider, useTracked } = createContainer(useValue);\n```", "```js\nconst Counter = () => {\n  const [state, dispatch] = useTracked();\n  const inc = () => dispatch({ type: \"INC\" });\n  return (\n    <div>\n      count: {state.count}\n      <button onClick={inc}>+1</button>\n    </div>\n  );\n};\n```", "```js\nconst TextBox = () => {\n  const [state, dispatch] = useTracked();\n  const setText = (text: string) => {\n    dispatch({ type: \"SET_TEXT\", text });\n  };\n  return (\n    <div>\n      <input\n        value={state.text}\n        onChange={(e) => setText(e.target.value)}\n      />\n    </div>\n  );\n};\n```", "```js\nconst App = () => (\n  <Provider>\n    <div>\n      <Counter />\n      <Counter />\n      <TextBox />\n      <TextBox />\n    </div>\n  </Provider>\n);\n```", "```js\nconst useTrackedState = createTrackedSelector(useSelector);\n```", "```js\nimport { createStore } from \"redux\";\nimport {\n  Provider,\n  useDispatch,\n  useSelector,\n} from \"react-redux\";\nimport { createTrackedSelector } from \"react-tracked\";\n```", "```js\ntype State = { count: number; text: string };\ntype Action =\n  | { type: \"INC\" }\n  | { type: \"SET_TEXT\"; text: string };\nconst initialState: State = { count: 0, text: \"hello\" };\nconst reducer = (state = initialState, action: Action) => {\n  if (action.type === \"INC\") {\n    return { ...state, count: state.count + 1 };\n  }\n  if (action.type === \"SET_TEXT\") {\n    return { ...state, text: action.text };\n  }\n  return state;\n};\nconst store = createStore(reducer);\n```", "```js\nconst useTrackedState = \n  createTrackedSelector<State>(useSelector);\n```", "```js\nconst Counter = () => {\n  const dispatch = useDispatch();\n  const { count } = useTrackedState();\n  const inc = () => dispatch({ type: \"INC\" });\n  return (\n    <div>\n      count: {count} <button onClick={inc}>+1</button>\n    </div>\n  );\n};\n```", "```js\n  const count = useSelector((state) => state.count);\n```", "```js\nconst TextBox = () => {\n  const dispatch = useDispatch();\n  const state = useTrackedState();\n  const setText = (text: string) => {\n    dispatch({ type: \"SET_TEXT\", text });\n  };\n  return (\n    <div>\n      <input\n        value={state.text}\n        onChange={(e) => setText(e.target.value)}\n      />\n    </div>\n  );\n};\n```", "```js\nconst TextBox = ({ showCount }: { showCount: boolean }) => {\n  const dispatch = useDispatch();\n  const state = useTrackedState();\n  const setText = (text: string) => {\n    dispatch({ type: \"SET_TEXT\", text });\n  };\n  return (\n    <div>\n      <input\n        value={state.text}\n        onChange={(e) => setText(e.target.value)}\n      />\n      {showCount && <span>{state.count}</span>}\n    </div>\n  );\n};\n```", "```js\nconst App = () => (\n  <Provider store={store}>\n    <div>\n      <Counter />\n      <Counter />\n      <TextBox />\n      <TextBox />\n    </div>\n  </Provider>\n);\n```"]