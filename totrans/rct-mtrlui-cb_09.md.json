["```js\nimport React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nconst MySnackbarContent = () => <Snackbar open={true} message=\"Test\" />;\nexport default MySnackbarContent;\n```", "```js\nimport React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nconst MySnackbarContent () => (\n  <Snackbar\n    open={true}\n    message=\"Test\"\n    ContentProps={{ variant: 'h6' }}\n  />\n);\n\nexport default MySnackbarContent;\n```", "```js\nimport React, { Fragment, useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nexport default function ControllingVisibilityWithState() {\n  const [open, setOpen] = useState(false);\n\n  const showSnackbar = () => {\n    setOpen(true);\n  };\n\n  return (\n    <Fragment>\n      <Button variant=\"contained\" onClick={showSnackbar}>\n        Show Snackbar\n      </Button>\n      <Snackbar open={open} message=\"Visible Snackbar!\" />\n    </Fragment>\n  );\n}\n```", "```js\nimport React, { Fragment, useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nexport default function ControllingVisibilityWithState() {\n  const [open, setOpen] = useState(false);\n\n  const showSnackbar = () => {\n    setOpen(true);\n  };\n  const hideSnackbar = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Fragment>\n      <Button variant=\"contained\" onClick={showSnackbar}>\n        Show Snackbar\n      </Button>\n      <Snackbar\n        open={open}\n        onClose={hideSnackbar}\n        autoHideDuration={5000}\n        message=\"Visible Snackbar!\"\n      />\n    </Fragment>\n  );\n}\n```", "```js\nimport React, { Fragment, useState } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Slide from '@material-ui/core/Slide';\nimport Grow from '@material-ui/core/Grow';\nimport Fade from '@material-ui/core/Fade';\n\nconst MySnackbar = ({ transition, direction, ...rest }) => (\n  <Snackbar\n    TransitionComponent={\n      { slide: Slide, grow: Grow, fade: Fade }[transition]\n    }\n    TransitionProps={{ direction }}\n    {...rest}\n  />\n);\n\nexport default function SnackbarTransitions() {\n  const [first, setFirst] = useState(false);\n  const [second, setSecond] = useState(false);\n  const [third, setThird] = useState(false);\n  const [fourth, setFourth] = useState(false);\n\n  return (\n    <Fragment>\n      <Grid container spacing={8}>\n        <Grid item>\n          <Button variant=\"contained\" onClick={() => setFirst(true)}>\n            Slide Down\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" onClick={() => setSecond(true)}>\n            Slide Up\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" onClick={() => setThird(true)}>\n            Grow\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" onClick={() => setFourth(true)}>\n            Fade\n          </Button>\n        </Grid>\n      </Grid>\n      <MySnackbar\n        open={first}\n        onClose={() => setFirst(false)}\n        autoHideDuration={5000}\n        message=\"Slide Down\"\n        transition=\"slide\"\n        direction=\"down\"\n      />\n      <MySnackbar\n        open={second}\n        onClose={() => setSecond(false)}\n        autoHideDuration={5000}\n        message=\"Slide Up\"\n        transition=\"slide\"\n        direction=\"up\"\n      />\n      <MySnackbar\n        open={third}\n        onClose={() => setThird(false)}\n        autoHideDuration={5000}\n        message=\"Grow\"\n        transition=\"grow\"\n      />\n      <MySnackbar\n        open={fourth}\n        onClose={() => setFourth(false)}\n        autoHideDuration={5000}\n        message=\"Fade\"\n        transition=\"fade\"\n      />\n    </Fragment>\n  );\n}\n```", "```js\nconst MySnackbar = ({ transition, direction, ...rest }) => (\n  <Snackbar\n    TransitionComponent={\n      { slide: Slide, grow: Grow, fade: Fade }[transition]\n    }\n    TransitionProps={{ direction }}\n    {...rest}\n  />\n);\n```", "```js\nconst [first, setFirst] = useState(false);\nconst [second, setSecond] = useState(false);\nconst [third, setThird] = useState(false);\nconst [fourth, setFourth] = useState(false);\n```", "```js\n<MySnackbar\n  open={first}\n  onClose={() => setFirst(false)}\n  autoHideDuration={5000}\n  message=\"Slide Down\"\n  transition=\"slide\"\n  direction=\"down\"\n/>\n<MySnackbar\n  open={second}\n  onClose={() => setSecond(false)}\n  autoHideDuration={5000}\n  message=\"Slide Up\"\n  transition=\"slide\"\n  direction=\"up\"\n/>\n```", "```js\nimport React, { Fragment, useState } from 'react';\n\nimport { makeStyles } from '@material-ui/styles';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(3)\n  }\n}));\n\nexport default function PositioningSnackbars() {\n  const classes = useStyles();\n  const [vertical, setVertical] = useState('bottom');\n  const [horizontal, setHorizontal] = useState('left');\n\n  const onVerticalChange = event => {\n    setVertical(event.target.value);\n  };\n\n  const onHorizontalChange = event => {\n    setHorizontal(event.target.value);\n  };\n\n  return (\n    <Fragment>\n      <FormControl\n        component=\"fieldset\"\n        className={classes.formControl}\n      >\n        <FormLabel component=\"legend\">Vertical</FormLabel>\n        <RadioGroup\n          name=\"vertical\"\n          className={classes.group}\n          value={vertical}\n          onChange={onVerticalChange}\n        >\n          <FormControlLabel\n            value=\"top\"\n            control={<Radio />}\n            label=\"Top\"\n          />\n          <FormControlLabel\n            value=\"bottom\"\n            control={<Radio />}\n            label=\"Bottom\"\n          />\n        </RadioGroup>\n      </FormControl>\n      <FormControl\n        component=\"fieldset\"\n        className={classes.formControl}\n      >\n        <FormLabel component=\"legend\">Horizontal</FormLabel>\n        <RadioGroup\n          name=\"horizontal\"\n          className={classes.group}\n          value={horizontal}\n          onChange={onHorizontalChange}\n        >\n          <FormControlLabel\n            value=\"left\"\n            control={<Radio />}\n            label=\"Left\"\n          />\n          <FormControlLabel\n            value=\"center\"\n            control={<Radio />}\n            label=\"Center\"\n          />\n          <FormControlLabel\n            value=\"right\"\n            control={<Radio />}\n            label=\"Right\"\n          />\n        </RadioGroup>\n      </FormControl>\n      <Snackbar\n        anchorOrigin={{\n          vertical,\n          horizontal\n        }}\n        open={true}\n        message=\"Positioned Snackbar\"\n      />\n    </Fragment>\n  );\n}\n```", "```js\n<Snackbar\n  anchorOrigin={{\n    vertical,\n    horizontal\n  }}\n  open={true}\n  message=\"Positioned Snackbar\"\n/>\n```", "```js\n<Snackbar\n  anchorOrigin={{\n    vertical: 'top'\n    horizontal: 'right'\n  }}\n  open={true}\n  message=\"Positioned Snackbar\"\n/>\n```", "```js\nconst MySnackbar = props => (\n  <Snackbar\n    anchorOrigin={{\n      vertical: 'top',\n      horizontal: 'right'\n    }}\n    {...props}\n  />\n);\n```", "```js\nimport React, { Fragment, Component } from 'react';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Button from '@material-ui/core/Button';\n\nconst styles = theme => ({\n  error: {\n    backgroundColor: theme.palette.error.main,\n    color: theme.palette.error.contrastText\n  }\n});\n\nconst ErrorBoundary = withStyles(styles)(\n  class extends Component {\n    state = { error: null };\n\n    onClose = () => {\n      this.setState({ error: null });\n    };\n\n    componentDidCatch(error) {\n      this.setState({ error });\n    }\n\n    render() {\n      const { classes } = this.props;\n\n      return (\n        <Fragment>\n          {this.state.error === null && this.props.children}\n          <Snackbar\n            open={Boolean(this.state.error)}\n            message={\n              this.state.error !== null && this.state.error.toString()\n            }\n            ContentProps={{ classes: { root: classes.error } }}\n          />\n        </Fragment>\n      );\n    }\n  }\n);\n\nconst MyButton = () => {\n  throw new Error('Random error');\n};\n\nexport default () => (\n  <ErrorBoundary>\n    <MyButton />\n  </ErrorBoundary>\n);\n```", "```js\ncomponentDidCatch(error) {\n  this.setState({ error });\n}\n```", "```js\nrender() {\n  const { classes } = this.props;\n\n  return (\n    <Fragment>\n      {this.state.error === null && this.props.children}\n      <Snackbar\n        open={Boolean(this.state.error)}\n        message={\n          this.state.error !== null && this.state.error.toString()\n        }\n        ContentProps={{ classes: { root: classes.error } }}\n      />\n    </Fragment>\n  );\n}\n```", "```js\nconst styles = theme => ({\n  error: {\n    backgroundColor: theme.palette.error.main,\n    color: theme.palette.error.contrastText\n  }\n});\n```", "```js\nconst MyButton = ({ label, throwError }) => {\n  if (throwError) {\n    throw new Error('Random error');\n  }\n  return <Button>{label}</Button>;\n};\n```", "```js\nexport default () => (\n  <Fragment>\n    <ErrorBoundary>\n      <MyButton label=\"First Button\" />\n    </ErrorBoundary>\n    <ErrorBoundary>\n      <MyButton label=\"Second Button\" throwError />\n    </ErrorBoundary>\n  </Fragment>\n);\n```", "```js\nimport React, { Fragment, useState } from 'react';\nimport { Route, Link } from 'react-router-dom';\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\n\nimport CloseIcon from '@material-ui/icons/Close';\n\nexport default function Snackbars() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Fragment>\n      <Button onClick={() => setOpen(true)}>Do Something</Button>\n      <Snackbar\n        open={open}\n        onClose={() => setOpen(false)}\n        message=\"All done doing the thing\"\n        action={[\n          <IconButton color=\"inherit\" onClick={() => setOpen(false)}>\n            <CloseIcon />\n          </IconButton>\n        ]}\n      />\n    </Fragment>\n  );\n}\n```", "```js\n<Fragment>\n  <Route\n    exact\n    path=\"/\"\n    render={() => (\n      <Button onClick={() => setOpen(true)}>create thing</Button>\n    )}\n  />\n  <Route\n    exact\n    path=\"/thing\"\n    render={() => <Typography>The Thing</Typography>}\n  />\n  <Snackbar\n    open={open}\n    onClose={() => setOpen(false)}\n    message=\"Finished creating thing\"\n    action={[\n      <Button\n        color=\"secondary\"\n        component={Link}\n        to=\"/thing\"\n        onClick={() => setOpen(false)}\n      >\n        The Thing\n      </Button>,\n      <IconButton color=\"inherit\" onClick={() => setOpen(false)}>\n        <CloseIcon />\n      </IconButton>\n    ]}\n  />\n</Fragment>\n```", "```js\nimport React, { Fragment, useState } from 'react';\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst withMessage = Wrapped =>\n  function WithMessage(props) {\n    const [queue, setQueue] = useState([]);\n    const [open, setOpen] = useState(false);\n    const [message, setMessage] = useState('');\n\n    const sendMessage = msg => {\n      const newQueue = [...queue, msg];\n      if (newQueue.length === 1) {\n        setOpen(true);\n        setMessage(msg);\n      }\n    };\n\n    const onClose = () => {\n      setOpen(false);\n    };\n\n    const onExit = () => {\n      const [msg, ...rest] = queue;\n\n      if (msg) {\n        setQueue(rest);\n        setOpen(true);\n        setMessage(msg);\n      }\n    };\n\n    return (\n      <Fragment>\n        <Wrapped message={sendMessage} {...props} />\n        <Snackbar\n          key={message}\n          open={open}\n          message={message}\n          autoHideDuration={4000}\n          onClose={onClose}\n          onExit={onExit}\n        />\n      </Fragment>\n    );\n  };\n\nconst QueuingSnackbars = withMessage(({ message }) => {\n  const [counter, setCounter] = useState(0);\n\n  const onClick = () => {\n    const newCounter = counter + 1;\n    setCounter(newCounter);\n    message(`Message ${newCounter}`);\n  };\n\n  return <Button onClick={onClick}>Message</Button>;\n});\n\nexport default QueuingSnackbars;\n```", "```js\nconst QueuingSnackbars = withMessage(({ message }) => {\n  const [counter, setCounter] = useState(0);\n\n  const onClick = () => {\n    const newCounter = counter + 1;\n    setCounter(newCounter);\n    message(`Message ${newCounter}`);\n  };\n\n  return <Button onClick={onClick}>Message</Button>;\n});\n```", "```js\n<Fragment>\n  <Wrapped message={sendMessage} {...props} />\n  <Snackbar\n    key={message}\n    open={open}\n    message={message}\n    autoHideDuration={4000}\n    onClose={onClose}\n    onExit={onExit}\n  />\n</Fragment>\n```", "```js\nconst sendMessage = msg => {\n  const newQueue = [...queue, msg];\n  if (newQueue.length === 1) {\n    setOpen(true);\n    setMessage(msg);\n  }\n};\n```", "```js\nconst onClose = () => {\n  setOpen(false);\n};\n```", "```js\nconst onExit = () => {\n  const [msg, ...rest] = queue;\n\n  if (msg) {\n    setQueue(rest);\n    setOpen(true);\n    setMessage(msg);\n  }\n};\n```"]