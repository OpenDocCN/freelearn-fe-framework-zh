["```js\nconst routes: Routes = [\n    ...\n    { path: 'builder', component: WorkoutBuilderComponent },\n    ...\n];\n```", "```js\n<a routerLink=\"/builder\" class=\"btn btn-primary btn-lg btn-block\" role=\"button\" aria-pressed=\"true\">\n   <span>Create a Workout</span>\n   <span class=\"ion-md-add\"></span>\n</a>\n```", "```js\n  template: `\n    <div class=\"row\">\n      <div class=\"col-sm-3\"></div>\n      <div class=\"col-sm-6\">\n          <h1 class=\"text-center\">Workout Builder</h1>\n      </div>\n      <div class=\"col-sm-3\"></div>\n    </div>\n  `\n```", "```js\n<div class=\"container body-content app-container\"> \n    <router-outlet></router-outlet> \n</div>` \n```", "```js\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { WorkoutBuilderComponent } from './workout-builder.component';\nimport { ExerciseComponent } from './exercise/exercise.component';\nimport { ExercisesComponent } from './exercises/exercises.component';\nimport { WorkoutComponent } from './workout/workout.component';\nimport { WorkoutsComponent } from './workouts/workouts.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [WorkoutBuilderComponent, ExerciseComponent, ExercisesComponent, WorkoutComponent, WorkoutsComponent]\n})\nexport class WorkoutBuilderModule { }\n```", "```js\n  ... \n@NgModule({ \n  imports: [ \n  ... \n WorkoutBuilderModule], \n  ... \n```", "```js\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { WorkoutBuilderComponent } from './workout-builder.component';\nimport { WorkoutsComponent } from './workouts/workouts.component';\nimport { WorkoutComponent } from './workout/workout.component';\nimport { ExercisesComponent } from './exercises/exercises.component';\nimport { ExerciseComponent } from './exercise/exercise.component';\n```", "```js\nconst routes: Routes = [\n  {\n    path: 'builder',\n    component: WorkoutBuilderComponent,\n    children: [\n         {path: '', pathMatch: 'full', redirectTo: 'workouts'},\n         {path: 'workouts', component: WorkoutsComponent },\n         {path: 'workout/new', component: WorkoutComponent },\n         {path: 'workout/:id', component: WorkoutComponent },\n         {path: 'exercises', component: ExercisesComponent},\n         {path: 'exercise/new', component: ExerciseComponent },\n         {path: 'exercise/:id', component: ExerciseComponent }\n    ]\n  },\n];\n```", "```js\n{path:'', pathMatch: 'full', redirectTo: 'workouts'}, \n\n```", "```js\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class WorkoutBuilderRoutingModule { }\n```", "```js\n@Component({\n  template: `<div class=\"container-fluid fixed-top mt-5\">\n                <div class=\"row mt-5\">\n                  <abe-sub-nav-main></abe-sub-nav-main>\n                </div>\n                <div class=\"row mt-2\">\n                  <div class=\"col-sm-12\">\n                    <router-outlet></router-outlet>\n                  </div>\n                </div>\n            <div>`\n})\n```", "```js\nimport { WorkoutBuilderRoutingModule } from './workout-builder-routing.module';\n```", "```js\n...\n@NgModule({\n  imports: [\n    CommonModule,\n    WorkoutBuilderRoutingModule\n  ],\n...\n}) \n```", "```js\nimport { LeftNavExercisesComponent } from './navigation/left-nav-exercises.component';\nimport { LeftNavMainComponent } from './navigation/left-nav-main.component';\nimport { SubNavMainComponent } from './navigation/sub-nav-main.component';\n...\n  declarations: [\n    ...\n    LeftNavExercisesComponent,\n    LeftNavMainComponent,\n    SubNavMainComponent]\n```", "```js\nconst routes: Routes = [\n    ...\n    { path: 'builder', loadChildren: './workout-builder/workout-builder.module#WorkoutBuilderModule'},\n    { path: '**', redirectTo: '/start' }\n];\n```", "```js\nmodule file path + # + module name \n```", "```js\nexport const Routes: Routes = [ \n    { \n path: '', \n. . . \n    } \n]; \n```", "```js\n<nav class=\"navbar fixed-top navbar-dark bg-primary mt-5\">\n    <div>\n        <a [routerLink]=\"['/builder/workouts']\" class=\"btn btn-primary\">\n        <span class=\"ion-md-home\"></span> Home\n        </a>\n        <a [routerLink]=\"['/builder/workout/new']\" class=\"btn btn-primary\">\n        <span class=\"ion-md-add\"></span> New Workout\n        </a>\n        <a [routerLink]=\"['/builder/exercise/new']\" class=\"btn btn-primary\">\n        <span class=\"ion-md-add\"></span> New Exercise\n        </a>\n    </div>\n</nav>\n```", "```js\n<div class=\"row\">\n    <div>\n        <abe-left-nav-main></abe-left-nav-main>\n    </div>\n    <div class=\"col-sm-10 builder-content\">\n        <h1 class=\"text-center\">Workouts</h1>\n    </div>\n  </div>\n```", "```js\n<div class=\"left-nav-bar\">\n    <div class=\"list-group\">\n        <a [routerLink]=\"['/builder/workouts']\" class=\"list-group-item list-group-item-action\">Workouts</a>\n        <a [routerLink]=\"['/builder/exercises']\" class=\"list-group-item list-group-item-action\">Exercises</a>\n    </div>\n</div>\n```", "```js\n<div class=\"left-nav-bar\">\n  <h3>Exercises</h3>\n</div> \n```", "```js\nimport {Injectable} from '@angular/core'; \nimport {ExercisePlan} from './model'; \nimport {WorkoutPlan} from './model'; \nimport {Exercise} from \"./model\";\nimport { CoreModule } from './core.module'; \n\n@Injectable({\n  providedIn: CoreModule\n})\nexport class WorkoutService { \n    workouts: Array<WorkoutPlan> = []; \n    exercises: Array<Exercise> = []; \n\n    constructor() { \n        this.setupInitialExercises(); \n        this.setupInitialWorkouts(); \n    } \n\n    getExercises(){ \n        return this.exercises; \n    } \n\n    getWorkouts(){ \n        return this.workouts; \n    } \n    setupInitialExercises(){ \n     // implementation of in-memory store. \n    } \n\n    setupInitialWorkouts(){ \n     // implementation of in-memory store. \n    } \n}} \n```", "```js\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { WorkoutPlan } from '../../core/model';\nimport { WorkoutService } from '../../core/workout.service';; \n```", "```js\nexport class WorkoutsComponent implements OnInit { \n    workoutList:Array<WorkoutPlan> = []; \n\n    constructor( \n        public router:Router, \n        public workoutService:WorkoutService) {} \n\n    ngOnInit() { \n        this.workoutList = this.workoutService.getWorkouts(); \n    } \n\n    onSelect(workout: WorkoutPlan) { \n        this.router.navigate( ['./builder/workout', workout.name] ); \n    } \n} \n```", "```js\n<div class=\"row\">\n    <div>\n        <abe-left-nav-main></abe-left-nav-main>\n    </div>\n    <div class=\"col-sm-10 builder-content\">\n        <h1 class=\"text-center\">Workouts</h1>\n        <div *ngFor=\"let workout of workoutList|orderBy:'title'\" class=\"workout tile\" (click)=\"onSelect(workout)\">\n          <div class=\"title\">{{workout.title}}</div>\n          <div class=\"stats\">\n              <span class=\"duration\" title=\"Duration\"><span class=\"ion-md-time\"></span> - {{(workout.totalWorkoutDuration? workout.totalWorkoutDuration(): 0)|secondsToTime}}</span>\n              <span class=\"float-right\" title=\"Exercise Count\"><span class=\"ion-md-list\"></span> - {{workout.exercises.length}}</span>\n          </div>\n      </div>\n    </div>\n  </div>\n```", "```js\n onSelect(workout: WorkoutPlan) { \n     this.router.navigate( ['/builder/workout', workout.name] ); \n }  \n```", "```js\n@NgModule({\n....\n  providers: [WorkoutBuilderService]\n})\n```", "```js\nimport { WorkoutPlan, ExercisePlan } from '../../core/model';\nimport { WorkoutService } from '../../core/workout.service';\n```", "```js\n constructor(public workoutService: WorkoutService) {}\n```", "```js\nstartBuilding(name: string){ \n    if(name){ \n        this.buildingWorkout = this.workoutService.getWorkout(name) \n        this.newWorkout = false; \n    }else{ \n        this.buildingWorkout = new WorkoutPlan(\"\", \"\", 30, []); \n        this.newWorkout = true; \n    } \n    return this.buildingWorkout; \n} \n```", "```js\nconstructor( \n    public workoutService:WorkoutService, \n public workoutBuilderService:WorkoutBuilderService) {} \n. . . \naddExercise(exercise:Exercise) { \n this.workoutBuilderService.addExercise(new ExercisePlan(exercise, 30)); \n} \n```", "```js\n onSelect(workout: WorkoutPlan) { \n     this.router.navigate( ['./builder/workout', workout.name] ); \n }  \n```", "```js\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/take';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Router, Resolve, RouterStateSnapshot,\n         ActivatedRouteSnapshot } from '@angular/router';\nimport { WorkoutPlan } from '../../core/model';\nimport { WorkoutBuilderService } from '../builder-services/workout-builder.service';\n\n@Injectable()\nexport class WorkoutResolver implements Resolve<WorkoutPlan> {\n  public workout: WorkoutPlan;\n\n  constructor(\n    public workoutBuilderService: WorkoutBuilderService,\n    public router: Router) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): WorkoutPlan {\n    let workoutName = route.paramMap.get('id');\n\n    if (!workoutName) {\n        workoutName = '';\n    }\n\n    this.workout = this.workoutBuilderService.startBuilding(workoutName);\n\n    if (this.workout) {\n        return this.workout;\n    } else { // workoutName not found\n        this.router.navigate(['/builder/workouts']);\n        return null;\n    }\n  }\n}\n```", "```js\n....\nimport { WorkoutResolver } from './workout/workout.resolver';\n\n@NgModule({\n....\n  providers: [WorkoutBuilderService, WorkoutResolver]\n})\n....\n```", "```js\n....\nimport { WorkoutResolver } from './workout/workout.resolver';\n....\nconst routes: Routes = [\n  {\n    path: '',\n    component: WorkoutBuilderComponent,\n    children: [\n         {path: '', pathMatch: 'full', redirectTo: 'workouts'},\n         {path: 'workouts', component: WorkoutsComponent },\n {path: 'workout/new', component: WorkoutComponent, resolve: { workout: WorkoutResolver} },\n {path: 'workout/:id', component: WorkoutComponent, resolve: { workout: WorkoutResolver} },\n         {path: 'exercises', component: ExercisesComponent},\n         {path: 'exercise/new', component: ExerciseComponent },\n         {path: 'exercise/:id', component: ExerciseComponent }\n    ]\n  },\n];\n```", "```js\n    constructor( \n    public route: ActivatedRoute, \n    public workoutBuilderService:WorkoutBuilderService){ } \n```", "```js\n  ngOnInit() {\n      this.sub = this.route.data\n          .subscribe(\n            (data: { workout: WorkoutPlan }) => {\n              this.workout = data.workout;\n            }\n          );\n  }\n```", "```js\n<div *ngFor=\"let exercisePlan of workout.exercises; let i=index\" class=\"exercise-item\"> \n```", "```js\n....\nimport { FormsModule } from '@angular/forms';\n....\n@NgModule({ \n    imports: [ \n        CommonModule, \n FormsModule, \n        SharedModule, \n        workoutBuilderRouting \n    ], \n```", "```js\n<form #f=\"ngForm\" class=\"row\" name=\"formWorkout\" (ngSubmit)=\"save(f.form)\">. . . \n</form> \n```", "```js\nexport class WorkoutPlan { \n  constructor( \n    public name: string, \n    public title: string, \n    public restBetweenExercise: number, \n    public exercises: ExercisePlan[], \n    public description?: string) { \n  } \ntotalWorkoutDuration(): number{ \n . . . [code calculating the total duration of the workout]. . . \n} \n```", "```js\nexport class Exercise {\n    constructor(\n        public name: string,\n        public title: string,\n        public description: string,\n        public image: string,\n        public nameSound?: string,\n        public procedure?: string,\n        public videos?: Array<string>) { }\n}\n```", "```js\n<input type=\"text\" name=\"workoutName\" class=\"form-control\" id=\"workout-name\" placeholder=\"Enter workout name. Must be unique.\" [(ngModel)]=\"workout.name\">\n```", "```js\n<span class=\"btn float-right trashcan\" (click)=\"removeExercise(exercisePlan)\"><span class=\"ion-ios-trash-outline\"></span></span>\n\n```", "```js\n<textarea name=\"description\" . . . [(ngModel)]=\"workout.description\"></textarea> \n```", "```js\n<input type=\"text\". . . [(ngModel)]=\"workout.name\">{{workout.name}} \n```", "```js\n<select . . . name=\"duration\" [(ngModel)]=\"exercisePlan.duration\"> \n    <option *ngFor=\"let duration of durations\" [value]=\"duration.value\">{{duration.title}}</option> \n</select> \n```", "```js\n [{ title: \"15 seconds\", value: 15 }, \n  { title: \"30 seconds\", value: 30 }, ...] \n```", "```js\n<div id=\"exercises-list\" class=\"col-sm-2 exercise-list\" ngModelGroup=\"exercises\">\n```", "```js\n<div class=\"exercise tile\" [ngModelGroup]=\"i\">\n```", "```js\n{\n  \"exercises\": {\n    \"0\": {\n      \"duration\": 15\n    },\n    \"1\": {\n      \"duration\": 60\n    },\n    \"2\": {\n      \"duration\": 45\n    },\n    \"exerciseCount\": 3\n  },\n  \"workoutName\": \"1minworkout\",\n  \"title\": \"1 Minute Workout\",\n  \"description\": \"desc\",\n  \"restBetweenExercise\": 30\n}\n```", "```js\n<input type=\"text\" name=\"workoutName\" #name=\"ngModel\" class=\"form-control\" id=\"workout-name\" placeholder=\"Enter workout name. Must be unique.\" [(ngModel)]=\"workout.name\" required> \n```", "```js\n<input type=\"text\" name=\"workoutName\" #name=\"ngModel\" class=\"form-control\" id=\"workout-name\" placeholder=\"Enter workout name. Must be unique.\" [(ngModel)]=\"workout.name\" required #spy> \n```", "```js\n<label>{{spy.className}}</label> \n```", "```js\ninput.ng-invalid {  border:2px solid red; } \n```", "```js\n<input type=\"text\" name=\"workoutName\" #name=\"ngModel\" class=\"form-control\" id=\"workout-name\" placeholder=\"Enter workout name. Must be unique.\" [(ngModel)]=\"workout.name\" required> \n```", "```js\n<label *ngIf=\"name.control.hasError('required') && (name.touched)\" class=\"alert alert-danger validation-message\">Name is required</label>  \n```", "```js\n<input type=\"text\" . . . minlength=\"5\" maxlength=\"20\" required> \n```", "```js\n<label *ngIf=\"(title.control.hasError('minlength') || title.control.hasError('maxlength')) && workout.title.length > 0\" class=\"alert alert-danger validation-message\">Title should be between 5 and 20 characters long.</label>  \n```", "```js\n<label *ngIf=\"title.control.hasError('required')\" class=\"alert alert-danger validation-message\">Title is required.</label>\n```", "```js\n<div *ngIf=\"title.touched\"> \n  . . . [the two validators] . . . \n</div> \n```", "```js\n<input type=\"hidden\" name=\"exerciseCount\" #exerciseCount=\"ngModel\" ngControl=\"exerciseCount\" class=\"form-control\" id=\"exercise-count\" [(ngModel)]=\"workout.exercises.length\" pattern=\"[1-9][0-9]*\"> \n```", "```js\n<label *ngIf=\"exerciseCount.control.hasError('pattern')\" class=\"alert alert-danger extended-validation-message\">The workout should have at least one exercise!</label>  \n```", "```js\nremoveTouched: boolean = false; \n```", "```js\nremoveExercise(exercisePlan: ExercisePlan) { \n    this.removeTouched = true; \n    this.workoutBuilderService.removeExercise(exercisePlan); \n} \n```", "```js\n<label *ngIf=\"exerciseCount.control.hasError('pattern') && (removeTouched)\" \n```", "```js\naddWorkout(workout: WorkoutPlan){ \n    if (workout.name){ \n        this.workouts.push(workout); \n        return workout; \n    } \n} \n\nupdateWorkout(workout: WorkoutPlan){ \n    for (var i = 0; i < this.workouts.length; i++) { \n        if (this.workouts[i].name === workout.name) { \n            this.workouts[i] = workout; \n            break; \n        } \n    } \n} \n```", "```js\nsave(){ \n    let workout = this.newWorkout ? \n        this._workoutService.addWorkout(this.buildingWorkout) : \n        this._workoutService.updateWorkout(this.buildingWorkout); \n    this.newWorkout = false; \n    return workout; \n} \n```", "```js\nsave(formWorkout:any){ \n    if (!formWorkout.valid) return; \n    this.workoutBuilderService.save(); \n    this.router.navigate(['/builder/workouts']); \n}  \n```", "```js\n*ngIf=\"name.control?.hasError('required') && name.touched\"\n```", "```js\nsubmitted: boolean = false;\n```", "```js\nsave(formWorkout){ \n this.submitted = true; \n    if (!formWorkout.valid) return; \n    this._workoutBuilderService.save(); \n    this.router.navigate(['/builder/workouts']); \n} \n```", "```js\n*ngIf=\"name.control.hasError('required') && (name.touched || submitted)\"   \n```", "```js\nimport { FormsModule, ReactiveFormsModule }   from '@angular/forms'; \n ... \n@NgModule({ \n    imports: [ \n        CommonModule, \n        FormsModule, \n ReactiveFormsModule, \n        SharedModule, \n        workoutBuilderRouting \n    ],\n```", "```js\nimport { ExerciseBuilderService } from \"./builder-services/exercise-builder-service\"; \n```", "```js\n@NgModule({ \n   . . . \n  providers: [\n    WorkoutBuilderService,\n    WorkoutResolver,\n    ExerciseBuilderService,\n    ExerciseResolver\n   ]\n}) \n```", "```js\nimport { Validators, FormArray, FormGroup, FormControl, FormBuilder } from '@angular/forms';\n```", "```js\n  constructor(\n      public route: ActivatedRoute,\n      public router: Router,\n      public exerciseBuilderService: ExerciseBuilderService,\n      public formBuilder: FormBuilder\n  ) {}\n```", "```js\n  ngOnInit() {\n    this.sub = this.route.data\n        .subscribe(\n          (data: { exercise: Exercise }) => {\n            this.exercise = data.exercise;\n          }\n        );\n\n      this.buildExerciseForm();\n  } \n```", "```js\nbuildExerciseForm(){ \n    this.exerciseForm = this.formBuilder.group({ \n        'name': [this.exercise.name, [Validators.required, AlphaNumericValidator.invalidAlphaNumeric]], \n        'title': [this.exercise.title, Validators.required], \n        'description': [this.exercise.description, Validators.required], \n        'image': [this.exercise.image, Validators.required], \n        'nameSound': [this.exercise.nameSound], \n        'procedure': [this.exercise.procedure], \n        'videos': this.addVideoArray() \n    }) \n}  \n```", "```js\n'name': [this.exercise.name, Validators.required], \n```", "```js\n'videos': this.addVideoArray() \n```", "```js\naddVideoArray(){ \n    if(this.exercise.videos){ \n        this.exercise.videos.forEach((video : any) => { \n            this.videoArray.push(new FormControl(video, Validators.required)); \n        }); \n    } \n    return this.videoArray; \n} \n```", "```js\n<form class=\"row\" [formGroup]=\"exerciseForm\" (ngSubmit)=\"onSubmit(exerciseForm)\">  \n```", "```js\n<input name=\"name\" formControlName=\"name\" class=\"form-control\" id=\"name\" placeholder=\"Enter exercise name. Must be unique.\">  \n```", "```js\n<label *ngIf=\"exerciseForm.controls['name'].hasError('required') && (exerciseForm.controls['name'].touched || submitted)\" class=\"alert alert-danger validation-message\">Name is required</label>\n```", "```js\n'name': [this.exercise.name, Validators.required], \n```", "```js\n<div *ngFor=\"let video of videoArray.controls; let i=index\" class=\"form-row align-items-center\">\n```", "```js\n<div class=\"col-sm-10\">\n    <input type=\"text\" class=\"form-control\" [formControlName]=\"i\" placeholder=\"Add a related youtube video identified.\"/>\n</div>\n```", "```js\n<span class=\"btn alert-danger\" title=\"Delete this video.\" (click)=\"deleteVideo(i)\">\n    <span class=\"ion-ios-trash-outline\"></span>\n</span> \n```", "```js\n<label *ngIf=\"exerciseForm.controls['videos'].controls[i].hasError('required') && (exerciseForm.controls['videos'].controls[i].touched || submitted)\" class=\"alert alert-danger validation-message\">Video identifier is required</label>\n```", "```js\n  onSubmit(formExercise: FormGroup) {\n      this.submitted = true;\n      if (!formExercise.valid) { return; }\n      this.mapFormValues(formExercise);\n      this.exerciseBuilderService.save();\n      this.router.navigate(['/builder/exercises']);\n  }\n```", "```js\n  mapFormValues(form: FormGroup) {\n      this.exercise.name = form.controls['name'].value;\n      this.exercise.title = form.controls['title'].value;\n      this.exercise.description = form.controls['description'].value;\n      this.exercise.image = form.controls['image'].value;\n      this.exercise.nameSound = form.controls['nameSound'].value;\n      this.exercise.procedure = form.controls['procedure'].value;\n      this.exercise.videos = form.controls['videos'].value;\n  }\n```", "```js\nexport class AlphaNumericValidator {\n    static invalidAlphaNumeric(control: FormControl): { [key: string]: boolean } {\n        if ( control.value.length && !control.value.match(/^[a-z0-9]+$/i) ) {\n            return {invalidAlphaNumeric: true };\n        }\n        return null;\n    }\n}\n```", "```js\nimport { AlphaNumericValidator } from '../alphanumeric-validator'; \n```", "```js\nbuildExerciseForm(){ \n    this.exerciseForm = this._formBuilder.group({ \n'name': [this.exercise.name, [Validators.required, AlphaNumericValidator.invalidAlphaNumeric]], \n  . . . [other form controls] . . . \n    }); \n} \n\n```", "```js\n<label *ngIf=\"exerciseForm.controls['name'].hasError('invalidAlphaNumeric') && (exerciseForm.controls['name'].touched || submitted)\" class=\"alert alert-danger validation-message\">Name must be alphanumeric</label> \n```", "```js\n<form #f=\"ngForm\" name=\"formWorkout\" (ngSubmit)=\"save(f.form)\" [ngFormOptions]=\"{updateOn: 'submit'}\" class=\"row\">\n```", "```js\n<input type=\"text\" name=\"title\" class=\"form-control\" #title=\"ngModel\" id=\"workout-title\" placeholder=\"What would be the workout title?\" [(ngModel)]=\"workout.title\" [ngModelOptions]=\"{updateOn: 'blur'}\" minlength=\"5\" maxlength=\"20\" required>\n```", "```js\n<input type=\"text\" name=\"workoutName\" #name=\"ngModel\" class=\"form-control\" id=\"workout-name\" placeholder=\"Enter workout name. Must be unique.\" [(ngModel)]=\"workout.name\" [ngModelOptions]=\"{updateOn: 'blur'}\" required>\n```", "```js\nnew FormGroup(value, {updateOn: 'blur'}));\n```", "```js\n  buildExerciseForm() {\n      this.exerciseForm = this.formBuilder.group({\n          'name': [\n            this.exercise.name,\n {\n updateOn: 'blur',\n validators: [Validators.required, AlphaNumericValidator.invalidAlphaNumeric]\n }\n          ],\n        ....\n      });\n  }\n```"]