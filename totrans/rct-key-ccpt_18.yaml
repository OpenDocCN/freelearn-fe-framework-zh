- en: '18'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next Steps and Further Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Learning Objectives
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will know the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to make the move from reading the book to applying your knowledge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to best practice what you’ve learned throughout this book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which React topics you can explore next
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which popular third-party React packages might be worth a closer look
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this book, you’ve gotten a thorough (re-)introduction to the key React
    concepts you must know in order to work with React successfully, providing both
    theoretical and practical guidance for components, props, state, context, React
    Hooks, routing, server-side React, and many other crucial concepts.
  prefs: []
  type: TYPE_NORMAL
- en: But React is more than just a collection of concepts and ideas. It powers an
    entire ecosystem of third-party libraries that help with many common React-specific
    problems. There is also a huge React community that shares solutions for common
    problems or popular patterns.
  prefs: []
  type: TYPE_NORMAL
- en: In this last, brief chapter, you’ll learn about some of the most important and
    popular third-party libraries you might want to explore. You will also be introduced
    to other great resources that help with learning React. In addition, this chapter
    will share some recommendations on how best to proceed and continue to grow as
    a React developer after finishing this book.
  prefs: []
  type: TYPE_NORMAL
- en: How Should You Proceed?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use the knowledge you gained throughout this book as a foundation to build upon.
    Dive deeper into Next.js, explore other popular React libraries, or learn more
    about React alternatives like Angular or Vue. Web development offers a broad range
    of technologies, languages, libraries, patterns, and concepts. And while this
    can sometimes feel overwhelming, it’s also a vast pool of opportunities to grow
    as a developer and become better at solving complex problems.
  prefs: []
  type: TYPE_NORMAL
- en: But besides learning more about React and related packages, it’s also important
    to apply your knowledge and practice what you’ve learned. Don’t just read book
    after book. Instead, use your newly gained skills to build some demo projects.
  prefs: []
  type: TYPE_NORMAL
- en: You don’t have to build the next Amazon or TikTok. There’s a reason why applications
    like these are built by huge teams. But you should build small demo projects that
    focus on a couple of core problems. You could, for example, build a very basic
    website that allows users to store and view their daily goals, or build a basic
    Meetups page where visitors can organize and join meetup events.
  prefs: []
  type: TYPE_NORMAL
- en: 'To put it simply: practice is key. You must apply what you’ve learned and build
    stuff. Because by building demo projects, you’ll automatically encounter problems
    that you’ll have to solve without a solution at hand. You’ll have to try out different
    approaches and search the internet for possible (partial) solutions. Ultimately,
    this is how you learn the most and how you develop your problem-solving skills.'
  prefs: []
  type: TYPE_NORMAL
- en: You won’t find a solution for all problems in this book, but this book does
    give you the basic tools and building blocks that will help you with those problems.
    Solutions are then built by combining these building blocks and by building upon
    the knowledge gathered throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: Become a Fullstack React Developer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book already covered crucial concepts to get you started with React-based
    backend development. *Chapters 15* , *16* , and *17* explored server-side rendering,
    Next.js, server components and actions, and related features that will be needed
    to build fullstack React apps.
  prefs: []
  type: TYPE_NORMAL
- en: Consequently, diving deeper into Next.js might be an interesting next step.
    With the help of the official documentation or online courses like my *Next.js
    & React – The Complete Guide* course, you can acquire the necessary knowledge
    to become a fullstack React developer.
  prefs: []
  type: TYPE_NORMAL
- en: 'And it’s not just Next.js: you can also explore alternatives like Remix and
    React Router (which is receiving more fullstack capabilities) or TanStack Start.
    If you don’t care about having a fully integrated fullstack development experience
    as, for example, provided by Next.js, you can also learn more about connecting
    a decoupled backend to a React frontend—i.e., you can learn how to build and connect
    a separate backend (REST or GraphQL) API with Node.js or any other backend language.'
  prefs: []
  type: TYPE_NORMAL
- en: Becoming a fullstack developer is not something you have to do, though. It’s
    an option, but depending on your personal preferences or your role in a team,
    it might not be the right option for you. It’s just important to know that building
    fullstack applications with React is one possible path you could explore—and that
    it’s a path that became considerably easier with Next.js and similar frameworks.
    Either way, as mentioned before, you should also apply your React knowledge and
    practice by building demo projects, no matter whether you’re diving deeper into
    fullstack development or not.
  prefs: []
  type: TYPE_NORMAL
- en: Interesting Problems to Explore
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, which problems and demo apps could you explore and try to build?
  prefs: []
  type: TYPE_NORMAL
- en: In general, you can try to build (simplified) clones of popular web apps (such
    as a highly simplified version of Amazon). Ultimately, your imagination is the
    limit, but in the following sections, you will find details and advice for three
    project ideas and the challenges that come with them.
  prefs: []
  type: TYPE_NORMAL
- en: Build a Shopping Cart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A very common type of website is an online shop. You can find online shops for
    all kinds of products—ranging from physical goods such as books, clothing, or
    furniture to digital products such as video games or movies—and building such
    an online shop would be an interesting project idea and challenge.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, online shops do come with many features that can’t be built with
    client-side React alone. For example, the whole payment process is mostly a backend
    task where requests must be handled by servers. Inventory management would be
    another feature that takes place in databases and on servers, and not in the browsers
    of your website visitors. Consequently, you can use Next.js (or one of the alternatives
    mentioned earlier in this chapter) to take care of this backend functionality
    and thus build a fullstack React application. But even if you don’t want to dive
    into fullstack development, online shops contain many features that require interactive
    user interfaces (and, therefore, benefit from using React’s client-side features).
    For example, you can set up different pages that show lists of available products,
    product details, or the current status of an order, as you learned in *Chapter
    13* , *Multipage Apps with React Router* . You also typically have shopping carts
    on websites. Building such a cart, combined with the functionality of adding and
    removing items, would similarly utilize several React features—for example, state
    management, as explained in *Chapter 4* , *Working with Events and State* .
  prefs: []
  type: TYPE_NORMAL
- en: It all starts with having a couple of pages (routes) for dummy products (that
    are hardcoded into the frontend code and not fetched from some backend), product
    details, and the shopping cart itself. The shopping cart displays items that need
    to be managed via app-wide state (e.g., via context, as covered in *Chapter 11*
    , *Working with Complex State* ), as website visitors must be able to add items
    to the cart from the product detail page. You will also need a broad variety of
    React components—many of which must be reusable (e.g., the individual shopping
    cart items that are displayed). Your knowledge of React components and props from
    *Chapter 2* , *Understanding React Components and JSX* , and *Chapter 3* , *Components
    and Props* , will help with that.
  prefs: []
  type: TYPE_NORMAL
- en: The shopping cart state is also a non-trivial state. A simple list of products
    typically won’t do the trick—though you can, of course, at least apply your knowledge
    from *Chapter 5* , *Rendering Lists and Conditional Content* . Instead, you must
    check whether an item is already part of the cart or if it’s added for the first
    time. If it’s part of the cart already, you must update the quantity of the cart
    item. Of course, you’ll also need to ensure that users are able to remove items
    from the cart or reduce the quantity of an item. And if you want to get even fancier,
    you can even simulate price changes that must be factored in when updating the
    shopping cart state.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, this extremely simple dummy online shop already offers quite
    a bit of complexity. Of course, as mentioned earlier, you could also add backend
    functionality and store dummy products in a database. If you want to, you can
    dive deeper into Next.js to build a more complex fullstack application based on
    React. This allows you to apply the knowledge you gained in *Chapter 15* , *Server-side
    Rendering &* *Building Fullstack Apps with Next.js* , and *Chapter 16* , *React
    Server Components & Server Actions* .
  prefs: []
  type: TYPE_NORMAL
- en: Build an Application’s Authentication System (User Signup and Login)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A lot of websites allow users to sign up or log in. For many websites, user
    authentication is required before performing certain tasks. For example, you must
    create a Google account before uploading videos to YouTube or using Gmail (and
    many other Google services). Similarly, an account is typically needed before
    taking paid online courses or buying (digital) video games online. You also can’t
    perform online banking without being logged in. And that’s just a short list;
    many more examples could be added, but you get the idea. User authentication is
    required for a broad variety of reasons on many websites.
  prefs: []
  type: TYPE_NORMAL
- en: And on even more websites, it’s optionally available. For example, you might
    be able to order products as a guest, but you benefit from extra advantages when
    creating an account (e.g., you may track your order history or collect reward
    points).
  prefs: []
  type: TYPE_NORMAL
- en: Of course, building your own version of YouTube is much too challenging to be
    a good practice project. There’s a reason why Google has thousands of developers
    on its payroll. However, you can identify and clone individual features, such
    as user authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Build your own user authentication system with React. Make sure that users can
    sign up and log in. Add a few example pages (routes) to your website and find
    a way of making some pages only available to logged-in users. These targets might
    not sound like much, but you will actually face quite a lot of challenges along
    the way—challenges that force you to find solutions for brand-new problems.
  prefs: []
  type: TYPE_NORMAL
- en: While you could just use some dummy (client-side) logic in your React app code
    to simulate HTTP requests that are sent to your servers behind the scenes, you
    could also add a real demo backend instead. That backend would need to store user
    accounts in a database, validate login requests, and send back authentication
    tokens that inform the React frontend about the current authentication status
    of a user. In your React app, these HTTP requests would be treated as side effects,
    as covered in *Chapter 8* , *Handling Side Effects* .
  prefs: []
  type: TYPE_NORMAL
- en: Again, if you want to use a real backend, you’ll also need to dive into backend
    development and either build a separate server-side application or use Next.js
    (or any similar fullstack React framework). Alternatively, you can also use services
    like Firebase, Supabase, Auth0, or one of the many other services that provide
    authentication backends for frontend applications. Either way, you can explore
    how to connect your React app to such a backend.
  prefs: []
  type: TYPE_NORMAL
- en: As you can tell, this “simple” project idea (or, rather, feature idea) presents
    a lot of challenges and will require you to build on your React knowledge and
    find solutions for a broad variety of problems.
  prefs: []
  type: TYPE_NORMAL
- en: Build an Event Management Website
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you first were to build your own shopping cart system and get started with
    user authentication, you could then take it a step further and build a more complex
    website that combines these features (and offers new, additional features).
  prefs: []
  type: TYPE_NORMAL
- en: One such project idea would be an event management site. This is a website on
    which users can create accounts and, once they’re logged in, events. All visitors
    can then browse these events and register for them. It would be up to you whether
    registration as a guest (without creating an account first) is possible or not.
  prefs: []
  type: TYPE_NORMAL
- en: It’s also your choice whether you want to add backend logic (that is, a server
    that handles requests and stores users and events in a database) or you will simply
    store all data in your React application (via the app-wide state). If you don’t
    add a backend, all data will be lost whenever the page is reloaded, and you can’t
    see the events created by other users on other machines, but you can still practice
    all these key React features.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many React features that are needed for this kind of dummy website:
    reusable components, pages (routes), component-specific and app-wide state, handling
    and validating user input, displaying conditional and list data, and much more.'
  prefs: []
  type: TYPE_NORMAL
- en: Again, this is clearly not an exhaustive list of examples. You can build whatever
    you want. Be creative and experiment because you’ll only master React if you use
    it to solve problems.
  prefs: []
  type: TYPE_NORMAL
- en: Common and Popular React Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: No matter which kind of React app you’re building, you’ll encounter many problems
    and challenges along the way. From handling and validating user input to sending
    HTTP requests, complex applications come with many challenges.
  prefs: []
  type: TYPE_NORMAL
- en: You can solve all challenges on your own and even write all the (React) code
    that’s needed on your own. And for practicing, this might indeed be a good idea.
    But as you’re building more and more complex apps, it might make sense to outsource
    certain problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thankfully, React features a rich and vibrant ecosystem that offers third-party
    packages that solve all kinds of common problems. Here’s a brief, non-exhaustive
    list of popular third-party libraries that might be helpful:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TanStack Query** : A very popular library that helps with data fetching,
    caching, and management in React apps ( [https://tanstack.com/query/latest](https://tanstack.com/query/latest)
    ).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Framer Motion** : A React-specific library that allows you to build and implement
    powerful, visually pleasing animations into your React apps ( [https://www.framer.com/motion/](https://www.framer.com/motion/)
    ).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**React Hook Form** : A library that simplifies the process of handling and
    validating user input ( [https://react-hook-form.com/](https://react-hook-form.com/)
    ).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Formik** : Another popular library that helps with form input handling and
    validation ( [https://formik.org/](https://formik.org/) ).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Axios** : A general JavaScript library that simplifies the process of sending
    HTTP requests and handling responses ( [https://axios-http.com/](https://axios-http.com/)
    ).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Redux** : In the past, this was an essential React library. Nowadays, it
    can still be important as it can greatly simplify the management of (complex)
    cross-component or app-wide state ( [https://redux.js.org/](https://redux.js.org/)
    ).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zustand** : If you are in need of an extra library that helps with managing
    state in React apps, you can also explore Zustand—a very popular alternative to
    Redux ( [https://zustand-demo.pmnd.rs/](https://zustand-demo.pmnd.rs/) ).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is just a short list of some helpful and popular libraries. Since there’s
    an endless number of potential challenges, you could also compile an infinite
    list of libraries. Search engines and Stack Overflow (a message board for developers)
    are your friends when it comes to finding more libraries that solve other problems.
  prefs: []
  type: TYPE_NORMAL
- en: Using TypeScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may also consider using TypeScript, instead of plain JavaScript, for your
    React projects.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript is a JavaScript superset that adds strong and strict typing. As a
    result, using TypeScript can help you catch and avoid certain errors related to
    missing values or incorrect value types.
  prefs: []
  type: TYPE_NORMAL
- en: You can get started with TypeScript for React with the help of the official
    documentation ( [https://react.dev/learn/typescript](https://react.dev/learn/typescript)
    ) or dedicated online courses or tutorials.
  prefs: []
  type: TYPE_NORMAL
- en: Other Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned, React does have a highly vibrant ecosystem—and not just when it
    comes to third-party libraries. You’ll also find thousands of blog posts, discussing
    all kinds of best practices, patterns, ideas, and solutions to possible problems.
    Searching for the right keywords (such as *React form validation with Hooks* )
    will almost always yield interesting articles or helpful libraries.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also find plenty of paid online courses, such as the *React – The Complete
    Guide* course at [https://www.udemy.com/course/react-the-complete-guide-incl-redux/](https://www.udemy.com/course/react-the-complete-guide-incl-redux/)
    , and free tutorials on YouTube.
  prefs: []
  type: TYPE_NORMAL
- en: 'The official documentation is another great place to explore as it contains
    deep dives into core topics as well as more tutorial articles: [https://react.dev/](https://react.dev/)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Beyond React for Web Applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book focused on using React to build websites. This was for a couple of
    reasons. The first is that React, historically, was created to simplify the process
    of building complex web user interfaces, and React is powering more and more websites
    every day. It’s one of the most widely used client-side web development libraries
    and is more popular than ever before.
  prefs: []
  type: TYPE_NORMAL
- en: But it also makes sense to learn how to use React for web development because
    you need no extra tools—only a text editor and a browser.
  prefs: []
  type: TYPE_NORMAL
- en: That said, React can be used to build user interfaces outside the browser and
    websites as well. With React Native and Ionic for React, you have two very popular
    projects and libraries that use React to build native mobile apps for iOS and
    Android.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, after learning all these React essentials, it makes a lot of sense
    to also explore these projects. Pick up some React Native or Ionic courses (or
    use the official documentation) to learn how you can use all the React concepts
    covered in this book to build real native mobile apps that can be distributed
    through the platform app stores.
  prefs: []
  type: TYPE_NORMAL
- en: React can be used to build all kinds of interactive user interfaces for various
    platforms. Now that you’ve finished this book, you have the tools you need to
    build your next project with React—no matter which platform it targets.
  prefs: []
  type: TYPE_NORMAL
- en: Final Words
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With all the concepts discussed throughout this book, as well as the extra resources
    and starting points to dive deeper, you are well prepared to build feature-rich
    and highly user-friendly web applications with React.
  prefs: []
  type: TYPE_NORMAL
- en: No matter if it’s a simple blog or a complex Software-as-a-Service solution,
    you now know the key React concepts you need in order to build a React-driven
    web app your users will love.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you got a lot out of this book. Please share any feedback you have, for
    example, via X ( `@maxedapps` ) or by sending an email to `customercare@packt.com`
    .
  prefs: []
  type: TYPE_NORMAL
- en: Join Us on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, AI experts, and the author himself.
  prefs: []
  type: TYPE_NORMAL
- en: Ask questions, provide solutions to other readers, chat with the author via
    Ask Me Anything sessions, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/ReactKeyConcepts2e](https://packt.link/ReactKeyConcepts2e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![img](img/QR_Code1044817876677025718.png)'
  prefs: []
  type: TYPE_IMG
