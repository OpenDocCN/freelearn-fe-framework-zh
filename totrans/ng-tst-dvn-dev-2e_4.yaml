- en: Chapter 4. End-to-End Testing with Protractor
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章。使用 Protractor 进行端到端测试
- en: Unit testing is only one aspect of testing that only tests the responsibility
    of every piece of code. However, when it comes to testing the flow and feature
    of any component, module, or full application, then **end-to-end** (**e2e**) testing
    is the only solution.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试只是测试的一个方面，它只测试每一块代码的责任。然而，当涉及到测试任何组件、模块或完整应用程序的流程和功能时，那么**端到端**（**e2e**）测试是唯一的解决方案。
- en: In this chapter, we will look at the end-to-end testing flow step by step through
    all the layers of an application. We will be introduced to Protractor, the end-to-end
    testing tool from the Angular team. We already know the reason behind it, why
    it was created, and what kind of problems it solves.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将逐步查看应用程序的所有层级的端到端测试流程。我们将介绍来自 Angular 团队的端到端测试工具 Protractor。我们已经知道了它的原因，为什么它被创建，以及它解决了哪些问题。
- en: 'In this chapter, we will go through:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: The process of installing and configuring Protractor
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置 Protractor 的过程
- en: Implementing the Protractor end-to-end test in our existing Angular project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的现有 Angular 项目中实现 Protractor 端到端测试
- en: e2e test runs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: e2e 测试运行
- en: Returning the result of the test
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回测试结果
- en: An overview of Protractor
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Protractor 概述
- en: Protractor is an end-to-end testing tool that runs using Node.js and is available
    as an npm package. Before talking about Protractor specifically, we need to understand
    what end-to-end testing is.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Protractor 是一个使用 Node.js 运行的端到端测试工具，作为 npm 包提供。在具体讨论 Protractor 之前，我们需要了解什么是端到端测试。
- en: 'We already learned briefly about end-to-end testing in [Chapter 2](ch02.html
    "Chapter 2. Details of JavaScript Testing"), *Details of JavaScript Testing*.
    But let''s have a quick recap:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[第 2 章](ch02.html "第 2 章。JavaScript 测试的细节")*JavaScript 测试的细节*中简要了解了端到端测试。但是，让我们快速回顾一下：
- en: End-to-end testing is testing an application against all the interconnected
    moving parts and layers of an application. This differs from unit tests, where
    the focus is on individual components, such as classes, services, and directives.
    With end-to-end testing, the focus is on how the application or a module, as a
    whole, works, such as confirming that the click of a button triggers x, y, and
    z actions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端测试是对应用程序的所有相互连接的移动部分和层进行测试。这与单元测试不同，单元测试的重点在于单个组件，例如类、服务和指令。在端到端测试中，重点是整个应用程序或模块如何工作，例如确认按钮的点击会触发
    x、y 和 z 动作。
- en: Protractor allows the end-to-end testing of any module or even any size of web
    application by interacting the DOM elements of that application. It offers the
    ability to select a specific DOM element, share the data with that element, simulate
    the click of a button, and interact with an application in the same way as a user
    would. It then allows expectations to be set based on what the user would expect.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Protractor 允许通过交互应用程序的 DOM 元素来对任何模块或任何规模的 Web 应用程序进行端到端测试。它提供了选择特定 DOM 元素、与该元素共享数据、模拟按钮点击以及以用户的方式与应用程序交互的能力。然后允许根据用户期望设置期望。
- en: Core of Protractor
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Protractor 的核心
- en: In a quick overview, we got a basic idea about Protractor--how it needs to select
    DOM elements and interact with them just like a real user would in order to run
    an e2e test on any application. To do these activities, Protractor provides some
    global functions; some are from its core API, and some are from WebDriver. We
    will discuss them in detail in [Chapter 5](ch05.html "Chapter 5. Protractor, a
    Step Ahead"), *Protractor, a Step Ahead*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在快速概述中，我们得到了关于 Protractor 的基本概念——它需要如何选择 DOM 元素并与它们交互，就像真实用户在运行任何应用程序的端到端测试时那样。为了进行这些活动，Protractor
    提供了一些全局函数；其中一些来自其核心 API，一些来自 WebDriver。我们将在[第 5 章](ch05.html "第 5 章。Protractor，一步领先")*Protractor，一步领先*中详细讨论它们。
- en: 'However, let''s take a quick overview now:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现在让我们快速概述一下：
- en: '**Browser**: Protractor provides the global function `browser`, which is a
    global object from WebDriver that is mostly used to interact with the application
    browser where the application is running during the e2e test process. It provides
    some useful methods to interact with, as follows:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浏览器**：Protractor 提供了全局函数 `browser`，这是一个来自 WebDriver 的全局对象，主要用于在端到端测试过程中与运行应用程序的应用程序浏览器进行交互。它提供了一些有用的方法来交互，如下所示：'
- en: '[PRE0]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: And there are many more, which we will discuss in the next chapter.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还有更多，我们将在下一章中讨论。
- en: '**Element**: This is a global function provided by Protractor; it''s basically
    used to find a single element based on the locator, but it supports multiple element
    selection as well, by chaining another method, `.all` as `element.all`, which
    also takes `Locator` and returns `ElementFinderArray`. Let''s have a look at an
    `element` example:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**元素**：这是Protractor提供的一个全局函数；它基本上用于根据定位器查找单个元素，但它也支持通过链式另一个方法 `.all`（即 `element.all`）进行多个元素选择，该方法也接受
    `定位器` 并返回 `ElementFinderArray`。让我们看看一个 `element` 的示例：'
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And there are many more, which we will discuss in the next chapter.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还有更多，我们将在下一章讨论。
- en: '**Action**: As we have seen, the `element` method will return a selected DOM
    `element` object, but we need to interact with a DOM and the actions for doing
    that job come with some built-in methods. The DOM will not contact the browser
    unit with any action method calls.Let''s have a look at few of action''s example:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动作**：正如我们所见，`element` 方法将返回一个选定的DOM `element` 对象，但我们需要与DOM进行交互，而执行这项工作的动作方法由一些内置方法提供。DOM不会通过任何动作方法调用与浏览器单元进行联系。让我们看看动作的一些示例：'
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And there are many more, which we will discuss in the next chapter.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还有更多，我们将在下一章讨论。
- en: '**Locator**: This actually informs Protractor how to find a certain element
    in the DOM element. Protractor exports `Locator` as a global factory function,
    which will be used with a global `by` object.Let''s have a look at a few examples
    of `Locator`:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定位器**：这实际上告诉Protractor如何在DOM元素中找到某个元素。Protractor将 `定位器` 导出为一个全局工厂函数，该函数将与全局
    `by` 对象一起使用。让我们看看 `定位器` 的几个示例：'
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: And there are many more, which we will discuss in the next chapter.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还有更多，我们将在下一章讨论。
- en: A quick example
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个快速示例
- en: Now we can go through a quick example considering the following user specification.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过以下用户规范快速进行一个示例。
- en: 'Assuming that I input `abc` into the search box, the following should occur:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我在搜索框中输入 `abc`，以下应该发生：
- en: The search button should be clicked on
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该点击搜索按钮
- en: At least one result should be received
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应至少收到一个结果
- en: 'The preceding specification describes a basic search feature. Nothing in the
    preceding specification describes a controller, directive, or service; it only
    describes the expected application behavior. If a user were to test the specification,
    they may perform the following steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的规范描述了一个基本搜索功能。前面的规范中没有描述控制器、指令或服务；它只描述了预期的应用程序行为。如果用户要测试该规范，他们可能执行以下步骤：
- en: Point the browser to the website.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将浏览器指向网站。
- en: Select the input field.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择输入字段。
- en: Type `abc` in the input field.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在输入字段中输入 `abc`。
- en: Click on the **Search** button.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **搜索** 按钮。
- en: Confirm that the search output displays at least one result.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认搜索输出至少显示一个结果。
- en: The structure and syntax of Protractor mirrors that of Jasmine and the tests
    we have written in [Chapter 3](ch03.html "Chapter 3. The Karma Way"), *The Karma
    Way*. We can think of Protractor as a wrapper around Jasmine, with added features
    to support end-to-end testing. To write an end-to-end test with Protractor, we
    can follow the same steps that we just saw, but with the code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Protractor的结构和语法与Jasmine和我们已在[第3章](ch03.html "第3章。Karma方式")中编写的测试相似，*Karma方式*。我们可以将Protractor视为Jasmine的一个包装器，增加了支持端到端测试的功能。要使用Protractor编写端到端测试，我们可以遵循我们刚才看到的相同步骤，但使用代码。
- en: 'Here are the steps with code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是带有代码的步骤：
- en: 'Point the browser to the website:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将浏览器指向网站：
- en: '[PRE4]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Select the input field:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择输入字段：
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Type `abc` in the input field:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在输入字段中输入 `abc`：
- en: '[PRE6]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Click on the **Search** button:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **搜索** 按钮：
- en: '[PRE7]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Find the search result details on the page:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面上找到搜索结果详情：
- en: '[PRE8]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, the assertion needs to be made that at least one or more search results
    are available on the screen:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，需要断言屏幕上至少有一个或多个搜索结果可用：
- en: '[PRE9]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As a complete test, the code will be as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 作为完整的测试，代码将如下所示：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That's it! When Protractor runs, it will open a browser, go to the website,
    follow the instructions, and finally check the expectations. The trick with end-to-end
    testing is having a clear vision of what the user specification is and then translating
    that specification to code.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！当Protractor运行时，它将打开浏览器，访问网站，遵循指示，并最终检查期望。端到端测试的技巧是有一个清晰的用户规范愿景，然后将该规范转换为代码。
- en: The previous example is a high-level view of what will be described throughout
    this chapter. Now that we have been introduced to Protractor, the rest of the
    chapter will show how Protractor works behind the scenes, how to install it, and
    finally, walk us through a complete example using TDD.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例是本章将描述的内容的高级概述。现在我们已经介绍了Protractor，本章的其余部分将展示Protractor在幕后是如何工作的，如何安装它，最后，通过一个使用TDD的完整示例来引导我们。
- en: Origins of Protractor
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Protractor的起源
- en: Protractor is not the first end-to-end testing tool that the Angular team built.
    The first tool was called **Scenario Runner**. In order to understand why Protractor
    was built, we need to first look at its predecessor--Scenario Runner.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Protractor不是Angular团队构建的第一个端到端测试工具。第一个工具被称为**Scenario Runner**。为了理解为什么构建了Protractor，我们首先需要看看它的前身--Scenario
    Runner。
- en: Scenario Runner is in the maintenance mode and has reached the end of its life.
    It has been deprecated in the place of Protractor. In this section, we will look
    at what Scenario Runner was and what gaps the tool had.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Scenario Runner处于维护模式，并已到达其生命的尽头。它已被Protractor取代。在本节中，我们将探讨Scenario Runner是什么以及该工具存在的空白。
- en: The birth of Protractor
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Protractor的诞生
- en: 'Julie Ralph is the primary contributor of Protractor. According to Julie Ralph,
    the motivation for Protractor was based on the following experience with the Angular
    Scenario Runner on another project within Google ([http://javascriptjabber.com/106-jsj-protractor-with-julie-ralph/](http://javascriptjabber.com/106-jsj-protractor-with-julie-ralph/)):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Julie Ralph是Protractor的主要贡献者。据Julie Ralph所说，Protractor的动机基于以下在Google内部另一个项目中对Angular
    Scenario Runner的经验([http://javascriptjabber.com/106-jsj-protractor-with-julie-ralph/](http://javascriptjabber.com/106-jsj-protractor-with-julie-ralph/))：
- en: '*"We tried using the Scenario Runner. And we found that it really just couldn''t
    do the things that we needed to test. We needed to test things like logging in.
    Your login page isn''t an Angular page, and the Scenario Runner couldn''t deal
    with that. And it couldn''t deal with things like popups and multiple windows,
    navigating the browser history, stuff like that."*'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"我们尝试使用Scenario Runner。我们发现它真的无法完成我们需要测试的事情。我们需要测试登录等功能。您的登录页面不是Angular页面，Scenario
    Runner无法处理这种情况。它也无法处理弹出窗口、多个窗口、浏览历史记录导航等问题。"*'
- en: Based on her experience with the Scenario Runner, Julie Ralph decided to create
    Protractor to fill the gaps.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 基于她对Scenario Runner的使用经验，Julie Ralph决定创建Protractor来填补空白。
- en: 'Protractor takes advantage of the maturity of the Selenium project, and wraps
    up its methods so that it can be easily used for Angular projects. Remember, Protractor
    is about testing through the eyes of the user. It was designed to test all the
    layers of an application: web UI, backend services, persistence layer, and so
    on.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Protractor利用了Selenium项目的成熟度，并封装了其方法，以便它可以轻松用于Angular项目。记住，Protractor是通过用户的角度进行测试的。它被设计来测试应用程序的所有层：Web
    UI、后端服务、持久化层等。
- en: Life without Protractor
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 没有Protractor的生活
- en: Unit testing is not the only testing that needs to be written and maintained.
    Unit tests focus on small individual components of an application. By testing
    small components, the confidence in the code and logic grows. Unit tests don't
    focus on how the complete system works when interconnected.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试不是唯一需要编写和维护的测试。单元测试关注应用程序的小型单个组件。通过测试小型组件，代码和逻辑的信心增强。单元测试不关注当相互连接时整个系统是如何工作的。
- en: 'End-to-end testing with Protractor allows the developer to focus on the complete
    behavior of a feature or module. Going back to the search example, the test should
    only pass if the whole user specification passes; enter data into the search box,
    click on the **Search** button, and see the results. Protractor is not the only
    end-to-end testing framework out there, but it is the best choice for Angular
    applications. Here are a few reasons why you should choose Protractor:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Protractor进行端到端测试允许开发者专注于一个功能或模块的完整行为。回到搜索示例，测试应该只在整个用户规范通过时才通过；在搜索框中输入数据，点击**搜索**按钮，并查看结果。Protractor不是唯一的端到端测试框架，但它是Angular应用程序的最佳选择。以下是您应该选择Protractor的几个原因：
- en: It is documented throughout the Angular tutorials and examples
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在Angular教程和示例中都有文档记录
- en: It can be written using multiple JavaScript testing frameworks, including Jasmine
    and Mocha
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以使用多个JavaScript测试框架编写，包括Jasmine和Mocha
- en: It provides convenience methods for Angular components, including waiting for
    a page to load, expectations on promises, and so on
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为 Angular 组件提供便利方法，包括等待页面加载、对承诺的期望等
- en: It wraps Selenium methods that automatically wait for promises to be fulfilled
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它封装了 Selenium 方法，这些方法会自动等待承诺得到满足
- en: It is supported by **SaaS** (**Software as a Service**) providers, such as Sauce
    Labs, which is available at [https://saucelabs.com/](https://saucelabs.com/)
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它由 **SaaS**（**软件即服务**）提供商支持，例如 Sauce Labs，可在 [https://saucelabs.com/](https://saucelabs.com/)
    找到
- en: It is supported and maintained by the same company that maintains Angular and
    Google
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它由维护 Angular 和 Google 的同一家公司支持和维护。
- en: Getting ready with Protractor
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备使用 Protractor
- en: It's time to start getting our hands dirty and install and configure Protractor.
    Installations and applications are constantly changing. The main focus will be
    on the specific configuration used in this book, and not an in-depth installation
    guide. There are several different configurations, so review the Protractor site
    for additional details. To find the latest installation and configuration guide,
    visit [http://angular.github.io/protractor/](http://angular.github.io/protractor/).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候开始动手安装和配置 Protractor 了。安装和应用程序不断变化。主要关注的是本书中使用的特定配置，而不是深入的安装指南。有几种不同的配置，因此请查阅
    Protractor 网站，以获取更多详细信息。要找到最新的安装和配置指南，请访问 [http://angular.github.io/protractor/](http://angular.github.io/protractor/)。
- en: Installation prerequisites
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 WebDriver 的先决条件
- en: 'Protractor has the following prerequisites:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Protractor 有以下先决条件：
- en: '**Node.js**: Protractor is a Node.js module available using npm. The best way
    to install Node.js is to follow the instructions on the official site at [http://nodejs.org/download/](http://nodejs.org/download/).'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js**：Protractor 是一个使用 npm 可用的 Node.js 模块。安装 Node.js 的最佳方式是遵循官方站点 [http://nodejs.org/download/](http://nodejs.org/download/)
    上的说明。'
- en: '**Chrome**: This is a web browser built by Google. It will be used to run end-to-end
    tests in Protractor without the need for a Selenium server. Follow the installation
    instructions on the official site at [http://www.google.com/chrome/browser/](http://www.google.com/chrome/browser/).'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chrome**：这是由 Google 构建的 Web 浏览器。它将在 Protractor 中运行端到端测试，而无需 Selenium 服务器。请遵循官方站点
    [http://www.google.com/chrome/browser/](http://www.google.com/chrome/browser/)
    上的安装说明。'
- en: '**Selenium WebDriver for Chrome**: This is a tool that allows you to interact
    with web applications. Selenium WebDriver is provided with the Protractor `npm`
    module. We will walk through the instructions as we install Protractor.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chrome 的 Selenium WebDriver**：这是一个允许您与 Web 应用程序交互的工具。Selenium WebDriver 与
    Protractor 的 `npm` 模块一起提供。我们将按照安装 Protractor 的说明进行操作。'
- en: Installing Protractor
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Protractor
- en: 'Here are the steps to install Protractor:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Protractor 的步骤如下：
- en: 'Once Node.js is installed and available in the Command Prompt, type the following
    command to install Protractor in the current directory:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 Node.js 安装并可在命令提示符中使用，请输入以下命令以在当前目录中安装 Protractor：
- en: '[PRE11]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding command uses Node's `npm` command to install Protractor in the
    current local directory.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面的命令使用 Node 的 `npm` 命令在当前本地目录中安装 Protractor。
- en: To use Protractor in the Command Prompt, use the relative path to the Protractor
    bin directory.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在命令提示符中使用 Protractor，请使用 Protractor bin 目录的相对路径。
- en: 'Test that the Protractor version can be determined as follows:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式测试 Protractor 版本是否可以确定：
- en: '[PRE12]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Installing WebDriver for Chrome
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Chrome WebDriver
- en: 'Here are the steps to install WebDriver for Chrome:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Chrome WebDriver 的步骤如下：
- en: 'To install Selenium WebDriver for Chrome, go to the `webdriver-manager` executable
    in the Protractor `bin` directory that can be found at `./node_modules/protractor/bin/`,
    and type the following:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装 Chrome 的 Selenium WebDriver，请转到 Protractor 的 `bin` 目录中的 `webdriver-manager`
    可执行文件，该文件位于 `./node_modules/protractor/bin/`，然后输入以下内容：
- en: '[PRE13]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Confirm the directory structure.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认目录结构。
- en: The preceding command will create a Selenium directory containing the required
    Chrome driver used in the project.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面的命令将在项目中创建一个包含所需 Chrome 驱动程序的 Selenium 目录。
- en: The installation is now complete. Both Protractor and Selenium WebDriver for
    Chrome have been installed. We can now move on to the configuration.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 安装现已完成。Protractor 和 Chrome 的 Selenium WebDriver 都已安装。我们现在可以继续进行配置。
- en: Customizing configuration
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义配置
- en: 'In this section, we will be configuring Protractor using the following steps:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将按照以下步骤配置 Protractor：
- en: Start with a standard template configuration.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从标准模板配置开始。
- en: Fortunately, the Protractor installation comes with some base configurations
    in its installation directory.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 幸运的是，Protractor的安装目录中包含了一些基本的配置。
- en: The one that we will use is called `conf.js`  located in the `protractor/example`
    section.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用的是位于`protractor/example`部分的名为`conf.js`的文件。
- en: 'Review the example configuration file:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看示例配置文件：
- en: 'The `capabilities` parameter should only specify the name of the browser:'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`capabilities`参数应仅指定浏览器的名称：'
- en: '[PRE14]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The framework parameter should specify the testing framework name, and we will
    use Jasmine here:'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`framework`参数应指定测试框架的名称，我们将在这里使用Jasmine：'
- en: '[PRE15]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The final important configuration is the source file declaration:'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后一个重要的配置是源文件声明：
- en: '[PRE16]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Excellent! Now we have Protractor installed and configured.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在我们已经安装并配置了Protractor。
- en: Confirming the installation and configuration
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确认安装和配置
- en: 'To confirm installation, Protractor requires at least one file defined in the
    `specs` configuration section. Before adding a real test and complicating things,
    create an empty file called `confirmConfigTest.js` in the root directory. Then,
    edit the `conf.js` file located in the project root and add the test file to the
    `specs` section so that it looks as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认安装，Protractor至少需要一个在`specs`配置部分中定义的文件。在添加真实测试并使事情复杂化之前，请在根目录中创建一个名为`confirmConfigTest.js`的空文件。然后，编辑位于项目根目录中的`conf.js`文件，并将测试文件添加到`specs`部分，使其看起来如下：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To confirm that Protractor has been installed, run Protractor by going to the
    root of our project directory and type the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认Protractor已经安装，请进入项目目录的根目录，并输入以下命令：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If everything was set up correctly and installed, we will see something similar
    to this in our Command Prompt:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切设置正确并且安装成功，我们将在命令提示符中看到类似以下的内容：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Common installation and configuration issues
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见的安装和配置问题
- en: 'The following are some common issues that you might come across while installing
    WebDriver for Chrome:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些在安装Chrome WebDriver时可能会遇到的一些常见问题：
- en: '| **Issues** | **Solution** |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| **问题** | **解决方案** |'
- en: '| Selenium not installed correctly | If the tests have errors related to the
    Selenium WebDriver location, you need to ensure that you followed the steps to
    update WebDriver. The update step downloads the WebDriver components into the
    local Protractor installation folder. Until WebDriver has been updated, you won''t
    be able to reference it in the Protractor configuration. An easy way to confirm
    the update is to look in the Protractor directory and ensure that a Selenium folder
    exists. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| Selenium未正确安装 | 如果测试出现与Selenium WebDriver位置相关的错误，您需要确保您已遵循更新WebDriver的步骤。更新步骤会将WebDriver组件下载到本地的Protractor安装文件夹中。在WebDriver更新之前，您无法在Protractor配置中引用它。一个简单的方法是查看Protractor目录，并确保存在一个Selenium文件夹。|'
- en: '| Unable to find tests | When no tests are executed by Protractor, it can be
    frustrating. The best place to start is in the configuration file. Ensure that
    the relative paths and any filenames or extensions are correct. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 找不到测试 | 当Protractor没有执行任何测试时，可能会让人感到沮丧。最好的开始地方是配置文件。请确保相对路径以及任何文件名或扩展名都是正确的。|'
- en: For a complete list, refer to the official Protractor site at [http://angular.github.io/protractor/](http://angular.github.io/protractor/).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整列表，请参阅官方Protractor网站[http://angular.github.io/protractor/](http://angular.github.io/protractor/)。
- en: Integrating Protractor with Angular
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Protractor集成到Angular中
- en: So far, we have seen how to install and configure Protractor and we also have
    a basic overview of how Protractor works. In this section, we will go through
    with the process of integrating Protractor in an existing Angular project, where
    we just have unit testing and will see how Protractor is used in e2e testing in
    real life.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何安装和配置Protractor，我们还对Protractor的工作原理有一个基本的概述。在本节中，我们将介绍将Protractor集成到现有Angular项目中的过程，其中我们只有单元测试，并了解Protractor在实际的端到端测试中的应用。
- en: Getting the existing project
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取现有项目
- en: The code in this test will leverage the unit tested code from [Chapter 3](ch03.html
    "Chapter 3. The Karma Way"), *The Karma Way*. We will copy the code to a new directory
    called `angular-protractor`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试中的代码将利用来自[第3章](ch03.html "第3章。Karma方式")，“Karma方式”的单元测试代码。我们将把代码复制到一个名为`angular-protractor`的新目录中。
- en: 'As a reminder, the application is a to-do application that has some items in
    the to-do list; let''s add some more items to the list. It has a single component
    class, `AppComponent`, that has a list of items and an `add` method. The current
    code directory should be structured as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 作为提醒，该应用程序是一个待办事项应用程序，其中包含一些待办事项列表中的项目；让我们再添加一些项目到列表中。它有一个单独的组件类，`AppComponent`，其中包含一个项目列表和一个`add`方法。当前的代码目录应该按照以下结构组织：
- en: '![Getting the existing project](img/image_04_001.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![获取现有项目](img/image_04_001.jpg)'
- en: 'After getting this structure, the first job is to get the required dependencies,
    `node_modules` locally by running the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在获得这种结构后，第一项任务是运行以下命令，在本地获取所需的依赖项`node_modules`：
- en: '[PRE20]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This will install all the required modules; next, let''s build and run the
    project with the `npm` command:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装所有必需的模块；接下来，让我们使用`npm`命令构建和运行项目：
- en: '[PRE21]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Everything should be fine; the project should run on `http://localhost:3000`
    and the output should be as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都应该正常；项目应该在`http://localhost:3000`上运行，输出应该如下所示：
- en: '![Getting the existing project](img/image_04_002.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![获取现有项目](img/image_04_002.jpg)'
- en: And yes, we are ready to go to the next step to implement Protractor in our
    Angular project.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我们已经准备好进入下一步，在 Angular 项目中实现 Protractor。
- en: The Protractor setup flow
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Protractor 设置流程
- en: 'The setup will mirror the installation and configuration steps that we saw
    earlier in this chapter:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 设置将与我们在本章前面看到的安装和配置步骤相匹配：
- en: Install Protractor.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Protractor。
- en: Update Selenium WebDriver.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 Selenium WebDriver。
- en: Configure Protractor based on the example configuration.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据示例配置配置 Protractor。
- en: We will follow the Protractor installation and configuration steps we have covered
    in the previous section in a new project directory. The only difference is that
    the Protractor tests could be named with e2e prefix, such as `**.e2e.js`. This
    will allow us to easily identify the Protractor tests in our project structure.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在新的项目目录中遵循我们在上一节中涵盖的 Protractor 安装和配置步骤。唯一的区别是 Protractor 测试可以带有 e2e 前缀，例如`**.e2e.js`。这将使我们能够轻松地在项目结构中识别
    Protractor 测试。
- en: Tip
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: This absolutely depends on a developer's choice; some people just put the Protractor
    test in a new directory with a subfolder, `spec/e2e`. It's just part of structuring
    the project.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这完全取决于开发者的选择；有些人只是将 Protractor 测试放在一个新的目录中，并有一个子目录，`spec/e2e`。这只是项目结构的一部分。
- en: Installing Protractor
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Protractor
- en: We might have Protractor set up globally or we might not, so it's always great
    to have Protractor installed in the project. And so, we will have Protractor installed
    locally and will add in `package.json` as `devDependency`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能已经全局设置了 Protractor，也可能没有，所以总是很好在项目中安装 Protractor。因此，我们将本地安装 Protractor 并将其添加到`package.json`中作为`devDependency`。
- en: 'To install Protractor in our project, run this command from the project directory:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的项目中安装 Protractor，请从项目目录运行此命令：
- en: '[PRE22]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can check Protractor as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以如下检查 Protractor：
- en: '[PRE23]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This should provide the latest version, 4.0.10, as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该提供最新版本，4.0.10，如下所示：
- en: '[PRE24]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Tip
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**A good practice that we will follow**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们将遵循的良好实践**'
- en: 'We showed how to set up Protractor in a directory, but its good to have Protractor
    globally installed with the following command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们展示了如何在目录中设置 Protractor，但最好使用以下命令全局安装 Protractor：
- en: '[PRE25]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This is so that we can use it easily to call Protractor from the command shell
    as with `protractor`; to know the Protractor version, we can call it as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们可以轻松地从命令行调用 Protractor，就像使用`protractor`一样；要了解 Protractor 版本，我们可以如下调用它：
- en: '[PRE26]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Updating WebDriver
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新 WebDriver
- en: 'To update Selenium WebDriver, go to the `webdriver-manager` executable in the
    Protractor `bin` directory that can be found at `./node_modules/protractor/bin/` and
    type the following:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新 Selenium WebDriver，请转到 Protractor 的`bin`目录中的`webdriver-manager`可执行文件，该文件位于`./node_modules/protractor/bin/`，并输入以下内容：
- en: '[PRE27]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'A good practice to follow, as informed, we will install Protractor globally,
    and if so, we will have the `webdriver-manager` command global as well, so that,
    we can easily run it for `update`, as shown here:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 根据通知，我们将全局安装 Protractor，如果这样做，我们也将全局安装`webdriver-manager`命令，这样我们就可以轻松地运行它进行`update`，如下所示：
- en: '[PRE28]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This will update WebDriver and will support the latest browsers.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这将更新 WebDriver 并支持最新浏览器。
- en: Getting ready
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: As we have cloned the sample quick start project, it has already integrated
    and configured Protractor in the project. For the purpose of learning, we would
    like to integrate Protractor in the existing project.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经克隆了快速入门项目样本，该项目已经集成了并配置了Protractor。为了学习目的，我们希望在现有项目中集成Protractor。
- en: To do so, we will have to remove the existing `protractor.config.js` file from
    the project root directory.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们必须从项目根目录中删除现有的`protractor.config.js`文件。
- en: Setting up the core configuration
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置核心配置
- en: As we have seen earlier, Protractor configurations will be stored in a JS file.
    We will need to create a configuration file in our project root; let's name it
    as `protractor.config.js`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所见，Protractor配置将存储在一个JS文件中。我们需要在项目根目录中创建一个配置文件；让我们将其命名为`protractor.config.js`。
- en: 'For the time being, keep the changeable fields empty, as these are on the project
    structure and configuration dependent. So, the initial look could be something
    like this and these configuration options are known to us:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，请保持可变字段为空，因为这些字段取决于项目结构和配置。因此，初始外观可能如下所示，并且这些配置选项是我们所熟知的：
- en: '[PRE29]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'As long as our project will run locally on port `3000`, our `baseUrl` variable
    will be as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 只要我们的项目在本地端口`3000`上运行，我们的`baseUrl`变量将如下所示：
- en: '[PRE30]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We are planning to keep our e2e test spec in the same folder where we put the
    unit test files, `app/app.component.spec.ts`. This time it will have a new e2e
    prefix and will look like `app/app.component.e2e.ts`. Based on that, our specs
    and config will be updated:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计划将我们的端到端测试spec放在与单元测试文件相同的文件夹中，即`app/app.component.spec.ts`。这次它将有一个新的e2e前缀，看起来像`app/app.component.e2e.ts`。基于这一点，我们的spec和配置将更新：
- en: '[PRE31]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'As long as it''s an Angular project, we need to pass an extra configuration,
    `useAllAngular2AppRoots: true`, as it will tell Protractor to wait for all the
    Angular apps'' root elements on the page instead of just the one root element
    matching:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '只要是一个Angular项目，我们需要传递一个额外的配置，`useAllAngular2AppRoots: true`，因为它将告诉Protractor等待页面上所有Angular应用的根元素，而不仅仅是匹配的一个根元素：'
- en: '[PRE32]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We are running our project via the node server; so, we need to pass one more
    configuration option so that Jasmine itself supports node. This configuration
    is a must to pass in the Jasmine 2.x version, but we may not need it if we use
    Jasmine 1.x. Here, we have added the two most common options in `jasmineNodeOpts`;
    there are a few that are used based on requirements:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过node服务器运行我们的项目；因此，我们需要传递一个额外的配置选项，以便Jasmine本身支持node。这个配置在Jasmine 2.x版本中是必须的，但如果我们使用Jasmine
    1.x，可能不需要它。在这里，我们在`jasmineNodeOpts`中添加了两个最常用的选项；有一些是基于需求使用的：
- en: '[PRE33]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Diving into the test specifics
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深入测试细节
- en: 'To run the Protractor test, we need two files: one is the configuration file
    that we already created in our project root as `protractor.conf.js`, and the next
    one is the spec, where we will define the e2e test spec, and that one will be
    located in the app folder as `app/app.component.e2e.ts`.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行Protractor测试，我们需要两个文件：一个是我们在项目根目录中已经创建的配置文件，名为`protractor.conf.js`，另一个是spec文件，我们将在这里定义端到端测试spec，它将位于app文件夹中，名为`app/app.component.e2e.ts`。
- en: 'So, let''s see the file that we should define there:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们看看我们应该在那里定义的文件：
- en: '[PRE34]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: These syntaxes should be known to us as we already used the Jasmine syntax in
    our unit test suite as well.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这些语法应该是我们所熟知的，因为我们已经在单元测试套件中使用了Jasmine语法。
- en: Let's have a quick recap
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速回顾一下
- en: '`describe`: This contains the block of codes to run the test suite'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`describe`：这个包含要运行的测试套件的代码块。'
- en: '`beforeEach`: This is used to contain the setup code, which is used in every
    test spec'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beforeEach`：这个用于包含设置代码，它被用于每个测试spec中。'
- en: '`it`: This is used to define the test spec and contain the specific code for
    that test spec to run'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`it`：这个用于定义测试spec并包含运行该测试spec的特定代码。'
- en: The main part of running an e2e test for any website is to get the DOM elements
    of that website and then interact with those elements through the test process.
    And so, we will need to get the DOM elements of our running project.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 运行任何网站的端到端测试的主要部分是获取该网站的DOM元素，然后通过测试过程与这些元素交互。因此，我们需要获取我们正在运行的项目中的DOM元素。
- en: 'As long as the current project is running in the web browser, we will have
    to get the instance of the browser itself first; interestingly, Protractor provides
    that with the global browser object. With this browser object, we can get all
    browser-level commands, such as `browser.get`, and we can navigate through to
    our project URL:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 只要当前项目在浏览器中运行，我们首先需要获取浏览器本身的实例；有趣的是，Protractor 通过全局浏览器对象提供这一点。有了这个浏览器对象，我们可以获取所有浏览器级别的命令，例如
    `browser.get`，并且我们可以导航到我们的项目 URL：
- en: '[PRE35]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: With this `browser.get('')` method, we will navigate to the root of our project.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个 `browser.get('')` 方法，我们将导航到我们项目的根目录。
- en: 'We have the global browser object, with which we can get the title of the running
    page, which is basically, the title we defined here in the project `index.html`
    file. `browser.getTitle` will provide the title and then we can match that as
    expected. So, our test spec will look like this:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有全局浏览器对象，我们可以用它来获取正在运行的页面的标题，这基本上是我们在这里项目 `index.html` 文件中定义的标题。`browser.getTitle`
    将提供标题，然后我们可以按预期匹配它。所以，我们的测试规范将看起来像这样：
- en: '[PRE36]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If we take a quick look, our short e2e test spec will look as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们快速浏览一下，我们的简短端到端测试规范将看起来如下：
- en: '[PRE37]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Time to run the e2e test with Protractor. The command will look as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候使用 Protractor 运行端到端测试了。命令看起来如下所示：
- en: '[PRE38]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The result is as expected--0 failure as we have set the `index.html` page title
    to **Angular Protractor**.**** The result will be as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 结果正如预期--没有失败，因为我们已经将 `index.html` 页面标题设置为 **Angular Protractor**。结果将如下所示：
- en: '[PRE39]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Time to move on and add a new test spec for the rest of the DOM elements of
    the page, where we have list items listed on the page; so, we will test them automatically
    via Protractor.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候继续并添加一个新的测试规范来测试页面上剩余的 DOM 元素了，其中我们在页面上列出了列表项；因此，我们将通过 Protractor 自动测试它们。
- en: 'At first, we will check whether we have all the three items listed. We have
    already learned in an earlier section of this chapter about some Protractor common
    APIs, but a quick recap, we will use the `element.all` method by passing some
    locator (`by.css`, `by.id`, and `by.model`) to get the elements array object.
    And then, we can use the Jasmine matcher to match with the expected value, as
    shown:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将检查我们是否列出了所有三个项目。我们已经在本章的早期部分学习了关于一些 Protractor 常见 API 的内容，但快速回顾一下，我们将使用
    `element.all` 方法通过传递一些定位器（`by.css`、`by.id` 和 `by.model`）来获取元素数组对象。然后，我们可以使用 Jasmine
    匹配器与预期值匹配，如下所示：
- en: '[PRE40]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: We should get the result passed, as we have three items listed in the UI.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该得到通过的结果，因为我们已经在 UI 中列出了三个项目。
- en: 'We can add a few more test specs for testing the UI elements. For example,
    to check whether the items listed are in the correct order, we can check their
    label, as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以添加一些额外的测试规范来测试 UI 元素。例如，为了检查列出的项目是否按正确顺序排列，我们可以检查它们的标签，如下所示：
- en: '[PRE41]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We have matched the first and last item's label/text with the expected value
    and it should pass as well.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将第一个和最后一个项目的标签/文本与预期值匹配，它也应该通过。
- en: 'Let''s combine all the test specs in the e2e file. It will look like this:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将 e2e 文件中的所有测试规范合并起来。它将看起来像这样：
- en: '[PRE42]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Let''s run all the specs together:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一次性运行所有规范：
- en: '[PRE43]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'As expected, all the tests should pass and the result will be as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期，所有测试都应该通过，结果将如下所示：
- en: '[PRE44]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Tip
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: As long as we named our Protractor config file `protractor.conf.js`, we don't
    need to mention the configuration file name while running it with the `protractor`
    command; Protractor will get its configuration file by itself. With any other
    name, we should mention the configuration file name with Protractor.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 只要我们命名我们的 Protractor 配置文件为 `protractor.conf.js`，在运行时就不需要提及配置文件名；Protractor 会自己获取其配置文件。如果使用其他名称，我们应该在
    Protractor 中提及配置文件名。
- en: 'So, in this case, we can just run the test as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这种情况下，我们只需按照以下方式运行测试：
- en: '[PRE45]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The result will be the same as it was before.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将与之前相同。
- en: Running the test via NPM
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 NPM 运行测试
- en: 'In this project, we will build and run a project via npm. In [Chapter 3](ch03.html
    "Chapter 3. The Karma Way"), *The Karma Way*, we ran the `karma` test via `npm`;
    similarly, we will run the `protractor` test with `npm` as well. And to do so,
    we have to add `protractor` in the `scripts` section in `package.json` of our
    project:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将通过 npm 构建和运行项目。在 [第 3 章](ch03.html "第 3 章。Karma 方法")，*Karma 方法*中，我们通过
    `npm` 运行了 `karma` 测试；同样，我们也将通过 `npm` 运行 `protractor` 测试。为此，我们必须在我们的项目 `package.json`
    的 `scripts` 部分添加 `protractor`：
- en: '[PRE46]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'To install `protractor` in our project, run from the project directory:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的项目中安装 `protractor`，从项目目录运行：
- en: '[PRE47]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In some OSes, this command may produce some `npm` error. This is actually for
    `webdriver-manager`, which may not updated. To solve this we have to add the `webdriver-manager`
    update script to `npm` and run it only once at the very first time, like this:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些操作系统上，此命令可能会产生一些`npm`错误。这实际上是针对`webdriver-manager`的，可能没有更新。为了解决这个问题，我们必须将`webdriver-manager`更新脚本添加到`npm`中，并在第一次运行时只运行一次，如下所示：
- en: '[PRE48]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We also have to run it as:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须以以下方式运行它：
- en: '[PRE49]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: That's it, we are ready to run the e2e test again and this should work exactly
    the same as the `protractor` command.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，我们准备好再次运行e2e测试，这应该与`protractor`命令完全相同。
- en: 'Let''s confirm this:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确认这一点：
- en: '[PRE50]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The expected result will be as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 预期的结果将如下所示：
- en: '[PRE51]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Making the test better
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高测试质量
- en: 'There are a couple of things that were discussed in this chapter that need
    further clarification. These include the following:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中讨论的一些内容需要进一步澄清。这些包括以下内容：
- en: Where is the asynchronous logic?
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步逻辑在哪里？
- en: How do we really implement TDD with end-to-end tests?
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们究竟如何真正地通过端到端测试实现TDD？
- en: Async magic
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步魔法
- en: 'In the preceding tests, we saw some magic that you might be questioning. Here
    are some of the magic components that we glanced over:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的测试中，我们看到了一些你可能质疑的魔法。以下是我们简要了解的一些魔法组件：
- en: Loading a page before test execution
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在测试执行前加载页面
- en: Assertion on elements that get loaded in promises
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在承诺中加载的元素上的断言
- en: Loading a page before test execution
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在测试执行前加载页面
- en: 'In the previous test, we used the following code to specify that the browser
    should point to the home page:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的测试中，我们使用了以下代码来指定浏览器应指向主页：
- en: '[PRE52]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The preceding command will launch the browser and navigate to the `baseUrl`
    location. Once the browser reaches the page, it will have to load Angular and
    then implement the Angular-specific functions. Our tests don't have any wait logic,
    and this is part of the beauty of Protractor with Angular. The waiting for page
    loading is already built into the framework for us. Our tests can then be written
    very cleanly.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将启动浏览器并导航到`baseUrl`位置。一旦浏览器到达页面，它将必须加载Angular并实现Angular特定的功能。我们的测试没有任何等待逻辑，这正是Protractor与Angular结合的美丽之处。页面加载的等待已经为我们内置到框架中。然后我们可以非常干净地编写测试。
- en: Assertion on elements that get loaded in promises
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在承诺中加载的元素上的断言
- en: 'The assertions and expectations already have promise fulfillment written in
    them. In the case of our test, we wrote the assertion so that it expects the count
    to be `3`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 断言和期望已经包含了承诺满足的代码。在我们的测试中，我们编写断言，使其期望计数为`3`：
- en: '[PRE53]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'However, in reality, we may have thought that we needed to add asynchronous
    testing to the assertion in order to wait for the promise to be fulfilled, involving
    something more complicated like the following:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在现实中，我们可能认为我们需要将异步测试添加到断言中，以便等待承诺得到满足，涉及一些更复杂的东西，如下所示：
- en: '[PRE54]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The preceding code is longer, more granular, and more difficult to read. Protractor
    has the ability to make tests more concise for certain elements built in to expectations.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码更长，更细粒度，也更难以阅读。Protractor具有使测试对某些内置期望的元素更加简洁的能力。
- en: TDD with Protractor
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Protractor进行TDD
- en: 'With our first test, there is a clear distinction of end-to-end tests and unit
    tests. With the unit test, we focused on strong coupling the test to the code.
    As an example, our unit test spied on the scope for a specific component class,
    `AppComponent`. We have to initiate the component to get the instance of the component,
    as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个测试中，端到端测试和单元测试之间有一个清晰的区分。在单元测试中，我们关注将测试与代码紧密耦合。例如，我们的单元测试监视了特定组件类`AppComponent`的作用域。我们必须初始化组件以获取组件的实例，如下所示：
- en: '[PRE55]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: In the Protractor test, we don't care about which component class we are testing
    and our focus is on the user perspective of the test. We start with the selection
    of a particular element within the DOM; in our case, that element is tied to Angular.
    The assertion is that the number of elements for a specific repeater is equal
    to the expected count.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在Protractor测试中，我们不关心我们正在测试哪个组件类，我们的重点是测试的用户视角。我们从选择DOM中的特定元素开始；在我们的例子中，该元素与Angular相关联。断言是特定重复器的元素数量等于预期的计数。
- en: With the loose coupling of the end-to-end test, we can write a test that focuses
    on the user specification, which initially displays three elements, and then have
    the freedom to write that in the page, class, component, and so on, in the way
    we want.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 通过端到端测试的松散耦合，我们可以编写一个专注于用户需求的测试，最初显示三个元素，然后有自由选择在页面、类、组件等地方以我们想要的方式编写。
- en: Self-test questions
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自我测试问题
- en: Use TDD with Protractor to develop the third development to-do list item.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Protractor 进行 TDD 开发第三个开发待办事项。
- en: Q1\. Which of the following frameworks does Protractor use?
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. Protractor 使用以下哪个框架？
- en: Selenium
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Selenium
- en: Unobtanium
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unobtanium
- en: Karma
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Karma
- en: Q2\. You can install Protractor with any existing Angular project.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. 你可以使用任何现有的 Angular 项目安装 Protractor。
- en: 'True'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误
- en: Q3\. Karma and Protractor can run together in a single project.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: Q3\. Karma 和 Protractor 可以在单个项目中一起运行。
- en: 'True'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误
- en: Q4\. Which team has developed Protractor?
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: Q4\. 哪个团队开发了 Protractor？
- en: ReactJS team
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReactJS 团队
- en: Angular team
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 团队
- en: NodeJS team
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NodeJS 团队
- en: Summary
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter gave us an overview of end-to-end testing with Protractor and also
    provided the necessary idea to install, configure, and apply end-to-end testing
    with an existing Angular project. Protractor is an important part of testing any
    Angular application. It bridges the gap to ensure that a user's specifications
    work as expected. When end-to-end tests are written according to user specifications,
    the confidence of the application and ability to refactor grows. In the upcoming
    chapters, we will see how to apply Karma and Protractor in more depth with simple
    and straightforward examples.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为我们提供了使用 Protractor 进行端到端测试的概述，并提供了安装、配置和使用现有 Angular 项目进行端到端测试的必要思路。Protractor
    是测试任何 Angular 应用程序的重要组成部分。它架起了桥梁，确保用户的规格工作如预期。当端到端测试根据用户规格编写时，应用程序的信心和重构能力都会增强。在接下来的章节中，我们将通过简单直接示例深入了解如何应用
    Karma 和 Protractor。
- en: The next chapter will walk us through more details on Protractor with some advance
    configuration, details on some APIs, and it will also debug the tests.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将带我们深入了解 Protractor，包括一些高级配置、一些 API 的细节，并且还会调试测试。
