["```js\nexport class RecipeCreationComponent implements OnInit {\n  constructor(private formBuilder: FormBuilder) { }\n  recipeForm = this.formBuilder.group<Recipe>({\n    id: Math.floor(1000 + Math.random() * 9000),\n    title: '',\n    ingredients: '',\n    tags: '',\n    imageUrl: '',\n    cookingTime: undefined,\n    yield: 0,\n    prepTime: undefined,\n    steps: '',\n  });\n  tags = recipeTags.TAGS;\n```", "```js\nngOnInit(): void {\n    this.recipeForm.valueChanges.subscribe(\n      formValue => {\n        this.service.saveRecipe(<Recipe>formValue);\n      }\n    );\n```", "```js\nsaveRecipe(formValue: Recipe) : Observable<Recipe>  {\n  return this.http.post<Recipe>(`${BASE_PATH}/recipes`,\n    formValue);\n}\n```", "```js\nexport class RecipeCreationComponent implements OnInit {\n  constructor(private formBuilder: FormBuilder, private\n  service: RecipesService) { }\n  recipeForm = this.formBuilder.group<Recipe>({\n    id: Math.floor(1000 + Math.random() * 9000),\n    title: '',\n    ingredients: '',\n    tags: '',\n    imageUrl: '',\n    cookingTime: undefined,\n    yield: 0,\n    prepTime: undefined,\n    steps: '',\n  });\n  tags = recipeTags.TAGS;\n  ngOnInit(): void {\n    this.recipeForm.valueChanges\n      .subscribe(\n        formValue => {\n          this.service.saveRecipe(<Recipe>formValue);\n        }\n      );\n  }\n}\n```", "```js\nngOnInit(): void {\n    this.recipeForm.valueChanges.subscribe(\n      formValue => {\n        this.service.saveRecipe(<Recipe>formValue)\n          .subscribe(\n            result => this.saveSuccess(result),\n            errors => this.handleErrors(errors)\n          );\n      }\n    );\n```", "```js\n  valueChanges$ = this.recipeForm.valueChanges.pipe(\n    concatMap(formValue =>\n      this.service.saveRecipe(<Recipe>formValue)),\n    catchError(errors => of(errors)),\n    tap(result => this.saveSuccess(result))\n  );\n```", "```js\nexport class RecipeCreationComponent {\n  constructor(private formBuilder: FormBuilder, private\n  service: RecipesService) { }\n  recipeForm = this.formBuilder.group<Recipe>({\n    id: Math.floor(1000 + Math.random() * 9000),\n    title: '',\n    ingredients: '',\n    tags: '',\n    imageUrl: '',\n    cookingTime: undefined,\n    yield: 0,\n    prepTime: undefined,\n    steps: '',\n  });\n  tags = recipeTags.TAGS;\n  valueChanges$ = this.recipeForm.valueChanges.pipe(\n    concatMap(formValue =>\n      this.service.saveRecipe(<Recipe>formValue)),\n    catchError(errors => of(errors)),\n    tap(result => this.saveSuccess(result))\n  );\n  saveSuccess(_result: Recipe) {\n    console.log('Saved successfully');\n  }\n}\n```", "```js\n<ng-container *ngIf=\"valueChanges$ | async\">\n  </ng-container>\n/** All the form code here**/\n```", "```js\nrecipes$ = this.pageNumberChange$.pipe(\n    concatMap((pageNumber) =>\n      this.http.get<Recipe[]>(`${BASE_PATH}/recipes`, {\n        params: {\n          page: pageNumber,\n          limit: 10,\n        },\n      })\n    )\n  );\n```", "```js\nvalueChanges$ = this.recipeForm.valueChanges.pipe(\n    switchMap(formValue =>\n      this.service.saveRecipe(<Recipe>formValue)),\n    catchError(errors => of(errors)),\n    tap(result => this.saveSuccess(result))\n  );\n```", "```js\n    private searchTerms = new BehaviorSubject<string>('');\n    ```", "```js\n        updateSearchTerm(searchTerm: string) {\n          this.searchTerms.next(searchTerm);\n        }\n    ```", "```js\n      getTags$: (term: string) => Observable<Tag[]> =\n      (term: string) => {\n        return this.http.get<Tag[]>(`${BASE_PATH}/tags`,\n          {  params: { criteria: term }  });\n      };\n    ```", "```js\ntagValues$ = this.searchTerms.pipe(\ndistinctUntilChanged(), // ignore if next search term is\n                           same as previous\nswitchMap((term: string) => this.service.getTags$(term))\n// switch to new Observable each time\n  );\n```", "```js\n  <div class=\"col-3\">\n      <label for=\"Tags\">Tags</label>\n      @if (tagValues$ | async; as tags) {\n          <p-autoComplete formControlName=\"tags\"\n          [suggestions]=\"tags\"\n          (completeMethod)=\n          \"updateSearchTerm($event.query)\"\n          field=\"name\"></p-autoComplete>\n      }\n  </div>\n```", "```js\n  selectedTags$ = from(['Salty', 'Sweet', 'Healthy']);\n  recipesByTag$ = this.selectedTags$.pipe(\n    mergeMap(tag =>\n      this.getRecipesByTag(tag)),mergeAll(),toArray());\n  getRecipesByTag(name: string): Observable<Recipe[]> {\n    return this.http.get<Recipe[]>(\n      `${BASE_PATH}/recipesByTags`, { params: { tagName:\n        name } });\n  }\n```", "```js\n  getRecipesReviews(recipeId: number): Observable<Review[]>\n  {\n    return from([`${BASE_PATH}/source1/reviews`,\n    `${BASE_PATH}/source2/reviews`])\n      .pipe(\n        mergeMap((endpoint) => this.http.get<Review[]>(\n          endpoint, { params: { recipeId: recipeId } })));\n  }\n```", "```js\n  private saveClick = new Subject<Boolean>();\n  private saveRecipe$ =\n    this.service.saveRecipe(<Recipe>this.recipeForm.value);\n  saveClick$ = this.saveClick.pipe(exhaustMap(() =>\n    this.service.saveRecipe(<Recipe>this.recipeForm.value))\n  );\n  saveRecipe() {\n    this.saveClick.next(true);\n  }\n```", "```js\n<ng-container *ngIf=\"saveClick$ | async\"></ng-container>\n<p-button class=\"recipe-button\" (click)=\"saveRecipe()\"\nlabel=\"Save\"></p-button>\n```"]