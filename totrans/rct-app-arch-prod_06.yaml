- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Integrating the API into the Application
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将API集成到应用程序中
- en: In the previous chapter, we went through setting up the mocked API, which we
    will be consuming in our application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了设置模拟API，这是我们将在应用程序中消费的API。
- en: In this chapter, we will be learning how to consume the API via the application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何通过应用程序消费API。
- en: When we say API, we mean the API backend server. We will learn how to fetch
    data from both the client and the server. For the HTTP client, we will be using
    **Axios**, and for handling fetched data, we will be using the **React Query**
    library, which allows us to handle API requests and responses in our React application.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们说API时，我们指的是API后端服务器。我们将学习如何从客户端和服务器获取数据。对于HTTP客户端，我们将使用**Axios**，而对于处理获取的数据，我们将使用**React
    Query**库，它允许我们在React应用程序中处理API请求和响应。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Configuring the API client
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置API客户端
- en: Configuring React Query
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置React Query
- en: Creating the API layer for the features
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为功能创建API层
- en: Using the API layer in the application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用程序中使用API层
- en: By the end of this chapter, we will know how to make our application communicate
    with the API in a clean and organized way.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将知道如何以干净和有序的方式使我们的应用程序与API进行通信。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before we get started, we need to set up our project. To be able to develop
    our project, we will need the following things installed on our computer:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们需要设置我们的项目。为了能够开发我们的项目，我们需要在计算机上安装以下内容：
- en: '**Node.js** version 16 or above and **npm** version 8 or above'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js**版本16或以上和**npm**版本8或以上'
- en: 'There are multiple ways to install Node.js and npm. Here is a great article
    that goes into more detail: [https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js](https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Node.js和npm有多种方式。这里有一篇很好的文章，详细介绍了更多细节：[https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js](https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js)。
- en: '**VSCode** (optional) is currently the most popular editor/IDE for JavaScript/TypeScript,
    so we will be using it. It is open source, has great integration with TypeScript,
    and we can extend its features via extensions. It can be downloaded from [https://code.visualstudio.com/](https://code.visualstudio.com/).'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VSCode**（可选）目前是JavaScript/TypeScript最受欢迎的编辑器/IDE，因此我们将使用它。它是开源的，与TypeScript有很好的集成，并且我们可以通过扩展来扩展其功能。可以从[https://code.visualstudio.com/](https://code.visualstudio.com/)下载。'
- en: 'The code files for this chapter can be found here: [https://github.com/PacktPublishing/React-Application-Architecture-for-Production](https://github.com/PacktPublishing/React-Application-Architecture-for-Production)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在以下位置找到：[https://github.com/PacktPublishing/React-Application-Architecture-for-Production](https://github.com/PacktPublishing/React-Application-Architecture-for-Production)
- en: 'The repository can be cloned locally with the following command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令在本地克隆仓库：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the repository has been cloned, we need to install the application’s dependencies:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦克隆了仓库，我们需要安装应用程序的依赖项：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can provide the environment variables using the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令提供环境变量：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once the dependencies have been installed, we need to select the right stage
    of the code base that matches this chapter. We can do that by executing the following
    command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖项安装完成后，我们需要选择与本章匹配的代码库的正确阶段。我们可以通过执行以下命令来完成：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This command will prompt us with a list of stages for each chapter:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将为我们提供每个章节的阶段列表：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is the sixth chapter, so we can select `chapter-06-start` if we want to
    follow along, or `chapter-06` to see the final results of this chapter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第六章，所以如果我们想跟随着学习，可以选择`chapter-06-start`，或者选择`chapter-06`来查看本章的最终结果。
- en: Once the chapter has been selected, all the files required to follow along with
    this chapter will appear.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了章节，所有跟随本章所需的文件都将出现。
- en: For more information about the setup details, check out the `README.md` file.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于设置细节的信息，请查看`README.md`文件。
- en: Configuring the API client
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置API客户端
- en: For the API client of our application, we will be using Axios, a very popular
    library for handling HTTP requests. It is supported in both the browser and the
    server and has an API for creating instances, intercepting requests and responses,
    canceling requests, and so on.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们应用程序的API客户端，我们将使用Axios，这是一个用于处理HTTP请求的非常流行的库。它在浏览器和服务器上都得到支持，并提供创建实例、拦截请求和响应、取消请求等功能。
- en: Let’s start by creating an instance of Axios, which will include some common
    things we want to be done on every request.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先创建一个 Axios 实例，这将包括我们希望在每次请求中完成的常见操作。
- en: 'Create the `src/lib/api-client.ts` file and add the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `src/lib/api-client.ts` 文件并添加以下内容：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we have created an Axios instance where we define a common base URL and
    the headers we want to include in each request.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个 Axios 实例，其中我们定义了一个公共基本 URL 和我们希望在每次请求中包含的标头。
- en: Then, we attached a response interceptor where we want to extract the data property
    from the response and return that to our client. We also defined the error interceptor
    where we want to log the error to the console.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在想要提取数据属性并返回给客户端的地方附加了一个响应拦截器。我们还定义了错误拦截器，其中我们想要将错误记录到控制台。
- en: Having an Axios instance configured is, however, not enough to handle requests
    in React components elegantly. We would still need to handle calling the API,
    waiting for the data to arrive, and storing it in a state. That’s where React
    Query comes into play.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，拥有一个配置好的 Axios 实例并不足以优雅地处理 React 组件中的请求。我们仍然需要处理调用 API、等待数据到达以及将其存储在状态中的操作。这就是
    React Query 发挥作用的地方。
- en: Configuring React Query
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 React Query
- en: React Query is a great library for handling async data and making it available
    in React components.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: React Query 是一个处理异步数据和使其在 React 组件中可用的优秀库。
- en: Why React Query?
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么选择 React Query？
- en: The main reason that React Query is a great option for handling the async remote
    state is the number of things it handles for us.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: React Query 是处理异步远程状态的一个很好的选择，主要原因是它为我们处理了很多事情。
- en: 'Imagine the following component, which loads some data from the API and displays
    it:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 想象以下组件，它从 API 加载数据并显示：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is fine if we fetch data from an API only once, but in most cases, we
    need to fetch it from many different endpoints. We can see that there is a certain
    amount of boilerplate here:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只从 API 获取一次数据，这没问题，但在大多数情况下，我们需要从许多不同的端点获取数据。我们可以看到这里有一些样板代码：
- en: The same `data`, `error`, and `isLoading` pieces of state need to be defined
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要定义相同的 `data`、`error` 和 `isLoading` 状态片段
- en: Different pieces of state must be updated accordingly
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须相应地更新不同的状态片段
- en: The data is thrown away as soon as we move away from the component
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们离开组件时，数据就会被丢弃
- en: 'That’s where React Query comes in. We can update our component to the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 React Query 发挥作用的地方。我们可以将我们的组件更新为以下内容：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice how the state handling is abstracted away from the consumer. We do not
    need to worry about storing the data, or handling loading and error states; everything
    is handled by React Query. Another benefit of React Query is its caching mechanism.
    For every query, we need to provide a corresponding query key that will be used
    to store the data in the cache.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意状态处理是如何从消费者中抽象出来的。我们不需要担心存储数据，或处理加载和错误状态；一切由 React Query 处理。React Query 的另一个好处是其缓存机制。对于每个查询，我们需要提供一个相应的查询键，该键将用于在缓存中存储数据。
- en: This also helps with the deduplication of requests. If we called the same query
    from multiple places, it would make sure the API requests happen only once.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这也有助于请求的去重。如果我们从多个地方调用相同的查询，它会确保 API 请求只发生一次。
- en: Configuring React Query
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 React Query
- en: 'Now, back to our application. We already have `react-query` installed. We just
    need to configure it for our application. The configuration needs a query client,
    which we can create in `src/lib/react-query.ts` and add the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到我们的应用程序。我们已经有 `react-query` 安装了。我们只需要为我们的应用程序配置它。配置需要一个查询客户端，我们可以在 `src/lib/react-query.ts`
    中创建它并添加以下内容：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: React Query comes with a default configuration that we can override during the
    query client creation. A full list of options can be found in the documentation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: React Query 在创建查询客户端时提供了一个默认配置，我们可以在创建过程中覆盖它。完整的选项列表可以在文档中找到。
- en: 'Now that we have created our query client, we must include it in the provider.
    Let’s head to `src/providers/app.tsx` and replace the content with the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的查询客户端，我们必须将其包含在提供者中。让我们前往 `src/providers/app.tsx` 并将内容替换为以下内容：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, we are importing and adding `QueryClientProvider`, which will make the
    query client and its configuration available for queries and mutations. Notice
    how we are passing our query client instance as the `client` prop.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在导入并添加 `QueryClientProvider`，这将使查询客户端及其配置可用于查询和突变。注意我们如何将查询客户端实例作为 `client`
    属性传递。
- en: We are also adding `ReactQueryDevtools`, which is a widget that allows us to
    inspect all queries. It only works in development, and that is very useful for
    debugging.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了`ReactQueryDevtools`，这是一个允许我们检查所有查询的小部件。它仅在开发中使用，这对于调试非常有用。
- en: Now that our `react-query` setup is in place, we can start implementing the
    API layer for the features.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了`react-query`，我们可以开始实现功能的API层。
- en: Defining the API layer for the features
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义功能的API层
- en: The API layer will be defined in the `api` folder of every feature. An API request
    can be either a query or a mutation. A query describes requests that only fetch
    data. A mutation describes an API call that mutates data on the server.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: API层将在每个功能的`api`文件夹中定义。一个API请求可以是查询或突变。查询描述了仅获取数据的请求。突变描述了一个在服务器上修改数据的API调用。
- en: For every API request, we will have a file that includes and exports an API
    request definition function and a hook for consuming the request inside React.
    For the request definition functions, we will be using the API client we just
    created with Axios, and for the hooks, we will be using the hooks from React Query.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个API请求，我们都会有一个包含并导出API请求定义函数和用于在React中消费请求的钩子的文件。对于请求定义函数，我们将使用我们刚刚用Axios创建的API客户端，对于钩子，我们将使用React
    Query的钩子。
- en: We’ll learn how to implement it in action in the following sections.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中学习如何实际实现它。
- en: Jobs
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作
- en: 'For the `jobs` feature, we have three API calls:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`jobs`功能，我们有三个API调用：
- en: '`GET /jobs`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET /jobs`'
- en: '`GET /jobs/:jobId`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET /jobs/:jobId`'
- en: '`POST /jobs`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST /jobs`'
- en: Get jobs
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取工作
- en: 'Let’s start with the API call that fetches jobs. To define it in our application,
    let’s create the `src/features/jobs/api/get-jobs.ts` file and add the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从获取工作的API调用开始。为了在我们的应用程序中定义它，让我们创建`src/features/jobs/api/get-jobs.ts`文件并添加以下内容：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As we can see, there are a few things going on:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这里发生了一些事情：
- en: We are defining the type for the request options. There, we can pass `organizationId`
    to specify the organization for which we want to get the jobs.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义请求选项的类型。在那里，我们可以传递`organizationId`来指定我们想要获取工作的组织。
- en: We are defining the `getJobs` function, which is the request definition for
    getting jobs.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义`getJobs`函数，这是获取工作的请求定义。
- en: We are defining the `useJobs` hook by using `useQuery` from `react-query`. The
    `useQuery` hook returns many different properties, but we want to expose only
    what is needed by the application. Notice how by using the `enabled` property,
    we are telling `useQuery` to run only if `organizationId` is provided. This means
    that the query will wait for `organizationId` to exist before fetching the data.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过使用`react-query`的`useQuery`钩子来定义`useJobs`钩子。`useQuery`钩子返回许多不同的属性，但我们只想暴露应用程序所需的内容。注意，通过使用`enabled`属性，我们正在告诉`useQuery`只有在`organizationId`提供时才运行。这意味着查询将在获取数据之前等待`organizationId`存在。
- en: 'Since we will be using it outside the feature, let’s make it available at `src/features/jobs/index.ts`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在功能外部使用它，让我们在`src/features/jobs/index.ts`中使其可用：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Get job details
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取工作详情
- en: 'The get job request should be straightforward. Let’s create the `src/features/jobs/api/get-job.ts`
    file and add the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 获取工作请求应该是直接的。让我们创建`src/features/jobs/api/get-job.ts`文件并添加以下内容：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As we can see, we are defining and exporting the `getJob` function and the `useJob`
    query, which we will use in a moment.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们正在定义和导出`getJob`函数和`useJob`查询，我们将在稍后使用它们。
- en: 'We want to consume this API request outside the feature, so we have to make
    it available by re-exporting it from `src/features/jobs/index.ts`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在功能外部使用这个API请求，因此我们必须通过从`src/features/jobs/index.ts`重新导出它来使其可用：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Create job
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建工作
- en: 'As we already mentioned, whenever we change something on the server, it should
    be considered a mutation. With that said, let’s create the `src/features/jobs/api/create-job.ts`
    file and add the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经提到的，每当我们在服务器上更改某些内容时，都应该将其视为突变。有了这个，让我们创建`src/features/jobs/api/create-job.ts`文件并添加以下内容：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'There are a few things going on here:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了一些事情：
- en: We define the `CreateJobOptions` type of the API request. It will require a
    data object that contains all the fields that are required for creating a new
    job.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了API请求的`CreateJobOptions`类型。它将需要一个包含创建新工作所需所有字段的数据对象。
- en: We define the `createJob` function, which makes the request to the server.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了`createJob`函数，它向服务器发送请求。
- en: We define `UseCreateJobOptions`, which accepts an optional callback to call
    if the request succeeds. This may become useful whenever we want to show a notification,
    redirect the user, or do anything that is not directly related to the API request.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了`UseCreateJobOptions`，它接受一个可选的回调函数，在请求成功时调用。这在我们想要显示通知、重定向用户或执行与API请求无直接关系的事情时可能很有用。
- en: We are defining the `useCreateJob` hook, which uses `useMutation` from `react-query`.
    As defined in the type, it accepts an optional `onSuccess` callback that gets
    called if the mutation succeeds.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义`useCreateJob`钩子，它使用`react-query`中的`useMutation`。如类型定义中所述，它接受一个可选的`onSuccess`回调，如果突变成功则被调用。
- en: To create the mutation, we provide the `createJob` function as `mutationFn`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建突变，我们将`createJob`函数作为`mutationFn`提供。
- en: We define `onSuccess` of `useMutation`, where we invalidate all job queries
    once a new job is created. Invalidating queries means that we want to set them
    as invalid in the cache. If we need them again, we will have to fetch them from
    the API.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义`useMutation`的`onSuccess`，在新工作创建后，我们使所有工作查询无效。使查询无效意味着我们想要在缓存中将它们设置为无效。如果我们再次需要它们，我们必须从API中获取它们。
- en: We are reducing the API surface of the `useCreateJob` hook to things that are
    used by the application, so we are just exposing `submit` and `isLoading`. We
    can always expose more things in the future if we notice we need them.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在减少`useCreateJob`钩子的API表面，只暴露那些应用程序使用的功能，所以我们只暴露`submit`和`isLoading`。如果我们注意到我们需要更多东西，我们总是可以在未来暴露更多东西。
- en: We don’t have to export this request from the `index.ts` file since it is used
    only within the `jobs` feature.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它只用于`jobs`功能内部，我们不需要从`index.ts`文件中导出这个请求。
- en: Organizations
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组织
- en: 'For the `organizations` feature, we have one API call:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`organizations`功能，我们有一个API调用：
- en: '`GET /organizations/:organizationId`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET /organizations/:organizationId`'
- en: Get organization details
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取组织详情
- en: 'Let’s create `src/features/organizations/api/get-organization.ts` and add the
    following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`src/features/organizations/api/get-organization.ts`并添加以下内容：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, we are defining a query that will fetch the organization based on the
    `organizationId` property we pass.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个查询，它将根据我们传递的`organizationId`属性获取组织。
- en: 'Since this query will also be used outside the `organizations` feature, let’s
    also re-export from `src/features/organizations/index.ts`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个查询也将被`organizations`功能外部使用，让我们也从`src/features/organizations/index.ts`中重新导出：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now that we have defined all our API requests, we can start consuming them in
    our application.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了所有的API请求，我们可以在我们的应用程序中开始使用它们了。
- en: Consuming the API in the application
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在应用程序中消费API
- en: To be able to build the UI without the API functionality, we used test data
    on our pages. Now, we want to replace it with the real queries and mutations that
    we just made for communicating with the API.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够在没有API功能的情况下构建UI，我们在我们的页面上使用了测试数据。现在，我们想要用我们刚刚为与API通信而制作的真实查询和突变来替换它。
- en: Public organization
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公共组织
- en: We need to replace a couple of things now.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要替换一些东西。
- en: 'Let’s open `src/pages/organizations/[organizationId]/index.tsx` and remove
    the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开`src/pages/organizations/[organizationId]/index.tsx`并删除以下内容：
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, we must load the data from the API. We can do that by importing `getJobs`
    and `getOrganization` from corresponding `features`. Let’s add the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须从API加载数据。我们可以通过从相应的`features`中导入`getJobs`和`getOrganization`来实现这一点。让我们添加以下内容：
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The new API functions are a bit different, so we need to replace the following
    code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 新的API函数略有不同，所以我们需要替换以下代码：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We must replace it with the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须用以下内容替换它：
- en: '[PRE20]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Public job
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公共工作
- en: The same process should be repeated for the public job page.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于公共工作页面，应该重复相同的过程。
- en: 'Let’s open `src/pages/organizations/[organizationId]/jobs/[jobId].tsx` and
    remove the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开`src/pages/organizations/[organizationId]/jobs/[jobId].tsx`并删除以下内容：
- en: '[PRE21]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, let’s import `getJob` and `getOrganization` from the corresponding features:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从相应的功能中导入`getJob`和`getOrganization`。
- en: '[PRE22]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, inside `getServerSideProps`, we need to update the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`getServerSideProps`内部，我们需要更新以下内容：
- en: '[PRE23]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Dashboard jobs
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仪表板工作
- en: For the dashboard jobs, the only thing we need to do is to update the imports
    so that we no longer load jobs from test data but from the API.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 对于仪表板工作，我们唯一需要做的事情是更新导入，这样我们就不再从测试数据中加载工作，而是从API中加载。
- en: 'Let’s import `useJobs` from the `jobs` feature instead of the test data by
    updating the following lines in `src/pages/dashboard/jobs/index.tsx`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过更新`src/pages/dashboard/jobs/index.tsx`中的以下行来从`jobs`功能导入`useJobs`而不是测试数据：
- en: '[PRE24]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We will still keep `useUser` from `test-data` for now; we will replace this
    in the next chapter.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们仍然会保留来自 `test-data` 的 `useUser`；我们将在下一章替换它。
- en: 'Since the newly created `useJobs` hook is a bit different than the `test-data`
    one, we need to update the way it is being used, as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 由于新创建的 `useJobs` 钩子与 `test-data` 中的钩子略有不同，我们需要更新其使用方式，如下所示：
- en: '[PRE25]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Dashboard job
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仪表板工作
- en: The job details page in the dashboard is also very straightforward.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板中的工作详情页面也非常简单。
- en: 'In `src/pages/dashboard/jobs/[jobId].tsx`, let’s remove `useJob`, which was
    imported from `test-data`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `src/pages/dashboard/jobs/[jobId].tsx` 文件中，让我们移除从 `test-data` 导入的 `useJob`：
- en: '[PRE26]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, let’s import it from the `jobs` feature:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从 `jobs` 功能中导入它：
- en: '[PRE27]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here, we need to update how `useJob` is consumed:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要更新 `useJob` 的使用方式：
- en: '[PRE28]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Create job
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建工作
- en: For the job creation, we will need to update the form, which, when submitted,
    will create a new job.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 对于工作创建，我们需要更新表单，当提交时，将创建一个新的工作。
- en: Currently, the form is not functional, so we need to add a couple of things.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，表单不可用，因此我们需要添加一些内容。
- en: 'Let’s open `src/features/jobs/components/create-job-form/create-job-form.tsx`
    and replace the content with the following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `src/features/jobs/components/create-job-form/create-job-form.tsx` 文件，并将内容替换为以下内容：
- en: '[PRE29]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'There are a `few`things worth mentioning in this component:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个组件中，有几个值得注意的点：
- en: We are using the `useForm` hook to handle the form’s state.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在使用 `useForm` 钩子来处理表单的状态。
- en: We are importing and using the `useCreateJob` API hook we previously defined
    to submit the request.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在导入并使用之前定义的 `useCreateJob` API 钩子来提交请求。
- en: When the mutation succeeds, the `onSuccess` callback is called.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当突变成功时，会调用 `onSuccess` 回调。
- en: Note
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The *create job* form requires the user to be authenticated. Since we didn’t
    implement the authentication system yet, you can use the MSW dev tools to authenticate
    with the test user to try the form submission.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 创建工作表单要求用户进行身份验证。由于我们尚未实现身份验证系统，您可以使用 MSW 开发工具使用测试用户进行身份验证以尝试表单提交。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to make the application communicate with its
    API. First, we defined an API client that allows us to unify the API requests.
    Then, we introduced **React Query**, a library for handling asynchronous states.
    Using it reduces boilerplate and simplifies the code base significantly.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使应用程序与其 API 进行通信。首先，我们定义了一个 API 客户端，它允许我们统一 API 请求。然后，我们介绍了 **React
    Query**，这是一个用于处理异步状态的库。使用它减少了样板代码并显著简化了代码库。
- en: Finally, we declared the API requests, and then we integrated them into the
    application.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们声明了 API 请求，然后将其集成到应用程序中。
- en: In the next chapter, we will learn how to create an authentication system for
    our application where only authenticated users will be able to visit the dashboard.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何为我们的应用程序创建一个身份验证系统，只有经过身份验证的用户才能访问仪表板。
