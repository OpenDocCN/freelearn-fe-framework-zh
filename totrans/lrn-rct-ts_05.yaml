- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Approaches to Styling React Frontends
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will style the alert component we worked on in previous
    chapters using four different approaches. First, we will use plain CSS and understand
    the downsides of this approach. Then, we will move on to use **CSS modules**,
    which will resolve plain CSS’s main problem. We will then use a **CSS-in-JS**
    library called Emotion and a library called Tailwind CSS and will understand the
    benefits of each of these libraries.
  prefs: []
  type: TYPE_NORMAL
- en: We will also learn how to use SVGs in React apps and use them in the alert component
    for the information and warning icons.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using plain CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using CSS modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using CSS-in-JS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Tailwind CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using SVGs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the following technologies in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Browser**: A modern browser such as Google Chrome'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node.js** and **npm**: You can install them from [https://nodejs.org/en/download/](https://nodejs.org/en/download/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code**: You can install it from [https://code.visualstudio.com/](https://code.visualstudio.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the code snippets used in this chapter can be found online at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter5](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter5).
  prefs: []
  type: TYPE_NORMAL
- en: Using plain CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start this section by setting up a React and TypeScript project with
    the alert component from [*Chapter 3*](B19051_03.xhtml#_idTextAnchor072)*, Setting
    Up React and TypeScript*. Next, we will add the alert component from [*Chapter
    3*](B19051_03.xhtml#_idTextAnchor072) and style it using plain CSS. Finally, we
    will look at one of the challenges with plain CSS and discover how we could mitigate
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project we will be using is the one we completed at the end of [*Chapter
    3*](B19051_03.xhtml#_idTextAnchor072). This can be found at the following location:
    [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter3/Section2-Creating-a-project-with-Create-React-App/myapp](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter3/Section2-Creating-a-project-with-Create-React-App/myapp).
    To copy this locally, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio Code in a folder of your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command in the terminal to clone the GitHub repository for
    the book:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reopen Visual Studio Code in the `Learn-React-with-TypeScript-2nd-Edition\Chapter3\Section2-Creating-a-project-with-Create-React-App\myapp`
    subfolder. This contains the project in the form it was in at the end of [*Chapter
    3*](B19051_03.xhtml#_idTextAnchor072).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to install all the dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The project is now set up. Next, we will take some time to understand how to
    use plain CSS in React components.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how to reference CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create React App has already enabled the use of plain CSS in the project. In
    fact, if you look in `App.tsx`, it already uses plain CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: CSS styles from the `App.css` file are imported, and the `App` CSS class is
    referenced on the outer `div` element.
  prefs: []
  type: TYPE_NORMAL
- en: React uses a `className` attribute rather than `class` because `class` is a
    reserved word in JavaScript. The `className` attribute is converted to a `class`
    attribute during transpilation.
  prefs: []
  type: TYPE_NORMAL
- en: The CSS import statement is a webpack feature. As webpack processes all the
    files, it will include all the imported CSS in the bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps to explore the CSS bundle that the project produces:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by opening and looking at `App.css`. As we have seen already, `App.css`
    is used within `App.tsx`. However, it contains CSS classes that are no longer
    used, such as `App-header` and `App-logo`. These classes were referenced in the
    `App` component before we removed them when we added the alert component. Leave
    the redundant CSS classes in place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `index.tsx` file and you’ll notice that `index.css` is imported. However,
    no CSS classes are referenced within this file. If you open `index.css`, you will
    notice that it only contains CSS rules that target element names and no CSS classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command in the terminal to produce a production build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After a few seconds, the build artifacts will appear in a `build` folder at
    the project’s root.
  prefs: []
  type: TYPE_NORMAL
- en: Open `index.html` in the `build` folder and notice all the whitespace has been
    removed because it is optimized for production. Next, find the `link` element
    that references the CSS file and note down the path – it will be something similar
    to `/static/css/main.073c9b0a.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.1 – The link element in index.html](img/B19051_05__01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – The link element in index.html
  prefs: []
  type: TYPE_NORMAL
- en: Open up the referenced CSS file. All the whitespace has been removed because
    it is optimized for production. Notice that it contains all the CSS from `index.css`
    and `App.css`, including the redundant `App-header` and `App-logo` CSS classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.2 – The bundled CSS file, including redundant App-header CSS class](img/B19051_05__02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – The bundled CSS file, including redundant App-header CSS class
  prefs: []
  type: TYPE_NORMAL
- en: The key point here is that webpack doesn’t remove any redundant CSS – it will
    include all the content from all the CSS files that have been imported.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will style the alert component with plain CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Using plain CSS in the alert component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we understand how to use plain CSS within React, let’s style the alert
    component. Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a CSS file called `Alert.css` in the `src` folder. This is available in
    GitHub at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter5/Section1-Using-plain-CSS/app/src/Alert.css](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter5/Section1-Using-plain-CSS/app/src/Alert.css)
    to copy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will add the CSS classes step by step and understand the styles in each
    class. Start by adding a `container` class into `Alert.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will be used on the outer `div` element. The style uses an inline flexbox,
    with the items flowing vertically and left-aligned. We’ve also added a nice rounded
    border and a bit of padding between the border and child elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following additional classes that can be used within `container`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will use these classes for the different types of alerts to color them appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following class for the header container element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will be applied to the element that contains the icon, heading, and close
    button. It uses a flexbox that flows horizontally with child elements vertically
    centered. It also adds a small gap at the bottom before the alert message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the following class for the icon to give it a width of 30 px:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the following class to apply to the heading to make it bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following class to apply to the close button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This removes the border and background. It also aligns the button to the right
    of the header and gives it a pointer mouse cursor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following class for the content element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This adds a left margin so the message horizontally aligns with the heading
    and sets the text color to black.
  prefs: []
  type: TYPE_NORMAL
- en: That completes all the CSS class definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Alert.tsx` and add an import statement for the CSS file we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we are going to reference the CSS classes we just created in the elements
    of the alert component. Add the following highlighted CSS class name references
    in the alert JSX to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The elements in the alert component are now being styled by the CSS classes
    in the imported CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Move the close button so that it is located inside the header container, under
    the `header` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the app in development mode by running `npm start` in the terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After a few seconds an improved alert component will appear in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – A styled alert component with plain CSS](img/B19051_05__03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – A styled alert component with plain CSS
  prefs: []
  type: TYPE_NORMAL
- en: That completes the alert component’s styling, but let’s continue so that we
    can observe a downside of plain CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Experiencing CSS clashes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now see an example of CSS with different components clashing. Keep
    the app running in development mode and then follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `App.tsx` and change the referenced CSS class from `App` to `container`
    on the `div` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `App.css` and rename the `App` CSS class to `container` and also add `20px`
    of padding to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, look at the running app and notice that the alert is no longer centered
    horizontally on the page. Inspect the elements using the browser DevTools. If
    you inspect the `div` element from the `App` component, you will see that styles
    from the `container` CSS class in the alert component have been applied to it
    as well as the `container` CSS class we just added. So, the `text-align` CSS property
    is `left` rather than `center`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Clashing CSS classes](img/B19051_05__04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – Clashing CSS classes
  prefs: []
  type: TYPE_NORMAL
- en: Stop the running app before continuing by pressing *Ctrl* + *C*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The key point here is that plain CSS classes are scoped to the whole app and
    not just the file it is imported into. This means that CSS classes can clash if
    they have the same name, as we have just experienced
  prefs: []
  type: TYPE_NORMAL
- en: A solution to CSS clashes is to carefully name them using `container` in the
    `App` component could be called `App__container`, and `container` in the `Alert`
    component could be called `Alert__container`. However, this requires discipline
    from all members of a development team.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**BEM** stands for **Block**, **Element**, **Modifier** and is a popular naming
    convention for CSS class names. More information can be found at the following
    link: [https://css-tricks.com/bem-101/](https://css-tricks.com/bem-101/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a quick recap of this section:'
  prefs: []
  type: TYPE_NORMAL
- en: Create React App configures webpack to process CSS so that CSS files can be
    imported into React component files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the styles in an imported CSS file are applied to the app – there is no
    scoping or removing redundant styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will learn about a styling approach that doesn’t suffer from CSS clashes
    across components.
  prefs: []
  type: TYPE_NORMAL
- en: Using CSS modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about an approach to styling React apps called
    **CSS modules**. We will start by understanding CSS modules and then we will use
    them within the alert component that we have been working on.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding CSS modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS modules is an open source library available on GitHub at [https://github.com/css-modules/css-modules](https://github.com/css-modules/css-modules),
    which can be added to the webpack process to facilitate the automatic scoping
    of CSS class names.
  prefs: []
  type: TYPE_NORMAL
- en: A CSS module is a CSS file, just like in the previous section; however, the
    filename has an extension of `.module.css` rather than `.css`. This special extension
    allows webpack to differentiate a CSS module file from a plain CSS file so that
    it can be processed differently.
  prefs: []
  type: TYPE_NORMAL
- en: 'A CSS module file is imported into a React component file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: This is similar to the syntax of importing plain CSS, but a variable is defined
    to hold CSS class name mapping information. In the preceding code snippet, the
    CSS class name information is imported into a variable called `styles`, but the
    variable name can be anything we choose.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CSS class name mapping information variable is an object containing property
    names corresponding to the CSS class names. Each class name property contains
    a value of a scoped class name to be used on a React component. Here is an example
    of the mapping object that has been imported into a component called `MyComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: The scope CSS class name starts with the component filename, then the original
    CSS class name, followed by a random string. This naming construct prevents class
    names from clashing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Styles within a CSS module are referenced in a component’s `className` attribute
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: The CSS class name on the element would then resolve to the scoped class name.
    In the preceding code snippets, `styles.error` would resolve to `MyComponent_error__
    vj8Oj`. So, the styles in the running app will be the scoped style names and not
    the original class names.
  prefs: []
  type: TYPE_NORMAL
- en: Projects created using Create React App already have CSS modules installed and
    configured with webpack. This means we don’t have to install CSS modules in order
    to start using them in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will use CSS modules in the alert component we have worked on.
  prefs: []
  type: TYPE_NORMAL
- en: Using CSS modules in the alert component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we understand CSS modules, let’s use them in the alert component.
    Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by renaming `Alert.css` to `Alert.module.css`; this file can now be used
    as a CSS module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `Alert.module.css` and change the CSS class names to camel case rather
    than kebab case. This will allow us to reference the scoped CSS class names more
    easily in the component – for example, `styles.headerText` rather than `styles["header-text"]`.
    The changes are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open `Alert.tsx` and change the CSS import statement to import the CSS
    module as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSX, change the class name references to use the scoped names from the
    CSS module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the app by running `npm start` in the terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a few seconds, the styled alert will appear. This time the alert will
    be horizontally centered, which is a sign that styles are no longer clashing.
  prefs: []
  type: TYPE_NORMAL
- en: Inspect the elements in the DOM using the browser’s DevTools. You will see that
    the alert component is now using scoped CSS class names. This means the alert
    container styles no longer clash with the app container styles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.5 – The CSS module scoped class names](img/B19051_05__05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – The CSS module scoped class names
  prefs: []
  type: TYPE_NORMAL
- en: Stop the running app before continuing by pressing *Ctrl* + *C*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To round off our understanding of CSS modules, let’s see what happens to the
    CSS in a production build. However, before we do that, let’s add a redundant CSS
    class at the bottom of `Alert.module.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now create a production build by executing `npm run build` in the terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a few seconds, the build artifacts are created in the `build` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the bundled CSS file and you will notice the following points:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It contains all the CSS from `index.css`, `App.css`, and the CSS module we just
    created.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The class names from the CSS module are scoped. This will ensure that the styles
    in production don’t clash, as they did not in development mode.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It contains the redundant CSS class name from the CSS module.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 5.6 – The redundant CSS class included in CSS bundle](img/B19051_05__06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – The redundant CSS class included in CSS bundle
  prefs: []
  type: TYPE_NORMAL
- en: That completes the refactoring of the alert component to use CSS modules.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on CSS modules, visit the GitHub repository at [https://github.com/css-modules/css-modules](https://github.com/css-modules/css-modules).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a recap of what we have learned about CSS modules:'
  prefs: []
  type: TYPE_NORMAL
- en: CSS modules allow CSS class names to be automatically scoped to a React component.
    This prevents styles for different React components from clashing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS modules isn’t a standard browser feature; instead, it is an open source
    library that can be added to the webpack process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS modules are pre-installed and pre-configured in projects created with Create
    React App.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similar to plain CSS, redundant CSS classes are not pruned from the production
    CSS bundle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will learn about another approach to styling React apps.
  prefs: []
  type: TYPE_NORMAL
- en: Using CSS-in-JS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we start by understanding CSS-in-JS and its benefits. We will
    then refactor the alert component we have used to implement CSS-in-JS and observe
    how it differs from CSS modules.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding CSS-in-JS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS-in-JS isn’t a browser feature, and it isn’t even a specific library – instead,
    it is a type of library. Popular examples of CSS-in-JS libraries are **styled-components**
    and **Emotion**. There isn’t a significant difference between styled-components
    and Emotion – they are both popular and have similar APIs. We will use Emotion
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Emotion generates styles that are scoped, similar to CSS modules. However,
    you write the CSS in JavaScript rather than in a CSS file – hence the name *CSS-in-JS*.
    In fact, you can write the CSS directly on JSX elements as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: Each CSS-in-JS library’s syntax is slightly different – the preceding example
    is a code snippet from Emotion styling.
  prefs: []
  type: TYPE_NORMAL
- en: Having styles directly on the component allows a developer to fully understand
    the component without having to visit another file. This obviously increases the
    file size, which can make the code harder to read. However, child components can
    be identified and extracted out of the file to mitigate large file sizes. Alternatively,
    styles can be extracted from component files into a JavaScript function that is
    imported.
  prefs: []
  type: TYPE_NORMAL
- en: 'A massive benefit of CSS-in-JS is that you can mix logic into the style, which
    is really useful for highly interactive apps. The following example contains a
    conditional `font-weight` dependent on an `important` prop and a conditional `font-size`
    dependent on a `mobile` prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: JavaScript string interpolation is used to define the conditional statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The equivalent plain CSS would be similar to the following example, with separate
    CSS classes created for the different conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: If a style on an element is highly conditional, then CSS-in-JS is arguably easier
    to read and certainly easier to write.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will use Emotion in the alert component we have worked on.
  prefs: []
  type: TYPE_NORMAL
- en: Using Emotion in the alert component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we understand CSS-in-JS, let’s use Emotion in the alert component.
    To do so, carry out the following steps. All the code snippets used can be found
    at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter5/Section3-Using-CSS-in-JS/app/src/Alert.tsx](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter5/Section3-Using-CSS-in-JS/app/src/Alert.tsx):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create React App doesn’t install and set up Emotion, so we first need to install
    Emotion. Run the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will take a few seconds to install.
  prefs: []
  type: TYPE_NORMAL
- en: Open `Alert.tsx` and remove the CSS module import.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an import for the `css` prop from Emotion with a special comment at the
    top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This special comment changes JSX elements to be transpiled using Emotion’s `jsx`
    function instead of React’s `createElement` function. Emotion’s `jsx` function
    adds styles to elements containing Emotion’s `css` prop.
  prefs: []
  type: TYPE_NORMAL
- en: In the JSX, we need to replace all the `className` props with the equivalent
    Emotion `css` attributes. The styles are largely the same as defined in the CSS
    file we created earlier, so the explanations won’t be repeated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will style one element at a time, starting with the outer `div` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few important points to explain in this code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: The `css` attribute isn’t usually valid on JSX elements. The special comment
    at the top of the file (`/** @jsxImportSource @emotion/react */`) allows this.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `css` attribute is set to a `css` in this case. For more information on
    tagged template literals, see [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The tagged template literal converts the style to a CSS class at runtime. We
    will verify this in *step 14*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String interpolation is used to implement the conditional styles for the colors.
    Remember that we had to define three CSS classes using plain CSS or CSS modules.
    This CSS-in-JS version is arguably more readable and certainly more concise.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, style the header container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, style the icon as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, style the heading as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, style the close button as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, style the message container as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the app by running `npm start` in the terminal. The alert component will
    appear like it was before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inspect the elements in the DOM using the browser’s DevTools. The alert component
    uses scoped CSS class names, similar to CSS modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Emotion’s scoped class names](img/B19051_05__07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – Emotion’s scoped class names
  prefs: []
  type: TYPE_NORMAL
- en: Stop the running app before continuing by pressing *Ctrl* + *C*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To round off our understanding of Emotion, let’s see what happens to the CSS
    in a production build. First, create a production build by executing `npm run
    build` in the terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a few seconds, the build artifacts are created in the `build` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Open the bundled CSS file from the `build/static/css` folder. Notice that the
    Emotion styles are not there. This is because Emotion generates the styles at
    runtime via JavaScript rather than at build time. If you think about it, the styles
    can’t be generated at build time because they may depend on JavaScript variables
    whose values are only known at runtime.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This completes the refactoring of the alert component to use CSS-in-JS.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on emotion, visit their website at [https://emotion.sh/docs/introduction](https://emotion.sh/docs/introduction).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a recap of what we learned about Emotion and CSS-in-JS:'
  prefs: []
  type: TYPE_NORMAL
- en: Styles for a CSS-in-JS library are defined in JavaScript rather than a CSS file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emotion’s styles can be defined directly on a JSX element using a `css` attribute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A huge benefit is that conditional logic can be added directly to the styles,
    which helps us style interactive components more quickly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emotion styles are applied at runtime rather than at build time because they
    depend on JavaScript variables. While this allows conditional styling logic to
    be elegantly defined, it does mean a small performance penalty because the styles
    are created and applied at runtime.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will learn about another different approach to styling React frontends.
  prefs: []
  type: TYPE_NORMAL
- en: Using Tailwind CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will start by understanding Tailwind CSS and its benefits.
    We will then refactor the alert component we have been using to use Tailwind and
    observe how it differs from other approaches we have tried.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Tailwind CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tailwind is a set of prebuilt CSS classes that can be used to style an app.
    It is referred to as a **utility-first CSS framework** because the prebuilt classes
    can be thought of as flexible utilities.
  prefs: []
  type: TYPE_NORMAL
- en: An example CSS class is `bg-white`, which styles the background of an element
    white – *bg* is short for *background*. Another example is `bg-orange-500`, which
    sets the background color to a 500 shade of orange. Tailwind contains a nice color
    palette that can be customized.
  prefs: []
  type: TYPE_NORMAL
- en: 'The utility classes can be used together to style an element. The following
    example styles a button element in JSX:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s an explanation of the classes used in the preceding example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`border-none` removes the border of an element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rounded-md` rounds the corners of an element border. The *md* stands for *medium*.
    Alternatively, `lg` (large) could have been used or even `full`, for more rounded
    borders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bg-emerald-700` sets the element background color to a 700 shade of emerald.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text-white` sets the element text color to white.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cursor-pointer` sets the element cursor to a pointer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The utility classes are low-level and focused on styling a very specific thing.
    This makes the classes flexible, allowing them to be highly reusable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tailwind can specify that a class should be applied when the element is in
    a hover state by prefixing it with `hover:`. The following example sets the button
    background to a darker shade of emerald when hovered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: So, a key point of Tailwind is that we don’t write new CSS classes for each
    element we want to style – instead, we use a large range of well-thought-through
    existing classes. A benefit of this approach is that it helps an app look nice
    and consistent.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on Tailwind, refer to their website at the following link:
    [https://tailwindcss.com/](https://tailwindcss.com/). The Tailwind website is
    a crucial resource for searching and understanding all the different utility classes
    that are available.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will install and configure Tailwind in the project containing the alert
    component we have been working on.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Tailwind CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we understand Tailwind, let’s install and configure it in the alert
    component project. To do this, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Visual Studio project, start by installing Tailwind by running the following
    command in a terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Tailwind library is installed as a development dependency because it’s not
    required at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tailwind integrates into Create React App projects using a library called **PostCSS**.
    PostCSS is a tool that transforms CSS using JavaScript and Tailwind runs as a
    plugin in it. Install PostCSS by running the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Tailwind also recommends another PostCSS called **Autoprefixer**, which adds
    vendor prefixes to CSS. Install this by running the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, run the following command in a terminal to generate configuration files
    for Tailwind and PostCSS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After a few seconds, the two configuration files are created. The Tailwind configuration
    file is called `tailwind.config.js`, and the PostCSS configuration file is called
    `postcss.config.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `tailwind.config.js` and specify the path to the React components as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open `index.css` in the `src` folder and add the following three lines
    at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These are called **directives** and will generate the CSS required by Tailwind
    during the build process.
  prefs: []
  type: TYPE_NORMAL
- en: Tailwind is now installed and ready to use.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will use Tailwind to style the alert component we have been working
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Using Tailwind CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s use Tailwind to style the alert component. We will remove emotion’s
    `css` JSX attribute and replace it with Tailwind utility class names in the JSX
    `className` attribute. To do this, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Alert.tsx` and start by removing the special emotion comment and the `css`
    import statement from the top of the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `css` attribute with a `className` attribute on the outermost `div`
    element as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is an explanation of the utility classes that were just used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`inline-flex` and `flex-col` create an inline flexbox that flows vertically'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text-left` aligns items to the left'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`px-4` adds 4 spacing units of left and right padding'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`py-3` adds 3 spacing units of top and bottom padding'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have encountered `rounded-md` before – this rounds the corners of the `div`
    element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`border-1` and `border-transparent` add a transparent 1 px border'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Spacing units are defined in Tailwind and are a proportional scale. One spacing
    unit is equal to `0.25rem`, which translates roughly to `4px`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still on the outermost `div` element, add the following conditional styles
    using string interpolation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The text color is set to a 900 amber shade for warning alerts and a 900 teal
    shade for information alerts. The background color is set to a 50 amber shade
    for warning alerts and a 50 teal shade for information alerts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, replace the `css` attribute with a `className` attribute on the header
    container as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is an explanation of the utility classes that were just used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`flex` and `items-center` create a horizontal flowing flexbox where the items
    are centered vertically'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mb-1` adds a 1 spacing unit margin at the bottom of the element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Replace the `css` attribute with a `className` attribute on the icon as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`w-7` sets the element to a width of 7 spacing units.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the `css` attribute with a `className` attribute on the heading as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`font-bold` sets the font weight to be bold on the element.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the `css` attribute with a `className` attribute on the close button
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `border-none` removes the element border, and `bg-transparent` makes the
    element background transparent. `ml-auto` sets the left margin to automatic, which
    right aligns the element. `cursor-pointer` sets the mouse cursor to a pointer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, replace the `css` attribute with a `className` attribute on the message
    container as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`ml-7` sets the left margin on the element to 7 spacing units and `text-black`
    sets the text color to black.'
  prefs: []
  type: TYPE_NORMAL
- en: Run the app by running `npm start` in the terminal. After a few seconds, the
    app will appear in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that the alert component looks a bit nicer because of Tailwind’s default
    color palette and consistent spacing.
  prefs: []
  type: TYPE_NORMAL
- en: Inspect the elements in the DOM using the browser’s DevTools. Notice the Tailwind
    utility classes being used and notice the spacing units use CSS rem units.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A key point to notice is that no CSS class name scoping occurs. There is no
    need for any scoping because the classes are general and reusable and not specific
    to any element.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – A styled alert using Tailwind](img/B19051_05__08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.8 – A styled alert using Tailwind
  prefs: []
  type: TYPE_NORMAL
- en: Stop the running app before continuing by pressing *Ctrl* + *C*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To round off our understanding of Tailwind, let’s see what happens to the CSS
    in a production build. First, create a production build by executing `npm run
    build` in the terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a few seconds, the build artifacts are created in the `build` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Open the bundled CSS file from the `build/static/css` folder. Notice the base
    Tailwind styles at the start of the file. You will also see that all the Tailwind
    classes that we used are in this file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Tailwind CSS classes in a bundled CSS file](img/B19051_05__09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.9 – Tailwind CSS classes in a bundled CSS file
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: An important point is that Tailwind doesn’t add all its CSS classes – that would
    produce a massive CSS file! Instead, it only adds the CSS classes used in the
    app.
  prefs: []
  type: TYPE_NORMAL
- en: That completes the process of refactoring the alert component to use Tailwind.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a recap of what we learned about Tailwind:'
  prefs: []
  type: TYPE_NORMAL
- en: Tailwind is a well-thought-through collection of reusable CSS classes that can
    be applied to React elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tailwind has a nice default color palette and a 4 px spacing scale, both of
    which can be customized
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tailwind is a plugin for PostCSS and executed at build time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tailwind does not incur a runtime performance penalty like Emotion, because
    the styles aren’t created and applied at runtime
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only classes used on React elements are included in the CSS build bundle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will make the icons in the alert component look a bit nicer.
  prefs: []
  type: TYPE_NORMAL
- en: Using SVGs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to use SVG files in React and how to use
    them for the icons in the alert component.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how to use SVGs in React
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**SVG** stands for **Scalable Vector Graphics** and it is made up of points,
    lines, curves, and shapes based on mathematical formulas rather than specific
    pixels. This allows them to scale when resized without distortion. The quality
    of icons is important to get right – if they are distorted, they make the whole
    app feel unprofessional. Using SVGs for icons is common in modern web development.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create React App configures webpack to use SVG files when a project is created.
    In fact, `logo.svg` is referenced in the template `App` component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, `logo` is imported as a path to the SVG file, which
    is then used on the `src` attribute on the `img` element to display the SVG.
  prefs: []
  type: TYPE_NORMAL
- en: 'An alternate way of referencing SVGs is to reference them as a component as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: SVG React components are available in a named import called `ReactComponent`.
    In the preceding example, the SVG component is aliased with the name `Logo`, which
    is then used in the JSX.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn how to use SVGs in the alert component.
  prefs: []
  type: TYPE_NORMAL
- en: Adding SVGs to the alert component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to replace the emoji icons in the alert component
    with SVGs:'
  prefs: []
  type: TYPE_NORMAL
- en: First, create three files called `cross.svg`, `info.svg`, and `warning.svg`
    in the `src` folder. Then, copy and paste the content of these from the GitHub
    repository at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter5/Section5-Using-SVGs/app/src](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter5/Section5-Using-SVGs/app/src).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `Alert.tsx` and add the following import statements to import the SVGs
    as React components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have given the SVG components appropriately named aliases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `span` element containing the emoji icons to use SVG icon components
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have used Tailwind to size and color the icons appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, update the emoji close icon to the SVG close icon as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the app by running `npm start` in the terminal. After a few seconds, the
    app will appear in a browser containing the improved alert component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.10 – An alert with an SVG icon](img/B19051_05__10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.10 – An alert with an SVG icon
  prefs: []
  type: TYPE_NORMAL
- en: That completes the alert component – it is looking much better now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a quick recap of what we learned about using SVGs in React apps:'
  prefs: []
  type: TYPE_NORMAL
- en: Webpack needs to be configured to bundle SVG files and Create React App does
    this configuration for us
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default import for an SVG file is the path to the SVG, which can then be
    used in an `img` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A named import called `ReactComponent` can be used to reference the SVG as a
    React component in JSX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will summarize what we have learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about four methods of styling.
  prefs: []
  type: TYPE_NORMAL
- en: First, we learned that plain CSS could be used to style React apps, but all
    the styles in the imported CSS file are bundled regardless of whether a style
    is used. Also, the styles are not scoped to a specific component – we observed
    the `container` CSS class names clashing with the `App` and `Alert` components.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we learned about CSS modules, which allows us to write plain CSS files
    imported in a way that scopes styles to the component. We learned that CSS modules
    is an open source library pre-installed and pre-configured in projects created
    with Create React App. We saw how this resolved the CSS clashing problem but didn’t
    remove redundant styles.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we discussed CSS-in-JS libraries, which allow styles to be defined directly
    on the React component. We used emotion’s `css` prop to style the alert component
    without an external CSS file. The nice thing about this approach is that conditional-style
    logic can be implemented more quickly. We learned that emotion’s styles are scoped
    like CSS modules, but the scoping happens at runtime rather than at build time.
    We also understood that the small performance cost of this approach is because
    of the styles being created at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: The fourth styling approach we looked at was using Tailwind CSS. We learned
    that Tailwind provides a set of reusable CSS classes that can be applied to React
    elements, including a nice default color palette and a 4 px spacing scale, both
    of which can be customized. We learned that only the used Tailwind classes are
    included in the production build.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned that Create React App configures webpack to enable the use
    of SVG files. SVGs can be referenced as a path in an `img` element or as a React
    component using a `ReactComponent` named `import`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at implementing multiple pages in React apps
    with a popular library called React Router.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to check what you have learned about React styling:'
  prefs: []
  type: TYPE_NORMAL
- en: Why could the following use of plain CSS be problematic?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have a component styled using CSS modules as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have another component styled using CSS modules as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: Will the styles of these `div` elements clash, given that they are using the
    `wrapper` class name?
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a component styled using CSS modules as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE269]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE270]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE271]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The styles in `styles3.module.css` are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: The styles aren’t being applied when the app is run. What is the problem?
  prefs: []
  type: TYPE_NORMAL
- en: We are defining a reusable button component with a `kind` prop that can be `"square"`
    or `"rounded"`. The rounded button should have a 04 px border radius, and the
    square button should have no border radius. How could we define this conditional
    style using Emotion’s `css` prop?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are styling a button element using Tailwind. It is currently styled as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE275]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE276]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How can we enhance the style by making the button background a 700 shade of
    blue when the user hovers over it?
  prefs: []
  type: TYPE_NORMAL
- en: 'A logo SVG is referenced as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE278]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE279]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: However, the logo isn’t rendered. What is the problem?
  prefs: []
  type: TYPE_NORMAL
- en: 'We are styling a button element using Tailwind that has a `color` prop to determine
    its color and is styled as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: However, the button color doesn’t work. What is the problem?
  prefs: []
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The wrapper CSS class could clash with other classes. To reduce this risk,
    the class name can be manually scoped to the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The CSS won’t clash because CSS modules will scope the class names to each component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The wrong class name is referenced in the component – it should be `wrap` rather
    than `wrapper`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE286]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE287]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE288]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE289]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `css` prop on the button could be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE291]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE292]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE293]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE294]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE296]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The style can be adjusted as follows to include the hover style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE298]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE299]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Logo` will hold the path to the SVG rather than a component. The import statement
    can be adjusted as follows to import a logo component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE301]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE302]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE303]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `bg-${color}-500` class name is problematic because this can only be resolved
    at runtime because of the `color` variable. The used Tailwind classes are determined
    at build time and added to the bundle, meaning the relevant background color classes
    won’t be bundled. This means that the background color style won’t be applied
    to the button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
