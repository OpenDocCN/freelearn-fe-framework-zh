- en: Preparing the Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before building applications with the MERN stack, we first need to prepare the
    development environment with each technology, and also with tools to aid development
    and debugging. Working with this stack requires that you make different technologies
    and tools work well together, and given the many options and resources available
    on this topic, it can seem like a daunting task to figure out how it all comes
    together. This chapter guides you through the workspace options, the essential
    development tools, how to set up the MERN technologies in your workspace, and
    how to check this setup with actual code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting development tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up MERN stack technologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking your development setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting development tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are plenty of options available when it comes to selecting basic development
    tools such as text editors or IDEs, version control software, and even the development
    workspace itself. In this section, we will go over the options and recommendations
    that are relevant to web development with the MERN stack so you can make informed
    decisions when selecting these tools based on individual preferences.
  prefs: []
  type: TYPE_NORMAL
- en: Workspace options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing on a local machine is a common practice among programmers, but with
    the advent of good cloud and remote development services, such as AWS Cloud9 ([https://aws.amazon.com/cloud9/?origin=c9io](https://aws.amazon.com/cloud9/?origin=c9io))
    and Visual Studio Code's Remote Development extension ([https://code.visualstudio.com/docs/remote](https://code.visualstudio.com/docs/remote)),
    you can set up your local workspace with MERN technologies  (and this will be
    assumed to be the case for the rest of the book), but you can also choose to run
    and develop the code in cloud services that are equipped for Node development.
  prefs: []
  type: TYPE_NORMAL
- en: Local and cloud development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can choose to use both types of workspaces to enjoy the benefits of working
    locally without worrying about bandwidth/internet issues and to work remotely
    when you don't physically have your favorite local machine. To do this, you can
    use Git to version control your code, store your latest code on remote Git hosting
    services such as GitHub or BitBucket, and then share the same code across all
    your workspaces. On your workspaces, you can compose the code in an IDE of your
    choice from the many available options, some of which are discussed next.
  prefs: []
  type: TYPE_NORMAL
- en: IDE or text editors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most cloud development environments will come integrated with source code editors,
    but for your local workspace, you can pick any based on your preference as a programmer
    and then customize it for MERN development. For example, the following popular
    options can each be customized as required:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Visual Studio Code** ([https:/](https://code.visualstudio.com/)[/](https://code.visualstudio.com/)[code.](https://code.visualstudio.com/)[visualstudio.](https://code.visualstudio.com/)[com/](https://code.visualstudio.com/)):
    A feature-rich source code editor by Microsoft with extensive support for modern
    web application development workflow, including support for MERN stack technologies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Atom** ([https:/](https://atom.io/)[/](https://atom.io/)[atom.](https://atom.io/)[io/](https://atom.io/)):
    A free, open source text editor for GitHub that has many packages relevant to
    the MERN stack from other developers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SublimeText** ([https:/](https://www.sublimetext.com/)[/](https://www.sublimetext.com/)[www.](https://www.sublimetext.com/)[sublimetext.](https://www.sublimetext.com/)[com/](https://www.sublimetext.com/)):
    A proprietary, cross-platform text editor that also has many packages relevant to
    the MERN stack, along with support for JavaScript development'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WebStorm** ([https:/](https://www.jetbrains.com/webstorm/)[/](https://www.jetbrains.com/webstorm/)[www.](https://www.jetbrains.com/webstorm/)[jetbrains.](https://www.jetbrains.com/webstorm/)[com/](https://www.jetbrains.com/webstorm/)[webstorm/](https://www.jetbrains.com/webstorm/)):
    A full-fledged JavaScript IDE by JetBrains, with support for MERN stack development'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are other editors at your disposal, but besides focusing on what each
    has to offer, it is important that you choose one that is right for you, enables
    a productive workflow, and also integrates well with the other tools necessary
    for web application development.
  prefs: []
  type: TYPE_NORMAL
- en: Chrome Developer Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Loading, viewing, and debugging the frontend is a very crucial part of the web
    development process. Chrome DevTools ([https://developers.google.com/web/tools/chrome-devtools](https://developers.google.com/web/tools/chrome-devtools)),
    which is a part of the Chrome browser, has many great features that allow debugging,
    testing, and experimenting with the frontend code and the look, feel, responsiveness,
    and performance of the UI. Additionally, the React Developer Tools extension is
    available as a Chrome plugin, and it adds React debugging tools to Chrome DevTools.
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing tools like this in your development workflow can help you to understand
    the code better and to build your applications effectively. Similarly, integrating
    code version control with a tool such as Git can increase your productivity and
    efficiency as a developer.
  prefs: []
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any development workflow is incomplete without a version control system that
    enables tracking code changes, code sharing, and collaboration. Over the years,
    Git has become the leading version control system for many developers and is the
    most widely used distributed source code management tool. For code development
    in this book, Git will help primarily to track progress as we go through the steps
    to build each application.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start using Git, first install it on your local machine or cloud development
    environment based on your system specifications. Instructions to download and
    install the latest version of Git, along with documentation on using Git commands,
    can be found at [https://git-scm.com/downloads](https://git-scm.com/downloads).
  prefs: []
  type: TYPE_NORMAL
- en: Remote Git hosting services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud-based Git repository hosting services such as GitHub and BitBucket help
    share your latest code across workspaces and deployment environments, and also
    to back up your code. These services pack in a lot of useful features to help
    with code management and the development workflow. To get started, you can create
    an account and set up remote repositories for your code bases.
  prefs: []
  type: TYPE_NORMAL
- en: All these essential tools will help enrich your web development workflow and
    increase productivity. Once you've completed the necessary setup in your workspace
    according to the discussion in the next section, we'll move on and start building
    MERN applications.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up MERN stack technologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MERN stack technologies are being developed and upgraded as this book is being
    written, so for the work demonstrated throughout this book, we use the latest
    stable versions at the time of writing. Installation guidelines for most of these
    technologies are dependent on the system environment of your workspaces, so this
    section points to all relevant installation resources and also acts as a guide
    for setting up a fully functioning MERN stack.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB must be set up, running, and accessible to your development environment
    before any database features are added to MERN applications. At the time of writing,
    the current stable version of MongoDB is 4.2.0, and this version of the MongoDB
    Community Edition is used for developing the applications in this book. The rest
    of this section provides resources on how to install and run MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You need to install and start MongoDB on your workspace before you can use
    it for development. The installation and startup process for MongoDB depends on
    your workspace specifications:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloud development services will have their own instructions for installing and
    setting up MongoDB. For example, the how-to steps for AWS Cloud9 can be found
    at [https://docs.c9.io/docs/setup-a-database#mongodb](https://docs.c9.io/docs/setup-a-database#mongodb).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The guide for MongoDB installation on your local machine is at [https://docs.mongodb.com/manual/administration/install-community](https://docs.mongodb.com/manual/administration/install-community)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After you have successfully installed MongoDB on your workspace and have it
    running, you can interact with it using the **mongo shell**.
  prefs: []
  type: TYPE_NORMAL
- en: Running the mongo shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The mongo shell is an interactive tool for MongoDB that comes as a part of the
    MongoDB installation. It is a good place to start getting familiar with MongoDB
    operations. Once MongoDB is installed and running, you can run the mongo shell
    on the command line. In the mongo shell, you can use commands to query and update
    data and perform administrative operations.
  prefs: []
  type: TYPE_NORMAL
- en: You could also skip the local installation of MongoDB and instead deploy a MongoDB
    database in the cloud using MongoDB Atlas ([https://www.mongodb.com/cloud/atlas](https://www.mongodb.com/cloud/atlas)).
    It is a global cloud database service that can be used to add fully managed MongoDB
    databases to modern applications.
  prefs: []
  type: TYPE_NORMAL
- en: The next core component of MERN development is Node.js, which will be necessary
    to complete the remaining MERN setup.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Backend server implementation for the MERN applications relies on Node.js. At
    the time of writing, 13.12.0 is the latest stable Node.js version available, and
    the code in the book has also been tested with version 14.0.0 from the latest
    nightly builds. The version of Node.js you choose to download will come bundled
    with npm as the package manager. Depending on whether you choose npm or Yarn as
    the package manager for your MERN projects, you can install Node.js with or without
    npm.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Node.js can be installed via direct download, installers, or the Node Version
    Manager:'
  prefs: []
  type: TYPE_NORMAL
- en: You can install Node.js by directly downloading the source code or a pre-built
    installer specific to your workspace platform. Downloads are available at [nodejs.org/en/download](https://nodejs.org/en/download/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud development services may come with Node.js pre-installed, as AWS Cloud9
    does, or will have specific instructions for adding and updating it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To test if the installation was successful, you can open the command line and
    run `node -v` to see if it correctly returns the version number.
  prefs: []
  type: TYPE_NORMAL
- en: Node version management with nvm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need to maintain multiple versions of Node.js and npm for different projects,
    nvm is a useful command-line tool to install and manage different versions on
    the same workspace. You have to install nvm separately. Instructions for setup
    can be found at [github.com/creationix/nvm](https://github.com/creationix/nvm).
  prefs: []
  type: TYPE_NORMAL
- en: With Node.js set up on your system, you can use a package manager such as npm
    or Yarn to start integrating the remaining parts of the MERN stack.
  prefs: []
  type: TYPE_NORMAL
- en: Yarn package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yarn is a relatively new package manager for JavaScript dependencies, and it
    can be used as an alternative to npm. It is a fast, reliable, and secure dependency
    manager that provides a different range of additional features, including an offline
    mode for re-installation of packages without an internet connection and support
    for multiple package registries, such as npmjs.com and Bower.
  prefs: []
  type: TYPE_NORMAL
- en: We will use Yarn (v1.22.4) to manage Node modules and packages for the projects
    in this book. Before using Yarn, you will need to install it on your workspace.
    There are a number of ways to install Yarn depending on your operating system
    and its version.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about your options for installing Yarn on your workspace, visit [https://yarnpkg.com/lang/en/docs/install](https://yarnpkg.com/lang/en/docs/install).
  prefs: []
  type: TYPE_NORMAL
- en: Once Yarn is installed, it can be used to add the other necessary modules including
    Express and React.
  prefs: []
  type: TYPE_NORMAL
- en: Modules for MERN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The remaining MERN stack technologies are all available as Node.js package modules
    and can be added to each project using Yarn. These include key modules, such as
    React and Express, that are required to run each MERN application, and also modules
    that will be necessary during development. In this section, we list and discuss
    these modules, then see how to use the modules in a working project in the following
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Key modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To integrate the MERN stack technologies and run your applications, we will
    need the following modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '**React**: To start using React, we will need two modules:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`react`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`react-dom`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Express**: To use Express in your code, you will need the `express` module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MongoDB**: To use MongoDB directly with Node applications, you need to add
    the driver, which is available as a Node module named `mongodb`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These key modules will produce full-stack web applications, but we will need
    some additional modules to aid in the development and generation of the application
    code.
  prefs: []
  type: TYPE_NORMAL
- en: devDependency modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To maintain consistency throughout the development of our MERN applications,
    we will use new JavaScript syntax from ES6 and higher versions in both client-
    and server-side implementations. As a consequence, and also to aid the development
    process, we will use the following additional modules to compile and bundle the
    code, and also to automatically reload the server and browser app as the code
    is updated during development:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Babel modules are needed to convert ES6 and JSX to suitable JavaScript for
    all browsers. The modules needed to get Babel working are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@babel/core`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`babel-loader`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: for transpiling JavaScript files with Webpack
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@babel/preset-env` and `@babel/preset-react` to provide support for React,
    and the latest JavaScript feature'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Webpack modules will help bundle the compiled JavaScript, both for the client-side
    and the server-side code. Modules needed to get Webpack working are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack`.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack-cli` to run Webpack commands.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack-node-externals` to ignore external Node.js module files when bundling
    in Webpack.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack-dev-middleware` to serve the files emitted from Webpack over a connected
    server during the development of the code.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack-hot-middleware` to add hot module reloading into an existing server
    by connecting a browser client to a Webpack server and receiving updates as code
    changes during development.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nodemon` to watch server-side changes during development, so the server can
    be reloaded to put changes into effect.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`react-hot-loader` for faster development on the client side. Every time a
    file changes in the React frontend, `react-hot-loader` enables the browser app
    to update without re-bundling the whole frontend code.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@hot-loader/react-dom` to enable hot-reloading support for React hooks. It
    essentially replaces the `react-dom` package of the same version, but with additional
    patches to support hot reloading.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Although `react-hot-loader` is meant to help the development flow, it is safe
    to install this module as a regular dependency rather than a devDependency. It automatically
    ensures that hot reloading is disabled in production and the footprint is minimal.
  prefs: []
  type: TYPE_NORMAL
- en: With the necessary MERN stack technologies and associated tools installed and
    ready for use, in the next section, we will use this toolset and write code that
    can confirm if your workspace is set up correctly to begin developing MERN-based
    web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Checking your development setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will go through the development workflow and write code
    step by step to ensure that the environment is correctly set up to start developing
    and running MERN applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will generate these project files in the following folder structure to run
    a simple setup project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The code discussed in this section is available on GitHub in the repository
    at [https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter02/mern-simplesetup](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter02/mern-simplesetup).
    You can clone this code and run it as you go through the code explanations in
    the rest of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We will leave the configuration files in the root folder and organize the application
    code into client-side and server-side folders. The `client` folder will contain
    the frontend code and the `server` folder will contain the backend code. In the
    rest of this section, we will generate these files and implement both frontend
    and backend code to build a working full-stack web application.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing package.json and installing Node.js modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will begin by using Yarn to install all the required modules. It is a best
    practice to add a `package.json` file in every project folder to maintain, document,
    and share the Node.js modules being used in the MERN application. The `package.json`
    file will contain meta-information about the application, as well as list the
    module dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the steps outlined in the following points to generate a `package.json`
    file, modify it, and use it to install the modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '`yarn init`: From the command line, enter your project folder and run `yarn
    init`. You will be asked a series of questions to gather meta-information about
    your project, such as name, license, and author. Then, a `package.json` file will
    be auto generated with your answers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dependencies`: Open `package.json` in your editor and modify the `JSON` object
    to add the key modules and `react-hot-loader` as regular dependencies:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The file path mentioned before a code block indicates the location of the code
    in the project directory. This convention has been maintained throughout the book
    to provide better context and guidance as you follow along with the code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`devDependencies`: Modify `package.json` further to add the following Node modules
    required during development as `devDependencies`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mern-simplesetup/package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'yarn: Save `package.json` and, from the command line, run the `yarn` command
    to fetch and add all these modules to your project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With all the necessary modules installed and added to the project, next we will
    add configuration to compile and run the application code.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Babel, Webpack, and Nodemon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start coding up the web application, we need to configure Babel, Webpack,
    and Nodemon to compile, bundle, and auto-reload the changes in the code during
    development.
  prefs: []
  type: TYPE_NORMAL
- en: Babel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a `.babelrc` file in your project folder and add the following JSON
    with `presets` and `plugins` specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/.babelrc`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this configuration, we specify that we need Babel to transpile the latest
    JavaScript syntax with support for code in a Node.js environment and also React/JSX
    code. The `react-hot-loader/babel` plugin is required by the `react-hot-loader`
    module to compile `React` components.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will have to configure Webpack to bundle both the client and server code
    and the client code separately for production. Create `webpack.config.client.js`,
    `webpack.config.server.js`, and `webpack.config.client.production.js` files in
    your project folder. All three files will have the following code structure, starting
    with imports, then the definition of the `config` object, and finally the export
    of the defined `config` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `config` JSON object will differ with values specific to the client- or
    server-side code, and development versus production code. In the following sections,
    we will highlight the relevant properties in each configuration instance.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can also generate Webpack configurations using the interactive
    portal *Generate Custom Webpack Configuration* at [https://generatewebpackconfig.netlify.com/](https://generatewebpackconfig.netlify.com/)
    or using the Webpack-cli's `init` command from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Client-side Webpack configuration for development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Update the `config` object with the following in your `webpack.config.client.js`
    file in order to configure Webpack to bundle and hot-load React code during development:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/webpack.config.client.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The highlighted keys and values in the `config` object will determine how Webpack
    bundles the code and where the bundled code will be placed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mode` sets `process.env.NODE_ENV` to the given value and tells Webpack to
    use its built-in optimizations accordingly. If not set explicitly, it defaults
    to a value of "`production`". It can also be set via the command line by passing
    the value as a CLI argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`devtool` specifies how source maps are generated, if at all. Generally, a
    source map provides a way of mapping code within a compressed file back to its
    original position in a source file to aid debugging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`entry` specifies the entry file where Webpack starts bundling, in this case
    with the `main.js` file in the `client` folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output` specifies the output path for the bundled code, in this case set to
    `dist/bundle.js`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`publicPath` allows specifying the base path for all assets in the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module` sets the regex rule for the file extension to be used for transpilation,
    and the folders to be excluded. The transpilation tool to be used here is `babel-loader`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HotModuleReplacementPlugin` enables hot module replacement for `react-hot-loader`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NoEmitOnErrorsPlugin` allows skipping emitting when there are compile errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also add a Webpack alias to point `react-dom` references to the `@hot-loader/react-dom`
    version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The client-side code of the application will be loaded in the browser from the
    bundled code in `bundle.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack provides other configuration options too, which can be used as required
    depending on your code and bundling specifications, as we will see next when we
    explore server-side-specific bundling.
  prefs: []
  type: TYPE_NORMAL
- en: Server-side Webpack configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Modify the code to require `nodeExternals`, and update the `config` object
    with the following code in your `webpack.config.server.js` file to configure Webpack
    for bundling server-side code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/webpack.config.server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `mode` option is not set here explicitly but will be passed as required
    when running the Webpack commands with respect to running for development or building
    for production.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack starts bundling from the server folder with `server.js`, then outputs
    the bundled code in `server.generated.js` in the `dist` folder. During bundling,
    a CommonJS environment will be assumed as we are specifying `commonjs2` in `libraryTarget`,
    so the output will be assigned to `module.exports`.
  prefs: []
  type: TYPE_NORMAL
- en: We will run the server-side code using the generated bundle in `server.generated.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Client-side Webpack configuration for production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To prepare the client-side code for production, update the `config` object
    with the following code in your `webpack.config.client.production.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/webpack.config.client.production.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will configure Webpack to bundle the React code to be used in production
    mode. The configuration here is similar to the client-side configuration for development
    mode, but without the hot-reloading plugin and debug configuration as these will not
    be required in production.
  prefs: []
  type: TYPE_NORMAL
- en: With the bundling configurations in place, we can add configuration for running
    these generated bundles automatically on code updates during development using
    Nodemon.
  prefs: []
  type: TYPE_NORMAL
- en: Nodemon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a `nodemon.json` file in your project folder and add the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/nodemon.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This configuration will set up `nodemon` to watch for changes in the server
    files during development, then execute compile and build commands as necessary.
    We can begin writing the code for a simple full-stack web application to see these
    configurations in action.
  prefs: []
  type: TYPE_NORMAL
- en: Frontend views with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to start developing a frontend, first create a root template file
    called `template.js` in the project folder, which will render the HTML with React
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/template.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: When the server receives a request to the root URL, this HTML template will
    be rendered in the browser, and the `div` element with ID `"root"` will contain
    our React component.
  prefs: []
  type: TYPE_NORMAL
- en: Next, create a `client` folder where we will add two React files, `main.js`, and
    `HelloWorld.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `main.js` file simply renders the top-level entry React component in the
    `div` element in the HTML document:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/client/main.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the entry React component is the `HelloWorld` component imported
    from `HelloWorld.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/client/HelloWorld.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`HelloWorld.js` contains a basic `HelloWorld` React component, which is hot-exported
    to enable hot reloading with `react-hot-loader` during development.'
  prefs: []
  type: TYPE_NORMAL
- en: To see the React component rendered in the browser when the server receives
    a request to the root URL, we need to use the Webpack and Babel setup to compile
    and bundle this code, and also add server-side code that responds to the root
    route request with the bundled code. We will implement this server-side code next.
  prefs: []
  type: TYPE_NORMAL
- en: Server with Express and Node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the project folder, create a folder called `server`, and add a file called
    `server.js` that will set up the server. Then, add another file called `devBundle.js`,
    which will help compile the React code using Webpack configurations while in development
    mode. In the following sections, we will implement the Node-Express app, which
    initiates client-side code bundling, starts the server, sets up the path to serve
    static assets to the client, and renders the React view in a template when a `GET`
    request is made to the root route.
  prefs: []
  type: TYPE_NORMAL
- en: Express app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In `server.js`, we will first add code to import the `express` module in order
    to initialize an Express app:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/server/server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Then we will use this Express app to build out the rest of the Node server application.
  prefs: []
  type: TYPE_NORMAL
- en: Bundling React app during development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to keep the development flow simple, we will initialize Webpack to
    compile the client-side code when the server is run. In `devBundle.js`, we will
    set up a `compile` method that takes the Express app and configures it to use
    the Webpack middleware to compile, bundle, and serve code, as well as enable hot
    reloading in development mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/server/devBundle.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We will call this compile method in `server.js` by adding the following lines
    while in development mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/server/server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: These two highlighted lines are only meant for development mode and should be
    commented out when building the application code for production. In development
    mode, when these lines are executed, Webpack will compile and bundle the React
    code to place it in `dist/bundle.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Serving static files from the dist folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Webpack will compile client-side code in both development and production mode,
    then place the bundled files in the `dist` folder. To make these static files
    available on requests from the client side, we will add the following code in `server.js` to
    serve static files from the `dist` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/server/server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This will configure the Express app to return static files from the `dist` folder
    when the requested route starts with `/dist`.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering templates at the root
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the server receives a request at the root URL `/`, we will render `template.js`
    in the browser. In `server.js`, add the following route-handling code to the Express
    app to receive `GET` requests at `/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/server/server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, configure the Express app to start a server that listens on the specified
    port for incoming requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/server/server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: With this code, when the server is running, it will be able to accept requests
    at the root route and render the React view with the "Hello World" text in the
    browser. The only part missing from this full-stack implementation is a connection
    to the database, which we will add in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the server to MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To connect your Node server to MongoDB, add the following code to `server.js`,
    and make sure you have MongoDB running in your workspace or you have the URL of
    a cloud MongoDB database instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/server/server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In this code example, `MongoClient` is the driver that connects to the running
    MongoDB instance using its URL. It allows us to implement the database-related
    code in the backend. This completes our full-stack integration for this simple
    web application using the MERN setup, and finally, we can run this code to see
    this application working live.
  prefs: []
  type: TYPE_NORMAL
- en: Run scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to run the application, we will update the `package.json` file to
    add the following run scripts for development and production:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-simplesetup/package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`yarn development`: This command will get Nodemon, Webpack, and the server
    started for development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`yarn build`: This will generate the client and server code bundles for production
    mode (before running this script, make sure to remove the `devBundle.compile`
    code from `server.js`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`yarn start`: This command will run the bundled code in production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use these commands to run the application either for debugging while
    you are developing the application or when the application is ready to go live
    in production.
  prefs: []
  type: TYPE_NORMAL
- en: Developing and debugging in real time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run the code developed so far, and to ensure that everything is working,
    you can go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Run the application from the command line**: `yarn development`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Load in browser**: Open the root URL in the browser, which is `http://localhost:3000`
    if you are using your local machine. You should see a page with the title MERN
    Kickstart that just shows Hello World!.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Develop code and debug live**: Change the `HelloWorld.js` component text
    from `"Hello World!"` to just `"hello"`. Save the changes to see the instantaneous
    update in the browser, and also check the command-line output to see that `bundle.js`
    is not re-created. Similarly, you can also see instant updates when you change
    the server-side code, increasing productivity during development.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have made it this far, congratulations! You are all set to start developing
    exciting MERN applications.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed development tool options and how to install MERN
    technologies, and then we wrote code to check whether the development environment
    is set up correctly.
  prefs: []
  type: TYPE_NORMAL
- en: We began by looking at the recommended workspace, IDE, version control software,
    and browser options suitable for web development. You can select from these options
    based on your preferences as a developer.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we set up the MERN stack technologies by first installing MongoDB, Node,
    and Yarn, and then adding the remaining required libraries using Yarn.
  prefs: []
  type: TYPE_NORMAL
- en: Before moving on to writing code to check this setup, we configured Webpack
    and Babel to compile and bundle code during development, and to build production-ready
    code. We learned that it is necessary to compile the ES6 and JSX code that is
    used for developing a MERN application before opening the application on browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we made the development flow efficient by including React Hot
    Loader for frontend development, configuring Nodemon for backend development,
    and compiling both the client and server code in one command when the server is
    run during development.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will use this setup to start building a skeleton MERN
    application that will function as a base for full-featured applications.
  prefs: []
  type: TYPE_NORMAL
