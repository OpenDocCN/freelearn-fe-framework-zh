- en: Chapter 4. Service Workers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 服务工作者
- en: In the previous lesson, we learned how to add server-side rendering to our application.
    In the next lesson, we'll configure service workers for our application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一课中，我们学习了如何向我们的应用程序添加服务器端渲染。在下一课中，我们将为我们的应用程序配置服务工作者。
- en: Lesson Objectives
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 课程目标
- en: 'In this lesson, you will:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课中，你将：
- en: Explore service workers and PWAs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索服务工作者和 PWAs
- en: Add a service worker to the application that we built in the previous lessons
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将服务工作者添加到我们在上一课中构建的应用程序中
- en: Configure the service worker to convert the app to a progressive web app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置服务工作者将应用转换为渐进式网络应用
- en: Explore how to debug a service worker
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索如何调试服务工作者
- en: Let's first understand what a service worker and a progressive web app is.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先了解什么是服务工作者和渐进式网络应用。
- en: What Is a Service Worker?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是服务工作者？
- en: A service worker is a script that the browser runs in the background which acts
    as a network proxy to manage network requests programmatically. It sits between
    the network and the device and caches content, enabling an offline experience
    for the user.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者是一个浏览器在后台运行的脚本，它充当网络代理以编程方式管理网络请求。它位于网络和设备之间，缓存内容，使用户能够离线体验。
- en: In addition to caching data, it can also synchronize API data in the background
    and add things like push notifications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除了缓存数据外，它还可以在后台同步 API 数据，并添加推送通知等功能。
- en: What Is a Progressive Web App?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是渐进式网络应用？
- en: '**Progressive Web App** (**PWA**) is a term that is used for web applications
    that behave in a way similar to native mobile applications.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**渐进式网络应用**（**PWA**）是一个用于描述以类似原生移动应用方式行为的网络应用的术语。'
- en: Like native apps, they allow an application to be started when the user is offline,
    caching the UI elements and API calls to display an initial page. That way, a
    user can interact with the application on a basic level until the connection gets
    established.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 就像原生应用一样，它们允许在用户离线时启动应用程序，缓存 UI 元素和 API 调用来显示初始页面。这样，用户就可以在基本层面上与应用程序交互，直到连接建立。
- en: Once the connection is established, the PWA will retrieve the updated data from
    the server and refresh the application, so the user can work with the latest data.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦建立连接，PWA 将从服务器检索更新数据并刷新应用程序，以便用户可以使用最新数据。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The official Angular documentation has a great section on service workers:
    [https://angular.io/guide/service-worker-intro](https://angular.io/guide/service-worker-intro)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 官方 Angular 文档有一个关于服务工作者的优秀部分：[https://angular.io/guide/service-worker-intro](https://angular.io/guide/service-worker-intro)
- en: Installing Dependencies
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: Angular comes with support for service workers. In order to use it, we first
    need to install the dependencies.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 内置了对服务工作者的支持。为了使用它，我们首先需要安装依赖项。
- en: Open the terminal in the project directory.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录中打开终端。
- en: 'Install the dependencies needed using the `npm` command:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm` 命令安装所需的依赖项：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When the installation is successful, we should see the new package added to
    the `dependencies` object in our project's `package.json` file:![Installing Dependencies](img/3.1.jpg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当安装成功时，我们应该在我们的项目 `package.json` 文件的 `dependencies` 对象中看到新添加的包：![安装依赖项](img/3.1.jpg)
- en: In this section, we have installed the dependencies for our service worker,
    which is the first step in implementing service workers in our app. Let's move
    on to the next section, where we will enable the service worker in our application.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经为我们的服务工作者安装了依赖项，这是在我们的应用程序中实现服务工作者的第一步。让我们继续到下一节，我们将在此处启用应用程序中的服务工作者。
- en: Enabling the Service Worker
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用服务工作者
- en: Now that the dependency is installed, it's time to enable the service worker.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在依赖项已安装，是时候启用服务工作者了。
- en: 'This involves three steps:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这涉及三个步骤：
- en: Enabling the service worker in our browser app in `.angular-cli.json`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `.angular-cli.json` 中启用我们的浏览器应用中的服务工作者。
- en: Importing and registering the `ServiceWorkerModule` in our `AppModule`.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 `AppModule` 中导入和注册 `ServiceWorkerModule`
- en: Creating the service worker configuration file `src/ngsw-config.json`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建服务工作者配置文件 `src/ngsw-config.json`。
- en: We will use the `ng set` command to enable support for the service worker in
    our browser app in `.angular-cli.json:`
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `ng set` 命令在 `.angular-cli.json` 中启用对服务工作者的支持：
- en: Open the terminal in the project directory.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录中打开终端。
- en: 'Run the following command to adjust `.angular-cli.json`:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以调整 `.angular-cli.json` 文件：
- en: '[PRE1]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Confirm that the property `serviceWorker` is set to `true` in the first app
    in the `apps` array in `.angular-cli.json`:![Enabling the Service Worker](img/3.2.jpg)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认在 `.angular-cli.json` 文件中 `apps` 数组的第一个应用中属性 `serviceWorker` 设置为 `true`：![启用服务工作者](img/3.2.jpg)
- en: Importing the ServiceWorkerModule
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入 ServiceWorkerModule
- en: We will import the `ServiceWorkerModule` in our `AppModule` and register it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `AppModule` 中导入 `ServiceWorkerModule` 并注册它。
- en: We will invoke the `register` method on the `ServiceWorkerModule`. This method
    takes two parameters. The first parameter defines what the location of the Angular
    service worker is. The value '`/ngsw-worker.js'` is what should be used in our
    case.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `ServiceWorkerModule` 上调用 `register` 方法。此方法接受两个参数。第一个参数定义了 Angular 服务工作者的位置。在我们的情况下，应该使用值
    '`/ngsw-worker.js'`。
- en: 'The second parameter is an object named `environment`, and with this object,
    we can control if we want to enable the service worker. We use the `environment`
    object to determine if the service worker should be enabled, as we only want to
    enable it on production builds:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数是一个名为 `environment` 的对象，通过这个对象，我们可以控制是否启用服务工作者。我们使用 `environment` 对象来确定是否应该启用服务工作者，因为我们只想在生产构建中启用它：
- en: Open the `src/app/app.module.ts` file in your editor.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的编辑器中打开 `src/app/app.module.ts` 文件。
- en: 'Add the following `import` statements at the top of the file:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件顶部添加以下 `import` 语句：
- en: '[PRE2]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the `ServiceWorkerModule` to the `imports` array and invoke the `register`
    method with these parameters:'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 `ServiceWorkerModule` 添加到 `imports` 数组，并使用这些参数调用 `register` 方法：
- en: '[PRE3]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creating the Service Worker Configuration
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建服务工作者配置
- en: Create the `src/ngsw-config.json` file and open it in your editor.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `src/ngsw-config.json` 文件并在您的编辑器中打开它。
- en: 'Add the following content to the file:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到文件中：
- en: '[PRE4]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, we add the initial default content to the `ngsw-config.json` file. This
    is the default configuration provided by the Angular team, and can be found here:
    [https://angular.io/guide/service-worker-getting-started#step-4-create-the-configuration-file-ngsw-configjson](https://angular.io/guide/service-worker-getting-started#step-4-create-the-configuration-file-ngsw-configjson)'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们将初始默认内容添加到 `ngsw-config.json` 文件中。这是 Angular 团队提供的默认配置，可以在以下位置找到：[https://angular.io/guide/service-worker-getting-started#step-4-create-the-configuration-file-ngsw-configjson](https://angular.io/guide/service-worker-getting-started#step-4-create-the-configuration-file-ngsw-configjson)
- en: Open the Terminal in the project directory.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录中打开终端。
- en: Run `npm run build:browser` to create a production build.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `npm run build:browser` 以创建生产构建。
- en: Verify that the build ran successfully and that the files `ngsw-worker.js` and
    `ngsw.json` got generated in the `dist/browser` directory.![Creating the service
    workerenablingService Worker Configuration](img/3.3.jpg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证构建是否成功运行，并且文件 `ngsw-worker.js` 和 `ngsw.json` 已在 `dist/browser` 目录中生成。![创建服务工作者，启用服务工作者配置](img/3.3.jpg)
- en: In this section, we enabled the service worker in our application and used the
    default configuration. We have verified that a production build generates the
    service worker configuration.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们在应用程序中启用了服务工作者并使用了默认配置。我们已经验证了生产构建生成了服务工作者配置。
- en: Let's add some custom configuration options next.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一些自定义配置选项。
- en: Configuring the Service Worker
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置服务工作者
- en: In the previous section, we added the service worker configuration file `src/ngsw-config.json`
    to our project, but we have not configured anything yet.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们将服务工作者配置文件 `src/ngsw-config.json` 添加到我们的项目中，但我们还没有进行任何配置。
- en: 'In this section, we will add two types of configurations: asset groups and
    data groups.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将添加两种类型的配置：资产组和数据组。
- en: Asset and Data Groups
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资产组和数据组
- en: In the asset groups configuration, we specify how we want our service worker
    to handle the assets of our application. When we talk about assets, we should
    think of style sheets, images, external JS files, and so on.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在资产组配置中，我们指定我们的服务工作者如何处理我们的应用程序的资产。当我们谈论资产时，我们应该想到样式表、图像、外部 JS 文件等等。
- en: 'Asset groups are defined using the following TypeScript interface:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 资产组使用以下 TypeScript 接口定义：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here''s what the parameters mean:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 参数的含义如下：
- en: '`name` uniquely identifies the group of assets'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` 唯一标识资产组'
- en: '`installMode` defines how new resources are initially cached'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`installMode` 定义了新资源最初如何缓存'
- en: '`updateMode` defines the caching behavior of existing resources'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`updateMode` 定义了现有资源的缓存行为'
- en: The `resources` object describes the actual resource to cache
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resources` 对象描述了实际要缓存的资源'
- en: 'A complete reference for this can be found at: [https://angular.io/guide/service-worker-config#assetgroups](https://angular.io/guide/service-worker-config#assetgroups).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的参考信息可以在以下位置找到：[https://angular.io/guide/service-worker-config#assetgroups](https://angular.io/guide/service-worker-config#assetgroups)。
- en: In the data groups configuration, we specify how we want our service worker
    to cache the data of the APIs we are requesting the data from.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据组配置中，我们指定了我们的 Service Worker 如何缓存我们从 API 请求的数据。
- en: 'Data groups are defined using the following TypeScript interface:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 数据组使用以下 TypeScript 接口定义：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here''s what the parameters mean:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是这些参数的含义：
- en: '`name` uniquely identifies the group'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` 唯一标识该组'
- en: '`urls` is an array of URL patterns'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`urls` 是一个 URL 模式数组'
- en: '`version` provides a mechanism to force reloading of cached items'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version` 提供了一种机制来强制重新加载缓存项'
- en: '`cacheConfig` defines the policy that is used to cache this group'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cacheConfig` 定义了用于缓存此组的策略'
- en: 'A complete reference for this can be found at: [https://angular.io/guide/service-worker-config#datagroups](https://angular.io/guide/service-worker-config#datagroups).'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的参考信息可以在以下位置找到：[https://angular.io/guide/service-worker-config#datagroups](https://angular.io/guide/service-worker-config#datagroups)。
- en: Configuring the Asset and Data Groups
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置资产组和数据组
- en: We will append two items to the asset groups configuration.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向资产组配置中添加两个项目。
- en: The first asset group caches the data that comes from the domains that we use
    to fetch our CSS and the fonts included in that CSS.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个资产组缓存了来自我们用于获取 CSS 和其中包含的字体所使用的域的数据。
- en: 'The second asset group caches the static data from the API we work with; in
    this case, the user avatars:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个资产组缓存了我们工作中使用的 API 的静态数据；在这种情况下，是用户头像：
- en: Open the `src/ngsw-config.json` file in your editor.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的编辑器中打开 `src/ngsw-config.json` 文件。
- en: Locate the `assetGroups` array.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到 `assetGroups` 数组。
- en: 'Add the following two objects to this array:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向此数组添加以下两个对象：
- en: '[PRE7]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Make sure to correctly format the JSON; use [https://jsonlint.com/](https://jsonlint.com/)
    to be sure.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保正确格式化 JSON；使用 [https://jsonlint.com/](https://jsonlint.com/) 来确保正确性。
- en: 'We will create the data groups configuration. We will define one data group
    that caches the requests from our API:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建数据组配置。我们将定义一个数据组，用于缓存来自我们 API 的请求：
- en: Open the `src/ngsw-config.json` file in your editor.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的编辑器中打开 `src/ngsw-config.json` 文件。
- en: Create a top-level array with the key `dataGroups`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有 `dataGroups` 键的顶级数组。
- en: 'Add the following object to this array:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向此数组添加以下对象：
- en: '[PRE8]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this section, we configured the asset groups and data groups of our application
    in our service worker.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们在 Service Worker 中配置了应用程序的资产组和数据组。
- en: With this configuration and our service worker running, we should be able to
    retrieve a fully styled application that displays the latest API data.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此配置和运行中的 Service Worker，我们应该能够检索到一个完全样式化的应用程序，该应用程序显示最新的 API 数据。
- en: Testing the Service Worker
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 Service Worker
- en: In order to test if our service worker works, we will have to load our application,
    and then disconnect our browser from the internet.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的 Service Worker 是否正常工作，我们必须加载我们的应用程序，然后断开浏览器与互联网的连接。
- en: Checking Where the Data Comes from
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查数据来源
- en: Using Chrome Developer Tools, it's easy to see where a particular resource is
    being retrieved from.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Chrome 开发者工具，可以轻松地看到特定资源是从哪里检索的。
- en: Using the **Network** tab in Chrome Developer Tools, you can see what files
    are being retrieved, where the data comes from, and how long it took the browser
    to fetch those resources.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Chrome 开发者工具中的 **Network** 选项卡，您可以看到正在检索哪些文件，数据来自哪里，以及浏览器检索这些资源花费了多长时间。
- en: 'The following screenshot shows a normal page request, where each file is downloaded
    from the web server:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图显示了一个正常的页面请求，其中每个文件都是从网络服务器下载的：
- en: '![Checking Where the Data Comes from](img/3.4.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![检查数据来源](img/3.4.jpg)'
- en: 'In the following screenshot, in the **Size** column, you can see that the data
    is being retrieved from the service worker. This means it did not make a request
    to the network to fetch those items; rather, it got them from the browser cache:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，在 **Size** 列中，您可以看到数据是从 Service Worker 中检索的。这意味着它没有向网络发出请求来获取这些项；相反，它从浏览器缓存中获取了它们：
- en: '![Checking Where the Data Comes from](img/3.5.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![检查数据来源](img/3.5.jpg)'
- en: Enabling Offline Mode
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用离线模式
- en: It's the nature of a web browser to be online, but in reality, we've all found
    ourselves in situations where our device is offline due to a lack of network connectivity.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 网络浏览器在线是它的本质，但在现实中，我们都发现自己处于设备离线的情况，这是由于缺乏网络连接。
- en: In order to develop apps that can handle these situations, Chrome offers a so-called
    **Offline mode**. It will stop the browser from connecting to the network. That
    way, we can make sure our applications behave as expected.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开发能够处理这些情况的应用程序，Chrome 提供了一个所谓的**离线模式**。它将阻止浏览器连接到网络。这样，我们可以确保我们的应用程序按预期运行。
- en: 'In the **Network** tab in Chrome Developer Tools, you can find a checkbox named
    **Offline**, which triggers this behavior:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Chrome 开发者工具的**网络**标签页中，你可以找到一个名为**离线**的复选框，它触发了这种行为：
- en: '![Enabling Offline Mode](img/3.6.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![启用离线模式](img/3.6.jpg)'
- en: 'After checking this box, you will see a yellow indicator next to the tab name,
    which indicates that there is something unusual going on with the **Network**
    tab:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在勾选此框后，你将在标签名称旁边看到一个黄色的指示器，这表明**网络**标签页存在异常情况：
- en: '![Enabling Offline Mode](img/3.7.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![启用离线模式](img/3.7.jpg)'
- en: Running a Local Build of the Browser App
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行浏览器应用程序的本地构建
- en: 'We will build a production version of our app that enables the service worker.
    Once the build is made, we will host the build using a simple web server called
    `http-server` and open it in our browser:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个启用 Service Worker 的应用程序的生产版本。一旦构建完成，我们将使用一个简单的名为 `http-server` 的网络服务器托管该构建，并在我们的浏览器中打开它：
- en: 'Build the browser app using the following command:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令构建浏览器应用程序：
- en: '[PRE9]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Serve the app using the following command:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令启动应用：
- en: '[PRE10]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The application will now be served on: `http://localhost:8080`'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用程序现在将在：`http://localhost:8080`上提供服务。
- en: Open the page in the browser. You should see the list of posts.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开页面。你应该看到帖子列表。
- en: Open the **Console** tab in Chrome Developer Tools and verify that there are
    no errors.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Chrome 开发者工具中打开**控制台**标签页，并验证是否存在错误。
- en: Inspecting the Behavior
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查行为
- en: 'We will see how our app behaves with the service worker enabled:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到我们的应用程序在启用 Service Worker 时的行为：
- en: Open the page from the last exercise in the browser.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开上一个练习的页面。
- en: Open the **Network** tab in Chrome Developer Tools.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Chrome 开发者工具中打开**网络**标签页。
- en: With this **Network** tab open, reload `http://localhost:8080` to see where
    the data comes from.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开此**网络**标签页的情况下，重新加载 `http://localhost:8080` 以查看数据来源。
- en: You should see that the data gets loaded from the service worker.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到数据是从 Service Worker 加载的。
- en: Setting Our Application to Offline Mode
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将我们的应用程序设置为离线模式
- en: 'We will set our application to **Offline** mode and verify that the service
    worker displays a complete and cached version of our app:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把我们的应用程序设置为**离线**模式，并验证 Service Worker 是否显示了我们应用程序的完整和缓存版本：
- en: Open the page from the last exercise in the browser.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开上一个练习的页面。
- en: Open the **Network** tab in Chrome Developer Tools.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Chrome 开发者工具中打开**网络**标签页。
- en: Enable the **Offline** mode by enabling the checkbox.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过勾选复选框启用**离线**模式。
- en: 'While in **Offline** mode, navigate to: `http://localhost:8080`.'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**离线**模式下，导航到：`http://localhost:8080`。
- en: You should see that our application still gets loaded and displays the cached
    data.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到我们的应用程序仍然被加载并显示缓存的数据。
- en: In this section, we ran a local build of our app and then tested its behavior
    in offline mode. Our app runs well even in offline mode. We can now explore how
    to debug our service workers.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们运行了我们应用程序的本地构建，并测试了其在离线模式下的行为。即使在离线模式下，我们的应用程序也能正常运行。我们现在可以探索如何调试我们的
    Service Worker。
- en: Debugging the Service Worker
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试 Service Worker
- en: 'There is a famous saying in computer science:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机科学中有一句著名的话：
- en: '"There are 2 hard problems in computer science: cache invalidation, naming
    things."'
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “计算机科学中有两个难题：缓存失效，命名事物。”
- en: ''
  id: totrans-135
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -Phil Karlton
  id: totrans-136
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -Phil Karlton
- en: The first one applies to debugging service workers.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个适用于调试 Service Worker。
- en: As discussed earlier, a service worker adds a caching layer between the network
    and the device. This inherently makes it hard to debug, because when you update
    your service worker definition or the configuration of your website, your changes
    might very well be cached, and thus not visible.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Service Worker 在网络和设备之间添加了一个缓存层。这本质上使得调试变得困难，因为当你更新你的 Service Worker 定义或网站的配置时，你的更改可能会被缓存，因此不可见。
- en: It is a quite well-known challenge while developing applications with service
    worker support, so it's good to understand how to debug the service worker.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在使用支持 Service Worker 的应用程序开发中相当常见的挑战，因此了解如何调试 Service Worker 是很好的。
- en: '![Debugging the Service Worker](img/3.8.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![调试 Service Worker](img/3.8.jpg)'
- en: Chrome Developer Tools to the Rescue
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chrome 开发者工具来帮忙
- en: Chrome Developer Tools is an advanced tool for inspecting and debugging the
    technology behind websites, and luckily, it has great support for service workers.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome开发者工具是一个用于检查和调试网站背后技术的先进工具，幸运的是，它对服务工作者有很好的支持。
- en: In the **Application** tab, we can see which service workers are installed,
    what their status is, and unregister them to make sure we download the latest
    version.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在**应用程序**标签页中，我们可以看到已安装的服务工作者，它们的状态是什么，以及注销它们以确保我们下载最新版本。
- en: Locating the Running Service Worker
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定位正在运行的服务工作者
- en: 'We will locate where we can find the running service worker:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将找到可以找到正在运行的服务工作者的地方：
- en: Open the page from the last exercise in the browser.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开上一个练习的页面。
- en: Open the **Application** tab in Chrome Developer Tools.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome开发者工具中打开**应用程序**标签页。
- en: In the sidebar of the **Application** tab, click on the **Service Workers**
    link.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**应用程序**标签页的侧边栏中点击**服务工作者**链接。
- en: Verify that there is an entry in the list of service workers.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证服务工作者列表中是否有条目。
- en: Unregistering the Registered Service Worker
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注销已注册的服务工作者。
- en: 'We will unregister our service worker:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将注销我们的服务工作者：
- en: Open the page from the last exercise in the browser.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开上一个练习的页面。
- en: Open the **Application** tab in Chrome Developer Tools and click on the **Service
    Workers** link in the sidebar.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome开发者工具中打开**应用程序**标签页，并点击侧边栏中的**服务工作者**链接。
- en: Locate the entry of the service worker that has the **Status** set to **activated**.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到状态设置为**激活**的服务工作者条目。
- en: Click on the **Unregister** link next to the **Update** link.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**更新**链接旁边的**注销**链接。
- en: When you now refresh the page, a new service worker should be loaded.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您现在刷新页面时，应该加载一个新的服务工作者。
- en: Note
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you just refresh the page, it will load the same service worker from our
    build.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只是刷新页面，它将加载我们构建中的相同服务工作者。
- en: 'The development cycle for building a service worker looks something like this:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 构建服务工作者的开发周期看起来大致如下：
- en: Make a change in the Angular application.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Angular应用程序中做出更改。
- en: Create a production build using the `npm run build:browser` command.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`npm run build:browser`命令创建生产构建。
- en: Serve the new build using the `npx http-server ./dist/browser` command.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`npx http-server ./dist/browser`命令提供新的构建版本。
- en: Unregister the currently active service worker.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注销当前活动中的服务工作者。
- en: Browse to the new version and verify the changes you made are applied.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到新版本并验证您所做的更改是否已应用。
- en: In this section, we saw where to locate the service worker in our browser. We
    then debugged it by unregistering it.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们看到了如何在浏览器中定位服务工作者。然后，我们通过注销它来调试它。
- en: Summary
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this lesson, we worked entirely with service workers. We started by installing
    the required dependencies. We then moved on to enabling the service worker, configuring
    it, testing it, and finally, debugging it.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节课中，我们完全使用了服务工作者。我们首先安装了所需的依赖项。然后，我们继续启用服务工作者，配置它，测试它，最后调试它。
