["```js\nchapter-3-initial\n  |- /node_modules\n  |- /public\n  |- /src\n    |- /components\n       |- /Header\n          |- Header.css\n          |- Header.js\n       |- /Lane\n          |- Lane.css\n          |- Lane.js\n    |- /pages\n       |- /Board\n          |- Board.js\n          |- Board.css\n    |- App.js\n    |- App.css\n    |- index.js\n    |- index.css\npackage.json\n```", "```js\n    + import { useState, useEffect } from 'react';\n      import Lane from '../../components/Lane/Lane';\n      import './Board.css';\n      // ...\n      function Board() {\n    +   const [loading, setLoading] = useState(false);\n    +   const [tasks, setTasks] = useState([]);\n    +   const [error, setError] = useState('');\n    +   useEffect(() => {\n    +     async function fetchData() {\n    +       try {\n    +         const tasks = await fetch(\n                  `https://my-json-server.typicode.com/\n                  PacktPublishing/React-Projects-Second-\n                  Edition/tasks`,\n            );\n    +         const result = await tasks.json();\n    +         if (result) {\n    +           setTasks(result);\n    +           setLoading(false);\n    +         }\n    +       } catch (e) {\n    +         setLoading(false);\n    +         setError(e.message);\n    +       }\n    +     }\n    +     fetchData();\n    +   }, []);\n       return (\n         // ...\n    ```", "```js\n        // ...\n        return (\n          <div className='Board-wrapper'>\n            {lanes.map((lane) => (\n              <Lane\n                key={lane.id}\n                title={lane.title}\n    +           loading={loading}\n    +           error={error}\n    +           tasks={tasks.filter((task) => \n                  task.lane === lane.id)}\n              />\n            ))}\n          </div>\n        );\n      }\n\n      export default Board;\n    ```", "```js\n    + import Task from '../Task/Task';\n      import './Lane.css';\n    - function Lane({ title }) {\n    + function Lane({ title, loading, error, tasks }) {\n        return (\n          <div className='Lane-wrapper'>\n            <h2>{title}</h2>\n    +       {loading || error ? (\n    +         <span>{error || 'Loading...'}</span>\n    +       ) : (\n    +         tasks.map((task) => (\n    +            <Task\n    +              key={task.id}\n    +              id={task.id}\n    +              title={task.title}\n    +              body={task.body}\n    +            />\n    +         ))\n    +       )}\n          </div>\n        );\n      }\n      export default Lane;\n    ```", "```js\n    import './Task.css';\n    function Task({ title, body }) {\n      return (\n        <div className='Task-wrapper'>\n          <h3>{title}</h3>\n          <p>{body}</p>\n        </div>\n      );\n    }\n    export default Task;\n    ```", "```js\n    .Task-wrapper {\n      background: darkGray;\n      padding: 20px;\n      border-radius: 20px;\n      margin: 0% 5% 5% 5%;\n    }\n    .Task-wrapper h3 {\n      width: 100%;\n      margin: 0;\n    }\n    ```", "```js\n    import { useState, useEffect } from 'react';\n    function useDataFetching(dataSource) {\n      return [];\n    }\n    export default useDataFetching;\n    ```", "```js\n      import { useState, useEffect } from 'react';\n      function useDataFetching(dataSource) {\n    +   const [loading, setLoading] = useState(false);\n    +   const [data, setData] = useState([]);\n    +   const [error, setError] = useState('');\n        return [];\n      }\n\n      export default useDataFetching;\n    ```", "```js\n      import { useState, useEffect } from 'react';\n      function useDataFetching(dataSource) {\n        // ...\n    -   return [];\n    +   useEffect(() => {\n    +     async function fetchData() {\n    +       try {\n    +         const data = await fetch(dataSource);\n    +         const result = await data.json();\n    +         if (result) {\n    +           setData(result);\n    +           setLoading(false);\n    +         }\n    +       } catch (e) {\n    +         setLoading(false);\n    +         setError(e.message);\n    +       }\n    +     }\n    +     fetchData();\n    +   }, [dataSource]);\n    +   return [loading, error, data];\n      }\n      export default useDataFetching;\n    ```", "```js\n    - import { useState, useEffect } from 'react';\n    + import useDataFetching from \n        '../../hooks/useDataFetching';\n      import Lane from '../../components/Lane/Lane';\n      import './Board.css';\n      // ...\n    ```", "```js\n      // ...\n      function Board() {\n    -   const [loading, setLoading] = useState(false);\n    -   const [tasks, setTasks] = useState([]);\n    -   const [error, setError] = useState('');\n    -   useEffect(() => {\n    -     async function fetchData() {\n    -       try {\n    -         const tasks = await fetch(\n              `https://my-json-server.typicode.com/\n               PacktPublishing/React-Projects-Second-\n               Edition/tasks`,\n            );\n    -         const result = await tasks.json();\n    -         if (result) {\n    -           setTasks(result);\n    -           setLoading(false);\n    -         }\n    -       } catch (e) {\n    -         setLoading(false);\n    -         setError(e.message);\n    -       }\n    -     }\n    -     fetchData();\n    -   }, []);\n       return (\n         // ...\n    ```", "```js\n      import useDataFetching \n        from '../../hooks/useDataFetching';\n      import Lane from '../../components/Lane/Lane';\n      import './Board.css';\n      function Board() {\n    +   const [loading, error, tasks] =\n          useDataFetching(`https://my-json-server.\n          typicode.com/PacktPublishing/React-Projects-\n          Second-Edition/tasks`);\n       return (\n         // ...\n    ```", "```js\n    import Task from '../../components/Task/Task';\n    import useDataFetching from \n      '../../hooks/useDataFetching';\n    import './Backlog.css';\n    function Backlog() {\n      const [loading, error, tasks] = useDataFetching(\n        'https://my-json-server.typicode.com/\n         PacktPublishing/React-Projects-Second-Edition/\n         tasks',\n      );\n      return (\n        <div></div>\n      );\n    }\n    export default Backlog;\n    ```", "```js\n      // ...\n      return (\n    -   <div>\n    +   <div className='Backlog-wrapper'>\n    +     <h2>Backlog</h2>\n    +     <div className='Tasks-wrapper'>\n    +       {loading || error ? (\n    +         <span>{error || 'Loading...'}</span>\n    +       ) : (\n    +         tasks.map((task) => (\n    +           <Task\n    +             key={task.id}\n    +             title={task.title}\n    +             body={task.body}\n    +           />\n    +         ))\n    +       )}\n    +     </div>\n        </div>\n      );\n    }\n    export default Backlog;\n    ```", "```js\n    .Backlog-wrapper {\n      display: flex;\n      flex-direction: column;\n      margin: 5%;\n    }\n    .Backlog-wrapper h2 {\n      width: 100%;\n      padding-bottom: 10px;\n      text-align: center;\n      border-bottom: 1px solid darkGray;\n    }\n    .Tasks-wrapper {\n      display: flex;\n      justify-content: space-between;\n      flex-direction: row;\n      flex-wrap: wrap;\n      margin: 5%;\n    }\n    ```", "```js\n      import './App.css';\n      import Board from './pages/Board/Board';\n      import Header from './components/Header/Header';\n    + import Backlog from './pages/Backlog/Backlog';\n      function App() {\n        return (\n          <div className='App'>\n            <Header />\n            <Board />\n    +       <Backlog />\n          </div>\n        );\n      }\n      export default App;\n    ```", "```js\n      // ...\n    + function onDragStart(e, id) {\n    +   e.dataTransfer.setData('id', id);\n    + }\n      function Board() {\n        const [loading, error, tasks] = useDataFetching(\n          'https://my-json-server.typicode.com/\n           PacktPublishing/React-Projects-Second-Edition/\n           tasks',\n        );\n        return (\n          <div className='Board-wrapper'>\n            {lanes.map((lane) => (\n              <Lane\n                key={lane.id}\n                title={lane.title}\n                loading={loading}\n                error={error}\n                tasks={tasks.filter((task) => \n                       task.lane === lane.id)}\n    +           onDragStart={onDragStart}\n              />\n            ))}\n          </div>\n        );\n      }\n      export default Board;\n    ```", "```js\n      // ...\n    - function Lane({ title, loading, error, tasks }) {\n    + function Lane({ title, loading, error, tasks, \n        onDragStart }) {\n        return (\n          <div className='Lane-wrapper'>\n            <h2>{title}</h2>\n            {loading || error ? (\n              <span>{error || 'Loading...'}</span>\n            ) : (\n              tasks.map((task) => (\n                <Task\n                  key={task.id}\n                  title={task.title}\n                  body={task.body}\n    +             onDragStart={onDragStart}\n                />\n              ))\n            )}\n          </div>\n        );\n      }\n      export default Lane;\n    ```", "```js\n      import './Task.css';\n    - function Task({ title, body }) { \n    + function Task({ id, title, body, onDragStart }) {\n        return (\n          <div\n            className='Task-wrapper'\n    +       draggable\n    +       onDragStart={(e) => onDragStart(e, id)}\n          >\n            <h3>{title}</h3>\n            <p>{body}</p>\n          </div>\n        );\n      }\n      export default Task;\n    ```", "```js\n      // ...\n      function onDragStart(e, id) {\n        e.dataTransfer.setData('id', id);\n      }\n    + function onDragOver(e) {\n    +   e.preventDefault();\n    + };\n      function Board() {\n        const [loading, error, tasks] = useDataFetching(\n          'https://my-json-server.typicode.com/\n           PacktPublishing/React-Projects-Second-Edition/\n           tasks',\n        );\n        return (\n          <div className='Board-wrapper'>\n            {lanes.map((lane) => (\n              <Lane\n                key={lane.id}\n                title={lane.title}\n                loading={loading}\n                error={error}\n                tasks={tasks.filter((task) => \n                       task.lane === lane.id)}\n                onDragStart={onDragStart}\n    +           onDragOver={onDragOver}\n              />\n            ))}\n          </div>\n        );\n      }\n      export default Board;\n    ```", "```js\n      // ...\n    - function Lane({ title, loading, error, tasks, \n        onDragStart }) {\n    + function Lane({ title, loading, error, tasks, \n        onDragStart, onDragOver }) {\n        return (\n    -     <div className='Lane-wrapper'>\n    +     <div className='Lane-wrapper' \n           onDragOver={onDragOver}>\n            <h2>{title}</h2>\n            // ...\n    ```", "```js\n    + import { useEffect, useState } from 'react';\n      import Lane from '../../components/Lane/Lane';\n      import useDataFetching from\n        '../../hooks/useDataFetching';\n      import './Board.css';\n      // ...\n      function Board() {\n        const [\n          loading, \n          error, \n    -     tasks\n    +     data] = useDataFetching(\n            'https://my-json-server.typicode.com/\n             PacktPublishing/React-Projects-Second-Edition/\n             tasks',\n      );\n    +   const [tasks, setTasks] = useState([]);\n    +   useEffect(() => {\n    +     setTasks(data);\n    +   }, [data]);\n      // ...\n      return (\n        // ...\n    ```", "```js\n      // ...\n      function Board() {\n        // ...\n    +   function onDrop(e, laneId) {\n    +     const id = e.dataTransfer.getData('id');\n    +     const updatedTasks = tasks.filter((task) => {\n    +       if (task.id.toString() === id) {\n    +         task.lane = laneId;\n    +       }\n    +       return task;\n    +     });\n    +     setTasks(updatedTasks);\n    +   }\n        return (\n          // ...\n    ```", "```js\n        // ...\n        Return (\n          <div className='Board-wrapper'>\n            {lanes.map((lane) => (\n              <Lane\n                key={lane.id}\n    +           laneId={lane.id}\n                title={lane.title}\n                loading={loading}\n                error={error}\n                tasks={tasks.filter((task) => \n                       task.lane === lane.id)}\n                onDragStart={onDragStart}\n                onDragOver={onDragOver}\n    +           onDrop={onDrop}\n              />\n            ))}\n          </div>\n        );\n      }\n      export default Board;\n    ```", "```js\n      import Task from '../Task/Task';\n      import './Lane.css';\n      function Lane({\n    +   laneId,\n        title,\n        loading,\n        error,\n        tasks,\n        onDragStart,\n        onDragOver,\n    +   onDrop,\n      }) {\n        return (\n          <div\n            className='Lane-wrapper'\n            onDragOver={onDragOver}\n    +       onDrop={(e) => onDrop(e, laneId)}\n          >\n          // ...\n    ```", "```js\nnpm install styled-components\n```", "```js\n    + import styled from 'styled-components';\n    - import './Task.css';\n    + const TaskWrapper = styled.div`\n    +   background: darkGray;\n    +   padding: 20px;\n    +   border-radius: 20px;\n    +   margin: 0% 5% 5% 5%;\n    +   h3 {\n    +     width: 100%;\n    +     margin: 0;\n    +   }\n    + `;\n      function Task({ id, title, body, onDragStart }) {\n        return (\n    -     <div className=\"Task-wrapper\"\n    +     <TaskWrapper \n            draggable \n            onDragStart={(e) => onDragStart(e, id)}\n          >\n            <h3>{title}</h3>\n            <p>{body}</p>\n    -     </div>\n    +     </TaskWrapper>\n      );\n    }\n    export default Task;\n    ```", "```js\n      import styled from 'styled-components';\n\n      // ...\n    -   h3 {\n    -     width: 100%;\n    -     margin: 0;\n    -   }\n    - `;\n    + const Title = styled.h3`\n    +   width: 100%;\n    +   margin: 0;\n    + `;\n      function Task({ id, title, body, onDragStart }) {\n        return (\n          <TaskWrapper \n            draggable \n            onDragStart={(e) => onDragStart(e, id)}\n          >\n    -       <h3>{title}</h3>\n    +       <Title>{title}</Title>\n            <p>{body}</p>\n          </TaskWrapper>\n      );\n    }\n    export default Task;\n    ```", "```js\n    + import styled from 'styled-components';\n      import Task from '../Task/Task';\n    - import './Lane.css';\n    + const LaneWrapper = styled.div`\n    +   text-align: left;\n    +   padding: 0;\n    +   background: lightGray;\n    +   border-radius: 20px;\n    +   min-height: 50vh;\n    +   width: 20vw;\n    +   @media (max-width: 768px) {\n    +     margin-bottom: 5%;\n    +   }\n    + `;\n    + const Title = styled.h2`\n    +   width: 100%;\n    +   padding-bottom: 10px;\n    +   text-align: center;\n    +   border-bottom: 1px solid darkGray;\n    + `;\n      function Lane({\n        // ...\n    ```", "```js\n      // ...\n      function Lane({\n        laneId,\n        title,\n        loading,\n        error,\n        tasks,\n        onDragStart,\n        onDragOver,\n        onDrop,\n      }) {\n        return (\n    -     <div className=\"Lane-wrapper\"    \n    +     <LaneWrapper \n            onDragOver={onDragOver} \n            onDrop={(e) => onDrop(e, laneId)}\n          >\n    -       <h3>{title}</h3>\n    +       <Title>{title}</Title>\n            {loading || error ? (\n              <span>{error || 'Loading...'}</span>\n            ) : (\n              // ...\n            )}\n    -     </div>\n    +     </LaneWrapper>\n        );\n      }\n      export default Lane;\n    ```", "```js\n- import './App.css';\n+ import styled from 'styled-components';\n  import Board from './pages/Board/Board';\n  import Header from './components/Header/Header';\n  import Backlog from './pages/Backlog/Backlog';\n+ const AppWrapper = styled.div`\n+   text-align: center;\n+ `;\n  function App() {\n    return (\n-     <div className='App'>\n+     <AppWrapper>\n        <Header />\n        <Board />\n        <Backlog />\n-     </div>\n+     </AppWrapper>\n    );\n  }\n  export default App;\n```", "```js\n- import styled from 'styled-components'; \n+ import styled, { createGlobalStyle } from \n    'styled-components';\n  import Board from './pages/Board/Board';\n  import Header from './components/Header/Header';\n  import Backlog from './pages/Backlog/Backlog';\n+ const GlobalStyle = createGlobalStyle`\n+   body {\n+     margin: 0;\n+     font-family: -apple-system, BlinkMacSystemFont, \n        'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu',\n'Cantarell', 'Fira Sans', 'Droid Sans', \n        'Helvetica Neue', sans-serif;\n+     -webkit-font-smoothing: antialiased;\n+     -moz-osx-font-smoothing: grayscale;\n+   }\n+ `;\n  const AppWrapper = styled.div`\n    // ...\n```", "```js\n  // ...\n  function App() {\n    return (\n+     <>\n+       <GlobalStyle />\n        <AppWrapper>\n          <Header />\n          <Board />\n          <Backlog />\n        </AppWrapper>\n+     </>\n    );\n  }\n  export default App;\n```", "```js\n  import React from 'react'; \n  import ReactDOM from 'react-dom/client';\n- import './index.css';\n  import App from './App';\n  import reportWebVitals from './reportWebVitals';\n  const root = ReactDOM.createRoot(\n    document.getElementById('root'));\n    // ...\n```"]