["```js\n  name: {\n    type: String,\n    trim: true,\n    required: 'Name is required'\n  },\n```", "```js\n  world: {\n    type: String, trim: true,\n    required: 'World image is required'\n  },\n```", "```js\n  clue: {\n    type: String,\n    trim: true\n  },\n```", "```js\nanswerObjects: [VRObjectSchema],\nwrongObjects: [VRObjectSchema],\n```", "```js\nupdated: Date,\ncreated: {\n    type: Date,\n    default: Date.now\n},\n```", "```js\nmaker: {type: mongoose.Schema.ObjectId, ref: 'User'}\n```", "```js\n  objUrl: {\n    type: String, trim: true,\n    required: 'OBJ file is required'\n  },\n  mtlUrl: {\n    type: String, trim: true,\n    required: 'MTL file is required'\n  },\n```", "```js\ntranslateX: {type: Number, default: 0},\ntranslateY: {type: Number, default: 0},\ntranslateZ: {type: Number, default: 0},\n```", "```js\nrotateX: {type: Number, default: 0},\nrotateY: {type: Number, default: 0},\nrotateZ: {type: Number, default: 0},\n```", "```js\nscale: {type: Number, default: 1},\n```", "```js\ncolor: {type: String, default: 'white'}\n```", "```js\nGameSchema.path('answerObjects').validate(function(v) {\n  if (v.length == 0) {\n    this.invalidate('answerObjects',\n   'Must add alteast one VR object to collect')\n  }\n}, null) \n```", "```js\nGameSchema.path('wrongObjects').validate(function(v) {\n  if (v.length == 0) {\n    this.invalidate('wrongObjects', \n    'Must add alteast one other VR object') \n  }\n}, null) \n```", "```js\nrouter.route('/api/games/by/:userId')\n    .post(authCtrl.requireSignin, gameCtrl.create)\n```", "```js\napp.use('/', gameRoutes)\n```", "```js\nrouter.param('userId', userCtrl.userByID)\n```", "```js\nconst create = async (req, res, next) => {\n  const game = new Game(req.body)\n  game.maker = req.profile\n  try{\n    let result = await game.save()\n    res.status(200).json(result)\n  } catch (err) {\n    return res.status(400).json({\n    error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst create = async (params, credentials, game) => {\n  try {\n    let response = await fetch('/api/games/by/'+ params.userId, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify(game)\n    })\n    return await response.json()\n  } catch(err) { \n    console.log(err)\n  }\n}\n```", "```js\nrouter.route('/api/games')\n    .get(gameCtrl.list)\n```", "```js\nconst list = async (req, res) => {\n  try {\n    let games = await Game.find({}).populate('maker', '_id name').sort('-created').exec()\n    res.json(games)\n  } catch (err) {\n    return res.status(400).json({\n    error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst list = async (signal) => {\n  try {\n    let response = await fetch('/api/games', {\n      method: 'GET',\n      signal: signal\n    })\n    return await response.json()\n  } catch(err) { \n    console.log(err)\n  }\n}\n```", "```js\nrouter.route('/api/games/by/:userId')\n    .get(gameCtrl.listByMaker)\n```", "```js\nconst listByMaker = async (req, res) => {\n  try {\n    let games = await Game.find({maker:\n      req.profile._id}).populate('maker', '_id name')\n    res.json(games)\n  } catch (err) {\n    return res.status(400).json({\n     error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst listByMaker = async (params, signal) => {\n  try {\n    let response = await fetch('/api/games/by/'+params.userId, {\n      method: 'GET',\n      signal: signal,\n    })\n    return await response.json()\n  } catch(err) { \n    console.log(err)\n  }\n}\n```", "```js\nrouter.route('/api/game/:gameId')\n    .get(gameCtrl.read)\n```", "```js\nrouter.param('gameId', gameCtrl.gameByID)\n```", "```js\nconst gameByID = async (req, res, next, id) => {\n  try { \n    let game = await Game.findById(id).populate('maker', '_id name').exec()\n    if (!game)\n      return res.status('400').json({\n        error: \"Game not found\"\n      })\n    req.game = game\n    next()\n  } catch (err) {\n    return res.status('400').json({\n      error: \"Could not retrieve game\"\n    })\n  }\n}\n```", "```js\nconst read = (req, res) => {\n  return res.json(req.game)\n}\n```", "```js\nconst read = async (params) => {\n  try {\n    let response = await fetch('/api/game/' + params.gameId, {\n      method: 'GET'\n    })\n    return await response.json()\n  } catch(err) { \n    console.log(err)\n  }\n}\n```", "```js\nrouter.route('/api/games/:gameId')\n    .put(authCtrl.requireSignin, gameCtrl.isMaker, gameCtrl.update)\n```", "```js\nconst isMaker = (req, res, next) => {\n  let isMaker = req.game && req.auth && req.game.maker._id == req.auth._id\n  if(!isMaker){\n    return res.status('403').json({\n      error: \"User is not authorized\"\n    })\n  }\n  next()\n}\n```", "```js\nconst update = async (req, res) => {\n  try {\n  let game = req.game\n  game = extend(game, req.body)\n  game.updated = Date.now()\n  await game.save()\n    res.json(game)\n  } catch (err) {\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst update = async (params, credentials, game) => {\n  try {\n    let response = await fetch('/api/games/' + params.gameId, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify(game)\n    })\n    return await response.json()\n  } catch(err) { \n    console.log(err)\n  }\n}\n```", "```js\nrouter.route('/api/games/:gameId')\n    .delete(authCtrl.requireSignin, gameCtrl.isMaker, gameCtrl.remove)\n```", "```js\nconst remove = async (req, res) => {\n  try {\n    let game = req.game\n    let deletedGame = await game.remove()\n    res.json(deletedGame)\n  } catch (err) {\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nconst remove = async (params, credentials) => {\n  try {\n    let response = await fetch('/api/games/' + params.gameId, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      }\n    })\n    return await response.json()\n  } catch(err) { \n    console.log(err)\n  }\n}\n```", "```js\n<Link to=\"/game/new\">\n   <Button style={isActive(history, \"/game/new\")}>\n       <AddBoxIcon color=\"secondary\"/> Make Game\n   </Button>\n</Link>\n```", "```js\n<GameForm onSubmit={clickSubmit} errorMsg={error}/>\n```", "```js\n  const clickSubmit = game => event => {\n    const jwt = auth.isAuthenticated()\n    create({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, game).then((data) => {\n      if (data.error) {\n        setError(data.error)\n      } else {\n        setError('')\n        setRedirect(true)\n      }\n    })\n  }\n```", "```js\n<PrivateRoute path=\"/game/new\" component={NewGame}/>\n```", "```js\n<GameForm gameId={params.gameId} onSubmit={clickSubmit} errorMsg={error}/>\n```", "```js\n\n  const clickSubmit = game => event => {\n    const jwt = auth.isAuthenticated()\n    update({\n      gameId: match.params.gameId\n    }, {\n      t: jwt.token\n    }, game).then((data) => {\n      if (data.error) {\n        setError(data.error)\n      } else {\n        setError('')\n        setRedirect(true)\n      }\n    })\n  }\n```", "```js\n<PrivateRoute path=\"/game/edit/:gameId\" component={EditGame}/>\n```", "```js\nconst [game, setGame] = useState({ name: '', \n                                   clue: '', \n                                   world: '', \n                                   answerObjects: [], \n                                   wrongObjects: []\n                                 })\n```", "```js\n  useEffect(() => {\n    if(props.gameId){\n      const abortController = new AbortController()\n      const signal = abortController.signal\n\n      read({gameId: props.gameId}, signal).then((data) => {\n        if (data.error) {\n          setReadError(data.error)\n        } else {\n          setGame(data)\n        }\n      })\n      return function cleanup(){\n        abortController.abort()\n      }\n    }\n  }, [])\n```", "```js\n<Typography type=\"headline\" component=\"h2\">\n    {props.gameId? 'Edit': 'New'} Game\n</Typography>\n```", "```js\n<img src={game.world}/>\n<TextField id=\"world\" label=\"Game World Equirectangular Image (URL)\" \n           value={game.world} onChange={handleChange('world')}/>\n```", "```js\n<TextField id=\"name\" label=\"Name\" value={game.name} onChange={handleChange('name')}/>\n```", "```js\n<TextField id=\"multiline-flexible\" label=\"Clue Text\" multiline rows=\"2\" \n           value={game.clue} onChange={handleChange('clue')}/>\n```", "```js\nconst handleChange = name => event => {\n    const newGame = {...game}\n    newGame[name] = event.target.value\n    setGame(newGame)\n}\n```", "```js\n<ExpansionPanel>\n    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n        <Typography>VR Objects to collect</Typography>\n    </ExpansionPanelSummary>\n    <ExpansionPanelDetails> {\n        game.answerObjects.map((item, i) => {\n return <div key={i}>\n <VRObjectForm index={i} type={'answerObjects'}\n              handleUpdate={handleObjectChange} \n                vrObject={item} \n                  removeObject={removeObject}/>\n </div>\n })\n      }\n    ...\n    </ExpansionPanelDetails>\n</ExpansionPanel>\n```", "```js\n<ExpansionPanelDetails>\n...\n <Button color=\"primary\" variant=\"contained\" \n onClick={addObject('answerObjects')}>\n <AddBoxIcon color=\"secondary\"/> \n Add Object\n </Button>\n</ExpansionPanelDetails>\n```", "```js\n  const addObject = name => event => {\n    const newGame = {...game}\n    newGame[name].push({})\n    setGame(newGame)\n  }\n```", "```js\n  const removeObject = (type, index) => event => {\n    const newGame = {...game}\n    newGame[type].splice(index, 1)\n    setGame(newGame)\n  }\n```", "```js\nconst handleObjectChange = (index, type, name, val) => {\n    var newGame = {...game}\n    newGame[type][index][name] = val\n    setGame(newGame)\n}\n```", "```js\n  const [values, setValues] = useState({\n    objUrl: '',\n    mtlUrl: '',\n    translateX: 0,\n    translateY: 0,\n    translateZ: 0,\n    rotateX: 0,\n    rotateY: 0,\n    rotateZ: 0,\n    scale: 1,\n    color:'white'\n  }) \n```", "```js\n  useEffect(() => {\n    if(props.vrObject && Object.keys(props.vrObject).length != 0){\n      const vrObject = props.vrObject\n      setValues({...values,\n        objUrl: vrObject.objUrl,\n        mtlUrl: vrObject.mtlUrl,\n        translateX: Number(vrObject.translateX),\n        translateY: Number(vrObject.translateY),\n        translateZ: Number(vrObject.translateZ),\n        rotateX: Number(vrObject.rotateX),\n        rotateY: Number(vrObject.rotateY),\n        rotateZ: Number(vrObject.rotateZ),\n        scale: Number(vrObject.scale),\n        color:vrObject.color\n      })\n    }\n  }, [])\n```", "```js\n<TextField label=\".obj url\" value={values.objUrl}\n    onChange={handleChange('objUrl')} />\n<TextField label=\".mtl url\" value={values.mtlUrl}\n    onChange={handleChange('mtlUrl')} />\n```", "```js\n<TextField type=\"number\" value={values.translateX}\n    label=\"TranslateX\" onChange={handleChange('translateX')} />\n<TextField type=\"number\" value={values.translateY}\n    label=\"TranslateY\" onChange={handleChange( 'translateY')} />\n<TextField type=\"number\" value={values.translateZ}\n    label=\"TranslateZ\" onChange={handleChange('translateZ')} />\n```", "```js\n<TextField type=\"number\" value={values.rotateX}\n    label=\"RotateX\" onChange={handleChange('rotateX')} />\n<TextField type=\"number\" value={values.rotateY}\n    label=\"RotateY\" onChange={handleChange('rotateY')} />\n<TextField type=\"number\" value={values.rotateZ}\n    label=\"RotateZ\" onChange={handleChange('rotateZ')} />\n```", "```js\n<TextField type=\"number\" value={values.scale} \n    label=\"Scale\" onChange={handleChange('scale')} />\n```", "```js\n<TextField value={values.color} label=\"Color\"\n    onChange={handleChange('color')} />\n```", "```js\nconst handleChange = name => event => {\n    setValues({...values, [name]: event.target.value})\n    props.handleUpdate(props.index, props.type, name, event.target.value)\n}\n```", "```js\n<Button onClick={props.removeObject(props.type, props.index)}>\n    <Icon style={{marginRight: '5px'}}>cancel</Icon> Delete\n</Button>\n```", "```js\n\n  useEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n\n    list(signal).then((data) => {\n      if (data.error) {\n        console.log(data.error)\n      } else {\n        setGames(data)\n      }\n    })\n    return function cleanup(){\n      abortController.abort()\n    }\n  }, [])\n```", "```js\n{games.map((game, i) => {\n     return <GameDetail key={i} game={game} updateGames={updateGames}/>\n})}\n```", "```js\nconst updateGames = (game) => {\n    const updatedGames = [...games]\n    const index = updatedGames.indexOf(game)\n    updatedGames.splice(index, 1)\n    setGames(updatedGames)\n}\n```", "```js\n<Typography type=\"headline\" component=\"h2\">\n     {props.game.name}\n</Typography>\n<CardMedia image={props.game.world} \n           title={props.game.name}/>\n<Typography type=\"subheading\" component=\"h4\">\n     <em>by</em>\n     {props.game.maker.name}\n</Typography>\n<CardContent>\n     <Typography type=\"body1\" component=\"p\">\n          {props.game.clue}\n     </Typography>\n</CardContent>\n```", "```js\n<a href={\"/game/play?id=\" + props.game._id} target='_self'>\n    <Button variant=\"contained\" color=\"secondary\" \n        className={classes.button}>\n    Play Game\n    </Button>\n</a>\n```", "```js\n{auth.isAuthenticated().user \n    && auth.isAuthenticated().user._id == props.game.maker._id && \n    (<div>\n       <Link to={\"/game/edit/\" + props.game._id}>\n          <Button variant=\"raised\" color=\"primary\" \n         className={classes.editbutton}>\n              Edit\n          </Button>\n       </Link>\n       <DeleteGame game={props.game} \n                   removeGame={props.updateGames}/>\n    </div>)}\n```", "```js\n/game/play?id=<game ID>\n```", "```js\nrouter.route('/game/play')\n  .get(gameCtrl.playGame)\n```", "```js\nconst playGame = (req, res) => {\n  res.sendFile(process.cwd()+'/server/vr/index.html')\n}\n```", "```js\ncomponentDidMount = () => {\n    let gameId = Location.search.split('?id=')[1]\n    read({\n          gameId: gameId\n      }).then((data) => {\n        if (data.error) {\n          this.setState({error: data.error});\n        } else {\n          this.setState({\n            vrObjects: data.answerObjects.concat(data.wrongObjects),\n            game: data\n          });\n          Environment.setBackgroundImage(\n            {uri: data.world}\n          )\n        }\n    })\n}\n```", "```js\nconst read = (params) => {\n  return fetch('/api/game/' + params.gameId, {\n    method: 'GET'\n  }).then((response) => {\n    return response.json() \n  }).catch((err) => console.log(err)) \n}\nexport {\n  read\n} \n```", "```js\nyarn bundle\n```"]