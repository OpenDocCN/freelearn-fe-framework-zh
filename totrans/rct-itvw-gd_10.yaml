- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cracking Any Real-World Programming Task
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To effectively perform a real-world programming assignment in today’s quickly
    expanding tech landscape, programmers must manage an ever-increasing number of
    hurdles and complexity levels. In this chapter, we will look at the basic stages,
    tools, and best practices that will allow you to approach any programming project
    with confidence and generate high-quality, maintainable software. Our interview
    preparation becomes so much better when we can confidently talk about this subject
    and give real-world examples. Over time, we will be able to provide more of our
    own personal experiences, which, as a result, makes us a far better candidate
    for hiring when going through an interview process.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will give you the knowledge and confidence you need to overcome
    every programming assignment that comes your way, from setting up your development
    environment to organizing your code base and sharing your work. We’ll go through
    how to pick the correct scaffolding tools and templates to help you construct
    an excellent foundation for your application while saving you time and effort.
    We will also look into the optimal application architecture for your project’s
    needs, striking a balance between versatility and ease of use.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: As we go along, you’ll realize how important it is to test your code to assure
    its dependability, scalability, and security. We will provide you with practical
    guidance on how to include a testing strategy in your workflow and show you how
    to use **test-driven development** (**TDD**) to generate higher-quality code from
    the start. Finally, we’ll lead you through the steps of setting up and managing
    your Git repository, writing a clear and informative README, and sharing your
    work with the rest of the world. Not only will this increase the exposure and
    effect of your work, but it will also stimulate cooperation and continual development.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have gained the necessary abilities and
    methods to conquer any real-world programming work, and you will be well on your
    way to being an invaluable asset in the field of software development.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will go through subjects related to solving programming
    assignments, giving you the confidence required in this programming area. These
    fundamental skills are key to performing well on the job as well as during interviews
    because your ability to problem-solve determines how good a programmer you are.
    As developers, we often get asked about our development environment and tech stacks,
    and if we are to work effectively within another team at a company, then we have
    to know about the tools that we will have to use. So, having the right answers
    to these questions when at an interview can show that we know what we are talking
    about and can integrate into any team.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the topics we will discuss in this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your development environment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing the right scaffolding tools or templates
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deciding on the application architecture
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing your code
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Git repository with a README and sharing it
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On your machine, please ensure that you have downloaded and installed the latest
    version of Node.js and `npm`, which you can find here: [https://nodejs.org/en](https://nodejs.org/en).
    Also, ensure that you have a code editor installed, such as Visual Studio Code,
    which you can download from here: [https://code.visualstudio.com/](https://code.visualstudio.com/).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your development environment
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s now learn how to make excellent React applications. The most diffiicult
    step is setting up your development environment, but it doesn’t have to be. You’ll
    be one step closer to your dream job as a React developer with the assistance
    of workflow background knowledge and these basic guidelines for setting up a successful
    JavaScript development environment. This section will walk you through every stage
    of the process, from selecting the best scaffolding tools for your project to
    debugging and fixing any difficulties that arise. Every developer should know
    the basics of setting up a development environment and getting a framework working.
    In an interview setting, we might be expected to work on a technical test, so
    being able to find the right tools, install them, and get your code base working
    is all required knowledge for us as developers. It is absolutely paramount to
    be able to do so when at an interview. So, let’s get going.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Why do you need a good development environment?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A development environment is an essential part of the software development process
    for a developer. A development environment provides an isolated environment in
    which you can generate and test your code without fear of interfering with a live
    production environment. This decreases the danger of end user or customer disruptions
    and allows you to play around with and test different ways of coding. A development
    environment also allows you to test your source code against many platforms, browsers,
    and devices to verify that your application works flawlessly for all users. You
    can write code more effectively, identify mistakes and defects earlier, and ultimately
    offer a high-quality product to your consumers if you utilize a development environment.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: A development environment requires us to have either an **integrated development
    environment** (**IDE**) or a text editor/code editor. But what is the difference
    between them? Let us have a look.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference between an IDE and a text editor/code editor?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many ways for us to set up our development environments. Developers,
    particularly those using JavaScript and React, have a variety of tools to pick
    from according to their personal needs. An IDE is a popular choice since it includes
    a full array of tools for developing, debugging, and testing. A text editor, which
    is a basic tool that enables effective and simplified coding, is another choice.
    An online code editor, on the other hand, might be the greatest option for those
    who like to work directly in the browser. These environments enable quick and
    easy testing and deployment without the need for any software to be installed
    on your desktop or laptop.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an understanding of these tools, it’s time to move on to learning
    about the basic steps for setting up a modern React development environment.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: How do you set up a React development environment?
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It might look difficult to set up a React development environment, but with
    the appropriate steps, anyone can accomplish it. First and foremost, you must
    be familiar with JavaScript and the command line. Then, download and install Node.js
    and `npm` here: [https://nodejs.org/en](https://nodejs.org/en), both of which
    are required for React development. Choose a coding editor, such as Visual Studio
    Code, which you can download from here: [https://code.visualstudio.com/](https://code.visualstudio.com/).
    Following that, it is recommended to use Next.js, Remix, or Gatsby commands to
    build a new React project.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn about the setup process here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[https://react.dev/learn/start-a-new-react-project](https://react.dev/learn/start-a-new-react-project)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Installing software requires us to use a package manager, which is basically
    a collection of tools bundled together that automate a process. This enables us
    to install, upgrade, configure, and delete software from our computers. `npm`
    is the most popular package manager for the JavaScript ecosystem. Alternatives
    include `yarn` and `pnpm`, and they all have their pros and cons. There is also
    `npx`, which is an abbreviation for `npm` package runner that enables developers
    to run any JavaScript package accessible on the `npm` registry without the need
    to install it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'Developers usually use `npm` or `npx` depending on the documentation for the
    tool that they are using. Anyway, we will be using `npm` and `npx` in these upcoming
    examples. The commands for setting up a React project are quite simple. Let’s
    take a look at the syntax for each React framework, as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '*Next.js*'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Running this code will scaffold a Next.js starter project:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It’s straightforward, and when you have completed the setup, you will be ready
    to go.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Remix*'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code here is for Remix and will create a new project for us:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once again, the setup is easy to follow, so creating a Remix project does not
    take long.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Gatsby*'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using this code sets up a Gatsby project for us:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Vite.js*'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With this command, we can set up a Vite.js project:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Gatsby has a similar setup to Next.js and Remix, so it’s pretty easy to alternate
    between the three of them.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Finally, start the development server and see your project come to life. While
    the setup procedure could appear time-consuming and tedious, the end product is
    definitely worth it. You’ll be able to start developing dynamic and interesting
    web applications when you have a fully working development environment.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: A development environment is only as good as the tools that we use to create
    it. Let’s learn more about React scaffolding tools to see how they can make our
    job much easier.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Which tools can we use for scaffolding a React project?
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’re certain to come across some new and intriguing tools and frameworks as
    we explore the world of web development. There are a few scaffolding tools that
    stand out from the rest. webpack is an open source bundle runner that simplifies
    the process of bundling code for deployment. Next.js, Remix, and Gatsby all use
    webpack. Then, there’s Babel, a tool that allows us to write in the most recent
    version of JavaScript and have it compiled into a format that most browsers support.
    These technologies work together to provide a seamless and fast scaffolding experience,
    freeing up our time to focus on providing the greatest possible user experience.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding tools are essential for having a project that is easy to maintain,
    and we are going to discover why this is the case.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Why are scaffolding tools so important to our project’s success?
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is critical to have the correct tools for any profession, and project management
    is no exception. Having the right tools, from kanban boards to collaborative software,
    can make or ruin a project. These tools improve communication, boost productivity,
    and simplify operations. Without them, projects can become disorganized and difficult
    to manage. The correct tools can help teams stay on track, meet deadlines, and
    ultimately succeed. Investing in the correct project management tools may appear
    to be an unnecessary cost, but it may save time, money, and your sanity in the
    long run. Similarly, it’s just as important to check that you have the latest
    version of Node.js installed or a compatible version that works with your software.
    This can help you avoid breaking changes, which can affect the software you are
    using because there can be compatibility issues.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an environment can be both exhilarating and intimidating. It might
    be aggravating to experience technical issues throughout this process, so we are
    going to learn how we can overcome some of these problems.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: How do you troubleshoot common issues that can arise in the process of setting
    up the environment?
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To make the process less unpleasant, you can tackle typical difficulties. First,
    double-check that you have all of the required gear and software. Then, make sure
    your internet connection is reliable and stable. Try refreshing your browser or
    clearing your cache if you are experiencing issues or missing files. Follow any
    instructions carefully and, if necessary, seek assistance. Remember that a little
    patience and effort will go a long way toward resolving any problems that might
    emerge throughout the setup process.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, having an effective React development environment is incredibly
    beneficial for any web developer. It not only allows you to develop and test your
    projects successfully but also allows you to jump right into coding chores rather
    than battling with integration concerns. The tools and frameworks discussed previously
    have proven to be essential in creating the required environment and providing
    excellent scaffolding. A thorough grasp of these components will enable us to
    deploy our application without bugs or technical concerns. When developing React
    applications, the correct environment and structure are critical to success.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now dive deeper into scaffolding tools and learn how to choose a good
    architecture for our programming tasks.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right scaffolding tools or templates
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scaffolding tools, templates, programs, and other resources are all accessible
    to assist you in realizing your idea. However, in order to get the most out of
    your project, you must take the time to properly assess those options. In this
    section, we will look at the many components of choosing a feasible architecture
    for React-based applications and how to use them effectively.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: What is scaffolding in programming?
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scaffolding is the process of creating a structured framework, layout, or template
    for an application in order to offer a stable basis for subsequent development.
    Scaffolding saves time and effort for developers by automating repetitive operations
    and establishing an effective structure for the project. For a variety of programming
    languages and technologies, scaffolding tools and frameworks exist to assist developers
    in launching their projects with the least amount of manual setup. These tools
    frequently include best practices and suggested patterns, which can result in
    code bases that are easier to maintain and scale.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Scaffolding tends to include the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '**A file structure**: Establishing a consistent, sustainable system for organizing
    files and folders that makes it simple to navigate and understand how the project
    is set up'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration and setup file**: Creating configuration files for tools and
    libraries such as linters, bundlers, and transpilers that support maintaining
    a standardized development environment and streamlining the build procedure'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code examples**: Giving simple examples of how to utilize the framework,
    libraries, or project components can aid users in getting up and running fast
    and grasping recommended practices'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码示例**：提供如何利用框架、库或项目组件的简单示例，可以帮助用户快速启动并掌握推荐的最佳实践'
- en: '**Boilerplate starter kit**: Producing reusable code snippets or components
    that are able to be quickly customized for certain use cases, including establishing
    a build system, setting up a web server, or developing standard **user interface**
    (**UI**) elements'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**样板启动套件**：生成可快速定制用于特定用例的可重用代码片段或组件，包括建立构建系统、设置Web服务器或开发标准**用户界面**（**UI**）元素'
- en: Aside from scaffolding, we also need to consider the project size, complexity,
    and technologies required to complete our React programming tasks. Moving on to
    the next section, we are going to talk about and learn more about the project
    aspects.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了脚手架之外，我们还需要考虑项目的规模、复杂性和完成React编程任务所需的技术。在下一节中，我们将讨论并学习更多关于项目方面的内容。
- en: How do you determine which project factors to take into account when creating
    a project?
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您如何在创建项目时确定要考虑哪些项目因素？
- en: 'There are various ways to analyze which project factors we should be taking
    into account as we create projects. This can include the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建项目时，有各种方法来分析我们应该考虑哪些项目因素。这可以包括以下内容：
- en: Each project’s size
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个项目的规模
- en: Complexity
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂度
- en: Required technologies
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要的技术
- en: You can develop great frontend designs that are responsive to the organization’s
    demands by properly taking these variables into account. While simpler code and
    testing might be needed for smaller projects, more complicated frameworks for
    implementing React components may be needed for bigger projects. Knowing which
    technologies could be necessary to complete the work at hand is crucial. You can
    make sure that you’re producing high-quality work, meeting client needs, and offering
    smooth user experiences by having a thorough awareness of all these factors.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通过正确考虑这些变量，您可以开发出满足组织需求的优秀前端设计。对于较小的项目，可能需要更简单的代码和测试，而对于较大的项目，可能需要更复杂的框架来实现React组件。了解完成手头工作可能需要哪些技术至关重要。通过全面了解所有这些因素，您可以确保您的工作质量，满足客户需求，并提供流畅的用户体验。
- en: We will now learn about evaluating the functionalities of tools and templates
    because this is required for the project setup and specification.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将学习如何评估工具和模板的功能，因为这对于项目设置和规范是必需的。
- en: How do you evaluate the functionalities of each tool or template and determine
    which one best suits your needs?
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 您如何评估每个工具或模板的功能，并确定哪个最适合您的需求？
- en: Carefully compare the features of each tool or template before choosing one
    that best suits your requirements. You can be sure that you select the tool that
    is the greatest fit for your particular requirements by taking the time to thoroughly
    analyze the features and capabilities of each one. There are many solutions available
    to fit any demand, whether you’re searching for a tool with a wide range of customization
    possibilities or a template that’s simple to use right out of the box. In the
    end, the decision you make will be influenced by a number of variables, such as
    your financial situation, your degree of expertise, and the precise objectives
    you want to accomplish with the tool or template you select.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择最适合您需求的工具或模板之前，仔细比较每个工具或模板的功能。通过花时间彻底分析每个工具的功能和能力，您可以确保选择最适合您特定需求的工具。无论您是在寻找具有广泛定制可能性的工具，还是寻找开箱即用的简单模板，都有许多解决方案可以满足任何需求。最终，您的决定将受到许多变量的影响，例如您的财务状况、您的专业知识程度以及您希望通过所选工具或模板实现的具体目标。
- en: Analyzing the attributes of a project is something that we take into account
    when working on our own projects and those for clients as well. Let’s find out
    why it’s so significant to do so.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 分析项目的属性是我们自己在处理项目以及为客户工作时考虑的因素。让我们找出为什么这样做如此重要。
- en: How do you analyze these adaptability, compatibility, scalability, and security
    features?
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 您如何分析这些适应性、兼容性、可扩展性和安全性功能？
- en: Businesses require software that can keep up with their changing needs in today’s
    fast-paced environment. Analyzing the software’s adaptability, compatibility,
    scalability, and security aspects is essential when choosing a program. Software
    needs to be able to adapt as a business develops and evolves, therefore adaptability
    is essential. Scalability enables the software to expand in line with changing
    company requirements, while compatibility guarantees that it integrates seamlessly
    with other important internal systems. On the topic of scalability, there are
    many ways that we can make our applications scalable. If we choose to use a modern
    framework such as Next.js, for example, then we guarantee that we are getting
    access to the latest tools and features. This can be further enhanced when we
    have the mindset to use some popular coding standards and methodologies to keep
    our projects robust.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'A few ways this can be accomplished are set out here:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '`.nvmrc` and `.npmrc` file for this.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ESLint setup**: For JavaScript code analysis and spotting problematic patterns.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prettier configuration**: So that every developer’s code follows the same
    formatting.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commit linting**: A way to lint our commit messages and ensure they adhere
    to a set of standards.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Framework customizations and plugins**: A framework can be further extended
    by enabling features and customizations that are outlined in the documentation
    or by installing third-party packages and tools.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Last but not least, security is the backbone of any software, safeguarding private
    information and making sure the program is resilient enough to fend off attackers.
    Businesses can make sure they have the software they need to succeed in today’s
    competitive environment by examining these essential qualities.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right tool from the start of the project can save you a lot of
    time and give you more confidence in the code base. Let’s now read about how this
    can affect us in the long run.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: How do you choose the right tool or template that meets all your requirements
    to ensure a successful outcome?
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You must use the appropriate tool or template that satisfies all of your needs
    if you want to obtain a good conclusion. It might be difficult to choose the right
    tool or template, especially with so many possibilities available. However, you
    will be setting yourself up for success if you take the time to do your research
    and select the one that is most suited to your needs. Finding the ideal match
    for your project can ultimately save you time and effort, whether it’s a software
    program, a project management template, or an app. Avoid opting for a tool that
    is only *good enough*; instead, look harder to locate the one that will enable
    you to reach your goal.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: For React applications, it’s crucial to pick the appropriate scaffolding tool
    or template. Prior to anything else, be sure to comprehend what scaffolding is
    and its significance. The size, complexity, and technology needed to complete
    your work should then be taken into account. Research all accessible tools or
    templates for the duties after that. Determine which tool or template best meets
    your needs by comparing its functionality to others. To achieve a good end result,
    consider each option’s adaptability, compatibility, scalability, and security
    characteristics before choosing one that best suits your needs. By following these
    steps, you’ll be able to pick a solid framework for your project and eventually
    simplify your work.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于React应用程序，选择合适的脚手架工具或模板至关重要。在考虑其他任何事情之前，务必理解什么是脚手架以及它的意义。然后，应考虑完成工作所需的大小、复杂性和技术。接下来，研究所有可用的工具或模板以完成这些任务。通过比较其功能与其他工具，确定哪个工具或模板最适合您的需求。在选择一个最适合您需求的选项之前，考虑每个选项的适应性、兼容性、可扩展性和安全性特征。遵循这些步骤，您将能够为项目选择一个坚实的框架，并最终简化工作。
- en: Staying on topic, we will now segue into the theme of application architecture,
    which is connected to scaffolding.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 保持话题一致，我们现在将过渡到应用程序架构的主题，这与脚手架有关。
- en: Deciding on the application architecture
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决定应用程序架构
- en: A number of aspects and considerations must be taken into account when choosing
    an application architecture for a React project. Maintainability, scalability,
    and reuse are encouraged by a well-designed architecture. The architecture ought
    to be adaptive and change with the needs of the project. As you get more expertise
    and familiarity with React, you’ll find yourself better able to make educated
    architectural design decisions. When the project expands and fresh demands arise,
    be willing to refactor and reconsider your decisions.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在为React项目选择应用程序架构时，必须考虑许多方面和因素。良好的架构鼓励可维护性、可扩展性和重用。架构应该具有适应性，并随着项目需求的变化而变化。随着您对React的熟练度和熟悉度提高，您将发现自己能够更好地做出明智的架构设计决策。当项目扩展和出现新的需求时，愿意重构和重新考虑您的决策。
- en: What do we need to think about when choosing an application architecture?
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择应用程序架构时，我们需要考虑哪些因素？
- en: Every project is different and, as a result, requires a different configuration.
    We have to take into account many different factors, which is something we have
    to do right at the start before we start to work on our project. There is no right
    or wrong answer because ultimately, it can come down to our personal preferences,
    team tech stack familiarity, or even client requirements.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目都是不同的，因此需要不同的配置。我们必须在开始工作之前考虑许多不同的因素。没有正确或错误答案，因为最终这可能会归结为我们的个人偏好、团队对技术栈的熟悉度，甚至是客户的要求。
- en: For example, if we were building a website that was taking payments, then many
    factors would need to be considered, such as a secure way to manage and take payments,
    and a way for users to sign up and create accounts. So, figuring out why we would
    choose one state management solution over another one or why we would choose a
    payment gateway such as Stripe instead of a different one are all options that
    we should be able to talk through.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们正在构建一个需要处理支付的网站，那么需要考虑许多因素，例如安全地管理和收取支付的方式，以及用户注册和创建账户的方式。因此，弄清楚为什么我们会选择一个状态管理解决方案而不是另一个，或者为什么我们会选择像Stripe这样的支付网关而不是其他支付网关，都是我们应该能够讨论的选项。
- en: Again, there is no right or wrong answer here; the main thing is that we can
    explain and justify our choices.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这里没有正确或错误答案；主要的是我们能够解释和证明我们的选择。
- en: 'To choose the best application architecture for our React project, we should
    consider the following characteristics:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为我们的React项目选择最佳的应用程序架构，我们应该考虑以下特征：
- en: '**State management**: Thinking about the component-to-component level of interaction
    and the level of detail of your application’s state, determine whether you require
    a state management tool such as Redux.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态管理**：考虑到组件间的交互级别和应用程序状态的详细程度，确定您是否需要像Redux这样的状态管理工具。'
- en: '**Routing**: If your application has to switch between various views or pages,
    configure your framework for routing or use an external routing framework such
    as React Router.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由**：如果您的应用程序需要在各种视图或页面之间切换，请配置您的框架以进行路由或使用如React Router的外部路由框架。'
- en: '**Recognizing project specifications**: Start by comprehending the project’s
    needs, scale, and scope. Decide on the main characteristics, the performance standards,
    and the different deployment platforms.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Future-proofing**: To provide for future expansion and modification, modularity
    and adaptability should be considered while designing your components, state management,
    and API design.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The folder structure**: Ensure that your file and folder structures are logical,
    scalable, and well maintained. Group by category, such as components, media, and
    testing, or group by feature set.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application programming interface (API)**: Determine any external libraries
    or APIs required for your task, such as those for data analysis, authorization,
    or other specialized functionality.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Static site generation (SSG) versus server-side rendering (SSR)**: To enhance
    performance and **search engine optimization** (**SEO**), use an SSR or SSG solution
    such as Next.js, Gatsby, or Remix, which can be chosen based on the requirements
    of your project.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apply programming best practices and criteria**: Use linters such as ESLint,
    code formatters such as Prettier, and documented rules such as the popular Airbnb
    JavaScript style guide to enforce code standards and best practices throughout
    the project so that every developer’s code and project setup is consistent.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`styled-components`, Sass, or just plain CSS.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we are going to learn about the aspects of testing our code in projects.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Testing your code
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All programmers must be able to take advantage of **version control systems**
    (**VCSs**) and conduct adequate tests on their code. Through testing your code,
    you can make sure that it performs as intended and that there are no mistakes
    when various potential inputs are used. Smooth team cooperation will be made possible
    by having efficient version control, and future job deployments will be able to
    manage source files more effectively. We will go into these crucial subjects in
    this section so that you’re equipped with the knowledge required for success.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Testing is significantly better when combined with version control. Let’s find
    out how it can help us in this next section.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Why should you use version control while testing your code?
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There have been occasions when I forgot what I changed in my code or accidentally
    rewrote a piece of work and forgot what it was before. Version control solves
    these problems. It’s a mechanism that keeps track of modifications you’ve implemented
    in your code over time and lets you go back to earlier iterations if necessary.
    When testing your code, having a VCS set up is essential. It not only enables
    you to keep track of changes, but it also makes organized and secure teamwork
    possible. Version control can speed up the testing process, minimize mistakes,
    and overall make the whole process more effective.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: We have learned some use cases for version control in this section. Now, we
    are going to find out about ways to track changes in our code base in the next
    section.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Which testing and change-tracking tools you should utilize for your code base?
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It might be difficult to test and keep track of changes in your code base, but
    the correct tools can really help. With so many alternatives available, it’s critical
    to select tools that are most effective for your particular need. Cypress and
    Selenium are two well-liked testing solutions that enable automated testing across
    several browsers. Version management tools such as Git and **Subversion** (**SVN**)
    can also make it simpler to track changes. In the case of mistakes, these technologies
    facilitate cooperation and simple rollbacks. Finding tools that will optimize
    your workflow and assist you in achieving your goals requires time-consuming study
    and testing out a variety of solutions.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Finally, let’s tie up this chapter by learning about the importance of creating
    a code repository with well-written documentation as we learn how to create a
    Git repository.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Git repository with a README and sharing it
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For many different kinds of reasons, building a code repository with excellent
    documentation is crucial. Let’s continue to read on so that we can understand
    why.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Why is creating a code repository with good documentation crucial?
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Developers can more easily comprehend the functionality, purpose, and design
    of a code base with the aid of clear documentation. They can utilize, contribute
    to, or alter the code more successfully as a result. A well-documented code repository
    makes it easier for team members to work together since everyone is aware of the
    code’s structure and intended use. This makes it simpler to talk about adjustments,
    work out problems, and monitor advancement.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: In essence, onboarding refers to the process of integrating new team members
    into a project. They rapidly become comfortable with the code base thanks to clear
    documentation, which lowers the learning curve and cuts down on the effort required
    to ask queries or look for solutions. There is another benefit of quality control.
    Test cases, anticipated results, and instructions for assisting with the project
    are frequently included in the documentation. This guarantees that updates comply
    with the project’s objectives and maintain the quality of the code.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: We explain our code as it is produced, which generally results in time savings
    over the long term. Developers do not need to sift through the code or seek assistance
    from other developers; they can just turn to the docs for direction and clarification.
    The ability to maintain docs becomes considerably simpler when all of the aforementioned
    suggestions are integrated. Whenever the documentation is clear, it is simpler
    to preserve the code base as time goes on since it gives developers a complete
    guide to use when adding updates or addressing errors. This lessens the possibility
    of creating new problems or compromising current functionality.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: These enhancements could indicate a developer’s expertise and self-assurance.
    The repository reflects favorably on the developers and organizations participating
    with well-documented code. It exhibits a dedication to best practices, meticulousness,
    and consideration for the requirements of other developers. A well-documented
    code base increases the likelihood that others will find it valuable and expand
    upon it. This could result in more widespread developer community acceptance,
    cooperation, and innovation. To ensure comprehension, maintainability, and cooperation,
    it is essential to have a code repository with clear documentation. It enhances
    a project’s longevity and viability and favorably portrays the project’s developers.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: How do you create a Git repository?
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating a new Git repository is a very easy process. Details of how to do
    so can be found here: [https://github.com/new](https://github.com/new).'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'Essentially, all you have to do is create a new repository and then run the
    setup code inside your local project folder. An example of the code can be seen
    here:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The code is autogenerated every single time we create a new repository, and
    it is configured for our project, so all we have to do is copy and paste the code
    into our command line to get our project set up and version controlled on Git.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we get to the end of this chapter on solving any real-world programming problem,
    it is clear that a solid foundation and a systematic approach will substantially
    speed up the software development process. We have created a basis for a successful
    project by carefully configuring our development environment, selecting suitable
    scaffolding tools and templates, and selecting an acceptable application architecture.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: With everything that we have learned, we now have knowledge we can use when
    we get asked about setting up our development environment and some good reasons
    for choosing the right project architecture. These tend to be common interview
    questions or, at the very least, talking topics where we can show our experience
    and way of thinking when it comes to creating React projects.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: The importance of testing also cannot be understated, and we are capable of
    talking about the reasons why it is an area that React developers should be taking
    seriously and using during the development process.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: We have emphasized the significance of implementing a rigorous testing plan
    to ensure the stability, scalability, and security of our code throughout this
    chapter. You can find and solve issues early in the development process by embracing
    TDD and adding a rigorous testing framework, thereby enhancing the overall quality
    of your product.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: On top of that, we have emphasized the need to build a well-structured Git repository
    with a clear and informative README. This not only acts as a great reference for
    yourself and other developers in the future, but it also develops a working atmosphere
    that promotes ongoing growth.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, mastering the art of real-world programming necessitates a blend
    of technical knowledge, strategic planning, and good communication. You are now
    better prepared to handle any programming challenge with confidence and sophistication
    after polishing these abilities and adopting the best practices mentioned in this
    chapter. Remember that a software developer’s career is an ongoing learning experience,
    and as you continue to mature and evolve, you will find yourself more capable
    of overcoming even the most complicated obstacles in the field of software development.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be building an app based on React Hooks/Redux,
    `styled-components`, and Firebase. This will allow us to build on the knowledge
    we have gained up until now, further progressing our React and interview skills.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
