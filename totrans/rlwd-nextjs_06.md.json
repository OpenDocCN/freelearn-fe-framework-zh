["```js\nnext-js-app\n  - node_modules/\n  - package.json\n  - pages/\n  - public/\n  - styles/\n```", "```js\nmkdir components && cd components\nmkdir atoms\nmkdir molecules\nmkdir organisms\nmkdir templates\n```", "```js\ncd components/atoms/Button\ntouch index.js\ntouch button.test.js\ntouch button.styled.js # or style.module.css\n```", "```js\ncd utilities/\ntouch time.js\ntouch localStorage.js\ntouch jwt.js\ntouch logs.js\n```", "```js\ntouch time.test.js\ntouch localStorage.test.js\ntouch jwt.test.js\ntouch logs.test.js\n```", "```js\ncd public && mkdir assets\n```", "```js\ncd assets\nmkdir js\nmkdir css\nmkdir icons\nmkdir images\n```", "```js\ncd public/ && touch manifest.json\n```", "```js\n{\n  \"name\": \"My Next.js App\",\n  \"short_name\": \"Next.js App\",\n  \"description\": \"A test app made with next.js\",\n  \"background_color\": \"#a600ff\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#a600ff\",\n  \"icons\": [\n    {\n      \"src\": \"/assets/icons/icon-192.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    },\n    {\n      \"src\": \"/assets/icons/icon-512.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"512x512\"\n    }\n  ]\n}\n```", "```js\n<link rel=\"manifest\" href=\"/manifest.json\">\n```", "```js\nnext-js-app\n  - lib/\n    - graphql/\n      - index.js\n      - queries/\n        - query1.js\n        - query2.js\n      - mutations/\n        - mutation1.js\n        - mutation2.js\n```", "```js\nnpx create-next-app ssr-rest-api\n```", "```js\ncd ssr-rest-api\nyarn add axios\n```", "```js\nimport { useEffect } from 'react';\nimport Link from 'next/link';\nexport async function getServerSideProps() {\n  // Here we will make the REST request to our APIs\n}\nfunction HomePage({ users }) {\n  return (\n    <ul>\n      {\n        users.map((user) =>\n          <li key={user.id}>\n            <Link\n              href={`/users/${user.username}`}\n              passHref\n            >\n              <a> {user.username} </a>\n            </Link>\n          </li>\n        )\n      }\n    </ul>\n  )\n}\nexport default HomePage;\n```", "```js\nimport { useEffect } from 'react';\nimport Link from 'next/link';\nimport axios from 'axios';\nexport async function getServerSideProps() {\n  const usersReq =\n    await axios.get('https://api.rwnjs.com/04/users')\n  return {\n    props: {\n      users: usersReq.data\n    }\n  }\n}\nfunction HomePage({ users }) {\n  return (\n    <ul>\n      {\n        users.map((user) =>\n          <li key={user.id}>\n            <Link\n              href={`/users/${user.username}`}\n              passHref\n            >\n              <a> {user.username} </a>\n            </Link>\n          </li>\n        )\n      }\n    </ul>\n  )\n}\nexport default HomePage;\n```", "```js\nimport Link from 'next/link';\nimport axios from 'axios';\nexport async function getServerSideProps(ctx) {\n  const { username } = ctx.query;\n  const userReq =\n    await axios.get(\n      `https://api.rwnjs.com/04/users/${username}`\n    );\n  return {\n    props: {\n      user: userReq.data\n    }\n  };\n}\n```", "```js\nfunction UserPage({ user }) {\n  return (\n    <div>\n      <div>\n        <Link href=\"/\" passHref>\n          Back to home\n        </Link>\n      </div>\n      <hr />\n      <div style={{ display: 'flex' }}>\n        <img\n         src={user.profile_picture}\n         alt={user.username}\n         width={150}\n         height={150}\n        />\n        <div>\n          <div>\n            <b>Username:</b> {user.username}\n          </div>\n          <div>\n            <b>Full name:</b>\n              {user.first_name} {user.last_name}\n          </div>\n          <div>\n            <b>Email:</b> {user.email}\n          </div>\n          <div>\n            <b>Company:</b> {user.company}\n          </div>\n          <div>\n            <b>Job title:</b> {user.job_title}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default UserPage;\n```", "```js\nexport async function getServerSideProps(ctx) {\n  const { username } = ctx.query;\n  const userReq = await axios.get(\n    `https://api.rwnjs.com/04/users/${username}`,\n    {\n      headers: {\n        authorization: process.env.API_TOKEN\n      }\n    }\n  );\n  return {\n    props: {\n      user: userReq.data\n    }\n  };\n}\n```", "```js\nAPI_TOKEN=realworldnextjs\nAPI_ENDPOINT=https://api.rwnjs.com\n```", "```js\nexport async function getServerSideProps(ctx) {\n  const { username } = ctx.query;\n  const userReq = await axios.get(\n    `${process.env.API_ENDPOINT}/04/users/${username}`,\n    {\n      headers: {\n        authorization: process.env.API_TOKEN\n      }\n    }\n  );\n  if (userReq.status === 404) {\n    return {\n      notFound: true\n    };\n  }\n  return {\n    props: {\n      user: userReq.data\n    }\n  };\n}\n```", "```js\nimport { useEffect, useState } from 'react';\nimport Link from 'next/link';\nfunction List({users}) {\n  return (\n    <ul>\n      {\n        users.map((user) =>\n          <li key={user.id}>\n            <Link\n              href={`/users/${user.username}`}\n              passHref\n            >\n              <a> {user.username} </a>\n            </Link>\n          </li>\n        )\n      }\n    </ul>\n  )\n}\nfunction Users() {\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState(null);\n  useEffect(async () => {\n    const req =\n      await fetch('https://api.rwnjs.com/04/users');\n    const users = await req.json();\n    setLoading(false);\n    setData(users);\n  }, []);\n  return (\n    <div>\n      {loading &&<div>Loading users...</div>}\n      {data &&<List users={data} />}\n    </div>\n  )\n}\nexport default Users;\n```", "```js\n    import { useEffect, useState } from 'react'\n    import Link from 'next/link';\n    export async function getServerSideProps({ query }) {\n      const { username } = query;\n      return {\n        props: {\n          username,\n          authorization: process.env.API_TOKEN\n        }\n      }\n    }\n    ```", "```js\n    function UserPage({ username, authorization }) {\n      const [loading, setLoading] = useState(true);\n      const [data, setData] = useState(null);\n      useEffect(async () => {\n        const req = await fetch(\n          `https://api.rwnjs.com/04/users/${username}`,\n          { headers: { authorization } }\n        );\n        const reqData = await req.json();\n        setLoading(false);\n        setData(reqData);\n      }, []);\n      return (\n        <div>\n          <div>\n            <Link href=\"/\" passHref>\n              Back to home\n            </Link>\n          </div>\n          <hr />\n          {loading && <div>Loading user data...</div>}\n          {data && <UserData user={data} />}\n        </div>\n      );\n    }\n    export default UserPage;\n    ```", "```js\n    function UserData({ user }) {\n      return (\n        <div style={{ display: 'flex' }}>\n          <img\n            src={user.profile_picture}\n            alt={user.username}\n            width={150}\n            height={150}\n          />\n          <div>\n            <div>\n              <b>Username:</b> {user.username}\n            </div>\n            <div>\n              <b>Full name:</b>\n                {user.first_name} {user.last_name}\n            </div>\n            <div>\n              <b>Email:</b> {user.email}\n            </div>\n            <div>\n              <b>Company:</b> {user.company}\n            </div>\n            <div>\n              <b>Job title:</b> {user.job_title}\n            </div>\n          </div>\n        </div>\n      )\n    }\n    ```", "```js\nimport axios from 'axios';\nexport default async function handler(req, res) {\n  const username = req.query.username;\n  const API_ENDPOINT = process.env.API_ENDPOINT;\n  const API_TOKEN = process.env.API_TOKEN;\n  const userReq = await axios.get(\n    `${API_ENDPOINT}/04/users/${username}`,\n    { headers: { authorization: API_TOKEN } }\n  );\n  res\n    .status(200)\n    .json(userReq.data);\n}\n```", "```js\nfunction UserPage({ username }) {\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState(null);\n  useEffect(async () => {\n    const req = await fetch(\n`/api/singleUser?username=${username}`,\n    );\n    const data = await req.json();\n    setLoading(false);\n    setData(data);\n  }, []);\n  return (\n    <div>\n      <div>\n        <Link href=\"/\" passHref>\n          Back to home\n        </Link>\n      </div>\n      <hr />\n      {loading && <div>Loading user data...</div>}\n      {data && <UserData user={data} />}\n    </div>\n  );\n}\n```", "```js\nnpx create-next-app signbook\n```", "```js\nyarn add @apollo/client graphql isomorphic-unfetch\n```", "```js\nimport { useMemo } from 'react';\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache\n} from '@apollo/client';\nlet uri = 'https://rwnjssignbook.herokuapp.com/v1/graphql';\nlet apolloClient;\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: new HttpLink({ uri }),\n    cache: new InMemoryCache(),\n  });\n} \n```", "```js\nexport function initApollo(initialState = null) {\n  const client = apolloClient || createApolloClient();\n  if (initialState) {\n    client.cache.restore({\n      ...client.extract(),\n      ...initialState\n    });\n  }\n  if (typeof window === \"undefined\") {\n    return client;\n  }\n  if (!apolloClient) {\n    apolloClient = client;\n  }\n  return client;\n}\n```", "```js\nimport { useMemo } from \"react\";\n```", "```js\nexport function useApollo(initialState) {\n  return useMemo(\n    () => initApollo(initialState),\n    [initialState]\n  );\n}\n```", "```js\nimport { ApolloProvider } from \"@apollo/client\";\nimport { useApollo } from \"../lib/apollo\";\nexport default function App({ Component, pageProps }) {\n  const apolloClient =\n    useApollo(pageProps.initialApolloState);\n  return (\n    <ApolloProvider client={apolloClient}>\n      <Component {...pageProps} />\n    </ApolloProvider>\n  );\n}\n```", "```js\nimport { gql } from \"@apollo/client\";\nconst GET_LATEST_SIGNS = gql`\n  query GetLatestSigns($limit: Int! = 10, $skip: Int! = 0){\n    sign(\n      offset: $skip,\n      limit: $limit,\n      order_by: { created_at: desc }\n    ) {\n      uuid\n      created_at\n      content\n      nickname\n      country\n    }\n  }\n`;\nexport default GET_LATEST_SIGNS;\n```", "```js\nimport { useQuery } from \"@apollo/client\";\nimport GET_LATEST_SIGNS from\n  '../lib/apollo/queries/getLatestSigns'\nfunction HomePage() {\n  const { loading, data } = useQuery(GET_LATEST_SIGNS, {\n    fetchPolicy: 'no-cache',\n  });\n  return <div></div>\n}\nexport default HomePage\n```", "```js\nimport Head from \"next/head\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { useApollo } from \"../lib/apollo\";\nexport default function App({ Component, pageProps }) {\n  const apolloClient =\n    useApollo(pageProps.initialApolloState || {});\nreturn (\n  <ApolloProvider client={apolloClient}>\n    <Head>\n      <link href=\"https://unpkg.com/tailwindcss@^2/dist/        tailwind.min.css\"\n       rel=\"stylesheet\"\n      />\n    </Head>\n    <Component {...pageProps} />\n  </ApolloProvider>\n );\n}\n```", "```js\nfunction Loading() {\n  return (\n    <div\n      className=\"min-h-screen w-screen flex justify-center\n        items-center\">\n      Loading signs from Hasura...\n    </div>\n  );\n}\nexport default Loading;\n```", "```js\nfunction Sign({ content, nickname, country }) {\n  return (\n    <div className=\"max-w-7xl rounded-md border-2 border-\n      purple-800 shadow-xl bg-purple-50 p-7 mb-10\">\n      <p className=\"text-gray-700\"> {content} </p>\n      <hr className=\"mt-3 mb-3 border-t-0 border-b-2 \n        border-purple-800\" />\n      <div>\n        <div className=\"text-purple-900\">\n          Written by <b>{nickname}</b>\n          {country && <span> from {country}</span>}\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Sign;\n```", "```js\nimport { useQuery } from \"@apollo/client\";\nimport GET_LATEST_SIGNS from\n  '../lib/apollo/queries/getLatestSigns'\nimport Sign from '../components/Sign'\nimport Loading from '../components/Loading'\nfunction HomePage() {\n  const { loading, error, data } =\n    useQuery(GET_LATEST_SIGNS, {\n      fetchPolicy: 'no-cache',\n    });\n  if (loading) {\n    return <Loading />;\n  }\n  return (\n    <div className=\"flex justify-center items-center flex-\n      col mt-20\">\n<h1 className=\"text-3xl mb-5\">Real-World Next.js \n        signbook</h1>\n      <Link href=\"/new-sign\">\n<button className=\"mb-8 border-2 border-purple-800 \n          text-purple-900 p-2 rounded-lg text-gray-50\n            m-auto  mt-4\">\n          Add new sign\n        </button>\n      </Link>\n      <div>\n        {data.sign.map((sign) => (\n          <Sign key={sign.uuid} {...sign} />\n        ))}\n      </div>\n    </div>\n  );\n}\nexport default HomePage\n```", "```js\nimport { useState } from \"react\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport { useMutation } from \"@apollo/client\";\nimport ADD_SIGN from \"../lib/apollo/queries/addSign\";\n```", "```js\nfunction NewSign() {\n  const router = useRouter();\n  const [formState, setFormState] = useState({});\n  const [addSign] = useMutation(ADD_SIGN, {\n    onCompleted() {\n      router.push(\"/\");\n    }\n  });\n  const handleInput = ({ e, name }) => {\n    setFormState({\n      ...formState,\n      [name]: e.target.value\n    });\n  };\n}\nexport default NewSign;\n```", "```js\nreturn (\n    <div className=\"flex justify-center items-center flex-\n      col mt-20\">\n      <h1 className=\"text-3xl mb-10\">Sign the Real-World \n        Next.js signbook!</h1>\n      <div className=\"max-w-7xl shadow-xl bg-purple-50 p-7 \n        mb-10 grid grid-rows-1 gap-4 rounded-md border-2 \n          border- purple-800\">\n     <div>\n          <label htmlFor=\"nickname\" className=\"text-purple-\n            900 mb-2\">\n            Nickname\n          </label>\n          <input\n            id=\"nickname\"\n            type=\"text\"\n            onChange={(e) => handleInput({ e, name: \n              'nickname' })}\n            placeholder=\"Your name\"\n            className=\"p-2 rounded-lg w-full\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"content\" className=\"text-purple-\n            900 mb-2\">\n            Leave a message!\n          </label>\n          <textarea\n            id=\"content\"\n            placeholder=\"Leave a message here!\"\n            onChange={(e) => handleInput({ e, name: \n              'content' })}\n            className=\"p-2 rounded-lg w-full\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"country\" className=\"text-purple-\n            900 mb-2\">\n            If you want, write your country name and its \n              emoji flag\n          </label>\n          <input\n            id=\"country\"\n            type=\"text\"\n            onChange={(e) => handleInput({ e, name: \n              'country' })}\n            placeholder=\"Country\"\n            className=\"p-2 rounded-lg w-full\"\n          />\n          <button\n            className=\"bg-purple-600 p-4 rounded-lg text-\n              gray-50 m-auto mt-4\"\n            onClick={() => addSign({ variables: formState })}>\n            Submit\n          </button>\n        </div>\n      </div>\n      <Link href=\"/\" passHref>\n        <a className=\"mt-5 underline\"> Back to the\n          homepage</a>\n      </Link>\n    </div>\n  );\n)\n```", "```js\nonClick={() => addSign({ variables: formState})}\n```", "```js\n  const [addSign] = useMutation(ADD_SIGN, {\n    onCompleted() {\n      router.push(\"/\");\n    }\n  });\n```", "```js\nimport { gql } from \"@apollo/client\";\nconst ADD_SIGN = gql`\n  mutation InsertNewSign(\n    $nickname: String!,\n    $content: String!,\n    $country: String\n    ) {\n    insert_sign(objects: {\n        nickname: $nickname,\n        country: $country,\n        content: $content\n    }) {\n      returning {\n        uuid\n      }\n    }\n  }\n`;\nexport default ADD_SIGN;\n```"]