- en: Chapter 5. Form Handling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。表单处理
- en: 'In this chapter, we will look at how to create robust and attractive web forms
    with animation, validation, and user feedback. We will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何创建具有动画、验证和用户反馈的健壮而引人入胜的网络表单。我们将涵盖：
- en: Implementing basic form validation
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施基本表单验证
- en: Adding number validation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加数字验证
- en: Adding credit card number validation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加信用卡号验证
- en: Adding date validation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加日期验证
- en: Adding e-mail address validation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加电子邮件地址验证
- en: Implementing live form validation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施实时表单验证
- en: Adding a password strength indicator
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加密码强度指示器
- en: Adding anti-spam measures
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加反垃圾邮件措施
- en: Implementing input character restrictions
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施输入字符限制
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Collecting user data is a basic function of many websites and web applications,
    from simple data collection techniques such as registration or login information,
    to more complex scenarios such as payment or billing information. It is important
    that only relevant and complete information is collected from the user. To ensure
    this, the web developer must enforce validation on all data input. It is also
    important to provide a good user experience while enforcing this data integrity.
    This can be done by providing useful feedback to the user regarding any validation
    errors their data may have caused. This chapter will show you how to create an
    attractive web form that enforces data integrity while keeping a high-quality
    user experience.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 收集用户数据是许多网站和网络应用程序的基本功能，从简单的数据收集技术，如注册或登录信息，到更复杂的情景，如付款或账单信息。重要的是只收集来自用户的相关和完整信息。为了确保这一点，Web开发人员必须对所有数据输入进行验证。在执行数据完整性的同时提供良好的用户体验也很重要。这可以通过向用户提供有关其数据可能引起的任何验证错误的有用反馈来实现。本章将向您展示如何创建一个引人入胜的网络表单，同时保持高质量的用户体验。
- en: A very important point to note is that any JavaScript or jQuery validation is
    open to manipulation by the user. JavaScript and jQuery resides within the web
    browser, so a user with little knowledge can easily modify the code to bypass
    any client-side validation techniques. This means that client-side validation
    cannot be totally relied on to prevent the user from submitting invalid data.
    Any validation done within the client side must be replicated on the server, which
    is not open for manipulation by the user.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的一点是，任何JavaScript或jQuery验证都容易被用户操纵。JavaScript和jQuery位于Web浏览器中，所以用户可以轻松修改代码以绕过任何客户端验证技术。这意味着不能完全依赖客户端验证来防止用户提交无效数据。在客户端进行的任何验证都必须在服务器上进行复制，服务器不容易被用户操纵。
- en: We use client-side validation to improve the user experience. Because of this,
    the user does not need to wait for a server response.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用客户端验证来提高用户体验。因此，用户不需要等待服务器响应。
- en: Implementing basic form validation
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施基本表单验证
- en: At the most basic level of form validation, you will need to be able to prevent
    the user from submitting empty values. This recipe will provide the HTML and CSS
    code for a web form that will be used for recipes 1 through 8 of this chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在最基本的表单验证级别上，您需要能够阻止用户提交空值。本教程将为本章的第1至8个配方提供用于网络表单的HTML和CSS代码。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using your favorite text editor or IDE, create a blank HTML page in an easily
    accessible location and save this file as `recipe-1.html`. Ensure that you have
    the latest version of jQuery downloaded to the same location as this HTML file.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜欢的文本编辑器或IDE，在易于访问的位置创建一个空白的HTML页面，并将此文件保存为`recipe-1.html`。确保您已将最新版本的jQuery下载到与此HTML文件相同的位置。
- en: This HTML page will form the basis of most of this chapter, so remember to keep
    it after you have completed this recipe.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个HTML页面将成为本章大部分内容的基础，请在完成本教程后记得保存它。
- en: How to do it…
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Learn how to implement basic form validation with jQuery by performing the
    following steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下步骤学习如何使用jQuery实现基本表单验证：
- en: Add the following HTML code to `index.html`. Be sure to change the source location
    of the JavaScript included for the jQuery library, pointing it to where the latest
    version of jQuery is downloaded on your computer.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下HTML代码添加到`index.html`中。确保更改包含jQuery库的JavaScript的源位置，指向您计算机上下载的jQuery的最新版本所在位置。
- en: '[PRE0]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a CSS file named `styles.css` in the same directory and add the following
    CSS code to add style to our HTML page and form:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一目录下创建名为`styles.css`的CSS文件，并添加以下CSS代码以为我们的HTML页面和表单添加样式：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In addition to the jQuery library, the previous HTML page also uses another
    JavaScript file. Create a blank JavaScript file in the directory where the `index.html`
    file is saved. Save this file as `validation.js` and add the following JavaScript
    code:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了jQuery库外，先前的HTML页面还使用了另一个JavaScript文件。在保存`index.html`文件的目录中创建一个空白的JavaScript文件。将该文件保存为`validation.js`，并添加以下JavaScript代码：
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Open `index.html` in a web browser and you should see a form similar to the
    following screenshot:![How to do it…](img/0896OS_05_01.jpg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网络浏览器中打开`index.html`，您应该会看到一个类似下面截图的表单：![如何操作…](img/0896OS_05_01.jpg)
- en: If you click on the **Submit** button to submit an empty form, you will be presented
    with error messages under the required fields.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您单击**提交**按钮提交一个空表单，将会在必填字段下方显示错误消息。
- en: How it works…
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Now, let us understand the steps performed previously in detail.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们详细了解之前执行的步骤。
- en: HTML
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTML
- en: The HTML creates a web form with various fields that will take a range of data
    inputs, including text, date of birth, and credit card number. This page forms
    the basis for most of this chapter. Each of the input elements has been given
    different classes depending on what type of validation they require. For this
    recipe, our JavaScript will only look at the `required` class, which indicates
    a required field and therefore cannot be blank. Other classes have been added
    to the input fields, such as `date` and `number`, which will be used in the later
    recipes in this chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: HTML创建了一个包含各种字段的网络表单，这些字段将接受一系列数据输入，包括文本、出生日期和信用卡号码。该页面构成了本章大部分内容的基础。每个输入元素都被赋予了不同的类，具体取决于它们需要什么类型的验证。对于本示例，我们的JavaScript只会查看`required`类，该类表示必填字段，因此不能为空。其他类已添加到输入字段中，例如`date`和`number`，这些类将在本章后续示例中使用。
- en: CSS
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSS
- en: Basic CSS has been added to create an attractive web form. The CSS code styles
    the input fields so they blend in with the form itself and adds a hover effect.
    The Google Web Font Ubuntu has also been used to improve the look of the form.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 已添加基本CSS以创建吸引人的网络表单。CSS代码为输入字段添加样式，使其与表单本身融为一体，并添加了悬停效果。还使用了谷歌Web字体Ubuntu来改善表单的外观。
- en: jQuery
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: jQuery
- en: 'The first part of the jQuery code is wrapped within `$(function(){});`, which
    will ensure the code is executed on page load. Inside this wrapper, we attach
    a click event handler to the form submit button, shown as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery代码的第一部分被包裹在`$(function(){});`中，这将确保代码在页面加载时执行。在这个包装器内部，我们将点击事件处理程序附加到表单提交按钮，如下所示：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As we want to handle the form submission based on whether valid data has been
    provided, we use `event.preventDefault();` to initially stop the form from submitting,
    allowing us to perform the validation first, shown as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们希望根据是否提供了有效数据来处理表单提交，所以我们使用`event.preventDefault();`来最初阻止表单提交，从而允许我们首先执行验证，如下所示：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After the `preventDefault` code, an `inputs` variable is declared to hold all
    the input elements within the page, using `$(''input'')` to select them. Additionally,
    we create an `isError` variable, setting it to `false`. This will be a flag to
    determine if our validation code has discovered an error within the form. These
    variable declarations are shown previously. Using the length of the `inputs` variable,
    we are able to loop through all of the inputs on the page. We create an input
    variable for each input that is iterated over, which can be used to perform actions
    on the current input element using jQuery. This is done with the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在`preventDefault`代码之后，声明了一个`inputs`变量，用于保存页面内所有输入元素，使用`$('input')`来选择它们。此外，我们创建了一个`isError`变量，并将其设置为`false`。这将是一个标志，用于确定我们的验证代码是否在表单中发现了错误。这些变量声明如上所示。通过`inputs`变量的长度，我们能够循环遍历页面上的所有输入。我们为每个迭代的输入创建一个输入变量，该变量可用于使用jQuery对当前输入元素执行操作。使用以下代码完成此操作：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After the input variable has been declared and assigned the current input,
    any previous error classes or data is removed from the element using the following
    code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入变量被声明并分配了当前输入后，使用以下代码从元素中移除任何先前的错误类或数据：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first line removes the `error` class from the input's parent (`.input-frame`),
    which adds the red border to the input element. The second line removes the error
    information that is displayed under the input if the validation check has determined
    that this input has invalid data.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行代码从输入框的父元素（`.input-frame`）中移除了`error`类，该类将为输入元素添加红色边框。第二行代码会移除在输入数据验证检查确定该输入数据无效时在输入框下方显示的错误信息。
- en: 'Next, jQuery''s `hasClass()` function is used to determine if the current input
    element has the `required` class. If the current element does have this class,
    we need to perform the required validation to make sure this field contains data.
    We call the `validateRequired()` function within the `if` statement and pass through
    the value of the current input, shown as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用jQuery的`hasClass()`函数来确定当前输入元素是否具有`required`类。如果当前元素确实具有这个类，我们需要执行所需的验证以确保该字段包含数据。我们在`if`语句内调用`validateRequired()`函数，并通过当前输入的值，如下所示：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We call the `validateRequired()` function prepended with an exclamation mark
    to check to determine if this function's results are equal to `false`; therefore,
    if the current input has the `required` class and `validateRequired()` returns
    `false`, the value of the current input is invalid. If this is the case, we call
    the `addErrorData()` function inside the `if` statement with the current input
    and the error message, which will be displayed under the input. We also set the
    `isError` variable to `true`, so that later on in the code, we will know a validation
    error occurred.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用感叹号 `!` 前置调用`validateRequired()`函数来检查是否该函数的结果等于`false`；因此，如果当前输入具有`required`类且`validateRequired()`返回`false`，则当前输入的值无效。如果是这种情况，我们在`if`语句内调用`addErrorData()`函数，并传递当前输入和错误消息，该消息将显示在输入框下方。我们还将`isError`变量设置为`true`，以便在之后的代码中我们将知道发生了验证错误。
- en: 'The JavaScript''s `for` loop will repeat these steps for each of the selected
    input elements on the page. After the `for` loop has completed, we check if the
    `isError` flag is still set to `false`. If so, we use jQuery to manually submit
    the form, shown as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的`for`循环将对页面上选择的每个输入元素重复执行这些步骤。`for`循环完成后，我们检查`isError`标志是否仍然设置为`false`。如果是，我们使用jQuery手动提交表单，如下所示：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Note that the operator `===` is used to compare the variable type of `isError`
    (that is, `Boolean`) as well as its value. At the bottom of the JavaScript file,
    we declare our two functions that have been called earlier in the script. The
    first function, `validateRequired()`, simply takes the input value and checks
    to see if it is blank or not. If the value is blank, the function returns `false`,
    meaning validation failed; otherwise, the function returns `true`. This can be
    coded as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，运算符`===`用于比较`isError`的变量类型（即`Boolean`）及其值。在JavaScript文件的底部，我们声明了之前在脚本中调用的两个函数。第一个函数`validateRequired()`简单地获取输入值并检查它是否为空。如果值为空，函数返回`false`，表示验证失败；否则，函数返回`true`。可以编码如下：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The second function used is the `addErrorData()` function, which takes the
    current input and an error message. It uses jQuery''s `addClass()` function to
    add the error class to the input''s parent, which will display the red border
    on the input element using CSS. It then uses jQuery''s `after()` function to insert
    a division element into the DOM, which will display the specified error message
    under the current input field, shown as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的第二个函数是`addErrorData()`函数，它接受当前输入和错误消息。它使用jQuery的`addClass()`函数将错误类添加到输入的父级，这将使用CSS在输入元素上显示红色边框。然后，它使用jQuery的`after()`函数将一个`<div>`元素插入到DOM中，在当前输入字段下方显示指定的错误消息，如下所示：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: There's more...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: This structure allows us to easily add additional validation to our web form.
    Because the JavaScript is iterating over all of the input fields in the form,
    we can easily check for additional classes, such as `date`, `number`, and `credit-card`,
    and call extra functions to provide the alternative validation. The other recipes
    in this chapter will look in detail at the additional validation types and add
    these functions to the current `validation.js` file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结构使我们能够轻松地为我们的Web表单添加附加的验证。因为JavaScript正在迭代表单中所有的输入字段，我们可以轻松地检查附加的类，比如`date`、`number`和`credit-card`，并调用额外的函数来提供替代验证。本章其他的示例将详细讨论附加的验证类型，并将这些函数添加到当前的`validation.js`文件中。
- en: See also
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Implementing input character restrictions*'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实施输入字符限制*'
- en: Adding number validation
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加数字验证
- en: When collecting data from a user, there are many situations when you will want
    to only allow numbers in a form field. Examples of this could be telephone numbers,
    PIN codes, or ZIP codes, to name a few. This recipe will show you how to validate
    the telephone number field within the form we created in the previous recipe.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当从用户那里收集数据时，有许多情况下您只想允许表单字段中的数字。例如，这可能是电话号码、PIN码或邮政编码等。本配方将向您展示如何验证前一个配方中创建的表单中的电话号码字段。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Ensure that you have completed the previous recipe and have the same files available.
    Open `validation.js` in your text editor or IDE of choice.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经完成了上一个配方，并且有相同的文件可用。在您选择的文本编辑器或IDE中打开`validation.js`。
- en: How to do it…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Add number validation to the form you created in the previous recipe by performing
    the following steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下步骤将数字验证添加到前一个配方中创建的表单中：
- en: 'Update `validation.js` to be as follows, adding the `valdiateNumber()` function
    with an additional `hasClass(''number'')` check inside the `for` loop:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`validation.js`更新如下，添加`valdiateNumber()`函数并在`for`循环内部添加额外的`hasClass('number')`检查：
- en: '[PRE11]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Open `index.html` in a web browser, input something other than a valid integer
    into the telephone number field, and click on the **Submit** button. You will
    be presented with a form similar to the following screenshot:![How to do it…](img/0896OS_05_02.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Web浏览器中打开`index.html`，在电话号码字段中输入除了有效整数以外的内容，然后单击**提交**按钮。您将看到一个类似以下截图的表单:![如何做…](img/0896OS_05_02.jpg)
- en: How it works…
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'First, we add an additional `if` statement to the main `for` loop of `validation.js`
    to check to see if the current input field has the class `number`, as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在`validation.js`的主`for`循环中添加了额外的`if`语句，以检查当前输入字段是否具有`number`类，如下所示：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If it does, this input value needs to be validated for a number. To do this,
    we call the `validateNumber` function inline within the `if` statement:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这样，此输入值需要验证为数字。为此，在`if`语句内联调用`validateNumber`函数：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This function takes the value of the current input field as an argument. It
    first checks to see if the value is blank. If it is, we do not need to perform
    any validation here because this is handled by the `validateRequired()` function
    from the first recipe of this chapter.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将当前输入字段的值作为参数。它首先检查值是否为空。如果是，我们就不需要在这里执行任何验证，因为这是由本章第一个配方中的`validateRequired()`函数处理的。
- en: If there is a value to validate, a range of actions are performed on the `return`
    statement. First, the value is parsed as an integer and passed to the `isNaN()`
    function. The JavaScript `isNaN()` function simply checks to see if the provided
    value is **NaN** (**Not a Number**). In JavaScript, if you try to parse a value
    as an integer and that value is not actually an integer, you will get the `NaN`
    value. The first part of the `return` statement is to ensure that the provided
    value is a valid integer. However, this does not prevent the user from inputting
    invalid characters. If the user was to input `12345ABCD`, the `parseInt` function
    would ignore `ABCD` and just parse `12345`, and therefore the validation would
    pass. To prevent this situation, we also use the `isFinite` function, which returns
    `false` if provided with `12345ABCD`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有值需要验证，在`return`语句上执行一系列操作。首先，该值被解析为整数并传递给`isNaN()`函数。JavaScript的`isNaN()`函数简单地检查提供的值是否为**NaN**（**Not
    a Number**）。在JavaScript中，如果尝试将一个值解析为整数，并且该值实际上不是整数，则会得到`NaN`值。`return`语句的第一部分是确保提供的值是有效的整数。然而，这并不阻止用户输入无效字符。如果用户输入`12345ABCD`，`parseInt`函数将忽略`ABCD`，只解析`12345`，因此验证将通过。为了防止这种情况，我们还使用`isFinite`函数，如果提供`12345ABCD`，则返回`false`。
- en: See also
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Adding credit card number validation*'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加信用卡号码验证*'
- en: Adding credit card number validation
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加信用卡号码验证
- en: Number validation could be enough validation for a credit card number; however,
    using regular expressions, it is possible to check for number combinations to
    match credit card numbers from Visa, MasterCard, American Express, and more.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 数字验证可能足以验证信用卡号码；然而，使用正则表达式，可以检查数字组合以匹配 Visa、MasterCard、American Express 等信用卡号码。
- en: Getting ready
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure that you have `validation.js` from the previous two recipes in this
    chapter open and ready for modification.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经打开并准备修改本章前两个配方中的`validation.js`。
- en: How to do it…
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Use jQuery to provide form input validation for credit card numbers by performing
    the following step-by-step instructions:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用jQuery执行以下逐步说明，为信用卡号提供表单输入验证：
- en: 'Update `validation.js` to add the credit card validation function and the additional
    class check on the input fields:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`validation.js`以添加信用卡验证函数和在输入字段上进行额外的类检查：
- en: '[PRE14]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Open `index.html` and input an invalid credit card number. You will be presented
    with the following error information in the form:![How to do it…](img/0896OS_05_03.jpg)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.html`，输入无效的信用卡号。你将看到表单中呈现以下错误信息：![操作步骤…](img/0896OS_05_03.jpg)
- en: How it works…
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运作原理…
- en: 'To add credit card validation, as with the previous two recipes, we added an
    additional check in the main `for` loop to look for the `credit-card` class on
    the input elements, as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加信用卡验证，与前两个示例一样，在主`for`循环中添加额外的检查来查找输入元素上的`credit-card`类，如下所示：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `validateCreditCard` function is also added, which uses a regular expression
    to validate the input value, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 此处还添加了`validateCreditCard`函数，该函数使用正则表达式验证输入值，如下所示：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The first part of this function determines if the provided value is blank. If
    it isn't, the function will perform further validation; otherwise, it will return
    `true`. Most credit card numbers start with a prefix, which allows us to add additional
    validation to the inputted value on top of numeric validation. The regular expression
    used in this function will allow for Visa, MasterCard, American Express, Diners
    Club, Discover, and JCB cards.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的第一部分确定提供的值是否为空。如果不为空，函数将执行进一步的验证；否则，它将返回`true`。大多数信用卡号以前缀开头，这使我们能够在数值验证之上添加额外的验证。此函数中使用的正则表达式将允许Visa、MasterCard、American
    Express、Diners Club、Discover和JCB卡。
- en: See also
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 也可以参考
- en: '*Adding number validation*'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加数字验证*'
- en: Adding date validation
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加日期验证
- en: Dates are common items of data, and it is important that the user be able to
    easily input a date into your web form. Typically, you would use a date picker
    that has date validation included to provide an easy input method. This recipe
    shows you how to manually validate a date in the UK format (that is, `DD/MM/YYYY`).
    Date pickers are covered in [Chapter 9](ch09.html "Chapter 9. jQuery UI"), *jQuery
    UI,* using the popular jQuery UI framework. Refer to the *See also* section of
    this recipe for more information.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 日期是常见的数据项，用户能够轻松地在您的Web表单中输入日期非常重要。通常，您会使用包含日期验证的日期选择器来提供简单的输入方法。本示例向您展示如何手动验证英国格式的日期（即`DD/MM/YYYY`）。日期选择器在[第9章](ch09.html
    "第9章。jQuery UI")中进行了讨论，*jQuery UI*，使用流行的jQuery UI框架。有关更多信息，请参阅本示例的*也可以参考*部分。
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Continuing the trend of the previous recipes of this chapter, ensure that you
    have `validation.js` open and ready for modification and that you have completed
    the previous three recipes.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 继续本章前几个示例的趋势，确保你已经打开并准备修改`validation.js`，并且已经完成了前三个示例。
- en: How to do it…
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'Add date validation to your web form by performing the following simple steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下简单的步骤为您的Web表单添加日期验证：
- en: 'Update `validation.js` to add the additional date validation function and class
    check within the main `for` loop, shown as follows:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`validation.js`以添加附加的日期验证函数和在主`for`循环内进行类检查，如下所示：
- en: '[PRE17]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Open `index.html` in a web browser, input an invalid date, and click on **Submit**
    to generate the invalid date error, shown in the following screenshot:![How to
    do it…](img/0896OS_05_04.jpg)
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Web浏览器中打开`index.html`，输入一个无效的日期，并点击**提交**以生成无效日期错误，如下图所示：![操作步骤…](img/0896OS_05_04.jpg)
- en: How it works…
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运作原理…
- en: Once again, we add an additional class check to the main `for` loop to see if
    the current input needs to have date validation applied. If it does, the `validateDate()`
    function is called.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，在主`for`循环中添加一个额外的类检查，以查看当前输入是否需要应用日期验证。如果需要，将调用`validateDate()`函数。
- en: 'Just like the other validation functions, we first check to see if the value
    is blank. If it is not blank, the value can be validated. A regular expression
    is used to determine if the string value provided is of a valid date format, as
    follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 就像其他验证函数一样，我们首先检查值是否为空。如果不为空，则可以验证该值。使用正则表达式来确定提供的字符串值是否是有效的日期格式，如下所示：
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This test will pass if the provided value is separated with a slash, a hyphen,
    or a full stop and where the first two parts consist of two numbers and the last
    part consists of four numbers. This will ensure the provided value is `DD/MM/YYYY`,
    as required.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供的值以斜杠、连字符或句点分隔，并且前两部分由两个数字组成，最后一部分由四个数字组成，则此测试将通过。这将确保提供的值是`DD/MM/YYYY`，符合要求。
- en: 'If this test passes, the next step is to remove all of the leading zeros so
    that the provided date string can be converted into a date object with JavaScript
    (for example, `08-08-1989` will become `8-8-1989`). The code for the same is as
    follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此测试通过，则下一步是删除所有前导零，以便将提供的日期字符串转换为 JavaScript 的日期对象（例如，`08-08-1989` 将变为 `8-8-1989`）。相同的代码如下所示：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After this, an array is created as follows, splitting the date string on either
    `-`, `/`, or:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，创建一个数组，将日期字符串分割为`-`、`/` 或：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, it is possible to use these date values to create a JavaScript date object
    and test its validity. Before this can happen, we must convert the month value.
    JavaScript months start from `0`, whereas our user will have started from `1`.
    For example, the user will use `1` for January, `2` for February, and so on, whereas
    JavaScript uses `0` for January, `1` for February, and so on. To account for this,
    we simply subtract `1` from the provided date value, shown as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，可以使用这些日期值来创建 JavaScript 日期对象并测试其有效性。在此之前，我们必须转换月份值。JavaScript 月份从`0`开始，而我们的用户将从`1`开始。例如，用户将使用`1`表示一月，`2`表示二月，依此类推，而
    JavaScript 使用`0`表示一月，`1`表示二月，依此类推。为此，我们只需从提供的日期值中减去`1`，如下所示：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'With this done, it is possible to create the JavaScript date object and check
    that the outcome matches the input date, proving its validity:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做后，就可以创建 JavaScript 日期对象并检查结果是否与输入日期匹配，从而证明其有效性：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: See also
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Adding date picker interfaces to input boxes quickly* recipe in [Chapter
    9](ch09.html "Chapter 9. jQuery UI"), *jQuery UI*
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [第9章](ch09.html "第9章. jQuery UI") 的 *快速向输入框添加日期选择器界面* 配方中，*jQuery UI*
- en: Adding e-mail address validation
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加电子邮件地址验证
- en: E-mail address validation is one of the most common types of validation on the
    Web. Most people would believe that a valid e-mail address only contains alphanumeric
    characters with the exception of the `@` symbol and a full stop. While most e-mail
    addresses are typically of this format, a valid e-mail address can actually contain
    a variety of other characters. This recipe will show you how to add e-mail validation
    to the web form we have been using in the last four recipes.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件地址验证是网络上最常见的验证类型之一。大多数人会认为有效的电子邮件地址只包含字母数字字符，除了`@`符号和句点。虽然大多数电子邮件地址通常是这种格式，但实际上有效的电子邮件地址可能包含各种其他字符。本文将向您展示如何将电子邮件验证添加到我们在过去四个配方中使用的Web表单中。
- en: How to do it…
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行…
- en: 'Create e-mail validation that can be reused again and again by performing the
    following instructions:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下说明，创建可以反复使用的电子邮件验证：
- en: 'Add the additional `hasClass` check and `if` statement to the main `for` loop
    in `validation.js` as follows:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `validation.js` 主 `for` 循环中添加额外的 `hasClass` 检查和 `if` 语句，如下所示：
- en: '[PRE23]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the following `validateEmail()` function to the end of `validation.js`:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `validation.js` 末尾添加以下 `validateEmail()` 函数：
- en: '[PRE24]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Open `index.html` in a web browser, input an invalid e-mail address, and submit
    the form. You will be presented with an appropriate error in the same fashion
    as the other types of validation errors.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网络浏览器中打开 `index.html`，输入一个无效的电子邮件地址，并提交表单。您将以与其他类型验证错误相同的方式收到适当的错误提示。
- en: How it works…
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The e-mail validation function, however simple, contains a complex regular expression
    to validate an e-mail address to a practical version of RFC 5322 standards, which
    was provided by [http://www.regular-expressions.info/email.html](http://www.regular-expressions.info/email.html).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然而简单的电子邮件验证函数包含一个复杂的正则表达式，用于将电子邮件地址验证为 RFC 5322 标准的实用版本，该版本由 [http://www.regular-expressions.info/email.html](http://www.regular-expressions.info/email.html)
    提供。
- en: The first part of the `validateEmail()` function checks to see if there is a
    value to validate. If so, it uses the complex regular expression to test the string
    values' validity, returning `true` or `false` accordingly.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`validateEmail()` 函数的第一部分检查是否有值可验证。如果有，它将使用复杂的正则表达式测试字符串值的有效性，并相应地返回`true`或`false`。'
- en: Finally, as with the other validation functions, there is the class check inside
    the main `for` loop, which determines which inputs need to be validated for e-mail
    addresses. If these input fields fail validation, it will provide the appropriate
    error output on screen.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，与其他验证函数一样，主`for`循环中有一个类检查，用于确定哪些输入需要对电子邮件地址进行验证。如果这些输入字段未通过验证，则会在屏幕上提供相应的错误输出。
- en: There's more…
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: It is important to understand that this method of e-mail validation only validates
    the syntax to cut down on the amount of rubbish data provided by users. To truly
    validate an e-mail address, you would have to actually send an e-mail to verify
    that it exists and is ready to receive e-mail.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解，此电子邮件验证方法仅验证语法，以减少用户提供的垃圾数据量。要真正验证电子邮件地址，您必须实际发送电子邮件以验证其是否存在并准备接收电子邮件。
- en: Implementing live form validation
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现实时表单验证
- en: It can be very useful for the user to get real-time feedback regarding validation
    errors as they type in your web form. If you are performing client-side validation
    with JavaScript as well as server-side validation, this can be achieved easily
    as you do not need to send a request to the server every time the user types in
    an input—you can do it all within the client. Once again, it is very important
    that the same data undergoes additional validation on the server side. The server-side
    validation can then be fed back to the web form after the user has submitted the
    form.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用户在网页表单中输入时即时获取验证错误的反馈非常有用。如果您同时执行客户端验证和服务器端验证，那么这可以轻松实现，因为您不需要每次用户在输入时发送请求到服务器，您可以在客户端内完成所有操作。再次强调，相同的数据在服务器端进行额外验证非常重要。然后可以在用户提交表单后将服务器端验证结果反馈给网页表单。
- en: Getting ready
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will adapt the client-side validation that has been created as part
    of the last five recipes. Ensure that you have completed these recipes beforehand.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将调整作为前五个示例的一部分创建的客户端验证。确保您在此之前已经完成了这些示例。
- en: How to do it…
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Provide real-time validation to users by performing the following steps:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下步骤为用户提供实时验证：
- en: 'First, we need to move all of the class checks from the `for` loop into their
    own function so that they can be reused. Move all of the `if` statements, which
    perform the `hasClass` checks for `required`, `email`, `number`, `date`, and `credit-card`,
    into a function called `doValidation()`, shown as follows:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要将`for`循环中的所有类检查移到它们自己的函数中，以便它们可以被重复使用。将执行`required`、`email`、`number`、`date`和`credit-card`的`hasClass`检查的所有`if`语句移动到一个名为`doValidation()`的函数中，如下所示：
- en: '[PRE25]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, we need to update the main `for` loop to use this function so that the
    form validation is still performed when the user clicks on the submit button,
    as follows:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要更新主`for`循环以使用此函数，以便当用户单击提交按钮时仍执行表单验证，如下所示：
- en: '[PRE26]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Update the `isError` check after the `for` loop to use an alternative method
    to determine if there were errors so that the form can still be submitted, as
    follows:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`for`循环后更新`isError`检查，以使用另一种方法来确定是否存在错误，以便仍然可以提交表单，如下所示：
- en: '[PRE27]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To perform validation on the field that the user is typing into, we need to
    call the `doValidation()` function on the `keyup` event. Add the following code
    inside the `$(function(){});` block to attach a `keyup` event handler to each
    of the form inputs:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要对用户正在输入的字段执行验证，我们需要在`keyup`事件上调用`doValidation()`函数。将以下代码添加到`$(function(){});`块中，以将`keyup`事件处理程序附加到每个表单输入：
- en: '[PRE28]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Open `index.html` in a web browser, start typing inside the e-mail field, and
    you will be provided with the appropriate error message as you type until you
    have entered a valid e-mail address.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Web浏览器中打开`index.html`，在电子邮件字段中开始输入，您将在输入时提供适当的错误消息，直到输入有效的电子邮件地址。
- en: How it works…
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'It is easy to adapt the previous validation code to provide real-time validation
    for the user. Moving the main validation triggers to another function means that
    the code can be reused without the need for duplication. The function that holds
    these triggers takes one argument, which is the input it needs to perform the
    validation checks on. The `for` loop is still used to provide this input, shown
    as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 将之前的验证代码适应为为用户提供实时验证非常容易。将主验证触发器移动到另一个函数意味着可以重复使用代码而无需重复。包含这些触发器的函数接受一个参数，即它需要执行验证检查的输入。仍然使用`for`循环提供此输入，如下所示：
- en: '[PRE29]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Instead of relying on the `doValidation` function to return an `isError` value,
    we look to the DOM directly to see if there are any errors being displayed on
    screen by looking for any elements with the `error-data` class, as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 不再依赖`doValidation`函数返回`isError`值，我们直接查看 DOM，通过查找带有`error-data`类的任何元素来查看屏幕上是否显示了任何错误，如下所示：
- en: '[PRE30]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: If there are no errors, the form is submitted manually as before.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误，则如前所述手动提交表单。
- en: 'To provide real-time validation, a `keyup` event handler is attached to each
    of the form inputs using the following jQuery code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供实时验证，使用以下 jQuery 代码为每个表单输入附加一个`keyup`事件处理程序：
- en: '[PRE31]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The callback function for the `on()` method will be executed every time the
    user presses and releases a key inside one of the input fields. It is then possible
    to use `$(this)`, which refers to the input that triggered the event, thereby
    providing the `doValidation()` function with the input object it requires to perform
    the validation checks.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`on()`方法的回调函数将在用户在输入字段内按下并释放键时每次执行。然后可以使用`$(this)`，它引用触发事件的输入，从而为`doValidation()`函数提供所需的输入对象来执行验证检查。'
- en: Adding a password strength indicator
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加密码强度指示器
- en: Users like to create a really simple password that is easy to remember, such
    as cat, john, or even password. However, most people, especially web developers,
    know that these types of passwords are too insecure and are incredibly easy to
    decrypt from an encrypted database using techniques such as a dictionary attack,
    for example. Password strength indicators are useful to nudge the user in the
    right direction of using more complex passwords.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 用户喜欢创建一个非常简单的密码，如cat、john或甚至password，以便记住。然而，大多数人，特别是 Web 开发人员，知道这些类型的密码太不安全了，并且使用技术如字典攻击非常容易从加密数据库中解密出来。例如，密码强度指示器对于引导用户使用更复杂的密码非常有用。
- en: Getting ready
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To be able to validate password strength, we need to create some rules that
    our code will use. There are no hard-and-fast rules regarding this, but plenty
    of information can be found online about what types of passwords are best. We
    will give the password a score out of five, one point for each of the following
    rules:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够验证密码强度，我们需要创建一些规则供我们的代码使用。关于最佳密码类型有很多在线信息，但没有硬性规定。我们将为密码打分，根据以下每个规则得分一分：
- en: It is greater than six characters in length
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长度超过六个字符
- en: It is greater than eight characters
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长度超过八个字符
- en: It has both upper and lowercase characters
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时包含大写和小写字符
- en: It has at least one number
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少包含一个数字
- en: 'It has one of the following symbols: `@`, `$`,`!`, `&`, and `^`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它包含以下符号之一：`@`、`$`、`!`、`&` 和 `^`
- en: This recipe will add password strength indicator to the web form that we have
    been creating over the last six recipes. Ensure that you have the code from these
    recipes available before you begin this recipe.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的配方将在过去六个配方中创建的 Web 表单中添加密码强度指示器。在开始此步骤之前，请确保您已经获取了这些配方中的代码。
- en: How to do it…
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Create an effective password strength indicator for web forms by performing
    each of the following steps:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Web 表单创建一个有效的密码强度指示器，需执行以下每个步骤：
- en: 'Update `index.html`, adding some additional classes to the password form elements
    and also some additional HTML, which will create the password strength indicator,
    as follows:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`index.html`，为密码表单元素添加一些额外的类，并添加一些额外的 HTML，这将创建密码强度指示器，如下所示：
- en: '[PRE32]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Add the following styles to the end of `styles.css` to position the strength
    indicator under the password field. These styles will also allow the strength
    indicator to act as a load bar showing the percentage of password strength.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下样式添加到`styles.css`的末尾，以将强度指示器定位在密码字段下方。这些样式还将允许强度指示器作为显示密码强度百分比的加载条。
- en: '[PRE33]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add the `validatePasswords()` function to the end of `validation.js`, which
    will be used to ensure both passwords are entered and that they match, as follows:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`validatePasswords()`函数添加到`validation.js`的末尾，用于确保输入了两个密码并确保它们匹配，如下所示：
- en: '[PRE34]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add the following code to the end of the `doValidation()` function to run the
    `validatePasswords()` function on the `confirm-password` input:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`doValidation()`函数的末尾，以在`confirm-password`输入上运行`validatePasswords()`函数：
- en: '[PRE35]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add the following `keyup` event handler inside the `$(function(){});` block
    in `validation.js` to score the password strength when the user types in the first
    password field:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `validation.js` 中的 `$(function(){});` 块内添加以下 `keyup` 事件处理程序，以在用户在第一个密码字段中输入时评分密码强度：
- en: '[PRE36]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Open `index.html` in a web browser and you will see an additional black box
    under the first password field. Start typing in a password and this field will
    provide information on the password strength as you type. This is illustrated
    in the following screenshot:![How to do it…](img/0896OS_05_05.jpg)
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Web 浏览器中打开 `index.html`，您会看到在第一个密码字段下方出现了一个额外的黑色框。开始输入密码，这个字段会在您输入时提供有关密码强度的信息。如下截图所示：
- en: How it works…
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The HTML for the indicator itself has an `inner` element and a `text` element.
    The `text` element is used by jQuery to display the password strength and percentage
    based on the calculated score of the inputted password. The `inner` element is
    used to form the colored bar. Based on the calculated score, jQuery is used to
    change the inner element's color and positioning, creating the load bar impression,
    which can be seen in the previous screenshot.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 指示器本身的 HTML 具有 `inner` 元素和 `text` 元素。`text` 元素由 jQuery 用于显示基于输入密码的计算得分的密码强度和百分比。`inner`
    元素用于形成彩色条。根据计算得分，jQuery 用于更改 `inner` 元素的颜色和定位，从而创建加载条效果，如前述截图所示。
- en: The CSS used needs little explanation since it provides basic styles and positioning.
    The `inner` element has an absolute position so that it can fill the `password-strength`
    element at different percentages. The `text` division has its `z-index` parameter
    set to ensure that the text will always display above the `inner` element.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的 CSS 需要很少的解释，因为它提供了基本的样式和定位。`inner` 元素具有绝对位置，以便在不同百分比下填充 `password-strength`
    元素。`text` 分区具有设置了 `z-index` 参数，以确保文本始终显示在 `inner` 元素之上。
- en: The `validatePasswords` function, which was created as part of this recipe,
    simply adds basic password validation to our application. It checks to ensure
    that the `confirm-password` field has been filled and that the value matches the
    first `password` field. An additional check is added to the `doValdiation` function
    to ensure this validation gets applied along with the other validation methods
    created in earlier recipes.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`validatePasswords` 函数是作为本篇配方的一部分创建的，它简单地为我们的应用程序添加了基本的密码验证。它检查确认密码字段是否已填写，并且该值是否与第一个密码字段匹配。在
    `doValdiation` 函数中添加了额外的检查，以确保此验证与早期配方中创建的其他验证方法一起应用。'
- en: 'To update the password strength indicator as the user types within the password
    field, the same method is used as that used in the *Implementing live form validation*
    recipe, which is to use the `keyup` event. An event handler is attached to the
    `password` field using the jQuery `on()` function, shown as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在用户在密码字段中输入时更新密码强度指示器，使用与 *实施实时表单验证* 配方中使用的相同方法，即使用 `keyup` 事件。使用 jQuery `on()`
    函数将事件处理程序附加到 `password` 字段，如下所示：
- en: '[PRE37]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The code to calculate the score and update the `password-strength` HTML element
    is then placed within the callback function to this event handler. The first part
    of this code is to remove any current errors displayed for the password fields.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 用于计算得分并更新 `password-strength` HTML 元素的代码随后放置在此事件处理程序的回调函数中。此代码的第一部分是删除密码字段当前显示的任何错误。
- en: 'After this, there are a series of `if` statements which validate the password
    against the rules that were defined at the beginning of this recipe. The first
    basic validation is the password length, shown as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，有一系列的 `if` 语句，用于根据在本篇配方开始时定义的规则验证密码。首先是密码长度的基本验证，如下所示：
- en: '[PRE38]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The score variable is incremented by `1` using `score++` every time a validation
    condition is met.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 每次满足验证条件时，使用 `score++` 将 score 变量递增 `1`。
- en: 'The more complex rules use regular expressions to determine whether the password
    value meets the requirements for the additional score points, shown as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的规则使用正则表达式来确定密码值是否符合额外得分点的要求，如下所示：
- en: '[PRE39]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'After all five rules have been considered, the final score is used to calculate
    the fill value. The fill value is the percentage of the `inner` element that needs
    to be filled from the right-hand side of the strength indicator. This allows us
    to create the load bar effect. In addition to the fill value, a normal percentage
    is calculated to be displayed along with the strength level text as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑了五条规则后，最终分数用于计算填充值。填充值是需要从强度指示器右侧填充的`inner`元素的百分比。这允许我们创建加载条效果。除了填充值，还计算出一个普通百分比，以与强度级别文字一起显示，如下所示：
- en: '[PRE40]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'After this, the score value is used once more to determine the background color
    of the `inner` element and the strength level text as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，分数值再次被用来确定`inner`元素的背景颜色和强度级别文字，如下所示：
- en: '[PRE41]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Finally, using the jQuery `password-strength`, the HTML code is updated with
    the acquired information to display the results to the user, as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用jQuery `password-strength`，HTML代码更新为获取的信息，以向用户显示结果，如下所示：
- en: '[PRE42]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: There's more…
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: This code should be easily adaptable so that you can add your own rules regarding
    password strength. There are many discussions and resources online to point you
    to what a strong password should look like.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码应该很容易调整，这样你就可以添加自己关于密码强度的规则。在网上有很多讨论和资源可以告诉你一个强密码应该是什么样子的。
- en: See also
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Implementing live form validation*'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现实时表单验证*'
- en: Adding anti-spam measures
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加反垃圾邮件措施
- en: Most web developers will know that if you have a contact form or any kind of
    web form publically available on your website, there will be web bot submissions
    and a lot of spam. Most web bots will be thwarted by the JavaScript-only web form
    we have been creating over the last seven recipes, but with browser automation
    and web bots becoming ever cleverer, it is still important to add anti-spam measures
    to your web forms.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网页开发者都会知道，如果你的网站上有联系表单或任何类型的网页表单公开可用，就会有网页机器人提交和大量垃圾邮件。在过去的七个配方中，我们一直在创建仅使用JavaScript的网页表单来阻挡大多数网页机器人，但随着浏览器自动化和网页机器人变得更加聪明，向你的网页表单添加反垃圾邮件措施仍然很重要。
- en: Getting ready
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Ensure that you have completed the last seven recipes and have the code readily
    available. Remember that if you would just like to use the code without fully
    understanding how it works, skip to the end of this chapter, to the *How it works...*
    section, to grab it all.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经完成了最后七个配方，并且代码随时可用。记住，如果你只想使用代码而不完全理解它是如何工作的，跳到本章末尾的*它是如何工作的...*部分，获取所有内容。
- en: How to do it…
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何去做…
- en: 'Add simple anti-spam measures to your web form by performing each of the following
    steps:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下每个步骤，向你的网页表单添加简单的反垃圾邮件措施：
- en: 'Update `index.html` to have an additional form input under the input labeled
    `Confirm Password` as follows:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`index.html`，在标记为`确认密码`的输入下添加一个额外的表单输入，如下所示：
- en: '[PRE43]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Using JavaScript, generate a random number between `1` and `100` at the top
    of `validation.js` using the following code:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用JavaScript，在`validation.js`顶部使用以下代码生成一个介于`1`和`100`之间的随机数：
- en: '[PRE44]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'At the very end of the `$(function(){});` jQuery block, add the following code
    to update the HTML `anti-spam-number` span element with the random number:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`$(function(){});` jQuery区块的最后，添加以下代码，以更新HTML的`anti-spam-number` span元素为随机数字：
- en: '[PRE45]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Add the following additional validation check to the end of the `doValidation()`
    function:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`doValidation()`函数的末尾添加以下附加验证检查：
- en: '[PRE46]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Finally, at the end of `validation.js`, add the `validateAntiSpam()` function,
    which is called by the previous code:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`validation.js`的末尾，添加`validateAntiSpam()`函数，之前的代码调用该函数：
- en: '[PRE47]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Open `index.html` in a web browser and you will see the additional anti-spam
    form input field. Every time you refresh the page, it will ask you to input a
    different number.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在web浏览器中打开`index.html`，你会看到额外的反垃圾邮件表单输入字段。每次刷新页面，它会要求你输入不同的数字。
- en: How it works…
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'By declaring the `spamNumber` global variable outside any function, it is available
    for use by the whole JavaScript file. A new number between `1` and `100` is generated
    on every page load so that a web bot cannot store the answer and submit the form.
    Within the HTML code, there is a `span` element with the class `anti-spam-number`,
    which is updated with a random number on page load using the following code:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将`spamNumber`全局变量声明在任何函数之外，它可供整个JavaScript文件使用。在每次页面加载时，生成一个介于`1`和`100`之间的新数字，这样网页机器人就不能存储答案并提交表单。在HTML代码中，有一个具有类`anti-spam-number`的`span`元素，使用以下代码在页面加载时更新为随机数字：
- en: '[PRE48]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This will ensure the user is being told to input the correct number. We created
    an additional validation function named `validateAntiSpam` and called it from
    the `doValidation()` function for all inputs that have the `anti-spam-input` class.
    This will then validate the user-entered number with the globally available `spamNumber`
    variable, shown as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保用户被告知输入正确的数字。我们创建了一个额外的验证函数，名为`validateAntiSpam`，并从`doValidation()`函数中调用所有具有`anti-spam-input`类的输入。然后，这将使用全局可用的`spamNumber`变量验证用户输入的数字，如下所示：
- en: '[PRE49]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Note that the input is parsed as an integer to ensure a number-on-number comparison.
    If the values do not match, this function will return `false` so that the `doValidation()`
    function can create the appropriate error message on-screen for the user.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，将输入解析为整数以确保数字之间的比较。如果值不匹配，这个函数将返回`false`，以便`doValidation()`函数可以为用户在屏幕上创建适当的错误消息。
- en: There's more…
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: This type of client-side spam validation cannot be completely relied upon. It
    is effective towards general web bots that are not directly targeting your website.
    If someone wants to write a bot script specific to your site, bypassing this JavaScript
    would not be a difficult process. If you think this is possible, more extreme
    server-side spam prevention must be used.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这种客户端垃圾邮件验证不能完全信赖。它对一般网页机器人有效，但不能对直接针对你的网站的机器人起作用。如果有人想要为你的网站编写一个特定的机器人脚本，那么绕过这个JavaScript并不是一个困难的过程。如果你觉得这是可能的，那么必须使用更极端的服务器端垃圾邮件预防方法。
- en: There are many effective spam-prevention methods available for free on the Internet.
    The most popular are CAPTCHAs. One of the most popular CAPTCHAs is available for
    free by Google at [http://www.google.com/recaptcha](http://www.google.com/recaptcha).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网上有许多有效的防垃圾邮件方法可以免费获得。最流行的是CAPTCHA。最流行的CAPTCHA之一是谷歌在[http://www.google.com/recaptcha](http://www.google.com/recaptcha)上免费提供的。
- en: See also
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Adding a password strength indicator*'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加密码强度指示器*'
- en: Implementing input character restrictions
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现输入字符限制
- en: Until now, all of the recipes in this chapter have concentrated on input validation
    and providing appropriate feedback to the user. There are situations where it
    is better to simply prevent the user from inputting invalid characters in the
    first place. This method would not typically be used, because it can be confusing
    for some users; for example, if they are not being told why they cannot input
    *%*. A situation where this would work is a login form. If you know your registration
    system does not allow *%* in the username, you know that the user would be inputting
    *%* by mistake, and therefore preventing the input is acceptable. This recipe
    provides a method to prevent users from inputting non-alphanumeric characters
    into an input field.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本章中的所有示例都集中在输入验证和向用户提供适当反馈的方面。有些情况下，最好是阻止用户根本不输入无效的字符。通常不会使用这种方法，因为对于一些用户来说这可能会很令人困惑；例如，如果他们不被告知为什么不能输入*％*。这种方法适用的情况是登录表单。如果你知道你的注册系统不允许用户名中含有*％*，你就知道用户输入*％*是错误的，因此阻止输入是可以接受的。这个示例提供了一种方法，可以防止用户在输入字段中输入非字母数字字符。
- en: Getting ready
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe does not use any code from the last eight recipes; however, there
    are similarities in the CSS code. To complete this recipe, you are going to need
    three files. Create `recipe-9.html`, `recipe-9.js`, and `recipe-9.css` in the
    same directory as you have stored the latest version of jQuery.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例不使用前八个示例中的代码；不过，CSS代码中有相似之处。完成这个示例，你将需要三个文件。在存储最新版本的jQuery的同一目录中创建`recipe-9.html`、`recipe-9.js`和`recipe-9.css`。
- en: How to do it…
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Use jQuery to prevent users from inputting invalid chapters into text inputs
    by performing the following steps:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 使用jQuery来防止用户通过以下步骤在文本输入中输入无效的章节：
- en: 'Add the following HTML code to `recipe-9.html`. This creates a basic login
    form and includes the two other files along with the jQuery library:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下HTML代码添加到`recipe-9.html`中。这将创建一个基本的登录表单，并包括另外两个文件以及jQuery库：
- en: '[PRE50]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Add the following CSS code to `recipe-9.css`, which adds style to the login
    form:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下CSS代码添加到`recipe-9.css`中，为登录表单添加样式：
- en: '[PRE51]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Add the following JavaScript code to `recipe-9.js` in order to watch for user
    input on the `username` field and ensure non-alphanumeric characters are not inputted:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下JavaScript代码添加到`recipe-9.js`中，以监视`username`字段上的用户输入，并确保不输入非字母数字字符：
- en: '[PRE52]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Open `recipe-9.html` in a web browser and attempt to input a non-alphanumeric
    character (for example, `$`) inside the `username` field. You will see it will
    not be placed inside the field.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Web 浏览器中打开 `recipe-9.html` 并尝试在 `username` 字段中输入非字母数字字符（例如，`$`）。你会发现它不会被放置在字段中。
- en: How it works…
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: A key press event handler is attached to the `username` field on page load.
    The callback function for this event handler has a single argument, which is the
    `event` object. This `event` object provides access to the key code of the key
    that the user is pressing. When the `username` field has focus and the user presses
    a key, the callback function is executed.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 页面加载时将键按下事件处理程序附加到 `username` 字段。此事件处理程序的回调函数有一个参数，即 `event` 对象。此 `event` 对象提供对用户按下的键的键码的访问。当
    `username` 字段具有焦点并且用户按下键时，将执行回调函数。
- en: 'First, `String.fromCharCode(event.which);` is used to get the string value
    of the pressed key; for example, `D`, `H`, and `4`. A regular expression is then
    used to determine whether or not this character is alphanumeric. If not, the character
    is prevented from being inputted into the form field using the following code:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`String.fromCharCode(event.which);` 用于获取按下键的字符串值；例如，`D`、`H` 和 `4`。然后使用正则表达式来确定该字符是否是字母数字字符。如果不是，则使用以下代码阻止该字符输入到表单字段中：
- en: '[PRE53]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: There's more…
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: Ensure that the event used in this recipe is the `keypress` event. If an alternative
    event is used, such as `keydown`, you may not achieve the desired result. If the
    `keydown` event is used, when the user presses *Shift* + *4* to input a `$` symbol,
    the `keydown` event will provide its event handler as just `4`, and not `$`, therefore
    passing validation.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 确保此示例中使用的事件是 `keypress` 事件。如果使用了替代事件，如 `keydown`，可能无法达到预期的结果。如果使用 `keydown`
    事件，当用户按下 *Shift* + *4* 来输入 `$` 符号时，`keydown` 事件将以 `4` 而不是 `$` 提供其事件处理程序，因此未通过验证。
