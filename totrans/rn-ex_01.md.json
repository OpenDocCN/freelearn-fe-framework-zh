["```js\nreact-native init Tasks \n\n```", "```js\nreact-native run-ios \n\n```", "```js\n|Tasks // root folder\n|__Android*\n|__ios*\n|__node_modules\n|__.buckconfig\n|__.flowconfig\n|__.gitignore\n|__.watchmanconfig\n|__index.android.js // Android entry point\n|__index.ios.js // iOS entry point\n|__package.json // npm package list\n\n```", "```js\n|Tasks \n|__app \n|____components \n|______TasksList \n|________index.js \n|________styles.js \n|______TasksListCell \n|________index.js \n|________styles.js \n|______TasksListInput \n|________index.js \n|________styles.js \n|____images \n|__Android \n|__ios \n|__node_modules \n|__.buckconfig \n|__.flowconfig \n|__.gitignore \n|__.watchmanconfig \n|__index.android.js \n|__index.ios.js \n|__package.json \n\n```", "```js\nclass Tasks extends Component { \n  render () { \n    return ( \n      <View style = {{ flex: 1, justifyContent: 'center',  \n        alignItems: 'center', backgroundColor: '#F5FCFF'  \n      }}> \n        <Text style = {{ fontSize: 20, textAlign:  \n          'center', margin: 10 }}> \n          Welcome to React Native! \n        </Text> \n      </View> \n    ) \n  } \n} \n\n```", "```js\nclass Tasks extends Component { \n  render () { \n    return ( \n      <View style = { styles.container }> \n        <Text style = { styles.welcome }> \n          Welcome to React Native! \n        </Text> \n      </View> \n    ) \n  } \n} \n\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1, \n    justifyContent: 'center', \n    alignItems: 'center', \n    backgroundColor: '#F5FCFF' \n  }, \n  welcome: { \n    fontSize: 20, \n    textAlign: 'center', \n    margin: 10 \n  } \n)}; \n\n```", "```js\nimport styles from './styles.js'; \n\nclass Tasks extends Component { \n  render(){ \n    return ( \n      <View style = { styles.container }> \n        <Text style = { styles.welcome }> \n          Welcome to React Native! \n        </Text> \n      </View> \n    ) \n  } \n} \n\n```", "```js\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1, \n    justifyContent: 'center', \n    alignItems: 'center', \n    backgroundColor: '#F5FCFF' \n  }, \n  welcome: { \n    fontSize: 20, \n    textAlign: 'center', \n    margin: 10 \n  } \n)}; \n\nexport default styles; \n\n```", "```js\nvar React = require('react'); \nvar Component = React.Component; \n\n```", "```js\nimport React, { Component } from 'react'; \n\n```", "```js\nclass TasksList extends Component { \n  constructor (props) { \n\n    super (props); \n\n    const ds = new ListView.DataSource({ \n      rowHasChanged: (r1, r2) => r1 !== r2 }); \n\n    this.state = { \n      dataSource: ds.cloneWithRows(['row 1', 'row 2']) \n    }; \n  } \n\n  render () { \n    return ( \n      <ListView \n        dataSource = { this.state.dataSource } \n        renderRow = { (rowData) => <Text>  \n          { rowData } </Text> } \n      /> \n    ); \n  } \n} \n\n```", "```js\nimport React, { Component } from 'react'; \n\n```", "```js\nimport { \n  ListView, \n  Text \n} from 'react-native'; \n\n```", "```js\nexport default class TasksList extends Component { \n  ... \n} \n\n```", "```js\nexport default class TasksList extends Component { \n  constructor (props) { \n    super (props); \n    const ds = new ListView.DataSource({ \n     rowHasChanged: (r1, r2) => r1 !== r2 \n    }); \n\n    this.state = { \n     dataSource: ds.cloneWithRows([ \n        'Buy milk', \n        'Walk the dog', \n        'Do laundry', \n        'Write the first chapter of my book' \n      ]) \n    }; \n  } \n} \n\n```", "```js\n  render () { \n    return ( \n      <ListView \n        dataSource={ this.state.dataSource } \n        renderRow={ (rowData) =>  \n          <Text> { rowData } </Text> } \n      /> \n    ); \n  } \n\n```", "```js\n// Tasks/app/components/TasksList/index.js \n\nimport React, { Component } from 'react'; \n\nimport { \n  ListView, \n  Text \n} from 'react-native'; \n\nexport default class TasksList extends Component { \n  constructor (props) { \n    super (props); \n\n    const ds = new ListView.DataSource({ \n      rowHasChanged: (r1, r2) => r1 !== r2 \n    }); \n\n    this.state = { \n      dataSource: ds.cloneWithRows([ \n        'Buy milk', \n        'Walk the dog', \n        'Do laundry', \n        'Write the first chapter of my book' \n      ]) \n    }; \n  } \n\n  render () { \n    return ( \n      <ListView \n        dataSource={ this.state.dataSource } \n        renderRow={ (rowData) => \n          <Text>{ rowData }</Text> } \n      /> \n    ); \n  } \n} \n\n```", "```js\nclass Tasks extends Component { \n  render () { \n    return ( \n      <View style={styles.container}> \n      </View> \n    ); \n  } \n} \n\n```", "```js\nimport TasksList from './app/components/TasksList'; \n\n```", "```js\nexport default class Tasks extends Component { \n  render () { \n    return ( \n      <View style={styles.container}> \n        <TasksList /> \n      </View> \n    ); \n  } \n} \n\n```", "```js\n// Tasks/index.ios.js \n\nimport React, { Component } from 'react'; \nimport { \n  AppRegistry, \n  StyleSheet, \n  View \n} from 'react-native'; \n\nimport TasksList from './app/TasksList'; \n\nexport default class Tasks extends Component { \n  render() { \n    return ( \n      <View style={styles.container}> \n        <TasksList /> \n      </View> \n    ); \n  } \n} \n\n```", "```js\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1, \n    justifyContent: 'center', \n    alignItems: 'center', \n    backgroundColor: '#F5FCFF', \n  } \n}); \n\nAppRegistry.registerComponent('Tasks', () => Tasks); \n\n```", "```js\n|TasksList \n|__TextInput \n|__ListView \n|____RowData \n|____RowData \n|____... \n|____RowData \n\n```", "```js\n// Tasks/index.ios.js \n\nimport React, { Component } from 'react'; \nimport { \n  AppRegistry, \n  View \n} from 'react-native'; \n\nimport TasksList from './app/components/TasksList'; \n\nexport default class Tasks extends Component { \n  render() { \n    return ( \n      <View> \n        <TasksList /> \n      </View> \n    ); \n  } \n} \n\nAppRegistry.registerComponent('Tasks', () => Tasks);\n\n```", "```js\n// Tasks/app/components/TasksList/styles.js\n\nimport { StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1 \n  } \n}); \n\nexport default styles; \n\n```", "```js\n// Tasks/app/components/TasksList/index.js \n\nimport React, { Component } from 'react'; \n\nimport { \n  ListView, \n  Text, \n  TextInput, \n  View \n} from 'react-native'; \n\nimport styles from './styles'; \n\nexport default class TasksList extends Component { \n  constructor (props) { \n    super (props); \n\n    const ds = new ListView.DataSource({ \n      rowHasChanged: (r1, r2) => r1 !== r2 \n    }); \n\n    this.state = { \n      ds: new ListView.DataSource({ \n        rowHasChanged: (r1, r2) => r1 !== r2 \n      }), \n      listOfTasks: [], \n      text: '' \n    }; \n  } \n\n```", "```js\n  render () { \n    const dataSource = \n    this.state.ds.cloneWithRows(this.state.listOfTasks); \n\n```", "```js\n    return ( \n      <View style={ styles.container }> \n        <TextInput \n          autoCorrect={ false } \n          onChangeText={ (text) => this._changeTextInputValue(text) } \n          onSubmitEditing={ () => this._addTask() } \n          returnKeyType={ 'done' } \n          style={ styles.textInput } \n          value={ this.state.text } \n        /> \n\n```", "```js\n        <ListView \n          dataSource={ dataSource } \n          enableEmptySections={ true } \n          renderRow={ (rowData) => this._renderRowData(rowData) } \n        /> \n      </View> \n    ); \n  } \n\n```", "```js\n_addTask () { \n    const listOfTasks = [...this.state.listOfTasks, this.state.text]; \n\n    this.setState({ \n      listOfTasks \n    }); \n\n    this._changeTextInputValue('' \n  } \n\n```", "```js\n  _changeTextInputValue (text) { \n    this.setState({ \n      text \n    }); \n  } \n\n  _renderRowData (rowData) { \n    return ( \n      <Text>{ rowData }</Text> \n    ) \n  } \n} \n\n```", "```js\nthis.setState({ \n  listOfTasks: listOfTasks, \n  text: text \n}) \n\n```", "```js\n// TasksList/app/components/TasksList/index.js\n\n... \nimport { \n  AsyncStorage, \n  ... \n} from 'react-native'; \n... \n\n```", "```js\nexport default class TasksList extends Component { \n  ... \n  componentDidMount () { \n    this._updateList(); \n  } \n\n```", "```js\n  ... \n  async _addTask () { \n    const listOfTasks = [...this.state.listOfTasks, this.state.text]; \n\n    await AsyncStorage.setItem('listOfTasks', \n    JSON.stringify(listOfTasks)); \n\n    this._updateList(); \n  } \n\n```", "```js\n  ... \n  async _updateList () { \n    let response = await AsyncStorage.getItem('listOfTasks'); \n    let listOfTasks = await JSON.parse(response) || []; \n\n    this.setState({ \n      listOfTasks \n    }); \n\n    this._changeTextInputValue(''); \n  } \n} \n\n```", "```js\n_updateList () { \n  AsyncStorage.getItem('listOfTasks'); \n    .then((response) => {fto \n      return JSON.parse(response); \n    }) \n    .then((parsedResponse) => { \n      this.setState({ \n        listOfTasks: parsedResponse \n      }); \n    }); \n} \n\n```", "```js\nasync _updateList () { \n  let response = await AsyncStorage.getItem('listOfTasks'); \n  let listOfTasks = await JSON.parse(response) || []; \n\n  this.setState({ \n    listOfTasks \n  }); \n\n  this._changeTextInputValue(''); \n} \n\n```", "```js\n// Tasks/app/components/TasksList/index.js \n\n... \nimport TasksListCell from '../TasksListCell'; \n... \nexport default class TasksList extends Component { \n  ... \n  async _addTask () { \n    const singleTask = { \n      completed: false, \n      text: this.state.text \n    } \n\n```", "```js\n    const listOfTasks = [...this.state.listOfTasks, singleTask]; \n    await AsyncStorage.setItem('listOfTasks', \n    JSON.stringify(listOfTasks)); \n    this._updateList(); \n  } \n  ... \n  _renderRowData (rowData, rowID) { \n    return ( \n      <TasksListCell \n        completed={ rowData.completed } \n        id={ rowID } \n        onPress={ (rowID) => this._completeTask(rowID) } \n        text={ rowData.text } \n      /> \n    ) \n  } \n  ... \n} \n\n```", "```js\n// Tasks/app/components/TasksListCell/index.js \n\nimport React, { Component, PropTypes } from 'react'; \n\nimport { \n  Text, \n  TouchableHighlight, \n  View \n} from 'react-native'; \n\nexport default class TasksListCell extends Component { \n  static propTypes = { \n    completed: PropTypes.bool.isRequired, \n    id: PropTypes.string.isRequired, \n    onLongPress: PropTypes.func.isRequired, \n    onPress: PropTypes.func.isRequired, \n    text: PropTypes.string.isRequired \n  } \n\n```", "```js\n  constructor (props) { \n    super (props); \n  } \n\n  render () { \n    const isCompleted = this.props.completed ? 'line-through' : 'none'; \n    const textStyle = { \n      fontSize: 20, \n      textDecorationLine: isCompleted \n    }; \n\n```", "```js\n    return ( \n      <View> \n        <TouchableHighlight \n          onPress={ () => this.props.onPress(this.props.id) } \n          underlayColor={ '#D5DBDE' } > \n          <Text style={ textStyle }>{ this.props.text }</Text> \n        </TouchableHighlight> \n      </View> \n    ) \n  } \n} \n\n```", "```js\nimport { PropTypes } from 'react'; \n\n```", "```js\nclass Example extends Component { \n  static propTypes = { \n    foo: PropTypes.string.isRequired, \n    bar: PropTypes.func, \n    baz: PropTypes.number.isRequired \n  } \n} \n\n```"]