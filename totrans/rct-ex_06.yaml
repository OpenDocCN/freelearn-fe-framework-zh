- en: Chapter 6. React on the Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we took a look at refactoring our components. We saw
    how to make use of mixins and extract similar functionalities to use seamlessly
    across components. We also took a look at DOM interactions, using refs, and related
    DOM actions from a component.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore how React functions on the server side. React
    allows us to render and handle components on the server to pre-render HTML, which
    is useful for several reasons. We will also take a look at how this affects the
    React component life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Server-side rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Render functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side component life cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of chapter, we will be able to start using React components on the
    server side and understand its interactions and implications with the server side.
  prefs: []
  type: TYPE_NORMAL
- en: Getting React to render on server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Hey Shawn!" Mike startled Shawn, entering their workplace with a cup of coffee.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Good morning, Mike," replied Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: Sun sparkled on Shawn's desk and they entered into a conversation about a new
    project that they were about to begin.
  prefs: []
  type: TYPE_NORMAL
- en: '"Shawn, I just came to know, from Carla, about a new project that we need to
    take. The client has asked us to build a simple search page for our Open Library
    project."'
  prefs: []
  type: TYPE_NORMAL
- en: Shawn and Mike had previously build an application to display recent changes
    from `openlibrary.com` API. They were now going to build a search application
    on top of Open Library's Search API.
  prefs: []
  type: TYPE_NORMAL
- en: '"Awesome," Mike was excited about this. He was already loving working on React.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Shawn, for this project, we will be exploring options on how to use React
    on the server."'
  prefs: []
  type: TYPE_NORMAL
- en: Until now, we have been manually mounting our components after page load. Until
    the component is rendered, the page doesn't have any HTML content from the component.
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s see how we will be doing this on the server so that HTML is pre-generated
    on the page instead of after the page has completely loaded."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it. How is rendering of components on server side useful though?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"It is useful for a couple of reasons. One being that we are generating content
    on the server. This is useful for SEO purpose and better indexing with search
    engines."'
  prefs: []
  type: TYPE_NORMAL
- en: '"As the content is generated on the server, the first render would display
    the page immediately instead of waiting for the page load to properly finish,
    after which the component would be rendered."'
  prefs: []
  type: TYPE_NORMAL
- en: '"This also helps us to avoid a flicker effect on our page loads. There are
    other such niceties that we can harness, we''ll explore them later," Mike explained.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Cool. Let''s begin then."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Alright! For this project, let''s begin with a starter Webpack Project to
    manage our code. For the server element, we will be using Express JS. We won''t
    be doing anything complex here, we will simply expose a route from Express JS
    and render a `.ejs` view that consists of our component."'
  prefs: []
  type: TYPE_NORMAL
- en: '"An example of such a starter project can be found on the [http://webpack.github.io/](http://webpack.github.io/)
    website," informed Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Cool, I think we will divide the code on client/server side as well?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yes. Let''s put them under the `/app` directory to consist our components,
    `/client` for client-specific code, and `/server` for the code to be used on server
    in our `/src` directory," continued Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Next, we will be setting up the `server.js` file in `/app/server` directory."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '"That''s a pretty standard Express App setup. We are specifying the styles
    to be used, static assets path, and so on."'
  prefs: []
  type: TYPE_NORMAL
- en: '"For our route, we are simple exposing the root `/` by doing this:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '"We are asking Express to serve the `index.html` file on request to root. In
    our `index.js` file, which we will be passing to node to run the application,
    we will simply expose the server module that we just wrote."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '"Mike, why do we require babel/register here?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Oh right. Here, we require Babel ([http://babeljs.io/](http://babeljs.io/))
    to convert our files to browser-compatible format. We are using some JavaScript
    ES2015 syntax goodness. Babel helps us to add support for the latest version of
    JavaScript through syntax transformers. This allows us to use the latest JavaScript
    syntax, which is not supported by browsers right now."'
  prefs: []
  type: TYPE_NORMAL
- en: '"With this setup, we will define our `index.html` as:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '"Nothing much is going on over here. We are simply defining a single div on
    top of which we will be rendering the React component."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Also, notice that we have included links to the files to add Bootstrap and
    Font Awesome support to our app."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Next, on the client-side render handling, we would be doing"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '"Finally, let''s see how the `App` class defined here is used before moving
    to our actual component."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '"Wow, that''s a lot to sink in," exhaled Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Hah! Give it some time. What we are doing here is simply taking care of our
    rendering logic. If we pass an element to this class, contents are rendered onto
    it; otherwise, we will return the rendered string version. Notice how we are using
    `React.renderToString` to achieve the same. Let''s complete this first and we
    will then revisit it when we will be using it to render the contents on the server
    request."'
  prefs: []
  type: TYPE_NORMAL
- en: '"In a nutshell, we are just asking React to take in a state for a component,
    render it, and return the contents that would be rendered from the `render()`
    method as a string."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We will then start by defining our root container component."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, we simply define a container to hold our main component and require
    all our dependencies. Let''s start building our Search Component next."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Awesome. I think I can take that up. Looks like this will just be a simple
    component?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yup. Go ahead," replied Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Ok, I see that we would be needing to fetch data from the Open Library API
    endpoint."'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://openlibrary.org/search.json?page=1&q=searchTerm](https://openlibrary.org/search.json?page=1&q=searchTerm)'
  prefs: []
  type: TYPE_NORMAL
- en: '"Here the `q` query parameter will be the search term. An example response
    looks like:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '"Right," added Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"I think I will start by defining the initial status based on the `start`,
    `num_found`, and `docs` fields," said Shawn'
  prefs: []
  type: TYPE_NORMAL
- en: '"Okay."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '"I also added two other states that I will maintain: `searchCompleted` to know
    whether the current search operation has completed or not and `searching` to know
    that we are currently searching something."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Cool. Let''s see the render method next," continued Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let me start by adding the search box in the `render` method."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '"We should now have a display for the search box."'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting React to render on server](img/4730_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Next, we will add the `performSearch` method that initiates searching based
    on the search term entered by the user."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, we are simply fetching the search term entered by the user and passing
    it to the `openLibrarySearch` method, which will actually perform the search.
    Then, we update the state that we are actively performing a search now."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s complete the search functionality now."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '"Ah, nice Shawn, you are using `fetch` instead of regular Ajax!"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Huh, yeah. I have been using [https://github.com/github/fetch](https://github.com/github/fetch)
    as a polyfill for the `window.fetch` specification."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Nice, isn''t it? It supports simple and clean API, such as Ajax, and a unified
    fetching API."'
  prefs: []
  type: TYPE_NORMAL
- en: After fetching of some resource or request completion, the callbacks fall through
    this are defined by the `then` method. Notice that we have also used ES2015 string
    literal to build the URI," added Shawn.
  prefs: []
  type: TYPE_NORMAL
- en: '"Cool. Looks like you are fetching the resource, then passing it to `parseJSON`
    to parse and return the JSON result from the response body. Then, are we updating
    the state on top of it?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yes, let me define those"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '"After getting the final response, I am updating and setting the state to result
    that is returned as well as updating our `searchCompleted` and searching states
    to indicate the searching job is done."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Ah, nice Shawn, I see that you have started adopting and using new features
    from JS Next!, like the `spread` operator."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Haha, yeah. I''ve fallen in love with these. I am using this to merge the
    properties of the JSON result with the new keys that I want to add and build a
    new object. This would also be done similarly using `Object.assign` that we previously
    saw."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '"That way, we are building a new object instead of mutating a previous one."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Nice Shawn," Mike was happy knowing that Shawn was getting hang of the new
    things.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Finally, let me add the loading action display to show a loader icon and display
    of actual results. The render method will now look like this."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, we are checking the current state of the search operation. Based on
    this, we are displaying the loader of the actual contents, results, or empty div
    element."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let me define the loading and rendering of the elements."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '"This will define the display of the spinner to indicate loading."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '"After adding this, the searching operation should display a loader like so."'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting React to render on server](img/4730_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The results displayed would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting React to render on server](img/4730_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"The completed `SearchPage` component is as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '"If you notice, I have used an immediately-invoked function to add an `if`
    statement to display the search icon rendering, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, we have used the `()=>{}` syntax to define the function first and then
    immediately invoke it `(()=>{}))()`, returning the content that we need to display
    during the render."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Great work, Shawn!" Mike was happy with the progress Shawn had made.'
  prefs: []
  type: TYPE_NORMAL
- en: '"This is handy, when we want to add simple logic switches within the render
    itself, instead of defining new methods," continued Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: On the server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Now Shawn, let''s pre-render the component on the server. What this means
    is that create an HTML element out of the React component and render its contents
    in our view on first page load itself. Currently, the loading of the element is
    taken care of by the client-side code."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '"Instead of this, we will render the React element in the Express action itself."'
  prefs: []
  type: TYPE_NORMAL
- en: '"First, let''s set up an `.ejs` view to display out HTML contents along with
    dynamically-generated React contents."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, we will pass `reactOutput` to the view as a variable to be rendered."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We will now change our `server.js` file to include the required component
    and React for rendering."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '"Our action will get changed to:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '"Our final server code would look like."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '"Here you have it! We are using React''s `renderToString` method to render
    a component, passing any state if required, to accompany it."'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a look at how server-side rendering can be used with
    React with the help of `Express.js`. We started with a client-side React component
    and in the end, replaced it with server-side rendering using the methods provided
    by the React API.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at React add ons for doing two-way binding,
    class name manipulation, cloning components, immutability helpers, and PureRenderMixin,
    while continuing with the search project build in this chapter.
  prefs: []
  type: TYPE_NORMAL
