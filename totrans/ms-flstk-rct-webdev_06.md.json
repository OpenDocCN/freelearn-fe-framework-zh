["```js\nconst awsConfig = { \n  accessKeyId: 'EXAMPLE_LB7XH_KEY_BGTCA', \n  secretAccessKey: 'ExAMpLe+KEY+FYliI9J1nvky5g2bInN26TCU+FiY', \n  region: 'us-west-2', \n  bucketKey: 'your-bucket-name-' \n};\n\n```", "```js\n        // just an example link to the bucket \n        https://console.aws.amazon.com/s3/home?region=eu-central-  \n        1&bucket=publishing-app&prefix=\n\n```", "```js\n        <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n        <CORSConfiguration title-page-name\"/>         /doc/2006-03-01/\"> \n            <CORSRule> \n                <AllowedOrigin>*</AllowedOrigin> \n                <AllowedMethod>GET</AllowedMethod> \n                <AllowedMethod>POST</AllowedMethod> \n                <AllowedMethod>PUT</AllowedMethod> \n                <MaxAgeSeconds>3000</MaxAgeSeconds> \n                <AllowedHeader>*</AllowedHeader> \n            </CORSRule> \n        </CORSConfiguration>\n\n```", "```js\nnpm i -save node-env-file@0.1.8\n\n```", "```js\n// this is how we will access the variables in \n//the server.js for example: \nenv.process.AWS_ACCESS_KEY_ID \nenv.process.AWS_SECRET_ACCESS_KEY \nenv.process.AWS_BUCKET_NAME \nenv.process.AWS_REGION_NAME\n\n```", "```js\n$ [[you are in the server/ directory of your project]]\n$ touch .env\n\n```", "```js\nAWS_ACCESS_KEY_ID=_*_*_*_*_ACCESS_KEY_HERE_*_*_*_*_ \nAWS_SECRET_ACCESS_KEY=_*_*_*_*_SECRET_KEY_HERE_*_*_*_*_ \nAWS_BUCKET_NAME=publishing-app \nAWS_REGION_NAME=eu-central-1\n\n```", "```js\nnpm i --save react-s3-uploader@3.0.3\n\n```", "```js\n// this is old codebase to improve: \nvar articleSchema = new Schema({ \n    articleTitle: String, \n    articleContent: String, \n    articleContentJSON: Object \n  },  \n  {  \n    minimize: false  \n  } \n);\n\n```", "```js\nvar articleSchema = new Schema({ \n    articleTitle: String, \n    articleContent: String, \n    articleContentJSON: Object, \n    articlePicUrl: { type: String, default: \n     '/static/placeholder.png' } \n  },  \n  {  \n    minimize: false  \n  } \n);\n\n```", "```js\nimport s3router from 'react-s3-uploader/s3router';\n\n```", "```js\n// don't write it, this is how your server/server.js \n //file should look like: \nimport http from 'http'; \nimport express from 'express'; \nimport cors from 'cors'; \nimport bodyParser from 'body-parser'; \nimport falcor from 'falcor'; \nimport falcorExpress from 'falcor-express'; \nimport FalcorRouter from 'falcor-router'; \nimport routes from './routes.js'; \n\nimport React from 'react' \nimport { createStore } from 'redux' \nimport { Provider } from 'react-redux' \nimport { renderToStaticMarkup } from 'react-dom/server' \nimport ReactRouter from 'react-router'; \nimport { RoutingContext, match } from 'react-router'; \nimport * as hist  from 'history'; \nimport rootReducer from '../src/reducers'; \nimport reactRoutes from '../src/routes'; \nimport fetchServerSide from './fetchServerSide'; \n\nimport s3router from 'react-s3-uploader/s3router'; \n\nvar app = express(); \napp.server = http.createServer(app); \n\n// CORS - 3rd party middleware \napp.use(cors()); \n\n// This is required by falcor-express middleware \n// to work correctly with falcor-browser \napp.use(bodyParser.json({extended: false})); \napp.use(bodyParser.urlencoded({extended: false}));\n\n```", "```js\nrequire('babel-core/register'); \nrequire('babel-polyfill'); \nrequire('./server');\n\n```", "```js\nvar env = require('node-env-file'); \n// Load any undefined ENV variables form a specified file. \nenv(__dirname + '/.env'); \n\nrequire('babel-core/register'); \nrequire('babel-polyfill'); \nrequire('./server');\n\n```", "```js\napp.use('/s3', s3router({ \n  bucket: process.env.AWS_BUCKET_NAME, \n  region: process.env.AWS_REGION_NAME, \n  signatureVersion: 'v4', \n  headers: {'Access-Control-Allow-Origin': '*'},  \n  ACL: 'public-read' \n}));\n\n```", "```js\n    $ [[you are in the src/components/articles directory of your   \n    project]]\n$ touch ImgUploader.js\n\n```", "```js\nimport React from 'react'; \nimport ReactS3Uploader from 'react-s3-uploader'; \nimport {Paper} from 'material-ui'; \n\nclass ImgUploader extends React.Component { \n  constructor(props) { \n    super(props); \n    this.uploadFinished = this.uploadFinished.bind(this); \n\n    this.state = { \n      uploadDetails: null, \n      uploadProgress: null, \n      uploadError: null, \n      articlePicUrl: props.articlePicUrl \n    }; \n  } \n\n  uploadFinished(uploadDetails) { \n    // here will be more code in a moment \n  } \n\n  render () { \n    return <div>S3 Image uploader placeholder</div>; \n  } \n} \n\nImgUploader.propTypes = {  \n  updateImgUrl: React.PropTypes.func.isRequired  \n}; \nexport default ImgUploader;\n\n```", "```js\n// this is already in your codebase: \nthis.state = { \n  uploadDetails: null, \n  uploadProgress: null, \n  uploadError: null, \n  articlePicUrl: props.articlePicUrl \n};\n\n```", "```js\n uploadFinished(uploadDetails) { \n    // here will be more code in a moment \n  }\n\n```", "```js\n uploadFinished(uploadDetails) { \n    let articlePicUrl = '/s3/img/'+uploadDetails.filename; \n    this.setState({  \n      uploadProgress: null, \n      uploadDetails:  uploadDetails, \n      articlePicUrl: articlePicUrl \n    }); \n    this.props.updateImgUrl(articlePicUrl); \n  }\n\n```", "```js\n render () { \n    let imgUploadProgressJSX; \n    let uploadProgress = this.state.uploadProgress; \n    if(uploadProgress) { \n      imgUploadProgressJSX = ( \n          <div> \n            {uploadProgress.uploadStatusText} \n({uploadProgress.progressInPercent}%) \n          </div> \n        ); \n    } else if(this.state.articlePicUrl) { \n      let articlePicStyles = { \n        maxWidth: 200,  \n        maxHeight: 200,  \n        margin: 'auto' \n      }; \n      imgUploadProgressJSX = <img src={this.state.articlePicUrl} \n       style={articlePicStyles} />; \n    } \n\n    return <div>S3 Image uploader placeholder</div>; \n  }\n\n```", "```js\n   let uploaderJSX = ( \n        <ReactS3Uploader \n        signingUrl='/s3/sign' \n        accept='image/*' \n          onProgress={(progressInPercent, uploadStatusText) => { \n            this.setState({  \n              uploadProgress: { progressInPercent,  \n              uploadStatusText },  \n              uploadError: null \n            }); \n          }}  \n          onError={(errorDetails) => { \n            this.setState({  \n              uploadProgress: null, \n              uploadError: errorDetails \n            }); \n          }} \n          onFinish={(uploadDetails) => { \n            this.uploadFinished(uploadDetails); \n          }} /> \n      );\n\n```", "```js\n render () { \n    let imgUploadProgressJSX; \n    let uploadProgress = this.state.uploadProgress; \n    if(uploadProgress) { \n      imgUploadProgressJSX = ( \n          <div> \n            {uploadProgress.uploadStatusText} \n             ({uploadProgress.progressInPercent}%) \n          </div> \n        ); \n    } else if(this.state.articlePicUrl) { \n      let articlePicStyles = { \n        maxWidth: 200,  \n        maxHeight: 200,  \n        margin: 'auto' \n      }; \n      imgUploadProgressJSX = <img src={this.state.articlePicUrl} \n       style={articlePicStyles} />; \n    } \n\n    let uploaderJSX = ( \n        <ReactS3Uploader \n        signingUrl='/s3/sign' \n        accept='image/*' \n          onProgress={(progressInPercent, uploadStatusText) => { \n            this.setState({  \n              uploadProgress: { progressInPercent, \n               uploadStatusText },  \n              uploadError: null \n            }); \n          }}  \n          onError={(errorDetails) => { \n            this.setState({  \n              uploadProgress: null, \n              uploadError: errorDetails \n            }); \n          }} \n          onFinish={(uploadDetails) => { \n            this.uploadFinished(uploadDetails); \n          }} /> \n      ); \n\n    return ( \n      <Paper zDepth={1} style={{padding: 32, margin: 'auto', \n       width: 300}}> \n        {imgUploadProgressJSX} \n        {uploaderJSX} \n      </Paper> \n    ); \n  }\n\n```", "```js\nimport ImgUploader from '../../components/articles/ImgUploader';\n\n```", "```js\n// this is old, don't write it: \nclass AddArticleView extends React.Component { \n  constructor(props) { \n    super(props); \n    this._onDraftJSChange = this._onDraftJSChange.bind(this); \n    this._articleSubmit = this._articleSubmit.bind(this); \n\n    this.state = { \n      title: 'test', \n      contentJSON: {}, \n      htmlContent: '', \n      newArticleID: null \n    }; \n  }\n\n```", "```js\nclass AddArticleView extends React.Component { \n  constructor(props) { \n    super(props); \n    this._onDraftJSChange = this._onDraftJSChange.bind(this); \n    this._articleSubmit = this._articleSubmit.bind(this); \n    this.updateImgUrl = this.updateImgUrl.bind(this); \n\n    this.state = { \n      title: 'test', \n      contentJSON: {}, \n      htmlContent: '', \n      newArticleID: null, \n      articlePicUrl: '/static/placeholder.png' \n    }; \n  }\n\n```", "```js\n// this is old codebase, just for your reference: \n  async _articleSubmit() { \n    let newArticle = { \n      articleTitle: this.state.title, \n      articleContent: this.state.htmlContent, \n      articleContentJSON: this.state.contentJSON \n    } \n\n    let newArticleID = await falcorModel \n      .call( \n            'articles.add', \n            [newArticle] \n          ). \n      then((result) => { \n        return falcorModel.getValue( \n            ['articles', 'newArticleID'] \n          ).then((articleID) => { \n            return articleID; \n          }); \n      }); \n\n    newArticle['_id'] = newArticleID; \n    this.props.articleActions.pushNewArticle(newArticle); \n    this.setState({ newArticleID: newArticleID}); \n  }\n\n```", "```js\n async _articleSubmit() { \n    let newArticle = { \n      articleTitle: this.state.title, \n      articleContent: this.state.htmlContent, \n      articleContentJSON: this.state.contentJSON, \n      articlePicUrl: this.state.articlePicUrl \n    } \n\n    let newArticleID = await falcorModel \n      .call( \n            'articles.add', \n            [newArticle] \n          ). \n      then((result) => { \n        return falcorModel.getValue( \n            ['articles', 'newArticleID'] \n          ).then((articleID) => { \n            return articleID; \n          }); \n      }); \n\n    newArticle['_id'] = newArticleID; \n    this.props.articleActions.pushNewArticle(newArticle); \n    this.setState({ newArticleID: newArticleID }); \n  } \n\n  updateImgUrl(articlePicUrl) { \n    this.setState({  \n      articlePicUrl: articlePicUrl \n    }); \n  }\n\n```", "```js\n// your current old codebase to improve: \n    return ( \n      <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n        <h1>Add Article</h1> \n        <WYSIWYGeditor \n          name='addarticle' \n          title='Create an article' \n          onChangeTextJSON={this._onDraftJSChange} /> \n          <RaisedButton \n            onClick={this._articleSubmit} \n            secondary={true} \n            type='submit' \n            style={{margin: '10px auto', display: 'block', \n             width: 150}} \n            label={'Submit Article'} /> \n      </div> \n    ); \n  }\n\n```", "```js\n   return ( \n      <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n        <h1>Add Article</h1> \n        <WYSIWYGeditor \n          name='addarticle' \n          title='Create an article' \n          onChangeTextJSON={this._onDraftJSChange} /> \n\n        <div style={{margin: '10px 10px 10px 10px'}}>  \n          <ImgUploader  \n              updateImgUrl={this.updateImgUrl}  \n              articlePicUrl={this.state.articlePicUrl} /> \n        </div> \n\n        <RaisedButton \n          onClick={this._articleSubmit} \n          secondary={true} \n          type='submit' \n          style={{margin: '10px auto', display: 'block', \n           width: 150}} \n          label={'Submit Article'} /> \n      </div> \n    ); \n  }\n\n```", "```js\n// old codebase to improve: \n  async _fetch() { \n    let articlesLength = await falcorModel. \n      getValue('articles.length'). \n      then((length) =>  length); \n\n    let articles = await falcorModel. \n      get(['articles', {from: 0, to: articlesLength-1}, \n      ['_id','articleTitle', 'articleContent', \n      'articleContentJSON']]).  \n      then((articlesResponse) => {   \n        return articlesResponse.json.articles; \n      }).catch(e => { \n        return 500; \n      }); \n\n    if(articles === 500) { \n      return; \n    } \n\n    this.props.articleActions.articlesList(articles); \n  }\n\n```", "```js\n async _fetch() { \n    let articlesLength = await falcorModel. \n      getValue('articles.length'). \n      then((length) => length); \n\n    let articles = await falcorModel. \n      get(['articles', {from: 0, to: articlesLength-1}, \n       ['_id','articleTitle', 'articleContent', \n       'articleContentJSON', 'articlePicUrl']]).  \n      then((articlesResponse) => {   \n        return articlesResponse.json.articles; \n      }).catch(e => { \n        console.debug(e); \n        return 500; \n      }); \n\n    if(articles === 500) { \n      return; \n    } \n\n    this.props.articleActions.articlesList(articles); \n  }\n\n```", "```js\n// old code: \n    this.props.article.forEach((articleDetails, articleKey) => { \n      let currentArticleJSX = ( \n        <div key={articleKey}> \n          <ArticleCard  \n            title={articleDetails.articleTitle} \n            content={articleDetails.articleContent} /> \n        </div> \n      );\n\n```", "```js\n   this.props.article.forEach((articleDetails, articleKey) => { \n      let currentArticleJSX = ( \n        <div key={articleKey}> \n          <ArticleCard  \n            title={articleDetails.articleTitle} \n            content={articleDetails.articleContent}  \n            articlePicUrl={articleDetails.articlePicUrl} /> \n        </div> \n      );\n\n```", "```js\n// old code to improve: \n  render() { \n    let title = this.props.title || 'no title provided'; \n    let content = this.props.content || 'no content provided'; \n\n    let paperStyle = { \n      padding: 10,  \n      width: '100%',  \n      height: 300 \n    }; \n\n    let leftDivStyle = { \n      width: '30%',  \n      float: 'left' \n    } \n\n    let rightDivStyle = { \n      width: '60%',  \n      float: 'left',  \n      padding: '10px 10px 10px 10px' \n    } \n\n    return ( \n      <Paper style={paperStyle}> \n        <CardHeader \n          title={this.props.title} \n          subtitle='Subtitle' \n          avatar='/static/avatar.png' \n        /> \n\n        <div style={leftDivStyle}> \n          <Card > \n            <CardMedia \n              overlay={<CardTitle title={title} \n               subtitle='Overlay subtitle' />}> \n              <img src='/static/placeholder.png' height='190' /> \n            </CardMedia> \n          </Card> \n        </div> \n        <div style={rightDivStyle}> \n          <div dangerouslySetInnerHTML={{__html: content}} /> \n        </div> \n      </Paper>); \n  }\n\n```", "```js\n render() { \n    let title = this.props.title || 'no title provided'; \n    let content = this.props.content || 'no content provided'; \n    let articlePicUrl = this.props.articlePicUrl || \n     '/static/placeholder.png'; \n\n    let paperStyle = { \n      padding: 10,  \n      width: '100%',  \n      height: 300 \n    }; \n\n    let leftDivStyle = { \n      width: '30%',  \n      float: 'left' \n    } \n\n    let rightDivStyle = { \n      width: '60%',  \n      float: 'left',  \n      padding: '10px 10px 10px 10px' \n    } \n\n    return ( \n      <Paper style={paperStyle}> \n        <CardHeader \n          title={this.props.title} \n          subtitle='Subtitle' \n          avatar='/static/avatar.png' \n        /> \n\n        <div style={leftDivStyle}> \n          <Card > \n            <CardMedia \n              overlay={<CardTitle title={title} \n               subtitle='Overlay subtitle' />}> \n              <img src={articlePicUrl} height='190' /> \n            </CardMedia> \n          </Card> \n        </div> \n        <div style={rightDivStyle}> \n          <div dangerouslySetInnerHTML={{__html: content}} /> \n        </div> \n      </Paper>); \n  }\n\n```", "```js\n// old code: \n  render () { \n    let articlesJSX = []; \n    this.props.article.forEach((articleDetails, articleKey) => { \n      let currentArticleJSX = ( \n        <Link  \n          to={&grave;/edit-article/${articleDetails['_id']}&grave;}  \n          key={articleKey}> \n          <ListItem \n\n            leftAvatar={<img src='/static/placeholder.png'   \n                                    width='50'  \n                                    height='50' />} \n            primaryText={articleDetails.articleTitle} \n            secondaryText={articleDetails.articleContent} \n          /> \n        </Link> \n      ); \n\n      articlesJSX.push(currentArticleJSX); \n    }); \n    // below is rest of the render's function\n\n```", "```js\n render () { \n    let articlesJSX = []; \n    this.props.article.forEach((articleDetails, articleKey) => { \n      let articlePicUrl = articleDetails.articlePicUrl || \n       '/static/placeholder.png'; \n      let currentArticleJSX = ( \n        <Link  \n                to={&grave;/edit-article/${articleDetails['_id']}&grave;}  \nkey={articleKey}> \n          <ListItem \n\n            leftAvatar={<img src={articlePicUrl} width='50' \n             height='50' />} \n            primaryText={articleDetails.articleTitle} \n            secondaryText={articleDetails.articleContent} \n          /> \n        </Link> \n      ); \n\n      articlesJSX.push(currentArticleJSX); \n    }); \n    // below is rest of the render's function\n\n```", "```js\nimport ImgUploader from '../../components/articles/ImgUploader';\n\n```", "```js\n// old code to improve: \nclass EditArticleView extends React.Component { \n  constructor(props) { \n    super(props); \n    this._onDraftJSChange = this._onDraftJSChange.bind(this); \n    this._articleEditSubmit = this._articleEditSubmit.bind(this); \n    this._fetchArticleData = this._fetchArticleData.bind(this); \n    this._handleDeleteTap = this._handleDeleteTap.bind(this); \n    this._handleDeletion = this._handleDeletion.bind(this); \n    this._handleClosePopover = \n     this._handleClosePopover.bind(this); \n\n    this.state = { \n      articleFetchError: null, \n      articleEditSuccess: null, \n      editedArticleID: null, \n      articleDetails: null, \n      title: 'test', \n      contentJSON: {}, \n      htmlContent: '', \n      openDelete: false, \n      deleteAnchorEl: null \n    }; \n  }\n\n```", "```js\nclass EditArticleView extends React.Component { \n  constructor(props) { \n    super(props); \n    this._onDraftJSChange = this._onDraftJSChange.bind(this); \n    this._articleEditSubmit = this._articleEditSubmit.bind(this); \n    this._fetchArticleData = this._fetchArticleData.bind(this); \n    this._handleDeleteTap = this._handleDeleteTap.bind(this); \n    this._handleDeletion = this._handleDeletion.bind(this); \n    this._handleClosePopover = \n     this._handleClosePopover.bind(this); \n    this.updateImgUrl = this.updateImgUrl.bind(this); \n\n    this.state = { \n      articleFetchError: null, \n      articleEditSuccess: null, \n      editedArticleID: null, \n      articleDetails: null, \n      title: 'test', \n      contentJSON: {}, \n      htmlContent: '', \n      openDelete: false, \n      deleteAnchorEl: null, \n      articlePicUrl: '/static/placeholder.png' \n    }; \n  }\n\n```", "```js\n// this is old already in your codebase: \n  _fetchArticleData() { \n    let articleID = this.props.params.articleID; \n    if(typeof window !== 'undefined' && articleID) { \n        let articleDetails = this.props.article.get(articleID); \n        if(articleDetails) { \n          this.setState({  \n            editedArticleID: articleID,  \n            articleDetails: articleDetails \n          }); \n        } else { \n          this.setState({ \n            articleFetchError: true \n          }) \n        } \n    } \n  }\n\n```", "```js\n _fetchArticleData() { \n    let articleID = this.props.params.articleID; \n    if(typeof window !== 'undefined' && articleID) { \n        let articleDetails = this.props.article.get(articleID); \n        if(articleDetails) { \n          this.setState({  \n            editedArticleID: articleID,  \n            articleDetails: articleDetails, \n            articlePicUrl: articleDetails.articlePicUrl, \n            contentJSON: articleDetails.articleContentJSON, \n            htmlContent: articleDetails.articleContent \n          }); \n        } else { \n          this.setState({ \n            articleFetchError: true \n          }) \n        } \n    } \n  }\n\n```", "```js\n// old code to improve: \n  async _articleEditSubmit() { \n    let currentArticleID = this.state.editedArticleID; \n    let editedArticle = { \n      _id: currentArticleID, \n      articleTitle: this.state.title, \n      articleContent: this.state.htmlContent, \n      articleContentJSON: this.state.contentJSON \n    // striped code for our convience\n\n```", "```js\n  async _articleEditSubmit() { \n    let currentArticleID = this.state.editedArticleID; \n    let editedArticle = { \n      _id: currentArticleID, \n      articleTitle: this.state.title, \n      articleContent: this.state.htmlContent, \n      articleContentJSON: this.state.contentJSON, \n      articlePicUrl: this.state.articlePicUrl \n    } \n    // striped code for our convenience\n\n```", "```js\n updateImgUrl(articlePicUrl) { \n    this.setState({  \n      articlePicUrl: articlePicUrl \n    }); \n  }\n\n```", "```js\n// old code to improve: \n    let initialWYSIWYGValue = \n     this.state.articleDetails.articleContentJSON; \n\n    return ( \n      <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n        <h1>Edit an existing article</h1> \n        <WYSIWYGeditor \n          initialValue={initialWYSIWYGValue} \n          name='editarticle' \n          title='Edit an article' \n          onChangeTextJSON={this._onDraftJSChange} /> \n\n        <RaisedButton \n          onClick={this._articleEditSubmit} \n          secondary={true} \n          type='submit' \n          style={{margin: '10px auto', \n           display: 'block', width: 150}} \n          label={'Submit Edition'} /> \n        <hr />\n\n```", "```js\n   let initialWYSIWYGValue = \n    this.state.articleDetails.articleContentJSON; \n\n    return ( \n      <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n        <h1>Edit an existing article</h1> \n        <WYSIWYGeditor \n          initialValue={initialWYSIWYGValue} \n          name='editarticle' \n          title='Edit an article' \n          onChangeTextJSON={this._onDraftJSChange} /> \n\n        <div style={{margin: '10px 10px 10px 10px'}}>  \n          <ImgUploader updateImgUrl={this.updateImgUrl} \n           articlePicUrl={this.state.articlePicUrl} /> \n        </div> \n\n        <RaisedButton \n          onClick={this._articleEditSubmit} \n          secondary={true} \n          type='submit' \n          style={{margin: '10px auto', \n           display: 'block', width: 150}} \n          label={'Submit Edition'} /> \n        <hr/>\n\n```", "```js\n// old codebase: \nvar articleSchema = new Schema({ \n    articleTitle: String, \n    articleContent: String, \n    articleContentJSON: Object, \n    articlePicUrl: { type: String, default: \n     '/static/placeholder.png' } \n  },  \n  {  \n    minimize: false  \n  } \n);\n\n```", "```js\nvar defaultDraftJSobject = { \n    'blocks' : [], \n    'entityMap' : {} \n} \n\nvar articleSchema = new Schema({ \n    articleTitle: { type: String, required: true, default: \n     'default article title' }, \n    articleSubTitle: { type: String, required: true, default: \n     'default subtitle' }, \n    articleContent: { type: String, required: true, default: \n     'default content' }, \n    articleContentJSON: { type: Object, required: true, default: \n     defaultDraftJSobject }, \n    articlePicUrl: { type: String, required: true, default: \n     '/static/placeholder.png' } \n  },  \n  {  \n    minimize: false  \n  } \n);\n\n```", "```js\nimport DefaultInput from '../../components/DefaultInput'; \nimport Formsy from 'formsy-react';\n\n```", "```js\n// old code to improve: \n  async _articleSubmit() { \n    let newArticle = { \n      articleTitle: articleModel.title, \n      articleContent: this.state.htmlContent, \n      articleContentJSON: this.state.contentJSON, \n      articlePicUrl: this.state.articlePicUrl \n    } \n\n    let newArticleID = await falcorModel \n      .call( \n            'articles.add', \n            [newArticle] \n          ). \n          // rest code below is striped\n\n```", "```js\n  async _articleSubmit(articleModel) { \n    let newArticle = { \n      articleTitle: articleModel.title, \n      articleSubTitle: articleModel.subTitle, \n      articleContent: this.state.htmlContent, \n      articleContentJSON: this.state.contentJSON, \n      articlePicUrl: this.state.articlePicUrl \n    } \n\n    let newArticleID = await falcorModel \n      .call( \n            'articles.add', \n            [newArticle] \n          ).\n\n```", "```js\n// old code below: \n    return ( \n      <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n        <h1>Add Article</h1> \n        <WYSIWYGeditor \n          name='addarticle' \n          title='Create an article' \n          onChangeTextJSON={this._onDraftJSChange} /> \n\n        <div style={{margin: '10px 10px 10px 10px'}}>  \n          <ImgUploader updateImgUrl={this.updateImgUrl} \n           articlePicUrl={this.state.articlePicUrl} /> \n        </div> \n\n        <RaisedButton \n          onClick={this._articleSubmit} \n          secondary={true} \n          type='submit' \n          style={{margin: '10px auto', \n           display: 'block', width: 150}} \n          label={'Submit Article'} /> \n      </div> \n    );\n\n```", "```js\n   return ( \n      <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n        <h1>Add Article</h1> \n\n        <Formsy.Form onSubmit={this._articleSubmit}> \n          <DefaultInput  \n            onChange={(event) => {}}  \n            name='title'  \n            title='Article Title (required)' required /> \n\n          <DefaultInput  \n            onChange={(event) => {}}  \n            name='subTitle'  \n            title='Article Subtitle' /> \n\n          <WYSIWYGeditor \n            name='addarticle' \n            title='Create an article' \n            onChangeTextJSON={this._onDraftJSChange} /> \n\n          <div style={{margin: '10px 10px 10px 10px'}}>  \n            <ImgUploader updateImgUrl={this.updateImgUrl} \n             articlePicUrl={this.state.articlePicUrl} /> \n          </div> \n\n          <RaisedButton \n            secondary={true} \n            type='submit' \n            style={{margin: '10px auto', \n             display: 'block', width: 150}} \n            label={'Submit Article'} /> \n        </Formsy.Form> \n      </div> \n    );\n\nFormsy.Form the same way as in the LoginView, so I won't describe it in detail. The most important thing to notice is that with onSubmit, we call the this._articleSubmit function. We have also added two DefaultInput components (title and subtitle): the data from those two inputs will be used in async _articleSubmit(articleModel) (as you already know based on previous implementations in this book).\n```", "```js\nimport DefaultInput from '../../components/DefaultInput'; \nimport Formsy from 'formsy-react';\n\n```", "```js\n// old code: \n  async _articleEditSubmit() { \n    let currentArticleID = this.state.editedArticleID; \n    let editedArticle = { \n      _id: currentArticleID, \n      articleTitle: this.state.title, \n      articleContent: this.state.htmlContent, \n      articleContentJSON: this.state.contentJSON, \n      articlePicUrl: this.state.articlePicUrl \n    } \n    // rest of the function has been striped below\n\n```", "```js\n async _articleEditSubmit(articleModel) { \n    let currentArticleID = this.state.editedArticleID; \n    let editedArticle = { \n      _id: currentArticleID, \n      articleTitle: articleModel.title, \n      articleSubTitle: articleModel.subTitle, \n      articleContent: this.state.htmlContent, \n      articleContentJSON: this.state.contentJSON, \n      articlePicUrl: this.state.articlePicUrl \n    } \n    // rest of the function has been striped below\n\n```", "```js\n// old code: \n    return ( \n      <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n        <h1>Edit an existing article</h1> \n        <WYSIWYGeditor \n          initialValue={initialWYSIWYGValue} \n          name='editarticle' \n          title='Edit an article' \n          onChangeTextJSON={this._onDraftJSChange} /> \n        <div style={{margin: '10px 10px 10px 10px'}}>  \n          <ImgUploader updateImgUrl={this.updateImgUrl} \n           articlePicUrl={this.state.articlePicUrl} /> \n        </div> \n        <RaisedButton \n          onClick={this._articleEditSubmit} \n          secondary={true} \n          type='submit' \n          style={{margin: '10px auto', \n           display: 'block', width: 150}} \n          label={'Submit Edition'} /> \n        <hr /> \n        {/* striped below */}\n\n```", "```js\n   return ( \n      <div style={{height: '100%', width: '75%', margin: 'auto'}}> \n        <h1>Edit an existing article</h1> \n        <Formsy.Form onSubmit={this._articleEditSubmit}> \n          <DefaultInput  \n            onChange={(event) => {}} \n            name='title'  \n            value={this.state.articleDetails.articleTitle} \n            title='Article Title (required)' required /> \n\n          <DefaultInput  \n            onChange={(event) => {}} \n            name='subTitle'  \n            value={this.state.articleDetails.articleSubTitle} \n            title='Article Subtitle' /> \n\n          <WYSIWYGeditor \n            initialValue={initialWYSIWYGValue} \n            name='editarticle' \n            title='Edit an article' \n            onChangeTextJSON={this._onDraftJSChange} /> \n\n          <div style={{margin: '10px 10px 10px 10px'}}>  \n            <ImgUploader updateImgUrl={this.updateImgUrl} \n             articlePicUrl={this.state.articlePicUrl} /> \n          </div> \n\n          <RaisedButton \n            onClick={this._articleEditSubmit} \n            secondary={true} \n            type='submit' \n            style={{margin: '10px auto', \n             display: 'block', width: 150}} \n            label={'Submit Edition'} /> \n        </Formsy.Form> \n        {/* striped below */}\n\n```", "```js\n// old code: \n  render() { \n    let title = this.props.title || 'no title provided'; \n    let content = this.props.content || 'no content provided'; \n    let articlePicUrl = this.props.articlePicUrl || \n     '/static/placeholder.png'; \n\n    let paperStyle = { \n      padding: 10,  \n      width: '100%',  \n      height: 300 \n    }; \n\n    let leftDivStyle = { \n      width: '30%',  \n      float: 'left' \n    } \n\n    let rightDivStyle = { \n      width: '60%',  \n      float: 'left',  \n      padding: '10px 10px 10px 10px' \n    } \n\n    return ( \n      <Paper style={paperStyle}> \n        <CardHeader \n          title={this.props.title} \n          subtitle='Subtitle' \n          avatar='/static/avatar.png' \n        /> \n\n        <div style={leftDivStyle}> \n          <Card > \n            <CardMedia \n              overlay={<CardTitle title={title} \n               subtitle='Overlay subtitle' />}> \n              <img src={articlePicUrl} height='190' /> \n            </CardMedia> \n          </Card> \n        </div> \n        <div style={rightDivStyle}> \n          <div dangerouslySetInnerHTML={{__html: content}} /> \n        </div> \n      </Paper>); \n  }\n\n```", "```js\n render() { \n    let title = this.props.title || 'no title provided'; \n    let subTitle = this.props.subTitle || ''; \n    let content = this.props.content || 'no content provided'; \n    let articlePicUrl = this.props.articlePicUrl || \n     '/static/placeholder.png'; \n\n    let paperStyle = { \n      padding: 10,  \n      width: '100%',  \n      height: 300 \n    }; \n\n    let leftDivStyle = { \n      width: '30%',  \n      float: 'left' \n    } \n\n    let rightDivStyle = { \n      width: '60%',  \n      float: 'left',  \n      padding: '10px 10px 10px 10px' \n    } \n\n    return ( \n      <Paper style={paperStyle}> \n        <CardHeader \n          title={this.props.title} \n          subtitle={subTitle} \n          avatar='/static/avatar.png' \n        /> \n\n        <div style={leftDivStyle}> \n          <Card > \n            <CardMedia \n              overlay={<CardTitle title={title} \n               subtitle={subTitle} />}> \n              <img src={articlePicUrl} height='190' /> \n            </CardMedia> \n          </Card> \n        </div> \n        <div style={rightDivStyle}> \n          <div dangerouslySetInnerHTML={{__html: content}} /> \n        </div> \n      </Paper>); \n  }\n\n```", "```js\n// old code: \n  async _fetch() { \n    let articlesLength = await falcorModel. \n      getValue('articles.length'). \n      then((length) => length); \n\n    let articles = await falcorModel. \n      get(['articles', {from: 0, to: articlesLength-1}, \n       ['_id','articleTitle', 'articleContent', \n       'articleContentJSON', 'articlePicUrl']]).  \n      then((articlesResponse) => {   \n        return articlesResponse.json.articles; \n      }).catch(e => { \n        console.debug(e); \n        return 500; \n      }); \n    // no changes below, striped\n\n```", "```js\n async _fetch() { \n    let articlesLength = await falcorModel. \n      getValue('articles.length'). \n      then((length) => length); \n\n    let articles = await falcorModel. \n      get(['articles', {from: 0, to: articlesLength-1}, ['_id', \n       'articleTitle', 'articleSubTitle','articleContent', \n       'articleContentJSON', 'articlePicUrl']]).  \n      then((articlesResponse) => {   \n        return articlesResponse.json.articles; \n      }).catch(e => { \n        console.debug(e); \n        return 500; \n      });\n\n```", "```js\n// old code: \n    this.props.article.forEach((articleDetails, articleKey) => { \n      let currentArticleJSX = ( \n        <div key={articleKey}> \n          <ArticleCard  \n            title={articleDetails.articleTitle} \n            content={articleDetails.articleContent} \n      articlePicUrl={articleDetails.articlePicUrl} /> \n        </div> \n      );\n\n```", "```js\n   this.props.article.forEach((articleDetails, articleKey) => { \n      let currentArticleJSX = ( \n        <div key={articleKey}> \n          <ArticleCard  \n            title={articleDetails.articleTitle} \n            content={articleDetails.articleContent}  \n            articlePicUrl={articleDetails.articlePicUrl} \n      subTitle={articleDetails.articleSubTitle} /> \n        </div> \n      );\n\n```", "```js\n// old code: \n    this.props.article.forEach((articleDetails, articleKey) => { \n      let articlePicUrl = articleDetails.articlePicUrl || \n       '/static/placeholder.png'; \n      let currentArticleJSX = ( \n        <Link to={&grave;/edit-article/${articleDetails['_id']}&grave;} \n         key={articleKey}> \n          <ListItem \n\n            leftAvatar={<img src={articlePicUrl} width='50' \n             height='50' />} \n            primaryText={articleDetails.articleTitle} \n            secondaryText={articleDetails.articleContent} \n          /> \n        </Link> \n      );\n\n```", "```js\n   this.props.article.forEach((articleDetails, articleKey) => { \n      let articlePicUrl = articleDetails.articlePicUrl || \n       '/static/placeholder.png'; \n      let articleContentPlanText = \n       articleDetails.articleContent.replace(/</?[^>]+(>|$)/g, \n       ''); \n      let currentArticleJSX = ( \n        <Link to={&grave;/edit-article/${articleDetails['_id']}&grave;} \n         key={articleKey}> \n          <ListItem \n\n            leftAvatar={<img src={articlePicUrl} width='50' \n             height='50' />} \n            primaryText={articleDetails.articleTitle} \n            secondaryText={articleContentPlanText} \n          /> \n        </Link> \n      );\n\n```"]