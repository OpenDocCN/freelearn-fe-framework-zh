- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building an Issue Tracking System Using Reactive Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications use HTML forms to collect data from users and validate them,
    such as when logging in to an application, performing a search, or completing
    an online payment. The Angular framework provides two types of forms, reactive
    and template-driven, that we can use in an Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will build a system for managing and tracking issues. We
    will use Angular reactive forms for reporting new issues. We will also use **Clarity
    Design System** from VMware for designing our forms and displaying our issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Clarity Design System in an Angular application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying an overview of issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting new issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marking an issue as resolved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turning on suggestions for new issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Essential background theory and context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Angular framework provides two types of forms that we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Template-driven**: They are easy to set up in an Angular application. Template-driven
    forms do not scale well and are difficult to test because they are defined in
    the component template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reactive**: They are based on the reactive programming approach. Reactive
    forms operate in the TypeScript class of the component, and they are easier to
    test and scale better than template-driven forms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will get hands-on with the reactive forms approach, which
    is the most popular in the Angular community.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular components can get data from external sources such as HTTP or other
    Angular components. In the latter case, they interact with components that have
    data using a public API:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Input()`: This is used to pass data into a component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Output()`: This is used to get notified about changes or get data back from
    a component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clarity** is a design system that contains a set of UX and UI guidelines
    for building web applications. It also comprises a proprietary HTML and CSS framework
    packed with these guidelines. Luckily, we do not have to use this framework since
    Clarity already provides various Angular-based UI components that we can use in
    our Angular applications.'
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this project, we will build an Angular application for managing and tracking
    issues using reactive forms and Clarity. Initially, we will display a list of
    issues in a table that we can sort and filter. We will then create a form for
    allowing users to report new issues. Finally, we will create a modal dialog for
    resolving an issue. We will also go the extra mile and turn on suggestions when
    reporting an issue to help users avoid duplicate entries. The following diagram
    depicts an architectural overview of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18465_03_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Project architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'Build time: 1 hour'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following software tools are required to complete this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Angular CLI**: A command-line interface for Angular that you can find at
    [https://angular.io/cli](https://angular.io/cli)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitHub material**: The related code for this chapter, which you can find
    in the `Chapter03` folder at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Clarity in an Angular application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s start creating our issue-tracking system by scaffolding a new Angular
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the `ng new` command of the Angular CLI to create a new Angular application
    with the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: '`issue-tracker`: The name of the Angular application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--defaults`: This disables Angular routing for the application and sets the
    stylesheet format to CSS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We now need to install the Clarity library in our Angular application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the `issue-tracker` folder that was created and run the following
    command to install it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `angular.json` file and add the Clarity CSS styles in the `styles`
    array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, import `ClarityModule` and `BrowserAnimationsModule` in the main application
    module, `app.module.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we have completed installing Clarity in our application, we can start
    building beautiful designs with it. In the following section, we will begin by
    creating a list for displaying our issues.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying an overview of issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our Angular application will be responsible for managing and tracking issues.
    When the application starts, we should display a list of all pending issues in
    the system. Pending issues are defined as those issues that have not been resolved.
    The process that we will follow can be further analyzed as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Fetching pending issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing issues using a data grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching pending issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to create a mechanism for fetching all pending issues:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `generate` command of the Angular CLI to create an Angular service
    named `issues`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will create an `issues.service.ts` file in the `src\app`
    folder of our Angular CLI project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Every issue will have specific properties of a defined type. We need to create
    a TypeScript interface for that with the following Angular CLI command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous command will create an `issue.ts` file in the `src\app` folder
    of the project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `issue.ts` file and add the following properties in the `Issue` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `completed` property is the date that an issue is resolved. We define it
    as optional because new issues will not have this property set.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the Angular service we created in step 1 and add an `issues` property
    to hold our data. Also, create a `getPendingIssues` method that will return all
    issues that have not been completed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the preceding code, we initialize the `issues` property to an empty array.
    If you want to get started with sample data, you can use the `mock-issues.ts`
    file from the `src\assets` folder that exists in the GitHub material of this chapter
    and import it as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the following section, we will create a component for displaying those issues.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing issues in a data grid
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the data grid UI component of the Clarity library to display data
    in a tabular format. A data grid also provides mechanisms for filtering and sorting
    out of the box. Let’s create the Angular component that will host the data grid
    first:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `generate` command of the Angular CLI to create the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the template of the main component of our application, `app.component.html`,
    and replace its content with the following HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The list of issues will be displayed in the main component of the Angular application
    as soon as it starts up.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Currently, the `<app-issue-list>` component displays no issue data. We must
    connect it with the Angular service we created in the *Fetching pending issues*
    section. Open the `issue-list.component.ts` file and inject `IssuesService` in
    the `constructor` of the `IssueListComponent` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method named `getIssues` that will call the `getPendingIssues` method
    of the injected service and keep its returned value in the `issues` component
    property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, call the `getIssues` method in the `ngOnInit` component method to
    get all pending issues upon component initialization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have already implemented the process for getting issue data in our component.
    All we have to do now is display it in the template. Open the `issue-list.component.html`
    file and replace its content with the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding snippet, we use several Angular components of the Clarity
    library:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<clr-datagrid>`: Defines a table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<clr-dg-column>`: Defines a column of a table. Each column uses the `clrDgField`
    directive to bind to the property name of the issue represented by that column.
    The `clrDgField` directive provides sorting and filtering capabilities without
    writing a single line of code in the TypeScript class file. Sorting works automatically
    only with string-based content. If we want to sort by a different primitive type,
    we must use the `clrDgColType` directive and specify the particular type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<clr-dg-row>`: Defines a row of a table. It uses the `*clrDgItems` directive
    to iterate over the issues and create one row for each issue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<clr-dg-cell>`: Each row contains a collection of `<clr-dg-cell>` components
    to display the value of each column using interpolation. In the last cell, we
    add the `label-danger` class when an issue has a high priority to indicate its
    importance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<clr-dg-footer>`: Defines the footer of a table. In this case, it displays
    the total number of issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we run our Angular application using `ng serve`, the output will look like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Overview of pending issues](img/B18465_03_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – Overview of pending issues
  prefs: []
  type: TYPE_NORMAL
- en: In the previous screenshot, the application uses sample data from the `mock-issues.ts`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: The data grid component of the Clarity library has a rich set of capabilities
    that we can use in our Angular applications. In the following section, we will
    learn how to use reactive forms to report a new issue.
  prefs: []
  type: TYPE_NORMAL
- en: Reporting new issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the main features of our issue-tracking system is the ability to report
    new issues. We will use Angular reactive forms to create a form for adding new
    issues. The feature can be further subdivided into the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up reactive forms in an Angular application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the report issue form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a new issue in the list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating the details of an issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s begin by introducing reactive forms in our Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up reactive forms in an Angular application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Reactive forms are defined in the `@angular/forms` npm package of the Angular
    framework. To add them to our Angular application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.module.ts` file and import `ReactiveFormsModule`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `ReactiveFormsModule` into the `imports` array of the `@NgModule` decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`ReactiveFormsModule` contains all necessary Angular directives and services
    that we will need to work with forms, as we will see in the following section.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the report issue form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have introduced reactive forms in our Angular application, we can
    start building our form:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Angular component named `issue-report`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `issue-report.component.ts` file and add the following `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this statement, `FormControl` represents a single control of a form and `FormGroup`
    is used to group individual controls into a logical form representation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the following interface, which will represent the structure of our form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare an `issueForm` property of the `FormGroup<IssueForm>` type in the TypeScript
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We initialize all controls to empty strings because the form will be used to
    create a new issue from scratch. We also explicitly state that all controls will
    not accept null values by default using the `nonNullable` property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We must now associate the `FormGroup` object we created with the respective
    HTML elements. Open the `issue-report.component.html` file and replace its content
    with the following HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `formGroup` and `clrForm` directives associate the HTML `<form>` element
    with the `issueForm` property and identify it as a Clarity form.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `formControlName` directive is used to associate HTML elements with form
    controls using their name. Each control is also defined using a Clarity container
    element.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For example, the `title` input control is a `<clr-input-container>` component
    that contains an `<input>` HTML element.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Each native HTML element has a Clarity directive attached to it according to
    its type. For example, the `<input>` HTML element contains a `clrInput` directive.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, add some styles to our `issue-report.component.css` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have created the basics of our form, we will learn how to submit
    its details:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add an HTML `<button>` element *before* the closing tag of the HTML `<form>`
    element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We set its type to `submit` to trigger form submission upon clicking the button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `issues.service.ts` file and add a `createIssue` method that inserts
    a new issue into the `issues` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We automatically assign a new `issueNo` property to the issue before adding
    it to the `issues` array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `issueNo` property is currently calculated according to the length of the
    `issues` array. A better approach would be implementing a generator mechanism
    for creating unique and random `issueNo` values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Return to the `issue-report.component.ts` file and add the following `import`
    statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inject the `IssuesService` class into the `constructor` of the TypeScript class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new component method that will call the `createIssue` method of the injected
    service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We pass the value of each form control using the `getRawValue` property of the
    `issueForm` object that will provide us access to the underlying form model. We
    are also typecasting it to the `Issue` interface since we already know that its
    values will represent the properties of an issue object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `issue-report.component.html` file and bind the `ngSubmit` event of
    the form to the `addIssue` component method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `ngSubmit` event will be triggered when we click on the `Create` button
    of the form.
  prefs: []
  type: TYPE_NORMAL
- en: We have completed all the processes to add a new issue to the system. In the
    following section, we will learn how to display a newly created issue in the pending
    issue table.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a new issue in the list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Displaying and creating new issues are two tasks delegated to different Angular
    components. When we create a new issue with `IssueReportComponent`, we need to
    notify `IssueListComponent` to reflect that change in the table. First, let’s
    see how we can configure `IssueReportComponent` to communicate that change:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `issue-report.component.ts` file and use the `@Output()` decorator
    to add an `EventEmitter` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Output` and `EventEmitter` symbols can be imported from the `@angular/core`
    npm package.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Call the `emit` method of the `formClose` output property inside the `addIssue`
    component method right after creating the issue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a second HTML `<button>` element in the component template and call the
    `formClose.emit` method on its `click` event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`IssueListComponent` can now bind to the `formClose` event of `IssueReportComponent`
    and be notified when any buttons are clicked. Let’s find out how:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `issue-list.component.ts` file and add the following property in the
    `IssueListComponent` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `showReportIssue` property will toggle the appearance of the report issue
    form.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following component method, which will be called when the report issue
    form emits the `formClose` event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding method will set the `showReportIssue` property to `false` so that
    the report issue form is no longer visible and the table of pending issues is
    displayed instead. It will also fetch issues again to refresh the data in the
    table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `issue-list.component.html` file and add an HTML `<button>` element
    at the top of the template. The button will display the report issue form when
    clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Group the button and the data grid inside an `<ng-container>` element. As indicated
    by the `*ngIf` Angular directive, the contents of the `<ng-container>` element
    will be displayed when the report issue form is not visible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `<ng-container>` element is an Angular component not rendered on the screen
    and used to group HTML elements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `<app-issue-report>` component at the end of the template and use the
    `*ngIf` directive to display it when the `showReportIssue` property is true. Also
    bind its `formClose` event to the `onCloseReport` component method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have successfully connected all the dots and completed the interaction between
    the report issue form and the table that displays issues. Now it is time to put
    them into action:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the Angular application using `ng` `serve`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **ADD NEW ISSUE** button and enter the details of a new issue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Report issue form](img/B18465_03_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – Report issue form
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **CREATE** button, and the new issue should appear in the table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Pending issues](img/B18465_03_04.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – Pending issues
  prefs: []
  type: TYPE_NORMAL
- en: Repeat steps 2 and 3 without filling in any details, and you will notice an
    empty issue added to the table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An empty issue can be created because we have not defined any required fields
    on our report issue form. In the following section, we will learn how to accomplish
    this task and add validations to our form to avoid unexpected behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: Validating the details of an issue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we create an issue with the report issue form, we can leave the form control
    value empty since we have not added any validation rules yet. To add validations
    in a form control, we use the `Validators` class from the `@angular/forms` npm
    package. A validator is added in each form control instance when we build the
    form. In this case, we will use the **required** validator to indicate that a
    form control is required to have a value:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `issue-report.component.ts` file and import `Validators` from the
    `@angular/forms` npm package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the `Validators.required` static property in all controls except the `description`
    of the issue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can use various validators for a form control, such as **min**, **max**,
    and **email**. If we want to set multiple validators in a form control, we add
    them inside an array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When we use validators in a form, we need to provide a visual indication to
    the user of the form. Open the `issue-report.component.html` file and add a `<clr-control-error>`
    component for each required form control:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `<clr-control-error>` Clarity component provides validation messages in
    forms. It is displayed when we touch an invalid control. A control is invalid
    when at least one of its validation rules is violated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The user may only sometimes touch form controls to see the validation message.
    So, we need to consider that upon form submission and act accordingly. To overcome
    this case, we will mark all form controls as touched when the form is submitted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `ng serve` to start the application. Click inside the **Title** input, and
    then move the focus out of the form control:![Figure 3.4 – Title validation message](img/B18465_03_05.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 3.5 – Title validation message
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A message should appear underneath the **Title** input stating that we have
    not entered any value yet. Validation messages in the Clarity library are indicated
    by text and an exclamation icon in red in the form control that is validated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, click on the **CREATE** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Form validation messages](img/B18465_03_06.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – Form validation messages
  prefs: []
  type: TYPE_NORMAL
- en: All validation messages will appear on the screen at once, and the form will
    not be submitted. Validations in reactive forms ensure a smooth UX for our Angular
    applications. In the following section, we will learn how to create a modal dialog
    with Clarity and use it to resolve issues from our list.
  prefs: []
  type: TYPE_NORMAL
- en: Resolving an issue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main idea behind having an issue tracking system is that an issue should
    be resolved at some point. We will create a user workflow in our application to
    accomplish such a task. We will be able to resolve an issue directly from the
    list of pending issues. The application will ask for confirmation from the user
    before resolving with the use of a modal dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an Angular component to host the dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `confirm-dialog.component.ts` file and modify it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use the `@Input()` decorator to get the issue number and display it on the
    component template. The `confirm` event will emit a `boolean` value to indicate
    whether the user confirmed resolving the issue or not.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create two methods that will call the `emit` method of the `confirm` output
    property, either with `true` or `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Both methods will set the `issueNo` property to `null` because that property
    will also control whether the modal dialog is opened. So, we want to close the
    dialog in both cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have set up the TypeScript class of our dialog component. Let’s wire it
    up now with its template. Open the `confirm-dialog.component.html` file and replace
    its content with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'A Clarity modal dialog consists of a `<clr-modal>` component and a collection
    of HTML elements with specific classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`modal-title`: The dialog title that displays the current issue number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`modal-body`: The main content of the dialog.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`modal-footer`: The footer of the dialog that is commonly used to add actions
    for that dialog. We currently add two HTML `<button>` elements and bind their
    `click` event to the `agree` and `disagree` component methods, respectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether it is opened or closed, the current status of the dialog is indicated
    by the `clrModalOpen` directive bound to the `issueNo` input property. When that
    property is null, the dialog is closed. The `clrModalClosable` directive indicates
    that the dialog cannot be closed by any means other than programmatically through
    the `issueNo` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to our specs, we want the user to resolve an issue directly from
    the list. Let’s find out how we can integrate the dialog that we created with
    the list of pending issues:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `issues.service.ts` file and add a new method to set the `completed`
    property of an issue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous method first creates a clone of the issue we want to resolve and
    sets its `completed` property to the current date. It then finds the initial issue
    in the `issues` array and replaces it with the cloned instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `issue-list.component.ts` file and add a `selectedIssue` property
    and an `onConfirm` method in the TypeScript class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `onConfirm` method calls the `completeIssue` method of the `issueService`
    property only when the `confirmed` parameter is true. In this case, it also calls
    the `getIssues` method to refresh the table data. The `selectedIssue` property
    holds the `Issue` object that we want to resolve, and it is reset whenever the
    `onConfirm` method is called.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `issue-list.component.html` file and add an action overflow component
    inside the `<clr-dg-row>` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `<clr-dg-action-overflow>` Clarity component adds a drop-down menu in each
    table row. The menu contains a single button to set the `selectedIssue` property
    to the current issue when clicked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, add the `<app-confirm-dialog>` component at the end of the template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We pass the `issueNo` property of `selectedIssue` to the input binding of the
    dialog component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We also bind the `onConfirm` component method to the `confirm` event so that
    we can be notified when the user either agrees or not. The `$event` parameter
    is a reserved keyword in Angular and contains the event binding result, which
    depends on the HTML element type. In this case, it includes the `boolean` result
    of the confirmation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We have put all the pieces into place to resolve an issue. Let’s give it a
    try:'
  prefs: []
  type: TYPE_NORMAL
- en: Run `ng serve` and open the application at `http://localhost:4200`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you don’t have any issues, use the **ADD NEW ISSUE** button to create one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the action menu of one row and select **Resolve**. The menu is the
    three vertical dots icon next to the **Issue No** column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Action menu](img/B18465_03_07.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – Action menu
  prefs: []
  type: TYPE_NORMAL
- en: 'In the dialog that appears, click on the **YES, CONTINUE** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Resolve Issue dialog](img/B18465_03_08.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – Resolve Issue dialog
  prefs: []
  type: TYPE_NORMAL
- en: After clicking the button, the dialog will close, and the issue should no longer
    be visible on the list.
  prefs: []
  type: TYPE_NORMAL
- en: We have provided a way for users of our application to resolve issues. Our issue-tracking
    system is now complete and ready to put into action! Sometimes, users are in a
    hurry and may report an issue already reported. In the following section, we will
    learn how to leverage advanced reactive form techniques to help them in this case.
  prefs: []
  type: TYPE_NORMAL
- en: Turning on suggestions for new issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The reactive forms API contains a mechanism for getting notified when the value
    of a particular form control changes. We will use it in our application to find
    related issues when reporting a new one. More specifically, we will display a
    list of suggested issues when the user starts typing in the title form control:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `issues.service.ts` file and add the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding method takes the title of an issue as a parameter and searches
    for any issues that contain the same title. The search mechanism is triggered
    when the `title` parameter is more than three characters long to limit results
    to a reasonable amount.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `issue-report.component.ts` file and import the `OnInit` artifact
    from the `@angular/core` npm package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new component property to hold the suggested issues:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `OnInit` interface to the list of implemented interfaces of the `IssueReportComponent`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `controls` property of a `FormGroup` object contains all form controls
    as a key-value pair. The key is the name of the control, and the value is the
    actual form control object. We can get notified about changes in the value of
    a form control by accessing its name, in this case, `title`, in the following
    way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Each control exposes a `valueChanges` observable that we can subscribe to and
    get a continuous stream of values. The `valueChanges` observable emits new values
    as soon as the user starts typing in the `title` control of the form. When that
    happens, we set the result of the `getSuggestions` method in the `suggestions`
    component property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To display the suggested issues on the template of the component, open the
    `issue-report.component.html` file and add the following HTML code right after
    the `<clr-input-container>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use the `<clr-stack-view>` component from the Clarity library to display
    suggested issues in a key-value pair representation. The key is indicated by the
    `<clr-stack-header>` component and displays the title and the number of the issue.
    The `<clr-stack-content>` component indicates the value and displays the issue
    description.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We display similar issues only when there are any available suggested ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run `ng serve` and open the report issue form to create a new issue. When you
    start typing in the **Title** input, the application will suggest any issues related
    to the one that you are trying to create:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Similar issues](img/B18465_03_09.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – Similar issues
  prefs: []
  type: TYPE_NORMAL
- en: The user will now see if there are any similar issues and avoid reporting a
    duplicate issue.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built an Angular application for managing and tracking issues
    using reactive forms and Clarity Design System.
  prefs: []
  type: TYPE_NORMAL
- en: First, we installed Clarity in an Angular application and used a data grid component
    to display a list of pending issues. Then, we introduced reactive forms and used
    them to build a form for reporting a new issue. We added validations in the form
    to give our users a visual indication of the required fields and guard against
    unwanted behavior.
  prefs: []
  type: TYPE_NORMAL
- en: An issue-tracking system is only efficient if our users can resolve them. We
    built a modal dialog using Clarity to resolve a selected issue. Finally, we improved
    the UX of our application by suggesting related issues when reporting a new one.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build a progressive web application for the weather
    using the Angular service worker.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create an Angular component to edit the details of an existing issue. The component
    should display the issue number and allow the user to change the title, description,
    and priority. The title and the description should be required fields.
  prefs: []
  type: TYPE_NORMAL
- en: The user should be able to access the previous component using the action menu
    in the list of pending issues. Add a new action menu button to open the edit issue
    form.
  prefs: []
  type: TYPE_NORMAL
- en: After the user has completed updating an issue, the form should be closed, and
    the list of pending issues should be refreshed.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the solution to the exercise in the `Chapter03` folder of the `exercise`
    branch at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition/tree/exercise](https://github.com/PacktPublishing/Angular-Projects-Third-Edition/tree/exercise).
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Angular forms: [https://angular.io/guide/forms-overview](https://angular.io/guide/forms-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Reactive forms: [https://angular.io/guide/reactive-forms](https://angular.io/guide/reactive-forms)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Validating reactive forms: [https://angular.io/guide/form-validation#validating-input-in-reactive-forms](https://angular.io/guide/form-validation#validating-input-in-reactive-forms)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Passing data to a component: [https://angular.io/guide/component-interaction#pass-data-from-parent-to-child-with-input-binding](https://angular.io/guide/component-interaction#pass-data-from-parent-to-child-with-input-binding)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Getting data from a component: [https://angular.io/guide/component-interaction#parent-listens-for-child-event](https://angular.io/guide/component-interaction#parent-listens-for-child-event)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Getting started with Clarity: [https://clarity.design/documentation/get-started](https://clarity.design/documentation/get-started)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/AngularProjects3e](https://packt.link/AngularProjects3e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code89405936498927781.png)'
  prefs: []
  type: TYPE_IMG
