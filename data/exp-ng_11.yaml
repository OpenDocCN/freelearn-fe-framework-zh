- en: Implementing Angular Pipes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现Angular管道
- en: In this chapter, you will learn about Angular pipes. Think of Angular pipes
    as a modernized version of filters, comprising functions that help us to format
    the values within the template. Pipes in Angular are basically an extension of
    what filters were in Angular v1\. There are many useful built-in pipes we can
    use easily in our templates. You will learn about built-in pipes and we will also
    create our own custom user-defined pipes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习关于Angular管道。将Angular管道视为过滤器的现代化版本，包括帮助我们在模板中格式化值的函数。Angular中的管道基本上是Angular
    v1中过滤器的扩展。我们可以在模板中轻松使用许多有用的内置管道。您将学习内置管道，我们还将创建自定义用户定义的管道。
- en: 'At the end of this chapter, you will learn and implement the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将学习并实现以下内容：
- en: Introduction to Angular pipes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Angular管道
- en: Defining and implementing a pipe
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义和实现管道
- en: Understand the various built-in pipes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解各种内置管道
- en: DatePipe
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DatePipe
- en: DecimalPipe
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DecimalPipe
- en: CurrencyPipe
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CurrencyPipe
- en: LowerCasePipe and UpperCasePipe
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LowerCasePipe和UpperCasePipe
- en: JSON Pipe
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON管道
- en: SlicePipe
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SlicePipe
- en: async Pipe
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: async管道
- en: Learn to implement custom user-defined pipes
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习实现自定义用户定义的管道
- en: Parameterizing the pipes
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为管道参数化
- en: Chaining the pipes
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接管道
- en: Learn about pure and impure pipes
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解纯管道和不纯管道
- en: Angular Pipes - An overview
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular管道-概述
- en: Pipes allow us to format the values within the view of the templates before
    it's displayed. For example, in most modern applications, we want to display terms,
    such as today, tomorrow, and so on, and not system date formats, such as April
    13 2017 08:00\. Let's take a look at more real-world scenarios.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 管道允许我们在模板视图中显示值之前格式化值。例如，在大多数现代应用程序中，我们希望显示诸如今天、明天等术语，而不是系统日期格式，例如2017年4月13日08:00。让我们看看更多现实世界的场景。
- en: Do you want the hint text in the application to always be lowercase? No problem;
    define and use `LowercasePipe`. In a weather app, if you want to show the month
    name as MAR or APR instead of its full name, use `DatePipe`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望应用程序中的提示文本始终为小写吗？没问题；定义并使用`LowercasePipe`。在天气应用程序中，如果您希望显示月份名称为MAR或APR而不是其全名，请使用`DatePipe`。
- en: Cool, right? You get the point. Pipes help you to add your business rules, so
    you can transform the data before it's actually displayed in the templates.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷，对吧？你明白了。管道帮助您添加业务规则，因此您可以在模板中实际显示数据之前转换数据。
- en: A good way to relate to Angular pipes is through Angular 1.x filters, but pipes
    do a lot more than just filtering.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与Angular 1.x过滤器建立联系的一个好方法是通过Angular管道，但管道不仅仅是过滤。
- en: We have used the Angular router to define the route path, so we have all the
    functionalities of pipes in one page; you can create it in the same or different
    apps. Feel free to use your creativity.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用了Angular路由器来定义路由路径，因此我们在一个页面中拥有所有管道的功能；您可以在相同或不同的应用程序中创建它。随意发挥您的创造力。
- en: In Angular 1.x, we had filters--pipes are a replacement of filters.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular 1.x中，我们有过滤器--管道是过滤器的替代品。
- en: In the next section, you will learn how to define and use an Angular pipe.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习如何定义和使用Angular管道。
- en: Defining a pipe
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义管道
- en: 'The pipe operator is defined with a pipe symbol, (`|`), followed by the name
    of the pipe:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 管道运算符用管道符号（`|`）定义，后跟管道的名称：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is an example of a simple `lowercase` pipe:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单的`lowercase`管道的示例：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, we are transforming the text to lowercase using the `lowercase`
    pipe.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们使用`lowercase`管道将文本转换为小写。
- en: 'Now, let''s write an example `Component` using the `lowercase` pipe example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们编写一个使用`lowercase`管道示例的示例`Component`：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s analyze the preceding code in detail:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析上述代码：
- en: We defined a `DemoPipeComponent` component class
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义了一个`DemoPipeComponent`组件类
- en: We created a string variable, `authorName`, and assigned the value, `'Sridhar
    Rao'`
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了一个字符串变量`authorName`，并赋予了值`'Sridhar Rao'`
- en: In the template view, we displayed `authorName`; however, before we printed
    it in the UI, we transformed it using the `lowercase` pipe
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模板视图中，我们显示了`authorName`；然而，在将其打印到UI之前，我们使用了`lowercase`管道进行转换
- en: 'Run the preceding code, and you should see the following output:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码，您应该看到以下输出：
- en: '![](assets/0827f6c1-8664-4c85-bdb5-3571e7885975.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0827f6c1-8664-4c85-bdb5-3571e7885975.png)'
- en: Well done! In the preceding example, we have used a built-in pipe. In the subsequent
    sections, you will learn more about the built-in pipes and also create a few custom
    pipes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！在前面的例子中，我们使用了内置管道。在接下来的部分，您将学习更多关于内置管道，并创建一些自定义管道。
- en: Note that the pipe operator only works in your templates and not inside controllers.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，管道运算符仅在模板中起作用，而不在控制器内部。
- en: Built-in Pipes
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置管道
- en: Angular pipes are a modernized version of Angular 1.x filters. Angular comes
    with a lot of predefined built-in pipes. We can use them directly in our views
    and transform the data on the fly.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Angular管道是Angular 1.x过滤器的现代化版本。Angular带有许多预定义的内置管道。我们可以直接在视图中使用它们，并在运行时转换数据。
- en: 'The following is the list of all the pipes that Angular has built-in support
    for:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Angular内置支持的所有管道的列表：
- en: DatePipe
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DatePipe
- en: DecimalPipe
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DecimalPipe
- en: CurrencyPipe
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CurrencyPipe
- en: LowercasePipe and UppercasePipe
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LowercasePipe和UppercasePipe
- en: JSON Pipe
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON管道
- en: SlicePipe
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SlicePipe
- en: async Pipe
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步管道
- en: In the following sections, let's implement and learn more about the various
    pipes and see them in action.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，让我们实现并学习更多关于各种管道，并看到它们的实际应用。
- en: DatePipe
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DatePipe
- en: DatePipe, as the name itself suggest, allows us to format or transform the values
    that are related to a date. DatePipe can also be used to transform values in different
    formats based on parameters passed at runtime.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: DatePipe，顾名思义，允许我们格式化或转换与日期相关的值。DatePipe也可以根据运行时传递的参数以不同格式转换值。
- en: 'The general syntax is shown in the following code snippet:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一般语法如下代码片段所示：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s analyze the preceding code snippet in detail:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前面的代码片段：
- en: As explained in the preceding section, the general syntax is a variable followed
    by a (`|`) pipe operator, which is then followed by the name of the pipe operator
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如前一节所述，一般语法是变量后跟着一个（`|`）管道运算符，然后是管道运算符的名称
- en: We used DatePipe to transform the `today` variable
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用DatePipe来转换`today`变量
- en: Also, in the preceding example, you will note that we passed a few parameters
    to the pipe operator; we will cover passing parameters to the pipe in the following
    section
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，在前面的例子中，您会注意到我们向管道运算符传递了一些参数；我们将在下一节中介绍向管道传递参数
- en: 'Now, let''s create a complete example of the `DatePipe` component; the following
    is the code snippet for implementing the `DatePipe` component:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个完整的`DatePipe`组件示例；以下是实现`DatePipe`组件的代码片段：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s analyze the preceding code snippet in detail:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前面的代码片段：
- en: We created a `PipeComponent` component class.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个`PipeComponent`组件类。
- en: We defined a `today` variable.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了一个`today`变量。
- en: In the view, we transformed the value of the variable into various expressions
    based on different parameters.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在视图中，我们根据不同的参数将变量的值转换为各种表达式。
- en: 'Now, run the application, and we should see the following output:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，我们应该看到以下输出：
- en: '![](assets/82ba1432-01a5-4451-8fb6-b0e633d74748.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/82ba1432-01a5-4451-8fb6-b0e633d74748.png)'
- en: You learned about `DatePipe` in this section. In the following sections, you
    will continue to learn and implement other built-in pipes and also create some
    custom user-defined pipes.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您在本节中学习了`DatePipe`。在接下来的部分，您将继续学习和实现其他内置管道，并创建一些自定义用户定义的管道。
- en: DecimalPipe
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DecimalPipe
- en: In this section, you will learn about yet another built-in pipe--DecimalPipe.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将了解另一个内置管道--DecimalPipe。
- en: DecimalPipe allows us to format a number according to locale rules. DecimalPipe
    can also be used to transform a number in different formats.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: DecimalPipe允许我们根据区域规则格式化数字。 DecimalPipe也可以用于以不同格式转换数字。
- en: 'The general syntax is as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一般的语法如下：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding code snippet, we use the number pipe, and optionally, we can
    pass the parameters.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码片段中，我们使用了数字管道，可以选择性地传递参数。
- en: 'Let''s take a look at how to create a `DatePipe` that implements decimal points;
    the following is an example code of the same:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建一个实现小数点的`DatePipe`，以下是相同的示例代码：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s analyze the preceding code snippet in detail:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析上述代码片段：
- en: We defined a component class, that is, `PipeComponent`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了一个组件类，即`PipeComponent`。
- en: We defined a `state_tax` variable.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了一个`state_tax`变量。
- en: We then transformed `state_tax` in the view.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们在视图中转换了`state_tax`。
- en: The first pipe operator tells the expression to print the decimals up to five
    decimal places.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个管道操作符告诉表达式将小数打印到小数点后五位。
- en: The second pipe operator tells the expression to print the value up to three
    decimal places.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个管道操作符告诉表达式将值打印到小数点后三位。
- en: 'The output of the preceding pipe component example is as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 上述管道组件示例的输出如下：
- en: '![](assets/d6c7f634-b494-427e-aca6-4a2ca689005d.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d6c7f634-b494-427e-aca6-4a2ca689005d.png)'
- en: Undoubtedly, the number pipe is one of the most useful and commonly used pipes
    across various applications. We can transform the number values especially dealing
    with decimals and floating points.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，数字管道是各种应用程序中最有用和常用的管道之一。我们可以转换数字值，特别是处理小数和浮点数。
- en: CurrencyPipe
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CurrencyPipe
- en: For applications that want to cater to multinational geographies, we need to
    show country-specific codes and their respective currency values--that's where
    `CurrencyPipe` comes to our rescue.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于希望迎合多国地理位置的应用程序，我们需要显示特定国家的代码及其相应的货币值--这就是`CurrencyPipe`派上用场的地方。
- en: The `CurrencyPipe` operator is used to append the `country` codes or `currency`
    symbol in front of the number values.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`CurrencyPipe`操作符用于在数字值前附加`国家`代码或`货币`符号。'
- en: 'Take a look at the code snippet implementing the `CurrencyPipe` operator:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下实现`CurrencyPipe`操作符的代码片段：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s analyze the preceding code snippet in detail:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析上述代码片段：
- en: The first line of code shows the general syntax of writing `CurrencyPipe`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一行代码显示了编写`CurrencyPipe`的一般语法。
- en: The second line shows the currency syntax, and we used it to transform the `expenses`
    value and append the Indian currency symbol to it.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二行显示了货币的语法，我们用它来转换`expenses`的值，并在其后附加了印度货币符号。
- en: 'So now that we know how to use a `CurrencyPipe` operator, let''s put together
    an example to display multiple `currency` and `country` formats; the following
    is the complete component class, which implements a `CurrencyPipe` operator:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何使用`CurrencyPipe`操作符，让我们组合一个示例来显示多种`货币`和`国家`格式；以下是实现`CurrencyPipe`操作符的完整组件类：
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s analyze the preceding code in detail:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析上述代码：
- en: We created a component class, `CurrencyPipeComponent`, and declared few variables,
    namely `salary` and `expenses`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个组件类`CurrencyPipeComponent`，并声明了几个变量，即`salary`和`expenses`。
- en: In the component template, we transformed the display of the variables by adding
    the `country` and `currency` details.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件模板中，我们通过添加`国家`和`货币`详情来转换变量的显示。
- en: 'In the first pipe operator, we used `''currency : USD''`, which will append
    the ($) dollar symbol before the variable.'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在第一个管道操作符中，我们使用了`''currency: USD''`，这将在变量之前附加（$）美元符号。'
- en: 'In the second pipe operator, we used `''currency : ''INR'':false''`, which
    will add the currency code, and `false` will tell it not to print the symbol.'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在第二个管道操作符中，我们使用了`''currency : ''INR'':false''`，这将添加货币代码，`false`将告诉它不要打印符号。'
- en: 'Now, launch the app, and we should see the following output:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，启动应用程序，我们应该看到以下输出：
- en: '![](assets/34796edd-7a0f-4529-85c5-30bf4d0da612.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/34796edd-7a0f-4529-85c5-30bf4d0da612.png)'
- en: In this section, we discussed and implemented `CurrencyPipe`. In the following
    sections, we will keep exploring and learning about other Built-in pipes and much
    more.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论并实现了`CurrencyPipe`。在接下来的几节中，我们将继续探索和学习其他内置管道以及更多内容。
- en: LowerCasePipe and UpperCasePipe
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LowerCasePipe和UpperCasePipe
- en: The LowerCasePipe and UpperCasePipe, as the names suggest, help in transforming
    the text into lowercase and uppercase, respectively.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: LowerCasePipe和UpperCasePipe，顾名思义，分别用于将文本转换为小写和大写。
- en: 'Take a look at the following code snippet:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下代码片段：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s analyze the preceding code in detail:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前面的代码：
- en: The first line of code transformed the value of `authorName` to lowercase using
    the `lowercase` pipe.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一行代码使用`lowercase`管道将`authorName`的值转换为小写。
- en: The second line of code transformed the value of `authorName` to uppercase using
    the `uppercase` pipe.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二行代码使用`uppercase`管道将`authorName`的值转换为大写。
- en: Now that we have seen how to define lowercase and uppercase pipes, it's time
    to create a complete component example, which implements the pipes to show the
    author name in both lowercase and uppercase.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到如何定义小写和大写管道，是时候创建一个完整的组件示例了，该示例实现了管道以显示作者姓名的小写和大写形式。
- en: 'Take a look at the following code snippet:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下代码片段：
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s analyze the preceding code in detail:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前面的代码：
- en: We created a component class, `TextCasePipeComponent`, and defined an `authorName`
    variable.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个组件类，`TextCasePipeComponent`，并定义了一个`authorName`变量。
- en: In the component view, we used the `lowercase` and `uppercase` pipes.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件视图中，我们使用了`lowercase`和`uppercase`管道。
- en: The first pipe will transform the value of the variable to a lowercase text.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个管道将变量的值转换为小写文本。
- en: The second pipe will transform the value of the variable to an uppercase text.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个管道将变量的值转换为大写文本。
- en: 'Run the application, and we should see the following output:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，我们应该看到以下输出：
- en: '![](assets/926ebe20-e308-4138-b99c-ab3c6b64b444.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/926ebe20-e308-4138-b99c-ab3c6b64b444.png)'
- en: In this section, you learned how to use `lowercase` and `uppercase` pipes to
    transform the values.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学会了如何使用`lowercase`和`uppercase`管道来转换值。
- en: JSON Pipe
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSON Pipe
- en: Similar to a JSON filter in Angular 1.x, we have the JSON pipe, which helps
    us to transform the string into a JSON format string.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于Angular 1.x中的JSON过滤器，我们有JSON管道，它可以帮助我们将字符串转换为JSON格式的字符串。
- en: In a lowercase or an uppercase pipe, we transformed the strings; using a JSON
    pipe, we can transform and display the string into a JSON format string.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在小写或大写管道中，我们转换了字符串；使用JSON管道，我们可以将字符串转换并显示为JSON格式的字符串。
- en: 'The general syntax is shown in the following code snippet:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 通用的语法如下代码片段所示：
- en: '[PRE11]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, let''s use the preceding syntax and create a complete `Component` example,
    which uses the JSON Pipe:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用前面的语法并创建一个完整的`Component`示例，其中使用了JSON Pipe：
- en: '[PRE12]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s analyze the preceding code in detail:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前面的代码：
- en: We created a component class, `JSONPipeComponent` and `authorObj`, and assigned
    the JSON string to the variable.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个组件类，`JSONPipeComponent`和`authorObj`，并将JSON字符串赋给了这个变量。
- en: In the component template view, we transformed and displayed the JSON string.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件模板视图中，我们转换并显示了JSON字符串。
- en: 'Run the app, and we should see the following output:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，我们应该看到以下输出：
- en: '![](assets/31c7bcc9-8279-4539-b9c3-1c24a6ead706.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/31c7bcc9-8279-4539-b9c3-1c24a6ead706.png)'
- en: JSON is soon becoming de facto standard of web applications to integrate between
    services and client technologies. Hence, the JSON pipe comes in handy every time
    we need to transform our values to a JSON structure in the view.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: JSON很快就成为了Web应用程序之间集成服务和客户端技术的事实标准。因此，每当我们需要将值转换为视图中的JSON结构时，JSON管道都非常方便。
- en: SlicePipe
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SlicePipe
- en: SlicePipe is very similar to an array slice JavaScript function. Slice pipe
    extracts the characters from a string between two specified indices and returns
    the new sub string.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: SlicePipe与数组切片JavaScript函数非常相似。Slice管道从字符串中提取两个指定索引之间的字符，并返回新的子字符串。
- en: 'The general syntax to define a SlicePipe is as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 定义SlicePipe的一般语法如下：
- en: '[PRE13]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding code snippet, we are slicing the email address to show only
    the first four characters of the variable value, `email_id`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们正在对电子邮件地址进行切片，以仅显示变量值`email_id`的前四个字符。
- en: Now that we know how to use a SlicePipe, let's put it together in a component.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们知道如何使用SlicePipe，让我们在组件中将其放在一起。
- en: 'The following is the complete code snippet implementing SlicePipe:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是实现SlicePipe的完整代码片段：
- en: '[PRE14]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s analyze the preceding code snippet in detail:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前面的代码片段：
- en: We created a `SlicePipeComponent` class.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个`SlicePipeComponent`类。
- en: We defined a string variable `emailAddress` and assigned it a value, `test@packtpub.com`.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了一个字符串变量`emailAddress`并为其赋值`test@packtpub.com`。
- en: 'Then, we applied SlicePipe to the `{{emailAddress | slice : 0: 4}}` variable.'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '然后，我们将SlicePipe应用于`{{emailAddress | slice : 0: 4}}`变量。'
- en: We get the substring starting from the `0` position and get `4` characters from
    the variable value of `emailAddress`.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从`0`位置开始获取子字符串，并从变量值`emailAddress`中获取`4`个字符。
- en: 'Run the app, and we should see the following output:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，我们应该看到以下输出：
- en: '![](assets/aec0e6f4-0964-4f92-bbf7-7202cf800a94.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aec0e6f4-0964-4f92-bbf7-7202cf800a94.png)'
- en: SlicePipe is certainly a very helpful built-in pipe, especially dealing with
    strings or substrings.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: SlicePipe肯定是一个非常有用的内置管道，特别是处理字符串或子字符串。
- en: async Pipe
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步管道
- en: An async pipe allows us to directly map promises or observables into our template
    view. To understand the async Pipe better, let me throw some light on an observable
    first.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 异步管道允许我们直接将promise或observable映射到我们的模板视图中。为了更好地理解异步管道，让我先介绍一下observable。
- en: 'Observables are Angular-injectable services, which can be used to stream data
    to multiple sections in the application. In the following code snippet, we use
    an `async` pipe as a promise to resolve the list of authors being returned:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Observables是Angular可注入的服务，可用于将数据流式传输到应用程序中的多个部分。在下面的代码片段中，我们使用`async`管道作为一个promise来解析返回的作者列表：
- en: '[PRE15]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `async` pipe now subscribes to `Observable` (authors) and retrieves the
    last value.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`async`管道现在订阅`Observable`（作者）并检索最后一个值。'
- en: Let's look at examples of how we can use the `async` pipe as both a `Promise`
    and an `Observable`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下如何使用`async`管道作为`Promise`和`Observable`的示例。
- en: 'Add the following lines of code in our `app.component.ts` file:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`app.component.ts`文件中添加以下代码行：
- en: '[PRE16]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s analyze the preceding code snippet in detail:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前面的代码片段：
- en: We created a `getAuthorDetails` method and attached an observable with the same.
    The method will return the response from the `url`, which is a JSON output.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个`getAuthorDetails`方法，并附加了一个相同的observable。该方法将返回来自`url`的响应，这是一个JSON输出。
- en: In the `getAuthorList` method, we bound a promise, which needs to be resolved
    or rejected in the output returned by the `url` called through a `http` request.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`getAuthorList`方法中，我们绑定了一个需要在通过`http`请求调用的`url`返回的输出中解析或拒绝的promise。
- en: In this section, we have seen how the `async` pipe works. You will find it very
    similar to dealing with services. We can either map a promise or an observable
    and map the result to the template.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经看到了`async`管道的工作原理。您会发现它与处理服务非常相似。我们可以映射一个promise或一个observable，并将结果映射到模板上。
- en: Parameterizing pipes
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参数化管道
- en: 'A pipe can take parameters as well. We can pass parameters along with the pipe.
    A parameter is separated with a colon symbol (`:`) after the pipe:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 管道也可以带参数。我们可以在管道后面传递参数。参数在管道后用冒号符号（`:`）分隔：
- en: '[PRE17]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s quickly build a simple example of a pipe to see it in action. Here''s
    an example of `DatePipe` with the `MM-dd-yyyy` parameters:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速构建一个简单的管道示例，看看它的运行情况。以下是带有`MM-dd-yyyy`参数的`DatePipe`的示例：
- en: '[PRE18]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'One more example of a pipe with parameters is given as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个带参数的管道示例如下：
- en: '[PRE19]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s analyze the preceding code snippet in detail:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前面的代码片段：
- en: We passed USD as a parameter to `CurrencyPipe`, which will tell the pipe to
    display the currency code, such as *USD* for the US dollar and *EUR* for the euro.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们向`CurrencyPipe`传递了USD作为参数，这将告诉管道显示货币代码，例如美元的*USD*和欧元的*EUR*。
- en: The `true` parameter stands for displaying the symbol of the currency ($). By
    default, it's set to false.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`true`参数表示显示货币符号（$）。默认情况下，它设置为false。'
- en: 'Let''s see them in action with complete code for the component:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过组件的完整代码来看它们的运行情况：
- en: '[PRE20]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding code snippet, we created a `ParamPipeComponent` class and defined
    the `today` and `salary` variables.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们创建了一个`ParamPipeComponent`类，并定义了`today`和`salary`变量。
- en: In the `Component` template view, we pass the `date:'MM-dd-yyyy'` parameters
    for `DatePipe` and the `currency:'USD' :true` parameters for `CurrencyPipe`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Component`模板视图中，我们为`DatePipe`传递了`date:'MM-dd-yyyy'`参数，为`CurrencyPipe`传递了`currency:'USD'
    :true`参数。
- en: 'Here''s the output of the preceding code:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的输出：
- en: '![](assets/dfce4e6f-48cb-4eda-8f26-d52111ebb02d.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dfce4e6f-48cb-4eda-8f26-d52111ebb02d.png)'
- en: In the preceding example, we passed custom parameters, such as `currency` and
    `date` formats, to the pipes and viewed the output accordingly.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们传递了自定义参数，如`currency`和`date`格式，给管道，并相应地查看了输出。
- en: In most application use cases, we will need to pass parameters to pipes to transform
    values based on business logic. In this section, we focused on paramterizing the
    pipes by passing values.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数应用用例中，我们需要向管道传递参数，以根据业务逻辑转换值。在本节中，我们重点介绍了通过传递值来对管道进行参数化。
- en: So far, we have been using the built-in pipes and passing parameters to the
    pipes.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用内置管道并向管道传递参数。
- en: In the following sections, you will learn about chaining pipes, creating custom
    pipes, and also passing parameters to the custom user-defined pipes.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，您将学习如何链接管道、创建自定义管道，以及向自定义用户定义的管道传递参数。
- en: Chaining pipes
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链式管道
- en: We can chain multiple pipes together. This particularly helps in scenarios where
    we need to associate more than one pipe that needs to be applied, and the final
    output will be transformed with all the pipes applied.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将多个管道链接在一起。这在我们需要关联多个需要应用的管道，并且最终输出将被所有应用的管道转换的情况下特别有帮助。
- en: 'The workflow or chains will be triggered and apply the pipes one after another.
    An example of the chain pipe syntax is given as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流或链将被触发，并依次应用管道。链管道语法的示例如下：
- en: '[PRE21]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We applied two chain pipes in the preceding code. First, `DatePipe` is applied
    to the `today` variable, and just after that, the `uppercase` pipe is applied.
    The following is the entire code snippet for `ChainPipeComponent`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的代码中应用了两个链式管道。首先，`DatePipe`应用于`today`变量，然后立即应用`uppercase`管道。以下是`ChainPipeComponent`的整个代码片段：
- en: '[PRE22]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We have used the slice to show only the first four characters of the month.
    The following screenshot shows the output of the preceding component:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了slice来仅显示月份的前四个字符。以下截图显示了前面组件的输出：
- en: '![](assets/1f371c11-34df-4a31-a921-a8061cdc258b.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1f371c11-34df-4a31-a921-a8061cdc258b.png)'
- en: 'Some of the key things to remember when applying chain pipes are as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 应用链式管道时需要记住的一些关键事项如下：
- en: The order of execution is from left to right
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行顺序是从左到右
- en: The pipes are applied one after another
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道是依次应用的。
- en: In this section, you learned about how to chain multiple pipes together in our
    applications. In the next section, you will learn how to create your own custom
    pipes in detail.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您了解了如何在我们的应用程序中将多个管道链接在一起。在下一节中，您将详细了解如何创建自己的自定义管道。
- en: Creating custom pipes
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义管道
- en: So far, so good. Pipes have really impressed us, but wait, there's more awesome
    things we can do with pipes. Built-in pipes, as you see, are very limited and
    few. We certainly need to create our own custom pipes, which cater to our app's
    functionality.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切都很好。管道确实给我们留下了深刻的印象，但等等，我们还可以用管道做更棒的事情。内置管道，正如您所见，非常有限且少。我们当然需要创建自己的自定义管道，以满足我们应用程序的功能。
- en: In this section, you will learn how to create a custom pipe for our application.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何为我们的应用程序创建自定义管道。
- en: In this example, we will build a pipe, which will be a tax calculator. We pass
    the price of the product and use a pipe functionality to automatically calculate
    and display the sales tax. Magic, right?
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将构建一个管道，它将是一个税收计算器。我们传递产品的价格，并使用管道功能自动计算并显示销售税。神奇，对吧？
- en: 'To create a custom pipe, we need to perform the following steps:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建自定义管道，我们需要执行以下步骤：
- en: Create a template to apply it to the pipe ( in our example, it's `updateTaxPipe`).
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个模板来应用到管道上（在我们的例子中，它是`updateTaxPipe`）。
- en: Create a pipe file, that is, `update-tax.pipe.ts`.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个管道文件，即`update-tax.pipe.ts`。
- en: Every pipe file will have to import the pipe from the Angular core.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个管道文件都必须从Angular核心中导入管道。
- en: Define the pipe metadata.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义管道元数据。
- en: Create the `Component` class. It should have the `transform` function, which
    holds the business logic of what the pipe should do.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Component`类。它应该有`transform`函数，其中包含管道应该执行的业务逻辑。
- en: 'In the following code snippet, we are defining a custom pipe called `UpdateTaxPipe`,
    which will take a `percentage` parameter and does the sales tax calculation and
    displays it in our template:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，我们正在定义一个名为`UpdateTaxPipe`的自定义管道，它将接受一个`percentage`参数，并进行销售税计算并在我们的模板中显示：
- en: '[PRE23]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let''s create our `update-tax.pipe.ts` file:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的`update-tax.pipe.ts`文件：
- en: '[PRE24]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let''s analyze the preceding code snippet in detail:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前面的代码片段：
- en: To tell Angular that this is a pipe, we applied the `@Pipe` decorator, which
    you import from the core Angular library.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了告诉Angular这是一个管道，我们应用了`@Pipe`装饰器，它是从核心Angular库中导入的。
- en: We created a custom pipe named `UpdateTaxPipe`, using the `name` pipe metadata.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个自定义管道，名为`UpdateTaxPipe`，使用了`name`管道元数据。
- en: We created a `transform` method, which is mandatory for the pipe and defined
    our business logic and rule inside the method.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个`transform`方法，这对于管道是必需的，并在方法内定义了我们的业务逻辑和规则。
- en: We passed two parameters to the `transform` method, and it returned the updated
    value.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们向`transform`方法传递了两个参数，它返回了更新后的值。
- en: Angular looks for and executes the `transform` method, regardless of whether
    we include the interface PipeTransform or not.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们是否包括接口PipeTransform，Angular都会寻找并执行`transform`方法。
- en: 'Run the app, and we should see the output as shown in the following screenshot:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，我们应该看到如下截图所示的输出：
- en: '![](assets/9d770113-f482-4303-aa39-e2f6175b42c6.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9d770113-f482-4303-aa39-e2f6175b42c6.png)'
- en: In this section, you learned how to create a custom pipe. Creating user-defined
    pipes is very simple and easy. Custom pipes definitely help us to easily integrate
    the business logic of our application.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学习了如何创建自定义管道。创建用户定义的管道非常简单和容易。自定义管道确实帮助我们轻松地集成应用程序的业务逻辑。
- en: Try and create custom pipes, which can fit the write once and use logic many
    times and also in many component views; for example, validating a phone number,
    address, and so on.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试创建自定义管道，可以适应一次编写，多次使用逻辑，也可以在许多组件视图中使用；例如，验证电话号码、地址等。
- en: Pure and Impure Pipes
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 纯管道和非纯管道
- en: 'Pipe also accepts a metadata called Pure. Pipes are of two states:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 管道还接受一个名为Pure的元数据。管道有两种状态：
- en: Pure Pipe
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纯管道
- en: Impure Pipe
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非纯管道
- en: Pure Pipes
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 纯管道
- en: A Pure Pipe will execute only when the value of the input parameter is changed.
    It will not remember or trace any of the previous values or states. Angular built-in
    pipes are all `pure` pipes.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 纯管道只有在输入参数的值发生变化时才会执行。它不会记住或追踪任何先前的值或状态。Angular内置管道都是`pure`管道。
- en: All the pipes we have seen so far as examples are Pure Pipes.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止我们看到的所有管道示例都是纯管道。
- en: Impure Pipes
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非纯管道
- en: An impure pipe is called for every change detection cycle, regardless of whether
    the value or parameters change. In order to use impure pipes, we should use the
    pipe decorator `pure` as `false`.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 无论值或参数是否改变，非纯管道都会在每次变更检测周期中调用。为了使用非纯管道，我们应该将管道修饰符`pure`设置为`false`。
- en: By default, all pipe decorators have `pure` set as `true`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有管道修饰符的`pure`都设置为`true`。
- en: Setting the pipe decorator value as `pure` will check for the pipe's output
    irrespective of whether it's value changed or not and will keep updating the value
    provided by the pipe.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 将管道修饰符的值设置为`pure`将检查管道的输出，无论其值是否改变，都会保持更新管道提供的值。
- en: Defining an impure pipe is same as creating any custom user-defined pipe, the
    only difference being that in the `@Pipe` decorator we will explicitly mention
    the pipe to be impure by setting the value to `false`.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 定义非纯管道与创建任何自定义用户定义管道相同，唯一的区别在于在`@Pipe`修饰符中，我们将通过将值设置为`false`来明确指定管道为非纯的。
- en: 'Below is the syntax to define a impure pipe by setting the value of pipe to
    false:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是通过将管道的值设置为false来定义非纯管道的语法：
- en: '[PRE25]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In this section, you learned about the different types of Angular pipes, namely
    pure and impure pipes. Pure pipes are called only when the value of the input
    component changes. Impure pipes are called on every change detection, irrespective
    of whether the values change or not.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您了解了不同类型的Angular管道，即纯管道和非纯管道。只有在输入组件的值发生变化时才会调用纯管道。无论值是否改变，非纯管道都会在每次变更检测时调用。
- en: Summary
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned all about Angular pipes. Angular pipes are very
    useful in transforming the data in the view template. Angular pipes are the modernized
    version of filters available in Angular 1.x.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了关于Angular管道的一切。Angular管道在转换视图模板中的数据方面非常有用。Angular管道是Angular 1.x中可用的过滤器的现代化版本。
- en: There are many useful built-in pipe operators we can use easily in our templates.
    You learned about built-in pipes as well as created custom user-defined pipes
    in this chapter.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在模板中轻松使用许多有用的内置管道操作符。在本章中，您了解了内置管道以及创建自定义用户定义管道。
- en: When working with numbers, we can make use of `DatePipe`, `DecimalPipe`, and
    `CurrencyPipe`. When working with strings exclusively, we can always use SlicePipe,
    `LowercasePipe`, and `UppercasePipe`.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理数字时，我们可以使用`DatePipe`、`DecimalPipe`和`CurrencyPipe`。在专门处理字符串时，我们可以始终使用`SlicePipe`、`LowercasePipe`和`UppercasePipe`。
- en: We can use `JSONPipe` and `asyncPipe` when we are mostly dealing with server-side
    responses or making an async call and processing the response. We also covered
    passing parameters to the pipes and customizing according to the need of our apps.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们主要处理服务器端响应或进行异步调用并处理响应时，我们可以使用`JSONPipe`和`asyncPipe`。我们还涵盖了向管道传递参数，并根据应用程序的需要进行定制。
- en: We explored how to create and implement custom user-defined pipes, which can
    also take parameters to customize them better based on our application needs.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了如何创建和实现自定义用户定义的管道，这些管道还可以接受参数，以根据我们应用程序的需求更好地定制它们。
- en: So go ahead, and transform your views with pipes.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 所以继续，用管道转换你的视图。
- en: In next chapter you will learn about implementing Angular services. You will
    learn about service and factory, creating Angular service, accessing data from
    components using service and creating asynchronous service.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何实现Angular服务。您将学习有关服务和工厂的知识，创建Angular服务，使用服务从组件中访问数据以及创建异步服务。
