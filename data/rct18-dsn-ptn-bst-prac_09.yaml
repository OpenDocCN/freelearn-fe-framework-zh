- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: React Router
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React Router
- en: React is a library that provides a lot of useful building blocks for creating
    web applications, but it doesn’t include everything you might need *out of the
    box*. One key feature that React doesn’t provide is routing, which is the ability
    to handle URLs and navigate between different pages or views in a single-page
    application. For that, we turn to third-party libraries, and the most popular
    one for React is **React Router**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: React 是一个提供大量用于创建网络应用程序的有用构建块的库，但它并不包含你可能需要的所有功能 *开箱即用*。React 不提供的一个关键特性是路由，即处理
    URL 并在单页应用程序中导航到不同的页面或视图的能力。为此，我们转向第三方库，而 React 最受欢迎的库是 **React Router**。
- en: In this chapter, we’ll explore React Router and learn how to use it to create
    dynamic routes and handle navigation in our React applications. By the end of
    this chapter, you’ll have a good understanding of how React Router works and how
    to use it effectively in your own projects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索 React Router 并学习如何使用它来创建动态路由并在我们的 React 应用程序中处理导航。到本章结束时，你将很好地理解
    React Router 的工作原理以及如何在你的项目中有效地使用它。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding the differences between the `react-router`, `react-router-dom`,
    and `react-router-native` packages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 `react-router`、`react-router-dom` 和 `react-router-native` 包之间的区别
- en: How to install and configure React Router
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装和配置 React Router
- en: Adding the `<Routes>` component
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 `<Routes>` 组件
- en: Adding parameters to routes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为路由添加参数
- en: React Router v6.4 and React Router loaders
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Router v6.4 和 React Router 加载器
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To complete this chapter, you will need the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章，你需要以下内容：
- en: Node.js 19+
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 19+
- en: Visual Studio Code
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: You can find the code for this chapter in the book’s GitHub repository at [https://github.com/PacktPublishing/React-18-Design-Patterns-and-Best-Practices-Fourth-Edition/tree/main/Chapter09](https://github.com/PacktPublishing/React-18-Design-Patterns-and-Best-Practices-Fourth-Edition/tree/main/Chapter09).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在本书的 GitHub 仓库中找到本章的代码：[https://github.com/PacktPublishing/React-18-Design-Patterns-and-Best-Practices-Fourth-Edition/tree/main/Chapter09](https://github.com/PacktPublishing/React-18-Design-Patterns-and-Best-Practices-Fourth-Edition/tree/main/Chapter09)。
- en: Installing and configuring React Router
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置 React Router
- en: 'After you create a new React application using `create-react-app`, the first
    thing you need to do is to install **React Router v6.x**, using the following
    command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `create-react-app` 创建新的 React 应用程序后，你需要做的第一件事是安装 **React Router v6.x**，使用以下命令：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You are probably confused about why we are installing `react-router-dom` instead
    of `react-router`. React Router contains all the common components of `react-router-dom`
    and `react-router-native`. That means that if you are using React for the web,
    you should use `react-router-dom`, and if you are using React Native, you need
    to use `react-router-native`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能不明白为什么我们要安装 `react-router-dom` 而不是 `react-router`。React Router 包含了 `react-router-dom`
    和 `react-router-native` 的所有常见组件。这意味着如果你使用 React 进行网页开发，你应该使用 `react-router-dom`，如果你使用
    React Native，则需要使用 `react-router-native`。
- en: 'The `react-router-dom` package was created originally to contain version 4
    and `react-router` uses version 3\. The `react-router-dom` v6 package has some
    improvements over `react-router`. They are listed here:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-router-dom` 包最初是为了包含版本 4 而创建的，而 `react-router` 使用的是版本 3。`react-router-dom`
    v6 包在 `react-router` 上有一些改进。它们列在这里：'
- en: '**Simplified route configuration**: React Router v6 has introduced a more straightforward
    route configuration, eliminating the need for `Switch` and exact props. Routes
    are now implicitly prioritized based on their definition order.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化路由配置**：React Router v6 引入了一种更直接的路线配置，消除了对 `Switch` 和精确属性的需求。路线现在根据它们的定义顺序隐式优先排序。'
- en: '**Nested routing**: React Router v6 has improved support for nested routing.
    The `Outlet` component is used to render child routes, allowing for more intuitive
    and maintainable route structures.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嵌套路由**：React Router v6 改进了对嵌套路由的支持。`Outlet` 组件用于渲染子路由，允许更直观和可维护的路线结构。'
- en: '**Simplified navigation**: In v6, the `useNavigate` hook has replaced the `useHistory`
    hook, providing a more straightforward and declarative approach to navigation.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化导航**：在 v6 中，`useNavigate` 钩子取代了 `useHistory` 钩子，提供了一种更直接和声明性的导航方法。'
- en: '**Route relative links and navigation**: With the introduction of the `useLinkProps`
    and `Link` components in v6, it’s now easier to create links relative to the current
    route. This reduces the need to hardcode full paths and simplifies route management.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由相对链接和导航**：随着 v6 中 `useLinkProps` 和 `Link` 组件的引入，现在创建与当前路由相关的链接变得更加容易。这减少了硬编码完整路径的需求，并简化了路由管理。'
- en: '**Simplified route guards**: React Router v6 introduces a more streamlined
    approach to route guards using the `useRoutes` hook and the `element` prop. It
    allows for easier and more maintainable route protection patterns.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化路由守卫**：React Router v6 引入了一种更简洁的方法来使用 `useRoutes` 钩子和 `element` 属性进行路由守卫。它允许更容易和更易于维护的路由保护模式。'
- en: Since React Router v6.4, the approach to creating routes has changed slightly,
    but it still supports the “old way.” In our final section, we will convert the
    same example to the new approach.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 React Router v6.4 以来，创建路由的方法略有变化，但它仍然支持“旧方法”。在我们的最后一节中，我们将将相同的示例转换为新方法。
- en: Creating our sections
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的部分
- en: Let’s create some sections to test some basic routes. We need to create four
    stateless components (`About`, `Contact`, `Home`, and `Error404`) and name them
    as `index.tsx` in their directories.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一些部分来测试一些基本路由。我们需要创建四个无状态组件（`About`、`Contact`、`Home` 和 `Error404`）并将它们命名为
    `index.tsx` 在它们的目录中。
- en: 'You can add the following to the `src/components/Home.tsx` component:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 `src/components/Home.tsx` 组件中添加以下内容：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `src/components/About.tsx` component can be created with the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/components/About.tsx` 组件可以创建如下：'
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following creates the `src/components/Contact.tsx` component:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下创建 `src/components/Contact.tsx` 组件：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, the `src/components/Error404.tsx` component is created as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`src/components/Error404.tsx` 组件的创建方式如下：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After we have created all the functional components, we need to modify our
    `index.tsx` file to import our route file, which we will create in the next step:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建了所有功能组件之后，我们需要修改我们的 `index.tsx` 文件以导入我们将在下一步创建的路由文件：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we need to create the `src/routes.tsx` file, where we will render our
    `Home` component when the user accesses the root path (`/`):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建 `src/routes.tsx` 文件，其中我们将渲染用户访问根路径（`/`）时的 `Home` 组件：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After that, we need to modify our `App.tsx` file to render the route components
    as children:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们需要修改我们的 `App.tsx` 文件以将路由组件作为子组件渲染：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you run the application, you will see the `Home` component in the root (`/`):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行应用程序，你将在根目录（`/`）中看到 `Home` 组件：
- en: '![](img/B18414_09_01.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B18414_09_01.png]'
- en: 'Figure 9.1: Home page'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1：主页
- en: 'Now, let’s add `Error404` when the user tries to access any other route:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在用户尝试访问任何其他路由时添加 `Error404`：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, if you go to `/somefakeurl`, you will be able to see the **Error404**
    component:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你访问 `/somefakeurl`，你将能够看到 **Error404** 组件：
- en: '![](img/B18414_09_02.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B18414_09_02.png]'
- en: 'Figure 9.2: Error 404 page'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2：错误 404 页面
- en: 'Now, we can add our other components (`About` and `Contact`):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以添加我们的其他组件（`About` 和 `Contact`）：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, you can visit `/about`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以访问 `/about`：
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18414_09_03.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、聊天或文本消息，自动生成的描述](img/B18414_09_03.png)'
- en: 'Figure 9.3: About page'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3：关于页面
- en: 'Alternatively, you can now visit `/contact`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你现在可以访问 `/contact`：
- en: '![](img/B18414_09_04.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B18414_09_04.png]'
- en: 'Figure 9.4: Contact page'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4：联系页面
- en: Now that you have implemented your first routes, let’s add some parameters to
    the routes in the next section.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经实现了你的第一个路由，让我们在下一节中向路由添加一些参数。
- en: Adding parameters to the routes
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向路由添加参数
- en: So far, you have learned how to use React Router for basic routes (one-level
    routes). Next, I will show you how to add some parameters to the routes and get
    them into your components.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经学会了如何使用 React Router 进行基本路由（单级路由）。接下来，我将向你展示如何向路由添加一些参数并将它们传递到你的组件中。
- en: For this example, we will create a `Contacts` component to display a list of
    contacts when we visit the `/contacts` route, but we will show the contact information
    (name, phone, and email) when the user visits `/contacts/:contactId`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，我们将创建一个 `Contacts` 组件，在访问 `/contacts` 路由时显示联系人列表，但当用户访问 `/contacts/:contactId`
    时，我们将显示联系信息（姓名、电话和电子邮件）。
- en: 'The first thing we need to do is to create our `Contacts` component. Let’s
    use the following skeleton: const Contacts = () => ('
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是创建我们的 `Contacts` 组件。让我们使用以下骨架：`const Contacts = () => (`
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s use these CSS styles:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下 CSS 样式：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once you have created the `Contacts` component, you need to import it into
    your route file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您创建了`Contacts`组件，您需要将其导入到您的路由文件中：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now you will be able to see the `Contacts` component if you go to the `/contacts`
    URL:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您访问`/contacts` URL，您将能够看到`Contacts`组件：
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18414_09_05.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，聊天或文本消息，自动生成的描述](img/B18414_09_05.png)'
- en: 'Figure 9.5: Contacts page'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5：联系人页面
- en: 'Now that the `Contacts` component is connected to React Router, let’s render
    our contacts as a list:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，由于`Contacts`组件已连接到React Router，让我们将联系人作为列表渲染：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As you can see, we are using the `<Link>` component, which will generate an
    `<a>` tag that points to `/contacts/contact.id`, and this is because we will add
    a new nested route to our route file to match the ID of the contact:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们正在使用`<Link>`组件，它将生成一个指向`/contacts/contact.id`的`<a>`标签，这是因为我们将向我们的路由文件添加一个新的嵌套路由以匹配联系人的ID：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'React Router v6 has a special hook called `useParams`, which will give you
    access to the `contactId` parameter:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: React Router v6有一个名为`useParams`的特殊钩子，它将为您提供访问`contactId`参数的权限：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For now, we are going to add our contacts to our local state, but normally
    this should come from some service:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将把联系人添加到我们的本地状态中，但通常这应该来自某个服务：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'By default, our `selectedNote` is `false`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，我们的`selectedNote`是`false`：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If the `contactId` is higher than `0`, then we filter it from our `contacts`
    array:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`contactId`大于`0`，则我们从`contacts`数组中过滤它：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see, we are receiving the `contactId` parameter with `useParams`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们正在使用`useParams`接收`contactId`参数。
- en: 'If you run the application again, you should see your contacts like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您再次运行应用程序，您应该会看到您的联系人如下所示：
- en: '![Graphical user interface, application  Description automatically generated](img/B18414_09_06.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，自动生成的描述](img/B18414_09_06.png)'
- en: 'Figure 9.6: Displaying contacts'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6：显示联系人
- en: 'If you click on **John Smith** (whose `contactId` is 2), you will see the contact
    information:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击**约翰·史密斯**（其`contactId`为2），您将看到联系信息：
- en: '![Graphical user interface, application  Description automatically generated](img/B18414_09_07.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，自动生成的描述](img/B18414_09_07.png)'
- en: 'Figure 9.7: Displaying a specific contact'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7：显示特定联系人
- en: 'After this, you can add a `navbar` in the `App` component to access all the
    routes:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，您可以在`App`组件中添加一个`navbar`以访问所有路由：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, let’s modify our `App` styles:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们修改我们的`App`样式：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, you will see something like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您将看到类似这样的内容：
- en: '![Graphical user interface, application  Description automatically generated](img/B18414_09_08.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，自动生成的描述](img/B18414_09_08.png)'
- en: 'Figure 9.8: Displaying the menu'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8：显示菜单
- en: By the end of this section, you’ll know how to add routes with parameters to
    your application. *This is amazing, right?*
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 到本节结束时，您将知道如何将带参数的路由添加到您的应用程序中。*这真是太棒了，对吧？*
- en: React Router v6.4
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React Router v6.4
- en: As mentioned at the beginning of this chapter, **React Router v6.4** introduces
    a new way of implementing routes.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章开头所述，**React Router v6.4**引入了一种新的路由实现方式。
- en: 'Let’s rewrite our last example to explore the differences. The first difference
    is that instead of using `AppRoutes` as we did previously, we will now add our
    routes directly to our `App.tsx` file. Let’s begin by modifying our `main.tsx`
    and removing `AppRoutes`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重写我们的最后一个示例来探索差异。第一个差异是，我们不再使用之前使用的`AppRoutes`，而是现在将路由直接添加到我们的`App.tsx`文件中。让我们首先修改我们的`main.tsx`并删除`AppRoutes`：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, in our `App.tsx` file, we need to import some new functions from `react-router-dom`
    and load the components that will be rendered for each URL:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们的`App.tsx`文件中，我们需要从`react-router-dom`导入一些新函数，并加载每个URL将渲染的组件：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Afterward, we need to specify our routes by utilizing the `createBrowserRouter`
    and `createRoutesFromElements` functions:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们需要通过使用`createBrowserRouter`和`createRoutesFromElements`函数来指定我们的路由：
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As you can see, we are rendering the `<Root />` component, and you might be
    wondering where this component is located. The `<Root />` component serves the
    purpose of housing our **Navigation** menu. Additionally, using the new `<Outlet
    />` component, we can specify the location where we want to render the content
    of our routes. To accomplish this, you need to create the `<Root />` component
    before defining the `App` component (at the top):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们正在渲染`<Root />`组件，您可能想知道这个组件在哪里。`<Root />`组件的作用是容纳我们的**导航**菜单。此外，使用新的`<Outlet
    />`组件，我们可以指定我们想要渲染路由内容的位置。为了实现这一点，您需要在定义`App`组件（在顶部）之前创建`<Root />`组件：
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The first route is our `Home`, which is why we need to utilize the index prop.
    Next, we have the `about` route where we specify the path as `/about`. Lastly,
    we added an asterisk, which will match any other page that we don’t have, rendering
    a **404 Error page**.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条路由是我们的`Home`，这就是为什么我们需要使用索引属性。接下来，我们有`about`路由，我们指定路径为`/about`。最后，我们添加了一个星号，这将匹配我们还没有的其他页面，渲染一个**404错误页面**。
- en: 'Once we have created the `Root` component and specified the routes, we need
    to render the `RouterProvider` and pass the created router as a parameter:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了`Root`组件并指定了路由之后，我们需要渲染`RouterProvider`并将创建的router作为参数传递：
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you’ve done everything correctly, you should be able to see the **Home**
    and **About** pages:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您一切操作正确，您应该能够看到**主页**和**关于**页面：
- en: '![A screenshot of a computer  Description automatically generated](img/B18414_09_09.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图  自动生成描述](img/B18414_09_09.png)'
- en: 'Figure 9.9: Home page'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.9：主页
- en: 'If you click on **About**, you should see the page appear as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击**关于**，您应该看到页面如下显示：
- en: '![A screenshot of a computer  Description automatically generated](img/B18414_09_10.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图  自动生成描述](img/B18414_09_10.png)'
- en: 'Figure 9.10: About page'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.10：关于页面
- en: With this foundational understanding of the changes in React Router v6.4, we’ll
    now venture into looking at implementing the new addition of loaders using the
    **Pokemons** page as our working example.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了React Router v6.4的变化之后，我们现在将探讨如何使用**Pokemons**页面作为我们的工作示例来实现新的加载器功能。
- en: React Router loaders
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React Router加载器
- en: One of the main changes in React Router 6.4 is the addition of **loaders**.
    These loaders provide a better way to fetch data, eliminating the need for the
    common pattern of using `useEffect` and `fetch` within components.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: React Router 6.4的主要变化之一是增加了**加载器**。这些加载器提供了一种更好的方式来获取数据，消除了在组件内部使用`useEffect`和`fetch`的常见模式。
- en: As you may have noticed in the menu, I have included a **Pokemons** page without
    specifying the route just yet. The reason for this is that I want to demonstrate
    how to use the new React Router loaders with this page as an example.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在菜单中可能已经注意到的，我包括了**Pokemons**页面，但尚未指定路由。这样做的原因是我想用这个页面作为示例来演示如何使用新的React Router加载器。
- en: 'First, let’s create our `Pokemons` component by using the `Home` component
    as a template:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们通过使用`Home`组件作为模板来创建我们的`Pokemons`组件：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now that we have our base component, we need to create a `dataLoader` function
    that is asynchronous. This function will be responsible for fetching the data:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了基本组件，我们需要创建一个异步的`dataLoader`函数。这个函数将负责获取数据：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'As you can see, we place the `dataLoader` before exporting the `Pokemons` component
    as the default. Once you have created your `dataLoader`, you need to import it
    and specify the route for `Pokemons` in the `App.tsx` file. Remember to pass the
    `dataLoader` to the loader prop:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们在导出`Pokemons`组件作为默认值之前放置了`dataLoader`。一旦您创建了`dataLoader`，您需要在`App.tsx`文件中导入它并指定`Pokemons`的路由。请记住将`dataLoader`传递给加载器属性：
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'After connecting our `dataLoader` to the route, we can now render the data
    for `Pokemons`. To retrieve the data, we will utilize the new `useLoaderData`
    hook. Additionally, we will use the `useNavigation` hook to monitor the state
    of the route, enabling us to determine if the data is still loading. The following
    is the complete code for the `Pokemons` component:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在将`dataLoader`连接到路由后，我们现在可以渲染`Pokemons`的数据。为了检索数据，我们将使用新的`useLoaderData`钩子。此外，我们将使用`useNavigation`钩子来监控路由的状态，使我们能够确定数据是否仍在加载。以下是为`Pokemons`组件编写的完整代码：
- en: '[PRE29]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Let’s test our **Pokemons** page. We should see the first 150 **Pokemons**:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来测试我们的**Pokemons**页面。我们应该看到前150个**宝可梦**：
- en: '![A screen shot of a game  Description automatically generated](img/B18414_09_11.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![游戏截图  自动生成描述](img/B18414_09_11.png)'
- en: 'Figure 9.11: Pokemons page'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.11：宝可梦页面
- en: Through new features like loaders, React Router v6.4 streamlines routing and
    data fetching in React applications. We created a **Pokemons** page using a `dataLoader`
    function, which asynchronously fetched data from an API. We provided a more user-friendly
    interface by integrating this function into our route configuration and using
    React Router’s `useLoaderData` and `useNavigation` hooks. As a result of these
    enhancements, React Router v6.4 is now more robust, efficient, and intuitive,
    enabling developers to create more complex, data-driven applications with less
    effort.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通过新功能如加载器，React Router v6.4 简化了 React 应用程序中的路由和数据获取。我们使用 `dataLoader` 函数创建了一个
    **宝可梦** 页面，该函数从 API 异步获取数据。通过将此功能集成到我们的路由配置中并使用 React Router 的 `useLoaderData`
    和 `useNavigation` 钩子，我们提供了一个更友好的用户界面。这些改进使得 React Router v6.4 现在更加健壮、高效和直观，使开发者能够以更少的努力创建更复杂、数据驱动的应用程序。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Good job! By navigating React Router, you have acquired essential skills for
    installing, configuring, and managing routes, as well as incorporating parameters
    into nested routes. You will be able to create more dynamic and robust web applications
    using React Router by utilizing these capabilities. In addition, you have learned
    about the cutting-edge features of React Router v6.4, particularly its innovative
    use of loaders.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！通过导航 React Router，你已经掌握了安装、配置和管理路由以及将参数纳入嵌套路由的基本技能。利用这些功能，你将能够使用 React Router
    创建更动态和健壮的 Web 应用程序。此外，你还了解了 React Router v6.4 的前沿特性，特别是其创新地使用加载器。
- en: We are about to embark on the next chapter of this series, where we will explore
    the exciting new features introduced in React 18\. By continuously learning and
    applying, you will become proficient in React.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将开始本系列的下一章节，我们将探讨 React 18 中引入的令人兴奋的新功能。通过持续学习和应用，你将精通 React。
- en: Join our community on Discord
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussion with the author and other
    readers:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/React18DesignPatterns4e](https://packt.link/React18DesignPatterns4e)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/React18DesignPatterns4e](https://packt.link/React18DesignPatterns4e)'
- en: '![](img/QR_Code2450023176943770109.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_Code2450023176943770109.png)'
