- en: 'Chapter 7: Single-Page Application Deployment'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we discussed software testing and how to write a test
    and apply it during the development process to prevent errors and improve the
    software quality.
  prefs: []
  type: TYPE_NORMAL
- en: The last step in the software development life cycle is deploying the application
    to online services. In this chapter, we'll create a simple mock server as your
    application's backend using the open source **Mockachino** service. You will learn
    how to build the application and the compiled source code files generated by Umi.
    You'll also learn how to deploy and configure your application on **AWS Amplify**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a mock server with Mockachino
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling the application and setting environment variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hosting the application on AWS Amplify
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned how to build the application
    and the compiled source code files generated by Umi. You'll also know how to use
    the Mockachino service to create a mock server quickly. You'll also have learned
    how to deploy and configure single-page applications on AWS Amplify.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this chapter's exercises, you only need a computer with any OS (I
    recommend Ubuntu 20.04 or higher) and the software installed in [*Chapter 1*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014)*,
    Environment Setup and Introduction to UmiJS* (VS Code, Node.js, and Yarn).
  prefs: []
  type: TYPE_NORMAL
- en: You can find the complete project in the `Chapter07` folder in the GitHub repository
    available at [https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a mock server with Mockachino
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll create a mock server using Mockachino to simulate the
    application's backend services.
  prefs: []
  type: TYPE_NORMAL
- en: Our application is only the presentation layer of the CRM system, where users
    can visualize and input data. Before deploying it, we need online backend services
    our application can connect with for processing, storing, and receiving data.
  prefs: []
  type: TYPE_NORMAL
- en: The backend services are APIs and microservices implemented by backend developers
    to securely and efficiently apply business logic and store information such as
    opportunities, activities, customers, and user information.
  prefs: []
  type: TYPE_NORMAL
- en: As the objective of this book is to teach React development with UmiJS, we won't
    build backend services. We'll use **Mockachino** to simulate the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Mockachino is a straightforward service for creating a mock server. We only
    need to define an endpoint, and Mockachino will provide a space and a secret link
    to access the space whenever necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating the route to retrieve user information. Navigate to
    [https://www.mockachino.com/](https://www.mockachino.com/) and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `api/currentUser`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, in the **HTTP Response Body** field, type the following JSON response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click on **Create**, and Mockachino will provide a secret link, as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Mockachino space secret link'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.01_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – Mockachino space secret link
  prefs: []
  type: TYPE_NORMAL
- en: By clicking on the endpoint route (**GET /api/currentUser**), you can edit endpoint
    attributes such as the path, HTTP response headers, and response body.
  prefs: []
  type: TYPE_NORMAL
- en: To create a new route, click on `mockachino.md` file.
  prefs: []
  type: TYPE_NORMAL
- en: For your convenience, I've created a markdown file named `mockachino.md` in
    the `Chapter07` folder in this book's GitHub repository. In this file, you will
    find all the routes and the responses you must create in Mockachino before going
    through the upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we created a mock server using Mockachino to simulate the backend
    services. Next, let's learn how to bundle the application and set environment
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling the application and setting environment variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you'll learn what files Umi will generate and how to compile
    the application. We'll also set an environment variable to configure the URL for
    sending HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: We need to transform and compile our components and dependencies into a format
    that web browsers can interpret and render before deploying the application.
  prefs: []
  type: TYPE_NORMAL
- en: Run the `yarn build` command configured in our package scripts. This command
    will compile the application and place the compiled source code files in the `dist`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Compiled source code files'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.02_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – Compiled source code files
  prefs: []
  type: TYPE_NORMAL
- en: 'You will find three files in the `dist` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index.html`: This is the HTML document containing the entry point for our
    application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`umi.css`: This is the compressed style sheet containing all the application
    styles generated by LESS files present in the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`umi.js`: This is the compressed file containing all the JavaScript code required
    to execute our application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we need to host these files on a static server on the internet. When users
    navigate to the server's public address, the browser will request and receive
    the `index.html` document, the entry point for our application. We'll host our
    application on Amplify in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's adjust your application to send requests to Mockachino.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the API URL environment variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned earlier, we don't have a mock server running alongside our application
    in production. We'll send HTTP requests to Mockachino, so we need to change the
    URL argument in all functions in the `services` folder. We'll do that by configuring
    an environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Umi can read environment variables during the build process and use their values
    in our application; we only need to set the Umi `define` configuration option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create an environment variable to set the API URL by following these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file named `.env` in the project''s root folder and create a variable
    called `API_URL` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Replace the value with the URL provided by Mockachino.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `define` option to the configuration in the `config.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This configuration defines the `API_URL` variable in the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create a file to export the variable and prevent TypeScript warnings.
    Create a new file called `env.ts` in the `config` folder and export the variable
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `user.ts` file in the `src/services` folder, import the `env.ts` file
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add `API_URL` to the first argument of the `request` function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Follow the last two steps to change all the `request` functions in all files
    in the `services` folder.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how to compile our application's source code files
    and what files Umi generates during the build process. We also created an environment
    variable and changed the requests to use Mockachino as the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we'll host our application on AWS using the Amplify Console services.
  prefs: []
  type: TYPE_NORMAL
- en: Hosting the application on AWS Amplify
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you'll learn how to deploy and configure single-page applications
    on **Amazon Web Services** (**AWS**) by hosting our application using Amplify
    Console.
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS Amplify** is a flexible set of tools for web and mobile frontend developers
    to create and deploy applications on AWS using various services. With Amplify,
    you can quickly build and deploy a full stack application without having to research
    and learn individual AWS services.'
  prefs: []
  type: TYPE_NORMAL
- en: We'll use Amplify only to host our application, but you can create backend services
    and add authentication, artificial intelligence, machine learning, and more using
    the Amplify framework and Amplify Studio. If you want to know more, visit the
    framework's documentation page at [https://docs.amplify.aws/](https://docs.amplify.aws/).
  prefs: []
  type: TYPE_NORMAL
- en: Before proceeding to the following steps, you need to push the project to a
    new repository in your personal GitHub account.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you need to create a free AWS account. Visit [https://aws.amazon.com/free](https://aws.amazon.com/free),
    click on **Create a Free Account**, and fill in the form with the required information
    to create your account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, after pushing the code to a new repository and creating your AWS account,
    follow these steps to host our application on Amplify:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [http://console.aws.amazon.com/amplify/home](http://console.aws.amazon.com/amplify/home)
    and sign in to your AWS account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the menu highlighted in the following screenshot and, after that,
    click on **All apps**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Left-side menu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.03_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – Left-side menu
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top right of the page, click on the **New app** dropdown and select
    **Host web app**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Host web app option'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.04_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – Host web app option
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, select **GitHub** in the **From your existing code** section, click on
    **Continue**, and sign in to your GitHub account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Selecting a source Git provider'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.05_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – Selecting a source Git provider
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, select the repository you created for our project and click on **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Selecting a GitHub repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.06_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.6 – Selecting a GitHub repository
  prefs: []
  type: TYPE_NORMAL
- en: 'In **Step 2 Configure build settings**, in the **Build and test settings**
    section, click on **Edit**, modify line 12 as follows, and click on **Save**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This configuration will set where Amplify looks for source code when running
    the automated pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Configuring the source code base directory'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.07_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.7 – Configuring the source code base directory
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `API_URL`, and then paste the Mockachino secret link in the **Value**
    field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Creating environment variables'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.08_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.8 – Creating environment variables
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on **Next** and, in the next step, review the configurations and
    click on **Save and deploy**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.9 – Reviewing and deploying the application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.09_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.9 – Reviewing and deploying the application
  prefs: []
  type: TYPE_NORMAL
- en: 'Wait for the pipeline to succeed and click on the public address to access
    the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Application public address'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.10_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.10 – Application public address
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a closer look at more Amplify settings.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding more Amplify settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When hosting a single-page application, it is necessary to configure the server
    to only respond to requests with the `index.html` page; otherwise, the server
    will respond with an error as other pages do not exist on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Amplify provides a default routing rule in the `index.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.11 – Rewrites and redirects configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.11_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.11 – Rewrites and redirects configuration
  prefs: []
  type: TYPE_NORMAL
- en: Amplify also provides a public address on the `amplifyapp` domain, but you can
    easily add your custom domain by accessing **Domain management** in the left-side
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: The domain can be from a hosted zone on AWS Route 53 or other providers, and
    AWS also provides a free SSL certificate to secure your application's domain.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.12 – Amplify Domain management](img/Figure_7.12_B18503.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12 – Amplify Domain management
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you created a free AWS account and hosted your application
    on AWS by connecting Amplify with the repository in your GitHub account. You also
    learned how to configure rewrites and redirects and manage your custom domain
    on the Amplify Console.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created a mock server for our application using Mockachino,
    an open source project for quickly mocking servers. You also learned what files
    Umi generates during the build process for browsers to interpret and render the
    application. You created an environment variable to define the URL our application
    will use to send requests.
  prefs: []
  type: TYPE_NORMAL
- en: You learned how to push your application to a repository in your personal GitHub
    account and created a free AWS account. Next, you hosted your application on AWS
    by connecting AWS Amplify to your GitHub repository. You also learned how to configure
    rewrites and redirects, and manage your custom domains on the Amplify Console.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this book has helped you learn how to use UmiJS combined with Ant Design
    to create robust and professional React applications that provide a great user
    experience. Keep practicing and exploring the techniques you've learned from this
    book.
  prefs: []
  type: TYPE_NORMAL
