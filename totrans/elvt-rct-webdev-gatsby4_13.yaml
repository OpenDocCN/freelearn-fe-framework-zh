- en: '*Chapter 10*: Creating Gatsby Plugins'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at Gatsby's plugin ecosystem. We'll start by learning
    how to make our Gatsby site more modular as it grows. We will then create our
    first source plugin to fetch data from GitHub. We will also create our first theme
    plugin to create events pages for our website. Finally, we will learn how to share
    our plugins with the world via Gatsby's plugin ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Gatsby plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing local plugin development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating source plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating theme plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contributing to the plugin ecosystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this chapter, you will need to have completed [*Chapter 9*](B15983_09_ePub_RK.xhtml#_idTextAnchor127),
    *Deployment and Hosting*. You will also need a GitHub account.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter can be found at [https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter10](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter10).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Gatsby plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By this stage in this book, you should have all the tools you need to get a
    Gatsby site into production. In this chapter, we are going to go one step further
    and talk about creating reusability across multiple Gatsby sites using something
    called **Gatsby plugins**. Gatsby plugins are node packages that abstract common
    site functionality that utilizes Gatsby APIs. By bundling functionality into a
    plugin, you can source data, create pages, implement SEO, and so much more with
    just a few lines. Gatsby plugins also act as a way to modularize larger sites
    into more manageable chunks of functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'The two most common types of plugins are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`gatsby-node.js` file, as well as within your pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gatsby Theme Plugins**: Theme plugins focus more on the user interface of
    your application. Often, theme plugins contain code that creates pages of a site,
    such as an FAQ section. They act to split your Gatsby site into smaller manageable
    projects, which can be very useful when you have multiple teams working on the
    same site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These two types can be identified by the plugin name, which will either begin
    with `gatsby-source` or `gatsby-theme`. While these two types are the most common,
    they are not the only types. Plugins that encapsulate any other functionality
    have a plugin name that begins with `gatsby-plugin`.
  prefs: []
  type: TYPE_NORMAL
- en: Before we dive in and start creating plugins, let's learn about local plugin
    development so that we can avoid common pitfalls.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing local plugin development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Local plugin development begins with a new folder called `plugins`, which you
    need to create within your root directory. This is the folder that will house
    the plugins we create. When you add a plugin to your Gatsby config, Gatsby first
    looks within your `node_modules` folder. If it cannot find a plugin there, it
    will check within this local `plugins` folder. If it finds a plugin here with
    the same name within its `package.json` file, it will use it.
  prefs: []
  type: TYPE_NORMAL
- en: As you may have guessed by the mention of a `package.json` file, plugins come
    in the form of npm packages. npm packages take care of their dependencies, so
    it is important that, when you're installing packages for use in a plugin, you
    make sure that you open the terminal within the plugin's folder and not the root
    directory. Otherwise, your site and plugin dependencies may be inaccurate.
  prefs: []
  type: TYPE_NORMAL
- en: Quick Tip
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have any intention of ever sharing the plugins you create, you
    can choose to install dependencies that your plugins require in the root directory
    instead. This can be easier to manage if you prefer having one source of truth
    for your dependencies. But be careful – *if you think the plugin could be shared
    at any point, do not do this*, as you will have to manually sort through your
    dependencies and find those that the plugin requires.
  prefs: []
  type: TYPE_NORMAL
- en: While creating local plugins, you may find that your code does not behave like
    the rest of your project. Let's look at how we can debug common issues.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging local plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Gatsby does not treat the local plugins folder the same as the rest of the
    code base. Changes to pages, templates, and configs may not necessarily appear
    while hot reloading. Here are a couple of tips to make your life a little easier:'
  prefs: []
  type: TYPE_NORMAL
- en: If you make a change and do not see it reflected, even after restarting the
    server, try clearing the cache using `gatsby clean`. Gatsby caches plugin data
    in the `.cache` folder. To make itself faster, Gatsby uses this cache.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are unsure whether your plugin is even being run, try adding the following
    command to your plugin''s `gatsby-node.js` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will run first during Gatsby's execution. If Gatsby is aware of
    your plugin, you will see **Plugin Started!** logged to the console.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we know when it's a good idea to make plugins, let's learn how we can
    create them.
  prefs: []
  type: TYPE_NORMAL
- en: Creating source plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we mentioned in the *Understanding Gatsby plugins* section, source plugins
    are those that allow us to ingest data from a new source into our GraphQL layer.
    By creating a source plugin, we abstract the logic to source this data away from
    our site so that we can reuse it across multiple Gatsby projects if we want to.
    To understand how source plugins work, let''s build one together. Let''s source
    our total contributions from GitHub so that we can display them on our **about**
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to be able to do to pull data from GitHub is use an
    access token. Navigate to [https://github.com/settings/tokens/new](https://github.com/settings/tokens/new).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a **Note** to help you identify your access token later:![Figure 10.1
    – GitHub personal access token generation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.01_B15983.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.1 – GitHub personal access token generation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Change the **Expiration** property to your desired length. Once the length of
    time has been selected, the token will be deleted and no longer work. If you prefer
    that it doesn't expire, you can select **No Expiry** from this list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down the list and check **read:user**:![Figure 10.2 – GitHub personal
    access token generation (continued)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.02_B15983.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.2 – GitHub personal access token generation (continued)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Generate token**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, you will be presented with your access token – make a note
    of this immediately as you will not be able to see it again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you ever lose your access token, you will not be able to see it again. GitHub
    does this to prevent your key being used by someone else for malicious purposes.
    In an instance where you do lose your key, you will have to create a new one with
    the same scopes and replace the token wherever it was being used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a `.env` file in your root directory and add the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You may already have a `.env` file within your project at this point. If this
    is the case, simply append the preceding code block line to that file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Ensure that `dotenv` is installed as a dependency at the root of your project.
    If it is not, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new folder called `gatsby-source-github-profile` in your `plugins`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal in the `gatsby-source-github-profile` folder and run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This initializes an npm package for our plugin.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Install the `node-fetch` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `node-fetch` package brings the `fetch` browser API to `node`. I've used
    it in this example as I suspect most of you will be familiar with `fetch`, as
    this book is aimed at React developers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Node Fetch is ESM only from version 3.0\. This means it will not play nicely
    with the ES5 format that's being used in our Gatsby configuration files. The maintainers
    suggest using version 2.6.5 in our case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a `gatsby-node.js` file in your `gatsby-source-github-profile` folder
    and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are importing our most recent install, `node-fetch`, and the `crypto`
    library (which comes with node) into our project. `crypto` provides cryptographic
    functionality, which we will be using later in this file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Under your imports, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are utilizing the `sourceNodes` Gatsby node API. As its name suggests,
    we will add code here that sources our data and then creates nodes using the `createNode`
    action. You may have also noticed that we are passing `configOptions` into this
    as an argument. This object gives us access to any of the options we provide to
    the plugin when we use it in our `gatsby-config.js` file. We are going to be passing
    our access token and username as options.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Quick Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To improve the understandability of this file, it's been broken down into its
    parts. If you are finding it hard to follow, you can see the file in its entirety
    within the repository listed in the *Technical requirements* section of this chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a `POST` request, like the following, inside `sourceNodes` for the GitHub
    API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use `node-fetch` to make the `POST` request to the GitHub API. We provide
    it with token authentication in the request header. Here, you can see we are using
    the token that's provided within `configOptions`. Like Gatsby, the GitHub API
    uses GraphQL. As with any GraphQL API, to select which data we want from GitHub,
    we have to pass a query into the body of our request. The query that's defined
    in `body` retrieves the total contributions for a given username (in this case,
    yours!). We pass our username in from `configOptions`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code after your request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, we deconstruct the data from our request to receive the total contributions.
    Then, we utilize the `createNode` function to add this data to our GraphQL data
    layer. Let''s break down the object I am passing to the function:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'a. `totalContributions`: The first key value in the object is the value of
    the total contributions. This is the variable we will query for later when we
    try to retrieve this information on our pages.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'b. `id`: Each node must have a globally unique ID. Because there is a single
    instance of this node type, we can just use the`"Github-Contributions"` string.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'c. `internal.type`: A globally unique type that we can use to identify this
    data source.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'd. `internal.contentDigest`: This field helps Gatsby avoid regenerating nodes
    when they haven''t changed. While creating the node if this field remains constant,
    it won''t regenerate. So, we need to make sure that if our total contributions
    change, so too does this `contentDigest`. To do that, I am using the `crypto`
    library to create an `md5` hash of our total contributions. This might seem a
    little overkill in this particular instance, but it works well if the amount of
    data on a node is more than one key-value pair, as you can just add them to the
    object that''s being passed to `JSON.stringify`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'e. `internal.description`: This field allows us to describe the source type,
    which is helpful if we are confused about what this source is at any point. This
    field is not required but is nice to have. Our plugin is now ready to be used
    – the process from this point is the same as it is for a plugin that''s been installed
    via npm.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Navigate to your `gatsby-config.js` file at the root of your project and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that we are passing in the options to the plugin that we utilized in the
    plugin's `gatsby-node.js` file. We source the token from our `.env` file. You
    can pass your GitHub username in as plain text as this is public information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Quick Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You may be tempted to try adding someone else's username here instead of your
    own, but this will cause the fetch request to fail as your access token does not
    have permission to retrieve another user's data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start your development server. Navigate to `http://localhost:8000/_graphql`
    – you should be able to query your total contributions with the following query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s add this new source of data to our `about` page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Congratulations – you've just built your first local plugin. You could replicate
    the methods outlined here to fetch data from another API. So, at this point, we
    can create source plugins with ease, but what about theme plugins?
  prefs: []
  type: TYPE_NORMAL
- en: Creating theme plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have discovered, theme plugins are all about adding visual elements to
    our Gatsby site. Theme plugins are unique in that they have to contain a `gatsby-config.js`
    file. To better understand theme plugins, let''s look at the most minimal of examples.
    Let''s use a plugin to add a simple sample page to our site:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder called `gatsby-theme-sample-page` in your `plugins` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal in the `gatsby-theme-sample-page` folder and run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create an `src` folder in `/gatsby-theme-sample-page`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `pages` folder in your `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `sample.js` file inside your new `pages` folder and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This page is very basic and just renders a heading on the page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Navigate to your `gatsby-config.js` file at the root of your project and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start your Gatsby development server and navigate to `/sample`; you should see
    your sample page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may have noticed that a plugin consists of the same building blocks as your
    Gatsby site. This is one of the reasons why creating plugins is so straightforward
    in Gatsby. By building a site with this tool, you also inherit the ability to
    create plugins.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have seen a basic example, let''s try and build something a little
    more useful and a little more complex. Let''s create a plugin that takes a folder
    of events (in JSON format) and creates a page for each one:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''re going to need some events that we can source within our plugin.
    Let''s assume each event will have a `title`, `description`, `location`, and `date`.
    Create a folder called `events` within your root directory. Add some JSON files
    within this folder that are in the following format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ensure that the JSON is valid as errors will cause the plugin to crash out.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a new folder called `gatsby-theme-events-section` in your `plugins` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal in the `gatsby-theme-events-section` folder and run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create an `src` folder in `/gatsby-theme-events-section`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal in the `gatsby-theme-events-section` folder and run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As its name suggests, this installs the transformer plugin for handling JSON.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a `gatsby-config.js` file and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are adding our newly installed plugin, as well as pointing our plugin
    to source files from the filesystem that exists in the `events` directory. These
    plugins will work together to create a new node for each JSON file within the
    events directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a `gatsby-node.js` file and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `onCreateNode` function is called whenever a new node is created. Using
    this function, we can transform nodes by adding, removing, or manipulating their
    fields. In this specific case, we are adding a `slug` field if the node is of
    the `EventsJson` type. A `slug` is the address of a specific page on our site,
    so in the case of our event page, we want every event to have a unique `slug`
    where it will render on the site.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Prepend your `gatsby-node.js` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code should look very familiar as it is very similar to the code we saw
    in the *Creating templates and programmatic page generation* section of [*Chapter
    4*](B15983_04_ePub_RK.xhtml#_idTextAnchor072), *Creating Reusable Templates*.
    Here, we are utilizing the `createPage` function, which allows us to create pages
    dynamically. Inside this function, we destructure the `actions` object to retrieve
    the `createPage` function. Then, we tell Gatsby where to find our event template.
    With these two pieces in place, we are now ready to query our data. You should
    see a familiar GraphQL query upon selecting the `slug` property from all the events.
    After this, we can iterate through the events and create a page for each one,
    providing the `slug` property as context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a `templates` folder in `/gatsby-theme-events-section/src`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an `event.js` file in `/gatsby-theme-events-section/src/templates` and
    add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we take `title`, `location`, `description`, and `date`, which we will
    retrieve in the page query, and render them on the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Append the `events.js` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are using `slug` from the context to find the event where `slug` matches
    in the node's fields. We query for all the data that we need to populate this
    page by retrieving `title`, `location`, `description`, and `date`, which have
    been formatted. This is then passed into the template via the `data` prop.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, let's create a page with all the events listed. Create a `pages` folder
    in `/gatsby-theme-events-section/src`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an `events.js` file in `/gatsby-theme-events-section/src/pages` and
    add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are mapping through our events and creating a `Link` to an event's
    dedicated page with `title`, `data`, and `location`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Append `events.js` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This query will retrieve all the events and return them in a nodes array, which
    can be retrieved via the `data` prop on the page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You''re all done – run your development server and navigate to `localhost:8000/events`.
    You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Events page preview'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.03_B15983.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.3 – Events page preview
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on an event should take you to its dedicated page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Events page preview'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.04_B15983.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.4 – Events page preview
  prefs: []
  type: TYPE_NORMAL
- en: You've just made your first local theme plugin. Adding an event to the `events`
    folder will see it appended to the list and get a dedicated page. If we were to
    publish this plugin, we could then use it within multiple Gatsby sites to create
    these pages by simply creating an `events` folder and populating it. No additional
    configuration is required!
  prefs: []
  type: TYPE_NORMAL
- en: Quick Tip
  prefs: []
  type: TYPE_NORMAL
- en: You'll notice a lack of styling in the examples set out in this chapter. This
    chapter focuses on the Gatsby APIs that are being utilized and less on styling.
    By now, you should feel confident enough to create styling for these pages.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how to create both types of plugins, let's learn how
    we can publish them and contribute them back to the community.
  prefs: []
  type: TYPE_NORMAL
- en: Contributing to the plugin ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, you've built a plugin and now you want to use it in a separate Gatsby project?
    Or perhaps you think the plugin could help other developers? In either case, you'll
    need to publish your plugin. By publishing your plugin with npm, your plugin will
    automatically become visible on Gatsby's site plugins page ([https://www.gatsbyjs.com/plugins](https://www.gatsbyjs.com/plugins)).
    Let's start this journey by looking at a pre-publish checklist.
  prefs: []
  type: TYPE_NORMAL
- en: Pre-publish checklist
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we publish our plugin, it''s important to ensure that we are ready to
    do so. The following is a suggested pre-publish checklist:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure your plugin's name explains what it does. This might seem a little trivial
    but naming your plugin in a way that makes it clear what it does will make it
    easier to find online.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure your plugin's name is unique. Two npm packages cannot share the same
    name, so you mustn't try and deploy a package with a name that is already in use.
    To check whether your name is in use, visit [https://www.npmjs.com/](https://www.npmjs.com/)
    and search for your plugin's name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure your plugin adheres to the naming convention that was outlined in the
    *Understanding Gatsby plugins* section. This is the way that Gatsby determines
    which npm packages are Gatsby plugins so that it can add them to their site.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure your plugin has a comprehensive `README.md` file. This file will be picked
    up by Gatsby and included within the plugin ecosystem, so it's vitally important
    that the `README.md` file explains what your plugin does and how to use it. You
    should include the specific configuration options that might be required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check that both React and Gatsby are peer dependencies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure your code has been tested properly. Unit tests are so important, but
    even more so if you're about to pass your code onto others. Aim for 100% test
    code coverage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you ended up changing your plugin's name, be sure that this new name is reflected
    in the `package.json` file, as well as the folder's name. Having the old name
    anywhere can be confusing when you're using/searching for your plugin later down
    the line.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have gone through our checklist, let's learn how to publish a plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing a plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Publishing a Gatsby plugin follows the same process as publishing any npm package.
    Let''s learn how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure you have an npm account. If you do not, you can create one at [https://www.npmjs.com/signup](https://www.npmjs.com/signup).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log into the npm CLI from your terminal by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The CLI will ask for your name, email, and password as part of the login process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate your terminal to your Gatsby plugin's directory. *This is vitally important*.
    If you continue these steps within your root directory, you will end up accidentally
    releasing your entire site as a package, so ensure you have navigated to the plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, run the `publish` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that your plugin has been published, it should be visible on the Gatsby
    website plugins page within 24 hours.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned what a Gatsby plugin is and what types exist. We
    learned about local plugin development and how to create source and theme plugins.
    We created both source and theme plugins and then tested them locally by including
    them on our site. We then learned about sharing plugins online. We discussed what
    you should consider before deploying a plugin and then learned how to share a
    plugin by publishing them online via npm. By completing this chapter, you should
    now feel confident that you can create and share source and theme plugins with
    ease. This has been a brief introduction to a massive topic, and I hope you can
    build on this knowledge to create plugins for any use case.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at another advanced concept – authentication.
    We will learn how to create login experiences on your website.
  prefs: []
  type: TYPE_NORMAL
