- en: Chapter 8. Using jQuery Effects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。使用jQuery效果
- en: Adding event handlers to any website is a necessary must; after all, we need
    some way to respond to legitimate events in our code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何网站上添加事件处理程序是一个必要的步骤；毕竟，我们需要一些方式来响应我们代码中的合法事件。
- en: 'The flip side of this is adding effects – done well, they can be hugely rewarding,
    although some of the novelty can wear off, particularly if you''ve used all of
    the core effects to death! Revitalize your sites with new, custom effects – we''ll
    see how to do this in this chapter, as well as managing the resulting queues.
    Over the next few pages, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，添加效果的反面是，如果做得好，它们可以带来巨大的回报，尽管其中一些新奇感可能会消失，特别是如果你已经过度使用了所有的核心效果！通过新的自定义效果使你的网站焕发活力
    - 我们将在本章中看到如何做到这一点，以及如何管理生成的队列。在接下来的几页中，我们将涵盖以下主题：
- en: Revisiting basic effects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重温基本效果
- en: Adding callbacks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加回调
- en: Constructing custom effects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建自定义效果
- en: Creating and managing the effect queue
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和管理效果队列
- en: Intrigued? Let's make a start…
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣吗？让我们开始吧...
- en: Revisiting effects
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重温效果
- en: A question – how many times have you visited a site to see content smoothly
    slide up, or gradually fade to nothing?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个问题 - 你多少次访问网站，看到内容平稳地向上滑动，或逐渐淡化至无？
- en: I'm sure that you will of course recognize these as effects provided in code;
    these can be anything from a simple slide up, to content appearing to fade from
    one image or element to another.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你当然会认出这些代码中提供的效果；这些可以是从简单的向上滑动到内容逐渐从一幅图像或元素淡入另一幅图像或元素的任何内容。
- en: Creating effects is a key consideration of any website. We've already touched
    on some methods earlier in the book in [Chapter 6](part0056.xhtml#aid-1LCVG1 "Chapter 6. Animating
    in jQuery"), *Animating with jQuery*. I'm sure we're all familiar with the basic
    code for fading or toggling elements. No doubt you will have used codes such as
    `$("blockquote").fadeToggle(400);` or `$("div.hidden").show(1250);` countless
    times when developing websites.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 创建效果是任何网站的重要考虑因素。我们在本书的早些时候已经涉及了一些方法，在[第6章](part0056.xhtml#aid-1LCVG1 "第6章。使用jQuery进行动画")中，*使用jQuery进行动画*。我相信我们都很熟悉淡入淡出或切换元素的基本代码。毫无疑问，在开发网站时，你会无数次地使用诸如`$("blockquote").fadeToggle(400);`或`$("div.hidden").show(1250);`这样的代码。
- en: Looks familiar? Over the next few pages, we'll touch on some additional tricks
    we can use to help push out the boat when it comes to adding effects, as well
    as considering some of the implications of using jQuery to provide these effects.
    Before we do so, there is an important consideration we need to clear up, which
    is to explore the key differences between simple animation and adding effects
    to elements.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很熟悉？在接下来的几页中，我们将介绍一些额外的技巧，可以帮助我们在添加效果时取得更好的效果，并考虑使用jQuery提供这些效果的一些影响。在此之前，有一个重要的问题需要澄清，那就是探索简单动画和向元素添加效果之间的关键区别。
- en: Exploring the differences between animation and effects
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索动画和效果之间的差异
- en: Some of you may think that we've covered the provision of effects when we touched
    on animating back in [Chapter 6](part0056.xhtml#aid-1LCVG1 "Chapter 6. Animating
    in jQuery"), *Animating with jQuery*. It is true that there is some cross-over;
    a quick look at the API list for jQuery Effects will show `.animate()` as a valid
    effects method.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 也许有些人会认为我们在[第6章](part0056.xhtml#aid-1LCVG1 "第6章。使用jQuery进行动画")中讨论动画时已经涵盖了效果的提供，这是正确的，它们之间确实有一些重叠；快速查看jQuery效果的API列表将显示`.animate()`作为有效的效果方法。
- en: However, there is an important distinction – the content we've already covered
    is about *moving* elements; providing effects will focus on controlling the *visibility*
    of content. The great thing though, is that we can link the two together. `.animate()`
    can be used to implement both movement and effects within code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一个重要的区别 - 我们已经讨论过的内容是关于*移动*元素的，而提供效果将专注于控制内容的*可见性*。不过，很棒的是，我们可以将这两者联系在一起。`.animate()`方法可以用来在代码中实现移动和效果。
- en: Now that little distinction has been cleared up, let's get into some action.
    We'll start with a look at adding custom easing functions to our effects.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这个小区别已经澄清了，让我们开始行动吧。我们将首先看一下如何向我们的效果添加自定义缓动函数。
- en: Creating custom effects
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义效果
- en: If you've spent any time applying effects to animated elements, then you will
    very likely have used `.animate()`, or one of the shortcut methods, such as `.fadeIn()`,
    `.show(),` or `.slideUp()`. All of them follow a similar format, where we need
    to provide at least a duration, type of easing, and potentially a callback function
    to either perform a task when the animation has completed, or log something to
    the console to this effect.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用过`.animate()`或其快捷方法，比如`.fadeIn()`、`.show()`或`.slideUp()`对动画元素应用效果，那么你很可能都使用过它们。所有这些方法都遵循类似的格式，至少需要提供一个持续时间、缓动类型，还有可能需要提供一个回调函数，在动画完成时执行一个任务，或者在控制台中记录一些内容。
- en: 'All too often though, we may decide to stick with the standard values such
    as `slow`, `fast`, or perhaps a numerical value such as `500`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们在决定时往往会坚持使用标准值，比如`slow`、`fast`，或者可能是一个数值，比如`500`：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There is absolutely nothing wrong with using this approach - except, it's very
    boring, and only using a fraction of what is possible.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法绝对没错，只是非常无聊，而且只能发挥出了很小一部分可能性。
- en: Over the next few pages, we'll explore some of the tricks available to broaden
    our knowledge when applying effects, and realize that we don't always have to
    stick with the tried and tested methods. Before we explore some of these tricks,
    it's worth learning a little about how some of these effects are handled within
    the Core jQuery library.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几页中，我们将探索一些技巧，用来拓宽我们在应用效果时的知识，了解到我们并不总是必须坚持已经验证过的方法。在我们探索这些技巧之前，不妨先了解一下这些效果在Core
    jQuery库中是如何处理的。
- en: Exploring the animate() method as the basis for effects
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索`animate()`方法作为效果的基础
- en: If you were asked to use a pre-configured effect such as `hide()` or `slideToggle()`,
    then you might be expecting to use a named function within jQuery.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你被要求使用预配置的效果，比如`hide()`或`slideToggle()`，那么你可能期望在jQuery内部使用一个命名函数。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It should be noted that the line numbers given in this section apply to the
    uncompressed version of jQuery 2.1.3, which is available from [http://code.jquery.com/jquery-2.1.3.js](http://code.jquery.com/jquery-2.1.3.js).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，本节中给出的行号适用于未压缩版本的jQuery 2.1.3，可从[http://code.jquery.com/jquery-2.1.3.js](http://code.jquery.com/jquery-2.1.3.js)获取。
- en: 'Well, this is true, but only in part: the preconfigured functions within jQuery
    are all shorthand pointers to `animate()`, as shown in or around lines **6829**
    to **6840**. They go through a two stage process:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这是对的，但只是部分正确：jQuery内部预配置的函数都是指向`animate()`的简写指针，就像在**6829**至**6840**行附近所示的那样。它们经过了两个阶段的处理：
- en: The first stage is to pass one of three values to the `genFX()` method, namely
    `show`, `hide`, or `toggle`
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一阶段是向`genFX()`方法传递三个值，即`show`、`hide`或`toggle`。
- en: This is then passed to `animate()` to produce the final effect, at lines **6708**
    to **6725**
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这之后传递给`animate()`方法来产生最终效果，在**6708**至**6725**行。
- en: 'A quick look in the code shows each of the values available within jQuery,
    and how they are passed to .animate():'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中快速查看每个可用的值以及它们如何传递给`.animate()`：
- en: '![Exploring the animate() method as the basis for effects](img/image00406.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![探索`animate()`方法作为效果的基础](img/image00406.jpeg)'
- en: 'We covered the use of `animate()` in some detail back in [Chapter 6](part0056.xhtml#aid-1LCVG1
    "Chapter 6. Animating in jQuery"), *Animating with jQuery*. It''s worth touching
    on the following few key points about using `animate()` within our code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第6章](part0056.xhtml#aid-1LCVG1 "第6章 jQuery动画") *使用jQuery进行动画* 中详细介绍了`animate()`的用法。以下是关于在我们的代码中使用`animate()`的几个关键要点：
- en: Only properties that take numeric values are supported, although there are some
    exceptions. Some values such as `backgroundColor`, can't be animated without a
    plugin (jQuery Color – [https://github.com/jquery/jquery-color](https://github.com/jquery/jquery-color),
    or jQuery UI – [http://www.jqueryui.com](http://www.jqueryui.com)), along with
    those that can take more than one value, such as `background-position`.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只能支持取数值的属性，虽然有一些例外情况。一些值，比如`backgroundColor`，没有插件的情况下是无法进行动画的（jQuery Color –
    [https://github.com/jquery/jquery-color](https://github.com/jquery/jquery-color),
    或 jQuery UI – [http://www.jqueryui.com](http://www.jqueryui.com)），还有一些属性可以取多个值，比如`background-position`。
- en: You can animate CSS properties by using any standard CSS unit where applicable
    – a full list can be viewed at [http://www.w3schools.com/cssref/css_units.asp](http://www.w3schools.com/cssref/css_units.asp).
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以通过使用适用的任何标准CSS单位来对CSS属性进行动画 – 完整列表可在[http://www.w3schools.com/cssref/css_units.asp](http://www.w3schools.com/cssref/css_units.asp)中查看。
- en: Elements can be moved using relative values, that are prefixed with `+=` or
    `-=` in front of the property value. If a duration of `0` is set, the animation
    will immediately set the elements to their end state.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素可以使用相对值移动，这些相对值在属性值前加上`+=`或`-=`。如果设置了持续时间为`0`，则动画将立即将元素设置为它们的最终状态。
- en: As a shortcut, if a value of `toggle` is passed, an animation will simply reverse
    from where it is and animate to that end.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为快捷方式，如果传递了`toggle`的值，动画将简单地从当前位置反转，并动画到目标位置。
- en: All CSS properties set via a single `animate()` method will animate at the same
    time.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过单个`animate()`方法设置的所有 CSS 属性将同时进行动画处理。
- en: Now that we've seen how custom effects are handled within the library, let's
    explore creating some new effects, which combine those already available within
    the library.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了库中如何处理自定义效果，让我们探索创建一些新的效果，这些效果结合了库中已经可用的效果。
- en: Putting custom effects into action
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将自定义效果付诸实践
- en: If we spent our time developing code that was restricted to using the default
    effects that are available within jQuery, we would quickly outgrow the limits
    of what can be done within it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们花费时间开发代码，限制在使用jQuery中可用的默认效果，我们很快就会超出它所能做的限制。
- en: To prevent this from happening, it is worth spending time working out what effects
    we really want to use, and to see if we can't build something to replicate them
    from within jQuery. To prove this, we're going to delve into some examples; our
    first one is to produce a toggle effect based on clicking a chosen element.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这种情况发生，值得花时间去研究我们真正想使用的效果，并看看我们是否可以从jQuery内部构建一些东西来复制它们。为了证明这一点，我们将深入一些示例；我们的第一个示例是基于点击选定元素产生一个切换效果。
- en: Creating a clickToggle handler
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个 clickToggle 处理程序
- en: The inspiration for the first of our three examples comes not from online comments,
    but from jQuery itself. The Core library had a toggle function available (as shown
    at [http://api.jquery.com/toggle-event/](http://api.jquery.com/toggle-event/)),
    which was deprecated back in version 1.8, and removed in 1.9.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们三个示例中的第一个的灵感不来自在线评论，而是来自jQuery本身。核心库有一个可用的切换函数（如[http://api.jquery.com/toggle-event/](http://api.jquery.com/toggle-event/)所示），在版本1.8中已弃用，在1.9中已移除。
- en: 'We''re going to explore how we can add similar functionality, using a mini-plugin,
    the idea being that one of two functions will be run, depending on the state of
    a value set in our plugin:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨如何添加类似的功能，使用一个小型插件，想法是根据插件中设置的值的状态运行两个函数中的一个：
- en: '![Creating a clickToggle handler](img/image00407.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![创建 clickToggle 处理程序](img/image00407.jpeg)'
- en: 'Let''s take a look and see what is required:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看需要什么：
- en: We'll start by extracting the relevant files from the code download for this
    book. For this demo, we'll need the `clicktoggle.css`, `jquery.min.js`, and `clicktoggle.html`
    files. Place the CSS file in the `css` subfolder, jQuery library in the `js` subfolder,
    and the markup file at the root of the project area.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从本书的代码下载中提取相关文件开始。对于此演示，我们需要`clicktoggle.css`、`jquery.min.js`和`clicktoggle.html`文件。将
    CSS 文件放在`css`子文件夹中，jQuery 库放在`js`子文件夹中，并将标记文件放在项目区域的根目录下。
- en: 'In a new file, we need to create our `clicktoggle()` event handler, so go ahead
    and add the following code, saving it as `clicktoggle.js`:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新文件中，我们需要创建我们的`clicktoggle()`事件处理程序，所以继续并添加以下代码，并将其保存为`clicktoggle.js`：
- en: '[PRE1]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `apply()` function is used to call the context for a function – for more
    details, see [http://api.jquery.com/Types/#Context.2C_Call_and_Apply](http://api.jquery.com/Types/#Context.2C_Call_and_Apply).
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`apply()`函数用于调用函数的上下文 - 更多细节，请参阅[http://api.jquery.com/Types/#Context.2C_Call_and_Apply](http://api.jquery.com/Types/#Context.2C_Call_and_Apply)。'
- en: 'Immediately below the `clicktoggle` event handler, add the following functions:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`clicktoggle`事件处理程序的下方立即添加以下函数：
- en: '[PRE2]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If all is well, we should see something similar to the screenshot shown at the
    start of the exercise, where we can see that the text has been clicked a few times.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们应该看到与练习开始时显示的屏幕截图类似的东西，在那里我们可以看到文本已经被点击了几次。
- en: Note
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A number of people have produced similar versions of this code - see [https://gist.github.com/gerbenvandijk/7542958](https://gist.github.com/gerbenvandijk/7542958)
    for one example; this version uses `data-` tags and combines the handling functions
    into one call.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 许多人已经产生了类似版本的代码 - 请参阅[https://gist.github.com/gerbenvandijk/7542958](https://gist.github.com/gerbenvandijk/7542958)作为一个例子；这个版本使用了`data-`标签并将处理函数合并到一个调用中。
- en: 'Okay, let''s move on and take a look at another example: in this one, we''re
    going to create a slide-fade toggle effect. This will use similar principles to
    the previous example, where we check the state of the element. This time, we''ll
    use the `:visible` pseudo-selector to confirm which callback message should be
    rendered on screen.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们继续，看看另一个示例：在这个示例中，我们将创建一个滑动淡入淡出切换效果。这将使用与前面示例相似的原理，我们将检查元素的状态。这次，我们将使用
    `:visible` 伪选择器来确认应该在屏幕上呈现哪个回调消息。
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As an idea, why not try combining this plugin with the Toggles plugin available
    at [http://simontabor.com/labs/toggles/](http://simontabor.com/labs/toggles/)?
    This could be used to produce some nice on/off buttons. We can then fire off events
    that are handled by the `clickToggle` plugin created in this example.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个想法，为什么不尝试将这个插件与 [Toggles 插件](http://simontabor.com/labs/toggles/)结合使用呢？这可以用来制作一些漂亮的开关按钮。我们然后可以触发由本例中创建的
    `clickToggle` 插件处理的事件。
- en: Sliding content with a slide-fade Toggle
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用滑动淡入淡出切换内容
- en: In our previous example, our effect appeared very abruptly on screen – it was
    either one or the other statement, but nothing in between!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的示例中，我们的效果在屏幕上出现得非常突然 - 要么是一个声明，要么是另一个声明，但没有中间状态！
- en: 'From a visual effect, this isn''t always ideal; it gives a softer impression
    if we can make the transition smoother. Enter the Slide-Fade Toggle plugin. Let''s
    take a look and see how to create it:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从视觉效果来看，这并不总是理想的；如果我们能让过渡更平滑，那会给人留下更柔和的印象。这就是滑动淡入淡出切换插件的作用。让我们看看如何创建它：
- en: We'll start, as always, by extracting the relevant files that we need from the
    code download that accompanies this book. For this demo, we'll need the usual
    `jquery.min.js`, along with `slidefade.css` and `slidefade.html`. The JavaScript
    files need to be dropped into the `js` subfolder, the style sheet into the `css`
    subfolder, and the HTML markup file at the root of our project area.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将像往常一样，从附带本书的代码下载中提取我们需要的相关文件。对于这个演示，我们将需要常见的 `jquery.min.js`，以及 `slidefade.css`
    和 `slidefade.html`。JavaScript 文件需要放在 `js` 子文件夹中，样式表需要放在 `css` 子文件夹中，HTML 标记文件需要放在我们项目区域的根目录中。
- en: 'In a new file, let''s go ahead and create the `slideFadeToggle` effect. Add
    the following lines, saving it as `slidefade.js` in the `js` subfolder:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新文件中，让我们继续创建 `slideFadeToggle` 效果。将以下行添加到文件中，将其保存为 `slidefade.js`，并将其放在 `js`
    子文件夹中：
- en: '[PRE3]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If all is well, then when we preview the results in a browser, we should see
    the dark grey square fade as it slides up, once we click on the button. This is
    shown in the following images:![Sliding content with a slide-fade Toggle](img/image00408.jpeg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，那么当我们在浏览器中预览结果时，我们应该看到黑灰色的方块在我们单击按钮后淡出，这在以下图片中显示：![滑动淡入淡出切换内容](img/image00408.jpeg)
- en: 'The code creates a nice alert effect – it could be used to display a suitable
    message to visitors within your site as it slides into view. We''ve based our
    plugin on toggling between two states. If your preference is to simply use the
    equivalent of the `fadeIn()` or `fadeout()` states on their own, then we could
    easily use either of these functions, as appropriate:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 代码创建了一个漂亮的警告效果 - 它可以用来在您的网站内向访问者显示适当的消息，因为它滑入视图。我们的插件是基于在两个状态之间切换。如果您的首选是仅仅使用
    `fadeIn()` 或 `fadeOut()` 状态的等效值，那么我们可以根据需要轻松地使用其中任何一个函数：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Okay, let''s move on. We''ve created some custom effects, but it still feels
    like it''s missing something. Ah yes – I know what: how about easing from one
    state to another? (And yes, pun absolutely intended!)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们继续。我们已经创建了一些自定义效果，但感觉还是缺了点什么。啊，是的 - 我知道了：从一个状态到另一个状态的缓动怎么样？（是的，绝对是双关语！）
- en: Instead of simply setting slow, fast, normal, or even a numeric value to control
    the duration of the effect, we can also add an easing capability that gives the
    effect some much needed action. Let's delve in and see what is involved.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以添加一个缓动功能，不仅可以简单地设置慢速、快速、正常速度甚至是数字值来控制效果的持续时间，还可以增加一个缓动功能，使效果更具动感。让我们深入了解一下涉及到的内容。
- en: Applying custom easing functions to effects
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对效果应用自定义缓动函数
- en: 'If someone mentions the word "easing" to you, I''ll bet one of two things will
    happen:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人对你提到 "缓动" 这个词，我敢打赌会发生两件事中的一件：
- en: You will most likely think that you'll need to use jQuery UI, which has the
    potential to add a fairly significant chunk of code to the page
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你很可能会认为你需要使用 jQuery UI，这可能会向页面添加相当大的代码块
- en: You'll run away, at the thought of having to work out some horrendous math!
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能会逃跑，一想到要解决一些可怕的数学问题！
- en: The irony here though, is that the answer to both could be yes and no (at least
    to the first part of the second comment). Hold on – how come?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，这里的讽刺是，对于两者的答案可能是肯定的也可能是否定的（至少对于第二个评论的前半部分而言）。等等，怎么回事？
- en: The reason for this is that you most certainly don't need jQuery UI to provide
    special easing functions. Granted, if you are already using it, then it would
    make sense to use the effects contained within. While you might have to work out
    some maths, this would only be necessary if you really want to get stuck into
    complex formulae, which isn't always necessary. Intrigued? Let me explain more.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 之所以如此，是因为你绝对不需要 jQuery UI 提供特殊的缓动函数。当然，如果你已经在使用它，那么使用其中包含的效果是有道理的。虽然你可能需要计算一些数学问题，但这只有在你真正想要深入研究复杂的公式时才是必要的。感兴趣吗？让我解释一下。
- en: 'Adding an easing to code need not be any more than a simple function that uses
    any one of five different values, as shown in the following table:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将缓动添加到代码中不必超过一个简单的函数，该函数使用下表中的五个不同值之一，如下表所示：
- en: '| Value | Purpose |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 目的 |'
- en: '| --- | --- |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `x` | `null`Note that although `x` is always included, it is nearly always
    set as a null value |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `x` | `null`请注意，虽然始终包含 `x`，但几乎总是设置为 null 值。 |'
- en: '| `t` | Time elapsed. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `t` | 经过的时间。 |'
- en: '| `b` | Initial value |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `b` | 初始值 |'
- en: '| `c` | Amount of change |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `c` | 变化的量 |'
- en: '| `d` | Duration |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `d` | 持续时间 |'
- en: 'In the right combination, they can be used to produce an easing, such as the
    `easeOutCirc` effect, available within jQuery UI:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在正确的组合中，它们可以用来产生一个缓动效果，例如 jQuery UI 中可用的 `easeOutCirc` 效果：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Taking it further, we can always work out our own custom easing functions. A
    good example is outlined at [http://tumblr.ximi.io/post/9587655506/custom-easing-function-in-jquery](http://tumblr.ximi.io/post/9587655506/custom-easing-function-in-jquery),
    along with comments indicating what needs to happen to make it work in jQuery.
    As an alternative, you can also try [http://gizma.com/easing/](http://gizma.com/easing/),
    which lists a number of examples of similar effects.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步说，我们总是可以计算出自己的自定义缓动函数。一个很好的例子在 [http://tumblr.ximi.io/post/9587655506/custom-easing-function-in-jquery](http://tumblr.ximi.io/post/9587655506/custom-easing-function-in-jquery)
    中概述，其中包括使其在 jQuery 中运行所需的评论。作为替代方案，你也可以尝试 [http://gizma.com/easing/](http://gizma.com/easing/)，其中列出了几个类似效果的例子。
- en: I think it's time for us to get practical. Let's dive in and make use of these
    values to create our own easing function. We'll start with adding a predefined
    easing to one of our previous examples, before stripping it out and replacing
    it with a custom creation.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为现在是我们实践的时候了。让我们深入其中，利用这些值来创建自己的缓动函数。我们将从为我们之前的示例添加一个预定义的缓动开始，然后将其剥离并替换为自定义创建。
- en: Adding a custom easing to our effect
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加自定义缓动到我们的效果中
- en: We could of course use the likes of the Easing plugin which is available to
    download from [http://gsgd.co.uk/sandbox/jquery/easing/](http://gsgd.co.uk/sandbox/jquery/easing/)
    or even jQuery UI itself. There is no need though. Adding a basic easing effect
    only requires a few lines of code.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以使用像 Easing 插件这样的工具，可以从 [http://gsgd.co.uk/sandbox/jquery/easing/](http://gsgd.co.uk/sandbox/jquery/easing/)
    下载，或者甚至使用 jQuery UI 本身。但其实并不需要。添加基本的缓动效果只需要几行代码。
- en: 'Although the math involved may not be easy, it is a cinch to add in a specific
    easing value. Let''s take a look at a couple of examples:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管涉及的数学可能不容易，但添加特定的缓动值却很容易。让我们看一些例子：
- en: For this demo, we'll start by extracting the relevant files from the code download
    that accompanies this book. We'll need the `slidefade.html`, `slidefade.js`, `jquery.min.js,`
    and `slidefade.css` files. These need to be saved to the relevant folders within
    our project area.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个演示，我们将从本书附带的代码下载中提取相关文件。我们需要 `slidefade.html`、`slidefade.js`、`jquery.min.js`
    和 `slidefade.css` 文件。这些文件需要保存到我们项目区域的相应文件夹中。
- en: 'In a copy of `slidefade.js`, we need to add our easing. Add the following code
    immediately at the start of the file, before the `slideFadeToggle()` function:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `slidefade.js` 的副本中，我们需要添加我们的缓动效果。在 `slideFadeToggle()` 函数之前，立即在文件开始处添加以下代码：
- en: '[PRE6]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Although we''ve added our easing effect, we still need to tell our event handler
    to use it. For this, we need to modify the code as shown next:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽管我们已经添加了缓动效果，但我们仍然需要告诉我们的事件处理程序去使用它。为此，我们需要修改代码如下所示：
- en: '[PRE7]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save the files as `slidefadeeasing.html`, `slidefadeeasing.css`, and `slidefadeeasing.js`,
    then preview the results in a browser. If all is well, we should notice a difference
    in how the `<div>` element collapses and fades away to nothing.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`slidefadeeasing.html`、`slidefadeeasing.css`和`slidefadeeasing.js`，然后在浏览器中预览结果。如果一切正常，我们应该注意到`<div>`元素在收缩和渐隐过程中有所不同。
- en: 'At this stage, we have a perfect basis for creating our own custom easing functions.
    To test this, try the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们已经有了创建自定义缓动函数的完美基础。为了测试这一点，请尝试以下操作：
- en: 'Browse to the Custom Easing Function Explorer site, which is located at [http://www.madeinflex.com/img/entries/2007/05/customeasingexplorer.html](http://www.madeinflex.com/img/entries/2007/05/customeasingexplorer.html),
    and then using the sliders, set the following values:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到位于[http://www.madeinflex.com/img/entries/2007/05/customeasingexplorer.html](http://www.madeinflex.com/img/entries/2007/05/customeasingexplorer.html)的自定义缓动函数资源管理器网站，然后使用滑块设置以下值：
- en: '`Offset: 420`'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Offset: 420`'
- en: '`P1: 900`'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`P1: 900`'
- en: '`P2: -144`'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`P2: -144`'
- en: '`P3: 660`'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`P3: 660`'
- en: '`P4: 686`'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`P4: 686`'
- en: '`P5: 868`'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`P5: 868`'
- en: 'This will produce the following equation function:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将生成以下方程函数：
- en: '[PRE8]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As it stands, our equation won''t work when used in our code; we need to edit
    it. Remove all instances of :`Number`, then add an `x` before the `t` in the parameters.
    The code will look like the following when edited – I''ve assigned an easing name
    to it:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就目前而言，我们的方程在代码中使用时不会起作用；我们需要编辑它。删除所有`:Number`的实例，然后在参数中的`t`之前添加一个`x`。当编辑后，代码将如下所示
    – 我给它赋了一个缓动名称：
- en: '[PRE9]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Drop this into `slidefade.js`, then amend the easing name used in the `document.ready()`
    block, and run the code. If all is well, our new custom easing will be used when
    animating the `<div>` element.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其放入`slidefade.js`，然后修改`document.ready()`块中使用的缓动名称，并运行代码。如果一切正常，我们将在动画`<div>`元素时使用新的自定义缓动。
- en: This opens up lots of possibilities. It is feasible to write the functions we've
    just generated manually, but it takes a lot of effort. The best result is to use
    an easing function generator to produce the results for us.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这开启了许多可能性。手动编写我们刚生成的函数是可行的，但需要大量的努力。最好的结果是使用缓动函数生成器为我们生成结果。
- en: Now, we can continue to work with functions such as the two we've examined here,
    but this seems like a tough nut to have to crack each time we want to provide
    some variety when animating elements! We could equally be lazy, and simply import
    effects from jQuery UI, but that also brings across a lot of redundant baggage;
    jQuery should be about providing a light touch approach!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续使用像我们在这里检查的两个函数一样的函数，但这似乎是一个很难解决的难题，每次我们想要为动画元素提供一些变化时！我们也可以懒惰一些，简单地从jQuery
    UI中导入效果，但这也会带来很多不必要的负担；jQuery应该是提供轻量级方法的！
- en: Instead, we can use a far easier option. While many might initially be scared
    of using Bezier curves, some kind souls have already done most of the heavy lifting
    for us, which makes it a breeze to use when creating effects.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以使用一种更简单的选项。虽然许多人最初可能会害怕使用贝塞尔曲线，但有些善良的人已经为我们完成了大部分繁重的工作，这使得在创建效果时使用起来非常轻松。
- en: Using Bezier curves in effects
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在效果中使用贝塞尔曲线
- en: A question – hands up if you can work out what Renault and Citroen have in common,
    apart from being two rival care manufacturers? The answer is the subject of our
    next topic – Bezier curves!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一个问题 – 请举手，如果您能猜出雷诺和雪铁龙除了是两个竞争对手汽车制造商之外，还有什么共同之处？答案是我们下一个话题的主题 – 贝塞尔曲线！
- en: Yes, it may be hard to believe, but Bezier curves were used to design car bodies
    at Renault back in 1962, although Citroen beat them to it, using them as early
    as 1959.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，也许很难相信，但贝塞尔曲线曾在1962年用于雷诺的汽车设计中，尽管在此之前雪铁龙就已经使用了，早在1959年。
- en: 'However, I digress – we''re here to look at using Bezier curves with jQuery,
    such as the next example:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我岔开了话题 – 我们在这里是来看如何在jQuery中使用贝塞尔曲线的，例如下一个示例：
- en: '![Using Bezier curves in effects](img/image00409.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![在效果中使用贝塞尔曲线](img/image00409.jpeg)'
- en: Tip
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can view this example at [http://cubic-bezier.com/#.25,.99,.73,.44](http://cubic-bezier.com/#.25,.99,.73,.44).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://cubic-bezier.com/#.25,.99,.73,.44](http://cubic-bezier.com/#.25,.99,.73,.44)查看此示例。
- en: These are not supported by default; an attempt was made to incorporate support
    for them, which wasn't successful. Instead, the easiest way to include them is
    to use the Bez plugin, which is available from [https://github.com/rdallasgray/bez](https://github.com/rdallasgray/bez).
    To see how easy it is to use, let's take a look at it in action.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这些默认不受支持；尝试过将其支持整合进去，但没有成功。相反，包含它们最简单的方法是使用Bez插件，可从[https://github.com/rdallasgray/bez](https://github.com/rdallasgray/bez)获取。为了看到它的易用性，让我们看看它的实际效果。
- en: Adding Bezier curve support
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加贝塞尔曲线支持
- en: There are a number of online sites that show off examples of easing functions;
    my personal favorites are [http://easings.net/](http://easings.net/) and [http://www.cubic-bezier.com](http://www.cubic-bezier.com).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多在线网站展示了缓动函数的示例；我的个人喜爱是[http://easings.net/](http://easings.net/)和[http://www.cubic-bezier.com](http://www.cubic-bezier.com)。
- en: The former, by Andrey Sitnik, is one we visited back in [Chapter 6](part0056.xhtml#aid-1LCVG1
    "Chapter 6. Animating in jQuery"), *Animating jQuery*. This provides working examples
    of all the easings available with jQuery. If we click on one, we can see various
    ways they can either be created or used within jQuery.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 前者是Andrey Sitnik创建的，我们在[第6章](part0056.xhtml#aid-1LCVG1 "第6章。在jQuery中进行动画")*使用jQuery进行动画*中介绍过。其中提供了jQuery可用的所有缓动函数的工作示例。如果我们点击其中一个，可以看到它们可以被创造或在jQuery中以不同方式使用的各种方法。
- en: 'The easiest way to provide support is using the aforementioned Bez plugin.
    I think it''s time for a short demo now:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 提供支持的最简单方法是使用前面提到的Bez插件。现在是进行一个简短演示的时候了：
- en: For this demo, we'll start by extracting the relevant files from a copy of the
    code download that accompanies this book. We'll need the `blindtoggle.html`, `jquery.min.css`,
    `blindtoggle.css,` and `jquery.bez.min.js` files. These need to be stored in the
    relevant subfolders of our project area.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个演示，我们将从随本书附带的代码下载中提取相关文件。我们需要`blindtoggle.html`、`jquery.min.css`、`blindtoggle.css`和`jquery.bez.min.js`文件。这些文件需要存储在项目区域的相应子文件夹中。
- en: 'In a new file, let''s go ahead and create the jQuery effect. In this instance,
    add the following to a new file, saving it as `blindtoggle.js` within the `js`
    subfolder of our project area:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新文件中，让我们继续创建jQuery效果。在这种情况下，将以下内容添加到一个新文件中，并将其保存为`blindtoggle.js`，放置在项目区域的`js`子文件夹中：
- en: '[PRE10]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If we preview the results in a browser, we can see the text first scroll up,
    followed quickly by the brown background, as seen in the next image:![Adding Bezier
    curve support](img/image00410.jpeg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中预览结果，可以看到文本首先向上滚动，然后很快出现棕色背景，如下图所示：![添加贝塞尔曲线支持](img/image00410.jpeg)
- en: 'It seems like a fair bit of code, but the real key to this demo lies in the
    following line:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎是相当多的代码，但这个演示的真正关键在于以下一行：
- en: '[PRE11]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We're using the `$.bez` plugin to create our easing functions from cubic-bezier
    values. The main reason for this is to avoid the need to provide both CSS3 and
    jQuery based cubic-bezier functions; the two are not mutually compatible. The
    plugin gets around this by allowing us to provide easing functions as cubic-bezier
    values, to match those that can be used in style sheets.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用`$.bez`插件从cubic-bezier值创建我们的缓动函数。这样做的主要原因是避免同时提供基于CSS3和基于jQuery的cubic-bezier函数的需求；这两者不是相互兼容的。插件通过允许我们提供缓动函数作为cubic-bezier值来解决这个问题，以匹配可以在样式表中使用的值。
- en: 'Adding cubic-bezier support to our code opens up a world of possibilities.
    To get you started, following are some links as inspiration:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码中添加cubic-bezier支持打开了无限的可能性。以下是一些启发的链接，让你开始：
- en: Want to replace the standard jQuery effects such as `easeOutCubic`? No problem
    – [http://rapiddg.com/blog/css3-transiton-extras-jquery-easing-custom-bezier-curves](http://rapiddg.com/blog/css3-transiton-extras-jquery-easing-custom-bezier-curves)
    has a list of cubic-bezier values that will provide the equivalent functionality
    using CSS.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想要替换标准的jQuery效果，比如`easeOutCubic`吗？没问题 - [http://rapiddg.com/blog/css3-transiton-extras-jquery-easing-custom-bezier-curves](http://rapiddg.com/blog/css3-transiton-extras-jquery-easing-custom-bezier-curves)提供了一组cubic-bezier值，可以使用CSS提供等效功能。
- en: If you happen to work with CSS preprocessors such as Less, then Kirk Strobeck
    has a list of easing functions for Less, which is available at [https://github.com/kirkstrobeck/bootstrap/blob/master/less/easing.less](https://github.com/kirkstrobeck/bootstrap/blob/master/less/easing.less).
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你使用诸如Less之类的CSS预处理器，那么Kirk Strobeck为Less提供了一组缓动函数列表，可在[https://github.com/kirkstrobeck/bootstrap/blob/master/less/easing.less](https://github.com/kirkstrobeck/bootstrap/blob/master/less/easing.less)找到。
- en: We talked briefly about the tool available at [http://www.cubic-bezier.com](http://www.cubic-bezier.com),
    for working out the co-ordinate values. You can read about the inspiration behind
    this awesome tool, from the creator Lea Verou at [http://lea.verou.me/2011/09/a-better-tool-for-cubic-bezier-easing/](http://lea.verou.me/2011/09/a-better-tool-for-cubic-bezier-easing/).
    An alternative tool is also available at [http://matthewlein.com/ceaser/](http://matthewlein.com/ceaser/),
    although this is not so easy to use, and is geared more towards CSS values.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们简要讨论了位于[http://www.cubic-bezier.com](http://www.cubic-bezier.com)的工具，用于计算坐标值。你可以阅读这个令人敬畏的工具的灵感来源，创作者Lea
    Verou的文章，网址是[http://lea.verou.me/2011/09/a-better-tool-for-cubic-bezier-easing/](http://lea.verou.me/2011/09/a-better-tool-for-cubic-bezier-easing/)。还有另一个工具可供选择，位于[http://matthewlein.com/ceaser/](http://matthewlein.com/ceaser/)，虽然这个工具不太容易使用，而且更倾向于CSS值。
- en: It's worth spending time getting familiar with using cubic-bezier values. It's
    a cinch to provide them, so it's over to you to create some really cool effects!
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 值得花时间熟悉使用cubic-bezier值。提供它们非常简单，所以现在轮到你创建一些真正酷炫的效果了！
- en: Using pure CSS as an alternative
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用纯CSS作为替代方案
- en: When developing with jQuery, it's all too easy to fall into the trap of thinking
    that the effects must be provided by jQuery. It's a perfectly understandable mistake
    to make.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用jQuery进行开发时，很容易陷入认为效果必须由jQuery提供的陷阱中。这是一个完全可以理解的错误。
- en: The key to becoming a more rounded developer is to understand the impact of
    using jQuery to provide such an effect.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 成为一个更全面的开发者的关键是了解使用jQuery提供这样一个效果的影响。
- en: 'On older browsers, we may not have had a choice. However, on newer browsers,
    we do. Instead of simply using an effect such as `slideDown()`, consider whether
    you can achieve the same (or very similar) effect using CSS. For example, how
    about trying the following as an alternative to `slideDown()`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在旧版浏览器上，我们可能没有选择。然而，在新版浏览器上，我们有选择。不要仅仅使用诸如`slideDown()`这样的效果，考虑是否可以使用CSS来实现相同（或非常相似）的效果。例如，作为`slideDown()`的替代方案，可以尝试以下操作：
- en: '[PRE12]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can then shift our focus to simply changing the assigned CSS class, thus:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以将重点放在简单地更改分配的CSS类上，如下所示：
- en: '[PRE13]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Ah, but – this is a book about mastering jQuery, right? And why would we want
    to avoid using jQuery code? Well – to quote Polonius from Shakespeare's *Hamlet*
    - "…Though this be madness, yet there is method in't". Or, to put it another way,
    there is a very sensible reason for following this principle.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 啊，但是——这是一本关于精通jQuery的书，对吧？我们为什么要避免使用jQuery代码呢？嗯——引用莎士比亚《哈姆雷特》中的波洛尼斯——“……虽然这有点疯狂，但其中确有方法。”或者，换句话说，遵循这一原则有一个非常明智的理由。
- en: jQuery is an inherently heavy library, weighing at 82 KB for a default minified
    copy of version 2.1.3\. Granted, work is being done to remove redundant functionality,
    and yes, we can always remove elements we don't need.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery是一个本质上较重的库，对于默认的版本2.1.3的最小化副本来说，它的体积为82 KB。当然，正在做一些工作来移除冗余功能，是的，我们总是可以移除我们不需要的元素。
- en: But, jQuery is resource hungry; this puts an unnecessary burden on your site.
    Instead, it's far more sensible to use functionality such as `toggleClass()` –
    as we have here – to switch classes. We can then maintain separation with CSS
    classes being stored in the style sheet.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，jQuery资源消耗大，这给你的站点增加了不必要的负担。相反，更明智的做法是使用诸如`toggleClass()`这样的功能，就像我们在这里做的一样，来切换类。然后我们可以通过将CSS类存储在样式表中来保持分离。
- en: It all comes down to your requirements. If, for example, you only need to produce
    a couple of effects, then there is little point in pulling in jQuery for this
    job. Instead, we can use CSS to create these effects, and leave jQuery for where
    it will add most value in providing the heavy lifting within the site itself.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都取决于你的需求。例如，如果你只需要产生一些效果，那么将jQuery引入此任务中就没有太多意义。相反，我们可以使用CSS来创建这些效果，并将jQuery留给在站点本身提供大部分价值的地方。
- en: Note
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To prove a point, have a look at the `replacejquery.html` demo in the code download
    that accompanies this book. You will need to extract the `replacejquery.css` file
    too, to get it to work. This code creates a very basic, but functional slider
    effect. Look carefully, and you should not see any jQuery in sight…!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明一点，在伴随本书的代码下载中查看`replacejquery.html`演示。你还需要提取`replacejquery.css`文件，以使其正常工作。这段代码创建了一个非常基本但功能齐全的滑块效果。仔细观察，你应该看不到任何jQuery的影子……！
- en: Now, don't get me wrong. There may be some instances where jQuery is a must
    (if for example supporting an older browser), or circumstances dictate that a
    neater option requires use of the library (we can't chain when using pure CSS).
    In these cases, we have to accept the extra burden.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，别误会。可能有一些情况下必须使用 jQuery（例如支持旧版本浏览器），或者情况要求使用该库能提供一个更整洁的选择（我们不能在纯 CSS 中进行链式操作）。在这些情况下，我们必须接受额外的负担。
- en: 'To prove though that this should be the exception rather than the rule, following
    are some examples to entice you:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明这应该是例外而不是规则，以下是一些吸引你的例子：
- en: Take a look at the well-known library `animate.css` by Dan Eden (available at
    [http://daneden.github.io/animate.css/](http://daneden.github.io/animate.css/)).
    This contains lots of CSS-only animations that can be imported into your code.
    If you do need to use jQuery, then the Animo jquery plugin at [http://labs.bigroomstudios.com/libraries/animo-js](http://labs.bigroomstudios.com/libraries/animo-js)
    is worth a look – this uses the `animate.css` library.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看一看 Dan Eden 创作的著名库 `animate.css`（在[http://daneden.github.io/animate.css/](http://daneden.github.io/animate.css/)可用）。其中包含许多仅使用
    CSS 的动画可以导入到你的代码中。如果确实需要使用 jQuery，那么 Animo jQuery 插件在[http://labs.bigroomstudios.com/libraries/animo-js](http://labs.bigroomstudios.com/libraries/animo-js)也值得一看——它使用了
    `animate.css` 库。
- en: Have a look at [http://rapiddg.com/blog/css3-transiton-extras-jquery-easing-custom-bezier-curves](http://rapiddg.com/blog/css3-transiton-extras-jquery-easing-custom-bezier-curves).
    In the table about half way down, is a list of Bezier curve equivalents for most
    (if not all) of the easing effects available when using jQuery. The trick here
    is to not use the extra functions that we've created in previous examples, but
    to simply use `animate()` and the Bez plugin. The latter will be cached, helping
    to reduce the load on the server too!
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看一看[http://rapiddg.com/blog/css3-transiton-extras-jquery-easing-custom-bezier-curves](http://rapiddg.com/blog/css3-transiton-extras-jquery-easing-custom-bezier-curves)。在表格的中间位置左右，有一个关于大部分（如果不是全部的话）使用
    jQuery 时可用的缓动效果的贝塞尔曲线等价列表。这里的诀窍是不使用我们在之前例子中创建的额外函数，而是简单地使用 `animate()` 和 Bez 插件。后者将被缓存，有助于减少服务器的负载！
- en: A simple, but effective example of using CSS3 to provide a simple image fade-in
    is available at [http://cssnerd.com/2012/04/03/jquery-like-pure-css3-image-fade-in/](http://cssnerd.com/2012/04/03/jquery-like-pure-css3-image-fade-in/).
    The fade transition could use a slightly longer period, but it shows the effect
    well.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CSS3 提供简单图像淡入的一个简单而有效的例子可以在[http://cssnerd.com/2012/04/03/jquery-like-pure-css3-image-fade-in/](http://cssnerd.com/2012/04/03/jquery-like-pure-css3-image-fade-in/)找到。淡入过渡可能需要稍长的时间，但它展示了效果。
- en: The key message here is that it isn't always necessary to use jQuery – part
    of becoming a better developer is to work out when we should and should not resort
    to using a sledge hammer to crack that nut!
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键信息是并不总是需要使用 jQuery —— 成为更好的开发者的一部分是要弄清楚何时应该以及何时不应该使用大锤来解决问题！
- en: Okay, time to crack on (sorry, pun intended). Let's take a quick look at adding
    callbacks, and how with a change of mindset, we can replace this with an improved
    alternative that makes for easier use within jQuery.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，该继续了（抱歉，开了个玩笑）。让我们快速看看如何添加回调，以及如何改变思维方式，用一个更好的替代方案来替换它，使其更容易在 jQuery 中使用。
- en: Adding callbacks to our effects
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的效果中添加回调
- en: 'Okay, so we''ve created our effect, and set it to run. What if we wanted to
    be alerted when it completes, or even if it fails? Easy! We can provide a callback,
    as long as we pass a function (with or without parameters). Then we can ask jQuery
    to perform an action once the effect is completed, as shown in the following example:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经创建了我们的效果，并设置了运行方式。如果我们希望在完成时或者失败时得到提醒呢？很简单！只要我们提供一个回调函数（带参数或不带参数都可以）。然后我们可以要求
    jQuery 在效果完成后执行一个动作，就像下面的例子所示：
- en: '[PRE14]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: It's a perfectly workable way of being notified, and a breeze to implement.
    But it's not without its shortcomings. Two of the principal ones are maintaining
    control over when and how the callback is executed, and only being able to run
    one callback.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个完全可行的通知方式，而且实现起来非常轻松。但它并不是没有缺点。其中两个主要缺点是无法控制回调何时以及如何执行，以及只能运行一个回调。
- en: Thankfully, we are not obliged to use standard callbacks, as jQuery's Deferreds
    comes to the rescue. We touched on using it back in [Chapter 5](part0047.xhtml#aid-1CQAE1
    "Chapter 5. Integrating AJAX"), *Integrating AJAX*. The beauty about Deferreds
    and Promises is that they can be applied to any jQuery functionality; events are
    particularly suited for this purpose. Let's take a look at how we can make use
    of this functionality, within the context of effects.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 庆幸的是，我们不必使用标准的回调函数，因为 jQuery 的 Deferreds 来拯救我们了。我们在[第 5 章](part0047.xhtml#aid-1CQAE1
    "第 5 章。集成 AJAX") *集成 AJAX*中曾提及过它的使用。Deferreds 和 Promises 的美妙之处在于它们可以应用于任何 jQuery
    功能；事件特别适用于此目的。让我们看看在效果的上下文中我们如何利用这个功能。
- en: Controlling content with jQuery's Promises
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 jQuery 的 Promises 控制内容
- en: Promises, promises – how many times have I heard that phrase, I wonder?
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Promises，promises - 我想我已经听到这个短语多少次了。
- en: Unlike in real life, when promises made are often broken, we can always guarantee
    that Promises made in jQuery will be satisfied at some point. Granted, the answer
    may not always be positive one, but yes, there will at least be a response to
    a Promise.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 与现实生活不同，承诺经常被违背，我们可以保证 jQuery 中的 Promises 最终会得到满足。当然，答案可能并不总是积极的，但是，是的，至少会有对
    Promise 的响应。
- en: A question though, I hear you ask – why, if most events already have callback
    options built in, do we need to use jQuery's `.promises()`?
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我听到你在问一个问题 - 如果大多数事件已经内置了回调选项，那么为什么我们需要使用 jQuery 的 `.promises()`？
- en: 'The simple answer is that we have far more control over constructing and reading
    Promises. For example, we can set a single callback that can be applied to multiple
    Promises; we can even set a Promise to only fire once, if needed! The beauty though
    is that using Promises makes it easier to read the code, and chain multiple methods
    together:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的答案是，我们可以更好地控制构建和读取 Promises。例如，我们可以设置一个单一的回调，可以应用于多个 Promises；我们甚至可以设置一个
    Promise 只在需要时触发一次！但美妙之处在于使用 Promises 更容易阅读代码，并链接多个方法在一起：
- en: '[PRE15]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We can even hive off the main effect into a separate function, then chain that
    function to the Promise to determine how it should be handled within our code.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以将主要效果分离到一个单独的函数中，然后将该函数链接到 Promise 中，以确定在我们的代码中如何处理它。
- en: 'To see how easy it is to combine the two, let''s take a moment to consider
    the following simple example, which uses the `slideUp()` effect in jQuery:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到如何简单地结合两者，让我们花点时间考虑下面的简单示例，它使用 jQuery 中的 `slideUp()` 效果：
- en: '![Controlling content with jQuery''s Promises](img/image00411.jpeg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![用 jQuery 的 Promises 控制内容](img/image00411.jpeg)'
- en: We'll start by extracting the `promises.html`, `promises.css,` and `jquery.min.js`
    files. Go ahead and store these in the relevant folders within our project area.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从 `promises.html`、`promises.css` 和 `jquery.min.js` 文件中提取出来。继续将它们存储在我们项目区域的相关文件夹中。
- en: In a new file, add the following code— this contains a click handler for the
    button in our markup file, that will first slide up the `<li>` items, then display
    a notice on screen when this is completed.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新文件中，添加以下代码—这包含了一个点击处理程序，用于我们标记文件中的按钮，当完成时首先滑动 `<li>` 项，然后在屏幕上显示通知。
- en: '[PRE16]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Try running the demo in a browser. If all is well, we should see the three list
    items roll up when clicking on the button on screen, as shown in the screenshot
    at the start of this section.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试在浏览器中运行演示。如果一切顺利，当点击屏幕上的按钮时，我们应该看到三个列表项被卷起，就像本节开头的截图中所示。
- en: This simple demo illustrates perfectly how we can use Promises to make our code
    more readable. Sorry to disappoint you if you were expecting more! The key here
    though is not necessarily about the *technical capability* of providing a callback,
    but the *flexibility* and *readability* gained from using Promises.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的演示完美地说明了我们如何使用 Promises 使我们的代码更易读。如果你期望更多的话，很抱歉让你失望了！但这里的关键并不一定是提供回调的 *技术能力*，而是使用
    Promises 带来的 *灵活性* 和 *可读性*。
- en: Note
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is worth noting in this example that we are using the jQuery object's `promise()`
    method in this instance – we should ideally use a different object as the basis
    for the Promise.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在这个示例中，我们使用了 jQuery 对象的 `promise()` 方法 - 在这种情况下，我们最好使用不同的对象作为 Promise
    的基础。
- en: To really see how Promises can be used, take a look at [http://jsfiddle.net/6sKRC/](http://jsfiddle.net/6sKRC/),
    which shows a working example in a JSFiddle. This extends the `slideUp()` method
    to remove the elements in their entirety, once the animation has been completed.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正了解 Promises 如何使用，请查看 [http://jsfiddle.net/6sKRC/](http://jsfiddle.net/6sKRC/)，该链接显示了在
    JSFiddle 中的一个工作示例。一旦动画完成，此示例将扩展`slideUp()`方法以完全删除元素。
- en: It should be noted that although this shows a great way to extend this effect,
    the code itself could benefit from some tweaking to make it more readable. For
    example, `this. slideUp(duration).promise()` can easily be separated into a variable,
    which would make that line shorter and easier to read!
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意，虽然这显示了扩展此效果的一个很好的方法，但代码本身可以从一些调整中受益，以使其更易读。例如，`this. slideUp(duration).promise()`可以轻松地分解成一个变量，这将使该行更短，更易读！
- en: Note
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to learn more about using jQuery's Promises and Deferreds,
    then there are plenty of articles online on both subjects. Two that may be of
    interest can be found at [http://code.tutsplus.com/tutorials/wrangle-async-tasks-with-jquery-promises--net-24135](http://code.tutsplus.com/tutorials/wrangle-async-tasks-with-jquery-promises--net-24135)
    and [http://tutorials.jenkov.com/jquery/deferred-objects.html](http://tutorials.jenkov.com/jquery/deferred-objects.html).
    It's definitely worth taking time to get your head around the subject, if you've
    not used `promises()` before!
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于使用 jQuery 的 Promises 和 Deferreds 的信息，则在线上有许多关于这两个主题的文章。两篇可能感兴趣的文章可以在
    [http://code.tutsplus.com/tutorials/wrangle-async-tasks-with-jquery-promises--net-24135](http://code.tutsplus.com/tutorials/wrangle-async-tasks-with-jquery-promises--net-24135)
    和 [http://tutorials.jenkov.com/jquery/deferred-objects.html](http://tutorials.jenkov.com/jquery/deferred-objects.html)
    找到。如果您以前没有使用过`promises()`，那么花点时间来理解这个主题肯定是值得的！
- en: We're coming close to the end of this chapter, but before we round it up, there
    is one more important topic to cover. We've considered the benefits of using CSS
    in some form or other, rather than just relying on jQuery. If circumstances dictate
    that the latter must be used, then we should at least consider managing the queues
    to gain the most benefit from using effects. Let's take a moment to explore this
    in more detail.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接近本章的结束，但在总结之前，还有一个重要的主题要讨论。我们已经考虑了以某种形式使用 CSS 而不只是依赖 jQuery 的好处。如果情况要求必须使用后者，那么我们至少应该考虑管理队列以最大程度地从使用效果中获益。让我们花点时间更详细地探讨一下这个问题。
- en: Creating and managing the effect queue
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和管理效果队列
- en: Queues, queues – who likes queuing, I wonder?
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 排队，排队 - 谁喜欢排队呢，我想知道？
- en: Although not all of us like to queue for things, such as for getting lunch or
    visiting a bank, queuing is critical to the success of running animations. It
    matters not one jot if we're using `.slideUp()`, `.animate()` or even `.hide()`
    – if we chain too many animations, we will hit a point where animations won't
    run.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们中并不是所有人都喜欢排队，比如排队买午餐或去银行，但排队对于成功运行动画至关重要。无论我们使用`.slideUp()`、`.animate()`甚至`.hide()`，都无关紧要
    - 如果我们链接太多动画，就会达到动画无法运行的点。
- en: 'To release the animation, we need to explicitly call `.dequeue()`, as the methods
    come in pairs. Consider the following example for a moment, taken from [http://cdmckay.org/blog/2010/06/22/how-to-use-custom-jquery-animation-queues/](http://cdmckay.org/blog/2010/06/22/how-to-use-custom-jquery-animation-queues/):'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要释放动画，我们需要明确调用`.dequeue()`，因为方法是成对出现的。请考虑一下来自[http://cdmckay.org/blog/2010/06/22/how-to-use-custom-jquery-animation-queues/](http://cdmckay.org/blog/2010/06/22/how-to-use-custom-jquery-animation-queues/)的以下示例：
- en: 'Imagine you''re making a game and you want to have an object start at `top:100px`,
    then float upwards for 2000 milliseconds. Furthermore, you would like the said
    object to stay completely opaque for 1000 milliseconds before slowly becoming
    completely transparent over the remaining 1000 milliseconds:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你正在制作一款游戏，你希望一个对象从`top:100px`开始，然后在 2000 毫秒内向上浮动。此外，你希望该对象在完全透明 1000 毫秒之前保持完全不透明，在剩余的
    1000 毫秒内逐渐变得完全透明：
- en: '| Time (in ms) | Top | Opacity |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| 时间（毫秒） | 顶部 | 不透明度 |'
- en: '| --- | --- | --- |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 0 | 100px | 1.0 |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 100px | 1.0 |'
- en: '| 500 | 90px | 1.0 |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| 500 | 90px | 1.0 |'
- en: '| 1000 | 80px | 1.0 |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| 1000 | 80px | 1.0 |'
- en: '| 1500 | 70px | 0.5 |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| 1500 | 70px | 0.5 |'
- en: '| 2000 | 60px | 0.0 |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 2000 | 60px | 0.0 |'
- en: 'At first glance, it appears that the `animate` command could take care of this,
    as can be seen in the following code:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，似乎`animate`命令可以处理这个问题，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Unfortunately, this code will fade the object out over 2000 ms, instead of waiting
    1000 ms then fading out over the remaining 1000 ms. Delay can't help either, because
    it would delay the upward floating as well. At this point, we can either fiddle
    with timeouts or, you guessed it, use queues.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这段代码将使对象在2000毫秒内淡出，而不是等待1000毫秒，然后在剩余的1000毫秒内淡出。延迟也无济于事，因为它也会延迟上升浮动。此时，我们可以要么纠结于超时，要么，你猜对了，使用队列。
- en: 'With this in mind, following is what the code would look like, altered to use
    `.queue()` and `.dequeue()`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，下面是修改后使用`.queue()`和`.dequeue()`的代码：
- en: '[PRE18]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In this example, we have two queues: the `fx` queue and the `fader` queue.
    First off, we setup the `fader` queue. Since we want to wait `1000` ms before
    fading, we use the delay command with `1000` ms.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们有两个队列：`fx`队列和`fader`队列。首先，我们设置了`fader`队列。由于我们想要在淡化前等待`1000`毫秒，我们使用了带有`1000`毫秒延迟命令。
- en: 'Next, we queue up an animation that fades the object out over `1000` ms. Pay
    close attention to the `queue: false` option we set in the animate command. This
    is to ensure the animation doesn''t use the default `fx` queue. Finally, we unleash
    the queue using `dequeue` and immediately follow it with a regular `fx`, using
    the `animate` call to move the top of the object up `40` pixels.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，我们排队进行一个动画，在`1000`毫秒内将对象淡出。请特别注意我们在动画命令中设置的`queue: false`选项。这是为了确保动画不使用默认的`fx`队列。最后，我们使用`dequeue`释放队列，并立即使用`animate`调用在顶部对象上移`40`像素的常规`fx`队列。'
- en: 'We could even turn the use of `.queue()` and `.dequeue()` into a plugin. Given
    that both need to be used, it would make sense to turn it into something that
    is easier to read in code. Consider the next example:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以将对`.queue()`和`.dequeue()`的使用转化为插件。鉴于两者都需要使用，将其转化为在代码中更易于阅读的形式是有意义的。考虑下一个例子：
- en: '[PRE19]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the previous example, we first animate the change in height to `.box` before
    pausing and then sliding up the `.box` element.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，我们首先对`.box`的高度进行动画变化，然后暂停，然后上滑`.box`元素。
- en: The key point to note is that `queue()` and `dequeue()` are based around the
    `fx` object in jQuery. As this is already set by default, there is no need to
    specify it within our plugin.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的关键点是，`queue()`和`dequeue()`都是基于jQuery中的`fx`对象的。由于这已经在默认情况下设置，因此在我们的插件中没有必要指定它。
- en: Tip
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you're unsure about the uses of `queue()` and `dequeue()`, then it's worth
    taking a look at [http://learn.jquery.com/effects/uses-of-queue-and-dequeue/](http://learn.jquery.com/effects/uses-of-queue-and-dequeue/),
    which outlines some useful case examples.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对`queue()`和`dequeue()`的用途感到不确定，那么不妨看一看[http://learn.jquery.com/effects/uses-of-queue-and-dequeue/](http://learn.jquery.com/effects/uses-of-queue-and-dequeue/)，其中概述了一些有用的案例示例。
- en: 'Using `.queue()` and its counterpart `.dequeue()` provides a graceful means
    of controlling animations. Its use is arguably more suited to multiple, complex
    animations, particularly where animation timelines need to be implemented. If
    we''re only using a small number of simple animations though, then the weight
    of an extra plugin may not be necessary. Instead, we can simply add `.stop()`
    to provide a similar effect. Refer to the following:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`.queue()`及其对应的`.dequeue()`提供了一种优雅的动画控制方式。它的使用可能更适合于多个、复杂的动画，特别是需要实现动画时间轴的情况。但如果我们只是使用了少量的简单动画，那么附加插件的重量可能就是不必要的。相反，我们可以简单地增加`.stop()`来提供类似的效果。参考以下内容：
- en: '[PRE20]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: It may not be quite as graceful, but using `.stop()` does improve the look of
    your animations!
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`.stop()`可能不太优雅，但确实改善了动画的外观！
- en: Summary
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Wow, we've covered a lot over the last few pages. It has certainly been intense!
    Let's take a breather, and recap what we've learnt.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，我们在过去的几页中涵盖了很多内容。肯定是紧张的！让我们来喘口气，回顾一下我们学到的内容。
- en: We kicked off with a revisit on basic effects, as a reminder of what we can
    use in jQuery, before exploring the key differences between standard animations
    and effects. We then moved onto creating custom effects, with a look at the basis
    for all effects, before creating two examples of custom effects in code.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先回顾了jQuery的基本效果，以回顾我们可以在jQuery中使用的内容，然后探讨了标准动画和特效之间的关键区别。接着我们转向创建自定义效果，了解了所有效果的基础，然后在代码中创建了两个自定义效果的例子。
- en: We then turned our focus to adding custom easings, and explored how those we
    saw earlier in the book can equally be applied to jQuery effects. We worked our
    way through an example in the form of adding Bezier curve-based easing support,
    before exploring how we can achieve similar effects using just CSS. We then briefly
    covered adding callbacks to our effects, and then explored how we can better control
    the callbacks by using jQuery's Deferreds / Promises options as an alternative
    to standard callbacks.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们把焦点转向了添加自定义缓动效果，并探讨了我们在本书前面看到的那些效果如何同样适用于 jQuery 效果。我们通过一个例子来说明，即添加基于贝塞尔曲线的缓动支持，然后探讨如何仅使用
    CSS 就可以实现类似的效果。我们随后简要介绍了向我们的效果添加回调，然后探讨了如何通过使用 jQuery 的 Deferreds / Promises 选项来更好地控制回调，作为标准回调的替代方案。
- en: We then rounded up the chapter with a look at managing the effects queue. This
    was a good opportunity to explore the benefits of careful queue management, so
    that we can avoid any confusion or unexpected results when using effects within
    jQuery.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着以管理效果队列的方式结束了本章。这是一个很好的机会来探讨仔细管理队列的好处，这样我们在使用 jQuery 时就可以避免任何混乱或意外的结果。
- en: Moving swiftly on, it's time for some real fun! Over the next couple of chapters,
    we're going to explore two topics that you might not immediately associate with
    jQuery; we'll start with exploring the Page Visibility API, where you'll see that
    writing lots of complex code isn't necessarily a good thing.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们迅速进入了一些真正有趣的内容！在接下来的几章中，我们将探讨两个你可能不会立即与 jQuery 关联起来的主题；我们将从探索页面可见性 API
    开始，你会发现编写大量复杂代码并不一定是件好事。
