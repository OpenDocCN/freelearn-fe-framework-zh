["```js\n    { type: \"START_SHARING\" }\n    ```", "```js\n    { status: \"STARTED\", id: 123 }\n    ```", "```js\n    http://localhost:3000/index.xhtml?watching=123\n    ```", "```js\n    { type: \"START_WATCHING\", id: 123 }\n    ```", "```js\n    {\n      type: \"NEW_ACTION\",\n      innerAction: {\n        type: \"SUBMIT_EDIT_LINE\",\n        text: \"forward 10\\n\"\n      }\n    }\n    ```", "```js\n    { type: \"SUBMIT_EDIT_LINE\", text: \"forward 10\\n\" } }\n    ```", "```js\nexport const duplicateForSharing =\n  store => next => action => {\n    if (action.type === \"SUBMIT_EDIT_LINE\") {\n      store.dispatch({\n        type: \"SHARE_NEW_ACTION\",\n        innerAction: action,\n      });\n    }\n    return next(action);\n  };\n```", "```js\nexport function* sharingSaga() {\n  yield takeLatest(\"TRY_START_WATCHING\", startWatching);\n  yield takeLatest(\"START_SHARING\", startSharing);\n  yield takeLatest(\"STOP_SHARING\", stopSharing);\n  yield takeLatest(\"SHARE_NEW_ACTION\", shareNewAction);\n}\n```", "```js\n    import { storeSpy, expectRedux } from \"expect-redux\";\n    import { act } from \"react-dom/test-utils\";\n    import { configureStore } from \"../../src/store\";\n    ```", "```js\n    describe(\"sharingSaga\", () => {\n      let store;\n      let socketSpyFactory;\n      beforeEach(() => {\n        store = configureStore([storeSpy]);\n        socketSpyFactory = spyOn(window, \"WebSocket\");\n        socketSpyFactory.mockImplementation(() => {\n          return {};\n        });\n      });\n    });\n    ```", "```js\n    beforeEach(() => {\n      ...\n      Object.defineProperty(window, \"location\", {\n        writable: true,\n          value: {\n            protocol: \"http:\",\n            host: \"test:1234\",\n            pathname: \"/index.xhtml\",\n          },\n      });\n    });\n    ```", "```js\n    describe(\"START_SHARING\", () => {\n      it(\"opens a websocket when starting to share\", () => {\n        store.dispatch({ type: \"START_SHARING\" });\n        expect(socketSpyFactory).toBeCalledWith(\n          \"ws://test:1234/share\"\n        );\n      });\n    });\n    ```", "```js\n    function* startSharing() {\n      const { host } = window.location;\n      new WebSocket(`ws://${host}/share`);\n    }\n    ```", "```js\n    let sendSpy;\n    let socketSpy;\n    beforeEach(() => {\n      sendSpy = jest.fn();\n      socketSpyFactory = spyOn(window, \"WebSocket\");\n      socketSpyFactory.mockImplementation(() => {\n        socketSpy = {\n          send: sendSpy,\n        };\n        return socketSpy;\n      });\n    ...\n    }\n    ```", "```js\n    const notifySocketOpened = async () => {\n      await act(async () => {\n        socketSpy.onopen();\n      });\n    };\n    ```", "```js\n    it(\"dispatches a START_SHARING action to the socket\", async () => {\n      store.dispatch({ type: \"START_SHARING\" });\n      await notifySocketOpened();\n      expect(sendSpy).toBeCalledWith(\n        JSON.stringify({ type: \"START_SHARING\" })\n     );\n    });\n    ```", "```js\n    const openWebSocket = () => {\n      const { host } = window.location;\n      const socket = new WebSocket(`ws://${host}/share`);\n      return new Promise(resolve => {\n        socket.onopen = () => {\n          resolve(socket)\n        };\n      });\n    };\n    ```", "```js\n    function* startSharing() {\n      const presenterSocket = yield openWebSocket();\n      presenterSocket.send(\n        JSON.stringify({ type: \"START_SHARING\" })\n      );\n    }\n    ```", "```js\n    const sendSocketMessage = async message => {\n      await act(async () => {\n        socketSpy.onmessage({\n         data: JSON.stringify(message)\n        });\n      });\n    };\n    ```", "```js\n    it(\"dispatches an action of STARTED_SHARING with a URL containing the id that is returned from the server\",   async () => {\n      store.dispatch({ type: \"START_SHARING\" });\n      await notifySocketOpened();\n      await sendSocketMessage({\n        type: \"UNKNOWN\",\n        id: 123,\n      });\n      return expectRedux(store)\n        .toDispatchAnAction()\n        .matching({\n          type: \"STARTED_SHARING\",\n          url: \"http://test:1234/index.xhtml?watching=123\",\n        });\n    });\n    ```", "```js\n    const receiveMessage = (socket) =>\n      new Promise(resolve => {\n        socket.onmessage = evt => {\n          resolve(evt.data)\n        };\n      });\n    const buildUrl = (id) => {\n      const {\n        protocol, host, pathname\n      } = window.location;\n      return (\n        `${protocol}//${host}${pathname}?watching=${id}`\n      );\n    };\n    ```", "```js\n    function* startSharing() {\n      const presenterSocket = yield openWebSocket();\n      presenterSocket.send(\n        JSON.stringify({ type: \"START_SHARING\" })\n      );\n      const message = yield receiveMessage(\n        presenterSocket\n      );\n      const presenterSessionId = JSON.parse(message).id;\n      yield put({\n        type: \"STARTED_SHARING\",\n        url: buildUrl(presenterSessionId),\n      });\n    }\n    ```", "```js\n    const startSharing = async () => {\n      store.dispatch({ type: \"START_SHARING\" });\n      await notifySocketOpened();\n      await sendSocketMessage({\n        type: \"UNKNOWN\",\n        id: 123,\n      });\n    };\n    ```", "```js\n    let closeSpy;\n    beforeEach(() => {\n      sendSpy = jest.fn();\n      closeSpy = jest.fn();\n      socketSpyFactory = spyOn(window, \"WebSocket\");\n      socketSpyFactory.mockImplementation(() => {\n        socketSpy = {\n          send: sendSpy,\n          close: closeSpy,\n        };\n        return socketSpy;\n      });\n      ...\n    });\n    ```", "```js\n    describe(\"STOP_SHARING\", () => {\n      it(\"calls close on the open socket\", async () => {\n        await startSharing();\n        store.dispatch({ type: \"STOP_SHARING\" });\n        expect(closeSpy).toBeCalled();\n      });\n    });\n    ```", "```js\n    let presenterSocket;\n    function* startSharing() {\n      presenterSocket = yield openWebSocket();\n      ...\n    }\n    ```", "```js\n    function* stopSharing() {\n      presenterSocket.close();\n    }\n    ```", "```js\n    it(\"dispatches an action of STOPPED_SHARING\", async () => {\n      await startSharing();\n      store.dispatch({ type: \"STOP_SHARING\" });\n      return expectRedux(store)\n        .toDispatchAnAction()\n        .matching({ type: \"STOPPED_SHARING\" });\n    });\n    ```", "```js\n    function* stopSharing() {\n      presenterSocket.close();\n      yield put({ type: \"STOPPED_SHARING\" });\n    }\n    ```", "```js\n    describe(\"SHARE_NEW_ACTION\", () => {\n      it(\"forwards the same action on to the socket\", async () => {\n        const innerAction = { a: 123 };\n        await startSharing(123);\n        store.dispatch({\n          type: \"SHARE_NEW_ACTION\",\n          innerAction,\n        });\n        expect(sendSpy).toHaveBeenLastCalledWith(\n          JSON.stringify({\n            type: \"NEW_ACTION\",\n            innerAction,\n          })\n        );\n      });\n    });\n    ```", "```js\n    const shareNewAction = ({ innerAction }) => {\n      presenterSocket.send(\n        JSON.stringify({\n          type: \"NEW_ACTION\",\n          innerAction,\n        })\n      );\n    }\n    ```", "```js\n    it(\"does not forward if the socket is not set yet\", () => {\n      store.dispatch({ type: \"SHARE_NEW_ACTION\" });\n      expect(sendSpy).not.toBeCalled();\n    });\n    ```", "```js\n    function* shareNewAction({ innerAction } ) {\n      if (presenterSocket) {\n        presenterSocket.send(\n          JSON.stringify({\n            type: \"NEW_ACTION\",\n            innerAction,\n          })\n        );\n      }\n    }\n    ```", "```js\n    it(\"does not forward if the socket has been closed\", async () => {\n      await startSharing();\n      socketSpy.readyState = WebSocket.CLOSED;\n      store.dispatch({ type: \"SHARE_NEW_ACTION\" });\n      expect(sendSpy.mock.calls).toHaveLength(1);\n    });\n    ```", "```js\n    const WEB_SOCKET_OPEN = WebSocket.OPEN;\n    const WEB_SOCKET_CLOSED = WebSocket.CLOSED;\n    ```", "```js\n    socketSpyFactory = jest.spyOn(window, \"WebSocket\");\n    Object.defineProperty(socketSpyFactory, \"OPEN\", {\n      value: WEB_SOCKET_OPEN\n    });\n    Object.defineProperty(socketSpyFactory, \"CLOSED\", {\n      value: WEB_SOCKET_CLOSED\n    });\n    socketSpyFactory.mockImplementation(() => {\n      socketSpy = {\n        send: sendSpy,\n        close: closeSpy,\n        readyState: WebSocket.OPEN,\n      };\n      return socketSpy;\n    });\n    ```", "```js\n    const shareNewAction = ({ innerAction }) => {\n      if (\n        presenterSocket &&\n        presenterSocket.readyState === WebSocket.OPEN\n      ) {\n        presenterSocket.send(\n          JSON.stringify({\n            type: \"NEW_ACTION\",\n            innerAction,\n          })\n        );\n      }\n    }\n    ```", "```js\n    describe(\"watching\", () => {\n      beforeEach(() => {\n        Object.defineProperty(window, \"location\", {\n          writable: true,\n          value: {\n            host: \"test:1234\",\n            pathname: \"/index.xhtml\",\n            search: \"?watching=234\"\n          }\n        });\n      });\n      it(\"opens a socket when the page loads\", () => {\n        store.dispatch({ type: \"TRY_START_WATCHING\" });\n        expect(socketSpyFactory).toBeCalledWith(\n          \"ws://test:1234/share\"\n        );\n      });\n    });\n    ```", "```js\n    function* startWatching() {\n      yield openWebSocket();\n    }\n    ```", "```js\n    it(\"does not open socket if the watching field is not set\", () => {\n      window.location.search = \"?\";\n      store.dispatch({ type: \"TRY_START_WATCHING\" });\n      expect(socketSpyFactory).not.toBeCalled();\n    });\n    ```", "```js\n    function* startWatching() {\n      const sessionId = new URLSearchParams(\n        window.location.search.substring(1)\n      ).get(\"watching\");\n      if (sessionId) {\n        yield openWebSocket();\n      }\n    }\n    ```", "```js\n    const startWatching = async () => {\n      await act(async () => {\n        store.dispatch({ type: \"TRY_START_WATCHING\" });\n        socketSpy.onopen();\n      });\n    };\n    ```", "```js\n    it(\"dispatches a RESET action\", async () => {\n      await startWatching();\n      return expectRedux(store)\n        .toDispatchAnAction()\n        .matching({ type: \"RESET\" });\n    });\n    ```", "```js\n    function* startWatching() {\n      const sessionId = new URLSearchParams(\n        location.search.substring(1)\n      ).get(\"watching\");\n      if (sessionId) {\n        yield openWebSocket();\n        yield put({ type: \"RESET\" });\n      }\n    }\n    ```", "```js\n    it(\"sends the session id to the socket with an action type of START_WATCHING\", async () => {\n      await startWatching();\n      expect(sendSpy).toBeCalledWith(\n        JSON.stringify({\n          type: \"START_WATCHING\",\n          id: \"234\",\n        })\n      );\n    });\n    ```", "```js\n    function* startWatching() {\n      const sessionId = new URLSearchParams(\n        window.location.search.substring(1)\n      ).get(\"watching\");\n      if (sessionId) {\n        const watcherSocket = yield openWebSocket();\n        yield put({ type: \"RESET\" });\n        watcherSocket.send(\n          JSON.stringify({\n            type: \"START_WATCHING\",\n            id: sessionId,\n          })\n    );\n      }\n    }\n    ```", "```js\n    it(\"dispatches a STARTED_WATCHING action\", async () => {\n      await startWatching();\n      return expectRedux(store)\n        .toDispatchAnAction()\n        .matching({ type: \"STARTED_WATCHING\" });\n    });\n    ```", "```js\n    function* startWatching() {\n      ...\n      if (sessionId) {\n        ...\n        yield put({ type: \"STARTED_WATCHING\" });\n      }\n    }\n    ```", "```js\n    it(\"relays multiple actions from the websocket\", async () => {\n      const message1 = { type: \"ABC\" };\n      const message2 = { type: \"BCD\" };\n      const message3 = { type: \"CDE\" };\n      await startWatching();\n      await sendSocketMessage(message1);\n      await sendSocketMessage(message2);\n      await sendSocketMessage(message3);\n      await expectRedux(store)\n        .toDispatchAnAction()\n        .matching(message1);\n      await expectRedux(store)\n        .toDispatchAnAction()\n        .matching(message2);\n      await expectRedux(store)\n        .toDispatchAnAction()\n        .matching(message3);\n      socketSpy.onclose();\n    });\n    ```", "```js\n    import { eventChannel, END } from \"redux-saga\";\n    const webSocketListener = socket =>\n      eventChannel(emitter => {\n        socket.onmessage = emitter;\n        socket.onclose = () => emitter(END);\n        return () => {\n          socket.onmessage = undefined;\n          socket.onclose = undefined;\n        };\n      });\n    ```", "```js\n    function* watchUntilStopRequest(chan) {\n      try {\n        while (true) {\n          let evt = yield take(chan);\n          yield put(JSON.parse(evt.data));\n        }\n      } finally {\n      }\n    };\n    ```", "```js\n    function* startWatching() {\n      ...\n      if (sessionId) {\n        ...\n        yield put({ type: \"STARTED_WATCHING\" });\n        const channel = yield call(\n          webSocketListener, watcherSocket\n        );\n        yield call(watchUntilStopRequest(channel);\n      }\n    }\n    ```", "```js\n    it(\"dispatches a STOPPED_WATCHING action when the connection is closed\", async () => {\n      await startWatching();\n      socketSpy.onclose();\n      return expectRedux(store)\n        .toDispatchAnAction()\n        .matching({ type: \"STOPPED_WATCHING\" });\n    });\n    ```", "```js\n    try {\n      ...\n    } finally {\n      yield put({ type: \"STOPPED_WATCHING\" });\n    }\n    ```", "```js\n    import { act } from \"react-dom/test-utils\";\n    ```", "```js\n    describe(\"sharing button\", () => {\n      let socketSpyFactory;\n      let socketSpy;\n      beforeEach(() => {\n        socketSpyFactory = jest.spyOn(\n          window,\n          \"WebSocket\"\n        );\n        socketSpyFactory.mockImplementation(() => {\n          socketSpy = {\n            close: () => {},\n            send: () => {},\n          };\n          return socketSpy;\n        });\n      });\n    });\n    ```", "```js\n    const notifySocketOpened = async () => {\n      const data = JSON.stringify({ id: 1 });\n      await act(async () => {\n        socketSpy.onopen();\n        socketSpy.onmessage({ data });\n      });\n    };\n    ```", "```js\n    it(\"dispatches an action of STOP_SHARING when stop sharing is clicked\", async () => {\n      renderWithStore(<MenuButtons />);\n      dispatchToStore({ type: \"START_SHARING\" });\n      await notifySocketOpened();\n      click(buttonWithLabel(\"Stop sharing\"));\n      return expectRedux(store)\n        .toDispatchAnAction()\n        .matching({ type: \"STOP_SHARING\" });\n    });\n    ```", "```js\n    const store = configureStoreWithLocalStorage();\n    store.dispatch({ type: \"TRY_START_WATCHING\" });\n    ReactDOM\n      .createRoot(document.getElementById(\"root\"))\n      .render(\n        <Provider store={store}>\n          <App />\n        </Provider);\n    ```"]