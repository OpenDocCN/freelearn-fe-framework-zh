- en: Creating a User's Friend List
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will move toward the more advanced features in Angular and
    Firebase. We will retrieve our user's friend list using a Firebase list. We will
    display the friend list in a card component provided by Bootstrap. We will implement
    the pagination concept using a Firebase filter. Finally, we will discuss Angular
    pipes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating user's friend template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the friend's service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the friends component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first date pipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating user's friend template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will cover a slightly more complex template using a Bootstrap
    card component. We will retrieve the friend's list of a defined size and display
    the user's friend list in a card item. We will call the Firebase API to get three
    items and loop the friend's list using an `*ngFor` directive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Card is a flexible and extensible container. It has an option to display the
    header, footer, title, and so on. We will use the following properties of the
    card component:'
  prefs: []
  type: TYPE_NORMAL
- en: '`card-img-top`: This is used to display the friend''s image on the top.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`card-title`: This is used to display the friend''s name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`card-text`: This is used to display their email and phone number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`card-footer`: This is used to display the date using a custom pipe. We will
    implement custom pipe in a later part of this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After we display the first page, we need the left and right icon to scroll
    to the next and previous page. These icons will be visible based on the total
    items in the list, and `isLeftVisible` will be set from the `component` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the complete `user-friends.component.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We assign class selectors to apply styles to the elements. In the friends list
    page, we align the elements horizontally using `display:inline`. Also, the left
    icon, card list, and right icon are displayed one after another, so we use `float:
    left`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the complete `user-friends.component.scss` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Creating the friend's service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will introduce one more service as part of our friend''s component. This
    will fetch friend''s details from the Firebase. In this section, we will cover
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Firebase node in our database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the `Friend` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the friend's service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Firebase node in our database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we have prefilled the friend's details in the Firebase as shown in the
    next image. We introduced a separate node called `user-details`. This will store
    all the user's information, and we don't need to query the user node for more
    information, as this increases the query performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are a few key observations for this instance of Firebase:'
  prefs: []
  type: TYPE_NORMAL
- en: We have not implemented the add friend feature; hence we will add the friend's
    information manually.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use the UID relationship to list the friends of a user. In this case, the
    UID `qu3bXn9tTJR7j4PBp9LzBGKxHAe2` is the user ID and the other UID—`8wcVXYmEDQdqbaJ12BPmpsCmBMB2`—is
    the friend's ID that is generated when the friend signs up to the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Firebase, we repeat a lot of data. This is a common pattern while organizing
    data in a NoSQL database, as this avoids multiple hits to the database. Although
    it increases the write time, it helps our app to scale when reading data. It prevents
    large queries that slow down our database and nested nodes that take longer to
    read.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The friends node in the Firebase database is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00025.gif)'
  prefs: []
  type: TYPE_IMG
- en: Implementing the Friend model class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will implement the `Friend` model class to map an array of friend's JSON
    object from Firebase. This class is similar to the `User` model class, and it
    is a good practice to segregate the responsibility in a separate class.
  prefs: []
  type: TYPE_NORMAL
- en: This class has `name`, `email`, `mobile`, `uid`, `time`, and `image` properties.
    The time property is used to show the duration of friendship and is stored in
    milliseconds. We will need to convert the time in milliseconds to a human-readable
    date format using an Angular pipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the complete `friend.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Implementing the friend's service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a part of this service, we will need to retrieve a list of friends. `AngularFireDatabase`
    provides a list API to retrieve the list of friends. This service consists of
    the following three methods to give us complete pagination functionalities:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Retrieving the first page**: The `getFirstPage()` method accepts `uid` and
    `pageSize` as parameters. These are used to retrieve the first `pageSize` data
    from Firebase. We pass the `pageSize` in the second argument of the query function:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Retrieving the next page:** `loadNextPage()` accepts `uid`, `friendKey`,
    and `pageSize`. `uid` and `friendKey` are used to set the queries. This means
    that they retrieve the next `pageSize` data from the last retrieved `friendKey`
    data:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Retrieving the previous page: **`loadPreviousPage()` method accepts `uid`,
    `friendKey`, and `pageSize`. The last two parameters are used to retrieve the
    previous `pageSize` data from the starting `friendKey` element:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the complete `friends.service.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Creating a friend's component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the main controller of our friend page. In this component, we will
    need to manage the navigation and visibility of our next and previous icon. We
    will cover the following two main things in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the next and previous page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visibility of icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to display the next and previous page, we have already created the
    API required to display the friend''s information. We have extended the `OnInit`
    interface and called `getFirstPage()` on `ngOnInit` with `uid` and `pageSize`
    as filter parameters, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `ngOnInit()` method runs when the page is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consequently, we will retrieve the next and previous page using the API in
    the friend''s service, as follows; the only difference is that we will also pass
    the friend `uid` so that we can retrieve the next page size data, starting from
    the last retrieved item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will move on to our next part. We will need to take care of the next
    and previous icons for which we will need the total number of friends. In our
    previous discussion, we obtained the size as `pageSize`. In order to solve this
    problem, we have to create `friendcount` in our Firebase user node. Whenever we
    add a friend, we increase the count. We have added this property in our `User`
    class; all the other parts remain the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then retrieve the total item count in `ngOnInit`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we initialize the current count to the item retrieved and then call the
    visibility based on the total and current count:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the complete `user-friends.component.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The user''s friends page displays three friends with navigation enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating our first date pipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Pipe takes an input as its data and transforms it into the desired output.
    It is used to transform data into a usable form.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use pipe to transform time into a human-friendly date format. To create
    the pipe, we implement the `PipeTransform` interface and override the `transform`
    method. In this method, we take the date in milliseconds and use the moment library
    to transform the time to a particular date format. We provide the selector name,
    which is used in the HTML tag with an input data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Moment is a JavaScript library used to format, manipulate, or parse dates.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the pipe, we add it in our `user` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we provide the `friendsdate` pipe to our `time` value from the `friend`
    object in a template, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered a lot of important concepts. We covered the card
    component, which is used in most applications nowadays. We decorated our view
    with styles and also created a new service. We discussed the Firebase list and
    then provided the filter options. This implemented pagination for our friend's
    list. Finally, we discussed the Angular pipe, which we used to convert time into
    a human-friendly date format.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover Firebase storage and learn how to store a
    profile image and then retrieve it.
  prefs: []
  type: TYPE_NORMAL
