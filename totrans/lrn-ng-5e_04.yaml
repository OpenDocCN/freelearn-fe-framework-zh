- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enriching Applications Using Pipes and Directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we built several components that rendered data on the
    screen with the help of input and output properties. We’ll leverage that knowledge
    in this chapter to take our components to the next level using Angular **pipes**
    and **directives** . Pipes allow us to digest and transform the information we
    bind in our templates. Directives enable more ambitious functionalities, such
    as manipulating the DOM or altering the appearance and behavior of HTML elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating data with pipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building pipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building directives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The chapter contains code samples to walk you through Angular pipes and directives.
    You can find the related source code in the `ch04` folder of the following GitHub
    repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition](https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating data with pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pipes allow us to transform the outcome of our expressions at the view level.
    They take data as input, transform it into the desired format, and display the
    output in the template.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax of a pipe consists of the pipe name following the expression we
    want to transform, separated by a pipe symbol ( `|` ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any parameters are added after the pipe name, and they are separated by colons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Pipes can be used with interpolation and property binding in Angular templates
    and can be chained to each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular has a wide range of built-in pipe types already baked into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '`uppercase` / `lowercase` : This transforms a string into uppercase or lowercase
    letters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent` : This formats a number as a percentage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date` : This formats a date or a string in a particular date format. The default
    usage of the pipe displays the date according to the local settings of the user’s
    machine. However, we can pass additional formats Angular has already baked in
    as parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`currency` : This formats a number as a local currency. We can override local
    settings and change the currency symbol, passing the currency code as a parameter
    to the pipe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`json` : This takes an object as an input and outputs it in JSON format, replacing
    single quotes with double quotes. The main usage of the `json` pipe is debugging.
    It is an excellent way to see what a complex object contains and print it nicely
    on the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keyvalue` : This converts an object into a collection of key-value pairs,
    where the `key` of each item represents the object’s property and the `value`
    is its actual value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slice` : This subtracts a subset (slice) of a collection or string. It accepts
    as parameters a starting index, where it will begin slicing the input data, and,
    optionally, an end index. When the end index is specified, the item at that index
    is not included in the resulting array. If the end index is omitted, it falls
    back to the last index of the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `slice` pipe transforms immutable data. The transformed list is always a
    copy of the original data, even when it returns all items.
  prefs: []
  type: TYPE_NORMAL
- en: '`async` : This is used when we manage data handled asynchronously by our component
    class, and we need to ensure that our views promptly reflect the changes. We will
    learn more about this pipe later in *Chapter 8* , *Communicating with Data Services
    over HTTP* , where we will use it to fetch and display data asynchronously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will need the source code of the Angular application we created in *Chapter
    3* , *Structuring User Interfaces with Components* , to follow along with the
    rest of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the `lowercase` , `currency` , and `keyvalue` pipes in more detail,
    but we encourage you to explore the rest in the API reference at [https://angular.dev/api](https://angular.dev/api)
    :'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-detail.component.ts` file and import the `CommonModule` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `CommonModule` class exports the Angular built-in pipes. An Angular component
    must import `CommonModule` before using built-in pipes in the component template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product.ts` file and add the following fields to the `Product` interface
    that describe additional properties for a product:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `categories` property is an object where the key represents the category
    ID, and the value represents the category description.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-list.component.ts` file and modify the `products` array to
    set values for the new properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `product-detail.component.html` file and add a paragraph element to
    display the price of the selected product in euros:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run `ng serve` to start the application and select the **Microphone** from
    the product list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, γραμματοσειρά, στιγμιότυπο οθόνης, λογότυπο  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_04_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.1: Product details'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding image, the product price is displayed in the currency format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following snippet below the product price to display the product categories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding snippet, we used the `@for` block to iterate over the `categories`
    property of the `product` variable. The `categories` property is not iterable
    because it is a plain object, so, we used the `keyvalue` pipe to convert it into
    an array that contains `key` and `value` properties. The `key` property represents
    the category ID, a unique identifier we can use with the `track` variable. The
    `value` property stores the category description.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we used the `lowercase` pipe to convert the category description
    to lowercase text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following CSS styles to the `product-detail.component.css` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While running the application, select the **Web camera** product from the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά, λογότυπο  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_04_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.2: Product details with categories'
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternative to using the `CommonModule` , we could have imported each pipe
    class separately from the `@angular/common` npm package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the final `product-detail.component.html` file, we use the snippet `product()!`
    many times to read the value of the `product` property. Alternatively, we could
    create an alias using the `@let` syntax as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `@let` keyword is similar to the `let` keyword in JavaScript and is used
    to declare variables that are available only in the component template. In the
    preceding snippet, we declare the `selectedProduct` variable, which can be used
    in the rest of the HTML code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `@let` keyword helps us in cases where we want to use complex expressions
    in templates such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Ternary operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nested object properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The async pipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in pipes are sufficient for most use cases, but we must apply complex
    transformations to our data in other cases. The Angular framework provides a mechanism
    to create uniquely customized pipes, as we will see in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Building pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already seen what pipes are and what their purpose is in the Angular
    ecosystem. Next, we will dive deeper into how we can build a pipe to provide custom
    transformations to data bindings. In the following section, we will create a pipe
    that sorts our list of products by title.
  prefs: []
  type: TYPE_NORMAL
- en: Sorting data using pipes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a new pipe, we use the `ng generate` command of the Angular CLI,
    passing its name as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will generate all necessary files of the `sort` pipe
    inside the folder where we run the `ng generate` command. The TypeScript class
    of the pipe is defined in the `sort.pipe.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `@Pipe` is an Angular decorator that defines the `name` of the Angular pipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The TypeScript class of a pipe implements the `transform` method of the `PipeTransform`
    interface and accepts two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value` : The input data that we want to transform'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`args` : An optional list of arguments we can provide to the transformation
    method, each separated by a colon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Angular CLI helped us by scaffolding an empty `transform` method. We now
    need to modify it to satisfy our business needs. The pipe will operate on a list
    of `Product` objects, so we need to make the necessary adjustments to the types
    provided:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following statement to import the `Product` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the type of the `value` parameter to `Product[]` since we want to sort
    a list of `Product` objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the method type to `Product[]` since the sorted list will only contain
    `Product` objects, and modify it so that it returns an empty array by default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The resulting `sort.pipe.ts` file should now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now ready to implement the sorting algorithm of our method. We will
    use the native `sort` method, which sorts items alphabetically by default. We
    will provide a custom comparator function to the `sort` method that overrides
    the default functionality and performs the sorting logic that we want to achieve:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: It is worth noting that the `transform` method checks whether there is input
    data first before proceeding to the sorting process. Otherwise, it returns an
    empty array. This mitigates cases where the collection is set asynchronously,
    or the component that consumes the pipe does not set the collection at all.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the `sort` method, refer to [https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s it! We have successfully created our first pipe. We need to call it
    from our component template to see it in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `product-list.component.ts` file and import the `SortPipe` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `product-list.component.html` file and add the pipe in the `@for`
    block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we run the application using the `ng serve` command, we will notice that
    the product list is now sorted by title alphabetically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά, λογότυπο  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_04_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.3: Product list sorted by title alphabetically'
  prefs: []
  type: TYPE_NORMAL
- en: The sort pipe can sort product data only by `title` . In the following section,
    we will learn how to configure the pipe so that it can sort by other product properties
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Passing parameters to pipes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we learned in the *Manipulating data with pipes* section, we can pass additional
    parameters to a pipe using colons. We use the `args` parameter in the `transform`
    method of a pipe to get the value of each parameter separated by a colon. We learned
    that the Angular CLI creates the `args` parameter by default and uses the spread
    operator to expand its values in the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The `transform` method can currently work only with the `title` property of
    a product. We could leverage the `args` parameter to make it dynamic and allow
    the consumer of the pipe to define the property they want to sort data, such as
    the product price:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove the spread operator from the `args` parameter because we will pass a
    single property of a product each time and change its type, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding method, we use the `keyof` type operator from TypeScript to
    define that the `args` parameter can be any property of a `Product` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the `title` property with the `args` parameter inside the `if` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that in the preceding snippet, we access the `a` and `b` objects using
    square bracket syntax instead of the dot syntax as before.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `args` parameter in the method signature so that it uses the `title`
    property by default, if the consumer does not pass any parameter in the pipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding behavior ensures that the product list component will work without
    any change to the pipe usage.
  prefs: []
  type: TYPE_NORMAL
- en: Run the `ng serve` command and verify that the product list is sorted initially
    by title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `product-list.component.html` file and pass the `price` property as
    a pipe parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the file and wait for the application to reload. You should see that the
    product list is now sorted by price:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![img](img/B21418_04_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.4: Product list sorted by price'
  prefs: []
  type: TYPE_NORMAL
- en: The `@Pipe` decorator contains another significant property that we can set,
    which is directly related to the way that pipes react in the change detection
    mechanism of the Angular framework.
  prefs: []
  type: TYPE_NORMAL
- en: Change detection with pipes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two categories of pipes: **pure** and **impure** . All pipes are
    considered pure by default unless we set the `pure` property explicitly to `false`
    in the `@Pipe` decorator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Angular executes pure pipes when there is a change to the reference of the input
    variable. For example, if the `products` array in the `ProductListComponent` class
    is assigned to a new value, the pipe will correctly reflect that change. However,
    if we add a new product to the array using the native `Array.push` method, the
    pipe will not be triggered because the object reference of the array does not
    change.
  prefs: []
  type: TYPE_NORMAL
- en: Another example is when we have created a pure pipe that operates on a single
    object. Similarly, if the reference of the value changes, the pipe executes correctly.
    If a property of the object changes, the pipe cannot detect the change.
  prefs: []
  type: TYPE_NORMAL
- en: 'A word of caution, however—impure pipes call the `transform` method every time
    the change detection cycle is triggered. So, this might not be good for performance.
    Alternatively, you could leave the `pure` property unset and try to cache the
    value or work with reducers and immutable data to solve this in a better way,
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding snippet, we used the spread parameter syntax to create a new
    reference of the `products` array by appending a new item to the reference of
    the existing array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively to a pure pipe, we can use a **computed signal** , which is more
    effective and ergonomic due to the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: We can access the value of the signal in the component class, as opposed to
    pipes, where their values can be read only in the template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A computed signal is a simple plain function so we do not need to use a TypeScript
    class as in pipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will learn more about signals in *Chapter 7* , *Tracking Application State
    with Signals* .
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom pipes allows us to transform our data in a particular way according
    to our needs. We must create custom directives if we also want to transform template
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: Building directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Angular directives are HTML attributes that extend the behavior or the appearance
    of a standard HTML element. When we apply a directive to an HTML element or even
    an Angular component, we can add custom behavior or alter its appearance. There
    are three types of directives:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Components** : Components are directives that contain an associated HTML
    template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Structural directives** : These add or remove elements from the DOM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attribute directives** : These modify the appearance of a DOM element or
    define a custom behavior. We met attribute directives in class and style bindings
    in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a directive has a template attached, then it becomes a component. In other
    words, components are Angular directives with a view. This rule is handy when
    deciding whether to create a component or a directive for your needs. If you need
    a template, create a component; otherwise, make it a directive.
  prefs: []
  type: TYPE_NORMAL
- en: Custom directives allow us to attach advanced behaviors to elements in the DOM
    or modify their appearance. In the following sections, we will explore how to
    create attribute directives.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying dynamic data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Attribute directives are commonly used to alter the appearance of an HTML element.
    We have all probably found ourselves in a situation where we want to add copyrighted
    information to our applications. Ideally, we want to use this information in various
    parts of our application, on a dashboard or a contact page. The content of the
    information should also be dynamic. The year or range of years (it depends on
    how you want to use it) should update dynamically according to the current date.
    Our first intention is likely to be to create a component, but what about making
    it a directive instead? This way, we could attach the directive to any element
    we want and not bother with a particular template. So, let’s begin!
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the `ng generate` command of the Angular CLI, passing the name
    of the directive as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will generate all the necessary files of the `copyright`
    directive inside the folder where we run the `ng generate` command. The TypeScript
    class of the directive is defined in the `copyright.directive.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `@Directive` is an Angular decorator that defines the properties of the
    Angular directive. It configures a TypeScript class as an Angular directive using
    the `selector` property. It is a CSS selector that instructs Angular to load the
    directive in the location that finds the corresponding attribute in an HTML template.
    The Angular CLI adds the `app` prefix by default, but you can customize it using
    the `--prefix` option when creating the Angular project.
  prefs: []
  type: TYPE_NORMAL
- en: When we use the selector in an HTML template, we do not add the square brackets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use the newly created directive to add copyright information to our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `styles.css` file and add the following CSS styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding snippet, we added the CSS styles for our copyright directive
    in the global CSS stylesheet. Directives do not have an accompanying CSS file
    that we can use, such as components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `copyright.directive.ts` file and import the `ElementRef` class from
    the `@angular/core` npm package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `constructor` of the directive as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding snippet, we used the `ElementRef` class to access and manipulate
    the underlying HTML element attached to the directive. The `nativeElement` property
    contains the actual native HTML element. We also add the `copyright` class using
    the `add` method of the `classList` property. Finally, we change the text of the
    element by modifying the `textContent` property.
  prefs: []
  type: TYPE_NORMAL
- en: The `ElementRef` is a built-in Angular service. To use a service in a component
    or a directive, we need to inject it into the `constructor` , as we will learn
    in *Chapter 5* , *Managing Complex Tasks with Services* .
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.component.ts` file and import the `CopyrightDirective` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `app.component.html` file and add a `<footer>` element to display
    copyright information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the `ng serve` command and observe the application
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά, λογότυπο  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_04_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.5: The application’s output'
  prefs: []
  type: TYPE_NORMAL
- en: When creating directives, it is important to consider reusable functionality
    that doesn’t necessarily relate to a particular feature. The topic we looked at
    was copyrighted information, but we could build other functionalities, such as
    tooltips and collapsible or infinite scrolling features, with relative ease. In
    the following section, we will build another attribute directive that explores
    the options available further.
  prefs: []
  type: TYPE_NORMAL
- en: Property binding and responding to events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Attribute directives are also concerned with the behavior of an HTML element.
    They can extend the functionality of the element and add new features. The Angular
    framework provides two helpful decorators that we can use in our directives to
    enhance the functionality of an HTML element:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@HostBinding` : This binds a value to the property of the native host element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@HostListener` : This binds to an event of the native host element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The native host element is the element where our directive takes action.
  prefs: []
  type: TYPE_NORMAL
- en: The native `<input>` HTML element can support different input types, including
    simple text, radio buttons, and numeric values. When we use the latter, the input
    adds two arrows inline, up and down, to control its value. It is this feature
    of the input element that makes it look incomplete. If we type a non-numeric character,
    the input still renders it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create an attribute directive that rejects non-numeric values entered
    by the keyboard:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following Angular CLI command to create a new directive named `numeric`
    :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `numeric.directive.ts` file and import the two decorators that we
    are going to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a `currentClass` property using the `@HostBinding` decorator that will
    be bound to the `class` property of the `<input>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define an `onKeyPress` method using the `@HostListener` decorator that will
    be bound to the `keypress` native event of the `<input>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `styles.css` file and add the following CSS styles that will be applied
    when a component uses the directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `onKeyPress` method contains the logic of how our directive works under
    the hood.
  prefs: []
  type: TYPE_NORMAL
- en: When the user presses a key inside an `<input>` element, Angular knows to call
    the `onKeyPress` method because we have registered it with the `@HostListener`
    decorator. The `@HostListener` decorator accepts the event name and a list of
    arguments as parameters. In our case, we pass the `keypress` event name and the
    `$event` argument, respectively. The `$event` is the current object that triggered
    the event, which is of the `KeyboardEvent` type and contains the keystrokes entered
    by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Every time the user presses a key, we extract it from the `$event` object, convert
    it into a Unicode character using the `charCodeAt` method, and check it against
    a non-numeric code. If the character is non-numeric, we call the `preventDefault`
    method of the `$event` object to cancel the user action and roll back the `<input>`
    element to its previous state. At the same time, we set the respective class to
    `valid` if the key is numeric and `invalid` if it is not.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can apply the directive in an `<input>` tag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: We will see a real-world usage of the directive in *Chapter 10* , *Collecting
    User Data with Forms* . In the meantime, if you want to try it yourself, remember
    to import the `NumericDirective` class in your component before using it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have reached this point, it is fair to say that you have met almost
    every Angular artifact for building Angular components, which are indeed the wheels
    and the engine of all Angular applications. In the forthcoming chapters, we will
    see how we can design our application architecture better, manage dependency injection
    throughout our component tree, consume data services, and leverage the new Angular
    router to show and hide components when required.
  prefs: []
  type: TYPE_NORMAL
- en: Now, get ready to take on new challenges—in the next chapter, we will discover
    how to use data services to manage complex tasks in our components.
  prefs: []
  type: TYPE_NORMAL
