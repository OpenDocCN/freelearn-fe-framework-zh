["```js\nfunction App() {\n  **function****handleSubmit****(****event****) {**\n    **event.****preventDefault****();**\n    **console****.****log****(****'Submitted!'****);**\n  **}**\n  return (\n    <form **onSubmit****=****{handleSubmit}**>\n      <p>\n        <label htmlFor=\"email\">Email</label>\n        <input type=\"email\" id=\"email\" />\n      </p>\n      <p>\n        <label htmlFor=\"password\">Password</label>\n        <input type=\"password\" id=\"password\" />\n      </p>\n      <p className=\"actions\">\n        <button>Login</button>\n      </p>\n    </form>\n  );\n} \n```", "```js\nfunction App() {\n  **const** **[email, setEmail] =** **useState****(****''****);**\n  **const** **[password, setPassword] =** **useState****(****''****);**\n  function handleSubmit(event) {\n    event.preventDefault();\n    **const** **credentials = { email, password };**\n    **console****.****log****(credentials);**\n  }\n  **function****handleEmailChange****(****event****) {**\n    **setEmail****(event.****target****.****value****);**\n  **}**\n  **function****handlePasswordChange****(****event****) {**\n    **setPassword****(event.****target****.****value****);**\n  **}**\n  return (\n    <form onSubmit={handleSubmit}>\n      <p>\n        <label htmlFor=\"email\">Email</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          **value****=****{email}**\n          **onChange****=****{handleEmailChange}**\n        />\n      </p>\n      <p>\n        <label htmlFor=\"password\">Password</label>\n        <input\n          type=\"password\"\n          id=\"password\"\n          **value****=****{password}**\n          **onChange****=****{handlePasswordChange}**\n        />\n      </p>\n      <p className=\"actions\">\n        <button>Login</button>\n      </p>\n    </form>\n  );\n} \n```", "```js\nfunction App() {\n  **const** **emailRef =** **useRef****(****null****);**\n  **const** **passwordRef =** **useRef****(****null****);**\n  function handleSubmit(event) {\n    event.preventDefault();\n    const credentials = {\n      **email****: emailRef.****current****.****value****,**\n      **password****: passwordRef.****current****.****value****,**\n    };\n    console.log(credentials);\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <p>\n        <label htmlFor=\"email\">Email</label>\n        <input type=\"email\" id=\"email\" **ref****=****{emailRef}** />\n      </p>\n      <p>\n        <label htmlFor=\"password\">Password</label>\n        <input type=\"password\" id=\"password\" **ref****=****{passwordRef}** />\n      </p>\n      <p className=\"actions\">\n        <button>Login</button>\n      </p>\n    </form>\n  );\n} \n```", "```js\nfunction App() {\n  function handleSubmit(event) {\n    event.preventDefault();\n    **const** **fd =** **new****FormData****(event.****currentTarget****);**\n    const credentials = {\n      email: **fd.****get****(****'email'****)**,\n      password: **fd.****get****(****'password'****)**,\n    };\n    console.log(credentials);\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <p>\n        <label htmlFor=\"email\">Email</label>\n        <input type=\"email\" id=\"email\" **name****=****\"email\"** />\n      </p>\n      <p>\n        <label htmlFor=\"password\">Password</label>\n        <input type=\"password\" id=\"password\" **name****=****\"password\"** />\n      </p>\n      <p className=\"actions\">\n        <button>Login</button>\n      </p>\n    </form>\n  );\n} \n```", "```js\nfunction clearInput() {\n  document.getElementById('email').value = ''; // imperative code :(\n} \n```", "```js\nconst [email, setEmail] = useState('');\n// ... other code\nfunction clearInput() {\n  setEmail('');\n}\n// simplified JSX code below\nreturn (\n  <form>\n    <input \n      value={email} \n      onChange={event => setEmail(event.target.value)} />\n  </form>\n); \n```", "```js\nconst emailRef = useRef(null);\nfunction showForm() {\n  // other code ...\n  emailRef.current.focus(); \n}\n// simplified JSX code below\nreturn (\n  <form>\n    <input ref={emailRef} />\n  </form>\n); \n```", "```js\nfunction App() {\n  function **submitAction****(****formData****)** {\n    const credentials = {\n      email: formData.get('email'),\n      password: formData.get('password'),\n    };\n    console.log(credentials);\n  }\n  return (\n    <form **action****=****{submitAction}**>\n      <p>\n        <label htmlFor=\"email\">Email</label>\n        <input type=\"email\" id=\"email\" name=\"email\" />\n      </p>\n      <p>\n        <label htmlFor=\"password\">Password</label>\n        <input type=\"password\" id=\"password\" name=\"password\" />\n      </p>\n      <p className=\"actions\">\n        <button>Login</button>\n      </p>\n    </form>\n  );\n} \n```", "```js\nfunction storeTaskAction(formData) {\n  const task = {\n    title: formData.get('title'),\n    body: formData.get('body'),\n    dueDate: formData.get('date')\n  };\n  localStorage.setItem('daily-task', JSON.stringify(task));\n} \n```", "```js\n**async** function storeTodoAction(formData) {\n  const todoTitle = formData.get('title');\n  const response = await fetch(\n    'https://jsonplaceholder.typicode.com/todos', \n    {\n      method: 'POST',\n      body: JSON.stringify({ title: todoTitle }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    }\n  );\n  const todo = await response.json();\n  console.log(todo);\n} \n```", "```js\nimport { useState } from 'react';\nfunction App() {\n  const [error, setError] = useState(null);\n  async function storeTodoAction(formData) {\n    const todoTitle = formData.get('title');\n    if (!todoTitle || todoTitle.trim() === '') {\n      **setError****(****'Title is required.'****);** **// state update BEFORE delay**\n    }\n    **// 3s delay to simulate a slow process**\n    **await****new****Promise****(****(****resolve****) =>****setTimeout****(resolve,** **3000****));** \n    console.log('Submission done!');\n  }\n  return (\n    <>\n      <form action={storeTodoAction}>\n        <p>\n          <label htmlFor=\"title\">Title</label>\n          <input type=\"text\" id=\"title\" name=\"title\" />\n        </p>\n        {error && <p className=\"errors\">{error}</p>}\n        <p className=\"actions\">\n          <button>Store Todo</button>\n        </p>\n      </form>\n    </>\n  );\n} \n```", "```js\n**import** **{ useActionState }** **from****'react'****;**\nfunction App() {\n  async function storeTodoAction(**prevState**, formData) {\n    const todoTitle = formData.get('title');\n    if (!todoTitle || todoTitle.trim() === '') {\n      **return** **{**\n        **error****:** **'Title must not be empty.'****,**\n      **};**\n    }\n    // sending HTTP request etc...\n    **return** **{**\n      **error****:** **null****,**\n    **};**\n  }\n  **const** **[formState, formAction] =** **useActionState****(storeTodoAction, {**\n    **error****:** **null****,**\n  **});**\n  return (\n    <form **action****=****{formAction}**>\n      <p>\n        <label htmlFor=\"title\">Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" />\n      </p>\n      **{formState.error &&** **<****p****className****=****'errors'****>**\n        **{formState.error}**\n      **</****p****>****}**\n      <p className=\"actions\">\n        <button>Store Todo</button>\n      </p>\n    </form>\n  );\n} \n```", "```js\nconst [**formState**, formAction] = useActionState(storeTodoAction, {\n    error: null,\n  }\n); \n```", "```js\nasync function storeTodoAction(**prevState**, formData) {\n  // ...\n} \n```", "```js\nasync function storeTodoAction(**prevState**, formData) {\n  // ...\n  return {\n    error: 'Title must not be empty.'\n  };\n} \n```", "```js\n**async****function****saveTodo****(****todo****) {**\n  **// dummy function that simulates a slow backend which manages todos**\n  **await****new****Promise****(****(****resolve****) =>****setTimeout****(resolve,** **3000****));** **// delay**\n  **const** **response =** **await****fetch****(**\n    **'https://jsonplaceholder.typicode.com/todos'****, {**\n      **method****:** **'POST'****,**\n      **body****:** **JSON****.****stringify****(todo),**\n      **headers****: {**\n        **'Content-type'****:** **'application/json; charset=UTF-8'****,**\n      **},**\n    **}**\n  **);**\n  **const** **fetchedTodo =** **await** **response.****json****();**\n  **console****.****log****(fetchedTodo);**\n**}**\nfunction App() {\n  async function storeTodoAction(prevState, formData) {\n    const todoTitle = formData.get('title');\n    if (!todoTitle || todoTitle.trim() === '') {\n      return {\n        error: 'Title must not be empty.',\n      };\n    }\n    **await****saveTodo****({** **title****: todoTitle });**\n    return {\n      error: null,\n    };\n  }\n  // same code as before, hence omitted\n} \n```", "```js\nfunction App() {\n  async function storeTodoAction(prevState, formData) {\n    // same code as before, hence omitted\n  }\n  const [formState, formAction, **pending**] = useActionState(\n    storeTodoAction, \n    {\n      error: null,\n    }\n  );\n  return (\n    <form action={formAction}>\n      <p>\n        <label htmlFor=\"title\">Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" />\n      </p>\n      {formState.error && \n        <p className=\"errors\">{formState.error}</p>}\n      <p className=\"actions\">\n        <button **disabled****=****{pending}**>\n          **{pending ? 'Saving' : 'Store'} Todo**\n        </button>\n      </p>\n    </form>\n  );\n} \n```", "```js\n**import** **{ useFormStatus }** **from****'react-dom'****;**\nimport { saveTodo } from './todos.js';\nfunction SubmitButton() {\n  **const** **{ pending } =** **useFormStatus****();**\n  return (\n    <button disabled={pending}>\n      **{pending ? 'Saving' : 'Store'} Todo**\n    </button>\n  );\n}\nfunction App() {\n  async function storeTodoAction(formData) {\n    const todo = { title: formData.get('title') };\n    await saveTodo(todo);\n  }\n  return (\n    <form action={storeTodoAction}>\n      <p>\n        <label htmlFor=\"title\">Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" />\n      </p>\n      <p className=\"actions\">\n        **<****SubmitButton** **/>**\n      </p>\n    </form>\n  );\n} \n```", "```js\nimport { useFormStatus } from 'react-dom';\nimport { useState } from 'react';\nlet storedTodos = [];\nexport async function saveTodo(todo) {\n  // dummy function that simulates a slow backend which manages todos\n  **await****new****Promise****(****(****resolve****) =>****setTimeout****(resolve,** **3000****));**\n  const newTodo = { ...todo, id: new Date().getTime() };\n  storedTodos = [...storedTodos, newTodo];\n  return storedTodos;\n}\nfunction SubmitButton() {\n  // same as before, didn't change, hence omitted here\n}\nfunction App() {\n  **const** **[todos, setTodos] =** **useState****(storedTodos);**\n  async function storeTodoAction(formData) {\n    const todo = { title: formData.get('title') };\n    const updatedTodos = await saveTodo(todo); // takes 3s\n    **setTodos****(updatedTodos);**\n  }\n  return (\n    <>\n      <form action={storeTodoAction}>\n        <p>\n          <label htmlFor=\"title\">Title</label>\n          <input type=\"text\" id=\"title\" name=\"title\" />\n        </p>\n        <p className=\"actions\">\n          <SubmitButton />\n       </p>\n      </form>\n      <div id=\"todos\">\n        <h2>My Todos</h2>\n        **{todos.length === 0 &&** **<****p****>****No todos found.****</****p****>****}**\n        **{todos.length > 0 && (**\n          **<****ul****>**\n            **{todos.map((todo) => (**\n              **<****li****key****=****{todo.id}****>****{todo.title}****</****li****>**\n            **))}**\n          **</****ul****>**\n        **)}**\n      </div>\n    </>\n  );\n} \n```", "```js\nconst [optimisticState, addOptimistic] = useOptimistic(\n  state, updateFunction\n); \n```", "```js\n**import** **{ useOptimistic }** **from****'react'****;**\nimport { saveTodo, getTodos } from './todos.js';\nimport { useState } from 'react';\nfunction SubmitButton() {\n  // same code as before, hence omitted\n}\nfunction App() {\n  const loadedTodos = getTodos(); // initial fetch\n  const [todos, setTodos] = useState(loadedTodos);\n  **const** **[optimisticTodos, addOptimisticTodo] =** **useOptimistic****(**\n    **todos,**\n    **(****currentState, optimisticValue****) =>** **{**\n      **return** **[...currentState, { ...optimisticValue,** **id****:** **'temp'** **}];**\n    **}**\n  **);**\n  async function storeTodoAction(formData) {\n    const todo = { title: formData.get('title') };\n    **addOptimisticTodo****(todo);**\n    const updatedTodos = await saveTodo(todo);\n    setTodos(updatedTodos);\n  }\n  return (\n    <form action={storeTodoAction}>\n      <p>\n        <label htmlFor=\"title\">Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" />\n      </p>\n      <p className=\"actions\">\n        <SubmitButton />\n      </p>\n    </form>\n    <div id=\"todos\">\n      <h2>My Todos</h2>\n      {**optimisticTodos**.length === 0 && <p>No todos found.</p>}\n      {**optimisticTodos**.length > 0 && (\n        <ul>\n          {**optimisticTodos**.map((todo) => (\n            <li key={todo.id}>{todo.title}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n} \n```"]