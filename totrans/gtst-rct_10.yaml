- en: Chapter 10. What's Next
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we have covered all the topics from building a React-based JavaScript
    application from scratch, integrating it with the Facebook Graph API, digging
    into the various stages of a component, it's life cycle, validating, testing,
    and deploying the apps. With that, we have reached the end of this book, but let's
    explore some advanced topics in React world.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be exploring the following topics briefly because
    it''s not possible to cover everything in detail within one chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: AJAX in React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Isomorphic applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hot reloading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redux React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relay and GraphQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Native
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AJAX in React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like in any other applications, AJAX in a React-based application can be used
    to fetch data asynchronously. According to the Facebook documentation of loading
    the data from the server using AJAX ([https://facebook.github.io/react/tips/initial-ajax.html](https://facebook.github.io/react/tips/initial-ajax.html)),
    you need to remember some of the key points as mentioned here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Include the jQuery library in your HTML:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Because there is no separate Ajax-only library from jQuery that can be used,
    the entire jQuery has to be used in a React-based application, while using Ajax.
    Downloading the minified version of jQuery from cdn results in much less load
    time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Load the data in the life cycle phase of `componentDidMount`. This method occurs
    only once during the life cycle on the client, and any child components can be
    accessed in this phase. Any external js library or loading data using AJAX is
    advised to be done in this phase.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `isMounted` method is used to check whether the component is mounted in
    the DOM. Although this is used with AJAX before `setState()`, this method will
    be deprecated while using ES6 syntaxes, which use `React.component`, and may be
    entirely removed in future React versions. Refer to [https://facebook.github.io/react/docs/component-api.html](https://facebook.github.io/react/docs/component-api.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the code of `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the code for `index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![AJAX in React](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: React with Ajax ([https://facebook.github.io/react/tips/initial-ajax.html](https://facebook.github.io/react/tips/initial-ajax.html))
  prefs: []
  type: TYPE_NORMAL
- en: React Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React Router is a library based on top of the React library, which helps in
    easy and quick routing of an application with multiple pages. Although it may
    be possible to build such a flow in the application without the React-router,
    as the application grows with many pages, it becomes cumbersome to identify the
    child-parent relationship between the pages. This is where React-router comes
    to our rescue, where it identifies how to build the nested UIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/reactjs/react-router](https://github.com/reactjs/react-router)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.npmjs.com/package/react-router](https://www.npmjs.com/package/react-router)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Server-side rendering in ReactJS is done by JavaScript (NodeJS or io.js). This
    method actually prerenders the initial state of the React components at the server
    side. Thus, it is helpful in fast rendering of web pages, as the users can see
    the web pages without having to wait for the entire JavaScript at the client side
    to finish loading.
  prefs: []
  type: TYPE_NORMAL
- en: However, this kind of rendering should not be used for those applications where
    a huge amount of data has to be piped from the server to the client side, which
    may slow the page load. In such cases, we may use pagination or bulk load the
    data in chunks, which won't slow the page load, but can be fetched from the server
    side in specific time intervals.
  prefs: []
  type: TYPE_NORMAL
- en: The following two methods from the React API provides the backbone of server-side
    rendering ([https://facebook.github.io/react/docs/top-level-api.html](https://facebook.github.io/react/docs/top-level-api.html)).
  prefs: []
  type: TYPE_NORMAL
- en: ReactDOMServer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `react-dom/server` package allows you to render your components on the server.
  prefs: []
  type: TYPE_NORMAL
- en: The `ReactDOMServer.renderToString` method returns a string. It generates two
    additional DOM attributes—`data-React-id` and `data-React-checksum`—which are
    used internally by the ReactJS library.
  prefs: []
  type: TYPE_NORMAL
- en: This method renders an element of `ReactElement` to the initial HTML of the
    view and returns an HTML string.
  prefs: []
  type: TYPE_NORMAL
- en: It should only be used while using the server-side rendering and at the server
    side.
  prefs: []
  type: TYPE_NORMAL
- en: During the initial page load, sending this method from the server to the client
    results in faster page load and enables web crawling for **search engine optimization**
    (**SEO**).
  prefs: []
  type: TYPE_NORMAL
- en: When the `ReactDOM.render()` is called to any node previously, React will attach
    event handlers on those nodes, resulting in faster page loads.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `ReactDOMServer.renderToStaticMarkup` method is similar to `renderToString`.
  prefs: []
  type: TYPE_NORMAL
- en: It is used mainly to generate static pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In order to illustrate the example of the server-side rendering in ReactJS,
    we can use `express` (the minimalistic web framework for NodeJS applications)
    at the server side.
  prefs: []
  type: TYPE_NORMAL
- en: The `npm update`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `npm install express`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm init`: This will generate a `package.json` file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the content mentioned later in the `index.js` file to initiate a simple
    web application running on port `3000` using express. The same example can be
    found in the readme file of the `node_modules/express` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We first begin with declaring the app as an instance of express.
  prefs: []
  type: TYPE_NORMAL
- en: We then denote the basic routing by the express server. In this example, the
    express instance (app) is using the `GET` HTTP method. Thus, when `app.get` calls
    the default path (`/`) or any PATH on the server, the third parameter being the
    HANDLER, should send a response `Hello World` to the client (browser) when the
    route is matched.
  prefs: []
  type: TYPE_NORMAL
- en: The application runs on port `3000`. You can run the app on any port as per
    your requirement.
  prefs: []
  type: TYPE_NORMAL
- en: Execute the application using the node command on the express file`:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Using express, we can now see the example of ReactJS server-side rendering:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Within your app directory, execute the following command to download express:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: From the `express.js` file, we will be calling the React component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the code for creating the `ReactComponent`, without using JSX:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ReactComponent.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: After running the express with the above command as node index.js from your
    app's root dir in the terminal, we will be seeing the following screenshot in
    our browser's `localhost:3000`.
  prefs: []
  type: TYPE_NORMAL
- en: '![ReactDOMServer](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Express JS simple app
  prefs: []
  type: TYPE_NORMAL
- en: Here is the explanation on the earlier-mentioned code.
  prefs: []
  type: TYPE_NORMAL
- en: '`createElement` is the primary type of React, which has four properties (`types`,
    `properties`, `keys`, `ref`). The highlighted code mentioned earlier means that
    it will create a React element of the type list (`li`), which does not have any
    property but will pass the values from the React-rendered component''s property
    (whose key name is `argument`).'
  prefs: []
  type: TYPE_NORMAL
- en: According to the Facebook documentation ([https://facebook.github.io/react/docs/top-level-api.html](https://facebook.github.io/react/docs/top-level-api.html))
    for the React API, the highlighted code with respect to `renderToStaticMarkup`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*"Similar to `renderToString`, except this doesn''t create extra DOM attributes
    such as `data-react-id`, that React uses internally. This is useful if you want
    to use React as a simple static page generator, as stripping away the extra attributes
    can save lots of bytes."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`renderToString` renders `ReactElement` to its initial HTML. This should only
    be used on the server. React will return an HTML string. You can use this method
    to generate HTML on the server and send the markup down on the initial request
    for faster page loads and to allow search engines to crawl your pages for SEO
    purposes.'
  prefs: []
  type: TYPE_NORMAL
- en: If you call `ReactDOM.render()` on a node that already has this server-rendered
    markup, React will preserve it and only attach event handlers, allowing you to
    have a very fast first-load experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for the `express.js` file is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: After running the express with the above command as node index.js from your
    app's root dir in the terminal, we will be seeing the following screenshot in
    our browser's `localhost:4000`.
  prefs: []
  type: TYPE_NORMAL
- en: '![ReactDOMServer](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The screenshot of the application, React with server-side rendering, showing
    default pages. As we can see, the port in which the app is listening is `4000`.
  prefs: []
  type: TYPE_NORMAL
- en: In case of dynamic routes, this is the screenshot of React with server-side
    rendering, showing other pages.
  prefs: []
  type: TYPE_NORMAL
- en: '![ReactDOMServer](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As mentioned earlier, if we use `renderToString` instead of `renderToStaticMarkup`,
    we can see two attributes such as `data-react-id` and `data-react-checksum` in
    the React component.
  prefs: []
  type: TYPE_NORMAL
- en: '`data-react-id`: is the custom data attribute that the ReactJS library uses
    to specifically identify it''s components within DOM. It can be present both at
    the client or the server side, whereas the one present at the server starts with
    a dot followed by some letters and then numbers, the IDs present at client side
    are only numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows the earlier method `rederToString()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Rerunning the express with the above changes, will render the following in the
    browser's `localhost:4000`, as depicted in the screenshot below.
  prefs: []
  type: TYPE_NORMAL
- en: '![ReactDOMServer](img/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A screenshot of the application, React with server-side rendering, using method
    `renderToString`
  prefs: []
  type: TYPE_NORMAL
- en: To sum up, we can see that React-router is a library that is capable of running
    both at the server side and at the client side (browser). In order to use the
    server-side rendering, we use the `renderToString()` method along with the routes.
    During the request-response cycle, the React-router on the server matches with
    the requested route and renders the correct route from the server to the client
    (browser) using the `renderToString()` method of the React library.
  prefs: []
  type: TYPE_NORMAL
- en: Isomorphic applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Isomorphic JavaScript applications** are those where JavaScript is used both
    at the server and client side. Thus, the same React component can be used both
    at the client as well as at the server side. Some of the advantages of building
    such applications are:'
  prefs: []
  type: TYPE_NORMAL
- en: Whenever required, render the view at the server side based on the application
    state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server will render the application in exactly the same way the client would
    have rendered for increased consistency
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In case the JavaScript in the browser is not working, the application would
    still work because the same JavaScript is present at the server side as well.
    You need to send the action to the server in order to attain the same result.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hot reloading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Hot reloading** is a term used in the JavaScript world, which is used to
    refer to live changes in the browser without the browser being refreshed. In the
    React ecosystem, React Hot Loader is widely used for the same purpose.'
  prefs: []
  type: TYPE_NORMAL
- en: React Hot Loader is a plugin for Webpack, which results in instantaneous and
    live changes in the browser, without losing states. The changes can be visible
    while editing React components and functions as `LiveReload` for React.
  prefs: []
  type: TYPE_NORMAL
- en: Some limitations of the react hot loader first version have been discussed by
    the author (Dan Abramov) here at [https://medium.com/@dan_abramov/the-death-of-react-hot-loader-765fa791d7c4#.fc78lady9](https://medium.com/@dan_abramov/the-death-of-react-hot-loader-765fa791d7c4#.fc78lady9).
    The details of the project can be found at [https://gaearon.github.io/react-hot-loader/](https://gaearon.github.io/react-hot-loader/).
  prefs: []
  type: TYPE_NORMAL
- en: Redux React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Redux** is a JavaScript library designed by Dan Abramov, which helps in containerization
    of the states for the JavaScript applications. As the application grows, the complexity
    rises due to the requirement of the back and forth state updatability between
    the model and the view. Redux came to the rescue to solve this crooked complex
    path of state mutation and asynchronism. Thus, it defines itself as an attempt
    to make predictable state mutations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It can be used with React or any other view library. Some of the key points
    to be remembered while using Redux are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The state of the JavaScript application is stored entirely inside the same object
    tree inside a *single store*. Thus, even when the application grows, it's easier
    to debug. The development phase is also faster as the entire application state
    is in one place. The state is read only; there are only getters in the state and
    no setters as you are unable to write to this store.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any change to the state can only be done by emitting an *action*. The action
    is nothing but an object that describes the changes that happened. These action
    objects can be logged, serialized, stored, and replayed later in order to debug.
    Except for these actions, no views or network callback can change the state. This
    restriction makes the changes in the state mutation predictable, without the hassle
    of looking out for any transient hidden changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third component in Redux is *reducers*. Reducers tell how the actions change
    the state tree. The reducers are nothing but functions that have the previous
    state and an action. The reducers therefore act as the setters for the state store
    as they are setting the new state. Any change to be performed is not on the actual
    state object but on the copy of the state object (new state object). A single
    root reducer can be used in simple applications, whereas you can delegate to multiple
    child reducers (by passing additional data) as the number of tasks grow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://redux.js.org/docs/basics/UsageWithReact.html](http://redux.js.org/docs/basics/UsageWithReact.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relay and GraphQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Relay** is a framework in ReactJS for **declarative data fetching**, which
    solves the problem of updating the data in a React-based application and where
    exactly it has to be updated. Using GraphQL, the Relay framework decouples *what*
    data is to be fetched from *how* it should be fetched.'
  prefs: []
  type: TYPE_NORMAL
- en: GraphQL is like a query language to query a graph though not typically a graph
    like those represented in pie charts, x, y axes, or Venn diagrams.
  prefs: []
  type: TYPE_NORMAL
- en: It's used to query from a relationship graph, where each node and the relationship
    between them are represented as edges.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to fetch data from a subset of such a relationship-based graph, GraphQL
    is very useful.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlike in representational state transfer (REST) where data is fetched from
    the server based on server endpoint using resources, in GraphQL data are fetched
    from the server based on the requirement by the client.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thus, the data is decoupled, and all the data are fetched at one go from the
    server within a single network request.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data can be stored and retrieved from a cache with ease and this results in
    faster performance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any write operation is named a mutation. It's not a 1:1 relationship between
    the data change in the disk which GraphQL stores and returns to the developer.
    The best way is to use a query that is the intersection between the cached-date
    and the data that may change.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For an in-depth understanding of the Relay framework, refer to [https://facebook.github.io/relay/docs/thinking-in-relay.html#content](https://facebook.github.io/relay/docs/thinking-in-relay.html#content).
  prefs: []
  type: TYPE_NORMAL
- en: React Native
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As the name suggests, **React Native** is used to build native applications
    in iOS and Android platforms using JavaScript and ReactJS. Some of the key features
    of React Native, favored by the Facebook developer teams ([https://facebook.github.io/react-native/](https://facebook.github.io/react-native/))
    for the native platforms, are mentioned here:'
  prefs: []
  type: TYPE_NORMAL
- en: It has the power of consistency in look and feel using React component counterparts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can develop the app using Chrome developer tools and run in a simulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is asynchronous execution of all the code between the application and
    the native platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Native seamlessly handles touch events, polyfills, StyleSheet abstraction,
    designing common UI layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's widely used to extend native code creating iOS and Android modules and
    views and reusing them later, with ease
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Native's qualities of being declarative, asynchronous, and responsive
    are highly beneficial for iOS development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note that the list here is nothing near to an exhaustive one, there are plethora
    of good articles, blog posts, and newer ones budding each new day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the sites to keep an eye on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://facebook.github.io/react/blog/](https://facebook.github.io/react/blog/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://egghead.io](https://egghead.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://code-cartoons.com/](https://code-cartoons.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are some of the communities on social media:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://twitter.com/ReactJSNews](https://twitter.com/ReactJSNews)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://twitter.com/reactjs](https://twitter.com/reactjs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://twitter.com/dan_abramov](https://twitter.com/dan_abramov)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ReactJS is a vibrant JS community. There are many changes and advancements in
    the JavaScript ecosystem happening on a daily basis. Keeping ourselves up to date
    is a mammoth and essential task. We can closely track the latest in JS world by
    following them on social platforms, question-answer forums, their websites, attending
    conferences and, last but not the least, always getting our hands dirty.
  prefs: []
  type: TYPE_NORMAL
- en: For any comments, suggestions or discussion feel free to contact us at `@doelsengupta`,
    `@singhalmanu`.
  prefs: []
  type: TYPE_NORMAL
