["```js\nimport path from 'path';\nimport Express from 'express';\n\nvar app = Express();\nvar server;\n\nconst PATH_STYLES = path.resolve(__dirname, '../client/styles');\nconst PATH_DIST = path.resolve(__dirname, '../../dist');\n\napp.use('/styles', Express.static(PATH_STYLES));\napp.use(Express.static(PATH_DIST));\n\napp.get('/', (req, res) => {\n  res.sendFile(path.resolve(__dirname, '../client/index.html'));\n});\n\nserver = app.listen(process.env.PORT || 3000, () => {\n  var port = server.address().port;\n\n  console.log('Server is listening at %s', port);\n});\n```", "```js\napp.get('/', (req, res) => {\n  res.sendFile(path.resolve(__dirname, '../client/index.html'));\n});\n```", "```js\nrequire('babel/register');\n\nmodule.exports = require('./server');\n```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n  <meta charset=\"UTF-8\">\n  <title>Search</title>\n\n  <link href=\"styles/main.css\" rel=\"stylesheet\" />\n\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\">\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\">\n<link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css\">\n\n</head>\n<body>\n  <div id=\"app\"></div>\n  <script src=\"img/bundle.js\"></script>\n</body>\n</html>\n```", "```js\n// file: scr/client/scripts/client.js\nimport App from '../../app';\n\nvar attachElement = document.getElementById('app');\nvar state = {};\nvar app;\n\n// Create new app and attach to element\napp = new App({ state: state});\n\napp.renderToDOM(attachElement);\n```", "```js\nimport React from 'react/addons';\nimport AppRoot from './components/AppRoot';\n\nclass App {\n  constructor(options) {\n    this.state = options.state;\n }\n\n  render(element) {\n    var appRootElement = React.createElement(AppRoot, {\n      state: this.state\n    });\n\n    // render to DOM\n    if (element) {\n      React.render(appRootElement, element);\n      return;\n    }\n\n    // render to string\n    return React.renderToString(appRootElement);\n  }\n\n  renderToDOM(element) {\n    if (!element) {\n      new Error('App.renderToDOM: element is required');\n    }\n\n    this.render(element);\n  }\n\n  renderToString() {\n    return this.render();\n  }\n}\n\nexport default App;\n```", "```js\nrequire(\"jquery\");\nimport React from 'react/addons';\nimport SearchPage from './SearchPage'\n\nvar AppRoot = React.createClass({\n    propTypes: {\n      state: React.PropTypes.object.isRequired\n    },\n    render()\n    {\n      return <SearchPage/>;\n    }\n  })\n  ;\n\nexport default AppRoot;\n```", "```js\n{\n \"start\": 0,\n \"num_found\": 6,\n \"numFound\": 6,\n \"docs\": [\n  {\n   \"title_suggest\": \"Automatic search term variant generation for document retrieval\",\n   \"edition_key\": [\n    ..\n   ],\nâ€¦\n   ],\n   \"author_name\": [\n..\n..}]\n}\n```", "```js\n  getInitialState(){\n    return {docs: [], numFound: 0, num_found: 0, start: 0, searchCompleted: false, searching: false}\n  }\n```", "```js\nrender() {\n    let tabStyles = {paddingTop: '5%'};\n    return (\n        <div className='container'>\n          <div className=\"row\" style={tabStyles}>\n            <div className=\"col-lg-8 col-lg-offset-2\">\n              <div className=\"input-group\">\n                <input type=\"text\" className=\"form-control\" placeholder=\"Search for Projects...\" ref='searchInput'/>\n            <span className=\"input-group-btn\">\n              <button className=\"btn btn-default\" type=\"button\" onClick={this.performSearch}>Go!</button>\n            </span>\n              </div>\n            </div>\n          </div>\n       </div>\n    );\n  },\n```", "```js\n  performSearch(){\n    let searchTerm = $(this.refs.searchInput.getDOMNode()).val();\n    this.openLibrarySearch(searchTerm);\n    this.setState({searchCompleted: false, searching: true});\n  },\n```", "```js\n openLibrarySearch(searchTerm){\n    let openlibraryURI = `https://openlibrary.org/search.json?page=1&q=${searchTerm}}`;\n    fetch(openlibraryURI)\n        .then(this.parseJSON)\n        .then(this.updateState)\n        .catch(function (ex) {\n          console.log('Parsing failed', ex)\n        })\n  }\n```", "```js\n  parseJSON(response) {\n    return response.json();\n  },\n\n// response.json() is returning the JSON content from the response. \n\nupdateState(json){\n    this.setState({\n      ...json,\n      searchCompleted: true,\n      searching: false\n    });\n  },\n```", "```js\nObject.assign({}, json, {searchCompleted: true, searching: false} )\n```", "```js\nrender() {\n    let tabStyles = {paddingTop: '5%'};\n    return (\n        <div className='container'>\n          <div className=\"row\" style={tabStyles}>\n            <div className=\"col-lg-8 col-lg-offset-2\">\n              <div className=\"input-group\">\n                <input type=\"text\" className=\"form-control\" placeholder=\"Search for Projects...\" ref='searchInput'/>\n            <span className=\"input-group-btn\">\n              <button className=\"btn btn-default\" type=\"button\" onClick={this.performSearch}>Go!</button>\n            </span>\n              </div>\n            </div>\n          </div>\n          { (() => {\n            if (this.state.searching) {\n              return this.renderSearching();\n            }\n            return this.state.searchCompleted ? this.renderSearchElements() : <div/>\n          })()}\n        </div>\n    );\n  },\n```", "```js\nrenderSearching(){\n    return <div className=\"row\">\n      <div className=\"col-lg-8 col-lg-offset-2\">\n        <div className='text-center'><i className=\"fa fa-spinner fa-pulse fa-5x\"></i></div>\n      </div>\n    </div>;\n  },\n```", "```js\nrenderSearchElements(){\n    return (\n\n        <div className=\"row\">\n          <div className=\"col-lg-8 col-lg-offset-2\">\n            <span className='text-center'>Total Results: {this.state.numFound}</span>\n\n            <table className=\"table table-stripped\">\n              <thead>\n              <th>Title</th>\n              <th>Title suggest</th>\n              <th>Author</th>\n              <th>Edition</th>\n              </thead>\n              <tbody>\n              {this.renderDocs(this.state.docs)}\n              </tbody>\n            </table>\n\n          </div>\n        </div>\n\n    );\n  },\n\n  renderDocs(docs){\n    return docs.map((doc) => {\n      console.log(doc);\n      return <tr key={doc.cover_edition_key}>\n        <td>{doc.title}</td>\n        <td>{doc.title_suggest}</td>\n        <td>{(doc.author_name || []).join(', ')}</td>\n        <td>{doc.edition_count}</td>\n      </tr>\n    })\n  },\n```", "```js\nimport React from 'react';\nvar SearchPage = React.createClass({\n  getInitialState(){\n    return {docs: [], numFound: 0, num_found: 0, start: 0, searchCompleted: false, searching: false}\n  },\n  render() {\n    let tabStyles = {paddingTop: '5%'};\n    return (\n      <div className='container'>\n        <div className=\"row\" style={tabStyles}>\n          <div className=\"col-lg-8 col-lg-offset-2\">\n            <div className=\"input-group\">\n              <input type=\"text\" className=\"form-control\" placeholder=\"Search for Projects...\" ref='searchInput'/>\n            <span className=\"input-group-btn\">\n              <button className=\"btn btn-default\" type=\"button\" onClick={this.performSearch}>Go!</button>\n            </span>\n            </div>\n          </div>\n        </div>\n        { (() => {\n          if (this.state.searching) {\n            return this.renderSearching();\n          }\n          return this.state.searchCompleted ? this.renderSearchElements() : <div/>\n        })()}\n      </div>\n    );\n  },\n  renderSearching(){\n    return <div className=\"row\">\n      <div className=\"col-lg-8 col-lg-offset-2\">\n        <div className='text-center'><i className=\"fa fa-spinner fa-pulse fa-5x\"></i></div>\n      </div>\n    </div>;\n  },\n  renderSearchElements(){\n    return (\n      <div className=\"row\">\n        <div className=\"col-lg-8 col-lg-offset-2\">\n          <span className='text-center'>Total Results: {this.state.numFound}</span>\n          <table className=\"table table-stripped\">\n            <thead>\n            <th>Title</th>\n            <th>Title suggest</th>\n            <th>Author</th>\n            <th>Edition</th>\n            </thead>\n            <tbody>\n            {this.renderDocs(this.state.docs)}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  },\n  renderDocs(docs){\n    return docs.map((doc) => {\n      console.log(doc);\n      return <tr key={doc.cover_edition_key}>\n        <td>{doc.title}</td>\n        <td>{doc.title_suggest}</td>\n        <td>{(doc.author_name || []).join(', ')}</td>\n        <td>{doc.edition_count}</td>\n      </tr>\n    })\n  },\n\n  performSearch(){\n    let searchTerm = $(this.refs.searchInput.getDOMNode()).val();\n    this.openLibrarySearch(searchTerm);\n    this.setState({searchCompleted: false, searching: true});\n  },\n\n  parseJSON(response) {   return response.json();  },\n\n  updateState(json){\n    this.setState({\n      ...json,\n      searchCompleted: true,\n      searching: false\n    });\n  },\n  openLibrarySearch(searchTerm){\n    let openlibraryURI = `https://openlibrary.org/search.json?page=1&q=${searchTerm}}`;\n    fetch(openlibraryURI)\n      .then(this.parseJSON)\n      .then(this.updateState)\n      .catch(function (ex) {\n        console.log('Parsing failed', ex)\n      })\n  }\n});\nmodule.exports = SearchPage;\n```", "```js\n          { (() => {\n            if (this.state.searching) {\n              return this.renderSearching();\n            }\n            return this.state.searchCompleted ? this.renderSearchElements() : <div/>\n          })()}\n```", "```js\napp.renderToDOM(attachElement);\n```", "```js\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n  <meta charset=\"UTF-8\">\n  <title>Search</title>\n\n  <link href=\"styles/main.css\" rel=\"stylesheet\" />\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\">\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\">\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css\">\n</head>\n<body>\n  <div id=\"app\">\n  <%- reactOutput %>\n  </div>\n  <script src=\"img/bundle.js\"></script>\n</body>\n</html>\n```", "```js\nimport AppRoot from '../app/components/AppRoot'\nimport React from 'react/addons';\n```", "```js\napp.get('/', (req, res) => {\n  var reactAppContent = React.renderToString(<AppRoot state={{} }/>);\n  console.log(reactAppContent);\n  res.render(path.resolve(__dirname, '../client/index.ejs'), {reactOutput: reactAppContent});\n});\n```", "```js\nimport path from 'path';\nimport Express from 'express';\n\nimport AppRoot from '../app/components/AppRoot'\nimport React from 'react/addons';\n\nvar app = Express();\nvar server;\n\nconst PATH_STYLES = path.resolve(__dirname, '../client/styles');\nconst PATH_DIST = path.resolve(__dirname, '../../dist');\n\napp.use('/styles', Express.static(PATH_STYLES));\napp.use(Express.static(PATH_DIST));\n\napp.get('/', (req, res) => {\n  var reactAppContent = React.renderToString(<AppRoot state={{} }/>);\n  console.log(reactAppContent);\n  res.render(path.resolve(__dirname, '../client/index.ejs'), {reactOutput: reactAppContent});\n});\n\nserver = app.listen(process.env.PORT || 3000, () => {\n  var port = server.address().port;\n\n  console.log('Server is listening at %s', port);\n});\n```"]