["```js\nimport React, { Fragment, useState } from 'react';\n\nimport { makeStyles } from '@material-ui/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles(theme => ({\n  textField: { margin: theme.spacing(1) }\n}));\n\nexport default function UsingDatePickers() {\n  const classes = useStyles();\n  const [date, setDate] = useState('');\n\n  const onChange = e => {\n    setDate(e.target.value);\n  };\n\n  const dateFormatted = date\n    ? new Date(`${date}T00:00:00`).toLocaleDateString()\n    : null;\n\n  return (\n    <Fragment>\n      <TextField\n        value={date}\n        onChange={onChange}\n        label=\"My Date\"\n        type=\"date\"\n        className={classes.textField}\n        InputLabelProps={{\n          shrink: true\n        }}\n      />\n      <TextField\n        value={dateFormatted}\n        label=\"Updated Date Value\"\n        className={classes.textField}\n        InputLabelProps={{\n          shrink: true\n        }}\n        InputProps={{ readOnly: true }}\n      />\n    </Fragment>\n  );\n}\n```", "```js\n<TextField\n  value={date}\n  onChange={onChange}\n  label=\"My Date\"\n  type=\"date\"\n  className={classes.textField}\n  InputLabelProps={{\n    shrink: true\n  }}\n/>\n```", "```js\nconst dateFormatted = date\n  ? new Date(`${date}T00:00:00`).toLocaleDateString()\n  : null;\n```", "```js\n<TextField\n  value={dateFormatted}\n  label=\"Updated Date Value\"\n  className={classes.textField}\n  InputLabelProps={{\n    shrink: true\n  }}\n  InputProps={{ readOnly: true }}\n/>\n```", "```js\nfunction formatDate(date) {\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n\n  return [\n    year,\n    month < 10 ? `0${month}` : month,\n    day < 10 ? `0${day}` : day\n  ].join('-');\n}\n```", "```js\nconst DatePicker = ({ date, ...props }) => (\n  <TextField\n    value={date instanceof Date ? formatDate(date) : date}\n    type=\"date\"\n    InputLabelProps={{\n      shrink: true\n    }}\n    {...props}\n  />\n);\n```", "```js\n<Fragment>\n  <DatePicker\n    date={date}\n    onChange={onChange}\n    label=\"My Date\"\n    className={classes.textField}\n  />\n  <TextField\n    value={dateFormatted}\n    label=\"Updated Date Value\"\n    className={classes.textField}\n    InputLabelProps={{\n      shrink: true\n    }}\n    InputProps={{ readOnly: true }}\n  />\n</Fragment>\n```", "```js\nimport React, { Fragment, useState } from 'react';\n\nimport { makeStyles } from '@material-ui/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles(theme => ({\n  textField: { margin: theme.spacing(1) }\n}));\n\nconst TimePicker = ({ time, ...props }) => (\n  <TextField\n    value={time}\n    type=\"time\"\n    InputLabelProps={{\n      shrink: true\n    }}\n    inputProps={{\n      step: 300\n    }}\n    {...props}\n  />\n);\n\nexport default function UsingTimePickers() {\n  const classes = useStyles();\n  const [time, setTime] = useState('');\n\n  const onChange = e => {\n    setTime(e.target.value);\n  };\n\n  return (\n    <Fragment>\n      <TimePicker\n        time={time}\n        onChange={onChange}\n        label=\"My Time\"\n        className={classes.textField}\n      />\n      <TextField\n        value={time}\n        label=\"Updated Time Value\"\n        className={classes.textField}\n        InputLabelProps={{\n          shrink: true\n        }}\n        InputProps={{ readOnly: true }}\n      />\n    </Fragment>\n  );\n}\n```", "```js\nconst TimePicker = ({ time, ...props }) => (\n  <TextField\n    value={time}\n    type=\"time\"\n    InputLabelProps={{\n      shrink: true\n    }}\n    inputProps={{\n      step: 300\n    }}\n    {...props}\n  />\n);\n```", "```js\nimport React, { Fragment, useState } from 'react';\n\nimport { makeStyles } from '@material-ui/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles(theme => ({\n  textField: { margin: theme.spacing.unit }\n}));\n\nfunction formatDate(date) {\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n\n  return [\n    year,\n    month < 10 ? `0${month}` : month,\n    day < 10 ? `0${day}` : day\n  ].join('-');\n}\n\nfunction formatTime(date) {\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n\n  return [\n    hours < 10 ? `0${hours}` : hours,\n    minutes < 10 ? `0${minutes}` : minutes\n  ].join(':');\n}\n\nconst DatePicker = ({ date, ...props }) => (\n  <TextField\n    value={date instanceof Date ? formatDate(date) : date}\n    type=\"date\"\n    InputLabelProps={{\n      shrink: true\n    }}\n    {...props}\n  />\n);\n\nconst TimePicker = ({ time, ...props }) => (\n  <TextField\n    value={time instanceof Date ? formatTime(time) : time}\n    type=\"time\"\n    InputLabelProps={{\n      shrink: true\n    }}\n    inputProps={{\n      step: 300\n    }}\n    {...props}\n  />\n);\n\nexport default function SettingInitialDateAndTimeValues() {\n  const classes = useStyles();\n  const [datetime, setDatetime] = useState(new Date());\n\n  const onChangeDate = e => {\n    if (!e.target.value) {\n      return;\n    }\n\n    const [year, month, day] = e.target.value\n      .split('-')\n      .map(n => Number(n));\n\n    const newDatetime = new Date(datetime);\n    newDatetime.setYear(year);\n    newDatetime.setMonth(month - 1);\n    newDatetime.setDate(day);\n\n    setDatetime(newDatetime);\n  };\n\n  const onChangeTime = e => {\n    const [hours, minutes] = e.target.value\n      .split(':')\n      .map(n => Number(n));\n\n    const newDatetime = new Date(datetime);\n    newDatetime.setHours(hours);\n    newDatetime.setMinutes(minutes);\n\n    setDatetime(newDatetime);\n  };\n\n  return (\n    <Fragment>\n      <DatePicker\n        date={datetime}\n        onChange={onChangeDate}\n        label=\"My Date\"\n        className={classes.textField}\n      />\n      <TimePicker\n        time={datetime}\n        onChange={onChangeTime}\n        label=\"My Time\"\n        className={classes.textField}\n      />\n    </Fragment>\n  );\n}\n```", "```js\nconst [datetime, setDatetime] = useState(new Date());\n```", "```js\nfunction formatDate(date) {\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n\n  return [\n    year,\n    month < 10 ? `0${month}` : month,\n    day < 10 ? `0${day}` : day\n  ].join('-');\n}\n\nfunction formatTime(date) {\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n\n  return [\n    hours < 10 ? `0${hours}` : hours,\n    minutes < 10 ? `0${minutes}` : minutes\n  ].join(':');\n}\n```", "```js\nconst onChangeDate = e => {\n  if (!e.target.value) {\n    return;\n  }\n\n  const [year, month, day] = e.target.value\n    .split('-')\n    .map(n => Number(n));\n\n  const newDatetime = new Date(datetime);\n  newDatetime.setYear(year);\n  newDatetime.setMonth(month - 1);\n  newDatetime.setDate(day);\n\n  setDatetime(newDatetime);\n};\n```", "```js\nconst onChangeTime = e => {\n  const [hours, minutes] = e.target.value\n    .split(':')\n    .map(n => Number(n));\n\n  const newDatetime = new Date(datetime);\n  newDatetime.setHours(hours);\n  newDatetime.setMinutes(minutes);\n\n  setDatetime(newDatetime);\n};\n```", "```js\nimport React, { Fragment, useState } from 'react';\n\nimport { makeStyles } from '@material-ui/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles(theme => ({\n  textField: { margin: theme.spacing(1) }\n}));\n\nconst formatDate = date =>\n  date\n    .toISOString()\n    .split(':')\n    .slice(0, 2)\n    .join(':');\n\nconst DateTimePicker = ({ date, ...props }) => (\n  <TextField\n    value={\n      date instanceof Date\n        ? date.toISOString().replace('Z', '')\n        : date\n    }\n    type=\"datetime-local\"\n    InputLabelProps={{\n      shrink: true\n    }}\n    {...props}\n  />\n);\n\nexport default function CombiningDateAndTimeComponents() {\n  const classes = useStyles();\n  const [datetime, setDatetime] = useState(new Date());\n\n  const onChangeDate = e => {\n    setDatetime(new Date(`${e.target.value}Z`));\n  };\n\n  return (\n    <DateTimePicker\n      date={formatDate(datetime)}\n      onChange={onChangeDate}\n      label=\"My Date/Time\"\n      className={classes.textField}\n    />\n  );\n}\n```", "```js\nconst onChangeDate = e => {\n  setDatetime(new Date(`${e.target.value}Z`));\n};\n```", "```js\nconst formatDate = date =>\n  date\n    .toISOString()\n    .split(':')\n    .slice(0, 2)\n    .join(':');\n```", "```js\nimport React, { useState } from 'react';\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\n\nimport { makeStyles } from '@material-ui/styles';\nimport Grid from '@material-ui/core/Grid';\n\nimport {\n  MuiPickersUtilsProvider,\n  TimePicker,\n  DatePicker\n} from 'material-ui-pickers';\n\nconst useStyles = makeStyles(theme => ({\n  grid: {\n    width: '65%'\n  }\n}));\n\nexport default function IntegratingWithOtherDateAndTimePackages() {\n  const classes = useStyles();\n  const [datetime, setDatetime] = useState(new Date());\n\n  const onChange = datetime => {\n    setDatetime(datetime);\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <Grid container className={classes.grid} justify=\"space-around\">\n        <DatePicker\n          margin=\"normal\"\n          label=\"Date picker\"\n          value={datetime}\n          onChange={onChange}\n        />\n        <TimePicker\n          margin=\"normal\"\n          label=\"Time picker\"\n          value={datetime}\n          onChange={onChange}\n        />\n      </Grid>\n    </MuiPickersUtilsProvider>\n  );\n}\n```"]