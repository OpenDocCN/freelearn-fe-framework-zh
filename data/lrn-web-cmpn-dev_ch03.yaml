- en: Chapter 3. Developing Web Components Using Polymer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 使用聚合体开发Web组件
- en: In the previous chapter, you learned how to install and configure the Polymer
    library in a web page. Now it is time to explore a few more useful features and
    learn to develop a custom element.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何在网页中安装和配置聚合体库。现在，是时候探索一些更有用的功能，并学习如何开发自定义元素。
- en: PolymerJS ready event
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 聚合体JS就绪事件
- en: 'The Polymer library can be included to a page by importing a `polymer.html`
    file. Polymer checks each and every element definition that registers it asynchronously.
    If we try to render the element before this, it will create the **Flash of Unstyled
    Content** (**FOUC**) problem. To resolve this issue, we need to catch the `polymer-ready`
    event .We can hide the page elements before Polymer is ready, and once Polymer
    is ready, we can make them visible. The following code shows the use of the `polymer-ready`
    event:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过导入`polymer.html`文件将聚合体库包含到页面中。聚合体会异步检查每个注册的元素定义。如果我们尝试在此时渲染元素，它将创建**无样式内容闪烁**（**FOUC**）问题。为了解决这个问题，我们需要捕获`polymer-ready`事件。我们可以在聚合体准备好之前隐藏页面元素，一旦聚合体准备好，我们就可以使它们可见。以下代码显示了`polymer-ready`事件的使用：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding code, we have two callback methods listening to `DOMContentLoaded`
    and `polymer-ready` events. In the callback code, the console logs the time when
    the event is fired. The following screenshot shows the output of the preceding
    code, showing the time when `DOMContentLoaded` and `polymer-event` are fired:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们有两个回调方法监听`DOMContentLoaded`和`polymer-ready`事件。在回调代码中，控制台记录了事件触发的时间。以下截图显示了前面代码的输出，显示了`DOMContentLoaded`和`polymer-event`触发的时间：
- en: '![PolymerJS ready event](img/image00259.jpeg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![聚合体JS就绪事件](img/image00259.jpeg)'
- en: From the preceding screenshot, it is evident that once DOM is loaded, Polymer
    starts registering the element, and once it is completed, it fires the `polymer-ready`
    event.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图可以看出，一旦DOM加载完成，聚合体开始注册元素，一旦完成，它就会触发`polymer-ready`事件。
- en: Polymer expressions
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 聚合体表达式
- en: 'The separation of concern during development is an age-old topic of discussion.
    The goal of separation concern is to separate the rendering logic from the markup.
    It reduces the code maintenance cost and increases productivity. Polymer provides
    expression features that can be used inline with HTML code, while the computation
    logic is present in another JavaScript file. The syntax for a Polymer expression
    is as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 开发过程中的关注点分离是一个古老的讨论话题。关注点分离的目标是将渲染逻辑与标记分离。这降低了代码维护成本并提高了生产力。聚合体提供了可以与HTML代码内联使用的表达式功能，而计算逻辑则存在于另一个JavaScript文件中。聚合体表达式的语法如下：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding syntax, the Polymer expression is wrapped around two curly
    braces. There are a few points to note down about Polymer expression:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的语法中，聚合体表达式被包裹在两个大括号中。关于聚合体表达式有以下几点需要注意：
- en: Polymer expression is used as inline with HTML code for simple text value
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合体表达式用于与HTML代码内联，用于简单的文本值
- en: Polymer expression should not be used for HTML value
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合表达式不应用于HTML值
- en: The `Eval` method cannot be used inside the expression
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Eval`方法不能在表达式中使用'
- en: 'Polymer supports many operations for working with expression. These operations
    are as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合体支持许多用于处理表达式的操作。这些操作如下：
- en: '**Identifiers and paths**: This represents the object and the properties present
    inside the current page scope. Normally, paths are represented using dot (`.`)
    operator. The following code shows an example of identifier and paths:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标识符和路径**：这代表当前页面作用域中存在的对象和属性。通常，路径用点（`.`）运算符表示。以下代码展示了标识符和路径的示例：'
- en: '[PRE2]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Array access**: This represents the members present inside an array object.
    Normally, array access can be represented using a square (`[]`) bracket. The following
    code shows an example of array access:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数组访问**：这代表数组对象中存在的成员。通常，数组访问可以用方括号（`[]`）表示。以下代码展示了数组访问的示例：'
- en: '[PRE3]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Logical not operator**: This represents the Boolean operator to negate the
    truth value. The following code shows an example of not operator:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逻辑非运算符**：这代表否定真值的布尔运算符。以下代码展示了非运算符的示例：'
- en: '[PRE4]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Unary operators**: This represents the unary operators like `+` and `–` to
    work with single operand. The following code shows an example of unary operator:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一元运算符**：这代表像`+`和`–`这样的单一操作数运算符。以下代码展示了一元运算符的示例：'
- en: '[PRE5]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Binary operators**: This represents the binary operators to work with two
    operands. The following code shows an example of binary operator:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**二元运算符**: 这表示用于两个操作数的二元运算符。以下代码展示了二元运算符的一个示例：'
- en: '[PRE6]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Comparators**: This represents `<, >`, `<=, >=`, `==`, `!=`, `===`, `!==`,
    and returns a Boolean value. The following code shows an example of comparator:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**比较运算符**: 这表示 `<, >`, `<=, >=`, `==`, `!=`, `===`, `!==`，并返回一个布尔值。以下代码展示了比较运算符的一个示例：'
- en: '[PRE7]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Logical comparators**: This represents logical operators like AND (`&&`)
    and OR(`||`), and returns a Boolean value. The following code shows an example
    of logical comparator:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逻辑比较运算符**: 这表示逻辑运算符，如 AND (`&&`) 和 OR (`||`)，并返回一个布尔值。以下代码展示了逻辑比较运算符的一个示例：'
- en: '[PRE8]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Ternary operator**: This represents ternary operators like the `if` condition.
    The following code shows an example of ternary operator:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**三元运算符**: 这表示类似于 `if` 条件的三元运算符。以下代码展示了三元运算符的一个示例：'
- en: '[PRE9]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Parenthesis**: This helps in grouping the expression to be evaluated. The
    following code shows an example of parenthesis:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**括号**: 这有助于将需要评估的表达式分组。以下代码展示了括号的一个示例：'
- en: '[PRE10]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Literal values**: This represents literal identifiers like null and undefined.
    The following code shows an example of literals:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字面量值**: 这表示字面量标识符，如 null 和 undefined。以下代码展示了字面量值的一个示例：'
- en: '[PRE11]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Array and object initializers**: This represents the anonymous array and
    object declaration. The following code shows an example of array initializer:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数组和对象初始化器**: 这表示匿名数组和对象的声明。以下代码展示了数组初始化器的一个示例：'
- en: '[PRE12]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Function**: A function can be called using Polymer expression. The following
    code shows an example of a function:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数**: 函数可以使用聚合物表达式来调用。以下代码展示了函数的一个示例：'
- en: '[PRE13]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To find out more about Polymer expression, refer to [https://www.polymer-project.org/docs/polymer/expressions.html](https://www.polymer-project.org/docs/polymer/expressions.html).
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要了解更多关于聚合物表达式的信息，请参阅[https://www.polymer-project.org/docs/polymer/expressions.html](https://www.polymer-project.org/docs/polymer/expressions.html)。
- en: We can also use filters on the Polymer expression. Before jumping into filter
    expression, let's learn about the Polymer template with auto-binding. The reason
    for looking at auto-binding first is that the examples in the coming section are
    independent and run in the current page scope.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在聚合物表达式中使用过滤器。在深入了解过滤器表达式之前，让我们先了解带有自动绑定的聚合物模板。首先查看自动绑定的原因是因为接下来章节中的示例是独立的，并在当前页面范围内运行。
- en: Polymer templating with auto-binding
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带有自动绑定的聚合物模板
- en: In [Chapter 1](lrn-web-cmpn-dev_ch01.html#aid-DB7S1 "Chapter 1. Introducing
    Web Components"), *Introducing Web Components*, we learned about the `<template>`
    element defined in the W3C web component specification. Polymer adds some additional
    features, such as expressions and template binding. This means we can use expressions
    inside a template, which can be rendered to the browser.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 1 章](lrn-web-cmpn-dev_ch01.html#aid-DB7S1 "第 1 章。介绍 Web 组件")中，我们学习了 W3C
    Web 组件规范中定义的 `<template>` 元素。聚合物添加了一些额外的功能，例如表达式和模板绑定。这意味着我们可以在模板中使用表达式，并将其渲染到浏览器中。
- en: The Polymer templating works differently than the traditional templating. The
    DOM model of a template instance remains in the browser as long as the respective
    data is in use. If there are any changes to the data, then Polymer compares and
    modifies the specific part of DOM. It results in the smallest changes into the
    DOM tree.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合物模板的工作方式与传统模板不同。模板实例的 DOM 模型在浏览器中保持不变，只要相应的数据在使用中。如果数据有任何变化，那么聚合物会比较并修改 DOM
    的特定部分。这导致对 DOM 树的最小更改。
- en: 'Polymer templating can be used on a page level by using the auto-binding feature.
    As we know, the `<template>` content is inert in nature until it is activated.
    Polymer template comes with a solution called auto-binding, where the template
    gets activated by considering the template, and the data model is present on the
    template itself. A template can be used as auto-bound by using the `is` attribute
    auto-binding value. The syntax for the auto-binding a template is as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合物模板可以通过使用自动绑定功能在页面级别上使用。正如我们所知，`<template>` 内容在未被激活时是惰性的。聚合物模板提供了一个名为自动绑定的解决方案，其中模板通过考虑模板和数据模型本身来激活。可以使用
    `is` 属性的自动绑定值将模板用作自动绑定。模板自动绑定的语法如下：
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s check out a simple example of auto-binding a template. The code for
    the usage of the auto-binding feature is as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看自动绑定模板的一个简单示例。使用自动绑定功能的代码如下：
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the preceding code, the template has an auto-binding property and some content
    within the `h1` element. If we run this code in a browser, the `<template>` element
    gets activated due to the auto-binding feature, and then the content is rendered.
    The following screenshot shows the output and HTML inspection of the preceding
    code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，模板具有自动绑定属性，并在`h1`元素内有一些内容。如果我们在这个浏览器中运行此代码，`<template>`元素会由于自动绑定功能而被激活，然后渲染内容。以下屏幕截图显示了前面代码的输出和HTML检查：
- en: '![Polymer templating with auto-binding](img/image00260.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![具有自动绑定的Polymer模板](img/image00260.jpeg)'
- en: In the preceding screenshot, we can see that the HTML instance markup generated
    by the template is appended just after it. This is a unique feature of a template
    with auto-binding. The `<template>` element has the bind property attached to
    itself as the template is auto-bound.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们可以看到由模板生成的HTML实例标记被附加在其后。这是具有自动绑定的模板的独特功能。`<template>`元素具有绑定属性附加到自身，因为模板是自动绑定的。
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To find out more about the Polymer template auto-binding feature, refer to [https://www.polymer-project.org/docs/polymer/databinding-advanced.html#autobinding](https://www.polymer-project.org/docs/polymer/databinding-advanced.html#autobinding).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Polymer模板自动绑定功能的信息，请参阅[https://www.polymer-project.org/docs/polymer/databinding-advanced.html#autobinding](https://www.polymer-project.org/docs/polymer/databinding-advanced.html#autobinding)。
- en: Polymer template attributes
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Polymer模板属性
- en: 'Polymer provides additional features to the `<template>` element to make it
    more useful. Polymer derives its templating mechanism from the `TemplateBinding`
    library. You can find more details about this library at [https://github.com/polymer/TemplateBinding](https://github.com/polymer/TemplateBinding).
    It provides many useful attributes to help in data binding. These attributes are
    as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Polymer为`<template>`元素提供了额外的功能，使其更有用。Polymer从`TemplateBinding`库中获取其模板机制。您可以在[https://github.com/polymer/TemplateBinding](https://github.com/polymer/TemplateBinding)找到更多关于此库的详细信息。它提供了许多有用的属性来帮助数据绑定。这些属性如下：
- en: '`bind`: This attribute can be used to bind a template to a JavaScript object.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind`: 此属性可以用于将模板绑定到JavaScript对象。'
- en: '`repeat`: This attribute can be used to iterate a template by binding the template
    to a list.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repeat`: 此属性可以通过将模板绑定到列表来迭代模板。'
- en: '`if`: This attribute can be used to check a logical condition by comparing
    a property of the bound JavaScript object.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if`: 此属性可以通过比较绑定JavaScript对象的属性来检查逻辑条件。'
- en: '`ref`: This attribute can be used to include another template in the current
    template. The `ref` attribute takes the ID of other templates to include it to
    the current template.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ref`: 此属性可以用于在当前模板中包含另一个模板。`ref`属性接受其他模板的ID以将其包含到当前模板中。'
- en: 'Let''s check out an example to help understand the use of these attributes
    in a template element. The following code shows the use of these attributes:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个示例来了解这些属性在模板元素中的使用。以下代码显示了这些属性的使用：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The details of the preceding code are as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的详细信息如下：
- en: The template element with the `template1` ID has the `myData` model, which has
    the `myFlag` property with true Boolean value. The template has the `if` attribute,
    which checks the `myFlag` value and displays the HTML content of `template1`.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有ID为`template1`的模板元素具有`myData`模型，该模型具有具有true布尔值的`myFlag`属性。模板具有`if`属性，该属性检查`myFlag`值并显示`template1`的HTML内容。
- en: The template element with the `template2` ID has the `students` model containing
    an array of names. The `template2` element has the `repeat` attribute to iterate
    the array of names to render in the browser.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有ID为`template2`的模板元素包含一个包含名称的数组。`template2`元素具有`repeat`属性，用于迭代在浏览器中渲染的名称数组。
- en: The template element with the `template3` ID is bound with the `subjects` model
    containing objects having `name` and `country` property. The `template3` ID contains
    another nested template, which is bound to the `sub` instance of subject to display
    `name` and `country` values inside it.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有ID为`template3`的模板元素与包含具有`name`和`country`属性的`subjects`模型绑定。`template3` ID包含另一个嵌套模板，该模板绑定到主题的`sub`实例以显示其内部的`name`和`country`值。
- en: The template element with the `template5` ID has the `ref` attribute referring
    to `template4`. The `template4` ID has a text message wrapped inside the `h1`
    element. On activation of the `template5` element, the contents of `template4`
    are included and rendered in the browser.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有ID为`template5`的模板元素具有指向`template4`的`ref`属性。`template4` ID包含在`h1`元素内的文本消息。当激活`template5`元素时，`template4`的内容将被包含并渲染在浏览器中。
- en: 'The output of the preceding code is listed in the following screenshot, which
    shows the use of the mentioned attributes:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的输出列在以下截图，展示了所提及属性的用法：
- en: '![Polymer template attributes](img/image00261.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![聚合物模板属性](img/image00261.jpeg)'
- en: 'The following screenshot shows the Chrome developer console, showing template
    attributes in action, and the generated HTML instances are inserted just after
    the template:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Chrome开发者控制台，显示了模板属性的实际应用，生成的HTML实例被插入到模板之后：
- en: '![Polymer template attributes](img/image00262.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![聚合物模板属性](img/image00262.jpeg)'
- en: Filtering expression
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤表达式
- en: 'Polymer provides filter support to work with the expression. Filters are useful
    to modify the output of an expression. The syntax of using filter with an expression
    is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Polymer提供了过滤器支持以处理表达式。过滤器对于修改表达式输出非常有用。使用过滤器与表达式的语法如下：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the previous code, an expression and filter is combined using a bar (`|`)
    symbol. The filter function takes the value of the given expression and modifies
    it based on the filter logic, and then renders it in the browser.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，表达式和过滤器通过竖线（`|`）符号结合使用。过滤器函数接受给定表达式的值，并根据过滤器逻辑对其进行修改，然后在浏览器中渲染。
- en: Built-in filtering expression
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内置过滤表达式
- en: Polymer has two built-in filters to work with the expression. These two predefined
    filters are `tokenList` and `styleObject`. Let's explore these built-in filters
    in more detail.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Polymer有两个内置过滤器用于处理表达式。这两个预定义过滤器是`tokenList`和`styleObject`。让我们更详细地探索这些内置过滤器。
- en: The TokenList filter
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TokenList过滤器
- en: 'The `tokenList` filter can be used for adding and removing a string based on
    the supplied object. It is a really good fit to programmatically modify the class
    names. However, for demonstration, we have used a string. The following code shows
    the use of the `tokenList` filter with an expression:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`tokenList`过滤器可用于根据提供的对象添加和删除字符串。它非常适合用于程序化修改类名。然而，为了演示，我们使用了字符串。以下代码展示了如何使用`tokenList`过滤器与表达式结合：'
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The details of the preceding code are as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的详细情况如下：
- en: In the preceding code, `template1` is attached with the `student` object having
    two properties—`name` and `score`.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在前面的代码中，`template1`被附加到具有两个属性`name`和`score`的学生对象上。
- en: Inside `template1`, the score of the student is compared against a passing marks
    `60` with the built-in filter `tokenList`. If the score is more than `60`, the
    **Passed** string is rendered in place of an expression.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`template1`内部，学生的分数通过与内置过滤器`tokenList`比较及格分数`60`来判定。如果分数超过`60`，则将`Passed`字符串渲染在表达式位置上。
- en: The following screenshot shows the output of the preceding code containing the
    name of the student, score of the student, and their result. The score of the
    student is `70`, and compared with the pass mark of `60`, it returns true and
    the **Passed** string is rendered in a browser.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面代码的输出，其中包含学生的姓名、分数和他们的结果。学生的分数是`70`，与及格分数`60`相比，返回值为真，并在浏览器中渲染`Passed`字符串。
- en: '![The TokenList filter](img/image00263.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![TokenList过滤器](img/image00263.jpeg)'
- en: The styleObject filter
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`styleObject`过滤器'
- en: 'The `styleObject` filter is used for converting a JSON object into a string
    of key value pair. This filter is a good fit for working with the `style` attribute
    of an element. The following code shows the use of the `styleObject` filter with
    an expression:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`styleObject`过滤器用于将JSON对象转换为键值对字符串。这个过滤器非常适合用于处理元素的`style`属性。以下代码展示了如何使用`styleObject`过滤器与表达式结合：'
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The details of the preceding code are as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的详细情况如下：
- en: The `myStyle` property of the student object has a set of key/value pairs, containing
    CSS properties
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学生对象的`myStyle`属性包含一组键值对，包含CSS属性
- en: The template expression is used with the `styleObject` filter to convert the
    key/value pairs to complete the CSS string
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板表达式与`styleObject`过滤器结合使用，将键值对转换为完整的CSS字符串
- en: 'The output of the preceding code is listed in the following screenshot, where
    we can see that the `myStyle` object''s key/value pairs are converted to CSS string
    and gets applied to the `style` attribute of the `div` element:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的输出列在以下屏幕截图中，我们可以看到 `myStyle` 对象的键/值对被转换为 CSS 字符串并应用于 `div` 元素的 `style`
    属性：
- en: '![The styleObject filter](img/image00264.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![styleObject 过滤器](img/image00264.jpeg)'
- en: Custom filtering expression
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义过滤表达式
- en: 'Polymer supports development of our own custom filters to be used in the expression.
    Let''s check out an example of creating a custom filter. The code for creating
    a custom filter and its use is as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Polymer 支持开发我们自己的自定义过滤器，以便在表达式中使用。让我们看看创建自定义过滤器的示例。创建自定义过滤器及其使用的代码如下：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The details of the preceding code are as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的详细信息如下：
- en: The `template1` variable has an expression for displaying the name of the student
    with a custom filter named `sayHello`
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template1` 变量有一个表达式，用于显示带有自定义过滤器 `sayHello` 的学生名字'
- en: The definition of the `sayHello` filter method is present as a value of the
    `sayHello` attribute
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sayHello` 过滤方法的定义作为 `sayHello` 属性的值'
- en: The `sayHello` filter method takes an expression value and prepends the `Hello`
    text before the name of the student
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sayHello` 过滤方法接收一个表达式值，并在学生的名字前添加 `Hello` 文本'
- en: 'The following screenshot shows the output of the preceding code, where the
    **Hello** string is prepended to the name **Sandeep** due to the `sayHello` filter:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前面代码的输出，其中由于 `sayHello` 过滤器，**Hello** 字符串被添加到 **Sandeep** 的名字前：
- en: '![Custom filtering expression](img/image00265.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![自定义过滤表达式](img/image00265.jpeg)'
- en: Global filtering expression
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局过滤表达式
- en: 'Polymer supports defining global filters to increase their reusability. A global
    filter is available as an API to the application developer. A global filter can
    be created by using the `PolymerExpression` object. A new filter can be added
    to the Polymer by creating a new property of the `PolymerExpression` object by
    using the `prototype` attribute. The code for creating a global filter is as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Polymer 支持定义全局过滤器以增加其可重用性。全局过滤器作为 API 对应用程序开发者可用。全局过滤器可以通过使用 `PolymerExpression`
    对象创建。可以通过使用 `prototype` 属性创建 `PolymerExpression` 对象的新属性来向 Polymer 添加新的过滤器。创建全局过滤器的代码如下：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the preceding code, a global filter named `sayBye` is created by defining
    a new property in `PolymerExpression.prototype`. The output of the preceding code
    is listed in the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，通过在 `PolymerExpression.prototype` 中定义新属性创建了一个名为 `sayBye` 的全局过滤器。前面代码的输出列在以下屏幕截图：
- en: '![Global filtering expression](img/image00266.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![全局过滤表达式](img/image00266.jpeg)'
- en: Developing Polymer custom elements
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发 Polymer 自定义元素
- en: 'Polymer has built-in elements—core and paper. Polymer also supports development
    of our own custom element. Some of the benefits of developing custom elements
    are as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Polymer 有内置元素——core 和 paper。Polymer 还支持开发我们自己的自定义元素。开发自定义元素的一些好处如下：
- en: They are reusable
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是可重用的
- en: They reduce the code size of the application
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们减少了应用程序的代码大小
- en: They increase the developer's productivity
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们提高了开发者的生产力
- en: They help in achieving encapsulation by hiding the definition of the element
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们通过隐藏元素的定义来帮助实现封装
- en: Note
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In Polymer, everything is an element.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Polymer 中，一切都是一个元素。
- en: 'In the following section, we will learn to develop a custom element. The steps
    for developing a custom element are as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下部分，我们将学习如何开发自定义元素。开发自定义元素的步骤如下：
- en: Defining a custom element
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义自定义元素
- en: Defining element attributes
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义元素属性
- en: Defining default attributes
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义默认属性
- en: Defining public properties and methods
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义公共属性和方法
- en: Publishing properties
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布属性
- en: Defining a lifecycle method
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义生命周期方法
- en: Registering a custom element
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册自定义元素
- en: Defining a custom element
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义自定义元素
- en: 'A custom element can be defined using the `<polymer-element>` tag. The code
    syntax for developing a custom element is as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义元素可以使用 `<polymer-element>` 标签定义。开发自定义元素的代码语法如下：
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The details of the preceding syntax are as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 前面语法的详细信息如下：
- en: In the preceding code, a custom element definition has been wrapped within the
    `<polymer-element>` tag
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在前面的代码中，自定义元素定义被 `<polymer-element>` 标签包裹
- en: The definition contains the `<template>` element containing the HTML markup
    for the custom element
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义包含自定义元素 HTML 标记的 `<template>` 元素
- en: The definition also contains the `<script>` element containing the properties
    and methods for the custom element
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义还包含包含自定义元素属性和方法的 `<script>` 元素。
- en: 'The `<polymer-element>` tag takes the following attributes while defining a
    new custom element:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在定义新自定义元素时，`<polymer-element>` 标签接受以下属性：
- en: '`Name`: This is a required field and represents the name of the custom element.
    The name must be separated with a hyphen (`-`).'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Name`：这是一个必填字段，表示自定义元素的名称。名称必须用连字符（`-`）分隔。'
- en: '`Attributes`: This is an optional field and can be used for defining the attribute
    that the custom element can have.'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Attributes`：这是一个可选字段，可以用来定义自定义元素可以拥有的属性。'
- en: '`Extends`: This is an optional field and can be used for extending another
    element through inheritance.'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Extends`：这是一个可选字段，可以用来通过继承扩展另一个元素。'
- en: '`Noscript`: This is an optional attribute and can be used by a custom element
    while defining an attribute, when it does need any properties and methods. Put
    more simply, it creates a simple element that has only name and constructor.'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Noscript`：这是一个可选属性，可以在定义属性时由自定义元素使用，当它不需要任何属性和方法时。更简单地说，它创建了一个只有名称和构造函数的简单元素。'
- en: '`Constructor`: This is an optional attribute and represents the name of the
    constructor that can be used by the programmer to create a new instance of the
    custom element, using the `new` keyword.'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Constructor`：这是一个可选属性，表示可以由程序员使用 `new` 关键字创建自定义元素新实例的构造函数名称。'
- en: Defining element attributes
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义元素属性
- en: 'Custom attributes can be defined using the attribute property of `<polymer-element>`.
    This can take multiple attribute names separated by a *space*. A property defined
    inside the attribute property is published by default .The syntax of the attribute
    declaration is as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `<polymer-element>` 的属性属性来定义自定义属性。这可以接受多个由空格分隔的属性名称。在属性属性内部定义的属性默认是公开的。属性声明的语法如下：
- en: '[PRE23]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Defining default attributes
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义默认属性
- en: 'We can define default attributes to a custom element. The default attributes
    directly get attached with the custom element while rendering. The syntax for
    defining a default attribute is as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为自定义元素定义默认属性。默认属性在渲染时直接附加到自定义元素上。定义默认属性的语法如下：
- en: '[PRE24]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding code a default property named `myDefaultProperty1` is defined.
    To define any default properties just add the name to the `<polymer-element>`
    element as an attribute.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中定义了一个名为 `myDefaultProperty1` 的默认属性。要定义任何默认属性，只需将名称添加到 `<polymer-element>`
    元素作为属性即可。
- en: Defining public properties and methods
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义公共属性和方法
- en: 'We can define public properties and methods for a custom element while also
    defining it. The following code shows the syntax of declaring public properties
    and methods:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在定义自定义元素的同时定义其公共属性和方法。以下代码显示了声明公共属性和方法的语法：
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The details of the preceding code are as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的详细信息如下：
- en: In the mentioned definition, `message` is a property with a `get` methods `greeting`
    function. The `get` method can access the message property with the `this` keyword.
    The `this` keyword refers to the custom element `<tag-name>`.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在提到的定义中，`message` 是一个具有 `get` 方法 `greeting` 函数的属性。`get` 方法可以使用 `this` 关键字访问消息属性。`this`
    关键字指的是自定义元素 `<tag-name>`。
- en: In the previous definition, the `sayBye` method is a public function and returns
    a `Bye` string.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在前面的定义中，`sayBye` 方法是一个公共函数，并返回一个 `Bye` 字符串。
- en: Publishing properties
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公开属性
- en: 'The properties defined inside the attribute are by default public. There is
    another way to publish the properties of a custom element—using the `publish`
    attribute. The syntax for publishing properties is as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在属性内部定义的属性默认是公开的。还有另一种方法可以公开自定义元素的属性——使用 `publish` 属性。公开属性的语法如下：
- en: '[PRE26]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the preceding code, `property1` and `property2` are published using the
    `publish` keyword. Publishing properties using the attribute approach is the preferable
    way, as it follows a declarative method. However, the use of the publish keyword
    approach can be selected in if the following statements are true:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`property1` 和 `property2` 使用 `publish` 关键字进行了公开。使用属性方法公开属性是首选方法，因为它遵循声明性方法。然而，如果以下陈述为真，可以选择使用
    `publish` 关键字方法：
- en: If there are long lists of attributes that need to be published for a custom
    element
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要为自定义元素公开大量属性
- en: If we need to define default values for the properties
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们需要为属性定义默认值
- en: If we need two-way declarative binding to a published property
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们需要双向声明性绑定到一个公开属性
- en: Defining a lifecycle method
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义生命周期方法
- en: 'The Polymer element goes through different states during its lifecycle. The
    following diagram shows the possible states of a custom element:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Polymer元素在其生命周期中会经历不同的状态。以下图表显示了自定义元素的可能状态：
- en: '![Defining a lifecycle method](img/image00267.jpeg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![定义生命周期方法](img/image00267.jpeg)'
- en: 'The different states of a custom element are as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义元素的不同状态如下：
- en: '**Created**: This is the state when an instance of the custom element is created'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建**：这是创建自定义元素实例的状态'
- en: '**Ready**: This is the state when the shadow DOM is ready, event listeners
    are attached, and the property observers are set up'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**就绪**：这是当shadow DOM就绪、事件监听器附加和属性观察器设置好的状态'
- en: '**Attached**: This is the state when the custom element is attached to the
    DOM'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**附加**：这是自定义元素附加到DOM的状态'
- en: '**DOMReady**: This is the state when the initial sets of custom element children
    are exists in DOM'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DOM就绪**：这是初始的自定义元素子元素集合存在于DOM中的状态'
- en: '**AttributeChanged**: This is the state when one of the attribute values is
    changed'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性已更改**：这是其中一个属性值发生更改的状态'
- en: '**Detached**: This is the state when the custom element is removed from the
    DOM'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已从DOM中移除**：这是自定义元素从DOM中移除的状态'
- en: 'The syntax of the callback methods for the lifecycle states, to define our
    own custom logic, is as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 定义我们自己的自定义逻辑的生命周期状态的回调方法的语法如下：
- en: '[PRE27]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the preceding syntax, we can see the callback method representing each lifecycle
    state of a custom element.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述语法中，我们可以看到代表自定义元素每个生命周期状态的回调方法。
- en: Registering a custom element
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册自定义元素
- en: 'The native way of defining a custom element is using the `Polymer` method in
    the `<polymer-element>` tag. The syntax of registering an element is as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 定义自定义元素的本地方式是使用 `<polymer-element>` 标签中的 `Polymer` 方法。注册元素的语法如下：
- en: '[PRE28]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Developing a sample custom element
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发一个示例自定义元素
- en: 'Now, it is time to develop a simple `<say-hello>` element with a `mytext` attribute
    with the default text `World!!!` and a template to render in the browser. The
    code definition for the `<say-hello>` element is present inside the `hello-component.html`
    file and is as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候开发一个简单的 `<say-hello>` 元素了，该元素具有 `mytext` 属性，默认文本为 `World!!!`，并在浏览器中渲染的模板。`<say-hello>`
    元素的代码定义位于 `hello-component.html` 文件中，如下所示：
- en: '[PRE29]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The details of the preceding code are as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对前述代码的详细说明：
- en: A new custom element `<say-hello>` is defined using the `<polymer-element>`
    tag.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `<polymer-element>` 标签定义了一个新的自定义元素 `<say-hello>`。
- en: The custom element has the `mytext` attribute, which is published as public
    and initialized with a default value `world` using the `created` callback method.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义元素有一个 `mytext` 属性，它被公开发布，并使用 `created` 回调方法初始化为默认值 `world`。
- en: 'The custom element has a constructor named `SayHello`. By using this constructor,
    we can programmatically create an instance of a `SayHello` element using the `new`
    keyword. The syntax for using a `new` keyword is as follows:'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义元素有一个名为 `SayHello` 的构造函数。通过使用此构造函数，我们可以使用 `new` 关键字程序化地创建 `SayHello` 元素的一个实例。使用
    `new` 关键字的语法如下：
- en: '[PRE30]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The following code shows the use of the `<say-hello>` element in an HTML page:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了在HTML页面中使用 `<say-hello>` 元素的方法：
- en: '[PRE31]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the preceding code, we have called the `<say-hello>` element in the following
    three different ways:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述代码中，我们以以下三种不同的方式调用了 `<say-hello>` 元素：
- en: Without the `mytext` attribute
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不使用 `mytext` 属性
- en: With the `mytext` attribute value as `John`
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 `mytext` 属性值为 `John` 时
- en: Using the JavaScript constructor `new SayHello` and assigning the `mytext` property
    to the `Polymer` string
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript构造函数 `new SayHello` 并将 `mytext` 属性赋值为 `Polymer` 字符串
- en: 'The output of the preceding code is shown in the following screenshot with
    three different message generated by the `<say-hello>` element used:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前述代码的输出，其中包含由 `<say-hello>` 元素生成的三个不同消息：
- en: '![Developing a sample custom element](img/image00268.jpeg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![开发一个示例自定义元素](img/image00268.jpeg)'
- en: Extending a custom element
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展自定义元素
- en: 'A custom element can be extended from another element using the `extends` attribute.
    We can only extend from one element at a time. Let''s develop an element named
    `<say-good>`, which is extended from `<say-hello>`. The following code presents
    the `good-component.html` file and has the definition of `<say-good>` custom element:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `extends` 属性从一个元素扩展自定义元素。我们一次只能从一个元素扩展。让我们开发一个名为 `<say-good>` 的元素，它从 `<say-hello>`
    扩展而来。以下代码展示了 `good-component.html` 文件和 `<say-good>` 自定义元素的定义：
- en: '[PRE32]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The details of the preceding code are as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 前一段代码的详细信息如下：
- en: A new custom element named `<say-good>` is created by extending the `<say-hello>`
    element with a published property named `time`
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过扩展具有名为 `time` 的发布属性的自定义元素 `<say-hello>`，创建了一个名为 `<say-good>` 的新自定义元素。
- en: The default value of the `time` property is assigned to `Morning` using the
    `created` callback method
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `created` 回调方法将 `time` 属性的默认值赋为 `Morning`。
- en: The template of the `<say-good>` element contains a **shadow insertion point**
    for the parent element markup with a text message `Good` and an expression `{{time}}`
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<say-good>` 元素的模板包含一个用于父元素标记的 **阴影插入点**，其中包含文本消息 `Good` 和表达式 `{{time}}`。'
- en: 'The following code shows the use of the `<say-good>` element:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了 `<say-good>` 元素的用法：
- en: '[PRE33]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The details of the preceding code are as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 前一段代码的详细信息如下：
- en: The `<say-good>` element is called using `mytext` and the `time` attribute with
    values `John` and `Night`, respectively.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `mytext` 和 `time` 属性分别带有值 `John` 和 `Night` 来调用 `<say-good>` 元素。
- en: An object of the `SayGood` element is initialized using its constructor with
    the `new` keyword. The `mytext` object property and time is then assigned with
    values `Smith` and `Afternoon`, respectively.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用构造函数和 `new` 关键字初始化 `SayGood` 元素对象。然后，将 `mytext` 对象属性和时间分别赋值为 `Smith` 和 `Afternoon`。
- en: 'The output of the preceding code is shown in the following screenshot, which
    shows the message from the parent element `<say-hello>` inserted in the shadow
    insertion point:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 前一段代码的输出显示在下面的屏幕截图中，其中显示了插入到阴影插入点中的父元素 `<say-hello>` 的消息：
- en: '![Extending a custom element](img/image00269.jpeg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![扩展自定义元素](img/image00269.jpeg)'
- en: Polymer methods
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Polymer 方法
- en: The PolymerJS library has some utility methods to deal with mixins, imports,
    and element registration. In the following section, we will learn how to use these
    methods.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: PolymerJS 库有一些用于处理混合、导入和元素注册的实用方法。在下一节中，我们将学习如何使用这些方法。
- en: The Polymer mixin method
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Polymer 混合方法
- en: 'Polymer provides mixins for sharing common methods among custom elements. Mixin
    helps to reduce duplicate code. The syntax for creating a mixin is as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Polymer 提供了用于在自定义元素之间共享公共方法的混合。混合有助于减少重复代码。创建混合的语法如下：
- en: '[PRE34]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Let''s check out an example of sharing common methods using mixins. The details
    of the example are as follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看一个使用混合共享公共方法的示例。该示例的详细信息如下：
- en: 'The common mixin methods are present in the `common-mixin.html` file. The `window.commonMixins`
    object will contain the shared methods. The code for the `common-mixin.html` file
    is as follows:'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共混合方法存在于 `common-mixin.html` 文件中。`window.commonMixins` 对象将包含共享的方法。`common-mixin.html`
    文件的代码如下：
- en: '[PRE35]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `commonMixins` object has a `printMyName` method and is shared to the custom
    components, which use it.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`commonMixins` 对象有一个 `printMyName` 方法，并将其共享给自定义组件，这些组件使用它。'
- en: 'A new custom component `<print-hi>` is defined in the `printHi-component.html`
    file. The `<print-hi>` element has used the `commonMixins` object. The following
    code shows the definition of the `<print-hi>` component:'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `printHi-component.html` 文件中定义了一个新的自定义组件 `<print-hi>`。`<print-hi>` 元素使用了 `commonMixins`
    对象。以下代码显示了 `<print-hi>` 组件的定义：
- en: '[PRE36]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Another custom element `<print-bye>` has been defined in the `printBye-component.html`
    file. This component also uses the `commonMixins` object to get access to the
    `printMyName` method. The `printMyName` method returns the local name of the custom
    element. The code for the `<print-bye>` element is as follows:'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个自定义元素 `<print-bye>` 已在 `printBye-component.html` 文件中定义。此组件也使用 `commonMixins`
    对象来访问 `printMyName` 方法。`printMyName` 方法返回自定义元素的本地名称。《print-bye》元素的代码如下：
- en: '[PRE37]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, it is time to test the mixin methods shared by these elements. The test
    code is present in `mixin-demo.html`. In this code, we have created two objects—one
    from the `PrintHi` constructor and the other is from the `PrintBye` constructor
    using the `new` keyword. Then, the `printMyName` name is called from each object,
    which is logged in the console. The following code contains the test code for
    checking the mixin methods:'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，是时候测试这些元素共享的混合方法了。测试代码位于 `mixin-demo.html` 文件中。在这段代码中，我们使用 `new` 关键字创建了两个对象——一个来自
    `PrintHi` 构造函数，另一个来自 `PrintBye` 构造函数。然后，从每个对象中调用 `printMyName` 方法，并在控制台中记录。以下代码包含了检查混合方法的测试代码：
- en: '[PRE38]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The complete code can be downloaded from Packt's website. The following screenshot
    shows the output of the preceding code:![The Polymer mixin method](img/image00270.jpeg)
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整的代码可以从 Packt 的网站上下载。以下截图显示了前面代码的输出：![聚合体混合方法](img/image00270.jpeg)
- en: The Polymer import method
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 聚合体导入方法
- en: 'Polymer provides the `Polymer.import` method for importing the external HTML
    file. Let''s check out an example of using the `import` method. The details of
    the example are as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合体提供了 `Polymer.import` 方法用于导入外部 HTML 文件。让我们看看使用 `import` 方法的示例。示例的详细信息如下：
- en: 'The `number-detail.html` file contains a JavaScript file containing a variable
    `luckyNumber` assigned a value `7`. The code present inside the `number-detail.html`
    file is as follows:'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`number-detail.html` 文件包含一个 JavaScript 文件，其中包含一个变量 `luckyNumber` 被赋予值 `7`。`number-detail.html`
    文件中的代码如下：'
- en: '[PRE39]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `number-detail.html` file has been imported in the `import-method.html`
    file . Once the `number-detail.html` file is imported the lucky number is displayed
    in the browser as the template is using auto-binding feature. The following code
    shows the import of the `number-detail.html` file:'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`number-detail.html` 文件已被导入到 `import-method.html` 文件中。一旦导入 `number-detail.html`
    文件，幸运数字就会在浏览器中显示，因为模板使用了自动绑定功能。以下代码显示了 `number-detail.html` 文件的导入：'
- en: '[PRE40]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The following screenshot shows the output of the preceding code, where the lucky
    number 7 is rendered in the browser:![The Polymer import method](img/image00271.jpeg)
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下截图显示了前面代码的输出，其中在浏览器中渲染了幸运数字 7：![聚合体导入方法](img/image00271.jpeg)
- en: The Polymer waitingFor method
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 聚合体等待方法
- en: 'Polymer provides the `waitingFor` method to detect the unregistered element
    in the application. This method returns a list of elements that are not registered
    yet. Let''s check out an example that demonstrates the usage of the `waitingFor`
    method. The details of the example are as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合体提供了 `waitingFor` 方法来检测应用程序中的未注册元素。此方法返回一个尚未注册的元素列表。让我们看看一个演示 `waitingFor`
    方法用法的示例。示例的详细信息如下：
- en: 'A custom component `<good-morning>` is created, and intentionally we have delayed
    the registration for 3 seconds using the `setTimeout` method. Code for the `<good-morning>`
    element is present in the `morning-component.html` file and is listed as follows:'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个自定义组件 `<good-morning>`，并且故意使用 `setTimeout` 方法延迟了3秒的注册。`<good-morning>`
    元素的代码位于 `morning-component.html` 文件中，如下所示：
- en: '[PRE41]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In another HTML file, we have used the `waitingFor` method to check whether
    it contains the `<good-morning>` element inside the array during the initial 3
    seconds. The following code shows the use of the `waitingFor` method:'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在另一个 HTML 文件中，我们使用了 `waitingFor` 方法来检查在最初的3秒内它是否包含数组中的 `<good-morning>` 元素。以下代码显示了
    `waitingFor` 方法的使用：
- en: '[PRE42]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The following screenshot shows the output of the preceding code, which logs
    the unregistered element in a console:![The Polymer waitingFor method](img/image00272.jpeg)
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下截图显示了前面代码的输出，它将在控制台中记录未注册的元素：![聚合体等待方法](img/image00272.jpeg)
- en: The Polymer forceReady method
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 聚合体强制准备方法
- en: 'Polymer provides the `forceReady` method to notify Polymer to register all
    the elements to the DOM. Let''s check out an example that demonstrates the usage
    of the `forceReady` method. The code for the example is present in the `evening-component.html`
    file and the details are as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合体提供了 `forceReady` 方法来通知聚合体将所有元素注册到 DOM 中。让我们看看一个演示 `forceReady` 方法用法的示例。示例的代码位于
    `evening-component.html` 文件中，具体细节如下：
- en: 'A new custom component `<good-evening>` is created and intentionally delays
    the registration for 3 seconds. The following code contains the definition of
    the `<good-evening>` element:'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个新的自定义组件 `<good-evening>`，并且故意延迟了3秒的注册。以下代码包含了 `<good-evening>` 元素的定义：
- en: '[PRE43]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'In another HTML file, we have used the `forceReady` method to register all
    the custom elements. A callback method `Polymer.whenReady` is then called, which
    tries to register the `<good-evening>` element. The following code contains the
    use of the `forceReady` method:'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在另一个HTML文件中，我们使用了`forceReady`方法来注册所有自定义元素。然后调用回调方法`Polymer.whenReady`，尝试注册`<good-evening>`元素。以下代码包含了`forceReady`方法的使用：
- en: '[PRE44]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: As the `<good-evening>` element method is already registered due to use of the
    `forceReady` method, when we call the registration process again using `Polymer('good-evening')`,
    it will throw an error saying, it is already registered. The following screenshot
    shows the output of the preceding code with an error message logged in the console:![The
    Polymer forceReady method](img/image00273.jpeg)
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于使用了`forceReady`方法，`<good-evening>`元素方法已经注册，当我们再次使用`Polymer('good-evening')`调用注册过程时，它将抛出一个错误，表示它已经注册。以下屏幕截图显示了上述代码的输出，控制台记录了错误信息：![Polymer
    forceReady方法](img/image00273.jpeg)
- en: Asynchronous task execution
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步任务执行
- en: 'Polymer provides a method named `async`, which helps with the execution of
    a code block after a curtailed period of time. The syntax of the `async` method
    is as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Polymer提供了一个名为`async`的方法，它有助于在一段时间后执行代码块。`async`方法的语法如下：
- en: '[PRE45]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Let''s check out an example demonstrating the use of `async` method. The details
    of the example are as follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个演示`async`方法使用的例子。该例子的详细信息如下：
- en: 'A new custom element `<my-text>` is created with the message property initialized
    to `Hello` in a `ready` block. An `async` method is used which will be executed
    after 2 seconds and another string is appended to the `message` property. The
    code for this example is as follows:'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个新的自定义元素`<my-text>`，在`ready`块中将消息属性初始化为`Hello`。使用了一个`async`方法，该方法将在2秒后执行，并将另一个字符串附加到`message`属性。以下是这个例子的代码：
- en: '[PRE46]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The output of the preceding code is shown in the following screenshot, with
    two strings appended after 2 seconds of page rendering:![Asynchronous task execution](img/image00274.jpeg)
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上述代码的输出显示在以下屏幕截图，页面渲染2秒后附加了两个字符串：![异步任务执行](img/image00274.jpeg)
- en: Note
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To find out more about the `async` method, refer to [https://www.polymer-project.org/docs/polymer/polymer.html#asyncmethod](https://www.polymer-project.org/docs/polymer/polymer.html#asyncmethod).
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要了解更多关于`async`方法的信息，请参阅[https://www.polymer-project.org/docs/polymer/polymer.html#asyncmethod](https://www.polymer-project.org/docs/polymer/polymer.html#asyncmethod)。
- en: Developing a digital clock
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发数字时钟
- en: 'In the previous section, we have learned about many concepts of Polymer. Now,
    it is time to develop a custom component. We will develop a digital clock that
    we have already created in [Chapter 1](lrn-web-cmpn-dev_ch01.html#aid-DB7S1 "Chapter 1. Introducing
    Web Components"), *Introducing Web Components*. In this section, we will develop
    the same digital clock using Polymer. The code definition of a digital clock is
    present in the `clock-component.html` file and is as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了Polymer的许多概念。现在是时候开发一个自定义组件了。我们将开发一个在[第1章](lrn-web-cmpn-dev_ch01.html#aid-DB7S1
    "第1章。介绍Web组件")，*介绍Web组件*中已经创建的数字时钟。在本节中，我们将使用Polymer开发相同的数字时钟。数字时钟的代码定义在`clock-component.html`文件中，如下所示：
- en: '[PRE47]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The details of the preceding code are as follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的详细信息如下：
- en: The name of the digital clock is `<ts-clock>`.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字时钟的名称是`<ts-clock>`。
- en: The HTML markup is the same as that we used in the [Chapter 1](lrn-web-cmpn-dev_ch01.html#aid-DB7S1
    "Chapter 1. Introducing Web Components"), *Introducing Web Components*, containing
    three `div` elements as a place holder for hours (HH), minutes (MM), and seconds
    (SS).
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML标记与我们用于[第1章](lrn-web-cmpn-dev_ch01.html#aid-DB7S1 "第1章。介绍Web组件")，*介绍Web组件*中相同，其中包含三个`div`元素作为小时（HH）、分钟（MM）和秒（SS）的占位符。
- en: The template is bound to the `clock` object using the `bind` attribute.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板使用`bind`属性绑定到`clock`对象。
- en: The definition of the digital clock contains an `updateClock` method, which
    creates the `clock` object containing three properties—hour, minute, and second—which
    get the value from a `new Date()` object.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字时钟的定义包含一个`updateClock`方法，它创建一个包含三个属性——小时、分钟和秒的`clock`对象，这些属性从`new Date()`对象获取值。
- en: The `updateClock` method is called recursively and asynchronously using the
    `this.async` method after 1 second. It means that every 1 second, the `clock`
    object gets updated with new values, which, in turn, updates the template.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`this.async`方法在1秒后递归和异步地调用`updateClock`方法。这意味着每秒，`clock`对象都会用新值更新，进而更新模板。
- en: 'The following code shows the use of the `<ts-clock>` element in another HTML
    file:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了在另一个HTML文件中使用`<ts-clock>`元素的方法：
- en: '[PRE48]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The following screenshot shows the output of the preceding code with the current
    time in hours, minutes, and seconds format:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了带有当前时间（小时、分钟和秒格式）的上述代码输出：
- en: '![Developing a digital clock](img/image00275.jpeg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![开发数字时钟](img/image00275.jpeg)'
- en: Working with Yeoman
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Yeoman
- en: 'In [Chapter 2](lrn-web-cmpn-dev_ch02.html#aid-PNV61 "Chapter 2. Introducing
    Polymer"), *Introducing Polymer*, we installed Yeoman and explored some of the
    usage of Polymer. In this section, we will find more of them to work with Polymer.
    The `generator-polymer` module can be installed using the following command:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](lrn-web-cmpn-dev_ch02.html#aid-PNV61 "第2章。介绍Polymer")中，我们安装了Yeoman并探索了Polymer的一些用法。在本节中，我们将进一步了解如何与Polymer一起工作。可以使用以下命令安装`generator-polymer`模块：
- en: '[PRE49]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Considering that we have already installed Yeoman and `generator-polymer`, let's
    learn about the element, seed, and GitHub page generator.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们已经安装了Yeoman和`generator-polymer`，让我们了解元素、种子和GitHub页面生成器。
- en: Yeoman element generator
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Yeoman元素生成器
- en: 'Yeoman provides an element generator to create a skeleton of a custom element.
    The command for generating a skeleton of a custom element is as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: Yeoman提供了一个元素生成器来创建自定义元素的骨架。生成自定义元素骨架的命令如下：
- en: '[PRE50]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Or
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE51]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The details of the preceding command are as follows:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的详细信息如下：
- en: The name of the custom element is `my-element`. We can provide our own name,
    which must be separated with a hyphen(`-`)
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义元素的名称是`my-element`。我们可以提供自己的名称，该名称必须用连字符（`-`）分隔
- en: The directory structure created by this command is `app/elements/elements.html`
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此命令创建的目录结构是`app/elements/elements.html`
- en: 'Let''s create a custom element `<say-time>` using Yeoman element generator.
    The command for generating a skeleton of the `<say-time>` element is as follows:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Yeoman元素生成器创建一个自定义元素`<say-time>`。生成`<say-time>`元素骨架的命令如下：
- en: '[PRE52]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The following screenshot shows the terminal with Yeoman element generator in
    effect:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了带有Yeoman元素生成器的终端：
- en: '![Yeoman element generator](img/image00276.jpeg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![Yeoman元素生成器](img/image00276.jpeg)'
- en: 'On successful execution of the preceding command, it creates a directory structure
    `app/element/say-time.html`. The skeleton of the generated custom element for
    the `<say-time>` element is as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功执行上述命令后，它创建了一个目录结构`app/element/say-time.html`。为`<say-time>`元素生成的自定义元素骨架如下：
- en: '[PRE53]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'There are few changes we need to make to adjust the library path, and some
    code needed for our chapter demonstration. We have overridden the created callback
    method by assigning the `currentTime` attribute with a `new Date` object. The
    modified code of the `<say-time>` component is as follows:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做少量更改以调整库路径，以及一些用于我们章节演示所需的代码。我们通过将`currentTime`属性赋值为`new Date`对象来覆盖了创建的回调方法。修改后的`<say-time>`组件的代码如下：
- en: '[PRE54]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The following code shows the use of the `<say-time>` custom element in a current
    page:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了在当前页面中使用`<say-time>`自定义元素的方法：
- en: '[PRE55]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The output of the preceding code is rendered as the following screenshot, showing
    the current time due to the expression `{{currentTime}}` in the template:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 前述代码的输出结果如下所示，截图显示了当前时间，这是由于模板中的表达式`{{currentTime}}`：
- en: '![Yeoman element generator](img/image00277.jpeg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![Yeoman元素生成器](img/image00277.jpeg)'
- en: Yeoman seed generator
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Yeoman seed生成器
- en: 'Yeoman Seed generator is used for developing a reusable element. It creates
    all the necessary boilerplate directories and files needed to publish a new custom
    element. The command for running a seed generator is as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: Yeoman Seed生成器用于开发可重用的元素。它创建了发布新自定义元素所需的所有必要的样板目录和文件。运行种子生成器的命令如下：
- en: '[PRE56]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The following screenshot shows the terminal with a seed generator in effect:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了带有种子生成器的终端：
- en: '![Yeoman seed generator](img/image00278.jpeg)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![Yeoman seed生成器](img/image00278.jpeg)'
- en: 'Once the preceding command is executed successfully, a directory structure
    is created for developing a reusable component, as shown in the following screenshot:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行上述命令成功，将创建一个用于开发可重用组件的目录结构，如下面的截图所示：
- en: '![Yeoman seed generator](img/image00279.jpeg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![Yeoman 种子生成器](img/image00279.jpeg)'
- en: 'After the directory structure is generated, we can modify the definition of
    the `<display-year>` custom element in the `display-year.html` file. We have overridden
    the `created` callback method with the `currentYear` property. The modified code
    is as follows:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在目录结构生成后，我们可以在 `display-year.html` 文件中修改 `<display-year>` 自定义元素的定义。我们已用 `currentYear`
    属性覆盖了 `created` 回调方法。修改后的代码如下：
- en: '[PRE57]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The modified template for the `<display-year>` element is as follows, with
    the added expression `{{currentYear}}`:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`<display-year>` 元素的修改模板如下，增加了表达式 `{{currentYear}}`：'
- en: '[PRE58]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: You can find the complete source code containing all the directory structures
    with dependent files from Packt's website.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 Packt 的网站上找到包含所有目录结构和相关文件的完整源代码。
- en: Yeoman GitHub page generator
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Yeoman GitHub 页面生成器
- en: 'This generator is used for creating a GitHub page for the custom element. The
    syntax of the command for the GitHub page generator is as follows:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 此生成器用于为自定义元素创建 GitHub 页面。GitHub 页面生成器的命令语法如下：
- en: '[PRE59]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The following screenshot shows the terminal with the GitHub page generator
    in execution for the `<display-year>` custom element:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了执行 `<display-year>` 自定义元素的 GitHub 页面生成器的终端：
- en: '![Yeoman GitHub page generator](img/image00280.jpeg)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![Yeoman GitHub 页面生成器](img/image00280.jpeg)'
- en: Note
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To find out more about the GitHub page generator, refer to [https://github.com/yeoman/generator-polymer#gh](https://github.com/yeoman/generator-polymer#gh).
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 GitHub 页面生成器的信息，请参阅 [https://github.com/yeoman/generator-polymer#gh](https://github.com/yeoman/generator-polymer#gh)。
- en: Preparing for production using vulcanize
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 vulcanize 准备生产
- en: In Polymer-based web application development, we may find a situation where
    we need to use a lot of HTML Import for a web page. Each HTML Import is an HTTP
    call to the server. This can really hamper the application performance, and definitely
    the application is not a good candidate for production deployment. This problem
    can be solved by a vulcanize process that makes the Polymer application a more
    durable and production-ready application.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于 Polymer 的 Web 应用程序开发中，我们可能会遇到需要为网页使用大量 HTML 导入的情况。每个 HTML 导入都是对服务器的 HTTP
    调用。这可能会严重影响应用程序的性能，并且肯定不适合用于生产部署。这个问题可以通过 vulcanize 过程来解决，该过程使 Polymer 应用程序成为一个更耐用且适合生产部署的应用程序。
- en: Vulcanize installation
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: vulcanize 安装
- en: '**Node package manager** (**npm**) is required before installing the **vulcanize**
    package. Considering npm is present in the system, use the following command to
    start the installation of vulcanize:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 **vulcanize** 包之前需要 **Node 包管理器** (**npm**)。考虑到系统中已存在 npm，可以使用以下命令开始安装 vulcanize：
- en: '[PRE60]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The preceding command will install vulcanize globally. The following screenshot
    shows the terminal with the vulcanize installation process:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将全局安装 vulcanize。以下截图显示了 vulcanize 安装过程的终端：
- en: '![Vulcanize installation](img/image00281.jpeg)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![vulcanize 安装](img/image00281.jpeg)'
- en: Running vulcanize process
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行 vulcanize 过程
- en: 'Once vulcanize is installed in the system, we can run the process to optimize
    the files, to make them production ready. The syntax of the vulcanize command
    is as follows:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在系统中安装了 vulcanize，我们可以运行该过程以优化文件，使它们适合生产。vulcanize 命令的语法如下：
- en: '[PRE61]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The vulcanize process concatenates the files into a single file for deployment.
    The following screenshot shows the vulcanize process in progress for the `clockDemo.html`
    file:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: vulcanize 过程将文件连接成一个单一的文件以进行部署。以下截图显示了 `clockDemo.html` 文件的 vulcanize 过程：
- en: '![Running vulcanize process](img/image00282.jpeg)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![运行 vulcanize 过程](img/image00282.jpeg)'
- en: On completion of the preceding command, the `build.html` file is generated,
    which concatenates the dependent files. Now, the `build.html` file is optimized
    and ready for production. Vulcanize is also available as Grunt and Gulp tasks
    as well. Take a look at [https://www.npmjs.com/package/grunt-vulcanize](https://www.npmjs.com/package/grunt-vulcanize)
    for the `grunt-vulcanize` package and [https://www.npmjs.com/package/gulp-vulcanize](https://www.npmjs.com/package/gulp-vulcanize)
    for the `gulp-vulcanize` package.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 完成前面的命令后，将生成`build.html`文件，该文件将连接依赖文件。现在，`build.html`文件已优化，准备好投入生产。Vulcanize也作为Grunt和Gulp任务可用。请查看[https://www.npmjs.com/package/grunt-vulcanize](https://www.npmjs.com/package/grunt-vulcanize)以获取`grunt-vulcanize`包的信息，以及[https://www.npmjs.com/package/gulp-vulcanize](https://www.npmjs.com/package/gulp-vulcanize)以获取`gulp-vulcanize`包的信息。
- en: Note
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To find out more about the vulcanize process, refer to [https://github.com/Polymer/vulcanize](https://github.com/Polymer/vulcanize).
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于硫化过程的信息，请参考[https://github.com/Polymer/vulcanize](https://github.com/Polymer/vulcanize)。
- en: Summary
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the key concepts of the Polymer library such
    as expression, filter expression, and element lifecycle. You have also explored
    custom element development using the Polymer library, followed by a sample digital
    clock development. In the next chapter, you will learn about Bosonic framework.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了Polymer库的关键概念，如表达式、过滤器表达式和元素生命周期。你还探索了使用Polymer库进行自定义元素开发，并随后开发了一个示例数字时钟。在下一章中，你将学习Bosonic框架。
