["```js\n    react-native init Expenses\n\n```", "```js\n    npm install react-native-vector-icons --save\n\n```", "```js\n    react-native link\n\n```", "```js\n|Expenses \n|__app \n|____components \n|______AddExpenses \n|______AddExpensesModal \n|______CurrentMonthExpenses \n|______EnterBudget \n|______ExpandableCell \n|______ExpenseRow \n|____utils \n|______dateMethods.js \n|______storageMethods.js \n|____App.js \n|____styles.js \n|__ios \n|__index.ios.js \n\n```", "```js\n// Expenses/app/utils/dateMethods.js\n\nconst monthNames = { \n  1: 'January', \n  2: 'February', \n  3: 'March', \n  4: 'April', \n  5: 'May', \n  6: 'June', \n  7: 'July', \n  8: 'August', \n  9: 'September', \n  10: 'October', \n  11: 'November', \n  12: 'December' \n} \n\n```", "```js\nexport const getYear = (date) => { \n  date = date || new Date(); \n  return date.getFullYear().toString(); \n}\n\n```", "```js\nexport const getMonth = (date) => { \n  date = date || new Date(); \n  const zeroIndexedMonth = date.getMonth(); \n  return (zeroIndexedMonth + 1).toString(); \n}\n\n```", "```js\nexport const getDay = (date) => { \n  date = date || new Date(); \n  return date.getDate().toString(); \n}\n\n```", "```js\nexport const getMonthString = (monthInt) => { \n  if (typeof monthInt === 'string') { \n    monthInt = parseInt(monthInt); \n  } \n\n  return monthNames[monthInt]; \n} \n\n```", "```js\nlistOfExpenses = { \n  2017: { \n    01: { \n      budget: 500, \n      expenses: [ \n        { \n          amount: '4', \n          category: 'Coffee', \n          date: 'Jan 12, 2017' \n          description: 'Latte @ Coffeeshop' \n        }, \n        { \n          amount: '1.50', \n          category: 'Books', \n          date: 'Jan 17, 2017' \n          description: 'Sunday Newspaper' \n        } \n      ] \n    } \n  } \n} \n\n```", "```js\n// Expenses/app/utils/storageMethods.js\n\nimport { AsyncStorage } from 'react-native'; \n\nimport * as dateMethods from './dateMethods';\n\n```", "```js\n export const getAsyncStorage = async () => { \n  let response = await AsyncStorage.getItem('expenses'); \n  let parsedData = JSON.parse(response) || {}; \n\n  return parsedData; \n}\n\n```", "```js\n export const setAsyncStorage = (expenses) => { \n  return AsyncStorage.setItem('expenses', JSON.stringify(expenses)); \n}\n\n```", "```js\nexport const checkCurrentMonthBudget = async () => {\n  let year = dateMethods.getYear();\n  let month = dateMethods.getMonth();\n\n  let response = await getAsyncStorage();\n\n  if (response === null || !response.hasOwnProperty(year) || \n  !response[year].hasOwnProperty(month)) {\n    return false;\n  }\n\n  return response[year][month].budget;\n}\n\n```", "```js\n export const saveMonthlyBudget = async (month, year, budget) => { \n  let response = await getAsyncStorage(); \n\n  if (!response.hasOwnProperty(year)) { \n    response[year] = {}; \n  } \n\n  if (!response[year].hasOwnProperty(month)) { \n    response[year][month] = { \n      budget: undefined, \n      expenses: [], \n      spent: 0 \n    } \n  } \n\n  response[year][month].budget = budget; \n\n  await setAsyncStorage(response); \n\n  return; \n} \n\n```", "```js\nexport const resetAsyncStorage = () => { \n  return setAsyncStorage({}); \n}\n\n```", "```js\nexport const logAsyncStorage = async () => { \n  let response = await getAsyncStorage(); \n\n  console.log('Logging Async Storage'); \n  console.table(response); \n}\n\n```", "```js\n// Expenses/index.ios.js \n\nimport React, { Component } from 'react'; \nimport { \n  AppRegistry, \n  NavigatorIOS, \n  StyleSheet \n} from 'react-native'; \n\nimport App from './app/App'; \n\nexport default class Expenses extends Component { \n  render() { \n    return ( \n      <NavigatorIOS \n        initialRoute={{ \n          component: App, \n          title: 'Expenses' \n        }} \n        style={ styles.container } \n      /> \n    ); \n  } \n} \n\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1, \n  } \n}); \n\nAppRegistry.registerComponent('Expenses', () => Expenses); \n\n```", "```js\n// Expenses/app/App.js\n\nimport React, { Component } from 'react'; \n\nimport styles from './styles'; \n\nimport { \n  Text, \n  View \n} from 'react-native'; \n\nimport * as storageMethods from './utils/storageMethods'; \n\nexport default class App extends Component { \n  constructor (props) { \n    super (); \n\n    this.state = { \n      budget: undefined \n    } \n  }\n\n```", "```js\nasync componentWillMount () { \n    let response = await storageMethods.checkCurrentMonthBudget(); \n\n    if (response !== false) { \n      this.setState({ \n        budget: response \n      }); \n\n      return; \n    } \n\n    alert('You have not set a budget for this month!'); \n  } \n\n```", "```js\n  render () { \n    return ( \n      <View style={ styles.appContainer }> \n        <Text> \n          Your budget is { this.state.budget || 'not set' }! \n        </Text> \n      </View> \n    ) \n  } \n} \n\n```", "```js\n// Expenses/app/styles.js\n\nimport { Navigator, StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({ \n  appContainer: { \n    flex: 1, \n    marginTop: Navigator.NavigationBar.Styles.General.TotalNavHeight\n  }\n}); \n\nexport default styles;\n\n```", "```js\n// Expenses/app/App.js\n\n... \nimport EnterBudget from './components/EnterBudget'; \n\nexport default class App extends Component { \n  ...\n\n```", "```js\n  componentWillMount () { \n    this.setState({ \n      month: dateMethods.getMonth(), \n      year: dateMethods.getYear() \n    }); \n\n    this._updateBudget(); \n  }\n\n```", "```js\n  ... \n  _renderEnterBudgetComponent () { \n    this.props.navigator.push({ \n      component: EnterBudget, \n      navigationBarHidden: true, \n      passProps: { \n        monthString: dateMethods.getMonthString( this.state.month), \n        saveAndUpdateBudget: (budget) => \n        this._saveAndUpdateBudget(budget) \n      } \n    }); \n  } \n\n```", "```js\n  async _saveAndUpdateBudget (budget) { \n    await storageMethods.saveMonthlyBudget(this.state.month, \n    this.state.year, budget); \n\n    this._updateBudget(); \n  }\n\n```", "```js\n   async _updateBudget () { \n    let response = await storageMethods.checkCurrentMonthBudget(); \n\n    if (response !== false) { \n      this.setState({ \n        budget: response \n      }); \n\n      return; \n    } \n\n    this._renderEnterBudgetComponent(); \n  } \n} \n\n```", "```js\n// Expenses/app/components/EnterBudget/index.js \n\nimport React, { Component, PropTypes } from 'react'; \n\nimport { \n  Text, \n  TextInput, \n  Button, \n  View \n} from 'react-native'; \n\nimport styles from './styles'; \n\nimport * as dateMethods from '../../utils/dateMethods'; \n\nexport default class EnterBudget extends Component { \n\n```", "```js\n  static propTypes = { \n    monthString: PropTypes.string.isRequired, \n    saveAndUpdateBudget: PropTypes.func.isRequired \n  }\n\n   constructor (props) { \n    super(props); \n\n    this.state = { \n      budget: undefined \n    } \n  } \n\n```", "```js\n  render () { \n    let month = dateMethods.getMonthString(dateMethods.getMonth()); \n\n    return ( \n      <View style={ styles.enterBudgetContainer }> \n        <Text style={ styles.enterBudgetHeader }> \n          Enter Your { this.props.monthString } Budget \n        </Text> \n        <Text style={ styles.enterBudgetText }> \n          What's your spending goal? \n        </Text> \n        <TextInput \n          style={ styles.textInput } \n          onChangeText={ (budget) => this._setBudgetValue(budget) } \n          value={ this.state.budget } \n          placeholder={ '0' } \n          keyboardType={ 'numeric' } \n        />\n\n```", "```js\n        <View> \n          <Button \n            color={ '#3D4A53' } \n            disabled={ !this.state.budget } \n            onPress={ () => this._saveAndUpdateBudget() } \n            title={ 'Save Budget' } \n          /> \n        </View> \n      </View> \n    ) \n  } \n\n```", "```js\n  _saveAndUpdateBudget () { \n    this.props.saveAndUpdateBudget(this.state.budget); \n    this.props.navigator.pop(); \n  }\n\n```", "```js\n  _setBudgetValue (budget) { \n    this.setState({ \n      budget \n    }); \n  } \n} \n\n```", "```js\n// Expenses/app/components/EnterBudget/styles.js \n\nimport { Navigator, StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({\n\n```", "```js\nenterBudgetContainer: { \n    flex: 1, \n    marginTop: Navigator.NavigationBar.Styles.General.TotalNavHeight \n  }, \n\n```", "```js\n  enterBudgetHeader: { \n    color: '#3D4A53', \n    fontSize: 24, \n    margin: 10, \n    textAlign: 'center' \n  }, \n  enterBudgetText: { \n    color: '#3D4A53', \n    fontSize: 16, \n    margin: 10, \n    textAlign: 'center' \n  }, \n  textInput: { \n    height: 40, \n    borderColor: '#86B2CA', \n    borderWidth: 1, \n    color: '#3D4A53', \n    margin: 10, \n    padding: 10, \n    textAlign: 'center' \n  } \n}); \n\nexport default styles; \n\n```", "```js\n// Expenses/app/components/AddExpenses/index.js \n\nimport React, { Component, PropTypes } from 'react'; \n\nimport { \n  Button, \n  View \n} from 'react-native'; \n\nexport default class AddExpenses extends Component { \n  static propTypes = { \n    month: PropTypes.string.isRequired, \n    year: PropTypes.string.isRequired \n  }\n\n```", "```js\n  constructor (props) { \n    super (props); \n  } \n\n  render () { \n    return ( \n      <View> \n        <Button \n          color={ '#86B2CA' } \n          onPress={ () => alert('Add Expenses Button pressed!') } \n          title={ 'Add Expense' } \n        /> \n      </View> \n    ) \n  } \n} \n\n```", "```js\n// Expenses/app/App.js \n\n... \nimport AddExpenses from './components/AddExpenses'; \n... \nexport default class App extends Component { \n  ... \n  render () { \n    return ( \n      <View style={ styles.appContainer }> \n\n```", "```js\n        <AddExpenses \n          month={ this.state.month } \n          year={ this.state.year } \n        /> \n      </View> \n    ) \n  } \n  ... \n} \n\n```", "```js\n// Expenses/app/components/AddExpenses/index.js\n\n... \nimport AddExpensesModal from '../AddExpensesModal'; \n\nexport default class AddExpenses extends Component { \n  ... \n  constructor (props) { \n    super (props);\n\n```", "```js\n    this.state = { \n      modalVisible: false \n    } \n  }\n\n```", "```js\n  render () { \n    return ( \n      <View> \n        <AddExpensesModal \n          modalVisible={ this.state.modalVisible } \n          month={ this.props.month } \n          year={ this.props.year } \n        />\n\n```", "```js\n        <Button \n          color={ '#86B2CA' } \n          onPress={ () => this._toggleModal() } \n          title={ 'Add Expense' } \n        /> \n      </View> \n    ) \n  }\n\n```", "```js\n  _toggleModal () { \n    this.setState({ \n      modalVisible: !this.state.modalVisible \n    }); \n  } \n} \n\n```", "```js\n// Expenses/app/components/AddExpensesModal/index.js \n\nimport React, { Component, PropTypes } from 'react'; \n\nimport { \n  Modal, \n  Text, \n  View \n} from 'react-native'; \n\nimport styles from './styles'; \n\nexport default class AddExpensesModal extends Component {\n\n```", "```js\n  static propTypes = { \n    modalVisible: PropTypes.bool.isRequired, \n    month: PropTypes.string.isRequired, \n    year: PropTypes.string.isRequired \n  }\n\n  constructor (props) { \n    super (props); \n  }\n\n```", "```js\n  render () { \n    return ( \n      <Modal \n        animationType={ 'slide' } \n        transparent={ false } \n        visible={ this.props.modalVisible } \n      >\n\n```", "```js\n        <View style={ styles.modalContainer }> \n          <Text> \n            This is a modal to enter your { this.props.month + ' ' + \n            this.props.year } budget. \n          </Text> \n        </View> \n      </Modal>\n    )\n  }\n}\n\n```", "```js\n// Expenses/app/components/AddExpensesModal/styles.js \n\nimport { Navigator, StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  modalContainer: { \n    flex: 1, \n    marginTop: Navigator.NavigationBar.Styles.General.TotalNavHeight \n  } \n}); \n\nexport default styles; \n\n```", "```js\n// Expenses/app/components/AddExpensesModal/index.js \n\n... \nimport { \n  ... \n  TextInput, \n  ... \n} from 'react-native'; \n... \nexport default class AddExpensesModal extends Component { \n...\n\n```", "```js\n  constructor (props) { \n    super (props); \n\n    this.state = { \n      amount: '', \n      description: '', \n    } \n  } \n\n```", "```js\n  render () { \n    return ( \n      <Modal \n        animationType={ 'slide' } \n        transparent={ false } \n        visible={ this.props.modalVisible } \n      > \n        <View style={ styles.modalContainer }> \n          <Text style={ styles.headerText }> \n            Add an Expense \n          </Text> \n          <View style={ styles.amountRow }> \n            <Text style={ styles.amountText }> \n              Amount \n            </Text>\n\n```", "```js\n            <TextInput \n              keyboardType={ 'numeric' } \n              onChangeText={ (value) => this._changeAmount(value) } \n              placeholder={ '0' } \n              style={ styles.amountInput } \n              value={ this.state.amount } \n            />\n          </View>\n\n```", "```js\n          <Text style={ styles.descriptionText }> \n            Description \n          </Text> \n          <TextInput \n            onChangeText={ (value) => this._changeDescription(value) } \n            placeholder={ 'Book on React Native development' } \n            style={ styles.descriptionInput } \n            value={ this.state.description } \n          />\n        </View> \n      </Modal> \n    ) \n  } \n\n```", "```js\n  _changeAmount(amount) { \n    this.setState({ \n      amount \n    }); \n  } \n\n  _changeDescription(description) { \n    this.setState({ \n      description \n    }); \n  } \n} \n\n```", "```js\n// Expenses/app/components/AddExpensesModal/styles.js \n\n... \nconst styles = StyleSheet.create({\n\n```", "```js\n  amountInput: { \n    borderColor: '#86B2CA', \n    borderRadius: 10, \n    borderWidth: 1, \n    color: '#3D4A53', \n    height: 40, \n    margin: 10, \n    padding: 10, \n    width: 200 \n  },\n\n```", "```js\n  amountRow: { \n    flexDirection: 'row', \n    justifyContent: 'space-between' \n  }, \n  amountText: { \n    color: '#3D4A53', \n    margin: 10, \n    marginLeft: 20, \n    paddingTop: 10 \n  }, \n\n```", "```js\n  descriptionInput: { \n    borderColor: '#86B2CA', \n    borderRadius: 10, \n    borderWidth: 1, \n    color: '#3D4A53', \n    height: 40, \n    margin: 10, \n    padding: 10 \n  }, \n  descriptionText: { \n    color: '#3D4A53', \n    marginBottom: 5, \n    marginLeft: 20, \n    marginRight: 10, \n    marginTop: 10 \n  }, \n  headerText: { \n    color: '#7D878D', \n    fontSize: 18, \n    fontWeight: 'bold', \n    marginBottom: 15, \n    textAlign: 'center' \n  }, \n  ... \n}); \n\n```", "```js\n// Expenses/app/components/AddExpensesModal/index.js \n\n... \nimport { \n  DatePickerIOS, \n  ... \n} from 'react-native'; \n\nimport moment from 'moment'; \nimport ExpandableCell from '../ExpandableCell'; \n... \nexport default class AddExpensesModal extends Component { \n  ... \n  constructor (props) { \n    super (props);\n\n```", "```js\n    this.state = { \n      ... \n      date: new Date(), \n      expanded: false \n    } \n  } \n\n```", "```js\n render () { \n    const expandableCellTitle = 'Date: ' + moment(this.state.date).\n    format('ll') + ' (tap to change)'; \n\n    return ( \n      <Modal \n        animationType={ 'slide' } \n        transparent={ false } \n        visible={ this.props.modalVisible } \n      > \n        ... \n          <View style={ [styles.expandableCellContainer,\n          { maxHeight: this.state.expanded ?\n          this.state.datePickerHeight : 40 }]}>\n\n```", "```js\n            <ExpandableCell \n              expanded={ this.state.expanded } \n              onPress={ () => this._onExpand() } \n              title={ expandableCellTitle }>\n\n```", "```js\n              <DatePickerIOS \n                date={ this.state.date } \n                mode={ 'date' } \n                onDateChange={ (date) => this._onDateChange(date) } \n                onLayout={ (event) => this._getDatePickerHeight(event) \n                } \n              /> \n            </ExpandableCell> \n          </View> \n        </View> \n      </Modal> \n    ) \n  } \n\n```", "```js\n  ... \n  _getDatePickerHeight (event) { \n    this.setState({ \n      datePickerHeight: event.nativeEvent.layout.width \n    }); \n  }\n\n```", "```js\n  _onDateChange (date) { \n    this.setState({ \n      date \n    }); \n  } \n\n  _onExpand () { \n    this.setState({ \n      expanded: !this.state.expanded \n    }); \n  } \n} \n\n```", "```js\n// Expenses/app/components/AddExpensesModal/styles.js \n\nexpandableCellContainer: { \n    flex: 1 \n}, \n\n```", "```js\n// Expenses/app/components/AddExpensesModal/index.js \n\n... \nimport { \n  ... \n  ScrollView, \n  ... \n} from 'react-native'; \n... \nexport default class AddExpensesModal extends Component { \n  ...\n\n```", "```js\n  render () { \n    ... \n    return ( \n      <Modal \n        animationType={ 'slide' } \n        transparent={ false } \n        visible={ this.props.modalVisible } \n      > \n        <ScrollView style={ styles.modalContainer }> \n          ... \n          <View style={ [styles.expandableCellContainer, \n            { height: this.state.expanded ? \n            this.state.datePickerHeight : 40 }]}> \n            ... \n          </View> \n        </ScrollView>\n      </Modal> \n    ) \n  } \n\n```", "```js\n        { \n          amount: '4', \n          category: 'Coffee', \n          date: 'Jan 12, 2017' \n          description: 'Latte @ Coffeeshop' \n        }, \n\n```", "```js\n// Expenses/app/utils/storageMethods.js \n\n... \nconst getTotalSpentForMonth = (array) => { \n  let total = 0; \n\n  array.forEach((elem) => { \n    total += parseInt(elem.amount) \n  }); \n\n  return total; \n} \n\n```", "```js\nexport const saveItemToBudget = async (month, year, expenseObject) \n=> { \n  let response = await getAsyncStorage(); \n\n  let newExpensesArray = [ \n    ...response[year][month].expenses, \n    expenseObject \n  ]; \n\n  let newTotal = getTotalSpentForMonth(newExpensesArray); \n\n  response[year][month].expenses = newExpensesArray; \n  response[year][month].spent = newTotal; \n\n  await setAsyncStorage(response); \n\n  return true; \n} \n... \n\n```", "```js\n// Expenses/app/components/AddExpenses/index.js \n\n... \nexport default class AddExpenses extends Component { \n  ... \n  render () { \n    return ( \n      <View> \n        <AddExpensesModal \n          modalVisible={ this.state.modalVisible } \n          month={ this.props.month } \n          toggleModal={ () => this._toggleModal() } \n          year={ this.props.year } \n        /> \n        ... \n      </View> \n    ) \n  } \n  ... \n} \n\n```", "```js\n// Expenses/app/components/AddExpensesModal/index.js \n\n... \nimport { \n  Button, \n  ... \n} from 'react-native'; \n\n... \nexport default class AddExpensesModal extends Component { \n  static propTypes = { \n    ... \n    toggleModal: PropTypes.func.isRequired, \n  } \n  ... \n  render () { \n    ... \n    return ( \n      <Modal \n        ... \n      >\n\n```", "```js\n        <ScrollView style={ styles.modalContainer }> \n          ... \n          <Button \n            color={ '#86B2CA' } \n            disabled={ !(this.state.amount && this.state.description) } \n            onPress={ () => this._saveItemToBudget() } \n            title={ 'Save Expense' } \n          /> \n          <Button \n            color={ '#E85C58' } \n            onPress={ () => this._clearFieldsAndCloseModal() } \n            title={ 'Cancel' } \n          /> \n        </ScrollView> \n      </Modal> \n    ) \n  } \n  ... \n\n```", "```js\n  _clearFieldsAndCloseModal () { \n    this.setState({ \n      amount: '', \n      description: '' \n    });\n\n```", "```js\n  ... \n  async _saveItemToBudget () { \n    const expenseObject = { \n      amount: this.state.amount, \n      date: moment(this.state.date).format('ll'), \n      description: this.state.description \n    };\n    let month = this.state.date.getMonth() + 1;\n    let year = this.state.date.getFullYear();\n    await storageMethods.saveItemToBudget(month, year, \n    expenseObject); \n\n    this._clearFieldsAndCloseModal(); \n  } \n} \n\n```", "```js\n// Expenses/app/utils/storageMethods.js \n\n... \nexport const getMonthObject = async (month, year) => { \n  let response = await getAsyncStorage(); \n\n  if (response[year] && response[year][month]) { \n    return response[year][month]; \n  } \n} \n... \n\n```", "```js\n// Expenses/app/components/CurrentMonthExpenses/index.js \n\nimport React, { Component, PropTypes } from 'react'; \n\nimport { \n  ListView, \n  Text, \n  View \n} from 'react-native'; \n\nimport styles from './styles'; \nimport * as dateMethods from '../../utils/dateMethods'; \nimport * as storageMethods from '../../utils/storageMethods'; \n\nimport ExpenseRow from '../ExpenseRow'; \n\nexport default class CurrentMonthExpenses extends Component { \n  static propTypes = { \n    budget: PropTypes.string.isRequired, \n    expenses: PropTypes.array.isRequired, \n    month: PropTypes.string.isRequired, \n    spent: PropTypes.number.isRequired, \n    year: PropTypes.string.isRequired, \n  }\n\n```", "```js\n  constructor (props) { \n    super (props); \n\n    this.state = { \n      ds: new ListView.DataSource({ \n        rowHasChanged: (r1, r2) => r1 !== r2 \n      }), \n    } \n  } \n\n```", "```js\n  render () { \n    const dataSource = this.state.ds.cloneWithRows\n    (this.props.expenses || []);\n\n```", "```js\n    return (\n      <View style={ styles.currentMonthExpensesContainer }> \n        <View style={ styles.currentMonthExpensesHeader }> \n          <Text style={ styles.headerText }> \n            Your { dateMethods.getMonthString(this.props.month)\n            + ' ' + this.props.year } budget: \n          </Text> \n          <Text style={ styles.subText }> \n            { this.props.budget } \n          </Text> \n        </View> \n        <ListView \n          automaticallyAdjustContentInsets={ false } \n          dataSource={ dataSource } \n          enableEmptySections={ true } \n          renderRow={ (rowData, sectionID, rowID) =>\n            this._renderRowData(rowData, rowID) } \n          renderSeparator={ (sectionID, rowID) =>\n            this._renderRowSeparator(sectionID, rowID) } \n        /> \n      </View> \n    ) \n  } \n\n```", "```js\n  _renderRowData (rowData, rowID) { \n    if (rowData) { \n      return ( \n        <ExpenseRow \n          amount={ rowData.amount } \n          description={ rowData.description } \n        /> \n      ) \n    } \n  } \n\n  _renderRowSeparator (sectionID, rowID) { \n    return ( \n      <View \n        key={ rowID } \n        style={ styles.rowSeparator } \n      /> \n    ) \n  } \n}; \n\n```", "```js\n// Expenses/app/components/CurrentMonthExpenses/styles.js \n\nimport { StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  currentMonthExpensesContainer: { \n    flex: 1, \n  }, \n  currentMonthExpensesHeader: { \n    height: 80, \n  }, \n  headerText: { \n    color: '#7D878D', \n    fontSize: 24, \n    marginBottom: 10, \n    marginTop: 10, \n    textAlign: 'center' \n  }, \n  rowSeparator: { \n    backgroundColor: '#7D878D', \n    flex: 1, \n    height: StyleSheet.hairlineWidth, \n    marginLeft: 15, \n    marginRight: 15 \n  }, \n  subText: { \n    color: '#3D4A53', \n    fontSize: 18, \n    fontWeight: 'bold', \n    textAlign: 'center' \n  }, \n}); \n\nexport default styles; \n\n```", "```js\n// Expenses/app/components/ExpenseRow/index.js \n\nimport React from 'react'; \n\nimport { \n  Text, \n  View \n} from 'react-native'; \n\nimport styles from './styles'; \n\nexport default (props) => { \n  return ( \n    <View style={ styles.expenseRowContainer }> \n      <Text style={ styles.descriptionText }> \n        { props.description } \n      </Text> \n      <Text style={ styles.amountText }> \n        { props.amount } \n      </Text> \n    </View> \n  ) \n} \n\n```", "```js\n// Expenses/app/App.js \n\n... \nimport CurrentMonthExpenses from './components/CurrentMonthExpenses'; \n... \nexport default class App extends Component { \n  ... \n  render () { \n    return ( \n      <View style={ styles.appContainer }> \n        <CurrentMonthExpenses \n          budget={ this.state.budget || '0' } \n          expenses={ this.state.expenses } \n          month={ this.state.month } \n          spent={ this.state.spent || 0 } \n          year={ this.state.year } \n        /> \n        <AddExpenses \n          month={ this.state.month } \n          updateCurrentMonthExpenses={ () => \n          this._updateCurrentMonthExpenses() } \n          year={ this.state.year } \n        /> \n      </View> \n    ) \n  } \n\n```", "```js\n  ... \n  async _updateBudget () { \n    let response = await storageMethods.checkCurrentMonthBudget(); \n\n    if (response !== false) { \n      this.setState({ \n        budget: response \n      }); \n\n      this._updateCurrentMonthExpenses(); \n      return; \n    } \n\n    this._renderEnterBudgetComponent(); \n  } \n\n```", "```js\n  async _updateCurrentMonthExpenses () { \n    let responseObject = await \n    storageMethods.getMonthObject(this.state.month, this.state.year); \n\n    if (responseObject) { \n      this.setState({ \n        budget: responseObject.budget, \n        expenses: responseObject.expenses, \n        spent: responseObject.spent \n      }); \n    } \n  } \n} \n\n```", "```js\n// Expenses/app/components/AddExpense/index.js \n\n... \nexport default class AddExpenses extends Component { \n  static propTypes = { \n    ... \n    updateCurrentMonthExpenses: PropTypes.func.isRequired \n  } \n  ... \n  _toggleModal (boolean) { \n    this.setState({ \n      modalVisible: !this.state.modalVisible \n    }); \n    this.props.updateCurrentMonthExpenses(); \n  } \n} \n\n```"]