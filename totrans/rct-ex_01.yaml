- en: Chapter 1. Getting Started with React
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章：React入门
- en: Web development has seen a huge advent of **Single Page Application** (**SPA**)
    in the past couple of years. Early development was simple—reload a complete page
    to perform a change in the display or perform a user action. The problem with
    this was a huge round-trip time for the complete request to reach the web server
    and back to the client.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年中，Web开发领域迎来了**单页应用**（SPA）的巨大发展。早期的开发相对简单——通过重新加载整个页面来执行显示或用户操作的改变。这种做法的问题在于，整个请求从客户端到达服务器并返回客户端需要巨大的往返时间。
- en: Then came AJAX, which sent a request to the server, and could update parts of
    the page without reloading the current page. Moving in the same direction, we
    saw the emergence of the SPAs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然后出现了AJAX，它向服务器发送请求，可以在不重新加载当前页面的情况下更新页面的一部分。沿着相同的方向，我们看到了SPA的出现。
- en: Wrapping up the heavy frontend content and delivering it to the client browser
    just once, while maintaining a small channel for communication with the server
    based on any event; this is usually complemented by thin API on the web server.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 将大量前端内容封装起来，仅一次交付给客户端浏览器，同时基于任何事件与服务器保持小通道的通信；这通常由网络服务器上的轻量级API来补充。
- en: The growth in such apps has been complemented by JavaScript libraries and frameworks
    such as Ext JS, KnockoutJS, BackboneJS, AngularJS, EmberJS, and more recently,
    React and Polymer.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这种应用的增长得到了JavaScript库和框架如Ext JS、KnockoutJS、BackboneJS、AngularJS、EmberJS等的补充，最近还有React和Polymer。
- en: Let's take a look at how React fits in this ecosystem and get introduced to
    it in this chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看React如何融入这个生态系统，并在本章中对其进行介绍。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is React and why do we use React?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是React以及为什么我们要使用React？
- en: Data flows in the component
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据在组件中流动
- en: Component displays the view based on state of the component
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件根据组件的状态显示视图
- en: Component defines display of the view, irrespective of data contained, thus
    reducing the dependency and complexity of state for display
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件定义了视图的显示，无论包含什么数据，从而减少了显示对状态的依赖和复杂性
- en: User interactions may change state of component from handlers
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户交互可能会通过处理程序改变组件的状态
- en: Components are reused and re-rendered
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件被重用和重新渲染
- en: What is React?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是React？
- en: ReactJS tries to solve the problem from the *View* layer. It can very well be
    defined and used as the *V* in any of the *MVC* frameworks. It's not opinionated
    about how it should be used. It creates abstract representations of views. It
    breaks down parts of the view in the *Components*. These components encompass
    both the logic to handle the display of view and the view itself. It can contain
    data that it uses to render the state of the app.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS试图从*视图*层解决问题。它可以很好地定义并用作任何*MVC*框架中的*V*。它对如何使用它没有意见。它创建了视图的抽象表示。它在*组件*中分解视图的各个部分。这些组件既包含处理视图显示的逻辑，也包含视图本身。它可以包含用于渲染应用状态的所需数据。
- en: To avoid complexity of interactions and subsequent render processing required,
    React does a full render of the application. It maintains a simple flow of work.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免复杂交互和随后的渲染处理，React会对应用进行完整的渲染。它保持简单的工作流程。
- en: React is founded on the idea that DOM manipulation is an expensive operation
    and should be minimized. It also recognizes that optimizing DOM manipulation by
    hand will result in a lot of *boilerplate* code, which is error-prone, boring,
    and repetitive.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: React基于这样一个理念：DOM操作是一个昂贵的操作，应该尽量减少。它还认识到，手动优化DOM操作将导致大量*样板代码*，这些代码容易出错、无聊且重复。
- en: React solves this by giving the developer a virtual DOM to render to instead
    of the actual DOM. It finds difference between the real DOM and virtual DOM and
    conducts the minimum number of DOM operations required to achieve the new state.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: React通过为开发者提供一个虚拟DOM来渲染，而不是实际的DOM，来解决这一问题。它找出真实DOM和虚拟DOM之间的差异，并执行所需的最小DOM操作以实现新状态。
- en: React is also declarative. When the data changes, React conceptually hits the
    refresh button and knows to only update the changed parts.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: React也是声明式的。当数据发生变化时，React概念上点击刷新按钮，并知道只更新更改的部分。
- en: This simple flow of data, coupled with dead simple display logic, makes development
    with ReactJS straightforward and simple to understand.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简单的数据流，加上极其简单的显示逻辑，使得使用ReactJS进行开发变得直接且易于理解。
- en: Who uses React? If you've used any of the services such as Facebook, Instagram,
    Netflix, Alibaba, Yahoo, E-Bay, Khan-Academy, AirBnB, Sony, and Atlassian, you've
    already come across and used React on the Web.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 谁使用React？如果你使用过Facebook、Instagram、Netflix、阿里巴巴、Yahoo、E-Bay、可汗学院、AirBnB、索尼和Atlassian等任何服务，你已经在Web上遇到过并使用过React。
- en: In just under a year, React has seen adoption from major Internet companies
    in their core products.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在不到一年的时间里，React已经在主要互联网公司的核心产品中得到了采用。
- en: In its first-ever conference, React also announced the development of React
    Native. React Native allows the development of mobile applications using React.
    It transpiles React code to the native application code, such as Objective-C for
    iOS applications.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在其首次会议上，React还宣布了React Native的开发。React Native允许使用React开发移动应用程序。它将React代码转换为原生应用程序代码，例如iOS应用程序的Objective-C。
- en: At the time of writing this, Facebook already uses React Native in its Groups
    and Ads Manager app.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Facebook已经在其群组和广告管理器应用中使用了React Native。
- en: In this book, we will be following a conversation between two developers, Mike
    and Shawn. Mike is a senior developer at Adequate Consulting and Shawn has just
    joined the company. Mike will be mentoring Shawn and conducting pair programming
    with him.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将跟随两位开发者迈克和肖恩之间的对话。迈克是Adequate咨询的高级开发者，肖恩刚刚加入公司。迈克将指导肖恩，并与他进行结对编程。
- en: When Shawn meets Mike and ReactJS
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当肖恩遇到迈克和ReactJS
- en: It's a bright day at Adequate Consulting. Its' also Shawn's first day at the
    company. Shawn had joined Adequate to work on its amazing products and also because
    it uses and develops exciting new technologies.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在Adequate咨询，这是一个晴朗的日子。这也是肖恩在公司第一天。肖恩加入Adequate是为了工作于其惊人的产品，并且因为它使用和开发令人兴奋的新技术。
- en: After onboarding the company, Shelly, the CTO, introduced Shawn to Mike. Mike,
    a senior developer at Adequate, is a jolly man, who loves exploring new things.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在加入公司后，CTO雪莉向肖恩介绍了迈克。迈克是Adequate的高级开发者，他是个乐天的人，喜欢探索新事物。
- en: '"So Shawn, here''s Mike", said Shelly. "He''ll be mentoring you as well as
    pairing with you on development. We follow pair programming, so expect a lot of
    it with him. He''s an excellent help."'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “肖恩，这是迈克，”雪莉说，“他将会指导你，也会与你一起进行开发。我们遵循结对编程，所以和他一起你会有很多这样的机会。他是个极好的帮手。”
- en: With that, Shelly took leave.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 随着这句话，雪莉离开了。
- en: '"Hey Shawn!" Mike began, "are you all set to begin?"'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: “嗨，肖恩！”迈克开始说，“你准备好开始了吗？”
- en: '"Yeah, all set! So what are we working on?"'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: “是的，都准备好了！那么我们在做什么？”
- en: '"Well we are about to start working on an app using [https://openlibrary.org/](https://openlibrary.org/).
    Open Library is collection of the world''s classic literature. It''s an open,
    editable library catalog for all the books. It''s an initiative under [https://archive.org/](https://archive.org/)
    and lists free book titles. We need to build an app to display the most recent
    changes in the record by Open Library. You can call this the **Activities** page.
    Many people contribute to Open Library. We want to display the changes made by
    these users to the books, addition of new books, edits, and so on, as shown in
    the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，我们即将开始开发一个使用[https://openlibrary.org/](https://openlibrary.org/)的应用。Open
    Library是世界经典文学的集合。它是一个面向所有书籍的开放、可编辑的图书馆目录。它是[https://archive.org/](https://archive.org/)下的一个倡议，列出了免费书籍的标题。我们需要构建一个应用来显示Open
    Library记录的最新更改。你可以称之为**活动**页面。许多人向Open Library做出了贡献。我们希望显示这些用户对书籍所做的更改、新增书籍、编辑等，如下面的截图所示：
- en: '![When Shawn meets Mike and ReactJS](img/4730_01_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![当肖恩遇到迈克和ReactJS](img/4730_01_01.jpg)'
- en: '"Oh nice! What are we using to build it?"'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，太好了！我们用它来构建什么？”
- en: '"Open Library provides us with a neat REST API that we can consume to fetch
    the data. We are just going to build a simple page that displays the fetched data
    and format it for display. I''ve been experimenting and using ReactJS for this.
    Have you used it before?"'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: “Open Library为我们提供了一个整洁的REST API，我们可以消费它来获取数据。我们只是将要构建一个简单的页面来显示获取的数据，并对其进行格式化以供显示。我一直在尝试并使用ReactJS来做这件事。你之前用过它吗？”
- en: '"Nope. However, I have heard about it. Isn''t it the one from Facebook and
    Instagram?"'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: “没有。不过，我听说过它。难道不是来自Facebook和Instagram的那个吗？”
- en: '"That''s right. It''s an amazing way to define our UI. As the app isn''t going
    to have much of logic on the server or perform any display, it is an easy option
    to use it."'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: “没错。这是一个定义我们UI的绝佳方式。由于应用在服务器上不会有太多逻辑或执行任何显示，所以使用它是一个简单选择。”
- en: '"As you''ve not used it before, let me provide you a quick introduction."'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: “既然你之前没有使用过，让我给你做一个快速介绍。”
- en: '"Have you tried services such as JSBin and JSFiddle before?"'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '"你之前尝试过JSBin和JSFiddle这样的服务吗？"'
- en: '"No, but I have seen them."'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '"不，但我见过它们。"'
- en: '"Cool. We''ll be using one of these, therefore, we don''t need anything set
    up on our machines to start with."'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '"酷。我们将使用其中之一，因此我们不需要在我们的机器上设置任何东西来开始。"'
- en: '"Let''s try on your machine", Mike instructed. "Fire up [http://jsbin.com/?html,output](http://jsbin.com/?html,output)"'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '"让我们在你的机器上试一试"，迈克指示道。“打开[http://jsbin.com/?html,output](http://jsbin.com/?html,output)”'
- en: '"You should see something similar to the tabs and panes to code on and their
    output in adjacent pane."'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '"你应该会看到类似标签和代码的选项卡以及它们在相邻面板中的输出。"'
- en: '![When Shawn meets Mike and ReactJS](img/4730_01_02.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![当肖恩遇见迈克和ReactJS](img/4730_01_02.jpg)'
- en: '"Go ahead and make sure that the **HTML**, **JavaScript**, and **Output** tabs
    are clicked and you can see three frames for them so that we are able to edit
    HTML and JS and see the corresponding output."'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '"请确保**HTML**、**JavaScript**和**输出**标签被点击，这样我们就可以看到它们的三个框架，以便我们能够编辑HTML和JS并看到相应的输出。"'
- en: '"That''s nice."'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '"很好。"'
- en: '"Yeah, good thing about this is that you don''t need to perform any setups.
    Did you notice the **Auto-run JS** option? Make sure its selected. This option
    causes JSBin to reload our code and see its output so that we don''t need to keep
    saying **Run with JS** to execute and see its output."'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的，这个的好处是您不需要进行任何设置。你注意到**自动运行JS**选项了吗？请确保它被选中。此选项会导致JSBin重新加载我们的代码并查看其输出，这样我们就不需要不断说**用JS运行**来执行并查看其输出了。"'
- en: '"Ok."'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '"好的。"'
- en: Requiring React library
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要React库
- en: '"Alright then! Let''s begin. Go ahead and change the title of the page, to
    say, `React JS Example`. Next, we need to set up and we require the React library
    in our file."'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '"那么，让我们开始吧。请将页面的标题改为`React JS Example`。接下来，我们需要设置，并在我们的文件中需要React库。"'
- en: '"React''s homepage is located at [http://facebook.github.io/react/](http://facebook.github.io/react/).
    Here, we''ll also locate the downloads available for us so that we can include
    them in our project. There are different ways to include and use the library.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '"React的主页位于[http://facebook.github.io/react/](http://facebook.github.io/react/)。在这里，我们也会找到可供我们使用的下载，以便我们可以将它们包含在我们的项目中。有不同方式来包含和使用这个库。"'
- en: We can make use of bower or install via npm. We can also just include it as
    an individual download, directly available from the fb.me domain. There are development
    versions that are full version of the library as well as production version which
    is its minified version. There is also its version of add-on. We'll take a look
    at this later though."
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用bower或通过npm安装。我们也可以直接从fb.me域下载它，作为一个单独的下载。这里有开发版本，它是库的完整版本，以及生产版本，它是其最小化版本。还有一个附加版本。我们稍后会看看这个。"
- en: '"Let''s start by using the development version, which is the unminified version
    of the React source. Add the following to the file header:"'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '"让我们从使用开发版本开始，这是React源代码的非最小化版本。将以下内容添加到文件标题："'
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '"Done".'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '"完成了。"'
- en: '"Awesome, let''s see how this looks."'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '"太棒了，让我们看看这看起来怎么样。"'
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Building our first component
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们的第一个组件
- en: '"So Shawn, we are all set to begin. Let''s build our very first React App.
    Go ahead and add the following code to the JavaScript section of JSBin:"'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '"肖恩，我们已经准备好开始了。让我们构建我们的第一个React应用。请将以下代码添加到JSBin的JavaScript部分："'
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '"Here it is. You should see the output section of the page showing something
    similar to the following:"'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '"这就是它。你应该会看到页面的输出部分显示类似以下的内容："'
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '"Nice Mike. I see that we are making use of this React object to create classes?"'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '"迈克，我注意到我们正在使用这个React对象来创建类？"'
- en: '"That''s right. We are creating, what are called as Components in React."'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '"没错。我们正在创建，在React中被称为组件的东西。"'
- en: '"The entry point to the ReactJS library is the React object. Once the `react.js`
    library is included, it is made available to us in the global JavaScript namespace."'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '"ReactJS库的入口点是React对象。一旦包含了`react.js`库，它就会在全局JavaScript命名空间中对我们可用。"'
- en: '"`React.createClass` creates a component with the given specification. The
    component must implement the render method that returns a single child element
    as follows:"'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '"`React.createClass`创建一个具有给定规范的组件。组件必须实现返回单个子元素的`render`方法，如下所示："'
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: React will take care of calling the render method of the component to generate
    the HTML."
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: React将负责调用组件的`render`方法来生成HTML。
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Even if the render method needs to return a single child, that single child
    can have an arbitrarily deep structure to contain full-fledged HTML page parts.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 即使渲染方法需要返回一个子元素，这个子元素也可以有一个任意深度的结构来包含完整的HTML页面部分。
- en: '"Here, we are making use of `React.createElement` to create our content. It''s
    a singleton method that allows us to create a `div` element with the "`Welcome
    to Adequate, Mike!` contents. `React.createElement` creates a `ReactElement`,
    which is an internal representation of the DOM element used by React. We are passing
    null as the second argument. This is used to pass and specify attributes for the
    element. Right now, we are leaving it as blank to create a simple div."'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '"在这里，我们使用`React.createElement`来创建我们的内容。这是一个单例方法，允许我们创建一个包含"`Welcome to Adequate,
    Mike!`"内容的`div`元素。`React.createElement`创建一个`ReactElement`，这是React使用的DOM元素的内部表示。我们将null作为第二个参数传递。这是用来传递和指定元素属性的。目前，我们将其留空以创建一个简单的`div`。"'
- en: '"The type of `ReactElement` can be either a valid HTML tag name like `span`,
    `div`, `h1` and so on or a component created by `React.createClass` itself."'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '"`ReactElement`的类型可以是有效的HTML标签名，如`span`、`div`、`h1`等，或者是由`React.createClass`本身创建的组件。"'
- en: '"Once we are done creating the component, it can be displayed using the `React.render`
    method as follows:"'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '"一旦我们完成了组件的创建，就可以使用`React.render`方法如下显示它："'
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '"Here, a new `ReactElement` is created for the `App` component that we have
    created previously and it is then rendered into the HTML element—`document.body`.
    This is called the `mountNode`, or mount point for our component, and acts as
    the root node. Instead of passing `document.body` directly as a container for
    the component, any other DOM element can also be passed."'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '"在这里，我们为之前创建的`App`组件创建了一个新的`ReactElement`，然后将其渲染到HTML元素——`document.body`中。这被称为`mountNode`，或我们组件的挂载点，它充当根节点。我们不是直接将`document.body`作为组件的容器传递，任何其他DOM元素也可以传递。"'
- en: '"Mike, go ahead and change the text passed to the div as `Hello React World!`.
    We should start seeing the change and it should look something similar to the
    following:"'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '"迈克，请将传递给`div`的文本更改为`Hello React World!`。我们应该开始看到变化，并且它应该看起来类似于以下内容："'
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '"Nice."'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '"很好。"'
- en: '"Mike, while constructing the first component, we also got an overview of React''s
    top-level API, that is, making use of `React.createClass`, `React.createElement`,
    and `React.render`."'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '"迈克，在构建第一个组件的同时，我们还对React的顶级API有一个概述，即使用`React.createClass`、`React.createElement`和`React.render`。"'
- en: '"Now, the component that we just built to display this hello message is pretty
    simple and straightforward. However, the syntax can get challenging and it keeps
    growing when building complex things. Here''s where JSX comes in handy."'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在，我们刚刚构建的用于显示此问候消息的组件非常简单直接。然而，当构建复杂事物时，语法可能会变得具有挑战性，并且随着构建复杂事物的增长而增长。这就是JSX派上用场的地方。"'
- en: '"JSX?"'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '"JSX吗？"'
- en: '"JSX is an XML-like syntax extension to ECMAScript without any defined semantics.
    It has a concise and familiar syntax with plain HTML and it''s familiar for designers
    or non-programmers. It can also be used directly from our JavaScript file!"'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '"JSX是ECMAScript的XML-like语法扩展，没有定义任何语义。它具有简洁且熟悉的语法，与纯HTML相似，对于设计师或非程序员来说都很熟悉。它也可以直接从我们的JavaScript文件中使用！"'
- en: '"What? Isn''t it bad?"'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '"什么？这不是很糟糕吗？"'
- en: '"Well, time to rethink the best practices. That''s right, we will be bringing
    our view and its HTML in the JavaScript file!"'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '"嗯，是时候重新思考最佳实践了。没错，我们将把视图及其HTML放入JavaScript文件中！"'
- en: '"Let''s see how to start using it. Go ahead and change the contents of our
    JavaScript file as follows:"'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '"让我们看看如何开始使用它。请继续更改我们的JavaScript文件内容如下："'
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '"As you can see, what we did here was that instead of using `createElement`,
    we directly wrote the `div` tag. This is very similar to writing HTML markup directly.
    It also works right out of the JavaScript file."'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '"正如你所见，我们在这里所做的是，我们没有使用`createElement`，而是直接编写了`div`标签。这非常类似于直接编写HTML标记。它也可以直接从JavaScript文件中工作。"'
- en: '"Mike, the code is throwing some errors on JSBin."'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '"迈克，代码在JSBin上抛出了一些错误。"'
- en: '"Oh, right. We need to make use of the JSX transformer library so that React
    and the browser can understand the syntax. In our case, we need to change the
    type of JavaScript, which we are using, to be used to interpret this code. What
    we need to do is change from **JavaScript** to **JSX (React)**, from the dropdown
    on the JavaScript frame header, as follows:"'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '"哦，对了。我们需要使用JSX转换器库，以便React和浏览器可以理解语法。在我们的情况下，我们需要将我们使用的JavaScript类型更改为用于解释此代码的类型。我们需要做的是从JavaScript帧标题的下拉菜单中将类型从**JavaScript**更改为**JSX
    (React)**，如下所示："'
- en: '![Building our first component](img/4730_01_03.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![构建我们的第一个组件](img/4730_01_03.jpg)'
- en: '"That should do it."'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '"这就完成了。"'
- en: '"Looks good, Mike. It''s working."'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '"看起来不错，迈克。它正在工作。"'
- en: '"Now you will see something similar to the following:"'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在你将看到以下类似的内容："'
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Back to work
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '"回到工作状态"'
- en: '"That''s good to start, Shawn. Let''s move back to the task of building our
    app using Open Library''s Recent changes API now. We already have a basic prototype
    ready without using ReactJS."'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '"We will be slowly replacing parts of it using ReactJS."'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '"This is how the information is displayed right now, using server-side logic,
    as follows:"'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '![Back to work](img/4730_01_04.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: '"First task that we have is to display the information retrieved from the Open
    Library Recent Changes API in a table using ReactJS similar to how it''s displayed
    right now using server-side."'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '"We will be fetching the data from the Open Library API similar to the following:"'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '"Let''s use this to prototype our app for now. Before that, let''s take a look
    at the simple HTML version of this app. In our `React.render` method, we start
    returning a table element, as follows:"'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '"This should start displaying our table with three rows. Now, go ahead and
    add a heading at top of this table from the `React App`, as follows:"'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '"There, something like that?" asked Shawn. "Oh, that didn''t work."'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '"That''s because React expends our render method to always return a single
    HTML element. In this case, after you added the `h1` heading, our app started
    returning two elements, which is wrong. There''ll be many cases when you will
    come across this. To avoid this, just wrap the elements in a `div` or `span` tag.
    The main idea is that we just want to return a single element from the render
    method."'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it. Something like this?"'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Displaying static data
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Awesome! Looks good. Now, let''s change our table that is displaying static
    information, to start fetching and displaying this information in the rows from
    the JSON data that we had before."'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '"We''ll define this data in the render method itself and see how we would be
    using it to create our table. We''ll basically just be looping over the data and
    creating elements, that is, table rows in our case, for the individual data set
    of events. Something like this:"'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '"Notice how we are using `{}` here. `{}` is used in JSX to embed dynamic information
    in our view template. We can use it to embed the JavaScript objects in our views,
    for example, the name of a person or heading of this table. As you can see, what
    we are doing here is using the `map` function to loop over the dataset that we
    have. Then, we are returning a table row, constructed from the information available
    from the row object – the details about when the event was created, who created
    it and event description."'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '"We are using JSX syntax here to construct the rows of table. However, it is
    not used as the final return value from render function."'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '"That''s correct, Shawn. React with JSX allows us to arbitrarily create elements
    to be used in our views, in our case, creating it dynamically from the dataset
    that we have. The rows variable now contains a part of view that we had used at
    a different place. We can also build another component of the view on top of it."'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '"That''s the beauty of it. React allows us to dynamically create, use, and
    reuse the parts of views. This is helpful to build our views, part by part, in
    a systematic way."'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '"这就是它的美妙之处。React 允许我们动态创建、使用和重用视图的部分。这有助于我们以系统化的方式，部分由部分地构建视图。"'
- en: '"Now, after we are done with building our rows, we can use them in our final
    render call."'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在，在我们完成行的构建后，我们可以在最终的渲染调用中使用它们。"'
- en: '"So now, the return statement will look something similar to the following:"'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '"所以现在，返回语句将看起来类似于以下内容："'
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '"Here''s how the complete render method now looks after building up rows with
    static data:"'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '"下面是如何在构建了静态数据行之后，现在看起来完整的渲染方法："'
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Displaying static data](img/4730_01_05.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![显示静态数据](img/4730_01_05.jpg)'
- en: '"That''s starting to look like where we want to reach."'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '"这开始看起来像是我们要达到的地方。"'
- en: Passing data to components
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传递数据到组件
- en: '"Do we define our data and everything else in the render method?"'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们在渲染方法中定义数据和所有其他内容吗？"'
- en: '"I was just getting to that. Our component should not contain this information.
    The information should be passed as a parameter to it."'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '"我正要说到这一点。我们的组件不应该包含这些信息。信息应该作为参数传递给它。"'
- en: '"React allows us to pass the JavaScript objects to components. These objects
    would be passed when we call the `React.render` method and create an instance
    of the `<App>` component. The following is how we can pass objects to it:"'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '"React 允许我们将 JavaScript 对象传递给组件。这些对象会在我们调用 `React.render` 方法并创建 `<App>` 组件实例时传递。以下是如何向其传递对象的方法："'
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '"Notice how are using the `<App/>` syntax here, instead of `createElement`.
    As I mentioned previously, we can create elements from our components and represent
    them using JSX as done earlier."'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '"注意这里我们使用的是 `<App/>` 语法，而不是 `createElement`。正如我之前提到的，我们可以从我们的组件中创建元素，并使用 JSX
    来表示，就像之前做的那样。"'
- en: '[PRE17]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '"The preceding code becomes the following:"'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '"前面的代码变成了以下内容："'
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '"That looks even more cleaner", said Shawn.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '"看起来更整洁了"，肖恩说。'
- en: '"As you can see, we are passing the title for our table as the `title` parameter,
    followed by the contents of the title. React makes this data passed to the component
    as something called `props`. The `props`, short for properties, are a component''s
    configuration options that are passed to the component when initializing it."'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '"正如你所见，我们正在将表格的标题作为 `title` 参数传递，然后是标题的内容。React 将传递给组件的数据称为 `props`。`props`
    是组件的配置选项，在初始化组件时传递给组件。"'
- en: '"These `props` are just plain JavaScript objects. They are made accessible
    to us within our component via the `this.props` method. Let''s try accessing this
    from the `render` method, as follows:"'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '"这些 `props` 只是普通的 JavaScript 对象。它们通过 `this.props` 方法使我们能够访问。让我们尝试从 `render`
    方法中访问它，如下所示："'
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '"That should start logging the title that we passed to the component to the
    console."'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '"这应该会将我们传递给组件的标题记录到控制台。"'
- en: '"Now, let''s try to abstract the headings as well as the JSON data out of the
    `render` method and start passing them to the component, as follows:"'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在，让我们尝试将标题以及 JSON 数据从 `render` 方法中抽象出来，并开始将它们传递给组件，如下所示："'
- en: '[PRE20]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '"There. We pulled the data out of the `render` method and are now passing it
    to our component."'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '"看这里。我们已经从 `render` 方法中提取了数据，现在正在将其传递给我们的组件。"'
- en: '"We defined the dynamic headers for our table that we will start using in the
    component."'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们为我们的表格定义了动态标题，我们将在组件中使用它。"'
- en: '"Here the curly braces, used to pass the parameters to our component, are used
    to specify the JavaScript expressions that will be evaluated and then used as
    attribute values."'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '"在这里，用于传递参数的大括号被用来指定将被评估并用作属性值的 JavaScript 表达式。"'
- en: '"For example, the preceding JSX code will get translated into JavaScript by
    React, as follows:"'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '"例如，前面的 JSX 代码将被 React 转换为 JavaScript，如下所示："'
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '"We will revisit `props` later. However, right now, let''s move on to complete
    our component."'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们稍后会重新访问 `props`。然而，现在，让我们继续完成我们的组件。"'
- en: '"Now, using the passed data and headings via `props`, we need to generate the
    table structure in the app''s `render` method."'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在，使用通过 `props` 传递的数据和标题，我们需要在应用程序的 `render` 方法中生成表格结构。"'
- en: '"Let''s generate the headings first, as follows:"'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '"让我们首先生成标题，如下所示："'
- en: '[PRE22]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '"Notice, how we are using `this.props.headings` to access the passed information
    about headings. Now let''s create rows of the table similar to what we were doing
    earlier:"'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '"注意，我们是如何使用 `this.props.headings` 来访问传递的标题信息的。现在让我们创建与之前类似的表格行："'
- en: '[PRE23]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '"Finally, let''s put the headings and rows together in our table."'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '"最后，让我们在我们的表格中将标题和行组合起来。"'
- en: '[PRE24]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '"The table is now displayed with the passed dynamic headers and JSON data."'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在表格显示的是传递的动态标题和JSON数据。"'
- en: '"The headings can be changed to `["Last change at", "By Author", "Summary"]`
    and the table in our view will get updated automatically."'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '"标题可以改为 `["最后更改时间", "作者", "摘要"]`，我们视图中的表格将自动更新。"'
- en: '"Alright, Shawn, go ahead and add a title to our table. Make sure to pass it
    from the props."'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '"好吧，肖恩，给我们的表格加一个标题吧。确保从props中传递它。"'
- en: '"Ok," said Shawn.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '"好的，” 肖恩说。'
- en: '"Now, the render method will be changed to the following:"'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在，渲染方法将变为以下形式："'
- en: '[PRE25]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '"While the call to `React.render` will change to the following:"'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '"当调用 `React.render` 时，将变为以下形式："'
- en: '[PRE26]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '"Awesome. You are starting to get a hang of it. Let''s see how this looks in
    completion shall we?"'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '"太棒了。你开始上手了。让我们看看完成后的效果怎么样，好吗？"'
- en: '[PRE27]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '"We should again start seeing something as follows:"'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们再次开始看到以下内容："'
- en: '![Passing data to components](img/4730_01_06.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![向组件传递数据](img/4730_01_06.jpg)'
- en: '"Here we have it, Shawn. Our very first component using React!", said Mike.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '"这里就是了，肖恩。我们用React做的第一个组件！" 迈克说。'
- en: '"This looks amazing. I can''t wait to try out more things in React!", exclaimed
    Shawn.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '"这看起来太棒了。我迫不及待想尝试React中的更多功能！" 肖恩兴奋地喊道。'
- en: Summary
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started with React and built our first component. In the
    process, we studied the top-level API of React to construct components and elements.
    We used JSX to construct the components. We saw how to display static information
    using React and then gradually replaced all the static information with dynamic
    information using props. In the end, we were able to tie all ends together and
    display mock data in the format that is returned from Open Library's Recent Changes
    API using React.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从React开始，构建了我们的第一个组件。在这个过程中，我们学习了React的顶级API来构建组件和元素。我们使用JSX来构建组件。我们看到了如何使用React显示静态信息，然后逐渐用props将所有静态信息替换为动态信息。最后，我们能够将所有环节串联起来，使用React以Open
    Library的最近更改API返回的格式显示模拟数据。
- en: In the next chapter, we will dive deep into JSX internals and continue building
    our application for Recent Changes API.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨JSX的内部机制，并继续为最近更改API构建我们的应用程序。
