["```js\n    firebase target:apply hosting <micro-app-name> <firebase-site-name\n    ```", "```js\n    \"build:all\": \"nx run-many --target=build\"\n    ```", "```js\n      remotes: [\n        ['catalog', 'https://ebuy-catalog.web.app/'],\n        ['checkout', 'https://ebuy-checkout.web.app/'],\n        ['store', 'https://ebuy-datastore.web.app/'],\n      ]\n    ```", "```js\n    //apps/catalog/project.json\n     . . .\n    \"vendorChunk\": false,\n      \"webpackConfig\": \"apps/catalog/webpack.config.prod.js\"\n            },\n    //apps/checkout/project.json\n     . . .\n    \"vendorChunk\": false,\n      \"webpackConfig\": \"apps/checkout/webpack.config.prod.js\"\n            },\n    ```", "```js\n      remotes: [\n        ['recommendations', 'https://ebuy-recommendations.web.app/'],\n      ],\n    ```", "```js\n      remotes: [\n        [‘store’, 'https://ebuy-datastore.web.app/'],\n      ],\n    ```", "```js\n      remotes: [\n        [‘store’, 'https://ebuy-datastore.web.app/'],\n      ],\n    ```", "```js\n {\n  \"hosting\": [\n    {\n      \"target\": \"app-shell\",\n      \"public\": \"dist/apps/app-shell\",\n      \"ignore\": [\"firebase.json\", \"**/.*\", \"**/node_modules/**\"],\n      \"rewrites\": [\n        {\n          \"source\": \"**\",\n          \"destination\": \"/index.html\"\n        }\n      ]\n    }\n    {\n      \"target\": \"catalog\",\n      \"public\": \"dist/apps/catalog\",\n      \"ignore\": [\"firebase.json\", \"**/.*\", \"**/node_modules/**\"],\n      \"rewrites\": [\n        {\n          \"source\": \"**\",\n          \"destination\": \"/index.html\"\n        }\n      ]\n    },\n    {\n      \"target\": \"checkout\",\n      \"public\": \"dist/apps/checkout\",\n      \"ignore\": [\"firebase.json\", \"**/.*\", \"**/node_modules/**\"],\n      \"rewrites\": [\n        {\n          \"source\": \"**\",\n          \"destination\": \"/index.html\"\n        }\n      ]\n    },\n    {\n      \"target\": \"recommendations\",\n      \"public\": \"dist/apps/recommendations\",\n      \"ignore\": [\"firebase.json\", \"**/.*\", \"**/node_modules/**\"],\n      \"rewrites\": [\n        {\n          \"source\": \"**\",\n          \"destination\": \"/index.html\"\n        }\n      ],\n    },\n    {\n      \"target\": \"store\",\n      \"public\": \"dist/apps/store\",\n      \"ignore\": [\"firebase.json\", \"**/.*\", \"**/node_modules/**\"],\n      \"rewrites\": [\n        {\n          \"source\": \"**\",\n          \"destination\": \"/index.html\"\n        }\n      ]\n    }\n  ]\n}\n```", "```js\nfirebase deploy --only hosting\n```", "```js\n      \"headers\": [\n        {\n          \"source\": \"**/*.@(eot|otf|ttf|ttc|woff||woff2|js|font.css|remoteEntry.js)\",\n          \"headers\": [\n            {\n              \"key\": \"Access-Control-Allow-Origin\",\n              \"value\": \"https://ebuy-app-shell.web.app\"\n            }\n          ]\n        }\nhttps://ebuy-app-shell.web.app.\n\t\t\tNote that we need to add the headers array for every target app defined within the `firebase.json` file.\n\t\t\tRerun `firebase deploy --only hosting` and now, you should be able to view all the sites working on `https://ebuy-app-shell.web-app/`.\n\t\t\tDeploying only the selected target\n\t\t\tCurrently, the `firebase` command deploys all the micro-apps. If we wanted to deploy only one of the micro apps, we’d simply need to pass the target name as an argument:\n\n```", "```js\n\n\t\t\tSo, if we wanted to deploy only `app-shell`, our command would look as follows:\n\n```", "```js\n\n\t\t\tThis will be critical in the next section.\n\t\t\tLooking back at this section, we were able to deploy our apps to Firebase, and we also managed to fix the CORSs issue by setting `Access-Control-Allow-Origin` headers. We also saw the CLI syntaxes that allow us to deploy only the apps that we need.\n\t\t\tIn the next section, we will use these CLI commands in combination with another nifty command from Nx to control and deploy only the apps that changed.\n\t\t\tDeploying only Micro Apps that changed\n\t\t\tTo be able to deploy only the micro apps that have been impacted by modifications to a file, we basically need to be able to do two things:\n\n\t\t\t\t1.  Identify which apps have been impacted due to changes to a given set of files\n\t\t\t\t2.  Only build and deploy the micro-apps that have been impacted\n\n\t\t\tFor the second point, from the previous section, we now know how to let the Firebase CLI know which micro-app we would like to be deployed. We will look at how to achieve the first point in the next subsection.\n\t\t\tNX Affected\n\t\t\tThe NX dev tools come with a handy command called `nx affected`, which is able to keep track of what files changed from the previous commit and highlight the apps that have been impacted due to the changes to these files.\n\t\t\tThis is a nifty feature that can be used for various purposes, such as speeding up the execution of tests by running unit tests or build commands only against projects that have been impacted by changes to certain files – or, in our case, deploying only the micro-apps that have changed.\n\t\t\tTo give it a quick try, run `git add.`  and `git commit` to commit all the changes we have made so far. Try and make a small visual change to `apps/app-shell/src/app/app.tsx`. Save the file and run the following command:\n\n```", "```js\n\n\t\t\tIt should print out `app-shell` as the app that was modified. Now, try and make changes to `libs/mocks/src/lib/product-list-mocks.tsx` and run the same command. You will see the catalog and checkout apps also added to the list of apps that are affected.\n\t\t\tThe way the `nx affected` command works is by comparing the difference between the SHAs of the main branch and the current `HEAD`. You can pass in additional parameters to the affected command to compare the difference between any base and head and run a command passed to the target flag:\n\n```", "```js\n\n\t\t\t`--target` is the custom command to run, `--base` is the base you want to compare against, and `--head` is the tip of your Git branch.\n\t\t\tThis will probably return a message saying **Nx successfully ran target deploy on 0 projects**. This is because we haven’t created our custom deploy command yet.\n\t\t\tTo get a deeper understanding of the various options for `nx affected`, have a read here: [https://nx.dev/nx/affected#affected](https://nx.dev/nx/affected#affected).\n\t\t\tIn addition to affected, you may also find the `nx graph` command useful for getting a nice, visual representation of the various micro-apps consuming the different shared components and utilities form the `libs` folder.\n\t\t\tTry running `pnpm nx affected:dep-graph` to get a visual graph of how the modified files impact the micro-apps.\n\t\t\tHere is an example of how changes to the `libs/mocks/src/lib/product-list-mocks.tsx` file impact both the catalog and checkout apps, because both these apps import the product list from the `product-list-mocks` file:\n\t\t\t![Figure 7.3 – nx affected:dep-graph highlighting the projects impacted due to a change in mocks](img/Figure_7.03_B18987.jpg)\n\n\t\t\tFigure 7.3 – nx affected:dep-graph highlighting the projects impacted due to a change in mocks\n\t\t\tNote\n\t\t\tnx graph or nx affected doesn’t take into account the host and remote features of module federation.\n\t\t\tCreating an Nx custom command executor to deploy\n\t\t\tExecutors in Nx allow you to create custom script commands for a project, which you can run via the Nx command system.\n\t\t\tPlease do take the time to read more about Nx custom command executors here: [https://nx.dev/recipes/executors/run-commands-executor#3.-run-the-command](https://nx.dev/recipes/executors/run-commands-executor#3.-run-the-command).\n\t\t\tLet's create a custom command to deploy an individual micro app.\n\t\t\tIn `apps/app-shell/project.json`, add the following code within the target attribute:\n\n```", "```js\n\n\t\t\tAdd the deploy custom command to each of the micro-app’s `project.json` files. Pass the correct micro-app name in the argument.\n\t\t\tOnce that is done, try making a small change in the mocks file and run the following two commands:\n\n```", "```js\n\n\t\t\tAssuming Nx has detected the difference correctly, it will only build the catalog and checkout apps and you will also notice that these are the only two apps that deployed to Firebase.\n\t\t\tYou can verify that by going into Firebase Console’s hosting dashboard and checking the timestamp of when the apps were last deployed:\n\t\t\t![Figure 7.4 – Firebase Console displaying the deployed timestamp of modified apps](img/Figure_7.04_B18987.jpg)\n\n\t\t\tFigure 7.4 – Firebase Console displaying the deployed timestamp of modified apps\n\t\t\tNavigate to [https://ebuy-app-shell.web-app/](https://ebuy-app-shell.web-app/) (use the correct URL as displayed in your Firebase Console) and verify that everything continues to work fine and that the changes you’ve made reflect on the app. You may need to do a hard reload on your browser to view the updates.\n\t\t\tAnd with this, we’ve successfully managed to deploy only the apps that have changed while ensuring that the rest of the app works as expected.\n\t\t\tSummary\n\t\t\tWith that, we come to the end of this chapter, where we learned about static storage hosting and why it is ideal for deploying and serving client-side-rendered React apps. We saw how to build production bundles for our module-federated micro app. We then saw how to set up a multi-site project in Firebase and used Firebase CLI commands to deploy our apps. We also saw how to address CORS issues by setting the right header values for the `Access-Control-Allow-Origin` header, and then finally, we saw how to combine the `nx affected` command and Firebase’s `hosting:<app-name>` command to detect the micro-apps that have been impacted by a change and only build and deploy them to Firebase. We also used this as an opportunity to create a custom command executor to deploy these affected apps.\n\t\t\tIn the next chapter, we will go deeper into DevOps and cloud territory by seeing how to deploy our microfrontends to a managed Kubernetes cluster.\n\n```"]