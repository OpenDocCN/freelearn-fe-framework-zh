- en: '*Chapter 5*: Working with Images'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第五章*：与图片一起工作'
- en: In this chapter, you will master the art of adding images to your Gatsby site.
    First, we will learn a little about the history of images on the web, before understanding
    why importing images is not as easy you might think. We will then move on to creating
    images that progressively load in and are performant.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将掌握将图片添加到你的 Gatsby 网站中的技巧。首先，我们将简要了解网络图片的历史，然后理解为什么导入图片并不像你想象中那么简单。接下来，我们将学习创建渐进式加载且性能优异的图片。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Images on the web
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络上的图片
- en: The `StaticImage` component
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StaticImage` 组件'
- en: The `GatsbyImage` component
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GatsbyImage` 组件'
- en: Overriding the `gatsby-plugin-image` defaults
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 覆盖 `gatsby-plugin-image` 的默认设置
- en: Sourcing images from CMS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 CMS 获取图片
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this chapter, you will need to have completed [*Chapter 3*](B15983_03_ePub_RK.xhtml#_idTextAnchor057),
    *Sourcing and Querying Data (from Anywhere!)*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章，你需要完成 [*第三章*](B15983_03_ePub_RK.xhtml#_idTextAnchor057)，*从任何地方获取和查询数据*。
- en: The code for this chapter can be found at [https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter05](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter05).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在 [https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter05](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter05)
    找到。
- en: Images on the web
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络上的图片
- en: When was the last time you visited a website without any images? You might be
    thinking that this is a hard question to answer. Images are a critical part of
    websites and our browsing experience. We use images for logos, products, profiles,
    and marketing to convey information, entice, or excite through a visual medium.
    While images are great for these use cases (and many more!), they are the single
    largest contributor to page size. According to the HTTP Archive ([https://httparchive.org/](https://httparchive.org/)),
    the median page size on desktops is 2,124 KB. Images make up 973 KB of this size,
    which is roughly 45% of the total page size.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你上次访问没有任何图片的网站是什么时候？你可能觉得这是一个很难回答的问题。图片是网站和我们的浏览体验的关键部分。我们使用图片来展示标志、产品、个人资料和营销，通过视觉媒介传达信息、吸引或激发情感。虽然图片在这些用例（以及更多用例）中非常出色，但它们是页面大小最大的单一贡献者。根据
    HTTP Archive ([https://httparchive.org/](https://httparchive.org/))，桌面上的平均页面大小为
    2,124 KB。图片占用了 973 KB 的空间，大约占总页面大小的 45%。
- en: As images are so integral to our browsing experience, we cannot do away with
    them. But when they account for so much of the page size, we should be doing everything
    in our power to ensure that they are optimized, accessible, and as performant
    as possible. Newer versions of browsers (including Chrome) have **responsive image**
    capabilities built into them. Instead of providing a single source for the image,
    the browser can accept a source set. The browser uses this set to load an image
    at a different size, depending on the size of the device. This ensures the browser
    never loads images that are too big for the space available. Another way in which
    developers can optimize images, specifically in React, is with **lazy loading**.
    Lazy loading is the process of deferring the load of your images until a later
    point in time. This could be after the initial load, or when they specifically
    become visible on the screen. Using this technique, you can improve your site's
    speed, better utilize a device's resources, and reduce a user's data consumption.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于图片对我们浏览体验的至关重要性，我们无法摒弃它们。但当它们占据了页面大小的很大一部分时，我们应该尽我们所能确保它们得到优化、可访问，并且尽可能高效。较新版本的浏览器（包括
    Chrome）内置了 **响应式图片** 功能。浏览器不再提供单个图片源，而是可以接受一个源集。浏览器使用这个集来根据设备的大小加载不同尺寸的图片。这确保浏览器永远不会加载比可用空间大的图片。开发者可以通过
    **懒加载** 来优化图片，特别是在 React 中。懒加载是将图片的加载推迟到稍后的时间点的过程。这可能是初始加载之后，或者当它们在屏幕上变得可见时。使用这种技术，你可以提高你网站的速度，更好地利用设备的资源，并减少用户的流量消耗。
- en: Images in Gatsby
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gatsby 中的图片
- en: Manually creating high-performance sites that contain lazy-loaded images is
    a project in itself. Luckily, Gatsby has a plugin that takes the pain away when
    you're generating responsive, optimized images – `gatsby-plugin-image`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 手动创建包含懒加载图片的高性能网站本身就是一个项目。幸运的是，Gatsby 有一个插件，当你生成响应式、优化后的图片时，它可以减轻你的痛苦——`gatsby-plugin-image`。
- en: 'This plugin contains two React image components with specific features aimed
    at creating a better user experience when using images, both for the developer
    and the site visitor:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件包含两个具有特定功能的React图像组件，旨在在使用图像时为开发者和网站访客提供更好的用户体验：
- en: Loads the correct image for the device viewing the site.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载设备查看网站的正确图像。
- en: Reduces cumulative layout shift by holding the position of the image while it
    is loading.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图像加载时保持其位置，从而减少累积布局偏移。
- en: Uses a lazy loading strategy to speed up the initial load time of your site.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用懒加载策略来加快网站初始加载时间。
- en: Has multiple options for placeholder images that appear while the image is loading.
    You can make the images blur up or use a traced **Scalable Vector Graphics** (**SVG**)
    of the image in its place.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图像加载时提供了多个占位符图像选项。你可以使图像模糊，或者使用图像的**可缩放矢量图形**（**SVG**）作为替代。
- en: Supports new image formats such as **WebP** if the browser can support it.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果浏览器支持，支持新的图像格式，如**WebP**。
- en: In the next section, we will begin looking at the first of the two image components
    in this chapter – the `StaticImage` component.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将开始探讨本章的两个图像组件中的第一个——`StaticImage`组件。
- en: The StaticImage component
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`StaticImage`组件'
- en: '`StaticImage` is best used when an image will always remain the same. It could
    be your site logo, which is the same across all pages, or a profile photo that
    you use at the end of blog posts, or a home page hero section, or anywhere else
    where the image is not required to be dynamic.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当图像始终保持不变时，`StaticImage`组件使用最佳。它可能是你的网站标志，它在所有页面上都是相同的，或者是在博客文章末尾使用的个人照片，或者是在主页的英雄部分，或者在任何不需要动态图像的地方。
- en: Unlike most React components, the `StaticImage` component has some limitations
    on how you can pass the props to it. It will not accept and use any of its parents'
    props. If you are looking for this functionality, you will want to use the `GatsbyImage`
    component.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数React组件不同，`StaticImage`组件在传递props时有某些限制。它不会接受和使用其父组件的任何props。如果你需要这种功能，你将想要使用`GatsbyImage`组件。
- en: 'To get an understanding of how we utilize the `StaticImage` component, we will
    implement an image on the hero of our home page:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解我们如何利用`StaticImage`组件，我们将在主页的英雄部分实现一个图像：
- en: Create an `assets` folder next to your `src` folder. To keep things organized,
    it is good practice to keep images away from your source code. We will use the
    `assets` folder to house any visual assets.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`src`文件夹旁边创建一个`assets`文件夹。为了保持整洁，将图像与源代码分开是一个好的做法。我们将使用`assets`文件夹来存放任何视觉资产。
- en: Create a folder within `assets` called `images`. We will use this folder to
    store the visual assets of the `image` type.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`assets`文件夹内创建一个名为`images`的文件夹。我们将使用这个文件夹来存储图像类型的视觉资产。
- en: Add an image to your `images` folder. The image file type must be in `.png`,
    `.jpg`, `.jpeg`, `.webp`, or `.avif` format.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`images`文件夹中添加一个图像。图像文件类型必须是`.png`、`.jpg`、`.jpeg`、`.webp`或`.avif`格式。
- en: 'Install `gatsby-plugin-image` and its dependencies:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`gatsby-plugin-image`及其依赖项：
- en: '[PRE0]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These dependencies spawn other node processes and may take a little longer to
    install compared to our previous installs.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些依赖项会生成其他node进程，与之前的安装相比，可能需要更长的时间来安装。
- en: 'Update your `gatsby-config.js` file so that it includes the three new dependencies:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新你的`gatsby-config.js`文件，使其包含三个新的依赖项：
- en: '[PRE1]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Import the `StaticImage` component into your `index.js` file:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`StaticImage`组件导入到你的`index.js`文件中：
- en: '[PRE2]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use the `StaticImage` component within the render on the page:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面的渲染中使用`StaticImage`组件：
- en: '[PRE3]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `src` prop should be the relative path to the image from the current file,
    *not* the root directory.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`src`属性应该是从当前文件到图像的相对路径，*不是*根目录。'
- en: 'Modify the image that''s rendered via props:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过props修改通过渲染的图像：
- en: '[PRE4]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s look at these props in detail:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们详细看看这些props：
- en: '`src`: This prop is the relative path to the image from the current file.'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`：此属性是从当前文件到图像的相对路径。'
- en: '`alt`: As you would with a normal `img` tag, be sure to include an `alt` prop
    with text describing the image so that your image remains accessible.'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alt`：就像使用正常的`img`标签一样，确保包含一个带有描述图像的`alt`属性，以便你的图像保持可访问性。'
- en: '`Placeholder`: This prop tells the component what to display while the image
    is loading. Here, we have set it to `tracedSVG`, which uses a placeholder SVG
    (created by tracing the image) to fill the gap where the image will load in, but
    also gives the user a sense of the shape of whatever is in the photo. Other options
    include `blurred`, `dominantColor`, and `none`.'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Placeholder`：这个属性告诉组件在图像加载时显示什么。在这里，我们将其设置为`tracedSVG`，它使用由追踪图像创建的占位符SVG来填充图像将加载的位置，同时也给用户一个关于照片中形状的感觉。其他选项包括`blurred`、`dominantColor`和`none`。'
- en: '`layout`: This prop determines the size of images that are produced as the
    output by the plugin and their resizing. Here, we have set it to `fixed` – this
    suggests that the image will be at a consistent size when it renders. Other layout
    options include `constrained`, which takes a maximum height or width and can scale
    down, and `fullWidth`, which will also resize to fit the container but is not
    restricted to the maximum height or width.'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layout`：这个属性决定了插件输出图像的大小及其缩放。在这里，我们将其设置为`fixed`——这意味着图像在渲染时将保持一致的大小。其他布局选项包括`constrained`，它接受最大高度或宽度并可以缩小，以及`fullWidth`，它也会缩放以适应容器，但不受最大高度或宽度的限制。'
- en: '`width` and `height`: We can use these props to specify the width and height
    of the image.'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`width`和`height`：我们可以使用这些属性来指定图像的宽度和高度。'
- en: Tip
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: '`StaticImage` can also take a remote source as its `src` prop. Any images that
    are specified as URLs will be downloaded at build time and then resized. Using
    remote images instead of local images is a great way to keep your repository small,
    but it should also be remembered that Gatsby does not know when that image changes
    if it is outside of your repository. If the image is changed on the remote server,
    it will only update when you rebuild your project.'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`StaticImage`也可以将其`src`属性作为远程源。任何指定为URL的图像将在构建时下载并缩放。使用远程图像而不是本地图像是保持你的存储库小的一种好方法，但应该记住，如果图像在存储库之外，Gatsby并不知道该图像何时发生变化。如果远程服务器上的图像被更改，它只有在重新构建你的项目时才会更新。'
- en: Now that we understand how to utilize the `StaticImage` component, let's turn
    our attention to the other half of `gatsby-plugin-image` and learn about the `GatsbyImage`
    component.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何利用`StaticImage`组件，让我们将注意力转向`gatsby-plugin-image`的另一部分，并了解`GatsbyImage`组件。
- en: The GatsbyImage component
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GatsbyImage组件
- en: If ever you need to use dynamic images, such as those embedded in your Markdown
    content, then you can use the `GatsbyImage` component.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要使用动态图像，例如嵌入在Markdown内容中的图像，那么你可以使用`GatsbyImage`组件。
- en: 'Let''s add hero images to our Markdown/MDX blog posts using the `GatsbyImage`
    component:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`GatsbyImage`组件为我们的Markdown/MDX博客文章添加英雄图像：
- en: 'Install the `gatsby-transformer-sharp` npm package:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`gatsby-transformer-sharp` npm包：
- en: '[PRE5]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Add some images to `assets/images` that you would like to use as covers for
    your blog posts – one per blog post.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一些图像添加到`assets/images`中，用作你博客文章的封面——每篇文章一个。
- en: 'Update your `Gatsby-config.js` file so that it includes your `assets` source:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新你的`Gatsby-config.js`文件，使其包含你的`assets`源：
- en: '[PRE6]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Unlike `StaticImage`, `GatsbyImage` requires that images are ingested into our
    data layer. We can use the `gatsby-source-filesystem` plugin to achieve this,
    but by giving it the path to our images.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与`StaticImage`不同，`GatsbyImage`要求图像被摄入我们的数据层。我们可以使用`gatsby-source-filesystem`插件来实现这一点，但需要提供我们图像的路径。
- en: 'For each blog post, modify the post file''s `frontmatter` so that it includes
    a `hero` key that contains the relative path to the image:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每篇博客文章，修改文章文件的`frontmatter`，使其包含一个包含图像相对路径的`hero`键：
- en: '[PRE7]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the `GatsbyImage` component and the `getImage` function as imports, at
    the top of the `src/templates/blog-page.js` file:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/templates/blog-page.js`文件的顶部添加`GatsbyImage`组件和`getImage`函数作为导入：
- en: '[PRE8]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Modify the file''s page query to reference the new images:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改文件的页面查询以引用新的图像：
- en: '[PRE9]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Use the new data within the `data` prop to get the image within the component:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`data`属性中的新数据来获取组件内的图像：
- en: '[PRE10]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Render your image within your `return` statement:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`return`语句中渲染你的图像：
- en: '[PRE11]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Start or restart your development server and admire your hard work. Navigate
    to one of the blog posts and you should see your image blur in gracefully.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动或重新启动你的开发服务器，欣赏你的辛勤工作。导航到一篇博客文章，你应该会看到你的图像优雅地模糊。
- en: Further Exercise
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步练习
- en: We've learned how to add images to our blog pages, so why not use what you have
    learned to add a smaller version of the same image to the blog preview page? An
    implementation can be found in this book's GitHub repository ([https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-3/tree/main/Chapter05](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-3/tree/main/Chapter05))
    if you want to see how it can be achieved.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们已经学会了如何将图像添加到我们的博客页面，那么为什么不利用你所学的知识，将同一图像的较小版本添加到博客预览页面呢？如果您想了解如何实现，可以在本书的GitHub存储库中找到实现方法（[https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-3/tree/main/Chapter05](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-3/tree/main/Chapter05)）。
- en: You might find yourself adding the same configuration to your images across
    the whole site. Let's find out how we can use the defaults to keep our code in
    **Don't Repeat Yourself** (**DRY**) form.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会发现自己需要在整个网站上的图像中添加相同的配置。让我们找出我们如何使用默认值来保持我们的代码以**不要重复自己**（**DRY**）的形式。
- en: Overriding the gatsby-plugin-image defaults
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 覆盖gatsby-plugin-image默认值
- en: 'To create a consistent look and feel, you may have included the same props
    with many instances of the two image components. Keeping these image components
    updated can be a monotonous task if your site is image-heavy. Instead, you could
    configure the defaults within the options of `gatsby-plugin-sharp`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持一致的外观和感觉，你可能已经在两个图像组件的许多实例中包含了相同的道具。如果你的网站图片很多，保持这些图像组件更新可能是一项单调的任务。相反，你可以在`gatsby-plugin-sharp`的选项中配置默认值：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s look at each of these options in detail:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看这些选项：
- en: '`formats`: The file formats generated by the plugin.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`formats`：插件生成的文件格式。'
- en: '`placeholder`: Overrides the style of the temporary image.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`placeholder`：覆盖临时图像的样式。'
- en: '`quality`: The default image quality that''s created.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quality`：创建的默认图像质量。'
- en: '`breakpoints`: The widths to use for full-width images. It will never create
    an image with a width that''s longer than the source.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`breakpoints`：用于全宽图像的宽度。它永远不会创建一个宽度超过源图像的图像。'
- en: '`backgroundColor`: The default background color of the images.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backgroundColor`：图像的默认背景颜色。'
- en: '`tracedSVGOptions` and `blurredOptions`: The default options to use for placeholder
    image types in the case that these are different from the global defaults.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tracedSVGOptions`和`blurredOptions`：在占位符图像类型与全局默认值不同的情况下，用于占位符图像类型的默认选项。'
- en: '`jpgOptions`, `pngOptions`, `webpOptions`, and `avifOptions`: The default options
    to use for image types in the case that these are different from the global defaults.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jpgOptions`、`pngOptions`、`webpOptions`和`avifOptions`：在占位符图像类型与全局默认值不同的情况下，用于图像类型的默认选项。'
- en: We now have a good understanding of the `gatsby-plugin-image` package. There
    are, however, some important niches to using this package with other sources such
    as **Content Management Systems** (**CMSes**) – let's take a look.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在对`gatsby-plugin-image`包有了很好的理解。然而，使用此包与其他来源（如**内容管理系统**（**CMS**））结合使用时，还有一些重要的细分市场——让我们来看看。
- en: Sourcing images from CMS
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从CMS获取图像
- en: It is not always practical to store images within your repository. You may want
    someone other than yourself to be able to update or add images to your site without
    you needing to change the code. In these cases, serving images via CMS is preferable.
    It's still important that we use the Gatsby image plugin as we want our images
    to be performant, regardless of the source. To understand how we would integrate
    images via CMS, let's use an example. Let's add a profile image to our *about*
    page using `gatsby-plugin-image` and a CMS.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 并非总是实际在您的存储库中存储图像。您可能希望其他人能够在不修改代码的情况下更新或添加图像到您的网站。在这些情况下，通过CMS提供图像更为可取。尽管如此，我们仍然需要使用Gatsby图像插件，因为我们希望无论来源如何，我们的图像都能有良好的性能。为了了解我们如何通过CMS集成图像，让我们用一个例子来说明。让我们使用`gatsby-plugin-image`和CMS在我们的*关于*页面添加一个个人资料图像。
- en: Important Note
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'Due to the vast number of headless CMSes in the market, we will continue to
    focus on the two mentioned in the *Sourcing data from a Headless CMS* section
    of [*Chapter 3*](B15983_03_ePub_RK.xhtml#_idTextAnchor057), *Sourcing and Querying
    Data (from Anywhere!)*: GraphCMS and Prismic.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由于市场上存在大量的无头CMS，我们将继续关注在[*第3章*](B15983_03_ePub_RK.xhtml#_idTextAnchor057)的*从无头CMS获取数据*部分中提到的两个：GraphCMS和Prismic。
- en: Both of the following sections will assume you have already installed the CMS's
    dependencies and integrated the CMS via your `gatsby-config.js` file. Please only
    implement one of the following.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两个部分将假设你已经安装了 CMS 的依赖项，并通过你的 `gatsby-config.js` 文件集成了 CMS。请只实现以下之一。
- en: Sourcing images from GraphCMS
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 GraphCMS 获取图片
- en: 'By making some small modifications to our configuration and queries, we can
    ensure that we can source images from GraphCMS that utilize `gatsby-plugin-image`
    and load in on the site in the same way as those that are locally sourced:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对我们的配置和查询进行一些小的修改，我们可以确保我们可以从 GraphCMS 获取使用 `gatsby-plugin-image` 的图片，并以与本地获取的图片相同的方式在网站上加载：
- en: Navigate to the GraphCMS website ([graphcms.com](https://graphcms.com)) and
    log in.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 GraphCMS 的网站 ([graphcms.com](https://graphcms.com)) 并登录。
- en: Navigate to your project's assets and click the **upload** button.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的项目资产并点击 **upload** 按钮。
- en: Drag and drop a local image you wish to use onto the page. Be sure to take note
    of the file's name as we will need it later.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你希望使用的本地图片拖放到页面上。请务必注意文件的名称，因为我们稍后会需要它。
- en: Publish the asset.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布资产。
- en: 'Modify your `gatsby-source-graphcms` plugin:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改你的 `gatsby-source-graphcms` 插件：
- en: '[PRE13]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Modify your about page''s `query` so that it includes the `graphCmsAsset` source:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改你的关于页面上的 `query`，使其包含 `graphCmsAsset` 源：
- en: '[PRE14]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the `GatsbyImage` component and the `getImage` function as imports at the
    top of the `src/pages/about.js` file:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/pages/about.js` 文件的顶部添加 `GatsbyImage` 组件和 `getImage` 函数作为导入：
- en: '[PRE15]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Use the new data within the `data` prop to get the image within the component:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `data` 属性中的新数据来获取组件内的图片：
- en: '[PRE16]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: First, retrieve `graphCmsAsset` from the `data` prop and then use the `getImage`
    utility from `gatsby-plugin-image` to retrieve the image data that's required
    to render it. Finally, assign it to a `const` called `profileImage`.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，从 `data` 属性中检索 `graphCmsAsset`，然后使用 `gatsby-plugin-image` 的 `getImage` 工具检索渲染图片所需的数据。最后，将其分配给名为
    `profileImage` 的 `const`。
- en: 'Render your image within your `return` statement:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `return` 语句中渲染你的图片：
- en: '[PRE17]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Restart your development server and admire your hard work by navigating to your
    *about* page.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动你的开发服务器，并通过导航到你的 *about* 页面来欣赏你的辛勤工作。
- en: Now that we understand how we can source images within GraphCMS, let's turn
    our attention to how the same can be achieved in Prismic.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何在 GraphCMS 中获取图片，让我们来看看如何在 Prismic 中实现同样的效果。
- en: Sourcing images from Prismic
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 Prismic 获取图片
- en: 'With a few simple changes to our configuration and queries, we can source images
    from Prismic utilizing `gatsby-plugin-image` and load them in on the site in the
    same way as local images:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对我们的配置和查询进行一些简单的更改，我们可以使用 `gatsby-plugin-image` 从 Prismic 获取图片，并以与本地图片相同的方式在网站上加载它们：
- en: Navigate to Prismic's website ([prismic.io](https://prismic.io)) and log in.
    Select your existing repository.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 Prismic 的网站 ([prismic.io](https://prismic.io)) 并登录。选择你的现有存储库。
- en: Navigate to the **CustomTypes** tab, click the **Create new** button, and select
    **Single Type**. Name your type **Profile** and submit it.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **CustomTypes** 选项卡，点击 **Create new** 按钮，并选择 **Single Type**。将你的类型命名为 **Profile**
    并提交。
- en: Using the **build-mode** sidebar (on the right), drag an image component into
    the type.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **build-mode** 侧边栏（在右侧），将一个图片组件拖入类型中。
- en: Name your field **photo**; the corresponding API ID should populate on its own.
    Click **OK** to confirm this. If you've done this correctly, your profile type
    should look as follows:![Figure 5.1 – Prismic profile type
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将字段命名为 **photo**；相应的 API ID 应该会自动填充。点击 **OK** 以确认。如果你操作正确，你的个人资料类型应该看起来如下所示：![图
    5.1 – Prismic 个人资料类型
- en: '](img/Figure_5.1_B15983.jpg)'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 5.1 – Prismic 个人资料类型'
- en: Figure 5.1 – Prismic profile type
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.1 – Prismic 个人资料类型
- en: Save the document.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文档。
- en: Navigate to the JSON editor and copy its contents to a new file called `profile.json`
    within your `src/schemas` folder.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 JSON 编辑器并将内容复制到你的 `src/schemas` 文件夹中名为 `profile.json` 的新文件中。
- en: Navigate to the **Documents** tab and click the **Create new** button. If Prismic
    has not automatically opened your new type, select **Profile**. Using the interface,
    upload a new image into the document in the **photo** field.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **Documents** 选项卡并点击 **Create new** 按钮。如果 Prismic 没有自动打开你的新类型，请选择 **Profile**。使用界面，在
    **photo** 字段中上传新的图片到文档中。
- en: Save and publish the new document. We now have everything set up in the CMS
    and can return to our Gatsby project.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并发布新文档。我们现在已经在 CMS 中设置了一切，可以返回到我们的 Gatsby 项目。
- en: 'Update your `gatsby-source-prismic` configuration within your `gatsby-config.js`
    file:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `gatsby-config.js` 文件中更新 `gatsby-source-prismic` 的配置：
- en: '[PRE18]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the `GatsbyImage` component and the `getImage` function as imports at the
    top of the `src/pages/about.js` file:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/pages/about.js`文件的顶部添加`GatsbyImage`组件和`getImage`函数作为导入：
- en: '[PRE19]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Modify your about page''s `query` so that it includes the `prismicProfile`
    source:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改您的关于页面的`query`，使其包括`prismicProfile`源：
- en: '[PRE20]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We utilize `gatsbyImageData` within our `query` and can make use of any of the
    configuration options that it supports. Here, we are specifying that the image
    should be full width.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在`query`中使用`gatsbyImageData`并可以利用它支持的任何配置选项。在这里，我们指定图像应全宽显示。
- en: 'Use the new data within the `data` prop to get the image within the component:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`data`属性中的新数据在组件内获取图像：
- en: '[PRE21]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: First, retrieve the `prismicProfile` data from the `data` prop and then use
    the `getImage` utility from `gatsby-plugin-image` to retrieve the image data that's
    required to render it and assign it to a `const` called `profileImage`.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，从`data`属性中检索`prismicProfile`数据，然后使用`gatsby-plugin-image`中的`getImage`实用工具来检索渲染图像所需的图像数据，并将其分配给名为`profileImage`的`const`。
- en: 'Render your image within your `return` statement:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`return`语句中渲染您的图像：
- en: '[PRE22]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Use the `const` parameter defined in *Step 12* to render the image within a
    `GatsbyImage` component. Be sure to provide it with `alt` text to keep your image
    accessible – you could provide this via `frontmatter` as well if you wish.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用在*步骤12*中定义的`const`参数在`GatsbyImage`组件中渲染图像。确保提供`alt`文本以保持图像的可访问性——如果您愿意，也可以通过`frontmatter`提供。
- en: Restart your development server and admire your hard work by navigating to your
    *about* page.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动您的开发服务器，通过导航到您的*关于*页面来欣赏您的辛勤工作。
- en: You should now feel comfortable using images and sourcing images via the Prismic
    CMS. While we have only looked at two CMSes, these concepts can be taken and applied
    to any headless CMS that supports images. Now, let's summarize what we have learned
    in this chapter.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该能够舒适地使用图像并通过Prismic CMS获取图像。虽然我们只看了两个CMS，但这些概念可以应用到任何支持图像的无头CMS中。现在，让我们总结一下本章所学的内容。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about images on the web, and how critical they are
    to our browsing experience. We learned about `gatsby-plugin-image` and implemented
    the two contained image components. We also learned in which circumstances to
    use which component.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了网页上的图像以及它们对我们浏览体验的重要性。我们学习了`gatsby-plugin-image`并实现了其中包含的两个图像组件。我们还学习了在什么情况下使用哪个组件。
- en: At this stage, you should feel comfortable developing all manner of pages for
    your Gatsby site. In the next chapter, we will begin to look at how we can take
    our development site live. We will start this journey by looking at **search engine
    optimization**.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该能够舒适地开发各种类型的Gatsby网站页面。在下一章中，我们将开始探讨如何将我们的开发网站上线。我们将从查看**搜索引擎优化**开始这一旅程。
