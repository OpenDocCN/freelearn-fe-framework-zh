["```js\n    npm install gatsby-plugin-image gatsby-plugin-sharp\n    gatsby-source-filesystem\n    ```", "```js\n    plugins: [\n        'gatsby-plugin-image',\n        'gatsby-plugin-sharp',\n        'gatsby-transformer-sharp',\n        // Other plugins\n    ],\n    ```", "```js\n    import { StaticImage } from \"gatsby-plugin-image\";\n    ```", "```js\n    <StaticImage \n       src=\"img/sample-photo.jpeg\" \n    />\n    ```", "```js\n    <StaticImage\n        src=\"img/sample-photo.jpeg\"\n        alt=\"A man smiling\"\n        placeholder=\"tracedSVG\"\n        layout=\"fixed\"\n        width={400}\n        height={600}\n    />\n    ```", "```js\n    npm install gatsby-transformer-sharp\n    ```", "```js\n    {\n          resolve: 'gatsby-source-filesystem',\n          options: {\n            path: '${__dirname}/assets/images',\n          },\n     },\n    ```", "```js\n    ---\n    type: Blog\n    title: My First Hackathon Experience\n    desc: This post is all about my learnings from my\n     first hackathon experience in London.\n    date: 2020-06-20\n    placeholder Markdown with a hero key added. Be sure to replace the relative path in this example with the one to your image. \n    ```", "```js\n    import { GatsbyImage, getImage } from \"gatsby-plugin-\n    image\";\n    ```", "```js\n    export const pageQuery = graphql'\n      query($slug: String!) {\n        blogpost: markdownRemark(fields: { slug: { eq:\n          $slug } }) {\n          frontmatter {\n            date\n            title\n            tags\n            gatsbyImageData function looks very similar to the props of the StaticImage component that we saw in *Step 8* of the previous section. In this instance, we are using the BLURRED placeholder for the image, which uses a blurred, lower-resolution version of the image in place of the original image while it is loading. We are now able to retrieve the hero data from the component as it is included in the page query.\n    ```", "```js\n    const {\n        blogpost: {\n          frontmatter: { date, tags, title, hero from the data prop, and then use the getImage utility from gatsby-plugin-image to retrieve the image data that's required to render it and assign it to a const.\n    ```", "```js\n    <GatsbyImage image={const defined in *Step 7* to render the image within a GatsbyImage component. Be sure to provide it with alt text to keep your image accessible – you could provide this via frontmatter as well if you wish.\n    ```", "```js\n{\n      resolve: 'gatsby-plugin-sharp',\n      options: {\n        defaults: {\n formats: ['auto', 'webp'],\n placeholder: 'blurred'\n quality: 70\n breakpoints: [300…]\n backgroundColor: 'transparent'\n tracedSVGOptions: {}\n blurredOptions: {}\n jpgOptions: {}\n pngOptions: {}\n webpOptions: {}\n avifOptions: {}\n        }\n      }\n    },\n```", "```js\n    {\n          resolve: 'gatsby-source-graphcms',\n          options: {\n            endpoint: process.env.GRAPHCMS_ENDPOINT,\n            gatsby-source-graphcms plugin's options to include the downloadLocalImages option, the plugin will download and cache the CMS's image assets within your Gatsby project.\n    ```", "```js\n    export const query = graphql'\n      {\n        markdownRemark(frontmatter: { type: { eq: \"bio\" } }) {\n          html\n        }\n        gatsbyImageData within our query and can make use of any of the configuration options that it supports. Here, we are specifying that the image should be full width.\n    ```", "```js\n    import { GatsbyImage, getImage } from \"gatsby-plugin-\n    image\";\n    ```", "```js\n    const {\n        markdownRemark: { html },\n        graphCmsAsset: { localFile },\n      } = data;\n      const profileImage = getImage(localFile);\n    ```", "```js\n    return (\n        <Layout>\n          <div className=\"max-w-5xl mx-auto py-16 lg:py-24\n            text-center\">\n            const parameter that we defined in *Step 8* to render the image within a GatsbyImage component. Be sure to provide it with alt text to keep your image accessible – you could provide this via frontmatter as well if you wish.\n    ```", "```js\n    {\n          resolve: \"gatsby-source-prismic\",\n          options: {\n            repositoryName: \"elevating-gatsby\",\n            schemas: {\n              icebreaker:\n               require(\"./src/schemas/icebreaker.json\"),\n              schemas that we added in *Step 6*. We will also add the shouldDownloadFiles option. This is a function that determines whether to download images. In our case, we always want it to download images so that we can use gatsby-plugin-image, and therefore set the function to always return true.\n    ```", "```js\n    import { GatsbyImage, getImage } from \"gatsby-plugin-\n    image\";\n    ```", "```js\n    export const query = graphql'\n      {\n        markdownRemark(frontmatter: { type: { eq: \"bio\" }\n     }) {\n          html\n        }\n        prismicProfile {\n          data {\n            photo {\n              localFile {\n                childImageSharp {\n                  gatsbyImageData(layout: FULL_WIDTH)\n                }\n              }\n            }\n          }\n        }\n      }\n    ';\n    ```", "```js\n    const {\n        markdownRemark: { html },\n        prismicProfile: {\n          data: {\n            photo: { localFile },\n          },\n        },\n      } = data;\n      const profileImage = getImage(localFile);\n    ```", "```js\n    <GatsbyImage\n              image={profileImage}\n              alt=\"Your alt text\"\n              className=\"mx-auto max-w-sm\"\n            />\n    ```"]