["```js\n{\n  customer: {\n    status: SUBMITTING | SUCCESSFUL | FAILED | ...\n    // only present if the customer was saved successfully\n    customer: { id: 123, firstName: \"Ashley\" ... },\n    // only present if there are validation errors\n    validationErrors: { phoneNumber: \"...\" },\n    // only present if there was another type of error\n    error: true | false\n  }\n}\n```", "```js\nconst doSave = async () => {\n  setSubmitting(true);\n  const result = await global.fetch(\"/customers\", {\n    method: \"POST\",\n    credentials: \"same-origin\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(customer),\n  });\n  setSubmitting(false);\n  if (result.ok) {\n    setError(false);\n    const customerWithId = await result.json();\n    onSave(customerWithId);\n  } else if (result.status === 422) {\n    const response = await result.json();\n    setValidationErrors(response.errors);\n  } else {\n    setError(true);\n  }\n};\n```", "```js\n    import { reducer } from \"../../src/reducers/customer\";\n    describe(\"customer reducer\", () => {\n      it(\"returns a default state for an undefined existing state\", () => {\n        expect(reducer(undefined, {})).toEqual({\n          customer: {},\n          status: undefined,\n          validationErrors: {},\n          error: false\n        });\n      });\n    });\n    ```", "```js\n    const defaultState = {\n      customer: {},\n      status: undefined,\n      validationErrors: {},\n      error: false\n    };\n    export const reducer = (state = defaultState, action) => {\n      return state;\n    };\n    ```", "```js\n    describe(\"ADD_CUSTOMER_SUBMITTING action\", () => {\n      const action = { type: \"ADD_CUSTOMER_SUBMITTING\" };\n      it(\"sets status to SUBMITTING\", () => {\n        expect(reducer(undefined, action)).toMatchObject({\n          status: \"SUBMITTING\"\n        });\n      });\n    });\n    ```", "```js\n    switch(action.type) {\n      case \"ADD_CUSTOMER_SUBMITTING\":\n        return { status: \"SUBMITTING\" };\n      default:\n        return state;\n    }\n    ```", "```js\n    it(\"maintains existing state\", () => {\n      expect(reducer({ a: 123 }, action)).toMatchObject({\n        a: 123\n      });\n    });\n    ```", "```js\n    export const reducer = (state = defaultState, action) => {\n      switch (action.type) {\n        case \"ADD_CUSTOMER_SUBMITTING\":\n          return { ...state, status: \"SUBMITTING\" };\n        default:\n          return state;\n      }\n    };\n    ```", "```js\n    describe(\"ADD_CUSTOMER_SUCCESSFUL action\", () => {\n      const customer = { id: 123 };\n      const action = {\n        type: \"ADD_CUSTOMER_SUCCESSFUL\",\n        customer\n      };\n      it(\"sets status to SUCCESSFUL\", () => {\n        expect(reducer(undefined, action)).toMatchObject({\n          status: \"SUCCESSFUL\"\n        });\n      });\n      it(\"maintains existing state\", () => {\n        expect(\n          reducer({ a: 123 }, action)\n        ).toMatchObject({ a: 123 });\n      });\n    });\n    ```", "```js\n    case \"ADD_CUSTOMER_SUCCESSFUL\":\n      return { ...state, status: \"SUCCESSFUL\" };\n    ```", "```js\n    it(\"sets customer to provided customer\", () => {\n      expect(reducer(undefined, action)).toMatchObject({\n        customer\n      });\n    });\n    ```", "```js\n    case \"ADD_CUSTOMER_SUCCESSFUL\":\n      return {\n        ...state,\n        status: \"SUCCESSFUL\",\n        customer: action.customer\n      };\n    ```", "```js\n    describe(\"ADD_CUSTOMER_FAILED action\", () => {\n      const action = { type: \"ADD_CUSTOMER_FAILED\" };\n      it(\"sets status to FAILED\", () => {\n        expect(reducer(undefined, action)).toMatchObject({\n          status: \"FAILED\"\n        });\n      });\n      it(\"maintains existing state\", () => {\n        expect(\n          reducer({ a: 123 }, action)\n        ).toMatchObject({ a: 123 });\n      });\n    });\n    ```", "```js\n    case \"ADD_CUSTOMER_FAILED\":\n      return { ...state, status: \"FAILED\" };\n    ```", "```js\n    it(\"sets error to true\", () => {\n      expect(reducer(undefined, action)).toMatchObject({\n        error: true\n      });\n    });\n    ```", "```js\n    case \"ADD_CUSTOMER_FAILED\":\n      return { ...state, status: \"FAILED\", error: true };\n    ```", "```js\n    describe(\"ADD_CUSTOMER_VALIDATION_FAILED action\", () => {\n      const validationErrors = { field: \"error text\" };\n      const action = {\n        type: \"ADD_CUSTOMER_VALIDATION_FAILED\",\n        validationErrors\n      };\n      it(\"sets status to VALIDATION_FAILED\", () => {\n        expect(reducer(undefined, action)).toMatchObject({\n          status: \"VALIDATION_FAILED\"\n        });\n      });\n      it(\"maintains existing state\", () => {\n        expect(\n          reducer({ a: 123 }, action)\n        ).toMatchObject({ a: 123 });\n      });\n    });\n    ```", "```js\n    case \"ADD_CUSTOMER_VALIDATION_FAILED\":\n      return { ...state, status: \"VALIDATION_FAILED\" };\n    ```", "```js\n    it(\"sets validation errors to provided errors\", () => {\n      expect(reducer(undefined, action)).toMatchObject({\n        validationErrors\n      });\n    });\n    ```", "```js\n    case \"ADD_CUSTOMER_VALIDATION_FAILED\":\n      return {\n        ...state,\n        status: \"VALIDATION_FAILED\",\n        validationErrors: action.validationErrors\n      };\n    ```", "```js\n    export const itMaintainsExistingState = (reducer, action) => {\n      it(\"maintains existing state\", () => {\n        const existing = { a: 123 };\n        expect(\n          reducer(existing, action)\n        ).toMatchObject(existing);\n      });\n    };\n    ```", "```js\n    import {\n      itMaintainsExistingState\n    } from \"../reducerGenerators\";\n    ```", "```js\n    itMaintainsExistingState(reducer, action);\n    ```", "```js\n    export const itSetsStatus = (reducer, action, value) => {\n      it(`sets status to ${value}`, () => {\n        expect(reducer(undefined, action)).toMatchObject({\n          status: value\n        });\n      });\n    };\n    ```", "```js\n    import {\n      itMaintainsExistingState,\n      itSetsStatus\n    } from \"../reducerGenerators\";\n    ```", "```js\n    describe(\"ADD_CUSTOMER_SUBMITTING action\", () => {\n      const action = { type: \"ADD_CUSTOMER_SUBMITTING\" };\n      itMaintainsExistingState(reducer, action);\n      itSetsStatus(reducer, action, \"SUBMITTING\");\n    });\n    ```", "```js\n    import { createStore, combineReducers } from \"redux\";\n    import {\n     reducer as customerReducer\n    } from \"./reducers/customer\";\n    export const configureStore = (storeEnhancers = []) => \n      createStore(\n        combineReducers({ customer: customerReducer }),\n        storeEnhancers\n      );\n    ```", "```js\n    import { Provider } from \"react-redux\";\n    import { configureStore } from \"./store\";\n    ```", "```js\n    ReactDOM.createRoot(\n      document.getElementById(\"root\")\n    ).render(\n      <Provider store={configureStore()}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </Provider>\n    );\n    ```", "```js\n    import { Provider } from \"react-redux\";\n    import { storeSpy } from \"expect-redux\";\n    import { configureStore } from \"../src/store\";\n    ```", "```js\n    export let store;\n    export const initializeReactContainer = () => {\n      store = configureStore([storeSpy]);\n      container = document.createElement(\"div\");\n      document.body.replaceChildren(container);\n      reactRoot = ReactDOM.createRoot(container);\n    };\n    ```", "```js\n    export const renderWithStore = (component) =>\n      act(() =>\n        reactRoot.render(\n          <Provider store={store}>{component}</Provider>\n        )\n      );\n    ```", "```js\n    export const dispatchToStore = (action) =>\n      act(() => store.dispatch(action));\n    ```", "```js\n    import { storeSpy, expectRedux } from \"expect-redux\";\n    import { configureStore } from \"../../src/store\";\n    describe(\"addCustomer\", () => {\n      let store;\n      beforeEach(() => {\n        store = configureStore([ storeSpy ]);\n      });\n    });\n    ```", "```js\n    const addCustomerRequest = (customer) => ({\n      type: \"ADD_CUSTOMER_REQUEST\",\n      customer,\n    });\n    ```", "```js\n    it(\"sets current status to submitting\", () => {\n      store.dispatch(addCustomerRequest());\n      return expectRedux(store)\n        .toDispatchAnAction()\n        .matching({ type: \"ADD_CUSTOMER_SUBMITTING\" });\n    });\n    ```", "```js\n    import { put } from \"redux-saga/effects\";\n    export function* addCustomer() {\n      yield put({ type: \"ADD_CUSTOMER_SUBMITTING\" });\n    }\n    ```", "```js\n    import {\n      createStore,\n      applyMiddleware,\n      compose,\n      combineReducers\n    } from \"redux\";\n    import createSagaMiddleware from \"redux-saga\";\n    import { takeLatest } from \"redux-saga/effects\";\n    import { addCustomer } from \"./sagas/customer\";\n    import {\n      reducer as customerReducer\n    } from \"./sagas/customer\";\n    ```", "```js\n    function* rootSaga() {\n      yield takeLatest(\n        \"ADD_CUSTOMER_REQUEST\",\n        addCustomer\n      );\n    }\n    ```", "```js\n    export const configureStore = (storeEnhancers = []) => {\n      const sagaMiddleware = createSagaMiddleware();\n      const store = createStore(\n        combineReducers({ customer: customerReducer }),\n        compose(\n          applyMiddleware(sagaMiddleware),\n          ...storeEnhancers\n        )\n      );\n      sagaMiddleware.run(rootSaga);\n      return store;\n    };\n    ```", "```js\n    it(\"sends HTTP request to POST /customers\", async () => {\n      const inputCustomer = { firstName: \"Ashley\" };\n      store.dispatch(addCustomerRequest(inputCustomer));\n      expect(global.fetch).toBeCalledWith(\n        \"/customers\",\n        expect.objectContaining({\n          method: \"POST\",\n        })\n      );\n    });\n    ```", "```js\n    beforeEach(() => {\n      jest.spyOn(global, \"fetch\");\n      store = configureStore([ storeSpy ]);\n    });\n    ```", "```js\n    import { put, call } from \"redux-saga/effects\";\n    ```", "```js\n    const fetch = (url, data) =>\n      global.fetch(url, {\n        method: \"POST\",\n      });\n    export function* addCustomer({ customer }) {\n      yield put({ type: \"ADD_CUSTOMER_SUBMITTING\" });\n      yield call(fetch, \"/customers\", customer);\n    }\n    ```", "```js\n    it(\"calls fetch with correct configuration\", async () => {\n      const inputCustomer = { firstName: \"Ashley\" };\n      store.dispatch(addCustomerRequest(inputCustomer));\n      expect(global.fetch).toBeCalledWith(\n        expect.anything(),\n        expect.objectContaining({\n          credentials: \"same-origin\",\n          headers: { \"Content-Type\": \"application/json\" },\n        })\n      );\n    });\n    ```", "```js\n    const fetch = (url, data) =>\n      global.fetch(url, {\n        method: \"POST\",\n        credentials: \"same-origin\",\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    ```", "```js\n    it(\"calls fetch with customer as request body\", async () => {\n      const inputCustomer = { firstName: \"Ashley\" };\n      store.dispatch(addCustomerRequest(inputCustomer));\n      expect(global.fetch).toBeCalledWith(\n        expect.anything(),\n        expect.objectContaining({\n          body: JSON.stringify(inputCustomer),\n        })\n     );\n    });\n    ```", "```js\n    const fetch = (url, data) =>\n      global.fetch(url, {\n        body: JSON.stringify(data),\n        method: \"POST\",\n        credentials: \"same-origin\",\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    ```", "```js\n    it(\"dispatches ADD_CUSTOMER_SUCCESSFUL on success\", () => {\n      store.dispatch(addCustomerRequest());\n      return expectRedux(store)\n        .toDispatchAnAction()\n        .matching({\n          type: \"ADD_CUSTOMER_SUCCESSFUL\",\n          customer\n        });\n    });\n    ```", "```js\n    const customer = { id: 123 };\n    beforeEach(() => {\n      jest\n        .spyOn(global, \"fetch\")\n        .mockReturnValue(fetchResponseOk(customer));\n      store = configureStore([ storeSpy ]);\n    });\n    ```", "```js\n    import { fetchResponseOk } from \"../builders/fetch\";\n    ```", "```js\n    export function* addCustomer({ customer }) {\n      yield put({ type: \"ADD_CUSTOMER_SUBMITTING\" });\n    const result = yield call(fetch, \"/customers\", customer);\n      const customerWithId = yield call([result, \"json\"]);\n      yield put({\n        type: \"ADD_CUSTOMER_SUCCESSFUL\",\n        customer: customerWithId\n      });\n    }\n    ```", "```js\n    it(\"dispatches ADD_CUSTOMER_FAILED on non-specific error\", () => {\n      global.fetch.mockReturnValue(fetchResponseError());\n      store.dispatch(addCustomerRequest());\n      return expectRedux(store)\n        .toDispatchAnAction()\n        .matching({ type: \"ADD_CUSTOMER_FAILED\" });\n    });\n    ```", "```js\n    import {\n      fetchResponseOk,\n      fetchResponseError\n    } from \"../builders/fetch\";\n    ```", "```js\n    export function* addCustomer({ customer }) {\n      yield put({ type: \"ADD_CUSTOMER_SUBMITTING\" });\n      const result = yield call(\n        fetch,\n        \"/customers\",\n        customer\n      );\n      if(result.ok) {\n       const customerWithId = yield call(\n          [result, \"json\"]\n        );\n        yield put({\n          type: \"ADD_CUSTOMER_SUCCESSFUL\",\n          customer: customerWithId\n        });\n      } else {\n        yield put({ type: \"ADD_CUSTOMER_FAILED\" });\n      }\n    }\n    ```", "```js\n    it(\"dispatches ADD_CUSTOMER_VALIDATION_FAILED if validation errors were returned\", () => {\n      const errors = {\n        field: \"field\",\n        description: \"error text\"\n      };\n      global.fetch.mockReturnValue(\n        fetchResponseError(422, { errors })\n      );\n      store.dispatch(addCustomerRequest());\n      return expectRedux(store)\n        .toDispatchAnAction()\n        .matching({\n          type: \"ADD_CUSTOMER_VALIDATION_FAILED\",\n          validationErrors: errors\n        });\n    });\n    ```", "```js\n    export function* addCustomer({ customer }) {\n      yield put({ type: \"ADD_CUSTOMER_SUBMITTING\" });\n      const result = yield call(fetch, \"/customers\", customer);\n      if(result.ok) {\n        const customerWithId = yield call(\n         [result, \"json\"]\n        );\n        yield put({\n          type: \"ADD_CUSTOMER_SUCCESSFUL\",\n          customer: customerWithId\n        });\n      } else if (result.status === 422) {\n        const response = yield call([result, \"json\"]);\n        yield put({\n          type: \"ADD_CUSTOMER_VALIDATION_FAILED\",\n          validationErrors: response.errors\n        });\n      } else {\n        yield put({ type: \"ADD_CUSTOMER_FAILED\" });\n      }\n    }\n    ```", "```js\n    import { expectRedux } from \"expect-redux\";\n    ```", "```js\n    import {\n      initializeReactContainer,\n      renderWithStore,\n      dispatchToStore,\n      store,\n      ...\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    it(\"dispatches ADD_CUSTOMER_REQUEST when submitting data\", async () => {\n      renderWithStore(\n        <CustomerForm {...validCustomer} />\n      );\n      await clickAndWait(submitButton());\n      return expectRedux(store)\n        .toDispatchAnAction()\n        .matching({\n          type: 'ADD_CUSTOMER_REQUEST',\n          customer: validCustomer\n      });\n    });\n    ```", "```js\n    const handleSubmit = async (event) => {\n      event.preventDefault();\n      const validationResult = validateMany(\n        validators, customer\n      );\n      if (!anyErrors(validationResult)) {\n        await doSave();\n        dispatch(addCustomerRequest(customer));\n      } else {\n        setValidationErrors(validationResult);\n      }\n    };\n    ```", "```js\n    import {  useDispatch } from \"react-redux\";\n    ```", "```js\n    const dispatch = useDispatch();\n    ```", "```js\n    const addCustomerRequest = (customer) => ({\n      type: \"ADD_CUSTOMER_REQUEST\",\n      customer,\n    });\n    ```", "```js\n    it(\"renders error message when error prop is true\", () => {\n      renderWithStore(\n        <CustomerForm {...validCustomer} />\n      );\n      dispatchToStore({ type: \"ADD_CUSTOMER_FAILED\" });\n      expect(element(\"[role=alert]\")).toContainText(\n        \"error occurred\"\n      );\n    });\n    ```", "```js\n    import {\n      useDispatch,\n      useSelector\n     } from \"react-redux\";\n    ```", "```js\n    const {\n      error,\n    } = useSelector(({ customer }) => customer);\n    ```", "```js\n    it(\"does not submit the form when there are validation errors\", async () => {\n      renderWithStore(\n        <CustomerForm original={blankCustomer} />\n      );\n      await clickAndWait(submitButton());\n      return expectRedux(store)\n        .toNotDispatchAnAction(100)\n        .ofType(\"ADD_CUSTOMER_REQUEST\");\n    });\n    ```", "```js\n    it(\"renders field validation errors from server\", () => {\n      const errors = {\n        phoneNumber: \"Phone number already exists in the system\"\n      };\n      renderWithStore(\n        <CustomerForm {...validCustomer} />\n      );\n      dispatchToStore({\n        type: \"ADD_CUSTOMER_VALIDATION_FAILED\",\n        validationErrors: errors\n      });\n      expect(\n        errorFor(phoneNumber)\n      ).toContainText(errors.phoneNumber);\n    });\n    ```", "```js\nconst {\n  error,\n  validationErrors: serverValidationErrors,\n} = useSelector(({ customer }) => customer);\n```", "```js\n    const renderError = fieldName => {\n      const allValidationErrors = {\n        ...validationErrors,\n        ...serverValidationErrors\n      };\n      return (\n        <span id={`${fieldname}error`} role=\"alert\">\n          {hasError(allValidationErrors, fieldName)\n            ? allValidationErrors[fieldname]\n            : \"\"}\n        </span>\n      );\n    };\n    ```", "```js\n    it(\"displays indicator when form is submitting\", () => {\n      renderWithStore(\n        <CustomerForm {...validCustomer} />\n      );\n      dispatchToStore({\n       type: \"ADD_CUSTOMER_SUBMITTING\"\n      });\n      expect(\n        element(\".submittingIndicator\")\n      ).not.toBeNull();\n    });\n    ```", "```js\n    const {\n      error,\n      status,\n      validationErrors: serverValidationErrors,\n    } = useSelector(({ customer }) => customer);\n    ```", "```js\n    const submitting = status === \"SUBMITTING\";\n    ```", "```js\n    it(\"hides indicator when form has submitted\", () => {\n      renderWithStore(\n        <CustomerForm {...validCustomer} />\n      );\n      dispatchToStore({\n        type: \"ADD_CUSTOMER_SUCCESSFUL\"\n      });\n      expect(element(\".submittingIndicator\")).toBeNull();\n    });\n    ```", "```js\n    import { createBrowserHistory } from \"history\";\n    export const appHistory = createBrowserHistory();\n    ```", "```js\n    import React from \"react\";\n    import ReactDOM from \"react-dom/client\";\n    import { Provider } from \"react-redux\";\n    import {\n      unstable_HistoryRouter as HistoryRouter\n    } from \"react-router-dom\";\n    import { appHistory } from \"./history\";\n    import { configureStore } from \"./store\";\n    import { App } from \"./App\";\n    ReactDOM.createRoot(\n      document.getElementById(\"root\")\n    ).render(\n      <Provider store={configureStore()}>\n        <HistoryRouter history={appHistory}>\n          <App />\n       </HistoryRouter>\n      </Provider>\n    );\n    ```", "```js\n    import { appHistory } from \"../../src/history\";\n    ```", "```js\n    it(\"navigates to /addAppointment on success\", () => {\n      store.dispatch(addCustomerRequest());\n      expect(appHistory.location.pathname).toEqual(\n        \"/addAppointment\"\n      );\n    });\n    it(\"includes the customer id in the query string when navigating to /addAppointment\", () => {\n      store.dispatch(addCustomerRequest());\n      expect(\n        appHistory.location.search\n      ).toEqual(\"?customer=123\");\n    });\n    ```", "```js\n    import { appHistory } from \"../history\";\n    ```", "```js\n    export function* addCustomer({ customer }) {\n      ...\n      yield put({\n        type: \"ADD_CUSTOMER_SUCCESSFUL\",\n        customer: customerWithId,\n      });\n      appHistory.push(\n        `/addAppointment?customer=${customerWithId.id}`\n      );\n    }\n    ```", "```js\n    <Route\n      path=\"/addCustomer\"\n      element={<CustomerForm original={blankCustomer} />}\n    />\n    ```"]