["```js\n<!-- ch4/es5/hello-world/index.html --> \n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title></title>\n</head>\n<body>\n  <script src=\"img/zone.js\"></script>\n  <script src=\"img/Reflect.js\"></script>\n  <script src=\"img/Rx.js\"></script>\n  <script src=\"img/core.umd.js\"></script>\n  <script src=\"img/common.umd.js\"></script>\n  <script src=\"img/compiler.umd.js\"></script>\n  <script src=\"img/platform-browser.umd.js\"></script>\n  <script src=\"img/platform-browser-dynamic.umd.js\"></script>\n  <script src=\"img/app.js\"></script>\n</body>\n</html>\n\n```", "```js\n// ch4/es5/hello-world/app.js \n\nvar App = ng.core.Component({\n  selector: 'my-app',\n  template: '<h1>Hello {{target}}!</h1>'\n})\n.Class({\n  constructor: function () {\n    this.target = 'world';\n  }\n});\n\nvar AppModule = ng.core.NgModule({\n  imports: [ng.platformBrowser.BrowserModule],\n  declarations: [App],\n  bootstrap: [App]\n})\n.Class({\n  constructor: function () {}\n});\n\nng.platformBrowserDynamic\n .platformBrowserDynamic()\n .bootstrapModule(AppModule);\n\n```", "```js\n'<h1>Hello {{target}}!</h1>' \n\n```", "```js\n<my-app></my-app> \n\n```", "```js\n# Will clone the repository and save it to directory called\n# getting-started-with-angular\n$ git clone https://github.com/mgechev/getting-started-with-angular.git\n$ cd getting-started-with-angular\n$ npm install\n\n```", "```js\n$ npm start \n\n```", "```js\n// ch4/ts/hello-world/app.ts \n\nimport {Component, NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.html'\n})\nclass App {\n  target: string;\n  constructor() {\n    this.target = 'world';\n  }\n}\n\n@NgModule({\n  declarations: [App],\n  imports: [BrowserModule],\n  bootstrap: [App],\n})\nclass AppModule {}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n```", "```js\nimport {Component, NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n```", "```js\n<!-- ch4/ts/hello-world/index.html --> \n<!DOCTYPE html> \n<html lang=\"en\"> \n<head> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> \n  <title><%= TITLE %></title> \n  <meta name=\"description\" content=\"\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n  <!-- inject:css --> \n  <!-- endinject --> \n</head> \n<body> \n  <my-app>Loading...</my-app> \n  <!-- inject:js --> \n  <!-- endinject --> \n  <%= INIT %> \n</body> \n</html> \n\n```", "```js\n// ch4/ts/ng-for/detailed-syntax/app.ts \n\nimport {Component, NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\n@Component({\n  selector: 'app',\n  templateUrl: './app.html',\n})\nclass App {\n  todos: string[];\n  name: string;\n  constructor() {\n    this.name = 'John';\n    this.todos = ['Buy milk', 'Save the world'];\n  }\n}\n\n@NgModule({\n  declarations: [App],\n  imports: [BrowserModule],\n  bootstrap: [App],\n})\nclass AppModule {}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n```", "```js\n<!-- ch4/ts/ng-for/detailed-syntax/app.html --> \n\n<h1>Hello {{name}}!</h1> \n<p> \n  Here's a list of the things you need to do: \n</p> \n<ul> \n  <template ngFor let-todo [ngForOf]=\"todos\"> \n    <li>{{todo}}</li> \n  </template> \n</ul> \n\n```", "```js\n<!-- ch4/ts/ng-for/syntax-sugar/app.html --> \n\n<ul> \n  <li *ngFor=\"let todo of todos\">{{todo}}</li> \n</ul> \n\n```", "```js\n<div saTooltip=\"Hello world!\"></div> \n\n```", "```js\nimport {Directive, ElementRef, HostListener...} from '@angular/core'; \n\n```", "```js\n// ch4/ts/tooltip/app.ts \n\n@Directive({\n  selector: '[saTooltip]'\n})\nexport class Tooltip {\n  @Input() saTooltip:string;\n\n  constructor(private el: ElementRef, private overlay: Overlay) {\n    this.overlay.attach(el.nativeElement);\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter() {\n    this.overlay.open(this.el, this.saTooltip);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave() {\n    this.overlay.close();\n  }\n}\n\n```", "```js\n@Component({ \n  selector: 'app', \n  templateUrl: './app.html', \n  providers: [Overlay], \n  // ... \n}) \nclass App {} \n\n```", "```js\n@NgModule({\n  declarations: [Tooltip, App],\n  providers: [Overlay],\n  imports: [BrowserModule],\n  bootstrap: [App],\n})\nclass AppModule {}\n\n```", "```js\n@Component(...)\nclass ZippyHeader {\n  @Input() header: string;\n}\n\n@Component(...)\nclass Zippy {\n  @Input() header: string;\n  visible = true;\n}\n\n@Component(...)\nclass App {}\n```", "```js\n// ch4/ts/zippy/app.ts\n\n@Component(...)\nclass ZippyHeader {...}\n\n@Component(...)\nclass Zippy {...}\n\n@NgModule({\n declarations: [Zippy, ZippyHeader],\n  exports: [Zippy]\n  imports: [CommonModule],\n})\nclass ZippyModule {}\n\n@Component(...)\nclass App {...}\n\n@NgModule({\n  imports: [BrowserModule, ZippyModule],\n  declarations: [App],\n  bootstrap: [App]\n})\nclass AppModule {}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```", "```js\n//  ch4/ts/custom-element/app.ts\n\nimport {Component, NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    <h1>Hello {{name}}</h1>\n    The current timeout is <simple-timer></simple-timer>\n  `\n})\nclass App {\n  name: string = 'John Doe';\n}\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [App],\n  bootstrap: [App]\n})\nclass AppModule {}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```", "```js\nimport {..., CUSTOM_ELEMENTS_SCHEMA} from '@angular/core';\n\n//...\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [App],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  bootstrap: [App]\n})\nclass AppModule {}\n```", "```js\ninterface Todo { \n  completed: boolean; \n  label: string; \n} \n\n```", "```js\nimport {Component, NgModule, ViewEncapsulation} from '@angular/core'; \n//...\n\n```", "```js\n@Component({ \n  selector: 'todo-app', \n  templateUrl: './app.html', \n  styles: [ \n    `ul li { \n      list-style: none; \n    } \n    .completed { \n      text-decoration: line-through; \n    }` \n  ], \n  encapsulation: ViewEncapsulation.Emulated \n}) \n\n```", "```js\n// ch4/ts/todo-app/app.ts \nclass TodoCtrl { \n  todos: Todo[] = [{ \n    label: 'Buy milk', \n    completed: false \n  }, { \n    label: 'Save the world', \n    completed: false \n  }];\n  name: string = 'John'; \n\n  addTodo(label) { ... }\n\n  removeTodo(idx) { ... } \n\n  toggleCompletion(idx) { ... } \n} \n\n```", "```js\n<ul> \n  <li *ngFor=\"let todo of todos; let index = index\" [class.completed]=\"todo.completed\"> \n    <input type=\"checkbox\" [checked]=\"todo.completed\" \n      (change)=\"toggleCompletion(index)\"> \n    {{todo.label}} \n  </li> \n</ul> \n\n```", "```js\ntoggleCompletion(idx) { \n  let todo = this.todos[idx]; \n  todo.completed = !todo.completed; \n} \n\n```", "```js\n<p> \n  Add a new todo: \n  <input #newtodo type=\"text\"> \n  <button (click)=\"addTodo(newtodo.value); newtodo.value = ''\"> \n    Add \n  </button> \n</p> \n\n```", "```js\naddTodo(label) { \n  this.todos.push({ \n    label, \n    completed: false \n  }); \n} \n\n```", "```js\nimport { \n  Component, \n  Input, \n  Output, \n  EventEmitter \n} from '@angular/core'; \n\n```", "```js\n// ch4/ts/inputs-outputs/app.ts \n\n@Component({ \n  selector: 'text-input', \n  template: ` \n    <input #todoInput [placeholder]=\"inputPlaceholder\"> \n    <button (click)=\"emitText(todoInput.value); \n                     todoInput.value = '';\"> \n      {{buttonLabel}} \n    </button> \n  ` \n}) \nclass InputBox {...} \n\n```", "```js\nclass InputBox { \n  @Input() inputPlaceholder: string; \n  ... \n} \n\n```", "```js\nclass InputBox { \n  @Input() inputPlaceholder: string; \n  @Input() buttonLabel: string; \n  ... \n} \n\n```", "```js\nclass InputBox { \n  ... \n  @Output() inputText = new EventEmitter<string>();\n\n  emitText(text: string) { \n    this.inputText.emit(text); \n  } \n} \n\n```", "```js\n@Component(...) \nclass TodoList { \n  @Input() todos: Todo[]; \n  @Output() toggle = new EventEmitter<Todo>();\n\n  toggleCompletion(index: number) { \n    let todo = this.todos[index]; \n    this.toggle.emit(todo); \n  } \n} \n\n```", "```js\n@Component({ \n  selector: 'todo-app',\n  template: ` \n    <h1>Hello {{name}}!</h1> \n\n    <p> \n      Add a new todo: \n      <input-box inputPlaceholder=\"New todo...\" \n        buttonLabel=\"Add\" \n        (inputText)=\"addTodo($event)\"> \n      </input-box> \n    </p> \n\n    <p>Here's the list of pending todo items:</p> \n    <todo-list [todos]=\"todos\" (toggle)=\"toggleCompletion($event)\"></todo-list> \n  ` \n}) \nclass TodoApp {...} \n\n```", "```js\n<input-box inputPlaceholder=\"New todo...\" \n  buttonLabel=\"Add\" \n  (inputText)=\"addTodo($event)\"> \n</input-box> \n\n```", "```js\nclass TodoApp { \n  todos: Todo[] = []; \n  name: string = 'John';\n\n  addTodo(label: string) { \n    this.todos.push({ \n      label, \n      completed: false \n    }); \n  }\n\n  toggleCompletion(todo: Todo) { \n    todo.completed = !todo.completed; \n  } \n} \n\n```", "```js\n<input-box inputPlaceholder=\"New todo...\" \n  buttonLabel=\"Add\" \n  (click)=\"handleClick($event)\" \n  (inputText)=\"addTodo($event)\"> \n</input-box> \n\n```", "```js\n<input #todoInput [placeholder]=\"inputPlaceholder\"> \n<button (click)=\"emitText(todoInput.value); \n                 todoInput.value = '';\"> \n  {{buttonLabel}} \n</button> \n\n```", "```js\nclass TodoList { \n  ... \n  @Output() toggle = new EventEmitter<Todo>();\n\n  toggle(index: number) { \n    ... \n  } \n} \n\n```", "```js\n<todo-list [toggle]=\"foobar($event)\"...></todo-list> \n\n```", "```js\nclass TodoList { \n  ... \n  @Output('toggle') toggleEvent = new EventEmitter<Todo>();\n\n  toggle(index: number) { \n    ... \n  } \n} \n\n```", "```js\nclass TodoList { \n  @Input('todos') todoList: Todo[]; \n  @Output('toggle') toggleEvent = new EventEmitter<Todo>();\n\n  toggle(index: number) { \n    ... \n  } \n} \n\n```", "```js\n<todo-list [todos]=\"todos\" \n  (toggle)=\"toggleCompletion($event)\"> \n</todo-list> \n\n```", "```js\n@Directive({ \n  outputs: ['outputName: outputAlias'], \n  inputs: ['inputName: inputAlias'] \n}) \nclass Dir { \n  outputName = new EventEmitter(); \n} \n\n```", "```js\n@Directive(...) \nclass Dir { \n  @Output('outputAlias') outputName = new EventEmitter<any>(); \n  @Input('inputAlias') inputName: any;\n} \n\n```", "```js\n@Component({ \n  selector: 'fancy-button', \n  template: '<button>Click me</button>' \n}) \nclass FancyButton { ... } \n\n```", "```js\n<fancy-button></fancy-button> \n\n```", "```js\n// AngularJS example \napp.directive('fancyButton', function () { \n  return { \n    restrict: 'E', \n    transclude: true, \n    template: '<button><ng-transclude></ng-transclude></button>' \n  }; \n}); \n\n```", "```js\n// ch4/ts/ng-content/app.ts \n@Component({ \n  selector: 'fancy-button', \n  template: '<button><ng-content></ng-content></button>' \n}) \nclass FancyButton { /* Extra behavior */ } \n\n```", "```js\n<fancy-button>Click <i>me</i> now!</fancy-button> \n\n```", "```js\n<panel>\n  <section class=\"panel-title\">Sample title</section>\n  <section class=\"panel-content\">Content</section>\n</panel>\n\n```", "```js\n<div class=\"panel\"> \n  <div class=\"panel-title\"> \n    <!-- Project the content of panel-title here --> \n  </div> \n  <div class=\"panel-content\"> \n    <!-- Project the content of panel-content here --> \n  </div> \n</div>` \n\n```", "```js\n// ch4/ts/ng-content/app.ts \n@Component({ \n  selector: 'panel', \n  styles: [ ... ], \n  template: ` \n    <div class=\"panel\"> \n      <div class=\"panel-title\"> \n        <ng-content select=\".panel-title\"></ng-content> \n      </div> \n      <div class=\"panel-content\"> \n        <ng-content select=\".panel-content\"></ng-content> \n      </div> \n    </div>` \n}) \nclass Panel { } \n\n```", "```js\n@Component({ \n  selector: 'sample-component', \n  template: '<view-child></view-child>' \n}) \nclass Sample {} \n\n```", "```js\n<sample-component> \n  <content-child1></content-child1> \n  <content-child2></content-child2> \n</sample-component> \n\n```", "```js\n<tabs (changed)=\"tabChanged($event)\"> \n  <tab-title>Tab 1</tab-title> \n  <tab-content>Content 1</tab-content> \n  <tab-title>Tab 2</tab-title> \n  <tab-content>Content 2</tab-content> \n</tabs> \n\n```", "```js\n@Component({ \n  selector: 'tab-title', \n  styles: [...], \n  template: ` \n    <div class=\"tab-title\" (click)=\"handleClick()\"> \n      <ng-content></ng-content> \n    </div> \n  ` \n}) \nclass TabTitle { \n  @Output() tabSelected: EventEmitter<TabTitle> = \n    new EventEmitter<TabTitle>();\n\n  handleClick() { \n    this.tabSelected.emit(this); \n  } \n} \n\n```", "```js\n@Component({ \n  selector: 'tab-content', \n  styles: [...], \n  template: ` \n    <div class=\"tab-content\" [hidden]=\"!isActive\"> \n      <ng-content></ng-content> \n    </div> \n  ` \n}) \nclass TabContent { \n  isActive: boolean = false; \n} \n\n```", "```js\n// ch4/ts/basic-tab-content-children/app.ts \n@Component({ \n  selector: 'tabs', \n  styles: [...], \n  template: ` \n    <div class=\"tab\"> \n      <div class=\"tab-nav\"> \n        <ng-content select=\"tab-title\"></ng-content> \n      </div> \n      <ng-content select=\"tab-content\"></ng-content> \n    </div> \n  ` \n}) \nclass Tabs { \n  @Output('changed') \n  tabChanged: EventEmitter<number> = new EventEmitter<number>(); \n\n  @ContentChildren(TabTitle) \n  tabTitles: QueryList<TabTitle>; \n\n  @ContentChildren(TabContent) \n  tabContents: QueryList<TabContent>; \n\n  active: number;\n  select(index: number) {...} \n  ngAfterViewInit() {...} \n} \n\n```", "```js\n// ch4/ts/view-child-content-child/app.ts \n@Component({ \n  selector: 'user-badge', \n  template: '...' \n}) \nclass UserBadge {} \n\n@Component({ \n  selector: 'user-rating', \n  template: '...' \n}) \nclass UserRating {} \n\n```", "```js\n@Component({ \n  selector: 'user-panel', \n  template: '<user-badge></user-badge>'\n}) \nclass UserPanel {...} \n\n```", "```js\n@Component({ \n  selector: 'app', \n  template: `<user-panel> \n    <user-rating></user-rating> \n  </user-panel>`\n}) \nclass App {} \n\n```", "```js\nclass UserPanel { \n  @ViewChild(UserBadge) \n  badge: UserBadge; \n\n  @ContentChild(UserRating) \n  rating: UserRating;\n\n  constructor() { \n    // \n  } \n} \n\n```", "```js\n@ContentChildren(TabTitle) \ntabTitles: QueryList<TabTitle>; \n\n@ContentChildren(TabContent) \ntabContents: QueryList<TabContent>; \n\n```", "```js\nngAfterContentInit() { \n  this.tabTitles \n    .map(t => t.tabSelected) \n    .forEach((t, i) => { \n      t.subscribe(_ => { \n        this.select(i) \n      }); \n    }); \n  this.active = 0; \n  this.select(0); \n} \n\n```", "```js\nselect(index: number) { \n  let contents: TabContent[] = this.tabContents.toArray(); \n  contents[this.active].isActive = false; \n  this.active = index; \n  contents[this.active].isActive = true; \n  this.tabChanged.emit(index); \n} \n\n```", "```js\n      @Component({ \n        selector: 'panel', \n        inputs: ['title'] \n      }) \n      class Panel {...} \n\n```", "```js\n<panel [title]=\"expression\"></panel> \n\n```", "```js\n@Component(...) \nclass Panel { \n  ngOnChanges(changes) { \n    Object.keys(changes).forEach(prop => { \n      console.log(prop, 'changed. Previous value', changes[prop].previousValue); \n    }); \n  } \n} \n\n```", "```js\nimport {Component, OnChanges} from '@angular/core'; \n@Component(...) \nclass Panel implements OnChanges { \n  ngOnChanges(changes) {...} \n} \n\n```", "```js\n@Component({ \n  selector: 'panel', \n  template: '<ng-content></ng-content>' \n}) \nclass Panel { \n  @Input() title: string;\n  @Input() caption: string;\n  ngOnChanges(changes) {...} \n  ngOnInit() {...} \n  ngDoCheck() {...} \n  ngOnDestroy() {...} \n  ngAfterContentInit() {...} \n  ngAfterContentChecked() {...} \n  ngAfterViewInit() {...} \n  ngAfterViewChecked() {...} \n} \n\n```", "```js\n<button (click)=\"toggle()\">Toggle</button> \n<div *ngIf=\"counter % 2 == 0\"> \n  <panel caption=\"Sample caption\" >Hello world!</panel> \n</div> \n\n```", "```js\n// ch4/ts/template-ref/app.ts \n<todo-app> \n  <template let-todo> \n    <input type=\"checkbox\" [checked]=\"todo.completed\" \n      (change)=\"todo.completed = !todo.completed;\"> \n    <span [class.completed]=\"todo.completed\"> \n      {{todo.label}} \n    </span><br> \n  </template> \n</todo-app> \n\n```", "```js\n// ch4/ts/template-ref/app.ts \nclass TodoApp { \n  @ContentChild(TemplateRef) itemsTemplate: TemplateRef; \n  // ... \n} \n\n```", "```js\n// ch4/ts/template-ref/app.ts \nclass TodoList { \n  @Input() todos: Todo[]; \n  @Input() itemsTemplate: TemplateRef; \n  @Output() toggle = new EventEmitter<Todo>(); \n} \n\n```", "```js\n... \n<todo-list [todos]=\"todos\" \n  [itemsTemplate]=\"itemsTemplate\"> \n</todo-list> \n\n```", "```js\n<!-- ... --> \n<template *ngFor=\"let todo of todos; template: itemsTemplate\"></template> \n\n```", "```js\n// ch4/ts/change_detection_strategy_broken/app.ts \n\nimport {ChangeDetectionStrategy} from '@angular/core'; \n\n```", "```js\n@Component({ \n  selector: 'todo-list', \n  changeDetection: ChangeDetectionStrategy.OnPush, \n  template: `...`, \n  styles: [...] \n}) \nclass TodoList { ... } \n\n```", "```js\nlet foo = List.of(1, 2, 3); \nlet changed = foo.push(4); \nfoo === changed // false \nconsole.log(foo.toJS()); // [ 1, 2, 3 ] \nconsole.log(changed.toJS()); // [ 1, 2, 3, 4 ] \n\n```", "```js\nclass TodoApp { \n  todos: Todo[] = [...]; \n  ... \n} \n\n```", "```js\n// ch4/ts/change_detection_strategy/app.ts \nclass TodoApp { \n  todos: Immutable.fromJS([{ \n    label: 'Buy milk', \n    completed: false \n  }, { \n    label: 'Save the world', \n    completed: false \n  }]);\n  ... \n} \n\n```", "```js\n... \naddTodo(label: string) { \n  this.todos = this.todos.push(Immutable.fromJS({ \n    label, \n    completed: false \n  })); \n}\n\ntoggleCompletion(index: number) { \n  this.todos = this.todos.update(index, todo => { \n    return Immutable.fromJS({ \n      label: todo.label, \n      completed: !todo.completed \n    });\n  }); \n} \n... \n\n```", "```js\n@Component({ \n  selector: 'todo-list', \n  changeDetection: ChangeDetectionStrategy.OnPush, \n  template: `...`, \n  styles: [...] \n}) \nclass TodoList { \n  @Input() todos: ImmutableList<Todo>; \n  @Output() toggle = new EventEmitter<number>();\n\n  toggleCompletion(index: number) { \n    this.toggle.emit(index); \n  } \n} \n\n```", "```js\n<ul>\n  <li *ngFor=\"let todo of todos; let index = index\"\n      [class.completed]=\"todo.get('completed')\">\n     <input type=\"checkbox\" [checked]=\"todo.get('completed')\"\n       (change)=\"toggleCompletion(index)\">\n    {{todo.get('label')}}\n  </li>\n</ul>\n```"]