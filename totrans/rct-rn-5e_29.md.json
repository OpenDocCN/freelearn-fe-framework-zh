["```js\nconst reactLogo = \"https://reactnative.dev/docs/assets/favicon.png\";\nconst relayLogo = require(\"./assets/relay.png\");\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Image style={styles.image} source={{ uri: reactLogo }} />\n      <Image style={styles.image} source={relayLogo} />\n    </View>\n  );\n} \n```", "```js\n image: {\n    width: 100,\n    height: 100,\n    margin: 20,\n  }, \n```", "```js\nexport default function App() {\n  const source = require(\"./assets/flux.png\");\n  const [width, setWidth] = useState(100);\n  const [height, setHeight] = useState(100);\n  return (\n    <View style={styles.container}>\n      <Image source={source} style={{ width, height }} />\n      <Text>Width: {width}</Text>\n      <Text>Height: {height}</Text>\n      <Slider\n        style={styles.slider}\n        minimumValue={50}\n        maximumValue={150}\n        value={width}\n        onValueChange={(value) => {\n          setWidth(value);\n          setHeight(value);\n        }}\n      />\n    </View>\n  );\n} \n```", "```js\nconst placeholder = require(\"./assets/placeholder.png\");\ntype PlaceholderProps = {\n  loaded: boolean;\n  style: StyleProp<ImageStyle>;\n};\nfunction Placeholder({ loaded, style }: PlaceholderProps) {\n  if (loaded) {\n    return null;\n  } else {\n    return <Image style={style} source={placeholder} />;\n  }\n} \n```", "```js\ntype Props = {\n  style: StyleProp<ImageStyle>;\n  resizeMode: ImageProps[\"resizeMode\"];\n  source: ImageSourcePropType | null;\n};\nexport default function LazyImage({ style, resizeMode, source }: Props) {\n  const [loaded, setLoaded] = useState(false);\n  return (\n    <View style={style}>\n      {!!source ? (\n        <Image\n          source={source}\n          resizeMode={resizeMode}\n          style={style}\n          onLoad={() => {\n            setLoaded(true);\n          }}\n        />\n      ) : (\n        <Placeholder loaded={loaded} style={style} />\n      )}\n    </View>\n  );\n} \n```", "```js\nconst remote = \"https://reactnative.dev/docs/assets/favicon.png\";\nexport default function LazyLoading() {\n  const [source, setSource] = useState<ImageSourcePropType | null>(null);\n  return (\n    <View style={styles.container}>\n      <LazyImage\n        style={{ width: 200, height: 150 }}\n        resizeMode=\"contain\"\n        source={source}\n      />\n      <Button\n        label=\"Load Remote\"\n        onPress={() => {\n          setSource({ uri: remote });\n        }}\n      />\n    </View>\n  );\n} \n```", "```js\nexport default function RenderingIcons() {\n  const [selected, setSelected] = useState<IconsType>(\"web_app_icons\");\n  const [listSource, setListSource] = useState<IconName[]>([]);\n  const categories = Object.keys(iconNames);\n  function updateListSource(selected: IconsType) {\n    const listSource = iconNames[selected] as any;\n    setListSource(listSource);\n    setSelected(selected);\n  }\n  useEffect(() => {\n    updateListSource(selected);\n  }, []); \n```", "```js\n return (\n    <View style={styles.container}>\n      <View style={styles.picker}>\n        <Picker selectedValue={selected} onValueChange={updateListSource}>\n          {categories.map((category) => (\n            <Picker.Item key={category} label={category} value={category} />\n          ))}\n        </Picker>\n      </View>\n      <FlatList\n        style={styles.icons}\n        data={listSource.map((value, key) => ({ key: key.toString(), value }))}\n        renderItem={({ item }) => (\n          <View style={styles.item}>\n            <Icon name={item.value} style={styles.itemIcon} />\n            <Text style={styles.itemText}>{item.value}</Text>\n          </View>\n        )}\n      />\n    </View>\n  );\n} \n```"]