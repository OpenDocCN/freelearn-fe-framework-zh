- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Appendix
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录
- en: 'Well, my dear reader, we have reached the last part of this book: the summary.
    I sincerely hope you enjoyed reading what I had to say about state management
    libraries in **React Native** and I want to thank you for getting this far. Let
    me take you now on a trip down memory lane of everything we talked about in this
    book. And if afterward you’re not too tired of my thoughts and ruminations, you
    will find a bonus section on recruitment interview questions related to **state
    management**.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我亲爱的读者，我们已经到达了这本书的最后一部分：总结。我真诚地希望你喜欢阅读我关于React Native中状态管理库的讨论，并且我想感谢你一路走来。现在，让我带你回顾一下这本书中我们讨论的所有内容。如果你在之后对我的想法和沉思不太感到疲倦，你将找到关于**状态管理**的招聘面试问题相关的附加部分。
- en: 'In the first chapters of this book, we looked very broadly at the history of
    web development. We saw the evolution of the internet landscape, which led to
    the creation of **ReactJS**. Then, we talked about the evolution of **React**
    itself, which led to the creation of React Native. Knowing how close React Native
    is to ReactJS can be of great help while working on React Native apps. The ReactJS
    community is bigger and more mature than its mobile-first cousin. Many issues
    that React Native developers face can be solved with ReactJS knowledge. There’s
    a notion called the **React mindset**, which is crucial for writing robust, scalable,
    and bug-free apps. There are many great articles on this topic, for example, the
    *Thinking in React* article posted inside the official React documentation. Once
    we learned how to adopt this mindset, we started building our very own app: Funbook.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书的前几章中，我们广泛地探讨了网络开发的历史。我们看到了互联网景观的演变，这导致了**ReactJS**的创建。然后，我们讨论了**React**本身的演变，这导致了React
    Native的创建。了解React Native与ReactJS的紧密联系在开发React Native应用时非常有帮助。ReactJS社区比其移动优先的表亲更大、更成熟。许多React
    Native开发者面临的问题都可以用ReactJS知识来解决。有一个叫做**React心态**的概念，这对于编写健壮、可扩展和无bug的应用至关重要。关于这个主题有很多优秀的文章，例如官方React文档中发布的*Thinking
    in React*文章。一旦我们学会了如何采用这种心态，我们就开始构建我们自己的应用：Funbook。
- en: 'Unsurprisingly, the app we created is a social media clone app. Social media
    apps are an interesting topic for example code, as most of us are very familiar
    with how they should work. At the same time, they are much more complicated than
    the traditional to-do app, present in most ReactJS tutorials. Setting up any mobile
    app is a task on its own. For all the web developers out there, working on mobile
    apps is new territory, with its own tooling and processes. Luckily, we can take
    advantage of **Expo**, and have a functioning and testable app in minutes. Once
    we got comfortable with the basic app setup, we got to coding the real Funbook
    app. We added a few surfaces: Feed, Conversations, Liked Images, and Camera. Then
    we got to think in React! We planned and wrote the underlying components of all
    the surfaces. We used many modern React features, such as hooks and context. By
    the end of [*Chapter 4*](B18396_04.xhtml#_idTextAnchor048), we had a beautiful,
    functioning mobile app, which we could test on real devices or on phone simulators
    on our computer screens. This may seem like a lot of work, but let me assure you:
    before React Native, and a few of its **JavaScript** predecessors, creating mobile
    apps working on **Android** and **iOS** was a lot more work!'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不奇怪，我们创建的应用程序是一个社交媒体克隆应用。社交媒体应用是示例代码的一个有趣话题，因为我们都非常熟悉它们应该如何工作。同时，它们比大多数ReactJS教程中出现的传统待办事项应用要复杂得多。设置任何移动应用本身就是一项任务。对于所有那些网络开发者来说，在移动应用领域工作是一个全新的领域，拥有自己的工具和流程。幸运的是，我们可以利用**Expo**，几分钟内就能拥有一个功能齐全且可测试的应用。一旦我们对基本的应用设置感到舒适，我们就开始编写真正的Funbook应用。我们添加了一些界面：动态、对话、喜欢的图片和相机。然后我们开始用React思考！我们规划和编写了所有界面的底层组件。我们使用了许多现代React特性，例如hooks和context。到**第4章**（B18396_04.xhtml#_idTextAnchor048）结束时，我们拥有了一个美丽、功能齐全的移动应用，我们可以在真实设备上或在我们电脑屏幕上的手机模拟器上对其进行测试。这看起来可能像是一项大量的工作，但让我向你保证：在React
    Native及其一些JavaScript前辈出现之前，创建在**Android**和**iOS**上工作的移动应用要复杂得多！
- en: '[*Chapter 5*](B18396_05.xhtml#_idTextAnchor056), *Implementing Redux in Our
    Funbook App, w*as the first to talk about external solutions for state management
    in React Native apps. The specific solution we talked about was **Redux** and
    **Redux Toolkit**. Redux is the oldest and most widely known and used state management
    library in the React community, as of the time of writing this book. When used
    wisely, it’s a great tool. It requires quite a bit of boilerplate, and its creator
    has doubts about how it’s implemented. However, the team behind Redux Toolkit
    has made great progress in keeping this library developer-friendly and up to date.
    We configured Redux and Redux Toolkit in the Funbook app, and we saw how to use
    them for managing the list of liked images.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第五章*](B18396_05.xhtml#_idTextAnchor056)，*在我们的Funbook应用中实现Redux*，是第一个讨论React
    Native应用中状态管理外部解决方案的章节。我们讨论的具体解决方案是**Redux**和**Redux Toolkit**。截至本书写作时，Redux是React社区中最古老、最广为人知且使用最广泛的状态管理库。如果使用得当，它是一个伟大的工具。它需要相当多的样板代码，而且其创造者对其实现方式有所怀疑。然而，Redux
    Toolkit背后的团队在保持该库对开发者友好和更新方面取得了巨大进步。我们在Funbook应用中配置了Redux和Redux Toolkit，并了解了如何使用它们来管理喜欢的图片列表。'
- en: 'In the next chapter, we talked about a library considered to be the second
    most popular in the React community: **MobX**. By this time, we were armed with
    a sound knowledge of ReactJS, React Native, and some thoughts on how global state
    could be managed by React alone or with Redux. MobX invited us to rethink a few
    preconceptions and look at global state management differently. Instead of passing
    props or actions through an intricate web of components, MobX gives us tools to
    use global state data as any other prop, while only informing components about
    being observed. We learned later that this sort of global state management is
    sometimes called **proxy-based**. The state management library stands between
    the user and the code, managing state in a sort of invisible layer, like a proxy
    on the web. MobX is sometimes compared to **Valtio**, another proxy-based state
    management library.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们讨论了被认为是React社区中第二受欢迎的库：**MobX**。到那时，我们已经掌握了ReactJS、React Native的扎实知识，并对如何仅使用React或与Redux一起管理全局状态有一些思考。MobX邀请我们重新思考一些先入为主的观念，并以不同的方式看待全局状态管理。MobX不是通过复杂的组件网络传递props或actions，而是为我们提供了将全局状态数据作为任何其他prop使用的工具，同时只通知组件它们正在被观察。后来我们了解到这种全局状态管理有时被称为**基于代理的**。状态管理库位于用户和代码之间，以一种类似网络代理的方式在无形层中管理状态。MobX有时与**Valtio**，另一个基于代理的状态管理库相提并论。
- en: 'After learning about MobX observables, actions, and their approach to deriving
    state values (which should be done as much as possible), we were ready to use
    it. We implemented the same functionality as for Redux – managing the list of
    liked images. And once we had that working in MobX, we moved on to the next state
    management library: **XState**.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了MobX的可观察性、动作以及它们推导状态值的方法（应尽可能多地进行）之后，我们准备开始使用它。我们实现了与Redux相同的功能——管理喜欢的图片列表。一旦在MobX中实现了这个功能，我们就转向下一个状态管理库：**XState**。
- en: Xstate is less popular than Redux and MobX, but it offers yet another way of
    looking at global state management. And even better, it offers a dedicated tool
    for doing so! The **Xstate visualizer** is an incredible tool that can be used
    for working in any global state for any app. Being able to see how different pieces
    of state relate to each other can come in handy when you’re tasked with creating
    a new app. Xstate not only provides this great tool, but its creator invites us
    also to take a more mathematical approach to state management. Thanks to him,
    we can learn what a state machine is and that every part of the global state in
    an app should always be in a defined state.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Xstate不如Redux和MobX受欢迎，但它提供了另一种看待全局状态管理的方式。而且，它还提供了一种专门的工具来做这件事！**Xstate可视化器**是一个令人难以置信的工具，可以用于任何应用中的任何全局状态。在创建新应用时，能够看到不同状态片段如何相互关联可能会很有帮助。Xstate不仅提供了这个伟大的工具，而且其创造者还邀请我们采取更数学的方法来管理状态。多亏了他，我们可以学习什么是状态机，以及应用中的每个全局状态部分都应该始终处于定义状态。
- en: After playing around with Xstate, and of course, implementing the list of liked
    images with it, we were ready to move on. The next library we looked at was **Jotai**.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试了Xstate并当然地使用它实现了喜欢的图片列表之后，我们准备继续前进。我们接下来查看的库是**Jotai**。
- en: 'Jotai was considered the new kid on the block when I started writing this book.
    That was many moons ago! As of the time of writing this summary, there are a few
    newer state management libraries. I feared they were not mature enough to be analyzed
    along with big players such as Redux and MobX. Jotai, however, has been holding
    strong over the last few months and getting more and more attention from the community.
    Jotai was heavily inspired by `useState` hooks. The big difference is that Jotai’s
    atoms will be freely available throughout the app, without unpleasant prop drilling
    or extensive boilerplate. Using Jotai for the list of liked images felt, for me,
    a little bit magical: a minimal configuration and we can access pieces of state
    wherever we’d like!'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当我开始写这本书时，Jotai 被视为新晋的佼佼者。那已经是很多个月以前的事情了！在撰写这个总结的时候，有几款新的状态管理库出现。我担心它们还不够成熟，无法与
    Redux 和 MobX 这样的巨头一起分析。然而，Jotai 在过去几个月里一直保持着强劲势头，并越来越受到社区的重视。Jotai 受 `useState`
    钩子的启发很大。最大的不同在于，Jotai 的原子将在整个应用中自由可用，无需不愉快的属性钻取或大量的样板代码。对我来说，使用 Jotai 来处理喜欢的图片列表感觉有点神奇：最少的配置，我们就可以在任何我们想要的地方访问状态片段！
- en: Once we used Jotai in the Funbook app, we were ready to abandon it and move
    on to the next thing. And the next thing was very different from its predecessors
    – **React** **Query**, and the notion that we may not need any state management
    library at all. React Query is not a state management library; it’s a library
    created for better data management and synchronization between an app and the
    server. It aims at reducing network calls while keeping data relevant. It is also
    an incredible solution as far as developer experience is concerned. The documentation
    is exhaustive, and it is accompanied by a specialized blog. Dozens of common developer
    problems are solved within the library itself. We used React Query, or **TanStack
    Query**, for fetching the list of liked images. We were, unfortunately, unable
    to use other features it offers, such as data mutations, as the backend of the
    Funbook app is quite minimal.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在 Funbook 应用中使用了 Jotai，我们就准备放弃它并继续前进。接下来的事情与它的前辈们非常不同——**React Query**，以及我们可能根本不需要任何状态管理库的观念。React
    Query 不是一个状态管理库；它是一个为更好地管理应用和服务器之间的数据同步而创建的库。它的目标是减少网络调用同时保持数据的相关性。在开发者体验方面，它也是一个令人难以置信的解决方案。文档详尽无遗，并配有专门的博客。成百上千的常见开发者问题都在库内部得到了解决。我们使用了
    React Query，或者 **TanStack Query**，来获取喜欢的图片列表。不幸的是，由于 Funbook 应用的后端相当简单，我们无法使用它提供的其他功能，例如数据突变。
- en: 'The creators of React Query ask a very good question: do you really need a
    state management library for your app? Let’s ask ourselves this same question.
    We were able to create the Funbook app using React alone. We were also able to
    use React Query mixed with local state. Does this mean all dedicated state management
    libraries should be wiped from the earth along with this book? Certainly not.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: React Query 的创造者提出了一个非常好的问题：你真的需要为你的应用使用状态管理库吗？让我们也来问自己同样的问题。我们能够仅使用 React 就创建了
    Funbook 应用。我们也曾尝试将 React Query 与本地状态混合使用。这意味着所有专门的状态管理库都应该和这本书一起从地球上抹去吗？当然不是。
- en: Choosing a state management library, when choosing from battle-tested solutions,
    boils down to developer experience. The end user of your app will not know whether
    you’re using Jotai or Redux, but your fellow developers may give you an earful
    about it. Some developers live and breathe Redux, while others would rather not
    touch Redux-based projects. There is a silent global consensus in the community
    that state management libraries should not be used for fetching and persisting
    data in apps. This task should be left for better-suited libraries, such as React
    Query. So, maybe the next app you create will use MobX for local state and React
    Query for fetching data? Or maybe Xstate for local state, **Axios** for fetching,
    and **Async Storage** for persisting state? Or maybe something else completely.
    I believe every state management library has its strong points, as well as weaknesses.
    I also believe discussing which is better is a moot point, as neither is objectively
    better. I hope that thanks to this book, you were able to “dip your toe” in a
    few different solutions and you are more aware of what you personally prefer.
    And once you find what you like, have fun working with it!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个状态管理库，当从经过实战检验的解决方案中进行选择时，这主要取决于开发者的经验。你的应用程序的最终用户不会知道你是否在使用 Jotai 或 Redux，但你的同行开发者可能会对此提出很多意见。一些开发者对
    Redux 如痴如醉，而另一些则宁愿不接触基于 Redux 的项目。在社区中有一个无声的全球共识，即状态管理库不应该用于在应用程序中获取和持久化数据。这项任务应该留给更适合的库，例如
    React Query。所以，也许你下一个创建的应用程序将使用 MobX 进行本地状态管理，React Query 进行数据获取？或者也许使用 Xstate
    进行本地状态管理，**Axios** 进行数据获取，以及 **Async Storage** 进行状态持久化？或者也许是其他完全不同的东西。我相信每个状态管理库都有其优点和缺点。我也相信讨论哪个更好是一个无意义的问题，因为它们在客观上都不是更好的。我希望通过这本书，你能够“浅尝辄止”地了解几种不同的解决方案，并且更加了解你个人的偏好。一旦你找到了你喜欢的，那就享受与之一起工作的乐趣吧！
- en: Bonus content
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 奖励内容
- en: 'Speaking of work: you may find yourself , my dear reader, going through job
    interviews where you are asked about React, React Native, and state management
    solutions. There are a few questions I have gotten myself that I found were either
    very common or very interesting. I’ve compiled a list of those questions in the
    hope that they facilitate your next recruitment. Questions regarding React and
    Redux pop up in most job interviews for roles related to software development
    with React and React Native. Questions about other state management libraries
    may get asked if you specify that you are familiar with the given libraries. To
    be honest, 80% of job offers list React and Redux. I’m hoping this will change
    in the coming months and years, as other state management libraries offer great
    solutions. Here are some common or interesting questions:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到工作：你可能会发现自己，亲爱的读者，正在参加面试，面试官会问你关于 React、React Native 和状态管理解决方案的问题。我遇到过一些问题，我认为这些问题要么非常常见，要么非常有趣。我整理了一份这些问题列表，希望它能帮助你顺利通过下一次招聘。关于
    React 和 Redux 的问题在大多数与 React 和 React Native 软件开发相关的职位面试中都会出现。如果你指定你熟悉给定的库，可能会被问到关于其他状态管理库的问题。说实话，80%
    的工作机会都会列出 React 和 Redux。我希望能在这几个月和几年内有所改变，因为其他状态管理库提供了很好的解决方案。以下是一些常见或有趣的问题：
- en: In React, what is the difference between `props` and `state`?
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 React 中，`props` 和 `state` 之间的区别是什么？
- en: Is it necessary to use an external state management library in a React Native
    app?
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 React Native 应用程序中，使用外部状态管理库是必要的吗？
- en: In Redux, what is a reducer and an action?
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Redux 中，什么是 reducer 和 action？
- en: In Redux, what is the advantage of using selectors?
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Redux 中，使用 selectors 的优势是什么？
- en: In Redux, are you allowed to change state values directly?
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Redux 中，你能否直接更改状态值？
- en: In MobX, what is a model?
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 MobX 中，什么是模型？
- en: In MobX, how do you make a component aware of the global state values?
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 MobX 中，你如何使组件感知全局状态值？
- en: In Xstate, what is a state machine?
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Xstate 中，什么是状态机？
- en: In Xstate, how do you pass additional data through the state machine?
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Xstate 中，你如何通过状态机传递额外的数据？
- en: In Jotai, what is the name of the most basic piece of state?
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Jotai 中，最基本的州状态叫什么名字？
- en: Can you replace all state management with React Query alone?
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能否只用 React Query 就替换所有的状态管理？
- en: I’m giving you only the questions because giving you the answers would be a
    tad too easy, don’t you think? If you must go back in the book and research the
    answers, or maybe simply google them, there’s a better chance the information
    will stick with you.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我只给你这些问题，因为给你答案可能会太简单了，你不这么认为吗？如果你必须回到书中去研究答案，或者也许简单地谷歌一下，那么信息更有可能留在你脑海中。
- en: I sincerely hope you enjoyed reading this book just as much as I enjoyed writing
    it! Thank you for sticking around, and feel free to contact me through Twitter
    (if it still exists by the time this book gets published!). Good night and good
    luck!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我衷心希望您阅读这本书的乐趣和我写作这本书的乐趣一样！感谢您一直陪伴在这里，并且随时可以通过Twitter（如果这本书出版时它仍然存在）联系我！晚安，祝您好运！
