- en: Template and Data Binding Syntax
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板和数据绑定语法
- en: In this chapter, you will learn about Template Syntax and Data Binding provided
    by the Angular framework. Template Syntax and Data Binding mainly focus on the
    UI or view aspects of the application; hence, it is a very important and crucial
    functionality.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习Angular框架提供的模板语法和数据绑定。模板语法和数据绑定主要关注应用程序的UI或视图方面；因此，这是一个非常重要和关键的功能。
- en: In this chapter, you will learn about Template Syntax and the different ways
    to include a template in our components. You will also learn to create components,
    including child components, and use expressions and operators inside the view
    template. You will also focus on how to attach events, attributes, and implement
    directives inside the templates.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习有关模板语法和在我们的组件中包含模板的不同方式。您还将学习创建组件，包括子组件，并在视图模板中使用表达式和运算符。您还将专注于如何在模板中附加事件、属性和实现指令。
- en: Data Binding is one of the key features of Angular and allows us to map data
    from the source to the view target and vice versa. You will learn about different
    ways of Data Binding.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 数据绑定是Angular的关键特性之一，它允许我们将数据从源映射到视图目标，反之亦然。您将学习不同的数据绑定方式。
- en: In this chapter, you will learn to include view template and define Data Bindings
    inside templates with the help of examples we will create while learning.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何在学习过程中创建示例的帮助下，包含视图模板并在模板中定义数据绑定。
- en: 'You will learn and implement the following in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在本章中学习并实现以下内容：
- en: Template Syntax
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板语法
- en: Various ways to include Template Syntax
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含模板语法的各种方式
- en: Template expressions in Angular
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular中的模板表达式
- en: Data Binding syntax
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据绑定语法
- en: Angular Two-way Data Binding
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular双向数据绑定
- en: Property bindings in the template
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板中的属性绑定
- en: Attaching events to the view in templates
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模板中将事件附加到视图
- en: Expressions and statements inside templates
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板中的表达式和语句
- en: Directives inside templates
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板中的指令
- en: Learning about Template Syntax
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习模板语法
- en: The components view is defined using a template, which tells Angular how to
    render the look. Inside the template, we define how the data should appear and
    also attach events using Data Binding.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 组件的视图是使用模板定义的，告诉Angular如何呈现外观。在模板中，我们定义数据应该如何显示，并使用数据绑定附加事件。
- en: Most HTML tags can be used inside the Angular template. We can use and define
    user-defined custom directives.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数HTML标签都可以在Angular模板中使用。我们可以使用和定义用户自定义指令。
- en: 'The general syntax of defining a template for a component is as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为组件定义模板的一般语法如下：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s analyze the preceding code snippet in detail:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析上述代码片段：
- en: We defined a component, `MyTemplateComponent`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了一个组件，`MyTemplateComponent`。
- en: We defined the component view with `template`.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`template`定义了组件视图。
- en: Inside the template, we defined a `<h2>` tag.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板中，我们定义了一个`<h2>`标签。
- en: We defined a `title` variable and assigned a value.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了一个`title`变量并赋予了一个值。
- en: Using the `{{ }}` interpolation, we bound the variable to the template.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`{{ }}`插值，我们将变量绑定到模板上。
- en: 'Run the app, and you should see the following output:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，您应该看到以下输出：
- en: '![](assets/29e6ad6c-1d38-4d20-8513-c7682319f453.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/29e6ad6c-1d38-4d20-8513-c7682319f453.png)'
- en: In the next section, you will learn in detail about the various ways to include
    templates and also about interpolation.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将详细了解包含模板的各种方式，以及插值的相关内容。
- en: Various ways to include Template Syntax
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包含模板语法的各种方式
- en: 'In this section, you will learn about different ways to include templates in
    the component view. There are two ways to include Template Syntax in the component
    syntax:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习有关在组件视图中包含模板的不同方法。在组件语法中包含模板语法有两种方式：
- en: We can define the view template inside the `component` decorator. Using `template`,
    we can include the template inline in the component decorator.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在`component`装饰器内定义视图模板。使用`template`，我们可以在组件装饰器内联包含模板。
- en: We can also include the template using `templateURL`. Using `templateUrl`, we
    write the template elements in a separate file and provide the path of the template
    to the component.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们也可以使用`templateURL`包含模板。使用`templateUrl`，我们将模板元素写在一个单独的文件中，并将模板的路径提供给组件。
- en: '`templateURL` is a much preferred way since it allows us to separate the code
    in a logical way to organize it more effectively.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`templateURL`是一个更受欢迎的方式，因为它允许我们以逻辑方式分离代码，更有效地组织代码。'
- en: Using inline Template Syntax
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用内联模板语法
- en: We discussed including templates in different ways in our component. Let's learn
    how to define our template inside the component.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了在组件中以不同方式包含模板。让我们学习如何在组件内定义我们的模板。
- en: 'The syntax for using templates inside the component decorator is as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件装饰器内使用模板的语法如下：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The most important things to note in the preceding code snippet are as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中需要注意的最重要的事情如下：
- en: We are defining the template inside the `@component` decorator.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`@component`装饰器内定义模板。
- en: The component `class` definition and template are defined in the same file.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组件`class`定义和模板在同一个文件中定义。
- en: Using templateURL to include a template
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用templateURL来包含一个模板
- en: In the preceding code snippet, we created the template and component class in
    the same file. However, when the complexity of the component class increases in
    both template elements and class definitions, it will be difficult to maintain
    it.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们在同一个文件中创建了模板和组件类。然而，当组件类的复杂性在模板元素和类定义中增加时，将很难维护它。
- en: We need to separate the logical class and the view so that it's easy to maintain
    and understand. Now, let's take a look at another way of defining the view template
    for the component using `templateURL`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要分离逻辑类和视图，这样更容易维护和理解。现在，让我们看另一种使用`templateURL`为组件定义视图模板的方式。
- en: 'The syntax of using `templateURL` for viewing is as follows; let''s create
    a file named `app-template.component.ts`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`templateURL`进行查看的语法如下；让我们创建一个名为`app-template.component.ts`的文件：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There will be no visual difference if we use any of the aforementioned ways
    to use a template. It makes sense to create separate files for HTML, CSS, and
    the component class, as it allows us to organize the code better and ultimately
    helps to maintain the codebase when it increases.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用上述任何一种方式来使用模板，将不会有视觉上的区别。为HTML、CSS和组件类创建单独的文件是有意义的，因为这样可以更好地组织代码，并在代码增加时最终有助于维护代码库。
- en: In the next section, you will learn features provided by the Angular framework
    for data and template binding.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习Angular框架为数据和模板绑定提供的功能。
- en: Interpolation in templates
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板中的插值
- en: Double curly braces `{{ }}` are an interpolation in Angular. They're a way to
    map the text between the braces to a component property. We have already used
    and implemented interpolation in various examples throughout the chapters.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 双大括号`{{ }}`是Angular中的插值。它们是一种将大括号之间的文本映射到组件属性的方式。我们已经在整个章节中的各种示例中使用和实现了插值。
- en: 'In the template we will write, the value is written inside double curly braces,
    as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将要编写的模板中，值写在双大括号内，如下所示：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s quickly create a simple example to understand the interpolation. In
    the `app.component.ts` file, let''s define a variable named `title`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速创建一个简单的例子来理解插值。在`app.component.ts`文件中，让我们定义一个名为`title`的变量：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, we need to display the value of `title` in the template. Update the `app.component.html`
    file, and add the following line of code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在模板中显示`title`的值。更新`app.component.html`文件，并添加以下代码行：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, try changing the value of `title` in the class; we will see the updated
    value reflecting in the template automatically. That's interpolation, one of the
    key features we love in Angular.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试更改类中`title`的值；我们将看到模板中自动反映出更新后的值。这就是插值，这是我们在Angular中喜爱的一个关键特性。
- en: Now that we know how to use interpolation, we will deal with how to add expressions
    inside the template in the next section.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何使用插值，接下来我们将处理如何在模板中添加表达式。
- en: Template expressions in Angular
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular中的模板表达式
- en: We can use expressions inside the template; expressions execute and result in
    a value.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在模板中使用表达式；表达式执行并产生一个值。
- en: Just like in JavaScript, we can use expression statements with the exception
    of using assignments, new and chaining operators.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在JavaScript中一样，我们可以使用表达式语句，但不能使用赋值、new和链式操作符。
- en: 'Let''s look at some examples of template expressions:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些模板表达式的例子：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code snippet we are doing arithmetic operations with the variable
    `tax`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们正在使用变量`tax`进行算术运算。
- en: If you have used any programming languages, chances are that you will find this
    section a cake-walk. Just like in any other language, we can make use of arithmetic
    operators.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用过任何编程语言，很可能会发现本节非常简单。就像在任何其他语言中一样，我们可以使用算术运算符。
- en: 'Let''s quickly create an example. Update the **`app.component.html`** file,
    and add the following code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速创建一个示例。更新**`app.component.html`**文件，并添加以下代码：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code snippet, we used the expressions in the template. We added
    and did arithmetic operations with our `tax` variable.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们在模板中使用了表达式。我们对`tax`变量进行了加法和算术运算。
- en: 'In the update `app.component.ts` file, add the following code snippet:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新的`app.component.ts`文件中，添加以下代码片段：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We are creating an `AppComponent` class and declaring two variables, `title`
    and `tax`. We are assigning initial values to `title` and `tax`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在创建一个`AppComponent`类并声明两个变量，`title`和`tax`。我们为`title`和`tax`分配了初始值。
- en: 'Run the application, and we should see the output of the preceding code snippet,
    as shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，我们应该看到前面代码片段的输出，如下截图所示：
- en: '![](assets/de8e8af2-e5a2-42cd-870e-c4f4a37cd48c.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/de8e8af2-e5a2-42cd-870e-c4f4a37cd48c.png)'
- en: So far, you have learned about using templates in view, interpolations, and
    using expressions inside the template. Now, let's learn about attaching events
    and implementing directives inside the templates.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经学习了如何在视图中使用模板、插值以及在模板中使用表达式。现在，让我们学习如何在模板中附加事件并实现指令。
- en: Attaching events to views in templates
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模板中将事件附加到视图
- en: In the previous sections, we covered how to define and include templates in
    our component along with interpolation and expressions inside the template.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们介绍了如何在组件中定义和包含模板以及在模板中使用插值和表达式。
- en: In this section, you will learn to attach events to the elements in the template.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何将事件附加到模板中的元素。
- en: Events are regular JavaScript methods that are triggered based on user actions,
    such as `onclick` and `onmouseover`. Methods are a set of statements defined to
    execute a particular task.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 事件是基于用户操作触发的常规JavaScript方法，例如`onclick`和`onmouseover`。方法是一组定义为执行特定任务的语句。
- en: 'The general syntax of attaching an event is as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 附加事件的一般语法如下：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s analyze the preceding code in detail:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前面的代码：
- en: We are creating a `button` in the template.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在模板中创建了一个`button`。
- en: We are attaching a `click` event to the button.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在将`click`事件附加到按钮上。
- en: With the `click` event, we are binding the `function_name()` method.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`click`事件，我们绑定了`function_name()`方法。
- en: Now, let's update our `component` file with the preceding code and see it in
    action.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们用上述代码更新我们的`component`文件，并看看它的运行情况。
- en: 'We will first update our `app.component.html` file, and add the following code
    snippet:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先更新我们的`app.component.html`文件，并添加以下代码片段：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Some quick notes on the preceding code snippet:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 关于上述代码片段的一些快速注释：
- en: We added `button` to our template.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在模板中添加了`button`。
- en: We attached an event called `updateTax` to the button on the `click` event.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`click`事件的按钮上附加了一个名为`updateTax`的事件。
- en: 'Now, it''s time to update our `app.component.ts` file with the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候用以下代码更新我们的`app.component.ts`文件了：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s analyze the preceding code snippet:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析上述代码片段：
- en: We are defining and creating a component--`AppComponent`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义和创建一个组件--`AppComponent`。
- en: We have already defined two variables, `title` and `tax`, and assigned some
    values to them.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经定义了两个变量，`title`和`tax`，并为它们分配了一些值。
- en: We are defining and creating an `updateTax` method, which when called will update
    the `tax` variable.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义和创建一个`updateTax`方法，当调用时将更新`tax`变量。
- en: The updated `tax` value will be displayed in the template.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新后的`tax`值将显示在模板中。
- en: 'Now, run the app, and we should see the output as shown in the following screenshot;
    click on the Update Tax button, and you should see the data getting updated in
    the template:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行应用程序，我们应该看到如下截图所示的输出；点击“更新税收”按钮，您应该看到模板中的数据得到更新：
- en: '![](assets/08491992-6727-4b69-ad4e-ab4913c1892f.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/08491992-6727-4b69-ad4e-ab4913c1892f.png)'
- en: Great! So, in this section, you learned to attach events in your template and
    also to define methods in our component class to update the properties of the
    component. In the next section, you will learn to implement directives inside
    templates.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！所以，在本节中，您学会了在模板中附加事件，还学会了在组件类中定义方法来更新组件的属性。在下一节中，您将学会在模板中实现指令。
- en: Implementing directives inside templates
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模板中实现指令
- en: We are making good progress in learning the Template Syntax. We discussed how
    to include Template Syntax, use interpolation in templates, and attach events.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在学习模板语法方面取得了良好的进展。我们讨论了如何包含模板语法，如何在模板中使用插值，并附加事件。
- en: Just like events, we can also implement directives and attributes inside the
    template. In this section, we will explain about implementing directives inside
    templates.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 就像事件一样，我们也可以在模板中实现指令和属性。在本节中，我们将解释如何在模板中实现指令。
- en: 'Take a look at the following code snippet:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下代码片段：
- en: '[PRE12]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Does the preceding code look similar to the way used to define custom directives
    in an earlier version of Angular? That's correct. Custom directives are now called
    components in the Angular framework.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码看起来是否类似于在早期版本的Angular中定义自定义指令的方式？没错。在Angular框架中，自定义指令现在被称为组件。
- en: We can create and define custom directives or tags according to the requirements
    of our application.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据应用程序的要求创建和定义自定义指令或标签。
- en: There is no relationship between the directory structure and child component,
    but as a good practice always keep logical parent-child relationship components
    under one directory; this helps in better organizing the code.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 目录结构和子组件之间没有关系，但作为一个良好的实践，始终将逻辑上的父子关系组件放在一个目录下；这有助于更好地组织代码。
- en: We will use the component we created in the preceding section. We created a
    component--`data-binding.component.ts`. We will now create a new component, `list-products`,
    which we will be able to bind it to the `data-binding` component.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们在上一节中创建的组件。我们创建了一个组件--`data-binding.component.ts`。现在我们将创建一个新的组件，`list-products`，我们将能够将其绑定到`data-binding`组件。
- en: 'Add the following code snippet to the `list-products.component.ts` file:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码片段添加到`list-products.component.ts`文件中：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s analyze the preceding code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析前面的代码：
- en: We have created a new component, that is, the `list-products` component.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个新的组件，即`list-products`组件。
- en: In the component definition, we mentioned `selector` as `list-products`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件定义中，我们将`selector`命名为`list-products`。
- en: The `@Component` decorator provides the Angular metadata for the component.
    Using the CSS `selector`, we can display the output of the template or the view
    inside the `list-products` tags.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@Component`装饰器为组件提供了Angular元数据。使用CSS `selector`，我们可以在`list-products`标签内显示模板或视图的输出。'
- en: We can give and use any name for `selector`, but make sure that we use the same
    name in the parent component, calling it as well.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以为`selector`指定任何名称，但确保在父组件中也使用相同的名称进行调用。
- en: Now that we have informed Angular that we need to place the output of the `list-products`
    component inside the custom tag `list-products`, we need to place the child component
    tag inside the parent component template.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经告诉Angular我们需要将`list-products`组件的输出放在自定义标签`list-products`中，我们需要在父组件模板中放置子组件标签。
- en: 'We need to use the selector tag in order to identify the `list-products` component
    in the template `data-binding.component.html` file:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用选择器标签来在模板`data-binding.component.html`文件中识别`list-products`组件：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We are all set. Now, run the app, and we should see the output of the preceding
    code and the child component being displayed along with the `data-binding.component.html`
    template view:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好了。现在运行应用程序，我们应该看到前面的代码和子组件的输出以及`data-binding.component.html`模板视图一起显示出来：
- en: '![](assets/75cb882e-f4ab-4b8d-a0af-24fd6299a8f5.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/75cb882e-f4ab-4b8d-a0af-24fd6299a8f5.png)'
- en: Awesome! So, you now learned how to include child components in your templates.
    Any Angular application will rarely be complete without using any of these. We
    will continue to learn and build more examples in the next section, where you
    will learn how to use property binding inside templates.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！所以，你现在学会了如何在模板中包含子组件。任何一个Angular应用程序如果没有使用其中任何一个都很少完整。我们将在下一节继续学习和构建更多示例，在那里你将学习如何在模板中使用属性绑定。
- en: Bindings in the template
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板中的绑定
- en: In this section, we will expand our example created in the preceding section.
    We will cover how to use property bindings in templates. Properties are attributes
    of the elements in the template, for example, class, ID, and so on.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将扩展在前一部分创建的示例。我们将介绍如何在模板中使用属性绑定。属性是模板中元素的属性，例如class、ID等。
- en: 'The general syntax of HTML attributes is as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: HTML属性的一般语法如下：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The important points to note in the preceding code snippet are as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码片段中需要注意的重点如下：
- en: We are defining an `html` element using the `button` tag.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`button`标签定义了一个`html`元素。
- en: We are adding the `class` attribute to the `button` tag.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们向`button`标签添加了`class`属性。
- en: We are attaching an on `click` event calling a method, `updateTax` to the button.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们附加了一个`click`事件，调用了一个名为`updateTax`的方法到按钮上。
- en: We have a `disabled` attribute; the button element will be displayed in the
    page and it will be `disabled` if the value of `state` is `texas`. if not, it
    will display an enabled button.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有一个`disabled`属性；如果`state`的值是`texas`，按钮元素将显示在页面上并且将被`disabled`。如果不是，它将显示一个启用的按钮。
- en: Using property binding, we can dynamically change the attribute values of `disabled`;
    when the values are updated or changed in the component class, the view gets updated.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用属性绑定，我们可以动态更改`disabled`的属性值；当组件类中的值更新或更改时，视图也会更新。
- en: 'Let''s update the `app.component.html` file and update it to add the attribute
    to the element in the template:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新`app.component.html`文件，并将属性添加到模板中的元素：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Take a close look, and you will find that we have added the `disabled` attribute;
    based on the value of `state`, the button will either be enabled or disabled.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细观察，你会发现我们已经添加了`disabled`属性；根据`state`的值，按钮将被启用或禁用。
- en: 'Now, in the `app.component.ts` file, let''s define a property variable named
    `state` and assign a value it:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`app.component.ts`文件中，让我们定义一个名为`state`的属性变量并为其赋值：
- en: '[PRE17]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding code, we just defined a new variable named `state` and assigned
    a value to it. Based on the value of `state`--assigned or updated--the button
    will be either enabled or disabled.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们只是定义了一个名为`state`的新变量，并为其赋值。根据`state`的值——分配或更新——按钮将被启用或禁用。
- en: 'Run the application, and we should see the output shown in the following screenshot:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，我们应该看到以下截图中显示的输出：
- en: '![](assets/212f0643-0885-4a3a-860d-ddbbdc314755.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/212f0643-0885-4a3a-860d-ddbbdc314755.png)'
- en: Amazing! You learned all about templates to be used in Angular components.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！你学会了如何在Angular组件中使用模板。
- en: We discussed how to write Template Syntax, different ways to include Template
    Syntax, how to attach events, attach properties to the elements, and also how
    to implement directives in the templates.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了如何编写模板语法，不同的包含模板语法的方式，如何将事件附加到元素，将属性附加到元素，以及如何在模板中实现指令。
- en: In the next section, you will learn about Data Binding--one of the most crucial
    and striking features of Angular, and one that is most commonly used with Template
    Syntax.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将了解数据绑定——这是Angular最重要和最突出的特性之一，也是最常与模板语法一起使用的特性之一。
- en: Angular Data Binding
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular数据绑定
- en: Angular provides a mechanism to share data between the same view and model easily.
    We can associate and assign a value in a class component and use it in the view.
    It provides many kinds of Data Binding. We will start by understanding the various
    Data Bindings available and then move on to create some examples.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Angular提供了一种在同一视图和模型之间轻松共享数据的机制。我们可以将一个值关联和赋值给一个类组件，并在视图中使用它。它提供了许多种数据绑定。我们将首先了解各种可用的数据绑定，然后继续创建一些示例。
- en: 'Data Bindings can be grouped into three main categories:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 数据绑定可以分为三个主要类别：
- en: One-way Data Binding, that is, from data source to view.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单向数据绑定，即从数据源到视图。
- en: One-way Data Binding, that is, from view to data source.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单向数据绑定，即从视图到数据源。
- en: Two-way Data Binding, that is, from view target to data source and from data
    source to view.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双向数据绑定，即从视图目标到数据源和从数据源到视图。
- en: One-way Data Binding - Data source to view
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单向数据绑定 - 数据源到视图
- en: In this section, you will learn about One-way Data Binding from data source
    to view target. In the next section, you will learn about One-way Data Binding
    from template to data source.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习从数据源到视图目标的单向数据绑定。在下一节中，您将学习从模板到数据源的单向数据绑定。
- en: One-way Data Binding in Angular refers to a data flow from data source to view.
    In other words, we can say that whenever values and data are updated, they reflects
    in the view target.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular中，单向数据绑定指的是从数据源到视图的数据流。换句话说，我们可以说每当值和数据更新时，它们会反映在视图目标中。
- en: 'One-way Data Binding from data source to view target applies to the following
    HTML element attributes:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 单向数据绑定从数据源到视图目标应用于以下HTML元素属性：
- en: '`interpolation`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`插值`'
- en: '`property`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`属性`'
- en: '`attribute`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`属性`'
- en: '`class`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`类`'
- en: '`style`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`样式`'
- en: Now that we know the attributes and elements that One-way Data Binding from
    data source to target applies to, let's learn how to use them in our code.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了单向数据绑定从数据源到目标应用于哪些属性和元素，让我们学习如何在我们的代码中使用它们。
- en: Let's take a look at general syntax to write One-way Data Binding from data
    source to view template.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下从数据源到视图模板的单向数据绑定的一般语法。
- en: '[PRE18]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s analyze the previously defined syntax in detail:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析先前定义的语法：
- en: '`interpolation` is a value written inside double curly braces as shown in the
    preceding code.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`插值`是在双大括号中写入的值，就像上面的代码中所示的那样。'
- en: The text between the braces `{{ }}` is often the name of a component property.
    Angular replaces that name with the string value of the corresponding component
    property.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大括号`{{ }}`之间的文本通常是组件属性的名称。Angular会用相应组件属性的字符串值替换该名称。
- en: We can define One-way Data Binding for `attributes` and `properties` and by
    writing inside the square brackets `[]`.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以通过在方括号`[]`中写入来定义`属性`和`属性`的单向数据绑定。
- en: The `value_to_display` and `expression` properties are defined in the component
    class.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value_to_display`和`expression`属性是在组件类中定义的。'
- en: Some developers also prefer to use canonical form by appending prefix to the
    attribute.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发人员还喜欢使用规范形式，通过在属性后添加前缀。
- en: '[PRE19]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Use the prefix bind with the property or attribute along with the element's
    definition.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`bind`前缀与元素的定义一起，绑定属性或属性。
- en: 'Now that we know the syntax for writing a One-way Data Binding, it''s time
    to write examples for this:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了写单向数据绑定的语法，是时候为此编写示例了：
- en: '[PRE20]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s quickly analyze some of the key points in the preceding code snippet:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速分析一下上述代码片段中的一些关键点：
- en: We are using interpolation--the value inside the double curly braces `{{ }}`--to
    display the value from the data source to the template. The property `title` will
    be set in the component model.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在使用插值--双大括号`{{ }}`中的值--来显示来自数据源到模板的值。属性`title`将在组件模型中设置。
- en: We are defining the `style` attribute `color` by binding the value dynamically
    to the variable defined in the component class `colorVal`.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过将值动态绑定到组件类中定义的变量`colorVal`，来定义`style`属性`color`。
- en: We are defining the `ngClass` attribute and, based on the condition, whichever
    property, `specialClass` or `specialClass2`, is set to true, the corresponding
    class will be assigned.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义`ngClass`属性，并且根据条件，无论是`specialClass`还是`specialClass2`属性中的哪一个被设置为true，相应的类都将被分配。
- en: We are providing the image's `src` attribute value dynamically by binding the
    property `imageUrl` in the component class.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过将组件类中的属性`imageUrl`绑定到`src`属性值，动态地提供了图片的`src`属性值。
- en: 'Let''s quickly define our variables in the component class `one-way.component.ts`
    file:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速在组件类`one-way.component.ts`文件中定义我们的变量：
- en: '[PRE21]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the preceding code snippet, we have defined our `colorVal`, `isStyleVisible`,
    and `imageUrl` variables.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码片段中，我们已经定义了我们的`colorVal`、`isStyleVisible`和`imageUrl`变量。
- en: 'Now, let''s run the preceding code, and you should see the output shown in
    the following screenshot:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行上述代码，你应该会看到以下截图中显示的输出：
- en: '![](assets/4fe82ab8-7a74-4de7-8d01-8c0127cb0912.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4fe82ab8-7a74-4de7-8d01-8c0127cb0912.png)'
- en: If you note carefully, in all the preceding code snippets, we are binding the
    data only one-way, that is, from data source to view target only.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细注意，在所有上述的代码片段中，我们只是单向绑定数据，也就是说，只从数据源到视图目标。
- en: So, essentially, it's read-only data for your end user. In next section we will
    learn about One-way Data Binding from view template to the data source.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从本质上讲，这是给你的最终用户的只读数据。在下一节中，我们将学习有关从视图模板到数据源的单向数据绑定。
- en: 'Consider the following hands-on exercise: Try creating more variables and mapping
    them into the views.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下的实践练习：尝试创建更多的变量并将它们映射到视图中。
- en: One-way Data Binding - View template to data source
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单向数据绑定 - 视图模板到数据源
- en: In preceding section, we learnt about One-way Data Binding from data source
    to view template.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们学习了从数据源到视图模板的单向数据绑定。
- en: In this section we will learn about One-way Data Binding from view template
    to data source.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习从视图模板到数据源的单向数据绑定。
- en: One-way Data Binding from view template to data source is implemented mainly
    for events.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 从视图模板到数据源的单向数据绑定主要用于事件。
- en: 'The general syntax for creating a binding is given below:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 创建绑定的一般语法如下：
- en: '[PRE22]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The binding from view to data source is mainly used for invoking methods or
    capturing event interactions.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 从视图到数据源的绑定主要用于调用方法或捕获事件交互。
- en: Example of a one way binding from view template to data source is given below
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 下面给出了从视图模板到数据源的单向绑定示例
- en: '[PRE23]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We are attaching the `click` event and when the button is clicked, `updateTax`
    method will be called.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们附加了`click`事件，当按钮被点击时，将调用`updateTax`方法。
- en: We learned about One-way Data Binding from data source to template as well as
    view template to data source.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了从数据源到模板以及从视图模板到数据源的单向数据绑定。
- en: In the next section, you will learn about Two-way Data Binding, displaying the
    data properties as well as updating those properties when changes are made to
    the element's property.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习双向数据绑定，显示数据属性以及在对元素的属性进行更改时更新这些属性。
- en: Angular Two-way Data Binding
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular双向数据绑定
- en: Two-way Data Binding has to be one of the most important features in Angular.
    Two-way Data Binding helps express the input and output binding into a single
    notation using the `ngModel` directive.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 双向数据绑定必须是Angular中最重要的功能之一。双向数据绑定帮助使用`ngModel`指令将输入和输出绑定表达为单个符号。
- en: Two-way Data Binding is a mechanism to map the data directly from model to view
    and vice versa. This mechanism allows us to keep data in sync between view and
    model, that is, from data source to view using `[]` and from view to data source
    using `()`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 双向数据绑定是一种机制，可以直接将数据从模型映射到视图，反之亦然。这种机制允许我们在视图和模型之间保持数据同步，即从数据源到视图使用`[]`，从视图到数据源使用`()`。
- en: In Angular, we achieve Two-way Data Binding using `ngModel`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular中，我们使用`ngModel`实现双向数据绑定。
- en: 'The general syntax of a Two-way Data Binding is as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 双向数据绑定的一般语法如下：
- en: '[PRE24]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the preceding syntax, note the following:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述语法中，请注意以下内容：
- en: We are binding the element using `ngModel` written inside `[()]`
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`ngModel`写在`[()]`内绑定元素
- en: We have associated Two-way Data Binding for the `input` element
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为`input`元素关联了双向数据绑定
- en: Don't forget to import `FormsModule` from `@angular/forms` or else you will
    get errors. `ngModel` creates a `FormControl` instance from a domain model and
    binds it to a form control element.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记从`@angular/forms`导入`FormsModule`，否则会出错。`ngModel`从领域模型创建一个`FormControl`实例，并将其绑定到表单控件元素。
- en: 'Now, let''s create an example using `ngModel`:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`ngModel`创建一个示例：
- en: '[PRE25]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We added a `div` element and, using Data Binding, we mapped the value of the
    input element using `ngModel`. Using `ngModel` helps track the value, user interaction,
    and validation status of the control and keeps the view synced with the model.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个`div`元素，并使用数据绑定，将输入元素的值映射到`ngModel`。使用`ngModel`有助于跟踪控件的值、用户交互和验证状态，并保持视图与模型同步。
- en: 'Now, when we start typing in the `input` element of type text, we see that
    what we type is copied to our `div` element as a `value`:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们开始在类型为文本的`input`元素中输入时，我们看到我们输入的内容被复制到我们的`div`元素中作为`value`：
- en: '![](assets/2f1461c0-df0c-41d9-8a42-bcc8262209d1.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2f1461c0-df0c-41d9-8a42-bcc8262209d1.png)'
- en: Great! We have made quite a bit of progress with respect to Data Binding and
    templates. With the all knowledge we have gained throughout this chapter, we can
    create beautifully elegant, yet fully powerful application interfaces.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！就数据绑定和模板而言，我们在这一章中取得了相当大的进展。凭借我们在整个章节中获得的所有知识，我们可以创建出优雅而强大的应用程序界面。
- en: Summary
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Template Syntax and Data Binding are the skeleton and soul of Angular applications.
    We covered templates: how to include them in different ways and use expressions
    inside view templates. We then walked through templates by attaching events and
    attributes to them.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 模板语法和数据绑定是Angular应用程序的骨架和灵魂。我们介绍了模板：如何以不同的方式包含它们并在视图模板中使用表达式。然后，我们通过将事件和属性附加到模板来遍历模板。
- en: We explored aspects of Data Binding in Angular applications and focused on how
    to implement Data Binding for values inside the template.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了Angular应用程序中数据绑定的方面，并专注于如何为模板内的值实现数据绑定。
- en: 'In Data Binding, we delved into its broad categories. We explored available
    ways of Data Bindings: One-way Data Binding and Two-way Data Binding.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据绑定中，我们深入探讨了它的广泛类别。我们探索了数据绑定的可用方式：单向数据绑定和双向数据绑定。
- en: 'Using Data Binding and templates together, we can almost create mock functional
    screens for our Angular applications: that''s the power of Data Binding and Template
    Syntax.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 利用数据绑定和模板结合在一起，我们几乎可以为我们的Angular应用程序创建模拟的功能屏幕：这就是数据绑定和模板语法的力量。
- en: So, go ahead and let your creativity fly! Good luck.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，继续发挥你的创造力吧！祝你好运。
- en: In the next chapter, you will learn about advanced forms in Angular, learn how
    to use and master reactive forms. We tackle the reactive part of reactive forms
    by emphasizing the relationship between your html models and your `NgModel` so
    every change on a given form is propagated to the model
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习有关Angular中的高级表单，学习如何使用和掌握响应式表单。我们通过强调您的html模型和您的`NgModel`之间的关系来解决响应式表单的响应部分，因此给定表单上的每个更改都会传播到模型
