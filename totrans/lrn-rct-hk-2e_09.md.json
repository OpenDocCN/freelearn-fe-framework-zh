["```js\nconst [state, action, isPending] = useActionState(actionFn, initialState) \n```", "```js\nfunction actionFn(currentState, formData) { \n```", "```js\n    $ cp -R Chapter06_4 Chapter07_1 \n    ```", "```js\n    import { useContext, **useActionState** } from 'react' \n    ```", "```js\n     const [error, submitAction, isPending] = useActionState( \n    ```", "```js\n     async (currentState, formData) => { \n    ```", "```js\n     const title = formData.get('title')\n          const content = formData.get('content') \n    ```", "```js\n     const newPost = { title, content, author: username, featured: false }\n          try {\n            await createPostMutation.mutateAsync(newPost) \n    ```", "```js\n     } catch (err) {\n            return err\n          }\n        },\n      ) \n    ```", "```js\n     return (\n        <form **action****=****{submitAction}**> \n    ```", "```js\n     <input type='submit' value='Create' **disabled****=****{isPending}** />\n          {**error** && <div style={{ color: 'red' }}>{**error**.toString()}</div>} \n    ```", "```js\n    $ npm run dev \n    ```", "```js\n    $ cp -R Chapter07_1 Chapter07_2 \n    ```", "```js\n    export function Comment({ content, author }) { \n    ```", "```js\n     let startTime = performance.now()\n      while (performance.now() - startTime < 1) {\n        // do nothing for 1 ms\n      } \n    ```", "```js\n     return (\n        <div style={{ padding: '0.5em 0' }}>\n    <span>{content}</span>\n    <i> ~ {author}</i>\n    </div>\n      )\n    } \n    ```", "```js\n    import { Comment } from './Comment.jsx' \n    ```", "```js\n    export function CommentList() {\n      const comments = Array.from({ length: 1000 }, (_, i) => ({\n        id: i,\n        content: `Comment #${i}`,\n        author: 'test',\n      })) \n    ```", "```js\n     return (\n        <div>\n          {comments.map((comment) => (\n            <Comment {...comment} key={comment.id} />\n          ))}\n        </div>\n      )\n    } \n    ```", "```js\n    import { useState } from 'react'\n    import { CommentList } from './CommentList.jsx' \n    ```", "```js\n    export function CommentSection() {\n      const [showComments, setShowComments] = useState(false) \n    ```", "```js\n     function handleClick() {\n        setShowComments((prev) => !prev)\n      } \n    ```", "```js\n     return (\n        <div>\n    <button onClick={handleClick}>\n            {showComments ? 'Hide' : 'Show'} comments\n          </button>\n          {showComments && <CommentList />}\n        </div>\n      )\n    } \n    ```", "```js\n    import { CommentSection } from '@/components/comment/CommentSection.jsx' \n    ```", "```js\n     <i>\n            Written by <b>{author}</b>\n          </i>\n    **<****br** **/>**\n    **<****br** **/>**\n    **<****CommentSection** **/>**\n        </div>\n      )\n    } \n    ```", "```js\n    $ npm run dev \n    ```", "```js\nconst [isPending, startTransition] = useTransition() \n```", "```js\n    $ cp -R Chapter07_2 Chapter07_3 \n    ```", "```js\n    import { useState, **useTransition** } from 'react' \n    ```", "```js\n    export function CommentSection() {\n      const [showComments, setShowComments] = useState(false)\n    **const** **[isPending, startTransition] =** **useTransition****()** \n    ```", "```js\n     function handleClick() {\n    **startTransition****(****() =>** **{**\n    setShowComments((prev) => !prev)\n        **})**\n      } \n    ```", "```js\n     <button onClick={handleClick} **disabled****=****{isPending}**> \n    ```", "```js\n    $ npm run dev \n    ```", "```js\nconst [optimisticState, addOptimistic] = useOptimistic(state, updateFn) \n```", "```js\n    $ cp -R Chapter07_3 Chapter07_4 \n    ```", "```js\n    import { useContext } from 'react'\n    import { UserContext } from '@/contexts/UserContext.js' \n    ```", "```js\n    export function CreateComment({ addComment }) { \n    ```", "```js\n     const [username] = useContext(UserContext) \n    ```", "```js\n     async function submitAction(formData) {\n        const content = formData.get('content')\n        const comment = {\n          author: username,\n          content,\n        }\n        await addComment(comment)\n      } \n    ```", "```js\n     return (\n        <form action={submitAction}>\n    <input type='text' name='content' />\n    <i> ~ {username}</i>\n    <input type='submit' value='Create' />\n    </form>\n      )\n    } \n    ```", "```js\n    import { useContext, useState, useOptimistic } from 'react'\n    import { UserContext } from '@/contexts/UserContext.js'\n    import { CreateComment } from './CreateComment.jsx' \n    ```", "```js\n     const comments = Array.from({ length: 1000 }, (_, i) => ({\n        id: i,\n        content: `Comment #${i}`,\n        author: 'test',\n      })) \n    ```", "```js\n     const [username] = useContext(UserContext) \n    ```", "```js\n     const [comments, setComments] = useState([]) \n    ```", "```js\n     const [optimisticComments, addOptimisticComment] = useOptimistic(\n        comments, \n    ```", "```js\n     (state, comment) => [\n          ...state,\n          {\n            ...comment,\n            sending: true,\n            id: Date.now(),\n          },\n        ],\n      ) \n    ```", "```js\n     async function addComment(comment) {\n        addOptimisticComment(comment)\n        await new Promise((resolve) => setTimeout(resolve, 1000))\n        setComments((prev) => [...prev, comment])\n      } \n    ```", "```js\n     return (\n        <div>\n          {**optimisticComments**.map((comment) => (\n            <Comment {...comment} key={comment.id} />\n          ))} \n    ```", "```js\n     {optimisticComments.length === 0 && <i>No comments</i>} \n    ```", "```js\n     **{username &&** **<****CreateComment****addComment****=****{addComment}** **/>****}**\n    </div>\n      )\n    } \n    ```", "```js\n    export function Comment({ content, author, **sending** }) { \n    ```", "```js\n     let startTime = performance.now()\n      while (performance.now() - startTime < 1) {\n        // do nothing for 1 ms\n      } \n    ```", "```js\n     return (\n        <div style={{ padding: '0.5em 0', **color:****sending** **? '****gray****'** **:** **'****black****' }}>** \n    ```", "```js\n    $ npm run dev \n    ```"]