- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Animations and Transitions
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画和过渡
- en: In the previous chapter, you learned about routes and how to set up an essential
    routing navigation system using Vue Router. Empowering a smooth transition between
    different routes or providing your application with the proper animation effects
    when users interact with it is the next level to achieve.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了路由以及如何使用Vue Router设置一个基本的路由导航系统。实现不同路由之间的平滑过渡或为用户提供与应用程序交互时的适当动画效果是达到更高水平的下一步。
- en: Throughout this chapter, you will explore the essentials of Vue transitions—how
    to create your transitions, including single-element animations and animations
    that use a group of elements, and how to combine them with external libraries
    for further custom animations. You will also learn how to create full-page animations
    with transition routes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将探索Vue过渡的要点——如何创建你的过渡，包括单元素动画和使用一组元素的动画，以及如何将它们与外部库结合以实现更复杂的自定义动画。你还将学习如何使用过渡路由创建全页动画。
- en: By the end of the chapter, you will be ready to implement and handle the fundamental
    transition and animation effects for any Vue application.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将准备好实现和处理任何Vue应用程序的基本过渡和动画效果。
- en: 'This chapter covers the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: Understanding Vue transitions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Vue过渡
- en: Exploring JavaScript Hooks for transitions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索过渡的JavaScript钩子
- en: Transitioning groups of elements
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过渡元素组
- en: Examining transition routes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查过渡路由
- en: Using the GSAP library for animation
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GSAP库进行动画
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, you need to set up a basic Vue project following the instructions
    in [*Chapter 1*](B18645_01.xhtml#_idTextAnchor015), *Starting Your First Vue Project*.
    You also need to add Vue Router, as learned about in [*Chapter 7*](B18645_07.xhtml#_idTextAnchor248),
    *Routing*, in some of its examples and exercises. It’s recommended to create a
    single file Vue component to practice the examples and concepts mentioned easily.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你需要根据[*第1章*](B18645_01.xhtml#_idTextAnchor015)中“开始你的第一个Vue项目”的说明设置一个基本的Vue项目。你还需要添加Vue
    Router，正如在[*第7章*](B18645_07.xhtml#_idTextAnchor248)中“路由”部分所了解的，在一些示例和练习中使用它。建议创建一个单独的Vue组件来方便地练习提到的示例和概念。
- en: 'You can find this chapter’s source code here: [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到本章的源代码：[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08)。
- en: Understanding Vue transitions
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Vue过渡
- en: Unlike other frameworks, Vue.js provides developers with built-in support for
    animating Vue.js applications, including transitions and animations. Transitioning
    is implemented in such a simple manner that developers can easily configure and
    add it to their applications. The Vue.js transition mechanism supports CSS transitions,
    programmatic manipulation with JavaScript, and even integration with third-party
    animation libraries such as `Animate.css`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他框架不同，Vue.js为开发者提供了内置的动画支持，包括过渡和动画。过渡的实现方式非常简单，开发者可以轻松地配置并将其添加到他们的应用程序中。Vue.js的过渡机制支持CSS过渡、使用JavaScript进行程序性操作，甚至可以与第三方动画库如`Animate.css`集成。
- en: Before diving into this topic, let’s discuss the difference between transitions
    and animations. A **transition** happens when a component (or element) moves from
    one state to another, such as hovering on a button, navigating from one page to
    another, displaying a pop-up modal, and so on. Meanwhile, **animations** are like
    transitions but are not limited to just two states.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入这个主题之前，让我们讨论一下过渡和动画之间的区别。**过渡**发生在组件（或元素）从一个状态移动到另一个状态时，例如在按钮上悬停、从一个页面导航到另一个页面、显示弹出模态等。与此同时，**动画**类似于过渡，但并不局限于仅两个状态。
- en: Understanding the basics of transitions will allow you to get started with animations.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 理解过渡的基础知识将使你能够开始学习动画。
- en: Using the transition element
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用过渡元素
- en: To access the code file for this example, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.01)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问本例的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.01)
- en: 'In this example, to enable transitions for a single component or element, Vue.js
    provides the built-in `transition` component, which will wrap around the targeted
    element, as seen in `./Example8.01/src/components/Example8-01.vue`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，为了使单个组件或元素启用过渡效果，Vue.js 提供了内置的 `transition` 组件，该组件将围绕目标元素包裹，如 `./Example8.01/src/components/Example8-01.vue`
    中所示：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `transition` component adds two transition states—`enter` and `leave`—for
    any targeted element or component, including components with conditional rendering
    (`v-if`) and conditional display (`v-show`):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition` 组件为任何目标元素或组件添加两个过渡状态——`enter` 和 `leave`——包括具有条件渲染 (`v-if`) 和条件显示
    (`v-show`) 的组件：'
- en: '`enter`: This transition state happens when the component *enters* the DOM'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enter`：当组件 *进入* DOM 时发生此过渡状态'
- en: '`leave`: This transition state happens when the component *leaves* the DOM'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`leave`：当组件 *离开* DOM 时发生此过渡状态'
- en: The `transition` component receives a prop called `name` that represents the
    name of the transition—in this case, it’s `fade-in`—and is also the prefix for
    the transition class names, which will be discussed next.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition` 组件接收一个名为 `name` 的属性，表示过渡的名称——在本例中是 `fade-in`——同时也是过渡类名的前缀，接下来将讨论这一点。'
- en: Exploring transition classes
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索过渡类
- en: Vue.js implements a CSS-based and class-based transition effect for `leave`
    and `enter`—hence, the transition will be applied to the target component using
    a set of class selectors.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 实现了基于 CSS 和基于类的 `leave` 和 `enter` 过渡效果——因此，过渡将应用于目标组件，使用一组类选择器。
- en: Each of these class selectors has the `v-` prefix in case there is no `name`
    prop given for the `transition` component. The standard classes are grouped into
    two main groups.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类选择器都有 `v-` 前缀，以防 `transition` 组件未提供 `name` 属性。标准类分为两组。
- en: 'The first group of transition classes is for the `enter` transition when the
    component is first displayed. Here is a list of the `enter` transition classes:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第一组过渡类是组件首次显示时的 `enter` 过渡。以下是 `enter` 过渡类的列表：
- en: '`v-enter-from` (or `<name>-enter-from`): This is the starting state and is
    added to the component before the component is added or updated. This class will
    be removed after the component is inserted into the DOM and the transition finishes.
    In the `<style>` section of `./Example8.01/src/components/Example8-01.vue`, we
    will set the `.fade-in-enter-from` starting state as completely hidden with `opacity:
    0`:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-enter-from`（或 `<name>-enter-from`）：这是起始状态，在组件添加或更新之前添加到组件中。此类将在组件插入 DOM
    并完成过渡后移除。在 `./Example8.01/src/components/Example8-01.vue` 的 `<style>` 部分中，我们将设置
    `.fade-in-enter-from` 起始状态为完全隐藏，使用 `opacity: 0`：'
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`v-enter-active` (or `<name>-enter-active`): This class defines the delay,
    duration, and easing curve when the component is actively entering the transition.
    It will be added to the component before the component is inserted, applied to
    the component during the entire entering phase, and removed once the effect completes.
    Using `Example 8-01` from the previous section, let’s add `.fade-in-enter-active`,
    which will transition into an adjusted `opacity` state within `3` seconds:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-enter-active`（或 `<name>-enter-active`）：此类定义了组件在过渡过程中活跃时的延迟、持续时间和缓动曲线。它将在组件插入之前添加到组件上，在整个进入阶段应用于组件，并在效果完成后移除。使用上一节中的
    `Example 8-01`，让我们添加 `.fade-in-enter-active`，它将在 `3` 秒内过渡到调整后的 `opacity` 状态：'
- en: '[PRE6]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`v-enter-to` (or `<name>-enter-to`): This is the last sub-state of entering,
    where the effect frame is added after the component is inserted and removed when
    the effect finishes. In our example, we do not need to define anything since the
    `opacity` value for this state should be `1`.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-enter-to`（或 `<name>-enter-to`）：这是进入的最后子状态，其中在组件插入后添加效果帧，并在效果完成后移除。在我们的例子中，我们不需要定义任何内容，因为此状态应具有
    `opacity` 值为 `1`。'
- en: 'The second group of classes consists of the `leave` transitions, which trigger
    when the component is disabled or removed from view:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第二组类包括 `leave` 过渡，当组件被禁用或从视图中移除时触发：
- en: '`v-leave-from` (or `<name>-leave-from`): This is the starting state for the
    leaving transition. As with `v-enter-to`, we don’t need to define styling effects
    for this state.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-leave-from`（或 `<name>-leave-from`）：这是离开过渡的起始状态。与 `v-enter-to` 一样，我们不需要为此状态定义样式效果。'
- en: '`v-leave-active` (or `<name>-leave-active`): This is applied during the leaving
    phase and acts similarly to `v-enter-active`. Since we want to have a fade-out
    effect, we will use the same styling as with `fade-in-enter-active`:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-leave-active`（或 `<name>-leave-active`）：这在离开阶段应用，其行为类似于 `v-enter-active`。由于我们想要有一个淡出效果，我们将使用与
    `fade-in-enter-active` 相同的样式：'
- en: '[PRE9]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`v-leave-to` (or `<name>-leave-to`): This is the ending state, with similar
    behavior to `v-enter-to`. Since the component is going to disappear from view,
    we will reuse the styling defined for the starting phase of `fade-in-enter-from`
    for `fade-in-leave-to`:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-leave-to`（或 `<name>-leave-to`）：这是结束状态，其行为与 `v-enter-to` 类似。由于组件将从视图中消失，我们将重用为
    `fade-in-enter-from` 的起始阶段定义的样式来为 `fade-in-leave-to`：'
- en: '[PRE12]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following screenshot is a recap of all the states of `transition` described
    so far:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是到目前为止描述的所有 `transition` 状态的总结：
- en: '![Figure 8.1 – Diagram of transition phases](img/B18645_08_01.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – 过渡阶段图](img/B18645_08_01.jpg)'
- en: Figure 8.1 – Diagram of transition phases
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 过渡阶段图
- en: In this section, we looked at three different `enter` transition states and
    three `leave` transition states. We also walked through using a transition state
    to slowly fade in some text when the text component enters a user’s view, and
    this also applies when the text disappears from the user’s view.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了三种不同的 `enter` 过渡状态和三种 `leave` 过渡状态。我们还介绍了使用过渡状态在文本组件进入用户视图时缓慢淡入一些文本，当文本从用户视图中消失时也适用。
- en: In the next section, we will explore adding animation effects to a component
    using these transition states that we have learned about.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何使用我们学到的这些过渡状态为组件添加动画效果。
- en: An animation for a component
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件的动画
- en: To access the code file for this example, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.02)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此示例的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.02)
- en: Since an animation is basically an extended form of a transition (with more
    than two states), it is applied in the same way as a transition, with the exception
    that `v-enter` will only be removed for an `animationend` event triggered by Vue.js.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于动画基本上是过渡（具有两个以上状态）的扩展形式，因此它以与过渡相同的方式应用，唯一的区别是 `v-enter` 只会在 Vue.js 触发的 `animationend`
    事件中移除。
- en: Note
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`animationend` is a DOM event that is fired once the CSS animation finishes
    execution, with the condition that the target element still exists within the
    DOM and the animation is still attached to that element.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`animationend` 是一个 DOM 事件，当 CSS 动画执行完成后会触发，条件是目标元素仍然存在于 DOM 中，并且动画仍然附加到该元素上。'
- en: For example, in the `<template>` section in *Exercise 8.02*, we can define a
    new transition called `slid`e using an animation CSS effect as a wrapper for the
    `h1` element that displays `msg`. This transition provides the animation effect
    of sliding from the left-hand side of the screen to the middle on entering and
    vice versa on leaving.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 *练习 8.02* 的 `<template>` 部分中，我们可以定义一个新的过渡 `slid`，使用动画 CSS 效果作为显示 `msg`
    的 `h1` 元素的包装器。这个过渡提供了从屏幕左侧滑入中间并在离开时相反的动画效果。
- en: 'To get started, generate a `vue` starter project using the CLI with the following
    command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，使用 CLI 生成一个 `vue` 起始项目，命令如下：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, open up the project, go into `Example8.02/src/components/Example8-02.vue`,
    and then modify the existing `<``h1>{{msg}}</h1>` code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开项目，进入 `Example8.02/src/components/Example8-02.vue`，然后修改现有的 `<``h1>{{msg}}</h1>`
    代码：
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In `<style>`, we need to define keyframes for the `slide` animation effect:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<style>` 中，我们需要为 `slide` 动画效果定义关键帧：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The related transition classes will be assigned the following styling:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的过渡类将被分配以下样式：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This means at the starting phase of `enter` and the ending phase of `leave`,
    the text position will be `-100px` from the designated position on the page. The
    browser will animate the element using the `slide` keyframe for a duration of
    5 seconds, and in the `active` state of leaving, the animation will be exactly
    the opposite of the one in the active state of entering.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在`enter`的起始阶段和`leave`的结束阶段，文本位置将位于页面指定位置`-100px`处。浏览器将使用`slide`关键帧在5秒内动画化元素，并且在离开的`active`状态下，动画将与进入的`active`状态中的动画正好相反。
- en: 'You’ll also want to add `show` as a local data variable. You can do this by
    modifying the `<script setup>` section, as shown in the following code block:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你还想要添加`show`作为本地数据变量。你可以通过修改`<script setup>`部分来实现，如下面的代码块所示：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'With that, we have implemented our animation. Now, comes the next challenge:
    what if we want to combine different animation or transition effects with `leave`
    and `enter` states, or use an external CSS library for these states? Let’s look
    at custom transition classes.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就实现了我们的动画。接下来，下一个挑战是：如果我们想将不同的动画或过渡效果与`leave`和`enter`状态结合使用，或者为这些状态使用外部
    CSS 库，该怎么办？让我们看看自定义过渡类。
- en: Exploring custom transition classes
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索自定义过渡类
- en: In this section, again, we’ll be starting from the default starter project created
    with `npm init vue@3`. Instead of setting the transition name and letting the
    Vue.js mechanism populate the required class names, there is an option to provide
    custom classes through the following attributes and replace the conventional defaults.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们再次从使用`npm init vue@3`创建的默认起始项目开始。我们不是设置过渡名称，让 Vue.js 机制填充所需的类名，而是可以通过以下属性提供自定义类，并替换传统默认值。
- en: 'For entering a state, use the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于进入状态，使用以下方法：
- en: '`enter-from-class`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enter-from-class`'
- en: '`enter-active-class`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enter-active-class`'
- en: '`enter-to-leave`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enter-to-leave`'
- en: 'For leaving a state, use the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于离开状态，使用以下方法：
- en: '`leave-from-class`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`leave-from-class`'
- en: '`leave-active-class`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`leave-active-class`'
- en: '`leave-to-class`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`leave-to-class`'
- en: 'We will start by creating a file based on the previous example (*Exercise 8.02*),
    but now we will use a `swing` animation effect for the active state of entering,
    and the `tada` effect for the active state of leaving. We will define the `enter-active-class`
    and `leave-active-class` attributes in our `transition` component as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个基于之前示例（*练习 8.02*）的文件开始创建，但现在我们将为进入状态使用`swing`动画效果，为离开状态使用`tada`动画效果。我们将在`transition`组件中定义`enter-active-class`和`leave-active-class`属性，如下所示：
- en: '[PRE20]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After that, in the `<style>` section, we just need to define `.tada` and `.swing`
    without any suffix pattern:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`<style>`部分，我们只需要定义`.tada`和`.swing`，无需任何后缀模式：
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The preceding code demonstrates the following animation classes:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码演示了以下动画类：
- en: '`tada`, which applies CSS animation styles defined by `tada` to its target
    element *both before and after* the execution, with a duration of 2 seconds'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tada`，在执行前后都应用于其目标元素的由`tada`定义的 CSS 动画样式，持续时间为2秒'
- en: '`swing`, which applies CSS animation styles defined by `swing` to its target
    element both *before and after the execution*, with the origin point of transformation
    set to the top-center edge (`transform-origin`) and with a duration of 2 seconds'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`swing`，在执行前后都应用于其目标元素的由`swing`定义的 CSS 动画样式，变换的起点设置为顶部中心边缘（`transform-origin`），持续时间为2秒'
- en: 'To set up the animation CSS styles, we add the dedicated keyframes:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置动画 CSS 样式，我们添加了专用的关键帧：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: For the `tada` animation, we set different CSS styles for each target keyframe
    (a time percentage of the animation sequence), such as resizing (`scale3d()`)
    and rotating (`rotate3d()`) the element in a 3D space. For the `swing` animation,
    we set different rotation effects for keyframes of `20%`, `40%`, `60%`, `80%`,
    and `100%`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`tada`动画，我们为每个目标关键帧（动画序列的时间百分比）设置了不同的 CSS 样式，例如在 3D 空间中调整元素的大小（`scale3d()`）和旋转（`rotate3d()`）。对于`swing`动画，我们为`20%`、`40%`、`60%`、`80%`和`100%`的关键帧设置了不同的旋转效果。
- en: 'You’ll also want to add a `show data` variable. You can do this by modifying
    the existing `export`, as shown in the following code block:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你还想要添加一个`show data`变量。你可以通过修改现有的`export`来实现，如下面的代码块所示：
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When we run the application using the `yarn dev` command, we will have our
    animations for entering and leaving set separately. The following screenshot displays
    how the screen will now appear:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`yarn dev`命令运行应用程序时，我们将分别设置进入和离开的动画。以下截图显示了屏幕现在的样子：
- en: '![Figure 8.2 – The swing animation effect in action](img/B18645_08_02.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – 动画效果的实际应用](img/B18645_08_02.jpg)'
- en: Figure 8.2 – The swing animation effect in action
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – 动画效果的实际应用
- en: 'You should see the welcome text shrink while rotating, transitioning from what
    was shown in *Figure 8**.2* to what is shown in *Figure 8**.3*:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到欢迎文本在旋转的同时缩小，从 *图 8**.2* 中显示的内容过渡到 *图 8**.3* 中显示的内容：
- en: '![Figure 8.3 – The tada animation effect in action](img/B18645_08_03.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – tada 动画效果的实际应用](img/B18645_08_03.jpg)'
- en: Figure 8.3 – The tada animation effect in action
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – tada 动画效果的实际应用
- en: In this section, we looked at creating custom transition effects. As an example,
    we made `swing` and `tada`. We did this by defining the transition classes in
    our stylesheet and then adding keyframes for each of the effects. This technique
    can be used to create all kinds of custom transition effects. In the next section,
    we’ll look at JavaScript Hooks and how they can be used for more complex animations.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了创建自定义过渡效果。作为一个例子，我们创建了 `swing` 和 `tada`。我们通过在样式表中定义过渡类，然后为每个效果添加关键帧来实现这一点。这种技术可以用来创建各种自定义过渡效果。在下一节中，我们将探讨
    JavaScript 钩子及其如何用于更复杂的动画。
- en: Exploring JavaScript Hooks for transitions
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索用于过渡的 JavaScript 钩子
- en: To access the code file for this example, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.03)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此示例的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.03)
- en: As we learned in the previous section, we can use custom transition classes
    to integrate external third-party CSS animation libraries for styling effects.
    However, there are external libraries that are JavaScript-based rather than CSS-based,
    such as Velocity.js or GSAP, which require Hooks to be set using JavaScript events
    and external animation handlers.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在上一节所学，我们可以使用自定义过渡类来集成外部第三方 CSS 动画库以实现样式效果。然而，也有一些基于 JavaScript 而不是 CSS 的外部库，如
    Velocity.js 或 GSAP，它们需要通过 JavaScript 事件和外部动画处理程序设置钩子。
- en: 'To use the Velocity.js or GSAP libraries in the Vue app, you need to install
    them separately by using the `npm install` or `yarn add` command, as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Vue 应用中使用 Velocity.js 或 GSAP 库，您需要分别使用 `npm install` 或 `yarn add` 命令进行安装，如下所示：
- en: 'To install Velocity.js, use these commands:'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要安装 Velocity.js，请使用以下命令：
- en: '[PRE24]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To install GSAP, use these commands:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要安装 GSAP，请使用以下命令：
- en: '[PRE27]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Being a Vue.js component means the `transition` component supports binding
    custom handlers to a list of events as props. Let’s take a look at the following
    example:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 Vue.js 组件，`transition` 组件支持将自定义处理程序绑定到事件列表的 props。让我们看看以下示例：
- en: '[PRE30]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We bind the animation methods programmatically to the respective events on
    the `transition` element:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过编程方式将动画方法绑定到 `transition` 元素上的相应事件：
- en: '`beforeEnter` is the animation state before the component is inserted—similar
    to the `v-enter-from` phase.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beforeEnter` 是组件插入之前的动画状态——类似于 `v-enter-from` 阶段。'
- en: '`enter` is the animation state during the entire entering phase—similar to
    the `v-enter-active` phase.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enter` 是整个进入阶段的动画状态——类似于 `v-enter-active` 阶段。'
- en: '`leave` for the animation during the entire leaving phase. This is similar
    to the `v-leave-active` phase.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`leave` 在整个离开阶段应用于动画。这与 `v-leave-active` 阶段类似。'
- en: 'We need to define these event handlers in the `methods` section of the `Example8.03/src/components/Example8-03.vue`
    component’s configuration:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在 `Example8.03/src/components/Example8-03.vue` 组件配置的 `methods` 部分定义这些事件处理程序：
- en: '[PRE31]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In this example, we will create our animation events using the `gsap.to()`
    and `gsap.timeline()` functionalities provided by the GSAP library, as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将使用 GSAP 库提供的 `gsap.to()` 和 `gsap.timeline()` 功能来创建我们的动画事件，如下所示：
- en: '[PRE32]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'For both `gsap.to` and the `return` variable of `gsap.timeline().to`, the syntax
    is pretty straightforward:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `gsap.to` 和 `gsap.timeline().to` 的 `return` 变量，语法相当简单：
- en: '[PRE33]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Most of the effect properties have a similar syntax to CSS, so they’re straightforward
    to learn how to use. In addition, we must pass a `done` callback received from
    the event emitter for events such as `enter` and `leave` to `onComplete` to make
    sure it is triggered and that the Hooks will not be called synchronously. Also,
    note that all the event emitters also pass `el`, which is a pointer to the current
    element in transition for use.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数效果属性与 CSS 的语法类似，因此它们的使用方法很简单。此外，我们必须将事件发射器接收到的 `done` 回调传递给 `onComplete`，以确保它被触发，并且钩子不会同步调用。此外，请注意，所有事件发射器也会传递
    `el`，这是一个指向当前过渡元素的指针，用于使用。
- en: Other than these three events, there are other events we can bind, depending
    on the complexity of the animations and transitions, such as `afterEnter`, `enterCancelled`,
    `beforeLeave`, `afterLeave`, and `leaveCancelled`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这三个事件之外，我们还可以根据动画和转换的复杂性绑定其他事件，例如 `afterEnter`、`enterCancelled`、`beforeLeave`、`afterLeave`
    和 `leaveCancelled`。
- en: 'Please note that it’s highly recommended to add `v-bind:css="false"` (or `:css="false"`)
    if you are using transitions with JavaScript only. This is to prevent Vue.js from
    detecting and applying any related CSS, therefore avoiding transition interference
    by accident:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您仅使用 JavaScript 进行转换，强烈建议添加 `v-bind:css="false"`（或 `:css="false"`）。这是为了防止
    Vue.js 侦测并应用任何相关的 CSS，从而避免意外地发生转换干扰：
- en: '[PRE34]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In this section, we looked at how external JavaScript libraries can be used
    for animations. We also implemented a simple tween using the GSAP library, making
    use of animation and timeline animation functions.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了如何使用外部 JavaScript 库进行动画。我们还使用 GSAP 库实现了一个简单的缓动动画，利用了动画和时间轴动画功能。
- en: Let’s now learn how to add a new message using an animation effect.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来学习如何使用动画效果添加新消息。
- en: Exercise 8.01 – adding a new message with an animation effect
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 8.01 – 添加带有动画效果的新消息
- en: In this exercise, you will use the `transition` component and its CSS transition
    classes to add animation effect to a component.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将使用 `transition` 组件及其 CSS 转换类来为组件添加动画效果。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.01).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.01)。
- en: 'We are going to create a message editor in which the user will compose and
    submit a new message. The new message will be displayed instantly with a sliding-from-the-right
    animation effect. To do this, see the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个消息编辑器，用户可以在其中编写并提交新消息。新消息将立即通过从右滑动的动画效果显示。为此，请参阅以下内容：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter08/Exercise8.01`
    folder by using the following commands in order:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以使用 `npm init vue@3` 生成的应用程序作为起点，或者在每个代码仓库的根目录中，使用以下命令按顺序导航到 `Chapter08/Exercise8.01`
    文件夹：
- en: '[PRE35]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory) or your preferred IDE.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 VS Code 中打开练习项目（在项目目录中使用 `code .` 命令）或您首选的 IDE。
- en: 'Create a new component called `Exercise8-01.vue` located in the `/src/components/`
    folder. In this component, `<template>` will contain two element sections:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/src/components/` 文件夹中创建一个名为 `Exercise8-01.vue` 的新组件。在这个组件中，`<template>`
    将包含两个元素部分：
- en: '`textarea`, for composing a new message with a button to submit it.'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`textarea`，用于编写新消息并带有提交按钮。'
- en: '`section`, where the newly composed message will be displayed:'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`section`，其中将显示新编写的消息：'
- en: '[PRE37]'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Next, wrap the whole `message` section with the `transition` element, to prepare
    for our animation:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将整个 `message` 部分包裹在 `transition` 元素中，为我们的动画做准备：
- en: '[PRE50]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Let’s define a method to update the message text called `onSendClick` by adding
    the following `script` code:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义一个名为 `onSendClick` 的方法来更新消息文本，通过添加以下 `script` 代码：
- en: '[PRE56]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Next, we will define the `slide-right` animation effect using `@keyframes`
    in our `style` section by using the following command:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 `@keyframes` 在我们的 `style` 部分中定义 `slide-right` 动画效果，使用以下命令：
- en: '[PRE72]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: This means it will re-position the element that has this effect horizontally
    (on the *x*-axis) to the original starting point, `(0,0)`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着它将具有此效果的元素在水平方向（在*x*轴上）重新定位到原始起点，（0，0）。
- en: 'Now, we will define the two classes, one for sliding in from left to right
    (`slide-right`) and one from right to left (`slide-left`):'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将定义两个类，一个用于从左到右滑动进入（`slide-right`），另一个用于从右到左滑动（`slide-left`）：
- en: '[PRE79]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Add `border-top:0` as the starting point for our `slide-right` transition to
    add a bit of an effect to `border-top` of this section:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`border-top:0`作为我们的`slide-right`过渡的起点，为这个部分的`border-top`添加一点效果：
- en: '[PRE88]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Next, using what we have learned about custom transition classes, let’s bind
    `enter-active` to the `slide-right` class, and similarly bind `leave-active` to
    `slide-left`. We will then add these three properties to the `transition` element
    added in *step 4*:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用我们关于自定义过渡类的知识，让我们将`enter-active`绑定到`slide-right`类，并将`leave-active`绑定到`slide-left`。然后，我们将这三个属性添加到在*步骤4*中添加的`transition`元素中：
- en: '[PRE91]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Add CSS stylings using CSS Flexbox to make the editor look nice:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用CSS Flexbox添加CSS样式，使编辑器看起来更美观：
- en: '[PRE96]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Finally, run the application using the following command:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用以下命令运行应用程序：
- en: '[PRE112]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Upon visiting `http://localhost:3000` in the browser, the previous code will
    generate a component that will display the typed message with a sliding animation
    effect, as shown in *Figure 8**.4*:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中访问`http://localhost:3000`，前面的代码将生成一个组件，该组件将以滑动动画效果显示输入的消息，如图*图8**.4*所示：
- en: '![Figure 8.4 – Message editor text area](img/B18645_08_04.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4 – 消息编辑器文本区域](img/B18645_08_04.jpg)'
- en: Figure 8.4 – Message editor text area
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 消息编辑器文本区域
- en: 'The following screenshot shows how the message component appears with a slide-from-left-to-right
    animation effect:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了消息组件在滑动从左到右动画效果下的外观：
- en: '![Figure 8.5 – The message in transition for display](img/B18645_08_05.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图8.5 – 用于显示的消息过渡](img/B18645_08_05.jpg)'
- en: Figure 8.5 – The message in transition for display
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 – 用于显示的消息过渡
- en: 'After animating in from the left, the component should stop in the centered
    position, as shown in *Figure 8**.6*:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在从左侧动画进入后，组件应停在居中位置，如图*图8**.6*所示：
- en: '![Figure 8.6 – Message after the animation](img/B18645_08_06.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图8.6 – 动画后的消息](img/B18645_08_06.jpg)'
- en: Figure 8.6 – Message after the animation
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 – 动画后的消息
- en: This exercise helped you to get used to some of the `transform` effects in CSS,
    such as `translateX` and `transition`. It also demonstrates how easy it is to
    add animation to an element in a Vue application.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习帮助你熟悉了CSS中的一些`transform`效果，例如`translateX`和`transition`。它还展示了在Vue应用中添加动画是多么简单。
- en: But what about transitioning with multiple elements in the same group, such
    as a list? We will find out in the next topic.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果同一组中有多个元素需要过渡，比如一个列表，怎么办呢？我们将在下一个主题中找到答案。
- en: Transitioning groups of elements
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元素组的过渡
- en: To access the code file for this example, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.04)
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此示例的代码文件，请参阅[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Example8.04)
- en: So far, we have gone through the fundamentals of Vue transition elements for
    simple components and elements, with both custom CSS-only and JavaScript-only
    support for animations. Next, we will explore how to apply a transition to a group
    of components – for instance, a list of items that will be rendered simultaneously
    by using `v-for`.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了Vue过渡元素的基本知识，用于简单组件和元素，同时支持仅CSS和仅JavaScript的动画。接下来，我们将探讨如何将过渡效果应用到一组组件上——例如，使用`v-for`同时渲染的项目列表。
- en: Vue.js provides another component for this specific purpose, the `transition-group`
    component.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js为这个特定目的提供了一个组件，即`transition-group`组件。
- en: 'We will now assume that we have a list of messages displayed on a feed, and
    we would like to add a transition to this list to provide some kind of effect
    when each item appears on the screen. Take the following component code, for instance
    (`./Example8.04/src/components/Example8-04.vue`):'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在假设我们有一个显示在信息流上的消息列表，并且我们希望为这个列表添加一个过渡效果，以便在屏幕上每个项目出现时提供某种效果。以下是一个组件代码示例（`./Example8.04/src/components/Example8-04.vue`）：
- en: '[PRE113]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: The component contains a `button` element that binds to the `showList` method,
    and a conditional list element based on the `show` variable. This list element
    renders a list of `messages` whenever the **Show list** button is clicked.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 组件包含一个绑定到`showList`方法的`button`元素，以及一个基于`show`变量的条件列表元素。每当点击**显示列表**按钮时，此列表元素会渲染`messages`列表。
- en: 'Let’s wrap the list elements with a `transition-group` component and pass the
    same props we used previously for our `transition` component—`name="fade"`. Both
    `transition-group` and `transition` receive the same props:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将列表元素包裹在`transition-group`组件中，并传递我们之前用于`transition`组件的相同属性——`name="fade"`。`transition-group`和`transition`都接收相同的属性：
- en: '[PRE114]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'We need to set the CSS styling effect for the transition effect passed as `fade`,
    following the same syntax rules for `transition` classes:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为传递给`fade`的过渡效果设置CSS样式效果，遵循与`transition`类相同的语法规则：
- en: '[PRE115]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Upon running the application using the `yarn dev` command, your list’s item
    will have a fading effect when it appears. The following screenshot displays how
    your screen should appear:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`yarn dev`命令运行应用程序后，列表项在出现时将具有淡入效果。以下截图显示了您的屏幕应该如何显示：
- en: '![Figure 8.7 – Fading of the list item](img/B18645_08_07.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![图8.7 – 列表项的淡入](img/B18645_08_07.jpg)'
- en: Figure 8.7 – Fading of the list item
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7 – 列表项的淡入
- en: 'Note that unlike the `transition` component, which does not render any wrapper
    container element at all, `transition-group` will render an actual element if
    you define an element’s tag name by using a `tag` prop, such as a `div` wrapper
    element, as in the following code:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，与完全不渲染任何包装容器元素的`transition`组件不同，如果使用`tag`属性定义元素的标签名（例如，以下代码中的`div`包装元素），`transition-group`将渲染一个实际元素：
- en: '[PRE116]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'In the browser, the actual HTML output will look as follows:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，实际的HTML输出将如下所示：
- en: '![Figure 8.8 – Transition container element rendered according to the tag attribute](img/B18645_08_08.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![图8.8 – 根据标签属性渲染的过渡容器元素](img/B18645_08_08.jpg)'
- en: Figure 8.8 – Transition container element rendered according to the tag attribute
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8 – 根据标签属性渲染的过渡容器元素
- en: Furthermore, all the `transition` classes will only be applied to the list item
    elements that have the `v-for` attribute and not to the wrapper.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，所有`transition`类仅应用于具有`v-for`属性的列表项元素，而不是包装器。
- en: Finally, you *must* have the `:key` attribute for every list item in order for
    Vue.js to index and know which item to apply the transition to.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了使Vue.js能够索引并知道要将过渡应用于哪个项目，每个列表项都必须有`:key`属性。
- en: We will now create a moving effect on the list.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将在列表上创建一个移动效果。
- en: Creating a moving effect while transitioning a list
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在转换列表时创建移动效果
- en: In many cases, we want to add additional animation to each list item during
    its position transitioning, not only during its visibility transitioning. Position
    transitioning happens when shuffling, sorting, filtering, and so on are applied
    to the given list. The list items are already visible, and only change in their
    position — hence, using `enter` and `leave` won’t work.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，我们希望在列表项的位置转换过程中添加额外的动画，而不仅仅是其可见性转换过程中。位置转换发生在对给定列表进行洗牌、排序、过滤等操作时。列表项已经可见，只是位置发生变化——因此，使用`enter`和`leave`是不起作用的。
- en: 'To achieve this animation goal, `transition-group` provides us another attribute,
    `v-move`; this attribute allows us to add additional animation effects to the
    list elements when each of the target elements changes its position:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这个动画目标，`transition-group`提供了另一个属性，`v-move`；这个属性允许我们在目标元素更改其位置时，为列表元素添加额外的动画效果：
- en: '[PRE117]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'They can also be manually assigned using the `move-class` attribute:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用`move-class`属性手动分配：
- en: '[PRE118]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Alternatively, we can simply define the CSS class with a prefix that matches
    the `name` attribute, as in the following:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以简单地定义一个与`name`属性匹配的前缀的CSS类，如下所示：
- en: '[PRE119]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: The Vue engine will automatically detect and attach the relevant class for a
    `transition` effect when it is applicable.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 当适用时，Vue引擎将自动检测并附加相关的`transition`效果类。
- en: Next, we will look at making animations on the initial rendering of a page or
    component.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨在页面或组件的初始渲染上制作动画。
- en: Configuring an animation on initially rendering
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置初始渲染时的动画
- en: 'Usually, the list of items will be displayed on the first initial page load,
    and our animation won’t work because the element is already in View. To trigger
    the animation, we need to use a different transition attribute, `appear`, to force
    the animation when the page initially renders, right after it has been loaded:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，项目列表将在第一次页面加载时显示，并且我们的动画将不起作用，因为元素已经处于视图状态。要触发动画，我们需要使用不同的过渡属性 `appear`，在页面最初渲染、加载完毕后强制动画：
- en: '[PRE120]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'We can also set Hooks with `v-on:after-appear`, `v-on:appear`, `v-on:after-appear`,
    and `v-on:appear-cancelled`, or we can create custom classes by using the following
    format:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 `v-on:after-appear`、`v-on:appear`、`v-on:after-appear` 和 `v-on:appear-cancelled`
    设置钩子，或者我们可以使用以下格式创建自定义类：
- en: '[PRE121]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Note that in case you use the JavaScript Hooks related to `appear`, you need
    to set the `appear` prop to `true` along with binding the Hooks. Otherwise, it
    won’t work.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果您使用与 `appear` 相关的 JavaScript 钩子，您需要将 `appear` 属性设置为 `true` 并绑定钩子。否则，它将不起作用。
- en: Animating on render is a commonly used feature applicable to many situations,
    such as fading in components, as we did here. In the next section, we will look
    at sorting a list of messages with an animation.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在渲染时进行动画是常用功能，适用于许多情况，例如淡入组件，就像我们在这里做的那样。在下一节中，我们将探讨使用动画对消息列表进行排序。
- en: Exercise 8.02 – sorting a list of messages with an animation
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 8.02 – 使用动画对消息列表进行排序
- en: In this short exercise, we will implement an animation effect on a list of elements
    using the `transition-group` component.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简短的练习中，我们将使用 `transition-group` 组件在元素列表上实现动画效果。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.02).
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.02)。
- en: 'Based on the code of *Exercise 8.01*, within the `Exercise8-01.vue` component,
    we will add additional functionality to the message list: **sorting**. Upon sorting
    (A-Z or Z-A), there will be a flipping animation effect applied to the list. To
    do this, see the following:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 *练习 8.01* 的代码，在 `Exercise8-01.vue` 组件中，我们将向消息列表添加额外的功能：**排序**。在排序（A-Z 或 Z-A）时，将对列表应用翻转动画效果。要实现这一点，请参阅以下内容：
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter08/Exercise8.02`
    folder by using the following commands in order:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm init vue@3` 生成的应用程序作为起点，或在代码仓库的根目录下，使用以下命令按顺序导航到 `Chapter08/Exercise8.02`
    文件夹：
- en: '[PRE122]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory) or your preferred IDE.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 VS Code 中打开练习项目（在项目目录中使用 `code .` 命令）或您偏好的 IDE。
- en: 'Let’s wrap the list of messages with a `transition-group` component. Do not
    forget to set the `tag` name to `div`, and add a `flip` animation by using the
    `name` attribute:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们用 `transition-group` 组件包裹消息列表。别忘了将 `tag` 名称设置为 `div`，并使用 `name` 属性添加 `flip`
    动画：
- en: '[PRE124]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Add `appear="true"`, or simply `appear` for short, to animate the element only
    after the page has finished loading:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `appear="true"`，或简写为 `appear`，以在页面加载完成后仅对元素进行动画处理：
- en: '[PRE136]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'Run the application using the following command:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE143]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'Upon visiting `http://localhost:3000` in the browser, the output will be as
    follows:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中访问 `http://localhost:3000`，输出将如下所示：
- en: '![Figure 8.9 – Message list before the animation](img/B18645_08_09.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.9 – 动画前的消息列表](img/B18645_08_09.jpg)'
- en: Figure 8.9 – Message list before the animation
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9 – 动画前的消息列表
- en: 'At this point, there’s no animation because we haven’t defined the CSS animation
    styling for `flip` yet. In the `<style>` section of `src/components/Exercise8-02.vue`,
    we will add `opacity: 0` and then reposition each element in the list vertically
    (on the *y*-axis) by `20px` from its original position. This should be the initial
    state when the element enters `flip-enter-from` or is about to leave the transition
    with `flip-leave-to`:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '到目前为止，没有动画，因为我们还没有为 `flip` 定义 CSS 动画样式。在 `src/components/Exercise8-02.vue`
    的 `<style>` 部分中，我们将添加 `opacity: 0` 并将列表中的每个元素垂直（在 *y* 轴上）从其原始位置移动 `20px`。这应该是元素进入
    `flip-enter-from` 或即将离开过渡的 `flip-leave-to` 时的初始状态：'
- en: '[PRE144]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'In the same `<style>` section, add custom CSS styling to each `message` element
    (the `message—item` class) with `transition: all 2s`. This is to make sure the
    transition effect for the element will be applied to all CSS properties within
    `2` seconds:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在相同的`<style>`部分中，为每个`message`元素（`message—item`类）添加自定义CSS样式`transition: all
    2s`。这是为了确保元素的过渡效果将在`2`秒内应用于所有CSS属性：'
- en: '[PRE150]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'Once `flip-move` is in action, we need to add the transition effect just for
    `transform` (which was defined previously as vertically `20px` away). We can see
    the moving-up-and-down effect for each message flawlessly. In addition, we also
    need to add `position: absolute` for when the transition is in the middle of the
    leaving state:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '一旦`flip-move`开始工作，我们需要只为`transform`添加过渡效果（这之前定义为垂直`20px`外）。我们可以完美地看到每个消息的上下移动效果。此外，我们还需要在过渡处于离开状态中间时添加`position:
    absolute`：'
- en: '[PRE153]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'We will next add three buttons—allowing you to sort from A to Z, sort from
    Z to A, and shuffle randomly:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来将添加三个按钮——允许您从A到Z排序，从Z到A排序，以及随机洗牌：
- en: '[PRE159]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'We also need to add our basic component `export` code, as well as our message
    feed data. Feel free to use any content you like for `messages`:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要添加我们的基本组件`export`代码，以及我们的消息源数据。您可以使用任何您喜欢的`messages`内容：
- en: '[PRE162]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: 'Next, we’ll add the logic for sorting and shuffling. The `methods` section
    should be inside the `export` component from the last step:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加排序和洗牌的逻辑。`methods`部分应位于上一步的`export`组件内部：
- en: '[PRE179]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'The output after clicking on one of the buttons will be like the following:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 点击其中一个按钮后的输出将如下所示：
- en: '![Figure 8.10 – Message list during sorting](img/B18645_08_10.jpg)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![图8.10 – 排序时的消息列表](img/B18645_08_10.jpg)'
- en: Figure 8.10 – Message list during sorting
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10 – 排序时的消息列表
- en: In this exercise, we learned how to add a `flip` animation effect with `transition-group`
    to a list of components dynamically based on a change in the order of its element.
    Note that the algorithm used for shuffling the list of messages is naïve, and
    you should not use it in real-life scenarios due to the complexity of its performance.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们学习了如何根据元素顺序的变化，使用`transition-group`动态地为组件列表添加`flip`动画效果。请注意，用于洗牌消息列表的算法是简单的，由于其实际应用中的性能复杂性，您不应在实际场景中使用它。
- en: Next, let’s explore how to apply transition effects when navigating between
    pages.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们探索如何在页面间导航时应用过渡效果。
- en: Examining transition routes
  id: totrans-368
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查过渡路由
- en: With the combination of the `router-element` component from Vue Router and the
    `transition` component, we can easily set up the transition effects when a user
    navigates from one URL (route) to another.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合Vue Router的`router-element`组件和`transition`组件，我们可以轻松地设置用户从一个URL（路由）导航到另一个URL时的过渡效果。
- en: To give you a more fundamental understanding, we demonstrate in the following
    section an underlying case where a user redirects from the `home` page to the
    `about` page on a website.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您有一个更基本的理解，我们在下面的部分中演示了一个用户从网站的`home`页面重定向到`about`页面的底层案例。
- en: 'To enable a transition across routing, with Vue Router 4.x and above, we need
    to combine the `v-slot` API with a dynamic `component` element. We use the `v-slot`
    attribute to pass and bind view `Component` of the current route to the `is` props
    of the `component` element nested under `transition`, as seen here:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用跨路由的过渡，在Vue Router 4.x及以上版本中，我们需要将`v-slot` API与动态的`component`元素结合使用。我们使用`v-slot`属性将当前路由的视图`Component`绑定到嵌套在`transition`元素下的`component`元素的`is`属性，如下所示：
- en: '[PRE188]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: 'Here, we add a `zoom` transition effect when navigating from one page to another.
    We can also use the `mode` attribute to indicate the transition mode. There are
    currently two modes to set:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在从一个页面导航到另一个页面时添加了一个`zoom`过渡效果。我们还可以使用`mode`属性来指示过渡模式。目前有两种模式可供设置：
- en: '`in-out`: The new element comes in first, and only after that will the current
    element go out of view.'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in-out`：新元素首先进入，然后当前元素才会从视图中消失。'
- en: '`out-in`: The current element goes out first, and only then will the new element
    come in. We will use this for our example and it’s more common than the previous
    one.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`out-in`：当前元素首先消失，然后新元素才会进入。我们将使用这个例子，它比之前的例子更常见。'
- en: 'Then, we just need to set up the transition CSS effect with the `transition`
    classes as usual and it’s done. Simple as that:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们只需像往常一样设置过渡CSS效果，使用`transition`类，就完成了。就这么简单：
- en: '[PRE189]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: In this section, we looked at transition routes. Transition effects are animations
    that occur between the rendering of routes, such as navigating from one page to
    another. In the next exercise, we will look at creating a transition effect for
    each route navigated in our application.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 8.03 – creating a transition effect for each route navigated
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will adapt what we have learned about transitions with
    the `router` element from the *Examining transition routes* section to create
    different transition effects for different routes.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.03).
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a new route view for displaying the messages using the code
    from *Exercise 8.02* and add the transition effect when navigating to this view.
    The default effect will be `fade`:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, with
    Vue Router added. Alternatively, within the root folder of the code repository,
    navigate into the `Chapter08/Exercise8.03` folder by using the following commands
    in order:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE190]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory) or your preferred IDE.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new route view for the `Messages.vue` view, located in the `src/views/`
    folder. Reuse the code for `Exercise8-02.vue` from *Exercise 8.02* for this view
    component to render the `/messages` page route.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Register this `/messages` route by adding a new `route` object to `routes`,
    as seen in the following code:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE192]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: 'Add a link to this newly created route in `App.vue`:'
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE211]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: 'Next, in `App.vue`, we bind the global `route` instance (mentioned in [*Chapter
    7*](B18645_07.xhtml#_idTextAnchor248), *Routing*) to `slot`, and dynamically assign
    the `transition` defined for the specific route using the `meta` property (or
    using the local `transition` data). We also bind the transition mode to the local
    `mode` data:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE215]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: 'Inside the `script` section of `App.vue`, make sure we define the default value
    for `transition` and `mode`:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE221]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: 'Add the CSS style for fading in and out using the following CSS in `App.vue`:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE226]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: 'At this point, all the pages are loaded with the `fade` effect, even `/messages`.
    But we want to make the `messages` page load with a different effect: the `zoom`
    effect. Next, add the relevant CSS code for the `zoom` animation inside the same
    `style` tag:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE234]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: 'We will now add some standard CSS styling for the app’s default layout with
    the help of the following code:'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE253]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: 'Now, we need to map the `/messages` route with this specific transition effect
    without affecting other routes. In order to do that, we need to add a field called
    `transition` to the `meta` property of this route configuration, in `src/router/index.js`:'
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE270]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: 'Check the code for your `routes` object to confirm that it’s the same as the
    following code. Here, we match each URL for our application with a view file:'
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE278]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: 'Run the application using the following command:'
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE297]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: 'Now, if you open `localhost:3000` in your browser and navigate to `/messages`,
    you should see something similar to *Figure 8**.11*:'
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.11 – Navigating to /messages with a zoom effect in progress](img/B18645_08_11.jpg)'
  id: totrans-505
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – Navigating to /messages with a zoom effect in progress
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: 'While navigating to other routes, we should see the default transition shown
    in *Figure 8**.12*:'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 8.12 – Navigating to /home with a message with a\uFEFF fade effect](img/B18645_08_12.jpg)"
  id: totrans-508
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – Navigating to /home with a message with a fade effect
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: This exercise demonstrates how we can easily set up different transitions for
    different pages with minimum effort by combining the right Hooks and methods.
    You can experiment a bit further with an external library to make your app animation
    smoother and livelier.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: Using the GSAP library for animation
  id: totrans-511
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GSAP is an open source, scripted library that focuses solely on fast animation
    using JavaScript and provides cross-platform consistency support. It supports
    animation on a wide range of element types, such as **Scalar Vector Graphics**
    (**SVG**), React components, canvas, and so on.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: GSAP is flexible, easy to install, and will adjust to any configuration given,
    from CSS properties or SVG attributes to a numeric value for rendering an object
    into a canvas.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: The core library is a suite of different tools, divided into core tools and
    others, such as plugins, easing tools, and utilities.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: Installing GSAP
  id: totrans-515
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Installing GSAP is straightforward using `npm install` or `yarn add`:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE298]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: 'After installation, you should see a successful output such as that shown in
    the following screenshot:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Results after successful installation](img/B18645_08_13.jpg)'
  id: totrans-519
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 – Results after successful installation
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have GSAP installed, we’ll look at basic tweens in GSAP.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: Basic tweens
  id: totrans-522
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**A tween** is a concept defined by the creator of the GSAP library as a high-performance
    setter for performing all the desired animation work based on the user’s configuration
    inputs. We can use the targeted objects, a period, or any specific CSS properties
    as input for animation. Upon performing the animation, the tween figures out what
    the values of CSS properties should be according to the given duration and applies
    them accordingly.'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: The following are the essential methods to create basic tweens.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: gsap.to()
  id: totrans-525
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The most commonly used tween is `gsap.to()`, which is called to create an animation
    based on these two main parameters:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: '`#myId`.'
  id: totrans-527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opacity: 0`, `rotation: 90`, or `fontSize: ''20px''`; animation properties
    such as `duration: 1`, `stagger: 0.2`, or `ease: "elastic"`; and event handler
    properties such as `onComplete` or `onUpdate`.'
  id: totrans-528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, if we want to animate the logo of Vue in `HelloWorld.vue`, we
    run the following:'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE299]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: 'Alternatively, use the following to move an object with `x` properties (the
    same as `transform: translateX()`):'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE300]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: The preceding code locates an element with the `green` class and rotates it
    `360` degrees within a `500`-px distance horizontally when that element comes
    into view.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: gsap.from() and gsap.fromTo
  id: totrans-534
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We don’t always want to define the expected animation effect for the element
    in view. Instead, we define the default values from which the animation should
    start for the targeted element – that’s when we use `gsap.from()`.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, assuming the current `opacity` value of a box is `1`, the `scale`
    value is `1`, and the `x` position is `0`, we want to set up an animation to these
    current values *from* an `x` position of `300`, with an `opacity` value of `0`
    and a `scale` value of `0.5`. In other words, the animation will be from `{x:
    300, opacity: 0, scale: 0.5}` to whatever values the element has currently:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE301]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: 'However, in many cases, we need to set up the start and end values for an animation
    since one side is not good enough. For that purpose, GSAP provides `gsap.fromTo()`
    with the following syntax:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE302]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: 'Let’s define an animation for a gray box with original values of `{ opacity:
    0, scale: 0.5, x: 300 }` to the values of `{ opacity: 1, scale: 1, x: 100,` `rotation:
    360}`:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE303]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: In order to translate all the CSS-like values into the corresponding CSS values,
    one of the core plugins for GSAP is `CSSPlugin`. This plugin will detect whether
    the target is a DOM element automatically, intercept the values passed, translate
    them into proper CSS values, and then apply them to the element as inline styles
    accordingly.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll walk through an exercise of creating a simple tween
    using GSAP.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 8.04 – tweening with GSAP
  id: totrans-544
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The goal of this exercise is to get you comfortable with working with external
    libraries such as GSAP.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, visit [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Exercise8.04).
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll set up a simple animation, but you can apply this same pattern anywhere
    in your Vue code. We’ll be applying the animation during mount, but JavaScript
    animations can be triggered dynamically based on things such as timers, random
    integers, or inputs such as buttons:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, with
    Vue Router added. Alternatively, within the root folder of the code repository,
    navigate into the `Chapter08/Exercise8.04` folder by using the following commands
    in order:'
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE304]'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE305]'
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory) or your preferred IDE.
  id: totrans-551
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install GSAP with `yarn` or `npm` using one of the following commands:'
  id: totrans-552
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE306]'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE308]'
- en: 'Find the existing `img` tag in `src/App.vue` and add `ref="logo"` to it as
    follows:'
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE309]'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE309]'
- en: 'In the `<script setup>` section of `src/App.vue`, import GSAP:'
  id: totrans-558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/App.vue`的`<script setup>`部分导入GSAP：
- en: '[PRE310]'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE310]'
- en: 'We use the `ref()` Hook to define `logo` as a reactive variable, which contains
    the reference to the `img` element set in *step 4*:'
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`ref()`钩子将`logo`定义为响应式变量，它包含在*步骤4*中设置的`img`元素的引用：
- en: '[PRE311]'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE312]'
- en: 'Then, we use an `onMounted()` lifecycle Hook to add an animation, which is
    `10` rotations over `30` seconds:'
  id: totrans-563
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用`onMounted()`生命周期钩子添加一个动画，该动画是`10`次旋转，持续`30`秒：
- en: '[PRE313]'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE317]'
- en: 'The full component code for the `script` section will be like the following:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`script`部分组件代码将如下所示：
- en: '[PRE318]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: Next, start the application by running `yarn dev` in the terminal.
  id: totrans-571
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过在终端中运行`yarn dev`来启动应用程序。
- en: 'Open your browser to `localhost:3000` and you should see the default Vue starter
    page but with the logo spinning, as shown in the following screenshot:'
  id: totrans-572
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器到`localhost:3000`，你应该看到默认的Vue启动页面，但带有旋转的logo，如下面的截图所示：
- en: '![Figure 8.14 – Simple animation with GSAP](img/B18645_08_14.jpg)'
  id: totrans-573
  prefs: []
  type: TYPE_IMG
  zh: '![图8.14 – 使用GSAP的简单动画](img/B18645_08_14.jpg)'
- en: Figure 8.14 – Simple animation with GSAP
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.14 – 使用GSAP的简单动画
- en: In this exercise, we learned how to implement a simple spinning animation using
    GSAP in Vue. Next, we will see how we can modify the look and feel of an animation
    with easing.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们学习了如何在Vue中使用GSAP实现简单的旋转动画。接下来，我们将看到如何通过缓动修改动画的外观和感觉。
- en: Modifying the look and feel with easing
  id: totrans-576
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用缓动效果修改外观和感觉
- en: 'Easing is important because it determines the movement style between the original
    starting point and the destination point of an animation. It controls the rate
    of change during a tween; hence, a user has the time to see the effect, whether
    it be smooth, sudden, bouncy, or another kind of transition effect:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 缓动很重要，因为它决定了动画的原点与目的地之间的运动风格。它控制了缓动过程中的变化率；因此，用户有时间看到效果，无论是平滑、突然、弹跳还是其他类型的过渡效果：
- en: '[PRE319]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: In the previous example code, `duration` is in milliseconds, representing the
    amount of time for the animation to be active.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例代码中，`duration`是以毫秒为单位，表示动画活跃的时间长度。
- en: Also, there are additional built-in plugins in GSAP that provide extra capabilities
    for configuring the easing effect, such as `power`, `back`, `elastic`, and so
    on.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，GSAP中还有额外的内置插件，提供了配置缓动效果的额外功能，例如`power`、`back`、`elastic`等。
- en: 'To make the movement smooth to a certain degree, we use the following syntax:'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使运动在一定程度的平滑，我们使用以下语法：
- en: '[PRE320]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: 'Take a `bubble` effect, for instance – we can enable the smooth `elastic` easing-out
    effect by using the following code:'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 以`bubble`效果为例 – 我们可以通过以下代码启用平滑的`elastic`缓动效果：
- en: '[PRE321]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: 'Or, add `elastic` easing as follows:'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，按照以下方式添加`elastic`缓动：
- en: '[PRE322]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: With `ease`, we can make the same animation look completely different based
    on the style set. Next, we’ll look at `stagger`, another option that affects the
    look and feel of an animation.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ease`，我们可以根据设置的样式使相同的动画看起来完全不同。接下来，我们将查看`stagger`，这是另一种影响动画外观和感觉的选项。
- en: Modifying the look and feel with stagger
  id: totrans-588
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用交错效果修改外观和感觉
- en: We have gone through how to animate a list of items using Vue transitions in
    the previous sections. Staggering is one of the animations we should take into
    consideration for a list of objects since it makes animation for this type of
    target easy and with an appropriate delay between each of the item’s animations.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们已经介绍了如何使用Vue过渡动画来动画化一系列项目。交错是对于一系列对象我们应该考虑的一种动画，因为它使得此类目标的动画变得简单，并且每个项目动画之间有适当的延迟。
- en: 'For example, by assigning a value to the `stagger` property, we can create
    and apply some configuration options besides just the delay `duration` number
    (in milliseconds):'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，通过为`stagger`属性赋值，我们可以在除了延迟`duration`数字（以毫秒为单位）之外创建并应用一些配置选项：
- en: '[PRE323]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: You can use `repeat` to define how many times the animation should repeat. A
    negative number will make it repeat infinitely.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`repeat`来定义动画应重复的次数。负数将使其无限重复。
- en: Using Timeline
  id: totrans-593
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用时间轴
- en: '**Timeline** is a schedule of tweens under your total control to define overlaps
    or gaps between the tweens. It’s useful when you need to control a group of animations
    according to an order, build a sequence of animations, chain the animations for
    a final callback, or modularize your animation code for reusability.'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '**时间轴**是您完全控制的缓动调度，用于定义缓动之间的重叠或间隔。当您需要根据顺序控制一组动画、构建一系列动画、链式动画以进行最终回调或模块化动画代码以实现可重用时，它非常有用。'
- en: 'In order to use Timeline, you can create a `timeline` instance by using the
    built-in `gsap.timeline()` and set up the instance with a set of configurations,
    as follows:'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用时间轴，你可以使用内置的`gsap.timeline()`创建一个`timeline`实例，并按照以下方式设置实例配置：
- en: '[PRE324]'
  id: totrans-596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: We will look briefly into the two main use cases of Timeline – sequencing and
    chaining.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简要介绍时间轴的两个主要用途 – 排序和链接。
- en: Creating a chain of animation effects by sequencing
  id: totrans-598
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过排序创建动画效果链
- en: 'With similar core functionalities to GSAP, Timeline also provides `to()`, `from()`,
    and `fromTo()` methods. All animations by default can be sequenced one after another,
    with the option to force timing to control where or when things go using the `position`
    attribute, which is an optional argument, as seen in the following code:'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 与GSAP类似的核心功能，时间轴也提供了`to()`、`from()`和`fromTo()`方法。默认情况下，所有动画都可以一个接一个地排序，可以通过使用`position`属性来强制控制何时或在哪里进行，这是一个可选参数，如下面的代码所示：
- en: '[PRE325]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: In this section, we looked at using the GSAP Timeline feature to schedule a
    series of animations all running one after the other, some with a gap and others
    with an overlap. In the next section, we’ll look further at sequencing animations
    with the concept of chaining.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了使用GSAP时间轴功能来安排一系列动画，这些动画一个接一个地运行，有些有间隔，有些有重叠。在下一节中，我们将进一步探讨使用链接的概念来排序动画。
- en: Chaining
  id: totrans-602
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 链接
- en: 'As with sequencing, chaining arranges animation into an order. Instead of calling
    each animation separately with the instance method each time, it will be placed
    in a chain. All the special values that are used between the child tweens can
    be defined. In the instance created as `defaults`, or alternatively in the first
    call, get other timelines (list of animations) in the chain to inherit these values:'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 与排序类似，链接将动画排列成顺序。而不是每次都使用实例方法单独调用每个动画，它将被放置在链中。在子缓动器之间使用的所有特殊值都可以定义。在创建为`defaults`的实例中，或者在第一次调用中，获取链中的其他时间轴（动画列表）以继承这些值：
- en: '[PRE326]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: 'We can also intercept the timing position of each chained timeline using `position`,
    as described earlier:'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`position`拦截每个链接时间轴的时间位置，如前所述：
- en: '[PRE327]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: GSAP has very detailed documentation, so just visit [https://greensock.com/get-started](https://greensock.com/get-started)
    and start animating.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: GSAP有非常详细的文档，所以只需访问[https://greensock.com/get-started](https://greensock.com/get-started)并开始动画。
- en: In the next section, we’ll build on what we’ve learned about GSAP to make a
    message-viewing app with animated transitions.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将基于我们对GSAP的了解来制作一个带有动画过渡的消息查看应用。
- en: Activity 8.01 – building a messages app with transitions and GSAP
  id: totrans-609
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动八.01 – 使用过渡和GSAP构建消息应用
- en: To access the code file for this activity, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Activity8.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Activity8.01)
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此活动的代码文件，请参阅[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Activity8.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter08/Activity8.01)
- en: In this activity, you will use CSS to write custom transitions, use transition
    groups and routes to set up more complex transitions, and use a third-party transition
    library such as GSAP to create animations and transitions in the app.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 在此活动中，您将使用CSS编写自定义过渡，使用过渡组和路由设置更复杂的过渡，并使用第三方过渡库，如GSAP，在应用中创建动画和过渡。
- en: You will be creating a simple messages app that makes use of transition effects.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 您将创建一个简单的消息应用，该应用利用过渡效果。
- en: 'The following steps will help you complete this activity:'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您完成此活动：
- en: Create a new Vue application with `npm init vue@3` as a starting point, with
    Vue Router added.
  id: totrans-614
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`npm init vue@3`作为起点创建一个新的Vue应用，并添加Vue Router。
- en: 'Create a `Messages` route (at `src/views/Messages.vue`) that renders two nested
    views: `Messages` (`src/views/MessageList.vue`), for displaying a list of messages,
    and `MessageEditor` (`src/views/MessageEditor.vue`), with one `textarea` and a
    `submit` button for creating a new message.'
  id: totrans-615
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Messages`路由（在`src/views/Messages.vue`），它渲染两个嵌套视图：`Messages`（`src/views/MessageList.vue`），用于显示消息列表，以及`MessageEditor`（`src/views/MessageEditor.vue`），包含一个`textarea`和一个用于创建新消息的`submit`按钮。
- en: Create a `Message` route (at `src/views/Message.vue`) that renders a view of
    a single message with a given ID.
  id: totrans-616
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Message`路由（在`src/views/Message.vue`），它渲染一个具有给定ID的单条消息视图。
- en: Register all the routes.
  id: totrans-617
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册所有路由。
- en: Add a transition to the main `router-view` in the `src/App.vue` file with a
    simple transition name, `fade`, and the `out-in` mode.
  id: totrans-618
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the transition to the nested `router-view` in `src/views/Messages.vue` by
    using custom transition classes.
  id: totrans-619
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an animation effect for zooming in on entering the route and zooming
    out on leaving the route.
  id: totrans-620
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create another animation effect for fading in on a leaving event.
  id: totrans-621
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a transition to the list of messages in `MessageList.vue` with a bounce-in
    effect.
  id: totrans-622
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use GSAP to animate the bounce-in effect.
  id: totrans-623
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a moving effect for an item when it appears.
  id: totrans-624
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When navigating from the **List** page to the **Editor** page, you should see
    the feed slide away to the left as the **Editor** page appears, as shown in *Figure
    8**.15*:'
  id: totrans-625
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.15 – Fade out when navigating from \uFEFFthe message list view to\
    \ the editor view](img/B18645_08_15.jpg)"
  id: totrans-626
  prefs: []
  type: TYPE_IMG
- en: Figure 8.15 – Fade out when navigating from the message list view to the editor
    view
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
- en: 'When navigating from the message view to the editor view, you should see the
    text input slide out to the left, as shown in *Figure 8**.16*:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.16 – Fade out when navigating from the editor view to the message
    list view](img/B18645_08_16.jpg)'
  id: totrans-629
  prefs: []
  type: TYPE_IMG
- en: Figure 8.16 – Fade out when navigating from the editor view to the message list
    view
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the message list will appear with the numbers spinning with a bounce
    effect, as shown in *Figure 8**.17*:'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.17 – Bounce effect when displaying the message feed in the message
    list view](img/B18645_08_17.jpg)'
  id: totrans-632
  prefs: []
  type: TYPE_IMG
- en: Figure 8.17 – Bounce effect when displaying the message feed in the message
    list view
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
- en: 'When clicking on a specific message, **0** or **1** in our example, our list
    will slide out to the left and you should see the message content, as shown in
    *Figure 8**.18*:'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.18 – A single message view](img/B18645_08_18.jpg)'
  id: totrans-635
  prefs: []
  type: TYPE_IMG
- en: Figure 8.18 – A single message view
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you have learned about the basics of GSAP, such as tweens and
    Timeline. You also experimented with creating easing and staggering animations
    by combining transition and GSAP functionalities in your Vue component.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-638
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we explored the built-in support Vue.js has for transitions
    and animations, both for single and multiple components, and we saw how easy it
    is to set it up. At this point, you have created transition and animation effects
    for routes and components and witnessed all the basic features of Vue.js transitions:
    the custom transition class, group transition, and transition modes. Moreover,
    you also learned about other leading animation third-party libraries such as GSAP,
    and saw how to integrate them with your Vue application in order to get better
    animation effects on the web.'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter focuses on another crucial topic for building a production-ready
    Vue application – state management and how components within an application communicate
    with one another using Pinia, a state management library.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 3: Global State Management'
  id: totrans-641
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we will explore how data is managed and stored within a Vue application.
    We will start with examples of how to handle state in Vue natively, and then continue
    on to show how the Pinia library makes it easier.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将探讨如何在Vue应用程序中管理和存储数据。我们将从如何原生地处理Vue中的状态的示例开始，然后继续展示Pinia库如何使这一过程变得更简单。
- en: 'We will cover the following chapters in this section:'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本节将涵盖以下章节：
- en: '[*Chapter 9*](B18645_09.xhtml#_idTextAnchor407), *The State of Vue State Management*'
  id: totrans-644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B18645_09.xhtml#_idTextAnchor407), *Vue状态管理的状态*'
- en: '[*Chapter 10*](B18645_10.xhtml#_idTextAnchor426), *State Management with Pinia*'
  id: totrans-645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B18645_10.xhtml#_idTextAnchor426), *使用Pinia进行状态管理*'
