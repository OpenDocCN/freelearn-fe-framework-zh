- en: 'Chapter 4: Error Handling, Authentication, and Route Protection'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to implement error handling and security measures in our interfaces
    to ensure that the quality and user experience of the application is good.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll modify the login page created in [*Chapter 1*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014),
    *Environment Setup and Introduction to UmiJS* and configure the default HTML template
    for our application. You'll learn how to store and globally access data by configuring
    your application's initial state. Next, you'll learn how to block unauthorized
    access using the Umi `plugin-access`. Finally, you'll learn how to handle HTTP
    error responses and display feedback messages by configuring Umi requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the login page and defining the HTML template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing and globally accessing user information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protecting application routes based on user roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling HTTP error responses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned how to configure and use `plugin-initial-state`
    to store and access information globally in your application. You'll also have
    learned how to configure and use `plugin-access` to protect routes. Finally, you'll
    have learned how to handle HTTP error responses by configuring the umi-request
    library.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this chapter's exercises, you only need a computer with any OS (I
    recommend Ubuntu 20.04 or higher) and the software installed in [*Chapter 1*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014),
    *Environment Setup and Introduction to UmiJS* (VS Code, Node.js, and Yarn).
  prefs: []
  type: TYPE_NORMAL
- en: You can find the complete project of this chapter in the `Chapter04` folder
    in the GitHub repository available at [https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs).
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the login page and defining the HTML template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll create a Umi mock file and requests to simulate user
    authentication, a login page for users to log in, and we'll configure the default
    HTML template for our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with the mock file. We''ll create endpoints for login, logout,
    and getting user information. Follow these steps to create the file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file named `user.ts` in the `mock` folder. Next, create the `login`
    function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `if` statement to the `login` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we defined a condition that allows the mock user John Doe, the inside
    sales representative, to access the application. The user role will determine
    what actions the user can execute and which pages they can access.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the following `else if` and `else` statements to the `login` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we defined a condition that allows the mock user Mary Doe, the sales manager,
    to access the application. We also determined that if the user is not John Doe
    or Marry Doe, the mock API will return an HTTP 401 error, the status code for
    not authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, add the other functions and the endpoint route definitions to the
    `user.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We created the functions to simulate logout and get the logged-in user's information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to create requests in the `services` folder to get user info,
    login, and log out of the application. Follow these steps to create the requests:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `user.ts` in the `services` folder under the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following requests to the `user.ts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We created the requests to access the endpoints defined in the `user.ts` mock
    file.
  prefs: []
  type: TYPE_NORMAL
- en: We created a Umi mock file for simulating the user service and the requests
    to the backend. Now, we'll create a login page for users to input their email
    and password and authenticate in the application.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the login page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need a login page for users to log in using their email and password. We
    have already created a login page using Umi UI in [*Chapter 1*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014),
    *Environment Setup and Introduction to UmiJS*, so we only need to adapt the page
    components. Follow these steps to adjust the login page to match our theme:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Refactor the `index.tsx` file in the `pages/Login` folder as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We created a page header to display our application's logo and the language
    selector.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the CSS classes to style the title, the language selector, and the
    login form container in the `index.less` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the CSS class to style the header and logo in the `index.less` file
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s also make some changes to the `LoginForm` component styles. Refactor
    the `index.less` file in the `LoginForm` folder as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We modified the form's `width` and `margin` and defined `width` as `100%` on
    small screens using the `@screen-sm` breakpoint from the default Ant Design variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are all the changes we need on the login page. The result should look
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Login page with the theme applied'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.01_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – Login page with the theme applied
  prefs: []
  type: TYPE_NORMAL
- en: If you access our application on a mobile device, you will notice that it doesn't
    seem right, although we have developed a fully responsive login page. We'll learn
    how to solve this problem by defining the application's default template.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the default HTML template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are familiar with developing responsive websites, you'll know that the
    problem with our application pages is the **viewport** scale on mobile devices.
    We need to provide an HTML meta tag with the correct viewport attributes on each
    application page to solve the problem. As you already know, our application is
    a **single-page application** (**SPA**), so we only need to modify one HTML document.
  prefs: []
  type: TYPE_NORMAL
- en: Umi provides an option to customize the default HTML template for our application,
    which is the `document.ejs` file. If a file named `document.ejs` exists in the
    `src/pages` folder, Umi will use it as the default HTML document.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also access the application configuration in the `document.ejs` file
    using the `context.config` variable. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we defined the content of the HTML title tag as the `layout.title`
    configuration present in the `config/config.ts` file.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create the default HTML template for our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file named `document.ejs` in the `src/pages` folder, and create
    the template as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We set the viewport scale to `1.0` and the content width to the same device
    screen width.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the difference between the login page with the
    viewport meta tag on a mobile device and without it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Login page without viewport scale (left side) and with viewport
    scale (right side)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.02_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – Login page without viewport scale (left side) and with viewport
    scale (right side)
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we created a Umi mock file and requests to simulate the user
    authentication. We also modified the login page and defined the viewport scale
    to correctly display the application's pages on mobile devices by creating the
    default HTML template for our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll learn how to store and globally access user information
    after the users log in.
  prefs: []
  type: TYPE_NORMAL
- en: Storing and globally accessing user information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll configure the `plugin-initial-state` plugin to store
    and globally access user information.
  prefs: []
  type: TYPE_NORMAL
- en: To configure the initial state, we only need to create a function named `getInitialState`
    in the `app.tsx` file. The `getInitialState` function will be executed before
    React renders the entire application, and its return value will be used as the
    global state. We can use the `@@initialState` model to access the values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s configure the initial state by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `globalState.d.ts` in the `types` folder, and create
    the `GlobalState` interface as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `getInitialState` function in the `app.tsx` file located in the
    `src` folder as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code block, we created functions to log in, log out, fetch
    user data, and return it as the initial state value.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can access the user information by reading the `currentUser` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s read the initial state in the layout header by following these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `index.tsx` file, under the `src/components` folder, read the initial
    state on the `HeaderMenu` component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We created the `userLogout` function to log out and set the `currentUser` state
    to `undefined`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in the `Menu` component, add the `onClick` event to execute the `userLogout`
    function when users click on the logout menu item as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the user''s name below the `Avatar` component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let''s read the user information on the home page by following these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `index.tsx` file under the `pages/Home` folder, read the initial state
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the user''s name, role, and company as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to execute the `login` function on the login page. Follow these
    steps to develop the login flow:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following function to the `index.tsx` file in the `pages/Login/LoginForm`
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the user sends the login form, we execute the `login` function, and if
    the login is successful, we save the user information on the initial state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the following React effect to the `index.tsx` file in the `pages/Login`
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we defined that when the `currentUser` state changes, we redirect the
    user to the home page if the login succeeds.
  prefs: []
  type: TYPE_NORMAL
- en: When users log in to the application, we redirect them to the home page, but
    we need to turn users back to the login page when they log out and no longer have
    access to other pages. We can set this behavior by reading the initial state in
    the layout runtime configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to the `onPageChange` function in the `layout` configuration
    in the `app.tsx` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here, we defined redirecting the user to the login page if the user is not logged
    in and the current page is not the login page.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we configured our application's initial state, read the user
    information on the home page and in the `MenuHeader` component, and set the login
    flow by adding some lines to the layout configuration and the login page.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll learn how to use `plugin-access` to block unauthorized
    access.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting application routes based on user roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll configure the Umi `plugin-access` plugin to define user
    permissions and protect routes and features from unauthorized access.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure the access plugin, we must create an `access.ts` file in the `src`
    folder. The `access.ts` file must export a function that returns an object, and
    each property of that object must be a Boolean value representing permissions.
    Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we read the `access` property from the initial state and returned
    the `readOnly: true` permission if `access` is equal to `basic`.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's create an `access.ts` file for our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `access.ts` in the `src` folder and create the `default`
    function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code block, we defined the users with `role id` equal to `0`
    (sales manager) as the application administrators.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to demonstrate how to use the `canAdmin` permission, let''s create a new
    page that only administrators can access by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new page in the `pages` folder by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `index.tsx` file, add the `ProTable` component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We created a simple `ProTable` component to list workflow configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the data source to fill `ProTable` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `pages/Workflow` folder, create a new file called `columns.tsx` and
    add the column definitions as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following text to the `en-US.ts` file in the `locales` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the route configuration to the workflow page to the `routes.ts` file
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice the `access` property in the route configuration. In the `access` property,
    we can set the permissions defined in the `access.ts` file. Now, only users with
    the sales manager role can access the workflow page.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also define in the layout configuration a default page to display when
    users don''t have sufficient permissions to access a page. Add the following definition
    to the layout configuration in the `app.tsx` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We added the `Result` component from Ant Design to display the unauthorized
    error page and a button so users can go back to the home page. Here''s how the
    page will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Unauthorized error page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.03_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – Unauthorized error page
  prefs: []
  type: TYPE_NORMAL
- en: We have now created the `access.ts` file and used the `canAdmin` permission
    to protect the workflow page. Next, we'll learn how to use permissions to protect
    other application features.
  prefs: []
  type: TYPE_NORMAL
- en: Using the useAccess hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use the permissions we created in the `access.ts` file to authorize
    users to execute any actions in our application using the `useAccess` hook and
    the `Access` component. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we read the `readOnly` permission to define whether the **Edit**
    button will be disabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, consider another example using the `Access` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we'll render the content in the `fallback` property if the
    user doesn't have the `readAndWrite` permission instead of rendering the `TextArea`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use the `useAccess` hook to allow administrators to assign an opportunity
    to an inside sales representative by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following line to the `index.tsx` file in the `pages/Opportunities`
    folder to read the `canAdmin` permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the following properties to the `ProTable` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We defined that only if the user has the `canAdmin` permission, we'll apply
    the `onChange` event, enabling the `ProTable` row selection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if the user is an administrator, they can assign an opportunity as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Assign opportunity feature'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.04_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – Assign opportunity feature
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we created the `access.ts` file and defined the administrator
    permissions based on the user role. Then, we used the `canAdmin` permission to
    block unauthorized access to the workflow page and the row selection feature.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you'll learn how to handle HTTP error responses by configuring
    the umi-request library.
  prefs: []
  type: TYPE_NORMAL
- en: Handling HTTP error responses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll configure the umi-request library to handle error responses
    and display visual feedback.
  prefs: []
  type: TYPE_NORMAL
- en: We'll use the `errorHandler` function, one of the many umi-request library configurations.
    I recommend you read the documentation available at [https://github.com/umijs/umi-request](https://github.com/umijs/umi-request)
    to learn more about other features.
  prefs: []
  type: TYPE_NORMAL
- en: The umi-request library will trigger the `errorHandler` function every time
    it receives an HTTP error response, and we will read the response status and show
    a message to inform the user why the action they tried to execute failed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to configure the umi-request library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `app.tsx` file, create a new function and add the `request` configuration
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We used the `getLocale()` function from Umi to define in what language we'll
    display the messages. Next, we displayed an error message based on the response
    status or empty response and exported the request configuration with the `errorHandler`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to define the messages. In the `src/locales` folder, under the
    `en-US` folder, create a new file called `http.ts` and add the following messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You also need to download the Portuguese version of the `http.ts` file available
    in the GitHub repository of this book and place it in the `locales/pt-BR` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, import the `http.ts` file from the `en-US` and `pt-BR` folders in the
    `app.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the Umi request receives an HTTP error response, the user will see a message
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Feedback message on failed request'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.05_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – Feedback message on failed request
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we configured the umi-request library to handle HTTP error
    responses and display a feedback message to inform the user what happened.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created the login page and the `document.ejs` file, and
    learned how to set the viewport scale to display our pages on mobile devices correctly.
    You learned how to store and globally access data by configuring the initial state
    plugin and reading the initial state properties on the login and home page.
  prefs: []
  type: TYPE_NORMAL
- en: We created user permissions by configuring the access plugin and created the
    workflow page on which we blocked unauthorized access using the access plugin.
    We enabled the `ProTable` row selection feature only for authorized users using
    the access plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we configured the umi-request library to handle HTTP error responses
    and display feedback messages to inform users what happened.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn about code style, formatting, and how to improve
    your code using **linters** and formatting tools.
  prefs: []
  type: TYPE_NORMAL
