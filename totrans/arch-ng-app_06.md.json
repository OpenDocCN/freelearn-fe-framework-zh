["```js\nconst staticValuesStream$ = Rx.Observable.of(1, 2, 3, 4);\n\nstaticValuesStream$.subscribe(data => console.log(data)); \n// emits 1, 2, 3, 4\n```", "```js\nconst staticValuesStream$ = \nRx.Observable\n  .of(1, 2, 3, 4)\n  .map(data => data + 1); \n\nstaticValuesStream$.subscribe(data => console.log(data))\n// emits 2, 3, 4, 5\n```", "```js\nconst staticValuesStream$ = \nRx.Observable\n  .of(1, 2, 3, 4)\n  .map(data => data + 1)\n  .filter(data => data % 2 === 0 ); \n\nstaticValuesStream$.subscribe(data => console.log(data));\n// emits 2, 4\n```", "```js\nconst staticValuesStream$ = \nRx.Observable.of(1, 2, 3, 4)\n  .do(data => console.log(data)) // 1, 2, 3, 4 \n  .map(data => data + 1)\n  .do(data => console.log(data)) // 2, 3, 4, 5\n  .filter(data => data % 2 === 0 )\n  .do(data => console.log(data)); // 2, 4 \n\n// emits 2, 4\nstaticValuesStream$.subscribe(data => console.log(data))\n```", "```js\nlet stream$ = Rx.Observable.of(1,2,3)\n  .map(data => Rx.Observable.of(data));\n\n// Observable, Observable, Observable\nstream$.subscribe(data => console.log(data));\n```", "```js\nlet stream$ = Rx.Observable\n  .of(1,2,3)\n  .map(data => Rx.Observable.of(data))\n\nstream$.subscribe(data => {\n  data.subscribe(val => console.log(val))\n});\n\n// 1, 2, 3\n```", "```js\nlet stream$ = Rx.Observable.of(1,2,3)\n  .flatMap(data => Rx.Observable.of(data))\n\nstream$.subscribe(data => {\n  console.log(val);\n});\n\n// 1, 2, 3\n```", "```js\n<html>\n  <body>\n    <input id=\"input\" type=\"text\">\n    <script src=\"img/Rx.min.js\"></script>\n    <script src=\"img/app.js\"></script>\n  </body>\n</html>\n\n```", "```js\nlet elem = document.getElementById('input');\nlet keyStream$ = Rx.Observable\n  .fromEvent(elem, 'keyup')\n  .map( ev => ev.key);\n\nkeyStream$.subscribe( key => console.log(key));\n\n// emits entered key chars\n```", "```js\nfetch('https://swapi.co/api/people/1')\n  .then(data => data.json())\n  .then(data => console.log('data', data));\n```", "```js\nfunction getStarwarsCharacterStream(id) {\n  return fetch('https://swapi.co/api/people/' + id)\n    .then(data => data.json());\n}\n\n```", "```js\nlet keyStream$ = Rx.Observable.fromEvent(elem, 'keyup')\n  .map(ev => ev.key)\n  .filter(key => key !== 'Backspace')\n .flatMap( key =>\n    Rx.Observable\n      .from(getStarwarsCharacterStream(key))\n  );\n\n```", "```js\nfunction longRunningTask(input) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('response based on ' + input);\n    }, 5000);\n  });\n}\n```", "```js\nlet longRunningStream$ = keyStream$\n  .map(ev => ev.key)\n  .filter(key => elem.value.length >3)\n  .filter( key => key !== 'Backspace')\n  .flatMap( key =>\n    Rx.Observable\n      .from(longRunningTask(elem.value))\n  );\n\nlongRunningStream$.subscribe(data => console.log(data));\n```", "```js\n// enters abcde\nabcde\n// removes 'e'\n```", "```js\nlet longRunningStream$ = keyStream$\n  .map(ev => ev.key)\n  .filter(key => elem.value.length >3)\n  .filter( key => key !== 'Backspace')\n  .switchMap( key =>\n    Rx.Observable\n    .from(longRunningTask(elem.value))\n  );\n```", "```js\nlet convertedStream$ = \nRx.Observable.from(fetch('some url'));\n\nconvertedStream$.subscribe(data => 'my data?', data);\n```", "```js\nlet convertedStream$ = Rx.Observable.from(fetch('some url'))\n  .map( r=> r.json());\n\n// returns PromiseObservable\nconvertedStream$.subscribe(data => 'my data?', data);\n```", "```js\ngetData() {\n  return fetch('some url')\n    .then(r => r.json());\n}\n\nlet convertedStream$ = Rx.Observable.from(getData());\nconvertedStream$.subscribe(data => console.log('data', data));\n```", "```js\nlet convertedStream$ = Rx.Observable.from(fetch('some url'))\n  .flatMap( r => Rx.Observable.from(r.json()));\n\n// returns data\nconvertedStream$.subscribe(data => console.log('data'), data);\n```", "```js\nRx.Observable\n  .ajax('https://swapi.co/api/people/1')\n  .map(r => r.response)\n  .subscribe(data => console.log('from ajax()', data));\n```", "```js\nurl?: string;\nbody?: any;\nuser?: string;\nasync?: boolean;\nmethod?: string;\nheaders?: Object;\ntimeout?: number;\npassword?: string;\nhasContent?: boolean;\ncrossDomain?: boolean;\nwithCredentials?: boolean;\ncreateXHR?: () => XMLHttpRequest;\nprogressSubscriber?: Subscriber<any>;\nresponseType?: string;\n```", "```js\n// cascading/cascading-promises.js\n\nlogin()\n  .then(getUser)\n  .then(getOrders);\n\n// we collect username and password from a form\nconst login = (username, password) => {\n  return fetch(\"/login\", {\n    method: \"POST\",\n    body: { username, password }\n  })\n  .then(r => r.json())\n  .then(token => {\n    localStorage.setItem(\"auth\", token);\n  });\n};\n\nconst getUser = () => {\n  return fetch(\"/users\", {\n    headers: {\n      Authorization: \"Bearer \" + localStorage.getToken(\"auth\")\n    }\n  }).then(r => r.json());\n};\n\nconst getOrders = user => {\n  return fetch(`/orders/user/${user.id}`, {\n    headers: {\n      Authorization: \"Bearer \" + localStorage.getToken(\"auth\")\n    }\n  }).then(r => r.json());\n};\n```", "```js\n// cascading/cascading-rxjs.js\n\nlet user = \"user\";\nlet password = \"password\";\n\nlogin(user, password)\n  .switchMap(getUser)\n  .switchMap(getOrders);\n\n// we collect username and password from a form\nconst login = (username, password) => {\n  return Rx.Observable.ajax(\"/login\", {\n    method: \"POST\",\n    body: { username, password }\n  })\n  .map(r => r.response)\n  .do(token => {\n    localStorage.setItem(\"auth\", token);\n  });\n};\n\nconst getUser = () => {\n  return Rx.Observable.ajax(\"/users\", {\n    headers: {\n      Authorization: \"Bearer \" + localStorage.getToken(\"auth\")\n    }\n  }).map(r => r.response);\n};\n\nconst getOrders = user => {\n  return Rx.Observable.json(`/orders/user/${user.id}`, {\n    headers: {\n      Authorization: \"Bearer \" + localStorage.getToken(\"auth\")\n    }\n  }).map(r => r.response);\n};\n```", "```js\n// parallell/parallell-promise.js\n\n// we collect username and password from a form\nlogin(username, password) {\n  return new Promise(resolve => {\n    resolve('logged in');\n  });\n}\n\ngetUsersData(user) {\n  return Promise.all([\n    getOrders(user),\n    getMessages(user),\n    getFriends(user) \n    // not implemented but you get the idea, another call in parallell\n  ])\n}\n\ngetUser() {\n  // same as before\n}\n\ngetOrders(user) {\n  // same as before\n}\n\nlogin()\n  .then(getUser)\n  .then(getUsersData);\n```", "```js\n// parallell/parallell-rxjs.js\n\nimport Rx from 'rxjs/Rx';\n// imagine we collected these from a form\nlet user = 'user';\nlet password = 'password';\n\nlogin(user, password)\n  .switchMap(getUser)\n  .switchMap(getUsersData)\n\n// we collect username and password from a form\nlogin(username, password) {\n  // same as before\n}\n\ngetUsersData(user) {\n  return Rx.Observable.forkJoin([\n    getOrders(),\n    getMessages(),\n    getFriends()\n  ])\n}\n\ngetUser() {\n  // same as before\n}\n\ngetOrders(user) {\n  // same as before\n}\n\nlogin()\n  .then(getUser)\n  .then(getUsersData);\n```", "```js\n// creation-operators/of.js\n\nconst numberStream$ = Rx.Observable.of(1,2, 3);\nconst objectStream$ = Rx.Observable.of({ age: 37 }, { name: \"chris\" });\n\n// emits 1 2 3\nnumberStream$.subscribe(data => console.log(data));\n\n// emits { age: 37 }, { name: 'chris' }\nobjectStream$.subscribe(data => console.log(data));\n```", "```js\n// creation-operators/from.js\n\nconst promiseStream$ = Rx.Observable.from(\n  new Promise(resolve => setTimeout(() => resolve(\"data\"),3000))\n);\n\nconst arrayStream$ = Rx.Observable.from([1, 2, 3, 4]);\n\npromiseStream$.subscribe(data => console.log(\"data\", data));\n// emits data after 3 seconds\n\narrayStream$.subscribe(data => console.log(data));\n// emits 1, 2, 3, 4\n```", "```js\n// creation-operators/range.js\n\nconst stream$ = Rx.Observable.range(1,99);\n\nstream$.subscribe(data => console.log(data));\n// emits 1... 99 \n```", "```js\n// creation-operators/fromEvent.js\n\n// we imagine we have an element in our DOM looking like this <input id=\"id\" />\nconst elem = document.getElementById(\"input\");\nconst eventStream$ = Rx.Observable\n  .fromEvent(elem, \"click\")\n  .map(ev => ev.key);\n\n// outputs the typed key\neventStream$.subscribe(data => console.log(data));\n```", "```js\n// combination/merge.js\n\nlet promiseStream = Rx.Observable\n.from(new Promise(resolve => resolve(\"data\")))\n\nlet stream = Rx.Observable.interval(500).take(3);\nlet stream2 = Rx.Observable.interval(500).take(5);\n\n// instance method version of merge(), emits 0,0, 1,1 2,2 3, 4\nstream.merge(stream2)\n  .subscribe(data => console.log(\"merged\", data));\n\n// static version of merge(), emits 0,0, 1,1, 2, 2, 3, 4 and 'data'\nRx.Observable.merge(\n  stream,\n  stream2,\n  promiseStream\n)\n.subscribe(data => console.log(\"merged static\", data));\n```", "```js\n// combination/combineLatest.js\n\nlet firstStream$ = Rx.Observable\n  .interval(500)\n  .take(3);\n\nlet secondStream$ = Rx.Observable\n  .interval(500)\n  .take(5);\n\nlet combinedStream$ = Rx.Observable.combineLatest(\n  firstStream$,\n  secondStream$\n)\n\n// emits [0, 0] [1,1] [2,2] [2,3] [2,4] [2,5]\ncombinedStream$.subscribe(data => console.log(data));\n```", "```js\n// combination/zip.js\n\nlet stream$ = Rx.Observable.of(1, 2, 3, 4);\nlet secondStream$ = Rx.Observable.of(5, 6, 7, 8);\nlet thirdStream$ = Rx.Observable.of(9, 10); \n\nlet zippedStream$ = Rx.Observable.zip(\n  stream$,\n  secondStream$,\n  thirdStream$\n)\n\n// [1, 5, 9] [2, 6, 10]\nzippedStream$.subscribe(data => console.log(data))\n```", "```js\n// combination/concat.js\n\nlet firstStream$ = Rx.Observable.of(1,2,3,4);\nlet secondStream$ = Rx.Observable.of(5,6,7,8);\n\nlet concatStream$ = Rx.Observable.concat(\n  firstStream$,\n  secondStream$\n);\n\nconcatStream$.subscribe(data => console.log(data));\n```", "```js\n// mathematical/max.js\n\nlet streamWithNumbers$ = Rx.Observable\n  .of(1,2,3,4)\n  .max();\n\n// 4\nstreamWithNumbers$.subscribe(data => console.log(data)); \n\nfunction comparePeople(firstPerson, secondPerson) {\n  if (firstPerson.age > secondPerson.age) {\n    return 1; \n  } else if (firstPerson.age < secondPerson.age) {\n    return -1;\n  } \n  return 0;\n}\n\nlet streamOfObjects$ = Rx.Observable\n  .of({\n    name : \"Yoda\",\n    age: 999\n  }, {\n    name : \"Chris\",\n    age: 38 \n  })\n  .max(comparePeople);\n\n// { name: 'Yoda', age : 999 }\nstreamOfObjects$.subscribe(data => console.log(data));\n```", "```js\n// mathematical/min.js\n\nlet streamOfValues$ = Rx.Observable\n  .of(1, 2, 3, 4)\n  .min();\n\n// emits 1\nstreamOfValues$.subscribe(data => console.log(data));\n\n```", "```js\n// mathematical/sum.js\n\nlet stream = Rx.Observable.of(1, 2, 3, 4)\n  .reduce((acc, curr) => acc + curr);\n\n// emits 10\nstream.subscribe(data => console.log(data));\n```", "```js\nlet stream = Rx.Observable.of({ name : \"chris\" }, { age: 38 })\n  .reduce((acc, curr) => Object.assign({},acc, curr));\n\n// { name: 'chris', age: 38 }\nstream.subscribe(data => console.log(data)); \n```", "```js\n// time/interval.js\n\nlet stream$ = Rx.Observable.interval(1000);\n\n// emits 0, 1, 2, 3 ... n with 1 second in between emits, till the end of time\nstream$.subscribe(data => console.log(data));\n```", "```js\n// time/interval-take.js\n\nlet stream$ = Rx.Observable.interval(1000)\n  .take(2);\n\n// emits 0, 1, stops emitting thanks to take() operator\nstream$.subscribe(data => console.log(data));\n```", "```js\n// time/timer.js\n\nlet stream$ = Rx.Observable.timer(1000);\n\n// delay with 500 milliseconds\nlet streamWithDelay$ = Rx.Observable.timer(1000, 500) \n\n// emits 0 after 1000 milliseconds, then no more\nstream$.subscribe(data => console.log(data));\n\nstreamWithDelay$.subscribe(data => console.log(data));\n```", "```js\n// time/delay.js\n\nlet stream$ = Rx.Observable\n.interval(100)\n.take(3)\n.delay(500);\n\n// 0 after 600 ms, 1 after 1200 ms, 2 after 1800 ms\nstream.subscribe(data => console.log(data));\n```", "```js\n// time/sampleTime.js\n\nlet elem = document.getElementById(\"btn\");\nlet stream$ = Rx.Observable\n  .fromEvent(elem, \"click\")\n  .sampleTime(8000);\n\n// emits values every 8th second\nstream$.subscribe(data => console.log(\"mouse clicks\",data));\n\n```", "```js\n// time/debounceTime.js\nconst elem = document.getElementById(\"input\");\n\nlet stream$ = Rx.Observable.fromEvent(elem, \"keyup\")\n  .map( ev => ev.key)\n  .filter(key => key !== \"Backspace\")\n  .debounceTime(2000)\n  .switchMap( x => {\n    return new Rx.Observable.ajax(`https://swapi.co/api/people/${elem.value}`);\n  })\n  .map(r => r.response);\n\nstream$.subscribe(data => console.log(data));\n```", "```js\n// grouping/buffer.js\n\nconst elem = document.getElementById(\"input\");\n\nlet keyStream$ = Rx.Observable.fromEvent(elem,\"keyup\");\nlet breakStream$ = keyStream$.debounceTime(2000);\nlet chatStream$ = keyStream$\n  .map(ev => ev.key)\n  .filter(key => key !== \"Backspace\")\n  .buffer(breakStream$)\n  .switchMap(newContent => Rx.Observable.of(\"send text as I type\", newContent));\n\nchatStream$.subscribe(data=> console.log(data));\n\n```"]