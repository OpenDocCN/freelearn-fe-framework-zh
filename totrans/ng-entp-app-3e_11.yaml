- en: Appendix A
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up Your Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sharing a consistent development environment between you and your team members
    is important. Consistency helps to avoid many IT-related issues, including ongoing
    maintenance, licensing, and upgrade costs. Further, you want to ensure the entire
    team has the same development experience. This way, if a team member runs into
    a configuration issue, other team members can help resolve the issue. Creating
    a frustration-free and efficient onboarding experience for a new team member is
    also essential.
  prefs: []
  type: TYPE_NORMAL
- en: Easy and well-documented onboarding procedures ensure that new team members
    can quickly become productive and be integrated into the team. On an ongoing basis,
    achieving a consistent and minimal development environment remains challenging
    for teams. Automation can help deliver and maintain a consistent environment across
    developer machines.
  prefs: []
  type: TYPE_NORMAL
- en: The recommended operating systems are Windows 10 or Windows 11 Pro with PowerShell
    v7+ and Developer Mode enabled or macOS Ventura or Sonoma with Terminal and XCode
    developer tools installed. It is recommended to use the Chromium-based Google
    Chrome or Microsoft Edge as a web browser because they offer almost identical
    developer experience.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the suggested software in this book are cross-platform tools, so they
    also work on Linux systems. However, your experience may vary with these systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'This appendix covers:'
  prefs: []
  type: TYPE_NORMAL
- en: Recommended web development tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CLI package managers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install automation for Windows and macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project setup with the Angular CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing VS Code for Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start by reviewing the recommended web development tools and how you can
    quickly install these tools via automation scripts. Later in the appendix, we
    will go over how you can create such scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Recommended web development tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section covers the recommended for developing to develop a web application,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Tool** | **Description** | **URL** |'
  prefs: []
  type: TYPE_TB
- en: '| Git | Version control system | [https://git-scm.com](https://git-scm.com)
    |'
  prefs: []
  type: TYPE_TB
- en: '| GitHub Desktop | **Graphical User Interface** (**GUI**) to run Git commands
    and interact with GitHub | [https://desktop.github.com](https://desktop.github.com)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Node.js | Cross-platform JavaScript runtime environment | [https://nodejs.org](https://nodejs.org)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Visual Studio Code | Cross-platform **Integrated Development Environment**
    (**IDE**) | [https://code.visualstudio.com](https://code.visualstudio.com) |'
  prefs: []
  type: TYPE_TB
- en: '| Docker Desktop | Lightweight container virtualization platform | [https://www.docker.com/products/docker-desktop](https://www.docker.com/products/docker-desktop)
    |'
  prefs: []
  type: TYPE_TB
- en: 'Table A.1: Tools needed for web development'
  prefs: []
  type: TYPE_NORMAL
- en: To automatically install all the web development tools required for this book,
    execute the following commands for your OS to configure your environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows PowerShell, execute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'On macOS Terminal, execute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For more information, refer to [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup).
  prefs: []
  type: TYPE_NORMAL
- en: The macOS script installs Node version 20, which is the **Long-term Support**
    (**LTS**) version at the time of publishing. To ensure you always have the latest
    LTS installed, the script installs `n`, a Node version manager. Using `n`, you
    can easily switch between different versions of Node.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve installed your IDE, you’re ready to start development. In the next
    section, you’ll learn about CLI-based package managers. You’ll see that using
    CLI tools is superior to dealing with individual installers. Automating CLI tools
    is much easier, making setup and maintenance tasks repeatable and fast.
  prefs: []
  type: TYPE_NORMAL
- en: CLI package managers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing software through a **Graphical User Interface** (**GUI**) is slow
    and challenging to automate. As a full-stack developer, whether a Windows or a
    Mac user, you must rely on **Command-Line Interface** (**CLI**) package managers
    to install and configure the software you depend on efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Anything that can be expressed as a CLI command can also be automated.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Chocolatey for Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Chocolatey is a CLI-based package manager for Windows that can be used for
    automated software installation. To install Chocolatey on Windows, you need to
    run an elevated command shell:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the **Start** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start typing in **PowerShell**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see **Windows PowerShell Desktop App** as a search result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **Windows PowerShell** and select **Run as Administrator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This triggers a **User Account Control** (**UAC**) warning; select **Yes** to
    continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the install command found at [https://chocolatey.org/install](https://chocolatey.org/install)
    in **PowerShell** to install the Chocolatey package manager:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify your Chocolatey installation by executing `choco`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see a similar output to the one shown in the following screenshot:![A
    screenshot of a computer  Description automatically generated](img/B20960_11_01.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure A.1: Successful installation of Chocolatey'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: All subsequent Chocolatey commands must also be executed from an elevated command
    shell. Alternatively, it is possible to install Chocolatey in a non-administrator
    setting that doesn’t require an elevated command shell. However, this results
    in a non-standard and less secure development environment, and certain applications
    installed through the tool may still require elevation.
  prefs: []
  type: TYPE_NORMAL
- en: WinGet is the Windows Package Manager that is provided by Microsoft. You can
    learn more about WinGet at [https://github.com/microsoft/winget-cli/](https://github.com/microsoft/winget-cli/)
    or from the Microsoft Store.
  prefs: []
  type: TYPE_NORMAL
- en: I prefer Chocolatey over WinGet, because it offers better resilience when the
    script encounters an unexpected configuration. For more information on Chocolatey,
    refer to [https://chocolatey.org/install](https://chocolatey.org/install).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Homebrew for macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Homebrew is a CLI-based package manager for macOS that can be used for automated
    software installation. To install Homebrew on macOS, you need to run a command
    shell:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch **Spotlight Search** with ![](img/B20960_11_001.png) + *Space*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in `terminal`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following command in Terminal to install the Homebrew package manager:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify your Homebrew installation by executing `brew`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see a similar output to the following:![](img/B20960_11_02.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure A.2: Successful installation of Homebrew'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To enable access to additional software, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Homebrew Cask extends Homebrew and brings its elegance, simplicity, and speed
    to the installation and management of GUI macOS applications such as Visual Studio
    Code and Google Chrome. Read more about it at [https://github.com/Homebrew/homebrew-cask](https://github.com/Homebrew/homebrew-cask).
    On macOS, if you run into permissions issues while installing brew packages related
    to chown’ing `/usr/local`, you need to execute the `sudo chown -R $(whoami)`
  prefs: []
  type: TYPE_NORMAL
- en: '`$(brew --prefix)/*` command. This command reinstates user-level ownership
    to `brew` packages, which is more secure than broad superuser`/su`-level access.'
  prefs: []
  type: TYPE_NORMAL
- en: For more information, check out [https://brew.sh/](https://brew.sh/).
  prefs: []
  type: TYPE_NORMAL
- en: Install automation for Windows and macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember, *anything that can be expressed as a CLI command can also be automated*.
    Throughout the setup process, we ensured that every tool being used was set up
    and its functionality was verifiable through a CLI command. This means we can
    easily create a PowerShell or Bash script to string these commands together and
    ease setting up and verifying new environments.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s implement rudimentary – but effective scripts – to help set up your development
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Windows-based development environments, you need to create a PowerShell
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file named `setup-windows-dev-env.ps1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following text, also available at [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup),
    in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To execute the script, run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, you can install and execute the script directly from the PowerShell
    Gallery, located at [https://www.powershellgallery.com](https://www.powershellgallery.com),
    by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: By executing this script, you have successfully set up your development environment
    on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re interested in publishing your own scripts to the PowerShell Gallery
    or generally interested in advancing your PowerShell skills, I suggest you install
    PowerShell Core, a multi-platform version of PowerShell, from [https://github.com/PowerShell/PowerShell](https://github.com/PowerShell/PowerShell).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s investigate how you can achieve a similar setup on Mac.
  prefs: []
  type: TYPE_NORMAL
- en: Bash script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Mac-based development environments, you need to create a Bash script:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file named `setup-mac-dev-env.sh`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `chmod a+x setup-mac-dev-env.sh` to make the file executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following text, also available at [https://github.com/duluca/web-dev-environment-setup](https://github.com/duluca/web-dev-environment-setup),
    in the `setup-mac-dev-env.sh` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To execute the script, run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'By executing this script, you have successfully set up your development environment
    on Mac. Here is an example of a more sophisticated install and verify routine,
    where you can check to see if a particular program, like `brew` or `node`, is
    already installed, before attempting to install them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: By now, you should have a good idea of what automating the execution of your
    scripts looks like. However, the harsh reality is that these scripts do not represent
    a highly capable or resilient solution. They can’t be executed or managed remotely,
    nor can they quickly recover from errors or survive machine boot cycles. Moreover,
    your IT requirements may exceed what is covered here.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re dealing with large teams and experiencing frequent staff turnover,
    an automation tool can be extremely beneficial. Conversely, if you’re working
    alone or part of a smaller, more stable team, such a tool might be overkill. I
    encourage you to explore tools such as Puppet, Chef, Ansible, and Vagrant to help
    you decide which best fits your needs, or to determine if a simple script would
    suffice.
  prefs: []
  type: TYPE_NORMAL
- en: Project setup with the Angular CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Angular CLI tool, `ng`, is an official Angular project to ensure that newly
    created Angular applications have a uniform architecture, following the best practices
    perfected by the community over time. This means that any Angular application
    you encounter going forward should have the same general shape.
  prefs: []
  type: TYPE_NORMAL
- en: Nx tools are popular in the Enterprise App Development space to scaffold, generate,
    and maintain Angular applications. You can learn more about Nx at [https://nx.dev](https://nx.dev).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your development directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting up a dedicated `dev` directory is a lifesaver. Since all the data under
    this directory is backed up using GitHub, you can safely configure your antivirus,
    cloud sync, or backup software to ignore it. This helps significantly reduce CPU,
    disk, and network utilization. As a full-stack developer, you’re likely to be
    multitasking a lot, so avoiding unnecessary activity has a net positive impact
    on performance, power, and data consumption daily, especially if your development
    environment is a laptop that is resource-starved or you wish to squeeze as much
    battery life as possible when you’re on the move.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a `dev` folder directly in the `c:\` drive is very important on Windows.
    Earlier versions of Windows, or rather NTFS, can’t handle file paths longer than
    260 characters. This may seem adequate at first, but when you install `npm` packages
    in a folder structure that is already deep in the hierarchy, the `node_modules`
    folder structure can get deep enough to hit this limit very easily.
  prefs: []
  type: TYPE_NORMAL
- en: With `npm 3+`, a new, flatter package installation strategy was introduced,
    which helps with npm-related issues, but being as close to the root folder as
    possible helps tremendously with any tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create your `dev` folder using the following commands. For Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'For macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In Unix-based operating systems, `~` (pronounced tilde) is a shortcut to the
    current user’s home directory, which resides under `/Users/ your-user-name`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that your development directory is ready, let’s start generating your Angular
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Generating your Angular application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the npm create command to generate your Angular application,
    which uses the Angular CLI to generate the code. The Angular CLI goes beyond initial
    code generation; you’ll use it frequently to create new components, directives,
    pipes, services, modules, and more. The Angular CLI also helps during development
    with live-reloading features so that you can quickly see the results of your changes.
    The Angular CLI can also test, lint, and build optimized versions of your code
    for a production release. Furthermore, as new Angular versions are released, the
    Angular CLI helps you upgrade your code by automatically rewriting portions to
    remain compatible with potential breaking changes.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Angular CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The documentation at [https://angular.dev/tools/cli](https://angular.dev/tools/cli)
    guides you on how to install `@angular/cli` as a global npm package. However,
    I advise against doing this. Over time, as the Angular CLI is upgraded, keeping
    the global and in-project versions in sync becomes a constant irritant. If they’re
    not aligned, the tool tends to complain endlessly. Additionally, if you’re working
    on multiple projects, you end up with varying versions of the Angular CLI over
    time. As a result, your commands may not return the results you expect, or the
    results that your team members are getting.
  prefs: []
  type: TYPE_NORMAL
- en: The strategy detailed in the next section introduces a bit more complexity to
    the initial configuration of your Angular project. However, you’ll more than make
    up for this pain if you must return to a project a few months or even a year later.
    In that case, you could use the version of the tool that you last used on the
    project, instead of some future version that may require upgrades that you’re
    not willing to perform. In the next section, you’ll use this best practice to
    initialize your Angular app.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing your Angular app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The main way to initialize your app is by using the Angular CLI. Let’s initialize
    the application for development:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Under your `dev` folder, execute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Angular creates all new projects using the standalone project configuration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Follow the on-screen instructions and name your app `my-test-app`; otherwise,
    accept the default option by pressing **Enter**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On your terminal, you should see a success message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your project folder `my-test-app` has been initialized as a Git repository and
    scaffolded with an initial file and folder structure.
  prefs: []
  type: TYPE_NORMAL
- en: The alias for `@angular/cli` is `ng`. If you were to install the Angular CLI
    globally, you would execute `ng new my-test-app`, but we didn’t do this. To use
    the Angular CLI, you would have to run it as `npx @angular/cli`. However, we just
    installed the Angular CLI under the `node_modules/.bin` directory of your app,
    i.e., the `my-test-app` directory. This means you can run `ng` commands as `npx
    ng` in the `apps` directory using the version attached to your project, such as
    `npx ng generate component` `my-new-component`, and continue working efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing VS Code for Angular
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It’s essential to optimize your **Integrated Development Environment** (**IDE**)
    to have a great development experience. If you leverage the automated tools I
    present in this section, you can quickly configure your IDE and Angular project
    with dozens of settings that work well together.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring your project automatically
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To quickly configure your Angular application and VS Code workspace, run the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Apply the Angular VS Code configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply the `npm` scripts for Docker configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These settings are constantly tweaked to adapt to the ever-evolving landscape
    of extensions, plugins, Angular, and VS Code. Always make sure to install a fresh
    version of the task by rerunning the `install` command to get the latest version.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Execute `npm run style:fix`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `npm run lint:fix`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For more information on the `mrm` tasks, refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/expertly-simple/mrm-task-angular-vscode](https://github.com/expertly-simple/mrm-task-angular-vscode)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/expertly-simple/mrm-task-npm-docker](https://github.com/expertly-simple/mrm-task-npm-docker
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may verify your configuration against the sample projects on GitHub. However,
    note that the configuration pieces will be applied at the root of the repository
    and not under the `projects` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations – you’re done setting up your development environment!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this appendix, you mastered using CLI-based package managers for both Windows
    and macOS to speed up and automate the setup of development environments for you
    and your colleagues. You also created your first Angular project and optimized
    its configuration for development using Visual Studio Code. You then implemented
    automated style checkers and fixers to enforce coding standards and styling across
    your team. The lint checker and fixer you implemented will automatically catch
    potential coding errors and maintainability issues.
  prefs: []
  type: TYPE_NORMAL
- en: The automated scripts you created codify your team norms and document them for
    new and existing members. By reducing variance from one developer’s environment
    to the next, your team can overcome any individual configuration issue more efficiently
    and remain focused on executing the task at hand. With a collective understanding
    of a common environment, no single individual on the team carries the burden of
    having to help troubleshoot everyone else’s issues. The same idea applies to the
    shape and style of your code files.
  prefs: []
  type: TYPE_NORMAL
- en: When a team member looks at another team member’s code, it looks stylistically
    identical, which makes it easier to troubleshoot and debug an issue. As a result,
    your team is more productive. By leveraging more sophisticated and resilient tools,
    mid-to-large sized organizations can achieve considerable savings in their IT
    budgets.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The article *Automating the Setup of the Local Developer Machine* by Vishwas
    Parameshwarappa is a great place to start for using Vagrant, found at [https://www.vagrantup.com](https://www.vagrantup.com).
    You can find the article at [https://Red-gate.com/simple-talk/sysadmin/general/automating-setup-local-developer-machine](https://Red-gate.com/simple-talk/sysadmin/general/automating-setup-local-developer-machine).
  prefs: []
  type: TYPE_NORMAL
- en: Other tools include Chef at [https://www.chef.io](https://www.chef.io), and
    Puppet at [https://puppet.com](https://puppet.com). Some developers prefer to
    work within Docker containers during coding at [https://www.docker.com](https://www.docker.com).
    This is done to isolate different versions of SDKs from each other. Specific development
    tools cannot be scoped to a given folder and must be installed globally or OS-wide,
    making it difficult to work on multiple projects simultaneously. I recommend avoiding
    this type of setup if you can. I expect IDEs will automate such chores in the
    future, as CPU core counts increase and virtualization tech gains better hardware
    acceleration.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions as best as possible to ensure you’ve understood
    the key concepts from this chapter. Do you know if you’ve got all the answers
    right? Visit [https://angularforenterprise.com/self-assessment](https://angularforenterprise.com/self-assessment)
    for more:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the motivations for using a CLI tool as opposed to a GUI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For your specific operating system, what is the suggested package manager to
    use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some of the benefits of using a package manager?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the benefits of keeping the development environments of the members
    of your development team as similar to one another as possible?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the authors and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/AngularEnterpise3e](Appendix.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code1116411172100421421.png)'
  prefs: []
  type: TYPE_IMG
