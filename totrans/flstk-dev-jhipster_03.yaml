- en: Building Monolithic Web Applications with JHipster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get into action and build a production-grade web application using JHipster. Before we
    start, we need a use case. We will be building an e-commerce web application that
    manages products, customers, and their orders and invoices. The web application
    will use a MySQL database for production and will have an Angular front end. The
    UI for the actual shopping website will be different from the back office features,
    which will only be available for employees who have an administrator role. For
    this exercise, we will only be building a simple UI for the client-facing part.
    We will talk about other option as we go through this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: See how to create a monolithic web application using JHipster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Walk through important aspects of the generated code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the security aspects of the generated application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See how to run the application and tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the generated frontend screens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the tools included that will ease further development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter will require the use of a terminal (command prompt on windows)
    app throughout. You can the see previous chapter for more info about that.
  prefs: []
  type: TYPE_NORMAL
- en: Application generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start generating the application, we need to prepare our workspace
    as this workspace will be used throughout this book, and you will be creating
    many Git branches on this workspace as we proceed.
  prefs: []
  type: TYPE_NORMAL
- en: Visit [http://rogerdudler.github.io/git-guide/](http://rogerdudler.github.io/git-guide/)
    for a quick reference guide on Git commands.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 –  preparing the workspace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a new folder for the workspace. Create a folder called `e-commerce-app`
    and from the terminal, navigate to the folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a new folder for our application; let''s call it `online-store`
    and navigate to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are ready to invoke JHipster. Let's first make sure everything is ready
    by running the `jhipster --version` command. It should print a globally installed
    JHipster version, otherwise you'll need to follow the instructions from the previous
    chapter to set it up.
  prefs: []
  type: TYPE_NORMAL
- en: It is always better to use the latest versions of the tools as they might include
    important bug fixes. You can upgrade JHipster anytime using the command `yarn
    global upgrade generator-jhipster`
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 – generating code using JHipster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Initialize JHipster by running the `jhipster` command into the terminal, which
    will produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/55b08066-55d6-41fb-aa8b-894b67431c32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'JHipster will ask a number questions to get input about different options which
    are required. The first question is about the application type that we want, and
    we are presented with the following four options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Monolithic application**: As the name suggests, it creates a monolithic web
    application with a Spring Boot-based backend and an SPA frontend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microservice application**: This creates a Spring Boot microservice without
    any frontend, and is designed to work with a JHipster microservice architecture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microservice gateway**: This creates a Spring Boot application very similar
    to the monolithic application but geared towards a microservice architecture with
    additional configurations. It features an SPA frontend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JHipster UAA server**: This creates an OAuth2 User authentication and Authorization
    service. This will not feature any frontend code and is designed to be used in
    a JHipster microservice architecture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will choose the **monolithic application** for our use case. We will talk
    and look at the other options in detail in [Chapter 8](673932d7-7927-4a12-8c02-86197cc8d3aa.xhtml), *Introduction
    to Microservice Server-Side Technologies*, of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Run `jhipster --help` to see all available commands. Run `jhipster <command>
    --help` to see help information for a specific command; for example, `jhipster
    app --help` will display help information for the main app generation process.
  prefs: []
  type: TYPE_NORMAL
- en: Server-side options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The generator will now start asking us about the server side options that we
    need. Let''s go through them one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Question 1**: This prompt asks for a base name for the application, which
    is used for creating the main class file names, database names, and so on. By
    default, JHipster will suggest the current directory name if it doesn''t contain
    any special characters in the name. Let''s name our application as `store`. Please
    note that the files will be created in the current directory you are in:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/6c95f513-f616-4b4c-87fc-3181fcc65a1e.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Question 2**: This prompt asks for a Java package name. Let''s choose `com.mycompany.store`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/12e38392-dbee-4676-8b2b-0ddfe909b08a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Question 3**. This prompt asks whether we need to configure JHipster registry
    for this instance. JHipster registry provides a service discovery and config server
    implementation which is very useful for centralized configuration management and
    scaling of the application. For this use case, we will not need it, so let''s
    choose No. We will learn more about the JHipster Registry in [Chapter 8](673932d7-7927-4a12-8c02-86197cc8d3aa.xhtml), *Introduction
    to Microservice Server-Side Technologies*, of this book:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7bae52a7-2c14-4227-a243-a9a7c524d9d5.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Question 4**: This prompt asks us to select an authentication mechanism.
    We are presented with three options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JWT authentication
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP Session Authentication
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OAuth 2.0/OIDC Authentication
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We already saw how these defer in the previous chapter, and for our use case,
    let''s choose JWT authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b34a807b-0708-4ca8-8e49-b80e12caa78a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Question 5**: This prompt asks us to select a database type; the options
    provided are SQL, MongoDB, Couchbase, and Cassandra. We already learned about
    the different database options in the previous chapter. For our application, let''s
    choose an SQL database:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/e26c0421-549a-45cf-9b71-24efde78fbfa.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Question 6**: This prompt asks us to choose a specific SQL database that
    we would like to use in production; the available options are MySQL, MariaDB,
    PostgreSQL, Oracle, and Microsoft SQL Server. Let''s choose MySQL here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/b9ee211a-c09a-48a8-a811-e51b309f0793.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Question 7**:This prompt asks us to choose between our chosen SQL database
    and H2 embedded database for development. H2 embedded DB is especially useful
    as it makes development faster and self-contained, without the need to have a
    MySQL instance running. So, let''s choose the H2 disk-based persistence here as
    it is lightweight and easier in development compared to having a full-fledged
    DB service running:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3d1a438a-f772-4b79-b882-cbfd3d56cc64.png)'
  prefs: []
  type: TYPE_IMG
- en: If your use case requires working with persisted data in development and if
    the model is not going to change often, then you could also choose MySQL for development
    as it would give you a faster startup time. This is because the embedded H2 DB
    doesn't need to be initialized, but the downside is each time you make schema
    changes or recreate entities, you would have to update the DB using generated
    liquibase diff changelogs manually, or wipe the DB manually and start over again.
    With an embedded H2 DB, you could run `./gradlew clean` to wipe it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Question 8**: This prompt asks us to choose a Spring cache implementation.
    We have the option to choose between no cache, EHCache, Hazelcast, and Infinispan.
    Since we learned about these in the previous chapter, let''s go ahead and choose
    Hazelcast here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/44d0fcc9-57cd-4221-b20a-371f69c5e203.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Question 9**. This prompt asks us to choose if we need a 2^(nd) level cache
    for Hibernate. Let''s choose Yes. It will use the same cache implementation we
    chose for the previous question:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/567d2e9e-6f86-4745-857c-9454d9661f4c.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Question 10**: This prompt gives us the choice of the build tool to use for
    the project; the options are Maven and Gradle. Let''s choose Gradle here as it
    is more modern and powerful:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/eb824465-a757-4f8e-932f-b37fbc591e1d.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Question 11**: This prompt is interesting as it presents various additional
    options supported by JHipster. The options are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Social login: Adds support for using a Social login provider like Facebook,
    Twitter, and so on for login(Social login option is removed in JHipster 5 and
    you need to choose OAuth 2.0/OIDC Authentication instead to use Social login provided
    by the OIDC provider)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Elasticsearch: Adds Elasticsearch support for the generated entities'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'WebSockets: Adds WebSocket support using Spring WebSocket, SocketJS, and Stomp
    protocol'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'API first development with swagger-codegen: Adds Swagger codegen support for
    API first development'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apache Kafka: Adds support for asynchronous queue using Kafka'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s keep it simple and choose WebSockets using Spring WebSocket:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5d21189-d8b9-44e7-b2f1-7b44fb54bc9f.png)'
  prefs: []
  type: TYPE_IMG
- en: Client-side options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, the generator will ask us about the client side option, including the
    client-side framework we wish to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Question 1**: This prompt asks us to select a client-side MVVM framework;
    the options include Angular 5 and React. Let''s choose Angular 5 here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/4a5c8e0b-932a-48ba-8c19-3ed420a30588.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Question 2**. This prompt lets us enable SASS support for our CSS, and since
    SASS is awesome, let''s enable it by selecting Yes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/f902df50-6e64-4e06-aad2-ab2b8e0a34e8.png)'
  prefs: []
  type: TYPE_IMG
- en: Internationalization options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now have the opportunity to enable internationalization and select
    the languages we would like:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Question 1**. This prompt lets us enable **internationalization** (**i18n**).
    Let''s choose Yes here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/8daf4fcc-2205-4d40-9cc3-f3a68105f54a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Question 2**: Since we enabled i18n, we will be given the option to choose
    a primary language and additional i18n languages. At the time of writing, there
    are 36 supported languages including 2 **RTL** (**Right to Left**) languages.
    Let''s choose English as the primary language and Simplified Chinese as the additional
    language:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d458268c-0917-4531-b0d1-98d7c3db9f3d.png)'
  prefs: []
  type: TYPE_IMG
- en: Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we can choose testing options for our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'This prompt lets us choose testing frameworks for our application, which will
    also create sample tests for the application and entities. The options are Gatling,
    Cucumber, and Protractor. Let''s choose Protractor here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7433d8d-19dc-4443-905f-79948ff057a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This prompt lets us choose additional third-party modules from the JHipster
    marketplace ([https://www.jhipster.tech/modules/marketplace](https://www.jhipster.tech/modules/marketplace)).
    This can be helpful if we want to use additional features not supported directly
    by JHipster. We will look at this in later chapters. For now, let''s choose No.
    Don''t worry about this, as these modules can be added to the application later
    when required as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/78284fce-ea2d-47c3-bc50-2668698021ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Once all the questions are answered, the code generation will start and you
    will see an output like following, listing the files created, and then running
    yarn installation to get all the frontend dependencies installed.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not want the Yarn install and Webpack build steps to run, you could
    use the `--skip-install` flag while running JHipster to skip this. Just run `jhipster
    --skip-install`
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the installation is complete, the generator will trigger a webpack build
    for the client side so that when we start the application, we have everything
    ready:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f103264-19be-4333-8adc-575f74a75a5d.png)'
  prefs: []
  type: TYPE_IMG
- en: JHipster will check your environment to see if all the required dependencies
    like Java8, NodeJS, Git, and NPM/Yarn are installed. If not, it will show friendly
    warning messages before code generation starts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the process is complete, you will see successful messages as follows,
    and instructions to start the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7bcbb01c-c4d2-4acf-b387-838b750971f5.png)'
  prefs: []
  type: TYPE_IMG
- en: There are command-line flags that can be passed while executing the `jhipster`
    command. Running `jhipster app --help` will list all of the available command-line
    flags. One of the interesting flags, for example, is `npm`, which lets you use
    NPM instead of Yarn for dependency management.
  prefs: []
  type: TYPE_NORMAL
- en: 'JHipster will automatically initialize a Git repository for the folder and
    commit the generated file.  If you wish to do this step yourself, you can do so
    by passing the `skip-git` flag during executing `jhipster --skip-git` and execute
    the steps manually as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You could also use a GUI tool like Sourcetree or GitKraken if you wish to do
    so to work with Git.
  prefs: []
  type: TYPE_NORMAL
- en: Code walkthrough
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have generated our application with JHipster, let's go through important
    pieces of the source code which have been created. Let's open our application
    in our favorite IDE or Editor.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using IntelliJ IDEA, you can execute `idea .` in a terminal from
    the application folder to launch it. Otherwise, you can import the application
    as a new Gradle project using the menu option File | New | Project from existing
    sources and select the project folder before selecting Gradle from the options
    and click Next and then Finish. If you are using Eclipse, open the File | Import...
    dialog and select Gradle Project in the list and follow the instructions.
  prefs: []
  type: TYPE_NORMAL
- en: File structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The created application will have the following file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9c29ba9b-c796-41f9-bb21-9a356f41123d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the root folder is quite busy with a few folders but a lot
    of configuration files. The most interesting among them is:'
  prefs: []
  type: TYPE_NORMAL
- en: '`src`: This is the source folder which holds the main application source and
    the test source files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack`: This folder holds all the Webpack client-side build configurations
    for development, production, and testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gradle`: This folder has Gradle wrapper and additional Gradle build scripts
    which will be used by the main Gradle build file (JHipster provides a similar
    wrapper if Maven is chosen as well).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build.gradle`: This is our Gradle build file which specifies our applications
    build lifecycle. It also has the server side dependencies specified. The build
    uses properties defined in the `gradle.properties` file alongside it. You can
    also find an executable named `gradlew` (`gradlew.bat` for Windows), which lets
    you use Gradle without having to install it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.yo-rc.json`: This is the configuration file for JHipster. This file stores
    the options we selected during app creation, and it is used for app regeneration
    and upgrades.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json`: This is the NPM configuration file which specifies all your
    client-side dependencies, client-side build dependencies, and tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tsconfig.json`: This is the configuration for Typescript. There is also `tsconfig-aot.json`
    for Angular **AOT** (**Ahead-of-Time**) compilation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tslint.json`: This is the lint configuration for Typescript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install and configure Typescript and the Tslint plugin for your IDE or editor
    to make the most out of Typescript.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at the source folder. It has a main folder and a test
    folder, which holds the main app source code and tests the source code accordingly.
    The folder structure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`main`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docker`: Holds the Dockerfile for the application and Docker configurations
    for the selected options'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`java`: Holds the main Java source code for the application'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resources`: Holds Spring Boot configuration files, Liquibase changelogs, and
    static resources like server-side i18n files and email templates used by the application'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webapp`: Holds the Angular application source code and the client side static
    content like images, stylesheets, i18n files, and so on'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`java`: Holds the unit and integration test source for the server side'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`javascript`: Holds the Karma unit test specs and Protractor end-to-end specs
    for the client side application'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resources`: Holds Spring configuration files and static resources like server-side
    i18n files and email templates used by the application for test'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The server-side code is situated in the Java and resources folder under `src/main`,
    as seen in the preceding screenshot. The folder structure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c0e66522-8001-4202-9d41-dc0a2f49a4b9.png)'
  prefs: []
  type: TYPE_IMG
- en: You may notice that the Spring components do not use the traditional `@Autowired`
    or `@Inject` annotations for dependency injection in the generated code. This
    is because we use constructor injection instead of field injection, and Spring
    Boot doesn't need explicit annotations for constructor injection. Constructor
    injection is considered better as it enables us to write better unit tests and
    avoids design issues, whereas field injection is more elegant but easily makes
    a class monolithic. Constructor injection is a suggested best practice by the
    Spring team. Constructor injection also makes unit testing components easier.
  prefs: []
  type: TYPE_NORMAL
- en: Java source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The important parts of the Java source code are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`StoreApp.java`: This is the main entry class for the application. Since this
    is a Spring Boot application, the main class is executable and you can start the
    application by just running this class from an IDE. Let''s take a look at this
    class:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The class is annotated with a bunch of Spring JavaConfig annotations:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The first one, `@ComponentScan`, tells the Spring application to scan the source
    files and auto detect Spring components (Services, Repository, Resource, Configuration
    classes that define Spring beans, and so on).
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: The second one is `@EnableAutoConfiguration`, which tells Spring Boot to try
    to guess and auto-configure beans that the application might need based on the
    classes found on the classpath and the configurations we have provided. The exclude
    settings specifically tells Spring Boot not to auto-configure the specified beans.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The third one, `@EnableConfigurationProperties`, helps register additional configurations
    for the application via property files.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The main method of the class bootstraps the Spring Boot application and runs
    it:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`config`: This package contains Spring bean configurations for the database,
    cache, WebSocket, and so on. This is where we will configure various options for
    the application. Some of the important ones are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CacheConfiguration.java`: This class configures the Hibernate second level
    cache for the application. Since we chose Hazelcast as the cache provider, this
    class configures the same way.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DatabaseConfiguration.java`: This class configures the database for the application
    and enables transaction management, JPA auditing, and JPA repositories for the
    application. It also configures Liquibase to manage DB migrations and the H2 database
    for development.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SecurityConfiguration.java`: This is a very important part of the application
    as it configures security for the application. Let''s take a look at important
    parts of the class:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The annotations enable web security and method level security so that we can
    use `@Secured` and `@Pre/PostAuthorize` annotations on individual methods:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following configuration tells the application to ignore static content
    and certain APIs from Spring security configuration:'
  prefs:
  - PREF_UL
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following configuration tells Spring security which endpoints are permitted
    for all users, which endpoints should be authenticated, and which endpoints require
    a specific role (`ADMIN`, in this case):'
  prefs:
  - PREF_UL
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`WebConfigurer.java`: This is where we set up HTTP cache headers, MIME mappings,
    static assets location, and **CORS** (**Cross-Origin Resource Sharing**).'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JHipster provides great CORS support out of the box:'
  prefs: []
  type: TYPE_NORMAL
- en: CORS can be configured using the `jhipster.cors` property, as defined in the
    JHipster common application properties ([http://www.jhipster.tech/common-application-properties/](http://www.jhipster.tech/common-application-properties/)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is enabled by default in `dev` mode for monoliths and gateways. It is disabled
    by default for microservices as you are supposed to access them through a gateway.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is disabled by default in `prod` mode for both monoliths and microservices,
    for security reasons.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`domain`: The domain model classes for the application are in this package.
    These are simple POJOs which have JPA annotations mapping it to a Hibernate entity.
    When the Elasticsearch option is selected, these also act as the Document object.
    Let''s take a look at the `User.java` class:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An entity class is characterized by the following annotations. The `@Entity`
    annotation marks the class as a JPA entity. The `@Table` annotation maps the entity
    to a database table. The `@Cache` annotation enables second level caching of the
    entity, and it also specifies a caching strategy:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'There are various annotations used at field level in these classes. `@Id` marks
    the primary key for the entity. `@Column` maps a field to a database table column
    by the same name when no override is provided. `@NotNull`, `@Pattern`, and `@Size`
    are annotations that are used for validation. `@JsonIgnore` is used by Jackson
    to ignore fields when converting the objects into JSON which are to be returned
    in the REST API requests. This is especially useful with Hibernate as it avoids
    circular references between relationships, which create tons of SQL DB requests
    and fail:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The relationships between the database tables are also mapped to the entities
    using JPA annotations. Here, for example, it maps a many-to-many relationship between
    a user and user authorities. It also specifies a join table to be used for the
    mapping:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`repository`: This package holds the Spring Data repositories for the entities.
    These typically interface definitions which are automatically implemented by Spring
    Data. This removes the need for us to write any boilerplate implementations for
    the data access layer. Let''s look at the `UserRepository.java` example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The ` @Repository` annotation marks this as a Spring data repository component.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: The interface extends `JpaRepository`, which lets it inherit all the default
    CRUD operations like `findOne`, `findAll`, `save`, `count`, and `delete`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom methods are written as simple method definitions following the Spring
    data naming conventions so that the method name specifies the query to be generated.
    For example, `findOneByEmailIgnoreCase` generates a query equivalent of `SELECT
    * FROM user WHERE LOWER(email) = LOWER(:email)`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`security`: This package holds Spring security-related components and utils,
    and since we chose JWT as our authentication mechanism, it holds JWT-related classes
    such as `TokenProvider`, `JWTFilter`, and `JWTConfigurer` as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`service`: This package holds the service layer consisting of Spring service
    beans, DTOs, Mapstruct DTO mappers, and service utilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web`: This package holds the web resource classes, view models classes and
    utility classes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rest`: This package holds Spring resource classes for the REST API. It also
    holds view model objects and utilities. Let''s take a look at `UserResource.java`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The resource classes are marked with the `@RestController` and `@RequestMapping("/api")`
    annotations from Spring. The latter specifies the base URL path for the controller
    so that all `<applicationContext>/api/*` requests are forwarded to this class.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Request methods are annotated with annotations according to their purpose,
    for example, the below marks the `createUser` method as a `PostMapping` for `"/users"`,
    which means all POST requests to `<applicationContext>/api/users` will be served
    by this method. The `@Timed` annotation is used to measure the performance of
    the method. The `@Secured` annotation restricts the method access to the specified
    role:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`WebSocket`: This package holds the Websocket controllers and view models.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: JHipster uses **DTO **(**Data Transfer Object**) and **VM** (**View Model**)
    on the server side. DTOs are for transferring data from the service layer to and
    from the resource layer. They **break** the Hibernate transactions and avoids
    further lazy loading from being triggered by the resource layer. VMs are only
    used for displaying data on the web frontend and don't interact with the service
    layer.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The important parts of resources are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`config`: This holds the application property YAML files and Liquibase changelogs.
    The `application.yml` file holds configurable Spring Boot, JHipster, and application-specific
    properties while the `application.(dev|prod).yml` files hold properties that should
    be applied when the specific dev or prod profile is active. The test configurations
    are under `src/test/resource/application.yml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`i18n`: This holds the server-side i18n resource files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mails`: This holds Thymeleaf templates for emails.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`templates`: This holds Thymeleaf templates for the client side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: client-side source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The client-side source code is under the `src/main/webapp` folder, as we saw
    earlier. The structure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1fe1ad19-5a99-4eeb-94ed-8192e3be4e01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The most noteworthy among these are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app`: This folder holds the Angular application''s Typescript source code,
    which is organized with a folder per feature:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.main.ts`: This is the main file for the Angular app. This bootstraps the
    Angular application. Notice that it uses `platformBrowserDynamic`, which lets
    the application work with **JIT** (**Just-in-time**) compilation in the browser.
    This is ideal for development:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`app.module.ts`: This is the main module for the Angular app. It declares app
    level components and providers, and imports other modules for the application.
    It also bootstraps the main application component:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`account`: This module consists of account-related features such as activate, password, password-reset,
    register, and settings. Each typical component consists of `component.html`, `component.ts`,
    `route.ts`, and `service.ts` files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`admin`: This module consists of admin-related features such as audits, configuration, docs,
    health, logs, metrics, tracker, and user-management. Each typical component consists
    of `component.html`, `component.ts`, `route.ts`, and `service.ts` files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`blocks`: This folder consists of HTTP interceptors and other configs used
    by the application.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`entities`: This is where entity modules will be created.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`home`: The homepage module.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layouts`: This folder has layout components like the navbar, footer, error
    pages, and so on.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shared`: This module contains all the shared services (auth, tracker, user),
    components (login, alert), entity models, and utilities required for the application.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content`: This folder contains static content like images, CSS, and SASS files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`i18n`: This is where the i18n JSON files live. Each language has a folder
    with numerous JSON files organized by modules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`swagger-ui`: This folder has the Swagger UI client used in development for
    API documentation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.html`: This is the web application''s index file. This contains very
    minimal code for loading the angular application''s main component. It is a single
    page Angular application. You will also find some commented out utility code like
    Google analytics script and Service worker scripts on this file. These can be
    enabled if required:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: To enable PWA mode using service workers, just uncomment the corresponding code
    in `src/main/webapp/index.html` to register the service worker.  JHipster uses
    workbox ([https://developers.google.com/web/tools/workbox/](https://developers.google.com/web/tools/workbox/)),
    which creates the respective service worker and dynamically generates the `sw.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s start the application and see the output. There are multiple ways
    to run the application:'
  prefs: []
  type: TYPE_NORMAL
- en: By using the Spring Boot Gradle task from the terminal/command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By executing the main Java class `src/main/java/com/mycompany/store/StoreApp.java`
    from an IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By executing the packaged application file using the `java -jar` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start the application using the Gradle task. If you want to run the application
    directly in the IDE, just open the main app file `StoreApp.java` mentioned earlier,
    right-click, and choose Run 'StoreApp'.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the application via Gradle, open a terminal/command line and navigate
    to the application folder. Then, execute the Gradle command as follows (if you
    are on windows, execute `gradlew.bat`). This will trigger the default task `bootRun`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Running `./gradlew` is equivalent to running `./gradlew bootRun -Pdev`. For
    the client side, the webpack build needs to be run before starting the server
    for the first time, otherwise you will see a blank page. This task is run automatically
    during the app generation, but if it fails for some reason, it can be triggered
    manually by running `yarn run webpack:build`. The task can be triggered directly
    by the Gradle command as well by running `./gradlew webpackBuildDev bootRun -Pdev`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gradle will start downloading the wrapper and dependencies, and you should
    see the console output similar to the following screenshot after some time (anywhere
    from a few seconds to a few minutes depending on network speed):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8bd30ae3-12a3-4e5f-b6b8-e77009aadfc2.png)'
  prefs: []
  type: TYPE_IMG
- en: The app has started successfully and is available on `http://localhost:8080`.
    Open your favorite browser and navigate to the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the build preceding will stay at 90% as the process is running continuously.
  prefs: []
  type: TYPE_NORMAL
- en: Application modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see the different modules available out of the box. The modules can
    be grouped into:'
  prefs: []
  type: TYPE_NORMAL
- en: Home and Login
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Admin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Home and Login modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you open the URL, you will see a cool-looking hipster drinking coffee
    on the homepage as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42b1de89-3425-45b3-8f3d-5d85903fd559.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the home page. Let's log in to the application using the default credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the *Sign in* link on the page, or *Account | Sign in*. You will see
    the following login screen. Enter the default credentials—Username—`admin`, Password—`admin`,
    and click *Sign in*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c0555645-46d6-4122-bdf6-59853908c418.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once signed in, you will see the authenticated home page with all the authenticated
    menu items in the navbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f711b20-63f8-44a1-9d76-26668dacfd7b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we enabled internationalization, we get a Language menu. Let''s try to
    switch to a different language. Click on the Language menu and choose the next
    available language:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ff9ee658-3207-44b6-9ef8-c1c3dac32511.png)'
  prefs: []
  type: TYPE_IMG
- en: Account modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s look at the account modules that are created out of the box. Under
    Account menu, you will see a Sign out option and following modules:'
  prefs: []
  type: TYPE_NORMAL
- en: Settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module lets you change user settings such as name, email, and language:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/22c2b631-27d9-4282-b194-821eb0d2f7ce.png)'
  prefs: []
  type: TYPE_IMG
- en: Password
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module lets you change the password for the current user. There is also
    a forgot password flow with email verification out of the box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/38eba954-e8eb-43a1-ad13-ea33b7975f1d.png)'
  prefs: []
  type: TYPE_IMG
- en: To use the email features, you will have to configure an SMTP server in the
    application properties. We will look at this in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Registration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module is available only when you are not logged in. This lets you signup/register
    as a new user for the application. This will trigger a user activation flow with
    an activation email and verification. This module will not be available when choosing
    Oauth2 as your authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/746ad66c-312c-471f-9ce6-6d8b28182160.png)'
  prefs: []
  type: TYPE_IMG
- en: Admin module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s look at the generated admin module screens. These are very useful
    for development and monitoring of the application. Under the Admin menu, you will
    find the following modules:'
  prefs: []
  type: TYPE_NORMAL
- en: User management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Health
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module provides you with CRUD functionality to manage users. The results
    are paginated by default. By default, users who register using the registration
    module will be deactivated unless they complete the registration process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f9dc91fc-2227-4a8e-a0b3-a049dee1aa48.png)'
  prefs: []
  type: TYPE_IMG
- en: Metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module visualizes data provided by the Spring Boot actuator and Dropwizard
    metrics. This is very useful for monitoring application performance as it gives
    method level performance information along with JVM, HTTP, database, and cache
    metrics. The eye icon near Threads will let you see the thread dump as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/230e8067-49c2-4ad4-a945-f39c74133cdc.png)'
  prefs: []
  type: TYPE_IMG
- en: Health
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module provides the health status of application components like Database
    and other info like Disk space:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf7d78e1-38ed-4bc3-8822-0fcdd55040dd.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module helps to visualize the current application configuration in effect.
    This is very useful for troubleshooting configuration issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/416a5f16-4b6c-457d-a207-0dd906b396ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Audits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module lists all the user authentication audit logs since JHipster enables
    audits for Spring security, and hence all the security events are captured. There
    is a special Spring data repository that writes the audit events to the database.
    This is very useful from a security standpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e8a0176-d70b-4cfc-9e5b-7a36ad76d4e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module helps to view and update application log levels at runtime. This
    is very useful for troubleshooting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f43145c4-6ef3-41d8-9a88-f0971f00e0df.png)'
  prefs: []
  type: TYPE_IMG
- en: API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module provides the Swagger API documentation for the application''s REST
    API. It also provides a Try it out editor for the endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ad2c391-c727-4bea-a55d-f44f7e699314.png)'
  prefs: []
  type: TYPE_IMG
- en: Running generated tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Good software development is never complete without good testing. JHipster generates
    quite a lot of automated tests out of the box, and there are options to choose
    even more. Let's run the generated server side and client side tests for the application
    to make sure everything is working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: First, open a terminal/command line and navigate to the project folder.
  prefs: []
  type: TYPE_NORMAL
- en: Server-side tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The server-side integration tests and unit tests are present in the `src/test/java` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'These can be run directly from the IDE by choosing a package or individual
    test and running it, or via the command line by running a Gradle `test` task.
    Let''s run it using the command line. In a new terminal, navigate to the application
    source folder and execute the following command. It should finish with a success
    message, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Client-side tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The client-side unit tests and end-to-end tests are available under `src/test/javascript`.
  prefs: []
  type: TYPE_NORMAL
- en: These tests can be run using the provided npm scripts or the provided Gradle
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: You can see all available Gradle tasks by running `./gradlew tasks`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run them using the npm scripts. First, let''s run the Karma unit tests.
    In the terminal, execute the following code. You can also use `npm` instead of
    `yarn` if you prefer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'It should produce a similar output in the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s run the Protractor end-to-end tests using the npm script. In order
    to run the `e2e` tests, we need to make sure that the server is running. If you
    have shut down the server which we started earlier, make sure to start it again
    by running `./gradlew` in a terminal. Now, open a new terminal and navigate to
    the application folder and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This will start protractor tests, which will open a new Chrome browser instance
    and execute the tests there. When finished, you should see something similar to
    the following in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to create a monolithic web application using JHipster.
    We also walked through important aspects of the created source code and learned
    how to run the created application and the automated tests. We also browsed through
    the created modules and saw them in action. In the next chapter, we will see how
    we can utilize JHipster to model our business use case and generate entities for
    them. We will also learn about the **JHipster Domain Language** (**JDL**).
  prefs: []
  type: TYPE_NORMAL
