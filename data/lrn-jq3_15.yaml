- en: Appendix B – Quick Reference
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录B - 快速参考
- en: This appendix is intended to be a quick reference for the jQuery API, including
    its selector expressions and methods. A more detailed discussion of each method
    and selector is available on the jQuery documentation site, [http://api.jquery.com](http://api.jquery.com).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录旨在快速参考jQuery API，包括其选择器表达式和方法。每个方法和选择器的更详细讨论可在jQuery文档站点[http://api.jquery.com](http://api.jquery.com)上找到。
- en: Selector expressions
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择器表达式
- en: The jQuery factory function `$()` is used to find elements on the page to work
    with. This function takes a string composed of CSS-like syntax, called a selector
    expression. Selector expressions are discussed in detail in Chapter 2, *Selecting
    Elements*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery工厂函数`$()`用于查找页面上要处理的元素。此函数采用由类似CSS语法构成的字符串，称为选择器表达式。选择器表达式在第2章*选择元素*中有详细讨论。
- en: Simple CSS
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单CSS
- en: '| **Selector** | **Matches** |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| **选择器** | **匹配** |'
- en: '| `*` | All elements. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| `*` | 所有元素。 |'
- en: '| `#id` | The element with the given ID. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| `#id` | 具有给定ID的元素。 |'
- en: '| `element` | All elements of the given type. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| `element` | 给定类型的所有元素。 |'
- en: '| `.class` | All elements with the given class. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `.class` | 所有具有给定类的元素。 |'
- en: '| `a, b` | Elements that are matched by `a` or `b`. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `a, b` | 被`a`或`b`匹配的元素。 |'
- en: '| `a b` | Elements `b` that are descendants of `a`. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `a b` | 是`a`后代的元素`b`。 |'
- en: '| `a > b` | Elements `b` that are children of `a`. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `a > b` | 是`a`的子元素`b`。 |'
- en: '| `a + b` | Elements `b` that immediately follow `a`. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `a + b` | 紧接着`a`的元素`b`。 |'
- en: '| `a ~ b` | Elements `b` that are siblings of `a` and follow `a`. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `a ~ b` | 是`a`兄弟且在`a`之后的元素`b`。 |'
- en: Position among siblings
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 兄弟节点位置
- en: '| **Selector** | **Matches** |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| **选择器** | **匹配** |'
- en: '| `:nth-child(index)` | Elements that are the `index` child of their parent
    element (1-based). |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `:nth-child(index)` | 是其父元素的`index`子元素（基于1）。 |'
- en: '| `:nth-child(even)` | Elements that are an even child of their parent element
    (1-based). |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `:nth-child(even)` | 是其父元素的偶数子元素（基于1）。 |'
- en: '| `:nth-child(odd)` | Elements that are an odd child of their parent element
    (1-based). |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `:nth-child(odd)` | 元素是其父元素的奇数子元素（基于1）。 |'
- en: '| `:nth-child(formula)` | Elements that are the nth child of their parent element
    (1-based). Formulas are of the form `an+b` for integers `a` and `b`. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `:nth-child(formula)` | 是其父元素的第n个子元素（基于1）。公式的形式为`an+b`，其中`a`和`b`为整数。 |'
- en: '| `:nth-last-child()` | The same as `:nth-child()`, but counting from the last
    element to the first. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `:nth-last-child()` | 与`:nth-child()`相同，但从最后一个元素向第一个元素计数。 |'
- en: '| `:first-child` | Elements that are the first child of their parent. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `:first-child` | 其父元素的第一个子元素。 |'
- en: '| `:last-child` | Elements that are the last child of their parent. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `:last-child` | 其父元素的最后一个子元素。 |'
- en: '| `:only-child` | Elements that are the only child of their parent. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `:only-child` | 其父元素的唯一子元素。 |'
- en: '| `:nth-of-type()` | The same as `:nth-child()`, but only counting elements
    of the same element name. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `:nth-of-type()` | 与`:nth-child()`相同，但仅计算相同元素名称的元素。 |'
- en: '| `:nth-last-of-type()` | The same as `:nth-last-child()`, but only counting
    elements of the same element name. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `:nth-last-of-type()` | 与`:nth-last-child()`相同，但仅计算相同元素名称的元素。 |'
- en: '| `:first-of-type` | Elements that are the first child of the same element
    name among their siblings. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `:first-of-type` | 是其兄弟中相同元素名称的第一个子元素。 |'
- en: '| `:last-of-type` | Elements that are the last child of the same element name
    among their siblings. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `:last-of-type` | 是其兄弟元素中相同元素名称的最后一个子元素。 |'
- en: '| `:only-of-type()` | Elements that are the only child of the same element
    name among their siblings. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `:only-of-type()` | 是其兄弟中相同元素名称的唯一子元素。 |'
- en: Position among matched elements
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 匹配元素位置
- en: '| **Selector** | **Matches** |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| **选择器** | **匹配** |'
- en: '| --- | --- |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `:first` | The first element in the result set. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `:first` | 结果集中的第一个元素。 |'
- en: '| `:last` | The last element in the result set. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `:last` | 结果集中的最后一个元素。 |'
- en: '| `:not(a)` | All elements in the result set that are not matched by `a`. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `:not(a)` | 结果集中不与`a`匹配的所有元素。 |'
- en: '| `:even` | Even elements in the result set (0-based). |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `:even` | 结果集中的偶数元素（基于0）。 |'
- en: '| `:odd` | Odd elements in the result set (0-based). |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `:odd` | 结果集中的奇数元素（基于0）。 |'
- en: '| `:eq(index)` | A numbered element in the result set (0-based). |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `:eq(index)` | 结果集中的编号元素（基于0）。 |'
- en: '| `:gt(index)` | All elements in the result set after (greater than) the given
    index (0-based). |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `:gt(index)` | 结果集中给定索引（基于0）之后的所有元素。 |'
- en: '| `:lt(index)` | All elements in the result set before (less than) the given
    index (0-based). |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `:lt(index)` | 在给定索引（基于0）之前（小于）结果集中的所有元素。 |'
- en: Attributes
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性
- en: '| **Selector** | **Matches** |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| **选择器** | **匹配** |'
- en: '| `[attr]` | Elements that have the attribute `attr`. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `[attr]` | 具有`attr`属性的元素。 |'
- en: '| `[attr="value"]` | Elements whose `attr` attribute is `value`. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `[attr="value"]` | `attr`属性为`value`的元素。 |'
- en: '| `[attr!="value"]` | Elements whose `attr` attribute is not `value`. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `[attr!="value"]` | `attr`属性不是`value`的元素。 |'
- en: '| `[attr^="value"]` | Elements whose `attr` attribute begins with `value`.
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `[attr^="value"]` | `attr`属性以`value`开头的元素。 |'
- en: '| `[attr$="value"]` | Elements whose `attr` attribute ends with `value`. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `[attr$="value"]` | `attr`属性以`value`结束的元素。 |'
- en: '| `[attr*="value"]` | Elements whose `attr` attribute contains the substring
    `value`. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `[attr*="value"]` | 包含子字符串`value`的`attr`属性的元素。 |'
- en: '| `[attr~="value"]` | Elements whose `attr` attribute is a space-delimited
    set of strings, one of which is `value`. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `[attr~="value"]` | `attr`属性是一个以空格分隔的字符串集，其中之一是`value`的元素。 |'
- en: '| `[attr&#124;="value"]` | Elements whose `attr` attributes is either equal
    to `value` or begins with `value` followed by a hyphen. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `[attr&#124;="value"]` | 其`attr`属性等于`value`或以`value`连字符后跟的元素。 |'
- en: Forms
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单
- en: '| **Selector** | **Matches** |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| **选择器** | **匹配** |'
- en: '| --- | --- |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `:input` | All `<input>`, `<select>`, `<textarea>`, and `<button>` elements.
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `:input` | 所有`<input>`、`<select>`、`<textarea>`和`<button>`元素。 |'
- en: '| `:text` | The `<input>` elements with `type="text"`. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `:text` | `type="text"`的`<input>`元素。 |'
- en: '| `:password` | The `<input>` elements with `type="password"`. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `:password` | `type="password"`的`<input>`元素。 |'
- en: '| `:file` | The `<input>` elements with `type="file"`. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `:file` | `type="file"`的`<input>`元素。 |'
- en: '| `:radio` | The `<input>` elements with `type="radio"`. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `:radio` | `type="radio"`的`<input>`元素。 |'
- en: '| `:checkbox` | The `<input>` elements with `type="checkbox"`. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `:checkbox` | `type="checkbox"`的`<input>`元素。 |'
- en: '| `:submit` | The `<input>` elements with `type="submit"`. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `:submit` | `type="submit"`的`<input>`元素。 |'
- en: '| `:image` | The `<input>` elements with `type="image"`. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `:image` | `type="image"`的`<input>`元素。 |'
- en: '| `:reset` | The `<input>` elements with `type="reset"`. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `:reset` | `type="reset"`的`<input>`元素。 |'
- en: '| `:button` | The `<input>` elements with `type="button"` and `<button>` elements.
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `:button` | `type="button"`的`<input>`元素和`<button>`元素。 |'
- en: '| `:enabled` | Enabled form elements. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `:enabled` | 启用的表单元素。 |'
- en: '| `:disabled` | Disabled form elements. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `:disabled` | 禁用的表单元素。 |'
- en: '| `:checked` | Checked checkboxes and radio buttons. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `:checked` | 已选中的复选框和单选按钮。 |'
- en: '| `:selected` | Selected `<option>` elements. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `:selected` | 已选中的`<option>`元素。 |'
- en: Miscellaneous selectors
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 杂项选择器
- en: '| **Selector** | **Matches** |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| **选择器** | **匹配** |'
- en: '| `:root` | The root element of the document. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `:root` | 文档的根元素。 |'
- en: '| `:header` | Header elements (for example, `<h1>`, `<h2>`). |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `:header` | 标题元素（例如，`<h1>`、`<h2>`）。 |'
- en: '| `:animated` | Elements with an animation in progress. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `:animated` | 正在进行动画的元素。 |'
- en: '| `:contains(text)` | Elements containing the given text. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `:contains(text)` | 包含给定文本的元素。 |'
- en: '| `:empty` | Elements with no child nodes. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `:empty` | 没有子节点的元素。 |'
- en: '| `:has(a)` | Elements containing a descendant element matching `a`. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `:has(a)` | 包含匹配`a`的后代元素。 |'
- en: '| `:parent` | Elements that have child nodes. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `:parent` | 具有子节点的元素。 |'
- en: '| `:hidden` | Elements that are hidden, either through CSS or because they
    are `<input type="hidden" />`. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `:hidden` | 被隐藏的元素，无论是通过CSS还是因为它们是`<input type="hidden" />`。 |'
- en: '| `:visible` | The inverse of `:hidden`. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `:visible` | `:hidden`的反义。 |'
- en: '| `:focus` | The element that has the keyboard focus. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `:focus` | 具有键盘焦点的元素。 |'
- en: '| `:lang(language)` | Elements with the given language code (either due to
    a `lang` attribute on the element or an ancestor, or a `<meta>` declaration).
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `:lang(language)` | 具有给定语言代码的元素（可能是由元素或祖先上的`lang`属性或`<meta>`声明引起的）。 |'
- en: '| `:target` | Whichever element is targeted by the URI''s fragment identifier,
    if any. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `:target` | 如果有，URI片段标识符指定的元素。 |'
- en: DOM traversal methods
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM遍历方法
- en: After creating a jQuery object using `$()`, we can alter the set of matched
    elements we are working with by calling one of these DOM traversal methods. DOM
    traversal methods are discussed in detail in [Chapter 2](195342ed-f533-42e7-8a8d-f9a3462382b7.xhtml),
    *Selecting Elements*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`$()`创建jQuery对象后，我们可以通过调用其中一个DOM遍历方法来修改我们正在处理的匹配元素集。DOM遍历方法在[第2章](195342ed-f533-42e7-8a8d-f9a3462382b7.xhtml)
    *选择元素*中有详细讨论。
- en: Filtering
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤
- en: '| **Traversal method** | **Returns a jQuery object containing...** |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| **遍历方法** | **返回一个包含...的jQuery对象** |'
- en: '| `.filter(selector)` | Selected elements that match the given selector. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `.filter(selector)` | 匹配给定选择器的选定元素。 |'
- en: '| `.filter(callback)` | Selected elements for which the callback function returns
    `true`. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `.filter(callback)` | 回调函数返回 `true` 的选定元素。 |'
- en: '| `.eq(index)` | The selected element at the given 0-based index. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `.eq(index)` | 给定基于 0 的索引处的选定元素。 |'
- en: '| `.first()` | The first selected element. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `.first()` | 第一个选定元素。 |'
- en: '| `.last()` | The final selected element. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `.last()` | 最后一个选定元素。 |'
- en: '| `.slice(start, [end])` | Selected elements in the given range of 0-based
    indices. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `.slice(start, [end])` | 在给定的以 0 为基础的索引范围内选择元素。 |'
- en: '| `.not(selector)` | Selected elements that do not match the given selector.
    |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `.not(selector)` | 不匹配给定选择器的选定元素。 |'
- en: '| `.has(selector)` | Selected elements that have a descendant matching `selector`.
    |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `.has(selector)` | 具有与 `selector` 匹配的后代元素的选定元素。 |'
- en: Descendants
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后代
- en: '| **Traversal method** | **Returns a jQuery object containing...** |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| **遍历方法** | **返回一个包含...的 jQuery 对象** |'
- en: '| `.find(selector)` | Descendant elements that match the selector. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `.find(selector)` | 与选择器匹配的后代元素。 |'
- en: '| `.contents()` | Child nodes (including text nodes). |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `.contents()` | 子节点（包括文本节点）。 |'
- en: '| `.children([selector])` | Child nodes, optionally filtered by a selector.
    |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `.children([selector])` | 子节点，可选择由选择器进行过滤。 |'
- en: Siblings
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 兄弟
- en: '| **Traversal method** | **Returns a jQuery object containing...** |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| **遍历方法** | **返回一个包含...的 jQuery 对象** |'
- en: '| --- | --- |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `.next([selector])` | The sibling immediately following each selected element,
    optionally filtered by a selector. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `.next([selector])` | 每个选定元素后面紧邻的兄弟元素，可选择由选择器进行过滤。 |'
- en: '| `.nextAll([selector])` | All siblings following each selected element, optionally
    filtered by a selector. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `.nextAll([selector])` | 每个选定元素后面的所有兄弟元素，可选择由选择器进行过滤。 |'
- en: '| `.nextUntil([selector], [filter])` | All siblings following each selected
    element up to and not including the first element matching `selector`, optionally
    filtered by an additional selector. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `.nextUntil([selector], [filter])` | 每个选定元素后面的所有兄弟元素，直到但不包括第一个匹配 `selector`
    的元素，可选择由附加选择器进行过滤。 |'
- en: '| `.prev([selector])` | The sibling immediately preceding each selected element,
    optionally filtered by a selector. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `.prev([selector])` | 每个选定元素前面紧邻的兄弟元素，可选择由选择器进行过滤。 |'
- en: '| `.prevAll([selector])` | All siblings preceding each selected element, optionally
    filtered by a selector. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `.prevAll([selector])` | 每个选定元素之前的所有兄弟元素，可选择由选择器进行过滤。 |'
- en: '| `.prevUntil([selector], [filter])` | All siblings preceding each selected
    element up to and not including the first element matching `selector`, optionally
    filtered by an additional selector. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `.prevUntil([selector], [filter])` | 每个选定元素前面的所有兄弟元素，直到但不包括第一个匹配 `selector`
    的元素，可选择由附加选择器进行过滤。 |'
- en: '| `.siblings([selector])` | All siblings, optionally filtered by a selector.
    |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `.siblings([selector])` | 所有兄弟元素，可选择由选择器进行过滤。 |'
- en: Ancestors
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 祖先
- en: '| **Traversal method** | **Returns a jQuery object containing...** |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| **遍历方法** | **返回一个包含...的 jQuery 对象** |'
- en: '| `.parent([selector])` | The parent of each selected element, optionally filtered
    by a selector. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `.parent([selector])` | 每个选定元素的父元素，可选择由选择器进行过滤。 |'
- en: '| `.parents([selector])` | All ancestors, optionally filtered by a selector.
    |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `.parents([selector])` | 所有祖先元素，可选择由选择器进行过滤。 |'
- en: '| `.parentsUntil([selector], [filter])` | All ancestors of each selected element
    up to and not including the first element matching `selector`, optionally filtered
    by an additional selector. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `.parentsUntil([selector], [filter])` | 每个选定元素的所有祖先元素，直到但不包括第一个匹配 `selector`
    的元素，可选择由附加选择器进行过滤。 |'
- en: '| `.closest(selector)` | The first element that matches the selector, starting
    at the selected element and moving up through its ancestors in the DOM tree. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `.closest(selector)` | 从选定元素开始，并在 DOM 树中沿着其祖先移动，找到与选择器匹配的第一个元素。 |'
- en: '| `.offsetParent()` | The positioned parent, either relative or absolute, of
    the first selected element. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `.offsetParent()` | 第一个选定元素的定位父元素，可以是相对定位或绝对定位。 |'
- en: Collection manipulation
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合操作
- en: '| **Traversal method** | **Returns a jQuery object containing...** |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| **遍历方法** | **返回一个包含...的 jQuery 对象** |'
- en: '| `.add(selector)` | The selected elements, plus any additional elements that
    match the given selector. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `.add(selector)` | 选定的元素，加上与给定选择器匹配的任何其他元素。 |'
- en: '| `.addBack()` | The selected elements, plus the previous set of selected elements
    on the internal jQuery stack. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `.addBack()` | 选定的元素，加上内部 jQuery 堆栈上先前选择的一组元素。 |'
- en: '| `.end()` | The previous set of selected elements on the internal jQuery stack.
    |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `.end()` | 内部 jQuery 堆栈上先前选择的一组元素。 |'
- en: '| `.map(callback)` | The result of the callback function when called on each
    selected element. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `.map(callback)` | 在每个选定元素上调用回调函数的结果。 |'
- en: '| `.pushStack(elements)` | The specified elements. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `.pushStack(elements)` | 指定的元素。 |'
- en: Working with selected elements
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理选定元素
- en: '| **Traversal method** | **Description** |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| **穿越方法** | **描述** |'
- en: '| `.is(selector)` | Determines whether any matched element is matched by the
    given selector expression. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `.is(selector)` | 确定任何匹配元素是否被给定的选择器表达式匹配。 |'
- en: '| `.index()` | Gets the index of the matched element in relation to its siblings.
    |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `.index()` | 获取匹配元素相对于其兄弟元素的索引。 |'
- en: '| `.index(element)` | Gets the index of the given DOM node within the set of
    matched elements. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `.index(element)` | 获取给定DOM节点在匹配元素集合中的索引。 |'
- en: '| `$.contains(a, b)` | Determines whether DOM node `b` contains DOM node `a`.
    |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `$.contains(a, b)` | 确定DOM节点`b`是否包含DOM节点`a`。 |'
- en: '| `.each(callback)` | Iterates over the matched elements, executing `callback`
    for each element. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `.each(callback)` | 遍历匹配的元素，为每个元素执行`callback`。 |'
- en: '| `.length` | Gets the number of matched elements. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `.length` | 获取匹配元素的数量。 |'
- en: '| `.get()` | Gets an array of DOM nodes corresponding to the matched elements.
    |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `.get()` | 获取与匹配元素对应的DOM节点数组。 |'
- en: '| `.get(index)` | Gets the DOM node corresponding to the matched element at
    the given index. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `.get(index)` | 获取给定索引处匹配元素对应的DOM节点。 |'
- en: '| `.toArray()` | Gets an array of DOM nodes corresponding to the matched elements.
    |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `.toArray()` | 获取与匹配元素对应的DOM节点数组。 |'
- en: Event methods
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件方法
- en: To react to user behavior, we need to register our handlers using these event
    methods. Note that many DOM events only apply to certain element types; these
    subtleties are not covered here. Event methods are discussed in detail in [Chapter
    3](2036c6b0-e8c5-405a-b54b-b3f31eab404c.xhtml), *Handling Events*.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对用户行为做出反应，我们需要使用这些事件方法注册我们的处理程序。请注意，许多DOM事件仅适用于特定的元素类型；这些细微之处在此未涉及。事件方法在[第三章](2036c6b0-e8c5-405a-b54b-b3f31eab404c.xhtml)中详细讨论，*处理事件*。
- en: Binding
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绑定
- en: '| **Event method** | **Description** |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| **事件方法** | **描述** |'
- en: '| --- | --- |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `.ready(handler)` | Binds `handler` to be called when the DOM and CSS are
    fully loaded. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `.ready(handler)` | 绑定`handler`以在DOM和CSS完全加载时调用。 |'
- en: '| `.on(type, [selector], [data], handler)` | Binds `handler` to be called when
    the given type of event is sent to the element. If `selector` is provided, performs
    event delegation. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `.on(type, [selector], [data], handler)` | 绑定`handler`以在给定类型的事件发送到元素时调用。如果提供了`selector`，则执行事件委托。
    |'
- en: '| `.on(events, [selector], [data])` | Binds multiple handlers for events as
    specified in the `events` object parameter. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `.on(events, [selector], [data])` | 根据`events`对象参数中指定的多个事件为事件绑定多个处理程序。 |'
- en: '| `.off(type, [selector], [handler])` | Removes bindings on the element. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `.off(type, [selector], [handler])` | 删除元素上的绑定。 |'
- en: '| `.one(type, [data], handler)` | Binds `handler` to be called when the given
    type of event is sent to the element. Removes the binding when the handler is
    called. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `.one(type, [data], handler)` | 绑定`handler`以在给定类型的事件发送到元素时调用。在处理程序被调用时删除绑定。
    |'
- en: Shorthand binding
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩略绑定
- en: '| **Event method** | **Description** |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| **事件方法** | **描述** |'
- en: '| --- | --- |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `.blur(handler)` | Binds `handler` to be called when the element loses keyboard
    focus. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `.blur(handler)` | 绑定`handler`以在元素失去键盘焦点时调用。 |'
- en: '| `.change(handler)` | Binds `handler` to be called when the element''s value
    changes. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `.change(handler)` | 绑定`handler`以在元素的值更改时调用。 |'
- en: '| `.click(handler)` | Binds `handler` to be called when the element is clicked.
    |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `.click(handler)` | 绑定`handler`以在单击元素时调用。 |'
- en: '| `.dblclick(handler)` | Binds `handler` to be called when the element is double-clicked.
    |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `.dblclick(handler)` | 绑定`handler`以在元素被双击时调用。 |'
- en: '| `.focus(handler)` | Binds `handler` to be called when the element gains keyboard
    focus. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `.focus(handler)` | 绑定`handler`以在元素获得键盘焦点时调用。 |'
- en: '| `.focusin(handler)` | Binds `handler` to be called when the element, or a
    descendant, gains keyboard focus. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `.focusin(handler)` | 绑定`handler`以在元素或后代获得键盘焦点时调用。 |'
- en: '| `.focusout(handler)` | Binds `handler` to be called when the element, or
    a descendant, loses keyboard focus. |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `.focusout(handler)` | 绑定`handler`以在元素或后代失去键盘焦点时调用。 |'
- en: '| `.keydown(handler)` | Binds `handler` to be called when a key is pressed
    and the element has keyboard focus. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `.keydown(handler)` | 绑定`handler`以在按键按下且元素具有键盘焦点时调用。 |'
- en: '| `.keypress(handler)` | Binds `handler` to be called when a keystroke occurs
    and the element has keyboard focus. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `.keypress(handler)` | 绑定`handler`以在发生按键事件且元素具有键盘焦点时调用。 |'
- en: '| `.keyup(handler)` | Binds `handler` to be called when a key is released and
    the element has keyboard focus. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `.keyup(handler)` | 当释放按键且元素具有键盘焦点时调用`handler`。 |'
- en: '| `.mousedown(handler)` | Binds `handler` to be called when the mouse button
    is pressed within the element. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `.mousedown(handler)` | 当鼠标按钮在元素内按下时调用`handler`。 |'
- en: '| `.mouseenter(handler)` | Binds `handler` to be called when the mouse pointer
    enters the element. Not affected by event bubbling. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `.mouseenter(handler)` | 当鼠标指针进入元素时调用`handler`。不受事件冒泡影响。 |'
- en: '| `.mouseleave(handler)` | Binds `handler` to be called when the mouse pointer
    leaves the element. Not affected by event bubbling. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `.mouseleave(handler)` | 当鼠标指针离开元素时调用`handler`。不受事件冒泡影响。 |'
- en: '| `.mousemove(handler)` | Binds `handler` to be called when the mouse pointer
    moves within the element. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `.mousemove(handler)` | 当鼠标指针在元素内移动时调用`handler`。 |'
- en: '| `.mouseout(handler)` | Binds `handler` to be called when the mouse pointer
    leaves the element. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `.mouseout(handler)` | 当鼠标指针离开元素时调用`handler`。 |'
- en: '| `.mouseover(handler)` | Binds `handler` to be called when the mouse pointer
    enters the element. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `.mouseover(handler)` | 当鼠标指针进入元素时调用`handler`。 |'
- en: '| `.mouseup(handler)` | Binds `handler` to be called when the mouse button
    is released within the element. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `.mouseup(handler)` | 当鼠标按钮在元素内释放时调用`handler`。 |'
- en: '| `.resize(handler)` | Binds `handler` to be called when the element is resized.
    |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `.resize(handler)` | 当元素大小改变时调用`handler`。 |'
- en: '| `.scroll(handler)` | Binds `handler` to be called when the element''s scroll
    position changes. |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `.scroll(handler)` | 当元素的滚动位置发生变化时调用`handler`。 |'
- en: '| `.select(handler)` | Binds `handler` to be called when text in the element
    is selected. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `.select(handler)` | 当元素中的文本被选择时绑定`handler`。 |'
- en: '| `.submit(handler)` | Binds `handler` to be called when the form element is
    submitted. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `.submit(handler)` | 当表单元素提交时调用`handler`。 |'
- en: '| `.hover(enter, leave)` | Binds `enter` to be called when the mouse enters
    the element, and `leave` to be called when the mouse leaves it. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| `.hover(enter, leave)` | 当鼠标进入元素时绑定`enter`，当鼠标离开时绑定`leave`。 |'
- en: Triggering
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 触发
- en: '| **Event method** | **Description** |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| **事件方法** | **描述** |'
- en: '| `.trigger(type, [data])` | Triggers handlers for the event on the element
    and executes the default action for the event. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `.trigger(type, [data])` | 在元素上触发事件的处理程序，并执行事件的默认操作。 |'
- en: '| `.triggerHandler(type, [data])` | Triggers handlers for the event on the
    element without executing any default actions. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `.triggerHandler(type, [data])` | 在元素上触发事件的处理程序，而不执行任何默认操作。 |'
- en: Shorthand triggering
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简写触发
- en: '| **Event method** | **Description** |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| **事件方法** | **描述** |'
- en: '| `.blur()` | Triggers the `blur` event. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `.blur()` | 触发`blur`事件。 |'
- en: '| `.change()` | Triggers the `change` event. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `.change()` | 触发`change`事件。 |'
- en: '| `.click()` | Triggers the `click` event. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `.click()` | 触发`click`事件。 |'
- en: '| `.dblclick()` | Triggers the `dblclick` event. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `.dblclick()` | 触发`dblclick`事件。 |'
- en: '| `.error()` | Triggers the `error` event. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `.error()` | 触发`error`事件。 |'
- en: '| `.focus()` | Triggers the `focus` event. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `.focus()` | 触发`focus`事件。 |'
- en: '| `.keydown()` | Triggers the `keydown` event. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `.keydown()` | 触发`keydown`事件。 |'
- en: '| `.keypress()` | Triggers the `keypress` event. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `.keypress()` | 触发`keypress`事件。 |'
- en: '| `.keyup()` | Triggers the `keyup` event. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `.keyup()` | 触发`keyup`事件。 |'
- en: '| `.select()` | Triggers the `select` event. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `.select()` | 触发`select`事件。 |'
- en: '| `.submit()` | Triggers the `submit` event. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `.submit()` | 触发`submit`事件。 |'
- en: Utility
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实用程序
- en: '| **Event method** | **Description** |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| **事件方法** | **描述** |'
- en: '| `$.proxy(fn, context)` | Creates a new function that executes with the given
    context. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `$.proxy(fn, context)` | 创建一个以给定上下文执行的新函数。 |'
- en: Effect methods
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 效果方法
- en: These effect methods may be used to perform animations on DOM elements. The
    effect methods are discussed in detail in [Chapter 4](6544cf68-239c-4a0b-99f6-2d128dc5f7b1.xhtml),
    *Styling and Animating*.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这些效果方法可用于对DOM元素执行动画。有关详细信息，请参阅[第4章](6544cf68-239c-4a0b-99f6-2d128dc5f7b1.xhtml)
    *样式和动画*。
- en: Predefined effects
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预定义效果
- en: '| **Effect method** | **Description** |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| **效果方法** | **描述** |'
- en: '| --- | --- |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `.show()` | Displays the matched elements. |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| `.show()` | 显示匹配的元素。 |'
- en: '| `.hide()` | Hides the matched elements. |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| `.hide()` | 隐藏匹配的元素。 |'
- en: '| `.show(speed, [callback])` | Displays the matched elements by animating `height`,
    `width`, and `opacity`. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| `.show(speed, [callback])` | 通过动画`height`、`width`和`opacity`显示匹配的元素。 |'
- en: '| `.hide(speed, [callback])` | Hides the matched elements by animating `height`,
    `width`, and `opacity`. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `.hide(speed, [callback])` | 通过动画`height`，`width`和`opacity`隐藏匹配元素。 |'
- en: '| `.slideDown([speed], [callback])` | Displays the matched elements with a
    sliding motion. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `.slideDown([speed], [callback])` | 通过滑动动作显示匹配元素。 |'
- en: '| `.slideUp([speed], [callback])` | Hides the matched elements with a sliding
    motion. |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `.slideUp([speed], [callback])` | 通过滑动动作隐藏匹配元素。 |'
- en: '| `.slideToggle([speed], [callback])` | Displays or hides the matched elements
    with a sliding motion. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `.slideToggle([speed], [callback])` | 显示或隐藏匹配元素并带有滑动动作。 |'
- en: '| `.fadeIn([speed], [callback])` | Displays the matched elements by fading
    them to opaque. |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| `.fadeIn([speed], [callback])` | 通过使元素淡入到不透明来显示匹配元素。 |'
- en: '| `.fadeOut([speed], [callback])` | Hides the matched elements by fading them
    to transparent. |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| `.fadeOut([speed], [callback])` | 通过使元素淡出到透明来隐藏匹配元素。 |'
- en: '| `.fadeToggle([speed], [callback])` | Displays or hides the matched elements
    with a fading animation. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `.fadeToggle([speed], [callback])` | 显示或隐藏匹配元素并带有幻灯片动画。 |'
- en: '| `.fadeTo(speed, opacity, [callback])` | Adjusts the opacity of the matched
    elements. |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `.fadeTo(speed, opacity, [callback])` | 调整匹配元素的不透明度。 |'
- en: Custom animations
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义动画
- en: '| **Effect method** | **Description** |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| **效果方法** | **描述** |'
- en: '| `.animate(properties, [speed], [easing], [callback])` | Performs a custom
    animation of the specified CSS properties. |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| `.animate(properties, [speed], [easing], [callback])` | 执行指定CSS属性的自定义动画。
    |'
- en: '| `.animate(properties, options)` | A lower-level interface to `.animate()`,
    allowing control over the animation queue. |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| `.animate(properties, options)` | 一个更低层次的`.animate()`接口，允许控制动画队列。 |'
- en: Queue manipulation
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 队列操作
- en: '| **Effect method** | **Description** |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| **效果方法** | **描述** |'
- en: '| --- | --- |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `.queue([queueName])` | Retrieves the queue of functions on the first matched
    element. |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| `.queue([queueName])` | 检索第一个匹配元素上的函数队列。 |'
- en: '| `.queue([queueName], callback)` | Adds `callback` to the end of the queue.
    |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| `.queue([queueName], callback)` | 将`callback`添加到队列的末尾。 |'
- en: '| `.queue([queueName], newQueue)` | Replaces the queue with a new one. |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| `.queue([queueName], newQueue)` | 用新队列替换当前队列。 |'
- en: '| `.dequeue([queueName])` | Executes the next function on the queue. |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| `.dequeue([queueName])` | 在队列上执行下一个函数。 |'
- en: '| `.clearQueue([queueName])` | Empties the queue of all pending functions.
    |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `.clearQueue([queueName])` | 清空所有待处理函数的队列。 |'
- en: '| `.stop([clearQueue], [jumpToEnd])` | Stops the currently running animation,
    then starts queued animations, if any. |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `.stop([clearQueue], [jumpToEnd])` | 停止当前运行的动画，然后启动排队的动画（如果有的话）。 |'
- en: '| `.finish([queueName])` | Stops the currently running animation and immediately
    advances all queued animations to their target values. |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `.finish([queueName])` | 停止当前运行的动画，立即将所有排队的动画推进到它们的目标值。 |'
- en: '| `.delay(duration, [queueName])` | Waits `duration` milliseconds before executing
    the next item in the queue. |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `.delay(duration, [queueName])` | 在执行队列中的下一项之前等待`duration`毫秒。 |'
- en: '| `.promise([queueName], [target])` | Returns a promise object to be resolved
    once all queued actions on the collection have finished. |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| `.promise([queueName], [target])` | 返回一个Promise对象，一旦集合上的所有排队动作完成，就会被解析。 |'
- en: DOM manipulation methods
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM操作方法
- en: The DOM manipulation methods are discussed in detail in [Chapter 5](fa35636a-37d4-49b9-ba72-aa6596bab015.xhtml),
    *Manipulating the DOM*.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: DOM操作方法在[第5章](fa35636a-37d4-49b9-ba72-aa6596bab015.xhtml)中详细讨论，*操作DOM*。
- en: Attributes and properties
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性和属性
- en: '| **Manipulation method** | **Description** |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| **操作方法** | **描述** |'
- en: '| --- | --- |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `.attr(key)` | Gets the attribute named `key`. |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| `.attr(key)` | 获取名为`key`的属性。 |'
- en: '| `.attr(key, value)` | Sets the attribute named `key` to `value`. |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| `.attr(key, value)` | 将名为`key`的属性设置为`value`。 |'
- en: '| `.attr(key, fn)` | Sets the attribute named `key` to the result of `fn` (called
    separately on each matched element). |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `.attr(key, fn)` | 将名为`key`的属性设置为`fn`的结果（分别在每个匹配元素上调用）。 |'
- en: '| `.attr(obj)` | Sets attribute values given as key-value pairs. |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `.attr(obj)` | 设置以键值对形式给出的属性值。 |'
- en: '| `.removeAttr(key)` | Removes the attribute named `key`. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `.removeAttr(key)` | 删除名为`key`的属性。 |'
- en: '| `.prop(key)` | Gets the property named `key`. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| `.prop(key)` | 获取名为`key`的属性。 |'
- en: '| `.prop(key, value)` | Sets the property named `key` to `value`. |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| `.prop(key, value)` | 设置名为`key`的属性为`value`。 |'
- en: '| `.prop(key, fn)` | Sets the property named `key` to the result of `fn` (called
    separately on each matched element). |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| `.prop(key, fn)` | 将名为`key`的属性设置为`fn`的结果（分别在每个匹配元素上调用）。 |'
- en: '| `.prop(obj)` | Sets property values given as key-value pairs. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| `.prop(obj)` | 设置以键值对形式给出的属性值。 |'
- en: '| `.removeProp(key)` | Removes the property named `key`. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| `.removeProp(key)` | 移除名为`key`的属性。 |'
- en: '| `.addClass(class)` | Adds the given class to each matched element. |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| `.addClass(class)` | 将给定的类添加到每个匹配元素中。 |'
- en: '| `.removeClass(class)` | Removes the given class from each matched element.
    |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| `.removeClass(class)` | 从每个匹配元素中删除给定的类。 |'
- en: '| `.toggleClass(class)` | Removes the given class if present, and adds it if
    not, for each matched element. |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| `.toggleClass(class)` | 如果存在，则从每个匹配元素中删除给定的类，并在不存在时添加。 |'
- en: '| `.hasClass(class)` | Returns `true` if any of the matched elements has the
    given class. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| `.hasClass(class)` | 如果任何匹配的元素具有给定的类，则返回`true`。 |'
- en: '| `.val()` | Gets the value attribute of the first matched element. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| `.val()` | 获取第一个匹配元素的值属性。 |'
- en: '| `.val(value)` | Sets the value attribute of each element to `value`. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| `.val(value)` | 将每个元素的值属性设置为`value`。 |'
- en: Content
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内容
- en: '| **Manipulation method** | **Description** |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| **操作方法** | **描述** |'
- en: '| `.html()` | Gets the HTML content of the first matched element. |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| `.html()` | 获取第一个匹配元素的HTML内容。 |'
- en: '| `.html(value)` | Sets the HTML content of each matched element to value.
    |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| `.html(value)` | 将每个匹配元素的HTML内容设置为value。 |'
- en: '| `.text()` | Gets the textual content of all matched elements as a single
    string. |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| `.text()` | 将所有匹配元素的文本内容作为单个字符串获取。 |'
- en: '| `.text(value)` | Sets the textual content of each matched element to `value`.
    |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| `.text(value)` | 将每个匹配元素的文本内容设置为`value`。 |'
- en: CSS
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS
- en: '| **Manipulation method** | **Description** |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| **操作方法** | **描述** |'
- en: '| `.css(key)` | Gets the CSS attribute named `key`. |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| `.css(key)` | 获取名为`key`的CSS属性。 |'
- en: '| `.css(key, value)` | Sets the CSS attribute named `key` to `value`. |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| `.css(key, value)` | 将名为`key`的CSS属性设置为`value`。 |'
- en: '| `.css(obj)` | Sets CSS attribute values given as key-value pairs. |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `.css(obj)` | 设置以键值对给出的CSS属性值。 |'
- en: Dimensions
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尺寸
- en: '| **Manipulation method** | **Description** |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| **操作方法** | **描述** |'
- en: '| `.offset()` | Gets the top and left pixel coordinates of the first matched
    element, relative to the viewport. |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| `.offset()` | 获取第一个匹配元素相对于视口的顶部和左侧像素坐标。 |'
- en: '| `.position()` | Gets the top and left pixel coordinates of the first matched
    element, relative to the element returned by `.offsetParent()`. |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| `.position()` | 获取第一个匹配元素相对于`.offsetParent()`返回的元素的顶部和左侧像素坐标。 |'
- en: '| `.scrollTop()` | Gets the vertical scroll position of the first matched element.
    |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| `.scrollTop()` | 获取第一个匹配元素的垂直滚动位置。 |'
- en: '| `.scrollTop(value)` | Sets the vertical scroll position of all matched elements
    to `value`. |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| `.scrollTop(value)` | 将所有匹配元素的垂直滚动位置设置为`value`。 |'
- en: '| `.scrollLeft()` | Gets the horizontal scroll position of the first matched
    element. |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| `.scrollLeft()` | 获取第一个匹配元素的水平滚动位置。 |'
- en: '| `.scrollLeft(value)` | Sets the horizontal scroll position of all matched
    elements to `value`. |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| `.scrollLeft(value)` | 将所有匹配元素的水平滚动位置设置为`value`。 |'
- en: '| `.height()` | Gets the height of the first matched element. |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| `.height()` | 获取第一个匹配元素的高度。 |'
- en: '| `.height(value)` | Sets the height of all matched elements to `value`. |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| `.height(value)` | 将所有匹配元素的高度设置为`value`。 |'
- en: '| `.width()` | Gets the width of the first matched element. |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| `.width()` | 获取第一个匹配元素的宽度。 |'
- en: '| `.width(value)` | Sets the width of all matched elements to `value`. |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| `.width(value)` | 将所有匹配元素的宽度设置为`value`。 |'
- en: '| `.innerHeight()` | Gets the height of the first matched element, including
    padding, but not border. |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| `.innerHeight()` | 获取第一个匹配元素的高度，包括填充，但不包括边框。 |'
- en: '| `.innerWidth()` | Gets the width of the first matched element, including
    padding, but not border. |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| `.innerWidth()` | 获取第一个匹配元素的宽度，包括填充，但不包括边框。 |'
- en: '| `.outerHeight(includeMargin)` | Gets the height of the first matched element,
    including padding, border, and optional margin. |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| `.outerHeight(includeMargin)` | 获取第一个匹配元素的高度，包括填充，边框和可选的外边距。 |'
- en: '| `.outerWidth(includeMargin)` | Gets the width of the first matched element,
    including padding, border, and optional margin. |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| `.outerWidth(includeMargin)` | 获取第一个匹配元素的宽度，包括填充，边框和可选的外边距。 |'
- en: Insertion
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插入
- en: '| **Manipulation method** | **Description** |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| **操作方法** | **描述** |'
- en: '| --- | --- |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `.append(content)` | Inserts `content` at the end of the interior of each
    matched element. |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| `.append(content)` | 将`content`插入到每个匹配元素的内部末尾。 |'
- en: '| `.appendTo(selector)` | Inserts the matched elements at the end of the interior
    of the elements matched by `selector`. |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| `.appendTo(selector)` | 将匹配的元素插入到由`selector`匹配的元素内部的末尾。 |'
- en: '| `.prepend(content)` | Inserts `content` at the beginning of the interior
    of each matched element. |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| `.prepend(content)` | 将`content`插入到每个匹配元素的内部开头。 |'
- en: '| `.prependTo(selector)` | Inserts the matched elements at the beginning of
    the interior of the elements matched by `selector`. |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| `.prependTo(selector)` | 将匹配的元素插入到由`selector`匹配的元素的内部开头。 |'
- en: '| `.after(content)` | Inserts `content` after each matched element. |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| `.after(content)` | 在每个匹配的元素之后插入`content`。 |'
- en: '| `.insertAfter(selector)` | Inserts the matched elements after each of the
    elements matched by `selector`. |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| `.insertAfter(selector)` | 在每个由`selector`匹配的元素之后插入匹配的元素。 |'
- en: '| `.before(content)` | Inserts `content` before each matched element. |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| `.before(content)` | 在每个匹配的元素之前插入`content`。 |'
- en: '| `.insertBefore(selector)` | Inserts the matched elements before each of the
    elements matched by `selector`. |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| `.insertBefore(selector)` | 将匹配的元素插入到由`selector`匹配的每个元素之前。 |'
- en: '| `.wrap(content)` | Wraps each of the matched elements within `content`. |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| `.wrap(content)` | 将每个匹配的元素包裹在`content`中。 |'
- en: '| `.wrapAll(content)` | Wraps all of the matched elements as a single unit
    within `content`. |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| `.wrapAll(content)` | 将所有匹配的元素作为单个单元包裹在`content`中。 |'
- en: '| `.wrapInner(content)` | Wraps the interior contents of each of the matched
    elements within `content`. |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| `.wrapInner(content)` | 将每个匹配元素的内部内容包裹在`content`中。 |'
- en: Replacement
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替换
- en: '| **Manipulation method** | **Description** |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| **操作方法** | **描述** |'
- en: '| `.replaceWith(content)` | Replaces the matched elements with `content`. |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| `.replaceWith(content)` | 用`content`替换匹配的元素。 |'
- en: '| `.replaceAll(selector)` | Replaces the elements matched by `selector` with
    the matched elements. |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| `.replaceAll(selector)` | 用匹配的元素替换由`selector`匹配的元素。 |'
- en: Removal
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除
- en: '| **Manipulation method** | **Description** |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| **操作方法** | **描述** |'
- en: '| --- | --- |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `.empty()` | Removes the child nodes of each matched element. |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| `.empty()` | 移除每个匹配元素的子节点。 |'
- en: '| `.remove([selector])` | Removes the matched nodes (optionally filtered by
    `selector`) from the DOM. |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| `.remove([selector])` | 从 DOM 中删除匹配的节点（可选地通过`selector`过滤）。 |'
- en: '| `.detach([selector])` | Removes the matched nodes (optionally filtered by
    `selector`) from the DOM, preserving jQuery data attached to them. |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| `.detach([selector])` | 从 DOM 中删除匹配的节点（可选地通过`selector`过滤），保留附加到它们的 jQuery
    数据。 |'
- en: '| `.unwrap()` | Removes the element''s parent. |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| `.unwrap()` | 删除元素的父元素。 |'
- en: Copying
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制
- en: '| **Manipulation method** | **Description** |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| **操作方法** | **描述** |'
- en: '| `.clone([withHandlers], [deepWithHandlers])` | Makes a copy of all matched
    elements, optionally also copying event handlers. |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| `.clone([withHandlers], [deepWithHandlers])` | 复制所有匹配的元素，可选择地也复制事件处理程序。 |'
- en: Data
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据
- en: '| **Manipulation method** | **Description** |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| **操作方法** | **描述** |'
- en: '| `.data(key)` | Gets the data item named `key` associated with the first matched
    element. |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| `.data(key)` | 获取第一个匹配元素关联的名为`key`的数据项。 |'
- en: '| `.data(key, value)` | Sets the data item named `key` associated with each
    matched element to `value`. |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| `.data(key, value)` | 将名为`key`的数据项与每个匹配的元素关联到`value`。 |'
- en: '| `.removeData(key)` | Removes the data item named `key` associated with each
    matched element. |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| `.removeData(key)` | 删除与每个匹配元素关联的名为`key`的数据项。 |'
- en: Ajax methods
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ajax 方法
- en: We can retrieve information from the server without requiring a page refresh
    by calling one of these Ajax methods. Ajax methods are discussed in detail in
    [Chapter 6](3a5a790f-4c0a-4b63-bb00-cc38e78309c6.xhtml), *Sending Data with Ajax*.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用其中一个 Ajax 方法，我们可以在不需要页面刷新的情况下从服务器检索信息。Ajax 方法在[第 6 章](3a5a790f-4c0a-4b63-bb00-cc38e78309c6.xhtml)中详细讨论，*使用
    Ajax 发送数据*。
- en: Issuing requests
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发出请求
- en: '| **Ajax method** | **Description** |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| **Ajax 方法** | **描述** |'
- en: '| --- | --- |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `$.ajax([url], options)` | Makes an Ajax request using the provided set of
    options. This is a low-level method that is often called via other convenience
    methods. |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| `$.ajax([url], options)` | 使用提供的选项集进行 Ajax 请求。这是一个低级方法，通常通过其他便利方法调用。 |'
- en: '| `.load(url, [data], [callback])` | Makes an Ajax request to `url` and places
    the response into the matched elements. |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| `.load(url, [data], [callback])` | 发送 Ajax 请求到`url`，并将响应放入匹配的元素中。 |'
- en: '| `$.get(url, [data], [callback], [returnType])` | Makes an Ajax request to
    `url` using the `GET` method. |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| `$.get(url, [data], [callback], [returnType])` | 使用`GET`方法向`url`发出 Ajax 请求。
    |'
- en: '| `$.getJSON(url, [data], [callback])` | Makes an Ajax request to `url`, interpreting
    the response as a JSON data structure. |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| `$.getJSON(url, [data], [callback])` | 发送 Ajax 请求到`url`，将响应解释为 JSON 数据结构。
    |'
- en: '| `$.getScript(url, [callback])` | Makes an Ajax request to `url`, executing
    the response as JavaScript. |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| `$.getScript(url, [callback])` | 发送 Ajax 请求到`url`，执行响应作为 JavaScript。 |'
- en: '| `$.post(url, [data], [callback], [returnType])` | Makes an Ajax request to
    `url` using the `POST` method. |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| `$.post(url, [data], [callback], [returnType])` | 使用`POST`方法向`url`发出Ajax请求。
    |'
- en: Request monitoring
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求监控
- en: '| **Ajax method** | **Description** |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| **Ajax方法** | **描述** |'
- en: '| `.ajaxComplete(handler)` | Binds `handler` to be called when any Ajax transaction
    completes. |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| `.ajaxComplete(handler)` | 将`handler`绑定到在任何Ajax事务完成时调用。 |'
- en: '| `.ajaxError(handler)` | Binds `handler` to be called when any Ajax transaction
    completes with an error. |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| `.ajaxError(handler)` | 将`handler`绑定到任何Ajax事务以错误完成时调用。 |'
- en: '| `.ajaxSend(handler)` | Binds `handler` to be called when any Ajax transaction
    begins. |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| `.ajaxSend(handler)` | 将`handler`绑定到在任何Ajax事务开始时调用。 |'
- en: '| `.ajaxStart(handler)` | Binds `handler` to be called when any Ajax transaction
    begins, and no others are active. |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| `.ajaxStart(handler)` | 将`handler`绑定到在任何Ajax事务开始且没有其他事务活动时调用。 |'
- en: '| `.ajaxStop(handler)` | Binds `handler` to be called when any Ajax transaction
    ends, and no others are still active. |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| `.ajaxStop(handler)` | 将`handler`绑定到在任何Ajax事务结束且没有其他事务仍在进行时调用。 |'
- en: '| `.ajaxSuccess(handler)` | Binds `handler` to be called when any Ajax transaction
    completes successfully. |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| `.ajaxSuccess(handler)` | 将`handler`绑定到在任何Ajax事务成功完成时调用。 |'
- en: Configuration
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置
- en: '| **Ajax method** | **Description** |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| **Ajax方法** | **描述** |'
- en: '| `$.ajaxSetup(options)` | Sets default options for all subsequent Ajax transactions.
    |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| `$.ajaxSetup(options)` | 为所有后续Ajax事务设置默认选项。 |'
- en: '| `$.ajaxPrefilter([dataTypes], handler)` | Modifies the options on each Ajax
    request before it is processed by `$.ajax()`. |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| `$.ajaxPrefilter([dataTypes], handler)` | 在`$.ajax()`处理之前修改每个Ajax请求的选项。 |'
- en: '| `$.ajaxTransport(transportFunction)` | Defines a new transport mechanism
    for Ajax transactions. |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| `$.ajaxTransport(transportFunction)` | 定义Ajax事务的新传输机制。 |'
- en: Utilities
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实用工具
- en: '| **Ajax method** | **Description** |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| **Ajax方法** | **描述** |'
- en: '| `.serialize()` | Encodes the values of a set of form controls into a query
    string. |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| `.serialize()` | 将一组表单控件的值编码为查询字符串。 |'
- en: '| `.serializeArray()` | Encodes the values of a set of form controls into a
    JavaScript data structure. |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| `.serializeArray()` | 将一组表单控件的值编码为JavaScript数据结构。 |'
- en: '| `$.param(obj)` | Encodes an arbitrary object of key-value pairs into a query
    string. |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| `$.param(obj)` | 将键值对的任意对象编码为查询字符串。 |'
- en: '| `$.globalEval(code)` | Evaluates the given JavaScript string in the global
    context. |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| `$.globalEval(code)` | 在全局上下文中评估给定的JavaScript字符串。 |'
- en: '| `$.parseJSON(json)` | Converts the given JSON string into a JavaScript object.
    |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| `$.parseJSON(json)` | 将给定的JSON字符串转换为JavaScript对象。 |'
- en: '| `$.parseXML(xml)` | Converts the given XML string into an XML document. |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| `$.parseXML(xml)` | 将给定的XML字符串转换为XML文档。 |'
- en: '| `$.parseHTML(html)` | Converts the given HTML string into a set of DOM elements.
    |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| `$.parseHTML(html)` | 将给定的HTML字符串转换为一组DOM元素。 |'
- en: Deferred objects
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 延迟对象
- en: Deferred objects and their promises allow us to react to the completion of long-running
    tasks with a convenient syntax. They are discussed in detail in [Chapter 11](18ed1c5d-dfac-4361-b647-0cb63f5dd58b.xhtml),
    *Advanced Effects*.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟对象及其承诺使我们能够以方便的语法对长时间运行的任务的完成做出反应。它们在[第11章](18ed1c5d-dfac-4361-b647-0cb63f5dd58b.xhtml)，*高级效果*中详细讨论。
- en: Object creation
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象创建
- en: '| **Function** | **Description** |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| **函数** | **描述** |'
- en: '| `$.Deferred([setupFunction])` | Returns a new deferred object. |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| `$.Deferred([setupFunction])` | 返回一个新的延迟对象。 |'
- en: '| `$.when(deferreds)` | Returns a promise object to be resolved when the given
    deferred objects are resolved. |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| `$.when(deferreds)` | 返回一个承诺对象，以便在给定的延迟对象解决时解决。 |'
- en: Methods of deferred objects
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Deferred对象的方法
- en: '| **Method** | **Description** |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **描述** |'
- en: '| --- | --- |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `.resolve([args])` | Sets the state of the object to resolved. |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| `.resolve([args])` | 将对象的状态设置为已解决。 |'
- en: '| `.resolveWith(context, [args])` | Sets the state of the object to resolved
    while making the keyword `this` refer to `context` within callbacks. |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '| `.resolveWith(context, [args])` | 将对象的状态设置为已解决，同时使关键字`this`在回调中指向`context`。
    |'
- en: '| `.reject([args])` | Sets the state of the object to rejected. |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| `.reject([args])` | 将对象的状态设置为被拒绝。 |'
- en: '| `.rejectWith(context, [args])` | Sets the state of the object to rejected
    while making the keyword `this` refer to `context` within callbacks. |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| `.rejectWith(context, [args])` | 将对象的状态设置为被拒绝，同时使关键字`this`在回调中指向`context`。
    |'
- en: '| `.notify([args])` | Executes any progress callbacks. |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| `.notify([args])` | 执行任何进度回调。 |'
- en: '| `.notifyWith(context, [args])` | Executes any progress callbacks while making
    the keyword `this` refer to `context`. |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| `.notifyWith(context, [args])` | 在执行任何进度回调时，使关键字`this`指向`context`。 |'
- en: '| `.promise([target])` | Returns a promise object corresponding to this deferred
    object. |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| `.promise([target])` | 返回与此延迟对象对应的 promise 对象。 |'
- en: Methods of promise objects
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: promise 对象的方法
- en: '| **Method** | **Description** |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **描述** |'
- en: '| `.done(callback)` | Executes `callback` when the object is resolved. |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| `.done(callback)` | 在对象被解决时执行`callback`。 |'
- en: '| `.fail(callback)` | Executes `callback` when the object is rejected. |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| `.fail(callback)` | 在对象被拒绝时执行`callback`。 |'
- en: '| `.catch(callback)` | Executes **`callback` **when the object is rejected.
    |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| `.catch(callback)` | 在对象被拒绝时执行**`callback`**。 |'
- en: '| `.always(callback)` | Executes `callback` when the object is resolved or
    rejected. |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| `.always(callback)` | 在对象被解决或被拒绝时执行`callback`。 |'
- en: '| `.then(doneCallbacks, failCallbacks)` | Executes `doneCallbacks` when the
    object is resolved, or `failCallbacks` when the object is rejected. |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| `.then(doneCallbacks, failCallbacks)` | 当对象被解决时执行`doneCallbacks`，或当对象被拒绝时执行`failCallbacks`。
    |'
- en: '| `.progress(callback)` | Executes `callback` each time the object receives
    a progress notification. |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| `.progress(callback)` | 每次对象接收到进度通知时执行`callback`。 |'
- en: '| `.state()` | Returns `''pending''`, `''resolved''`, or `''rejected''` depending
    on the current state. |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| `.state()` | 根据当前状态返回`''pending''`、`''resolved''`或`''rejected''`。 |'
- en: Miscellaneous properties and functions
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 杂项属性和函数
- en: These utility methods do not fit neatly into the previous categories, but are
    often very useful when writing scripts using jQuery.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 这些实用方法不能很好地归入之前的类别，但在使用 jQuery 编写脚本时通常非常有用。
- en: Properties of the jQuery object
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery 对象的属性
- en: '| **Property** | **Description** |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **描述** |'
- en: '| `$.ready` | A promise instance that''s resolved as soon as the DOM is ready.
    |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| `$.ready` | 一个 promise 实例，一旦 DOM 准备就绪就解决。 |'
- en: Arrays and objects
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组和对象
- en: '| **Function** | **Description** |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| **函数** | **描述** |'
- en: '| `$.each(collection, callback)` | Iterates over `collection`, executing `callback`
    for each item. |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| `$.each(collection, callback)` | 遍历`collection`，为每个项执行`callback`。 |'
- en: '| `$.extend(target, addition, ...)` | Modifies the object `target` by adding
    properties from the other supplied objects. |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| `$.extend(target, addition, ...)` | 通过从其他提供的对象中添加属性修改对象`target`。 |'
- en: '| `$.grep(array, callback, [invert])` | Filters `array` by using `callback`
    as a test. |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| `$.grep(array, callback, [invert])` | 使用`callback`作为测试过滤`array`。 |'
- en: '| `$.makeArray(object)` | Converts `object` into an array. |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| `$.makeArray(object)` | 将`object`转换为数组。 |'
- en: '| `$.map(array, callback)` | Constructs a new array consisting of the result
    of `callback` being called on each item. |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| `$.map(array, callback)` | 构造由对每个项调用`callback`的结果组成的新数组。 |'
- en: '| `$.inArray(value, array)` | Determines whether `value` is in `array`. |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| `$.inArray(value, array)` | 判断`value`是否在`array`中。 |'
- en: '| `$.merge(array1, array2)` | Combines the contents of `array1` and `array2`.
    |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| `$.merge(array1, array2)` | 合并`array1`和`array2`的内容。 |'
- en: '| `$.unique(array)` | Removes any duplicate DOM elements from `array`. |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| `$.unique(array)` | 从`array`中删除任何重复的 DOM 元素。 |'
- en: Object introspection
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象内省
- en: '| **Function** | **Description** |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| **函数** | **描述** |'
- en: '| --- | --- |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `$.isArray(object)` | Determines whether `object` is a true JavaScript array.
    |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| `$.isArray(object)` | 判断`object`是否为真正的 JavaScript 数组。 |'
- en: '| `$.isEmptyObject(object)` | Determines whether `object` is empty. |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| `$.isEmptyObject(object)` | 判断`object`是否为空。 |'
- en: '| `$.isFunction(object)` | Determines whether `object` is a function. |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| `$.isFunction(object)` | 判断`object`是否为函数。 |'
- en: '| `$.isPlainObject(object)` | Determines whether `object` was created as an
    object literal or with `new Object`. |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| `$.isPlainObject(object)` | 判断`object`是否以对象字面量形式创建或使用`new Object`创建。 |'
- en: '| `$.isNumeric(object)` | Determines whether `object` is a numeric scalar value.
    |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| `$.isNumeric(object)` | 判断`object`是否为数值标量。 |'
- en: '| `$.isWindow(object)` | Determines whether `object` represents a browser window.
    |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| `$.isWindow(object)` | 判断`object`是否表示浏览器窗口。 |'
- en: '| `$.isXMLDoc(object)` | Determines whether `object` is an XML node. |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| `$.isXMLDoc(object)` | 判断`object`是否为 XML 节点。 |'
- en: '| `$.type(object)` | Gets the JavaScript class of `object`. |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| `$.type(object)` | 获取`object`的 JavaScript 类。 |'
- en: Other
  id: totrans-386
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他
- en: '| **Function** | **Description** |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| **函数** | **描述** |'
- en: '| `$.trim(string)` | Removes whitespace from the ends of `string`. |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| `$.trim(string)` | 从`string`的两端删除空格。 |'
- en: '| `$.noConflict([removeAll])` | Reverts `$` to its pre-jQuery definition. |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
  zh: '| `$.noConflict([removeAll])` | 将`$`恢复到其 jQuery 前定义。 |'
- en: '| `$.noop()` | A function that does nothing. |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
  zh: '| `$.noop()` | 一个什么也不做的函数。 |'
- en: '| `$.now()` | The current time in milliseconds since the epoch. |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
  zh: '| `$.now()` | 自纪元以来的当前时间（毫秒）。 |'
- en: '| `$.holdReady(hold)` | Stops the `ready` event from being triggered, or releases
    this hold. |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
  zh: '| `$.holdReady(hold)` | 阻止`ready`事件的触发，或释放此保持。 |'
