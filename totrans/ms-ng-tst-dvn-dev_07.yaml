- en: <st c="0">7</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Understanding Cypress and its Role in End-to-End Tests for Web Applications</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="77">In the world of web development, Angular has emerged as one of the
    most popular frameworks for building dynamic and robust web applications.</st>
    <st c="219">With its extensive features and powerful capabilities, Angular enables
    developers to create seamless user experiences.</st> <st c="338">However, ensuring
    the reliability and functionality of these applications requires thorough testing,
    and this is where</st> **<st c="457">Cypress</st>** <st c="464">comes</st> <st
    c="471">into play.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="481">Cypress is a versatile</st> **<st c="505">end-to-end</st>** <st
    c="515">(</st>**<st c="517">E2E</st>**<st c="520">) testing framework that seamlessly
    integrates with Angular projects, allowing developers to write and execute component
    tests that cover the entire application flow.</st> <st c="688">In this chapter,
    we will explore the role of Cypress in E2E testing for Angular projects and guide
    you through the process of discovering, setting up, and writing your first component
    test</st> <st c="877">with Cypress.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="890">We will begin by discovering Cypress and understanding its unique
    features and advantages.</st> <st c="982">From its intuitive API to its real-time
    reloading and debugging capabilities, Cypress provides developers with a seamless
    and efficient testing experience.</st> <st c="1138">By grasping the core concepts
    of Cypress and its integration with Angular, developers can harness its power
    to ensure the quality and reliability of their</st> <st c="1293">Angular applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1314">Next, we will dive into the process of setting up Cypress in an
    Angular project.</st> <st c="1396">We will explore the necessary configurations
    and dependencies, guiding you through the steps to integrate Cypress seamlessly
    into your Angular development workflow.</st> <st c="1561">With a solid foundation
    in place, you will be ready to leverage the full potential of Cypress in your</st>
    <st c="1663">Angular projects.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1680">Finally, we will guide you through the process of writing your
    first E2E component test with Cypress in an Angular project.</st> <st c="1805">We
    will cover the essential aspects of writing effective component tests, including
    selecting elements, interacting with the application, and asserting</st> <st c="1957">expected
    behavior.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1975">In summary, here are the main topics that will be covered in</st>
    <st c="2037">this chapter:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2050">Discovering Cypress and its role in an</st> <st c="2090">Angular
    project</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2105">Setting up Cypress in an</st> <st c="2131">Angular project</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2146">Writing your first E2E component test with Cypress in an</st> <st
    c="2204">Angular project</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2219">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2242">To follow along with the examples and exercises in this chapter,
    you will need to have a basic understanding of Angular and TypeScript, as well
    as the following</st> <st c="2404">technical requirements:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2427">Node.js and</st> **<st c="2440">Node Package Manager</st>** <st
    c="2460">(</st>**<st c="2462">npm</st>**<st c="2465">) installed on</st> <st c="2481">your
    computer</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2494">Angular CLI</st> <st c="2507">installed globally</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2525">A code editor, such as Visual Studio Code, installed on</st> <st
    c="2582">your computer.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2596">The code files of this chapter can be found</st> <st c="2641">at</st>
    [<st c="2644">https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%207</st>](https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%207)<st
    c="2742">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2743">Discovering Cypress and its role in an Angular project</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2798">Testing plays a vital role in ensuring the</st> <st c="2842">quality
    and reliability of applications.</st> <st c="2883">When it comes to Angular projects,
    developers need a robust testing framework that seamlessly integrates with the
    framework’s components and provides an efficient and comprehensive testing experience.</st>
    <st c="3084">This is where Cypress, an E2E testing framework, comes into the picture.</st>
    <st c="3157">In this section, we will explore Cypress and its role in Angular
    projects, uncovering its unique features</st> <st c="3263">and advantages.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3278">Understanding Cypress</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="3300">Cypress is a powerful JavaScript-based</st> <st c="3340">testing
    framework that allows developers to write and execute E2E tests for web applications.</st>
    <st c="3434">What sets Cypress apart from other testing frameworks is its ability
    to run tests directly in the browser, enabling real-time reloading and debugging.</st>
    <st c="3585">This feature makes Cypress an ideal choice for Angular projects,
    where developers can test their applications in a live environment, mimicking
    real</st> <st c="3733">user interactions.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3751">Seamless integration with Angular</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="3785">Cypress seamlessly integrates with Angular projects, making it
    an excellent choice for testing Angular applications.</st> <st c="3903">It</st>
    <st c="3905">leverages Angular’s powerful components, directives, and services,
    allowing developers to write tests that cover the entire application flow.</st>
    <st c="4048">Whether it’s testing individual components, validating complex</st>
    <st c="4111">user flows, or ensuring cross-browser compatibility, Cypress provides
    the necessary tools and capabilities to accomplish these</st> <st c="4238">tasks
    effectively.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4256">Efficient testing workflow</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="4283">One of the key advantages of</st> <st c="4313">Cypress is its intuitive
    API, which simplifies the process of writing tests.</st> <st c="4390">With its
    declarative syntax, developers can easily select elements, interact with the application,
    and assert expected behavior.</st> <st c="4519">Cypress also offers a comprehensive
    set of built-in commands and assertions, making it easier to write expressive
    and readable tests.</st> <st c="4653">Furthermore, Cypress provides powerful debugging
    features, allowing developers to inspect elements, step through the code, and
    troubleshoot issues in</st> <st c="4803">real time.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4813">Real-time reloading and debugging</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="4847">Cypress’s real-time</st> <st c="4867">reloading and debugging capabilities
    are particularly valuable in Angular projects.</st> <st c="4952">As developers
    make changes to their code, Cypress automatically reloads the application, reflecting
    the updates in real time.</st> <st c="5078">This feature significantly speeds
    up the testing process, as developers can instantly see the impact of their changes
    without the need to manually refresh the browser.</st> <st c="5246">Additionally,
    Cypress’s powerful debugging tools enable developers to pinpoint and resolve issues
    quickly, improving the overall efficiency of the</st> <st c="5393">testing workflow.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5410">In the next section, we’ll learn how to configure Cypress in our</st>
    <st c="5476">Angular project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5492">Setting up Cypress in our Angular project</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="5534">Now that we’ve understood what</st> <st c="5566">Cypress is for
    and its role in</st> <st c="5597">an Angular project, we’ll look at how to configure
    it in</st> <st c="5654">our project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5666">Installing Cypress</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="5685">To begin, you need to</st> <st c="5708">have Node.js and npm installed
    on your machine.</st> <st c="5756">If you don’t have them already, download and
    install them from the official</st> <st c="5832">Node.js website.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5848">Once you have Node.js and npm installed, open your terminal and
    navigate to your Angular project’s root directory.</st> <st c="5964">Run the following
    command to install Cypress as a</st> <st c="6014">dev dependency:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="6062">The previous command will download and install Cypress in your
    project.</st> <st c="6135">This is how it works in</st> <st c="6159">the terminal:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Cypress installation](img/B21146_07_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="6470">Figure 7.1 – Cypress installation</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6503">After installation, you can see the dependency in the</st> <st
    c="6558">package.json file:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Cypress dependency in package.json](img/B21146_07_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="6960">Figure 7.2 – Cypress dependency in package.json</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7007">In the next section, we’ll look</st> <st c="7039">at how to</st>
    <st c="7050">configure Cypress.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7068">Configuring Cypress</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="7088">As previously mentioned, we’ll take a</st> <st c="7126">step-by-step
    look at how to</st> <st c="7155">configure Cypress:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7173">After installing Cypress, run the following command in your terminal
    from your</st> <st c="7253">project root:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 7.3 – Open Cypress in the command line](img/B21146_07_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7505">Figure 7.3 – Open Cypress in the command line</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7550">You will now see your browser launch and it will present the interface
    shown in</st> *<st c="7631">Figure 7</st>**<st c="7639">.4</st>*<st c="7641">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.4 – Cypress launch int\uFEFFerface](img/B21146_07_4.jpg)"
  prefs: []
  type: TYPE_IMG
- en: <st c="7734">Figure 7.4 – Cypress launch int</st><st c="7765">erface</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7772">Click on</st> **<st c="7782">Continue</st>**<st c="7790">, and
    you’ll be</st> <st c="7805">redirected to the</st> <st c="7824">following interface:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Cypress E2E test interface of preference](img/B21146_07_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="8227">Figure 7.5 – Cypress E2E test interface of preference</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8280">Choose</st> **<st c="8288">E2E Testing</st>** <st c="8299">and
    you’ll now be redirected to the interface shown in</st> *<st c="8355">Figure 7</st>**<st
    c="8363">.6</st>*<st c="8365">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Cypress E2E testing control panel](img/B21146_07_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="8858">Figure 7.6 – Cypress E2E testing control panel</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8904">These files are part of a Cypress</st> <st c="8939">testing setup
    for a web application.</st> <st c="8976">Let’s break down what each</st> <st c="9003">file
    does:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="9013">cypress.config.ts</st>`<st c="9031">: The</st> `<st c="9038">cypress.config.ts</st>`
    <st c="9055">file allows you to customize Cypress to fit the needs of your project,
    including setting up proxy configurations, configuring network requests, and specifying
    custom command</st> <st c="9230">line flags.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="9241">cypress/support/e2e.ts</st>`<st c="9264">: This file typically
    contains global commands and utilities that are available across all your E2E
    tests.</st> <st c="9372">It’s a place where you can define functions that perform
    common actions, like logging in, navigating between pages, or interacting with
    elements in a consistent way.</st> <st c="9538">By defining these commands here,
    you ensure they’re available in every test file without needing to</st> <st c="9638">redefine
    them.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="9652">cypress/support/comman</st><st c="9675">ds.ts</st>`<st c="9681">:
    Similar to</st> `<st c="9695">e2e.ts</st>`<st c="9701">, the</st> `<st c="9707">commands.ts</st>`
    <st c="9718">file is used to extend Cypress’s built-in commands with custom ones.</st>
    <st c="9788">This file is specifically focused on adding new commands that can
    be used within your</st> <st c="9874">test suites.</st> <st c="9887">These commands
    can encapsulate complex interactions or sequences of actions that you find yourself
    repeating across multiple</st> <st c="10011">tests.</st> <st c="10019">Defining
    custom commands helps keep your tests</st> **<st c="10066">DRY</st>** <st c="10070">(</st>**<st
    c="10071">Don’t Repeat Yourself</st>**<st c="10092">), making them easier to maintain</st>
    <st c="10127">and understand.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="10142">cypress/fixtures/example.json</st>`<st c="10172">: The fixtures
    folder is used to store JSON files that contain data used in your tests.</st>
    <st c="10261">These could be mock API responses, sample data for seeding databases,
    or any other static data required for your tests to run.</st> <st c="10388">The</st>
    `<st c="10392">example.json</st>` <st c="10404">file would be one such fixture
    file, containing example data that your tests might need to</st> <st c="10496">interact
    with.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="10510">After clicking on</st> **<st c="10529">Continue</st>**<st c="10537">,
    you will see this interface to choose your preferred browser for E2E testing,
    as shown in</st> *<st c="10629">Figure 7</st>**<st c="10637">.7</st>*<st c="10639">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.7 – The browser selection interface in Cypress](img/B21146_07_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="10827">Figure 7.7 – The browser selection interface in Cypress</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10882">Once all the configuration has been completed, you should be able
    to access the interface, as</st> <st c="10976">shown in</st> *<st c="10986">Figure
    7</st>**<st c="10994">.8</st>*<st c="10996">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Cypress E2E testing dashboard interface](img/B21146_07_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="11037">Figure 7.8 – Cypress E2E testing dashboard interface</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11089">In the Angular project directory, a</st> `<st c="11126">cypress</st>`
    <st c="11133">folder is created</st> <st c="11152">like this:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.9 – The Cypress support folder](img/B21146_07_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="11227">Figure 7.9 – The Cypress support folder</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11266">Finally, we’re going to add this script to</st> `<st c="11310">package.json</st>`
    <st c="11322">to avoid making</st> `<st c="11339">npx cypress open</st>` <st c="11355">the
    next</st> <st c="11365">few times:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Cypress command in package.json scripts](img/B21146_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="11546">Figure 7.10 – Cypress command in package.json scripts</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11599">In the next section, we’ll take</st> <st c="11632">a look at how
    to write our first</st> <st c="11665">E2E test.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11674">Writing your first E2E test</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="11702">Once Cypress has been</st> <st c="11724">properly configured for
    E2E testing, we can get down to business.</st> <st c="11791">Let’s take a look
    at how to write our first</st> <st c="11835">E2E test:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11844">Now that Cypress is installed and configured, you can start writing
    your first test.</st> <st c="11930">You can click on</st> **<st c="11947">Create
    new spec</st>** <st c="11962">in this interface as shown in</st> *<st c="11993">Figure
    7</st>**<st c="12001">.11</st>*<st c="12004">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.11 – Spec creation interface in Cypress](img/B21146_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="12048">Figure 7.11 – Spec creation interface in Cypress</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12096">After doing that, you can see in</st> *<st c="12130">Figure 7</st>**<st
    c="12138">.12</st>* <st c="12141">a new file named</st> `<st c="12159">spec.cy.ts</st>`<st
    c="12169">, created in the</st> `<st c="12186">e2e</st>` <st c="12189">folder
    of your project’s</st> `<st c="12215">cypress</st>` <st c="12222">folder:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.12 – Spec file](img/B21146_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="12310">Figure 7.12 – Spec file</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12333">This file contains</st> <st c="12353">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.13 – The source code of our spec file](img/B21146_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="12470">Figure 7.13 – The source code of our spec file</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12516">Now, you may be</st> <st c="12532">faced with a surprise when
    you return to the browser where the E2E test is launched as shown in</st> *<st
    c="12629">Figure 7</st>**<st c="12637">.14</st>*<st c="12640">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 7.14 – The E2E test failed due to a compilation e\uFEFF\uFEFFrror](img/B21146_07_14.jpg)"
  prefs: []
  type: TYPE_IMG
- en: <st c="14793">Figure 7.14 – The E2E test failed due to a compilation e</st><st
    c="14849">rror</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="14854">To solve this issue, you can just remove</st> `<st c="14896">sourceMap:
    true</st>` <st c="14911">from your</st> `<st c="14922">tsconfig.json</st>` <st
    c="14935">file and</st> <st c="14945">you’ll</st> <st c="14952">get this:</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="15652">As you can see</st> <st c="15668">now,</st> <st c="15673">it works:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.15 – The interface that displays all specs files](img/B21146_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="15684">Figure 7.15 – The interface that displays all specs files</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15741">Then, you can click on the</st> `<st c="15769">spec.cy.ts</st>`
    <st c="15779">file and if all goes well, you’ll</st> <st c="15814">get this:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.16 – The successful completion of our E2E test](img/B21146_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="15946">Figure 7.16 – The successful completion of our E2E test</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16001">Congrats!</st> <st c="16012">You’ve just written your first E2E
    test!</st> <st c="16053">Technically, we’ve generated it with the ease</st> <st
    c="16099">of Cypress.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16110">Now that we know how to</st> <st c="16134">write an E2E test,
    the goal of the chapter has been achieved.</st> <st c="16197">We’ll summarize
    everything we’ve covered in the</st> <st c="16245">next section.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16258">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="16266">This chapter covered discovering Cypress, configuring it, and
    taking it into an Angular project in the writing of an</st> <st c="16384">E2E
    test.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16393">The chapter started with an introduction to the Cypress tool and
    explained why it’s the most widely used tool in the Angular community, then showed
    how to configure Cypress in an Angular project, and finally taught you how to
    write your first E2E test with Cypress in Angular step</st> <st c="16675">by step.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16683">In the next chapter, we will go into more depth with the writing
    of E2E tests with Cypress in a test-driven development approach, and we will improve
    and refactor our previous tests related to our components while respecting the
    good practices</st> <st c="16928">with Cypress.</st>
  prefs: []
  type: TYPE_NORMAL
