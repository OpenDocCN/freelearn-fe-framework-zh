- en: '19'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying a Next.js App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After learning about advanced Next.js concepts, it’s time to learn how to deploy
    a Next.js app. The easiest way to deploy Next.js apps is by using the Vercel platform,
    provided by the company that develops the Next.js framework. After learning how
    to deploy our app on the Vercel platform, we are going to learn how to create
    a custom deployment setup using Docker.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Next.js app with Vercel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom deployment setup for Next.js apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start, please install all requirements from [*Chapter 1*](B19385_01.xhtml#_idTextAnchor016)*,
    Preparing for Full-Stack Development*, and [*Chapter 2*](B19385_02.xhtml#_idTextAnchor028)*,
    Getting to Know Node.js* *and MongoDB*.
  prefs: []
  type: TYPE_NORMAL
- en: The versions listed in those chapters are the ones used in the book. While installing
    a newer version should not be an issue, please note that certain steps might work
    differently on a newer version. If you are having an issue with the code and steps
    provided in this book, please try using the versions mentioned in [*Chapter 1*](B19385_01.xhtml#_idTextAnchor016)and
    *2.*
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch19](https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch19).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The CiA video for this chapter can be found at: [https://youtu.be/ERBFy5mHwek](https://youtu.be/ERBFy5mHwek).'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Next.js app with Vercel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to start by deploying our app on Vercel, a platform where we can
    deploy our apps for free in a simple and convenient way. Follow these steps to
    get started deploying our Next.js app with Vercel:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the existing **ch18** folder to a new **ch19** folder by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the **ch19** folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the Vercel CLI tool as a global package with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the Vercel CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will be asked to log in to Vercel. Select either of the login methods and
    follow the steps provided by Vercel to log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After successfully logging in, you will be asked questions about the deployment
    of your project, confirm all of them with the default values provided by pressing
    *Enter*/*Return* until the Vercel CLI attempts to build your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 19.1 – Attempting to deploy our app to Vercel](img/B19385_19_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.1 – Attempting to deploy our app to Vercel
  prefs: []
  type: TYPE_NORMAL
- en: 'While the project is building, you can visit the URL provided in the CLI to
    see the current state of the build process (make sure you are logged in to Vercel
    in the same browser), as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 19.2 – Monitoring the build process in the browser](img/B19385_19_2_new.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.2 – Monitoring the build process in the browser
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, the build fails because the **DATABASE_URL** environment variable
    is set to **mongodb://localhost:27017/blog**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now need to adjust this environment variable in Vercel.
  prefs: []
  type: TYPE_NORMAL
- en: Setting environment variables in Vercel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up the necessary environment variables in Vercel:'
  prefs: []
  type: TYPE_NORMAL
- en: Re-use the existing database cluster created in MongoDB Atlas or follow the
    steps in the *Creating a MongoDB Atlas database* section of [*Chapter 5*](B19385_05.xhtml#_idTextAnchor090)
    to create a new database cluster. You should now have a connection string for
    your database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that the connection string works by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you are re-using the existing database cluster, make sure to clear the database/collections,
    as the posts and users used to have a slightly different format in [*Chapter 5*](B19385_05.xhtml#_idTextAnchor090)!
    Run the following commands inside the MongoDB Shell to clear the collections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to [https://vercel.com/](https://vercel.com/) and log in with the same login
    provider you used earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see an overview of your projects, including the **ch19** project
    we created earlier via the Vercel CLI, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 19.3 – The Vercel dashboard](img/B19385_19_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.3 – The Vercel dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **ch19** project, then go to the **Settings** tab, select **Environment
    Variables** on the sidebar, and create a new environment variable by entering
    **DATABASE_URL** as the **Key** and the previously obtained connection string
    as **Value**, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 19.4 – Adding an environment variable in Vercel](img/B19385_19_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.4 – Adding an environment variable in Vercel
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For production apps, you would also set the **JWT_SECRET** environment variable
    to a random secret here. Additionally, you would set the **BASE_URL** environment
    variable to the URL of the production deployment of your app. For example, if
    the public URL of your blog is going to be **https://ch19-omnidan.vercel.app/**,
    you would set the **BASE_URL** to that.
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Save** button below the environment variables to save your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the Vercel CLI again to attempt another deployment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Alternatively, you can trigger a rebuild from the Vercel web UI.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see that it deploys successfully now, visit the **Preview** URL provided
    by the Vercel CLI in your browser to see our blog application loading successfully:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 19.5 – Working “Preview” deployment of our app](img/B19385_19_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.5 – Working “Preview” deployment of our app
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, Vercel CLI now made a **Preview** deployment for us. This is
    the default behavior in Vercel. It will first deploy to a **Preview** environment,
    where we can test everything out to make sure our app works fine. The **Preview**
    environment is only accessible if you are logged in via Vercel. We can also invite
    others to test our app here and add comments to it via the Vercel toolbar at the
    bottom.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have confirmed our app works, we can deploy it to production, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows a **Preview** and a **Production** deployment
    being made with the Vercel CLI:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 19.6 – Deploying our app to “Preview” and “Production” environments
    with the Vercel CLI](img/B19385_19_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.6 – Deploying our app to “Preview” and “Production” environments with
    the Vercel CLI
  prefs: []
  type: TYPE_NORMAL
- en: Now our app is deployed on the **Production** environment and is accessible
    to anyone, without having to log in via Vercel!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The URL provided in the Vercel CLI output is not accessible to anyone; you need
    to use one of the domains specified in the **Domains** section on the Vercel dashboard.
    The default should be **https://ch19-<vercel-username>.vercel.app/**.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, deploying our app with Vercel is very easy and convenient. However,
    in some cases, we want to deploy our app on our own infrastructure. Let’s learn
    how to create a custom deployment setup for Next.js apps now.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom deployment setup for Next.js apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are now going to learn how to set up a custom deployment for Next.js apps
    using Docker. We have already learned the basics of deploying apps using Docker
    in [*Chapter 5*](B19385_05.xhtml#_idTextAnchor090), so please refer to that chapter
    if anything is unclear, or if you need a refresher on Docker. Let’s get started
    setting up our Next.js app for a Docker deployment now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to change the output format for Next.js to **standalone**. This
    option tells Next.js to create a **.next/standalone** folder that only contains
    the necessary files for a production deployment, including only the necessary
    **node_modules**. This folder can then be deployed without having to install **node_modules**
    again. Edit **next.config.mjs** and adjust the config, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we create a **.dockerignore** file to ignore certain files that should
    not be included in our image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new **Dockerfile**, start by defining a **base** image from **node:20**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a new image for building the app, based on the **base** image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the working directory to the **/app** folder and copy over the **package.json**
    and **package-lock.json** files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, install all dependencies, and additionally install **sharp**, which is
    used by Next.js to resize and optimize images in production:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy over all files from our project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define the arguments for the build process. We are going to define all
    environment variables here because Next.js also uses them during the build process
    to statically build certain routes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now run the **build** command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a new image for the final app, based on the **base** image as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also define the working directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We set up the permissions to run our app as a special **nextjs** user instead
    of root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, copy over the necessary files to run a standalone Next.js server from
    the **build** image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We define the **PORT**, **HOSTNAME**, and **NODE_ENV** variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we execute the standalone Next.js server as the **nextjs** user we defined
    earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure the database server is running in a Docker container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we can build the Docker image by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check out the official example **Dockerfile** from Next.js for an up-to-date
    version: [https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile](https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, run a new Docker container, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit **http://localhost:3000** and you will see the blog running successfully!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have a Docker container, we could deploy it to a cloud service (or
    our own server), just like we did in [*Chapter 5*](B19385_05.xhtml#_idTextAnchor090).
    While it is slightly more effort to set up a custom deployment for a Next.js app,
    it is still quite straightforward to do a simple setup!
  prefs: []
  type: TYPE_NORMAL
- en: 'For more advanced setups, such as multiple instances, you would need to set
    up a shared volume between the instances so the cache and optimized images can
    be shared (on Vercel, this is done automatically behind the scenes). However,
    such a setup is out of the scope of this book. You can check out the Next.js docs
    on self-hosting for more information on how to do this: [https://nextjs.org/docs/app/building-your-application/deploying#self-hosting](https://nextjs.org/docs/app/building-your-application/deploying#self-hosting).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first learned how to deploy a Next.js app using Vercel.
    Then, we learned how to create a custom deployment setup using Docker.
  prefs: []
  type: TYPE_NORMAL
- en: In the next and final chapter, [*Chapter 20*](B19385_20.xhtml#_idTextAnchor350)*,
    Diving Deeper into Full-stack Development*, we are going to briefly cover various
    advanced full-stack development topics that have been left out of this book so
    far, giving you an idea of how to continue your journey of learning full-stack
    web development with React.
  prefs: []
  type: TYPE_NORMAL
