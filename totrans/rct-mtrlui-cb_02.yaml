- en: App Bars - The Top Level of Every Page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn about the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Fixed position
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hide on scroll
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toolbar abstraction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: App Bars are the anchor point of any Material-UI application. They provide context
    and are usually always visible as the user navigates around the application.
  prefs: []
  type: TYPE_NORMAL
- en: Fixed position
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You probably want your `AppBar` component to stay visible at all times. By using
    `fixed` positioning, `AppBar` components remain visible even as the user scrolls
    down the page.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the `fixed` value of the `position` property. Here''s how you do
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the resulting `AppBar` component looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a156389b-c1fe-4189-9a08-e7eabfe3aa52.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you scroll down, you''ll see how the `AppBar` component stays *fixed*, and
    the content scrolls behind it. Here''s what it looks like if you scroll to the
    bottom of the page in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f5deb3f-b985-404c-be06-bbd933858303.png)'
  prefs: []
  type: TYPE_IMG
- en: The `position` property defaults to `fixed`. However, explicitly setting this
    property can help readers better understand your code.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the screen in this example first loads, some of the content is hidden behind
    the `AppBar` component. This is because the position is fixed and it has a higher
    `z-index` value than the regular content. This is expected, so that when you scroll,
    the regular content goes behind the `AppBar` component. The solution is to add
    a top margin to your content. The problem is that you don't necessarily know the
    height of the `AppBar`.
  prefs: []
  type: TYPE_NORMAL
- en: You could just set a value that looks good. A better solution is to use the
    `toolbar mixin` styles. You can access this `mixin` object by making `styles`
    a function that returns an object. Then, you'll have access to the theme argument,
    which has a `toolbar mixin` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what `styles` should be changed to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The new style that''s added is `toolbarMargin`. Notice that this is using the
    value from `theme.mixins.toolbar`, which is why you''re using a function now –
    so that you can access `theme`. Here''s what the `theme.mixins.toolbar` value
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is to add a `<div>` element to the content underneath the `AppBar` component
    where this new `toolbarMargin` style can be applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the beginning of the content is no longer hidden by the `AppBar` component
    when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/55e859af-3b94-4063-ba3c-04efb17641f3.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Guide to CSS positioning: [https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AppBar` demos: [https://material-ui.com/demos/app-bar/](https://material-ui.com/demos/app-bar/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AppBar` API documentation: [https://material-ui.com/api/app-bar/](https://material-ui.com/api/app-bar/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Toolbar` API documentation: [https://material-ui.com/api/toolbar/](https://material-ui.com/api/toolbar/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hide on scroll
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have a lot of content on your screen that requires the user to scroll
    vertically, the App Bar could be a distraction. One solution is to hide the `AppBar`
    component while the user is scrolling down.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To hide the `AppBar` component while the user is scrolling down, you have to
    know when the user is scrolling. This requires listening to the `scroll` event
    on the `window` object. You can implement a component that listens to this event
    and hides the `AppBar` component while scrolling. Here''s how it''s done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When you first load the screen, the toolbar and content appear as usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/07cecedf-4bfe-4a7a-baed-a3458305b284.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you scroll down, the `AppBar` component disappears, allowing more space
    for the content to be viewed. Here''s what the screen looks like when you scroll
    to the very bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f9b68129-30bf-4824-9732-46997c139b29.png)'
  prefs: []
  type: TYPE_IMG
- en: The `AppBar` component will reappear as soon as you start scrolling back up.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at the `state` method and the `onScroll()` method of the
    `ScrolledAppBar` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When the component mounts, the `onScroll()` method is added as a listener to
    the `scroll` event on the `window` object. The `scrolling` state is a Boolean
    value that hides the `AppBar` component when true. The `scrollTop` state is the
    position of the previous scroll event. The `onScroll()` method figures out whether the
    user is scrolling by checking if the new scroll position is greater than the last
    scroll position.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s take a look at the `Fade` component that''s used to hide the `AppBar` component
    when scrolling, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `in` property tells the `Fade` component to fade its children, `in`, when
    the value is true. In this example, the condition is true when the `scrolling`
    state is false.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Instead of fading the `AppBar` component in and out when the user scrolls,
    you can use a different effect. For example, the following code block demonstrates
    what it would look like if you wanted to use the `Grow` effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Fade` API documentation: [https://material-ui.com/api/fade/](https://material-ui.com/api/fade/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Grow` API documentation: [https://material-ui.com/api/grow/](https://material-ui.com/api/grow/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Slide` API documentation: [https://material-ui.com/api/slide/](https://material-ui.com/api/slide/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toolbar abstraction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Toolbar code can get verbose if you have to render toolbars in several places.
    To address this, you can create your own `Toolbar` component that encapsulates
    the content patterns of toolbars, making it easier to render `AppBar` components
    in several places.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s assume that your app renders `AppBar` components on several screens.
    Each `AppBar` component also renders `Menu` and `title` to the left, as well as `Button`
    to the right. Here''s how you can implement your own `AppBar` component so that
    it''s easier to use on several screens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the resulting toolbar looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e71a60e7-f95f-4558-8a8b-ca15580fac86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And here''s what the menu looks like when the user clicks on the menu button
    beside the title:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2b2aadd-4b61-47c3-8664-0864502e8b92.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by looking at the `render()` method of the `MyToolbar` component,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This is where the `AppBar` component and the `Toolbar` components from Material-UI
    are rendered. A `Fragment` component is used because two elements are returned:
    the `AppBar` component and the `<div>` element that sets the top margin for the
    page content. Within the toolbar, you have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The menu button that displays the menu when clicked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The menu itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The right-side button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From the `MyToolbar` properties, there are two components that `render()` uses:
    `MenuItems` and `RightButton`. In addition to the `title` prop, these are the
    parts of the `AppBar` component that you want to customize. The approach here
    is to define default values for these properties so that the `AppBar` component
    can be rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can pass custom values to these properties when you render `MyToolbar`.
    The defaults used here could be the values used for the home screen, for example.
  prefs: []
  type: TYPE_NORMAL
- en: You don't actually have to provide default values for these properties. But
    if you do, for the home screen, say, then it's easier for other developers to
    look at your code and understand how it works.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s try setting some custom menu items and right-side buttons, using the
    `MenuItems` and `RightButton` properties respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what the toolbar looks like when rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e36dd2f7-d322-4dc7-9e16-1f85e4ee534a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is what the menu looks like with the custom menu options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3810a4f8-b578-4827-9db6-ec8c9ab86ff6.png)'
  prefs: []
  type: TYPE_IMG
- en: The values that you're passing to `MenuItems` and `RightButton` are functions
    that return React elements. These functions are actually functional components
    that you're creating on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`AppBar` demos: [https://material-ui.com/demos/app-bar/](https://material-ui.com/demos/app-bar/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AppBar` API documentation: [https://material-ui.com/api/app-bar/](https://material-ui.com/api/app-bar/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Toolbar` API documentation: [https://material-ui.com/api/toolbar/](https://material-ui.com/api/toolbar/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Material-UI apps are typically made up of several pages that are linked together
    using a router, such as `react-router`. Each page renders an App Bar that has
    information specific to that page. This is one example of when the abstraction
    that you created in the *Toolbar abstraction* recipe comes in handy.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you''re building an app that has three pages. On each page,
    you want to `render` an App Bar with the `title` prop of the page. Furthermore,
    the menu in the App Bar should contain links to the three pages. Here''s how to
    do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what you''ll see when you first load the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e87e7444-6064-42f3-87e4-a8e5483d0d6e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what the menu in the App Bar looks like when it''s opened:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9cdc9f8d-cf58-42df-9c7c-8cd9eb71e8ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Try clicking on Page 2; here''s what you should see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b63d92c-b7a9-4243-bf30-d02e94042128.png)'
  prefs: []
  type: TYPE_IMG
- en: The title of the App Bar has changed to reflect the title of the page, and the
    content of the page has also changed.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by taking a look at the Routes  component that define the pages
    in your app, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Each `Route` component (from the `react-router` package) corresponds to a page
    in your app. They have a `path` property that matches the path in the browser
    address bar. When there's a match, this Routes component' content is rendered.
    For example, when the path is `/page3`, the content for the `Route` component
    where `path="/page3"` is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Each `Route` component also defines a `render()` function. This is called when
    its `path` is matched and the returned content is rendered. The Routes component
    in your app each render `MyToolbar` with a different value for the `title` prop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s take a look at the menu items that make up the `MenuItems` default
    property value, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Each of these `MenuItems` properties is a link that points to each of the Routes
    component declared by your app. The `MenuItem` component accepts a `component`
    property that is used to render the link. In this example, you're passing it the
    `Link` component from the `react-router-dom` package. The `MenuItem` component
    will forward any additional properties to the `Link` component, which means that
    you can can pass the `to` property to the `MenuItem` component and it's as though
    you're passing it to the `Link` component.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the time, the screens that make up your app will follow the same pattern.
    Rather than have repetitive code in the `render` property of your routes, you
    can create a higher-order function that accepts arguments for the unique parts
    of the screen and returns a new component that can be used by the `render` prop.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, the only two pieces of data that are unique to each screen
    are the title and the content text. Here''s a generic function that builds a new
    functional component that can be used with every `Route` component in the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To use this function, call it in the `render` property, such as in the following
    code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now you have a clear separation of the static `screen` structure that stays
    the same for every screen in the app, and the pieces that are unique to each screen
    that passed as arguments to the `screen()` function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'React Router documentation: [https://reacttraining.com/react-router/](https://reacttraining.com/react-router/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AppBar` demos: [https://material-ui.com/demos/app-bar/](https://material-ui.com/demos/app-bar/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AppBar` API documentation: [https://material-ui.com/api/app-bar/](https://material-ui.com/api/app-bar/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
