- en: Chapter 8. Testing React Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 测试React组件
- en: Until now, we have explored React's components lifecycle, properties, state,
    validations, and ECMAScript with respect to React 0.1.13 and future versions.
    In this chapter, we will explore the testing of JavaScript and ReactJS-related
    stuffs. First, we will be going through the testing as a whole using different
    JavaScript test frameworks and how we can run the tests, followed by testing views
    build with the ReactJS library.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探讨了React的组件生命周期、属性、状态、验证以及与React 0.1.13和未来版本相关的ECMAScript。在本章中，我们将探讨JavaScript和ReactJS相关内容的测试。首先，我们将通过不同的JavaScript测试框架来整体了解测试，以及如何运行测试，然后测试使用ReactJS库构建的视图。
- en: 'The following are the things we will be covering in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Testing in JavaScript using Chai and Mocha
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Chai和Mocha在JavaScript中进行测试
- en: ReactTestUtils to test React components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ReactTestUtils测试React组件
- en: Exploring Jest
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Jest
- en: Testing React-based app using Expect, Mocha, and Shallow rendering
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Expect、Mocha和浅渲染测试基于React的应用
- en: There are various ways that you can mix and match while testing JavaScript.
    Let's have a brief overview of the various things such as frameworks, assertion
    libraries, and testing tools. The list given here is not an exhaustive one, and
    covering all of them in detail is beyond the scope of this book.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试JavaScript时，你可以混合匹配各种方法。让我们简要概述一下各种事物，如框架、断言库和测试工具。这里给出的列表并不全面，详细涵盖所有这些内容超出了本书的范围。
- en: '**Mocha** and **Jasmine** are testing frameworks. They can be used with various
    testing assertion libraries as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mocha**和**Jasmine**是测试框架。它们可以与各种测试断言库一起使用，如下所示：'
- en: '`should.js` which is an assertion library. It is framework agnostic and works
    from IE9 and higher. The details of the library can be found from [https://www.npmjs.com/package/should](https://www.npmjs.com/package/should).'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`should.js`是一个断言库。它是框架无关的，并且从IE9及以上版本工作。有关库的详细信息，请参阅[https://www.npmjs.com/package/should](https://www.npmjs.com/package/should)。'
- en: '`chaijs` is also an assertion library, where we add plugins. It also works
    with the testing framework(s). The details of the library can be found online
    from [http://chaijs.com/karma](http://chaijs.com/karma). It is a JavaScript testing
    tool, which enables to test JavaScript codes in browsers. It''s framework agnostic
    (can be used to run Mocha, Jasmine, Qunit, and so on). The details can be found
    at [https://www.npmjs.com/package/karma](https://www.npmjs.com/package/karma).'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chaijs`也是一个断言库，其中我们添加插件。它也适用于测试框架。有关库的详细信息，请在线查阅[http://chaijs.com/karma](http://chaijs.com/karma)。它是一个JavaScript测试工具，可以测试浏览器中的JavaScript代码。它是框架无关的（可以用于运行Mocha、Jasmine、Qunit等）。详细信息请参阅[https://www.npmjs.com/package/karma](https://www.npmjs.com/package/karma)。'
- en: It should be remembered that karma is neither a JavaScript framework like Jasmine
    or Mocha nor an assertion library like `chaijs` or `should.js`. This, we should
    use the assertion library and the framework as required along with karma in order
    to launch the HTTP server so that we can test the JS code in browsers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 应当记住，karma既不是像Jasmine或Mocha这样的JavaScript框架，也不是像`chaijs`或`should.js`这样的断言库。因此，我们应该根据需要使用断言库和框架，以及karma一起启动HTTP服务器，以便我们可以在浏览器中测试JS代码。
- en: '**Jest** is also a framework on Jasmine framework. The Facebook developer team
    suggests the use of Jest for testing React-based applications. According to the
    Jest website ([https://facebook.github.io/jest/](https://facebook.github.io/jest/)),
    these are some advantages of using Jest instead of vanilla jasmine for testing
    purposes:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jest**也是Jasmine框架上的一个框架。Facebook开发者团队建议使用Jest来测试基于React的应用。根据Jest网站([https://facebook.github.io/jest/](https://facebook.github.io/jest/))，以下是使用Jest而不是vanilla
    jasmine进行测试的一些优点：'
- en: Jest provides multiple layers on top of Jasmine
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jest在Jasmine之上提供了多个层级
- en: It automatically searches and finds tests for you to execute
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它会自动搜索并找到要执行的测试
- en: It mocks dependencies for you while you run the tests
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你运行测试时，它会为你模拟依赖
- en: It runs tests in parallel, hence finishing executing them faster
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它并行运行测试，因此可以更快地完成执行
- en: It allows you to test asynchronous code synchronously
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许你同步测试异步代码
- en: It enables you to run tests on the command line with the fake DOM implementation
    via jsdom
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许你通过jsdom的模拟DOM实现，在命令行上运行测试
- en: Testing in JavaScript using Chai and Mocha
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Chai和Mocha在JavaScript中进行测试
- en: As discussed earlier, in order to write test cases for the React code, we will
    be installing some testing libraries to run tests and write assertions. Let's
    walk through the setup for the Chai assertion library and the Mocha testing framework.
    We need to install the libraries with the help of `npm`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，为了编写 React 代码的测试用例，我们将安装一些测试库来运行测试和编写断言。让我们了解 Chai 断言库和 Mocha 测试框架的设置。我们需要使用
    `npm` 安装这些库。
- en: 'In the terminal type:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端输入：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`install` shortform: `i`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`install` 简称：`i`'
- en: '`devDependencies` shortform: `D` (the package will be installed only in a development
    environment)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`devDependencies` 简称：`D`（该包仅在开发环境中安装）'
- en: After the Chai and Mocha libraries are installed by the previously mentioned
    command, they can be found under the `node_modules` directory.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过之前提到的命令安装了 Chai 和 Mocha 库之后，它们可以在 `node_modules` 目录下找到。
- en: We need to add the Mocha and Chai entries in our `package.json` file.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在 `package.json` 文件中添加 Mocha 和 Chai 的条目。
- en: '**Package.json code**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**package.json 代码**'
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: According to [https://docs.nodejitsu.com/articles/getting-started/npm/what-is-the-file-package-json](https://docs.nodejitsu.com/articles/getting-started/npm/what-is-the-file-package-json)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 [https://docs.nodejitsu.com/articles/getting-started/npm/what-is-the-file-package-json](https://docs.nodejitsu.com/articles/getting-started/npm/what-is-the-file-package-json)
- en: All `npm` packages contain a file named `package.json`. This file is usually
    found in the project root. This file holds all metadata relevant to the project.
    A `package.json` file is used to offer information to `npm` thus allowing it to
    identify the project as well as handle the project's dependencies efficiently.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 `npm` 包都包含一个名为 `package.json` 的文件。此文件通常位于项目根目录。此文件包含与项目相关的所有元数据。`package.json`
    文件用于向 `npm` 提供信息，从而使其能够识别项目以及有效地处理项目的依赖项。
- en: '`name`: This depicts the name of the application.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：这表示应用程序的名称。'
- en: '`version`: This is a version of the application.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`：这是应用程序的版本。'
- en: '`description`: This is general description of the application.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`：这是应用程序的一般描述。'
- en: '`main`: This is the main JavaScript file, which may internally call other JS
    files. In this example, it''s `index.js` file.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main`：这是主 JavaScript 文件，它可能内部调用其他 JS 文件。在这个例子中，是 `index.js` 文件。'
- en: '`scripts`: This is the script to be executed when we call `npm` start. It should
    execute the test (mocha `test.js` file).'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scripts`：这是在调用 `npm start` 时要执行的脚本。它应该执行测试（mocha `test.js` 文件）。'
- en: '`devDependencies`: These are the packages that are installed in the same directory
    as in `package.json`, unless the `–production` flag is passed on it. The packages
    are not installed on any other directory unless the `–dev` option is passed.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`devDependencies`：这些是在与 `package.json` 相同的目录中安装的包，除非传递了 `–production` 标志。除非传递了
    `–dev` 选项，否则这些包不会安装在任何其他目录。'
- en: Add a `test.js` file. In order to check the setup working properly, we are adding
    a simple single test assertion.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个 `test.js` 文件。为了检查设置是否正常工作，我们添加了一个简单的单个测试断言。
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`assertions` are called from Chai.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`assertions` 是从 Chai 调用的。'
- en: '`describe` is called from Mocha framework to describe the tests.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe` 是从 Mocha 框架中调用来描述测试的。'
- en: 'Now we run the test, from the app''s root directory in terminal, as shown here:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们运行测试，从应用程序的根目录在终端中，如下所示：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Testing in JavaScript using Chai and Mocha](img/00044.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Chai 和 Mocha 在 JavaScript 中进行测试](img/00044.jpeg)'
- en: A console screenshot using the Mocha and Chai setup
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Mocha 和 Chai 设置的控制台截图
- en: Testing using ReactTestUtils
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ReactTestUtils 进行测试
- en: ReactTestUtils is used to test React-based components. It can simulate all the
    JavaScript-based events, which ReactJS supports. The documentation is cited in
    the Facebook developer site ([https://facebook.github.io/react/docs/test-utils.html](https://facebook.github.io/react/docs/test-utils.html)).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: ReactTestUtils 用于测试基于 React 的组件。它可以模拟 ReactJS 支持的所有基于 JavaScript 的事件。文档可以在 Facebook
    开发者网站上找到（[https://facebook.github.io/react/docs/test-utils.html](https://facebook.github.io/react/docs/test-utils.html)）。
- en: 'The code is as shown for the stimulate function:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对模拟函数的代码：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Installing React and JSX
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 React 和 JSX
- en: As mentioned earlier, while installing the Chai and mocha, we are here installing
    React- and JSX-specific test tools (ReactTestUtils) in order to ease our task.
    Let's explore the ReactTestUtils with help from some React-based components and
    stimulate them to test the behavior and functionality.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在安装 Chai 和 mocha 时，我们在此安装 React 和 JSX 特定的测试工具（ReactTestUtils），以便简化我们的任务。让我们借助一些基于
    React 的组件并刺激它们来测试行为和功能。
- en: The following is an example of such a code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个此类代码的示例。
- en: 'We need to install the `jest` package via `npm` with the following code in
    the terminal:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在终端使用以下代码通过`npm`安装`jest`包：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'sudo/root access to the machine/server where the node packages has to be installed
    is required. This is particularly required as the directory where the node is
    installed. We can check the installed directory, using the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在需要安装node包的机器/服务器上，需要sudo/root访问权限。这特别需要，因为node安装的目录。我们可以使用以下命令检查已安装的目录：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As per the screenshot here, it's installed in the `/usr` directory, which has
    the permissions set to root. Hence, we need to install the `npm` packages using
    the `sudo` option.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这里的截图，它安装在`/usr`目录中，权限设置为root。因此，我们需要使用`sudo`选项安装`npm`包。
- en: '![Installing React and JSX](img/00045.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![安装React和JSX](img/00045.jpeg)'
- en: A console screenshot of the /usr directory file owner/permissions.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`/usr`目录文件所有者/权限的控制台截图。'
- en: 'Another way is to set the permission of the `/usr` directory to the user, which
    can have permissions to own and modify the files in the directory:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是设置`/usr`目录的权限为用户，该用户可以拥有和修改目录中的文件：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's try to have a approach of **test-driven development** (**TDD**) , whereby
    we will be creating a failing test case following the actual code to pass.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试采用**测试驱动开发**（**TDD**）的方法，即我们将创建一个失败的测试用例，然后根据实际代码来通过测试。
- en: 'Create a JS file, which will greet any name with `hi`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个JS文件，该文件将用`hi`问候任何名字：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, let''s create the `test` file within a directory named `__test__`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在名为`__test__`的目录中创建一个`test`文件：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s recap about some jest properties, from the earlier-mentioned code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下之前提到的代码中的jest属性：
- en: '`jest.dontMock` is explicitly mentioned here, as jest by default mocks everything.
    Thus in order to test the actual code without mocking we need to ask jest not
    to mock the code which has to be tested (`greetings.js`)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jest.dontMock`在这里被明确提及，因为jest默认会模拟一切。因此，为了测试实际代码而不进行模拟，我们需要要求jest不要模拟需要测试的代码（`greetings.js`）。'
- en: '`describe(''greetings'', function())` each describe block is the test suite
    which gets executed when the test runs (`npm test`/`jest`). One describe block
    can have multiple test cases.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`describe(''greetings'', function())`每个describe块是测试套件，当运行测试时（`npm test`/`jest`）将被执行。一个describe块可以有多个测试用例。'
- en: '`it(''greets the name'', function()`, it block the actual test spec/case within
    the describe block.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`it(''greets the name'', function()`, 在describe块内阻塞实际的测试规格/用例。'
- en: 'In order to execute the tests within the _`_test__/` directory, we need to
    have the `package.json` file with the following entries:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在`_test__`目录中执行测试，我们需要有一个包含以下条目的`package.json`文件：
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will be covering more about packaging in the next chapter.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更详细地介绍打包。
- en: 'Here is the code for `package.json` file:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`package.json`文件的代码：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let's have a quick recap of the this code within `package.json`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对`package.json`中的这段代码进行快速回顾。
- en: 'Once all are ready, we can run the test in the terminal, using the following
    command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一切准备就绪后，我们可以在终端使用以下命令运行测试：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output is shown as here:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '![Installing React and JSX](img/00046.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![安装React和JSX](img/00046.jpeg)'
- en: The TDD console screenshot, showing failing tests.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用jest的TDD控制台截图，显示失败测试。
- en: 'Now, let''s add the code so that the name is greeted with the name and the
    test passes:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加代码，以便用名字问候名字，并且测试通过：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, when we execute the test, we will be seeing a passing test case:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们执行测试时，我们将看到一个通过测试用例：
- en: '![Installing React and JSX](img/00047.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![安装React和JSX](img/00047.jpeg)'
- en: The TDD console screenshot, using npm test, showing passing tests.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用npm test的TDD控制台截图，显示通过测试。
- en: 'One of the other ways to execute the tests is by installing `jest` and executing
    them by calling the jest from the terminal:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 执行测试的另一种方法是安装`jest`并通过终端调用jest来执行它们：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output is as shown here:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '![Installing React and JSX](img/00048.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![安装React和JSX](img/00048.jpeg)'
- en: The TDD console screenshot, using jest, showing passing tests.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用jest的TDD控制台截图，显示通过测试。
- en: Thus, we can see with either of the commands `npm test`/`jest`, we are getting
    the same output.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以看到使用`npm test`/`jest`中的任何一个命令，我们都会得到相同的输出。
- en: The jestTypical example of a Testsuite with Mocha, expect, ReactTestUtils and
    Babel
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下面是使用Mocha、expect、ReactTestUtils和Babel的jest测试套件的典型示例。
- en: 'Let''s see a typical example of `package.json`, which is using the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`package.json`的典型示例，它使用以下内容：
- en: Mocha as a testing framework
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mocha作为测试框架
- en: Expect as an assertion library
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Expect作为一个断言库
- en: ReactTestUtils to test react-based JavaScript components
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReactTestUtils用于测试基于React的JavaScript组件
- en: Babel used as a transcompiler, which changes the ES6 codes into currently compatible
    (ES5) JavaScript code.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Babel作为转编译器，将ES6代码转换为当前兼容（ES5）的JavaScript代码。
- en: 'The example of `package.json` file:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json`文件的示例：'
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As in the previous examples, within the script object, we keep the the test
    files and all the test files follow the convention of ending with the `.test.js`
    extension. Any extension for the test files can be used. For compilation from
    ES6 code to browser compatible JS code, the `–compiler` tag is added in the script.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如前例所示，在脚本对象中，我们保留测试文件，并且所有测试文件都遵循以`.test.js`扩展名结尾的约定。测试文件可以使用任何扩展名。对于从ES6代码编译到浏览器兼容的JS代码，脚本中添加了`–compiler`标签。
- en: 'Install all the following packages, as here, mentioned in `package.json`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 安装以下所有包，如`package.json`中所述：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here is the definition of a transpiler. Source [https://en.wikipedia.org/wiki/Source-to-source_compiler](https://en.wikipedia.org/wiki/Source-to-source_compiler)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是转译器的定义。来源 [https://en.wikipedia.org/wiki/Source-to-source_compiler](https://en.wikipedia.org/wiki/Source-to-source_compiler)
- en: '*"A source-to-source compiler, transcompiler, or transpiler is a type of compiler
    that takes the source code of a program written in one programming language as
    its input and produces the equivalent source code in another programming language."*'
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"源到源编译器、转编译器或转译器是一种编译器，它接受用一种编程语言编写的程序源代码作为输入，并生成另一种编程语言的等效源代码。"*'
- en: The `.babelrc` file contains all the Babel API options. The following is the
    screenshot of the file structures of the app with test suite setup. The details
    can be found in the Babel documentation at [https://babeljs.io/docs/usage/babelrc/](https://babeljs.io/docs/usage/babelrc/).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`.babelrc`文件包含所有Babel API选项。以下是与测试套件设置相关的应用程序文件结构截图。详细信息可以在Babel文档中找到，网址为[https://babeljs.io/docs/usage/babelrc/](https://babeljs.io/docs/usage/babelrc/)。'
- en: '![The jestTypical example of a Testsuite with Mocha, expect, ReactTestUtils
    and Babel](img/00049.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![Mocha、expect、ReactTestUtils和Babel的jest典型测试套件示例](img/00049.jpeg)'
- en: The screenshot showing the dir structure of a typical JS Application with the
    __test__ , node_modules, package.json, and .babelrc
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 展示典型JS应用程序目录结构的截图，包括__test__、node_modules、package.json和.babelrc
- en: Using the same `greetings.js` file as before but testing with the new ES6 syntax
    in the `greetings.test.js` and `index.test.js` files, let's test the testsuite.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与之前相同的`greetings.js`文件，但在`greetings.test.js`和`index.test.js`文件中使用新的ES6语法进行测试，让我们测试测试套件。
- en: '**Code __test__/greetings.test.js (using ES6 syntax)**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码 __test__/greetings.test.js（使用ES6语法）**'
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Code __test__/index.test.js (using ES6 syntax)**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码 __test__/index.test.js（使用ES6语法）**'
- en: '[PRE18]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![The jestTypical example of a Testsuite with Mocha, expect, ReactTestUtils
    and Babel](img/00050.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![Mocha、expect、ReactTestUtils和Babel的jest典型测试套件示例](img/00050.jpeg)'
- en: A screenshot showing tests using ES6 syntaxes, mocha, and babel
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 展示使用ES6语法、mocha和babel进行测试的截图
- en: Executing this test file using ES6 syntaxes with the mocha testing framework,
    expect assertion library and after been transpiled by Babel yielded the same result
    as before.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ES6语法和mocha测试框架、expect断言库执行此测试文件，并在经过Babel转译后产生了与之前相同的结果。
- en: Testing with shallow rendering
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用浅渲染进行测试
- en: '**Shallow rendering** is a method used while testing React components in which
    the component is "one level deep". Such a shallow-rendered test component has
    the facts regarding the returned things with respect to the `render` methods.
    Such components do not have the child components attached to it, and it does not
    require DOM.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**浅渲染**是在测试React组件时使用的一种方法，其中组件是“单层深”。这样的浅渲染测试组件具有关于返回内容的`render`方法的事实。这些组件没有附加子组件，并且不需要DOM。'
- en: Thus, while testing with a shallow rendering method, it should be remembered
    that any changes in the parent component that has the DOM changes and/or any child
    components been changed may require in rewriting the test.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在测试使用浅渲染方法时，应记住，任何具有DOM更改的父组件或任何已更改的子组件的更改可能需要重写测试。
- en: Let's explore this with help of some code. In the following example, we will
    be creating a React component (`GreetingComponent`) where the `render` method
    will return a `div` with two children (`h2` and `span` elements).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一些代码来探索这个问题。在以下示例中，我们将创建一个React组件（`GreetingComponent`），其中`render`方法将返回一个包含两个子元素（`h2`和`span`元素）的`div`。
- en: 'The code of `greeting.js`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`greeting.js`的代码：'
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Let's write the test for this React code using the shallow rendering method.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用浅渲染方法为这个React代码编写测试。
- en: '**Code of __test__/greeting.test.js**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**__test__/greeting.test.js的代码**'
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The output value is printed in the console. Based on that, we can see the different
    hierarchy and values of the concerned react component. The following is output
    from `console.log` (output)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 输出值将在控制台中打印。基于此，我们可以看到相关react组件的不同层次和值。以下是从`console.log`输出的内容（输出）
- en: '![Testing with shallow rendering](img/00051.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![使用浅渲染进行测试](img/00051.jpeg)'
- en: The screenshot showing the renderedOutput() method in the console.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 展示在控制台中渲染输出()方法的截图。
- en: 'Let''s go a level deep and check the value of the following: `const output
    = renderer.getRenderOutput().props.children`.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入一层，检查以下值：`const output = renderer.getRenderOutput().props.children`。
- en: 'Thus, we can see the exact two children with their types and values of the
    `GreetingComponent` React `div` element:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以看到`GreetingComponent` React `div`元素的确切两个子元素及其类型和值：
- en: '![Testing with shallow rendering](img/00052.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![使用浅渲染进行测试](img/00052.jpeg)'
- en: The screenshot showing the renderedOutput() method of the children in the console.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 展示在控制台中渲染输出()方法的子元素的截图。
- en: 'Based on the output, we can test both the children (`h2` and `span`) of the
    `div` element of the React `GreetingComponent` as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 根据输出，我们可以测试`div`元素的子元素（`h2`和`span`）如下：
- en: '[PRE21]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can see that there are several lines of codes that are common between the
    two `it` blocks. Hence, we can separate these common codes and refactor it as
    shown here:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到两个`it`块之间有若干行共同的代码。因此，我们可以将这些共同代码分离出来，并如以下所示进行重构：
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'While executing the code, we can get the output in a file, with the following
    command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行代码时，我们可以使用以下命令在文件中获取输出：
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The following is the output in the `test_output.txt` file. You can play and
    check the different properties of the React elements. The explanation of each
    of them is beyond the scope of this book. But we can see that all React components
    are nothing but JavaScript objects.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在`test_output.txt`文件中的输出。您可以播放并检查React元素的各个不同属性。每个属性的解释超出了本书的范围。但我们可以看到，所有React组件不过是JavaScript对象。
- en: '![Testing with shallow rendering](img/00053.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![使用浅渲染进行测试](img/00053.jpeg)'
- en: Summary
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We saw how we can test the different components in a React-based application
    and JavaScript as whole. In order to test a JavaScript code, we used chai and
    expect as assertion libraries, jasmine and jest as testing frameworks. To test
    a React application, we used ReactTestUtils and shallow rendering. In the following
    chapter, you will be learning about the deployment process of a React application.
    We will be exploring more about `package.json`, which we touched on in this chapter.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何在基于React的应用程序中测试不同的组件以及JavaScript本身。为了测试JavaScript代码，我们使用了chai和expect作为断言库，jasmine和jest作为测试框架。为了测试React应用程序，我们使用了ReactTestUtils和浅渲染。在下一章中，你将学习关于React应用程序的部署过程。我们将更深入地探讨`package.json`，这是我们本章中提到的。
