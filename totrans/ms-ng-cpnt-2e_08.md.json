["```js\n…\n\nexport interface Task {\n  readonly id?: number;\n  readonly projectId?: number;\n  readonly title: string;\n readonly description?: string;\n  readonly done: boolean;\n  readonly order: number;\n}\n\n…\n```", "```js\nng generate component --spec false -cd onpush tasks/task-details\n```", "```js\nimport {\n  ChangeDetectionStrategy, Component, EventEmitter, Input, Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Tag, Task} from '../../model';\n\n@Component({\n  selector: 'mac-task-details',\n  templateUrl: './task-details.component.html',\n  styleUrls: ['./task-details.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskDetailsComponent {\n  @Input() task: Task;\n  @Input() tags: Tag[];\n  @Output() outUpdateTask = new EventEmitter<Task>();\n\n  updateTitle(title: string) {\n    this.outUpdateTask.emit({\n      ...this.task,\n      title\n    });\n  }\n\n  updateDescription(description: string) {\n    this.outUpdateTask.emit({\n      ...this.task,\n      description\n    });\n  }\n}\n```", "```js\n<h3 class=\"title\">Task Details of task #{{task.id}}</h3>\n<div class=\"content\">\n  <div class=\"label\">Title</div>\n  <mac-editor [content]=\"task.title\"\n              [showControls]=\"true\"\n              (outSaveEdit)=\"updateTitle($event)\"></mac-editor>\n  <div class=\"label\">Description</div>\n  <mac-editor [content]=\"task.description\"\n              [showControls]=\"true\"\n              [tags]=\"tags\"\n              (outSaveEdit)=\"updateDescription($event)\"></mac-editor>\n</div>\n```", "```js\nng generate component --spec false -cd onpush container/task-details-container\n```", "```js\n<mac-task-details [task]=\"task | async\"\n                  [tags]=\"tags | async\"\n                  (outUpdateTask)=\"updateTask($event)\">\n</mac-task-details>\n```", "```js\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {TaskService} from '../../tasks/task.service';\nimport {Observable, combineLatest} from 'rxjs';\nimport {Tag, Task} from '../../model';\nimport {map} from 'rxjs/operators';\nimport {TagsService} from '../../tags/tags.service';\n\n@Component({\n  selector: 'mac-task-details-container',\n  templateUrl: './task-details-container.component.html',\n  styleUrls: ['./task-details-container.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskDetailsContainerComponent {\n  task: Observable<Task>;\n  tags: Observable<Tag[]>;\n\n  constructor(private taskService: TaskService,\n              private route: ActivatedRoute,\n              private tagsService: TagsService) {\n    this.task = combineLatest(\n      this.taskService.getTasks(),\n      route.params\n    ).pipe(\n      map(([tasks, routeParams]) =>\n        tasks.find((task) => task.id === +routeParams.taskId)\n      )\n    );\n    this.tags = this.tagsService.tags;\n  }\n\n  updateTask(task: Task) {\n    this.taskService.updateTask(task);\n  }\n}\n```", "```js\n…\nimport {TaskDetailsContainerComponent} from './container/task-details-container/task-details-container.component';\n\nexport const routes: Route[] = [{\n  path: 'projects/:projectId',\n  component: ProjectContainerComponent,\n  canActivate: [ProjectContainerGuard],\n  children: [{\n    path: 'tasks',\n    component: TaskListContainerComponent\n  }, {\n path: 'tasks/:taskId',\n component: TaskDetailsContainerComponent\n }, {\n    path: 'comments',\n    component: ProjectCommentsContainerComponent\n  }, {\n    path: 'activities',\n    component: ProjectActivitiesContainerComponent\n  }, {\n    path: '**',\n    redirectTo: 'tasks'\n  }]\n}, {\n  path: '',\n  pathMatch: 'full',\n  redirectTo: '/projects/1'\n}];\n```", "```js\n<mac-checkbox [checked]=\"task.done\"\n              (outCheck)=\"updateTask($event)\"></mac-checkbox>\n<div class=\"content\">\n  <div class=\"title\">\n    <mac-editor [content]=\"task.title\"\n                [showControls]=\"true\"\n                (outSaveEdit)=\"updateTitle($event)\"></mac-editor>\n  </div>\n  <button class=\"button button-small\" (click)=\"showDetails()\">Details</button>\n  <button class=\"delete\" (click)=\"deleteTask()\"></button>\n</div>\n```", "```js\n…\n\n@Component({\n  selector: 'mac-task',\n  templateUrl: './task.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskComponent {\n  …\n  @Output() outShowDetails = new EventEmitter<Task>();\n\n  …\n\n showDetails() {\n this.outShowDetails.emit(this.task);\n }\n}\n```", "```js\n…\n<div class=\"tasks\">\n  <mac-task *ngFor=\"let task of tasks\"\n            [task]=\"task\"\n            (outUpdateTask)=\"updateTask($event)\"\n            (outDeleteTask)=\"deleteTask($event)\"\n (outShowDetails)=\"showDetails($event)\"\n            macDraggable\n            draggableType=\"task\"\n            [draggableData]=\"task\"\n            macDraggableDropZone\n            dropAcceptType=\"task\"\n            (outDropDraggable)=\"dropTask(task, $event)\"></mac-task>\n</div>\n```", "```js\n…\n\n@Component({\n  selector: 'mac-task-list',\n  templateUrl: './task-list.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskListComponent {\n  …\n  @Output() outShowDetails = new EventEmitter<Task>();\n\n  …\n\n  showDetails(task: Task) {\n this.outShowDetails.emit(task);\n }\n}\n```", "```js\n<mac-task-list\n  [tasks]=\"filteredTasks | async\"\n  [taskFilterTypes]=\"taskFilterTypes\"\n  [activeTaskFilterType]=\"activeTaskFilterType | async\"\n  (outUpdateTask)=\"updateTask($event)\"\n  (outDeleteTask)=\"deleteTask($event)\"\n  (outShowDetails)=\"showDetails($event)\"\n  (outActivateFilterType)=\"activateFilterType($event)\"\n  (outAddTask)=\"addTask($event)\">\n</mac-task-list>\n```", "```js\n…\n\n@Component({\n  selector: 'mac-task-list-container',\n  templateUrl: './task-list-container.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskListContainerComponent {\n  …\n\n  showDetails(task: Task) {\n this.selectedProject\n .pipe(take(1))\n .subscribe(selectedProject => {\n this.router.navigate(['/projects', selectedProject.id, 'tasks', task.id]);\n });\n }\n}\n```", "```js\nimport {Injectable} from '@angular/core';\nimport {ProjectService} from '../project/project.service';\nimport {Project, Tag, Task} from '../model';\nimport {Observable, of, combineLatest} from 'rxjs/Observable';\nimport {map} from 'rxjs/operators';\nimport {limitWithEllipsis, replaceAll} from '../utilities/string-utilities';\nimport {TaskService} from '../tasks/task.service';\n\n@Injectable()\nexport class TagsService {\n  tags: Observable<Tag[]>;\n\n  constructor(private projectService: ProjectService,\n private taskService: TaskService) {\n    this.tags = combineLatest(\n this.projectService.getProjects().pipe(\n map((projects: Project[]) => projects.map(project => ({\n type: 'project',\n hashTag: `#project-${project.id}`,\n title: limitWithEllipsis(project.title, 20),\n link: `/projects/${project.id}/tasks`\n })))\n ),\n this.taskService.getTasks().pipe(\n map((tasks: Task[]) => tasks.map(task => ({\n type: 'task',\n hashTag: `#task-${task.id}`,\n title: `${limitWithEllipsis(task.title, 20)} (${task.done ? 'done' : 'open'})`,\n link: `/projects/${task.projectId}/tasks/${task.id}`\n })))\n )\n ).pipe(\n map(([projectTags, taskTags]) => [...projectTags, ...taskTags])\n );\n  }\n\n  …\n}\n```", "```js\n…\n\nexport interface TimeUnit {\n short: string;\n milliseconds: number;\n}\n\nexport interface TimeEfforts {\n estimated: number;\n effective: number;\n} \n```", "```js\nexport interface Task {\n  readonly id?: number;\n  readonly projectId?: number;\n  readonly title: string;\n  readonly description?: string;\n  readonly done: boolean;\n  readonly order: number;\n readonly efforts?: TimeEfforts;\n}\n\n…\n```", "```js\nimport {TimeUnit} from '../model';\n\nexport const UNITS: TimeUnit[] = [{\n  short: 'w',\n  milliseconds: 5 * 8 * 60 * 60 * 1000\n}, {\n  short: 'd',\n  milliseconds: 8 * 60 * 60 * 1000\n}, {\n  short: 'h',\n  milliseconds: 60 * 60 * 1000\n}, {\n  short: 'm',\n  milliseconds: 60 * 1000\n}];\n```", "```js\nexport function parseDuration(formattedDuration: string): number {\n  const pattern = /[\\d\\.]+\\s*[wdhm]/g;\n  let timeSpan = 0;\n  let result;\n  while (result = pattern.exec(formattedDuration)) {\n    const chunk = result[0].replace(/\\s/g, '');\n    const amount = Number(chunk.slice(0, -1));\n    const unitShortName = chunk.slice(-1);\n    timeSpan += amount * UNITS.find((unit) => unit.short === unitShortName).milliseconds;\n  }\n  return timeSpan || null;\n}\n```", "```js\nexport function formatDuration(timeSpan: number): string {\n  return UNITS.reduce((str, unit) => {\n    const amount = timeSpan / unit.milliseconds;\n    if (amount >= 1) {\n      const fullUnits = Math.floor(amount);\n      const formatted = `${str} ${fullUnits}${unit.short}`;\n      timeSpan -= fullUnits * unit.milliseconds;\n      return formatted;\n    } else {\n      return str;\n    }\n  }, '').trim();\n} \n```", "```js\nng generate pipe --spec false pipes/format-duration\n```", "```js\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {formatDuration} from '../utilities/time-utilities';\n\n@Pipe({\n  name: 'formatDuration'\n})\nexport class FormatDurationPipe implements PipeTransform {\n  transform(value) {\n    if (value == null || typeof value !== 'number') {\n      return value;\n    }\n\n    return formatDuration(value);\n  }\n}\n```", "```js\nng generate component --spec false -cd onpush ui/duration\n```", "```js\nimport {ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation} from '@angular/core';\nimport {parseDuration} from '../../utilities/time-utilities';\n\n@Component({\n  selector: 'mac-duration',\n  templateUrl: './duration.component.html',\n  styleUrls: ['./duration.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DurationComponent {\n  @Input() duration: number;\n  @Output() outDurationChange = new EventEmitter<number>();\n\n  editSaved(formattedDuration: string) {\n    this.outDurationChange.emit(parseDuration(formattedDuration));\n  }\n}\n\n```", "```js\n<mac-editor [content]=\"duration | formatDuration\"\n            [showControls]=\"true\"\n            (outSaveEdit)=\"editSaved($event)\"></mac-editor>\n```", "```js\nng generate component --spec false -cd onpush efforts/efforts\n```", "```js\n<div class=\"label\">Estimated:</div>\n<mac-duration [duration]=\"efforts?.estimated\"\n              (outDurationChange)=\"estimatedChange($event)\"></mac-duration>\n<div class=\"label\">Effective:</div>\n<mac-duration [duration]=\"efforts?.effective\"\n              (outDurationChange)=\"effectiveChange($event)\"></mac-duration>\n<button class=\"button small\" (click)=\"addEffectiveHours(1)\">+1h</button>\n<button class=\"button small\" (click)=\"addEffectiveHours(4)\">+4h</button>\n<button class=\"button small\" (click)=\"addEffectiveHours(8)\">+1d</button>\n```", "```js\nimport {Component, ViewEncapsulation, Input, Output, EventEmitter, ChangeDetectionStrategy} from '@angular/core';\nimport {UNITS} from '../../utilities/time-utilities';\nimport {TimeEffort} from '../../model';\n\n@Component({\n  selector: 'mac-efforts',\n  templateUrl: './efforts.component.html',\n  styleUrls: ['./efforts.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EffortsComponent {\n  @Input() efforts: TimeEffort;\n  @Output() outEffortsChange = new EventEmitter<TimeEffort>();\n\n  estimatedChange(estimated: number) {\n    this.outEffortsChange.emit({\n      ...this.efforts,\n      estimated\n    });\n  }\n\n  effectiveChange(effective: number) {\n    this.outEffortsChange.emit({\n      ...this.efforts,\n      effective\n    });\n  }\n\n  addEffectiveHours(hours: number) {\n    const hourMilliseconds = UNITS.find((unit) => unit.short === 'h').milliseconds;\n    let effective = this.efforts && this.efforts.effective ? this.efforts.effective : 0;\n    effective += hours * hourMilliseconds;\n\n    this.outEffortsChange.emit({\n      ...this.efforts,\n      effective\n    });\n  }\n}\n```", "```js\n<h3 class=\"title\">Task Details of task #{{task.id}}</h3>\n<div class=\"content\">\n  <div class=\"label\">Title</div>\n  <mac-editor [content]=\"task.title\"\n              [showControls]=\"true\"\n              (outSaveEdit)=\"updateTitle($event)\"></mac-editor>\n  <div class=\"label\">Description</div>\n  <mac-editor [content]=\"task.description\"\n              [showControls]=\"true\"\n              [tags]=\"tags\"\n              (outSaveEdit)=\"updateDescription($event)\"></mac-editor>\n  <div class=\"label\">Efforts</div>\n <mac-efforts [efforts]=\"task.efforts\"\n (outEffortsChange)=\"updateEfforts($event)\">\n </mac-efforts>\n</div>\n```", "```js\nimport {\n  ChangeDetectionStrategy, Component, EventEmitter, Input, Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Tag, Task, TimeEfforts} from '../../model';\n\n@Component({\n  selector: 'mac-task-details',\n  templateUrl: './task-details.component.html',\n  styleUrls: ['./task-details.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskDetailsComponent {\n  …\n\n  updateEfforts(efforts: TimeEfforts) {\n this.outUpdateTask.emit({\n ...this.task,\n efforts\n });\n }\n}\n```", "```js\nng generate component --spec false -cd onpush efforts/efforts-timeline\n```", "```js\nimport {Component, Input, ViewEncapsulation, ChangeDetectionStrategy, OnChanges, SimpleChanges} from '@angular/core';\nimport {TimeEfforts} from '../../model';\n\n@Component({\n  selector: 'mac-efforts-timeline',\n  templateUrl: './efforts-timeline.component.html',\n  styleUrls: ['./efforts-timeline.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EffortsTimelineComponent implements OnChanges {\n  @Input() efforts: TimeEfforts;\n\n  done: number;\n  overtime: number;\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.done = 0;\n    this.overtime = 0;\n\n    if (\n      !this.efforts.estimated && this.efforts.effective ||\n      (this.efforts.estimated && this.efforts.estimated === this.efforts.effective)\n    ) {\n      this.done = 100;\n    } else if (this.efforts.estimated < this.efforts.effective) {\n      this.done = this.efforts.estimated / this.efforts.effective * 100;\n      this.overtime = 100 - this.done;\n    } else {\n      this.done = this.efforts.effective / this.efforts.estimated * 100;\n    }\n  }\n}\n```", "```js\n<svg width=\"100%\" height=\"10\">\n  <rect height=\"10\"\n        x=\"0\" y=\"0\" width=\"100%\"\n        class=\"remaining\"></rect>\n  <rect *ngIf=\"done\" x=\"0\" y=\"0\" [attr.width]=\"done + '%'\" height=\"10\"\n        class=\"done\"></rect>\n  <rect *ngIf=\"overtime\" [attr.x]=\"done + '%'\" y=\"0\"\n        [attr.width]=\"overtime + '%'\" height=\"10\"\n        class=\"overtime\"></rect>\n</svg>\n```", "```js\n<div class=\"label\">Estimated:</div>\n<mac-duration [duration]=\"efforts?.estimated\"\n              (outDurationChange)=\"estimatedChange($event)\"></mac-duration>\n<div class=\"label\">Effective:</div>\n<mac-duration [duration]=\"efforts?.effective\"\n              (outDurationChange)=\"effectiveChange($event)\"></mac-duration>\n<button class=\"button small\" (click)=\"addEffectiveHours(1)\">+1h</button>\n<button class=\"button small\" (click)=\"addEffectiveHours(4)\">+4h</button>\n<button class=\"button small\" (click)=\"addEffectiveHours(8)\">+1d</button>\n<mac-efforts-timeline *ngIf=\"efforts\"\n [efforts]=\"efforts\">\n</mac-efforts-timeline>\n```"]