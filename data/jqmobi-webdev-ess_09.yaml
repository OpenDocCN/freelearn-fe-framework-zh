- en: Chapter 9. Working with Events
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章. 处理事件
- en: In this chapter, we will look at how events work in jQuery Mobile. While developers
    obviously have access to regular events (button clicks, and so on), jQuery Mobile
    also exposes its own events for developers to make use of.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看 jQuery Mobile 中事件是如何工作的。虽然开发人员显然可以访问常规事件（按钮点击等），但 jQuery Mobile 也为开发人员提供了自己的事件来使用。
- en: 'In this chapter, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Discuss touch, swipe, scroll, and other physical events
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论触摸、滑动、滚动和其他物理事件
- en: Discuss page events
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论页面事件
- en: Working with physical events
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理物理事件
- en: For the first part of this chapter, we will focus on the "physical" events,
    or events related to touch and other actions done with a device.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一部分，我们将专注于“物理”事件，或者与使用设备时的触摸和其他操作相关的事件。
- en: Tip
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For those of you who have been testing jQuery Mobile using a regular browser,
    please note that some of the following examples will not work properly on a desktop
    browser. If you wish, you can download and install emulators for various mobile
    phone types. For example, Android has an SDK that supports creating virtual mobile
    devices. Apple also has a way to simulate an iOS device. Setting up and installing
    these emulators are beyond the scope of this chapter, but it is certainly an option.
    Of course, you can also use a real hardware device as well.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些一直在使用常规浏览器测试 jQuery Mobile 的人，请注意，以下一些示例在桌面浏览器上可能无法正常工作。如果愿意，可以下载并安装各种手机模拟器。例如，Android
    有一个支持创建虚拟移动设备的 SDK。苹果也有一种模拟 iOS 设备的方法。设置和安装这些模拟器超出了本章的范围，但这当然是一种选择。当然，您也可以使用真实的硬件设备。
- en: 'The physical events include the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 物理事件包括以下内容：
- en: '`tap` and `taphold: tap` represents what it sounds like — a quick physical
    touch on the web page. `taphold` is a longer touch. Many applications will make
    use of two separate actions — one for `tap` and one for `taphold`.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tap` 和 `taphold: tap` 表示其听起来就像 — 网页上的快速物理触摸。 `taphold` 是一个较长时间的触摸。许多应用程序将使用两种不同的操作
    — 一个用于 `tap`，另一个用于 `taphold`。'
- en: '`swipe, swipeleft`, and `swiperight:` These represent swipes, or a finger movement
    across most of the devices. The `swipe` event is a generic one, whereas `swipeleft`
    and `swiperight` represent a swipe in a specific direction. There is no support
    for a swipe up or down event.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`swipe, swipeleft` 和 `swiperight:` 这些表示滑动，或者对大多数设备的手指移动。 `swipe` 事件是通用事件，而
    `swipeleft` 和 `swiperight` 表示特定方向的滑动。不支持向上或向下的滑动事件。'
- en: '`scrollstart` and `scrollstop:` Respectively handle the beginning and end of
    scrolling a page.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scrollstart` 和 `scrollstop:` 分别处理页面滚动的开始和结束。'
- en: '`orientationchange:` Fired when the device''s orientation changes.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orientationchange:` 当设备方向改变时触发。'
- en: '`vclick, vmousedown, vmouseup, vmousemove, vmousecancel`, and `vmouseover:`
    All of these are "virtual" events meant to abstract away checking for either touch
    or mouse click events. As these are mainly just aliases for click and touch events,
    they will not be demonstrated.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vclick、vmousedown、vmouseup、vmousemove、vmousecancel` 和 `vmouseover:` 所有这些都是“虚拟”事件，旨在屏蔽对触摸或鼠标点击事件的检查。由于这些主要只是点击和触摸事件的别名，因此不会进行演示。'
- en: 'Now that we''ve listed the basic physical events, let''s start looking at a
    few examples. `Listing 9-1` demonstrates a simple example of the `tap` and `taphold`
    events:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经列出了基本的物理事件，让我们开始看一些示例。 `清单9-1` 演示了 `tap` 和 `taphold` 事件的一个简单示例：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This template is rather simple. The page has some explanatory text asking the
    user to tap on it. Beneath it is an empty paragraph. Note though the two binds
    at the end of the document. One listens for `tap` while the other listens for
    `taphold`. The user can do either action and a different status message is displayed.
    While rather simple, this gives you a good idea of how you could respond differently
    based on how long the user holds their finger down. (The time for the `taphold`
    event to fire is around one second):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 该模板相当简单。页面上有一些解释性文本，要求用户点击它。其下是一个空段落。请注意，文档末尾有两个绑定。一个监听 `tap`，另一个监听 `taphold`。用户可以执行任一操作，并显示不同的状态消息。尽管相当简单，但这给了您一个很好的想法，即根据用户按住手指的时间长短做出不同的响应。（`taphold`
    事件触发的时间大约为一秒）：
- en: '![Working with physical events](img/7263_9_1.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![处理物理事件](img/7263_9_1.jpg)'
- en: 'Now let''s look at `Listing 9-2`, an example of swipe events:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看 `清单9-2`，一个关于滑动事件的示例：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This example is pretty similar to the previous one, except now our event handlers
    listen for `swipe, swipeleft`, and `swiperight`. One important difference is that
    we append to the status div instead of simply setting it. Why? A `swiperight`
    or `swipeleft` event is automatically a swipe event. If we simply set the text
    in the paragraph, one would wipe out the other. The following screenshot shows
    how the device looks after a few swipes:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子与前一个例子非常相似，只是现在我们的事件处理程序监听`swipe, swipeleft`和`swiperight`。一个重要的区别是我们附加到状态div而不是简单地设置它。为什么呢？`swiperight`或`swipeleft`事件自动是一个滑动事件。如果我们简单地设置段落中的文本，一个将覆盖另一个。下面的截图显示了设备在几次滑动后的外观：
- en: '![Working with physical events](img/7263_9_2.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![使用物理事件](img/7263_9_2.jpg)'
- en: How about a more complex example? Consider the following code snippet, `Listing
    9-3:`
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的例子呢？考虑以下代码片段，`9-3清单`：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, we've got a file that includes two separate pages, one with
    the id `first` and the other with the id `second`. Notice we have no links. So
    how do we navigate? With swipes! Our event handler is now listening for both `swipeleft`
    and `swiperight`. We first grab the active page using `$.mobile.activePage`, as
    described in [Chapter 8](../Text/ch08.html "Chapter 8. jQuery Mobile Configuration,
    Utilities, and JavaScript methods"), *JavaScript Configuration and Utilities in
    jQuery Mobile* on methods and utilities. The `[0]` at the end refers to the fact
    that the value is actually a jQuery Selector. Using `[0]` grabs the actual DOM
    item. The event type will be either `swipeleft` or `swiperight`. Once we know
    that, we can actively move the user around depending on what page they are currently
    on and in what direction they swiped.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们有一个包含两个单独页面的文件，一个页面的id为`first`，另一个页面的id为`second`。注意我们没有链接。那么我们如何导航呢？用滑动！我们的事件处理程序现在同时监听`swipeleft`和`swiperight`。我们首先使用`$.mobile.activePage`获取活动页面，如[第8章](../Text/ch08.html
    "第8章。jQuery Mobile配置、实用工具和JavaScript方法") *jQuery Mobile中的JavaScript配置和实用工具*中所述，关于方法和实用工具。末尾的`[0]`表示该值实际上是一个jQuery选择器。使用`[0]`会获取实际的DOM项。事件类型将是`swipeleft`或`swiperight`。一旦我们知道了这一点，我们就可以根据用户当前所在的页面和他们滑动的方向积极地移动用户。
- en: 'Now let''s look at scrolling. You can detect when a scroll starts and when
    one ends. `Listing 9-4` is another simple example of this in action:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下滚动。你可以检测滚动何时开始以及何时结束。`9-4清单`是另一个这样操作的简单示例：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This template is pretty similar to `test1.html`, the tap tester, except now
    we've listened to `scrollstart` and `scrollstop`. Also note the list of`<br/>`
    tags. In the real source file, there are many of these. This will ensure that
    the page is actually scrollable when you test. When the scrolling will start and
    end, we simply append to another status `div`. (Please note that currently DOM
    manipulation is listed as being buggy when listening to `scrollstart`. The previous
    example may not work in iOS, but works fine on Android.)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模板与`test1.html`，即点击测试器非常相似，只是现在我们监听了`scrollstart`和`scrollstop`。还要注意`<br/>`标签的列表。在真实的源文件中，这些标签有很多。这将确保在测试时页面确实是可滚动的。当滚动开始和结束时，我们只是将其附加到另一个状态`div`。（请注意，当前将DOM操作列为在监听`scrollstart`时存在错误。前面的例子在iOS上可能无法工作，但在Android上工作正常。）
- en: 'Now let''s look at orientation. While the previous examples should be (mostly)
    testable on your desktop, you will definitely need a real mobile device to test
    the next example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下方向。虽然前面的例子大部分可以在你的桌面上测试，但你肯定需要一个真实的移动设备来测试下一个例子：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The critical part of the previous code listing is the JavaScript at the end,
    specifically the event listener for changing orientation. This is not actually
    a jQuery Mobile supported event but something supported by the browser itself.
    Once the event listener is attached, you can do whatever you wish based on the
    orientation of the device. The following screenshot is the demonstration:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个代码清单的关键部分是最后的JavaScript，特别是用于更改方向的事件侦听器。这实际上不是jQuery Mobile支持的事件，而是浏览器本身支持的事件。一旦事件侦听器被附加，你可以根据设备的方向进行任何操作。以下截图是演示：
- en: '![Working with physical events](img/7263_9_3.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![使用物理事件](img/7263_9_3.jpg)'
- en: Handling page events
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理页面事件
- en: 'Now that we''ve discussed physical type events, it''s time to turn our attention
    to page events. Remember that jQuery Mobile has its own concept of pages. In order
    to give developers even more control over how pages work within jQuery Mobile,
    numerous page events are supported. Not all will necessarily be useful in your
    day to day development. In general, page events can be split into the following
    categories:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了物理类型事件，是时候将注意力转向页面事件了。请记住，jQuery Mobile有自己的页面概念。为了在jQuery Mobile中给开发人员更多控制页面工作的能力，支持了许多页面事件。并非所有事件都一定在日常开发中有用。一般来说，页面事件可以分为以下几类：
- en: 'load: These are events related to the loading of a page. They are `pagebeforeload,
    pageload`, and `pageloadfailed. pagebeforeload` is fired prior to a page being
    requested. Your code can either approve or deny this request based on whatever
    logic may make sense. If a page is loaded, then `pageload` is fired. Conversely,
    `pageloadfailed` will be fired on any load that does not complete.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: load：这些是与页面加载相关的事件。它们是`pagebeforeload，pageload`和`pageloadfailed。pagebeforeload`在请求页面之前触发。您的代码可以根据逻辑批准或拒绝此请求。如果加载页面，则会触发`pageload`。相反，`pageloadfailed`将在任何未完成的加载上触发。
- en: 'change: These events are related to the change from one page to another. They
    are: `pagebeforechange, pagechange`, and `pagechangefailed`. As before, the `pagebeforechange`
    function acts as a way to programmatically decline the event. If done, the `pagechangefailed`
    event is fired. `pagebeforechange` is fired *before* the `pagebeforeload` event.
    `pagechange` will fire after the page is displayed.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: change：这些事件与从一个页面更改到另一个页面有关。它们是：`pagebeforechange，pagechange`和`pagechangefailed`。与以前一样，`pagebeforechange`函数充当编程方式拒绝事件的一种方式。如果完成，将触发`pagechangefailed`事件。`pagebeforechange`在`pagebeforeload`事件之前触发。`pagechange`将在显示页面后触发。
- en: 'transition: Events related to the movement, or transition, from one page to
    another. They are: `pagebeforeshow, pageshow, pagebeforehide, pagehide`. Both
    `pagebeforeshow` and `pagebeforehide` run prior to their related events but unlike
    `pagebeforeload` and `pagebeforechange`, they can''t actually prevent the next
    event.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: transition：与从一个页面转换到另一个页面相关的事件。它们是：`pagebeforeshow，pageshow，pagebeforehide，pagehide`。`pagebeforeshow`和`pagebeforehide`在其相关事件之前运行，但与`pagebeforeload`和`pagebeforechange`不同，它们实际上不能阻止下一个事件的发生。
- en: 'init: As it has been shown many times in this book, jQuery Mobile performs
    multiple updates to basic HTML to optimize it for mobile displays. These are initialization
    related events. The events you can listen to are: `pagebeforecreate, pagecreate`,
    and `pageinit. pagebeforecreate` fires before any of the automatic updates are
    fired on your controls. This allows you to manipulate your HTML via Javascript
    beforehand. `pagecreate` is fired after page content exists in the DOM, but still
    before the layout has been updated by jQuery Mobile. The official docs recommend
    this as the place to do any custom widget handling. Finally, `pageinit` will run
    after the initialization has been completed.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: init：正如本书中多次显示的那样，jQuery Mobile对基本HTML执行多次更新，以使其优化为移动显示。这些是与初始化相关的事件。您可以监听的事件是：`pagebeforecreate，pagecreate`和`pageinit。pagebeforecreate`在您的控件上的任何自动更新触发之前触发。这允许您在布局由jQuery
    Mobile更新之前通过Javascript操纵您的HTML。`pagecreate`在页面内容存在于DOM中之后触发，但仍然在jQuery Mobile更新布局之前触发。官方文档建议这是进行任何自定义小部件处理的地方。最后，`pageinit`将在初始化完成后运行。
- en: 'remove: There is one event for this category `pageremove`. This event is fired
    before jQuery Mobile removes an inactive page from the DOM. You can listen to
    this event to prevent the framework from removing the page.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: remove：此类别有一个事件`pageremove`。在jQuery Mobile从DOM中删除非活动页面之前触发此事件。您可以监听此事件以防止框架删除页面。
- en: 'layout: The final category is related to layout and has one event `updatelayout`.
    This is typically fired by other layout changes as a way to let the page know
    it needs to update itself.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: layout：最后一个类别与布局相关，有一个事件`updatelayout`。这通常是由其他布局更改触发的一种方式，用于通知页面需要更新自身。
- en: 'That''s quite a lot! A simple way to look at these events in action would be
    to simply listen to all of them. In `Listing 9-6`, we have a simple example of
    this in action:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这还真是不少啊！看待这些事件的一个简单方法就是简单地听取它们的全部。在`列表 9-6`中，我们有一个这样的简单示例：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This template is part of a four-page, three-file simple application that has
    buttons linking to each of the other pages. The other pages may be found in the
    ZIP file you downloaded. In order to test this application, you **should** use
    a desktop browser with console support. That''s any version of Chrome, recent
    Firefox browsers (or Firefox with Firebug), and the latest Internet Explorer.
    A full explanation of the browser console wouldn''t fit in this chapter, but you
    can think of it as a hidden away debugging log useful for recording events and
    other messages. In this case, we''ve told jQuery to listen for all of our jQuery
    Mobile page events. We then log the specific event type to the console. After
    clicking around a bit, the following screenshot shows how the console log looks
    in a Chrome browser:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模板是一个四页、三文件的简单应用程序的一部分，它有按钮链接到其他每一页。其他页面可以在你下载的 ZIP 文件中找到。为了测试这个应用程序，你**应该**使用支持控制台的桌面浏览器。任何版本的
    Chrome，最近的 Firefox 浏览器（或带有 Firebug 的 Firefox）和最新的 Internet Explorer。浏览器控制台的完整说明无法在本章中适用，但你可以把它看作是一个隐藏的调试日志，用于记录事件和其他消息。在这种情况下，我们已经告诉
    jQuery 监听我们所有的 jQuery Mobile 页面事件。然后我们将特定的事件类型记录到控制台。点击了一些东西之后，以下屏幕截图显示了在 Chrome
    浏览器中控制台日志的样子：
- en: '![Handling page events](img/7263_9_4.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![处理页面事件](img/7263_9_4.jpg)'
- en: Opening the console in Chrome is simple. Click on the monkey wrench icon in
    the upper right corner of the browser. Select **Tools** and then **JavaScript
    Console**. Open the console up before testing these files yourself and you can
    monitor the page events as they happen in real time.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Chrome 中打开控制台很简单。点击浏览器右上角的扳手图标。选择**工具**然后选择**JavaScript 控制台**。在测试这些文件之前打开控制台，你可以实时监控页面事件的发生情况。
- en: What about $(document).ready?
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`$(document).ready`怎么样？'
- en: If you are a jQuery user, you may be curious how `$(document).ready` comes into
    play with a jQuery Mobile site. Almost all jQuery applications use `$(document).ready`
    for initialization and other important setup operations. However, in a jQuery
    Mobile application, this will not work well. Since Ajax is used to load pages,
    `$(document).ready` is only really effective for the *first* page. Therefore,
    the `pageInit` event should be used in cases where you would have used `$(document).ready`
    in the past.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个 jQuery 用户，你可能会好奇`$(document).ready`在 jQuery Mobile 站点中是如何发挥作用的。几乎所有的
    jQuery 应用程序都使用`$(document).ready`进行初始化和其他重要的设置操作。然而，在 jQuery Mobile 应用程序中，这样做效果不佳。由于使用
    Ajax 加载页面，`$(document).ready`只对*第一个*页面有效。因此，在过去使用`$(document).ready`的情况下，应该使用`pageInit`事件。
- en: Creating a real example
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个真实的例子
- en: 'So what about a real example? Our next set of code is going to demonstrate
    how to create a simple, but dynamic, jQuery Mobile web site. The content will
    be loaded via Ajax. Normally this would be dynamic data, but for our purposes
    we''ll use simple static files of JSON data. JSON, stands for JavaScript Object
    Notation, is a way to represent complex data as simple strings. `Listing 9-7`
    is the application''s home page:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 那么真实的例子呢？我们的下一组代码将演示如何创建一个简单但动态的 jQuery Mobile 网站。内容将通过 Ajax 加载。通常这将是动态数据，但出于我们的目的，我们将使用简单的静态
    JSON 数据文件。JSON，代表 JavaScript 对象表示法，是一种将复杂数据表示为简单字符串的方法。`列表 9-7`是应用的首页：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first thing you may notice about this jQuery Mobile page is that there isn't
    any actual content. Not within the jQuery Mobile page's content block at least.
    There's a `listview` but no actual content. So where's the content going to come
    from? At the bottom of the page you can see two event listeners. For now let's
    just focus on the first one.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 jQuery Mobile 页面的第一印象是，实际内容几乎不存在。至少在 jQuery Mobile 页面的内容块中是这样的。有一个`listview`但实际内容却不存在。那么内容从哪里来呢？在页面底部，你可以看到两个事件监听器。现在让我们只关注第一个。
- en: 'The code here binds to the `pagebeforecreate` event that jQuery Mobile fires
    for pages. We''ve told jQuery Mobile to run this event before it creates the page.
    This event will run once and only once. Within this event we use the jQuery `get`
    feature to do an Ajax request to the file `people.json`. That file is simply an
    array of names in JSON format:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的代码绑定到了 jQuery Mobile 为页面触发的`pagebeforecreate`事件。我们已经告诉 jQuery Mobile 在创建页面之前运行此事件。这个事件将运行一次且仅运行一次。在这个事件中，我们使用
    jQuery 的`get`功能对文件`people.json`进行了一个 Ajax 请求。该文件只是一个以 JSON 格式表示的名字数组。
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Each name has both an ID and the actual name value. When loaded by jQuery,
    this is turned into an actual array of simple objects. Looking back at the event
    handler, you can see that we simply loop over this array and create a string representing
    a set of `li` tags. Note that each one has a link to `test_people.html` as well
    as a dynamic name. Also note the links themselves are dynamic. They include each
    person''s ID value as retrieved from the JSON string:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 每个名称都有一个ID和实际的名称值。当通过jQuery加载时，这将转换为一组实际的简单对象。回顾事件处理程序，您会发现我们只需循环遍历此数组并创建表示一组`li`标签的字符串。请注意，每个都有一个指向`test_people.html`的链接，以及一个动态名称。还请注意链接本身是动态的。它们包括从JSON字符串中检索到的每个人的ID值：
- en: '![Creating a real example](img/7263_9_5.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个真实的例子](img/7263_9_5.jpg)'
- en: It was mentioned earlier, but take note of the call to `listview("refresh"):`
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候提到过，但请注意调用`listview("refresh")`：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Without the `listview("refresh")` portion, the items we added to the listview
    would not be styled correctly.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 没有`listview("refresh")`部分，我们添加到列表视图的项目将无法正确设置样式。
- en: 'Let''s take a quick look at `test_people.html` next:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看看下一个`test_people.html`：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As with our last page, this one is pretty devoid of content. Note that both
    the header and the content area are blank. But, if you remember the second event
    handler in `test_dyn.html`, we have support to load the content here. This time
    we used the `pagebeforeshow` event. Why? We want to run this code before every
    display of the page. We need to know what particular person to load. If you remember,
    the ID of the person was passed in the URL. We can fetch that via a data property,
    `url`, that exists on the page object. This returns the complete URL, but all
    we care about is the end of it our ID. So we split the string and grab the last
    value. Once we have, we can then load in a particular JSON file for each person.
    The form of this filename is `personX.json`, where `X` is the number 1 through
    5\. The following line of code is one example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们的上一页一样，这一页几乎没有内容。请注意，标题和内容区域都是空白的。但是，如果您记得`test_dyn.html`中的第二个事件处理程序，我们支持在这里加载内容。这次我们使用了`pagebeforeshow`事件。为什么？我们希望在每次显示页面之前运行此代码。我们需要知道要加载的特定人员是谁。如果您记得，人员的ID是通过URL传递的。我们可以通过页面对象上存在的数据属性`url`获取它。这返回完整的URL，但我们只关心它的末尾，即我们的ID。因此，我们拆分字符串并抓取最后一个值。一旦我们有了，我们就可以为每个人加载特定的JSON文件。此文件名的形式为`personX.json`，其中`X`是1到5的数字。以下代码行是一个示例：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Obviously, a real person object would have a bit more data. Once we fetch this
    string, we can then parse it and lay out the result on the page itself:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，真实的人物对象会有更多的数据。一旦我们获取了这个字符串，我们就可以解析它并将结果布局在页面上：
- en: '![Creating a real example](img/7263_9_6.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个真实的例子](img/7263_9_6.jpg)'
- en: Summary
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked into events that jQuery Mobile application can listen
    and respond to. These events include physical types (scrolling, orientation, touching)
    and page based ones as well.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了jQuery Mobile应用程序可以监听和响应的事件。这些事件包括物理类型（滚动、方向、触摸）和基于页面的事件。
- en: In the next chapter, we'll look at how jQuery Mobile sites are themed - both
    out of the box themes and custom ones as well.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看jQuery Mobile站点如何主题化 - 包括开箱即用的主题和自定义主题。
