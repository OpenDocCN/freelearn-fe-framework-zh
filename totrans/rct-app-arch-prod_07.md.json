["```js\ngit clone https://github.com/PacktPublishing/React-Application-Architecture-for-Production.git\n```", "```js\nnpm install\n```", "```js\ncp .env.example .env\n```", "```js\nnpm run stage:switch\n```", "```js\n? What stage do you want to switch to? (Use arrow\n keys)\n❯ chapter-02\n  chapter-03\n  chapter-03-start\n  chapter-04\n  chapter-04-start\n  chapter-05\n  chapter-05-start\n(Move up and down to reveal more choices)\n```", "```js\nimport { useMutation } from '@tanstack/react-query';\nimport { apiClient } from '@/lib/api-client';\nimport { queryClient } from '@/lib/react-query';\nimport { AuthUser, LoginData } from '../types';\nexport const login = (\n  data: LoginData\n): Promise<{\n  user: AuthUser;\n}> => {\n  return apiClient.post('/auth/login', data);\n};\ntype UseLoginOptions = {\n  onSuccess?: (user: AuthUser) => void;\n};\nexport const useLogin = ({\n  onSuccess,\n}: UseLoginOptions = {}) => {\n  const { mutate: submit, isLoading } = useMutation({\n    mutationFn: login,\n    onSuccess: ({ user }) => {\n      queryClient.setQueryData(['auth-user'], user);\n      onSuccess?.(user);\n    },\n  });\n  return { submit, isLoading };\n};\n```", "```js\nimport { useLogin } from '../../api/login';\n```", "```js\nexport const LoginForm = ({\n  onSuccess,\n}: LoginFormProps) => {\n  const login = useLogin({ onSuccess });\n  const { register, handleSubmit, formState } =\n    useForm<LoginData>();\n  const onSubmit = (data: LoginData) => {\n    login.submit(data);\n  };\n     // rest of the component body\n}\n```", "```js\n<Button\n  isLoading={login.isLoading}\n  isDisabled={login.isLoading}\n  type=\"submit\"\n>\n  Log in\n</Button>\n```", "```js\nimport { useMutation } from '@tanstack/react-query';\nimport { apiClient } from '@/lib/api-client';\nimport { queryClient } from '@/lib/react-query';\nexport const logout = () => {\n  return apiClient.post('/auth/logout');\n};\ntype UseLogoutOptions = {\n  onSuccess?: () => void;\n};\nexport const useLogout = ({\n  onSuccess,\n}: UseLogoutOptions = {}) => {\n  const { mutate: submit, isLoading } = useMutation({\n    mutationFn: logout,\n    onSuccess: () => {\n      queryClient.clear();\n      onSuccess?.();\n    },\n  });\n  return { submit, isLoading };\n};\n```", "```js\nexport * from './api/logout';\n```", "```js\nimport { useRouter } from 'next/router';\nimport { useLogout } from '@/features/auth';\n```", "```js\nconst Navbar = () => {\n  const router = useRouter();\n  const logout = useLogout({\n    onSuccess: () => router.push('/auth/login'),\n  });\n  // the rest of the component\n};\n```", "```js\n<Button\n  isDisabled={logout.isLoading}\n  isLoading={logout.isLoading}\n  variant=\"outline\"\n  onClick={() => logout.submit()}\n>\n  Log Out\n</Button>\n```", "```js\nimport { useQuery } from '@tanstack/react-query';\nimport { apiClient } from '@/lib/api-client';\nimport { AuthUser } from '../types';\nexport const getAuthUser = (): Promise<AuthUser> => {\n  return apiClient.get('/auth/me');\n};\nexport const useUser = () => {\n  const { data, isLoading } = useQuery({\n    queryKey: ['auth-user'],\n    queryFn: () => getAuthUser(),\n  });\n  return { data, isLoading };\n};\n```", "```js\nexport * from './api/get-auth-user';\n```", "```js\nimport { useLogout, useUser } from '@/features/auth';\n```", "```js\nimport { useUser } from '@/features/auth';\n```", "```js\nimport { Flex } from '@chakra-ui/react';\nimport { useRouter } from 'next/router';\nimport { ReactNode, useEffect } from 'react';\nimport { Loading } from '@/components/loading';\nimport { useUser } from '../../api/get-auth-user';\nexport type ProtectedProps = {\n  children: ReactNode;\n};\nexport const Protected = ({\n  children,\n}: ProtectedProps) => {\n  const { replace, asPath } = useRouter();\n  const user = useUser();\n  useEffect(() => {\n    if (!user.data && !user.isLoading) {\n      replace(\n        `/auth/login?redirect=${asPath}`,\n        undefined,\n        { shallow: true }\n      );\n    }\n  }, [user, asPath, replace]);\n  if (user.isLoading) {\n    return (\n      <Flex direction=\"column\" justify=\"center\" h=\"full\">\n        <Loading />\n      </Flex>\n    );\n  }\n  if (!user.data && !user.isLoading) return null;\n  return <>{children}</>;\n};\n```", "```js\nimport { Protected } from '@/features/auth';\n```", "```js\nexport const DashboardLayout = ({\n  children,\n}: DashboardLayoutProps) => {\n  const user = useUser();\n  return (\n    <Protected>\n      <Box as=\"section\" h=\"100vh\" overflowY=\"auto\">\n        <Navbar />\n        <Container as=\"main\" maxW=\"container.lg\" py=\"12\">\n          {children}\n        </Container>\n        <Box py=\"8\" textAlign=\"center\">\n          <Link\n            href={`/organizations/${user.data?.\n              organizationId}`}\n          >\n            View Public Organization Page\n          </Link>\n        </Box>\n      </Box>\n    </Protected>\n  );\n};\n```", "```js\nimport { createStore, useStore } from 'zustand';\nimport { uid } from '@/utils/uid';\n```", "```js\nexport type NotificationType =\n  | 'info'\n  | 'warning'\n  | 'success'\n  | 'error';\nexport type Notification = {\n  id: string;\n  type: NotificationType;\n  title: string;\n  duration?: number;\n  message?: string;\n};\nexport type NotificationsStore = {\n  notifications: Notification[];\n  showNotification: (\n    notification: Omit<Notification, 'id'>\n  ) => void;\n  dismissNotification: (id: string) => void;\n};\n```", "```js\nexport const notificationsStore =\n  createStore<NotificationsStore>((set, get) => ({\n    notifications: [],\n    showNotification: (notification) => {\n      const id = uid();\n      set((state) => ({\n        notifications: [\n          ...state.notifications,\n          { id, ...notification },\n        ],\n      }));\n      if (notification.duration) {\n        setTimeout(() => {\n          get().dismissNotification(id);\n        }, notification.duration);\n      }\n    },\n    dismissNotification: (id) => {\n      set((state) => ({\n        notifications: state.notifications.filter(\n          (notification) => notification.id !== id\n        ),\n      }));\n    },\n  }));\n```", "```js\nexport const useNotifications = () =>\n  useStore(notificationsStore);\n```", "```js\nimport {\n  Flex,\n  Box,\n  CloseButton,\n  Stack,\n  Text,\n} from '@chakra-ui/react';\nimport {\n  Notification,\n  NotificationType,\n  useNotifications,\n} from '@/stores/notifications';\n```", "```js\nexport const Notifications = () => {\n  const { notifications, dismissNotification } =\n    useNotifications();\n  if (notifications.length < 1) return null;\n  return (\n    <Box\n      as=\"section\"\n      p=\"4\"\n      position=\"fixed\"\n      top=\"12\"\n      right=\"0\"\n      zIndex=\"1\"\n    >\n      <Flex gap=\"4\" direction=\"column-reverse\">\n        {notifications.map((notification) => (\n          <NotificationToast\n            key={notification.id}\n            notification={notification}\n            onDismiss={dismissNotification}\n          />\n        ))}\n      </Flex>\n    </Box>\n  );\n};\n```", "```js\nconst notificationVariants: Record<\n  NotificationType,\n  { color: string }\n> = {\n  info: {\n    color: 'primary',\n  },\n  success: {\n    color: 'green',\n  },\n  warning: {\n    color: 'orange',\n  },\n  error: {\n    color: 'red',\n  },\n};\ntype NotificationToastProps = {\n  notification: Omit<Notification, 'duration'>;\n  onDismiss: (id: string) => void;\n};\n```", "```js\nconst NotificationToast = ({\n  notification,\n  onDismiss,\n}: NotificationToastProps) => {\n  const { id, type, title, message } = notification;\n  return (\n    <Box\n      w={{ base: 'full', sm: 'md' }}\n      boxShadow=\"md\"\n      bg=\"white\"\n      borderRadius=\"lg\"\n      {...notificationVariants[type]}\n    >\n      <Stack\n        direction=\"row\"\n        p=\"4\"\n        spacing=\"3\"\n        justifyContent=\"space-between\"\n      >\n        <Stack spacing=\"2.5\">\n          <Stack spacing=\"1\">\n            <Text fontSize=\"sm\" fontWeight=\"medium\">\n              {title}\n            </Text>\n            {notification.message && (\n              <Text fontSize=\"sm\" color=\"muted\">\n                {message}\n              </Text>\n            )}\n          </Stack>\n        </Stack>\n        <CloseButton\n          onClick={() => onDismiss(id)}\n          transform=\"translateY(-6px)\"\n        />\n      </Stack>\n    </Box>\n  );\n};\n```", "```js\nimport { Notifications } from '@/components/notifications';\n```", "```js\nexport const AppProvider = ({\n  children,\n}: AppProviderProps) => {\n  return (\n    <ChakraProvider theme={theme}>\n      <GlobalStyle />\n      <Notifications />\n      {/* rest of the code */}\n    </ChakraProvider>\n  );\n};\n```", "```js\nimport { useNotifications } from '@/stores/notifications';\n```", "```js\nconst { showNotification } = useNotifications();\n```", "```js\nconst onSuccess = () => {\n  showNotification({\n    type: 'success',\n    title: 'Success',\n    duration: 5000,\n    message: 'Job Created!',\n  });\n  router.push(`/dashboard/jobs`);\n};\n```", "```js\nimport { notificationsStore } from '@/stores/notifications';\n```", "```js\nconsole.error(message);\n```", "```js\nnotificationsStore.getState().showNotification({\n  type: 'error',\n  title: 'Error',\n  duration: 5000,\n  message,\n});\n```"]