- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with Table, List, and Card Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we continue our journey with PrimeNG and Angular, we find ourselves in the
    realm of data display components. In this chapter, we will focus on three key
    components: the data table, list, and card components. These components are the
    workhorses of any application, responsible for presenting data to users in a clear,
    concise, and user-friendly manner. They are the bridge between the raw data in
    our applications and the polished, interactive interfaces that our users interact
    with.'
  prefs: []
  type: TYPE_NORMAL
- en: The objective of this chapter is to provide you with the necessary knowledge
    and skills to effectively utilize data tables, lists, and card components, enabling
    you to present data in the most user-friendly and efficient manner possible. By
    gaining mastery over these components, you can ensure that users can effortlessly
    comprehend and interact with the data, ultimately leading to enhanced user engagement
    and satisfaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating responsive layouts with PrimeFlex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing data display components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with data table components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with list components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with card components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains various code samples of PrimeNG displaying components.
    You can find the related source code in the `chapter-06` folder of the following
    GitHub repository: [https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-06](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-06).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating responsive layouts with PrimeFlex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Flexbox` and `Grid`, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating PrimeFlex with PrimeNG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PrimeFlex can be easily integrated with PrimeNG by installing it via `npm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After the installation process, we’ll include the PrimeFlex library in our
    `styles.scss` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once we import `primeflex.scss`, we will be able to create an Angular application
    consistently, ensuring proper spacing, typography, layout, and all other essential
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s compare how we build layouts with and without PrimeFlex.
  prefs: []
  type: TYPE_NORMAL
- en: 'Building layouts without a utility library such as PrimeFlex can be cumbersome.
    You might find yourself writing repetitive and verbose CSS code, as seen in the
    following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We apply styles by creating the `.layout-wrapper` class and adding CSS syntax
    to it. This is a standard CSS implementation that is supported by web browsers.
    With normal CSS, you write your own styles from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, PrimeFlex simplifies this process by providing utility classes
    that encapsulate common CSS properties. Let’s look at the template with PrimeFlex
    utility classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: By utilizing common CSS utility classes, we can streamline our template, such
    as transforming the `.layout-wrapper` class to `flex flex-wrap gap-7`, eliminating
    the need for writing custom CSS code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The usage of PrimeFlex utility classes offers ease of use and consistency within
    your entire Angular application, while normal CSS provides greater flexibility
    and customization options, although it requires more effort and expertise to achieve
    desired styles. Let’s examine this in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – PrimeFlex classes example](img/B18805_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – PrimeFlex classes example
  prefs: []
  type: TYPE_NORMAL
- en: You can observe that the utility classes are mapped to their respective CSS
    styles, for example, from `flex` to `display:` `flex !important;`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples of utility classes related to layout (`Flexbox` and
    `Grid`) and text in PrimeFlex:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 6.2 – Common PrimeFlex utility classes](img/B18805_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Common PrimeFlex utility classes
  prefs: []
  type: TYPE_NORMAL
- en: These classes are part of PrimeFlex’s utility-first approach to CSS, providing
    you with a set of reusable classes that encapsulate common layout and text styling
    patterns. By using these classes, you can quickly build complex layouts and apply
    text styling without having to write custom CSS code, leading to a more efficient
    and maintainable development process. For a complete set of utility classes, please
    check out the documentation at [https://primeflex.org](https://primeflex.org).
  prefs: []
  type: TYPE_NORMAL
- en: Using Flexbox in PrimeFlex
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PrimeFlex provides a robust and versatile **Flexbox** utility system that allows
    you to create flexible and responsive layouts. With Flexbox, you can easily distribute
    and align elements within a container, making it an excellent tool for building
    modern and dynamic user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a flex container
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create a Flexbox layout, you need to designate a container element as a
    flex container. By applying the `flex` class to the container, you enable the
    Flexbox behavior, allowing child elements to be flex items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code example, the `flex` class is applied to the container
    element, which makes it a flex container. The child elements inside the container
    automatically become flex items.
  prefs: []
  type: TYPE_NORMAL
- en: This is the base code for *Figure 6**.3*, which you will see later.
  prefs: []
  type: TYPE_NORMAL
- en: Applying flex direction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Flexbox also provides four main directions to arrange flex items within a flex
    container: `row`, `row-reverse`, `column`, and `column-reverse`. The direction
    is determined by applying one of the following classes to the flex container:'
  prefs: []
  type: TYPE_NORMAL
- en: '`flex-row`: Items are laid out in a row, from left to right'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flex-row-reverse`: Items are laid out in a row, from right to left'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flex-column`: Items are laid out in a column, from top to bottom'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flex-column-reverse`: Items are laid out in a column, from bottom to top'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is an example of how we create a flex container with different layouts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – PrimeFlex Flexbox example](img/B18805_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – PrimeFlex Flexbox example
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we harness the power of Flexbox by effortlessly creating diverse
    layouts in either rows or columns simply by applying different classes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about Flexbox and how to debug it, you can visit [https://developer.chrome.com/docs/devtools/css/flexbox/](https://developer.chrome.com/docs/devtools/css/flexbox/).
    It’s a helpful resource that provides insights and guidance on understanding Flexbox
    and troubleshooting any issues you may encounter.
  prefs: []
  type: TYPE_NORMAL
- en: Using flex wrap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, flex items will try to fit within a single line. However, if there
    is insufficient space, the flex items will shrink to accommodate. To control the
    wrapping behavior of flex items, you can use the following classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`flex-wrap`: Items wrap onto multiple lines if necessary'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flex-wrap-reverse`: Items wrap onto multiple lines if necessary, in reverse
    order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flex-nowrap`: Items remain on a single line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s apply wrap functionality to our flex container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the flex container has the `flex-wrap` class applied, allowing
    the flex items to wrap onto multiple lines if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Using justify content
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Flexbox provides powerful alignment options to position flex items along the
    main and cross axes. PrimeFlex offers a variety of classes to control alignment:'
  prefs: []
  type: TYPE_NORMAL
- en: '`justify-content-end`: This aligns the flex items to the end of the flex container
    along the main axis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`justify-content-center`: This centers the flex items along the main axis of
    the flex container'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`justify-content-between`: This distributes the flex items along the main axis
    with equal space between them'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`justify-content-around`: This distributes the flex items along the main axis
    with equal space around them'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`justify-content-evenly`: This distributes the flex items along the main axis
    with equal space between them, including before the first item and after the last
    item'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These alignment classes can be applied to the flex container or individual
    flex items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this preceding example, the flex container has the `justify-content-evenly`
    class applied, which distributes the flex items evenly with equal space around
    them. The `flex-wrap` class allows items to wrap onto multiple lines if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Taking all of the Flexbox code into consideration, let’s have a look at the
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Flexbox example](img/B18805_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Flexbox example
  prefs: []
  type: TYPE_NORMAL
- en: You see the element is a flex container with flex items that wrap onto multiple
    lines if needed. The flex items are evenly distributed along the main axis with
    equal spacing between them and at the beginning and end of the container.
  prefs: []
  type: TYPE_NORMAL
- en: Using the grid system in PrimeFlex
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The grid system in PrimeFlex is another powerful feature for building complex
    layouts, providing a simple, intuitive syntax for building grids and arranging
    elements on the page.
  prefs: []
  type: TYPE_NORMAL
- en: The **PrimeFlex grid** follows a 12-column structure. Each row consists of a
    container, which contains one or more columns. The columns within a row automatically
    adjust their width based on the available space.
  prefs: []
  type: TYPE_NORMAL
- en: To create a grid layout, you need to wrap your content in a container element
    with the `grid` class. Inside the container, you can define columns using the
    `col` class. The columns are specified by adding the `col-{size}` class, where
    `{size}` represents the number of columns the element should span.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a basic grid structure with two columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we have a grid container with two columns. Each column spans
    six columns, resulting in two equal-width columns. Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – PrimeFlex grid example](img/B18805_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – PrimeFlex grid example
  prefs: []
  type: TYPE_NORMAL
- en: 'The PrimeFlex grid also provides responsive classes that allow you to create
    different layouts for different screen sizes. You can specify different column
    sizes based on screen breakpoints using the following syntaxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sm`: Small screens (576px and above)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`md`: Medium screens (768px and above)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lg`: Large screens (992px and above)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xl`: Extra-large screens (1200px and above)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s use breakpoints to create a responsive layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we have a grid container with two columns. Each column spans
    the full width by default on small screens (12 columns), half the width on medium
    screens (six columns), and one-third of the width on large screens (four columns).
  prefs: []
  type: TYPE_NORMAL
- en: PrimeFlex is a valuable tool for web developers, offering a streamlined approach
    to CSS styling. Its integration with PrimeNG enhances the development experience,
    providing a consistent and flexible design system. In the following section, we
    will be introduced to PrimeNG data display components.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing data display components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we all know, data is the lifeblood of any application, but raw data in itself
    is not very useful. It’s how we present this data to users that truly matters.
    That’s where data display components come into play. They are the tools that transform
    raw data into meaningful information, providing users with insights and enabling
    them to interact with the data.
  prefs: []
  type: TYPE_NORMAL
- en: PrimeNG offers a variety of data display components. These components are designed
    to present data in a clear, concise, and user-friendly manner. They include data
    tables, lists, cards, and much more. Each of these components has its strengths
    and use cases, and together, they provide a comprehensive toolkit for data display.
    Without these components, users would be left with raw data that is difficult
    to interpret and analyze. This could lead to errors, misunderstandings, and poor
    decision-making.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at the following PrimeNG data display components and when
    to use them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data tables**, for instance, are perfect for displaying large amounts of
    data in a structured format. They support features such as sorting, filtering,
    and pagination, making it easy for users to navigate and interact with the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lists**, on the other hand, are ideal for displaying a collection of items
    in a simple and straightforward manner. They are versatile and can be used for
    a wide range of use cases, from simple lists of text items to complex lists with
    custom layouts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cards** are another powerful tool for data display. They are a great way
    to present a collection of related information in a flexible and extensible format.
    Cards can contain any type of content, from text and images to buttons and links,
    and they can be arranged in various ways to create visually appealing layouts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following sections, we’ll dive deeper into these components, exploring
    how to use them in your Angular applications. We’ll provide code examples to illustrate
    their usage and discuss the various options and configurations available for each
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Remember, the key to effective data display is not just about choosing the right
    components, but also about using them in the right way. It’s about understanding
    the data, knowing what information is important to the users, and presenting it
    in a way that is easy to understand and interact with.
  prefs: []
  type: TYPE_NORMAL
- en: Working with data table components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Diving into the world of data display, we find ourselves surrounded by a myriad
    of components, each with its unique features and capabilities. Among these, PrimeNG
    tables stand out as a versatile and powerful tool that can transform raw data
    into meaningful, interactive, and visually appealing information.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use PrimeNG tables in your Angular project, you first need to import `TableModule`
    from PrimeNG. You can do this by adding the following `import` statement to your
    module file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This section will explore the various features and functionalities of PrimeNG
    tables, providing you with practical examples and insights to help you leverage
    their full potential in your applications. In the following examples, we will
    work with sample product data. Here is the interface of `Product`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: So, let’s jump into tables.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PrimeNG tables require a collection of data to display, along with column components
    that define how this data should be represented. Here’s a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-table>`: This is the PrimeNG table component, used to display tabular data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[value]="products"`: This attribute binding is binding the `products` property
    to the `value` attribute of the `p-table` component. It means that the `products`
    variable in the component’s code is the data source for the table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[tableStyle]="{ ''min-width'': ''50rem'' }"`: This attribute binding is binding
    an inline CSS style object to the `tableStyle` attribute of the `p-table` component.
    The provided style object sets the minimum width of the table to `50rem`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ng-template pTemplate="header">`: This is a template for the header row of
    the table. It defines the column titles. In this case, the table has four columns:
    `ID`, `Name`, `Category`, and `Quantity`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ng-template pTemplate="body" let-product>`: This is a template for the body
    of the table. It defines how each row of data should be displayed. The `let-product`
    syntax is used to create a local template variable product that holds the current
    product object for each row.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the body template, we have a `<tr>` element for each row, and `<td>`
    elements for each cell in the row. The `{{ product.id }}`, `{{ product.name }}`,
    `{{ product.category }}`, and `{{ product.quantity }}` expressions are used to
    bind the properties of the current product object to the cells.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After that, we will have a basic table, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Basic table](img/B18805_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Basic table
  prefs: []
  type: TYPE_NORMAL
- en: Table with dynamic columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Columns can be defined dynamically using the `*ngFor` directive. This is particularly
    useful when the structure of your data is not known in advance or can change dynamically.
    Here’s how you can do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `columns` attribute is bound to the `cols` array, which
    contains the definitions of the columns. Each column is an object with a `header`
    property (the column title) and a `field` property (the property of the data object
    to bind to). Since the table data is defined in the component, you can provide
    options for users to select which columns to display, reorder columns, or even
    dynamically add or remove columns from the table.
  prefs: []
  type: TYPE_NORMAL
- en: Table with sorting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sorting is a fundamental aspect of data presentation, allowing users to order
    data in a way that makes sense for their specific tasks. PrimeNG provides built-in
    functionality for sorting data in tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of how to enable sorting in a PrimeNG table component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `pSortableColumn` directive is used to specify the field
    by which the data should be sorted when the column header is clicked. The `p-sortIcon`
    component is used to display an icon indicating the sort order.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, clicking the column header once will sort the data in ascending
    order. Clicking it again will sort the data in descending order. Let’s take a
    look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Table with sorting](img/B18805_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Table with sorting
  prefs: []
  type: TYPE_NORMAL
- en: You can see that, in the screenshot, the table is sorted by price in ascending
    order after clicking on the **Price** header.
  prefs: []
  type: TYPE_NORMAL
- en: Table with filtering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Filtering is another powerful feature, allowing users to narrow down the data
    displayed in the table based on specific criteria. Again, PrimeNG provides built-in
    functionality for this.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable filtering for a column, you need to add some custom templates to
    the column definition in your table. Here’s an example of how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code is an example of a PrimeNG table with both column and global
    filtering capabilities. Let’s break it down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-table>` is a PrimeNG table component, used to display tabular data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[value]="products"` is an attribute binding, binding the `products` property
    to the `value` attribute of the `<p-table>` component. It means that the `products`
    variable in the component’s code is the data source for the table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `[globalFilterFields]="['name', 'price']"` attribute binding is binding
    an array of field names (`name` and `price`) to the `globalFilterFields` attribute
    of the `<p-table>` component. The `globalFilterFields` attribute allows you to
    specify the fields/columns on which you want to apply the global filter. In this
    case, the global filter will be applied to the `name` and `price` fields of the
    table.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#dt` is a template reference variable named `dt` that is assigned to the `<p-table>`
    component. Template reference variables allow you to reference the component in
    the template code and access its properties and methods if needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<ng-template pTemplate="caption">` template contains a button for clearing
    all filters and an input field for global search. The `dt.clear()` method is called
    when the button is clicked to clear all filters. The `dt.filterGlobal()` method
    is called when the user types in the global search input field to filter all rows
    based on the input value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<ng-template pTemplate="header">` template contains input fields for each
    column. The `dt.filter()` method is called when the user types in these input
    fields to filter the rows based on the input value for the corresponding column.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<ng-template pTemplate="body" let-product>` template defines how each row
    of data should be displayed. The `let-product` syntax is used to create a local
    template `product` variable that holds the current product object for each row.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<ng-template pTemplate="emptymessage">` template is displayed when there
    are no rows to display, either because the `products` array is empty or because
    no rows match the current filters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s take a look at the final result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Table with filtering](img/B18805_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Table with filtering
  prefs: []
  type: TYPE_NORMAL
- en: For example, the user can filter the rows by typing in the input fields in the
    column headers or the global search input field. The user can also clear all filters
    by clicking the **Clear** button.
  prefs: []
  type: TYPE_NORMAL
- en: Table with a paginator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When dealing with large datasets, displaying all the data at once can be overwhelming
    and impractical. **Pagination** is a common solution to this problem, allowing
    users to view a subset of the data at a time. PrimeNG’s table component comes
    with a built-in paginator that makes implementing this functionality a breeze.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable pagination in a PrimeNG table, you simply need to set the `paginator`
    attribute to `true` and define the `rows` attribute to specify the number of rows
    per page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s go through each attribute and its purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[value]="products"`: This binds the value of the table to a variable called
    `products`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[paginator]="true"`: This enables pagination for the table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[rowsPerPageOptions]="[5,10,20]"`: This defines the options for the number
    of rows to display per page. In this case, the options are set to `5`, `10`, and
    `20`. The user can select one of these options to control the number of rows displayed
    in the table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[rows]="10"`: This sets the number of rows to display per page. In this case,
    it is set to `10`. This means that each page of the table will display up to 10
    rows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s take a look at the table with the paginator feature enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Table with paginator](img/B18805_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – Table with paginator
  prefs: []
  type: TYPE_NORMAL
- en: This screenshot showcases the availability of an option to choose the desired
    number of rows to be displayed, with a default value set to `10`. Additionally,
    the paginator feature allows seamless navigation between different pages.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, PrimeNG’s table component offers a robust and flexible solution
    for displaying tabular data. With features such as sorting, filtering, and pagination,
    it provides developers with the tools needed to present data in an organized and
    interactive manner.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the table component and explore additional features, such
    as scalable columns, frozen columns, and scrollable tables, you can visit the
    PrimeNG documentation at [https://primeng.org/table](https://primeng.org/table).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we’ll explore another essential aspect of data presentation in web applications:
    PrimeNG’s list components, which offer a diverse set of tools for displaying and
    interacting with lists of data.'
  prefs: []
  type: TYPE_NORMAL
- en: Working with list components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PrimeNG offers a variety of list components that cater to different needs and
    use cases. These components are designed to transform raw data into meaningful
    lists, providing users with an intuitive way to interact with the information.
  prefs: []
  type: TYPE_NORMAL
- en: 'PrimeNG’s list components include several key elements that can be used to
    create diverse list presentations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DataView`: This element offers grid and list views for displaying data, with
    sorting and filtering options'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OrderList`: This element allows users to reorder items within a list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PickList`: This element enables users to pick items from one list and move
    them to another'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These components are not just about displaying data; they also provide features
    such as sorting, filtering, and selection, enhancing the user’s ability to interact
    with the data. Let’s take a look at each of them in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: DataView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`DataView` is a versatile component that is particularly useful when you need
    to present a large amount of data in a structured way. It offers various features,
    such as pagination, sorting, and customizable templates, making it an excellent
    choice for building data-driven applications.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some scenarios where you might consider using the PrimeNG `DataView`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DataView` component can help you achieve this efficiently'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataView` component can be used to display the results in a grid or list format
    with pagination and sorting options'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataView` can be used to present the data in each widget consistently, providing
    a cohesive user experience'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following subsections, let’s consider an example where we have a collection
    of products that we want to display using the `DataView` component. Each product
    has properties such as name, category, and price. We’ll showcase the products
    in a list layout, allowing users to browse through them and add items to their
    shopping cart.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic data view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Prior to utilizing the `DataView` component, it is important to ensure that
    PrimeFlex is installed within your application. This is necessary because `DataView`
    relies on the `Grid` functionality provided by PrimeFlex to effectively organize
    and present data. For detailed instructions on installing PrimeFlex, please refer
    to the previous section within this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we need to import the necessary modules from the PrimeNG library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have the dependencies installed and imported, we can use the `DataView`
    component in our Angular template. Here’s an example of how we can display the
    products in a list layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the code breakdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-dataView>`: This is the Angular component from the PrimeNG library used
    to display data in a view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[value]="products"`: This attribute binding is binding the `products` property
    to the `value` attribute of the `<p-dataView>` component. It means that the `products`
    variable in the component’s code is the data source for the data view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ng-template pTemplate="list" let-products>`: This template renders each item
    in the data view. The `pTemplate` attribute with a value of `"list"` indicates
    that this template is for the list items. The `let-products` attribute declares
    a local variable named `products` that represents the `products` array in the
    data view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As a result, we created a product list with three items:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Basic data view](img/B18805_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Basic data view
  prefs: []
  type: TYPE_NORMAL
- en: DataView with pagination
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have a large number of products and want to display them on multiple
    pages, you can enable pagination in the `DataView` component. Here’s an example
    of how to enable pagination with a specific number of rows per page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Here, we set the `rows` property to `4`, indicating that we want to display
    four products per page. By setting the `paginator` property to `true`, the `DataView`
    component automatically adds pagination controls, allowing users to navigate through
    the pages.
  prefs: []
  type: TYPE_NORMAL
- en: DataView with sorting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `DataView` component also provides built-in sorting functionality, allowing
    users to sort the data based on specific criteria. Here’s an example of how to
    enable sorting and add a dropdown to select the sorting option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code to understand its functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[value]="products"`: This binds the `products` array from the parent component
    to the `DataView` component, which will be the data source for the items displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[rows]="4"`: This sets the number of rows to display per page if pagination
    is enabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[paginator]="true"`: This enables pagination for the `DataView` component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[sortField]="sortField"` and `[sortOrder]="sortOrder"`: These attributes are
    used to control the sorting of the data; `sortField` specifies the field by which
    the data should be sorted, and `sortOrder` specifies the order (ascending or descending).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<p-dropdown ... />`: This line creates a dropdown with options defined in
    the `sortOptions` array. When the user selects an option, the `onSortChange` method
    is called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sortOptions`: This array defines the sorting options available in the dropdown.
    The `value` field contains a string that represents the sorting criteria. If the
    value starts with a `!`, it indicates descending order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onSortChange(event: HTMLInputElement)`: This method is called when the user
    selects a sorting option from the dropdown. It parses the selected value and sets
    the `sortOrder` and `sortField` properties accordingly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By using these properties and templates, you can enable sorting in the `DataView`
    component and provide a seamless sorting experience to users. In the following
    screenshot, you can see that we built a product list showing four items at a time
    and sorted by **Price Low** **to High**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Data view with sorting and pagination](img/B18805_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Data view with sorting and pagination
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have witnessed the impressive capabilities of PrimeNG’s `DataView`
    in providing adaptable data presentations. Now, let’s explore PrimeNG’s `OrderList`,
    a specialized component that brings a unique touch to list management.
  prefs: []
  type: TYPE_NORMAL
- en: OrderList
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When interacting with a collection of items, there are times when the order
    of these items matters. This is where PrimeNG’s `OrderList` comes into play. The
    `OrderList` component is a powerful tool that allows you to manage and sort a
    collection of items in your Angular applications. It’s like having a personal
    assistant to help you organize your data.
  prefs: []
  type: TYPE_NORMAL
- en: '`OrderList` is especially useful when you need to provide a way for users to
    manually sort a list of items, such as prioritizing tasks in a to-do list, rearranging
    chapters in a book, managing playlists, categorizing products, or sorting photos
    in an album.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic order list
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s dive into an example to see how the `OrderList` component can be used
    in an application. We’ll create a list of products that can be reordered by the
    user.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `OrderList` component utilizes `DragDropModule` from the Angular CDK to
    handle drag and drop actions. It is important to ensure that the `@angular/cdk`
    package is installed. If not, we need to add it to our `package.json` file by
    using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `@angular/cdk` (Component Dev Kit or CDK) library is provided by the Angular
    team and offers a collection of reusable components, directives, and utility functions
    to simplify the development of Angular applications. The CDK provides a set of
    tools and building blocks that assist in creating consistent, accessible, and
    responsive user interfaces. You can learn more about the CDK at [https://material.angular.io/cdk](https://material.angular.io/cdk).
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we also need to import `OrderListModule` from PrimeNG to our component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have the dependencies installed and imported, we can use the `OrderList`
    component in our Angular template. Here’s an example of how we can display the
    products in an order list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the breakdown of the example code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[value]="products"`: This binds our list of products to the `value` property
    of the `OrderList`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`header="Products"`: This is used to set a title for the list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[listStyle]="{ ''max-height'': ''30rem'' }"`: This sets the maximum height
    of the list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ng-template let-product pTemplate="item">`: This customizes how each item
    in the list is displayed. We can access the current product using the `let-product`
    syntax.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, in the following screenshot, you’ll notice that the product list is labeled
    as **Products**. Additionally, you have the ability to select a product and reposition
    it within the list using the arrow buttons located in the left panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Basic order list](img/B18805_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – Basic order list
  prefs: []
  type: TYPE_NORMAL
- en: OrderList with filtering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `OrderList` component also supports filtering and search functionality,
    allowing users to quickly find specific items within the source list. To enable
    filtering, we can use the `filterBy` and `filterPlaceholder` properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we set the `filterBy` property to `name` to filter the products
    based on the product name, and the `filterPlaceholder` property specifies the
    placeholder text for the search input field. Here is the final result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Order list with filtering](img/B18805_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – Order list with filtering
  prefs: []
  type: TYPE_NORMAL
- en: As seen in the screenshot, we can filter and search for **Product 22** by typing
    the name or the product in the search box.
  prefs: []
  type: TYPE_NORMAL
- en: OrderList with drag and drop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `OrderList` component allows users to reorder items using drag and drop
    gestures. By default, the drag and drop feature is disabled. To enable it, we
    can use the `[``dragdrop]` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Enabling drag and drop allows users to click and hold on to an item, drag it
    to a new position in the target list, and drop it to reorder the items. This feature
    provides a visually interactive way for users to rearrange items according to
    their preferences.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve discovered the dynamic capabilities of PrimeNG’s `OrderList`, enhancing
    list interactions in our applications. Now, let’s shift our focus to PrimeNG’s
    `PickList`, a dual-list interface that promises even more interactivity and versatility.
  prefs: []
  type: TYPE_NORMAL
- en: PickList
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PrimeNG `PickList` component is a powerful tool that allows developers to
    create interactive and customizable lists for reordering items between different
    lists. It provides a user-friendly interface for managing and manipulating data
    in a drag and drop manner. Whether you need to implement a multi-select feature,
    build a task management system, or create a custom form builder, the `PickList`
    component offers the flexibility and functionality to meet your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be beneficial in the following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PickList` component can be used to display a list of available tasks in the
    source list and a list of assigned tasks in the target list. Users can easily
    move tasks between the lists based on their assignment status.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PickList` component can assist in organizing the form elements. You can display
    all available fields in the source list and move selected fields to the target
    list to define the form structure. This provides a convenient way to dynamically
    generate forms based on user preferences.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PickList` component can facilitate this process by allowing users to move
    selected products to the target list, which represents their customized catalog.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By leveraging the `PickList` component, you can enhance the user experience,
    improve data organization, and enable efficient data manipulation within your
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s consider an example where we have a list of products, and we want to
    allow users to add selected products to their cart using the PrimeNG `PickList`
    component. To get started, we need to import the necessary modules from the PrimeNG
    library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have the dependencies installed and imported, we can use the `PickList`
    component in our Angular template. Here’s an example of how we can display the
    products in a pick-list layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we pass the `products` and `selectedProducts` arrays to the
    `source` and `target` properties of the `PickList` component, respectively. We
    also provide labels for the source and target lists using the `sourceHeader` and
    `targetHeader` properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at the final result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14 – Sample pick list](img/B18805_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – Sample pick list
  prefs: []
  type: TYPE_NORMAL
- en: When you run the application, you should see two lists rendered side by side.
    The left list represents the available products, and the right list represents
    the selected products. Users can select products from the source list and move
    them to the target list by using the drag and drop functionality provided by the
    `PickList` component.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, PrimeNG’s list components are a powerful set of tools for displaying
    and interacting with lists of data in Angular applications. With their flexibility,
    customization options, and integration with Angular, they provide developers with
    everything needed to create engaging and functional list presentations. Whether
    you need simple lists or more complex interactions such as reordering and selection,
    PrimeNG’s list components offer a robust solution that can enhance any application’s
    user interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next section, we will go through the final component of this chapter:
    the PrimeNG Card component.'
  prefs: []
  type: TYPE_NORMAL
- en: Working with card components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A PrimeNG card is a container component that provides a flexible and extensible
    content container with multiple variants and options. It’s essentially a rectangular
    box that holds content and actions about a single subject. Think of it as a small
    container that groups together specific information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cards are incredibly versatile and can be used in various scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Product listings**: Cards can be used for displaying products in an online
    store where each card represents a product with an image, title, price, and description'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User profiles**: On social media platforms, cards can represent user profiles,
    showcasing an image, name, and other personal details'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blog posts**: For blog listings, each card might display a post’s featured
    image, title, and a brief summary'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of cards can make content more digestible, breaking information into
    chunks that are easier to understand at a glance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s dive into a practical example. Imagine you’re building an online store
    and want to display a list of products using the PrimeNG `Card` component. To
    get started, we need to import the necessary modules from the PrimeNG library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we add the PrimeNG `Card` component for creating a product list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This code demonstrates the usage of the PrimeNG `Card` component in an Angular
    template. Let’s break down the code and explain each part:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<p-card>`: This is the start of the PrimeNG `Card` component, which represents
    a single card element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*ngFor="let product of products"`: This is an Angular structural directive
    called `ngFor`, used to iterate over an array of products and generate a card
    for each product'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[header]="product.name"`: This binds the `product.name` property to the header
    input of the `Card` component, which sets the header text of the card'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[style]="{ width: ''300px'' }"`: This binds an inline CSS style to the style
    input of the `Card` component, setting the width of the card to 300 pixels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s take a look at the final result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Card example](img/B18805_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – Card example
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we’re iterating over a list of products and creating a card
    for each one. Each card displays the product’s image, description, price, and
    an **Add to** **Cart** button.
  prefs: []
  type: TYPE_NORMAL
- en: We have recently learned about the flexibility and design features of PrimeNG’s
    card component, which has greatly improved our ability to create visually appealing
    user interfaces. Now, it’s important for us to review and solidify our understanding.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ve delved into data display components in PrimeNG. We started
    by understanding the role of these components in transforming raw data into meaningful,
    user-friendly information, and saw how PrimeNG’s rich set of data display components,
    such as tables, lists, and cards, can be used to present data effectively in Angular
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: The knowledge gained in this chapter is crucial because effective data presentation
    is a key aspect of building user-friendly applications. By using PrimeNG’s data
    display components, we can create applications that not only look good but also
    provide a seamless user experience.
  prefs: []
  type: TYPE_NORMAL
- en: But our journey doesn’t end here. Looking ahead to the next chapter, we’ll dive
    into other PrimeNG data display components. We’ll learn how to use components
    such as `Tree`, `Scroller`, `Timeline`, and `VirtualScroller` to show data in
    our Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s keep the momentum going. We’ve made great strides in understanding
    and using PrimeNG’s data display components. Now, it’s time to take the next step
    and explore data manipulation components. Onward to the next chapter!
  prefs: []
  type: TYPE_NORMAL
