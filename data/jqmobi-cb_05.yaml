- en: Chapter 5. Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章。表单
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: Native styling of form controls
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单控件的原生样式
- en: Disabling text controls
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用文本控件
- en: Grouping radio buttons in a grid
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网格中分组单选按钮
- en: Customizing a checkbox group
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义复选框组
- en: Creating dynamic flip switch and slider controls
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建动态翻转开关和滑块控件
- en: Using options to auto-initialize a select menu
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用选项来自动初始化选择菜单
- en: Validating forms
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证表单
- en: Submitting a form using POST
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 POST 提交表单
- en: Fetching data using GET
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GET 获取数据
- en: Creating an accessible form
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个可访问的表单
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The standard HTML form element is enhanced by jQuery Mobile framework to make
    it touch friendly and also to make it work across multiple devices and platforms.
    The form can contain multiple controls and you can group these controls using
    a `fieldset` with `data-role='controlgroup'` attribute set on it. By default,
    the controls are listed vertically. You can use the `data-type='horizontal'` attribute
    to line them horizontally. Forms support the **HTTP GET**, **POST**, and other
    actions. Ajax is used wherever possible for form submissions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile 框架默认增强标准 HTML 表单元素，使其触摸友好，同时在多个设备和平台上运行。表单可以包含多个控件，而你可以使用在其上设置
    `data-role='controlgroup'` 的 `fieldset` 来对这些控件进行分组。默认情况下，控件以垂直方式列出。你可以使用 `data-type='horizontal'`
    属性将它们水平排列。表单支持 **HTTP GET** ，**POST** 和其他操作。在适当的情况下，使用 Ajax 进行表单提交。
- en: Native styling of form controls
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单控件的原生样式
- en: The jQuery Mobile framework enhances the form and its controls by default. This
    recipe shows you the different ways you can set native styling for your form controls
    and also how to auto-initialize these controls.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile 框架默认增强表单及其控件。这个配方向你展示了设置表单控件原生样式的不同方法，以及如何自动初始化这些控件。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/05/native-style` sources folder.
    This code can be launched using the URL `http://localhost:8080/05/native-style/main.html`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `code/05/native-style` 源文件夹中复制此配方的全部代码。可以使用 URL `http://localhost:8080/05/native-style/main.html`
    启动此代码。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行...
- en: 'In `main.html`, add the following script to the `<head>` section to natively
    style all buttons:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<head>` 部分中，向 `main.html` 添加以下脚本以使所有按钮以原生样式呈现：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add a form to the page content to set native styles on the controls:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面内容中添加一个表单，以设置控件的原生样式：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In `main.html`, add an event handler for the `mobileinit` event that gets triggered
    at the start of the app. Here set the `keepNative` property of the page plugin
    to `'button'`. Now the framework will not enhance the button controls but will
    style them natively. Now add `button1` to the form and it will be styled natively.
    To override this native styling, add `button2` and set the attribute `data-role='button'`.
    Similarly, add `button3` and call the `buttonMarkup()` method on it using the
    script as shown in the previous code. Both `button2` and `button3` now get enhanced
    by overriding the default native styling.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，添加一个事件处理程序，处理应用程序启动时触发的 `mobileinit` 事件。在这里，将页面插件的 `keepNative`
    属性设置为 `'button'`。现在，框架将不会增强按钮控件，而是以原生样式呈现它们。现在在表单中添加 `button1` ，它将以原生样式呈现。要覆盖这种原生样式，添加
    `button2` 并设置属性 `data-role='button'`。类似地，添加 `button3` 并在脚本中调用 `buttonMarkup（）`
    方法，如前面的代码中所示。现在，`button2` 和 `button3` 都通过覆盖默认的原生样式来进行增强。
- en: '![How it works...](img/7225_05_1.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_05_1.jpg)'
- en: The framework enhances all other controls by default. Add an input button `input1`
    and you will see that it is enhanced. To natively style controls, you can use
    the `data-role='none'` attribute as shown in the previous code for the input control
    `input2`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 框架默认增强所有其他控件。添加一个输入按钮 `input1`，你会看到它已被增强。要使用原生样式控件，可以像上面代码中显示的那样使用 `data-role='none'`
    属性来设置输入控件 `input2`。
- en: For anchor links, the native style is used by default. You can enhance an anchor
    link by using the `data-role='button'` attribute on it. The form created is shown
    above.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于锚链接，默认情况下使用原生样式。你可以用 `data-role='button'` 属性来增强锚链接。创建的表单如上所示。
- en: There's more...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As already mentioned, form controls are enhanced by the framework to make it
    finger friendly across all platforms. But these controls may seem to be slightly
    bigger to be used in other small containers (like toolbars). You can use the **mini
    version** of the controls by setting the `data-mini = 'true'` attribute on the
    control. The control is now slightly smaller in size but still finger friendly.
    You can directly set this attribute on a `controlgroup` and all child elements
    will automatically be minified. Visit jQuery Mobile online docs to see a comparison
    of various controls at [http://jquerymobile.com/test/docs/forms/forms-all-compare.html](http://jquerymobile.com/test/docs/forms/forms-all-compare.html).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，框架会增强表单控件，使其在所有平台上都能轻松使用手指操作。但这些控件可能在其他小容器（如工具栏）中使用时会显得稍大。您可以通过在控件上设置`data-mini='true'`属性，使用控件的**迷你版本**。控件现在变小了一点，但仍然是手指友好的。您可以直接在`controlgroup`上设置此属性，所有子元素将自动缩小。访问jQuery
    Mobile在线文档，查看各种控件的比较：[http://jquerymobile.com/test/docs/forms/forms-all-compare.html](http://jquerymobile.com/test/docs/forms/forms-all-compare.html)。
- en: Setting multiple controls to use native style
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置多个控件使用原生样式
- en: 'You can specify multiple controls to be styled natively by the **page plugin**
    . The following line of code natively styles all the buttons, input controls,
    and select menus in the form:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用**页面插件**指定多个控件以使用原生样式。下面一行代码会原生样式化表单中的所有按钮、输入控件和选择菜单：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The data-role='none' attribute
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`data-role=''none''`属性'
- en: Based on the control type, the framework initializes and enhances a control
    by using its corresponding plugin. When `data-role='none'` is specified, the control
    is not enhanced by the framework and the control gets styled natively. Any action
    like setting the theme on the control by using the `data-theme` attribute is ignored.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 根据控件类型，框架通过使用相应的插件来初始化和增强控件。当指定`data-role='none'`时，控件不会被框架增强，并且控件会使用原生样式。使用`data-theme`属性设置控件主题等操作将被忽略。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The enhanced styles provided by jQuery Mobile are tap and touch friendly and
    ideal for mobile devices. Avoid native styling in your apps as far as possible.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile提供的增强样式是轻触友好的，非常适合移动设备。尽量避免在应用程序中使用原生样式。
- en: Disabling text controls
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 禁用文本控件
- en: This recipe shows you the different ways to enable and disable text controls
    in a form.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此教程向您展示了在表单中启用和禁用文本控件的不同方法。
- en: Getting ready
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Copy the full code of this recipe from the `code/05/text-controls` sources folder.
    This code can be launched using the URL `http://localhost:8080/05/text-controls/main.html`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/05/text-controls`源文件夹中复制此教程的全部代码。可以使用URL `http://localhost:8080/05/text-controls/main.html`启动此代码。
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In `main.html`, create the following text controls in a form:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.html`中，在表单中创建以下文本控件：
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following script to the `<head>` section to disable all controls:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本添加到`<head>`部分以禁用所有控件：
- en: '[PRE4]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then handle the `change` event of the search text control to enable all the
    form controls:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后处理搜索文本控件的`change`事件来启用所有表单控件：
- en: '[PRE5]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它的运作方式...
- en: 'In `main.html`, add a search control with input `type=''search''` and add a
    text with input `type=''text''`.Now, add an empty `textarea` as shown in the previous
    code. Add a link and disable it by setting the attribute `class=''ui-disabled''`.
    In the script, add a `pageinit` event handler that gets invoked after the page
    has been initialized. Here, disable the text input by calling the `prop(''disabled'',
    true)` method to set its `disabled` property. Next, disable the `textarea` by
    calling the disable method on the **textinput plugin** with the `textinput(''disable'')`
    call. Now when the app is loaded, all the controls other than the search input
    are disabled on the form, as shown in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.html`中，添加一个带有`type='search'`的搜索控件，并添加一个带有`type='text'`的文本。现在，按照上面的代码添加一个空的`textarea`。添加一个链接并通过设置`class='ui-disabled'`属性来禁用它。在脚本中，添加一个`pageinit`事件处理程序，在页面初始化后调用。在这里，通过调用`prop('disabled',
    true)`方法来设置其`disabled`属性来禁用文本输入。然后通过调用**textinput插件**的`textinput('disable')`方法来禁用`textarea`。现在，当应用程序加载时，除搜索输入外，表单上的所有控件都被禁用，如下面的屏幕截图所示：
- en: '![How it works...](img/7225_05_2.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![它的运作方式...](img/7225_05_2.jpg)'
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You cannot use the `disabled` attribute on an anchor link which has been enhanced
    to a button using `data-role='button'`. This attribute is ignored.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您不能在使用`data-role='button'`将增强为按钮的锚链接上使用`disabled`属性。此属性会被忽略。
- en: 'Now to enable the controls, bind the `change` event of the search control to
    an event handler. Here, enable the `textitem` control by calling the `prop(''disabled'',
    false)` method. Next, call the `textinput(''enable'')` method on the `textarea`
    to invoke the enable method on its **textinput plugin**. Call the `append()` method
    on the `textarea` to add text to it. Finally, call the jQuery `removeClass()`
    method on the anchor link to remove the ''`ui-disabled''` class. Now as soon as
    you type something in the search field, the form controls are all enabled, as
    seen in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了启用控件，将搜索控件的 `change` 事件绑定到事件处理程序上。在这里，通过调用 `prop('disabled', false)` 方法来启用
    `textitem` 控件。接下来，在 `textarea` 上调用 `textinput('enable')` 方法来调用其 **textinput 插件**
    上的 enable 方法。在 `textarea` 上调用 `append()` 方法以向其添加文本。最后，在锚链接上调用 jQuery `removeClass()`
    方法来移除 '`ui-disabled'` 类。现在，一旦您在搜索字段中输入内容，表单控件都会被启用，如下图所示：
- en: '![How it works...](img/7225_05_3.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_05_3.jpg)'
- en: There's more...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'You can also enable or disable a control by adding the `disabled` attribute
    to the control using the `attr()` and `removeAttr()` jQuery methods, as shown
    in the following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过使用 `attr()` 和 `removeAttr()` jQuery 方法将 `disabled` 属性添加到控件来启用或禁用控件，如下所示：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Auto-initialization of text controls
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本控件的自动初始化
- en: The textarea and text input controls (input `type='text'`) are automatically
    enhanced by the framework. You can also theme a text control by using the `data-theme`
    attribute.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 文本区域和文本输入控件（`input type='text'`）会自动由框架增强。您还可以使用 `data-theme` 属性为文本控件设置主题。
- en: Grouping radio buttons in a grid
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将单选按钮分组到网格中
- en: The jQuery Mobile framework allows you to create radio buttons grouped either
    horizontally or vertically. This recipe shows you how to group radio controls
    in a 3 x 3 grid in a simple seat reservation form.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile 框架允许您在水平或垂直方向上分组单选按钮。本示例向您展示如何在简单的座位预订表单中将单选控件分组为 3 x 3 网格。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/05/radiobutton-grid` sources
    folder. This code can be launched using the URL `http://localhost:8080/05/radiobutton-grid/main.html`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `code/05/radiobutton-grid` 源文件夹中复制此示例的完整代码。此代码可使用 URL `http://localhost:8080/05/radiobutton-grid/main.html`
    运行。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行...
- en: In `main.html`, create nine radio controls using a 3 x 3 layout grid. These
    radio buttons are part of the same control group.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，使用 3 x 3 布局网格创建九个单选控件。这些单选按钮是同一个控件组的一部分。
- en: '[PRE7]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following script to the `<head>` section to fix the styles of the edge
    radio buttons:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本添加到 `<head>` 部分以修复边缘单选按钮的样式：
- en: '[PRE8]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In `main.html`, add a horizontal radio control group by specifying `data-role='controlgroup'`
    and `data-type='horizontal'`. Now add the `ui-grid-a` class to this `fieldset`
    container to create a two column layout grid. For each row, add the legend in
    the first column by specifying `class='ui-block-a'` to the `div` container and
    add the radio buttons in the second column with `class='ui-block-b'`. Add nine
    radio buttons with appropriate labels as shown in the previous code, with each
    row containing three radio buttons. This will create a grid of 3 x 3 radio button
    group.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，通过指定 `data-role='controlgroup'` 和 `data-type='horizontal'` 来添加水平单选控件组。现在将
    `ui-grid-a` 类添加到此 `fieldset` 容器中，以创建两列布局网格。对于每一行，通过将 `class='ui-block-a'` 指定给
    `div` 容器，在第一列添加图例，并通过 `class='ui-block-b'` 在第二列添加单选按钮。根据上述代码，添加九个具有适当标签的单选按钮，每行包含三个单选按钮。这将创建一个
    3 x 3 单选按钮组的网格。
- en: 'In the previous code, you will find that the first and last radio buttons in
    the grid are styled properly but all other edge radio buttons (with labels l-13,
    l-21, l-23, and l-31) are not styled properly. They have rectangular edges instead
    of corners. To fix this, copy the style generated by the framework for the label
    of the very first radio button (`class=''ui-corner-left''`) to the inner `span`
    of the labels l-21 and l-31\. Likewise, copy the style generated by the framework
    for the label of the very last radio button (`class=''ui-corner-right ui-controlgroup-last''`)
    to the inner `span` of the labels l-13 and l-23\. The grid of radio buttons is
    now properly styled, as shown in the following screenshot, and you will be able
    to select only one radio button in the entire grid at a time:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，你会发现网格中的第一个和最后一个单选按钮样式正确，但所有其他边缘单选按钮（带有标签l-13、l-21、l-23和l-31）样式不正确。它们具有矩形边缘而不是圆角。为了解决这个问题，你需要将框架为第一个单选按钮的标签生成的样式（`class='ui-corner-left'`）复制到标签l-21和l-31的内部`span`中。同样地，将框架为最后一个单选按钮的标签生成的样式（`class='ui-corner-right
    ui-controlgroup-last'`）复制到标签l-13和l-23的内部`span`中。现在单选按钮网格的样式已经正确，如下截图所示，你现在可以一次仅选择整个网格中的一个单选按钮：
- en: '![How it works...](img/7225_05_4.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_05_4.jpg)'
- en: There's more...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: When the framework encounters an `input` control with `type='radio'`, it automatically
    enhances it to a styled radio button using the **checkboxradio plugin** . You
    can theme a radio button by using the `data-theme` attribute during initialization.
    You can turn auto-initialization off and use native styling by using the `data-role='none'`
    attribute.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当框架遇到一个带有`type='radio'`的`input`控件时，它会自动使用**checkboxradio插件**将其增强为样式化的单选按钮。你可以通过在初始化期间使用`data-theme`属性来为单选按钮设置主题。你可以通过使用`data-role='none'`属性来关闭自动初始化并使用原生样式。
- en: See also
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Customizing a checkbox group* recipe
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自定义复选框控件组* 示例'
- en: Customizing a checkbox group
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义复选框控件组
- en: The default horizontally grouped checkbox controls do not have an icon and the
    vertically grouped checkbox controls do not use the active state theme. This recipe
    shows you how to customize the checkbox and add these styles. It also shows you
    how to adjust the layout to handle varying screen sizes. You will create a simple
    **Blog Subscription** form in this recipe.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的水平分组复选框控件没有图标，垂直分组的复选框控件不使用活动状态主题。这个示例向你展示了如何自定义复选框并添加这些样式。它还向你展示了如何调整布局以处理不同的屏幕尺寸。在这个示例中，你将创建一个简单的**博客订阅**表单。
- en: Getting ready
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/05/custom-checkbox` sources
    folder. This code can be launched using the URL `http://localhost:8080/05/custom-checkbox/main.html`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/05/custom-checkbox`源文件夹中复制这个示例的全部代码。你可以使用`http://localhost:8080/05/custom-checkbox/main.html`网址来运行这段代码。
- en: How to do it...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: The form is first created with the horizontal and vertical group of checkbox
    controls. The horizontal checkbox controls are customized by adding icons to them
    in the `pageshow` event handler via JavaScript. The `change` event of the checkbox
    controls indicate whether a checkbox `checked` state was changed. The `change`
    event handler is used to add and toggle the active state of the checkbox.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个包含水平和垂直复选框控件组的表单。通过JavaScript在`pageshow`事件处理程序中向水平复选框控件添加图标来自定义水平复选框控件。复选框控件的`change`事件指示复选框`checked`状态是否已更改。使用`change`事件处理程序来添加和切换复选框的活动状态。
- en: 'In `main.html`, create a form with a vertical checkbox control group:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.html`中，创建一个带有垂直复选框控件组的表单：
- en: '[PRE9]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next add two horizontal toggle sets or checkbox groups:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来添加两个水平切换集或复选框组：
- en: '[PRE10]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the following script to the `<head>` section to add icons to the horizontal
    group:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本添加到`<head>`部分以向水平组添加图标：
- en: '[PRE11]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, bind the `change` event to handle the change in the `checked` state of
    the controls:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，绑定`change`事件来处理控件的`checked`状态变化：
- en: '[PRE12]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, toggle the active state based on the `checked` state of the vertical
    checkbox:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，根据垂直复选框的`checked`状态切换活动状态：
- en: '[PRE13]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In `main.html`, add three `fieldset` elements with `data-role='controlgroup'`
    to the **Blog Subscription** form. Add a vertical checkbox group to the first
    `fieldset` element with checkboxes for **Posts** and **Comments**. The second
    control group is a horizontal toggleset for selecting blog notifications (**Immediate**
    and **As a daily digest**). The third group of checkboxes are also horizontal
    with options to share in **Twitter** and **Facebook**.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.html`中，向**博客订阅**表单添加三个具有`data-role='controlgroup'`的`fieldset`元素。向第一个`fieldset`元素添加一个垂直复选框组，其中包含**文章**和**评论**的复选框。第二个控制组是用于选择博客通知的水平切换集合（**立即**和**作为每日摘要**）。第三组复选框也是水平的，选项包括在**Twitter**和**Facebook**上分享。
- en: By default, the horizontal togglesets do not have icons. You can customize this
    and add icons to them. Create an event handler for the `pageshow` event and add
    the required styles to the labels of the third horizontal toggleset. Add an inner
    span with `class='ui-icon ui-icon-shadow ui-icon-checkbox-off'` to the labels
    with `id='twitterlbl'` and `id='facebooklbl'`, and also add the `ui-btn-icon-left`
    class to the labels. This will add an icon on the left-hand side of the two checkboxes,
    similar to the icons available with the vertical checkbox controls. Compare this
    with the other horizontal toggelset.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，水平切换集合不带图标。你可以自定义并向其添加图标。为`pageshow`事件创建事件处理程序，并将所需的样式添加到第三个水平切换集合的标签中。在具有`id='twitterlbl'`和`id='facebooklbl'`的标签中添加具有`class='ui-icon
    ui-icon-shadow ui-icon-checkbox-off'`的内部 span，并且还将`ui-btn-icon-left`类添加到标签中。这将在两个复选框的左侧添加一个图标，类似于垂直复选框控件提供的图标。将其与其他水平切换集合进行比较。
- en: 'By default, the vertical checkboxes have icons and when selected these icons
    show the tick mark. The vertical checkboxes do not get the `btn-active` style
    (unlike the horizontal checkboxes). To add the active button style, create event
    handlers for the `change` event on the two vertical checkboxes (with `id=''posts''`
    and `id=''comments''`). For each of these checkboxes, use the `prop(''checked'')`
    call to find out whether the control is `checked` or not and then add or remove
    the `ui-btn-active` class to style the vertical checkbox, similar to the horizontal
    one. The screen is displayed as seen in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，垂直复选框具有图标，并且在选中时这些图标显示为勾号。垂直复选框不会获得`btn-active`样式（与水平复选框不同）。要添加活动按钮样式，请为两个垂直复选框（具有`id='posts'`和`id='comments'`）创建`change`事件的事件处理程序。对于这两个复选框，使用`prop('checked')`调用来查找控件是否被`checked`，然后添加或删除`ui-btn-active`类以为垂直复选框设置样式，类似于水平复选框。屏幕显示如下截图所示：
- en: '![How it works...](img/7225_05_5.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_05_5.jpg)'
- en: There's more...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'In the previous code, each checkbox group is wrapped in a container with the
    attribute `data-role=''fieldcontain''`. This attribute will cause the framework
    to dynamically adjust the layout of the controls and the position of their labels
    based on the screen size. A small horizontal separator line is also added to show
    the separation. On a wider screen or when landscape orientation is used, the display
    is as shown in the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，每个复选框组都包装在具有属性`data-role='fieldcontain'`的容器中。此属性将使框架根据屏幕大小动态调整控件的布局和其标签的位置。还添加了一个小的水平分隔线以显示分隔。在较宽的屏幕或使用横向方向时，显示如下截图所示：
- en: '![There''s more...](img/7225_05_6.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![更多内容...](img/7225_05_6.jpg)'
- en: Auto-initialization of checkbox controls
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复选框控件的自动初始化
- en: When the framework encounters an `input` control with `type='checkbox'`, it
    automatically enhances it to a styled checkbox using the **checkboxradio plugin**
    . You can theme a checkbox by using the `data-theme` attribute during initialization.
    You can turn auto-initialization off and use native styling by using the `data-role='none'`
    attribute.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当框架遇到具有`type='checkbox'`的`input`控件时，它会自动使用**checkboxradio插件**将其增强为样式化复选框。您可以在初始化期间使用`data-theme`属性为复选框设置主题。您可以通过使用`data-role='none'`属性关闭自动初始化并使用原生样式。
- en: See also
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Grouping radio buttons in a grid* recipe
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在网格中对单选按钮进行分组* 的方法'
- en: Creating dynamic flip switch and slider controls
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建动态翻转开关和滑块控件
- en: This recipe shows you how to add a **flip switch** and a **slider** control
    dynamically to a page using JavaScript and also handle their events. Here you
    will create a simple **Volume Control** form with a volume slider that warns the
    user when the volume is very high.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 本方法向您展示了如何使用JavaScript将**翻转开关**和**滑块**控件动态添加到页面，并处理其事件。在这里，您将创建一个简单的**音量控制**表单，其中包含一个音量滑块，在音量非常高时会向用户发出警告。
- en: Getting ready
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Copy the full code of this recipe from the `code/05/dynamic-slider` sources
    folder. This code can be launched using the URL `http://localhost:8080/05/dynamic-slider/main.html`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/05/dynamic-slider`源文件夹中复制这个配方的全部代码。可以使用URL `http://localhost:8080/05/dynamic-slider/main.html`启动这段代码。
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In `main.html`, add the following empty form to the page content:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.html`中，向页面内容添加以下空表单：
- en: '[PRE14]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following script to the `<head>` section to dynamically add a flip
    switch and a slider:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<head>`部分添加以下脚本，动态添加一个开关和一个滑块：
- en: '[PRE15]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Handle the `change` event of the flip switch to enable the volume slider control:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理翻转开关的`change`事件以启用音量滑块控件：
- en: '[PRE16]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Handle the `change` event on the volume slider to style the slider based on
    its value:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理音量滑块的`change`事件以根据其值设置滑块样式：
- en: '[PRE17]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Add an empty form `id=''volumeForm''` to `main.html`. Create an event handler
    for the `pageinit` event, which gets triggered after the page has been initialized.
    Here, generate the HTML content for the form. Add a flip toggle switch control
    (`id=''flipswitch''`) using a select control with `data-role=''slider''`. This
    flip switch will toggle the volume **On** and **Off**. Add an input control with
    `type=''range''` to create a slider control (`id=''volume''`). Add the `disabled`
    attribute to the slider so that the control is disabled at startup. Set this HTML
    content to the empty form and trigger the `''create''` method to let the framework
    initialize and enhance the controls. When the page loads you will see the **Volume
    Control** form with both the dynamically added flip switch and the disabled slider
    control, as shown in the following screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.html`中添加一个空表单`id='volumeForm'`。为`pageinit`事件创建一个事件处理程序，该事件在页面初始化后触发。在这里，生成表单的HTML内容。使用带有`data-role='slider'`的选择控件添加一个翻转开关控件（`id='flipswitch'`）。这个翻转开关将切换音量**On**和**Off**。添加一个带有`type='range'`的输入控件以创建滑块控件（`id='volume'`）。在启动时将`disabled`属性添加到滑块上，以便控件在启动时被禁用。将此HTML内容设置为空表单并触发`'create'`方法以让框架初始化和增强控件。当页面加载时，您将看到**音量控制**表单，其中包含动态添加的翻转开关和禁用的滑块控件，如下图所示：
- en: '![How it works...](img/7225_05_7.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_05_7.jpg)'
- en: 'Next add code to handle the `change` event of `#flipswitch` and in the event
    handler, check whether the flip switch is **on** or **off** using the `slider().val()`
    call. Based on this value, enable or disable the slider volume control by calling
    `slider(''enable'')` or `slider(''disable'')`. Now when you toggle the flip switch
    value, you will see the slider getting enabled or disabled as seen in the following
    screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来添加代码来处理`#flipswitch`的`change`事件，在事件处理程序中，使用`slider().val()`调用检查翻转开关是**on**还是**off**。根据这个值，通过调用`slider('enable')`或`slider('disable')`来启用或禁用滑块音量控制。现在当你切换翻转开关的值时，你会看到滑块在屏幕截图中启用或禁用，如下所示：
- en: '![How it works...](img/7225_05_8.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_05_8.jpg)'
- en: 'Bind the `change` event of the volume slider control in a `pageshow` event
    handler and here check for the value of the slider using the `slider().val()`
    call. If the value is greater than a threshold volume of **10**, set the slider
    to theme `''e''`, if not already styled so. If the value goes below the threshold
    of **10**, set the theme back to theme `''b''`. You can use the jQuery `find()`
    method and replace the `ui-btn-down-b` class with the `ui-btn-down-e` class and
    vice versa. Now when you set a high volume the slider changes to yellow color,
    as seen in the following screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pageshow`事件处理程序中绑定音量滑块控件的`change`事件，并在此处使用`slider().val()`调用检查滑块的值。如果值大于**10**的阈值音量，则将滑块设置为主题`'e'`，如果尚未设置样式，则设置。如果值低于**10**的阈值，则将主题设置回主题`'b'`。您可以使用jQuery的`find()`方法并将`ui-btn-down-b`类替换为`ui-btn-down-e`类，反之亦然。现在当您设置一个高音量时，滑块会变成黄色，如下图所示：
- en: '![How it works...](img/7225_05_9.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_05_9.jpg)'
- en: There's more...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can theme the flip switch and the slider control using the `data-theme`
    attribute and the slider track by using the `data-theme-track` attribute during
    initialization. To manipulate these controls post initialization, you will have
    to manipulate the underlying native controls and then invoke the `'refresh'` method
    on them.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`data-theme`属性为翻转开关和滑块控件设置主题，使用`data-theme-track`属性在初始化时使用滑块轨道。要在初始化后操作这些控件，您将不得不操作底层本机控件，然后在它们上调用`'refresh'`方法。
- en: Auto-initialization of sliders
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 滑块的自动初始化
- en: When the framework encounters an `input` control with `type='range'`, it automatically
    enhances it to a slider control using the **slider plugin** . Likewise the slider
    plugin enhances the select control with `data-role='slider'` to a flip switch.
    You can turn auto-initialization off and use native styling by using the `data-role='none'`
    attribute.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当框架遇到一个带有 `type='range'` 的 `input` 控件时，它会自动使用 **滑块插件** 将其增强为滑块控件。同样地，滑块插件会将带有
    `data-role='slider'` 的选择控件增强为翻转开关。你可以通过使用 `data-role='none'` 属性关闭自动初始化并使用原生样式。
- en: Using options to auto-initialize a select menu
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用选项自动初始化选择菜单
- en: The native HTML select menu is enhanced by the jQuery Mobile framework to make
    it finger friendly for mobile devices. This recipe shows you how to auto-initialize
    the **Select Menu** by setting its control options using JavaScript.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 原生 HTML 选择菜单被 jQuery Mobile 框架增强，使其对移动设备更加友好。本示例展示了如何通过 JavaScript 设置其控件选项以自动初始化
    **选择菜单**。
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/05/select-menu` sources folder.
    This code can be launched using the URL `http://localhost:8080/05/select-menu/main.html`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `code/05/select-menu` 源文件夹复制本示例的完整代码。可以使用 URL `http://localhost:8080/05/select-menu/main.html`
    启动此代码。
- en: How to do it...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎样做...
- en: 'In `main.html`, add the following code to create a select menu:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，添加以下代码以创建选择菜单：
- en: '[PRE18]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the following script to the `<head>` section to set the select menu control
    options:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本添加到 `<head>` 部分以设置选择菜单控件选项：
- en: '[PRE19]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作...
- en: In `main.html`, create a form and add a select control to the form with the
    attribute `multiple` to enable multiple selection. Set the attribute `data-native-menu='false'`
    to indicate that the select menu should be enhanced by the framework. Also set
    the `data-overlay-theme='e'` attribute to specify that swatch `e` (yellow) should
    be used for the layer on which the select menu is overlaid.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，创建一个表单，并向表单添加一个带有 `multiple` 属性的选择控件以启用多选。设置属性 `data-native-menu='false'`
    表示选择菜单应由框架增强。还设置 `data-overlay-theme='e'` 属性以指定应该使用 `e`（黄色）的样式覆盖层。
- en: Add the first option element with the `data-placeholder` attribute indicating
    that this option element text must be used as the header for the select menu.
    Now add the different option elements as shown in the previous code. The `opt1`
    and `opt2` elements are regular option items. The element `disableopt` is disabled
    by adding the attribute `disabled` to the option element. Then add two option
    groups (**Group1** and **GroupA**) by using the `optgroup` element as shown in
    the previous code. These can contain sub option elements. `The select menu is
    displayed as shown in the following screenshot:`
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 添加第一个带有 `data-placeholder` 属性的选项元素，表示此选项元素的文本必须用作选择菜单的标题。现在按照前面的代码所示添加不同的选项元素。`opt1`
    和 `opt2` 元素是常规选项项目。通过向选项元素添加 `disabled` 属性来禁用 `disableopt` 元素。然后使用 `optgroup`
    元素添加两个选项组（**Group1** 和 **GroupA**），如前面的代码所示。这些可以包含子选项元素。`选择菜单显示如下截图所示：`
- en: '`![How it works...](img/7225_05_10.jpg)`'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`![它是如何工作的...](img/7225_05_10.jpg)`'
- en: '`Add a script to the `pageinit` event handler that gets invoked after the page
    has initialized at startup. Here, set the initial configuration options of the
    select menu control by passing the option values to the **selectmenu plugin**.
    In the code, set the values of the attributes `theme`, `inline`, `corners`, `icon`,
    `iconpos`, `shadow`, and `iconshadow` of the select menu. Now when you click on
    select menu, the styled menu options are as shown in the following screenshot:`'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`在 `pageinit` 事件处理程序中添加脚本，该事件处理程序在启动时初始化页面后被调用。在这里，通过将选项值传递给 **selectmenu 插件**
    来设置选择菜单控件的初始配置选项。在代码中，设置选择菜单的 `theme`、`inline`、`corners`、`icon`、`iconpos`、`shadow`
    和 `iconshadow` 属性的值。现在当你点击选择菜单时，样式化的菜单选项如下截图所示：`'
- en: '`![How it works...](img/7225_05_11.jpg)`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`![它是如何工作的...](img/7225_05_11.jpg)`'
- en: '`There''s more...`'
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`更多内容...`'
- en: '`When the framework encounters a `select` element, it automatically enhances
    it to a select menu by using the **selectmenu plugin** . You can turn auto-initialization
    off and use native styling by using the `data-role=''none''` attribute.`'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当框架遇到一个 `select` 元素时，它会自动使用 **selectmenu 插件** 将其增强为选择菜单。你可以通过使用 `data-role='none'`
    属性关闭自动初始化并使用原生样式。
- en: '`Opening and closing a select menu`'
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`打开和关闭选择菜单`'
- en: '`You can call the `open` and `close` methods on the `selectmenu` plugin and
    programmatically open or close a select menu, as shown in the following screenshot:`'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`您可以调用`selectmenu`插件上的`open`和`close`方法，并以以下屏幕截图所示的方式以编程方式打开或关闭选择菜单：`'
- en: '[PRE20]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`# Validating forms'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`#验证表单'
- en: Validating a form before it is submitted to the server saves bandwidth and time
    as errors can be trapped at the client side itself. A server request can thus
    be avoided. In a jQuery Mobile application, forms can be validated using JavaScript.
    This recipe shows you how to validate the entries made in a **Blog Comments Form**
    .
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交到服务器之前验证表单可以节省带宽和时间，因为错误可以在客户端捕获。因此可以避免服务器请求。在jQuery Mobile应用程序中，可以使用JavaScript验证表单。此配方向您展示了如何验证**博客评论表单**中输入的条目。
- en: Getting ready
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Copy the full code of this recipe from the `code/05/validate-form` sources folder.
    This code can be launched using the URL `http://localhost:8080/05/validate-form/main.html`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/05/validate-form`源文件夹中复制此配方的完整代码。可以使用URL `http://localhost:8080/05/validate-form/main.html`启动此代码。
- en: How to do it...
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In `main.html`, add the following code to create a form:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.html`中，添加以下代码以创建一个表单：
- en: '[PRE21]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the following script to validate the comments field:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下脚本来验证评论字段：
- en: '[PRE22]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In `main.html`, add a form (`id='commentform'`) and add the following three
    fields to the form, **username** (`type='text'`), **email** (`type='email'`),
    and **comments** (`textarea`). Add the `required` attribute to all the three fields
    to specify them as mandatory. Add appropriate hints to the user by using the `placeholder`
    attribute as shown in the previous code. Add an empty div (`id='errmsg'`) to the
    form to display any error messages on form validation.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.html`中，添加一个表单（`id='commentform'`），并向表单添加以下三个字段，**用户名**（`type='text'`），**电子邮件**（`type='email'`）和**评论**（`textarea`）。对所有三个字段添加`required`属性以将它们指定为必填项。通过使用`placeholder`属性添加适当的提示给用户，如前述代码所示。向表单添加一个空的div（`id='errmsg'`）以在表单验证时显示任何错误消息。
- en: 'When you load the form and click on the **Submit Comment** button without entering
    the **Name** field, the following error message is shown:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当您加载表单并单击**提交评论**按钮而不输入**姓名**字段时，将显示以下错误消息：
- en: '![How it works...](img/7225_05_12.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_05_12.jpg)'
- en: 'The following error is shown when you click on the submit button without a
    valid **Email ID**:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 单击提交按钮而不输入有效的**电子邮件ID**时，将显示以下错误：
- en: '![How it works...](img/7225_05_13.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_05_13.jpg)'
- en: Add the `pageinit` event handler as shown in the previous script. This will
    get invoked after the page has been initialized at start-up. Here define the `submit()`
    method of the form to validate the length of the comments. If the comment has
    an invalid length, display the error message for five seconds after which it fades
    out. Now since there was an error, return `false` from the `submit` method; the
    form will not be submitted.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如上一个脚本中所示，添加`pageinit`事件处理程序。这将在页面在启动时被初始化后调用。在这里定义表单的`submit()`方法来验证评论的长度。如果评论长度无效，则在五秒后显示错误消息，然后淡出。现在因为有错误，所以从`submit`方法返回`false`；表单将不会被提交。
- en: '![How it works...](img/7225_05_14.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_05_14.jpg)'
- en: Post successful validation, return `true` from the `submit()` method to successfully
    submit the form to the server.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功验证后，从`submit()`方法返回`true`以成功将表单提交到服务器。
- en: There's more...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this recipe, the form's `action` is set to `#` or the same URL as the current
    HTML page. This form is called a **self-submitting form** . The default response
    in such cases is the form content itself. If the form was served by a web server,
    the response to the post can be custom generated. If you are using the nodejs
    web server that is shipped with the source code of this book, then you will get
    a custom success response instead of the form contents.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，表单的`action`设置为`#`或与当前HTML页面相同的URL。这种表单称为**自提交表单**。在这种情况下的默认响应是表单内容本身。如果表单由Web服务器提供，则可以自定义生成post的响应。如果您使用的是随本书源代码一起提供的nodejs
    Web服务器，则会得到自定义成功响应，而不是表单内容。
- en: Unique IDs in a form
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表单中的唯一ID
- en: In a jQuery Mobile application, since multiple pages can reside in the DOM at
    the same time, you should ensure that the IDs for the form controls are unique.
    The IDs should be unique across the entire app and not just in a single page.
    Lookups and form behavior could fail or behave differently if you do not follow
    this rule. Some browsers might still support duplicate IDs to a certain extent
    but this is not guaranteed.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在 jQuery Mobile 应用程序中，由于多个页面可以同时存在于 DOM 中，因此应确保表单控件的 ID 是唯一的。ID 应该在整个应用程序中是唯一的，而不仅仅是在单个页面中。如果不遵循此规则，查找和表单行为可能会失败或表现不同。一些浏览器可能仍然在一定程度上支持重复的
    ID，但这并不保证。
- en: See also
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Submitting a form using POST* recipe
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 POST 提交表单 的方法
- en: The *Fetching data using GET* recipe
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 GET 获取数据* 的方法'
- en: Submitting a form using POST
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 POST 提交表单
- en: This recipe shows you how to **POST** and submit a form using Ajax and also
    how to submit the same forum when not using Ajax. The **Blog Comments** form used
    in the previous recipe is used here for submission.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法向你展示了如何使用 Ajax **POST** 并提交表单，也展示了不使用 Ajax 时如何提交同一个论坛。在上一个方法中使用的**博客评论**表单在此用于提交。
- en: Getting ready
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Copy the full code of this recipe from the `code/05/submit-form` sources folder.
    This code can be launched using the URL `http://localhost:8080/05/submit-form/main.html`.
    To try out this recipe, you will also need to launch the simple nodejs web server
    that is shipped along with the source code of this book. Launch the server by
    using the following command:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `code/05/submit-form` 源文件夹中复制此方法的完整代码。此代码可以使用 URL `http://localhost:8080/05/submit-form/main.html`
    启动。要尝试此方法，您还需要启动随本书源代码一起提供的简单 nodejs web 服务器。使用以下命令启动服务器：
- en: '[PRE23]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How to do it...
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么做...
- en: 'In `main.html`, create the **Blog Comments** form as shown in the following
    code:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，按照以下代码创建**博客评论**表单：
- en: '[PRE24]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the following script to the `<head>` section to validate the comments field:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本添加到 `<head>` 部分以验证评论字段：
- en: '[PRE25]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作...
- en: 'In `main.html`, create the **Blog Comments** form. Set the form `action` to
    `''/postComment''` and also specify the attribute `data-transition=''pop''`. The
    rest of the code and form validations are the same as in the previous recipe and
    are explained in detail there. When you launch the application, the form is displayed
    as shown in the following screenshot:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，创建**博客评论**表单。将表单的 `action` 设置为 `'/postComment'`，并且还要指定 `data-transition='pop'`
    属性。其余的代码和表单验证与前一个方法中的相同，并在那里详细解释。当你启动应用程序时，表单会显示如下截图所示：
- en: '![How it works...](img/7225_05_15.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![如何运作...](img/7225_05_15.jpg)'
- en: 'Fill the form and click on **Submit Comment** button. If no errors are found,
    the form is submitted via Ajax. The custom nodejs web server responds to the `/postComment`
    request by generating the following HTML content as a response with mime-type
    `''text/html''`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 填写表单，然后点击**提交评论**按钮。如果没有发现错误，表单将通过 Ajax 提交。自定义的 nodejs web 服务器响应 `/postComment`
    请求，生成以下 HTML 内容作为带有 mime 类型 `'text/html'` 的响应：
- en: '[PRE26]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The response is rendered by the framework as shown in the following screenshot:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 框架渲染响应如下截图所示：
- en: '![How it works...](img/7225_05_16.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![如何运作...](img/7225_05_16.jpg)'
- en: The page transition is smooth and it uses the `pop` animation. You can click
    on the **Back** button and navigate back to the original page as the `data-rel='back'`
    attribute is also specified.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 页面过渡平稳，使用了 `pop` 动画。你可以点击**返回**按钮并导航回原始页面，因为也指定了 `data-rel='back'` 属性。
- en: There's more...
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can submit this form without using Ajax by specifying the `data-ajax=''false''`
    attribute to the form element. This code is available in the `non-ajax.html` file
    in the same folder as `main.html`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过向表单元素指定 `data-ajax='false'` 属性来提交此表单而不使用 Ajax。此代码在与 `main.html` 相同文件夹中的
    `non-ajax.html` 文件中提供：
- en: '[PRE27]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: When Ajax is not used, the response triggers a full page refresh. The server
    response in this recipe returns only the page `div` container and does not return
    the `<head>` element with any links to the jQuery Mobile stylesheet. Also, references
    to the jQuery and jQuery Mobile libraries are missing in the response. So the
    resultant page is as shown in the following screenshot. Here the response page
    is not styled and if you click on the **Back** link, it does not work.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当不使用 Ajax 时，响应会触发整个页面的刷新。在此方法中，服务器响应仅返回页面 `div` 容器，并且不返回具有任何链接到 jQuery Mobile
    样式表的 `<head>` 元素。此外，响应中缺少对 jQuery 和 jQuery Mobile 库的引用。因此，结果页面如下截图所示。在此响应页面中没有样式，如果点击**返回**链接，它不起作用。
- en: '![There''s more...](img/7225_05_17.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/7225_05_17.jpg)'
- en: The Ajax response
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ajax 响应
- en: The server response via Ajax replaces the content of the request form as seen
    in this recipe. You can view this response by using a DOM inspector. But if you
    view the page source, the original page is still shown. POST requests cannot be
    bookmarked as they do not contain any query parameters in the hash. The response
    to a POST request returns with the same URL as the request and it does not update
    the URL hash.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Ajax 的服务器响应会替换请求表单的内容，就像本篇食谱中所示。您可以通过使用 DOM 检查器来查看此响应。但是，如果您查看页面源代码，则仍会显示原始页面。POST
    请求不能被书签标记，因为它们在哈希中不包含任何查询参数。对 POST 请求的响应将返回与请求相同的 URL，并且不会更新 URL 哈希。
- en: Other ways of non-Ajax form submission
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他非 Ajax 提交表单的方式
- en: 'This recipe shows you how to submit forms without using Ajax by setting the
    attribute `data-ajax=''false''`. Another way to not use Ajax is to specify a `target`
    attribute to the form as shown in the following code:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 本篇食谱向您展示了如何通过设置属性 `data-ajax='false'` 来提交表单，而不使用 Ajax。另一种不使用 Ajax 的方法是向表单指定一个
    `target` 属性，如下所示：
- en: '[PRE28]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This is applicable to both POST and GET server requests.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这适用于 POST 和 GET 服务器请求。
- en: 'Ajax can also be turned off across your application by using the global configuration
    as shown in the following code in the `mobileinit` event handler:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Ajax 还可以通过使用 `mobileinit` 事件处理程序中以下代码中显示的全局配置来关闭应用程序：
- en: '[PRE29]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: See also
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Validating forms* recipe
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*验证表单* 食谱'
- en: The *Fetching data using GET* recipe
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 GET 获取数据* 食谱'
- en: The *Configuring ajaxEnabled* recipe in [Chapter 7](ch07.html "Chapter 7. Configurations"),
    *Configurations*
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 [第 7 章](ch07.html "第 7 章. 配置") 中的*配置 ajaxEnabled* 食谱，*配置*'
- en: Fetching data using GET
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GET 获取数据
- en: This recipe shows you how to use an Ajax **GET** request and fetch data from
    a server. In this recipe, the server sends back soccer scores to a GET request
    from a **Soccer League Scores** form.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 本篇食谱向您展示了如何使用 Ajax **GET** 请求并从服务器获取数据。在本篇食谱中，服务器会通过来自 **足球联赛分数** 表单的 GET 请求返回足球比分。
- en: Getting ready
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Copy the full code of this recipe from the `code/05/get-request` sources folder.
    This code can be launched using the URL `http://localhost:8080/05/get-request/main.html`.
    To try out this recipe you will need to launch the simple nodejs web server that
    is shipped along with the source code of this book. Launch the server by using
    the following command:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/05/get-request`源文件夹中复制本篇食谱的完整代码。这段代码可以通过URL `http://localhost:8080/05/get-request/main.html`
    运行。要尝试这个食谱，您需要启动随本书源代码一起提供的简单 nodejs web 服务器。使用以下命令启动服务器：
- en: '[PRE30]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How to do it...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In `main.html`, add the following code to create a form:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.html`中，添加以下代码以创建一个表单：
- en: '[PRE31]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add the following script to the `<head>` section to fetch and display the scores
    using Ajax:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本添加到 `<head>` 部分以使用 Ajax 获取并显示分数：
- en: '[PRE32]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How it works...
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In `main.html`, add a `<div>` container with `id=''scores''` and set its attribute
    `data-role=''fieldcontain''`. This `<div>` container will display the scores.
    Add a form (`id=''scoreform''`) to the page and set its `action` to `''/getScores''`
    and `method` to `''get''`. Add a submit button with text **Fetch Scores** to the
    form to fetch the scores from the server. You can add a decorated footer using
    `class=''ui-bar ui-bar-e''` to the page. When you load the application the following
    screen is displayed:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.html`中，添加一个`<div>`容器，其`id='scores'`，并设置其属性`data-role='fieldcontain'`。这个`<div>`容器将显示分数。向页面添加一个表单（`id='scoreform'`），并将其`action`设置为`'/getScores'`，`method`设置为`'get'`。在表单中添加一个文本为
    **获取分数** 的提交按钮，以从服务器获取分数。您可以向页面添加一个装饰的页脚，使用`class='ui-bar ui-bar-e'`。加载应用程序后，显示以下屏幕：
- en: '![How it works...](img/7225_05_18.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_05_18.jpg)'
- en: Add an event handler to the `pageshow` event as shown in the previous code.
    When you click on the `submit` button, it calls the jQuery `submit()` method.
    The server response to the default form `submit()` would replace the entire page
    with new content. To get a partial page update, call the jQuery `.get()` Ajax
    method to fetch data from the `'/getScores'` server URL. Then cancel the default
    `submit()` method by returning `false`. The `.get()` method specifies the callback
    functions for `success` and `error` as shown in the previous code. In the success
    callback function `showScores()` , replace the content of `#scores` div with the
    HTML response obtained from the server. Trigger the `'create'` method to let the
    jQuery Mobile framework initialize and enhance the newly added content. Any error
    is handled by the `errMsg()` error handler as shown in the previous code.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面代码所示，添加`pageshow`事件处理程序。当您单击`submit`按钮时，它调用jQuery `submit()`方法。默认表单`submit()`的服务器响应将用新的内容替换整个页面。要获取部分页面更新，请调用jQuery的`.get()`
    Ajax方法来从`'/getScores'`服务器URL获取数据。然后通过返回`false`取消默认的`submit()`方法。`.get()`方法指定了`success`和`error`的回调函数，如前面的代码所示。在成功的回调函数`showScores()`中，用从服务器获得的HTML响应替换`#scores`
    div的内容。触发`'create'`方法以让jQuery Mobile框架初始化和增强新添加的内容。任何错误都由`errMsg()`错误处理程序处理，如前面的代码所示。
- en: 'The custom nodejs web server responds to the `/getScores` get request by generating
    the following HTML content as a response with mime-type `''text/html''`:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义的Nodejs Web服务器通过生成以下HTML内容作为响应来响应`/getScores` get请求，MIME类型为`'text/html'`：
- en: '[PRE33]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now only the contents of the `#scores <div>` container are replaced by this
    server response. The header and footer remain untouched. The resulting display
    is as shown in the following screenshot:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，仅通过此服务器响应替换了`#scores <div>`容器的内容。标题和页脚保持不变。结果显示如下截图所示：
- en: '![How it works...](img/7225_05_19.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_05_19.jpg)'
- en: There's more...
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can submit forms without using Ajax by specifying the `data-ajax='false'`
    attribute to the form element as shown in the following code. When Ajax is not
    used, the response triggers a full page refresh. So ensure that a proper jQuery
    Mobile page is returned in the server response or else the resultant page could
    have styling and other issues.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过向表单元素指定`data-ajax='false'`属性来提交不使用Ajax的表单，如下代码所示。当不使用Ajax时，响应会触发完整页面刷新。因此确保服务器响应中返回一个正确的jQuery
    Mobile页面，否则结果页面可能存在样式和其他问题。
- en: '[PRE34]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The Ajax response
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ajax响应
- en: The server response via Ajax replaces the content of the request form completely.
    You can view the response by using a DOM inspector. But if you view the page source,
    the original page is still shown. GET requests can be bookmarked as they support
    query parameters in the hash. The GET response allows the update of the URL hash.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器通过Ajax响应完全替换了请求表单的内容。您可以使用DOM检查器查看响应。但如果您查看页面源代码，原始页面仍然会显示。GET请求可以被收藏夹添加为它们支持哈希中的查询参数。GET响应允许更新URL哈希。
- en: Form submission defaults
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表单提交默认值
- en: 'You can also submit a form without any action or method attribute as specified
    in the following code:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以提交一个没有指定任何动作或方法属性的表单，如下代码中所示：
- en: '[PRE35]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The form will use the default values of the action and method attributes. The
    method will default to `'get'` and the action will default to the current page's
    relative path. You can access this path via the call to the `$.mobile.path.get()`
    method.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 表单将使用动作和方法属性的默认值。方法将默认为`'get'`，动作将默认为当前页面的相对路径。您可以通过调用`$.mobile.path.get()`方法访问此路径。
- en: Note
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Always specify the `action` and `method` attributes for a form.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 始终为表单指定`action`和`method`属性。
- en: See also
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Validating forms* recipe
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*验证表单* 配方'
- en: The *Submitting a form using POST* recipe
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用POST提交表单的 *配方*
- en: The *Configuring ajaxEnabled* recipe in [Chapter 7](ch07.html "Chapter 7. Configurations"),
    *Configurations*
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第7章](ch07.html "第7章。配置")中*配置ajaxEnabled* 配方，*配置*'
- en: Creating an accessible form
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个可访问的表单
- en: The jQuery Mobile framework has very good support for the accessibility features,
    such as **WAI-ARIA** . This provides support for accessibility tools such as screen
    readers. This enables your application screens to be read out to those users who
    depend on such assistive technologies. Also speech input controls are now available
    on a few browsers like Chrome (which uses the webkit engine). These controls accept
    voice input. This recipe shows you how to generate accessible form controls that
    accept voice input and also support screen readers.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile 框架对无障碍功能（如**WAI-ARIA**）提供了很好的支持。这为无障碍工具（如屏幕阅读器）提供了支持。这使得您的应用程序屏幕可以被依赖这些辅助技术的用户阅读。此外，现在一些浏览器（如使用
    Webkit 引擎的 Chrome）已经提供了语音输入控件。这些控件接受语音输入。本文介绍了如何生成支持语音输入并支持屏幕阅读器的无障碍表单控件。
- en: Getting ready
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/05/accessible-controls` sources
    folder. You can launch this code by using the URL `http://localhost:8080/05/accessible-controls/main.html`.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `code/05/accessible-controls` 源文件夹中复制本文的完整代码。您可以使用 URL `http://localhost:8080/05/accessible-controls/main.html`
    启动此代码。
- en: How to do it...
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In `main.html`, add the following code to create a form:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，添加以下代码以创建一个表单：
- en: '[PRE36]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works...
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In `main.html`, add three fields as follows, **username** (input `type='text'`),
    **age** (input `type='number'`), and **city** (input `type='text'`). Associate
    a label to each of these fields and add a `div` container with attribute `data-role='fieldcontain'`
    for each set of labels and input controls. This helps the framework to realign
    and adjust the layout dynamically based on the platform and settings. The `placeholder`
    attribute is used to give an appropriate hint to the user for input.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main.html` 中，按如下方式添加三个字段，**用户名**（输入 `type='text'`）、**年龄**（输入 `type='number'`）和
    **城市**（输入 `type='text'`）。为每个字段关联一个标签，并为每组标签和输入控件添加一个 `div` 容器，该容器具有属性 `data-role='fieldcontain'`。这有助于框架根据平台和设置动态重新排列和调整布局。`placeholder`
    属性用于为用户提供适当的输入提示。
- en: 'To enable voice input, add the attributes `speech` and `x-webkit-speech` as
    shown in the previous code for each of the input controls. The support for voice
    input is totally dependent on browser implementation and a few browsers still
    do not implement them. When the page loads, you will see the following screenshot:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用语音输入，请按照之前代码中所示为每个输入控件添加 `speech` 和 `x-webkit-speech` 属性。语音输入的支持完全取决于浏览器的实现，一些浏览器仍然没有实现它们。当页面加载时，您将看到以下截图：
- en: '![How it works...](img/7225_05_20.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/7225_05_20.jpg)'
- en: You will see a small microphone icon at the right corner of each input control.
    The user can tap on this icon and will be prompted to speak in the value for the
    input. Once the user speaks in, **the speech to text engine** converts the voice
    to text and displays the input value text in the control. Though not fully accurate
    the voice to text technologies are improving by the day.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在每个输入控件的右上角看到一个小麦克风图标。用户可以点击此图标，然后会提示用户为输入控件说出值。一旦用户说完，**语音转文字引擎**会将声音转换为文本，并在控件中显示输入值文本。虽然不是完全准确，但语音转文字技术正在日益改进。
- en: There's more...
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: As mentioned earlier, the jQuery Mobile framework has very good support for
    the accessibility features such as WAI-ARIA. So add meaningful labels to all the
    form elements. When the page is initialized, the framework exposes these labels
    to the screen readers automatically. If you are already using placeholders to
    provide hints to the user, labels might be redundant. But if you are seeking to
    build an application that supports accessibility, then you should also define
    labels.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，jQuery Mobile 框架对 WAI-ARIA 等无障碍功能提供了很好的支持。因此，请为所有表单元素添加有意义的标签。当页面初始化时，框架会自动向屏幕阅读器公开这些标签。如果您已经使用占位符为用户提供提示，那么标签可能是多余的。但如果您希望建立一个支持无障碍功能的应用程序，那么您也应该定义标签。
- en: If you want to use the placeholder feature and also support accessibility, then
    jQuery Mobile provides an easy option to hide the labels by using the style `'ui-hidden-accessible'`
    on the form control. You can also hide the label by adding the style `'ui-hide-label'`
    to the form field container as shown in the code. Now the labels are not shown
    on the display but are still available to screen readers. You can verify this
    by running your favorite screen reader and accessing the page created.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用占位符功能并支持辅助功能，jQuery Mobile 提供了一个简单的选项，通过在表单控件上使用样式`'ui-hidden-accessible'`隐藏标签。你也可以通过在表单字段容器中添加样式`'ui-hide-label'`来隐藏标签，代码中已经展示。现在标签不会显示在屏幕上，但依然可以被屏幕阅读器访问。你可以通过运行你喜欢的屏幕阅读器并访问创建的页面来验证这一点。
- en: Popular voice readers for mobile devices
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动设备的受欢迎的语音阅读器
- en: There are numerous voice readers in the market today and you can try any of
    the popular ones based on your platform. Apple phones have **VoiceOver** (see
    [http://www.apple.com/accessibility/iphone/vision.html](http://www.apple.com/accessibility/iphone/vision.html)),
    Android has **TalkBack** , **Spiel** , **Mobile Accessibility** for Android, and
    other applications in the **Android Play Store** .
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 当今市场上有许多语音阅读器，你可以根据你的平台尝试任何受欢迎的语音阅读器。苹果手机有**VoiceOver** (见 [http://www.apple.com/accessibility/iphone/vision.html](http://www.apple.com/accessibility/iphone/vision.html)),
    安卓手机有**TalkBack** , **Spiel** , **Mobile Accessibility** for Android, 以及安卓应用商店中的其他应用。
- en: Desktop voice readers
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 桌面语音阅读器
- en: For the Chrome desktop browser, the **ChromeVox** extension can be installed
    from [http://code.google.com/p/google-axs-chrome](http://code.google.com/p/google-axs-chrome)
    and once enabled it will start reading out the form controls for you. You can
    verify that the hidden label contents are also read out by the screen reader.`
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Chrome 桌面浏览器，可以从 [http://code.google.com/p/google-axs-chrome](http://code.google.com/p/google-axs-chrome)
    安装**ChromeVox** 扩展，一旦启用，它将开始为你朗读表单控件。你可以验证屏幕阅读器是否也读出了隐藏的标签内容。
