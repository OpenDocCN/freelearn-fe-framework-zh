["```js\n    **<header>{{ title }}</header>**\n    <main class=\"main\">\n      <div class=\"content\">\n        <app-product-list></app-product-list>\n      </div>\n    </main>\n    <footer appCopyright> - v{{ settings.version }}</footer>\n    <router-outlet /> \n    ```", "```js\n    private setTitle = () => {\n      this.title = this.settings.title;\n    } \n    ```", "```js\n    private changeTitle(callback: Function) {\n      setTimeout(() => {\n        callback();\n      }, 2000);\n    } \n    ```", "```js\n    constructor() {\n      this.changeTitle(this.setTitle);\n    } \n    ```", "```js\ngetRootFolder(folder => { \n  getAssetsFolder(folder, assets => {\n    getPhotos(assets, photos => {}); \n  });   \n}); \n```", "```js\n    private onComplete() {\n      return new Promise<void>(resolve => {\n      });\n    } \n    ```", "```js\n    private onComplete() {\n      return new Promise<void>(resolve => {\n        **setTimeout(() => {**\n          **resolve();**\n        **}, 2000);**\n      });\n    } \n    ```", "```js\n    constructor() {\n      **this.onComplete().then(this.setTitle);**\n    } \n    ```", "```js\ngetRootFolder()\n  .then(getAssetsFolder)\n  .then(getPhotos); \n```", "```js\n    private onComplete() {\n      return new Promise<void>(resolve => {\n        **setInterval**(() => {\n          resolve();\n        }, 2000);\n      });\n    } \n    ```", "```js\n    private setTitle = () => {\n      **const timestamp = new Date();**\n      this.title = **`${this.settings.title} (${timestamp})`;**\n    } \n    ```", "```js\n    import { Observable } from 'rxjs'; \n    ```", "```js\n    title$ = new Observable(observer => {\n      setInterval(() => {\n        observer.next();\n      }, 2000);\n    }); \n    ```", "```js\n    constructor() {\n      **this.title$.subscribe**(this.setTitle);\n    } \n    ```", "```js\n    ng generate component key-logger \n    ```", "```js\n    <input type=\"text\" #keyContainer />\n    You pressed: {{keys}} \n    ```", "```js\n    import { Component, **ElementRef, OnInit, viewChild** } from '@angular/core'; \n    ```", "```js\n    input = viewChild<ElementRef>('keyContainer');\n    keys = ''; \n    ```", "```js\n    import { fromEvent } from 'rxjs'; \n    ```", "```js\n    export class KeyLoggerComponent **implements OnInit** {\n      input = viewChild<ElementRef>('keyContainer');\n      keys = '';\n      **ngOnInit(): void {**\n        **const logger$ = fromEvent<KeyboardEvent>(this.input()!.nativeElement, 'keyup');**\n        **logger$.subscribe(evt => this.keys += evt.key);**\n      **}**\n    **}** \n    ```", "```js\n    import { Component, inject } from '@angular/core';\n    import { RouterOutlet } from '@angular/router';\n    import { ProductListComponent } from './product-list/product-list.component';\n    import { CopyrightDirective } from './copyright.directive';\n    import { APP_SETTINGS, appSettings } from './app.settings';\n    import { Observable } from 'rxjs';\n    **import { KeyLoggerComponent } from './key-logger/key-logger.component';**\n    @Component({\n      selector: 'app-root',\n      imports: [\n        RouterOutlet,\n        ProductListComponent,\n        CopyrightDirective,\n        **KeyLoggerComponent**\n      ],\n      templateUrl: './app.component.html',\n      styleUrl: './app.component.css',\n      providers: [\n        { provide: APP_SETTINGS, useValue: appSettings }\n      ]\n    }) \n    ```", "```js\n    <header>{{ title }}</header>\n    <main class=\"main\">\n      <div class=\"content\">\n        <app-product-list></app-product-list>\n      </div>\n    </main>\n    <footer appCopyright> - v{{ settings.version }}</footer>\n    <router-outlet />\n    **<app-key-logger></app-key-logger>** \n    ```", "```js\nconst values = of(1, 2, 3);\nvalues.subscribe(value => console.log(value)); \n```", "```js\nconst values = from([1, 2, 3]);\nvalues.subscribe(value => console.log(value)); \n```", "```js\nconstructor() {\n  const complete$ = from(this.onComplete());\n  complete$.subscribe(this.setTitle);\n} \n```", "```js\n    import { fromEvent, **tap** } from 'rxjs'; \n    ```", "```js\n    ngOnInit(): void {\n      const logger$ = fromEvent<KeyboardEvent>(this.input()!.nativeElement, 'keyup');\n      logger$**.pipe(**\n        **tap(evt => this.keys += evt.key)**\n      **).subscribe();**\n    } \n    ```", "```js\n    import { fromEvent, tap, **map** } from 'rxjs'; \n    ```", "```js\n    map(evt => evt.key.charCodeAt(0)) \n    ```", "```js\n    import { fromEvent, tap, map, **filter** } from 'rxjs'; \n    ```", "```js\n    filter(code => (code > 31 && (code < 48 || code > 57)) === false) \n    ```", "```js\n    tap(**digit** => this.keys += **String.fromCharCode(digit)**) \n    ```", "```js\n    import { Component, ElementRef, OnInit, viewChild, **input** } from '@angular/core'; \n    ```", "```js\n    numeric = input(false); \n    ```", "```js\n    filter(code => **{**\n      **if (this.numeric()) {**\n        **return (code > 31 && (code < 48 || code > 57)) === false;**\n      **}**\n      **return true;**\n    **}**) \n    ```", "```js\n    ngOnInit(): void {\n      const logger$ = fromEvent<KeyboardEvent>(this.input()!.nativeElement, 'keyup');\n      logger$.pipe(\n        map(evt => evt.key.charCodeAt(0)),\n        filter(code => {\n          if (this.numeric()) {\n            return (code > 31 && (code < 48 || code > 57)) === false;\n          }\n          return true;\n        }),\n        tap(digit => this.keys += String.fromCharCode(digit))\n      ).subscribe();\n    } \n    ```", "```js\n    <app-key-logger **[numeric]=\"true\"**></app-key-logger> \n    ```", "```js\n    import { Observable, of } from 'rxjs'; \n    ```", "```js\n    private products: Product[] = [\n      { \n        id: 1,\n        title: 'Keyboard',\n        price: 100,\n        categories: {\n          1: 'Computing',\n          2: 'Peripherals'\n        }\n      },\n      {\n        id: 2,\n        title: 'Microphone',\n        price: 35,\n        categories: { 3: 'Multimedia' }\n      },\n      {\n        id: 3,\n        title: 'Web camera',\n        price: 79,\n        categories: {\n          1: 'Computing',\n          3: 'Multimedia'\n        }\n      },\n      {\n        id: 4,\n        title: 'Tablet',\n        price: 500,\n        categories: { 4: 'Entertainment' }\n      }\n    ]; \n    ```", "```js\n    getProducts(): **Observable<Product[]**> {\n      return **of(this.products);**\n    } \n    ```", "```js\n    private getProducts() {\n      this.productService.getProducts().subscribe(products => {\n        this.products = products;\n      });\n    } \n    ```", "```js\n    ngOnInit(): void {\n      **this.getProducts();**\n    } \n    ```", "```js\n    import { Subscription } from 'rxjs'; \n    ```", "```js\n    private productsSub: Subscription | undefined; \n    ```", "```js\n    private getProducts() {\n      **this.productsSub** = this.productService.getProducts().subscribe(products => {\n        this.products = products;\n      });\n    } \n    ```", "```js\n    import { Component, OnInit, **OnDestroy** } from '@angular/core'; \n    ```", "```js\n    export class ProductListComponent implements OnInit, **OnDestroy** \n    ```", "```js\n    ngOnDestroy(): void {\n      this.productsSub?.unsubscribe();\n    } \n    ```", "```js\n    import { Component, **DestroyRef, inject**, OnInit } from '@angular/core';\n    **import { takeUntilDestroyed } from '@angular/core/rxjs-interop';** \n    ```", "```js\n    private destroyRef = inject(DestroyRef); \n    ```", "```js\n    private getProducts() {\n      this.productService.getProducts()**.pipe(**\n        **takeUntilDestroyed(this.destroyRef)**\n      **)**.subscribe(products => {\n        this.products = products;\n      });\n    } \n    ```", "```js\n    import { AsyncPipe } from '@angular/common';\n    import { Observable } from 'rxjs'; \n    ```", "```js\n    @Component({\n      selector: 'app-product-list',\n      imports: [ProductDetailComponent, SortPipe, AsyncPipe],\n      templateUrl: './product-list.component.html',\n      styleUrl: './product-list.component.css'\n    }) \n    ```", "```js\n    products$: Observable<Product[]> | undefined; \n    ```", "```js\n    private getProducts() {\n      **this.products$ = this.productService.getProducts();**\n    } \n    ```", "```js\n    @let products = (products$ | async)!; \n    ```"]