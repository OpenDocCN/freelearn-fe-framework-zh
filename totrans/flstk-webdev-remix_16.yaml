- en: '16'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing for the Edge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Edge** is a multifaceted term that can mean different things in different
    contexts. It might denote a location, a runtime, or a computing paradigm. You
    may recall from [*Chapter 3*](B17399_03.xhtml#_idTextAnchor043), *Deployment Targets,
    Adapters, and Stacks*, that Remix can be deployed to various server environments,
    including edge environments. In this chapter, we will dive deeper into developing
    for the edge and explore what it means to develop Remix applications that run
    on edge environments.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter is split into two sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Living on the edge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the edge’s benefits and limitations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, we will discuss edge computing and define related concepts. Next, we
    will consider the benefits and limitations of hosting Remix at the edge.
  prefs: []
  type: TYPE_NORMAL
- en: After reading this chapter, you will understand what it means to deploy to the
    edge and know what to consider when working with Remix in edge environments. Further,
    you will know about popular edge providers and be able to discuss the pros, cons,
    and limitations of the edge as a location and runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Living on the edge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Edge computing is a paradigm that has been around for many years but has picked
    up steam in association with the **Internet of Things** (**IoT**). The term also
    found a new meaning in web development when CDNs started offering new JavaScript
    runtimes to host web applications on the edge. In this section, we will define
    what it means to run websites on the edge and see what edge development with Remix
    looks like. First, let’s take a step back and understand the different meanings
    of the term “edge.”
  prefs: []
  type: TYPE_NORMAL
- en: Computing at the edge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Edge computing is a paradigm of computer science that contrasts cloud computing.
    It describes a system architecture where the compute is located as close as possible
    to its utilization. While cloud computing happens in offsite data centers, edge
    computing aims to locate computing at the edge of a given network. This is why
    we often use the term edge to describe a location that contrasts the massive data
    centers of the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of edge computing is to reduce round-trip times from the client to
    the server by moving the server closer to the user. Among other things, edge computing
    is enabled by the increased availability and reduced cost of computing. Why not
    compute closer to the user if the computing power is available?
  prefs: []
  type: TYPE_NORMAL
- en: Think about a security camera designed to automatically detect movement and
    set off an alarm in case of suspicious activity. In a cloud-based setup, the camera
    sends its video feed to a central data center for analysis. If it detects movement,
    the central system triggers the building's alarm. On the other hand, with an edge-based
    architecture, the camera may process the feed right on the device. If it spots
    movement, the camera itself sends an alert to the building's central server, which
    then activates the alarm system.
  prefs: []
  type: TYPE_NORMAL
- en: Edge computing requires available computation capabilities on the network’s
    edge, while cloud computing takes advantage of the computation capabilities of
    centralized data centers. With edge computing, we can decrease response times
    and network bandwidth by avoiding round trips to the cloud. However, the required
    computation capabilities must be available. Sometimes, we may need to rethink
    our application and its runtime to make it lighter and suitable for the edge.
    This is why we may use the term edge to describe optimized runtime environments
    for the edge.
  prefs: []
  type: TYPE_NORMAL
- en: To clarify, we won’t try to deploy and run Remix on security cameras. Edge computing
    is a distributed computing paradigm that can be applied to many use cases, such
    as the Internet of Things. The Internet of Things is one example of edge computing,
    where smart devices communicate in an edge network without the need to stream
    the collected data directly to the cloud for processing.
  prefs: []
  type: TYPE_NORMAL
- en: In web development, edge computing takes place in highly geographically distributed
    data centers that heavily increase proximity to users compared to the centralized
    data centers of traditional cloud computing offerings. Next, let’s review today’s
    edge offerings for web apps.
  prefs: []
  type: TYPE_NORMAL
- en: Running web apps on the edge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CDNs have served content on the edge of the internet for decades. Conclusively,
    edge computing is not a new concept within web development. What’s cutting-edge
    (pun intended) is the ability to host dynamic web applications on the edge.
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, CDNs are used to deliver static content, including web page assets
    (HTML, CSS, and JavaScript files) and media files (images and videos). CDNs maintain
    geographically distributed data centers in as many locations as possible and are
    optimized for reliability, scale, and performance. This makes CDNs perfect not
    just for caching and serving static content but also for acting as edge computing
    providers.
  prefs: []
  type: TYPE_NORMAL
- en: In recent years, CDNs have expanded their scope to handle dynamic content and
    offer web application hosting services. Popular CDNs that offer edge runtimes
    are Cloudflare and Fastly. Additionally, a growing list of hosting providers,
    such as Netlify and Vercel, partner with CDNs to offer edge environments through
    their hosting platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Remix is one of the first web frameworks to support deploying and running on
    the edge. As you know from the previous chapters of this book, Remix was developed
    with various runtime environment requirements in mind. In the next section, we
    will learn more about today’s edge hosting providers.
  prefs: []
  type: TYPE_NORMAL
- en: Remixing the edge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In theory, Remix can run on any server that can execute JavaScript. This is
    possible because Remix utilizes an adapter architecture. Remix uses adapters to
    translate requests and responses between the native server runtime and Remix.
    This allows Remix to work together with various web server libraries and runtimes.
    In this section, we will review how to deploy Remix at the edge.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remix maintains official adapters for many popular deployment targets, but
    the adapter architecture also allows the community to build adapters for any environment.
    At the time of writing, there are Remix templates for the following edge and edge-like
    deployment targets:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloudflare Pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloudflare Workers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deno Deploy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fastly Compute@Edge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Netlify Edge Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fly.io
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vercel Edge Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deploying Remix to the edge is as easy as picking an edge template and deploying
    it to the associated provider service. Try it out by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Follow the instructions of the `create-remix` script and then open the bootstrapped
    `README.md` file. The `README.md` will guide you through deploying the app to
    Cloudflare Workers. Just like that, you deployed to the edge with Remix.
  prefs: []
  type: TYPE_NORMAL
- en: Note that there are differences between the listed edge and edge-like deployment
    targets. CDNs utilize lightweight JavaScript runtimes that are not compatible
    with Node.js. Edge-like deployment targets such as Deno Deploy and Fly.io provide
    regional distribution but may offer less proximity than their CDN counterparts.
    You can refer to [*Chapter 3*](B17399_03.xhtml#_idTextAnchor043), *Deployment
    Targets, Adapters, and Stacks*, to learn more about Remix’s different deployment
    targets and their runtimes and environments.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned that edge computing is a distributed computing
    paradigm and understood how it differs from cloud computing. You further reviewed
    available edge deployment targets for Remix and deployed a Remix app to the edge.
    You also learned how serving from the edge can improve response times. Maybe you’re
    wondering why we didn’t build BeeRich to run on the edge. In the next section,
    we will consider the limitations of running at the edge and discuss further pros
    and cons.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the edge’s benefits and limitations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, you learned that edge computing is about performance.
    By moving the compute closer to the user, we can reduce response times and, consequently,
    improve the user experience. Let’s dive deeper and learn more about the edge’s
    pros and cons.
  prefs: []
  type: TYPE_NORMAL
- en: Edge environments follow a serverless programming model. Each incoming request
    starts up a new edge function. The function runs the web application (our Remix
    app) to fulfill the request and shuts down afterward. The serverless programming
    model makes edge environments highly scalable but also increases the complexity
    of the associated system architecture as it limits what can be done within the
    web application.
  prefs: []
  type: TYPE_NORMAL
- en: Serverless execution avoids wasting computing power on idle applications. However,
    serverless also reduces the capabilities of web applications to short-lived functions
    that shut down after handling an incoming request. For example, serverless functions
    cannot be used for long-running tasks, such as maintaining server-sent event endpoints
    or WebSocket servers.
  prefs: []
  type: TYPE_NORMAL
- en: Like most serverless environments, edge functions also do not have access to
    a filesystem and cannot write and read files. This requires us to utilize a remote
    service to store files. Additionally, edge functions do not offer long-living
    application states that can be shared between different requests. This prevents
    us from caching data or managing user sessions in memory.
  prefs: []
  type: TYPE_NORMAL
- en: Edge providers utilize lightweight runtimes to make web applications less computation-intensive.
    Most of today’s CDN-based edge runtimes operate on V8 isolates, isolated contexts
    within the V8 engine. Booting up a V8 isolate is faster than booting up containers
    or virtual machines. This makes edge applications handle a request within milliseconds.
    Most traditional serverless functions suffer from cold start times of several
    hundred milliseconds to start after being dormant for a while. Edge functions
    do not suffer from the same cold start problem.
  prefs: []
  type: TYPE_NORMAL
- en: Most edge-native runtimes, such as workerd from Cloudflare, are designed with
    web standards in mind but do not support executing Node.js standard libraries.
    This makes them incompatible with Node.js. Conclusively, we can only use npm packages
    if these packages do not use Node.js standard libraries internally. This may or
    may not be an issue, depending on the use case of the application, but it certainly
    is a point to consider.
  prefs: []
  type: TYPE_NORMAL
- en: The big advantage the edge has over traditional web hosting is global distribution.
    Most server and serverless environments do not automatically distribute applications
    across different regions, at least not without additional configuration overhead
    and costs. Edge computing allows us to distribute web applications globally with
    minimal configuration efforts and significantly lower price points. However, geographical
    distribution also increases the complexity of the associated system architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regional distribution only decreases response times if it decreases the total
    round-trip time behind a request. Refer to *Figure 13**.2* in [*Chapter 13*](B17399_13.xhtml#_idTextAnchor194),
    *Deferring Loader Data*, where we illustrated how Remix reduces response times
    by removing client-server round trips. Instead of doing fetch requests from the
    client to the server, we can execute `loader` functions on the document request
    and query the closely located database. Notice that in *Figure 13**.2*, the round-trip
    time from the server to the database is very small. We assume that the database
    is closely located to the server – for instance, in the same cloud region, data
    center, or even on the same. *Figure 16**.1* illustrates how the response time
    may increase if the database is distant from the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.1 – Edge response waterfall with distant database](img/Figure_16.01_B17399.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.1 – Edge response waterfall with distant database
  prefs: []
  type: TYPE_NORMAL
- en: By moving the server close to the user, we may be able to reduce client-server
    round trips. However, each client-server round trip might trigger several server-database
    round trips. If these round trips increase due to the distance between the server
    and the database, we may decrease performance overall.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 16**.1* assumes we make two separate database queries to fulfill the
    document request. As we can see, we further assume that we can make both database
    requests in parallel. However, sometimes, we may need to make subsequent requests.
    Notice how such requests would further delay the response time.'
  prefs: []
  type: TYPE_NORMAL
- en: The performance of today’s web applications heavily depends on the distance
    between the server and the database. In cloud data centers and regions, databases
    are usually close to the web servers. However, to accomplish proximity between
    the server and the database on the edge, we must distribute our database.
  prefs: []
  type: TYPE_NORMAL
- en: Geographically distributed database offerings exist and CDNs have also started
    to offer distributed key-value and SQL databases, but it is important to consider
    the costs and complexity of a globally distributed system architecture.
  prefs: []
  type: TYPE_NORMAL
- en: You may notice a pattern here. Edge functions provide computational and geographical
    scalability but introduce additional complexity. You must weigh the discussed
    benefits and considerations carefully when evaluating the edge for a project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s wrap up by doing a short thought experiment. What pieces of BeeRich would
    require a rework to make BeeRich run on an edge environment? For edge-like environments
    such as Fly.io or Deno Deploy, not many. However, for true edge environments such
    as Cloudflare Workers and Pages, we would need to make signification changes:'
  prefs: []
  type: TYPE_NORMAL
- en: SQLite databases run on the same machine and require filesystem access. SQLite
    is not supported by edge runtimes. We would need to use a different database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The expense and invoice attachment file upload feature would require a rework.
    We currently use the server’s filesystem. We would need to use a third-party file
    storage service or build a custom one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The real-time update feature would require a rework. We currently use a server-sent
    events endpoint to update clients about data changes. Server-sent events require
    long-running connections that are not supported by edge runtimes. We must deploy
    the server-sent events endpoint to a different long-running server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This example illustrates that long-running servers support simpler application
    designs, while serverless edge runtimes introduce limitations due to their scalable
    and performance-driven nature.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about the benefits and limitations of the edge.
    We also discussed what is not possible in edge environments. Equipped with these
    considerations, you can now evaluate whether moving to the edge is worthwhile
    for a given project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the edge as a computing paradigm, a location,
    and a runtime. You now understand that edge computing contrasts cloud computing
    and aims to move the compute as close as possible to the users to reduce response
    times.
  prefs: []
  type: TYPE_NORMAL
- en: You further learned that CDNs can serve as the edge of the internet. Running
    Remix on the edge moves the web server much closer to the user compared to the
    regionally centralized data centers of the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Remix offers adapters for several edge deployment targets, and you practiced
    deploying to the edge by using Remix’s `create-remix` script. You now understand
    how easy it is to set up a Remix application on the edge.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed both the benefits and limitations of the edge as a deployment target.
    You now understand that the edge follows a serverless programming model, which
    makes it highly scalable but also introduces complexity. Edge runtimes use lightweight
    container technologies to optimize for geographical distribution and performance.
    Geographical distribution introduces additional considerations, such as the distance
    to the databases.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you learned what cannot be done on the edge, such as accessing the
    filesystem, sharing application states in memory across requests, and handling
    long-running tasks and connections.
  prefs: []
  type: TYPE_NORMAL
- en: In the next and last chapter, we will review what we have learned. We will further
    touch upon some final topics, such as migration strategies and Remix’s versioning.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Review the Remix documentation for a list of official and community adapters:
    [https://remix.run/docs/en/2/other-api/adapter](https://remix.run/docs/en/2/other-api/adapter).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find more information about Fastly’s Remix adapter here: [https://www.fastly.com/blog/host-your-remix-app-on-fastly-compute-edge](https://www.fastly.com/blog/host-your-remix-app-on-fastly-compute-edge).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to this article to learn how to deploy your Remix application to Netlify’s
    edge functions: [https://www.netlify.com/blog/how-to-use-remix-framework-with-edge-functions/](https://www.netlify.com/blog/how-to-use-remix-framework-with-edge-functions/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to learn more about edge environments, have a look at Cloudflare’s
    learning resources: [https://developers.cloudflare.com/workers/learning/how-workers-works/](https://developers.cloudflare.com/workers/learning/how-workers-works/).'
  prefs: []
  type: TYPE_NORMAL
