- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the Reducer and Effect Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After developing our own blog application using the State Hook, we are now going
    to learn about two other very important Hooks that are provided by React—the **Reducer**
    and **Effect** Hooks. We will first learn when we should use a Reducer Hook instead
    of a State Hook. Then, we will learn how to turn our existing State Hook into
    a Reducer Hook to get a grasp on the concept in practice. Finally, we are going
    to learn about Effect Hooks and what they are used for and implement them in our
    blog application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Reducer Hooks versus State Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Reducer Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Effect Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A fairly recent version of Node.js should already be installed. The Node Package
    Manager (`npm`) also needs to be installed (it should come with Node.js). For
    more information on how to install Node.js, please check out their official website:
    [https://nodejs.org/](https://nodejs.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to use **Visual Studio Code** (**VS Code**) for the guides in
    this book, but everything should work similarly in any other editor. For more
    information on how to install VS Code, please refer to their official website:
    [https://code.visualstudio.com](https://code.visualstudio.com).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we use the following versions:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js v22.14.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: npm v10.9.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Code v1.97.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While installing a newer version should not be an issue, please note that certain
    steps might work differently on a newer version. If you are having an issue with
    the code and steps provided in this book, please try using the mentioned versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter04](https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter04).'
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended that you write the code on your own. Do not simply
    run the code examples that are provided in the book. It is important to write
    the code yourself to be able to learn and understand it properly. However, if
    you run into any issues, you can always refer to the code examples.
  prefs: []
  type: TYPE_NORMAL
- en: Reducer Hooks versus State Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about dealing with local and global states.
    We used State Hooks for both cases, which is fine for simple state changes. However,
    if our state logic becomes more complicated, we are going to need to ensure that
    we keep the state consistent. To do so, we should use a Reducer Hook, instead
    of multiple State Hooks, because it is harder to maintain synchronicity between
    multiple State Hooks that depend on each other. As an alternative, we could keep
    all states in one State Hook, but then we have to make sure that we don’t accidentally
    overwrite parts of our state.
  prefs: []
  type: TYPE_NORMAL
- en: Limitations of the State Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The State Hook already supports passing complex objects and arrays to it, and
    it can handle their state changes perfectly fine. However, we are always going
    to have to change the state directly, which means that we need to use a lot of
    destructuring to make sure that we are not overwriting other parts of the state.
    For example, imagine that we have a State Hook like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s say we want to change the filter, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If we simply did this, we would be removing the `expandPosts` setting from
    our state object! So, we need to use the spread operator, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we wanted to change the `fromDate` filter to a different date, we would
    need to use the spread operator twice, to avoid accidentally removing the `author`
    filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'But what happens if we do this when the `filter` state is still a string, as
    it was in the original object (`filter: ''all''`)? We are going to get the following
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: What? Why are there suddenly three new keys—`'0'`, `'1'`, and `'2'`? The answer
    is, the spread operator also works on strings, which are spread in a way where
    each letter gets a key, based on its index in the string.
  prefs: []
  type: TYPE_NORMAL
- en: As you can imagine, using the spread operator and changing the state object
    directly can become very tedious for larger state objects. Additionally, we always
    need to make sure that we don’t introduce any bugs, and we need to check for bugs
    in multiple places across our app.
  prefs: []
  type: TYPE_NORMAL
- en: Reducers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instead of changing the state directly, we could make a function that deals
    with state changes. Such a function is called a **reducer**, and works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, instead of directly changing the state object, we are calling
    a function that takes the current state and an action object and returns a new
    state object. Before we define the function, let’s first take a closer look at
    actions.
  prefs: []
  type: TYPE_NORMAL
- en: Actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Actions** are objects that have a `type` property that contains the action
    name, and optionally some additional info about the action.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s revisit our state object from earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If we wanted to change the `expandPosts` state, we would use a `TOGGLE_EXPAND`
    action, which does not need any additional info. The action would then look as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If we would like to change the filter instead, we would use a `CHANGE_FILTER`
    action, which additionally contains information about the filter that should be
    changed. For example, we could use the following actions to change the filter
    in different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The second, third, and fourth actions would change the `filter` state from
    a string to an object and then set the respective key. If the object already exists,
    it would simply adjust the keys that were defined in the action. After each of
    these actions, the state would change as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s imagine that we applied the following action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: After this action, the filter would go back to the `'all'` string, as it was
    in its initial state.
  prefs: []
  type: TYPE_NORMAL
- en: If you have worked with the Redux library before, you will already be familiar
    with the concepts of state, actions, and reducers.
  prefs: []
  type: TYPE_NORMAL
- en: Defining reducers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A reducer function for the actions we defined could look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we defined the function and are deciding what to do to the state based
    on the `action.type`. First, we handle the `TOGGLE_EXPAND` action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the `CHANGE_FILTER` function is handled, where we reset the filter to
    the string `''all''` if the action defined the `all: true` filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If the filter is still a string, we initialize an empty object; otherwise,
    we reuse the existing object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can set the `fromDate` and `author` filters, depending on which ones
    were defined in the action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the state is returned with the new filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the case where an action type is unknown, we throw an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Throwing an error in the default case is different from what we would do with
    Redux reducers, where we would simply return the current state in the default
    case. React Reducer Hooks do not store all states in one global object and we
    are only going to handle certain actions for certain state objects, so we can
    throw an error for unknown action types.
  prefs: []
  type: TYPE_NORMAL
- en: While we are still using some spread operators in the reducer function, it is
    not as deeply nested. Additionally, all the state handling is in one place and
    we are only changing one part of the state at a time through actions, making the
    code much easier to maintain and less error-prone.
  prefs: []
  type: TYPE_NORMAL
- en: The Reducer Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have a reducer function, we just need to define an initial state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'With the reducer function and the initial state, we can create a Reducer Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The current state can now be accessed via the `state` object returned from
    the Hook. Using the `dispatch` function allows us to invoke the reducer function
    that we passed to the Reducer Hook. Actions can be **dispatched** via the `dispatch`
    function. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Dispatching an action will call the reducer function with the current state
    and the dispatched action, and set the returned state as the new state of the
    Reducer Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to add additional info to the action, we can simply add it to the
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, dealing with state changes using actions and reducers is much
    easier to read and maintain than having to adjust the state object directly.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned about Reducer Hooks and when to use them instead of
    State Hooks, let’s get started with using them.
  prefs: []
  type: TYPE_NORMAL
- en: Using Reducer Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After learning about actions, reducers, and the Reducer Hook, we are going to
    use it in our blog app. Any existing State Hook can be turned into a Reducer Hook
    when the state or state changes become too complex.
  prefs: []
  type: TYPE_NORMAL
- en: If there are multiple `setState` functions that are always called at the same
    time, it is a good hint that they should be grouped together in a single Reducer
    Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Global state is usually a good candidate for using a Reducer Hook, rather than
    a State Hook, because changes to it can happen anywhere in the app. It is much
    easier to deal with state changes when they only get processed in one function
    and the components dispatch actions instead of directly modifying the state. Having
    all the state-changing logic in one place makes it easier to maintain and fix
    bugs, without introducing new ones by forgetting to update the logic everywhere.
  prefs: []
  type: TYPE_NORMAL
- en: Turning a State Hook into a Reducer Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our blog app, we have two global State Hooks:'
  prefs: []
  type: TYPE_NORMAL
- en: The `username` state – containing the username of the currently logged-in user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `posts` state – containing all the posts in our feed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `username` state is quite simple, it only contains a string of the username.
    So, at the moment, it does not make sense to turn this into a Reducer Hook, as
    the state changes are straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On login/register: Set the username'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On logout: Clear the username'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the `posts` state, however, we already needed to use the spread operator
    to avoid accidentally removing posts from the feed when creating a new post. So,
    it seems like a good candidate for a Reducer Hook, especially considering that
    it might be extended in the future (fetching new posts, updating posts, deleting
    posts, etc.).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s get started with replacing the `posts` State Hook with a Reducer
    Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Defining actions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We start by defining actions for our Reducer Hook. For now, we are only going
    to consider a `CREATE_POST` action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Next, we are going to implement the reducer function.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the reducer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For now, we are going to place our reducer in a `src/reducers.js` file. Later,
    if we have many reducers, it might make sense to create a separate `src/reducers/`
    folder, with separate files for each reducer function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started with implementing the reducer function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter03_2` folder to a new `Chapter04_1` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter04_1` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new `src/reducers.js` file, in which we define and export the `postsReducer`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We use a `switch` statement to handle the different action types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, handle the `CREATE_POST` action, inserting the new post (from `action.post`)
    into the beginning of the array, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For now, this will be the only action type that we handle, so we can define
    the `default` statement now, throwing an error when we encounter an unknown action
    type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After defining the reducer function, we can now use it to define a Reducer Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the Reducer Hook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To define a Reducer Hook, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/App.jsx` and import the `useReducer` and `postsReducer` functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Remove* the following State Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* it with a Reducer Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, instead of `setPosts`, pass the `dispatch` function to the `CreatePost`
    component, and *remove* the `setPosts` prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, edit `src/post/CreatePost.jsx` and *replace* the `setPosts` prop with
    the `dispatch` prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instead of imperatively adding the new post, we dispatch an action inside the
    `handleSubmit` function now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For more complex actions, it might make sense to define functions that will
    create the action object, so-called **action creators**. For example, a `createPostAction(post)`
    function could create and return the `CREATE_POST` action object. Action creators
    can help ensure a consistent structure of action objects, make it easier for us
    to create them, and allow for this structure to be adjusted easily in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Now the `posts` state uses a Reducer Hook instead of a State Hook, but it works
    the same way as before! If we want to add more logic for managing posts later,
    such as deleting and editing posts, it will be much easier to do so now.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter04/Chapter04_1`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: After learning about the Reducer Hook, let’s continue learning about the Effect
    Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Using Effect Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Effect Hook is an important Hook to synchronize your components with external
    systems, such as external APIs or the browser APIs. However, it is often overused
    in React code. If there is no external system involved, you should not use an
    Effect Hook.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of our blog, we are going to implement a way to check whether the
    user has an admin role in the `Logout` component. For simplicity, and to focus
    on the Effect Hook itself, we are simply going to mock this check, but imagine
    that this is being done by an external API.
  prefs: []
  type: TYPE_NORMAL
- en: Remember componentDidMount and componentDidUpdate?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have worked with older React versions before, you have probably used
    the `componentDidMount` and `componentDidUpdate` life cycle methods. For example,
    if we wanted to set the title of a web page to a given prop using React class
    components, we would need to add the following life cycle method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This works fine. However, when the `title` prop updates, the change does not
    get reflected in the title of our web page. To solve this problem, we need to
    define the `componentDidUpdate` life cycle method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'You might have noticed that we are doing the exact same thing twice; therefore,
    we could create a new method to deal with updates to the title, and then call
    it from both life cycle methods. In the following code block, the updated code
    is highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: However, we still need to call `this.updateTitle()` twice. When we update the
    code later on, and, for example, pass an argument to `this.updateTitle()`, we
    always need to remember to pass it to both calls to the function. If we forget
    to update one of the life cycle methods, we might introduce bugs. Additionally,
    we need to add an `if` condition to `componentDidUpdate`, in order to avoid calling
    `this.updateTitle()` when the `title` prop did not change.
  prefs: []
  type: TYPE_NORMAL
- en: From life cycle methods to Effect Hooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the world of Hooks, the `componentDidMount` and `componentDidUpdate` life
    cycle methods are combined in the `useEffect` Hook, which—when not specifying
    a **dependency array**—triggers on every re-render. We will learn more about the
    dependency array in the next sub-section.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, instead of using a class component, we can now define a function component
    with an Effect Hook, which would do the same thing as before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: And that’s all we need to do! The Effect Hook will call the provided function
    every time when the component re-renders.
  prefs: []
  type: TYPE_NORMAL
- en: Since React 19, it is possible to change the title (or any metadata tags) of
    a web page by defining a `<title>` (or `<link>` or `<meta>`) element in any component.
    These elements will then automatically be hoisted up into the `<head>` section.
  prefs: []
  type: TYPE_NORMAL
- en: Triggering an effect only when certain props change
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we want to make sure that our effect function only gets called when the
    `title` prop changes, we can specify which values should trigger the changes,
    as a second argument to the `useEffect` Hook—the dependency array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The dependency array is not just restricted to props; we can use any value
    that is available from inside the component body here, even variables defined
    inside the component and values from other Hooks, such as a State Hook or a Reducer
    Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, using an Effect Hook is much more straightforward than dealing
    with life cycle methods. All we need to specify is which values the Effect Hook
    should depend on. Whenever any of these values change, the effect function automatically
    gets called again.
  prefs: []
  type: TYPE_NORMAL
- en: Triggering an effect only on mount
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we want to replicate the behavior of only adding a `componentDidMount` life
    cycle Hook, without triggering when the props change, we can do this by passing
    an empty array as the second argument to the `useEffect` Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Passing an empty array means that our effect function will only trigger once
    when the component mounts, and it will not trigger when props change. However,
    instead of thinking about the mounting of components, with Hooks, we should think
    about the dependencies of the effects. In this case, the effect does not have
    any dependencies, which means it will only trigger once. If an effect has dependencies
    specified, it will trigger again when any of the dependencies change.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes effects need to be cleaned up when the component unmounts. To do
    so, we can return a function from the Effect Hook. This returned function works
    similarly to the `componentWillUnmount` life cycle method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted code is called the **cleanup function**. The cleanup function
    will be called when the component unmounts and before running the effect again.
    This avoids bugs when, for example, the `updateTime` prop changes. In that case,
    the previous effect will be cleaned up and an interval with the new `updateTime`
    will be defined.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing an Effect Hook in our blog app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have learned how the Effect Hook works, we are going to use it in
    our blog app, to implement a way to check the user role when the user is already
    logged in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s implement an Effect Hook by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter04_1` folder to a new `Chapter04_2` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter04_2` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `src/user/Logout.jsx` and import the `useState` and `useEffect` functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a function that simulates an external API that checks the role
    of a user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the sake of simplicity, we say that any user called `admin` has the `admin`
    role. All others have the `user` role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to define a State Hook for the role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define an Effect Hook that sets the role by calling the “external API”
    and using its response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It is best practice to list all values (and functions) that are used within
    an Effect Hook in the dependency array. This ensures that there are no accidental
    bugs when values that seem static at the moment become dynamic later on. Thankfully,
    the React Hooks ESLint plugin (which is already set up in our project) will warn
    us if we forget to add a dependency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we display the role if a user has a special role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the blog app by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Try logging in with the username `admin`. You will see that the role is now
    being displayed next to the username!
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter04/Chapter04_2`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first learned about actions, reducers, and Reducer Hooks.
    We also learned when we should use Reducer Hooks instead of State Hooks. Then,
    we replaced our existing global State Hook for the `posts` state with a Reducer
    Hook. Next, we learned about Effect Hooks, and how they can be used instead of
    `componentDidMount` and `componentDidUpdate` life cycle methods. Finally, we implemented
    role verification in our blog app by using an Effect Hook.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn about React Context, and how to use
    it with Hooks. Then, we are going to add Context Hooks to our app, to avoid having
    to pass down props over multiple layers of components.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To recap what we have learned in this chapter, try to answer the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the common problems with State Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are actions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are reducers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When should we use a Reducer Hook instead of a State Hook?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which steps are needed to turn a State Hook into a Reducer Hook?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How could we create actions more easily?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the equivalent of Effect Hooks in class components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the advantages of using an Effect Hook, versus class components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the dependency array and how does it work?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can cleanup functions be used with Effect Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in learning more about the concepts that we have learned
    in this chapter, take a look at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Official docs regarding the Reducer Hook: [https://react.dev/reference/react/useReducer](https://react.dev/reference/react/useReducer)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official docs and tips for using Effect Hooks: [https://react.dev/reference/react/hooks#effect-hooks](https://react.dev/reference/react/hooks#effect-hooks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More information on when an Effect Hook should not be used: [https://react.dev/learn/you-might-not-need-an-effect](https://react.dev/learn/you-might-not-need-an-effect)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More information about Redux, a library that offers a more extensive version
    of actions and reducers: [https://redux.js.org](https://redux.js.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/wnXT0](Chapter_04.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_%283%29.png)'
  prefs: []
  type: TYPE_IMG
