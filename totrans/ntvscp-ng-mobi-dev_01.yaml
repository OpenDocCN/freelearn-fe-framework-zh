- en: Get Into Shape with @NgModule
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 @NgModule 进行塑形
- en: In this chapter, we are going to kick things off with some solid project organization
    exercises to prepare us for building an amazing app with NativeScript for Angular.
    We want to give you some insights into a few important and powerful concepts to
    think about as you plan your architecture, to pave your way to a smooth development
    experience with scalability in mind.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从一些扎实的项目组织练习开始，为使用 NativeScript for Angular 构建一个惊人的应用程序做好准备。我们希望向您提供一些见解，让您在规划架构时考虑一些重要且强大的概念，以便在考虑可扩展性的同时，铺就一条顺畅的开发体验之路。
- en: Combining Angular with NativeScript provides a wealth of useful paradigms and
    tools to construct and plan your app. As often said, with great power comes great
    responsibility, and as awesome as this tech combination is to create amazing apps,
    they can also be used for creating an overengineered and difficult to debug app.
    Let's take a few chapters to walk through some exercises you can use to help avoid
    common pitfalls and truly unlock the full potential of this stack.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Angular 与 NativeScript 结合使用提供了大量有用的范例和工具，用于构建和规划您的应用程序。正如常说的那样，权力越大，责任越大，虽然这种技术组合在创建惊人的应用程序方面非常出色，但它们也可以用于创建过度工程化和难以调试的应用程序。让我们用几章的时间来探讨一些可以帮助您避免常见陷阱并真正发挥此堆栈全部潜力的练习。
- en: We will introduce you to Angular's `@NgModule` decorator, which we will use
    exclusively to help organize our app's code into logical units with explicit purpose
    and portability in mind. We will also introduce a few Angular concepts we will
    use in our architecture, such as dependency injectable services. After doing our
    diligence in building a solid foundation to work with, we will rapidly approach
    running our app for the first time towards the end of third chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向您介绍 Angular 的 `@NgModule` 装饰器，我们将专门使用它来帮助将我们的应用程序代码组织成具有明确目的和可移植性的逻辑单元。我们还将介绍一些我们将在我们的架构中使用的一些
    Angular 概念，例如可依赖注入的服务。在为构建一个坚实的基础而努力之后，我们将在第三章末快速接近运行我们的应用程序。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is NativeScript for Angular?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NativeScript for Angular 是什么？
- en: Setting up your native mobile app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置您的原生移动应用程序
- en: Project Organization
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目组织
- en: Architecture planning
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构规划
- en: '`@NgModule` decorator'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@NgModule` 装饰器'
- en: '`@Injectable` decorator'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Injectable` 装饰器'
- en: Breaking your app into modules
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您的应用程序拆分为模块
- en: Mental preparation
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 心理准备
- en: Before diving right into coding, you can greatly enhance the development experience
    for your project by mapping out the various services and features your app needs.
    Doing so will help reduce code duplication, frame your data flow, and lead the
    way for rapid feature development in the future.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在直接进入编码之前，您可以通过规划应用程序所需的各种服务和功能来极大地提高您项目的开发体验。这样做将有助于减少代码重复，构建您的数据流，并为未来的快速功能开发指明方向。
- en: A service is a class that typically handles processing and/or provides data
    to your app. Your usage of these services does not need to know the specifics
    of where the data came from, just that it can ask the service for its purpose
    and it will happen.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 服务是一个通常处理处理和/或为您的应用程序提供数据的类。您对这些服务的使用不需要知道数据的具体来源，只需知道它可以请求服务以实现其目的，并且它就会发生。
- en: The sketch exercise
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘图练习
- en: A good exercise for this is to sketch out a rough idea of one of your app views.
    You may not know what it will look like yet and that's okay; this is purely an
    exercise to think about the user expectations as a first step to guiding your
    thought process into the various sections or modules you need to construct to
    meet those expectations. It will also help you think about the various states
    the app needs to manage.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的练习，可以勾勒出您应用程序视图的一个粗略想法。您可能还不知道它将是什么样子，这没关系；这是一个纯粹的练习，旨在考虑用户期望，作为引导您思考构建满足这些期望所需的各种部分或模块的第一步。它还将帮助您思考应用程序需要管理的各种状态。
- en: Take, for example, the app we are going to build, **TNSStudio** (**Telerik NativeScript**
    (**TNS**))*.* We will dive into more detail of what our app is and what exactly
    it will do in [Chapter 2](part0037.html#1394Q0-289fe2426d594f99a90e4363b2c9c34d),
    *Feature Modules*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以我们即将构建的应用程序为例，**TNSStudio**（**Telerik NativeScript**（**TNS**））*。* 我们将在[第2章](part0037.html#1394Q0-289fe2426d594f99a90e4363b2c9c34d)“功能模块”中深入了解我们的应用程序是什么以及它确切会做什么。
- en: '![](img/00005.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00005.jpeg)'
- en: Starting from top to bottom, we can see a header with a menu button, a logo,
    and a record button. Then, we have a listing of user recorded tracks, each with
    a (re)record button and a solo or mute button.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 从上到下，我们可以看到一个带有菜单按钮、标志和录音按钮的标题。然后，我们有用户录制轨道的列表，每个轨道都有一个（重新）录音按钮和一个静音或取消静音按钮。
- en: 'From this one sketch, we may think about several services the app may need
    to provide:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个草图出发，我们可以考虑应用可能需要提供的一些服务：
- en: A Player Service
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放服务
- en: A Recorder Service
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 录音服务
- en: A Persistent Store service to remember which volume level settings the user
    sets for each track in the recording mix and/or if the user is authenticated
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个持久存储服务，用于记住用户为每个录制轨道设置的音量级别设置，以及用户是否已认证
- en: 'We can also gain some insight into the various states the app may need to manage:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以了解应用可能需要管理的各种状态：
- en: A listing of user recordings/tracks
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户录制/轨道列表
- en: Whether the app is playing audio or not
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无论应用是否正在播放音频
- en: Whether the app is in the recording mode or not
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无论应用是否处于录音模式
- en: Low-level thinking
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 低级思考
- en: It's also advantageous to provide some low-level services that provide a convenient
    API to access things, such as HTTP remote requests and/or logging. Doing so will
    allow you to create unique characteristics that you or your team like to work
    with when interacting with low-level APIs. For instance, maybe your backend API requires
    a unique header to be set in addition to a special authentication header for each
    request. Creating a low-level wrapper around an HTTP service will allow you to
    isolate those unique characteristics and provide a consistent API for your app
    to interact with, to guarantee all the API calls are enhanced with what they need
    in one place.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一些低级服务，提供方便的API来访问事物，例如HTTP远程请求和/或日志记录，这也是有利的。这样做将允许您创建独特的特性，您或您的团队喜欢在与低级API交互时使用。例如，也许您的后端API需要在每个请求的特殊认证头之外设置一个唯一的头。创建一个HTTP服务的低级包装器将允许您隔离这些独特的特性，并为您的应用提供一个一致的API来与之交互，以确保所有API调用都在一个地方增强了它们所需的内容。
- en: Additionally, your team may desire an ability to funnel all the logging code
    to a third-party log analyzer (for debugging or other performance-related metrics).
    Creating low-level wrappers with the lean code around some framework services
    will allow your app to adapt to these potential needs quickly.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您的团队可能希望有一种能力将所有日志代码汇总到第三方日志分析器（用于调试或其他性能相关指标）。通过创建围绕某些框架服务的轻量级包装器，将允许您的应用快速适应这些潜在需求。
- en: Modularize with @NgModule
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用@NgModule模块化
- en: We can then think about breaking these services up into organizational units
    or modules.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以考虑将这些服务拆分成组织单元或模块。
- en: Angular provides us with the `@NgModule` decorator, which will help us define
    what these modules look like and what they provide to our app. In an effort to
    keep our app's bootstrap/launch time as fast as possible, we can organize our
    modules in such a way to allow some service/features to be lazily loaded after
    our app has launched. Bootstrapping one module with a small subset of required
    code that our app needs to launch will help keep this launch phase to a minimum.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Angular为我们提供了`@NgModule`装饰器，它将帮助我们定义这些模块的外观以及它们为我们的应用提供的内容。为了使我们的应用启动/启动时间尽可能快，我们可以以这种方式组织我们的模块，以便在应用启动后可以延迟加载一些服务/功能。通过使用应用启动所需的小部分代码启动一个模块，可以帮助将启动阶段保持最小。
- en: Our app's module breakdown
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们应用模块分解
- en: 'Here''s how we will break down our app organization by module:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将通过模块分解应用组织的方式：
- en: '`CoreModule`: Low-level services, components, and utilities that provide a
    nice foundation layer. Things such as interacting with logging, dialogs, HTTP,
    and other various commonly used services.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CoreModule`：提供低级服务、组件和实用工具，构成一个良好的基础层。例如，与日志记录、对话框、HTTP和其他各种常用服务的交互。'
- en: '`AnalyticsModule`******: Potentially, you could have a module that provides
    various services to handle analytics for your app.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`AnalyticsModule`******：可能，您可以有一个模块提供各种服务来处理您应用的统计分析。'
- en: '`PlayerModule`*****: Provides everything our app needs to play audio.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PlayerModule`*****：提供我们应用播放音频所需的一切。'
- en: '`RecorderModule`*****: Provides everything our app needs to record audio.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RecorderModule`*****：提供我们应用记录音频所需的一切。'
- en: '*(*)*These are considered *Feature Modules.* *(**)*We will omit this module
    from the example in this book but wanted to mention it here for context.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*(*)*这些被认为是**功能模块**。**(**)我们将从本书的示例中省略此模块，但在此处提及以提供上下文。'
- en: The module benefits
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块优势
- en: 'Using a similar organization provides several advantageous things for you and
    your team:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类似的组织结构为您和您的团队提供了几个有利之处：
- en: '**High degree of usability**: By designing a low-level `CoreModule`, you and
    your team have the opportunity to design how you like to work with commonly used
    services, in a unique way, across not only the app you are building now but more
    in the future. You can easily move `CoreModule` into a completely different app
    and gain all the same unique APIs you have designed for this app when working
    with low-level services.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高度易用性**：通过设计低级的`CoreModule`，您和您的团队有机会以独特的方式设计如何与常用服务协同工作，不仅限于您现在正在构建的应用程序，而且更多地关注未来。您可以轻松地将`CoreModule`移动到完全不同的应用程序中，并在处理底层服务时获得为该应用程序设计的所有相同独特API。'
- en: '**Viewing your own app code as a ''Feature Module''**: Doing so will help you
    focus on just the unique abilities your app should provide outside of what the
    `CoreModule` provides as well as reduce the duplication of the code.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将您的应用程序代码视为“功能模块”**：这样做将帮助您专注于应用程序应提供的独特功能，而不仅仅是`CoreModule`提供的功能，同时减少代码的重复。'
- en: '**Encourages and enhances rapid development**: By confining commonly used functionality
    to our `CoreModule`, we relieve the burden of having to worry about those details
    in our feature modules. We can simply inject those services provided by our `CoreModule`
    and use those APIs and never repeat ourselves.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**鼓励并增强快速开发**：通过将常用功能限制在我们的`CoreModule`中，我们减轻了在功能模块中担心这些细节的负担。我们可以简单地注入`CoreModule`提供的服务，并使用这些API，而无需重复。'
- en: '**Maintainability**: In the future, if an underlying detail needs to change
    because of how your app needs to work with a low-level service, it need only be
    changed in one place (in the `CoreModule` service) versus having redundant code
    potentially spread across different sections of your app.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可维护性**：在未来，如果由于您的应用程序需要与底层服务协同工作，需要更改某些底层细节，则只需在`CoreModule`服务中更改一次（而不是在应用程序的不同部分中可能存在的冗余代码中），从而减少代码的重复。'
- en: '**Performance**: Splitting your app into modules will allow you to load only
    the modules you need at startup, then later, lazily load other features on demand.
    Ultimately, this leads to a faster app startup time.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：将应用程序拆分为模块将允许您在启动时仅加载所需的模块，然后在以后按需懒加载其他功能。最终，这将导致更快的应用程序启动时间。'
- en: Considerations?
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑因素？
- en: You may be thinking, why not just combine the player/recorder modules together
    into one module?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想，为什么不将播放器/录制器模块合并成一个模块呢？
- en: '**Answer:** Our app is only going to allow recording when a registered user
    is authenticated. Therefore, it is beneficial to consider the potential of authenticated
    contexts and what features are only accessible to authenticated users (if any).
    This will allow us to further fine tune the loading performance of our app to
    what is needed when it''s needed only.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**回答**：我们的应用程序只允许在注册用户认证时进行录制。因此，考虑认证上下文的可能性以及哪些功能仅对认证用户（如果有的话）可访问是有益的。这将使我们能够进一步微调应用程序的加载性能，使其在需要时才进行。'
- en: Getting started
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用
- en: 'We are going to assume that you have NativeScript installed properly on your
    computer. If you do not, please follow the install instructions at [https://nativescript.org](https://nativescript.org).
    Once installed, we need to create our app framework using a shell prompt:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将假设您已经在计算机上正确安装了NativeScript。如果没有，请按照[https://nativescript.org](https://nativescript.org)上的安装说明进行操作。安装完成后，我们需要使用shell提示符创建我们的应用程序框架：
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `tns` stands for Telerik NativeScript**.** It is the primary **command-line
    user interface** (**CLI**) tool you will use to create, build, deploy, and test
    any NativeScript app.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`tns`代表Telerik NativeScript**。**它是您将用于创建、构建、部署和测试任何NativeScript应用程序的主要**命令行用户界面**（CLI）工具。'
- en: 'This command will create a new folder called `TNSStudio`. Inside is your primary
    project folder including everything required to build an app. It will contain
    everything relating to this project. After the project folder has been created,
    you need to do one more thing to have a fully runnable app. That''s, adds the
    runtimes for Android and/or iOS:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将创建一个名为`TNSStudio`的新文件夹。其中包含您的主要项目文件夹，包括构建应用程序所需的一切。它将包含与该项目相关的所有内容。在创建项目文件夹后，您还需要做一件事才能拥有一个完全可运行的应用程序。那就是，添加Android和/或iOS的运行时：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you are on a Macintosh, you can build for both iOS and Android. If you are
    running on a Linux or Windows device, Android is the only platform you can compile
    for on your local machine.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Macintosh，你可以为iOS和Android构建。如果你在Linux或Windows设备上运行，你可以在本地机器上编译的仅限Android平台。
- en: Create our module shells
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的模块外壳
- en: 'Without writing the implementation of our services yet, we can define what
    our `CoreModule` will generally look like with `NgModule` by starting to define
    what it should provide:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在还没有编写我们服务的实现之前，我们可以通过开始定义它应该提供的内容来使用`NgModule`定义我们的`CoreModule`大致看起来会是什么样子：
- en: 'Let''s create `app/modules/core/core.module.ts`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`app/modules/core/core.module.ts`：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Injectable services
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可注入服务
- en: 'Now, let''s create the boilerplate we need for our services. Note here that
    the injectable decorator is imported from Angular to declare that our service
    will be made available through Angular''s **Dependency Injection** (**DI**) system,
    which allows these services to be injected into any class constructor that may
    need it. The DI system provides a nice way to guarantee that these services will
    be instantiated as singletons and shared across our app. It''s also worth noting
    that we could alternatively provide these services on the component level if we
    didn''t want them to be singletons and instead have unique instances created for
    certain branches of our component tree, which will make up our user interface.
    In this case, though, we want these created as singletons. We will be adding the
    following to our `CoreModule`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建我们服务所需的样板代码。注意，这里的injectable装饰器是从Angular导入的，用于声明我们的服务将通过Angular的**依赖注入**（**DI**）系统提供，该系统允许将这些服务注入到可能需要它们的任何类构造函数中。DI系统提供了一种很好的方式来保证这些服务将被实例化为单例并在我们的应用中共享。还值得注意的是，如果我们不想它们是单例，而是为组件树中的某些分支创建唯一的实例，我们可以将这些服务提供在组件级别上。在这种情况下，尽管如此，我们希望它们被创建为单例。我们将向我们的`CoreModule`添加以下内容：
- en: '`LogService`: Service to funnel all our console logging through.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LogService`：服务用于将所有我们的控制台日志引导通过。'
- en: '`DatabaseService`: Service to handle any persistent data our app needs. For
    our app, we will implement the native mobile device**''**s storage options, such
    as application settings, as a simple key/value store. However, you could implement
    more advanced storage options here, such as remote storage through Firebase for
    example.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DatabaseService`：用于处理我们应用需要的任何持久数据的服务。对于我们的应用，我们将实现原生移动设备的存储选项，例如应用程序设置，作为一个简单的键/值存储。然而，你在这里可以实现更高级的存储选项，例如通过Firebase等远程存储。'
- en: 'Create `app/modules/core/services/log.service.ts`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`app/modules/core/services/log.service.ts`：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Also, create `app/modules/core/services/database.service.ts`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，创建`app/modules/core/services/database.service.ts`：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Consistency and standards
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一致性和标准
- en: 'For consistency and to reduce the length of our imports as well as prepare
    for better scalability, let''s also create an `index.ts` file in `app/modules/core/services`,
    which will export a `const` collection of our services as well as export these
    services (in an alphabetical order to keep things tidy):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持一致性、减少我们导入的长度以及为更好的可扩展性做准备，让我们也在`app/modules/core/services`中创建一个`index.ts`文件，该文件将导出我们的服务集合以及导出这些服务（按字母顺序排列以保持整洁）：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We will follow a similar pattern of the organization throughout the book.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在整本书中遵循类似的组织模式。
- en: Finalizing CoreModule
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成CoreModule
- en: 'We can now modify our `CoreModule` to use what we have created. We will take
    this opportunity to also import the `NativeScriptModule` which our app will need
    to work with other NativeScript for Angular features which we will want accessible
    globally for our app. Since we know we will want those features, globally, we
    can also specify that they are exported so when we import and use our `CoreModule`,
    we won''t need to worry about importing `NativeScriptModule` elsewhere. Here''s
    what our `CoreModule` modifications should look like:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以修改我们的`CoreModule`以使用我们已创建的内容。我们将借此机会也导入我们的应用将需要用于与其他NativeScript for Angular功能协同工作的`NativeScriptModule`，我们希望这些功能对应用来说是全局可访问的。既然我们知道我们希望这些功能是全局的，我们也可以指定它们是导出的，这样当我们导入和使用我们的`CoreModule`时，我们就不必担心在其他地方导入`NativeScriptModule`。以下是我们的`CoreModule`修改应该看起来像什么：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We now have a good starting base for our `CoreModule`, the details of which
    we will implement in the following chapters.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为我们的`CoreModule`建立了一个良好的起点，其详细内容将在接下来的章节中实现。
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We created a solid foundation for our app in this chapter. You learned how to
    think about your app's architecture in terms of modules. You also learned how
    to utilize Angular's `@NgModule` decorator to frame out these modules. And finally,
    we now have a great base architecture to work from to build our app on top of.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们为我们的应用程序打下了坚实的基础。你学习了如何从模块的角度思考你的应用程序架构。你还学习了如何利用Angular的`@NgModule`装饰器来构建这些模块。最后，我们现在有一个很好的基础架构，可以在此基础上构建我们的应用程序。
- en: Now that you have some of the key concepts under your belt, we can now move
    onto the heart of our app, the feature modules. Let's dive into the main features
    of our app to continue constructing our service layers in [Chapter 2](part0037.html#1394Q0-289fe2426d594f99a90e4363b2c9c34d),
    *Feature Modules*. We will soon be creating some views for our app and running
    the app on iOS and Android in [Chapter 3](part0046.html#1BRPS0-289fe2426d594f99a90e4363b2c9c34d),
    *Our First View via Component Building*.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经掌握了一些关键概念，我们现在可以进入我们应用程序的核心部分，即功能模块。让我们深入了解我们应用程序的主要功能，以继续在[第2章](part0037.html#1394Q0-289fe2426d594f99a90e4363b2c9c34d)，“功能模块”中构建我们的服务层。我们将在[第3章](part0046.html#1BRPS0-289fe2426d594f99a90e4363b2c9c34d)，“通过组件构建我们的第一个视图”中为我们的应用程序创建一些视图，并在iOS和Android上运行应用程序。
