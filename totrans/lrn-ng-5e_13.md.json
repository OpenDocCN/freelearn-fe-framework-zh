["```js\ndescribe('Calculator', () => {\n  it('should add two numbers', () => {\n    expect(1+1).toBe(2);\n  });\n}); \n```", "```js\ndescribe('Calculator', () => {\n  it('should add two numbers', () => {\n    expect(1+1).toBe(2);\n  });\n  **it('should subtract two numbers', () => {**\n    **expect(1-1).toBe(0);**\n  **});**\n}); \n```", "```js\ndescribe('Calculator', () => {\n  let total: number;\n  **beforeEach(() => total = 1);**\n  it('should add two numbers', () => {\n    total = total + 1;\n    expect(total).toBe(2);\n  });\n  it('should subtract two numbers', () => {\n    total = total - 1;\n    expect(total).toBe(0);\n  });\n  **afterEach(() => total = 0);**\n}); \n```", "```js\nbeforeEach(async () => {\n  await TestBed.configureTestingModule({\n    imports: [AppComponent],\n  }).compileComponents();\n}); \n```", "```js\nit('should create the app', () => {\n  const fixture = TestBed.createComponent(AppComponent);\n  const app = fixture.componentInstance;\n  expect(app).toBeTruthy();\n}); \n```", "```js\nit(`should have the 'my-app' title`, () => {\n  const fixture = TestBed.createComponent(AppComponent);\n  const app = fixture.componentInstance;\n  expect(app.title).toEqual('my-app');\n}); \n```", "```js\nit('should render title', () => {\n  const fixture = TestBed.createComponent(AppComponent);\n  fixture.detectChanges();\n  const compiled = fixture.nativeElement as HTMLElement;\n  expect(compiled.querySelector('h1')?.textContent).toContain('Hello, my-app');\n}); \n```", "```js\nExecuted 3 of 3 SUCCESS (0.117 secs / 0.044 secs)\nTOTAL: 3 SUCCESS \n```", "```js\nimport { Component, OnInit } from '@angular/core';\nimport { StubService } from '../stub.service';\n@Component({\n  selector: 'app-stub',\n  template: '<span>{{ msg }}</span>'\n})\nexport class StubComponent implements OnInit {\n  msg = '';\n  constructor(private stubService: StubService) {}\n  ngOnInit(): void {\n    this.msg = this.stubService.isBusy\n      ? this.stubService.name + ' is on mission'\n      : this.stubService.name + ' is available';\n  }\n} \n```", "```js\nconst serviceStub: Partial<StubService> = {\n  name: 'Boothstomper'\n}; \n```", "```js\nawait TestBed.configureTestingModule({\n  imports: [StubComponent],\n  **providers: [**\n    **{ provide: StubService, useValue: serviceStub }**\n  **]**\n})\n.compileComponents(); \n```", "```js\ndescribe('status', () => {\n  let service: StubService;\n  beforeEach(() => {\n    service = TestBed.inject(StubService);\n  })\n}); \n```", "```js\ndescribe('status', () => {\n  let service: StubService;\n  **let msgDisplay: HTMLElement;**\n  beforeEach(() => {\n    service = TestBed.inject(StubService);\n    **msgDisplay = fixture.nativeElement.****querySelector****(****'span'****);**\n  })\n  **it('should be on a mission', () => {**\n**service.isBusy = true;**\n**fixture.detectChanges();**\n**expect(msgDisplay.textContent).toContain('is on mission');**\n**});**\n  **it('should be available', () => {**\n    **service.isBusy = false;**\n    **fixture.detectChanges();**\n    **expect(msgDisplay.textContent).toContain('is available');**\n  **});**\n}); \n```", "```js\nawait TestBed.configureTestingModule({\n  imports: [StubComponent],\n  providers: [\n    { provide: StubService, useValue: serviceStub }\n  ]\n})\n**.overrideComponent(StubComponent, {**\n  **set: {**\n    **providers: [**\n      **{ provide: StubService, useValue: serviceStub }**\n    **]**\n  **}**\n**})**\n.compileComponents(); \n```", "```js\n@Component({\n  selector: 'app-stub',\n  template: `\n    <span>{{ msg }}</span>\n    **<app-child></app-child>**\n  `\n}) \n```", "```js\nawait TestBed.configureTestingModule({\n  imports: [StubComponent],\n  providers: [\n    { provide: StubService, useValue: serviceStub }\n  ],\n  **imports: [ChildComponent]**\n}) \n```", "```js\n@Component({ selector: 'app-child', template: '' })\nclass ChildStubComponent {} \n```", "```js\nawait TestBed.configureTestingModule({\n  imports: [StubComponent],\n  providers: [\n    { provide: StubService, useValue: serviceStub },\n  ],\n  **schemas: [NO_ERRORS_SCHEMA]**\n}) \n```", "```js\nimport { Component, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\n@Component({\n  selector: 'app-spy',\n  template: '{{ caption }}'\n})\nexport class SpyComponent implements OnInit {\n  caption = '';\n  constructor(private title: Title) {}\n  ngOnInit(): void {\n    this.title.setTitle('My Angular app');\n    this.caption = this.title.getTitle();\n  }\n} \n```", "```js\nit('should set the title', () => {\n  const title = TestBed.inject(Title);\n  const spy = spyOn(title, 'setTitle');\n  component.ngOnInit();\n  expect(spy).toHaveBeenCalledWith('My Angular app');\n}); \n```", "```js\n    const titleSpy = jasmine.createSpyObj('Title', [\n      'getTitle', 'setTitle'\n    ]); \n    ```", "```js\n    titleSpy.getTitle.and.returnValue('My title'); \n    ```", "```js\n    await TestBed.configureTestingModule({\n      imports: [SpyComponent],\n      **providers: [**\n        **{ provide: Title, useValue: titleSpy }**\n      **]**\n    })\n    .compileComponents(); \n    ```", "```js\nit('should get the title', async () => {\n  const titleSpy = jasmine.createSpyObj('Title', [\n    'getTitle', 'setTitle'\n  ]);    \n  titleSpy.getTitle.and.returnValue('My title');\n  await TestBed.configureTestingModule({\n    imports: [SpyComponent],\n    providers: [\n      { provide: Title, useValue: titleSpy }\n    ]\n  })\n  .compileComponents();    \n\n  const fixture = TestBed.createComponent(SpyComponent);\n  fixture.detectChanges();\n\n  expect(fixture.nativeElement.textContent).toContain('My title');\n}); \n```", "```js\nimport { AsyncPipe } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AsyncService } from '../async.service';\n@Component({\n  selector: 'app-async',\n  imports: [AsyncPipe],\n  template: `\n    @for(item of items$ | async; track item) {\n      <p>{{ item }}</p>\n    }\n  `\n})\nexport class AsyncComponent implements OnInit {\n  items$: Observable<string[]> | undefined;\n  constructor(private asyncService: AsyncService) {}\n  ngOnInit(): void {\n    this.items$ = this.asyncService.getItems();\n  }\n} \n```", "```js\ngetItems(): Observable<string[]> {\n  return of(items).pipe(delay(500));\n} \n```", "```js\nit('should get data with waitForAsync', waitForAsync(async() => {\n  fixture.detectChanges();\n  await fixture.whenStable();\n  fixture.detectChanges();\n\n  const itemDisplay: HTMLElement[] = fixture.nativeElement.querySelectorAll('p');\n  expect(itemDisplay.length).toBe(2);\n})); \n```", "```js\nit('should get items with fakeAsync', fakeAsync(() => {\n  fixture.detectChanges();\n  tick(500);\n  fixture.detectChanges();\n\n  const itemDisplay: HTMLElement[] = fixture.nativeElement.querySelectorAll('p');\n  expect(itemDisplay.length).toBe(2);\n})); \n```", "```js\nimport { Component, input, output } from '@angular/core';\n@Component({\n  selector: 'app-bindings',\n  template: `\n    <p>{{ title() }}</p>\n    <button (click)=\"liked.emit()\">Like!</button>\n  `\n})\nexport class BindingsComponent {\n  title = input('');\n  liked = output();\n} \n```", "```js\n@Component({\n  imports: [BindingsComponent],\n  template: `\n    <app-bindings [title]=\"testTitle\" (liked)=\"isFavorite = true\"></app-bindings>\n  `\n})\nexport class TestHostComponent {\n  testTitle = 'My title';\n  isFavorite = false;\n} \n```", "```js\ndescribe('BindingsComponent', () => {\n  let component: **TestHostComponent**;\n  let fixture: ComponentFixture<**TestHostComponent**>;\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [**TestHostComponent**]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(**TestHostComponent**);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n}); \n```", "```js\nit('should display the title', () => {\n  const titleDisplay: HTMLElement = fixture.nativeElement.querySelector('p');\n  expect(titleDisplay.textContent).toEqual(component.testTitle);\n}); \n```", "```js\nit('should emit the liked event', () => {\n  const button: HTMLButtonElement = fixture.nativeElement.querySelector('button');\n  button.click();\n  expect(component.isFavorite).toBeTrue();\n}); \n```", "```js\nit('should emit the liked event using debugElement', () => {\n  const buttonDe = fixture.debugElement.query(By.css('button'));\n  buttonDe.triggerEventHandler('click');\n  expect(component.isFavorite).toBeTrue();\n}); \n```", "```js\nimport { Component, input, output } from '@angular/core';\n**import { MatButton } from '@angular/material/button';**\n@Component({\n  selector: 'app-bindings',\n  imports: [**MatButton**],\n  template: `\n    <p>{{ title() }}</p>\n    <button **mat-button** (click)=\"liked.emit()\">Like!</button>\n  `\n}) \n```", "```js\nimport { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';\nimport { MatButtonHarness } from '@angular/material/button/testing'; \n```", "```js\nit('should emit the liked event using harness', async () => {\n  const loader = TestbedHarnessEnvironment.loader(fixture);\n  const buttonHarness = await loader.getHarness(MatButtonHarness);\n  await buttonHarness.click();\n  expect(component.isFavorite).toBeTrue();\n}); \n```", "```js\nimport { TestBed } from '@angular/core/testing';\nimport { AsyncService } from './async.service';\ndescribe('AsyncService', () => {\n  let service: AsyncService;\n  beforeEach(() => {\n    TestBed.configureTestingModule({});\n    service = TestBed.inject(AsyncService);\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n}); \n```", "```js\nit('should set items', () => {\n  const result = service.setItems('Camera');\n  expect(result.length).toBe(3);\n}); \n```", "```js\nit('should get items', (done: DoneFn) => {\n  service.getItems().subscribe(items => {\n    expect(items.length).toBe(2);\n    done();\n  });\n}); \n```", "```js\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n@Injectable({\n  providedIn: 'root'\n})\nexport class DepsService {\n  constructor(private http: HttpClient) { }\n  getItems() {\n    return this.http.get('http://some.url');\n  }\n  addItem(item: string) {\n    return this.http.post('http://some.url', { name: item });\n  }\n} \n```", "```js\nimport { TestBed } from '@angular/core/testing';\nimport { provideHttpClient } from '@angular/common/http';\n**import { HttpTestingController, provideHttpClientTesting } from '@angular/common/http/testing';**\nimport { DepsService } from './deps.service';\ndescribe('DepsService', () => {\n  let service: DepsService;\n  **let httpTestingController: HttpTestingController;**\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      **providers: [**\n        provideHttpClient(),\n        **provideHttpClientTesting()**\n      **]**\n    });\n    service = TestBed.inject(DepsService);\n    **httpTestingController = TestBed.inject(HttpTestingController);**\n  });\n}); \n```", "```js\nit('should get items', () => {\n  service.getItems().subscribe();\n  const req = httpTestingController.expectOne('http://some.url');\n  expect(req.request.method).toBe('GET');\n}); \n```", "```js\nit('should add an item', () => {\n  service.addItem('Camera').subscribe();\n  const req = httpTestingController.expectOne('http://some.url');\n  expect(req.request.method).toBe('POST');\n  expect(req.request.body).toEqual({\n    name: 'Camera'\n  });\n}); \n```", "```js\nafterEach(() => {\n  httpTestingController.verify();\n}); \n```", "```js\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'list'\n})\nexport class ListPipe implements PipeTransform {\n  transform(value: string): string[] {\n    return value.split(',');\n  }\n} \n```", "```js\nit('should return an array', () => {\n  const pipe = new ListPipe();\n  expect(pipe.transform('A,B,C')).toEqual(['A', 'B', 'C']);\n}); \n```", "```js\nimport { Directive, ElementRef } from '@angular/core';\n@Directive({\n  selector: '[appCopyright]'\n})\nexport class CopyrightDirective {\n  constructor(el: ElementRef) {\n    const currentYear = new Date().getFullYear();\n    const targetEl: HTMLElement = el.nativeElement;\n    targetEl.classList.add('copyright');\n    targetEl.textContent = `Copyright ©${currentYear} All Rights Reserved`;\n  }  \n} \n```", "```js\n@Component({\n  imports: [CopyrightDirective],\n  template: '<span appCopyright></span>'\n})\nclass TestHostComponent { } \n```", "```js\ndescribe('CopyrightDirective', () => {\n  let container: HTMLElement;\n  beforeEach(() => {\n    const fixture = TestBed.configureTestingModule({\n      imports: [TestHostComponent]\n    })\n    .createComponent(TestHostComponent);\n    container = fixture.nativeElement.querySelector('span');\n  });\n  it('should have copyright class', () => {\n    expect(container.classList).toContain('copyright');\n  });\n  it('should display copyright details', () => {\n    expect(container.textContent).toContain(new Date().getFullYear().toString());\n  });\n}); \n```", "```js\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators, ReactiveFormsModule } from '@angular/forms';\n@Component({\n  selector: 'app-search',\n  imports: [ReactiveFormsModule],\n  template: `\n    <form [formGroup]=\"searchForm\" (ngSubmit)=\"search()\">\n      <input type=\"text\" formControlName=\"searchText\">\n      <button type=\"submit\" [disabled]=\"searchForm.invalid\">Search</button>\n    </form>\n  `\n})\nexport class SearchComponent {\n  searchForm = new FormGroup({\n    searchText: new FormControl('', Validators.required)\n  });\n  search() {\n    if(this.searchForm.valid) {\n      console.log('You searched for: ' + this.searchForm.controls.searchText.value);\n    }\n  }\n} \n```", "```js\nawait TestBed.configureTestingModule({\n  imports: [SearchComponent, **ReactiveFormsModule**]\n})\n.compileComponents(); \n```", "```js\nit('should set the searchText', () => {\n  const input: HTMLInputElement = fixture.nativeElement.querySelector('input');\n  input.value = 'Angular';\n  input.dispatchEvent(new CustomEvent('input'));\n  expect(component.searchForm.controls.searchText.value).toBe('Angular');\n}); \n```", "```js\nit('should disable search button', () => {\n  const button: HTMLButtonElement = fixture.nativeElement.querySelector('button');\n  component.searchForm.controls.searchText.setValue('');\n  expect(button.disabled).toBeTrue();\n});\nit('should log to the console', () => {\n  const button: HTMLButtonElement = fixture.nativeElement.querySelector('button');\n  const spy = spyOn(console, 'log');\n  component.searchForm.controls.searchText.setValue('Angular');\n  fixture.detectChanges();\n  button.click();\n  expect(spy).toHaveBeenCalledWith('You searched for: Angular');\n}); \n```", "```js\nclass Page {\n  get searchText() { return this.query<HTMLInputElement>('input'); }\n  get submitButton() { return this.query<HTMLButtonElement>('button'); }\n  private query<T>(selector: string): T {\n    return fixture.nativeElement.querySelector(selector);\n  }\n} \n```", "```js\nimport { Routes } from '@angular/router';\nimport { RoutedComponent } from './routed/routed.component';\nexport const routes: Routes = [\n  { path: 'routed', component: RoutedComponent }\n]; \n```", "```js\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'app-routed',\n  template: '<span>{{ title }}</span>'\n})\nexport class RoutedComponent {\n  title = 'My routed component';\n} \n```", "```js\nimport { RouterTestingHarness } from '@angular/router/testing'; \n```", "```js\nbeforeEach(async () => {\n  await TestBed.configureTestingModule({\n    **providers: [provideRouter(routes)]**\n  })\n  .compileComponents();\n\n  fixture = TestBed.createComponent(RoutedComponent);\n  component = fixture.componentInstance;\n  fixture.detectChanges();\n}); \n```", "```js\nit('should display a span element', async () => {\n  const harness = await RouterTestingHarness.create();\n  await harness.navigateByUrl('/routed');\n  expect(harness.routeNativeElement?.querySelector('span')?.textContent).toBe('My routed component');\n}); \n```", "```js\nimport { Component } from '@angular/core';\n**import { Router } from '@angular/router';**\n@Component({\n  selector: 'app-routed',\n  template: '<span>{{ title }}</span>'\n})\nexport class RoutedComponent {\n  title = 'My routed component';\n  **constructor(private router: Router) {}**\n  **goBack() {**\n    **this.router.navigate(['/']);**\n  **}**\n} \n```", "```js\nit('should navigate to the root path', () => {\n  component.goBack();\n  expect(TestBed.inject(Router).url).toBe('/');\n}); \n```", "```js\nimport { inject } from '@angular/core';\nimport { CanActivateFn, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\nexport const authGuard: CanActivateFn = () => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  if (authService.isLoggedIn) {\n    return true;\n  }\n  return router.parseUrl('/');\n}; \n```", "```js\nimport { Injectable } from '@angular/core';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  isLoggedIn = false;\n} \n```", "```js\nimport { TestBed } from '@angular/core/testing';\nimport { CanActivateFn } from '@angular/router';\nimport { authGuard } from './auth.guard';\ndescribe('authGuard', () => {\n  const executeGuard: CanActivateFn = (...guardParameters) => \n      TestBed.runInInjectionContext(() => authGuard(...guardParameters));\n  beforeEach(() => {\n    TestBed.configureTestingModule({});\n  });\n  it('should be created', () => {\n    expect(executeGuard).toBeTruthy();\n  });\n}); \n```", "```js\n    import {\n      **ActivatedRouteSnapshot**,\n      CanActivateFn,\n      **Router,**\n      **RouterStateSnapshot**\n    } from '@angular/router'; \n    ```", "```js\n    import { AuthService } from './auth.service'; \n    ```", "```js\n    let authService: AuthService;\n    let routerSpy: jasmine.SpyObj<Router>; \n    ```", "```js\n    beforeEach(() => {\n      **routerSpy = jasmine.createSpyObj('Router', ['parseUrl']);**\n      TestBed.configureTestingModule({\n        **providers: [**\n          **{ provide: Router, useValue: routerSpy }**\n        **]**\n      });\n      **authService = TestBed.inject(AuthService);**\n    }); \n    ```", "```js\n    it('should return true', () => {\n      authService.isLoggedIn = true;\n      expect(executeGuard({} as ActivatedRouteSnapshot, {} as RouterStateSnapshot)).toBeTrue();\n    }); \n    ```", "```js\n    it('should redirect', () => {\n      authService.isLoggedIn = false;\n      executeGuard({} as ActivatedRouteSnapshot, {} as RouterStateSnapshot);\n      expect(routerSpy.parseUrl).toHaveBeenCalledWith('/');\n    }); \n    ```", "```js\nimport { ResolveFn } from '@angular/router';\nimport { AsyncService } from './async.service';\nimport { inject } from '@angular/core';\nexport const itemsResolver: ResolveFn<string[]> = () => {\n  const asyncService = inject(AsyncService);\n  return asyncService.getItems();\n}; \n```", "```js\nimport { TestBed } from '@angular/core/testing';\nimport { ResolveFn } from '@angular/router';\nimport { itemsResolver } from './items.resolver';\ndescribe('itemsResolver', () => {\n  const executeResolver: ResolveFn<boolean> = (...resolverParameters) => \n      TestBed.runInInjectionContext(() => itemsResolver(...resolverParameters));\n  beforeEach(() => {\n    TestBed.configureTestingModule({});\n  });\n  it('should be created', () => {\n    expect(executeResolver).toBeTruthy();\n  });\n}); \n```", "```js\n    import {\n      **ActivatedRouteSnapshot**,\n      ResolveFn,\n      **RouterStateSnapshot**\n    } from '@angular/router'; \n    ```", "```js\n    import { Observable } from 'rxjs'; \n    ```", "```js\n    const executeResolver: ResolveFn<**string[]**> = (...resolverParameters) => \n        TestBed.runInInjectionContext(() => itemsResolver(...resolverParameters)); \n    ```", "```js\n    it('should return items', () => {\n      (executeResolver({} as ActivatedRouteSnapshot, {} as RouterStateSnapshot) as Observable<string[]>).subscribe(items => {\n        expect(items).toEqual(['Microphone', 'Keyboard']);\n      })\n    }); \n    ```"]