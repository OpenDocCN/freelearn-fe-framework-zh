- en: Building Monolithic Web Applications with JHipster
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JHipster 构建 Monolithic Web 应用程序
- en: Let's get into action and build a production-grade web application using JHipster. Before we
    start, we need a use case. We will be building an e-commerce web application that
    manages products, customers, and their orders and invoices. The web application
    will use a MySQL database for production and will have an Angular front end. The
    UI for the actual shopping website will be different from the back office features,
    which will only be available for employees who have an administrator role. For
    this exercise, we will only be building a simple UI for the client-facing part.
    We will talk about other option as we go through this chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始行动，使用 JHipster 构建一个生产级别的 Web 应用程序。在我们开始之前，我们需要一个用例。我们将构建一个电子商务 Web 应用程序，该应用程序管理产品、客户及其订单和发票。Web
    应用程序将使用 MySQL 数据库进行生产，并将具有 Angular 前端。实际购物网站的 UI 将与后台功能不同，后台功能仅对具有管理员角色的员工可用。在这个练习中，我们只为面向客户的部分构建一个简单的
    UI。我们将在本章中讨论其他选项。
- en: 'In this chapter, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: See how to create a monolithic web application using JHipster
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看如何使用 JHipster 创建单体 Web 应用程序
- en: Walk through important aspects of the generated code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解生成的代码的重要方面
- en: See the security aspects of the generated application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看生成的应用程序的安全方面
- en: See how to run the application and tests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看如何运行应用程序和测试
- en: See the generated frontend screens
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看生成的前端屏幕
- en: See the tools included that will ease further development
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看包含的工具，这些工具将简化进一步的开发
- en: This chapter will require the use of a terminal (command prompt on windows)
    app throughout. You can the see previous chapter for more info about that.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将需要在整个过程中使用终端（Windows 上的命令提示符）应用程序。您可以在上一章中查看更多关于此的信息。
- en: Application generation
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序生成
- en: Before we start generating the application, we need to prepare our workspace
    as this workspace will be used throughout this book, and you will be creating
    many Git branches on this workspace as we proceed.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始生成应用程序之前，我们需要准备我们的工作空间，因为这个工作空间将贯穿整本书，您将在该工作空间上创建许多 Git 分支。
- en: Visit [http://rogerdudler.github.io/git-guide/](http://rogerdudler.github.io/git-guide/)
    for a quick reference guide on Git commands.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [http://rogerdudler.github.io/git-guide/](http://rogerdudler.github.io/git-guide/)
    以获取 Git 命令的快速参考指南。
- en: Step 1 –  preparing the workspace
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 步 – 准备工作空间
- en: 'Let''s create a new folder for the workspace. Create a folder called `e-commerce-app`
    and from the terminal, navigate to the folder:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为工作空间创建一个新的文件夹。创建一个名为 `e-commerce-app` 的文件夹，并在终端中导航到该文件夹：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, create a new folder for our application; let''s call it `online-store`
    and navigate to it:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为我们的应用程序创建一个新的文件夹；让我们称它为 `online-store` 并导航到它：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, we are ready to invoke JHipster. Let's first make sure everything is ready
    by running the `jhipster --version` command. It should print a globally installed
    JHipster version, otherwise you'll need to follow the instructions from the previous
    chapter to set it up.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好调用 JHipster。让我们首先确保一切准备就绪，通过运行 `jhipster --version` 命令。它应该打印一个全局安装的
    JHipster 版本，否则您需要遵循上一章中的说明来设置它。
- en: It is always better to use the latest versions of the tools as they might include
    important bug fixes. You can upgrade JHipster anytime using the command `yarn
    global upgrade generator-jhipster`
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 总是使用最新版本的工具会更好，因为它们可能包含重要的错误修复。您可以使用命令 `yarn global upgrade generator-jhipster`
    任何时间升级 JHipster。
- en: Step 2 – generating code using JHipster
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 步 – 使用 JHipster 生成代码
- en: 'Initialize JHipster by running the `jhipster` command into the terminal, which
    will produce the following output:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端中运行 `jhipster` 命令初始化 JHipster，这将产生以下输出：
- en: '![](img/55b08066-55d6-41fb-aa8b-894b67431c32.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/55b08066-55d6-41fb-aa8b-894b67431c32.png)'
- en: 'JHipster will ask a number questions to get input about different options which
    are required. The first question is about the application type that we want, and
    we are presented with the following four options:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster 将提出一系列问题以获取关于不同选项的输入，这些选项是必需的。第一个问题是关于我们想要的程序类型，我们提供了以下四个选项：
- en: '**Monolithic application**: As the name suggests, it creates a monolithic web
    application with a Spring Boot-based backend and an SPA frontend.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单体应用程序**：正如其名所示，它创建了一个基于 Spring Boot 后端和 SPA 前端的单体 Web 应用程序。'
- en: '**Microservice application**: This creates a Spring Boot microservice without
    any frontend, and is designed to work with a JHipster microservice architecture.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务应用程序**：这创建了一个不带任何前端且设计用于与 JHipster 微服务架构一起工作的 Spring Boot 微服务。'
- en: '**Microservice gateway**: This creates a Spring Boot application very similar
    to the monolithic application but geared towards a microservice architecture with
    additional configurations. It features an SPA frontend.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务网关**：这创建了一个与单体应用非常相似的Spring Boot应用，但针对微服务架构进行了额外的配置。它具有SPA前端。'
- en: '**JHipster UAA server**: This creates an OAuth2 User authentication and Authorization
    service. This will not feature any frontend code and is designed to be used in
    a JHipster microservice architecture.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JHipster UAA服务器**：这创建了一个OAuth2用户身份验证和授权服务。它不会包含任何前端代码，并设计用于在JHipster微服务架构中使用。'
- en: We will choose the **monolithic application** for our use case. We will talk
    and look at the other options in detail in [Chapter 8](673932d7-7927-4a12-8c02-86197cc8d3aa.xhtml), *Introduction
    to Microservice Server-Side Technologies*, of this book.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为我们的用例选择**单体应用**。我们将在本书的[第8章](673932d7-7927-4a12-8c02-86197cc8d3aa.xhtml)，“微服务服务器端技术简介”中详细讨论其他选项。
- en: Run `jhipster --help` to see all available commands. Run `jhipster <command>
    --help` to see help information for a specific command; for example, `jhipster
    app --help` will display help information for the main app generation process.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`jhipster --help`以查看所有可用命令。运行`jhipster <command> --help`以查看特定命令的帮助信息；例如，`jhipster
    app --help`将显示主应用生成过程的帮助信息。
- en: Server-side options
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端选项
- en: 'The generator will now start asking us about the server side options that we
    need. Let''s go through them one by one:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器现在将开始询问我们关于服务器端选项的需求。让我们逐一了解它们：
- en: '**Question 1**: This prompt asks for a base name for the application, which
    is used for creating the main class file names, database names, and so on. By
    default, JHipster will suggest the current directory name if it doesn''t contain
    any special characters in the name. Let''s name our application as `store`. Please
    note that the files will be created in the current directory you are in:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题1**：这个提示要求我们为应用提供一个基本名称，该名称用于创建主类文件名、数据库名等。默认情况下，如果当前目录名不包含任何特殊字符，JHipster将建议使用当前目录名。让我们将我们的应用命名为“store”。请注意，文件将在你所在的当前目录中创建：'
- en: '![](img/6c95f513-f616-4b4c-87fc-3181fcc65a1e.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6c95f513-f616-4b4c-87fc-3181fcc65a1e.png)'
- en: '**Question 2**: This prompt asks for a Java package name. Let''s choose `com.mycompany.store`:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题2**：这个提示要求我们选择一个Java包名。让我们选择`com.mycompany.store`：'
- en: '![](img/12e38392-dbee-4676-8b2b-0ddfe909b08a.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/12e38392-dbee-4676-8b2b-0ddfe909b08a.png)'
- en: '**Question 3**. This prompt asks whether we need to configure JHipster registry
    for this instance. JHipster registry provides a service discovery and config server
    implementation which is very useful for centralized configuration management and
    scaling of the application. For this use case, we will not need it, so let''s
    choose No. We will learn more about the JHipster Registry in [Chapter 8](673932d7-7927-4a12-8c02-86197cc8d3aa.xhtml), *Introduction
    to Microservice Server-Side Technologies*, of this book:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题3**。这个提示询问我们是否需要为此实例配置JHipster注册表。JHipster注册表提供了一个服务发现和配置服务器实现，这对于集中式配置管理和应用扩展非常有用。对于这个用例，我们不需要它，所以让我们选择“否”。我们将在本书的[第8章](673932d7-7927-4a12-8c02-86197cc8d3aa.xhtml)，“微服务服务器端技术简介”中了解更多关于JHipster注册表的信息：'
- en: '![](img/7bae52a7-2c14-4227-a243-a9a7c524d9d5.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7bae52a7-2c14-4227-a243-a9a7c524d9d5.png)'
- en: '**Question 4**: This prompt asks us to select an authentication mechanism.
    We are presented with three options:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题4**：这个提示要求我们选择一个身份验证机制。我们提供了三个选项：'
- en: JWT authentication
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JWT身份验证
- en: HTTP Session Authentication
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP会话身份验证
- en: OAuth 2.0/OIDC Authentication
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth 2.0/OIDC身份验证
- en: 'We already saw how these defer in the previous chapter, and for our use case,
    let''s choose JWT authentication:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在上一章中看到了它们的差异，并且对于我们的用例，让我们选择JWT身份验证：
- en: '![](img/b34a807b-0708-4ca8-8e49-b80e12caa78a.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b34a807b-0708-4ca8-8e49-b80e12caa78a.png)'
- en: '**Question 5**: This prompt asks us to select a database type; the options
    provided are SQL, MongoDB, Couchbase, and Cassandra. We already learned about
    the different database options in the previous chapter. For our application, let''s
    choose an SQL database:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题5**：这个提示要求我们选择数据库类型；提供的选项是SQL、MongoDB、Couchbase和Cassandra。我们在上一章中已经了解了不同的数据库选项。对于我们的应用，让我们选择一个SQL数据库：'
- en: '![](img/e26c0421-549a-45cf-9b71-24efde78fbfa.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e26c0421-549a-45cf-9b71-24efde78fbfa.png)'
- en: '**Question 6**: This prompt asks us to choose a specific SQL database that
    we would like to use in production; the available options are MySQL, MariaDB,
    PostgreSQL, Oracle, and Microsoft SQL Server. Let''s choose MySQL here:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题 6**：这个提示要求我们选择在生产中想要使用的特定 SQL 数据库；可用的选项是 MySQL、MariaDB、PostgreSQL、Oracle
    和 Microsoft SQL Server。让我们在这里选择 MySQL：'
- en: '![](img/b9ee211a-c09a-48a8-a811-e51b309f0793.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9ee211a-c09a-48a8-a811-e51b309f0793.png)'
- en: '**Question 7**:This prompt asks us to choose between our chosen SQL database
    and H2 embedded database for development. H2 embedded DB is especially useful
    as it makes development faster and self-contained, without the need to have a
    MySQL instance running. So, let''s choose the H2 disk-based persistence here as
    it is lightweight and easier in development compared to having a full-fledged
    DB service running:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题 7**：这个提示要求我们在我们选择的 SQL 数据库和 H2 嵌入式数据库之间进行选择，用于开发。H2 嵌入式数据库特别有用，因为它使开发更快且自包含，无需运行
    MySQL 实例。因此，让我们在这里选择基于磁盘的 H2 持久性，因为它比运行完整的数据库服务更轻量级且易于开发：'
- en: '![](img/3d1a438a-f772-4b79-b882-cbfd3d56cc64.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3d1a438a-f772-4b79-b882-cbfd3d56cc64.png)'
- en: If your use case requires working with persisted data in development and if
    the model is not going to change often, then you could also choose MySQL for development
    as it would give you a faster startup time. This is because the embedded H2 DB
    doesn't need to be initialized, but the downside is each time you make schema
    changes or recreate entities, you would have to update the DB using generated
    liquibase diff changelogs manually, or wipe the DB manually and start over again.
    With an embedded H2 DB, you could run `./gradlew clean` to wipe it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的用例需要在开发中处理持久数据，并且模型不会经常更改，那么您也可以选择 MySQL 进行开发，因为它会提供更快的启动时间。这是因为嵌入式 H2 数据库不需要初始化，但缺点是每次您进行模式更改或重新创建实体时，您都必须手动使用生成的
    liquibase diff 更改日志更新数据库，或者手动擦除数据库并重新开始。使用嵌入式 H2 数据库，您可以通过运行 `./gradlew clean`
    来擦除它。
- en: '**Question 8**: This prompt asks us to choose a Spring cache implementation.
    We have the option to choose between no cache, EHCache, Hazelcast, and Infinispan.
    Since we learned about these in the previous chapter, let''s go ahead and choose
    Hazelcast here:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题 8**：这个提示要求我们选择一个 Spring 缓存实现。我们有选择不使用缓存、EHCache、Hazelcast 和 Infinispan
    的选项。由于我们在上一章学习了这些内容，让我们在这里选择 Hazelcast：'
- en: '![](img/44d0fcc9-57cd-4221-b20a-371f69c5e203.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44d0fcc9-57cd-4221-b20a-371f69c5e203.png)'
- en: '**Question 9**. This prompt asks us to choose if we need a 2^(nd) level cache
    for Hibernate. Let''s choose Yes. It will use the same cache implementation we
    chose for the previous question:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题 9**。这个提示要求我们选择是否需要为 Hibernate 选择二级缓存。让我们选择是。它将使用我们在上一个问题中选择的相同的缓存实现：'
- en: '![](img/567d2e9e-6f86-4745-857c-9454d9661f4c.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/567d2e9e-6f86-4745-857c-9454d9661f4c.png)'
- en: '**Question 10**: This prompt gives us the choice of the build tool to use for
    the project; the options are Maven and Gradle. Let''s choose Gradle here as it
    is more modern and powerful:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题 10**：这个提示为我们提供了选择用于项目的构建工具；选项是 Maven 和 Gradle。让我们在这里选择 Gradle，因为它更现代且功能更强大：'
- en: '![](img/eb824465-a757-4f8e-932f-b37fbc591e1d.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb824465-a757-4f8e-932f-b37fbc591e1d.png)'
- en: '**Question 11**: This prompt is interesting as it presents various additional
    options supported by JHipster. The options are:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题 11**：这个提示很有趣，因为它展示了 JHipster 支持的各种附加选项。选项包括：'
- en: 'Social login: Adds support for using a Social login provider like Facebook,
    Twitter, and so on for login(Social login option is removed in JHipster 5 and
    you need to choose OAuth 2.0/OIDC Authentication instead to use Social login provided
    by the OIDC provider)'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社交登录：添加使用社交登录提供者（如 Facebook、Twitter 等）进行登录的支持（JHipster 5 中移除了社交登录选项，您需要选择 OAuth
    2.0/OIDC 认证以使用 OIDC 提供商提供的社交登录）
- en: 'Elasticsearch: Adds Elasticsearch support for the generated entities'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Elasticsearch：为生成的实体添加 Elasticsearch 支持
- en: 'WebSockets: Adds WebSocket support using Spring WebSocket, SocketJS, and Stomp
    protocol'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebSockets：使用 Spring WebSocket、SocketJS 和 Stomp 协议添加 WebSocket 支持
- en: 'API first development with swagger-codegen: Adds Swagger codegen support for
    API first development'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 首先开发与 swagger-codegen：为 API 首先开发添加 Swagger 代码生成支持
- en: 'Apache Kafka: Adds support for asynchronous queue using Kafka'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Kafka：添加使用 Kafka 的异步队列支持
- en: 'Let''s keep it simple and choose WebSockets using Spring WebSocket:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保持简单，选择使用 Spring WebSocket 的 WebSockets：
- en: '![](img/c5d21189-d8b9-44e7-b2f1-7b44fb54bc9f.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5d21189-d8b9-44e7-b2f1-7b44fb54bc9f.png)'
- en: Client-side options
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端选项
- en: 'Now, the generator will ask us about the client side option, including the
    client-side framework we wish to use:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，生成器将询问我们关于客户端选项的问题，包括我们希望使用的客户端框架：
- en: '**Question 1**: This prompt asks us to select a client-side MVVM framework;
    the options include Angular 5 and React. Let''s choose Angular 5 here:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题 1**：这个提示要求我们选择一个客户端 MVVM 框架；选项包括 Angular 5 和 React。在这里我们选择 Angular 5：'
- en: '![](img/4a5c8e0b-932a-48ba-8c19-3ed420a30588.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a5c8e0b-932a-48ba-8c19-3ed420a30588.png)'
- en: '**Question 2**. This prompt lets us enable SASS support for our CSS, and since
    SASS is awesome, let''s enable it by selecting Yes:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题 2**。这个提示允许我们为我们的 CSS 启用 SASS 支持，由于 SASS 很棒，让我们通过选择“是”来启用它：'
- en: '![](img/f902df50-6e64-4e06-aad2-ab2b8e0a34e8.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f902df50-6e64-4e06-aad2-ab2b8e0a34e8.png)'
- en: Internationalization options
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 国际化选项
- en: 'We will now have the opportunity to enable internationalization and select
    the languages we would like:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将有机会启用国际化并选择我们想要的语言：
- en: '**Question 1**. This prompt lets us enable **internationalization** (**i18n**).
    Let''s choose Yes here:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题 1**。这个提示允许我们启用 **国际化**（**i18n**）。在这里我们选择“是”：'
- en: '![](img/8daf4fcc-2205-4d40-9cc3-f3a68105f54a.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8daf4fcc-2205-4d40-9cc3-f3a68105f54a.png)'
- en: '**Question 2**: Since we enabled i18n, we will be given the option to choose
    a primary language and additional i18n languages. At the time of writing, there
    are 36 supported languages including 2 **RTL** (**Right to Left**) languages.
    Let''s choose English as the primary language and Simplified Chinese as the additional
    language:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题 2**：由于我们启用了 i18n，我们将被提供选择主要语言和附加 i18n 语言的选择。在撰写本文时，有 36 种受支持的语言，包括 2 种
    **RTL**（**从右到左**）语言。让我们选择英语作为主要语言，简体中文作为附加语言：'
- en: '![](img/d458268c-0917-4531-b0d1-98d7c3db9f3d.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d458268c-0917-4531-b0d1-98d7c3db9f3d.png)'
- en: Testing
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: Now, we can choose testing options for our application.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以为我们的应用程序选择测试选项。
- en: 'This prompt lets us choose testing frameworks for our application, which will
    also create sample tests for the application and entities. The options are Gatling,
    Cucumber, and Protractor. Let''s choose Protractor here:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个提示允许我们为我们的应用程序选择测试框架，这将为应用程序和实体创建示例测试。选项包括 Gatling、Cucumber 和 Protractor。在这里我们选择
    Protractor：
- en: '![](img/c7433d8d-19dc-4443-905f-79948ff057a3.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7433d8d-19dc-4443-905f-79948ff057a3.png)'
- en: Modules
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块
- en: 'This prompt lets us choose additional third-party modules from the JHipster
    marketplace ([https://www.jhipster.tech/modules/marketplace](https://www.jhipster.tech/modules/marketplace)).
    This can be helpful if we want to use additional features not supported directly
    by JHipster. We will look at this in later chapters. For now, let''s choose No.
    Don''t worry about this, as these modules can be added to the application later
    when required as well:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个提示允许我们从 JHipster 市场选择额外的第三方模块（[https://www.jhipster.tech/modules/marketplace](https://www.jhipster.tech/modules/marketplace)）。如果我们想使用
    JHipster 直接不支持的功能，这可能很有帮助。我们将在后面的章节中探讨这个问题。现在，让我们选择“否”。不用担心，因为这些模块可以在需要时添加到应用程序中：
- en: '![](img/78284fce-ea2d-47c3-bc50-2668698021ab.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/78284fce-ea2d-47c3-bc50-2668698021ab.png)'
- en: Once all the questions are answered, the code generation will start and you
    will see an output like following, listing the files created, and then running
    yarn installation to get all the frontend dependencies installed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有问题都回答完毕，代码生成将开始，你将看到如下输出，列出创建的文件，然后运行 yarn 安装以安装所有前端依赖。
- en: If you do not want the Yarn install and Webpack build steps to run, you could
    use the `--skip-install` flag while running JHipster to skip this. Just run `jhipster
    --skip-install`
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想运行 Yarn 安装和 Webpack 构建步骤，可以在运行 JHipster 时使用 `--skip-install` 标志来跳过这一步骤。只需运行
    `jhipster --skip-install`
- en: 'Once the installation is complete, the generator will trigger a webpack build
    for the client side so that when we start the application, we have everything
    ready:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装完成，生成器将为客户端触发 webpack 构建，这样当我们启动应用程序时，我们就有了一切准备就绪：
- en: '![](img/7f103264-19be-4333-8adc-575f74a75a5d.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f103264-19be-4333-8adc-575f74a75a5d.png)'
- en: JHipster will check your environment to see if all the required dependencies
    like Java8, NodeJS, Git, and NPM/Yarn are installed. If not, it will show friendly
    warning messages before code generation starts.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster 将检查你的环境，以查看是否安装了所有必需的依赖项，如 Java8、NodeJS、Git 和 NPM/Yarn。如果没有，它将在代码生成开始之前显示友好的警告消息。
- en: 'Once the process is complete, you will see successful messages as follows,
    and instructions to start the application:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦过程完成，你将看到如下成功消息，以及开始应用的说明：
- en: '![](img/7bcbb01c-c4d2-4acf-b387-838b750971f5.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7bcbb01c-c4d2-4acf-b387-838b750971f5.png)'
- en: There are command-line flags that can be passed while executing the `jhipster`
    command. Running `jhipster app --help` will list all of the available command-line
    flags. One of the interesting flags, for example, is `npm`, which lets you use
    NPM instead of Yarn for dependency management.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行 `jhipster` 命令时，可以传递一些命令行标志。运行 `jhipster app --help` 将列出所有可用的命令行标志。例如，其中一个有趣的标志是
    `npm`，它允许您在依赖项管理中使用 NPM 而不是 Yarn。
- en: 'JHipster will automatically initialize a Git repository for the folder and
    commit the generated file.  If you wish to do this step yourself, you can do so
    by passing the `skip-git` flag during executing `jhipster --skip-git` and execute
    the steps manually as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster 将自动为文件夹初始化 Git 仓库并提交生成的文件。如果您希望亲自执行此步骤，可以在执行 `jhipster --skip-git`
    时传递 `skip-git` 标志，然后手动执行以下步骤：
- en: '[PRE2]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You could also use a GUI tool like Sourcetree or GitKraken if you wish to do
    so to work with Git.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，也可以使用像 Sourcetree 或 GitKraken 这样的图形界面工具来与 Git 一起工作。
- en: Code walkthrough
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码遍历
- en: Now that we have generated our application with JHipster, let's go through important
    pieces of the source code which have been created. Let's open our application
    in our favorite IDE or Editor.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经使用 JHipster 生成了应用程序，让我们来看看创建的源代码中的重要部分。让我们在我们的首选 IDE 或编辑器中打开我们的应用程序。
- en: If you are using IntelliJ IDEA, you can execute `idea .` in a terminal from
    the application folder to launch it. Otherwise, you can import the application
    as a new Gradle project using the menu option File | New | Project from existing
    sources and select the project folder before selecting Gradle from the options
    and click Next and then Finish. If you are using Eclipse, open the File | Import...
    dialog and select Gradle Project in the list and follow the instructions.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 IntelliJ IDEA，您可以在应用程序文件夹的终端中执行 `idea .` 来启动它。否则，您可以使用菜单选项“文件 | 新建 | 从现有源创建项目”将应用程序导入为新
    Gradle 项目，在选择 Gradle 之前选择项目文件夹，然后点击“下一步”和“完成”。如果您使用 Eclipse，请打开“文件 | 导入...”对话框，在列表中选择“Gradle
    项目”，然后按照说明操作。
- en: File structure
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件结构
- en: 'The created application will have the following file structure:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的应用程序将具有以下文件结构：
- en: '![](img/9c29ba9b-c796-41f9-bb21-9a356f41123d.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9c29ba9b-c796-41f9-bb21-9a356f41123d.png)'
- en: 'As you can see, the root folder is quite busy with a few folders but a lot
    of configuration files. The most interesting among them is:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，根目录相当繁忙，有几个文件夹但很多配置文件。其中最有趣的是：
- en: '`src`: This is the source folder which holds the main application source and
    the test source files.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`：这是源文件夹，包含主应用程序源和测试源文件。'
- en: '`webpack`: This folder holds all the Webpack client-side build configurations
    for development, production, and testing.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack`：这个文件夹包含所有用于开发、生产和测试的 Webpack 客户端构建配置。'
- en: '`gradle`: This folder has Gradle wrapper and additional Gradle build scripts
    which will be used by the main Gradle build file (JHipster provides a similar
    wrapper if Maven is chosen as well).'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gradle`：这个文件夹包含 Gradle 包装器和额外的 Gradle 构建脚本，这些脚本将由主 Gradle 构建文件（如果选择 Maven，JHipster
    也会提供类似的包装器）使用。'
- en: '`build.gradle`: This is our Gradle build file which specifies our applications
    build lifecycle. It also has the server side dependencies specified. The build
    uses properties defined in the `gradle.properties` file alongside it. You can
    also find an executable named `gradlew` (`gradlew.bat` for Windows), which lets
    you use Gradle without having to install it.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build.gradle`：这是我们 Gradle 构建文件，它指定了应用程序的构建生命周期。它还指定了服务器端依赖项。构建使用与其一起定义的 `gradle.properties`
    文件中的属性。您还可以找到一个名为 `gradlew`（Windows 上的 `gradlew.bat`）的可执行文件，它允许您使用 Gradle 而无需安装它。'
- en: '`.yo-rc.json`: This is the configuration file for JHipster. This file stores
    the options we selected during app creation, and it is used for app regeneration
    and upgrades.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.yo-rc.json`：这是 JHipster 的配置文件。此文件存储了我们在应用程序创建期间选择的选项，并用于应用程序的重生成和升级。'
- en: '`package.json`: This is the NPM configuration file which specifies all your
    client-side dependencies, client-side build dependencies, and tasks.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`：这是 NPM 配置文件，它指定了所有客户端依赖项、客户端构建依赖项和任务。'
- en: '`tsconfig.json`: This is the configuration for Typescript. There is also `tsconfig-aot.json`
    for Angular **AOT** (**Ahead-of-Time**) compilation.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tsconfig.json`：这是 TypeScript 的配置文件。还有一个用于 Angular **AOT**（**提前编译**）的 `tsconfig-aot.json`。'
- en: '`tslint.json`: This is the lint configuration for Typescript.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tslint.json`：这是 TypeScript 的 lint 配置文件。'
- en: Install and configure Typescript and the Tslint plugin for your IDE or editor
    to make the most out of Typescript.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 安装并配置你的IDE或编辑器中的Typescript和Tslint插件，以充分利用Typescript。
- en: 'Now, let''s take a look at the source folder. It has a main folder and a test
    folder, which holds the main app source code and tests the source code accordingly.
    The folder structure is as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看源文件夹。它有一个主文件夹和一个测试文件夹，分别存储主应用程序源代码和相应的测试源代码。文件夹结构如下：
- en: '`main`:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main`:'
- en: '`docker`: Holds the Dockerfile for the application and Docker configurations
    for the selected options'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker`: 存储应用程序的Dockerfile以及所选选项的Docker配置'
- en: '`java`: Holds the main Java source code for the application'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java`: 存储应用程序的主要Java源代码'
- en: '`resources`: Holds Spring Boot configuration files, Liquibase changelogs, and
    static resources like server-side i18n files and email templates used by the application'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resources`: 存储Spring Boot配置文件、Liquibase变更日志以及应用程序使用的服务器端i18n文件和电子邮件模板等静态资源'
- en: '`webapp`: Holds the Angular application source code and the client side static
    content like images, stylesheets, i18n files, and so on'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webapp`: 存储Angular应用程序源代码和客户端静态内容，如图片、样式表、i18n文件等'
- en: '`test`:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test`:'
- en: '`java`: Holds the unit and integration test source for the server side'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java`: 存储服务器端的单元和集成测试源代码'
- en: '`javascript`: Holds the Karma unit test specs and Protractor end-to-end specs
    for the client side application'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`javascript`: 存储客户端应用程序的Karma单元测试规范和Protractor端到端规范'
- en: '`resources`: Holds Spring configuration files and static resources like server-side
    i18n files and email templates used by the application for test'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resources`: 存储Spring配置文件和用于测试的服务器端i18n文件和电子邮件模板等静态资源'
- en: Server-side source code
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端源代码
- en: 'The server-side code is situated in the Java and resources folder under `src/main`,
    as seen in the preceding screenshot. The folder structure is as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端代码位于`src/main`下的Java和资源文件夹中，如前一个截图所示。文件夹结构如下：
- en: '![](img/c0e66522-8001-4202-9d41-dc0a2f49a4b9.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0e66522-8001-4202-9d41-dc0a2f49a4b9.png)'
- en: You may notice that the Spring components do not use the traditional `@Autowired`
    or `@Inject` annotations for dependency injection in the generated code. This
    is because we use constructor injection instead of field injection, and Spring
    Boot doesn't need explicit annotations for constructor injection. Constructor
    injection is considered better as it enables us to write better unit tests and
    avoids design issues, whereas field injection is more elegant but easily makes
    a class monolithic. Constructor injection is a suggested best practice by the
    Spring team. Constructor injection also makes unit testing components easier.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，在生成的代码中，Spring组件没有使用传统的`@Autowired`或`@Inject`注解进行依赖注入。这是因为我们使用构造函数注入而不是字段注入，Spring
    Boot不需要为构造函数注入显式注解。构造函数注入被认为是一个更好的实践，因为它使我们能够编写更好的单元测试并避免设计问题，而字段注入则更为优雅，但容易使类变得单一。构造函数注入是Spring团队推荐的最佳实践。构造函数注入也使得单元测试组件变得更加容易。
- en: Java source
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java源代码
- en: 'The important parts of the Java source code are:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Java源代码的重要部分是：
- en: '`StoreApp.java`: This is the main entry class for the application. Since this
    is a Spring Boot application, the main class is executable and you can start the
    application by just running this class from an IDE. Let''s take a look at this
    class:'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StoreApp.java`: 这是应用程序的主要入口类。由于这是一个Spring Boot应用程序，主类是可执行的，你可以通过在IDE中运行这个类来启动应用程序。让我们看看这个类：'
- en: 'The class is annotated with a bunch of Spring JavaConfig annotations:'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该类被大量Spring JavaConfig注解标注：
- en: '[PRE3]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first one, `@ComponentScan`, tells the Spring application to scan the source
    files and auto detect Spring components (Services, Repository, Resource, Configuration
    classes that define Spring beans, and so on).
  id: totrans-130
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个，`@ComponentScan`，告诉Spring应用程序扫描源文件并自动检测Spring组件（服务、仓库、资源、定义Spring bean的配置类等）。
- en: The second one is `@EnableAutoConfiguration`, which tells Spring Boot to try
    to guess and auto-configure beans that the application might need based on the
    classes found on the classpath and the configurations we have provided. The exclude
    settings specifically tells Spring Boot not to auto-configure the specified beans.
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个是`@EnableAutoConfiguration`，它告诉Spring Boot尝试猜测并自动配置应用程序可能需要的bean，这些bean基于类路径上找到的类和我们所提供的配置。排除设置特别告诉Spring
    Boot不要自动配置指定的bean。
- en: The third one, `@EnableConfigurationProperties`, helps register additional configurations
    for the application via property files.
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个是`@EnableConfigurationProperties`，它通过属性文件帮助为应用程序注册额外的配置。
- en: 'The main method of the class bootstraps the Spring Boot application and runs
    it:'
  id: totrans-133
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类的主方法启动Spring Boot应用程序并运行它：
- en: '[PRE4]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`config`: This package contains Spring bean configurations for the database,
    cache, WebSocket, and so on. This is where we will configure various options for
    the application. Some of the important ones are:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`：这个包包含数据库、缓存、WebSocket等Spring bean配置。这是我们配置应用程序各种选项的地方。其中一些重要的配置是：'
- en: '`CacheConfiguration.java`: This class configures the Hibernate second level
    cache for the application. Since we chose Hazelcast as the cache provider, this
    class configures the same way.'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CacheConfiguration.java`：这个类配置应用程序的Hibernate二级缓存。由于我们选择了Hazelcast作为缓存提供者，这个类以相同的方式配置。'
- en: '`DatabaseConfiguration.java`: This class configures the database for the application
    and enables transaction management, JPA auditing, and JPA repositories for the
    application. It also configures Liquibase to manage DB migrations and the H2 database
    for development.'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DatabaseConfiguration.java`：这个类配置应用程序的数据库，并启用事务管理、JPA审计和JPA存储库。它还配置Liquibase来管理数据库迁移和H2数据库用于开发。'
- en: '`SecurityConfiguration.java`: This is a very important part of the application
    as it configures security for the application. Let''s take a look at important
    parts of the class:'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SecurityConfiguration.java`：这是应用程序的一个重要部分，因为它配置了应用程序的安全性。让我们看看类中的重要部分：'
- en: 'The annotations enable web security and method level security so that we can
    use `@Secured` and `@Pre/PostAuthorize` annotations on individual methods:'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些注解启用了Web安全和方法级安全，这样我们就可以在单个方法上使用`@Secured`和`@Pre/PostAuthorize`注解：
- en: '[PRE5]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following configuration tells the application to ignore static content
    and certain APIs from Spring security configuration:'
  id: totrans-141
  prefs:
  - PREF_UL
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下配置告诉应用程序忽略Spring安全配置中的静态内容和某些API：
- en: '[PRE6]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following configuration tells Spring security which endpoints are permitted
    for all users, which endpoints should be authenticated, and which endpoints require
    a specific role (`ADMIN`, in this case):'
  id: totrans-143
  prefs:
  - PREF_UL
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下配置告诉Spring安全哪些端点是所有用户允许访问的，哪些端点需要认证，以及哪些端点需要特定的角色（在这个例子中是`ADMIN`）：
- en: '[PRE7]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`WebConfigurer.java`: This is where we set up HTTP cache headers, MIME mappings,
    static assets location, and **CORS** (**Cross-Origin Resource Sharing**).'
  id: totrans-145
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WebConfigurer.java`：这是我们设置HTTP缓存头、MIME映射、静态资产位置和**CORS**（**跨源资源共享**）的地方。'
- en: 'JHipster provides great CORS support out of the box:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster提供了开箱即用的CORS支持：
- en: CORS can be configured using the `jhipster.cors` property, as defined in the
    JHipster common application properties ([http://www.jhipster.tech/common-application-properties/](http://www.jhipster.tech/common-application-properties/)).
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用`jhipster.cors`属性配置CORS，如JHipster通用应用程序属性中定义的（[http://www.jhipster.tech/common-application-properties/](http://www.jhipster.tech/common-application-properties/))。
- en: It is enabled by default in `dev` mode for monoliths and gateways. It is disabled
    by default for microservices as you are supposed to access them through a gateway.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`dev`模式下，它默认启用单体和网关。对于微服务，它默认禁用，因为您应该通过网关访问它们。
- en: It is disabled by default in `prod` mode for both monoliths and microservices,
    for security reasons.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`prod`模式下，出于安全原因，它默认禁用单体和微服务。
- en: '`domain`: The domain model classes for the application are in this package.
    These are simple POJOs which have JPA annotations mapping it to a Hibernate entity.
    When the Elasticsearch option is selected, these also act as the Document object.
    Let''s take a look at the `User.java` class:'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`domain`：应用程序的域模型类在这个包中。这些是简单的POJO，它们通过JPA注解映射到Hibernate实体。当选择Elasticsearch选项时，它们也充当文档对象。让我们看看`User.java`类：'
- en: 'An entity class is characterized by the following annotations. The `@Entity`
    annotation marks the class as a JPA entity. The `@Table` annotation maps the entity
    to a database table. The `@Cache` annotation enables second level caching of the
    entity, and it also specifies a caching strategy:'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个实体类由以下注解特征。`@Entity`注解将类标记为JPA实体。`@Table`注解将实体映射到数据库表。`@Cache`注解启用实体的二级缓存，并指定了缓存策略：
- en: '[PRE8]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There are various annotations used at field level in these classes. `@Id` marks
    the primary key for the entity. `@Column` maps a field to a database table column
    by the same name when no override is provided. `@NotNull`, `@Pattern`, and `@Size`
    are annotations that are used for validation. `@JsonIgnore` is used by Jackson
    to ignore fields when converting the objects into JSON which are to be returned
    in the REST API requests. This is especially useful with Hibernate as it avoids
    circular references between relationships, which create tons of SQL DB requests
    and fail:'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些类在字段级别使用了各种注解。`@Id` 标记实体的主键。`@Column` 在没有提供覆盖时，通过相同的名称将字段映射到数据库表列。`@NotNull`、`@Pattern`
    和 `@Size` 是用于验证的注解。`@JsonIgnore` 由 Jackson 用于在将对象转换为 JSON 时忽略字段，这些 JSON 将在 REST
    API 请求中返回。这对于与 Hibernate 一起使用尤其有用，因为它避免了关系之间的循环引用，这会创建大量的 SQL 数据库请求并失败：
- en: '[PRE9]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The relationships between the database tables are also mapped to the entities
    using JPA annotations. Here, for example, it maps a many-to-many relationship between
    a user and user authorities. It also specifies a join table to be used for the
    mapping:'
  id: totrans-155
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库表之间的关系也使用 JPA 注解映射到实体。例如，它映射了用户与用户权限之间的多对多关系。它还指定了一个用于映射的连接表：
- en: '[PRE10]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`repository`: This package holds the Spring Data repositories for the entities.
    These typically interface definitions which are automatically implemented by Spring
    Data. This removes the need for us to write any boilerplate implementations for
    the data access layer. Let''s look at the `UserRepository.java` example:'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repository`：此包包含实体的 Spring Data 存储库。这些通常是接口定义，由 Spring Data 自动实现。这消除了我们为数据访问层编写任何样板实现的需求。让我们看看
    `UserRepository.java` 的示例：'
- en: '[PRE11]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The ` @Repository` annotation marks this as a Spring data repository component.
  id: totrans-159
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Repository` 注解将此标记为 Spring 数据存储库组件。'
- en: The interface extends `JpaRepository`, which lets it inherit all the default
    CRUD operations like `findOne`, `findAll`, `save`, `count`, and `delete`.
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口扩展了 `JpaRepository`，这使得它可以继承所有默认的 CRUD 操作，如 `findOne`、`findAll`、`save`、`count`
    和 `delete`。
- en: Custom methods are written as simple method definitions following the Spring
    data naming conventions so that the method name specifies the query to be generated.
    For example, `findOneByEmailIgnoreCase` generates a query equivalent of `SELECT
    * FROM user WHERE LOWER(email) = LOWER(:email)`.
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义方法按照 Spring 数据命名约定编写为简单的方法定义，以便方法名称指定要生成的查询。例如，`findOneByEmailIgnoreCase`
    生成一个等价的查询 `SELECT * FROM user WHERE LOWER(email) = LOWER(:email)`。
- en: '`security`: This package holds Spring security-related components and utils,
    and since we chose JWT as our authentication mechanism, it holds JWT-related classes
    such as `TokenProvider`, `JWTFilter`, and `JWTConfigurer` as well.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`security`：此包包含与 Spring 安全相关的组件和实用工具，由于我们选择了 JWT 作为我们的认证机制，它还包含与 JWT 相关的类，例如
    `TokenProvider`、`JWTFilter` 和 `JWTConfigurer`。'
- en: '`service`: This package holds the service layer consisting of Spring service
    beans, DTOs, Mapstruct DTO mappers, and service utilities.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`service`：此包包含服务层，包括 Spring 服务豆、DTO、Mapstruct DTO 映射器和服务实用工具。'
- en: '`web`: This package holds the web resource classes, view models classes and
    utility classes.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web`：此包包含网络资源类、视图模型类和实用工具类。'
- en: '`rest`: This package holds Spring resource classes for the REST API. It also
    holds view model objects and utilities. Let''s take a look at `UserResource.java`:'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rest`：此包包含用于 REST API 的 Spring 资源类。它还包含视图模型对象和实用工具。让我们看看 `UserResource.java`：'
- en: The resource classes are marked with the `@RestController` and `@RequestMapping("/api")`
    annotations from Spring. The latter specifies the base URL path for the controller
    so that all `<applicationContext>/api/*` requests are forwarded to this class.
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源类被标记为 Spring 的 `@RestController` 和 `@RequestMapping("/api")` 注解。后者指定了控制器的基
    URL 路径，以便所有 `<applicationContext>/api/*` 请求都转发到这个类。
- en: 'Request methods are annotated with annotations according to their purpose,
    for example, the below marks the `createUser` method as a `PostMapping` for `"/users"`,
    which means all POST requests to `<applicationContext>/api/users` will be served
    by this method. The `@Timed` annotation is used to measure the performance of
    the method. The `@Secured` annotation restricts the method access to the specified
    role:'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据其目的，请求方法被注解，例如，下面的代码将 `createUser` 方法标记为 `PostMapping` 用于 `"/users"`，这意味着所有发送到
    `<applicationContext>/api/users` 的 POST 请求都将由该方法处理。`@Timed` 注解用于测量方法的性能。`@Secured`
    注解限制了方法访问到指定的角色：
- en: '[PRE12]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`WebSocket`: This package holds the Websocket controllers and view models.'
  id: totrans-169
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WebSocket`: 此包包含 WebSocket 控制器和视图模型。'
- en: JHipster uses **DTO **(**Data Transfer Object**) and **VM** (**View Model**)
    on the server side. DTOs are for transferring data from the service layer to and
    from the resource layer. They **break** the Hibernate transactions and avoids
    further lazy loading from being triggered by the resource layer. VMs are only
    used for displaying data on the web frontend and don't interact with the service
    layer.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: JHipster 在服务器端使用 **DTO**（**数据传输对象**）和 **VM**（**视图模型**）。DTO 用于在服务层和资源层之间传输数据。它们
    **打破** Hibernate 事务，并避免由资源层触发的进一步延迟加载。VM 仅用于在 Web 前端显示数据，并不与服务层交互。
- en: Resources
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: 'The important parts of resources are:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 资源的重要部分是：
- en: '`config`: This holds the application property YAML files and Liquibase changelogs.
    The `application.yml` file holds configurable Spring Boot, JHipster, and application-specific
    properties while the `application.(dev|prod).yml` files hold properties that should
    be applied when the specific dev or prod profile is active. The test configurations
    are under `src/test/resource/application.yml`.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`: 此处存放应用程序属性 YAML 文件和 Liquibase 变更日志。`application.yml` 文件包含可配置的 Spring
    Boot、JHipster 和应用程序特定属性，而 `application.(dev|prod).yml` 文件包含在特定开发或生产配置活动时应应用的属性。测试配置位于
    `src/test/resource/application.yml`。'
- en: '`i18n`: This holds the server-side i18n resource files.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`i18n`: 此处存放服务器端的 i18n 资源文件。'
- en: '`mails`: This holds Thymeleaf templates for emails.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mails`: 此处存放电子邮件的 Thymeleaf 模板。'
- en: '`templates`: This holds Thymeleaf templates for the client side.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templates`: 此处存放客户端的 Thymeleaf 模板。'
- en: client-side source code
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端源代码
- en: 'The client-side source code is under the `src/main/webapp` folder, as we saw
    earlier. The structure is as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端源代码位于我们之前看到的 `src/main/webapp` 文件夹下。结构如下：
- en: '![](img/1fe1ad19-5a99-4eeb-94ed-8192e3be4e01.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1fe1ad19-5a99-4eeb-94ed-8192e3be4e01.png)'
- en: 'The most noteworthy among these are:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 其中最值得注意的是：
- en: '`app`: This folder holds the Angular application''s Typescript source code,
    which is organized with a folder per feature:'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app`: 此文件夹包含 Angular 应用程序的 TypeScript 源代码，按功能组织，每个功能一个文件夹：'
- en: '`app.main.ts`: This is the main file for the Angular app. This bootstraps the
    Angular application. Notice that it uses `platformBrowserDynamic`, which lets
    the application work with **JIT** (**Just-in-time**) compilation in the browser.
    This is ideal for development:'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.main.ts`: 这是 Angular 应用的主文件。它启动 Angular 应用程序。注意，它使用 `platformBrowserDynamic`，这使得应用程序能够在浏览器中使用
    **JIT**（**即时**）编译。这对于开发来说非常理想：'
- en: '[PRE13]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`app.module.ts`: This is the main module for the Angular app. It declares app
    level components and providers, and imports other modules for the application.
    It also bootstraps the main application component:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.module.ts`: 这是 Angular 应用程序的主模块。它声明应用程序级别的组件和提供者，并导入其他模块以供应用程序使用。它还启动主应用程序组件：'
- en: '[PRE14]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`account`: This module consists of account-related features such as activate, password, password-reset,
    register, and settings. Each typical component consists of `component.html`, `component.ts`,
    `route.ts`, and `service.ts` files.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`account`: 此模块包含与账户相关的功能，如激活、密码、密码重置、注册和设置。每个典型组件包括 `component.html`、`component.ts`、`route.ts`
    和 `service.ts` 文件。'
- en: '`admin`: This module consists of admin-related features such as audits, configuration, docs,
    health, logs, metrics, tracker, and user-management. Each typical component consists
    of `component.html`, `component.ts`, `route.ts`, and `service.ts` files.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin`: 此模块包含与管理员相关的功能，如审计、配置、文档、健康、日志、指标、跟踪器和用户管理。每个典型组件包括 `component.html`、`component.ts`、`route.ts`
    和 `service.ts` 文件。'
- en: '`blocks`: This folder consists of HTTP interceptors and other configs used
    by the application.'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`blocks`: 此文件夹包含应用程序使用的 HTTP 拦截器和其它配置。'
- en: '`entities`: This is where entity modules will be created.'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entities`: 这是创建实体模块的地方。'
- en: '`home`: The homepage module.'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`home`: 首页模块。'
- en: '`layouts`: This folder has layout components like the navbar, footer, error
    pages, and so on.'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layouts`: 此文件夹包含布局组件，如导航栏、页脚、错误页面等。'
- en: '`shared`: This module contains all the shared services (auth, tracker, user),
    components (login, alert), entity models, and utilities required for the application.'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shared`: 此模块包含所有共享服务（认证、跟踪器、用户）、组件（登录、警报）、实体模型以及应用程序所需的实用工具。'
- en: '`content`: This folder contains static content like images, CSS, and SASS files.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`content`: 此文件夹包含静态内容，如图片、CSS 和 SASS 文件。'
- en: '`i18n`: This is where the i18n JSON files live. Each language has a folder
    with numerous JSON files organized by modules.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`i18n`: 这里的i18n JSON文件存放位置。每种语言都有一个文件夹，其中包含按模块组织的众多JSON文件。'
- en: '`swagger-ui`: This folder has the Swagger UI client used in development for
    API documentation.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`swagger-ui`: 这个文件夹包含开发中用于API文档的Swagger UI客户端。'
- en: '`index.html`: This is the web application''s index file. This contains very
    minimal code for loading the angular application''s main component. It is a single
    page Angular application. You will also find some commented out utility code like
    Google analytics script and Service worker scripts on this file. These can be
    enabled if required:'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`: 这是Web应用程序的索引文件。它包含用于加载Angular应用程序主组件的非常少的代码。这是一个单页Angular应用程序。您还会在这个文件上找到一些注释掉的实用代码，如Google分析脚本和服务工作者脚本。如果需要，可以启用这些代码：'
- en: '[PRE15]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To enable PWA mode using service workers, just uncomment the corresponding code
    in `src/main/webapp/index.html` to register the service worker.  JHipster uses
    workbox ([https://developers.google.com/web/tools/workbox/](https://developers.google.com/web/tools/workbox/)),
    which creates the respective service worker and dynamically generates the `sw.js`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用服务工作者启用PWA模式，只需在`src/main/webapp/index.html`中取消注释相应的代码以注册服务工作者。JHipster使用workbox
    ([https://developers.google.com/web/tools/workbox/](https://developers.google.com/web/tools/workbox/))，它创建相应的服务工作者并动态生成`sw.js`。
- en: Starting the application
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动应用程序
- en: 'Now, let''s start the application and see the output. There are multiple ways
    to run the application:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们启动应用程序并查看输出。运行应用程序有多种方式：
- en: By using the Spring Boot Gradle task from the terminal/command line
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在终端/命令行中使用Spring Boot Gradle任务
- en: By executing the main Java class `src/main/java/com/mycompany/store/StoreApp.java`
    from an IDE
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过从IDE中执行主Java类`src/main/java/com/mycompany/store/StoreApp.java`
- en: By executing the packaged application file using the `java -jar` command
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用`java -jar`命令执行打包的应用程序文件
- en: Let's start the application using the Gradle task. If you want to run the application
    directly in the IDE, just open the main app file `StoreApp.java` mentioned earlier,
    right-click, and choose Run 'StoreApp'.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Gradle任务启动应用程序。如果您想在IDE中直接运行应用程序，只需打开前面提到的主应用程序文件`StoreApp.java`，右键单击，并选择运行`StoreApp`。
- en: 'To start the application via Gradle, open a terminal/command line and navigate
    to the application folder. Then, execute the Gradle command as follows (if you
    are on windows, execute `gradlew.bat`). This will trigger the default task `bootRun`:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过Gradle启动应用程序，请打开终端/命令行并导航到应用程序文件夹。然后，按照以下方式执行Gradle命令（如果您在Windows上，请执行`gradlew.bat`）。这将触发默认任务`bootRun`：
- en: '[PRE16]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Running `./gradlew` is equivalent to running `./gradlew bootRun -Pdev`. For
    the client side, the webpack build needs to be run before starting the server
    for the first time, otherwise you will see a blank page. This task is run automatically
    during the app generation, but if it fails for some reason, it can be triggered
    manually by running `yarn run webpack:build`. The task can be triggered directly
    by the Gradle command as well by running `./gradlew webpackBuildDev bootRun -Pdev`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`./gradlew`相当于执行`./gradlew bootRun -Pdev`。对于客户端，在第一次启动服务器之前需要运行webpack构建，否则您将看到一个空白页面。此任务在应用程序生成期间自动运行，但如果由于某些原因失败，可以通过运行`yarn
    run webpack:build`手动触发。也可以通过Gradle命令直接触发，通过运行`./gradlew webpackBuildDev bootRun
    -Pdev`。
- en: 'Gradle will start downloading the wrapper and dependencies, and you should
    see the console output similar to the following screenshot after some time (anywhere
    from a few seconds to a few minutes depending on network speed):'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle将开始下载包装器和依赖项，经过一段时间（几秒到几分钟不等，取决于网络速度）后，您应该会看到类似于以下截图的控制台输出：
- en: '![](img/8bd30ae3-12a3-4e5f-b6b8-e77009aadfc2.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8bd30ae3-12a3-4e5f-b6b8-e77009aadfc2.png)'
- en: The app has started successfully and is available on `http://localhost:8080`.
    Open your favorite browser and navigate to the URL.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序已成功启动，并可在`http://localhost:8080`上访问。打开您喜欢的浏览器并导航到该URL。
- en: Note that the build preceding will stay at 90% as the process is running continuously.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，由于过程持续运行，前面的构建将保持在90%。
- en: Application modules
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序模块
- en: 'Let''s see the different modules available out of the box. The modules can
    be grouped into:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看开箱即用的不同模块。模块可以分为：
- en: Home and Login
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首页和登录
- en: Account
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 账户
- en: Admin
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员
- en: Home and Login modules
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 首页和登录模块
- en: 'Once you open the URL, you will see a cool-looking hipster drinking coffee
    on the homepage as follows:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您打开URL，您将在主页上看到一位酷炫的潮人正在喝咖啡，如下所示：
- en: '![](img/42b1de89-3425-45b3-8f3d-5d85903fd559.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/42b1de89-3425-45b3-8f3d-5d85903fd559.png)'
- en: This is the home page. Let's log in to the application using the default credentials.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这是主页。让我们使用默认凭据登录应用程序。
- en: 'Click on the *Sign in* link on the page, or *Account | Sign in*. You will see
    the following login screen. Enter the default credentials—Username—`admin`, Password—`admin`,
    and click *Sign in*:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面上的*登录*链接，或*账户 | 登录*。您将看到以下登录屏幕。输入默认凭据——用户名—`admin`，密码—`admin`，然后点击*登录*：
- en: '![](img/c0555645-46d6-4122-bdf6-59853908c418.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c0555645-46d6-4122-bdf6-59853908c418.png)'
- en: 'Once signed in, you will see the authenticated home page with all the authenticated
    menu items in the navbar:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，您将在导航栏中看到所有已验证的菜单项的认证主页：
- en: '![](img/4f711b20-63f8-44a1-9d76-26668dacfd7b.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4f711b20-63f8-44a1-9d76-26668dacfd7b.png)'
- en: 'Since we enabled internationalization, we get a Language menu. Let''s try to
    switch to a different language. Click on the Language menu and choose the next
    available language:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们启用了国际化，我们得到了一个语言菜单。让我们尝试切换到另一种语言。点击语言菜单并选择下一个可用的语言：
- en: '![](img/ff9ee658-3207-44b6-9ef8-c1c3dac32511.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ff9ee658-3207-44b6-9ef8-c1c3dac32511.png)'
- en: Account modules
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 账户模块
- en: 'Now, let''s look at the account modules that are created out of the box. Under
    Account menu, you will see a Sign out option and following modules:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看开箱即用的账户模块。在账户菜单下，您将看到一个退出选项和以下模块：
- en: Settings
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置
- en: Password
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码
- en: Registration
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册
- en: Settings
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'This module lets you change user settings such as name, email, and language:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块允许您更改用户设置，如姓名、电子邮件和语言：
- en: '![](img/22c2b631-27d9-4282-b194-821eb0d2f7ce.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/22c2b631-27d9-4282-b194-821eb0d2f7ce.png)'
- en: Password
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码
- en: 'This module lets you change the password for the current user. There is also
    a forgot password flow with email verification out of the box:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块允许您更改当前用户的密码。还有一个带有电子邮件验证的默认忘记密码流程：
- en: '![](img/38eba954-e8eb-43a1-ad13-ea33b7975f1d.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/38eba954-e8eb-43a1-ad13-ea33b7975f1d.png)'
- en: To use the email features, you will have to configure an SMTP server in the
    application properties. We will look at this in a later chapter.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用电子邮件功能，您必须在应用程序属性中配置 SMTP 服务器。我们将在后面的章节中探讨这一点。
- en: Registration
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册
- en: 'This module is available only when you are not logged in. This lets you signup/register
    as a new user for the application. This will trigger a user activation flow with
    an activation email and verification. This module will not be available when choosing
    Oauth2 as your authentication:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块仅在您未登录时可用。这允许您作为新用户注册应用程序。这将触发一个带有激活邮件和验证的用户激活流程。当选择 OAuth2 作为您的身份验证时，此模块将不可用：
- en: '![](img/746ad66c-312c-471f-9ce6-6d8b28182160.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/746ad66c-312c-471f-9ce6-6d8b28182160.png)'
- en: Admin module
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理员模块
- en: 'Now, let''s look at the generated admin module screens. These are very useful
    for development and monitoring of the application. Under the Admin menu, you will
    find the following modules:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看生成的管理员模块屏幕。这些对于应用程序的开发和监控非常有用。在管理员菜单下，您将找到以下模块：
- en: User management
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户管理
- en: Metrics
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指标
- en: Health
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 健康
- en: Configuration
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置
- en: Audits
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审计
- en: Logs
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志
- en: API
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API
- en: User management
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户管理
- en: 'This module provides you with CRUD functionality to manage users. The results
    are paginated by default. By default, users who register using the registration
    module will be deactivated unless they complete the registration process:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块为您提供了 CRUD 功能来管理用户。默认情况下，结果会分页。默认情况下，使用注册模块注册的用户将处于非激活状态，除非他们完成注册过程：
- en: '![](img/f9dc91fc-2227-4a8e-a0b3-a049dee1aa48.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f9dc91fc-2227-4a8e-a0b3-a049dee1aa48.png)'
- en: Metrics
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指标
- en: 'This module visualizes data provided by the Spring Boot actuator and Dropwizard
    metrics. This is very useful for monitoring application performance as it gives
    method level performance information along with JVM, HTTP, database, and cache
    metrics. The eye icon near Threads will let you see the thread dump as well:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块可视化由 Spring Boot actuator 和 Dropwizard 指标提供的数据。这对于监控应用程序性能非常有用，因为它提供了方法级别的性能信息，以及
    JVM、HTTP、数据库和缓存指标。靠近线程的图标将允许您查看线程转储：
- en: '![](img/230e8067-49c2-4ad4-a945-f39c74133cdc.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/230e8067-49c2-4ad4-a945-f39c74133cdc.png)'
- en: Health
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 健康
- en: 'This module provides the health status of application components like Database
    and other info like Disk space:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块提供了数据库和其他信息（如磁盘空间）等应用程序组件的健康状态：
- en: '![](img/cf7d78e1-38ed-4bc3-8822-0fcdd55040dd.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cf7d78e1-38ed-4bc3-8822-0fcdd55040dd.png)'
- en: Configuration
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置
- en: 'This module helps to visualize the current application configuration in effect.
    This is very useful for troubleshooting configuration issues:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块有助于可视化当前生效的应用程序配置。这对于解决配置问题非常有用：
- en: '![](img/416a5f16-4b6c-457d-a207-0dd906b396ab.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/416a5f16-4b6c-457d-a207-0dd906b396ab.png)'
- en: Audits
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审计
- en: 'This module lists all the user authentication audit logs since JHipster enables
    audits for Spring security, and hence all the security events are captured. There
    is a special Spring data repository that writes the audit events to the database.
    This is very useful from a security standpoint:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块列出了自 JHipster 为 Spring 安全性启用审计以来所有的用户身份验证审计日志，因此所有安全事件都被捕获。有一个特殊的 Spring
    数据仓库，它将审计事件写入数据库。这对于安全方面非常有用：
- en: '![](img/3e8a0176-d70b-4cfc-9e5b-7a36ad76d4e5.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3e8a0176-d70b-4cfc-9e5b-7a36ad76d4e5.png)'
- en: Logs
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志
- en: 'This module helps to view and update application log levels at runtime. This
    is very useful for troubleshooting:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块有助于在运行时查看和更新应用程序日志级别。这对于解决故障非常有用：
- en: '![](img/f43145c4-6ef3-41d8-9a88-f0971f00e0df.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f43145c4-6ef3-41d8-9a88-f0971f00e0df.png)'
- en: API
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API
- en: 'This module provides the Swagger API documentation for the application''s REST
    API. It also provides a Try it out editor for the endpoints:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块提供了应用程序 REST API 的 Swagger API 文档。它还提供了一个用于端点的“试一试”编辑器：
- en: '![](img/2ad2c391-c727-4bea-a55d-f44f7e699314.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2ad2c391-c727-4bea-a55d-f44f7e699314.png)'
- en: Running generated tests
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行生成的测试
- en: Good software development is never complete without good testing. JHipster generates
    quite a lot of automated tests out of the box, and there are options to choose
    even more. Let's run the generated server side and client side tests for the application
    to make sure everything is working as expected.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的软件开发永远不能没有良好的测试。JHipster 默认生成相当多的自动化测试，并且还有选择更多测试的选项。让我们运行生成的服务器端和客户端测试，以确保一切按预期工作。
- en: First, open a terminal/command line and navigate to the project folder.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开一个终端/命令行，导航到项目文件夹。
- en: Server-side tests
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端测试
- en: The server-side integration tests and unit tests are present in the `src/test/java` folder.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端集成测试和单元测试位于 `src/test/java` 文件夹中。
- en: 'These can be run directly from the IDE by choosing a package or individual
    test and running it, or via the command line by running a Gradle `test` task.
    Let''s run it using the command line. In a new terminal, navigate to the application
    source folder and execute the following command. It should finish with a success
    message, as shown here:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可以直接从 IDE 中运行，通过选择一个包或单个测试并运行它，或者通过命令行运行 Gradle 的 `test` 任务。让我们使用命令行来运行它。在一个新的终端中，导航到应用程序源文件夹，并执行以下命令。它应该以一个成功消息结束，如下所示：
- en: '[PRE17]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Client-side tests
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端测试
- en: The client-side unit tests and end-to-end tests are available under `src/test/javascript`.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端单元测试和端到端测试位于 `src/test/javascript` 文件夹下。
- en: These tests can be run using the provided npm scripts or the provided Gradle
    tasks.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这些测试可以使用提供的 npm 脚本或提供的 Gradle 任务来运行。
- en: You can see all available Gradle tasks by running `./gradlew tasks`.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行 `./gradlew tasks` 来查看所有可用的 Gradle 任务。
- en: 'Let''s run them using the npm scripts. First, let''s run the Karma unit tests.
    In the terminal, execute the following code. You can also use `npm` instead of
    `yarn` if you prefer:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 npm 脚本来运行它们。首先，让我们运行 Karma 单元测试。在终端中执行以下代码。如果您更喜欢使用 `npm` 而不是 `yarn`，也可以这样做：
- en: '[PRE18]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'It should produce a similar output in the end:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 最终应该产生类似的输出：
- en: '[PRE19]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, let''s run the Protractor end-to-end tests using the npm script. In order
    to run the `e2e` tests, we need to make sure that the server is running. If you
    have shut down the server which we started earlier, make sure to start it again
    by running `./gradlew` in a terminal. Now, open a new terminal and navigate to
    the application folder and execute the following command:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 npm 脚本来运行 Protractor 端到端测试。为了运行 `e2e` 测试，我们需要确保服务器正在运行。如果您已经关闭了我们之前启动的服务器，请确保通过在终端中运行
    `./gradlew` 再次启动它。现在，打开一个新的终端并导航到应用程序文件夹，并执行以下命令：
- en: '[PRE20]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This will start protractor tests, which will open a new Chrome browser instance
    and execute the tests there. When finished, you should see something similar to
    the following in the console:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动 protractor 测试，它将在新的 Chrome 浏览器实例中执行测试。完成后，您应该在控制台看到以下类似的内容：
- en: '[PRE21]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Summary
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how to create a monolithic web application using JHipster.
    We also walked through important aspects of the created source code and learned
    how to run the created application and the automated tests. We also browsed through
    the created modules and saw them in action. In the next chapter, we will see how
    we can utilize JHipster to model our business use case and generate entities for
    them. We will also learn about the **JHipster Domain Language** (**JDL**).
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用 JHipster 创建单体 Web 应用程序。我们还详细探讨了创建的源代码的重要方面，并了解了如何运行创建的应用程序和自动测试。我们还浏览了创建的模块，并观察了它们在实际中的应用。在下一章中，我们将了解如何利用
    JHipster 对我们的业务用例进行建模并为它们生成实体。我们还将学习关于**JHipster 领域语言**（**JDL**）的内容。
