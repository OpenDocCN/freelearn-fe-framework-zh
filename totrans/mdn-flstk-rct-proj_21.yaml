- en: '16'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with Next.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until now, we have been using various libraries and tools to develop full-stack
    web applications. Now, we introduce Next.js as an enterprise-ready full-stack
    web application framework for React. Next.js combines all the functions and tools
    you need for full-stack web development in one package. In this book, we use Next.js
    because it is currently the most popular framework supporting all new React features,
    such as React Server Components and Server Actions, which are the future of full-stack
    React development. However, there are other frameworks for full-stack React, such
    as Remix, which have recently also started supporting the new React features.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how Next.js works and what its advantages are.
    Then, we will re-create our blog project in Next.js to highlight the differences
    between using a simple bundler such as Vite, and a full framework such as Next.js.
    Along the way, we will learn how the Next.js App Router works. Finally, we are
    going to re-create our (static) blog app by creating components and pages and
    then defining links between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Next.js?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Next.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the App Router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating static components and pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start, please install all the requirements from [*Chapter 1*](B19385_01.xhtml#_idTextAnchor016)*,
    Preparing for Full-Stack Development*, and [*Chapter 2*](B19385_02.xhtml#_idTextAnchor028)*,
    Getting to Know Node.js* *and MongoDB*.
  prefs: []
  type: TYPE_NORMAL
- en: The versions listed in those chapters are the ones used in the book. While installing
    a newer version should not be an issue, please note that certain steps might work
    differently on a newer version. If you are having an issue with the code and steps
    provided in this book, please try using the versions mentioned in *Chapters 1*
    and *2*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch16](https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch16).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The CiA video for this chapter can be found at: [https://youtu.be/jQFCZqCspoc](https://youtu.be/jQFCZqCspoc).'
  prefs: []
  type: TYPE_NORMAL
- en: What is Next.js?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next.js is a React framework that puts together everything you need to create
    a full-stack web application with React. Its main features are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Good developer experience out of the box, including hot module reloading, error
    handling, and more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File-based routing and nested layouts, route handlers to define API endpoints,
    all from Next.js.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internationalization** (**i18n**) support in routing, allowing us to create
    internationalized routes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhanced server-side and client-side data fetching with caching out of the box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Middleware to run code before requests are completed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Options to run API endpoints on serverless runtimes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Out-of-the-box support for static generation of pages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic streaming of components when they are needed, allowing us to show an
    initial page quickly, and then load other components later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced client and server rendering, allowing us to not only render React components
    on the server side (**server-side rendering** (**SSR**)) but also make use of
    **React Server Components**, which allow us to render React components exclusively
    on the server without sending additional JavaScript to the client.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server Actions** to progressively enhance forms and actions sent from the
    client to the server, allowing us to submit forms even without JavaScript on the
    client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in optimizations for images, fonts, and scripts to improve Core Web Vitals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, Next.js provides a platform to easily deploy our apps on – Vercel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All in all, Next.js puts together everything we have learned about full-stack
    development throughout this book, refines each concept and makes it more advanced
    and customizable, and provides all of that in one single package. We are now going
    to re-create the blog application from earlier chapters, but from scratch with
    Next.js. Doing so will allow us to see the differences between developing an app
    with and without a full-stack framework.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Next.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are now going to set up a new project using the `create-next-app` tool,
    which sets up everything automatically for us. Follow these steps to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new Terminal window. Make sure you are outside of any project folders.
    Run the following command to create a new folder and initialize a Next.js project
    there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When asked if it’s **Ok to proceed?**, press **y** and confirm by pressing *Return/Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the project a name, such as **ch16**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Answer the questions as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Would you like to use** **TypeScript?**: **No**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Would you like to use** **ESLint?**: **Yes**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Would you like to use Tailwind** **CSS?**: **No**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Would you like to use `src/`** **directory?**: **Yes**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Would you like to use App** **Router?**: **Yes**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Would you like to customize the default import** **alias?**: **No**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After answering all the questions, a new Next.js app will be created in the
    **ch16** folder. The output should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.1 – Creating a new Next.js project](img/B19385_16_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.1 – Creating a new Next.js project
  prefs: []
  type: TYPE_NORMAL
- en: Open the newly created **ch16** folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the new VS Code window, open a Terminal and run the project with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open **http://localhost:3000** in your browser to see the Next.js app running!
    The app should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.2 – Our newly created Next.js app running in the browser](img/B19385_16_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.2 – Our newly created Next.js app running in the browser
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, **create-next-app** does not set up Prettier for us, so let’s
    quickly do that now. Install Prettier by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new **.prettierrc.json** file in the root of the project, with the
    following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the existing **.eslintrc.json** to extend from **prettier**, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to the VS Code workspace settings, change the **Editor: Default Formatter**
    setting to **Prettier**, and check the checkbox for **Editor: Format** **On Save**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have successfully created a new Next.js project with ESLint and Prettier!
    We could still set up Husky and lint-staged, just like we have done before, but
    for now, we are going to stick with this simple setup. Next, we are going to learn
    more about how apps are structured in Next.js.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the App Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next.js comes with a special paradigm for structuring applications called the
    App Router. The App Router makes use of the folder structure in the `src/app/`
    folder to create routes for our apps. The root folder (`/` path) is `src/app/`.
    If we want to define a path, such as `/posts`, we need to create a `src/app/posts/`
    folder. To make this folder a valid route, we need to put a `page.js` file inside
    it, which contains the page component that will be rendered when visiting that
    route.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we can put a **route.js** file into a folder to turn it into
    an API route instead of rendering a page. We are going to learn more about API
    routes in [*Chapter 18*](B19385_18.xhtml#_idTextAnchor321)*, Advanced Next.js
    Concepts* *and Optimizations*.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Next.js allows us to define a `layout.js` file, which will be
    used as the layout for a certain path. The layout component accepts children,
    which can contain other layouts or pages. This flexibility allows us to define
    nested routes with sub-layouts.
  prefs: []
  type: TYPE_NORMAL
- en: There are other special files in the App Router paradigm, such as the `error.js`
    file, which will be rendered when there is an error on the page, and the `loading.js`
    file, which will be rendered while the page is loading (using React Suspense).
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following example of a folder structure with the App Router:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.3 – Example of a folder structure with the App Router](img/B19385_16_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.3 – Example of a folder structure with the App Router
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, we have a `dashboard/settings/` route, defined by
    the `dashboard` and `settings` folders. The `dashboard` folder does not have a
    `page.js` file, so going to `dashboard/` will result in a `404 Not Found` error.
    However, the `dashboard` folder has a `layout.js` file, which defines the main
    layout of the dashboard. The `settings` folder has another `layout.js` file, which
    defines the layout of the settings page on the dashboard. It also has a `page.js`
    file, which will be rendered when the `dashboard/settings/` route is visited.
    Additionally, it has a `loading.js` file, which is rendered inside the settings
    layout, while the settings page is loading. It also contains an `error.js` file,
    which is rendered inside the settings layout if there is an error while loading
    the settings page.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the App Router makes it easy to implement common use cases, such
    as nested routes, layouts, errors, and loading components. Let’s now get started
    with defining the folder structure for our blog app.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the folder structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s recap and refine the routing structure of the blog application from previous
    chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**/** – the index page of our blog, containing a list of posts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**/login** – the login page to login to an existing account'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**/signup** – the signup page to create a new account'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**/create** – a page to create a new blog post (this route is new)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**/posts/:id** – a page to view a single blog post'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these pages share a common layout with a navigation bar at the top, allowing
    us to navigate between the various pages of our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now create this routing structure as a folder structure in the App Router:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Delete* the existing **src/app/** folder.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new **src/app/** folder. Inside it, create a **src/app/layout.js**
    file with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `metadata` object is a special exported object in Next.js used to provide
    meta tags, such as the `<title>` and `<meta` `name="description">` tags.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The default export of files in the App Router needs to be the component that
    should be rendered for the respective layout/page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new **src/app/page.js** file, with the following placeholder contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new **src/app/login/** folder. Inside it, create a **src/app/login/page.js**
    file with the following placeholder contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new **src/app/signup/** folder. Inside it, create a **src/app/signup/page.js**
    file with the following placeholder contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new **src/app/create/** folder. Inside it, create a **src/app/create/page.js**
    file with the following placeholder contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new **src/app/posts/** folder. Inside it, create a new **src/app/posts/[id]/**
    folder. This is a special folder containing a route parameter **id**, which we
    can use when rendering the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new **src/app/posts/[id]/page.js** file with the following placeholder
    contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, we are getting the `id` from the `params` object provided by
    Next.js.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If it’s not running anymore, start the Next.js dev server with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then go to **http://localhost:3000/** (or refresh the page) in your browser
    to see the main route working. Go to the different routes, such as **/login**
    and **/posts/123**, to see the different pages being rendered and the **route**
    param working!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we defined the folder structure for our project, let’s continue by
    creating static components and pages.
  prefs: []
  type: TYPE_NORMAL
- en: Creating static components and pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the components in our blog, we can reuse a lot of the code we wrote in previous
    chapters, as it is not that much different in Next.js than it is in plain React.
    Only specific components, such as the navigation bar, will be different, because
    Next.js has its own router. We are going to create most of our components in a
    separate `src/components/` folder. This folder will only contain React components
    that can be reused across multiple pages. All page and layout components will
    still be in `src/app/`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In Next.js, it is also possible to co-locate regular components with the page
    and layout components, which should be done in large-scale projects for components
    that are only used on those specific pages. In small projects, it does not really
    matter as much, and we can just put all our regular components in a separate folder
    to make them easier to distinguish from page and layout components.
  prefs: []
  type: TYPE_NORMAL
- en: Defining components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s now get started with creating the components for our blog app:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new **src/components/** folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new **src/components/Login.jsx** file. Inside it, define a **<form>**
    with a **username** field, a **password** field, and a submit button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We use uncontrolled input fields (so, no **useState** hooks) here on purpose,
    as it is not necessary to make controlled input fields for submitting forms with
    Server Actions, which we are going to learn about in the next chapter, [*Chapter
    17*](B19385_17.xhtml#_idTextAnchor303)*, Introducing React Server Components*.
    However, it is important to properly define the **name** property of input fields,
    as that is what will be used to identify the field when the form is submitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a similar fashion, create a new **src/components/Signup.jsx** file and define
    a form with the same fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new **src/components/CreatePost.jsx** file and define a form with
    a required **title** input field, a **textarea** to define the **contents**, and
    a submit button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new **src/components/Post.jsx** file. As an improvement over the structure
    from previous chapters, the **Post** component will be used in the **PostList**,
    and only show the **title** and **author** of a blog post, with a link to the
    full post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to define **propTypes**. In this case, we will use a structure
    similar to the result from a database query, as we will be able to directly use
    database results when we introduce React Server Components in the next chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new **src/components/PostList.jsx** file. Here, we are going to reuse
    the **propTypes** from the **Post** component, so let’s also import the **Post**
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we define the **PostList** component, which renders each blog post with
    the **Post** component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is best practice to use a unique ID for the **key** prop, such as a database
    ID, so that React can keep track of items changing in a list.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now define the **propTypes** for the **PostList** component by making use
    of the existing **Post.propTypes**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, we create a new **src/components/FullPost.jsx** file, in which we display
    the full post with all its contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instead of reusing **propTypes** from the **Post** component, we are redefining
    them here, because the **FullPost** component needs different props than the **Post**
    component (it does not have the **_id** prop, but instead has the **contents**
    prop):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we have defined all the components we are going to need for our blog
    app, let’s move on to properly defining the page components.
  prefs: []
  type: TYPE_NORMAL
- en: Defining pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After creating various components that we are going to need for our blog app,
    let’s now replace the placeholder page components with proper pages that render
    the appropriate components. Follow these steps to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit **src/app/login/page.js** and import the **Login** component, then render
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Remember when we set up Next.js and were asked if we wanted to customize the
    default import alias? This import alias allows us to reference the **src/** folder
    of our project, making our imports absolute rather than relative. By default,
    this is done using the **@** alias. So, we can now just import from **@/components/Login**
    to import from the **src/components/Login.jsx** file, instead of having to import
    from **../../components/Login.jsx**. Absolute imports with import aliases become
    especially useful in large projects and make it easy to re-structure projects
    later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit **src/app/signup/page.js** and, in a similar fashion, import and render
    the **Signup** component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Repeat the process by editing the **src/app/create/page.js** file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, edit the **src/app/posts/[id]/page.js** file and import the **FullPost**
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a sample **post** object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render the **FullPost** component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, edit **src/app/page.js** by importing the **PostList** component, creating
    an example **posts** array, and rendering the **PostList** component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to **http://localhost:3000/posts/123** to see the **FullPost** component
    being rendered with the **id** param in the title. Feel free to change the **id**
    in the URL to see how the title changes. The following screenshot shows the **FullPost**
    component being rendered on the **/****posts/123** path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.4 – Rendering the FullPost component with a Next.js route param
    in the title](img/B19385_16_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.4 – Rendering the FullPost component with a Next.js route param in
    the title
  prefs: []
  type: TYPE_NORMAL
- en: After successfully defining all our pages, we still need a way to navigate between
    them, so let’s continue by adding links between pages.
  prefs: []
  type: TYPE_NORMAL
- en: Adding links between pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned earlier in this chapter, Next.js provides its own routing solution
    – the App Router. The routes are defined by the folder structure in the `src/app/`
    directory, and they all work already. All that’s left to do now is to add links
    between them. To do this, we need to use the `Link` component from `next/link`.
    Follow these steps to get started with implementing a navigation bar:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new **src/components/Navigation.jsx** file, where we import the **Link**
    component and **PropTypes**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a **UserBar** component, which will be rendered when the user is logged
    in and allow a user to access the **Create Post** page and log out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a **LoginSignupLinks** component, which will be rendered when
    the user is not logged in yet. It provides links to the **/login** and **/signup**
    pages to allow users to sign up and log in to our app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define a **Navigation** component, which adds a link to the home page,
    and then conditionally renders either the **UserBar** component, or the **LoginSignupLinks**
    component, depending on whether the user is logged in or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we just need to render the **Navigation** component. To make sure it appears
    on all pages of our blog app, we are going to put it in the root layout. Edit
    **src/app/layout.js** and import the **Navigation** component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a sample **user** object to simulate a user being logged in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render the **Navigation** component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We still need to add a link from a single post in the list to the full post
    page. Edit **src/components/Post.jsx** and import the **Link** component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add a link to the title, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to **http://localhost:3000/** and you will see the navigation bar being rendered
    with the **UserBar** component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create Post** link to go to the corresponding page, then go back
    using the **Home** link. Also, try going to the full post page by clicking on
    the title of the blog post on the home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Home** page being rendered after we added
    the navigation bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.5 – Our (static) blog app re-created in Next.js!](img/B19385_16_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.5 – Our (static) blog app re-created in Next.js!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first learned what Next.js is and how it can be useful for
    full-stack development. Then, we set up a new Next.js project and learned about
    the App Router paradigm. Finally, we re-created the blog app in Next.js by creating
    components, pages, and a navigation bar, making use of the Next.js `Link` component
    to navigate between the different pages in our app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, [*Chapter 17*](B19385_17.xhtml#_idTextAnchor303)*, Introducing
    React Server Components*, we are going to learn how to make our blog app interactive
    by creating React Server Components, which are components that run on the server
    and can, for example, execute database queries. Additionally, we are going to
    learn about Server Actions, which are used to submit forms, such as the Login,
    Signup, and Create Post forms.
  prefs: []
  type: TYPE_NORMAL
