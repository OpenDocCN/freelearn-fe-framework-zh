["```js\nlet message = \"World\";\nJs.log(\"Hello \" ++ message);\n```", "```js\n// Generated by BUCKLESCRIPT VERSION 3.2.0, PLEASE EDIT WITH CARE\n'use strict';\n\nvar message = \"World\";\n\nconsole.log(\"Hello World\");\n\nexports.message = message;\n/* Not a pure module */\n```", "```js\n/* The message variable is interpolated */\n{j|Hello $message|j}\n```", "```js\nlet add = (a, b) => a + b;\n```", "```js\nlet add = (a, b) => {\n  Js.log(\"side-effect\");\n  a + b;\n};\n```", "```js\nvar globalObject = {total: 0};\nconst addAndMutate = (a, b) => globalObject.total = a + b;\naddAndMutate(40, 2);\n/* globalObject now is mutated */\n```", "```js\nlet foo = 42;\nlet foo = foo + 1;\nJs.log(foo);\n/* 43 */\n```", "```js\nlet foo = 42;\n\n{\n  let foo = 43;\n  Js.log(foo); /* 43 */\n};\n\nJs.log(foo); /* 42 */\n\nlet foo = 43;\nJs.log(foo); /* 43 */\n```", "```js\nlet foo = 42;\nfoo = 43;\n/* compilation error */\n```", "```js\nlet foo = \"bar\";\n```", "```js\nlet message = if (true) {\n  \"Hello\"\n} else {\n  \"Goodbye\"\n};\n```", "```js\nlet message = true ? \"Hello\" : \"Goodbye\";\n```", "```js\nlet message = {\n  let part1 = \"Hello\";\n  let part2 = \"World\";\n  {j|$part1 $part2|j};\n};\n/* message evaluates to \"Hello World\" */\n/* part1 and part2 are not accessible here */\n```", "```js\nlet tuple = (\"one\", 2, \"three\");\n```", "```js\n/* Based on https://rosettacode.org/wiki/FizzBuzz#OCaml */\nlet fizzbuzz = (i) =>\n  switch (i mod 3, i mod 5) {\n  | (0, 0) => \"FizzBuzz\"\n  | (0, _) => \"Fizz\"\n  | (_, 0) => \"Buzz\"\n  | _ => string_of_int(i)\n  };\n\nfor (i in 1 to 100) {\n  Js.log(fizzbuzz(i))\n};\n```", "```js\nlet fizzbuzz = (i) =>\n  if (i mod 3 == 0 && i mod 5 == 0) {\n    \"FizzBuzz\"\n  } else if (i mod 3 == 0) {\n    \"Fizz\"\n  } else if (i mod 5 == 0) {\n    \"Buzz\"\n  } else {\n    string_of_int(i)\n  };\n```", "```js\n/* + for ints */\n40 + 2;\n\n/* +. for floats */\n40\\. +. 2.;\n```", "```js\ntype person = (string, int);\n\n/* or */\n\ntype name = string;\ntype age = int;\ntype person = (name, age);\n```", "```js\nlet person = (\"Zoe\", 3);\n```", "```js\nlet name = (\"Zoe\" : string);\nlet person = ((name, 3) : person);\n```", "```js\nswitch (person) {\n| (\"Zoe\", age) => {j|Zoe, $age years old|j}\n| _ => \"another person\"\n};\n```", "```js\ntype person = {\n  age: int,\n  name: string\n};\n\nlet person = {\n  name: \"Zoe\",\n  age: 3\n};\n```", "```js\nswitch (person) {\n| {name: \"Zoe\", age} => {j|Zoe, $age years old|j}\n| _ => \"another person\"\n};\n```", "```js\nlet person = {...person, age: person.age + 1};\n```", "```js\nThe record field name can't be found.\n\n```", "```js\nlet person = {...person, favoriteFood: \"broccoli\"};\n\n/*\n  We've found a bug for you!\n\n  This record expression is expected to have type person\n  The field favoriteFood does not belong to type person\n*/\n```", "```js\ntype bool =\n  | True\n  | False;\n```", "```js\ntype decision =\n  | Yes\n  | No\n  | Maybe;\n```", "```js\nlet decision = Yes;\n```", "```js\nswitch (decision) {\n| Yes => \"Let's go.\"\n| No => \"I'm staying here.\"\n| Maybe => \"Convince me.\"\n};\n```", "```js\nswitch (decision) {\n| Yes => \"Let's go.\"\n| No => \"I'm staying here.\"\n};\n\n/*\n  Warning number 8\n\n  You forgot to handle a possible value here, for example: \n  Maybe\n*/\n```", "```js\ntype seat =\n  | Floor\n  | Mezzanine\n  | Balcony;\n\nlet getSeatPrice = (seat) =>\n  switch(seat) { \n  | Floor => 55\n  | _ => 45\n  };\n```", "```js\ntype seat =\n  | Pit\n  | Floor\n  | Mezzanine\n  | Balcony;\n```", "```js\nlet getSeatPrice = (seat) =>\n  switch(seat) { \n  | Floor => 55\n  | Mezzanine | Balcony => 45\n  };\n```", "```js\nlet getSeatPrice = (seat) =>\n  switch(seat) {\n  | Pit => 65\n  | Floor => 55\n  | Mezzanine | Balcony => 45\n  };\n```", "```js\ntype seat =\n  | Pit(int)\n  | Floor(int)\n  | Mezzanine(int)\n  | Balcony(int);\n\nlet seat = Floor(57);\n```", "```js\nlet getSeatPrice = (seat) =>\n  switch (seat) {\n  | Pit(price)\n  | Floor(price)\n  | Mezzanine(price)\n  | Balcony(price) => price\n  };\n```", "```js\ntype person = {\n  age: int,\n  name: string,\n};\n\ntype seat =\n  | Pit(int, option(person))\n  | Floor(int, option(person))\n  | Mezzanine(int, option(person))\n  | Balcony(int, option(person));\n```", "```js\ntype option('a)\n  | None\n  | Some('a);\n```", "```js\ntype personOption(person)\n  | None\n  | Some(person);\n```", "```js\nlet isAvailable = (seat) =>\n  switch (seat) {\n  | Pit(_, None)\n  | Floor(_, None)\n  | Mezzanine(_, None)\n  | Balcony(_, None) => true\n  | _ => false\n  };\n```", "```js\ntype person = {\n  age: int,\n  name: string,\n};\n\ntype section =\n | Pit\n | Floor\n | Mezzanine\n | Balcony;\n\ntype seat = {\n  section, /* same as section: section, */\n  price: int,\n  person: option(person)\n};\n\nlet getSeatPrice = seat => seat.price;\n\nlet isAvailable = seat =>\n  switch (seat.person) {\n  | None => true\n  | Some(_person) => false\n  };\n```", "```js\ntype seat = {\n  section,\n  price: int,\n  person: option(person),\n  dateSold: option(string)\n};\n```", "```js\nlet seat = {\n  section: Pit,\n  price: 42,\n  person: None,\n  dateSold: Some(\"2018-07-16\")\n};\n```", "```js\ntype person = {\n  age: int,\n  name: string,\n};\n\ntype date = string;\n\ntype section =\n  | Pit\n  | Floor\n  | Mezzanine\n  | Balcony;\n\ntype status =\n  | Available\n  | Sold(date, person);\n\ntype seat = {\n  section,\n  price: int,\n  status\n};\n\nlet getSeatPrice = (seat) => seat.price;\n\nlet isAvailable = (seat) =>\n  switch (seat.status) {\n  | Available => true\n  | Sold(_) => false\n  };\n```"]