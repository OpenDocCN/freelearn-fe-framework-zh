["```js\nconst Title = ({ text }) => {\n  const a = 1\n  ...\n}\n```", "```js\nconst Title = ({ text }) => {\n  const found = matchTextInArray(text)\n  ...\n}\n```", "```js\nconst Title = ({ text, flag }) => {\n  const found = matchTextInArray(text)\n  ...\n}\n```", "```js\n|----TFTF--------TF------> flag flip\n----------a---------b----> text change\nc----cccc-c------cc-c----> new assignment\n```", "```js\nconst Title = ({ text, flag }) => {\n  const [found, setFound] = useState(\"\")\n  useEffect(() => {\n    setFound(matchTextInArray(text))\n  }, [text])\n  ...\n}\n```", "```js\n|----TFTF--------TF------> flag flip\n----------a---------b----> text change\n-c---------c---------c---> new assignment\n```", "```js\nconst Title = () => {\n  const label = useMemo(() => {\n    return \"Hello World\"\n  }, [])\n}\n```", "```js\nfunction useMemo(create, deps) {\n  if (isFiberMounting) {\n    return mountMemo(create, deps)\n  } else {\n    return updateMemo(create, deps)\n  }\n}\n```", "```js\nfunction mountMemo(create, deps) {\n  const hook = mountHook()\n  const value = create()\n  hook.state = [value, deps]\n  return value\n}\n```", "```js\nfunction updateMemo(create, deps) {\n  const hook = updateHook()\n  const prevState = hook.state\n  if (prevState !== null) {\n    if (deps !== null) {\n      const prevDeps = prevState[1]\n      if (areDepsEqual(ndeps, prevDeps)) {\n        return prevState[0]\n      }\n    }\n  }\n  const value = create()\n  hook.state = [value, deps]\n  return value\n}\n```", "```js\n      const v = useMemo(() => {...}, [])\n    ```", "```js\n      const v = useMemo(() => {...}, [a, b])\n    ```", "```js\n  const a = useMemo(() => {\n    return b + 3\n  }, [b])\n```", "```js\n  const obj = useMemo(() => {\n    return { name }\n  }, [name])\n```", "```js\n  const fn = useMemo(() => {\n    return () => {\n      return 1\n    }\n  }, [])\n```", "```js\n  const fn = () => { return 1 }\n```", "```js\nconst Title = () => {\n  const a = useMemo(() => { ... }, [])\n  return <Child a={a} />\n}\n```", "```js\nconst Title = ({ text, flag }) => {\n  const found = useMemo(() => {\n    console.log('created')         ➀\n    return matchTextInArray(text))\n  }, [text])  \n  console.log('updated', found)    ➁\n  ...\n}\n```", "```js\n|----TFTF--------TF------> flag\n----------a---------b----> text\nR----RRRR-R---------R----> updated ➁\nc---------c---------c----> created ➀\n```", "```js\nconst fruits = [\"Apple\", \"Banana\", \"Blackberries\", ...]\n```", "```js\nconst Title = () => {\n  const [text, setText] = useState('')\n  const [query, setQuery] = useState('')\n  const matched = fruits.filter(v => v.includes(query))  \n  const onType = e => { setText(e.target.value) }\n  const onSearch = () => { setQuery(text) } \n  console.log('updated', text)      ➁\n  return (\n    <>\n      <input value={text} onChange={onType} />\n      <button onClick={onSearch}>Search</button>\n      {{matched.join(',')}\n    </>\n  )\n}\n```", "```js\n  const matched = titles.filter(v => v.includes(query))\n```", "```js\n|----kkkk--------kk------> user type\n----------x---------x----> search click\nR-----RRRR-R------RR-R---> updated  ➁\nm-----mmmm-m------mm-m---> created  ➁\n```", "```js\n  const matched = useMemo(() => {\n    console.log('created', query)   ➀\n    return titles.filter(v => v.includes(query))\n  }, [query])\n```", "```js\n|----kkkk--------kk------> user type\n----------x---------x----> search click\nR-----RRRR-R------RR-R---> updated  ➁\nm----------m---------m---> created  ➀\n```", "```js\nconst Title = () => {\n  const [text, setText] = useState('')\n  const [query, setQuery] = useState('')\n  const matched = useMemo(() => {\n    console.log('created', query)    ➀\n    return fruits.filter(v => v.includes(query))\n  }, [query])\n  const onType = e => {\n    const v = e.target.value\n    setText(v)\n    setQuery(v)\n  }\n  console.log('updated', text)       ➁\n  return (\n    <>\n      <input value={text} onChange={onType} />\n      {matched.join(',')}\n    </>\n  )\n}\n```", "```js\nconst debouncedFn = debounce(fn, dt)\n```", "```js\n  const setDebouncedQuery = debounce(\n    t => { setQuery(t) }, 300\n  )\n  const onType = e => {\n    const v = e.target.value\n    setText(v)\n    setDebouncedQuery(v)\n  }\n```", "```js\n  const setDebouncedQuery = useMemo(() => {\n    return debounce(t => {\n      console.log('clicked')         ➂ \n      setQuery(t)) \n    }, 300)\n  }, [setQuery])\n```", "```js\n|----kkkk--------kk------> user type\n---------x---------x-----> \"clicked\" ➂ \nR-----RRRRR-------RRR----> updated   ➁\nm---------m---------m----> created   ➀\n```", "```js\nconst fibs = { 0: 1, 1: 1 }\nfunction fib(n)  {\n  if (!fibs[n]) {\n    fibs[n] = fibs[n - 1] + fibs[n - 2]\n  }\n  return fibs[n]\n}\n```", "```js\nconst Title = ({ n, text }) => {\n  const f = useMemo(() => fib(n), [n])  \n  return <div>{text} – {f}</div>\n}\n```", "```js\nconst Title = ({ n, text }) => {\n  const f = fib(n)  \n  return <div>{text} - {f}</div>\n}\n```", "```js\nconst Title = () => {\n  const a = useMemo(() => { ... }, [])\n  return <Child a={a} />\n}\n```", "```js\nconst Title = () => {\n  const child = useMemo(() => {\n    return <Child a=\"Hello World\" />\n  }, [])  \n  return child\n}\n```"]