["```js\n// src/components/TodoRepositories.vue\nexport default {\n  components: { RepositoriesFilters, RepositoriesSortBy,\n                RepositoriesList },\n  props: {\n    todo: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      repositories: [], // 1\n      filters: {}, // 3\n      searchQuery: '', // 2\n    }\n  },\n  computed: {\n    filteredRepositories() {}, // 3\n    repositoriesMatchingSearchQuery() {}, // 2\n  },\n  watch: {\n    todo: 'getTodoRepositories', // 1\n  },\n  mounted() {\n    this.getTodoRepositories() // 1\n  },\n  methods: {\n    getTodoRepositories() {\n      // using `this.Todo` to fetch Todo repositories\n    }, // 1\n    updateFilters() {}, // 3\n  },\n}\n```", "```js\n<script setup>\nimport { fetchTodoRepositories } from '@/api/repositories'\nimport { ref, watch, computed } from 'vue'\nconst props = defineProps({\n    todo: {\n        type: String\n        default:\"\"\n    }\n})\n  const repositories = ref([])\n  const getTodoRepositories = async () => {\n    repositories.value =\n        await fetchTodoRepositories(props.todo)\n  }\n  getTodoRepositories()\n  // set a watcher on the Reactive Reference to user todo\n  // prop\n  watchEffect(getTodoRepositories)\n  const searchQuery = ref('')\n  const repositoriesMatchingSearchQuery = computed(() => {\n    return repositories.value.filter(\n      repository =>\n          repository.name.includes(searchQuery.value)\n    )\n  })\n</script>\n```", "```js\nnpm init @vitejs/app pinterest-app-clone\ncd pinterest-app-clone\nnpm install\nnpm run dev\n// If you're having issues with spaces in username, try using:\nnpx create-vite-app pinterest-app-clone\n```", "```js\n    npx create-strapi-app strapi-api --quickstart\n    # OR\n    yarn create strapi-app strapi-api --quickstart\n    ```"]