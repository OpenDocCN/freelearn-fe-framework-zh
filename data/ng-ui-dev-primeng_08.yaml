- en: Creating Charts and Maps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建图表和地图
- en: In this chapter, we will cover the ways to create visual charts with PrimeNG's
    extensive charting features and maps based on Google Maps. PrimeNG offers basic
    and advanced charting with its easy-to-use and user-friendly charting infrastructure.
    Besides standard charts, there is a special kind of chart for visualizing the
    hierarchical organization data. Throughout the chapter, mapping abilities such
    as drawing polylines, polygons, handling markers, and events will be explained
    as well.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍如何使用PrimeNG的丰富图表功能和基于谷歌地图的地图来创建可视化图表的方法。PrimeNG提供了基本和高级的图表功能，其易于使用和用户友好的图表基础设施。除了标准图表外，还有一种特殊的图表用于可视化分层组织数据。在本章中，还将解释绘制折线、多边形、处理标记和事件等地图功能。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Working with the chart model
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图表模型
- en: Data representation with line and bar charts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用线图和条形图表示数据
- en: Data representation with pie and doughnut charts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用饼图和圆环图表示数据
- en: Data representation with radar and polar area charts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用雷达和极地区域图表表示数据
- en: Drawing an organization chart for relationship hierarchy
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制关系层次的组织图表
- en: Basic integration with the Google Map API
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与谷歌地图API的基本集成
- en: Various use cases with the GMap component
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GMap组件的各种用例
- en: Working with the chart model
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用图表模型
- en: The chart component provides a visual representation of data using charts on
    a web page. PrimeNG chart components are based on the **Charts.js 2.x** library
    (as a dependency), which is a HTML5 open source library. The chart model is based
    on the `UIChart` class name, and it can be represented with the element name as
    `p-chart`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图表组件通过在网页上使用图表来对数据进行可视化表示。PrimeNG图表组件基于**Charts.js 2.x**库（作为依赖项），这是一个HTML5开源库。图表模型基于`UIChart`类名，并且可以用元素名`p-chart`表示。
- en: 'The chart components will work efficiently by attaching a chart model file
    (`chart.js`) to your project. It can be configured as either a CDN resource, local
    resource, or CLI configuration:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将图表模型文件（`chart.js`）附加到项目中，图表组件将有效地工作。它可以配置为CDN资源、本地资源或CLI配置：
- en: '**CDN resource configuration**:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CDN资源配置**：'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Angular CLI configuration**:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Angular CLI配置**：'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: More about chart configuration and options is available in the official documentation
    of the Chart.js library ([http://www.chartjs.org/](http://www.chartjs.org/)).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有关图表配置和选项的更多信息，请参阅Chart.js库的官方文档（[http://www.chartjs.org/](http://www.chartjs.org/)）。
- en: Chart types
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图表类型
- en: 'The chart type is defined through the `type` property. It supports seven different
    types of charts with an option for customizations:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图表类型通过`type`属性定义。它支持七种不同类型的图表，并提供自定义选项：
- en: '`pie`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`饼图`'
- en: '`bar`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`条形图`'
- en: '`line`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`行`'
- en: '`doughnut`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`圆环图`'
- en: '`polarArea`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`极地区域图`'
- en: '`radar`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`雷达图`'
- en: '`horizontalBar`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`水平条形图`'
- en: 'Each type has it''s own format of data, and it can be supplied through the
    `data` property. For example, in the doughnut chart, the type should refer to
    `doughnut` and the `data` property should bind to the data options, as shown here:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 每种类型都有自己的数据格式，可以通过`data`属性提供。例如，在圆环图中，类型应该是`doughnut`，`data`属性应该绑定到数据选项，如下所示：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The component class has to define data with the options `labels` and `datasets`,
    as shown here:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类必须使用`labels`和`datasets`选项定义数据，如下所示：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Along with the labels and data options, other properties related to skinning
    can be applied too.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标签和数据选项之外，还可以应用与皮肤相关的其他属性。
- en: The legends are closable by default (that is, if you want to visualize only
    a particular data variant, then it is possible by collapsing legends which are
    not required). The collapsed legend is represented with a strike line. The respective
    data component will disappear after the click operation on the legend.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图例默认是可关闭的（也就是说，如果您只想可视化特定的数据变体，那么可以通过折叠不需要的图例来实现）。折叠的图例用一条删除线表示。在图例上点击操作后，相应的数据组件将消失。
- en: Customization
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义
- en: 'Each series is customized on a dataset basis, but you can customize the general
    or common options via the `options` attribute. For example, the line chart which
    customizes the default options would be as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每个系列都是基于数据集进行自定义的，但您可以通过`options`属性来自定义通用的选项。例如，自定义默认选项的折线图将如下所示：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The component needs to define the chart options with customized `title` and
    `legend` properties, as shown here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件需要使用自定义的`title`和`legend`属性来定义图表选项，如下所示：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As per the preceding example, the `title` option is customized with a dynamic
    title, font size, and conditional display of the title, whereas the `legend` attribute
    is used to place the legend in `top`, `left`, `bottom`, and `right` positions.
    The default legend position is `top`. In this example, the legend position is
    `bottom`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上面的示例，`title`选项使用动态标题、字体大小和条件显示标题进行自定义，而`legend`属性用于将图例放置在`top`、`left`、`bottom`和`right`位置。默认的图例位置是`top`。在这个例子中，图例位置是`bottom`。
- en: 'The line chart with the preceding customized options would result as the following
    snapshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 具有上述自定义选项的折线图将产生以下快照：
- en: '![](assets/7bb09002-bafe-4a47-a1d8-438f8cf27443.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7bb09002-bafe-4a47-a1d8-438f8cf27443.png)'
- en: 'The `Chart` API also supports the utility methods shown here:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`Chart` API还支持这里显示的实用方法：'
- en: '| **Method** | **Description** |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **描述** |'
- en: '| `refresh` | Redraws the graph with new data |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `refresh` | 用新数据重新绘制图表 |'
- en: '| `reinit` | Destroys the existing graph and then creates it again |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `reinit` | 销毁现有图表，然后重新创建 |'
- en: '| `generateLegend` | Returns an HTML string of a legend for that chart |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `generateLegend` | 返回该图表图例的HTML字符串 |'
- en: Events
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: The chart component provides a click event on datasets to process the selected
    data using the `onDataSelect` event callback.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图表组件提供了对数据集的点击事件，以使用`onDataSelect`事件回调处理所选数据。
- en: 'Let''s take a line chart example with the `onDataSelect` event callback by
    passing an `event` object as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过传递`event`对象来使用`onDataSelect`事件回调来看一个折线图的例子：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the component class, an event callback is used to display selected data
    information in the following message format:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件类中，事件回调用于以以下消息格式显示所选数据信息：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the preceding event callback (`onDataSelect`), we used an index of the dataset
    to display information. There are also many other options from an `event` object:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述事件回调（`onDataSelect`）中，我们使用数据集的索引来显示信息。还有许多其他来自`event`对象的选项：
- en: '`event.element`: Selected element'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.element`：选定的元素'
- en: '`event.dataset`: Selected dataset'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.dataset`：选定的数据集'
- en: '`event.element._datasetIndex`: Index of the chart data series'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.element._datasetIndex`：图表数据系列的索引'
- en: '`event.element._index`: Index of the data element inside chart series'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.element._index`：图表系列内数据元素的索引'
- en: Data representation with line and bar charts
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用折线图和条形图进行数据表示
- en: A line chart or line graph is a type of chart which displays the information
    as a series of data points called *markers* connected by straight line segments.
    A line chart is often used to visualize the real-time data in regular time intervals
    or time series.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 折线图是一种以一系列数据点（称为*标记*）通过直线段连接来显示信息的图表类型。折线图通常用于可视化定期时间间隔或时间序列中的实时数据。
- en: 'A basic example of line chart usage regarding the Prime libraries downloads
    would be as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Prime库下载量的线图使用的基本示例如下：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The component class should define a line chart data, in which one refers to
    the PrimeNG series and the other one refers to the PrimeUI series over the past
    year, as shown here:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类应该定义一条线图数据，其中一条是指PrimeNG系列，另一条是指过去一年的PrimeUI系列，如下所示：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As per the preceding code snippets, along with the data and labels, we can
    also define background and border colors to make the line chart as fancy and customizable
    as we like. The following screenshot shows a snapshot result of the line chart
    as an example:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述代码片段，除了数据和标签之外，我们还可以定义背景和边框颜色，使线图变得像我们喜欢的那样花哨和可定制。以下截图显示了线图的快照结果：
- en: '![](assets/ffdb9569-4a3d-45d9-ad44-6eceac177cd8.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ffdb9569-4a3d-45d9-ad44-6eceac177cd8.png)'
- en: A bar chart or bar graph is a chart or graph that presents grouped data with
    rectangular bars, which are proportional to the values that they represent. PrimeNG
    also supports horizontal representation of bars in the graph.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 条形图或柱状图是一种呈现分组数据的图表，其中用矩形条表示的值是成比例的。PrimeNG还支持图表中条的水平表示。
- en: 'A basic example of bar chart usage regarding the Prime libraries downloads
    would be as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Prime库下载量的条形图使用的基本示例如下：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The component class should define the bar chart data, in which one bar refers
    to PrimeNG data and the other bar refers to the PrimeUI series over the past year,
    as shown here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类应该定义条形图数据，其中一条是指PrimeNG数据，另一条是指过去一年的PrimeUI系列，如下所示：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot shows a snapshot result of the bar chart with PrimeNG
    and PrimeUI downloads over the time period of a year as an example:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一年时间内PrimeNG和PrimeUI下载量的条形图的快照结果：
- en: '![](assets/3522fac5-2b59-46bc-a5e7-91630bbce406.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3522fac5-2b59-46bc-a5e7-91630bbce406.png)'
- en: In the preceding chart, only two datasets are compared over a regular period
    of time. This can be applied for multi-datasets as well.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的图表中，只有两个数据集在一个固定的时间段内进行比较。这也可以应用于多个数据集。
- en: Data representation with pie and doughnut charts
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用饼图和圆环图表示数据
- en: 'A pie chart (or a circle chart) is a circular statical graphic, which is divided
    into slices to illustrate the numerical proportion of composite data. The arch
    length of each slice is equal to the quantity of data entity. A basic example
    of the pie chart usage regarding the Prime libraries downloads would be as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 饼图（或圆环图）是一种将圆形分成片段以说明复合数据的数值比例的圆形统计图。每个片段的弧长等于数据实体的数量。关于Prime库下载量的饼图使用的基本示例如下：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The component class should define the pie chart data with three slices for
    three prime libraries over the period of time, as shown here:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类应该定义饼图数据，其中有三个片段分别代表了三个Prime库在一段时间内的情况，如下所示：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following screenshot shows a snapshot result of the pie chart with PrimeNG,
    PrimeUI, and PrimeReact downloads over the time period of a year as an example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一年时间内PrimeNG、PrimeUI和PrimeReact下载量的饼图的快照结果：
- en: '![](assets/d5913a24-d645-4136-89e5-42fbea2d8685.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d5913a24-d645-4136-89e5-42fbea2d8685.png)'
- en: By hovering over each pie chart slice, you can observe the respective data label
    and it's value.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过悬停在每个饼图的片段上，您可以观察到相应的数据标签及其值。
- en: A doughnut chart is a variant of the pie chart, with a blank hollow center allowing
    for the additional information about the complete data (that is, each slice represents
    specific unique data and the general additional information applies to all slices
    represented by the center circle).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 甜甜圈图是饼图的一种变体，中间有一个空心中心，可以提供有关完整数据的附加信息（即，每个切片代表特定的唯一数据，中心圆表示所有切片的一般附加信息）。
- en: 'A basic example of doughnut chart usage for Prime libraries downloads would
    be as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Prime库下载的甜甜圈图使用的基本示例如下：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The component class should define the pie chart data with three slices for
    three Prime libraries over the period of time, as shown here:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类应该定义饼图数据，其中包括三个切片，用于一段时间内的三个Prime库，如下所示：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following screenshot shows a snapshot result of the doughnut chart with
    PrimeNG, PrimeUI, and PrimeReact downloads over the time period of a year as an
    example:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例，显示了在一年的时间内使用PrimeNG、PrimeUI和PrimeReact下载的甜甜圈图的快照结果：
- en: '![](assets/ecb71e44-f16b-42c7-9953-3ad839d3e516.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ecb71e44-f16b-42c7-9953-3ad839d3e516.png)'
- en: By default, the cutout percentage of the doughnut chart is `50` (where as for
    pie chart it is `0`). This can be customized through the `cutoutPercentage` chart
    option.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，甜甜圈图的切除百分比为`50`（而饼图为`0`）。这可以通过`cutoutPercentage`图表选项进行自定义。
- en: Data representation with radar and polar area charts
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 雷达和极地区域图的数据表示
- en: A radar chart is a graphical representation of displaying the multivariant data
    in the form of a two-dimensional chart. It has at least three or more quantitative
    variables represented on axes starting from the same point. This chart is also
    called the **spider chart** or **star chart**. It is useful in measuring performance
    metrics of any ongoing program to control the quality of improvement.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 雷达图是以二维图表的形式显示多变量数据的图形表示。它至少有三个或更多的定量变量，这些变量表示在从同一点开始的轴上。这种图表也被称为**蜘蛛图**或**星形图**。它在衡量任何正在进行的程序的绩效指标方面非常有用，以控制改进的质量。
- en: 'A basic example of radar chart usage for a PrimeNG and a PrimeReact project''s
    progress would be as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG和PrimeReact项目进展的雷达图使用的基本示例如下：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The component class should define the radar chart data with two datasets (PrimeNG
    and PrimeReact) for six phases of an SDLC process as shown here:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类应该定义雷达图数据，其中包括两个数据集（PrimeNG和PrimeReact），用于SDLC过程的六个阶段，如下所示：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the preceding example, the datasets are not only referred to the data components
    but also provide skinning to the chart using background, border color, and so
    on. The following screenshot shows a snapshot result of the radar chart with a
    PrimeNG and a PrimeReact project''s progress over six phases of the SDLC life
    cycle process as an example:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，数据集不仅指的是数据组件，还为图表提供了背景、边框颜色等皮肤。以下截图显示了雷达图的快照结果，其中包括PrimeNG和PrimeReact项目在SDLC生命周期过程的六个阶段的进展：
- en: '![](assets/3637f524-12da-4e0e-b04b-f19c9af43c66.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3637f524-12da-4e0e-b04b-f19c9af43c66.png)'
- en: Polar area charts are similar to pie charts, but each segment has the same angle
    (that is, the radius of the segment differs depending on the value). This type
    of chart is often useful when we want to show a comparison data just similar to
    a pie chart. But, you can also show a scale of values for the given context.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 极地区域图类似于饼图，但每个部分的角度相同（即，部分的半径根据值的不同而不同）。当我们想要显示与饼图类似的比较数据时，这种类型的图表通常很有用。但是，您也可以为给定上下文显示一组值的比例。
- en: 'A basic example of a polar chart usage for Prime product libraries downloads
    would be as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Prime产品库下载的极坐标图使用的基本示例如下：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The component class should define polar chart downloads data for various Prime
    libraries as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类应该定义各种Prime库的极地图下载数据，如下所示：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The component class creates the data options along with skinning properties.
    The following screenshot shows a snapshot result of the polar chart with PrimeFaces,
    PrimeNG, PrimeUI, PrimeReact, and PrimeMobile downloads for the time period of
    a year as an example:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类创建了数据选项以及外观属性。以下屏幕截图显示了使用PrimeFaces、PrimeNG、PrimeUI、PrimeReact和PrimeMobile下载的极地图的快照结果，作为一年时间段的示例：
- en: '![](assets/d9b74d4b-f070-43ea-b525-d5e887e2ebb5.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d9b74d4b-f070-43ea-b525-d5e887e2ebb5.png)'
- en: Based on the datasets, `min` and `max` values are provided, and polar chart
    data segment values will be adjusted (1, 2, 3, 4, 50).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 根据数据集，提供了`min`和`max`值，并且极地图数据段值将被调整（1、2、3、4、50）。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter8/charts](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter8/charts).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter8/charts](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter8/charts)。'
- en: Drawing an organization chart for the relationship hierarchy
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制关系层次结构的组织图
- en: The organization chart is a diagram that visualizes hierarchically organized
    data. PrimeNG provides a component called `OrganizationChart` to display such
    top-down relationship hierarchies. The component requires a model of the `TreeNode`
    instances as its value. The `TreeNode` API was explained in [Chapter 5](e0418439-433b-431d-bb3d-5e84f1e91554.xhtml),
    *Data Iteration Components* in the *Visualizing data with Tree* section. In this
    section, we will introduce details on the `OrganizationChart` component and develop
    a chart which illustrates a project in an organization.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 组织图是一种可视化分层组织数据的图表。PrimeNG提供了一个名为`OrganizationChart`的组件，用于显示这种自上而下的关系层次结构。该组件需要`TreeNode`实例的模型作为其值。`TreeNode`
    API在[第5章](e0418439-433b-431d-bb3d-5e84f1e91554.xhtml)中的*数据迭代组件*的*使用树形可视化数据*部分进行了解释。在本节中，我们将介绍`OrganizationChart`组件的详细信息，并开发一个图表，用于说明组织中的一个项目。
- en: Hierarchical data with zero configuration
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 零配置的分层数据
- en: 'Drawing a simple chart is easily done--only the `value` attribute is required:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制简单图表很容易--只需要`value`属性：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the component class, we need to create an array of nested `TreeNode` instances.
    In the simple use case, providing labels is enough:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件类中，我们需要创建一个嵌套的`TreeNode`实例数组。在简单的用例中，提供标签就足够了：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'By default, tree nodes having children nodes (leafs) are not expanded. To display
    a tree node as expanded, we can set in the model `expanded: true`. Users can expand
    and collapse nodes per click on the small arrow icon at the node connection point.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '默认情况下，具有子节点（叶子）的树节点不会展开。要将树节点显示为展开状态，可以在模型中设置`expanded: true`。用户可以通过单击节点连接点处的小箭头图标来展开和折叠节点。'
- en: 'The simple use case is illustrated in the following diagram:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 简单用例如下图所示：
- en: '![](assets/db6471f0-e4cf-43dd-9168-3ea64b5d7fe4.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/db6471f0-e4cf-43dd-9168-3ea64b5d7fe4.png)'
- en: Advanced customization
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级自定义
- en: Customization is enabled by templating with the `ng-template` tag. `TreeNode`
    has the `type` property, which is used to match the value of the `pTemplate` attribute.
    This matching allows you to customize the UI for every single node. Nodes without
    the `type` property match `pTemplate="default"`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`ng-template`标签进行模板化，可以启用自定义。`TreeNode`具有`type`属性，用于匹配`pTemplate`属性的值。这种匹配允许您为每个单个节点自定义UI。没有`type`属性的节点匹配`pTemplate="default"`。
- en: 'The next code snippet has two `ng-template` tags. The first one matches the
    nodes with the `type` property `department`. The second one matches the nodes
    without types. The current node object is exposed via the microsyntax `let-node`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个代码片段有两个`ng-template`标签。第一个匹配具有`type`属性`department`的节点。第二个匹配没有类型的节点。当前节点对象通过微语法`let-node`公开：
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We will only show an excerpt of the `data` array to convey the idea.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只会展示`data`数组的一部分来传达这个想法。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter8/orgchart](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter8/orgchart).'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter8/orgchart](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter8/orgchart)。'
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The customized organization chart looks like the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义的组织图如下所示：
- en: '![](assets/824a5462-8344-4089-96d6-692ea7c83fd0.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/824a5462-8344-4089-96d6-692ea7c83fd0.png)'
- en: 'We specified custom style classes to set colors for nodes and togglers. For
    example:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定了自定义样式类来设置节点和切换器的颜色。例如：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The complete styling settings are available on GitHub.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的样式设置可在GitHub上找到。
- en: Selection and events
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择和事件
- en: 'Selection is enabled by setting `selectionMode` to one of possible values:
    `single` or `multiple`. In the `single` mode, a single `TreeNode` is expected
    as the value of the `selection` property. In the `multiple` mode, an array is
    expected. For example:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 选择是通过将`selectionMode`设置为可能的值之一来启用的：`single`或`multiple`。在`single`模式下，预期`selection`属性的值是单个`TreeNode`。在`multiple`模式下，预期是一个数组。例如：
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The organization chart supports two events:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 组织图支持两个事件：
- en: '| **Name** | **Parameters** | **Description** |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '|**名称**|**参数**|**描述**|'
- en: '| `onNodeSelect` |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '|`onNodeSelect`|'
- en: '`event.originalEvent`: Browser event'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`：浏览器事件'
- en: '`event.node`: Selected node instance'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.node`：选定的节点实例'
- en: '| Callback invoked when a node is selected by a click. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '|当通过单击选择节点时调用的回调。|'
- en: '| `onNodeUnselect` |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '|`onNodeUnselect`|'
- en: '`event.originalEvent`: Browser event'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`：浏览器事件'
- en: '`event.node`: Unselected node instance'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.node`：取消选择的节点实例'
- en: '| Callback invoked when a node is unselected by a click. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '|当通过单击取消选择节点时调用的回调。|'
- en: 'Let''s extend the previous developed organization chart as shown here:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们扩展如下所示的先前开发的组织图：
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the demo application on GitHub, we defined a `VCard` interface representing
    a person''s VCard:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub上的演示应用程序中，我们定义了一个代表个人VCard的`VCard`接口：
- en: '[PRE27]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'All VCard instances are lazily fetched in the `onNodeSelect` callback. After
    that, a VCard to the clicked person (node) is shown in the PrimeNG dialog:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 所有VCard实例都是在`onNodeSelect`回调中延迟获取的。之后，VCard会显示在PrimeNG对话框中：
- en: '[PRE28]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The dialog itself looks like the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框本身如下所示：
- en: '[PRE29]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The result is truly amazing:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 结果真是令人惊叹：
- en: '![](assets/deea3d60-994e-4401-8a05-f6896dd74ec1.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/deea3d60-994e-4401-8a05-f6896dd74ec1.png)'
- en: Basic integration with the Google Maps API
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Google Maps API的基本集成
- en: The GMap component provides an integration with the Google Maps API in order
    to use it efficiently with less configuration. It covers major features such as
    binding options, various overlays, events, and so on. This component requires
    the Google Maps API, hence it needs to be referred in the `script` section.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: GMap组件提供了与Google Maps API的集成，以便以更少的配置高效地使用它。它涵盖了诸如绑定选项、各种覆盖物、事件等主要功能。该组件需要Google
    Maps API，因此需要在`script`部分中引用它。
- en: 'The JS resource file needs to be added in a script section, which has to be
    utilized by the GMap component, as shown here:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: JS资源文件需要在脚本部分中添加，这需要由GMap组件利用，如下所示：
- en: '[PRE30]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'A basic example of GMap usage with map options would be as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用地图选项的GMap的基本示例如下：
- en: '[PRE31]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The option has to be defined with coordinates/positional dimensions (*latitude*
    and *longitude*), zoom options, and so on during the page load as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面加载期间，必须使用坐标/位置尺寸（*纬度*和*经度*）、缩放选项等来定义选项，如下所示：
- en: '[PRE32]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following screenshot shows a snapshot result of the GMap example:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了GMap示例的快照结果：
- en: '![](assets/a77f55ff-2206-468a-a0d0-3cee377db71f.png)Snapshot result of the
    GMap example'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/a77f55ff-2206-468a-a0d0-3cee377db71f.png)GMap示例的快照结果'
- en: As per the preceding snapshot, the exact area location is displayed based on
    the co-ordinates provided and the mode of visibility through zoom settings.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的快照，根据提供的坐标和缩放设置的可见性模式，显示确切的区域位置。
- en: Various use cases with the GMap component
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GMap组件的各种用例
- en: GMap can be used for various use cases apart from the basic usage of Google
    Maps. Maps will be more interactive using different kinds of overlays, events
    on maps, overlays, and so on.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基本的Google地图用法之外，GMap还可以用于各种用例。使用不同类型的覆盖物、地图上的事件、覆盖物等，地图将更加交互。
- en: Overlays
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 覆盖物
- en: Overlays are objects on the map that are bound to latitude/longitude coordinates
    or dimensions. The array of overlay instances are binding through the `overlays`
    property. Due to the nature of one-way binding, when there are changes from an
    array then the map will update automatically.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖物是地图上绑定到纬度/经度坐标或尺寸的对象。覆盖实例数组通过`overlays`属性进行绑定。由于单向绑定的性质，当数组发生变化时，地图将自动更新。
- en: 'GMap supports various types of overlays, as shown here:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: GMap支持各种类型的覆盖物，如下所示：
- en: '**Marker**: Single locations on a map. Markers can also display custom icon
    images.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标记**：地图上的单个位置。标记还可以显示自定义图标图像。'
- en: '**Polyline**: Series of straight lines on a map.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**折线**：地图上的一系列直线。'
- en: '**Polygon**: Series of straight lines on a map but the shape is "closed."'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多边形**：地图上的一系列直线，但形状是“闭合的”。'
- en: '**Circle and rectangle**: Represents a specific region as a circle/rectangle.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**圆形和矩形**：表示特定区域的圆形/矩形。'
- en: '**Info windows**: Displays content within a pop-up balloon on top of a map.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信息窗口**：在地图顶部的气球中显示内容。'
- en: 'The GMap example usage with overlay options would be written as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 使用覆盖选项的GMap示例用法将被编写如下：
- en: '[PRE33]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Let''s define an array of overlay instances such as markers, polyline, polygon,
    circle, and so on, as shown here:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个覆盖实例数组，例如标记、折线、多边形、圆形等，如下所示：
- en: '[PRE34]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The following screenshot shows a snapshot result of the GMap with various overlays
    as an example:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了GMap的快照结果，其中包含各种覆盖物作为示例：
- en: '![](assets/596d843f-6c1c-4c73-8828-1cb40d7fc438.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/596d843f-6c1c-4c73-8828-1cb40d7fc438.png)'
- en: In the preceding map, you can observe that markers, a polygon, and a circle
    are displayed based on the co-ordinates provided and also based on other overlay-specific
    configurations.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述地图中，您可以观察到基于提供的坐标以及其他覆盖物特定配置的标记、多边形和圆形。
- en: Events
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: GMap is more powerful with interactive events on the map. There are many callbacks
    available to hook into events while clicking on the map, overlay clicking, and
    dragging the overlay.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: GMap在地图上的交互事件中更加强大。有许多可用的回调函数可以钩入事件，例如单击地图、覆盖物单击和拖动覆盖物。
- en: 'The map component example with various types of overlay events along with event
    callbacks would be written as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 具有各种类型的覆盖物事件以及事件回调的地图组件示例将被编写如下：
- en: '[PRE35]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Either existing events can be updated by clicking the overlays or new events
    can be created by clicking the map using the dialog component as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过单击覆盖物来更新现有事件，也可以通过单击地图并使用对话框组件来创建新事件，如下所示：
- en: '[PRE36]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The component class has to define various overlay types on the initial page
    load, as shown here:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类必须在初始页面加载时定义各种覆盖类型，如下所示：
- en: '[PRE37]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The following snapshot shows how the overlay events can be created or updated:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 以下快照显示了如何创建或更新叠加层事件：
- en: '![](assets/45f32ea0-14f6-40f3-a612-71d5008bd82a.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/45f32ea0-14f6-40f3-a612-71d5008bd82a.png)'
- en: 'The map component supports the following listed event callbacks:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 地图组件支持以下列出的事件回调：
- en: '| **Name** | **Parameter** | **Description** |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **参数** | **描述** |'
- en: '| `onMapClick` | `event`: Google Maps MouseEvent | When map is clicked except
    markers. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| `onMapClick` | `event`: Google 地图鼠标事件 | 当地图被点击时，除了标记。|'
- en: '| `onOverlayClick` | `originalEvent`: Google Maps MouseEvent `overlay`: Clicked
    overlay'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '| `onOverlayClick` | `originalEvent`: Google 地图鼠标事件 `overlay`: 点击的叠加层'
- en: '`map`: Map instance | When an overlay is clicked. |'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`地图`: 地图实例 | 当叠加层被点击时。|'
- en: '| `onOverlayDragStart` | `originalEvent`: Google Maps MouseEvent `overlay`:
    Clicked overlay'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '| `onOverlayDragStart` | `originalEvent`: Google 地图鼠标事件 `overlay`: 点击的叠加层'
- en: '`map`: Map instance | When an overlay drag starts. |'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`地图`: 地图实例 | 当叠加层拖动开始时。|'
- en: '| `onOverlayDrag` | `originalEvent`: Google Maps MouseEvent `overlay`: Clicked
    overlay'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '| `onOverlayDrag` | `originalEvent`: Google 地图鼠标事件 `overlay`: 点击的叠加层'
- en: '`map`: Map instance | When an overlay is being dragged. |'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`地图`: 地图实例 | 当叠加层被拖动时。|'
- en: '| `onOverlayDragEnd` | `originalEvent`: Google Maps MouseEvent `overlay`: Clicked
    overlay'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '| `onOverlayDragEnd` | `originalEvent`: Google 地图鼠标事件 `overlay`: 点击的叠加层'
- en: '`map`: Map instance | When an overlay drag ends. |'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`地图`: 地图实例 | 当叠加层拖动结束时。|'
- en: '| `onMapReady` | `event.map`: Google Maps instance | When a map is ready after
    loading. |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| `onMapReady` | `event.map`: Google 地图实例 | 当地图加载后地图准备就绪时。|'
- en: '| `onMapDragEnd` | `originalEvent`: Google Maps `dragend` | Callback to invoke
    when a map drag (that is, pan) has ended. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `onMapDragEnd` | `originalEvent`: Google 地图 `dragend` | 当地图拖动（即平移）结束时调用的回调。|'
- en: '| `onZoomChanged` | `originalEvent`: Google Maps `zoom_changed` | Callback
    to invoke when a zoom level has changed. |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `onZoomChanged` | `originalEvent`: Google 地图 `zoom_changed` | 当缩放级别发生变化时调用的回调。|'
- en: There are two ways of accessing the map API. One of them is the `getMap()` function
    of the GMap component (`gmap.getMap()`) and the other one is accessed through
    an event object (`event.map`). Once the map is ready then all map functions can
    be used based on our requirement. For example, the `getZoom()` method can be used
    to increase or decrease from the current state.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种访问地图 API 的方式。其中一种是 GMap 组件的 `getMap()` 函数 (`gmap.getMap()`)，另一种是通过事件对象访问
    (`event.map`)。一旦地图准备就绪，那么根据我们的需求就可以使用所有地图函数。例如，`getZoom()` 方法可用于从当前状态增加或减少。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在 GitHub 上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter8/gmap](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter8/gmap).'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter8/gmap](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter8/gmap).'
- en: Summary
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: By reaching the end of this chapter, you will be able to visualize the data
    representations with PrimeNG charts and GMap components. Initially, we started
    with chart components. At first, we started with the chart model API and then
    learned how to create charts programmatically using various chart types such as
    pie, bar, line, doughnut, polar, and radar charts. We have seen that an organization
    chart fits perfectly the visualization of the relationship hierarchy.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 通过完成本章，您将能够使用 PrimeNG 图表和 GMap 组件可视化数据表示。最初，我们从图表组件开始。首先，我们从图表模型 API 开始，然后学习如何使用各种图表类型（如饼图、柱状图、折线图、圆环图、极坐标图和雷达图）以编程方式创建图表。我们已经看到，组织图表完美地适应了关系层次的可视化。
- en: Next, we moved to the Google Maps-based GMap component. The GMap component provides
    a convenient API for interactions with the Google Maps API, including drawing
    markers, polygons, circles, register events, and so on. In the next chapter, we
    will look at miscellaneous use cases and the best practices needed to be followed.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们转向基于谷歌地图的GMap组件。GMap组件提供了一个方便的API，用于与谷歌地图API进行交互，包括绘制标记、多边形、圆形，注册事件等等。在下一章中，我们将看一些其他用例和需要遵循的最佳实践。
