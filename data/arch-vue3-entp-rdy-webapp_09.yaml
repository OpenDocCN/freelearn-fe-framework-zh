- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Best Practices in Unit Testing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试的最佳实践
- en: In the previous chapter, we learned about the concept of software testing. We
    learned what to test from an array of available components and methods. In addition,
    we learned about the best practices and industry-standard testing libraries and
    how to integrate them with Vue.js 3.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了软件测试的概念。我们学习了从一系列可用的组件和方法中测试什么。此外，我们还学习了最佳实践和行业标准测试库，以及如何将它们与Vue.js
    3集成。
- en: In this chapter, we will explore everything related to unit testing. We will
    learn how to unit test a Vue.js 3 component and the component and page methods.
    We will also learn about unit testing tools such as Jest and Mocha and how to
    use them to effectively unit test an enterprise project.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨与单元测试相关的所有内容。我们将学习如何对Vue.js 3组件和组件及页面方法进行单元测试。我们还将了解单元测试工具，如Jest和Mocha，以及如何使用它们有效地对企业项目进行单元测试。
- en: 'We will cover the following key topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下关键主题：
- en: Introduction to unit testing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试简介
- en: What is unit testing?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是单元测试？
- en: The importance of unit testing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试的重要性
- en: The benefits of unit testing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试的好处
- en: Best practices in unit testing
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试的最佳实践
- en: JavaScript unit testing
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript单元测试
- en: Testing a basic Vue.js app
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试基本的Vue.js应用程序
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To get started with this chapter, I recommend you read through [*Chapter 8*](B17237_08.xhtml#_idTextAnchor266),
    *Testing and What to Test in Vue.js 3*, first, where we explored the concept of
    software testing and what to test from an array of available components and methods.
    We will rely heavily on the knowledge from that chapter when learning about Vue.js
    3 enterprise unit testing in this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始本章的学习，我建议您首先阅读[*第8章*](B17237_08.xhtml#_idTextAnchor266)，*Vue.js 3中的测试和要测试的内容*，在那里我们探讨了软件测试的概念以及从一系列可用的组件和方法中测试什么。在本章学习Vue.js
    3企业级单元测试时，我们将大量依赖该章节的知识。
- en: All the code files for this chapter can be found at [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-9](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-9).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码文件都可以在[https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-9](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-9)找到。
- en: Introduction to unit testing
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试简介
- en: Unit testing is an important step in the development phase because it helps
    spot errors and defects at the development stage if done correctly.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果正确执行，单元测试是开发阶段的一个重要步骤，因为它有助于在开发阶段发现错误和缺陷。
- en: Unit testing is a method of software testing in which the smallest testable
    parts of the software under test, called units, are individually or independently
    tested for proper operation and to make sure the output corresponds with the required
    output.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是一种软件测试方法，其中被测试软件的最小可测试部分，称为单元，被单独或独立地测试以确保其正确操作，并确保输出与所需输出相符。
- en: The units can be said to be individual functions, objects, methods, procedures,
    or modules in the software under test.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 单元可以被认为是软件中被测试的个体函数、对象、方法、过程或模块。
- en: This software testing approach is developed by software engineers to test the
    units of the program. It helps software engineers to know whether individual units
    of the code are working properly or not.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这种软件测试方法是由软件工程师开发的，用于测试程序的单元。它帮助软件工程师了解代码的各个单元是否正常工作。
- en: In this section, we will examine the definition of unit testing and explore
    how developers can create and manage unit tests within their enterprise-ready
    Vue.js 3 applications.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨单元测试的定义，并探讨开发人员如何在他们的企业级Vue.js 3应用程序中创建和管理单元测试。
- en: What is unit testing?
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是单元测试？
- en: Unit testing is a method of verifying the smallest piece of testable code against
    its purpose or requirement. This method makes sure that the smallest part of your
    code base is tested and made to conform to the requirements.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是一种验证可测试代码最小部分是否符合其目的或要求的方法。这种方法确保了代码库中最小的部分被测试，并使其符合要求。
- en: It is very important to discover and fix bugs during the development stage.
    Unit testing is the responsibility of developers because it is done in the development
    phase by the developers, and it is the developers that create unit tests for their
    production-ready code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发阶段发现和修复错误非常重要。单元测试是开发人员的责任，因为它是开发阶段由开发人员执行的，并且是开发人员为他们的生产代码创建单元测试。
- en: Software developers can approach unit testing in two different ways, either
    writing their code before writing unit tests or before writing their actual code,
    where the developer first creates a failing unit test. The second approach is
    called **Test-Driven** **Development** (**TDD**).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发者可以通过两种不同的方式来处理单元测试，要么在编写单元测试之前编写代码，要么在编写实际代码之前，开发者首先创建一个失败的单元测试。第二种方法被称为**测试驱动开发**（**TDD**）。
- en: When exploring the **Software Development Life Cycle** (**SDLC**) for software
    engineering and development, unit testing comes under development since it is
    the responsibility of the developers and serves as the base and first level of
    testing to ensure bug-free and defect-free software.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索软件工程和开发的**软件开发生命周期**（**SDLC**）时，单元测试属于开发阶段，因为它是开发者的责任，并作为基础和第一层测试，以确保软件无错误和无缺陷。
- en: '![Figure 9.1 – SDLC](img/Figure_9.01_B17237.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1 – SDLC](img/Figure_9.01_B17237.jpg)'
- en: Figure 9.1 – SDLC
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – SDLC
- en: In the next section, we will examine different best practices to create and
    manage unit tests.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨创建和管理单元测试的不同最佳实践。
- en: The importance and benefits of unit testing
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试的重要性和好处
- en: The importance of implementing unit testing in your development pipeline cannot
    be overemphasized. It has been proven to have tremendous benefits. It has also
    helped in detecting errors early in the development phase. We will go through
    some of the major benefits and the importance of unit testing in this section.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发流程中实施单元测试的重要性不容忽视。它已被证明具有巨大的好处。它还帮助在开发阶段早期发现错误。在本节中，我们将探讨单元测试的一些主要好处及其重要性。
- en: Unit testing is used to design robust and enterprise-ready software components
    that help maintain code and eliminate issues in code units. Finding and fixing
    bugs during development is important compared to discovering them in production.
    Unit testing helps in fixing these errors early in the development phases.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试用于设计稳健且企业级软件组件，有助于维护代码并消除代码单元中的问题。与在生产中发现错误相比，在开发过程中发现和修复错误更重要。单元测试有助于在开发阶段早期修复这些错误。
- en: It is an integral part of the agile software development process. During the
    build process and deployment, the unit test suite is automated to run and generate
    reports. If any of the unit tests fail, then the QA team should not accept that
    build for verification and it should be returned to the development team for more
    checking and validation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 它是敏捷软件开发过程的一个基本组成部分。在构建过程和部署期间，单元测试套件被自动化以运行并生成报告。如果任何单元测试失败，那么QA团队不应接受该构建进行验证，而应将其退回给开发团队进行更多检查和验证。
- en: Unit testing saves the QA and software testing teams a lot of time. If there
    is a proper standard and a well-configured, automated software testing pipeline
    for the enterprise application, errors and defects will be caught during development
    automatically.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试为QA和软件测试团队节省了大量时间。如果企业应用程序有一个适当的标准和配置良好的自动化软件测试流程，错误和缺陷将在开发过程中自动被发现。
- en: Developers may avoid writing unit tests due to time constraints and tight deadlines.
    In most cases, they may opt to write poor unit tests just to have a 100% pass
    rate. This is very bad practice; it is better to avoid writing any tests instead
    of writing bad unit tests just to pass.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由于时间限制和紧迫的截止日期，开发者可能会避免编写单元测试。在大多数情况下，他们可能会选择编写质量较差的单元测试，只是为了达到100%的通过率。这是一种非常不好的做法；与其编写质量差的单元测试以通过，不如完全不编写测试。
- en: 'Here are some of the benefits of writing good unit test cases:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是编写良好的单元测试用例的一些好处：
- en: '**Improved code quality**: The quality of code shipped to production is automatically
    improved if unit testing is strictly implemented into the development pipeline
    and it’s done right. Unit testing is the earliest form of testing; therefore,
    any bugs identified during this testing are fixed before they are sent to the
    integration testing phase. The result of this approach is a robust design and
    development as developers write test cases by understanding the specifications
    and tasks at hand first.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高代码质量**：如果单元测试被严格地实施到开发流程中，并且做得正确，那么交付到生产环境的代码质量将自动提高。单元测试是测试的最早形式；因此，在此测试期间发现的任何错误都将在它们被发送到集成测试阶段之前得到修复。这种方法的成果是稳健的设计和开发，因为开发者首先通过理解规格和手头的任务来编写测试用例。'
- en: '**Detects bugs early**: Unit testing is the first level of testing in software
    development. Therefore, it helps in identifying and fixing bugs early. This includes
    flaws, missing parts in the software requirements and specifications, or bugs
    in the developers’ implementation.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**早期检测错误**：单元测试是软件开发中的第一级测试。因此，它有助于早期识别和修复错误。这包括软件需求规格说明中的缺陷、缺失部分或开发者实现中的错误。'
- en: '**Saves development time**: Code completion takes time, especially if proper
    software development practices are in use. Therefore, when there are fewer bugs
    and errors in the system due to the effectiveness of unit testing, the overall
    development time is reduced.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节省开发时间**：代码补全需要时间，尤其是在使用适当的软件开发实践时。因此，当系统中的错误和缺陷由于单元测试的有效性而减少时，整体开发时间就会减少。'
- en: '**Easy debugging process**: Unit testing helps in simplifying the testing and
    debugging process of an enterprise-ready application because if the test fails
    at any stage, the code needs to be debugged; otherwise, the process can continue
    without any obstacles.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于调试过程**：单元测试有助于简化企业级应用程序的测试和调试过程，因为如果在任何阶段测试失败，则需要调试代码；否则，过程可以继续而没有任何障碍。'
- en: '**Lower cost**: The cost of development, including development time, is drastically
    reduced when bugs are detected and resolved during development rather than during
    production. Without this testing, if the same bugs are detected at a later stage
    after the code integration, they become more difficult to trace and resolve, thereby
    making the development more costly and last longer.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**降低成本**：当在开发过程中而不是在生产过程中检测和解决错误时，包括开发时间在内的开发成本会大幅降低。如果没有这种测试，如果在代码集成后较晚的阶段检测到相同的错误，它们就变得更加难以追踪和解决，从而使开发更加昂贵并延长开发时间。'
- en: The benefits and importance of unit testing are endless. Therefore, it’s a good
    practice to adopt and implement it into your enterprise-ready Vue.js 3 application
    development pipeline. In the next section, we will explore the best practices
    for creating unit test cases.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试的好处和重要性是无穷无尽的。因此，将单元测试纳入您企业级 Vue.js 3 应用程序开发流程中并实施它是良好的实践。在下一节中，我们将探讨创建单元测试用例的最佳实践。
- en: Best practices in unit test creation
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试创建的最佳实践
- en: 'When creating unit test cases, you should follow the best practices to produce
    consistent unit test cases to test every possible case properly. Consider the
    following points to create good test cases:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建单元测试用例时，您应遵循最佳实践，以产生一致的单元测试用例，正确地测试每个可能的案例。考虑以下要点来创建良好的测试用例：
- en: '**Arrange, Act, and** **Assert** (**AAA**)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安排、行动和断言**（**AAA**）'
- en: Write deterministic tests
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写确定性测试
- en: Write good test names and descriptions
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写好的测试名称和描述
- en: Write tests before or during development (TDD)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发前或开发过程中编写测试（TDD）
- en: Leverage automated tests
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用自动化测试
- en: Using mocks and stubs
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模拟和存根
- en: Let’s understand each of these points in more detail in the next subsections.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一小节中更详细地理解这些要点。
- en: Arrange, act, and assert
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安排、行动和断言
- en: When structuring your unit test suite for enterprise applications, following
    the AAA approach is recommended to improve readability and easy understanding
    of your unit test suite. It improves the test readability by giving it a logical
    flow. It can also be referred to as the **Given/When/Then** (**GWT**) strategy.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当为面向企业的应用程序构建单元测试套件时，建议遵循 AAA 方法以提高可读性和单元测试套件的易于理解。它通过提供逻辑流程来提高测试的可读性。它也可以被称为
    **给定/当/然后**（**GWT**）策略。
- en: GWT is a semi-structured way of writing down test cases. These test cases can
    either be manually tested or automated using LambdaTest ([https://www.lambdatest.com/automation-testing?fp_ref=solomon26](https://www.lambdatest.com/automation-testing?fp_ref=solomon26)).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: GWT 是一种半结构化的编写测试用例的方式。这些测试用例可以是手动测试，也可以使用 LambdaTest 自动化测试（[https://www.lambdatest.com/automation-testing?fp_ref=solomon26](https://www.lambdatest.com/automation-testing?fp_ref=solomon26)）。
- en: 'You can use the AAA protocol to structure your unit test cases with the following
    steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下步骤使用 AAA 协议来结构化您的单元测试用例：
- en: '**Arrange**: Arrange the setup and initialization for the test.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安排**：为测试安排设置和初始化。'
- en: '**Act**: Act on the unit for a given test.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**行动**：对给定测试的单元进行操作。'
- en: '**Assert**: Assert or verify the outcome.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**断言**：断言或验证结果。'
- en: 'The following code snippet shows a basic example of using the AAA style to
    create a simple unit test case:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了使用 AAA 风格创建简单单元测试用例的基本示例：
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding snippet shows where to initialize variables and create the initial
    setup for the given test, then where we act on the given test, and lastly, where
    we assert the result of the acted-on test.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段显示了初始化变量和为给定测试创建初始设置的位置，然后是我们对给定测试采取行动的位置，最后是我们断言所采取行动的测试的结果。
- en: Write deterministic tests
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写确定性测试
- en: A unit test should have consistent output whenever and wherever tested to verify
    the desired function. A deterministic test should have a consistent behavior every
    time the test is run provided the test code hasn’t changed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试应该在任何时间和任何地点都有一致的输出，以验证期望的功能。确定性测试应该在测试代码没有更改的情况下，每次运行测试时都有一致的行为。
- en: Inconsistencies in testing can be called flakiness in tests. If your test works
    or passes in development and fails with continuous integration or during QA testing,
    it hinders development and slows down progress.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 测试中的不一致性可以称为测试的“不可靠性”。如果你的测试在开发中工作或通过，但在持续集成或QA测试期间失败，这会阻碍开发并减缓进度。
- en: Flakiness in tests can be avoided if deterministic test cases are written as
    it helps in understanding the output of every test case quickly and reduces hours
    of debugging for new team members.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果编写了确定性的测试用例，可以避免测试中的“不可靠性”，因为它有助于快速理解每个测试用例的输出，并减少新团队成员的调试时间。
- en: Write good test names and descriptions
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写好的测试名称和描述
- en: In software engineering, one of the best practices for writing clean code is
    to always have a good naming ability. As a developer, your variables, functions,
    methods, or classes should have good and descriptive names.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程中，编写清晰代码的最佳实践之一是始终具备良好的命名能力。作为一名开发者，你的变量、函数、方法或类应该有良好且描述性的名称。
- en: This best practice is also extended to writing test case names. It is important
    to have a clean and clear description of your test case to capture exactly when
    the test is supposed to implemented and the desired output.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这种最佳实践也扩展到编写测试用例名称。拥有一个清晰且明确的测试用例描述对于准确捕捉测试应该实施的时间和期望的输出非常重要。
- en: 'For example, your test case names should describe the purpose of your test
    cases, as shown in the following examples:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你的测试用例名称应该描述测试用例的目的，如下面的示例所示：
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Write tests before or during development (TDD)
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在开发前或开发过程中编写测试（TDD）
- en: As a professional developer, you need to embed the concept of TDD into your
    development process and workflow.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名专业开发者，你需要将TDD的概念嵌入到你的开发过程和工作流程中。
- en: TDD is a software development process that enhances our test cases and software
    code in parallel.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: TDD是一种软件开发过程，它并行增强我们的测试用例和软件代码。
- en: The concept of TDD contradicts the traditional development process because in
    TDD, developers have to first write test code before writing the actual software
    code to pass the test case written. This approach ensures that when production
    code is written, it always complements the test code.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: TDD的概念与传统开发过程相矛盾，因为在TDD中，开发者必须首先编写测试代码，然后编写实际的软件代码以通过所编写的测试用例。这种方法确保了当编写生产代码时，它始终与测试代码相辅相成。
- en: Additionally, **Behavior-Driven Development** (**BDD**) is another popular testing
    approach. This approach works well in rapid development settings and encourages
    more team collaboration to build a shared understanding of the problem.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，**行为驱动开发**（BDD）是另一种流行的测试方法。这种方法在快速开发环境中效果良好，并鼓励更多的团队合作，以共同理解问题。
- en: Regardless of what approach you decide to adopt in your project, you can still
    integrate continuous integration into your development pipeline to automate your
    software testing processes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你决定在项目中采用哪种方法，你仍然可以将持续集成集成到你的开发流程中，以自动化你的软件测试过程。
- en: Using mocks and stubs
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用模拟和存根
- en: When creating test cases, you might be tempted to perform operations on the
    actual code. For instance, if you made an API call to an external API, you might
    want to make such calls during testing, to make sure everything works as planned.
    But that wouldn’t be considered best practice. What you can do is use the mock
    and stub features of any test framework.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建测试用例时，你可能会有在真实代码上执行操作的冲动。例如，如果你对一个外部API进行了API调用，你可能希望在测试期间进行这样的调用，以确保一切按计划进行。但这并不被认为是最佳实践。你可以做的是使用任何测试框架的模拟和存根功能。
- en: A stub is a dummy piece of code that lets the test run without worrying about
    what happens to it, while a mock is a dummy piece of code that you verify is called
    correctly as part of the test. In short, they are substitutes for real, working
    code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟（stub）是一段虚拟的代码，允许测试运行而不必担心它会发生什么，而存根（mock）是一段虚拟的代码，你验证它在测试中是否被正确调用。简而言之，它们是真实工作代码的替代品。
- en: The beauty of this is that you can set them up and use them to test and verify
    your actual code works properly without making any expensive API calls or carrying
    out database manipulation.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的优点在于，您可以设置并使用它们来测试和验证您的实际代码是否正常工作，而无需进行昂贵的 API 调用或执行数据库操作。
- en: Leverage automation testing
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用自动化测试
- en: As a developer, integrating automated testing into your workflow saves a lot
    of time when compared to manually executing your test case every time before deployment.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，将自动化测试集成到您的开发流程中，与每次部署前手动执行测试用例相比，可以节省大量时间。
- en: You can use different automated testing frameworks to set it up, but in this
    chapter, we will see how to automate unit testing with Selenium Cloud Grid ([https://www.lambdatest.com/selenium-grid-online?fp_ref=solomon26](https://www.lambdatest.com/selenium-grid-online?fp_ref=solomon26)).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用不同的自动化测试框架来设置它，但在本章中，我们将了解如何使用 Selenium Cloud Grid 自动化单元测试（[https://www.lambdatest.com/selenium-grid-online?fp_ref=solomon26](https://www.lambdatest.com/selenium-grid-online?fp_ref=solomon26)）。
- en: Before we delve into automating our test cases, let’s explore how to write a
    clean and proper unit test with JavaScript.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入自动化测试用例之前，让我们探索如何使用 JavaScript 编写干净且合适的单元测试。
- en: JavaScript unit testing
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 单元测试
- en: As a developer, writing unit tests for your task is your responsibility. It
    should be part of your day-to-day activities as you code. In JavaScript, you can
    write unit tests the same way you write your real code with the use of different
    testing libraries.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，为您的任务编写单元测试是你的责任。它应该成为您日常编码活动的一部分。在JavaScript中，您可以使用不同的测试库以与编写真实代码相同的方式编写单元测试。
- en: With these testing libraries, testing the functionalities and features of your
    project becomes very easy because the libraries include different assertion methods
    to carry out your checks.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些测试库，测试您项目的功能性和特性变得非常容易，因为这些库包含了不同的断言方法来执行您的检查。
- en: Let’s explore some of the most popular JavaScript testing frameworks you can
    use to write your unit tests, integration tests, and even end-to-end tests.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一些最流行的 JavaScript 测试框架，您可以使用它们编写单元测试、集成测试，甚至是端到端测试。
- en: Popular JavaScript testing frameworks
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流行的 JavaScript 测试框架
- en: 'Various frameworks are helpful for unit testing in JavaScript. They are as
    follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的框架对 JavaScript 的单元测试很有帮助。具体如下：
- en: Jest
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jest
- en: Mocha
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mocha
- en: Jasmine
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jasmine
- en: Cypress
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cypress
- en: Vitest.js
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vitest.js
- en: Let’s explore these frameworks in more detail in the next subsections.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一小节中更详细地探索这些框架。
- en: Jest
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Jest
- en: Jest is one of the most popular testing frameworks for JavaScript. It was designed
    to mostly work with React and React Native-based applications. It is open source
    and easy to get started with. Jest reduces the extensive time-consuming configuration
    needed to run software testing in the frontend with JavaScript.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Jest 是最受欢迎的 JavaScript 测试框架之一。它被设计主要用于与 React 和 React Native 应用程序一起工作。它是开源的，易于上手。Jest
    减少了在 JavaScript 前端进行软件测试所需的大量耗时配置。
- en: It is an assertion library for JavaScript that runs on Node.js and the browser.
    Jest can be configured to work with any test runner and unit testing framework,
    such as Mocha or Jasmine.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个在 Node.js 和浏览器上运行的 JavaScript 断言库。Jest 可以配置与任何测试运行器和单元测试框架一起工作，例如 Mocha
    或 Jasmine。
- en: The growth statistics of the Jest library according to GitHub, as of the time
    of writing, include more than **40k GitHub stars** and about **6.3 million GitHub
    usage**, accumulating a total of **6.4 million** points, making Jest among the
    most popular testing frameworks.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 根据GitHub的数据，截至撰写本文时，Jest库的增长统计包括超过**40k GitHub stars**和大约**6.3百万GitHub使用量**，累计达到**6.4百万**积分，使Jest成为最受欢迎的测试框架之一。
- en: Mocha
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mocha
- en: Mocha is a server-side and client-side testing framework for JavaScript and
    Node.js. The key features of Mocha are simplicity, flexibility, and fun. It makes
    asynchronous testing in JavaScript easy and fun. Mocha is designed to run serially,
    allowing for flexible and accurate test reporting and coverage.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Mocha 是一个用于 JavaScript 和 Node.js 的服务器端和客户端测试框架。Mocha 的关键特性是简单性、灵活性和趣味性。它使得 JavaScript
    中的异步测试变得简单且有趣。Mocha 被设计为串行运行，允许灵活且精确的测试报告和覆盖率。
- en: The growth statistics of the Mocha library according to GitHub, as of the time
    of writing, include more than **21.6k GitHub stars** and about **1.6 million GitHub
    usage**, accumulating a total of **1.66 million**, points, making Mocha a very
    popular testing framework.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 GitHub 的数据，截至编写本文时，Mocha 库的增长统计包括超过 **21.6k GitHub 星标** 和大约 **160 万 GitHub
    使用量**，累计达到 **166 万** 点，使 Mocha 成为非常受欢迎的测试框架。
- en: Jasmine
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Jasmine
- en: Jasmine is a popular JavaScript BDD framework for unit testing JavaScript applications.
    It combines the power of speed and support for Node.js and the browser to become
    a robust testing framework for BDD.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Jasmine 是一个流行的 JavaScript BDD 框架，用于单元测试 JavaScript 应用程序。它结合了速度和 Node.js 以及浏览器的支持，成为
    BDD 的强大测试框架。
- en: The growth statistics of the Jasmine library according to GitHub, as of the
    time of writing, include more than **15.4k GitHub stars** and about **2.4 million
    GitHub usage**, accumulating a total of **2.5 million** points, making Jasmine
    among the most popular testing frameworks.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 GitHub 的数据，截至编写本文时，Jasmine 库的增长统计包括超过 **15.4k GitHub 星标** 和大约 **240 万 GitHub
    使用量**，累计达到 **250 万** 点，使 Jasmine 成为最受欢迎的测试框架之一。
- en: Cypress
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cypress
- en: Cypress is an end-to-end JavaScript-based testing framework that changes the
    way developers approach software testing. It is built on top of Mocha, making
    asynchronous testing simple and convenient. In Cypress, unit tests can be configured
    to execute without even having to run the web server.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress 是一个基于 JavaScript 的端到端测试框架，它改变了开发者对待软件测试的方式。它建立在 Mocha 之上，使得异步测试变得简单方便。在
    Cypress 中，单元测试可以配置为执行，甚至无需运行 web 服务器。
- en: This feature makes Cypress the ideal tool for testing a JavaScript/TypeScript
    library that is meant to be used in the browser, and setting up automated testing
    in your enterprise project is a breeze.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特性使 Cypress 成为测试旨在在浏览器中使用的 JavaScript/TypeScript 库的理想工具，并在企业项目中设置自动化测试变得轻而易举。
- en: The growth statistics of the Cypress library according to GitHub, as of the
    time of writing, include more than **40.2k GitHub stars** and about **535k GitHub
    usage**, accumulating a total of **575k** points, making Cypress among the most
    popular testing frameworks.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 GitHub 的数据，截至编写本文时，Cypress 库的增长统计包括超过 **40.2k GitHub 星标** 和大约 **535k GitHub
    使用量**，累计达到 **575k** 点，使 Cypress 成为最受欢迎的测试框架之一。
- en: Vitest
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Vitest
- en: Vitest is a blazing-fast unit test framework powered by Vite. It is a Vite-native
    unit test framework comprising Vite reusable configs, transformers, resolvers,
    and plugins. It is also Jest compatible and uses ESM, TypeScript, and JSX out
    of the box.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Vitest 是一个由 Vite 驱动的闪电般的单元测试框架。它是一个原生 Vite 单元测试框架，包括 Vite 可重用的配置、转换器、解析器和插件。它还与
    Jest 兼容，并默认使用 ESM、TypeScript 和 JSX。
- en: It’s fairly new and has gained popularity among developers using Vue.js and
    the Vite CLI. The growth statistics of the Vitest library according to GitHub,
    as of the time of writing, include more than **6.4k GitHub stars** and about **24.3k
    GitHub usage**, accumulating a total of **30.7k** points.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 它相对较新，在 Vue.js 和 Vite CLI 的开发者中获得了人气。根据 GitHub 的数据，截至编写本文时，Vitest 库的增长统计包括超过
    **6.4k GitHub 星标** 和大约 **24.3k GitHub 使用量**，累计达到 **30.7k** 点。
- en: In the next section, we will explore how to write your unit tests with JavaScript
    and how to run your tests manually. Additionally, we will explore how to automate
    your testing suite during the deployment pipeline.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何使用 JavaScript 编写单元测试，以及如何手动运行测试。此外，我们还将探讨如何在部署管道中自动化测试套件。
- en: Unit testing a Vue.js 3 app
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试 Vue.js 3 应用
- en: In the previous chapter, we created a Pinterest application using Strapi for
    the backend and Vue.js 3 for the frontend.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用 Strapi 作为后端和 Vue.js 3 作为前端创建了一个 Pinterest 应用程序。
- en: Previously, we added internationalization, structured the project, and built
    out a complete Pinterest clone. In this section, we will continue by using the
    official project we created for this book to set up unit testing, resulting in
    a full-blown enterprise-ready Pinterest clone application.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们添加了国际化，整理了项目结构，并构建了一个完整的 Pinterest 克隆应用。在本节中，我们将继续使用为本书创建的官方项目来设置单元测试，从而得到一个完全的企业级
    Pinterest 克隆应用。
- en: You can clone the project from this repository, [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications),
    to jump right in.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从这个仓库克隆项目，[https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications)，直接开始。
- en: In the previous chapter, we set up basic unit testing using Vitest and demonstrated
    how to implement basic unit testing with a helper file.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用Vitest设置了基本的单元测试，并演示了如何使用辅助文件实现基本的单元测试。
- en: In this chapter, we will explore more advanced ways of testing the units of
    the Pinterest clone application we are using as the example throughout this book.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨测试我们作为本书示例使用的Pinterest克隆应用程序单元的更高级方法。
- en: What to test
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要测试的内容
- en: In the previous chapter, we explored in detail what to test when setting up
    your testing suites. In this section, we will examine our demo software under
    test and specify what should be unit tested.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们详细探讨了在设置测试套件时应该测试什么。在本节中，我们将检查我们的测试软件示例，并指定应该进行单元测试的内容。
- en: 'In general, there are two things we could test for in Vue.js components: presentation
    and (optionally) behavior.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在Vue.js组件中，我们可以测试以下两个方面：表现（presentation）和（可选）行为。
- en: Presentation
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表现
- en: When fetching data using Apollo Client, components can be in either the `loading`,
    `success`, or `error` state. For each of these states, it’s a good idea to test
    that the presentation is what we intend it to be.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Apollo Client获取数据时，组件可能处于`loading`、`success`或`error`状态之一。对于这些状态中的每一个，测试表现是否符合预期都是一个不错的想法。
- en: For example, consider having a component that presents details about a specific
    photo (performs a `GET_PIN` query) from our Pinterest clone application.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑有一个组件，它展示有关特定照片的详细信息（执行`GET_PIN`查询）来自我们的Pinterest克隆应用程序。
- en: 'We could have a simple component such as the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以有一个简单的组件，如下所示：
- en: '[PRE2]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this scenario, we will likely want to test the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在此场景中，我们可能希望测试以下内容：
- en: '**Loading**: How the component renders when it’s fetching the pin (photo)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加载**：组件在获取引脚（照片）时的渲染方式'
- en: '**Success**: How the component renders after it’s successfully fetched the
    pin (photo)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成功**：组件在成功获取引脚（照片）后的渲染方式'
- en: '**Error**: How the component renders if it was unable to fetch the pin (photo)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误**：如果组件无法获取引脚（照片），其渲染方式如何'
- en: 'To demonstrate this, let’s implement a unit test against each of the states
    mentioned in the preceding points. We will be using the `Pin(Photo)` component:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，让我们针对前面提到的每个状态实现单元测试。我们将使用`Pin(Photo)`组件：
- en: '[PRE3]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Behavior (optional)
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行为（可选）
- en: We may also choose to place behavior in our Vue.js components. In client-side
    architecture, we call this interaction logic—a form of decision-making logic executed
    after the user interacts with the page somehow—such as a key press or a button
    click.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以选择在我们的Vue.js组件中放置行为。在客户端架构中，我们称之为交互逻辑——一种在用户以某种方式与页面交互后执行的决策逻辑——例如按键或按钮点击。
- en: You can also unit test the behaviors of a single component by testing different
    actions that are performed on the component and making sure the component reacts
    to it accordingly.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过测试对组件执行的不同操作以及确保组件相应地做出反应来对单个组件的行为进行单元测试。
- en: 'Let’s test this `Photo` component’s `click` event to be sure it responds to
    the appropriate action:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试这个`Photo`组件的`click`事件，以确保它对适当的操作做出响应：
- en: '[PRE4]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can follow the preceding sample code snippet to write unit tests for all
    the components you have created in your enterprise Vue.js 3 application.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据前面的示例代码片段编写对您在Vue.js 3企业级应用程序中创建的所有组件的单元测试。
- en: In the repository of this chapter ([https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-9](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-9)),
    we have created different components and also written the unit test for them.
    You can clone the repository here.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的存储库（[https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-9](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-9)）中，我们创建了不同的组件，并为它们编写了单元测试。您可以通过克隆存储库来获取这些内容。
- en: In the next section, we will run the unit testing manually and how to automate
    the process using LambdaTest Cloud Grid. ([https://www.lambdatest.com/automation-testing/?fp_ref=solomon26](https://www.lambdatest.com/automation-testing/?fp_ref=solomon26))
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将手动运行单元测试，并展示如何使用LambdaTest Cloud Grid自动化此过程。（[https://www.lambdatest.com/automation-testing/?fp_ref=solomon26](https://www.lambdatest.com/automation-testing/?fp_ref=solomon26)）
- en: Running unit tests manually
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动运行单元测试
- en: 'To run your test, type the following command into your root terminal:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行您的测试，请在您的根终端中输入以下命令：
- en: '[PRE5]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After successfully running the test, you should be greeted with green passes
    for your test, as in the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试成功运行后，你应该会看到绿色的通过标志，就像以下截图所示：
- en: '![Figure 9.2 – Unit test passing sample](img/Figure_9.02_B17237.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2 – 单元测试通过示例](img/Figure_9.02_B17237.jpg)'
- en: Figure 9.2 – Unit test passing sample
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – 单元测试通过示例
- en: In this section, we explored best practices in unit testing a Vue.js 3 component.
    We discussed, most importantly, what to test and how to implement unit testing
    in Vue.js 3\. We demonstrated how to unit test a Vue.js app using Vitest ([https://vitest.dev/](https://vitest.dev/))
    and the Vue.js testing library. ([https://github.com/testing-library/vue-testing-library](https://github.com/testing-library/vue-testing-library))
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了单元测试 Vue.js 3 组件的最佳实践。我们讨论了最重要的内容，即要测试什么以及如何在 Vue.js 3 中实现单元测试。我们演示了如何使用
    Vitest ([https://vitest.dev/](https://vitest.dev/)) 和 Vue.js 测试库对 Vue.js 应用进行单元测试。([https://github.com/testing-library/vue-testing-library](https://github.com/testing-library/vue-testing-library))
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter explored everything related to unit testing, including how to unit
    test a Vue.js 3 component and the component and page methods. We also learned
    about unit testing tools such as Jest, Mocha, and Vitest and how to use them to
    effectively unit test an enterprise project.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了与单元测试相关的所有内容，包括如何对 Vue.js 3 组件和组件及页面方法进行单元测试。我们还了解了单元测试工具，如 Jest、Mocha
    和 Vitest，以及如何使用它们有效地对企业的项目进行单元测试。
- en: In this chapter, we explored the benefits, importance, and best practices in
    writing and executing effective unit testing strategies. We also learned how to
    write unit test cases based on the presentation and behavior of the different
    units of the software under test.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了编写和执行有效的单元测试策略的好处、重要性和最佳实践。我们还学习了如何根据被测试软件的不同单元的展示和行为来编写单元测试用例。
- en: This chapter shows you how to create, implement, and run your unit test cases
    manually during the build process and deployment.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向您展示了如何在构建和部署过程中手动创建、实现和运行您的单元测试用例。
- en: In the next chapter, we will explore everything related to integration testing.
    We will cover in depth how to perform an integration test on a Vue.js 3 component
    and pages. We will also learn about integration testing tools such as Vue.js Testing
    Library and how to use them to test an enterprise project effectively.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨与集成测试相关的所有内容。我们将深入介绍如何在 Vue.js 3 组件和页面上执行集成测试。我们还将了解集成测试工具，如 Vue.js
    Testing Library，以及如何有效地使用它们来测试企业项目。
