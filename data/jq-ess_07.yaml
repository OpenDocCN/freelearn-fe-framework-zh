- en: Chapter 7. Talking to Your Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。与服务器交谈
- en: In [Chapter 6](part0047_split_000.html#1CQAE2-6309aac535bb4c1b83b0d7aa1f605023
    "Chapter 6. Better Forms with jQuery"), *Better Forms with jQuery*, we learned
    how to let jQuery help us to make better forms for our users. Once a form is filled,
    we will need to use jQuery to send it back to its server and to get fresh data.
    We live in the world of single page, fluid apps. Most of the top sites on the
    Internet update the sections of the page that need to change seamlessly via Ajax.
    This is a better experience for users than the old-fashioned way of posting data
    via the submit button and loading a new page. jQuery is ready to help us here.
    We can use it to get fresh data on demand from our server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](part0047_split_000.html#1CQAE2-6309aac535bb4c1b83b0d7aa1f605023 "Chapter 6. Better
    Forms with jQuery")中，我们学会了如何让 jQuery 帮助我们为用户制作更好的表单。一旦表单被填写，我们将需要使用 jQuery 将其发送回服务器并获取新鲜数据。我们生活在单页面，流动应用的世界。互联网上大多数顶级网站通过
    Ajax 以无缝方式更新需要更改的页面部分，这对用户来说比通过提交按钮发布数据并加载新页面的老式方式更好。jQuery 准备好在这里帮助我们。我们可以使用它从服务器动态获取新鲜数据。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Life before jQuery
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery 之前的时代
- en: How jQuery helps us today
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 今天 jQuery 如何帮助我们
- en: Helper methods
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助方法
- en: Ajax events
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ajax 事件
- en: 'In order to understand how jQuery can help us talk to our server, we should
    first take a step back and explore what life was like before jQuery. During this
    time, websites had two ways to send data to the server: the `<form>` and `<a>`
    tags.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解 jQuery 如何帮助我们与服务器通信，我们应该先退一步，探索 jQuery 之前的世界。在那个时候，网站有两种向服务器发送数据的方式：`<form>`
    和 `<a>` 标签。
- en: Before jQuery
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery 之前
- en: 'The HTML `<form>` tag is the element that sends data to the server. It has
    two attributes that deal with how it sends data to its server. First, there is
    the `method` attribute, which lets it specify how to send data back to its server.
    It has two possible values: `get` or `post`.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 的`<form>`标签是将数据发送到服务器的元素。它有两个处理发送数据到服务器的属性。首先是`method`属性，它让它指定如何将数据发送回服务器。它有两个可能的值：`get`或`post`。
- en: Set the `method` attribute to `get` and it sends the form data appended to the
    end of the request to the server page specified by the `action` attribute. The
    form will send the data from all enabled form elements that have a `name` element
    defined. The `get` method should only be used for small bits of insensitive data.
    All data sent via a `get` is visible from the URL bar of the browser.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将`method`属性设置为`get`，它会将表单数据附加到请求的末尾发送到由`action`属性指定的服务器页面。表单将发送所有已启用的具有定义的`name`元素的表单元素的数据。`get`方法只应用于小部分不敏感数据。通过`get`发送的所有数据都可以从浏览器的URL栏中看到。
- en: Setting the method attribute to `post` is considered more secure than `get`
    since it sends its data within the message body so it is not visible in the query
    string; but don't be fooled into thinking that the data is secured, it is simply
    not as visible. The `post` should be your go-to method when you are sending new
    data to the server.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 将`method`属性设置为`post`被认为比`get`更安全，因为它将其数据发送在消息正文中，所以在查询字符串中不可见；但不要被愚弄以为数据是安全的，它只是不那么明显。当你需要向服务器发送新数据时，`post`应该是你首选的方法。
- en: The `<form>` tag encloses all of the form data elements that will be sent to
    the server when the submit button is clicked. Keep in mind that only valid elements
    will be sent. In order to be valid, an element must be enabled and have a `name`
    attribute. The `name` attribute is the name the value will be given on the server.
    Unlike the `id` attribute, `name` values can be duplicated, but if they are duplicated
    within a form, it is up to you to figure out which is which.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`<form>`标签包含了在单击提交按钮时将发送到服务器的所有表单数据元素。请记住，只有有效的元素才会被发送。为了有效，一个元素必须是启用的，并且有一个`name`属性。`name`属性是服务器上将赋予值的名称。与`id`属性不同，`name`值可以重复，但如果它们在一个表单内重复，那么你就需要弄清楚哪一个是哪一个。'
- en: Another, sometimes overlooked, way to send small amounts of information to the
    server was by setting query parameters of the `href` attribute of the `<a>` tag.
    Admittedly, it can only send small chunks of information, but it can be really
    useful when you need to send data from one page to the next.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种有时被忽视的向服务器发送小量信息的方式是通过设置`<a>`标签的`href`属性的查询参数。诚然，它只能发送小片段的信息，但当你需要从一个页面发送数据到下一个页面时，它可以非常有用。
- en: Both the `<form>` and the `<a>` tags result in a page refresh, but it was possible
    to do Ajax before jQuery. Many people don't realize that Ajax has been possible
    in Microsoft browsers since the late 1990s. They were implemented using Microsoft's
    proprietary ActiveX objects, but the usefulness of this capability was not lost
    to other browser makers who made it an object of the browser, the `XMLHTTPRequest`
    object, or XHR for short.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`<form>` 和 `<a>` 标记都会导致页面刷新，但在 jQuery 之前就已经可以使用 Ajax 了。许多人不知道自从 1990 年代后期以来，Microsoft
    浏览器就已经支持 Ajax。它们是使用 Microsoft 的专有 ActiveX 对象实现的，但这种功能的有用性并没有被其他浏览器制造商忽略，他们将其作为浏览器的一个对象，即
    `XMLHTTPRequest` 对象，简称 XHR。'
- en: Unfortunately, writing code to support this functionality was not easy. Like
    so many things we have seen in browser programming in the past, the different
    implementations of similar functions caused us developers to have to write a great
    deal of plumbing code before we could begin to write feature code. Let's see what
    jQuery brings to the Ajax party.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，编写支持这个功能的代码并不容易。就像我们过去在浏览器编程中看到的许多事情一样，相似功能的不同实现使我们开发人员不得不在开始编写功能代码之前编写大量的管道代码。让我们看看
    jQuery 带给 Ajax 派对的东西。
- en: How jQuery helps us
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery 如何帮助我们
- en: One of the ways jQuery helps us is by taking the pain out of Ajax. Users no
    longer want to wait through cycles where they click submit, the page goes blank,
    then new content loads. Sites like Facebook, Gmail, and Twitter have shown users
    that the web can be very app-like. Although jQuery is a library and not a programming
    framework like AngularJS or Ember, it can easily enable the fetching and sending
    of server data without doing page reloads.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 帮助我们的一种方式是通过简化 Ajax 的痛苦。用户不再愿意等待点击提交，页面变空，然后加载新内容的循环。像 Facebook、Gmail
    和 Twitter 这样的网站向用户展示了 Web 可以非常像应用程序。尽管 jQuery 是一个库，而不是像 AngularJS 或 Ember 那样的编程框架，但它可以轻松地实现获取和发送服务器数据而无需重新加载页面。
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In order to demonstrate the code snippets in this chapter, you will have to
    set up a web server. However, setting up a web server is beyond the scope of this
    book. One easy way is to use an editor/IDE that includes a built-in web server.
    Two such editors are JetBrains WebStorm and Adobe's Brackets. Both are available
    for Windows, Mac OS X, and Linux.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示本章中的代码片段，您需要设置一个 Web 服务器。但是，设置 Web 服务器超出了本书的范围。一种简单的方法是使用包含内置 Web 服务器的编辑器/IDE。JetBrains
    WebStorm 和 Adobe 的 Brackets 就是这样的编辑器。它们都适用于 Windows、Mac OS X 和 Linux。
- en: Loading HTML – .load()
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载 HTML – `.load()`
- en: 'One the first things that we would like our website to be able to do is to
    load fresh HTML markup on the page. This is where the .`load()` method comes in
    handy. It uses Ajax to download HTML from a URL on your server and insert it onto
    the page at the indicated location. If you need to create a simple single-page
    app, this method makes it easy. Under the covers, .`load()` uses the `HTTP GET`
    method, which is the same method used by the browser when it loads HTML. Let''s
    take a look at some code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想让我们的网站能够做的第一件事情之一是在页面上加载新的 HTML 标记。这就是 `.load()` 方法派上用场的地方。它使用 Ajax 从服务器的
    URL 下载 HTML，并将其插入到指定位置的页面上。如果您需要创建一个简单的单页应用程序，这个方法会让它变得容易。在底层，`.load()` 使用 `HTTP
    GET` 方法，这是浏览器加载 HTML 时使用的方法。让我们看一些代码：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding code divides into three sections. The first section is everything
    in the `<head>` tag. The only things important here are that we load jQuery from
    an online repo and include some inline CSS to delineate where we will eventually
    inject markup and JSON data.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码分为三个部分。第一部分是 `<head>` 标记中的所有内容。这里唯一重要的是我们从在线仓库加载 jQuery，并包含一些内联 CSS 来标明我们最终将注入标记和
    JSON 数据的位置。
- en: The next section is our HTML markup. We have a large `<div>` with the `id` of
    output-region that will hold the results of our code. In the `<form>` tag, there
    are a few form elements that will give the form some data. The last row of HTML
    is a series of buttons that will activate each of our code snippets.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节是我们的 HTML 标记。我们有一个大的 `<div>`，`id`为 `output-region`，它将保存我们代码的结果。在 `<form>`
    标记中，有几个表单元素将为表单提供一些数据。HTML 的最后一行是一系列按钮，将激活我们的每个代码片段。
- en: The final section of the file is our JavaScript. Initially, we have only one
    function, but we will add more code as we progress through this chapter. Let's
    get started by examining the load-page click event handler.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的最后一节是我们的 JavaScript。最初，我们只有一个函数，但随着我们在本章的进展，我们将添加更多的代码。让我们从检查 `load-page`
    点击事件处理程序开始。
- en: We've seen lots of event handler code and there is nothing new here. The first
    three buttons each use this handler when clicked. The handler will get the `data-page`
    attribute of the clicked button. The `data-page` attribute tells the code which
    page to load and it is appended with the extension of `.html`. This is passed
    to the .`load()` method, which uses it to grab the new markup from the server
    and write it to the location specified by the selector. If the `.load()` successfully
    retrieves the HTML, it writes to the indicated selector, which in our case is
    the `<div>` with the ID of `outputRegion`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了很多事件处理程序代码，在这里没有什么新的。 前三个按钮在点击时都使用此处理程序。 处理程序将获取所点击按钮的`data-page`属性。
    `data-page`属性告诉代码要加载哪个页面，并将其附加扩展名`.html`。 这将传递给`.load()`方法，它将用它从服务器中抓取的新标记写入到由选择器指定的位置。
    如果`.load()`成功检索到HTML，它将写入到指定的选择器中， 在我们的例子中是具有`outputRegion`ID的`<div>`。
- en: Loading JSON Data – .getJSON()
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载 JSON 数据 – .getJSON()
- en: The `.getJSON()` method loads JSON data from the passed URL and calls a success
    function with the returned data or an error object is passed to a failed function.
    Like most of the Ajax method in jQuery 1.5 and above, it also returns a jQuery
    promise.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`.getJSON()`方法从传递的URL加载JSON数据，并调用一个返回数据的成功函数，或者将错误对象传递给一个失败函数。 像jQuery 1.5及更高版本中的大多数Ajax方法一样，它还返回一个jQuery
    promise。'
- en: Tip
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'A promise is an object that represents the eventual results of an asynchronous
    operation. It can have one of three states: pending, fulfilled, and rejected.
    When it is first created and hasn''t resolved yet, it has a state of pending.
    If the promise is resolved successfully, its state changes to fulfilled. If the
    promise fails, its state changes to rejected. Once a promise''s state changes
    from pending, it is never changed again.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: promise是表示异步操作最终结果的对象。 它可以有三种状态：挂起，履行和拒绝。 当它刚创建且尚未解决时，状态为挂起。 如果承诺成功解决，其状态将更改为履行。
    如果承诺失败，其状态将更改为拒绝。 一旦承诺的状态从挂起变化，它就永远不会再次更改。
- en: With the jQuery promise in hand, we chain a `then` function to the `$.getJSON`
    method. The `then` function takes two parameters. The first is a function to be
    called if the promise is fulfilled successfully. The second parameter is a function
    to be called if there is an error. If everything is all right, the JSON data is
    converted to a JavaScript object and passed to the `success` function and a message
    appears in an alert prompt; otherwise the contents of the error object are displayed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有了jQuery promise，我们可以将一个`then`函数链接到`$.getJSON`方法。 `then`函数接受两个参数。 第一个是在承诺被成功履行时要调用的函数。
    第二个参数是在出现错误时要调用的函数。 如果一切顺利， JSON 数据将被转换为JavaScript对象并传递给`success`函数，然后会在警报提示中显示一条消息；
    否则，错误对象的内容将被显示。
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Loading and executing JavaScript – getScript()
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载和执行 JavaScript – getScript()
- en: Most of the Ajax methods get some kind of data from the server. The `.getScript()`
    method is different. It retrieves JavaScript from the server, parses, and then
    executes it. Like the other Ajax methods, it returns a promise, but in this case
    the `success` function is not passed any data.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Ajax方法会从服务器获取某种数据。 `.getScript()`方法有所不同。 它从服务器检索JavaScript，解析，然后执行它。 像其他Ajax方法一样，它返回一个promise，但在这种情况下，`success`函数不会传递任何数据。
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The code that the `.getScript()` method loaded is still available after it executes,
    but there is no easy way to call the code again unless you keep a reference to
    it. In the example code, we assign the `incrementer` function to the window object
    so it can be called later.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`.getScript()`方法加载的代码在执行后仍然可用，但除非您保留对其的引用，否则没有简便的方法来再次调用该代码。在示例代码中，我们将`incrementer`函数分配给
    window 对象，以便以后可以调用它。
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Reading and writing data: jQuery.get() and .jQuery.post()'
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取和写入数据：jQuery.get() 和 jQuery.post()
- en: 'The final two shorthand methods are the `$.get()` and `$.post()` methods. We
    will describe them together since both methods are shortcuts for the `jQuery.ajax()`
    method. Keep in mind that anything done with a shortcut method can also be done
    by calling `$.ajax()`. The shortcut methods take care of a lot of the drudge work
    of making `ajax` calls. Let''s check out some code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两个快捷方法是`$.get()`和`$.post()`方法。 我们将它们一起描述，因为这两种方法都是`jQuery.ajax()`方法的快捷方式。
    请记住，任何使用快捷方法完成的任务也可以通过调用`$.ajax()`来完成。 快捷方法会处理大量冗长的`ajax`调用工作。 让我们看一些代码：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This code loads the data using an `HTTP GET` method. The `$.get()` shortcut
    method allows us to rewrite this as:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码使用`HTTP GET`方法加载数据。`$.get()`快捷方法允许我们将其重写为：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We pass the `$.get()` method just two parameters: the URL of the data and a
    success function; we don''t even bother to pass an error function handler. Remember
    that with no error handler, the browser will silently eat any errors. The preceding
    code demonstrates using the `$.get()` method with a callback function. Let''s
    make things more interesting by demonstrating how to use promise chaining.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只向`$.get()`方法传递了两个参数：数据的URL和一个成功函数；我们甚至都没有费心传递错误处理函数。请记住，没有错误处理程序，浏览器将悄无声息地吞掉任何错误。上述代码演示了如何使用带有回调函数的`$.get()`方法。让我们通过演示如何使用promise链来使事情更加有趣。
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding code makes four sequential calls to the server. Each call requests
    a different bit of JSON data, which it renders via the `showJsonMethod()` function.
    If any of the calls fails, the `showError()` function of the last `then()` method
    is called and no further Ajax requests are made. Each successful call returns
    the next call so it is able to chain the promises together.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码对服务器进行了四个顺序调用。每个调用请求不同的JSON数据块，并通过`showJsonMethod()`函数呈现。如果其中任何一个调用失败，则调用最后一个`then()`方法的`showError()`函数，并且不会进行进一步的Ajax请求。每个成功的调用都返回下一个调用，因此可以将承诺链接在一起。
- en: One potential downside is that the calls are made sequentially. Most browsers
    can do at least two simultaneous HTTP requests and some can do more. If performance
    is a concern and the order of the calls doesn't, we could make all of the HTTP
    request at the same time and let the browser determine how many it can handle.
    Luckily, jQuery promises have a `$.when()` method. It accepts all of the promises
    that you wish to wait on as parameters. Once all of the promises have been either
    resolved or rejected, the `.then()` method is called. The data sent to each promise
    is sent as parameters in the same order the promises are listed in the `.when()`
    method.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一个潜在的缺点是调用是顺序执行的。大多数浏览器至少可以同时进行两个HTTP请求，有些甚至可以进行更多。如果性能是一个问题，并且调用的顺序不重要，我们可以同时进行所有的HTTP请求，并让浏览器确定它可以处理多少个。幸运的是，jQuery的承诺有一个`$.when()`方法。它接受您希望等待的所有承诺作为参数。一旦所有承诺都被解决或拒绝，就会调用`.then()`方法。发送给每个承诺的数据作为参数按照承诺在`.when()`方法中列出的顺序发送。
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code, the same four HTTP requests are made except now they
    are made at the same time. The order in which each call will return data is non-deterministic,
    but the code will wait until all four calls complete before moving on. If any
    call fails, the entire operation is considered to have failed and the failure
    method is called. This is different than when we called the code sequentially.
    Each HTTP request could return data, but once one failed, the failure method was
    called and no more requests were made.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，进行了四个相同的HTTP请求，只是现在它们同时进行。每次调用返回数据的顺序是不确定的，但是代码将等待所有四个调用完成后再继续。如果任何调用失败，整个操作将被视为失败，并调用失败方法。这与我们顺序调用代码时不同。每个HTTP请求都可能返回数据，但一旦有一个失败，就会调用失败方法，并且不会再进行其他请求。
- en: So far, all of the requests have been made with the `$.get()` method; we've
    completely ignored the `$.post()` method. Not to worry, both methods are shortcuts
    for the `$.ajax()` method. We can use the `$.post()` in place of the `$.get()`
    method pretty much anywhere. So let's replace the `$.get()` method from the first
    demo.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，所有的请求都是使用`$.get()`方法进行的；我们完全忽略了`$.post()`方法。不用担心，这两种方法都是`$.ajax()`方法的快捷方式。我们几乎可以在任何地方使用`$.post()`代替`$.get()`方法。所以让我们替换第一个演示中的`$.get()`方法。
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So if the methods can be exchanged for one another, why have both? To be fair,
    we haven't been using them the way they are intended. The four main HTTP verbs
    are get, post, put, and delete. Get is intended to retrieve one or more items
    from a database. Post is intended to create a new record in the database. Put
    is meant to update an existing record. And finally, delete removes a record from
    the database. Using the verbs correctly lies at the heart of RESTful service APIs,
    which is a bit off-topic for this book.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些方法可以相互交换，为什么还要两者都有呢？公平地说，我们一直没有按照它们的用途来使用它们。四个主要的HTTP动词是get、post、put和delete。Get用于从数据库中检索一个或多个项目。Post用于在数据库中创建新记录。Put用于更新现有记录。最后，delete从数据库中删除记录。正确使用这些动词是RESTful服务API的核心所在，这有点超出了本书的主题范围。
- en: Helper methods
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 辅助方法
- en: jQuery provides us with a few Ajax helper methods. There are only three functions
    and each of them is easy to use and eliminates some grunt work for us.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery为我们提供了一些Ajax辅助方法。只有三个函数，每个都很容易使用，并为我们消除了一些苦差事。
- en: Creating query data – $.param()
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建查询数据 - $.param()
- en: An Ajax request usually encodes data to pass to the server in the form of a
    query string. A query string follows the URL and begins with a question mark "?".
    Each parameter consists of a name and a value separated by an equals sign. Generating
    the parameter data is not difficult, but there are a few encoding rules that need
    to be followed correctly, or your request may fail. The `$.param()` will encode
    our data into a query string format.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Ajax 请求通常将数据编码为查询字符串形式传递到服务器。查询字符串跟随 URL 并以问号 "?" 开头。每个参数由一个等号分隔的名称和值组成。生成参数数据并不困难，但是有一些编码规则需要正确遵循，否则您的请求可能会失败。`$.param()`
    将我们的数据编码成查询字符串格式。
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code, we encode an array of objects named `testData`. Each
    of the objects has a name and a value property. These properties will be the name
    and the value of the encode string. We passed the array to the `$.param()` method
    and store the resulting string in `myParam`, which we then write to the output
    `<div>`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们编码了一个名为 `testData` 的对象数组。每个对象都有一个 name 和一个 value 属性。这些属性将是编码字符串的名称和值。我们将数组传递给
    `$.param()` 方法，并将结果字符串存储在 `myParam` 中，然后将其写入输出 `<div>`。
- en: Note how the `$.param()` method takes care of the encoding for us. The third
    array parameter contains an at sign `@`, which is correctly encoded as `%40`.
    It will also encode other symbols and spaces. Such symbols must be encoded or
    your Ajax request will fail. Or worse, it may seem to work but send and store
    incorrect data.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `$.param()` 方法是如何为我们处理编码的。第三个数组参数包含一个 at 符号 `@`，它被正确编码为 `%40`。它还将编码其他符号和空格。这些符号必须被编码，否则您的
    Ajax 请求将失败。或者更糟糕的是，它可能看起来正常工作，但发送和存储的数据却是不正确的。
- en: The `$.param()` method is only necessary when you are creating URLs by hand.
    If you call the `$.get()` or `$.post()` methods and pass data to them, they will
    correctly encode and append to the URL or message body correctly.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.param()` 方法仅在手动创建 URL 时才必要。如果调用 `$.get()` 或 `$.post()` 方法并向它们传递数据，它们将正确编码并附加到
    URL 或消息主体中。'
- en: Creating query data from a form – .serialize()
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从表单创建查询数据 - .serialize()
- en: The next helper method, `serialize()`, is similar to the `$.param()` method
    except instead of passing it data, it uses the `<form>` tag indicated by the selector
    to pull data from all of the valid form elements.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个助手方法 `serialize()`，与 `$.param()` 方法类似，只是它不是传递数据，而是使用由选择器指示的 `<form>` 标记来从所有有效的表单元素中提取数据。
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding code serializes all of the form elements in the `myForm <form>`
    tag when the Serialize button is clicked and renders them to the page. Remember
    that only valid form elements will be serialized. If an element is disabled or
    doesn't have a name attribute, it won't be serialized. This method allows you
    to substitute jQuery for old-fashioned HTML form submits.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码在单击 Serialize 按钮时将 `myForm <form>` 标记中的所有表单元素序列化并呈现到页面上。请记住，只有有效的表单元素才会被序列化。如果一个元素被禁用或没有
    name 属性，它将不会被序列化。这个方法允许您用 jQuery 替代老式的 HTML 表单提交。
- en: Creating an object from form data – .serializeArray()
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从表单数据创建对象 - .serializeArray()
- en: The final member of the Ajax helpers is the `.serializeArray()` method. Like
    the `.serialize()` method previously described, it gets its data from all of the
    form elements within the selector specified `<form>` tag. It only uses valid form
    elements, which must be enabled and have a name element. The difference between
    this method and the `.serialize()` method is the way the data is encoded. The
    `.serializeArray()` method encodes the form data as an array of JavaScript objects.
    Each object consists of a name and a value property. The name is the contents
    of the element's name attribute and the value is the element's value. We can substitute
    this method for the `.serialize()` method.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Ajax 助手的最后一个成员是 `.serializeArray()` 方法。与先前描述的 `.serialize()` 方法类似，它从指定 `<form>`
    标记内的所有表单元素中获取数据。它只使用有效的表单元素，这些元素必须启用并具有名称元素。这个方法和 `.serialize()` 方法的区别在于数据的编码方式。`.serializeArray()`
    方法将表单数据编码为 JavaScript 对象的数组。每个对象由一个 name 和一个 value 属性组成。name 是元素的 name 属性的内容，value
    是元素的值。我们可以用这个方法代替 `.serialize()` 方法。
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The results of a call to `.serializeArray()` is an array of JavaScript objects.
    We place the results in the variable `myParam`, which is sent to the JSON `stringify()`
    method so it can be displayed.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对 `.serializeArray()` 调用的结果是一个 JavaScript 对象数组。我们将结果放在变量 `myParam` 中，然后将其发送到
    JSON `stringify()` 方法以便显示。
- en: Ajax events
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ajax 事件
- en: Sometimes, your application would like to know when various Ajax events occur.
    Perhaps your application would like to display an icon that indicates that data
    is being sent to or received from the server and hide the icon once the request
    is complete. Luckily, jQuery provides us with global Ajax events. These events
    make it possible to know when any Ajax activity starts, stops, sends data, errors
    out, or succeeds. These events are global so they must hook the document element.
    Let's add them to our current sample code.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你的应用程序希望知道各种Ajax事件何时发生。也许你的应用程序想要显示一个图标，表示数据正在被发送到服务器或从服务器接收，并在请求完成后隐藏该图标。幸运的是，jQuery为我们提供了全局Ajax事件。这些事件使我们能够知道任何Ajax活动何时开始、停止、发送数据、错误或成功。这些事件是全局的，所以它们必须挂钩文档元素。让我们将它们添加到我们当前的示例代码中。
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the sample code, we hook three Ajax events: `ajaxStart`, `ajaxStop`, and
    `ajaxSend`.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例代码中，我们挂钩了三个Ajax事件：`ajaxStart`、`ajaxStop`和`ajaxSend`。
- en: When an Ajax request begins – .ajaxStart()
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当Ajax请求开始时 – .ajaxStart()
- en: The `.ajaxStart()` method is triggered when the first Ajax request begins. If
    another request is already in progress, the event won't be fired. In the sample
    code, we make the hidden `<div>` with the message *Data transfer in progress…*
    visible in the handler for this event.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当第一个Ajax请求开始时触发`.ajaxStart()`方法。如果另一个请求已经在进行中，该事件不会被触发。在示例代码中，我们在此事件的处理程序中使隐藏的`<div>`与消息*数据传输正在进行中……*可见。
- en: When an Ajax request completes – .ajaxStop()
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当Ajax请求完成时 – .ajaxStop()
- en: The `.ajaxStop()` fires once all Ajax requests have finished. Like the `.ajaxStart()`
    method, it is smart enough to only fire when appropriate, allowing us to pair
    them together to hide and display the message.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`.ajaxStop()`方法会在所有Ajax请求完成后触发。与`.ajaxStart()`方法类似，它智能地在适当时候触发，允许我们将它们配对使用以隐藏和显示消息。'
- en: When running the code locally, you will find that the `stop` event is fired
    very quickly after the `start` event. In order to allow the message to be seen,
    we send the `hide` method a parameter of `slow`. Without this parameter, it would
    be difficult for the user to read the message.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地运行代码时，你会发现`stop`事件在`start`事件之后很快就触发了。为了让消息能够被看到，我们给`hide`方法传递了一个`slow`参数。没有这个参数，用户很难读到消息。
- en: When an Ajax request sends data – .ajaxSend()
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当Ajax请求发送数据时 – .ajaxSend()
- en: 'Before Ajax data is sent, the `.ajaxSend()` handler is called. If you need
    to differentiate which Ajax request triggered `.ajaxSend()`, it sends three parameters
    to your handler function: `event`, `jqxhr`, and `settings`. The settings parameter
    is an object that holds two important properties: `url` and `type`. The `url`
    property is a string hold the URL that the request is calling. The `type` is which
    HTTP verb the request is using. By checking these two properties, you should be
    able to determine which of your Ajax requests triggered the event.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在发送Ajax数据之前，将调用`.ajaxSend()`处理程序。如果需要区分哪个Ajax请求触发了`.ajaxSend()`，它会向你的处理程序函数发送三个参数：`event`、`jqxhr`和`settings`。settings参数是一个对象，包含两个重要属性：`url`和`type`。`url`属性是一个字符串，保存着请求调用的URL。`type`是请求使用的HTTP动词。通过检查这两个属性，你应该能够确定哪个Ajax请求触发了该事件。
- en: When an Ajax request fails – .ajaxError()
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当Ajax请求失败时 – .ajaxError()
- en: If a request fails, the `.ajaxError()` handler will be fired. The jQuery XHR
    object, parameter `jqxhr`, will hold the error information. The status code will
    be in the status property and the error message will be in the `statusText` property.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求失败，将触发`.ajaxError()`处理程序。jQuery XHR对象，参数`jqxhr`，将保存错误信息。状态码将在status属性中，错误消息将在`statusText`属性中。
- en: When an Ajax request succeeds – .ajaxSuccess()
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当Ajax请求成功时 – .ajaxSuccess()
- en: If the request succeeds, the `.ajaxSuccess()` handler will be fired. The jQuery
    XHR object will hold the status information. Again, the status code is in the
    `status` property and the status text is in the `statusText` property.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求成功，将触发`.ajaxSuccess()`处理程序。jQuery XHR对象将保存状态信息。同样，状态码在`status`属性中，状态文本在`statusText`属性中。
- en: When an Ajax request finishes – .ajaxComplete()
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当Ajax请求完成时 – .ajaxComplete()
- en: The `.ajaxComplete()` handler is called whenever an Ajax request completes.
    This method is always called regardless of whether the request succeeded or failed.
    It is always called after the success or error event.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 每当Ajax请求完成时，都会调用`.ajaxComplete()`处理程序。无论请求成功还是失败，此方法始终会被调用。它总是在成功或错误事件之后调用。
- en: The order that events are called for a single request is always the same. First,
    the start event, then the send, followed by either the success or error event,
    then the complete event, and finally the stop event. If more than one request
    is made, the order that the events are fired becomes non-deterministic. The only
    thing that can be guaranteed is that the start is the first event and stop is
    the last.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单个请求调用的事件顺序始终相同。首先是开始事件，然后是发送事件，接着是成功或错误事件，然后是完成事件，最后是停止事件。如果进行多个请求，则事件触发的顺序变得不确定。唯一可以保证的是开始是第一个事件，而停止是最后一个。
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Modern web apps must smoothly send and retrieve data to their servers. jQuery
    helps us interact seamlessly with our server and eliminates the need to do a full-page
    refresh.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 Web 应用必须能够与服务器顺畅地发送和检索数据。jQuery 帮助我们与服务器无缝交互，并消除了需要进行完整页面刷新的需要。
- en: In this chapter, we learned how to pull new data, JavaScript, and HTML from
    our server. Also, how to post data to the server without doing a page refresh.
    And we also learned about some helper methods that jQuery provides that make it
    easier for us to package our data properly for transmission.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何从服务器拉取新数据、JavaScript 和 HTML。还学习了如何在不进行页面刷新的情况下向服务器提交数据。我们还学习了一些
    jQuery 提供的帮助方法，这些方法使我们更容易地正确打包数据以进行传输。
- en: One major criticism of jQuery isn't the library itself but the fact that applications
    written with it tend to quickly grow unruly. In the next chapter, we will look
    at ways we can keep our code from looking like spaghetti.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关于 jQuery 的主要批评并不是针对库本身，而是使用它编写的应用往往很快变得难以控制。在下一章中，我们将看看如何保持我们的代码不像意大利面条一样混乱。
