- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building PWAs with Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Progressive Web Apps** (**PWAs**) are far more than just web applications;
    they’re the next evolution in web technology. Combining the best of web and mobile
    applications, PWAs provide an unparalleled user experience, even in less-than-ideal
    network conditions. But what makes them truly compelling is their graceful degradation
    — while they harness the full power of modern browsers, they also ensure a seamless,
    core experience in older browsers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we dive deep into the world of PWAs through the lens of Angular.
    Angular has built-in PWA support that makes it an ideal candidate for crafting
    resilient and performant web applications. You’ll learn how to make your apps
    installable, capable, fast, and reliable building them as progressive web apps.
    The following are the recipes we’re going to cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Converting an existing Angular app into a PWA with the Angular CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the theme color for your PWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using dark mode in your PWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing a custom installable experience in your PWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Precaching requests using an Angular service worker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an app shell for your PWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the recipes in this chapter, ensure your setup is complete as per the ''Technical
    Requirements'' in the ''Angular-Cookbook-2E'' GitHub repository. For setup details,
    visit: [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md).
    The starter code for this chapter is located at [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter13](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter13).'
  prefs: []
  type: TYPE_NORMAL
- en: Converting an existing Angular app into a PWA with the Angular CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **PWA** comprises several intriguing components, with two standout features
    being the service worker and the web manifest file. The service worker plays a
    vital role in caching static resources and handling caching requests.
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, the web manifest file holds essential information such as app icons
    and the app’s theme color. In this guide, we’ll transform an existing Angular
    application into a PWA. These principles are also applicable if you were to start
    a new Angular app from scratch. Throughout this walkthrough, we’ll convert an
    existing Angular app, highlighting the changes made and showcasing the transformation
    process using the `@angular/pwa` package. This package not only enables PWA functionality
    but also facilitates effective static resource caching.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter13/ng-pwa-conversion`
    inside the cloned repository. This is not part of our NX workspace and is rather
    a **standalone Angular** app with its own `package.json`, `node_modules`, etc.
    Perform the following steps to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and navigate to the cloned code repository folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to `start/apps/chapter13/ng-pwa-conversion` and run the following
    commands to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open a new tab in the browser and navigate to `http://localhost:8080`. You
    should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_13_01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 13.1: ng-pwa-conversion app running on http://localhost:8080'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let’s see the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app we’re working with is a game built using the Angular CDK in *Chapter
    9*, *Angular and the Angular CDK*. You can enter your name, then guess the dice’s
    next value, and get a score leaderboard. The value of the leaderboard is persisted
    using the local storage. But the app is not a PWA yet. Let’s convert it into a
    PWA:'
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s see if our application works offline at all, because that is one
    of the traits of PWAs. Open **Chrome Dev Tools** for the app. Go to the **Network**
    tab and change **Throttling** to **Offline**, as follows:![](img/B18469_13_02.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.2: Changing network throttling to Offline to see the offline experience'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Make sure that the **Disable cache** option is ticked too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now stop the `http` server by exiting the process from your terminal. Once done,
    refresh the app’s page. You should see that the app doesn’t work anymore, as shown
    in the following figure:![](img/B18469_13_03.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.3: App not working offline'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To convert this app into a PWA, open a new terminal window/tab and make sure
    you’re inside the `start/apps/chapter13/ng-pwa-conversion` folder. Once inside,
    run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should see a bunch of files created and updated as the process from the
    command finishes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now build and serve the app again by running `npm run build && npx http-server
    dist/ng-pwa-conversion`. Once done, navigate to `http://localhost:8080`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now make sure you have turned off throttling by switching to the **Network**
    tab and setting **No throttling** as the selection option, as shown in *Figure
    13.4*. Also, notice that the **Disable cache** option is turned off:![Figure 13.4
    – Turning off network throttling ](img/B18469_13_04.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.4: Turning off network throttling'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now refresh the app once. You should see the app working and the network logs
    showing that assets such as JavaScript files were loaded from the server, as shown
    in *Figure 13.5*:![](img/B18469_13_05.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.5: Assets downloaded from the source (Angular server)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, refresh the app once again and you’ll see that the same assets are now
    downloaded from the cache using the service worker, as shown in *Figure 13.6*:![](img/B18469_13_06.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.6: Assets downloaded from the cache using the service worker'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now is the moment we’ve been waiting for. Change the network throttling back
    to **Offline** to go into the **Offline** mode and refresh the app. You should
    still see the app working in **Offline** mode because of the service worker, as
    shown in *Figure 13.7*:![](img/B18469_13_07.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.7: Angular app working offline as a PWA using a service worker'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now you can install this PWA on your machine. Since I’m using a MacBook, it
    is installed as a Mac app. If you’re using Chrome, the installation option should
    be around the address bar, as shown in *Figure 13.8*:![](img/B18469_13_08.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.8: Installing the Angular PWA from Chrome'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Kaboom! Just by using the `@angular/pwa` package, with zero configuration done
    ourselves, we converted our existing Angular app into a PWA. We are now able to
    run our application offline, and we can install it as a PWA on our devices. See
    *Figure 13.9* to see how the app looks—just like a native app on Mac OS X:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_13_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.9: How our Angular PWA looks as a native app on Mac OS X'
  prefs: []
  type: TYPE_NORMAL
- en: Cool, *right?* Now that you know how to build a PWA with the Angular CLI, see
    the next section to understand how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Angular core team and the community have done an amazing job with the `@angular/pwa`
    package and, in general, with the `ng add` command, which allows us to add different
    packages to our applications using Angular schematics. In this recipe, when we
    run `ng add @angular/pwa`, it uses schematics to generate the app icons along
    with the web app manifest. If you look at the changed files, you can see the new
    files, as shown in *Figure 13.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18469_13_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.10: Web manifest file and the app icon files'
  prefs: []
  type: TYPE_NORMAL
- en: The `manifest.webmanifest` file is a file that contains a JSON object. This
    object defines the manifest for the PWA and contains some information. The information
    includes the name of the app, the short name, the theme color, and the configuration
    for different icons, for different devices. Imagine this PWA is installed on your
    Android phone. You need an icon in your home drawer to tap on to open the app.
    This file holds the information regarding which icon to use based on different
    device sizes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also see the file `ngsw-config.json`, which contains the configuration for
    the service worker. Behind the scenes, while the `ng add` command is running the
    schematics, it also installs the `@angular/service-worker` package in our project.
    If you open the `app.config.ts` file, you’ll see the code to register our service
    worker as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code to understand what’s happening here. We’re creating
    the configuration for our standalone application here along with some providers.
    We have used the `provideRouter` method to provide all the routes for the application
    already. In the recipe, we add the `provideServiceWorker` method to register a
    new service worker for us. It takes two arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: The first argument is the filename of the service worker script, `'``ngsw-worker.js'`.
    This is the built-in Angular service worker that handles the caching and other
    offline behaviors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second argument is a configuration object for the service worker. Let’s
    review the properties of this configuration object:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enabled: !isDevMode()` tells the application to enable the service worker
    only when the application is not in development mode.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`registrationStrategy:''registerWhenStable:3000''` specifies the strategy for
    registering the service worker. In this case, the service worker will be registered
    when the application is stable (no ongoing tasks) after 30 seconds.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The code registers a new service worker file named `ngsw-worker.js`. This file
    uses the configuration from the `ngsw-config.json` file to decide which resource
    to cache and using which strategies. This is linked in the `angular.json` file
    using the `ngswConfigPath` property. Note that the application we have is a standalone
    application. This means we don’t have an `NgModule` for the application’s bootstrapping
    process. If this was rather a non-standalone application, we would see the changes
    in the `app.module.ts` file.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how the recipe works, see the next section for further reading.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular service worker intro: [https://angular.io/guide/service-worker-intro](https://angular.io/guide/service-worker-intro)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What are PWAs?: [https://web.dev/what-are-pwas/](https://web.dev/what-are-pwas/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the theme color for your PWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we learned how to convert an Angular app into a PWA.
    When we do so, the `@angular/pwa` package creates the web app manifest file with
    the default theme color, as shown in *Figure 13.9*. However, almost every web
    app has its own branding and style. If you want to theme your PWA’s title bar
    according to your branding, this is the recipe for you. We’ll learn how to modify
    the web app manifest file to customize the PWA’s theme color.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter13/ng-pwa-theme-color`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the cloned code repository folder, and run the
    following command (from the workspace’s root folder) to serve the project in production
    mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This should open the app in a new browser tab at `https://localhost:5300`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Install the application as shown in *Figure 13.8*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a native OS window, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_13_11.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 13.11: ng-pwa-theme-color app running as a PWA'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running, let’s see the steps of the recipe in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can see in *Figure 13.11*, the header of the app has a bit of a different
    color than the app’s native header (or toolbar). Due to this difference, the app
    looks a bit weird. We’ll modify the web app manifest to update the theme color.
    Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `src/manifest.webmanifest` file in your editor and change the theme
    color as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also have `theme-color` set in our `index.html` file. By default, that has
    precedence over the web app manifest file. Therefore, we need to update it. Open
    the `index.html` file and update it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the PWA again and uninstall it, as shown in *Figure 13.12*. Make sure to
    check the box that says **Also clear data from Chrome (...)** when prompted:![](img/B18469_13_12.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.12: Uninstalling the ng-pwa-theme-color app'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, build the app again using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now go to `http://localhost:5300` and install the app again as a PWA, as shown
    in *Figure 13.8*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The PWA should already be opened. If not, open it from your applications and
    you should see the updated theme color, as shown in *Figure 13.13*:![](img/B18469_13_13.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.13: PWA with the updated theme color'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Awesomesauce! You’ve just learned how to update the theme color for an Angular
    PWA. Now that you’ve finished the recipe, see the next section for further reading.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating a PWA with the Angular CLI: [https://web.dev/creating-pwa-with-angular-cli/](https://web.dev/creating-pwa-with-angular-cli/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using dark mode in your PWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the modern age of devices and applications, the preferences of end users
    have evolved a bit as well. With the increased usage of screens and devices, health
    is a major concern. Almost all screen devices now support dark mode. Considering
    this fact, if you’re building a web app, you might want to provide dark mode support
    for it. If it is a PWA that presents itself as a native app, the responsibility
    is much greater. In this recipe, you’ll learn how to provide dark mode for your
    Angular PWA. You’ll learn three different ways to implement styles for dark mode,
    including `prefers-color-scheme` (which is the default/native CSS way) and two
    ways to implement it with Tailwind CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter13/ng-pwa-dark-mode`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the cloned code repository folder, and run the
    following command (from the workspace’s root folder) to serve the project in production
    mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This should open the app in a new browser tab at `https://localhost:6400`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Install the application as shown in *Figure 13.8*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a native OS window, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_13_14.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 13.14: ng-pwa-dark-mode app running on http://localhost:6400'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now make sure you have the **Dark** theme enabled on your machine. If you’re
    running Mac OS X, you can open **Settings** | **General** and select the **Dark**
    appearance, as shown in *Figure 13.15*:![Figure 13.14 – Changing the system appearance
    to Dark mode in macOS X ](img/B18469_13_15.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.15: Changing the system appearance to dark mode in Mac OS X'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you run the app now, you should be able to see that the app looks the same
    as shown in *Figure 13.4*. However, for dark mode, we should not have a white
    background, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the PWA running as a native app, and the **dark** mode applied
    to the system, let’s see the steps of the recipe in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can see, our Angular app doesn’t have complete support for dark mode
    at the moment. That is, the UI is still too bright and looks exactly the same
    as what we see in light mode. We’ll begin by serving the app in development mode
    and adding different colors for dark mode. Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Serve the app in development mode by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This should serve the app in a new browser tab at `http://localhost:4200`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, open the `styles.scss` file to use the `prefers-color-scheme` media query.
    We’ll use a different value for our global CSS variables to create a different
    view for dark mode. Update the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you refresh the app again in the browser tab, you’ll see that the background
    has changed but the text is still dark and is not easily visible, as shown in
    *Figure 13.16*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_13_16.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 13.16: Dark text and a dark background for dark mode'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To fix the styles, we need to provide the styles for dark mode individually
    to the necessary elements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Since we are using Tailwind CSS, we are going to use the Tailwind way of applying
    dark mode to the input label and the input element. Update `src/app/game/game.component.html`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that for the input, we’re using an exclamation sign in the `dark:!text-white`
    statement. This is to mark the `text-white Tailwind` CSS class as important which
    results in the relevant CSS style having the `!` important statement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now let’s change the `game-stepper.component.html` file to update the style
    for the step heading as well, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you refresh the application, you should be able to see the heading in white,
    since we’re using dark mode on our device, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_13_17.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 13.17: Heading and input colors fixed for dark mode'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now let’s fix the numbered cards on the dice-rolling screen. You can see that
    in dark mode, the backgrounds on the cards are not visible, as shown in *Figure
    13.18*:![](img/B18469_13_18.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.18: Cards’ backgrounds not visible in dark mode'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let’s simulate the dark and light modes using Chrome DevTools as it provides
    a really nice way to do so. Open Chrome DevTools and then open the **Command**
    menu. On macOS X, the keys are *Cmd + Shift + P*. On Windows, they are *Ctrl +
    Shift + P*. Then type `Render` and select the **Show Rendering** option, as we
    can see in *Figure 13.19*:![](img/B18469_13_19.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.19: Open the rendering view using the Show Rendering option'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, in the **Rendering** tab, toggle the **prefers-color-scheme** emulation
    for light and dark modes, as shown in *Figure 13.20*:![](img/B18469_13_20.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.20: Simulate prefers-color-scheme modes'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now let us update the numbered cards’ backgrounds. Since the styles for these
    are being applied from the `.scss` file, we’re going to use another technique
    of Tailwind CSS to apply the styles in the `.scss` file. Update `value-guesser.component.scss`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you look at the dice-rolling view now, you should see the changed colors,
    as shown in *Figure 13.21*:![](img/B18469_13_21.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.21: Cards’ backgrounds in dark mode'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now test both modes using the Chrome DevTools.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uninstall the existing PWA by opening it and then selecting the **Uninstall**
    option from the **More** menu, as shown in *Figure 13.12*. Make sure to check
    the box that says **Also clear data from Chrome (...)** when prompted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to serve the production app on the browser and then
    navigate to `http://localhost:6400`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You may need to clear your cache when this opens in the browser. You can press
    *Ctrl + Shift + R* on Windows and *Cmd + Shift + R* on Mac OS X to do a hard reload.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Wait for a few seconds for the **Install** button to show up in the address
    bar. Then install the PWA like in *Figure 13.8*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As soon as you run the PWA now, you should see the dark mode view, as shown
    in *Figure 13.22*, if your system’s appearance is set to dark mode:![](img/B18469_13_22.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.22: Our PWA supporting dark mode out of the box'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Awesome! If you switch your system appearance from dark mode to light mode or
    vice versa, you should see the PWA reflecting the appropriate colors. You now
    know three ways to implement styles for dark mode, including the native CSS way
    and the Tailwind CSS way. Now that you know how to support dark mode in your PWA,
    refer to the next section to see links for further reading.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Prefers color scheme: [https://web.dev/prefers-color-scheme/](https://web.dev/prefers-color-scheme/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using color scheme with `prefers-color-scheme`: [https://web.dev/color-scheme/](https://web.dev/color-scheme/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing a custom installable experience in your PWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We know that PWAs are installable. This means they can be installed on your
    devices like a native application. However, when you first open the app in the
    browser, it totally depends on the browser as to how it shows the **Install**
    option; it varies from browser to browser. It also It also might not be clearly
    visible or clearly visible. Also, you might want to show the **Install** prompt
    at some special point in the app instead of the app launch, Consider displaying
    the Install prompt at a specific, user-friendly point within the app, rather than
    right at the app’s launch, as this can be perceived as annoying by some users.
    Luckily, we have a way to provide our own custom dialog/prompt for the installation
    option for our PWAs. And that is what we’ll learn about in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter13/ng-pwa-cust-installation`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the cloned code repository folder, and run the
    following command (from the workspace’s root folder) to serve the project in production
    mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This should open the app in a new browser tab at `https://localhost:7000`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Install the application as shown in *Figure 13.8*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a native OS window, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_13_23.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 13.23: ng-pwa-cust-installation running at http://localhost:7000'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running, let’s see the steps of the recipe in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have the Dice Guesser application in which you roll the dice and guess the
    output. For this recipe, we’ll prevent the default installation prompt and will
    show it only when the user has made a correct guess. Let’s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a service that will show our custom installable prompt in the
    next steps. In the project root, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When asked, use the `@schematics/angular:service` schematics.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, open the created file, `installable-prompt.service.ts`, and update the
    code as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will notice that TypeScript isn’t happy with our code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In this step, we need to define the `BeforeInstallPrompt` event type. Let’s
    create a folder named `types` inside the `src` folder. Create a file named `installation-prompt.d.ts`
    and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We must add the `types` folder in `tsconfig.json` so we can load the types.
    Update the `tsconfig.json` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let’s build the custom installation banner we’ll show to the user to
    trigger the installation prompt. Update `app.component.html` and add the following
    code AFTER the `<main>`, tag as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '***   Now run the application again using the following command to see the
    installation prompt, as shown in *Figure 13.24*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![](img/B18469_13_24.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 13.24: Custom installation prompt being displayed in the PWA'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Sometimes you will see cached versions of the application due to running multiple
    PWAs on the same port, for instance. In this case, open the Chrome DevTools, go
    to the **Application** tab, click the **Service Workers** option from the left
    menu, and check the **Bypass for network** option.**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**1.  We’re now going to create a `signal` inside the `InstallablePromptService`
    class, based on which we’ll show or hide the custom installation banner. Update
    the `installable-prompt.service.ts` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s import the `InstallationPromptService` class in the app component so
    we can use it in the template for the custom installation banner. Update the `app.component.ts`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the template now to use the `signal` from the injected `InstallablePromptService`
    in the app component. Update the `app.component.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Restart the server by running `npm run serve:static chapter13 ng-pwa-cust-installation
    7000` and you’ll notice that the custom installation banner doesn’t show anymore.
    That’s because now we have to flip the `signal` in the `InstallationPromptService`
    class when the user guesses the score correctly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Uninstall the existing PWA by opening it and then selecting the **Uninstall**
    option from the **More** menu, as shown in *Figure 13.12*. Make sure to check
    the box that says **Also clear data from Chrome (...)** when prompted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `src/app/game/game.component.ts` file to flip the `signal`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you now run the app again, as shown in *step 6*, and guess the dice rolls,
    and you guess the correct one, you should be able to see the custom installation
    banner, as shown in *Figure 13.25*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_13_25.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 13.25: Custom installation banner being displayed after guessing'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we’ll implement what happens when we click the **Install it!** link from
    the custom installation banner. Create a new method in the file `installable-prompt.service.ts`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now call this method from the custom installation banner to show the
    browser’s installation prompt. Update the `app.component.html` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, if you rerun the app in the browser and guess the dice’s next value, you
    can click on the **Install it!** link to see the browser prompt, as shown in *Figure
    13.26*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_13_26.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 13.26: Browser installation prompt being displayed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we don’t want to show the custom installation banner when the app
    is running as a PWA. And right now, it does. To fix that, we’ll add some styles
    to `app.component.scss`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you install the PWA now and guess the dice’s next value correctly, you won’t
    see the custom installation banner anymore.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Awesome! You can now play around with the app by installing and uninstalling
    the PWA a few times and trying out all the combinations of the user choosing to
    install or not to install the app. It’s all fun and games. Now that you know how
    to implement a custom installation banner for an Angular PWA, move on to the next
    section to understand how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The heart of this recipe is the `beforeinstallprompt` event. It is a standard
    browser event that is supported in the latest versions of Chrome, Firefox, Safari,
    Opera, UC Browser (Android version), and Samsung Internet, that is, almost all
    major browsers. The event has a `prompt` method, which shows the browser’s default
    prompt on the device. In the recipe, we create `InstallablePromptService` and
    store the event in a property called `installPromptEvent`. This is so we can use
    it later on demand when the user has guessed a correct dice-roll value. Note that
    as soon as we receive the `beforeinstallprompt` event, we remove the event listener
    from the `window` object, so we only save the event once. That is when the app
    starts. If the user chooses not to install the app, we don’t show the prompt again
    within the same session. However, if the user refreshes the app, they will still
    get the prompt one time for the first correct guess. We could go one step further
    to save this state in `localStorage` to avoid showing the prompt after the page
    refreshes, but that’s not part of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: For the custom installation banner, we use a template based on Tailwind CSS.
    Note that on the custom installation banner, we have a link. When we click this
    link, the `showInstallPrompt` method from the `InstallablePromptService` class
    is called. In that method, we use the event, that is, the `this.installPromptEvent`
    property’s `prompt` method to show the browser’s prompt. Note that after we’ve
    displayed the browser’s prompt, we set the signal `isPromptBannerShown` value
    to `false`, so it hides the custom install banner. This is also so we don’t show
    the prompt again in the same session until the user refreshes the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we also use some CSS to not show the custom installation banner at
    all if the app is launched as a PWA. This is important because if it is already
    a PWA, it doesn’t make sense to show an install prompt. Therefore, we use an `@media`
    query with `display-mode: standalone`, which checks if the app is running as a
    PWA. In that CSS rule, we hide the custom installation banner.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you understand how it all works, refer to the next section to see links
    for further reading.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'How to provide your own app-install experience (`web.dev`): [https://web.dev/customize-install/](https://web.dev/customize-install/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Precaching requests using an Angular service worker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the addition of service workers in our previous recipes, we’ve seen that
    they already cache the assets and serve them using the service worker if we go
    into Offline mode. But what about network requests? If the user goes offline and
    refreshes the application right now, the network requests fail because they’re
    not cached with the service worker. This results in a broken offline user experience.
    In this recipe, we’ll configure the service worker to precache network requests,
    so the app works fluently in Offline mode as well.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter13/ng-pwa-precaching`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the cloned code repository folder, and run the
    following command (from the workspace’s root folder) to serve the project in production
    mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This should open the app in a new browser tab at `https://localhost:7600`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Refresh the page once.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, switch to Offline mode as shown in *Figure 13.2*. If you go to the **Network**
    tab and filter the requests using the query results, you should see that the requests
    fail, as shown in *Figure 13.27*:![](img/B18469_13_27.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.27: Offline experience broken due to not caching the network requests'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we see the network requests failing, let us see the steps of the recipe
    to fix this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can see in *Figure 13.27*, the app still loads. We can see the header
    and the loader. However, the API (fetch) calls do not work since we are simulating
    an offline network situation using Chrome DevTools. This is because the service
    worker is not configured yet to cache the data request. Let us get started with
    the recipe to fix this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To cache the network requests, open the `ngsw-config.json` file inside the
    `start/apps/chapter13/ng-pwa-precaching` folder and update it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let us test the application now. Build and run the app in production mode using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now navigate to `http://localhost:7600`. Make sure **Network throttling** is
    not enabled, that is, you are not in **Offline** mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear the app data using Chrome DevTools using the **Application** tab | the
    **Storage** panel. Or press *Cmd + Shift + R* (macOS X) or *Ctrl + Shift + R*
    (Windows) to do a hard reload.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refresh the app once more to let the service worker cache the API requests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Chrome DevTools, go to the **Network** tab and switch to Offline mode, as
    shown in *Figure 13.2*. Refresh the app again. You should see the data from Swapi
    despite being offline. The network calls are served from the service worker, as
    shown in *Figure 13.28*:![](img/B18469_13_28.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.28: Network calls being cached by the service worker'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: And boom! You have just learned how to configure a service worker in an Angular
    app to cache network/data requests. And you can install the PWA and use it even
    if you are offline. Awesome, right?
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have finished the recipe, let’s see how it all works in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The heart of this recipe is the `ngsw-config.json` file. This file is used
    by the `@angular/service-worker` package when generating the service worker file.
    The file already contains a JSON object out of the box when we use the `@angular/pwa`
    schematics by running `ng add @angular/pwa`. This JSON contains a property called
    `assetGroups`, which configures the caching of the assets based on the provided
    configuration. For this recipe, we wanted to cache network requests along with
    the assets. Therefore, we added the new property `dataGroups` in the JSON object.
    Let us have a look at the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, `dataGroups` is an array. We can provide different configuration
    objects as elements to it. Each configuration has a `name`, an array of `urls`,
    and a `cacheConfig` that defines the caching strategy. For our configuration,
    we use a wildcard with the API URL, that is, we use `urls`: ["`https://swapi.dev/api/*`"].
    For the `cacheConfig`, we are using the `freshness` strategy, which means the
    app will always fetch the data from its origin first. If the network is unavailable,
    then it will use the response from the service worker cache. An alternate strategy
    is `performance`, which first looks up the service worker for a cached response.
    If there is nothing in the cache for the URL (or URLs), then it fetches the data
    from the actual origin. The `maxSize` property defines how many requests can be
    cached for the same pattern (or set of URLs). The `maxAge` property defines how
    long the cached data would live in the service worker cache.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how the recipe works, see the next section for links to further
    reading.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular service worker intro: [https://angular.io/guide/service-worker-intro](https://angular.io/guide/service-worker-intro)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular service worker config: [https://angular.io/guide/service-worker-config](https://angular.io/guide/service-worker-config)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Creating an offline fallback page (`web.dev`): [https://web.dev/offline-fallback-page/](https://web.dev/offline-fallback-page/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an App Shell for your PWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to building fast user experiences for web apps, one of the major
    challenges is minimizing the critical rendering path. This includes loading the
    most critical resources for the target page, parsing, executing JavaScript, and
    so on. With an App Shell, we can render a page, or a portion of the app, at build
    time rather than runtime. This means the user will see the minimal pre-rendered
    content initially, until JavaScript and Angular kick in. This means the browser
    does not have to work and wait a while for the first meaningful paint. This not
    only provides a good user experience but also helps rank the website higher in
    search engines, i.e., results in better SEO. In this recipe, you will create an
    App Shell for an Angular PWA.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter13/ng-pwa-app-shell`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the cloned code repository folder, and run the
    following command (from the workspace’s root folder) to serve the project in production
    mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab at `http://localhost:4200`, and
    you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_13_29.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 13.29: ng-pwa-app-shell running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we’ll disable JavaScript to simulate taking a lot of time to parse JavaScript,
    or to simulate that there’s no App Shell in place yet. Now open Chrome DevTools.
    Then open the command panel. The shortcut for opening the command panel is *Cmd
    + Shift + P* on Mac OS X and *Ctrl + Shift + P* on Windows. Type **Disable JavaScript**,
    select the option, and hit *Enter*. Refresh the page while Chrome DevTools is
    still open, and you should see a message as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_13_30.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 13.30: No App Shell present in the app'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have checked for the absence of the App Shell, let’s see the steps
    of the recipe in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have an Angular application that fetches some users from an API. We will
    create an App Shell for this app so it can provide the first meaningful paint
    faster as a PWA. Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create the App Shell for the app by running the following command from
    the project root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This adds some new files to our project but also updates `project.json`. Since
    we’re using a unique folder structure for the recipes, you need to update the
    `project.json` file by replacing all the `dist/ng-pwa-app-shell` instances with
    `dist/apps/chapter13/ng-pwa-app-shell`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `src/app/app-shell/app-shell.component.ts` file to import the `UsersComponent`
    class so we can render the `users` page in the App Shell. The code should look
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now open the `app-shell.component.html` file and use the `<app-users>` element
    so we render the whole `UsersComponent` in the App Shell. The code should look
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, update `users.component.ts` to show the skeleton loader when the App
    Shell is being generated. Update the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have the code written for the App Shell, let’s create it. Run the
    following command from the `workspace root` to generate the App Shell in `production`
    mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the App Shell is generated in *step 5*, run the following command from
    the `workspace root` (not from the `start` folder) to serve it using the `http-server`
    package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure that JavaScript is still turned off for the app. If not, open Chrome
    DevTools and press *Cmd + Shift + P* for Mac OS X to open the command panel (*Ctrl
    + Shift + P* on Windows). Then type `Disable Javascript` and hit *Enter*, selecting
    the option as shown in *Figure 13.31*:![Figure 13.27 – Disable JavaScript using
    Chrome DevTools ](img/B18469_13_31.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.31: Disable JavaScript using Chrome DevTools'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Refresh the app while JavaScript is disabled. You should now see the app still
    showing the pre-rendered users page with the skeleton loaders, despite JavaScript
    being disabled, as shown in *Figure 13.32*. Woohoo!![](img/B18469_13_32.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.32: App Shell showing the pre-rendered Users page'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To verify that we are pre-rendering the **Users** page at build time, inspect
    the generated code at `<workspace-root>/start/dist/apps/chapter13/ng-pwa-app-shell/browser/index.html`.
    You should see the entire rendered page inside the `<body>` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the production build with the App Shell and serve it on port `1020`
    by running the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Navigate to `http://localhost:1020` in your browser and install the app as a
    PWA, as shown in *Figure 13.8*. Once done, run the PWA and it should look as follows:![](img/B18469_13_33.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.33: ng-pwa-app-shell running as a PWA'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Great! You now know how to create an App Shell for your Angular PWAs. Now that
    you’ve finished the recipe, see the next section on how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The recipe begins with disabling JavaScript for our application. This means
    when the app runs, we only show static HTML and CSS since there’s no JavaScript
    execution. We see a message about JavaScript not being supported, as shown in
    *Figure 13.30*. The code comes from the `src/index.html` file having the following
    code inside the `<body>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We then run the command `nx g app-shell--project=ng-pwa-app-shell`. Since we
    are in an NX workspace, the command requires the right project. If this were a
    regular Angular project, you could just run `ng generate app-shell` and it would
    create the App Shell for you. In either case, the command does the following things
    for us:'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a new component named `AppShellComponent` and generates its relevant
    files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installs the `@angular/platform-server` package in the project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds some new files, namely, `main.server.ts`, to enable server-side rendering
    (build-time rendering for our App Shell, to be exact).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most importantly, it updates the `project.json` (`angular.json` for an Angular
    project not in the NX workspace) file to add a bunch of schematics for server-side
    rendering as well as for generating the `app-shell`. Notice that it overrides
    the `build` object (specifically the `outputPath`) property to remove the `apps`
    folder and chapter name. We don’t want that as we want the bundle to be generated
    in `dist/apps/chapter13/<project-name>`, and that is why we updated it manually
    in the recipe. Notice that it also adds a new `"server"` object for SSR and an
    `"app-shell"` object with configuration to generate the App Shell.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the recipe, we create the App Shell, and then we import the `UsersComponent`
    class to the `AppShellComponent` class’s `imports` array. Since `AppShellComponent`
    is a `standalone` component (not part of any `NgModule`), and so is `UsersComponent`,
    we need to link them together via the `imports` array in `AppShellComponent`.
    After importing the `UsersComponent` class, we update the `app-shell.component.html`
    (the App Shell template) to use the `<app-users>` selector, which reflects the
    `UsersComponent` class. That is the entire **Users** page. Finally, we make sure
    that we only render the skeleton elements when the Browser is being created (and
    the same for SSR). Therefore, we use the `PLATFORM_ID` token in the `users.component.ts`
    file. The token’s value contains the name of the platform our application is running
    on. When the app shell is being generated, it is the server-side environment,
    and the value of `PLATFORM_ID` is `"server"`. Instead of comparing it with the
    string `"server"`, i.e., using the condition `this.platformId !== "server")`,
    we use the `isPlatformBrowser` function from the `@angular/common` package to
    only fetch the data if the platform is `browser` (which is not the case when generating
    the app shell).
  prefs: []
  type: TYPE_NORMAL
- en: We then verify the App Shell in *step 4* and *step 5*. These commands generate
    an Angular build in production mode with the App Shell (non-minified code), and
    then serve the project on port `4200`, respectively. Note that the `ng-pwa-app-shell`
    folder in the `start/dist/apps/chapter13/ng-pwa-app-shell` folder has two folders
    inside, that is, the `browser` folder and the `server` folder, and our `index.html`
    resides in the `browser` folder. The code inside `index.html` is pre-rendered
    at build time. This means Angular opens the app and renders the `UsersComponent`,
    including the search input and skeleton loaders, at build time. So, as soon as
    the app opens, the content is pre-rendered. Once we’re done with all these steps,
    we install the PWA to test it out.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how the recipe works, see the next section for links to further
    reading.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular App Shell guide: [https://angular.io/guide/app-shell](https://angular.io/guide/app-shell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The App Shell model (web fundamentals by Google): [https://developers.google.com/web/fundamentals/architecture/app-shell](https://developers.google.com/web/fundamentals/architecture/app-shell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Critical Rendering Path** (**CRP**): [https://developer.mozilla.org/en-US/docs/Web/Performance/Critical_rendering_path](https://developer.mozilla.org/en-US/docs/Web/Performance/Critical_rendering_path)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/AngularCookbook2e](Chapter_13.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code1388317275422265.png)**'
  prefs: []
  type: TYPE_NORMAL
