["```js\n    projects/ch8 \n    ```", "```js\n    npx ng serve ch8 \n    ```", "```js\n    npx ng test ch8 --watch=false \n    ```", "```js\n    npx ng e2e ch8 \n    ```", "```js\n    npx ng build ch8 --prod \n    ```", "```js\n**example**\nconst foo: string = undefined\nif(foo) {\n  console.log('truthy')\n} else {\n  console.log('falsy')\n} \n```", "```js\n**example**\nconst foo: string = undefined\nlet result = ''\nif(foo) {\n  result = 'truthy'\n} else {\n  result = 'falsy'\n}\nconsole.log(result) \n```", "```js\n**example**\nconst foo: string = undefined\nconsole.log(foo ? 'truthy' : 'falsy') \n```", "```js\n**example**\nconst foo: string = undefined\nconsole.log(foo ? foo : 'bar') \n```", "```js\n**example**\nconst foo: string = undefined\nconsole.log(foo || 'bar') \n```", "```js\n**example**\nconst foo: string = undefined\nconsole.log(foo != null ? foo : 'bar') \n```", "```js\n**example**\nconst foo: string = undefined\nconsole.log(foo ?? 'bar') \n```", "```js\n**example**\nconst user = {\n  name: {\n    first: 'Doguhan',\n    middle: null,\n    last: 'Uluca'\n  } \n}\nconsole.log((user && user.name && user.name.middle) ?? '') \n```", "```js\n**example**\nconsole.log(user?.name?.middle ?? '') \n```", "```js\n    **src/app/auth/auth.enum.ts**\n    export enum Role {\n      None = 'none',\n      Clerk = 'clerk',\n      Cashier = 'cashier',\n      Manager = 'manager',\n    } \n    ```", "```js\n    **src/app/user/user/user.ts**\n    import { Role } from '../../auth/auth.enum'\n    export interface IUser {\n      _id: string\n      email: string\n      name: IName\n      picture: string\n      role: Role | string\n      userStatus: boolean\n      dateOfBirth: Date | null | string\n      level: number\n      address: {\n        line1: string\n        line2?: string\n        city: string\n        state: string\n        zip: string\n      }\n      phones: IPhone[]\n    } \n    ```", "```js\n    **src/app/user/user/user.ts**\n    export interface IName {\n      first: string\n      middle?: string\n      last: string\n    }\n    export enum PhoneType {\n      None = 'none',\n      Mobile = 'mobile',\n      Home = 'home',\n      Work = 'work',\n    }\n    export interface IPhone {\n      type: PhoneType\n      digits: string\n      id: number\n    } \n    ```", "```js\n    **src/app/user/user/user.ts**\n    export class User implements IUser {\n      constructor(\n        // tslint:disable-next-line: variable-name\n        public _id = '',\n        public email = '',\n        public name = { first: '', middle: '', last: '' } as IName,\n        public picture = '',\n        public role = Role.None,\n        public dateOfBirth: Date | null = null,\n        public userStatus = false,\n        public level = 0,\n        public address = {\n          line1: '',\n          city: '',\n          state: '',\n          zip: '',\n        },\n        public phones: IPhone[] = []\n      ) {}\n      static Build(user: IUser) {\n        if (!user) {\n          return new User()\n        }\n        if (typeof user.dateOfBirth === 'string') {\n          user.dateOfBirth = new Date(user.dateOfBirth)\n        }\n        return new User(\n          user._id,\n          user.email,\n          user.name,\n          user.picture,\n          user.role as Role,\n          user.dateOfBirth,\n          user.userStatus,\n          user.level,\n          user.address,\n          user.phones\n        )\n      }\n    } \n    ```", "```js\n    **src/app/user/user/user.ts**\n    export class User implements IUser {\n      ...\n      **public get fullName(): string {**\n     **if (!this.name) {**\n     **return ''**\n     **}**\n     **if (this.name.middle) {**\n     **return `${this.name.first} ${this.name.middle} ${this.name.last}`**\n     **}**\n     **return `${this.name.first} ${this.name.last}`**\n     **}**\n    } \n    ```", "```js\n    **src/app/user/user/user.ts**\n    export interface IUser {\n      ...\n      readonly fullName?: string\n    } \n    ```", "```js\n    **src/app/user/user/user.ts**\n    export class User implements IUser {\n      ...\n\n    **toJSON(): object {**\n     **const serialized = Object.assign(this)**\n     **delete serialized._id**\n     **delete serialized.fullName**\n     **return serialized**\n     **}**\n    } \n    ```", "```js\nexport interface IAuthService {\n  readonly authStatus$: BehaviorSubject<IAuthStatus>\n  readonly currentUser$: BehaviorSubject<IUser>\n  login(email: string, password: string): Observable<void>\n  logout(clearToken?: boolean): void\n  getToken(): string\n} \n```", "```js\n    $ npx ng g s auth --flat false --lintFix \n    $ npx ng g s auth/inMemoryAuth --lintFix --skipTests \n    ```", "```js\n    **src/app/app.module.ts**\n    **import { AuthService } from './auth/auth.service'**\n    **import { InMemoryAuthService } from './auth/auth.inmemory.service'**\n    ...\n      providers: [\n        **{**\n     **provide: AuthService,**\n     **useClass: InMemoryAuthService**\n     **},**\n        ...\n    ] \n    ```", "```js\n    $ npm install jwt-decode \n    $ npm install -D @types/jwt-decode \n    ```", "```js\n    **src/app/auth/auth.service.ts**\n    import { Role } from './auth.enum'\n    ...\n    export interface IAuthStatus {\n      isAuthenticated: boolean\n      userRole: Role\n      userId: string\n    }\n    export interface IServerAuthResponse {\n      accessToken: string\n    }\n    export const defaultAuthStatus: IAuthStatus = {\n      isAuthenticated: false,\n      userRole: Role.None,\n      userId: '',\n    }\n    ... \n    ```", "```js\n    **src/app/auth/auth.service.ts**\n    export interface IAuthService {\n      readonly authStatus$: BehaviorSubject<IAuthStatus>\n      readonly currentUser$: BehaviorSubject<IUser>\n      login(email: string, password: string): Observable<void>\n      logout(clearToken?: boolean): void\n      getToken(): string\n    } \n    ```", "```js\n    export **abstract** class AuthService \n    ```", "```js\n    **src/app/auth/auth.service.ts**\n    @Injectable()\n    export abstract class AuthService **implements IAuthService** {\n      authStatus$: BehaviorSubject<IAuthStatus>\n      currentUser$: BehaviorSubject<IUser>\n\n      **constructor() {}**\n\n      login(email: string, password: string): Observable<void> {\n        throw new Error('Method not implemented.')\n      }\n      logout(clearToken?: boolean): void {\n        throw new Error('Method not implemented.')\n      }\n      getToken(): string {\n        throw new Error('Method not implemented.')\n      }\n    } \n    ```", "```js\n    **src/app/auth/auth.service.ts**\n    import { IUser, **User** } from '../user/user/user'\n    ...\n    @Injectable()\n    export abstract class AuthService implements IAuthService {\n      **readonly** authStatus$ = \n        **new BehaviorSubject<IAuthStatus>(defaultAuthStatus)** \n      **readonly** currentUser$ = \n        **new BehaviorSubject<IUser>(new User())**\n      ...\n    } \n    ```", "```js\n    **src/app/auth/auth.service.ts**\n    ...\n    **export abstract class AuthService implements IAuthService {**\n     **protected abstract authProvider(**\n     **email: string,**\n     **password: string**\n     **): Observable<IServerAuthResponse>**\n     **protected abstract transformJwtToken(token: unknown):**\n     **IAuthStatus**\n     **protected abstract getCurrentUser(): Observable<User>**\n         ...\n    } \n    ```", "```js\n    **src/app/common/common.ts**\n    import { HttpErrorResponse } from '@angular/common/http'\n    import { throwError } from 'rxjs'\n    export function transformError(error: HttpErrorResponse | string) {\n      let errorMessage = 'An unknown error has occurred'\n      if (typeof error === 'string') {\n        errorMessage = error\n      } else if (error.error instanceof ErrorEvent) {\n        errorMessage = `Error! ${error.error.message}`\n      } else if (error.status) {\n        errorMessage = \n          `Request failed with ${error.status} ${error.statusText}`\n      } else if (error instanceof Error) {\n        errorMessage = error.message\n      }\n      return throwError(errorMessage)\n    } \n    ```", "```js\n    **src/app/auth/auth.service.ts**\n    **import * as decode from 'jwt-decode'**\n    **import { transformError } from '../common/common'**\n    ...\n      login(email: string, password: string): Observable<void> {\n        **const loginResponse$ = this.authProvider(email, password)**\n     **.pipe(**\n     **map((value) => {**\n     **const token = decode(value.accessToken)**\n     **return this.transformJwtToken(token)**\n     **}),**\n     **tap((status) => this.authStatus$.next(status)),**\n     **filter((status: IAuthStatus) => status.isAuthenticated),**\n     **flatMap(() => this.getCurrentUser()),**\n     **map(user => this.currentUser$.next(user)),**\n     **catchError(transformError)**\n     **)**\n     **loginResponse$.subscribe({**\n     **error: err => {**\n     **this.logout()**\n     **return throwError(err)**\n     **},**\n     **})**\n     **return loginResponse$**\n      } \n    ```", "```js\n    **src/app/auth/auth.service.ts**\n      ...\n      logout(clearToken?: boolean): void {\n        setTimeout(() => this.authStatus$.next(defaultAuthStatus), 0)\n      } \n    ```", "```js\n    **src/app/auth/cache.service.ts**\n    export abstract class CacheService {\n      protected getItem<T>(key: string): T | null {\n        const data = localStorage.getItem(key)\n        if (data != null) {\n          return JSON.parse(data)\n        }\n        return null\n      }\n      protected setItem(key: string, data: object | string) {\n        if (typeof data === 'string') {\n          localStorage.setItem(key, data)\n        }\n        localStorage.setItem(key, JSON.stringify(data))\n      }\n      protected removeItem(key: string) {\n        localStorage.removeItem(key)\n      }\n      protected clear() {\n        localStorage.clear()\n      }\n    } \n    ```", "```js\n    **src/app/auth/auth.service.ts**\n    ...\n    export abstract class AuthService \n      **extends CacheService** implements IAuthService { \n      constructor() {\n        **super()**\n      }\n      ... \n    } \n    ```", "```js\n**example**\nauthStatus$ = new BehaviorSubject<IAuthStatus>(\n  this.getItem('authStatus') ?? defaultAuthStatus\n)\nconstructor() {\n  super()\n  this.authStatus$.pipe(\n    tap(authStatus => this.setItem('authStatus', authStatus))\n  )\n} \n```", "```js\n    **src/app/auth/auth.service.ts**\n    ...\n      protected setToken(jwt: string) {\n        this.setItem('jwt', jwt)\n      }\n      getToken(): string {\n        return this.getItem('jwt') ?? ''\n      }\n      protected clearToken() {\n        this.removeItem('jwt')\n      } \n    ```", "```js\n    **src/app/auth/auth.service.ts**\n    ...\n      login(email: string, password: string): Observable<void> {\n        **this.clearToken()**\n        const loginResponse$ = this.authProvider(email, password)\n          .pipe(\n            map(value => {\n              **this.setToken(value.accessToken)**\n              const token = decode(value.accessToken)\n              return this.transformJwtToken(token)\n            }),\n            tap((status) => this.authStatus$.next(status)),\n            ...\n      }\n      logout(clearToken?: boolean) {\n        **if (clearToken) {**\n     **this.clearToken()**\n     **}**\n        setTimeout(() => this.authStatus$.next(defaultAuthStatus), 0)\n      } \n    ```", "```js\n    $ npm install fake-jwt-sign \n    ```", "```js\n    **src/app/auth/auth.inmemory.service.ts**\n    import { AuthService } from './auth.service'\n    @Injectable()\n    export class InMemoryAuthService **extends AuthService** {\n      constructor() {\n        **super()**\n     **console.warn(**\n     **\"You're using the InMemoryAuthService. Do not use this service in production.\"**\n     **)**\n      }\n      ...\n    } \n    ```", "```js\n    **src/app/auth/auth.inmemory.service.ts**\n      import { sign } from 'fake-jwt-sign'//For InMemoryAuthService only\n    ...\n      protected authProvider(\n        email: string,\n        password: string\n      ): Observable<IServerAuthResponse> {\n        email = email.toLowerCase()\n        if (!email.endsWith('@test.com')) {\n          return throwError('Failed to login! Email needs to end with @test.com.')\n        }\n        const authStatus = {\n          isAuthenticated: true,\n          userId: this.defaultUser._id,\n          userRole: email.includes('cashier')\n            ? Role.Cashier\n            : email.includes('clerk')\n            ? Role.Clerk\n            : email.includes('manager')\n            ? Role.Manager\n            : Role.None,\n        } as IAuthStatus\n        this.defaultUser.role = authStatus.userRole\n        const authResponse = {\n          accessToken: sign(authStatus, 'secret', {\n            expiresIn: '1h',\n            algorithm: 'none',\n          }),\n        } as IServerAuthResponse\n        return of(authResponse)\n      }\n    ... \n    ```", "```js\n    **example**\n    private exampleAuthProvider(\n      email: string,\n      password: string\n    ): Observable<IServerAuthResponse> { return this.httpClient.post<IServerAuthResponse>(\n        `${environment.baseUrl}/v1/login`, \n        { email: email, password: password }\n      )\n    } \n    ```", "```js\n    **src/app/auth/auth.inmemory.service.ts**\n    protected transformJwtToken(token: IAuthStatus): \n      IAuthStatus {\n        return token\n      } \n    ```", "```js\n    **src/app/auth/auth.inmemory.service.ts**\n    protected getCurrentUser(): Observable<User> {\n      return of(this.defaultUser)\n    } \n    ```", "```js\n    **src/app/auth/auth.inmemory.service.ts**\n    import { PhoneType, User } from '../user/user/user'\n    ...\n    private defaultUser = User.Build({\n      _id: '5da01751da27cc462d265913',\n      email: 'duluca@gmail.com',\n      name: { first: 'Doguhan', last: 'Uluca' },\n      picture: 'https://secure.gravatar.com/avatar/7cbaa9afb5ca78d97f3c689f8ce6c985',\n      role: Role.Manager,\n      dateOfBirth: new Date(1980, 1, 1),\n      userStatus: true,\n      address: {\n        line1: '101 Sesame St.',\n        city: 'Bethesda',\n        state: 'Maryland',\n        zip: '20810',\n      },\n      level: 2,\n      phones: [\n        {\n          id: 0,\n          type: PhoneType.Mobile,\n          digits: '5555550717',\n        },\n      ],\n    }) \n    ```", "```js\n    **src/app/home/home.component.ts**\n    import { AuthService } from '../auth/auth.service'\n    export class HomeComponent implements OnInit {\n      constructor(**private authService: AuthService**) {}\n      ngOnInit(): void {}\n      **login() {**\n     **this.authService.login('manager@test.com', '12345678')**\n     **}**\n    } \n    ```", "```js\n    **src/app/home/home.component.ts**\n    template: `\n        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\n          <span class=\"mat-display-2\">Hello, Limoncu!</span>\n          <button mat-raised-button color=\"primary\" **(click)=\"login()\"**>\n            Login as Manager\n          </button>\n        </div>\n      `, \n    ```", "```js\n    **src/app/home/home.component.ts**\n    constructor(\n      private authService: AuthService,\n      **private router: Router**\n    ) {}\n\n    login() {\n      this.authService.login('manager@test.com', '12345678')\n    **combineLatest([**\n     **this.authService.authStatus$, this.authService.currentUser$**\n    **])** \n     **.pipe(**\n     **filter(([authStatus, user]) =>** \n     **authStatus.isAuthenticated && user?._id !== ''**\n     **),**\n     **tap(([authStatus, user]) => {**\n     **this.router.navigate(['/manager'])**\n     **})**\n     **)**\n     **.subscribe()**\n    } \n    ```", "```js\n    **src/app/user/logout/logout.component.ts**\n    import { Component, OnInit } from '@angular/core' \n    import { Router } from '@angular/router'\n    import { AuthService } from '../../auth/auth.service'\n    @Component({\n      selector: 'app-logout', \n      template: `<p>Logging out...</p>`,\n    })\n    export class LogoutComponent implements OnInit { \n      constructor(private router: Router, private authService: AuthService) {}\n      ngOnInit() { \n        this.authService.logout(true)\n        this.router.navigate(['/'])\n      }\n    } \n    ```", "```js\n    **src/app/auth/auth.service.ts**\n    ...\n      protected hasExpiredToken(): boolean {\n        const jwt = this.getToken()\n        if (jwt) {\n          const payload = decode(jwt) as any\n          return Date.now() >= payload.exp * 1000\n        }\n        return true\n      }\n      protected getAuthStatusFromToken(): IAuthStatus {\n        return this.transformJwtToken(decode(this.getToken()))\n      } \n    ```", "```js\n    **src/app/auth/auth.service.ts**\n    ...\n    constructor() {\n        super()\n        if (this.hasExpiredToken()) {\n          this.logout(true)\n        } else {\n          this.authStatus$.next(this.getAuthStatusFromToken())\n        }\n    } \n    ```", "```js\n    **src/app/auth/auth.service.ts**\n    ...\n      @Injectable()\n    export abstract class AuthService extends CacheService implements IAuthService {\n      **private getAndUpdateUserIfAuthenticated = pipe(**\n     **filter((status: IAuthStatus) => status.isAuthenticated),**\n     **flatMap(() => this.getCurrentUser()),**\n     **map((user: IUser) => this.currentUser$.next(user)),**\n     **catchError(transformError)**\n     **)**\n      ...\n      login(email: string, password: string): Observable<void> {\n        this.clearToken()\n        const loginResponse$ = this.authProvider(email, password)\n          .pipe(\n            map((value) => {\n              this.setToken(value.accessToken)\n              const token = decode(value.accessToken)\n              return this.transformJwtToken(token)\n            }),\n            tap((status) => this.authStatus$.next(status)),\n            **this.getAndUpdateUserIfAuthenticated**\n          )\n        ...\n      }\n      ...\n    } \n    ```", "```js\n    **src/app/auth/auth.service.ts**\n    ...\n      protected readonly resumeCurrentUser$ = this.authStatus$.pipe(\n        this.getAndUpdateUserIfAuthenticated \n      ) \n    ```", "```js\n    **src/app/auth/auth.service.ts**\n    ...\n    constructor() {\n      super()\n      if (this.hasExpiredToken()) {\n        this.logout(true)\n      } else {\n        this.authStatus$.next(this.getAuthStatusFromToken())\n        // To load user on browser refresh,\n        // resume pipeline must activate on the next cycle\n        // Which allows for all services to constructed properly\n        setTimeout(() => this.resumeCurrentUser$.subscribe(), 0)\n      }\n    } \n    ```", "```js\n    **src/app/auth/auth-http-interceptor.ts**\n    import {\n      HttpEvent,\n      HttpHandler,\n      HttpInterceptor,\n      HttpRequest,\n    } from '@angular/common/http'\n    import { Injectable } from '@angular/core'\n    import { Router } from '@angular/router'\n    import { Observable, throwError } from 'rxjs'\n    import { catchError } from 'rxjs/operators'\n    import { AuthService } from './auth.service'\n    @Injectable()\n    export class AuthHttpInterceptor implements HttpInterceptor {\n      constructor(private authService: AuthService, private router: Router) {}\n      intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const jwt = this.authService.getToken()\n        const authRequest = req.clone({ setHeaders: { authorization: `Bearer ${jwt}` } })\n        return next.handle(authRequest).pipe(\n          catchError((err, caught) => {\n            if (err.status === 401) {\n              this.router.navigate(\n                ['/login'], { queryParams: {\n                  redirectUrl: this.router.routerState.snapshot.url},}\n              )\n            }\n            return throwError(err)\n          })\n        )\n      }\n    } \n    ```", "```js\n    **src/app/app.module.ts**\n      providers: [\n        ...\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: AuthHttpInterceptor,\n          multi: true,\n        },\n      ], \n    ```", "```js\n    **src/app/app-routing.modules.ts**\n    ...\n      { path: 'login', component: LoginComponent },\n      { path: 'login/:redirectUrl', component: LoginComponent },\n    ... \n    ```", "```js\n    **src/app/login/login.component.ts**\n    …\n    import { AuthService } from '../auth/auth.service'\n    import { Role } from '../auth/role.enum'\n    @Component({\n      selector: 'app-login',\n      templateUrl: 'login.component.html',\n      styles: [\n        `\n          .error {\n            color: red\n          }\n        `,\n        `\n          div[fxLayout] {\n            margin-top: 32px;\n          }\n        `,\n      ],\n    })\n    export class LoginComponent implements OnInit { \n      private subs = new SubSink()\n      loginForm: FormGroup\n      loginError = ''\n      redirectUrl: string\n      constructor(\n        private formBuilder: FormBuilder,\n        private authService: AuthService,\n        private router: Router,\n        private route: ActivatedRoute\n      ) {\n        this.subs.sink = route.paramMap.subscribe(\n          params => (this.redirectUrl = \n            params.get('redirectUrl') ?? ''\n          )\n        )\n      }\n      ngOnInit() {\n        this.authService.logout()\n        this.buildLoginForm()\n      }\n      buildLoginForm() {\n        this.loginForm = this.formBuilder.group({\n          email: ['', [Validators.required, Validators.email]],\n          password: ['', [\n            Validators.required,\n            Validators.minLength(8),\n            Validators.maxLength(50),\n          ]],\n        })\n      }\n      async login(submittedForm: FormGroup) {\n        this.authService\n          .login(\n            submittedForm.value.email,\n            submittedForm.value.password\n          )\n          .pipe(catchError(err => (this.loginError = err)))\n        this.subs.sink = combineLatest([\n          this.authService.authStatus$,\n          this.authService.currentUser$,\n        ])\n          .pipe(\n            filter(\n              ([authStatus, user]) =>\n                authStatus.isAuthenticated && user?._id !== ''\n            ),\n            tap(([authStatus, user]) => {\n              this.router.navigate([this.redirectUrl || '/manager'])\n            })\n          )\n          .subscribe()\n      } \n    } \n    ```", "```js\n    **src/app/login/login.component.html**\n    <div fxLayout=\"row\" fxLayoutAlign=\"center\">\n      <mat-card fxFlex=\"400px\">\n        <mat-card-header>\n          <mat-card-title>\n            <div class=\"mat-headline\">Hello, Limoncu!</div>\n          </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"login(loginForm)\" fxLayout=\"column\">\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\">\n              <mat-icon>email</mat-icon>\n              <mat-form-field fxFlex>\n                <input matInput placeholder=\"E-mail\" aria-label=\"E- mail\" formControlName=\"email\">\n                <mat-error *ngIf=\"loginForm.get('email')?.hasError('required')\">\n                  E-mail is required\n                </mat-error>\n                <mat-error *ngIf=\"loginForm.get('email')?.hasError('email')\">\n                  E-mail is not valid\n                </mat-error>\n              </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\">\n              <mat-icon matPrefix>vpn_key</mat-icon>\n              <mat-form-field fxFlex>\n                <input matInput placeholder=\"Password\" aria- label=\"Password\" type=\"password\" formControlName=\"password\">\n                <mat-hint>Minimum 8 characters</mat-hint>\n                <mat-error *ngIf=\"loginForm.get('password')?.hasError('required')\">\n                  Password is required\n                </mat-error>\n                <mat-error *ngIf=\"loginForm.get('password')?.hasError('minlength')\">\n                  Password is at least 8 characters long\n                </mat-error>\n                <mat-error *ngIf=\"loginForm.get('password')?.hasError('maxlength')\">\n                  Password cannot be longer than 50 characters\n                </mat-error>\n              </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" class=\"margin-top\">\n              <div *ngIf=\"loginError\" class=\"mat-caption error\">{{loginError}}</div>\n              <div class=\"flex-spacer\"></div>\n              <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"loginForm.invalid\">Login</button>\n            </div>\n          </form>\n        </mat-card-content>\n      </mat-card>\n    </div> \n    ```", "```js\n    **src/app/home/home.component.ts**\n      ...\n      template: `\n        <div *ngIf=\"displayLogin\">\n          <app-login></app-login>\n        </div>\n        <div *ngIf=\"!displayLogin\">\n          <span class=\"mat-display-3\">You get a lemon, you get a lemon, you get a lemon...</span>\n        </div>\n      `,\n    }) \n    export class HomeComponent {\n      displayLogin = true\n      constructor() {\n      }\n    } \n    ```", "```js\n    **src/app/home/home.component.simple.ts**\n    ...\n    import { AuthService } from '../auth/auth.service'\n    ...\n    export class HomeComponent { \n      constructor(**public** authService: AuthService) {}\n    } \n    ```", "```js\n    **src/app/home/home.component.ts**\n    ...\n      template: `\n        <div *ngIf= \n    \"(authService.authStatus$ | async)?.isAuthenticated; else doLogin\">\n          <div class=\"mat-display-4\">\n            This is LemonMart! The place where\n          </div>\n          <div class=\"mat-display-4\">\n            You get a lemon, you get a lemon, you get a lemon...\n          </div>\n          <div class=\"mat-display-4\">\n            Everybody gets a lemon.\n          </div>\n        </div>\n        <ng-template #doLogin>\n          <app-login></app-login>\n        </ng-template>  \n      `, \n    ```", "```js\n    **src/app/app.component.ts**\n    import { Component, OnInit } from '@angular/core'\n    import { AuthService } from './auth/auth.service'\n    ...\n    export class AppComponent implements OnInit { \n      constructor(..., **public authService: AuthService**) {\n      }\n      ngOnInit(): void {}\n      ...\n    } \n    ```", "```js\n     <mat-toolbar ...\n            ***ngIf=\"{**\n     **status: authService.authStatus$ | async,**\n     **user: authService.currentUser$ | async**\n     **} as auth;\"**> \n    ```", "```js\n    **src/app/app.component.ts**\n    <button ***ngIf=\"auth?.status?.isAuthenticated\"** ... > \n    ```", "```js\n    **src/app/app.component.ts**\n    styles: [\n    `\n      .image-cropper {\n        width: 40px;\n        height: 40px;\n        position: relative;\n        overflow: hidden;\n        border-radius: 50%;\n        margin-top: -8px;\n      }\n    `],\n    template: `\n      ...\n      <button\n        *ngIf=\"auth?.status?.isAuthenticated\"\n        mat-mini-fab\n        routerLink=\"/user/profile\"\n        matTooltip=\"Profile\"\n        aria-label=\"User Profile\"\n      >\n        <img *ngIf=\"auth?.user?.picture\" class=\"image-cropper\"\n          [src]=\"auth?.user?.picture\" />\n        <mat-icon *ngIf=\"!auth?.user?.picture\">account_circle</mat-icon>\n      </button> \n    ```", "```js\n    **src/app/common/validations.ts**\n    import { Validators } from '@angular/forms'\n    export const EmailValidation = [\n      Validators.required, Validators.email\n    ]\n    export const PasswordValidation = [\n      Validators.required,\n      Validators.minLength(8),\n      Validators.maxLength(50),\n    ] \n    ```", "```js\n    **src/app/login/login.component.ts**\n    import { EmailValidation, PasswordValidation } from '../common/validations'\n      ...\n        this.loginForm = this.formBuilder.group({\n          email: ['', EmailValidation],\n          password: ['', PasswordValidation],\n        }) \n    ```", "```js\n    **src/app/common/ui.service.ts**\n    @Injectable({\n      providedIn: 'root',\n    })\n    export class UiService {\n      constructor(private snackBar: MatSnackBar, private dialog: MatDialog) {}\n      showToast(message: string, action = 'Close', config?: MatSnackBarConfig) {\n        this.snackBar.open( message,\n        action,\n        config || { duration: 7000}\n        )\n      }\n    ...\n    } \n    ```", "```js\n    **app/common/simple-dialog.component.ts**\n    import { Component, Inject } from '@angular/core'\n    import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog'\n    @Component({\n      // prettier-ignore\n      template: `\n        <h2 mat-dialog-title>{{ data.title }}</h2>\n        <mat-dialog-content>\n          <p>{{ data.content }}</p>\n        </mat-dialog-content>\n        <mat-dialog-actions>\n          <span class=\"flex-spacer\"></span>\n          <button mat-button mat-dialog-close *ngIf=\"data.cancelText\">\n            {{ data.cancelText }}\n          </button>\n          <button mat-button mat-button-raised color=\"primary\" [mat-dialog-close]=\"true\"\n            cdkFocusInitial>\n            {{ data.okText }}\n          </button>\n        </mat-dialog-actions>\n      `\n    })\n    export class SimpleDialogComponent {\n      constructor(\n        public dialogRef: MatDialogRef<SimpleDialogComponent, boolean>,\n        @Inject(MAT_DIALOG_DATA) public data: any\n      ) {}\n    } \n    ```", "```js\n    **app/common/ui.service.ts**\n    ...\n    showDialog(\n      title: string,\n      content: string,\n      okText = 'OK',\n      cancelText?: string,\n      customConfig?: MatDialogConfig\n    ): Observable<boolean> {\n      const dialogRef = this.dialog.open(\n        SimpleDialogComponent,\n        customConfig || {\n          width: '300px',\n          data: { title, content, okText, cancelText },\n        }\n      )\n      return dialogRef.afterClosed()\n    } \n    ```", "```js\n    **src/app/app.module.ts**\n    @NgModule({\n      ...\n      bootstrap: [AppComponent],\n      **entryComponents: [SimpleDialogComponent],**\n    })\n    Export class AppModule {} \n    ```", "```js\n    **src/app/login/login.component.ts**\n    import { UiService } from '../common/ui.service'\n    ...\n    constructor(... , **private uiService: UiService**)\n      ...\n      async login(submittedForm: FormGroup) {\n        ...\n        tap(([authStatus, user]) => {\n          **this.uiService.showToast(**\n     **`Welcome ${user.fullName}! Role: ${user.role}`**\n     **)**\n          ...\n        })\n     ... \n    ```", "```js\n    **src/app/login/login.component.ts**\n    this.uiService.showDialog(\n      `Welcome ${user.fullName}!`, `Role: ${user.role}`\n    ) \n    ```", "```js\n    **src/app/app.component.ts**\n    styles: [\n      `\n        .app-container {\n          display: flex;\n          flex-direction: column;\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          left: 0;\n          right: 0;\n        }\n        .app-is-mobile .app-toolbar {\n          position: fixed;\n          z-index: 2;\n        }\n        .app-sidenav-container {\n          flex: 1;\n        }\n        .app-is-mobile .app-sidenav-container {\n          flex: 1 0 auto;\n        }\n        mat-sidenav {\n          width: 200px;\n        }\n        .image-cropper {\n          width: 40px;\n          height: 40px;\n          position: relative;\n          overflow: hidden;\n          border-radius: 50%;\n          margin-top: -8px;\n        }\n      `,\n    ], \n    ```", "```js\n    **src/app/app.component.ts**\n    import { MediaObserver } from '@angular/flex-layout'\n    export class AppComponent implements **OnInit, OnDestroy** {\n      **private subs = new SubSink()**\n     **opened: boolean**\n      constructor(\n        ...\n     **public media: MediaObserver**\n      ) {\n      ...\n      }\n      ngOnDestroy() {\n        this.subs.unsubscribe()\n      }\n      ngOnInit(): void {\n        throw new Error('Method not implemented.')\n      }\n    } \n    ```", "```js\n    **src/app/app.component.ts**\n      ngOnInit() {\n        this.subs.sink = combineLatest([\n          this.media.asObservable(),\n          this.authService.authStatus$,\n        ])\n          .pipe(\n            tap(([mediaValue, authStatus]) => {\n              if (!authStatus?.isAuthenticated) {\n                this.opened = false\n              } else {\n                if (mediaValue[0].mqAlias === 'xs') {\n                  this.opened = false\n                } else {\n                  this.opened = true\n                }\n              }\n            })\n          )\n          .subscribe()\n      } \n    ```", "```js\n    **src/app/app.component.ts**\n    ...\n    // prettier-ignore\n    template: `\n      **<div class=\"app-container\">**\n      <mat-toolbar color=\"primary\" fxLayoutGap=\"8px\"\n        **class=\"app-toolbar\"**\n        **[class.app-is-mobile]=\"media.isActive('xs')\"**\n        *ngIf=\"{\n          status: authService.authStatus$ | async,\n          user: authService.currentUser$ | async\n        } as auth;\"\n      >\n        <button *ngIf=\"auth?.status?.isAuthenticated\"\n          mat-icon-button **(click)=\"sidenav.toggle()\"**\n        >\n          <mat-icon>menu</mat-icon>\n        </button>\n        ...\n      </mat-toolbar>\n      **<mat-sidenav-container class=\"app-sidenav-container\">**\n        **<mat-sidenav #sidenav**\n          **[mode]=\"media.isActive('xs') ? 'over' : 'side'\"**\n          **[fixedInViewport]=\"media.isActive('xs')\"**\n          **fixedTopGap=\"56\" [(opened)]=\"opened\"**\n        **>**\n          **<app-navigation-menu></app-navigation-menu>**\n     **</mat-sidenav>**\n     **<mat-sidenav-content>**\n          <router-outlet></router-outlet>\n        **</mat-sidenav-content>**\n     **</mat-sidenav-container>**\n     **</div>**\n    `, \n    ```", "```js\n    **src/app/navigation-menu/navigation-menu.component.ts**\n    ...\n      styles: [\n        `\n          .active-link {\n            font-weight: bold;\n            border-left: 3px solid green;\n          }\n        `,\n      ],\n      template: `\n        <mat-nav-list>\n          <h3 matSubheader>Manager</h3>\n          <a mat-list-item\n            routerLinkActive=\"active-link\"\n            routerLink=\"/manager/users\">\n              Users\n          </a>\n          <a mat-list-item\n            routerLinkActive=\"active-link\"\n            routerLink=\"/manager/receipts\">\n              Receipts\n          </a>\n          <h3 matSubheader>Inventory</h3>\n          <a mat-list-item\n            routerLinkActive=\"active-link\"\n            routerLink=\"/inventory/stockEntry\">\n              Stock Entry\n          </a>\n          <a mat-list-item\n            routerLinkActive=\"active-link\"\n            routerLink=\"/inventory/products\">\n              Products\n          </a>\n          <a mat-list-item\n            routerLinkActive=\"active-link\"\n            routerLink=\"/inventory/categories\">\n              Categories\n          </a>\n          <h3 matSubheader>Clerk</h3>\n          <a mat-list-item\n            routerLinkActive=\"active-link\"\n            routerLink=\"/pos\">\n              POS\n          </a>\n        </mat-nav-list>\n      `,\n    ... \n    ```", "```js\n**app/src/login/login.component.ts**\nasync login(submittedForm: FormGroup) {\n  ...\n    this.router.navigate([\n      this.redirectUrl ||\n      **this.homeRoutePerRole(user.role as Role)**\n    ])\n  ...\n}\n**private homeRoutePerRole(role: Role) {**\n **switch (role) {**\n **case Role.Cashier:**\n **return '/pos'**\n **case Role.Clerk:**\n **return '/inventory'**\n **case Role.Manager:**\n **return '/manager'**\n **default:**\n **return '/user/profile'**\n **}**\n**}** \n```", "```js\n    **src/app/auth/auth-guard.service.ts**\n    import { Injectable } from '@angular/core'\n    import {\n      ActivatedRouteSnapshot,\n      CanActivate,\n      CanActivateChild,\n      CanLoad,\n      Route,\n      Router,\n      RouterStateSnapshot,\n    } from '@angular/router'\n    import { Observable } from 'rxjs'\n    import { map, take } from 'rxjs/operators'\n    import { UiService } from '../common/ui.service'\n    import { Role } from './auth.enum'\n    import { AuthService } from './auth.service'\n    @Injectable({\n      providedIn: 'root',\n    })\n    export class AuthGuard implements CanActivate, CanActivateChild, CanLoad {\n      constructor(\n        protected authService: AuthService,\n        protected router: Router,\n        private uiService: UiService\n      ) {}\n      canLoad(route: Route):\n        boolean | Observable<boolean> | Promise<boolean> {\n          return this.checkLogin()\n      }\n      canActivate(\n        route: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot\n      ): boolean | Observable<boolean> | Promise<boolean> {\n        return this.checkLogin(route)\n      }\n      canActivateChild(\n        childRoute: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot\n      ): boolean | Observable<boolean> | Promise<boolean> {\n        return this.checkLogin(childRoute)\n      }\n      protected checkLogin(route?: ActivatedRouteSnapshot):\n        Observable<boolean> {\n        return this.authService.authStatus$.pipe(\n          map((authStatus) => {\n            const roleMatch = this.checkRoleMatch(\n              authStatus.userRole, route\n            )\n            const allowLogin = authStatus.isAuthenticated && roleMatch\n            if (!allowLogin) {\n              this.showAlert(authStatus.isAuthenticated, roleMatch)\n              this.router.navigate(['login'], {\n                queryParams: {\n                  redirectUrl: this.getResolvedUrl(route),\n                },\n              })\n            }\n            return allowLogin\n          }),\n          take(1) // complete the observable for the guard to work\n        )\n      }\n      private checkRoleMatch(\n        role: Role,\n        route?: ActivatedRouteSnapshot\n      ) {\n        if (!route?.data?.expectedRole) {\n          return true\n        }\n        return role === route.data.expectedRole\n      }\n      private showAlert(isAuth: boolean, roleMatch: boolean) {\n        if (!isAuth) {\n          this.uiService.showToast('You must login to continue')\n        }\n        if (!roleMatch) {\n          this.uiService.showToast(\n            'You do not have the permissions to view this resource'\n          )\n        }\n      }\n      getResolvedUrl(route?: ActivatedRouteSnapshot): string {\n        if (!route) {\n          return ''\n        }\n        return route.pathFromRoot\n          .map((r) => r.url.map((segment) => segment.toString())\n          .join('/'))\n          .join('/')\n          .replace('//', '/')\n      }\n    } \n    ```", "```js\n    **src/app/app-routing.module.ts**\n    ...\n    {\n      path: 'manager',\n      loadChildren: () => import('./manager/manager.module')\n        .then((m) => m.ManagerModule), \n      **canLoad: [AuthGuard],**\n    },\n    ... \n    ```", "```js\n    **src/app/user/user-routing.module.ts**\n    ...\n    { \n      path: 'profile', component: ProfileComponent, \n      **canActivate: [AuthGuard]** \n    },\n    ... \n    ```", "```js\n    **src/app/mananger/manager-routing.module.ts**\n    ...\n      {\n        path: 'home',\n        component: ManagerHomeComponent,\n        **canActivate: [AuthGuard],**\n     **data: {**\n     **expectedRole: Role.Manager,**\n     **},**\n      },\n      {\n        path: 'users',\n        component: UserManagementComponent,\n        **canActivate: [AuthGuard],**\n     **data: {**\n     **expectedRole: Role.Manager,**\n     **},**\n      },\n      {\n        path: 'receipts',\n        component: ReceiptLookupComponent,\n        **canActivate: [AuthGuard],**\n     **data: {**\n     **expectedRole: Role.Manager,**\n     **},**\n      },\n    ... \n    ```", "```js\n    **src/app/common/common.testing.ts**\n    import { autoSpyObj } from 'angular-unit-test-helper'\n    export const commonTestingProviders: any[] = [\n      { provide: AuthService, useValue: autoSpyObj(AuthService) },\n      { provide: UiService, useValue: autoSpyObj(UiService) }, \n    ] \n    ```", "```js\n    **src/app/app.component.spec.ts**\n    ...\n      TestBed.configureTestingModule({\n        **imports: commonTestingModules,**\n        providers: commonTestingProviders.concat([\n          **{ provide: MediaObserver, useClass: MediaObserverFake },**\n    ... \n    ```", "```js\n    **src/app/login/login.component.spec.ts**\n    ...\n      TestBed.configureTestingModule({\n        **imports: commonTestingModules,**\n     **providers: commonTestingProviders,**\n        declarations: [LoginComponent],\n      }).compileComponents() \n    ```", "```js\n    **src/app/auth/auth.service.spec.ts**\n    ...\n    TestBed.configureTestingModule({\n      **imports: [HttpClientTestingModule],**\n     **providers: [AuthService,** \n     **{ provide: UiService, useValue: autoSpyObj(UiService) }],**\n    }) \n    ```", "```js\n    $ npm install -g firebase-tools \n    ```", "```js\n    $ firebase login \n    ```", "```js\n    $ firebase init \n    ```", "```js\n    $ npx ng build --prod \n    ```", "```js\n    $ npm run build:prod \n    ```", "```js\n    $ firebase deploy \n    ```", "```js\n$ npx ng add @angular/fire \n```", "```js\n    $ npx ng g s auth/firebaseAuth --lintFix \n    ```", "```js\n    **src/app/auth/auth.firebase.service.ts**\n    import { Injectable } from '@angular/core'\n    import { AngularFireAuth } from '@angular/fire/auth'\n    import { User as FirebaseUser } from 'firebase'\n    import { Observable, Subject } from 'rxjs'\n    import { map } from 'rxjs/operators'\n    import { IUser, User } from '../user/user/user'\n    import { Role } from './auth.enum'\n    import {\n      AuthService,\n      IAuthStatus,\n      IServerAuthResponse,\n      defaultAuthStatus,\n    } from './auth.service'\n    interface IJwtToken {\n      email: string\n      iat: number\n      exp: number\n      sub: string\n    }\n    @Injectable()\n    export class FirebaseAuthService extends AuthService {\n      constructor(private afAuth: AngularFireAuth) {\n        super()\n      }\n      protected authProvider(\n        email: string,\n        password: string\n      ): Observable<IServerAuthResponse> {\n        const serverResponse$ = new Subject<IServerAuthResponse>()\n        this.afAuth.signInWithEmailAndPassword(email, password).then(\n          (res) => {\n            const firebaseUser: FirebaseUser | null = res.user\n            firebaseUser?.getIdToken().then(\n              (token) => serverResponse$.next(\n                { accessToken: token } as IServerAuthResponse\n              ),\n              (err) => serverResponse$.error(err)\n            )\n          },\n          (err) => serverResponse$.error(err)\n        )\n        return serverResponse$\n      }\n      protected transformJwtToken(token: IJwtToken): IAuthStatus {\n        if (!token) {\n          return defaultAuthStatus\n        }\n        return {\n          isAuthenticated: token.email ? true : false,\n          userId: token.sub,\n          userRole: Role.None,\n        }\n      }\n      protected getCurrentUser(): Observable<User> {\n        return this.afAuth.user.pipe(map(this.transformFirebaseUser))\n      }\n      private transformFirebaseUser(firebaseUser: FirebaseUser): User\n      {\n        if (!firebaseUser) {\n          return new User()\n        }\n        return User.Build({\n          name: {\n            first: firebaseUser?.displayName?.split(' ')[0] ||\n              'Firebase',\n            last: firebaseUser?.displayName?.split(' ')[1] || 'User',\n          },\n          picture: firebaseUser.photoURL,\n          email: firebaseUser.email,\n          _id: firebaseUser.uid,\n          role: Role.None,\n        } as IUser)\n      }\n      logout() {\n        if (this.afAuth) {\n          this.afAuth.signOut()\n        }\n        this.clearToken()\n        this.authStatus$.next(defaultAuthStatus)\n      }\n    } \n    ```", "```js\n    **src/app/app.module.ts**\n      {\n        provide: AuthService,\n        useClass: **FirebaseAuthService**,\n      }, \n    ```", "```js\n    **src/app/auth/auth.firebase.service.spec.ts**\n    import { AngularFireAuth } from '@angular/fire/auth'\n    import { UiService } from '../common/ui.service'\n    import { FirebaseAuthService } from './auth.firebase.service'\n    TestBed.configureTestingModule({\n      imports: [**HttpClientTestingModule**],\n      providers: [\n        **FirebaseAuthService,**\n     **{ provide: UiService, useValue: autoSpyObj(UiService) },**\n     **{ provide: AngularFireAuth,** \n     **useValue: autoSpyObj(AngularFireAuth)** \n     **},**\n      ],\n    }) \n    ```", "```js\n    **src/app/auth/auth.enum.ts**\n    export enum AuthMode {\n      InMemory = 'In Memory',\n      CustomServer = 'Custom Server',\n      Firebase = 'Firebase',\n    } \n    ```", "```js\n    **src/environments/environment.ts**\n    ...\n      authMode: AuthMode.**InMemory**,\n    ...\n    **src/environments/environment.prod.ts**\n    ...\n      authMode: AuthMode.**Firebase**,\n    ... \n    ```", "```js\n    **src/app/auth/auth.factory.ts**\n    export function authFactory(afAuth: AngularFireAuth) {\n      switch (environment.authMode) {\n        case AuthMode.InMemory:\n          return new InMemoryAuthService()\n        case AuthMode.Firebase:\n          return new FirebaseAuthService(afAuth)\n        case AuthMode.CustomServer:\n          throw new Error('Not yet implemented')\n      }\n    } \n    ```", "```js\n    **src/app/app.module.ts**\n      providers: [\n        {\n          provide: AuthService,\n          **useFactory: authFactory,**\n     **deps: [AngularFireAuth],**\n        }, \n    ```"]