- en: Up and Running with Angular and TypeScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular和TypeScript快速上手
- en: The previous chapters set out to explain the basic and most common features
    of TypeScript. These features will be used extensively while working on Angular
    projects. TypeScript is completely optional when it comes to building Angular
    projects but, trust me, just using JavaScript is not a route you will want to
    take after experiencing how TypeScript simplifies the development story.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 前几章旨在解释TypeScript的基本和最常见的特性。在开发Angular项目时，这些特性将被广泛使用。在构建Angular项目时，TypeScript是完全可选的，但相信我，只使用JavaScript并不是你想要经历TypeScript简化开发过程后的选择。
- en: 'This chapter introduces us to the exciting part of this book--building Angular
    apps with TypeScript. We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了本书中令人兴奋的部分--使用TypeScript构建Angular应用程序。本章将涵盖以下主题：
- en: Setting up Angular with TypeScript
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用TypeScript设置Angular
- en: Understanding component basics
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解组件基础知识
- en: Learning about Angular's template syntax
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习关于Angular的模板语法
- en: Some data binding magic
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些数据绑定魔法
- en: All these exciting topics will be backed with good examples, so you can see
    for yourself how these things work. Let's get started.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些令人兴奋的主题都将有很好的示例支持，这样你就可以亲自看到这些东西是如何工作的。让我们开始吧。
- en: Setting up Angular and TypeScript
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular和TypeScript设置
- en: Angular is not such a difficult framework to get started with. Unfortunately,
    from a beginner's perspective, the ecosystem may overwhelm you with lots and lots
    of terms. Most of these terms represent the tools that make Angular work, and
    not Angular itself. Webpack, linters, TypeScript, typings, build processes, and
    so on, are some confusing terms that may turn you off at the beginning of your
    Angular journey.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Angular并不是一个难以入门的框架。不幸的是，从初学者的角度来看，生态系统可能会用大量术语压倒你。这些术语大多代表了使Angular工作的工具，而不是Angular本身。Webpack、linters、TypeScript、typings、构建过程等等，都是一些令人困惑的术语，可能会在你开始Angular之旅的时候让你望而却步。
- en: For this reason, the Angular team built an all-in-one tool to help you pay less
    attention to those surrounding tools but more attention to building your project.
    It's known as the Angular CLI, and with just a few CLI commands you're building
    your app. The time spent on managing JavaScript tools these days is alarming,
    and you don't want to get caught up in that mess as a beginner (or even a professional).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Angular团队构建了一个全能工具，帮助你更少地关注周围的工具，而更多地关注构建你的项目。它被称为Angular CLI，只需几个CLI命令，你就可以构建你的应用程序。如今花在管理JavaScript工具上的时间令人担忧，作为一个初学者（甚至是专业人士），你不想陷入那样的混乱中。
- en: 'To install the CLI, you need to run the following command with npm:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装CLI，你需要用npm运行以下命令：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When the installation is complete, you should see the following npm log in
    the console:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当安装完成时，你应该在控制台中看到以下npm日志：
- en: '![](assets/946e872d-eee7-4441-a0a9-c0d0f012e0f4.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/946e872d-eee7-4441-a0a9-c0d0f012e0f4.jpg)'
- en: 'You can check whether the installation was successful by running the `help`
    or `version` commands:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行`help`或`version`命令来检查安装是否成功。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The help command will show a list of commands available via the CLI tool, while
    the version command will show the currently installed version. None of them will
    print the aforementioned information if the installation was unsuccessful.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助命令将显示通过CLI工具可用的命令列表，而版本命令将显示当前安装的版本。如果安装不成功，这些命令都不会打印上述信息。
- en: 'Here are the printed log details when you run the `help` command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行`help`命令时，以下是打印的日志详情：
- en: '![](assets/bf7247b9-de44-45a4-a0fb-de4de21b74de.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bf7247b9-de44-45a4-a0fb-de4de21b74de.jpg)'
- en: 'Running the version command shows the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 运行版本命令会显示以下截图：
- en: '![](assets/dc697db8-1ae7-48eb-bc71-868ff9c7c23f.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dc697db8-1ae7-48eb-bc71-868ff9c7c23f.jpg)'
- en: Creating a new Angular project
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的Angular项目
- en: 'With the CLI installed, you can now start using it on your project. The first
    thing, of course, is to create one. The CLI''s `new` command is used just once
    in a project to generate the starter files and configuration that the project
    needs:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了CLI后，您现在可以在项目中开始使用它。当然，首先要做的是创建一个。CLI的`new`命令只在项目中使用一次，用于生成项目需要的起始文件和配置：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The command does not just create a project for you; it also installs the npm
    dependencies, so you do not have to run the install command before getting started:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令不仅为您创建项目；它还安装了npm依赖项，因此您无需在开始之前运行安装命令：
- en: '![](assets/7ec491c8-5cfc-4cd4-891b-e99e4ad916ab.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7ec491c8-5cfc-4cd4-891b-e99e4ad916ab.jpg)'
- en: 'Navigate right to the root of the folder and run the `serve` command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 直接导航到文件夹的根目录并运行`serve`命令：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You will get the following output after running the command, which shows that
    your app is running successfully and where you can access it. It also shows bundled
    files, including styles and scripts. Note that there are no TypeScript files here;
    everything has been converted to JavaScript for the browser to understand:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令后，您将获得以下输出，显示您的应用程序成功运行的位置以及您可以访问它的位置。它还显示了捆绑文件，包括样式和脚本。请注意，这里没有TypeScript文件；一切都已转换为JavaScript，以便浏览器理解：
- en: '![](assets/91490cf5-36b9-4f6b-9033-5a3761714509.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/91490cf5-36b9-4f6b-9033-5a3761714509.png)'
- en: 'You should see your shiny app running at `localhost:4200`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在`localhost:4200`看到您闪亮的应用程序正在运行：
- en: '![](assets/95e887a3-3cac-4afb-bd2b-c0fa550a5de1.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/95e887a3-3cac-4afb-bd2b-c0fa550a5de1.png)'
- en: Project structure
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目结构
- en: 'Angular generates a lot of helper files to facilitate testing, the build process,
    package management, and so on. You can build a successful project without ever
    caring about what these files do. Hence, we are just going to show a few of the
    files that are important for us to get started:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Angular生成了许多辅助文件，以便测试、构建过程、包管理等。您可以成功构建一个项目，而不必关心这些文件的作用。因此，我们只会展示一些对我们开始很重要的文件：
- en: '![](assets/865e8674-9ca1-4184-9a15-976a45e428c3.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/865e8674-9ca1-4184-9a15-976a45e428c3.png)'
- en: We should be concerned about the `src` directory for now. That's where our project
    files (components, services, templates, and so on) will live.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该关注`src`目录。这就是我们的项目文件（组件、服务、模板等）将存放的地方。
- en: Generating files
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成文件
- en: 'You can add more TypeScript files and templates manually, but it is more effective
    to do so with the CLI tool. This is because the CLI tool not only creates files
    but also generates starter snippets to represent the kind of file you are trying
    to create. For example, let''s create a quote component:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以手动添加更多的TypeScript文件和模板，但使用CLI工具更有效。这是因为CLI工具不仅创建文件，还生成了起始片段来表示您尝试创建的文件类型。例如，让我们创建一个引用组件：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is what the component command looks like with some of the generated codes
    and files:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是组件命令的样子，其中包含一些生成的代码和文件：
- en: '![](assets/d676ed0c-a41f-42c2-93ce-3a4bc118c0a6.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d676ed0c-a41f-42c2-93ce-3a4bc118c0a6.png)'
- en: 'The image comprises of the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 该图包括以下内容：
- en: The CLI output of the generation process.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成过程的CLI输出。
- en: The generated component, template, CSS, and test files.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成的组件、模板、CSS和测试文件。
- en: The TypeScript component.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TypeScript组件。
- en: 'The CLI can be used to generate other Angular/TypeScript building blocks, not
    just components. We won''t try it out right now; we will do so while discussing
    it in topics in upcoming chapters. The following table is to generate commands
    as seen on the project''s Github readme:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: CLI可以用来生成其他Angular/TypeScript构建模块，而不仅仅是组件。我们现在不会尝试它；我们将在后续章节中讨论时再这样做。以下表格是在项目的Github自述文件中看到的生成命令：
- en: '| **Scaffold** | **Usage** |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| **脚手架** | **用法** |'
- en: '| Component | `ng g component my-new-component` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 组件 | `ng g component my-new-component` |'
- en: '| Directive | `ng g directive my-new-directive` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 指令 | `ng g directive my-new-directive` |'
- en: '| Pipe | `ng g pipe my-new-pipe` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 管道 | `ng g pipe my-new-pipe` |'
- en: '| Service | `ng g service my-new-service` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 服务 | `ng g service my-new-service` |'
- en: '| Class | `ng g class my-new-class` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 类 | `ng g class my-new-class` |'
- en: '| Guard | `ng g guard my-new-guard` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 守卫 | `ng g guard my-new-guard` |'
- en: '| Interface | `ng g interface my-new-interface` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 接口 | `ng g interface my-new-interface` |'
- en: '| Enum | `ng g enum my-new-enum` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 枚举 | `ng g enum my-new-enum` |'
- en: '| Module | `ng g module my-module` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 模块 | `ng g module my-module` |'
- en: Basics concepts
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本概念
- en: We will delve into different topics in this book, but it is a good idea to roughly
    explain what is going on for the sake of context.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书中深入探讨不同的主题，但大致解释正在发生的事情是个好主意，以便有上下文。
- en: Components
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件
- en: Your curiosity may have led you into opening `app.component.ts` or `quote.component.ts`.
    Don't worry if they seemed overwhelming; we will discuss components extensively
    in this book (especially, in the next two chapters).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您的好奇心可能会导致您打开`app.component.ts`或`quote.component.ts`。如果它们看起来令人不知所措，不要担心；我们将在本书中广泛讨论组件（特别是在接下来的两章中）。
- en: 'Components are the heart of any Angular project. They are the core building
    blocks, and every other feature is just meant to support components. The files
    mentioned contain Angular components written in TypeScript. This is what `app.component.ts`
    looks like:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 组件是任何Angular项目的核心。它们是核心构建模块，其他所有功能都只是为了支持组件。提到的文件包含用TypeScript编写的Angular组件。这就是`app.component.ts`的样子：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A component is a decorated class with a template. The type of decoration is
    what matters, in this case, a `Component` decorator. Remember from the previous
    chapter that decorators are just functions that extend the feature they are decorating.
    That is what is happening in the preceding example.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 组件是带有模板的装饰类。装饰的类型很重要，在这种情况下是`Component`装饰器。从前一章中记得装饰器只是扩展它们装饰的功能的函数。这就是前面例子中发生的事情。
- en: 'First, we import this decorator from Angular''s core module, `@angular/core`.
    We then place the decorator right above our `AppComponent` class. The decorator
    takes a JavaScript object as its argument to describe the component. The object
    contains the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从Angular的核心模块`@angular/core`中导入这个装饰器。然后我们将装饰器放在我们的`AppComponent`类的正上方。装饰器以一个JavaScript对象作为其参数来描述组件。该对象包含以下内容：
- en: '`selector`: This is what the component will be identified as when it is called
    in any part of the app. Because this component is the entry point of your app,
    it will be used directly in the body by including its selector:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selector`：这是组件在应用程序的任何部分中被调用时将被识别为的内容。因为这个组件是您的应用程序的入口点，它将直接在body中使用，包括其选择器：'
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`templateUrl`: Components render a template to the view. We need a way to tell
    the component which template to render. This is possible via the `template` or
    `templateUrl` property. The `template`property takes a string of HTML content
    while `templateUrl` takes a URL to the template HTML file.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templateUrl`：组件将模板呈现到视图中。我们需要一种方法来告诉组件要呈现哪个模板。这可以通过`template`或`templateUrl`属性实现。`template`属性接受HTML内容的字符串，而`templateUrl`接受模板HTML文件的URL。'
- en: '`styleUrls`: This is an array of style Urls that are applied to the defined
    template.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`styleUrls`：这是应用于定义模板的样式URL的数组。'
- en: The class that is the actual component (and is being decorated) becomes the
    home for properties and methods that are associated with this component. All these
    work together as one, to make a reusable feature called a component.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 实际组件的类（并且正在被装饰）成为与该组件相关的属性和方法的主页。所有这些一起作为一个整体，以创建一个可重用的功能，称为组件。
- en: 'The quote component looks very much alike:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 引用组件看起来非常相似：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The only obvious difference is that it implements the `OnInit` interface, which
    has an`ngOnInit` method that the class must implement. This method is known as
    a lifecycle hook, which we will discuss soon.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一明显的区别是它实现了`OnInit`接口，该接口具有一个`ngOnInit`方法，该方法类必须实现。这个方法被称为生命周期钩子，我们很快会讨论它。
- en: Templates
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板
- en: 'Templates are just regular HTML files, though supercharged with interpolation
    and directives. The following is the current content of `app.component.html`,
    which is the template for `AppComponent`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 模板只是常规的HTML文件，但通过插值和指令进行了增强。以下是`app.component.html`的当前内容，这是`AppComponent`的模板：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see, it''s just the usual HTML. One thing might seem unfamiliar,
    though:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这只是普通的HTML。不过有一件事可能看起来不太熟悉：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `title` text wrapped with double curly braces may confuse you. This is
    called interpolation. The `title` value is resolved at runtime based on the value
    of a property on the component''s class. Don''t forget we have a title property
    with the value, `app`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 用双大括号括起来的`title`文本可能会让您感到困惑。这被称为插值。`title`值是根据组件类上的属性值在运行时解析的。不要忘记我们有一个值为`app`的title属性：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Apart from binding values like this, you can perform a lot of amazing tasks
    on the template. They include the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 除了像这样绑定值之外，您还可以在模板上执行许多令人惊奇的任务。它们包括以下内容：
- en: Property and event binding
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性和事件绑定
- en: Two-way binding
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双向绑定
- en: Iteration and conditions
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迭代和条件
- en: Style and class binding
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 样式和类绑定
- en: Simple expressions
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单表达式
- en: Pipes and directives
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道和指令
- en: Rather than feeding you with all the boring stuff related to templates and template
    syntax, what we should do is discuss them and how they are related to other upcoming
    topics. This way, you can see them live in examples, which should be more fun.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 与其向您提供与模板和模板语法相关的所有无聊的东西，我们应该讨论它们以及它们与其他即将到来的主题的关系。这样，您可以在示例中看到它们的实际应用，这应该更有趣。
- en: Component styles
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件样式
- en: Components parade reusability a lot. In fact, that's the first answer you get
    when you ask about the benefits of using the component architecture. This is the
    reason why templates and styles are scoped to the component rather than littering
    the app's environment with heavy HTML and CSS.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 组件大量地展示了可重用性。实际上，这是您询问使用组件架构的好处时得到的第一个答案。这就是为什么模板和样式被限定在组件范围内，而不是用沉重的HTML和CSS来污染应用程序的环境的原因。
- en: 'The `styleUrls` property in the component''s decorator argument takes an array
    of URLs pointing to the styles you want to apply to the component. Most of the
    time, you just need a single file; therefore, the array will only contain a single
    URL item, in our case, `app.component.css`. It''s currently empty but we can carry
    out an experiment with it:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 组件装饰器参数中的`styleUrls`属性接受一个指向要应用于组件的样式的URL数组。大多数情况下，您只需要一个文件；因此数组将只包含一个URL项，在我们的情况下是`app.component.css`。它目前是空的，但我们可以对其进行实验：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `*` selector is supposed to select everything in the document. So, we say,
    *select every element and set the background to red*. You may actually be surprised
    at the result:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`*`选择器应该选择文档中的所有内容。因此，我们说，*选择每个元素并将背景设置为红色*。您可能会对结果感到惊讶：'
- en: '![](assets/772e08c8-0079-46f0-8d01-d142ef190006.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/772e08c8-0079-46f0-8d01-d142ef190006.png)'
- en: Notice how the actual body tag is not styled, which may not make any outright
    sense because you used the global selector. Component styles are scoped to the
    component; therefore the styles cannot leak to the containing parent. This is
    why the body remains white and the contents in the `AppComponent` template are
    red.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 注意实际的body标签没有样式，这可能并不直观，因为您使用了全局选择器。组件样式被限定在组件内部；因此样式不能泄漏到包含父级。这就是为什么body保持为白色，而`AppComponent`模板中的内容为红色的原因。
- en: Modules
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块
- en: Components are for building small reusable features in your product. They work
    together with concepts such as services, directives, pipes, and so on, to make
    a functional feature. In some situations, you may want these features to be moved
    around from one project to another or even between different sections of a huge
    project. Therefore, you need a way to collect them together as a feature. This
    is exactly what modules do.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 组件用于构建产品中的小型可重用功能。它们与服务、指令、管道等概念一起工作，以实现功能特性。在某些情况下，您可能希望将这些功能从一个项目移动到另一个项目，甚至在一个庞大的项目的不同部分之间移动。因此，您需要一种将它们收集在一起作为功能的方法。这正是模块所做的。
- en: 'Modules are classes decorated with the `NgModule` decorator. The decorator
    takes an object, just like the component decorator. This object describes all
    the feature members that you need to associate to this module. The possible members
    (but not all members) are as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是用`NgModule`装饰器装饰的类。装饰器接受一个对象，就像组件装饰器一样。这个对象描述了你需要关联到这个模块的所有功能成员。可能的成员（但不是所有成员）如下：
- en: '**Declarations**: These include components, directives, and pipes'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**声明**: 这些包括组件、指令和管道'
- en: '**Providers**: These include injectable services'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提供者**: 这些包括可注入的服务'
- en: '**Imports**: These include other imported modules'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导入**: 这些包括其他导入的模块'
- en: '**Bootstrap**: This is the entry component to start the app with'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引导**: 这是启动应用程序的入口组件'
- en: 'We have one module already, which is `AppModule`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有一个模块，即`AppModule`：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s take some time to describe the items in this module:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间描述一下这个模块中的项目：
- en: '**Declarations**: `AppComponent` and `QuoteComponent` are components. Therefore,
    they fall into this category. One amazing thing that the Angular CLI did after
    generating the quote component was to add it to the declarations automatically
    for us. If not, even when you use the component selector somewhere in the app,
    the quote component contents will still not be displayed, and you will get an
    error in the console.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**声明**: `AppComponent`和`QuoteComponent`是组件。因此，它们属于这个类别。在生成引言组件后，Angular CLI做的一件了不起的事情是自动将其添加到声明中。如果没有这样做，即使在应用程序的某个地方使用组件选择器，引言组件的内容仍然不会显示，并且您将在控制台中收到错误。'
- en: '**Imports**: `BrowserModule` is a module. It is a module that contains common
    browser tasks, especially directives for templates, such as `*ngFor` and more.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导入**: `BrowserModule`是一个模块。它是一个包含常见浏览器任务的模块，特别是用于模板的指令，如`*ngFor`等。'
- en: '**Providers**: Since we don''t have any services yet, the providers can be
    omitted or the array can be left empty.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提供者**: 由于我们还没有任何服务，可以省略提供者，或者将数组留空。'
- en: '**Bootstrap**: The app module is our entry module. Therefore, it should define
    the entry component, which is `AppComponent`. This is what the `bootstrap` property
    does.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引导**: 应用程序模块是我们的入口模块。因此，它应该定义入口组件，即`AppComponent`。这就是`bootstrap`属性的作用。'
- en: Unit testing
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: Although we won't cover testing until the last chapter of this book, it pays
    to make testing a habit. This is why we are going to explore the simplicity of
    testing components here.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们不会在本书的最后一章之前涵盖测试，但养成测试的习惯是值得的。这就是为什么我们要在这里探索测试组件的简单性。
- en: Basically, Angular provides an abstraction layer for testing your components
    with the help of `TestBed`. You don't need to run your entire application before
    you can see whether your components behave as planned. A simple test comes bundled
    with the CLI scaffold for our app component. It can be found adjacent to the file
    (which is a common and good practice) as `app.component.spec.ts`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，Angular提供了一个测试组件的抽象层，借助`TestBed`。在你能看到你的组件是否按计划运行之前，你不需要运行整个应用程序。一个简单的测试已经与我们的应用组件的CLI脚手架捆绑在一起。它可以在文件旁边找到（这是一个常见且良好的做法），如`app.component.spec.ts`。
- en: 'Let''s view the contents of this file:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看这个文件的内容：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: First, we import the testing utilities from `@angular/core/testing` and the
    component to be tested, that is,`AppComponent`. A `describe` block, which houses
    the sets of test suites for a given feature (`AppComponent`), is also created
    but left empty.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从`@angular/core/testing`导入测试工具和要测试的组件，即`AppComponent`。还创建了一个`describe`块，其中包含了给定功能（`AppComponent`）的测试套件集，但是为空的。
- en: 'Before we start writing the suites, we need to configure a temporary testing
    module for the component. This is done in a `beforeEach` block:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写测试套件之前，我们需要为组件配置一个临时测试模块。这是在`beforeEach`块中完成的：
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the actual app, we could afford the luxury of creating `AppModule` where
    `AppComponent` lives as a declaration. Here, we just need a simple module with
    `AppComponent` on it, thanks to the`configureTestingModule` module of `TestBed` making
    this possible.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用中，我们可以创建`AppModule`，其中`AppComponent`作为声明。在这里，我们只需要一个简单的模块，其中包含`AppComponent`，这要归功于`TestBed`的`configureTestingModule`模块使这成为可能。
- en: 'Next, we can start writing the test suites for whatever scenario we want to
    examine. First, let''s check whether `AppComponent` is a thing:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以开始编写对我们想要检查的任何场景的测试套件。首先，让我们检查`AppComponent`是否存在：
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We first try to create an instance of the component with `componentInstance`
    after creating the component itself with`createComponent()`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`createComponent()`创建组件本身之后，我们首先尝试使用`componentInstance`创建组件的实例。
- en: The actual check is done when we assert with `expect`to see whether the component
    exists with `toBeTruthy()` .
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`expect`断言来查看组件是否存在时，实际的检查是完成的，使用`toBeTruthy()`。
- en: 'We can also check the content of the component''s properties:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以检查组件属性的内容：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With `app` being an instance of the component, you can access the properties
    and methods on this instance. We just tested to see whether the initial value
    of `app.title` is equal to `app`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`app`作为组件的一个实例，您可以访问此实例上的属性和方法。我们刚刚测试了`app.title`的初始值是否等于`app`。
- en: 'The last test suite actually checks the DOM for values:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的测试套件实际上检查了值的DOM：
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note that `detectChanges` is called in this suite. This kicks off binding, if
    any, on the template. Then, instead of creating an instance, we grab hold of the
    compiled element, query it for the `h1` tag, and check whether the text content
    of the tag contains `Welcome to app`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在这个测试套件中调用了`detectChanges`。这会启动模板上的绑定（如果有的话）。然后，我们不是创建一个实例，而是抓住编译后的元素，查询它的`h1`标签，并检查标签的文本内容是否包含`Welcome
    to app`。
- en: 'To run these tests, execute the following command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行这些测试，请执行以下命令：
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This should start Karma, an isolated test environment. Your tests will run
    and the following will be printed to the CLI:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该启动Karma，一个隔离的测试环境。您的测试将运行，并且以下内容将被打印到CLI：
- en: '![](assets/f8bea96f-951b-425b-8dfe-e478a1ca9699.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f8bea96f-951b-425b-8dfe-e478a1ca9699.png)'
- en: You may be wondering why the last line says `4` tests instead of `3`; remember
    that the quote component we generated had a single test suite as well.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道为什么最后一行说`4`个测试而不是`3`个；请记住，我们生成的引用组件也有一个单独的测试套件。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to create Angular projects and what files necessarily
    accompany a new project. Now you know how to create Angular projects, and scaffold
    building blocks such as components, and understand the basic skeleton of components.
    You also learned why modules exist, how to apply simple styles to components,
    and what unit tests look like in Angular.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何创建Angular项目以及新项目必需的文件。现在您知道如何创建Angular项目，并且构建组件等基本构建块，了解了模块的存在原因，如何将简单样式应用到组件，以及Angular中的单元测试是什么样子的。
- en: In the next chapter, we will delve into the creation of more components and
    see some examples in play.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨更多组件的创建，并看一些示例在实际中的运用。
