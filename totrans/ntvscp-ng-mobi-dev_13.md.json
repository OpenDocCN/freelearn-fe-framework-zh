["```js\nnpm install appium wd nativescript-dev-appium --save-dev\n```", "```js\n{\n \"android44\": {\n   \"browserName\": \"\",\n   \"appium-version\": \"1.6.5\",\n   \"platformName\": \"Android\",\n   \"platformVersion\": \"4.4\",\n   \"deviceName\": \"Android 44 Emulator\",\n   \"noReset\": false,\n   \"app\": \"\"\n },\n\n \"ios10phone\": {\n   \"browserName\": \"\",\n   \"appium-version\": \"1.6.5\",\n   \"platformName\": \"iOS\",\n   \"platformVersion\": \"10.0\",\n   \"deviceName\": \"iPhone 6 Simulator\",\n   \"app\": \"\"\n }\n}\n```", "```js\n<ActionBar title=\"Compositions\" class=\"action-bar\">\n   <ActionItem (tap)=\"add()\" ios.position=\"right\">\n     <Button [text]=\"'fa-plus' | fonticon\" class=\"fa action-item\"></Button>\n   </ActionItem>\n</ActionBar>\n<ListView [items]=\"(mixer$ | async)?.compositions | orderBy: 'order'\" class=\"list-group\">\n <ng-template let-composition=\"item\">\n   <GridLayout rows=\"auto\" columns=\"100,*,auto\" class=\"list-group-item\">\n     <Button [text]=\"'fa-pencil' | fonticon\" (tap)=\"edit(composition)\" row=\"0\" col=\"0\" class=\"fa\"></Button>\n     <Label [text]=\"composition.name\" (tap)=\"select(composition)\" row=\"0\" col=\"1\" class=\"h2\"></Label>\n     <Label [text]=\"composition.tracks.length\" row=\"0\" col=\"2\" class=\"text-right\"></Label>\n   </GridLayout>\n </ng-template>\n</ListView> \n```", "```js\n// In JavaScript code, \"use strict\"; is highly recommended, \n// it enables JavaScript engine optimizations.\n\"use strict\";\n\n// Load the Appium driver, this driver sets up our connection to Appium \n// and the emulator or device.\nconst nsAppium = require(\"nativescript-dev-appium\");\n```", "```js\n// Just like Jasmine, Mocha uses describe to start a testing group.\ndescribe(\"Simple example\", function () {\n\n // This is fairly important, you need to give the driver time to wait\n // so that your app has time to start up on the emulator/device.\n // This number might still be too small if you have a slow machine.\n this.timeout(100000);\n```", "```js\n // This holds the driver; that will be used to communicate with Appium & Device.\n let driver;\n\n // This is ran once before any tests are ran. (There is also a beforeEach)\n before(function () {\n    // VERY, VERY important line here; you NEED a driver to communicate to your device.\n    // No driver, no tests will work.\n    driver = nsAppium.createDriver();\n });\n```", "```js\n// This is ran once at the end of all the tests. (There is also a afterEach)\nafter(function () {\n\n  // Also important, the Appium system works off of promises\n  // so you return the promise from the after function\n  // NOTICE no \";\", we are chaining to the next command.\n  return driver    \n\n    // This tells the driver to quit....\n    .quit()\n    // And finally after it has quit we print it finished....\n    .finally(function () {\n       console.log(\"Driver quit successfully\");\n    });\n });\n```", "```js\n// Just like jasmine, we define a test here.\nit(\"should find the + button\", function () {\n\n  // Again, VERY important, you need to return the promise\n  return driver\n\n  // This searches for an element by the Dom path; so you can find sub items.\n .elementByXPath(\"//\" + nsAppium.getXPathElement('Button'))\n```", "```js\n     // This element should eventually exist\n     .text().should.eventually.exist.equal('\\uf067');\n });\n```", "```js\nit(\"should have a Demo label\", function () {\n\n  // Again, VERY important, you need to return the promise\n  return driver\n\n    // Find all Label elements, that has text of \"Demo\"\n   .elementByXPath(\"//\" + nsAppium.getXPathElement(\"Label\") + \"[@text='Demo']\")\n\n   // This item should eventually exist\n   .should.eventually.exist\n\n   // Tap it\n   .tap();\n});\n```", "```js\n<Label [text]=\"composition.name\" (tap)=\"select(composition)\" row=\"0\" col=\"1\" class=\"h2\"></Label>\n```", "```js\nit(\"Should change to another screen\", function () {\n\n   // As usual return the promise chain...\n   return driver\n\n   // Find all Label elements, that has text of \"Demo\"\n   .waitForElementByXPath(\"//\" + nsAppium.getXPathElement(\"Label\") + \"[@text='Drums']\")\n\n   // This item should eventually exist\n   .should.eventually.exist.text();\n });\n```", "```js\nit(\"Should change mute button\", function () {\n\n  // Again, returning the promise\n  return driver\n\n  // Find all Label elements that contains the FA-Volume\n  .waitForElementByXPath(\"//\" + nsAppium.getXPathElement(\"Label\") + \"[@text='\\uf028']\")\n\n  // This item should eventually exist\n  .should.eventually.exist\n\n  // It exists, so tap it...\n  .tap()\n\n  // Make sure the text then becomes the muted volume symbol\n  .text().should.eventually.become(\"\\uf026\");\n});\n\n// This closes the describe we opened at the top of this test set.\n});\n```", "```js\nnpm run appium --runType=android44\n```", "```js\nit(\"should type in an element\", function (done) {\n  driver\n  .elementByXPath('//' + nsAppium.getXPathElement(\"EditText\") + \"[@text='Enter your name']\") \n  .sendKeys('Testing')\n  .text()\n  .then(function (v) {\n     if ('Testing' !== v) {\n        done(new Error(\"Value in name field does not match\"));\n     } else {\n        done();\n     }\n   }, done);\n });\n});\n```", "```js\nlanguage: android\n\njdk: oraclejdk8\n\nandroid:\n components:\n - tools\n - platform-tools\n - build-tools-25.0.2\n - android-25\n - extra-android-m2repository\n - sys-img-armeabi-v7a-android-21\n\nbefore_cache:\n - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock\n\ncache:\n directories:\n - .nvm\n - $HOME/.gradle/caches/\n - $HOME/.gradle/wrapper/\n\ninstall:\n - nvm install node\n - npm install -g nativescript\n - tns usage-reporting disable\n - tns error-reporting disable\n\nbefore_script:\n - echo no | android create avd --force -n test -t android-21 -b armeabi-v7a\n - emulator -avd test -no-audio -no-window &\n - android-wait-for-emulator\n\nscript:\n - npm run travissetup\n - npm run travistest\n```", "```js\n\"scripts\": {\n   \"travissetup\": \"npm i && tns platform add android && tns build android\",\n   \"travistest\": \"tns test android\"\n}\n```"]