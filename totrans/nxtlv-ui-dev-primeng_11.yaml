- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating Reusable and Extendable Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In modern web development, the essence of maintainability and efficiency lies
    in the ability to craft components that can be effortlessly reused and extended.
    This not only streamlines the development process but also ensures consistency
    and maintainability across your applications. So, in this chapter, we will get
    into the concept of creating reusable and extendable components in Angular applications
    utilizing PrimeNG building blocks.
  prefs: []
  type: TYPE_NORMAL
- en: While PrimeNG does offer a vast selection of prebuilt reusable components, there
    are instances where creating custom Angular components becomes necessary. Custom
    components provide tailored functionality, allowing you to implement specific
    application requirements and integrate with existing code. They also enable UI
    customization, ensuring a unique visual design and user interface. Additionally,
    custom components allow for performance optimization and cater to domain-specific
    needs that may not be covered by the prebuilt components. By weighing the trade-offs
    between customization and development effort, you can leverage both PrimeNG’s
    offerings and custom components to build highly adaptable and efficient Angular
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, we aim to equip you with the skills necessary to design
    components that can be effortlessly integrated into various projects, adapted
    as per requirements, and extended with new functionalities. This knowledge is
    pivotal, as it allows for rapid development without compromising on code quality.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing reusable and extendable components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting to know StyleClass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing PrimeBlocks for creating UI blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating reusable and extendable components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crafting your own components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains various working code samples on how to create reusable
    and extendable components. You can find the related source code in the `chapter-11`
    folder of the following GitHub repository: [https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-11](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-11).'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing reusable and extendable components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At its core, the foundation of reusable and extendable components in Angular
    is built upon Angular components themselves. The only difference is that we build
    them in a way that allows us to encapsulate functionality and user interface elements
    that can be easily reused and extended in different parts of our application.
    By combining reusability and extensibility, we can create components that promote
    code reuse, maintainability, and flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will explore why they are important and the best practices
    for building Angular components.
  prefs: []
  type: TYPE_NORMAL
- en: Why are reusable and extendable components important?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Reusable and extendable components offer several benefits in the development
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, they promote *code organization and modularity* by breaking down complex
    functionality into smaller, reusable units. This improves code maintainability
    and makes it easier to debug and test individual components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secondly, reusable and extendable components *enhance development efficiency*
    by allowing developers to build upon existing solutions rather than starting from
    scratch. This saves time and effort, especially in large-scale applications where
    similar functionality is required in multiple places.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, reusable and extendable components contribute to a *consistent user
    experience* by ensuring that common UI elements and functionalities are used consistently
    throughout the application. This fosters familiarity and usability for users interacting
    with different parts of the system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing for re-usability can be an anti-pattern—sometimes it is easier to
    maintain two visually identical components that are used in different contexts.
    As requirements continue to evolve, components can increase in complexity to cover
    various cases for each of the contexts.
  prefs: []
  type: TYPE_NORMAL
- en: Steps to create reusable and extendable components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating reusable and extendable components in Angular involves several steps.
    Here is a general outline of the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Identify common patterns**: Before diving into code, thoroughly analyze your
    application to identify recurring UI patterns and functionalities that appear
    across multiple components or pages.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Design with inputs and outputs**: Plan and implement your component to be
    flexible and adaptable, define input properties that allow data to be passed into
    the component from its parent, and specify output properties to emit events back
    to the parent when certain actions or changes occur within the component.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Keep styling consistent but customizable**: Utilize Angular’s encapsulated
    styles to ensure component styles don’t affect other parts of the application.
    However, also consider providing customization options, such as CSS custom properties,
    to enable users of the component to easily override or modify its styling when
    needed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Write comprehensive tests**: Develop a comprehensive suite of tests to validate
    the functionality and behavior of your component. Include unit tests to assess
    individual parts of the component’s logic, integration tests to verify it works
    correctly with other components or services, and end-to-end tests to simulate
    real user interactions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Document thoroughly**: Create clear and comprehensive documentation for your
    component. Explain its purpose, provide step-by-step instructions on how to use
    it, and offer guidance on extending or customizing the component if necessary.
    Include examples, code snippets, and any relevant API references to assist users
    in effectively utilizing the component in their projects.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Angular component best practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When building components in Angular, it is important to follow best practices
    to maximize their effectiveness. Here are some key practices to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Smart components and presentation components**: Angular promotes the separation
    of concerns through the use of smart components and presentation components. Smart
    components handle logic and data management, while presentation components focus
    on rendering the user interface and receiving input. This separation allows for
    better code organization and facilitates the reusability of presentation components
    across different smart components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Component composition**: Component composition involves creating components
    by combining smaller, reusable components. This approach encourages the building
    of components with a single responsibility, making them easier to understand,
    test, and reuse. By composing components, you can leverage the strengths of each
    component and create more complex functionality by combining them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inputs and outputs**: Using inputs and outputs in components allows for easy
    communication between parent and child components. Inputs enable the passing of
    data from a parent component to a child component, while outputs facilitate the
    emission of events from a child component to a parent component. This interaction
    enables components to be more flexible and adaptable to different contexts and
    requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Template and style encapsulation**: Angular provides mechanisms for encapsulating
    component templates and styles to prevent unintended styling conflicts and maintain
    component isolation. Encapsulating templates and styles within components ensure
    that they are self-contained and can be easily reused without affecting other
    parts of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By creating components that encapsulate specific functionality and can be easily
    reused across different parts of the application, we promote code reusability
    and maintainability.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s transition to exploring the `StyleClass` feature, which allows us
    to further customize and style our components in a flexible and dynamic manner.
  prefs: []
  type: TYPE_NORMAL
- en: Getting to know StyleClass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PrimeNG **StyleClass** is a powerful feature provided by the PrimeNG library
    for Angular applications. It allows you to manage CSS classes declaratively, making
    it easier to apply dynamic styles, handle animations, and toggle classes on elements.
    This feature enhances the flexibility and customizability of Angular components,
    enabling you to create visually appealing and interactive user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Why use PrimeNG StyleClass?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PrimeNG StyleClass is particularly useful when working with custom components
    in Angular. It provides a straightforward and efficient way to apply styles and
    manipulate classes based on various conditions or events. Using PrimeNG StyleClass,
    you can dynamically change the appearance and behavior of components, enhancing
    the user experience and adding interactivity to their applications.
  prefs: []
  type: TYPE_NORMAL
- en: One of the key advantages of PrimeNG StyleClass is its ability to handle animations
    during component transitions. By defining enter and leave classes, you can create
    smooth and visually pleasing animations when components are displayed or hidden.
    This can greatly enhance the overall user experience and make the application
    feel more polished and professional.
  prefs: []
  type: TYPE_NORMAL
- en: Another benefit of PrimeNG StyleClass is its simplicity and ease of use. You
    can define the target element using selector properties, which make it easier
    to toggle classes or add animation without creating your own custom functions.
  prefs: []
  type: TYPE_NORMAL
- en: For further reference, you can explore a comprehensive list of StyleClass properties
    and keywords at [https://primeng.org/styleclass](https://primeng.org/styleclass).
    Now, let’s dive into some practical examples that demonstrate how to effectively
    utilize StyleClass in your projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: toggle classes'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s consider an example where we want to create a custom Angular component
    that toggles dark mode based on user interaction. We can use PrimeNG StyleClass
    to achieve this functionality in a clean and maintainable way. Let’s see the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down each element and its purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pStyleClass="@next"`: The `pStyleClass` directive with the value `@next` indicates
    that the style class should be applied to the next sibling element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toggleClass="dark-mode"`: This attribute specifies the class that should be
    toggled when the button is clicked. In this case, the class name is `dark-mode`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall, the code snippet demonstrates the usage of PrimeNG’s `<p-button>` component
    with the `pStyleClass`, `toggleClass`, and `label` attributes. It suggests that
    the button is used to toggle the dark mode by applying or removing the `dark-mode`
    class to the next element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Toggling dark mode with StyleClass](img/B18805_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – Toggling dark mode with StyleClass
  prefs: []
  type: TYPE_NORMAL
- en: After clicking on the `dark-mode` class added, which renders the element in
    dark mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: animation'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to applying classes and styles, PrimeNG StyleClass also supports
    animations during component transitions. This can be achieved by specifying `enter`
    and `leave` classes along with their corresponding `active` and `completion` classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s consider an example where we want to create a fade-in and fade-out animation
    for a custom Angular component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break the code down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<button pButton ...>`: This is the PrimeNG button component that will trigger
    the animation action after it is clicked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pStyleClass=".box"`: This directive targets the element that has `box` in
    the class name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enterClass="hidden"`: This defines the class `hidden` to be targeted when
    the button is clicked and the box content begins to appear on the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enterActiveClass="fadein"`: This specifies the class `fadein` to be added
    during the `enter` animation of the associated element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`leaveActiveClass="fadeout"`: This defines the class `fadeout` to be added
    during the `leave` animation when the button is clicked; after that, the associated
    element starts to become hidden.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`leaveToClass="hidden"`: This specifies the class `hidden` to be added when
    the `leave` animation of the box content disappears.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With a deeper understanding of `StyleClass`, we’ve unlocked the potential to
    craft visually cohesive and appealing components in our applications. Now, let’s
    transition into utilizing PrimeBlocks for creating UI blocks, where we’ll harness
    pre-designed blocks to further expedite our UI development process.
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing PrimeBlocks for creating UI clocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`PrimeFlex` developed by PrimeNG. These blocks are designed to simplify the
    development process by providing ready-to-use UI elements that are commonly used
    in web applications. PrimeBlocks offers a variety of UI blocks, including **Navbar**,
    **Breadcrumbs**, **Tabs**, **Footer**, **Notification**, **Dialog**, and more.
    These UI blocks are highly customizable and can be easily integrated into your
    Angular projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – PrimeBlocks options](img/B18805_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – PrimeBlocks options
  prefs: []
  type: TYPE_NORMAL
- en: PrimeBlocks offers both a free version and paid versions with distinct features.
    The free version provides a limited selection of options to choose from, while
    the paid versions offer an extensive collection of over 400 ready-to-use UI blocks.
    In addition to the UI blocks’ codes, the paid versions also include valuable extras
    such as Figma files, lifetime support, and unlimited updates.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to keep in mind that the paid version has licensing restrictions,
    prohibiting the use of these blocks in open source projects where the code is
    publicly accessible.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll explore the pros and cons of utilizing PrimeBlocks
    to provide a comprehensive overview of its benefits and considerations.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages and Disadvantages of using PrimeBlocks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When compared to custom Angular components, PrimeBlocks offers several advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rapid prototyping**: PrimeBlocks is an excellent choice for prototyping or
    creating proof-of-concept applications. The library offers a wide variety of components
    that can be easily assembled to create a functional UI. By leveraging PrimeBlocks,
    you can quickly create interactive prototypes to gather feedback from stakeholders
    or validate design concepts. This allows for faster iteration and refinement of
    the application’s user interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consistent user experience**: PrimeBlocks provides a consistent and professional
    user experience throughout your application. The components follow the PrimeNG
    design language, which ensures a cohesive look and feel across different screens
    and sections of your application. This consistency enhances the user experience
    by reducing cognitive load and improving usability. By using PrimeBlocks, you
    can create a visually appealing and intuitive interface that aligns with industry
    best practices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customization and extensibility**: Despite being prebuilt UI blocks, PrimeBlocks
    offers a high level of customization and extensibility. Each block comes with
    a set of configurable options and styling classes that allow you to tailor the
    components to meet your specific requirements. You can easily customize colors,
    sizes, layouts, and behavior to match your application’s branding and design guidelines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While PrimeBlocks offers numerous benefits, there are a few potential downsides
    to consider. These include limited customization options, as the UI blocks are
    pre-designed and there’s a dependency on external libraries or frameworks, licensing
    restrictions that prohibit usage in open source projects, and a potential learning
    curve in implementing the blocks effectively. Evaluating these considerations
    against your project requirements will help determine if PrimeBlocks is the right
    fit for your needs.
  prefs: []
  type: TYPE_NORMAL
- en: How to use PrimeBlocks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since PrimeBlocks offers UI blocks that contain HTML elements, you can just
    copy and paste them into your Angular components. In this section, I will showcase
    examples utilizing the PrimeBlocks Free version. Here are just some of the blocks
    available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hero block**: A Hero block is a prominent section at the top of a webpage,
    typically featuring a captivating image or video along with a concise headline
    and call-to-action. It serves to grab the visitors’ attention and create a visually
    impactful introduction to the content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Feature block**: The Feature block highlights the key features or functionalities
    of a product, service, or website. It typically presents these features in a visually
    appealing manner, making it easier for users to understand and evaluate the offering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pricing block**: The Pricing block is commonly used on websites offering
    products or services with different pricing tiers or plans. It displays the various
    pricing options, including features and benefits associated with each plan, allowing
    users to compare and select the most suitable option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Call to Action block**: The **Call to Action** (**CTA**) block is designed
    to prompt users to take a specific action, such as signing up, making a purchase,
    or subscribing to a newsletter. It usually includes a persuasive message along
    with a prominent button or link to encourage user engagement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Banner block**: A Banner block is a horizontal section typically placed at
    the top or bottom of a webpage. It often contains important announcements or promotional
    content to capture users’ attention and convey essential information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s see how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before getting started, make sure that you have the correct version of PrimeNG
    (v11.4.4+) and PrimeFlex (v3.2.0+). If you haven’t installed PrimeFlex yet, you
    can type this command to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, you can add the `primeflex.scss` to `styles.scss` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Picking your blocks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After the preparation is done, you can implement blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the PrimeBlocks website, navigate to the **Free Blocks** section ([https://blocks.primeng.org/#/free](https://blocks.primeng.org/#/free))
    and choose a block that you would like to implement. For this example, I will
    pick **Call to Action** block, which you can see here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.3 – PrimeBlocks Call to Action](img/B18805_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – PrimeBlocks Call to Action
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Code** button and you will see the code ready to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.4 – PrimeBlocks Call to Action code](img/B18805_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – PrimeBlocks Call to Action code
  prefs: []
  type: TYPE_NORMAL
- en: 'All we need to do is copy and paste the code into our application and it will
    work like a charm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Implement Call to Action code](img/B18805_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – Implement Call to Action code
  prefs: []
  type: TYPE_NORMAL
- en: Having delved into the capabilities of PrimeBlocks, we’ve seen how these building
    blocks can streamline our UI development, ensuring consistency and saving time.
    They offer a solid foundation for rapidly creating visually appealing and functional
    user interfaces. However, sometimes, our projects demand a more tailored approach.
    As we move on to the next section, we’ll explore how to craft components that
    fit our unique requirements while maintaining reusability and extensibility.
  prefs: []
  type: TYPE_NORMAL
- en: Creating reusable and extendable components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a developer, one of our key goals is to write clean, maintainable, and reusable
    code. In this section, we will explore the concept of creating reusable and extendable
    components. We’ll take an example of a block from PrimeBlocks and discuss how
    we can make it more flexible and adaptable for different use cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the **Stats** block from PrimeBlocks with four different stats:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.6 – PrimeBlocks Stats](img/B18805_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – PrimeBlocks Stats
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking the **Code** button, we can see that there are four different
    elements for four stats, which can be reduced and reused:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.7 – PrimeBlocks Stats code](img/B18805_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 – PrimeBlocks Stats code
  prefs: []
  type: TYPE_NORMAL
- en: The provided image showcases four stats in the UI (labeled from *1* to *4*),
    each created using nearly identical HTML blocks. This approach results in repetition
    and makes maintenance challenging. For instance, if you need to make styling changes,
    you would have to modify the code in four different places. This redundancy can
    lead to increased effort and potential inconsistencies when updating or refining
    the UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'When examining the design and the code labeled *1*, we can look into the similarity
    between the elements and identify a pattern for all labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.8 – PrimeBlocks Stats pattern](img/B18805_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – PrimeBlocks Stats pattern
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we have extracted the template into reusable and customizable properties,
    allowing for easy modification and flexibility:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Orders`: `title`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`152`: `count`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pi` `pi-shopping-cart`: `icon`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bg-blue-100`: `iconBackground`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`24` `new`: `newCount`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`since last` `visit`: `newCountMessage`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once this information is gathered, the pattern is extracted. We can then create
    a reusable presentation component like in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The provided code is an Angular standalone component called `StatComponent`.
    Let’s break down its different parts and understand their purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '`selector: ''primengbook-stat''`: This property specifies the HTML selector
    that will be used to represent this component in the template. In this case, the
    selector is `primengbook-stat`, meaning that this component can be used in the
    template as `<``primengbook-stat />`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`changeDetection: ChangeDetectionStrategy.OnPush`: This change detection strategy
    tells Angular to only check for changes in the component’s input properties and
    not perform a full change detection cycle unless triggered externally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Input()...`: This decorator is used to mark certain properties as inputs
    to the component. These inputs can receive values from the component’s parent
    or from the template where the component is used. In this case, the component
    has several input properties: `title`, `count`, `icon`, `iconBackground`, `newCount`,
    and `newCountMessage`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After our reusable component is ready, we can use it anywhere in our application
    by putting it into the `imports` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The provided code is an Angular standalone component called `ReusableComponent`.
    Let’s break down its different parts and understand their purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '`imports: [CommonModule, StatComponent]`: The `imports` property is an array
    that specifies the modules required by this component. In this case, `CommonModule`
    is imported to provide common Angular directives and pipes and `StatComponent`
    is imported as a dependency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stats = [...]`: The `stats` property is an array of objects containing the
    properties `title`, `count`, `icon`, `iconBackground`, `newCount`, and `newCountMessage`.
    These properties hold the values that will be passed to the `StatComponent` for
    rendering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<primengbook-stat *ngFor="let stat of stats" ... />`: This code will allow
    you to iterate over the `stats` array and render the `primengbook-stat` elements
    together with their property bindings. For example, `[title]="stat.title"` binds
    the `title` property of the `primengbook-stat` component to the `title` property
    of the current `stat` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.9 – Reusable StatComponent](img/B18805_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.9 – Reusable StatComponent
  prefs: []
  type: TYPE_NORMAL
- en: Instead of having repetitive chunks of code (such as in *Figure 11**.7*), using
    a reusable component such as `primengbook-stat` offers several benefits, including
    code reusability, consistent appearance and behavior, and enhanced maintainability.
    By encapsulating the functionality and appearance, the component can be easily
    reused throughout the application, reducing code duplication and promoting a modular
    codebase. It ensures consistent styling and interactions across different parts
    of the application and simplifies maintenance by allowing updates to be made in
    one place. Overall, it improves development efficiency and provides a better user
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout our exploration of creating reusable and extendable components, we’ve
    uncovered the nuances of tailoring components to our specific needs without sacrificing
    their adaptability. This knowledge empowers us to build more efficient and maintainable
    Angular applications. As we transition to the next section, we’ll delve deeper
    into how to create components from scratch, ensuring they align perfectly with
    our project’s unique demands.
  prefs: []
  type: TYPE_NORMAL
- en: Crafting your own components with PrimeNG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating your own components is a fundamental aspect of modern web development.
    While prebuilt components can be convenient, there are situations where building
    custom components is necessary to meet specific requirements. In this part, we
    will explore the reasons behind creating custom components and learn how to leverage
    PrimeNG to craft your custom components.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Always ensure that your custom components are accessible, responsive, and user
    friendly. Test them across different devices and browsers to ensure a consistent
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: Why create custom components?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pre-built components, such as those offered by PrimeNG, Bootstrap, or Material,
    are fantastic. They save time, ensure consistency, and often come with built-in
    accessibility features. However, there are scenarios where they might not be the
    perfect fit:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unique design requirements**: Your application might have a design that doesn’t
    align with the styles of pre-built components. In such cases, crafting your own
    ensures that the UI remains consistent with your design guidelines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Specific functional needs**: Pre-built components offer general functionalities.
    If your application requires a component with very specific behavior, it’s often
    easier to build one from scratch than to modify a pre-built one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance**: Custom components can be optimized for your application’s
    specific needs, potentially offering better performance in some scenarios.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code maintainability and reusability**: By encapsulating specific functionality
    within well-defined components, you can modularize your codebase. This modular
    approach makes it easier to manage and maintain your application’s code, as each
    component can be developed, tested, and updated independently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example: utilizing PrimeNG to create a sign-in component'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PrimeNG offers a plethora of UI components and utilities that can aid in crafting
    your custom components. Before proceeding with the creation of the component,
    it is essential to take into account the following considerations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Have a design ready**: It is assumed that the design for the component is
    already prepared using design tools such as Figma or Sketch. This ensures a clear
    visual reference to guide the implementation process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Form and submission logic**: In this example, the focus will be on the component
    structure and functionality rather than the actual form submission. The implementation
    will omit the specific logic related to form submission.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Styling with PrimeFlex**: The styling of the component will be achieved using
    PrimeFlex utility classes. These utility classes provide a convenient and consistent
    way to apply styling and layout options, ensuring a cohesive and responsive design.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Account creation and password reset links**: This example will not include
    the implementation of links for creating a new account or resetting a forgotten
    password. The emphasis will be on the core functionality of the component itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking these points into consideration helps set the context and clarifies the
    scope of the component creation process. It ensures that the focus remains on
    the component’s structure, functionality, and integration while acknowledging
    the design, styling, and specific features that will be excluded from this particular
    example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s create a sign-in component using PrimeNG. First, use Angular CLI
    to generate a new component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in `sign-in.component.ts`, craft the UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code and explain its functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`imports: [..., ButtonModule, InputTextModule, CheckboxModule]`: This line
    specifies the required modules that need to be imported for the components to
    function correctly. In this case, the component requires the `ButtonModule`, `InputTextModule`,
    and `CheckboxModule` modules from PrimeNG.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`template: ''...''`: This is the HTML template that consists of various elements
    and classes that define the visual structure and behavior of the sign-in form,
    such as the username field, password field, remember-me function, password reset,
    and the submit button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, to use the sign-in component in your application, open any component/template
    in your directory and update its contents with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.10 – Sign-in component](img/B18805_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.10 – Sign-in component
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully rendered the sign-in component with the help of PrimeNG
    components.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, crafting your own components empowers you to build tailored solutions
    that perfectly fulfill the requirements of your application. By leveraging Angular’s
    component architecture and PrimeNG’s extensive set of components and features,
    you can create modular, scalable, and customizable elements that enhance the user
    experience. Now, let’s move on to the chapter summary, where we’ll recap the key
    points covered and highlight the important takeaways from this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout our journey, we delved deep into the realm of creating reusable and
    extendable components. The essence of this chapter was to empower you with the
    knowledge and techniques to craft components that can be reused across multiple
    parts of an application or even across different projects, all while maintaining
    the flexibility to extend and customize them as needed.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explored why, despite the plethora of pre-built components
    available, there’s often a need to craft our own. Whether it’s to meet unique
    design requirements, cater to specific functional needs, or optimize performance,
    custom components have their place in our developer toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, using PrimeNG, we saw how to enhance our custom components. From creating
    a custom component to understanding the power of PrimeBlocks and StyleClass, PrimeNG
    proved to be an invaluable asset.
  prefs: []
  type: TYPE_NORMAL
- en: As we transition to our next topic, we’ll be diving into internationalization
    and localization. This will be an exciting exploration into making our applications
    globally friendly, ensuring they cater to various languages and regional preferences.
    It’s all about providing a seamless user experience, no matter where our users
    are from or what language they speak. So, gear up as we embark on this new journey,
    making our applications truly global.
  prefs: []
  type: TYPE_NORMAL
