["```js\nnavigator.geolocation.getCurrentPosition(success, error, options)\n```", "```js\nnavigator.geolocation.watchPosition(success, error, options)\n```", "```js\nnavigator.geolocation.clearWatch(id);\n```", "```js\nclass ReactNotes extends React.Component {\n  trackLocation() {\n    navigator.geolocation.getCurrentPosition(\n      (initialPosition) => this.setState({initialPosition}),\n      (error) => alert(error.message)\n    );\n    this.watchID = navigator.geolocation.watchPosition((lastPosition) => {\n      this.setState({lastPosition});\n    });\n  }\n\n …\n}\n```", "```js\nclass ReactNotes extends React.Component {\n  componentWillUnmount() {\n    navigator.geolocation.clearWatch(this.watchID);\n  }\n  trackLocation() {\n    …\n  }\n …\n}\n```", "```js\nclass ReactNotes extends React.Component {\n  constructor (props) {\n    super(props);\n    StatusBarIOS.setStyle('light-content');\n\n    this.state = {\n      notes: {\n        1: {\n          title: \"Note 1\",\n          body: \"body\",\n          id: 1,\n          location: {\n            coords: {\n              latitude: 33.987,\n              longitude: -118.47\n            }\n          }\n        },\n        2: {\n          title: \"Note 2\",\n          body: \"body\",\n          id: 2,\n          location: {\n            coords: {\n              latitude: 33.986,\n              longitude: -118.46\n            }\n          }\n        }\n      }\n    };\n\n    this.loadNotes();\n    this.trackLocation();\n  }\n```", "```js\n  updateNote(note) {\n    var newNotes = Object.assign({}, this.state.notes);\n\n    if (!note.isSaved) {\n      note.location = this.state.lastPosition;\n    }\n\n    note.isSaved = true;\n    newNotes[note.id] = note;\n    this.setState({notes:newNotes});\n    this.saveNotes(newNotes);\n  }\n```", "```js\nvar NavigationBarRouteMapper = {\n  LeftButton: function(route, navigator, index, navState) {\n    switch (route.name) {\n      case 'home':\n        return (\n          <SimpleButton\n            onPress={() => navigator.push({name: 'noteLocations'})}\n            customText='Map'\n            style={styles.navBarLeftButton}\n            textStyle={styles.navBarButtonText}\n           />\n        );\n      case 'createNote':\n      case 'noteLocations':\n        return (\n          <SimpleButton\n            onPress={() => navigator.pop()}\n            customText='Back'\n            style={styles.navBarLeftButton}\n            textStyle={styles.navBarButtonText}\n           />\n        );\n      default:\n        return null;\n    }\n  },\n  ...\n\n  Title: function(route, navigator, index, navState) {\n    switch (route.name) {\n      case 'home':\n        return (\n          <Text style={styles.navBarTitleText}>React Notes</Text>\n        );\n      case 'createNote':\n        return (\n          <Text style={styles.navBarTitleText}>{route.note ? route.note.title : 'Create Note'}</Text>\n        );\n      case 'noteLocations':\n        return (\n          <Text style={styles.navBarTitleText}>Note Locations</Text>\n        );\n    }\n  }\n}\n```", "```js\nimport NoteLocationScreen from './App/Components/NoteLocationScreen';\n\n...\n\nclass ReactNotes extends React.Component {\n  ...\n\n  renderScene(route, navigator) {\n    switch (route.name) {\n      case 'home':\n        return (\n          <HomeScreen navigator={navigator} notes={_(this.state.notes).toArray()} onSelectNote={(note) => navigator.push({name:\"createNote\", note: note})} />\n        );\n      case 'createNote':\n        return (\n          <NoteScreen note={route.note} onChangeNote={(note) => this.updateNote(note)} />\n        );\n      case 'noteLocations':\n        return (\n          <NoteLocationScreen notes={this.state.notes} onSelectNote={(note) => navigator.push({name:\"createNote\", note: note})} />\n        );\n    }\n  }\n\n  ...\n\n}\n```", "```js\nimport React, {\n  MapView,\n  StyleSheet\n} from 'react-native';\n\nexport default class NoteLocationScreen extends React.Component {\n  render () {\n    return (\n      <MapView\n        showsUserLocation={true}\n        style={styles.map}\n      />\n    );\n  }\n}\n\nvar styles = StyleSheet.create({\n  map: {\n    flex: 1,\n    marginTop: 64\n  }\n});\n```", "```js\nexport default class NoteLocationScreen extends React.Component {\n  render () {\n    var locations = _.values(this.props.notes).map((note) => {\n      return {\n        latitude: note.location.coords.latitude,\n        longitude: note.location.coords.longitude,\n        title: note.title\n      };\n    });\n\n    return (\n      <MapView\n        annotations={locations}\n        showsUserLocation={true}\n        style={styles.map}\n      />\n    );\n  }\n}\n```", "```js\nexport default class NoteLocationScreen extends React.Component {\n  render () {\n    var locations = _.values(this.props.notes).map((note) => {\n      return {\n        latitude: note.location.coords.latitude,\n        longitude: note.location.coords.longitude,\n        hasLeftCallout: true,\n        onLeftCalloutPress: this.props.onSelectNote.bind(this, note),\n        title: note.title\n      };\n    });\n\n  ...\n\n}\n```"]