- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: State Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ll learn about **shared state**, which is state that is
    used by several different components. We will explore three approaches to managing
    shared state, discussing the pros and cons of each approach.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we will build a simple app containing a header that displays the
    user’s name, with the main content also referencing the user’s name. The user’s
    name will be stored in state that needs to be accessed by several components.
  prefs: []
  type: TYPE_NORMAL
- en: We will start with the simplest state solution. This is to use one of React’s
    state hooks to store the state and pass it to other components using props. This
    approach is often referred to as **prop drilling**.
  prefs: []
  type: TYPE_NORMAL
- en: The second approach we will learn about is a feature in React called **context**.
    We will learn how to create a context containing a state and let other components
    access it.
  prefs: []
  type: TYPE_NORMAL
- en: The last approach we will cover is a popular library called **Redux**. We will
    take the time to understand what Redux is and its concepts before refactoring
    the app to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we’ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using prop drilling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using React context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Redux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the following technologies in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js** and **npm**: You can install them from [https://nodejs.org/en/download/](https://nodejs.org/en/download/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code**: You can install it from [https://code.visualstudio.com/](https://code.visualstudio.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the code snippets in this chapter can be found online at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter8](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter8).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will develop our form using Visual Studio Code and a new Create React App-based
    project setup. We’ve previously covered this several times, so we will not cover
    the steps in this chapter – instead, see [*Chapter 3*](B19051_03.xhtml#_idTextAnchor072),
    *Setting Up React* *and TypeScript*.
  prefs: []
  type: TYPE_NORMAL
- en: We will style the form with Tailwind CSS. We also previously covered how to
    install and configure Tailwind in Create React App in [*Chapter 5*](B19051_05.xhtml#_idTextAnchor127),
    *Approaches to Styling Frontends*. So, after you have created the React and TypeScript
    project, install and configure Tailwind.
  prefs: []
  type: TYPE_NORMAL
- en: We will also use the `@tailwindcss/forms` plugin to style the form. So, install
    this plugin as well – see [*Chapter 7*](B19051_07.xhtml#_idTextAnchor188), *Working
    with Forms*, for information on how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The app we will build will contain a header and some content beneath it. Here
    is the component structure we will create:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – App component structure](img/B19051_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – App component structure
  prefs: []
  type: TYPE_NORMAL
- en: The header will have a **Sign in** button to authenticate and authorize a user
    to get their name and permissions. Once authenticated, the user’s name will be
    displayed in the app header, and the user will be welcomed in the content. If
    the user has admin permissions, important content will be shown.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, carry out the following steps to create the initial versions of the files
    that we need in the app without any statement management (some of the code snippets
    are lengthy – don’t forget you can copy them from [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter8/prop-drilling](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter8/prop-drilling)):'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by creating a file containing a function to authenticate a user.
    Create a folder called `api` in the `src` folder. Then, create a file called `authenticate.ts`
    in the `api` folder with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The function simulates successful authentication for a user called Bob.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create a file containing a function to authorize a user. So,
    create a file called `authorize.ts` in the `api` folder with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The function simulates a user being authorized to have admin permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create a component for the app header. Create a file called `Header.tsx`
    in the `src` folder with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component has a prop for the user, which will be `undefined` if the user
    isn’t authenticated yet. The component also has a prop called `onSignInClick`
    for a `loading` and it determines whether the app is in a loading state when the
    user is authenticated or authorized.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following component implementation into `Header.tsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component informs the user that they have signed in if they have been authenticated.
    If the user is unauthenticated, the component displays a **Sign** **in** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will implement a component for the main app content. Create a file
    called `Main.tsx` in the `src` folder with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component has a prop for the user and their permissions. We have imported
    a component called `Content`, which we will create in *step 7*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the following component implementation in `Main.tsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component instructs the user to sign in if they are unauthenticated or shows
    a `Content` component passing it the user’s permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last file to create in the `src` folder is called `Content.tsx`. Add the
    following content to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the user is unauthorized, the component displays nothing. If the user has
    admin permissions, it displays some important stuff. Otherwise, it informs the
    user that they lack permissions.
  prefs: []
  type: TYPE_NORMAL
- en: That completes the project setup. The app will compile and run but won’t show
    any of the components we created yet because we haven’t referenced them in the
    `App` component. We will do this next when we share the user and permission information
    across several components.
  prefs: []
  type: TYPE_NORMAL
- en: Using prop drilling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this first state management approach, we will store the `user`, `permissions`,
    and `loading` state in the `App` component. The `App` component will then pass
    this state to the `Header` and `Main` components using props.
  prefs: []
  type: TYPE_NORMAL
- en: So, this approach uses React features that we are already aware of. The approach
    is referred to as **prop drilling** because the state is passed down the component
    tree using props.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps to rework the `App` component to store the `user`,
    `permissions`, and `loading` state, and pass this state down to the `Header` and
    `Main` components:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `App.tsx` and start by removing all the existing code and adding the following
    import statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have imported `useReducer` from React to store the state. We have also imported
    the `Header` and `Main` components so that we can render them with the state values.
    Lastly, we’ve imported the `authenticate` and `authorize` functions because we
    will create the **Sign in** handler in this component.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the import statements, add a type for the state and create a variable
    for the initial state values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a type for the different actions that can update the state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `"authenticate"` action will start the authentication process, and `"authenticated"`
    happens when it has been completed. Likewise, the `"authorize"` action will start
    the authorization process, and `"authorized"` happens when it has been completed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add a `reducer` function that updates the state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The function takes in the existing state and the action as parameters. The function
    uses a switch statement on the action type to create a new version of the state
    in each branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s define the `App` component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component uses `useReducer` with the `reducer` function and the `initialState`
    variable we defined earlier. We have destructured the `user`, `permissions`, and
    `loading` state values from `useReducer`. In the JSX, we have rendered both the
    `Header` and `Main` components passing the appropriate state values as props.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Header` element in the JSX references a handler called `handleSignInClick`,
    which needs implementation. Create this above the return statement as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The sign-in handler authenticates and authorizes the user and dispatches the
    necessary actions along the way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the app in development mode by running `npm start` in the terminal. The
    app appears as shown in the screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.2 – App before signing in](img/B19051_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – App before signing in
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Sign in** button. The authentication and authorization processes
    then happen, and after a couple of seconds, the following screen appears:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.3 – App after signing in](img/B19051_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – App after signing in
  prefs: []
  type: TYPE_NORMAL
- en: That completes the prop drilling approach.
  prefs: []
  type: TYPE_NORMAL
- en: A nice thing about this approach is that it is simple and uses React features
    we are already familiar with. A downside of this approach is that it forces all
    components between the component providing state and components accessing the
    state to have a prop for that state. So, some components that do not need access
    to the state are forced to access it. An example is the `Main` component – the
    `permissions` state is forced to pass through it to the `Content` component.
  prefs: []
  type: TYPE_NORMAL
- en: The key point in this section is that it is fine to share state across a few
    adjacent components using props but isn’t ideal for sharing across lots of components
    far apart in the component tree.
  prefs: []
  type: TYPE_NORMAL
- en: Next, keep the app running, and we will look at a more appropriate solution
    for sharing state across many components.
  prefs: []
  type: TYPE_NORMAL
- en: Using React context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn a feature in React called **context**. We will
    then refactor the app from the last section to use React context.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding React context
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: React context is an object that can be accessed by components. This object can
    contain state values, so it provides a mechanism for sharing state across components.
  prefs: []
  type: TYPE_NORMAL
- en: 'A context is created using a `createContext` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: A default value for the context must be passed into `createContext`. It also
    has a generic type parameter for the type that represents the object created by
    `createContext`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The context also contains a `Provider` component that needs to be placed above
    components requiring access to the context object in the component tree. A provider
    wrapper component can be created that stores the shared state and passes it to
    the context `Provider` component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '`useState` has been used for the state in the preceding example, but `useReducer`
    could also be used.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The provider wrapper component can then be placed appropriately in the component
    tree, above components requiring the shared state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: 'React also contains a `useContext` hook that can be used so that the context
    values can be consumed as a hook, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: The context must be passed into `useContext` and properties from the context
    object can be destructured from its result.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, components that want access to the shared state can access it using `useContext`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: 'For more information on React context, see the following link: [https://reactjs.org/docs/context.html](https://reactjs.org/docs/context.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand React context, we will use it in the app we created in
    the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Using React context
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will refactor the app from the last section to use React context. We will
    start by creating a file containing the context and the provider wrapper. Then,
    we will use `useReducer` in the provider wrapper to store the state. We will also
    create a wrapper for `useContext` to make consuming it easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to do this, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by creating a file called `AppContext.tsx` in the `src` folder. This will
    contain the context, the provider wrapper, and the `useContext` wrapper.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following import statements to `AppContext.tsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have imported all the functions we need from React along with the `ReactNode`
    type that we will need for the provider wrapper `children` prop. We have also
    imported the `User` type, which we will need for the user state type.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add a type for the state and a variable for the initial state values.
    We already have these in `App.tsx`, so the following lines can be moved from `App.tsx`
    to `AppContext.tsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Similarly, the `Action` type and the `reducer` function can be moved from `App.tsx`
    to `AppContext.tsx`. Here are the lines to move:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the `App.tsx` file will raise a compile error after moving this function.
    We will resolve this in the next set of instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create a type for the context in `AppContext.tsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The context will consist of the state values and a `dispatch` function to dispatch
    actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can create the context as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have called the context `AppContext`. We use the `initialState` variable
    and a dummy `dispatch` function as the default context value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can implement the provider wrapper as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have called the component `AppProvider`, and it returns the context’s `Provider`
    component with the state values and the `dispatch` function from `useReducer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last thing to do in `AppContext.tsx` is to create a wrapper for `useContext`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That completes the work we need to do in `AppContext.tsx`.
  prefs: []
  type: TYPE_NORMAL
- en: So, `AppContext.tsx` exports an `AppProvider` component that can be placed above
    `Header` and `Main` in the component tree so that they can access the user and
    permissions information. `AppContext.tsx` also exports `useAppContext` so that
    the `Header`, `Main`, and `Content` components can use it to get access to the
    user and permissions information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, carry out the following steps to make the necessary changes to the `App`,
    `Header`, `Main`, and `Content` components to access the user and permissions
    information from `AppContext`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start with `Header.tsx`. Begin by importing the `authenticate`, `authorize`,
    and `useAppContext` functions. Also, remove the `User` type and the props for
    the `Header` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Header` will now handle the sign-in process instead of `App`. So, move the
    `handleSignInClick` handler from `App` in `App.tsx` to `Header.tsx` and place
    it above the return statement as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the sign-in click handler to reference the function we just added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE267]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE268]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE269]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last thing to do in `Header.tsx` is to get `user`, `loading`, and `dispatch`
    from the context. Add the following call to `useAppContext` at the top of the
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE271]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE273]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s move on to `Main.tsx`. Remove the import statement for the `User` type
    and add an import statement for `useAppContext`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE275]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the props for the `Main` component and get `user` from `useAppContext`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE277]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE278]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE279]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSX in `Main`, remove the `permissions` attribute on the `Content` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open `Content.tsx` and add an import statement for `useAppContext`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the props for the `Content` component and get `permissions` from `useAppContext`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE284]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE285]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE286]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE287]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE288]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, we will modify `App.tsx`. Remove the import statements except for `Header`
    and `Main`, and add an import statement for `AppProvider`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE290]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE291]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Still in `App.tsx`, remove the call to `useReducer` and remove all the attributes
    passed to `Header` and `Main`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE293]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE294]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE296]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE298]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE299]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Wrap `AppProvider` around `Header` and `Main` so that they can access the context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE301]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE302]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE303]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE304]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE305]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE306]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE307]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE308]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE309]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The compile errors will now be resolved and the running app will look and behave
    like before.
  prefs: []
  type: TYPE_NORMAL
- en: Stop the app running by pressing *Ctrl* + *C*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That completes the refactoring of the app to use React context instead of prop
    drilling.
  prefs: []
  type: TYPE_NORMAL
- en: In comparison to prop drilling, React context requires more code to be written.
    However, it allows components to access shared state using a hook rather than
    passing it through components using props. It’s an elegant, shared-state solution,
    particularly when many components share state.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn about a popular third-party library that can be used to
    share state.
  prefs: []
  type: TYPE_NORMAL
- en: Using Redux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about Redux before using it to refactor the app
    we have been working on to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Redux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Redux** is a mature state management library that was first released in 2015\.
    It was released before React context and became a popular approach for shared
    state management.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a store
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Redux, the state lives in a centralized immutable object referred to as a
    `useReducer`, the state in a store is updated by dispatching an `reducer` function,
    which creates a new version of the state.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the past, a lot of code was needed to set up a Redux store and consume it
    in a React component. Today, a companion library called Redux Toolkit reduces
    the code required to use Redux. A Redux store can be created using the Redux Toolkit’s
    `configureStore` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: The `configureStore` function takes in the store’s reducers. Each feature in
    the app can have its own area of state and reducer to change the state. The different
    areas of state are often referred to as `someFeature` and `anotherFeature`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Redux Toolkit has a function to create slices, called `createSlice`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: The `createSlice` function takes in an object parameter containing the slice
    name, the initial state, and functions to handle the different actions and update
    the state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The slice created from `createSlice` contains a `reducer` function that wraps
    the action handlers. This `reducer` function can be referenced in the `reducer`
    property of `configureStore` when the store is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, the reducer from `someSlice` has been added to
    the store.
  prefs: []
  type: TYPE_NORMAL
- en: Providing the store to React components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Redux store is defined in the component tree using its `Provider` component.
    The value of the Redux store (from `configureStore`) needs to be specified on
    the `Provider` component. The `Provider` component must be placed above the components
    requiring access to the store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, `SomeComponent` and `AnotherComponent` have access
    to the store.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the store from a component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Components can access state from the Redux store using a `useSelector` hook
    from React Redux. A function that selects the relevant state in the store is passed
    into `useSelector`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, `someValue` is selected from the `someFeature` slice
    in the store.
  prefs: []
  type: TYPE_NORMAL
- en: Dispatching actions to the store from a component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'React Redux also has a `useDispatch` hook that returns a `dispatch` function
    that can be used to dispatch actions. The action is a function from the slice
    created using `createSlice`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, `someAction` in `someSlice` is dispatched when the
    button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on Redux, see the following link: [https://redux.js.org/](https://redux.js.org/).
    And for more information on the Redux Toolkit, see the following link: [https://redux-toolkit.js.org/](https://redux-toolkit.js.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand Redux, we will use it in the app we created in the previous
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Redux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we must install Redux and the Redux Toolkit into our project. Run the
    following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: This will install all the Redux bits we need, including its TypeScript types.
  prefs: []
  type: TYPE_NORMAL
- en: Using Redux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we can refactor the app to use Redux instead of React context. First, we
    will create a Redux slice for the user information before creating a Redux store
    with this slice. We will then move on to add the store to the React component
    tree and consume it in the `Header`, `Main`, and `Content` components.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Redux Slice
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will start by creating a Redux slice for the state for a user. Carry out
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called `store` in the `src` folder and then a file called `userSlice.ts`
    within it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following import statements to `userSlice.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE318]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE319]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will eventually use `createSlice` to create the Redux slice. `PayloadAction`
    is a type that we can use for action objects. We will need the `User` type when
    defining the type for the state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the following `State` type and initial state value from `AppContext.tsx`
    into `userSlice.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE320]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE321]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE322]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE323]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE324]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE325]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE326]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE327]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE328]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE329]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, start to create the slice in `userSlice.ts`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE330]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE331]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE332]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE333]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE335]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have named the slice `user` and passed in the initial state value. We export
    the slice so that we can use it later to create the Redux store.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, define the following action handlers inside the `reducers` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE336]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE337]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE338]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE339]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE340]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE341]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE342]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE343]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE344]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE345]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE346]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE347]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE348]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE349]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE350]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE351]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE352]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE353]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE354]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE355]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE356]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE357]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Each action handler updates the required state. `PayloadAction` is used for
    the type of the action parameters. `PayloadAction` is a generic type with a parameter
    for the type of the action payload.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, export the action handlers and the `reducer` function from the slice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE358]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE359]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE360]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE361]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE362]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE363]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE364]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A default export has been used for the `reducer` function so the consumer can
    name it as required.
  prefs: []
  type: TYPE_NORMAL
- en: That completes the implementation of the Redux slice.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Redux store
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, let’s create the Redux store. Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `store.ts` in the `store` folder containing the following
    import statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE365]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE366]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, use the `configureStore` function to create the store referencing the
    reducer from the slice we created earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE368]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE369]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We export the `store` variable so that we can later use it on React Redux’s
    `Provider` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last thing to do in `store.ts` is export the type for Redux’s full state
    object, which we will eventually require in the `useSelector` hook in components
    consuming the Redux store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE370]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`ReturnType` is a standard TypeScript utility type that returns the return
    type of the function type passed into it. The `getState` function in the Redux
    store returns the full state object. So, we use `ReturnType` to infer the type
    of the full state object rather than explicitly defining it.'
  prefs: []
  type: TYPE_NORMAL
- en: That completes the implementation of the Redux store.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Redux store to the component tree
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, we will add the store at an appropriate place in the component tree using
    the `Provider` component from React Redux. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `App.tsx` and remove the `AppContext` import statement. Remove the `AppContext.tsx`
    file as well because this is no longer required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an import statement for the `Provider` component from React Redux and the
    Redux store we created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE371]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE372]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace `AppProvider` with `Provider` in the JSX, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE373]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE374]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE375]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE376]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE377]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE378]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We pass the imported Redux store into `Provider`.
  prefs: []
  type: TYPE_NORMAL
- en: The Redux store is now accessible to the `Header`, `Main`, and `Content` components.
  prefs: []
  type: TYPE_NORMAL
- en: Consuming the Redux store in the components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will now integrate the Redux store into the `Header`, `Main`, and `Content`
    components. This will replace the previous React context consumption code. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by opening `Header.tsx` and remove the `AppContext` import statement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following import statements to `Header.tsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE379]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE380]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE381]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE382]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE383]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE384]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE385]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE386]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will be referencing state from Redux as well as dispatching actions, so we
    have imported both `useSelector` and `useDispatch`. The `RootState` type is required
    in the function we will eventually pass to `useSelector`. We have also imported
    all the actions from the slice we created because we will need them in the revised
    sign-in handler.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `Header` component, replace the `useAppContext` call with `useSelector`
    calls to get the required state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE387]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE388]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE389]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE390]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE391]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE392]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE393]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE394]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE395]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE396]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE397]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE398]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, call `useDispatch` to get a `dispatch` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE399]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE400]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE401]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE402]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE403]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE404]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE405]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE406]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE407]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE408]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE409]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE410]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE411]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last thing to do in `Header.tsx` is to modify `handleSignInClick` to reference
    the action functions from the Redux slice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE412]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE413]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE414]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE415]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE416]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE417]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE418]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE419]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE420]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE421]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE422]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE423]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open `Main.tsx` and replace the `AppContext` import statement with import
    statements for `useSelector` and the `RootState` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE424]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE425]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the call to `useAppContext` with a call to `useSelector` to get the
    `user` state value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE426]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE427]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE428]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE429]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE430]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE431]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, open `Content.tsx` and replace the `AppContext` import statement with
    import statements for `useSelector` and the `RootState` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE432]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE433]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the call to `useAppContext` with a call to `useSelector` to get the
    `permissions` state value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE435]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE436]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE437]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE438]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE439]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE440]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE441]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE442]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the app by running `npm start` in the terminal. The app will look and behave
    just as it did before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That completes the refactoring of the app to use Redux rather than React context.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a recap of the key points for using Redux:'
  prefs: []
  type: TYPE_NORMAL
- en: State is stored in a central store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State is updated by dispatching actions that are handled by reducers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `Provider` component needs to be placed appropriately in the component tree
    to give components access to the Redux store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components can select state using a `useSelector` hook and dispatch actions
    using a `useDispatch` hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you have experienced, even using the Redux Toolkit requires many steps when
    using Redux to manage state. It is overkill for simple state management requirements
    but shines when there is a lot of shared application-level state.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built a small one-page app that contained components that
    needed to share state. We started by using our existing knowledge and used props
    to pass the state between the components. We learned that a problem with this
    approach was that components not needing access to the state are forced to access
    it if its child components do need access to it.
  prefs: []
  type: TYPE_NORMAL
- en: We moved on to learn about React context and refactored the app to use it. We
    learned that React context can store state using `useState` or `useReducer`. The
    state can then be provided to components in the tree using the context’s `Provider`
    component. Components then access the context state via the `useContext` hook.
    We found that this was a much nicer solution than passing the state via props,
    particularly when many components need access to the state.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we learned about Redux, which is similar to React context. A difference
    is that there can only be a single Redux store containing the state, but there
    can be many React contexts. We learned that a `Provider` component needs to be
    added to the component tree to give components access to the Redux store. Components
    select state using the `useSelector` hook and dispatch actions using the `useDispatch`
    hook. Reducers handle actions and then update the state accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to work with REST APIs in React.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to check what you have learned in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a context defined as follows to hold the theme state for an app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE443]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE444]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE445]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE446]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE447]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE448]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE449]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE450]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE451]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE452]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE453]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code doesn’t compile though; what is the problem?
  prefs: []
  type: TYPE_NORMAL
- en: 'The context from question 1 has a provider wrapper called `ThemeProvider`,
    which is added to the component tree as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE454]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE455]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE456]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE457]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE458]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The theme state is `undefined` when destructured from `useContext` in the `Footer`
    component. What is the problem?
  prefs: []
  type: TYPE_NORMAL
- en: Is it possible to have two React contexts in an app?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it possible to have two Redux stores in an app?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following code dispatches an action to change the theme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE459]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE460]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE461]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There is a problem with this code. What is this problem?
  prefs: []
  type: TYPE_NORMAL
- en: In a React component, is it possible to use state only required by this component
    using `useState` as well as state from a Redux store?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this chapter, when we implemented the Redux slice, the action handlers appeared
    to directly update the state, as in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE462]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE463]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE464]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE465]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE466]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE467]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE468]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Why are we allowed to mutate the state? I thought that state in React had to
    be immutable?
  prefs: []
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`createContext` must be passed a default value when using it with TypeScript.
    Here’s the corrected code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE469]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE470]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE471]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE472]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE473]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Footer` must be placed inside `ThemeProvider` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE474]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE475]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE476]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE477]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE478]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Yes, there is no limit on the number of React contexts in an app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, only a single Redux store can be added to an app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`useDispatch` can’t be used directly to dispatch an action – it returns a function
    that can be used to dispatch an action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE479]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE480]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE481]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE482]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Yes, local state defined using `useState` or `useReducer` can be used alongside
    shared state from a Redux store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Redux Toolkit uses a library called `state` object without mutating it.
    For more information on *immer*, see the following link: [https://github.com/immerjs/immer](https://github.com/immerjs/immer).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
