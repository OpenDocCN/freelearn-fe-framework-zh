- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Creating a Todo List App
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建待办事项应用
- en: Now that we have a development environment set up, we will get started with
    writing a small first application. In this chapter, we will create a Todo list
    app, which will teach us how the reactivity of Vue.js and the virtual DOM works.
    You can use the Todo list app as a guide to track progress in this book!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了开发环境，我们将开始编写一个小型的第一个应用。在本章中，我们将创建一个待办事项应用，这将教会我们Vue.js的响应性和虚拟DOM是如何工作的。您可以将待办事项应用作为本书记录进度的指南！
- en: 'Let’s make it an assignment with some practical requirements:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其变成一个具有一些实际要求的作业：
- en: We will make sure that you see a list of items
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将确保您能看到一个项目列表
- en: Each item will have a checkbox
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个项目都将有一个复选框
- en: The list will be sorted by unchecked items first and checked items second
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表将首先按未勾选的项目排序，然后是勾选的项目
- en: The status of an item should be preserved by the browser on future visits
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目状态应该在未来的访问中由浏览器保留
- en: There are different ways of writing a valid Vue.js component. Currently, the
    Composition API is preferred over the Options API. The Options API uses an object-oriented
    approach, while the Composition API allows for a more reusable way of writing
    and organizing your code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方式可以编写有效的Vue.js组件。目前，Composition API比Options API更受欢迎。Options API使用面向对象的方法，而Composition
    API允许以更可重用的方式编写和组织代码。
- en: In this book, we will use the Composition API notation with shorthand for the
    setup function unless noted otherwise. This way of writing code removes lots of
    noise and repetitive operations from your components and is a very efficient way
    of working. We’ll also use the TypeScript variant since it is supported out of
    the box and offers a better **Developer eXperience** (**DX**) by facilitating
    strict typing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，除非另有说明，我们将使用带有简写的Composition API来表示setup函数。这种方式编写代码从组件中移除了许多噪音和重复的操作，是一种非常高效的工作方式。我们还将使用TypeScript变体，因为它默认支持，并通过支持严格的类型提供更好的**开发者体验**（**DX**）。
- en: Note
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can read more about the syntax here: [https://vuejs.org/api/sfc-script-setup.html#script-setup](https://vuejs.org/api/sfc-script-setup.html#script-setup).
    More about defining components using TypeScript can be found here: [https://vuejs.org/guide/typescript/composition-api.html#using-script-setup](https://vuejs.org/guide/typescript/composition-api.html#using-script-setup).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处了解更多关于语法的详细信息：[https://vuejs.org/api/sfc-script-setup.html#script-setup](https://vuejs.org/api/sfc-script-setup.html#script-setup)。更多关于使用TypeScript定义组件的信息请在此处查看：[https://vuejs.org/guide/typescript/composition-api.html#using-script-setup](https://vuejs.org/guide/typescript/composition-api.html#using-script-setup)。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Using the CLI tool to create a custom environment for an app
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CLI工具为应用创建自定义环境
- en: Vue.js reactivity concept
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue.js响应式概念
- en: Styling with CSS
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CSS进行样式化
- en: First glance at Vue.js DevTools
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初探Vue.js DevTools
- en: We have no technical requirements other than what we’ve covered in the previous
    chapter, so we can get started right away!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有比上一章中提到的更多的技术要求，因此我们可以立即开始！
- en: A new project
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个新项目
- en: 'Let’s start by scaffolding out a new project, using the CLI commands from the
    previous chapter. Open a Terminal window in your `projects` folder and use the
    following instructions:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先通过使用上一章中的CLI命令来搭建一个新的项目。在您的`projects`文件夹中打开一个终端窗口，并使用以下说明：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Hit *y* to proceed, use `vue-todo-list` as the project name, and select the
    options shown in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 按*y*继续，使用`vue-todo-list`作为项目名称，并选择以下截图所示的选项：
- en: '![Figure 2.1 – The setup configuration for the Todo list app](img/B19563_02_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1 – 待办事项应用的设置配置](img/B19563_02_01.jpg)'
- en: Figure 2.1 – The setup configuration for the Todo list app
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – 待办事项应用的设置配置
- en: Go ahead and follow the given instructions to install the dependencies and open
    your favorite IDE to get started.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 按照给定的说明安装依赖项，并打开您最喜欢的IDE开始。
- en: Tip
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: '`npm` offers a shorthand for installing, by typing `npm i` instead of `npm
    install`. Read more about `npm` commands here: [https://docs.npmjs.com/cli/v6/commands](https://docs.npmjs.com/cli/v6/commands).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm`提供了简写来安装，只需输入`npm i`而不是`npm install`。更多关于`npm`命令的信息请在此处查看：[https://docs.npmjs.com/cli/v6/commands](https://docs.npmjs.com/cli/v6/commands)。'
- en: Cleaning up the default installation
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理默认安装
- en: Let’s first clean up the `components` folder by removing `HelloWorld.vue`, `TheWelcome.vue`,
    `WelcomeItem.vue`, and the `icons` folder. Then we’ll remove the references from
    `App.vue` and clean up the template.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先清理`components`文件夹，移除`HelloWorld.vue`、`TheWelcome.vue`、`WelcomeItem.vue`和`icons`文件夹。然后我们从`App.vue`中移除引用并清理模板。
- en: You will see a `__tests__` folder in the `components` folder, which is added
    by installing Vitest. You can ignore it for now. Otherwise, the `components` folder
    should be empty.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在`components`文件夹中看到一个`__tests__`文件夹，这是通过安装Vitest添加的。现在你可以忽略它。否则，`components`文件夹应该是空的。
- en: 'The `App.vue` file should look like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`App.vue`文件应该看起来像这样：'
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The changes will result in a blank page since we’ve removed all the default
    elements! Now we can start to build our own application from the ground up.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们移除了所有默认元素，这将导致出现空白页面！现在我们可以从头开始构建自己的应用。
- en: Building up the app
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建应用
- en: In this chapter, we will add a couple of components and compose the Todo app
    to follow the requirements, as listed at the beginning of this chapter (see *Technical
    requirements*). We’ll add the features step by step.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将添加一些组件并将Todo应用组合起来以满足本章开头列出的要求（参见*技术要求*）。我们将逐步添加功能。
- en: 'Let’s start simply, with an `AppHeader` component. Create the `AppHeader.vue`
    (remember: Vue.js recommends a filename that consists of at least two camel-cased
    words) file in the `components` folder. This will just be a static component with
    a `template` and `css` block:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从简单开始，创建一个`AppHeader`组件。在`components`文件夹中创建一个`AppHeader.vue`文件（记住：Vue.js建议文件名由至少两个驼峰式单词组成）。这只是一个静态组件，包含一个`template`和一个`css`块：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A Vue component usually consists of template, script, and style blocks. Not
    all are mandatory (we’re not adding any scripts to this component), but between
    those three, we can define every aspect of our component. In this book, we’ll
    see numerous examples of this pattern in practice.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Vue组件通常由模板、脚本和样式块组成。并非所有都是必需的（我们不会向这个组件添加任何脚本），但在这三个块之间，我们可以定义组件的各个方面。在这本书中，我们将看到许多这种模式在实际中的应用示例。
- en: The template is just a title representation, and we’ll use the `scoped` style
    block to apply CSS rules to the markup. Note the `scoped` attribute, which makes
    sure that our CSS doesn’t affect other components in the application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 模板只是标题的表示，我们将使用`scoped`样式块来应用CSS规则到标记。注意`scoped`属性，它确保我们的CSS不会影响应用中的其他组件。
- en: Using scoped CSS, we can write clean, readable rules. For single file components,
    this approach should be the default.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`scoped` CSS，我们可以编写干净、可读的规则。对于单文件组件，这种方法应该是默认的。
- en: Let’s continue building our app by creating a list component.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续构建我们的应用，通过创建一个列表组件。
- en: Creating the ListItem component
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建`ListItem`组件
- en: 'We’ll create the `ListItem.vue` component in the same folder. It will be the
    representation of an individual item on the list, and it looks like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在同一个文件夹中创建`ListItem.vue`组件。它将是列表中单个项目的表示，看起来像这样：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We define the props that will be passed to the component. Props are the properties
    that can be controlled from outside of the component. These are usually values
    that are being processed by the component and determine the unique characteristics
    of the component in that state. In rare cases, you could pass down a function
    as well.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义将传递给组件的属性。属性是可以从组件外部控制的属性。这些通常是组件正在处理的值，并决定了该状态下组件的独特特征。在罕见的情况下，你也可以传递一个函数。
- en: By using the `defineProps` method, we’re using the Vue.js API to declare our
    props properly.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`defineProps`方法，我们正在使用Vue.js API正确地声明我们的属性。
- en: 'The second bit is the way that the component should render HTML to the virtual
    DOM. Vue.js uses a syntax that is HTML-based. You can read more about it here:
    [https://vuejs.org/guide/essentials/template-syntax.html#template-syntax](https://vuejs.org/guide/essentials/template-syntax.html#template-syntax).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分是组件应该如何将HTML渲染到虚拟DOM中的方式。Vue.js使用基于HTML的语法。你可以在这里了解更多信息：[https://vuejs.org/guide/essentials/template-syntax.html#template-syntax](https://vuejs.org/guide/essentials/template-syntax.html#template-syntax)。
- en: 'We’re marking up an HTML `<label>` tag with a dynamic class name: it will render
    as `class="checked"` when the `isChecked` property evaluates as `true`. In the
    label, we’ll add a checkbox that has a dynamic `checked` attribute: it too is
    connected to the `isChecked` prop. The `<slot></slot>` tag is Vue.js-specific
    and it allows us to put any content in that spot, from the parent component.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用动态类名标记一个 HTML `<label>` 标签：当 `isChecked` 属性评估为 `true` 时，它将渲染为 `class="checked"`。在标签中，我们将添加一个具有动态
    `checked` 属性的复选框：它也连接到 `isChecked` 属性。`<slot></slot>` 标签是 Vue.js 特有的，它允许我们在该位置放置任何内容，从父组件中。
- en: Lastly, we define the CSS rules for this component, similar to what we did with
    `AppHeader.vue`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们为这个组件定义 CSS 规则，类似于我们在 `AppHeader.vue` 中所做的那样。
- en: Creating the list
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建列表
- en: 'With the `ListItem` component available to us, we can start generating the
    list. We’ll create a new component for this, which will hold the list information
    and use it to render all the individual items on the list as well as to provide
    the interactive features:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们有 `ListItem` 组件可用，我们可以开始生成列表。我们将为此创建一个新的组件，它将包含列表信息，并使用它来渲染列表上的所有单个项目以及提供交互功能：
- en: 'Let’s create a simple file called `TodoList.vue`, with the following contents:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的名为 `TodoList.vue` 的文件，其内容如下：
- en: '[PRE4]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Before we continue, we want to be able to display our app while we’re working
    on it. So, on the `App.vue` file, follow a similar approach of importing the `AppHeader.vue`
    and `TodoList.vue` files and adding the components to the template:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们希望在开发过程中能够显示我们的应用程序。因此，在 `App.vue` 文件中，遵循类似的导入 `AppHeader.vue` 和 `TodoList.vue`
    文件并将组件添加到模板中的方法：
- en: '[PRE5]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we can see what we’re doing, it is a good time to start the development
    server. If you’re using **Visual Studio Code** (**VSCode**), there’s actually
    a terminal built into the IDE:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经可以看到我们在做什么了，这是一个开始启动开发服务器的良好时机。如果你使用 **Visual Studio Code**（**VSCode**），实际上
    IDE 中有一个内置的终端：
- en: '**macOS users**: *⌃* + *`*'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**macOS 用户**：*⌃* + *`*'
- en: '**Windows users**: *Ctrl* + *`*'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows 用户**：*Ctrl* + *`*'
- en: '**Linux users**: *Ctrl* + *Shift* + *`*'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux 用户**：*Ctrl* + *Shift* + *`*'
- en: If you run the `npm run dev` command, it will start the development server and
    provide you with a local preview URL.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行 `npm run dev` 命令，它将启动开发服务器并提供你一个本地预览 URL。
- en: '![Figure 2.2 – Output of the npm run dev command](img/B19563_02_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – npm run dev 命令的输出](img/B19563_02_02.jpg)'
- en: Figure 2.2 – Output of the npm run dev command
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – npm run dev 命令的输出
- en: 'Since we don’t have a functional app right now, we need to work on its core
    feature: the list. You can leave the development server running since it will
    automatically update (this is called hot reloading) with the newly written code.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们目前还没有一个功能性的应用程序，我们需要专注于其核心功能：列表。你可以让开发服务器继续运行，因为它将自动更新（这被称为热重载）新编写的代码。
- en: Making a list
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制作列表
- en: The actual functionality resides in the `TodoList.vue` component, which we’ll
    now create. We’ll start small and add the more complex features in steps. Let’s
    start with a static list that has multiple list statuses.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的功能位于 `TodoList.vue` 组件中，我们现在将创建它。我们将从小处着手，逐步添加更复杂的功能。让我们从一个具有多个列表状态的静态列表开始。
- en: Let’s look at the `script` block first. Apart from importing the `ListItem`
    component, we’re defining `type` for `Item`, which consists of the `title` property
    as a string and the optional property `checked` as a Boolean. TypeScript lets
    us define a `Type` alias, which our IDE can plug into when interacting with `Type`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们首先看看 `script` 块。除了导入 `ListItem` 组件外，我们还在 `Item` 上定义了 `type`，它由一个字符串类型的 `title`
    属性和一个可选的 `checked` 属性（布尔类型）组成。TypeScript 允许我们定义 `Type` 别名，我们的 IDE 可以在交互 `Type`
    时将其插入。 '
- en: 'In this example, when accessing the properties on `item` in the `ListItem`
    template, the IDE already recognizes the `title` and optional `checked` properties:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，当在 `ListItem` 模板中访问 `item` 的属性时，IDE 已经识别出 `title` 和可选的 `checked` 属性：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When constructing the `ListItems` array, we assign `Type` as an array of that
    type using the `[]` symbols. We immediately fill the `ListItems` array with a
    list of items. This means that TypeScript could also infer the types, but it is
    a better practice to explicitly set the types where possible.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当构造 `ListItems` 数组时，我们使用 `[]` 符号将 `Type` 作为该类型的数组赋值。我们立即用项目列表填充 `ListItems`
    数组。这意味着 TypeScript 也可以推断类型，但最好在可能的情况下显式设置类型。
- en: 'In the template, we are creating an unordered list element and use the `v-for`
    directive to iterate over the items in the array:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板中，我们创建一个无序列表元素，并使用 `v-for` 指令遍历数组中的项目：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `v-for` directive is used to loop over collections and repeat the template
    that marks the collection. For every item, the current value is assigned to the
    first argument (`item`) and optionally provides an index of the collection as
    the second argument (`key`).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-for`指令用于遍历集合并重复标记集合的模板。对于每个项目，当前值被分配给第一个参数（`item`），并且可选地提供集合的索引作为第二个参数（`key`）。'
- en: The `v-for` directive repeats the `<li>` item with a `<ListItem />` component
    enclosed. For every item, we fill the `<ListItem />` component with the `is-checked`
    and `title` properties for that item.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-for`指令重复使用`<li>`项，并用包含`<ListItem />`组件的`<li>`项。对于每个项目，我们用该项目的`is-checked`和`title`属性填充`<ListItem
    />`组件。'
- en: The `key` attribute helps Vue.js in keeping track of the changes that are being
    made so that it can update the virtual DOM more efficiently.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`key`属性帮助Vue.js跟踪正在进行的更改，以便它可以更有效地更新虚拟DOM。'
- en: 'Lastly, we have added a `scoped` style block to stylize the elements for the
    browser. There’s not much going on here:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们添加了一个`scoped`样式块来美化浏览器中的元素。这里并没有太多的事情发生：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We now have a non-interactive Todo list app and have met the first two requirements
    already. Let’s take a look at how we can add some interactivity.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个非交互式的待办事项列表应用，并且已经满足了前两个要求。让我们看看我们如何添加一些交互性。
- en: Reactivity explained
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反应性解释
- en: If you have opened the app and clicked an item, you can toggle the checkbox,
    but on refreshing the page, nothing happens. Also, if you’ve looked closely at
    the CSS of the `<ListItem />` component, you may have noticed that strikethrough
    styling should be applied on a checked item. This is only the case on the first
    item.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经打开了应用并点击了一个项目，你可以切换复选框，但在刷新页面时，什么都没有发生。此外，如果你仔细查看`<ListItem />`组件的CSS，你可能已经注意到应该对已勾选的项目应用删除线样式。这只适用于第一个项目。
- en: The toggling of the checkbox is, in fact, native browser behavior and doesn’t
    signify anything in the context of the state of the Todo list!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 复选框的切换实际上是浏览器的原生行为，在待办事项列表的状态上下文中并不表示任何内容！
- en: 'We need to wire the changes in the UI to the state of the application. In order
    to get started, we need to import some utilities from the Vue.js package. Add
    these two lines to the top of the `<``script>` block:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将UI中的更改连接到应用程序的状态。为了开始，我们需要从Vue.js包中导入一些实用工具。将这两行代码添加到`<script>`块的顶部：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `ref` function is used to add reactivity and track updates to certain parts
    of the code. The value of `ref` is automatically inferred by TypeScript, but for
    complex types, we can specify the type.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`ref`函数用于添加反应性并跟踪代码中某些部分的变化。`ref`的值由TypeScript自动推断，但对于复杂类型，我们可以指定类型。'
- en: Note
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Vue.js also offers a `reactive` utility to mark reactivity. There are slight
    differences between the two, where `ref` can be used to track primitives and objects
    and `reactive` can only be initialized with an object. In general, you can opt
    for consistency in code by choosing `ref` over `reactive`. The only *downside*
    is that you have to access the value of the reactive item by a `.value` property
    in the script block. When using the variable in the `template` block, it is automatically
    unwrapped by Vue.js. It’s therefore a small concession for being able to use `ref`
    consistently.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js还提供了一个`reactive`实用工具来标记反应性。这两个工具之间有一些细微的差别，其中`ref`可以用来跟踪原始值和对象，而`reactive`只能用对象初始化。一般来说，你可以通过选择`ref`而不是`reactive`来保持代码的一致性。唯一的*缺点*是，你必须通过脚本块中的`.value`属性来访问反应性项的值。当在`template`块中使用变量时，Vue.js会自动展开它。因此，为了能够一致地使用`ref`，这是一个小的妥协。
- en: 'Now that we have imported the utility, we can mark the `listItems` to be tracked
    by wrapping the contents in the `ref` function:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经导入了实用工具，我们可以通过将内容包装在`ref`函数中来标记`listItems`以进行跟踪：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that capitalized `Ref` is used to type the value and lowercase `ref` is
    used as a wrapper of the array of items. If we now want to access the values in
    the script block, we need to access them by using `listItems.value`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，大写的`Ref`用于类型化值，而小写的`ref`用作项目数组的外包装。如果我们现在想在脚本块中访问这些值，我们需要通过`listItems.value`来访问它们。
- en: Now that the `listItems` are reactive, the virtual DOM will respond automatically
    to changes on the variables. We can add a method that changes an item so that
    it will be reflected in the user interface.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在由于`listItems`是反应性的，虚拟DOM将自动对变量的变化做出响应。我们可以添加一个更改项的方法，以便它在用户界面中得到反映。
- en: 'Let’s add the following function to the `script` block:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`script`块中添加以下函数：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Adopting Robert C Martin’s Clean Code philosophy, I split the instruction into
    separate functions with their own clear intent. When calling `updateItem` with
    `item` as an argument, it will try to find it in the `itemList` and toggle the
    `checked` property on the object.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 采用罗伯特·C·马丁的《代码整洁之道》哲学，我将指令拆分为具有自己明确意图的单独函数。当用`item`作为参数调用`updateItem`时，它会尝试在`itemList`中找到它，并切换对象的`checked`属性。
- en: 'We can see that TypeScript is guiding us to a slightly better solution: because
    `findItemInList` could return an `undefined` value and `toggleItemChecked` expects
    a parameter, the argument of calling the `toggleItemChecked` function gets a squiggly
    line.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到TypeScript引导我们到一个稍微更好的解决方案：因为`findItemInList`可能返回一个`undefined`值，而`toggleItemChecked`期望一个参数，所以调用`toggleItemChecked`函数的参数得到了一条波浪线。
- en: '![Figure 2.3 – TypeScript hinting at a possible problem in our code](img/B19563_02_03.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图2.3 – TypeScript提示我们代码中可能存在的问题](img/B19563_02_03.jpg)'
- en: Figure 2.3 – TypeScript hinting at a possible problem in our code
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3 – TypeScript提示我们代码中可能存在的问题
- en: 'We can fix this by adding a statement surrounding the call of the `toggleItemChecked`
    function:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过添加一个围绕`toggleItemChecked`函数调用的语句来修复这个问题：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With the `script` block changes complete, we can attach the interactivity to
    the user interface in the `template` block. We want the visitor to be able to
    click on a `ListItem` to mark it as complete. Vue.js has a built-in directive
    for this: `v-on`. This acts as an event handler and supports a couple of modifiers
    as well. For more information, see [https://vuejs.org/api/built-in-directives.html#v-on](https://vuejs.org/api/built-in-directives.html#v-on).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 完成脚本块的变化后，我们可以在模板块中附加用户界面的交互。我们希望访客能够点击`ListItem`来标记它为完成。Vue.js有一个内置指令可以做到这一点：`v-on`。这充当事件处理器，并支持一些修饰符。更多信息，请参阅[https://vuejs.org/api/built-in-directives.html#v-on](https://vuejs.org/api/built-in-directives.html#v-on)。
- en: 'We can add it to the template like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以这样将其添加到模板中：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We’ve also added a `.prevent` modifier to prevent the default behavior of the
    checkbox mechanics. This is all the code that’s needed to call the method!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了`.prevent`修饰符来防止复选框机制的默认行为。这就是调用方法所需的全部代码！
- en: There’s even a shorthand for `v-on:click`, by using `@click`. You will see examples
    of both directives in resources, so it’s good to understand they are the same.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`v-on:click`，甚至有一个简写，即使用`@click`。你将在资源中看到这两个指令的示例，所以了解它们是相同的很好。
- en: Under the hood, Vue.js uses the `ref` function to register a series of watchers
    on the values. The template engine is used to generate a virtual DOM (a node tree
    representation of the elements that make up the component). Once a reactive value
    is changed, the virtual DOM node where that value is used is also changed.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在底层，Vue.js使用`ref`函数在值上注册一系列观察者。模板引擎用于生成虚拟DOM（组件组成元素的节点树表示）。一旦响应式值发生变化，使用该值的虚拟DOM节点也会发生变化。
- en: Vue.js compares the changes to the DOM and updates only the necessary elements
    in the real DOM to reflect the state. Being able to granularly update the DOM
    very accurately is what makes Vue.js 3 a highly performant framework, since it
    doesn’t have to traverse whole branches of virtual DOM nodes!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js比较DOM的变化，并只更新实际DOM中必要的元素以反映状态。能够非常精确地逐个更新DOM是Vue.js 3成为一个高性能框架的原因，因为它不需要遍历整个虚拟DOM节点！
- en: Let’s use the list that we have as input for our next step, where we’ll look
    at sorting.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用我们已有的列表作为下一步的输入，我们将查看排序。
- en: Sorting the list
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排序列表
- en: We’re now perfectly capable of showing variables in the template. There are
    cases, however, when you have a need for more advanced expressions, such as, in
    our example, the requirement of sorting the list. For variables that have no side
    effects and include reactive data, you can use the Vue.js `computed` function.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在完全能够展示模板中的变量。然而，在某些情况下，你可能需要更高级的表达式，例如，在我们的例子中，需要排序列表。对于没有副作用且包含响应式数据的变量，你可以使用Vue.js的`computed`函数。
- en: Typically, you would use `computed` for filtering data, format expressions,
    displaying calculations, or Boolean conditionals. Let’s apply it to sort the list
    with completed items at the bottom.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你会使用`computed`进行数据过滤、格式表达式、显示计算或布尔条件。让我们将其应用于将完成项排序到底部的列表。
- en: 'First, we’ll import `computed` to the `TodoList` component. We can add it to
    the import where we also import the `ref` function:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将`computed`导入到`TodoList`组件中。我们可以在导入`ref`函数的地方添加它：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'const sortedList = computed(() =>    [...listItems.value].sort((a, b) => (a.checked
    ? 1 : 0) - (b.checked ? 1 : 0))'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 'const sortedList = computed(() =>    [...listItems.value].sort((a, b) => (a.checked
    ? 1 : 0) - (b.checked ? 1 : 0))'
- en: )
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'const setToStorage = (items: Item[]): void => {  localStorage.setItem(''list-items'',
    JSON.stringify(items))'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 'const setToStorage = (items: Item[]): void => {  localStorage.setItem(''list-items'',
    JSON.stringify(items))'
- en: '}'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'const getFromStorage = (): Item[] | [] => {'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 'const getFromStorage = (): Item[] | [] => {'
- en: const stored = localStorage.getItem('list-items')
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: const stored = localStorage.getItem('list-items')
- en: if (stored) {
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: if (stored) {
- en: return JSON.parse(stored)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: return JSON.parse(stored)
- en: '}'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return []
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: return []
- en: '}'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: import { ref, onMounted, computed } from 'vue'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: import { ref, onMounted, computed } from 'vue'
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'const storageItems: Ref<Item[]> = ref([])'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 'const storageItems: Ref<Item[]> = ref([])'
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'const initListItems = (): void => {  if (storageItems.value?.length === 0)
    {'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 'const initListItems = (): void => {  if (storageItems.value?.length === 0)
    {'
- en: const listItems = [
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: const listItems = [
- en: '{ title: ''Make a todo list app'', checked: true },'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '{ title: ''制作待办事项应用'', checked: true },'
- en: '{ title: ''Predict the weather'', checked: false },'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '{ title: ''预测天气'', checked: false },'
- en: '{ title: ''Read some comics'', checked: false },'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '{ title: ''阅读一些漫画'', checked: false },'
- en: '{ title: ''Let\''s get cooking'', checked: false },'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '{ title: ''让我们开始烹饪'', checked: false },'
- en: '{ title: ''Pump some iron'', checked: false },'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '{ title: ''举铁锻炼'', checked: false },'
- en: '{ title: ''Track my expenses'', checked: false },'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '{ title: ''跟踪我的开支'', checked: false },'
- en: '{ title: ''Organise a game night'', checked: false },'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '{ title: ''组织游戏之夜'', checked: false },'
- en: '{ title: ''Learn a new language'', checked: false },'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '{ title: ''学习一门新语言'', checked: false },'
- en: '{ title: ''Publish my work'' }'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '{ title: ''发布我的作品'' }'
- en: ']'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: setToStorage(listItems)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: setToStorage(listItems)
- en: storageItems.value = listItems
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: storageItems.value = listItems
- en: '}'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE19]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: onMounted(() => {  initListItems()
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: onMounted(() => {  initListItems()
- en: storageItems.value = getFromStorage()
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: storageItems.value = getFromStorage()
- en: '})'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'const updateItem = (item: Item): void => {  const updatedItem = findItemInList(item)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 'const updateItem = (item: Item): void => {  const updatedItem = findItemInList(item)'
- en: if (updatedItem) {
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: if (updatedItem) {
- en: toggleItemChecked(updatedItem)
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: toggleItemChecked(updatedItem)
- en: setToStorage(storageItems.value)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: setToStorage(storageItems.value)
- en: '}'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'const findItemInList = (item: Item): Item | undefined => {'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 'const findItemInList = (item: Item): Item | undefined => {'
- en: return storageItems.value.find(
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: return storageItems.value.find(
- en: '(itemInList: Item) => itemInList.title === item.title'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '(itemInList: Item) => itemInList.title === item.title'
- en: )
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '}'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE21]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'const sortedList = computed(() =>  [...storageItems.value].sort((a, b) => (a.checked
    ? 1 : 0) - (b.checked ? 1 : 0))'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 'const sortedList = computed(() =>    [...storageItems.value].sort((a, b) =>
    (a.checked ? 1 : 0) - (b.checked ? 1 : 0))'
- en: )
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '[PRE22]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
