- en: Chapter 1. Creating Accordions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章。创建手风琴
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Section navigation using the Tab key
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Tab 键进行部分导航
- en: Dynamically changing the height style
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态更改高度样式
- en: Resizable content sections
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可调整大小的内容部分
- en: Controlling spacing with themes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用主题控制间距
- en: Sorting accordion sections
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排序手风琴部分
- en: Dragging-and-dropping between accordions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在手风琴之间进行拖放
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this chapter, we will explore the various ways in which we can extend the
    **accordion** widget to accommodate a number of scenarios. The accordion widget
    offers a lot of out-of-the-box functionality. For example, without any configuration,
    we get a themed container widget that groups contents into sections.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨多种方法，以扩展**手风琴**小部件，以适应多种情况。手风琴小部件提供了很多开箱即用的功能。例如，没有任何配置，我们就得到了一个主题化的容器小部件，将内容分组到部分中。
- en: We'll focus on use cases that shed light on the inner workings of the accordion
    widget. Keyboard events are one way to navigate the page, and we can enhance the
    accordion's support for these events. Some magic happens behind the scene to come
    up with each section's height, when expanded. We'll see how we can work with these
    configurations, especially when the section height changes on the fly.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将专注于揭示手风琴小部件内部工作原理的用例。键盘事件是导航页面的一种方式，我们可以增强手风琴对这些事件的支持。在展开时，每个部分的高度会发生一些神奇的变化。我们将看到我们如何处理这些配置，特别是当部分高度在飞行中改变时。
- en: Also on the topic of height, we can let the user control the height of individual
    sections, or, from a theme perspective, we can control the space between the accordion
    components. Finally, we'll look at some of the more advanced accordion usage where
    we give the user the freedom to sort their accordion sections and to drag sections
    from one accordion to another.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在高度方面，我们可以让用户控制各个部分的高度，或者从主题的角度来看，我们可以控制手风琴组件之间的空间。最后，我们将看一些更高级的手风琴用法，其中我们让用户自由地对手风琴部分进行排序，并将部分从一个手风琴拖到另一个手风琴中。
- en: Section navigation using the Tab key
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Tab 键进行部分导航
- en: In most desktop environments, the *Tab* key is a secret weapon in navigation—one
    tool that many users are accustomed to. Likewise, we can utilize the *Tab* key
    in HTML5 applications using the `tabindex` property. This tells the browser the
    order in which to focus elements, each time the key is pressed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数桌面环境中，*Tab* 键是导航中的秘密武器——许多用户习惯使用的一个工具。同样，我们可以使用 `tabindex` 属性在 HTML5 应用程序中利用
    *Tab* 键。这告诉浏览器每次按下该键时焦点元素的顺序。
- en: Unfortunately, this isn't as straightforward as it looks with accordion widgets.
    We can't specify a `tabindex` value in each section header and expect the *Tab*
    key events to work as expected. Instead, the default widget implementation provides
    a different kind of key navigation—the *up* and *down* arrow keys. Ideally, it
    would be useful to give users the ability to navigate through the accordion sections
    using the *Tab* key that they're familiar with, while preserving the default key
    navigation provided by the widget.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，使用手风琴小部件并不像看起来那么简单。我们不能在每个部分标题中指定 `tabindex` 值，并期望 *Tab* 键事件按预期工作。相反，默认小部件实现提供了一种不同类型的键导航——*上*
    和 *下* 箭头键。理想情况下，给用户使用他们熟悉的 *Tab* 键通过手风琴部分导航的能力是有用的，同时保留小部件提供的默认键导航。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To get started, we'll want a basic accordion; ideally, something simple that
    has basic content within each section, so that we can visually see how the *Tab*
    key behavior works before we implement custom events, and afterward.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要一个基本的手风琴；理想情况下，是一些简单的内容，每个部分都有基本的内容，这样我们就可以在实现自定义事件之前和之后直观地看到 *Tab*
    键的行为如何工作。
- en: 'As a guide, here is my basic accordion markup:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 作为指南，这是我的基本手风琴标记：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And, here is the code used to instantiate the accordion widget:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，这是用于实例化手风琴小部件的代码：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有 Packt 图书的示例代码文件。如果您在其他地方购买了此书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册以直接将文件发送到您的电子邮件。
- en: We now have a basic collapsible accordion widget that we can look at in the
    browser. The reason we're adding the `collapsible` option here is so that we can
    experiment with the key navigation—we get a better view of which section is in
    focus when all are collapsed. You can see how the *up* and *down* arrow keys allow
    the user to traverse through the accordion sections while the *Tab* key has no
    effect. Let's change that.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个基本的可折叠手风琴小部件，我们可以在浏览器中查看。我们在这里添加`collapsible`选项的原因是为了可以实验按键导航——当所有部分都折叠时，我们可以更好地看到哪个部分处于焦点状态。您可以看到*up*和*down*箭头键允许用户遍历手风琴部分，而*Tab*键没有任何效果。让我们改变一下。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We're going to extend the accordion widget to include an event handler for `keypress`
    events. The default accordion implementation has `keypress` events for dealing
    with the *up*, *down*, *left*, *right*, and *Enter* keys. We don't need to change
    that. Instead, we add our own handler that understands what to do when the *Tab*
    key and *Shift* + *Tab* keys are pressed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展手风琴小部件以包括一个`keypress`事件的事件处理程序。默认的手风琴实现有处理*up*、*down*、*left*、*right*和*Enter*键的`keypress`事件。我们不需要改变这一点。相反，我们添加了一个理解当按下*Tab*键和*Shift*
    + *Tab*键时该做什么的自定义处理程序。
- en: 'Look at the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下代码：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We're creating a new accordion widget here by extending the default accordion
    widget. The advantage to this approach of extending the accordion widget is that
    we're not tinkering with instances of the widget; all accordion instances will
    acquire this new behavior.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里通过扩展默认的手风琴小部件来创建一个新的手风琴小部件。扩展手风琴小部件的优势在于我们不会去修改小部件的实例；所有手风琴实例都将获得这种新的行为。
- en: The `_create()` method is replaced with our new implementation of it. The first
    thing we do in this replacement method is call the original `_create()` method.
    We don't want to prevent the default setup actions of the accordion widget from
    taking place. So, using `_super()` we're able to do that. The next thing we do
    is bind our new `tabkeydown()` event handler to the `keydown` event.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`_create()`方法被我们的新实现所取代。在这个替代方法中，我们首先调用原始的`_create()`方法。我们不想阻止手风琴小部件的默认设置操作发生。因此，使用`_super()`我们能够做到这一点。接下来我们绑定了我们的新的`tabkeydown()`事件处理程序到`keydown`事件上。'
- en: The `tabkeydown()` handler is a simplified version of the `keydown` event handler
    provided in the original accordion implementation. If the *Alt* or the *Ctrl*
    key was pressed in combination with another key, we ignore the event. If the key
    press was anything other than a *Tab*, we ignore the event too, since we're only
    interested in altering the *Tab* key behavior when one of the accordion headers
    is in focus.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`tabkeydown()`处理程序是原始手风琴实现中提供的`keydown`事件处理程序的简化版本。如果*Alt*或*Ctrl*键与其他键组合按下，则我们忽略事件。如果按下的键不是*Tab*，我们也会忽略事件，因为我们只对当手风琴标题处于焦点时改变*Tab*键行为感兴趣。'
- en: The guts of the handler determine what should happen when the *Tab* key is pressed.
    In which direction should we move the accordion header focus? When do we ignore
    the event and let the default browser behavior take over? The trick is, figuring
    out our current index position. If we're on the first header and the user presses
    *Shift* + *Tab*, meaning they want to traverse backward, then we don't do anything.
    Likewise, if we're on the last header and the user presses *Tab*, we pass control
    back to the browser so as not to interfere with the expected functionality.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序的要点在于确定*Tab*键按下时应该发生什么。我们应该将手风琴标题焦点移动到哪个方向？何时忽略事件并让默认浏览器行为接管？诀窍在于确定我们当前的索引位置。如果我们在第一个标题上，并且用户按下*Shift*
    + *Tab*，意味着他们想向后遍历，则我们不做任何操作。同样，如果我们在最后一个标题上，并且用户按下*Tab*，我们将控制权交给浏览器，以便不干扰预期功能。
- en: Dynamically changing the height style
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态改变高度样式
- en: Accordions are containers that are used to organize and display other UI elements.
    Thinking about each accordion section as static content is a mistake. The contents
    of accordion sections do change. For example, a user-triggered event might lead
    to the creation of a new element within the section. In all likelihood, the components
    inside a section will change size dynamically, and that's the part we need to
    be aware of. Why does it matter that accordion contents change size? Since this
    is an accordion, we'll likely have several sections (or at least a few). Does
    it make sense to have all of them with a uniform height? It does, until the height
    of one section grows too large. Then the section heights are no longer uniform.
    When this happens, we need to take a look at the accordion section height when
    they change, and potentially adjust some of the height settings on the fly.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 手风琴是用于组织和显示其他 UI 元素的容器。将每个手风琴部分视为静态内容是一个错误。手风琴部分的内容确实会发生变化。例如，用户触发的事件可能会导致在部分内创建新元素。很可能，部分内的组件会动态改变大小，这是我们需要注意的部分。为什么关注手风琴内容变化大小很重要？因为这是一个手风琴，我们可能会有几个部分（或至少有一些）。让它们都具有统一的高度有意义吗？在某个部分的高度增加到非常大的程度时，它就不再具有统一的高度了。当发生这种情况时，我们需要查看手风琴部分高度的变化，并在必要时动态调整一些高度设置。
- en: Getting ready
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Let''s use the following markup to create an accordion widget:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下标记创建手风琴小部件：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We''ll create the accordion using all the default option values as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用所有默认选项值创建手风琴如下：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, this is where we'll notice a slight inconsistency with regards to height.
    Here is what the first section looks like. It has minimal content, but uses more
    space than required.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们会注意到一个关于高度的轻微不一致性。以下是第一部分的样子。它内容很少，但却使用了比所需更多的空间。
- en: '![Getting ready](img/2186OS_01_01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/2186OS_01_01.jpg)'
- en: 'This is due to the default value of the `heightStyle` option, which says that
    the height of every section in the accordion will be equal to that of the tallest
    section. Thus, we have wasted space in the first section. Let''s look at the fourth
    section in the following screenshot to see why this happens:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由于`heightStyle`选项的默认值造成的，该选项规定手风琴中每个部分的高度将等于最高部分的高度。因此，我们在第一部分浪费了空间。让我们看看以下屏幕截图中的第四部分，以了解为什么会发生这种情况：
- en: '![Getting ready](img/2186OS_01_02.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/2186OS_01_02.jpg)'
- en: We can see that the first section is as tall as the fourth section. This is
    due to the `auto` value of `heightStyle`. In this particular example, the difference
    isn't all that great. That is, the first section doesn't waste too much empty
    space. Therefore, it would probably make sense to keep this accordion configuration
    where each section has the same height.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，第一部分与第四部分一样高。这是由于`heightStyle`的`auto`值造成的。在这个特定的例子中，差异并不是那么大。也就是说，第一部分没有浪费太多的空白空间。因此，保持每个部分具有相同高度的手风琴配置可能是有意义的。
- en: The challenge arises when we're dealing with an application that is dynamically
    feeding content into a particular accordion section, and at some point where a
    certain threshold is reached, it no longer makes sense to keep the auto `heightStyle`
    configuration.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们处理动态向特定手风琴部分提供内容的应用程序时，挑战就出现了，在某个临界点达到时，保持自动`heightStyle`配置就不再有意义了。
- en: How to do it...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Setting the `heightStyle` to `auto` solves the problem for us, as each section
    will only use the height necessary to display the content. However, it would be
    nice if we were able to change this property of the accordion when the height
    of the content itself changes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将`heightStyle`设置为`auto`可以为我们解决问题，因为每个部分只会使用必要的高度来显示内容。但是，如果能够在内容自身的高度发生变化时更改手风琴的此属性，那就更好了。
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: What we've done here is extend the accordion widget's `refresh()` method to
    allow the `heightStyle` option to be changed to content on the fly. The default
    implementation doesn't allow this. To illustrate this idea, consider the code
    above where we're creating the accordion widget and adding 20 new items to the
    last content section. We're using the default section height here, that is, `auto`.
    So, had we not extended the `refresh()` method to allow this behavior after populating
    the fourth section, we would have seen a scrollbar here.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的是扩展手风琴小部件的`refresh()`方法，以允许在运行时将`heightStyle`选项更改为内容。默认实现不允许此操作。为了说明这个想法，请考虑上面的代码，我们正在创建手风琴小部件，并向最后一个内容部分添加20个新项。我们在这里使用的是默认部分高度，即`auto`。因此，如果我们没有扩展`refresh()`方法来允许此行为在填充第四部分后，我们会看到一个滚动条。
- en: Resizable content sections
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可调整大小的内容部分
- en: Resizable content sections allow the user to adjust the height by dragging the
    bottom of the section. This is a nice alternative having to rely on the `heightStyle`
    property. Thus, if each section of the accordion can be adjusted by the user,
    they have the freedom to tailor the accordion layout. For example, if the accordion
    has a tall section, with wasted space at the bottom, the user might choose to
    shrink the height of that section to gain a better view of the accordion, and
    other components of the UI for that matter.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 可调整大小的内容部分允许用户通过拖动部分底部来调整高度。这是一种很好的选择，而不是依赖于`heightStyle`属性。因此，如果手风琴的每个部分都可以由用户调整，则他们可以自由地定制手风琴布局。例如，如果手风琴有一个高的部分，在底部浪费了空间，用户可能会选择缩小该部分的高度，以更好地查看手风琴以及UI的其他组件。
- en: How to do it...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We'll extend the default accordion's `_create()` method by making each content's
    `div` within the accordion resizable using the resizable interaction widget.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过使用可调整大小的交互小部件使手风琴内的每个内容的`div`可调整大小来扩展默认手风琴的`_create()`方法。
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You'll see something similar to the following. Notice that the second section
    has been dragged down and has the resize mouse cursor.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到类似以下的内容。请注意，第二节已被向下拖动，并带有调整大小的鼠标光标。
- en: '![How to do it...](img/2186OS_01_03.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2186OS_01_03.jpg)'
- en: How it works...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Our new version of the `_create()` method works by first invoking the default
    accordion's `_create()` method. Once that completes, we find all content sections
    of the accordion and apply the `resizable()` widget. You'll notice, too, that
    we've told the resizable widget to only show a `south` handle. This means that
    the user will only be able to drag any given content section of the accordion
    up or down, using the cursor at the bottom of the section.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`_create()`方法的新版本首先调用默认手风琴的`_create()`方法。完成后，我们找到手风琴的所有内容部分，并应用`resizable()`小部件。您还会注意到，我们告诉可调整大小的小部件仅显示一个`south`手柄。这意味着用户只能使用部分底部的光标将手风琴的任何给定内容部分向上或向下拖动。
- en: This specialization of an accordion also provides a new implementation of the
    `_delete()` method. Once again, we're calling the original accordion's `_delete()`,
    after which we're cleaning up the new resizable components we added. This includes
    removing the `overflow` CSS property.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个手风琴的特殊化还提供了一个新的`_delete()`方法的实现。再次，我们在调用原始手风琴的`_delete()`之后，清理我们添加的新可调整大小组件。这包括删除`overflow`CSS属性。
- en: There's more...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We can extend our resizable behavior within the accordion by providing a means
    to turn it off. We'll add a simple `resizable` option to the accordion that checks
    whether or not to make the accordion sections resizable.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过提供关闭它的手段来扩展手风琴中的可调整大小行为。我们将在手风琴中添加一个简单的`resizable`选项，用于检查是否使手风琴部分可调整大小。
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Controlling spacing with themes
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用主题控制间距
- en: The space between accordion sections is controlled by the CSS theme framework.
    In particular, the visual structure for the accordion is defined by a set of CSS
    rules that can be modified to control the spacing between accordion sections.
    We could override the accordion theme CSS to adjust for more or less spacing between
    sections.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 手风琴部分之间的间距由CSS主题框架控制。特别是，手风琴的视觉结构由一组CSS规则定义，可以修改以控制手风琴部分之间的间距。我们可以覆盖手风琴主题CSS以调整部分之间的间距。
- en: How to do it...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to supply an additional CSS module to our UI—one that overrides
    the accordion structure supplied in the theme we happen to be using. There''s
    no need to fret, however, our change is a simple one. We''re going to update the
    `margin-top` property. In a new CSS file called `theme.accordion.css`, let''s
    add the following style rules:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为我们的 UI 提供一个额外的 CSS 模块，它将覆盖我们目前正在使用的主题中提供的手风琴结构。然而，无需担心，我们的更改很简单。我们将更新`margin-top`属性。在一个名为`theme.accordion.css`的新
    CSS 文件中，让我们添加以下样式规则：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now that we have the CSS, we need to include it in our HTML header. It should
    look something like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了 CSS，我们需要将其包含在我们的 HTML 头部。它应该类似于这样：
- en: '![How to do it...](img/2186OS_01_04.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/2186OS_01_04.jpg)'
- en: How it works...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We're copying the same CSS selector as is found in any jQuery UI theme. The
    particular property we've just changed alters the space between the accordion
    sections. Since we're overriding the default theme value, it's important to include
    our CSS files after the default theme file. This allows us to override the default
    theme instead of the default theme overriding our modifications.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们复制了与任何 jQuery UI 主题中找到的相同的 CSS 选择器。我们刚刚更改的特定属性改变了手风琴部分之间的间距。由于我们覆盖了默认主题值，所以将我们的
    CSS 文件包含在默认主题文件之后非常重要。这样我们就可以覆盖默认主题，而不是默认主题覆盖我们的修改。
- en: Sorting accordion sections
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对手风琴部分进行排序
- en: Using the sortable interaction widget, we're able to transform a static accordion
    section layout into something specified by the user. That is, sortable interaction
    widgets take a container element, and allow all child elements to be sorted in
    place. The user does this by dragging the element to the desired order.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用可排序交互式小部件，我们能够将静态手风琴部分布局转换为用户指定的内容。也就是说，可排序交互式小部件接受一个容器元素，并允许对所有子元素进行就地排序。用户通过将元素拖动到所需顺序来执行此操作。
- en: We'll look at how we can extend the accordion capabilities so that the sortable
    section functionality is encapsulated, and can be switched on by a configuration
    option at the time of creation.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看看如何扩展手风琴功能，以便在创建时可以通过配置选项打开可排序部分功能。
- en: How to do it...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'We have to perform several actions when the accordion widget is created, and
    when the accordion is destroyed. Here is how we extend the widget:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当手风琴小部件创建时，以及销毁手风琴时，我们必须执行几个操作。以下是我们如何扩展小部件的方式：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With our new accordion widget marked as `sortable`, users now have the ability
    to drag header sections around within the accordion. For instance, if the first
    accordion section belongs to the bottom, the user just drags it to the bottom.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们新的标记为`sortable`的手风琴小部件，用户现在可以在手风琴内拖动头部部分。例如，如果第一个手风琴部分属于底部，用户只需将其拖到底部。
- en: '![How to do it...](img/2186OS_01_05.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/2186OS_01_05.jpg)'
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: With the help of the `sortable()` interaction widget, we're able to extend the
    default accordion widget implementation to include sorting capabilities. As with
    any jQuery UI widget enhancements, we don't actually need to extend the widget
    in question; the new capabilities can always be tacked-on after the widget has
    been instantiated. However, as you'll see throughout this book, the best practice
    is to encapsulate customizations and present them to the widget client as a set
    of options.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 借助`sortable()`交互式小部件的帮助，我们能够扩展默认手风琴小部件实现，以包括排序功能。与任何 jQuery UI 小部件增强一样，我们实际上不需要扩展所讨论的小部件；新功能始终可以在小部件实例化后附加。然而，正如您将在本书中看到的，最佳实践是封装自定义内容并将其作为一组选项呈现给小部件客户端。
- en: Here, we've extended the set of available accordion options to include a `sortable`
    option. This is how we turn our customization on or off (it is a boolean value).
    The customized version of `_create()` that we've implemented will call the default
    version of the accordion's `_create()` method. Afterward, we'll see if the sortable
    behavior is turned off (in which case we have nothing to do, and so return). Likewise,
    our custom `_delete()` function checks if the sortable behavior has been turned
    on after calling the original delete functionality.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在此扩展了可用的手风琴选项集，包括一个`sortable`选项。这是我们打开或关闭自定义的方式（它是一个布尔值）。我们实现的自定义`_create()`版本将调用手风琴的`_create()`方法的默认版本。之后，我们将查看可排序行为是否被关闭（在这种情况下我们无需做任何事情，所以返回）。同样，我们的自定义`_delete()`函数在调用原始删除功能后检查可排序行为是否已打开。
- en: 'The tricky part of implementing sortable accordion sections is the fact that
    we have to make a slight DOM manipulation inside the accordion element. This is
    necessary in order to use the sortable interaction widget. Accordion widget markup
    is structured such that all sections are adjacent to one another. That is, we
    have an `h3` element, followed by a `div` element. This is one section, and is
    followed by another `h3` and another `div`, and so on. It is a flat structure.
    There are two ways to deal with this: alter the markup required to create the
    widget, or inject some slight DOM modifications, and the widget client is none-the-wiser.
    We''re going the latter route and not requiring the client to change their code.
    This is another best practice, to keep the existing widget client code functional
    when providing customizations.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 实现可排序手风琴部分的棘手部分在于我们必须在手风琴元素内进行轻微的 DOM 操作。这是为了使用可排序交互小部件所必需的。手风琴小部件的标记结构化，使得所有部分都相邻。也就是说，我们有一个
    `h3` 元素，后面跟着一个 `div` 元素。这是一个部分，并且后面跟着另一个 `h3` 和另一个 `div`，依此类推。这是一个平面结构。有两种处理方式：修改创建小部件所需的标记，或者注入一些轻微的
    DOM 修改，并且小部件客户端对此一无所知。我们选择后一种方式，不要求客户端更改其代码。这是另一个最佳实践，即在提供定制时保持现有小部件客户端代码的功能性。
- en: In our customized version of `_create()`, we're iterating over each accordion
    header and wrapping the header element and the corresponding content element in
    a `div` element so as to bundle them together. This way, the sortable widget knows
    how to move this bundle around. Had we not done this, the user would only be able
    to move the header section, thus severing it from its content. Finally, we're
    creating the sortable widget, restricting movement to the *y*-axis and setting
    the movable handle as the accordion header.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们定制的 `_create()` 版本中，我们正在迭代每个手风琴标题，并将标题元素和相应的内容元素包装在一个 `div` 元素中，以便将它们捆绑在一起。这样，可排序小部件就知道如何移动这个捆绑包了。如果我们没有这样做，用户只能移动标题部分，从而将其与内容分开。最后，我们正在创建可排序小部件，将移动限制为*y*轴，并将可移动手柄设置为手风琴标题。
- en: Our customized `_destroy()` function undoes our modifications before calling
    the original `_destroy()` method. This entails unwrapping our new `div` element
    and destroying the sortable widget.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定制的 `_destroy()` 函数在调用原始的 `_destroy()` 方法之前撤消我们的修改。这意味着取消包装我们的新 `div` 元素并销毁可排序小部件。
- en: Dragging-and-dropping between accordions
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在手风琴之间拖放
- en: Some applications require a more fluid layout than others, not just from a screen
    resolution perspective, but from a functional one too. The accordion widget is
    a static grouping component that is used to organize smaller components into sections.
    We can hide all the irrelevant material simply by expanding the section we're
    interested in. As we have seen in the *Sorting accordion sections* recipe, we
    can provide an accordion whose structure can be manipulated by the user. Indeed,
    this has become the expectation of the users en masse—UI configuration by drag-and-drop.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一些应用程序需要比其他更流畅的布局，不仅从屏幕分辨率的角度来看，而且从功能的角度来看也是如此。手风琴小部件是一个静态分组组件，用于将较小的组件组织成部分。我们只需展开感兴趣的部分，就可以隐藏所有不相关的材料。正如我们在*排序手风琴部分*的示例中看到的那样，我们可以提供一个手风琴，用户可以通过拖放来操作其结构。实际上，这已经成为用户大规模预期的事情——通过拖放进行
    UI 配置。
- en: The sortable accordion focuses on a single accordion. In the spirit of giving
    users freedom within the confines of the application of course, why don't we see
    if we can support moving an accordion section to a new accordion?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 可排序手风琴专注于单个手风琴。当然，在应用程序的范围内给予用户自由的精神下，我们为什么不试着看看我们是否能支持将手风琴部分移动到一个新的手风琴中呢？
- en: Getting ready
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'For this experiment, we''ll need two basic accordions. The markup should assume
    a form along the lines of the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个实验，我们需要两个基本的手风琴。标记应该假设如下所示的形式：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'With that in place, let''s turn this markup into two accordions. We''ll first
    extend the accordion widget with some fancy drag-and-drop behavior. The intent
    is to allow the user to drag accordion sections from the first widget to the second.
    Here is how it''s done:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，让我们将这个标记转换为两个手风琴。我们首先将手风琴小部件扩展为带有一些花哨的拖放行为。意图是允许用户将第一个小部件的手风琴部分拖到第二个小部件中。下面是具体操作：
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We now have two basic-looking accordion widgets. However, if the user is so
    inclined, they can drag a section of the first accordion into the second.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了两个看起来基本的手风琴小部件。然而，如果用户愿意，他们可以将第一个手风琴的部分拖到第二个手风琴中。
- en: '![How to do it...](img/2186OS_01_06.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186OS_01_06.jpg)'
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何运作的......
- en: This might seem like a lot of code at the first glance, but for relatively little
    (approximately 130 lines), we're able to drag accordion sections out of one accordion
    and into another. Let's break this down further.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，这可能看起来是很多的代码，但是只需要很少的工作（约130行左右），我们就能够将手风琴部分从一个手风琴拖放到另一个手风琴。让我们进一步解析一下。
- en: 'We''re adding two accordion options with this widget extension: `target` and
    `accept`. Target allows us to specify the destination of sections of this accordion.
    In the example, we used the second accordion as the target for the first accordion,
    meaning that we can drag from `target-accordion` and drop into `accept-accordion`.
    But, in order to make that happen, the second accordion needs to be told where
    to accept sections from; in this case, it is `target-accordion`. We''re essentially
    using these two options to establish a drag-and-drop contract between the two
    widgets.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过这个小部件扩展添加了两个手风琴选项：`target` 和 `accept`。目标允许我们指定手风琴的部分目的地。在这个例子中，我们将第二个手风琴作为第一个手风琴的目标，这意味着我们可以从`target-accordion`拖放到`accept-accordion`。但是，为了实现这一点，必须告诉第二个手风琴从哪里接受部分；在这种情况下，它是`target-accordion`。我们基本上使用这两个选项在两个小部件之间建立拖放合同。
- en: 'This example uses two interaction widgets: draggable and sortable. `target-accordion`
    uses draggable. If the `target` option was specified, the `_createTarget()` method
    gets called. The `_createTarget()` method goes through the accordion sections,
    wraps them in a `div` element, and creates a `draggable()` widget. This is how
    we''re able to drag sections out of the first accordion.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子使用了两个交互式小部件：draggable和sortable。`target-accordion`使用了draggable。如果指定了`target`选项，将调用`_createTarget()`方法。`_createTarget()`方法将浏览手风琴部分，将它们包装在`div`元素中，并创建一个`draggable()`小部件。这就是我们能够从第一个手风琴拖动部分的方法。
- en: If the `accept` option was specified, the `_createAccept()` method gets called.
    This follows the same pattern of wrapping each accordion header with its content
    in a `div` element. Except here, we're making the entire accordion widget `sortable()`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定了`accept`选项，将调用`_createAccept()`方法。这遵循将每个手风琴标题与其内容包装在`div`元素中的相同模式。但在这里，我们使整个手风琴小部件`sortable()`。
- en: This may seem counterintuitive. Why would we make the second accordion that
    wants to accept new sections into sortable? Would it not make more sense to use
    droppable? We could go down that route, but it would involve a lot of work where
    we're utilizing the `connectToSortable` option instead. This is a `draggable`
    option specified in `_createTarget()` where we say that we would like to drop
    these draggable items into a sortable widget. In this example, sortable is the
    second accordion.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来反直觉。为什么我们要使希望接受新部分的第二个手风琴可排序？使用droppable不是更合理吗？我们可以选择这条路线，但这将涉及大量使用`connectToSortable`选项的工作。这是在`_createTarget()`中指定的`draggable`选项，我们在其中说我们想把这些可拖动的项放到一个可排序的小部件中。在这个例子中，可排序的是第二个手风琴。
- en: This solves the problem of deciding on where exactly to drop the accordion section
    relative to other sections (the sortable widget knows how to handle that). However,
    an interesting constraint with this approach is that we must clone the dragged
    item. That is, the section that ultimately gets dropped into the new accordion
    is just a clone, not the original. So we must deal with that at drop time.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这解决了关于相对于其他部分在哪里放置手风琴部分的问题（可排序小部件知道如何处理）。然而，在这种方法中的一个有趣的约束是，我们必须克隆拖动的项目。也就是说，最终被放置到新手风琴中的部分只是一个克隆，而不是原件。因此，我们必须在放置时处理这个问题。
- en: As part of the sortable options defined in `_createAccept()`, we provide a `stop`
    callback. This callback function is fired when we've dropped a new accordion section
    into the accordion. Actually, this gets fired for any sorting activity, including
    new sections being dropped. So, we must take care to check what we're actually
    working with. We do so by checking whether the item has a `draggable` class attached
    to it, and if so, we can assume we're dealing with a new accordion section.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在`_createAccept()`中定义的排序选项的一部分，我们提供了一个`stop`回调。当我们将新的手风琴部分放入手风琴时，将触发这个回调函数。实际上，这对于任何排序活动都会触发，包括新的部分被放置。因此，我们必须小心检查我们实际上正在处理什么。我们通过检查项目是否附有`draggable`类来做到这一点，如果是，我们可以假设我们正在处理一个新的手风琴部分。
- en: Keep in mind that this newly dropped accordion section is simply a clone of
    the original, so some interesting things need to happen before we can start inserting
    it into the accordion. First, this new section has the same ID as the original.
    Eventually, we're going to remove the original from the first accordion, so we
    store that ID for later use. Once we have it, we can get rid of the dropped section's
    ID so as to avoid duplicates.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这个新添加的折叠菜单部分只是原始部分的克隆，因此在我们开始将其插入折叠菜单之前，需要发生一些有趣的事情。首先，这个新部分具有与原始部分相同的 ID。最终，我们将从第一个折叠菜单中删除原始部分，因此我们存储了该
    ID 以供以后使用。一旦我们获得了它，我们就可以摆脱被删除部分的 ID，以避免重复。
- en: With that taken care of, we have the new DOM element in place, but the accordion
    widget knows nothing about it. This is where we reload the headers, including
    the newly-dropped header. The new accordion section still isn't functional because
    it doesn't handle events properly, so expanding the new section will not work,
    for example. To avoid strange behavior, we turn off all event handlers and rebind
    them. This puts the new accordion in its new context while the events are turned
    on.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 确保完成这一步之后，我们已经在适当的位置放置了新的 DOM 元素，但是折叠菜单部件对此一无所知。这就是我们重新加载标题的地方，包括新添加的标题。新的折叠菜单部分仍然不可用，因为它没有正确处理事件，所以，例如，展开新部分将不起作用。为了避免奇怪的行为，我们关闭所有事件处理程序并重新绑定它们。这样就将新的折叠菜单放在了新的上下文中，而事件则保持开启状态。
- en: We now have a new section in `accept-accordion`. But we can't forget about the
    original section. It still needs to be removed. Recall that we stored the original
    section's DOM ID, and we can now safely remove that section and refresh the accordion
    to adjust the height.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在 `accept-accordion` 中有了一个新的部分。但是我们不能忘记原来的部分。它仍然需要被移除。回想一下，我们存储了原始部分的 DOM
    ID，现在我们可以安全地移除该部分并刷新折叠菜单以调整高度。
