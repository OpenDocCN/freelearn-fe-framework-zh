["```js\n    PS> Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) \n    ```", "```js\n$ iwr -useb get.scoop.sh | iex \n```", "```js\n    $ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" \n    ```", "```js\n    $ brew tap caskroom/cask \n    ```", "```js\nPS> Install-Script -Name setup-windows-dev-env\nPS> setup-windows-dev-env.ps1 \n```", "```js\n$> bash <(wget -O - https://git.io/JvHi1) \n```", "```js\n    PS> choco install git github-desktop -y \n    ```", "```js\n    $ brew install git && brew cask install github \n    ```", "```js\n    $ github path/to/repo \n    ```", "```js\n    $ github . \n    ```", "```js\n    PS> git config --global credential.helper wincred \n    ```", "```js\n    $ git credential-osxkeychain\n    $ git config --global credential.helper osxkeychain \n    ```", "```js\n    PS> choco install nodejs-lts -y \n    ```", "```js\n    $ brew install node@10 \n    ```", "```js\n    PS> choco install VisualStudioCode -y \n    ```", "```js\n    $ brew cask install visual-studio-code \n    ```", "```js\n    PS> choco install docker docker-for-windows -y \n    ```", "```js\n    $ brew install docker \n    ```", "```js\n    $ npm i -g now \n    ```", "```js\n    $ now login \n    ```", "```js\n    > We sent an email to xxxxx@gmail.com. Please follow the steps provided inside it and make sure the security code matches Classical Slow Worm\n    √ Email confirmed\n    > Congratulations! You are now logged in. In order to deploy something, run `now` \n    ```", "```js\n    $ npm i -g firebase-tools \n    ```", "```js\n    $ firebase login \n    ```", "```js\n    Waiting for authentication...\n    +  Success! Logged in as xxxxxx@gmail.com \n    ```", "```js\n    PS> choco install gcloudsdk -y \n    ```", "```js\n    $ scoop bucket add extras\n    $ scoop install gcloud \n    ```", "```js\n    $ brew install google-cloud-sdk \n    ```", "```js\n    PS> choco upgrade awscli -y \n    ```", "```js\n    $ brew install awscli\n    $ brew upgrade awscli \n    ```", "```js\n    **setup-windows-dev-env.ps1**\n    # This script is intentionally kept simple to demonstrate basic automation techniques.\n    Write-Output \"You must run this script in an elevated command shell, using 'Run as Administrator'\"\n    $title = \"Setup Web Development Environment\"\n    $message = \"Select the appropriate option to continue (Absolutely NO WARRANTIES or GUARANTEES are provided):\"\n    $yes = New-Object System.Management.Automation.Host.ChoiceDescription \"&Install Software using Chocolatey\", `\n    \"Setup development environment.\"\n    $no = New-Object System.Management.Automation.Host.ChoiceDescription \"&Exit\", `\n    \"Do not execute script.\"\n    $options = [System.Management.Automation.Host.ChoiceDescription[]]($yes, $no)\n    $result = $host.ui.PromptForChoice($title, $message, $options, 1)\n    switch ($result) {\n      0 {\n        Write-Output \"Installing chocolatey\"\n        Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n        Write-Output \"Refreshing environment variables. If rest of the script fails, restart elevated shell and rerun script.\"\n        $env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\", \"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\", \"User\")\n        Write-Output \"Assuming chocolatey is already installed\"\n        Write-Output \"Installing Git & GitHub Desktop\"\n        choco.exe upgrade git github-desktop -y\n        Write-Output \"Installing NodeJS and NVS\"\n        choco.exe upgrade nodejs-lts nvs -y\n        Write-Output \"Installing Docker\"\n        choco.exe upgrade docker docker-for-windows -y\n        Write-Output \"Installing AWS\"\n        choco.exe upgrade awscli -y\n        Write-Output \"Installing VS Code\"\n        choco.exe upgrade VisualStudioCode -y\n        RefreshEnv.cmd\n        Write-Output \"Results:\"\n        Write-Output \"Verify installation of AWS, Docker, GitHub Desktop and VS Code manually.\"\n        $gitVersion = git.exe --version\n        Write-Output \"git: $gitVersion\"\n        $nodeVersion = node.exe -v\n        Write-Output \"Node: $nodeVersion\"\n        $npmVersion = npm.cmd -v\n        Write-Output \"npm: $npmVersion\"\n      }\n      1 { \"Aborted.\" }\n    } \n    ```", "```js\n    PS> Set-ExecutionPolicy Unrestricted; .\\setup-windows-dev-env.ps1 \n    ```", "```js\nPS> Install-Script -Name setup-windows-dev-env \nPS> setup-windows-dev-env.ps1 \n```", "```js\n    **setup-mac-dev-env.sh**\n    #!/bin/bash\n    echo \"Execute Installation Script\"\n    read -r -p \"Absolutely NO WARRANTIES or GUARANTEES are provided. Are you sure you want to continue? [y/N] \" response\n    if [[ \"$response\" =~ ^([yY][eE][sS]|[yY])+$ ]]\n    then\n        echo \"Installing brew\"\n\n        /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n        echo \"Installing git\"\n        brew install git\n        brew upgrade git\n        echo \"Installing GitHub Desktop\"\n        brew cask install github\n        brew cask upgrade github\n        echo \"Installing NodeJS\"\n        brew install node@12\n        brew upgrade node@12\n        echo \"Installing Docker\"\n        brew cask install docker\n        brew cask upgrade docker\n        echo \"Installing AWS\"\n        brew install awscli\n        brew upgrade awscli\n        echo \"Installing VS Code\"\n        brew cask install visual-studio-code\n        brew cask upgrade visual-studio-code\n        echo \"Results:\"\n        echo \"Verify installation of AWS, Docker, GitHub Desktop and VS Code manually.\"\n        gitVersion=$(git --version)\n        echo \"git: $gitVersion\"\n        nodeVersion=$(node -v)\n        echo \"Node: $nodeVersion\"\n        npmVersion=$(npm -v)\n        echo \"npm: $npmVersion\"\n    else\n        echo \"Aborted.\"\n    fi \n    ```", "```js\n    $ ./setup-mac-dev-env.sh \n    ```", "```js\necho \"Checking if brew is installed\"\nwhich -s brew\nif [[ $? != 0 ]] ; then\n    echo \"Installing brew\"\n    /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" < /dev/null\nelse\n    echo \"Found brew\"\nfi\necho \"Checking for Node version ${NODE_VERSION}\"\nnode -v | grep ${NODE_VERSION}\nif [[ $? != 0 ]] ; then\n    echo \"Installing Node version ${NODE_VERSION}\"\n    brew install nodejs\nelse\n    echo \"Found Node version ${NODE_VERSION}\"\nfi \n```", "```js\nPS> mkdir c:\\dev \nPS> cd c:\\dev \n```", "```js\n$ mkdir ~/dev\n$ cd ~/dev \n```", "```js\n    $ npx @angular/cli new local-weather-app\n    ...\n    CREATE local-weather-app/src/environments/environment.ts (662 bytes)\n    CREATE local-weather-app/src/app/app-routing.module.ts (245 bytes) CREATE local-weather-app/src/app/app.module.ts (393 bytes)\n    CREATE local-weather-app/src/app/app.component.html (1152 bytes) CREATE local-weather-app/src/app/app.component.spec.ts (1086 bytes) CREATE local-weather-app/src/app/app.component.ts (207 bytes) CREATE local-weather-app/src/app/app.component.css (0 bytes)\n    CREATE local-weather-app/e2e/protractor.conf.js (752 bytes) CREATE local-weather-app/e2e/tsconfig.e2e.json (213 bytes) CREATE local-weather-app/e2e/src/app.e2e-spec.ts (632 bytes) CREATE local-weather-app/e2e/src/app.po.ts (251 bytes)\n    added 1076 packages from 1026 contributors and audited 42608 packages in 62.832s\n    found 0 vulnerabilities Successfully initialized git.\n    Project 'local-weather-app' successfully created. \n    ```", "```js\nlocal-weather-app\n├── .editorconfig\n├── .git\n├── .gitignore\n├── angular.json\n├── e2e\n│ ├── protractor.conf.js\n│ ├── src\n│ │ ├── app.e2e-spec.ts\n│ │ └── app.po.ts\n│ └── tsconfig.e2e.json\n├── package.json\n├── README.md\n├── src\n│ ├── app\n│ │ ├── app-routing.module.ts\n│ │ ├── app.component.css\n│ │ ├── app.component.html\n│ │ ├── app.component.spec.ts\n│ │ ├── app.component.ts\n│ │ └── app.module.ts\n│ ├── assets\n│ │ └── .gitkeep\n│ ├── browserslist\n│ ├── environments\n│ │ ├── environment.prod.ts\n│ │ └── environment.ts\n│ ├── favicon.ico\n│ ├── index.html\n│ ├── karma.conf.js\n│ ├── main.ts\n│ ├── polyfills.ts\n│ ├── styles.css\n│ ├── test.ts\n│ ├── tsconfig.app.json\n│ ├── tsconfig.spec.json\n│ └── tslint.json\n├── tsconfig.json\n└── tslint.json \n```", "```js\n    **package.json**\n    {\n      \"name\": \"local-weather-app\", \n      \"version\": \"0.0.0\",\n      \"license\": \"MIT\",\n    ... \n    ```", "```js\n    **package.json**\n    ...\n    \"scripts\": { \n      \"ng\": \"ng\",\n      \"start\": \"ng serve\",\n      \"build\": \"ng build\",\n      \"test\": \"ng test\",\n      \"lint\": \"ng lint\",\n      \"e2e\": \"ng e2e\"\n    },\n    ... \n    ```", "```js\n    **package.json**\n    ...\n      \"start\": \"ng serve --port 5000\",\n    ... \n    ```", "```js\n    **package.json**\n    ...\n      \"dependencies\": { \n        \"@angular/animations\": \"~9.0.0\",\n        \"@angular/common\": \"~9.0.0\",\n        \"@angular/compiler\": \"~9.0.0\",\n        \"@angular/core\": \"~9.0.0\",\n        \"@angular/forms\": \"~9.0.0\",\n        \"@angular/platform-browser\": \"~9.0.0\",\n        \"@angular/platform-browser-dynamic\": \"~9.0.0\",\n        \"@angular/router\": \"~9.0.0\",\n        \"rxjs\": \"~6.5.3\",\n        \"tslib\": \"^1.10.0\",\n        \"zone.js\": \"~0.10.2\"\n      },\n    ... \n    ```", "```js\n**package.json**\n...\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"~0.900.0\",\n    \"@angular/cli\": \"~9.0.0\",\n    \"@angular/compiler-cli\": \"~9.0.0\",\n    \"@angular/language-service\": \"~9.0.0\",\n    \"@types/node\": \"^12.11.1\",\n    \"@types/jasmine\": \"~3.4.0\",\n    \"@types/jasminewd2\": \"~2.0.3\",\n    \"codelyzer\": \"^5.1.2\",\n    \"jasmine-core\": \"~3.5.0\",\n    \"jasmine-spec-reporter\": \"~4.2.1\",\n    \"karma\": \"~4.3.0\",\n    \"karma-chrome-launcher\": \"~3.1.0\",\n    \"karma-coverage-istanbul-reporter\": \"~2.1.0\",\n    \"karma-jasmine\": \"~2.0.1\",\n    \"karma-jasmine-html-reporter\": \"^1.4.2\",\n    \"protractor\": \"~5.4.2\",\n    \"ts-node\": \"~8.3.0\",\n    \"tslint\": \"~5.18.0\",\n    \"typescript\": \"~3.6.4\"\n  }\n... \n```", "```js\n    projects/ch2 \n    ```", "```js\n    npx ng serve ch2 \n    ```", "```js\n    npx ng test ch2 --watch=false \n    ```", "```js\n    npm i -g mrm-task-angular-vscode \n    ```", "```js\n    npx mrm angular-vscode \n    ```", "```js\n    npm i -g mrm-task-npm-docker \n    ```", "```js\n    npx mrm npm-docker \n    ```", "```js\n**.vscode/settings.json**\n{\n  \"debug.openExplorerOnEnd\": true,\n  \"editor.tabSize\": 2,\n  \"editor.rulers\": [90],\n  \"editor.autoIndent\": \"full\",\n  \"editor.cursorBlinking\": \"solid\",\n  \"editor.formatOnType\": false,       // Adjust the intensity of\n  \"editor.formatOnPaste\": false,         auto-formatting to taste\n  \"editor.formatOnSave\": true,\n  \"editor.minimap.enabled\": false,\n  \"editor.codeActionsOnSave\": {\n    \"source.organizeImports\": false,\n    \"source.fixAll.tslint\": true,\n  },\n  \"explorer.openEditors.visible\": 0,\n  \"files.trimTrailingWhitespace\": true,\n  \"files.autoSave\": \"onFocusChange\",\n  \"git.confirmSync\": false,\n  \"git.enableSmartCommit\": true,\n  \"npm.enableScriptExplorer\": true,\n  \"typescript.tsdk\": \"node_modules/typescript/lib\",\n  \"workbench.iconTheme\": \"material-icon-theme\",     // Requires \n                                                  Material Icon \n                                                Theme Extension \n  \"auto-close-tag.SublimeText3Mode\": true,          // Requires Auto \n                                              Close Tag Extension \n  \"html.autoClosingTags\": false, \n  \"peacock.affectActivityBar\": true,               // Requires Peacock \n  \"peacock.affectStatusBar\": true,                           Extension\n  \"peacock.affectTitleBar\": false,\n  \"workbench.colorCustomizations\": {\n    \"activityBar.background\": \"#d04649\",\n    \"activityBar.activeBorder\": \"#37cb34\",\n    \"activityBar.foreground\": \"#e7e7e7\",\n    \"activityBar.inactiveForeground\": \"#e7e7e799\",\n    \"activityBarBadge.background\": \"#37cb34\",\n    \"activityBarBadge.foreground\": \"#15202b\",\n    \"statusBar.background\": \"#b52e31\",\n    \"statusBarItem.hoverBackground\": \"#d04649\",\n    \"statusBar.foreground\": \"#e7e7e7\"\n  },\n  \"peacock.color\": \"#b52e31\",\n  \"gitlens.menus\": {                              // Requires GitLens \n    \"editorGroup\": false                               Extension \n  }, \n  \"ng-evergreen.upgradeChannel\": \"Latest\"            // Requires Angular \n                                                  Evergreen Extension \n} \n```", "```js\n**.vscode/extensions.json**\n{\n  \"recommendations\":[\n    \"johnpapa.angular-essentials\",\n    \"PKief.material-icon-theme\",\n    \"formulahendry.auto-close-tag\",\n    \"ms-azuretools.vscode-docker\",\n    \"eamodio.gitlens\",\n    \"WallabyJs.quokka-vscode\",\n    \"amatiasq.sort-imports\",\n    \"DSKWRK.vscode-generate-getter-setter\",\n    \"esbenp.prettier-vscode\",\n    \"HookyQR.beautify\",\n    \"expertly-simple.ng-evergreen\",\n    \"msjsdiag.debugger-for-edge\"\n  ]\n} \n```", "```js\nimport { AppComponent } from \"./app.component\"; \n```", "```js\nimport { AppComponent } from './app.component' \n```", "```js\n     npm i -D prettier tslint-config-prettier tslint-plugin-prettier\n      npm i -D js-beautify\n      npm i -D import-sort import-sort-cli import-sort-parser-typescript import-sort-style-module\n      npm i -D tslint tslint-etc \n    ```", "```js\n    **package.json**\n    ...\n      \"importSort\": {\n        \".ts, .tsx\": {\n          \"parser\": \"typescript\",\n          \"style\": \"module\",\n          \"options\": {}\n        }\n      }\n    ... \n    ```", "```js\n    **tslint.json**\n    **{**\n     **\"extends\": [**\n     **\"tslint:recommended\",**\n     **\"tslint-config-prettier\",**\n     **\"tslint-plugin-prettier\",**\n     **\"tslint-etc\"**\n     **],**\n     **\"rules\": {**\n     **\"prettier\": true,**\n     **\"no-unused-declaration\": true,**\n    **...**\n    \"quotemark\": [true, \"single\", \"avoid-escape\"],\n    ...\n    \"semicolon\": [ true, \"never\"],\n    ...\n    \"max-line-length\": [ true,90],\n    ...\n    } \n    ```", "```js\n    **.jsbeautifyrc**\n    {\n      \"indent_size\": 2,\n      \"wrap_line_length\": 90,\n      \"language\": {\n        \"html\": [\n          \"html\"\n        ]\n      }\n    } \n    ```", "```js\n    **. prettierrc**\n    {\n      \"tabWidth\": 2,\n      \"useTabs\": false,\n      \"printWidth\": 90,\n      \"semi\": false,\n      \"singleQuote\": true,\n      \"trailingComma\": \"es5\",\n      \"jsxBracketSameLine\": true\n    } \n    ```", "```js\n    **. prettierignore**\n    **/*.html \n    ```", "```js\n    **package.json**\n    ...\n      \"scripts\": {\n        \"style:fix\": \"import-sort --write \\\"**/{src,tests,e2e}/*.ts\\\" && prettier --write \\\"**/{src,tests,e2e}/*.{*css,ts}\\\" && js-beautify \\\"src/**/*.html\\\"\",\n        \"style\": \"import-sort -l \\\"**/{src,tests,e2e}/*.ts\\\" && prettier --check \\\"**/{src,tests,e2e}/*.{*css,ts}\\\"\",  ...\n      }\n    ... \n    ```", "```js\n    **package.json**\n    ...\n      \"scripts\": {\n      ...\n        \"lint\": \"tslint --config tslint.json --project . -e \\\"**/{test,polyfills}.ts\\\"\",\n        \"lint:fix\": \"tslint --config tslint.json --fix --project . -e \\\"**/{test,polyfills}.ts\\\"\",  ...\n      }\n    ... \n    ```", "```js\n    $ ng completion --bash >> ~/.bashrc\n    $ source ~/.bashrc \n    ```", "```js\n    $ ng completion --zsh >> ~/.zshrc\n    $ source ~/.zshrc \n    ```", "```js\n    $ ng completion --bash >> ~/.bash_profile\n    $ source ~/.bash_profile \n    ```"]