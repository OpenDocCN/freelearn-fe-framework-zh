- en: Handling Angular Animation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理Angular动画
- en: In this chapter, we will learn about Angular animations. Animation; the very
    word sounds fun and creative, so tighten your seat belt; we will have fun learning
    Angular animations. Motion in web applications is one of the critical and crucial
    design factors and is a primary driver for good user experience. Transitions in
    particular are of great interest, as they enable the elements of the applications
    move to from one state or another.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习关于Angular动画。动画；这个词听起来很有趣和创造性，所以系好安全带；我们将乐在学习Angular动画。Web应用程序中的动作是关键和重要的设计因素之一，也是良好用户体验的主要驱动因素。特别是过渡，它们非常有趣，因为它们使应用程序的元素从一个状态移动到另一个状态。
- en: 'The following topics are covered in detail in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章详细介绍以下主题：
- en: Introduction to Angular animations
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Angular动画
- en: Built-in classes in Angular 2 to support animation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 2中内置的类来支持动画
- en: Understanding and learning to use animation modules, `transition`, `states`,
    `keyframes`, and so on
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解和学习如何使用动画模块，`transition`，`states`，`keyframes`等
- en: Animating page transitions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面过渡动画
- en: Animating toggle/collapse accordion slides
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画切换/折叠手风琴幻灯片
- en: Introduction to Angular animations
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Angular动画
- en: Angular comes with solid native support for animations since motion and transition
    are a major part of any application.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Angular自带了对动画的坚实本地支持，因为运动和过渡是任何应用程序的重要部分。
- en: Angular has a built-in animation engine, which also supports and extends the
    Web animations API that runs on most modern browsers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Angular具有内置的动画引擎，还支持和扩展了运行在大多数现代浏览器上的Web动画API。
- en: We have to install Angular animations separately in your project folder. We
    will create some examples for animations in the following sections.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须在项目文件夹中单独安装Angular动画。我们将在接下来的部分中创建一些动画示例。
- en: Installing the Angular animations library
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Angular动画库
- en: As we discussed earlier, Angular animations have been forked out as a separate
    library and need to be installed separately.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，Angular动画已经被分离出来作为一个单独的库，需要单独安装。
- en: 'In this section, we will discuss how to get the latest Angular animation version
    and install it; follow these steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将讨论如何获取最新的Angular动画版本并安装它；按照以下步骤进行：
- en: Get the latest Angular animations library.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取最新的Angular动画库。
- en: 'You can install it using the following `npm` command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下`npm`命令进行安装：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Running the preceding command will save the latest version of the Angular animations
    library and add it as a dependency in the `package.json` file.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述命令将保存最新版本的Angular动画库，并将其添加为`package.json`文件中的依赖项。
- en: Verify the latest installed Angular animation library.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证最新安装的Angular动画库。
- en: To make sure that we have installed the Angular animations library, open the
    `package.json` file, and there should be an entry of `@animations/animations`
    in the list of dependencies.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 确保我们已经安装了Angular动画库，打开`package.json`文件，应该在依赖列表中有`@animations/animations`的条目。
- en: 'Once Angular animations library has been imported and installed correctly,
    the `package.json` file should look the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Angular动画库已经被正确导入和安装，`package.json`文件应该看起来像以下的截图：
- en: '![](assets/88d1a258-fd8a-4583-bc5f-bcf22acf8119.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/88d1a258-fd8a-4583-bc5f-bcf22acf8119.png)'
- en: Import the Angular animations library inside the `app.module.ts` file.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app.module.ts`文件中导入Angular动画库。
- en: 'We need to import the Angular animations library in our `app.module.ts` file.
    For including the library, we will use the following code snippet:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`app.module.ts`文件中导入Angular动画库。为了包含该库，我们将使用以下代码片段：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Include the Angular animations library in imports for `ngModule` decorator:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ngModule`装饰器的导入中包含Angular动画库：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code snippet, we are just importing `BrowserAnimationsModule`
    into our `ngModule` to make it available for use across the application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们只是将`BrowserAnimationsModule`导入到我们的`ngModule`中，以便在整个应用程序中使用。
- en: Great! Now we have the Angular animations library as part of our application,
    and we can continue building our components as usual with animations and effects.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在我们的应用程序中有了Angular动画库，我们可以继续像往常一样构建我们的组件，添加动画和效果。
- en: Before we start writing examples of components using animations, it's important
    for us to spend some time and explore all the available classes in Angular animations,
    that we can take advantage of.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写使用动画的组件示例之前，重要的是花一些时间探索Angular动画中所有可用的类，以便我们可以利用它们。
- en: Angular animation - Specific functions
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular动画 - 特定函数
- en: As mentioned in the earlier section, Angular comes with a separate animations
    library of its own, which has a lot of built-in classes and methods to support
    various animations.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Angular自带了一个独立的动画库，其中有许多内置类和方法来支持各种动画。
- en: 'Let''s learn about the various built-in classes available in this section:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解本节中提供的各种内置类：
- en: '`trigger`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trigger`'
- en: '`transition`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transition`'
- en: '`state`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state`'
- en: '`style`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`style`'
- en: '`animate`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`animate`'
- en: We will learn each of the afore mentioned methods in detail but before we do
    that, let's quickly see the general syntax for using these methods.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细学习上述每种方法，但在这之前，让我们快速看一下使用这些方法的一般语法。
- en: 'An example of general syntax for writing animations is as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 编写动画的一般语法示例如下：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s quickly analyze the preceding code in detail:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前面的代码：
- en: We are defining a trigger named `slideInOut`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义一个名为`slideInOut`的触发器。
- en: 'We are defining two `states`: `in` and `out`.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义两个`states`：`in`和`out`。
- en: With each of the states, we are assigning a style, that is, the CSS `transform`
    property for each of the respective states.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个状态，我们都分配了一个样式，即每个相应状态的CSS `transform`属性。
- en: We are also adding `transition` to mention the `state` and `animation` details.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还添加了`transition`来提及`state`和`animation`的细节。
- en: Looks simple, right? Yep, you bet it is!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很简单，对吧？是的，当然！
- en: Now that we know the syntax of how to write animations, let's learn about each
    of these methods available in the Angular animation library, in some depth.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何编写动画的语法，让我们深入了解Angular动画库中提供的每种方法。
- en: Trigger
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 触发器
- en: Trigger defines a name that will trigger the animation. Trigger names help us
    identify which trigger should be triggered based on events.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器定义了一个将触发动画的名称。触发器名称帮助我们确定基于事件应该触发哪个触发器。
- en: 'The general syntax to define a trigger is as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 定义触发器的一般语法如下：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the preceding code syntax, we are defining the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码语法中，我们正在定义以下内容：
- en: Trigger is defined by passing a mandatory parameter, the name and optional parameters,
    which can include `state` and `transition`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过传递一个必需的参数来定义触发器，即名称和可选参数，其中可以包括`state`和`transition`。
- en: Trigger name; we define a name to identify the trigger.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 触发器名称；我们定义一个名称来识别触发器。
- en: Optionally we can also define our states and transitions as parameters in the
    trigger definition.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以在触发器定义中将我们的状态和转换定义为参数。
- en: States
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态
- en: States are the defined animation property of an element at a given point of
    time.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 状态是元素在特定时间点的定义动画属性。
- en: States are our application's logical states, for example, active and inactive.
    We define the state name and the respective style properties for the state.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 状态是我们应用程序的逻辑状态，例如活动和非活动。我们为状态定义状态名称和相应的样式属性。
- en: 'The general syntax for writing syntax to define states is as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 定义状态的语法的一般语法如下：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the preceding code syntax, we are defining the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码语法中，我们正在定义以下内容：
- en: We are defining a `state` by the name `'in'`, which is one of the logical states
    in our application.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义一个名为`'in'`的`state`，这是我们应用程序中的一个逻辑状态。
- en: In style, we define the `CSS` properties of the state that needs to be applied
    to the element. Regular `CSS` style attributes are defined here.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在样式中，我们定义了需要应用于元素的状态的`CSS`属性。常规的`CSS`样式属性在这里被定义。
- en: Transitions
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过渡
- en: Transitions allow elements to move smoothly from one state to another. In the
    transition, we define various states (one or more) of animations.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡允许元素在不同状态之间平滑移动。在过渡中，我们定义了各种状态（一个或多个）的动画。
- en: States are part of transitions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 状态是过渡的一部分。
- en: 'The general syntax for writing a `transition` is as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 编写`transition`的一般语法如下：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code syntax, we are defining the following
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码语法中，我们正在定义以下内容
- en: We are defining our transition states, that is, from start state to the end
    state. In our syntax it is from in state to out state.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义我们的过渡状态，即从起始状态到结束状态。在我们的语法中，它是从in状态到out状态。
- en: 'The animate options are as follows:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画选项如下：
- en: 'Easing: How smoothly the animation takes place'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缓动：动画进行的平滑程度
- en: 'Duration: how long the animation takes to run from start to finish'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续时间：动画从开始到结束运行的时间
- en: 'Delay : The delay controls the length of time between the animation trigger
    and the beginning of the transition.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 延迟：延迟控制动画触发和过渡开始之间的时间长度。
- en: With a strong understanding of the concepts and syntax of how to write Angular
    animations, let's go ahead and create examples using all the preceding functions
    in the following sections.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对如何编写Angular动画的概念和语法有着深刻的理解，让我们继续使用前面的所有函数来创建示例。
- en: Animating page transitions
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 页面过渡动画
- en: In the preceding section, we created a few states for animations. In this section,
    we will learn how to create transitions using states.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们为动画创建了一些状态。在本节中，我们将学习如何使用状态创建过渡。
- en: '`transition` is the most important method in the Angular animations library
    since it''s responsible for all effects and state changes.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition`是Angular动画库中最重要的方法，因为它负责所有效果和状态变化。'
- en: 'Let''s create an example of a complete page transition. We will create the
    component class, `learn-animation.component.ts`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个完整页面过渡的示例。我们将创建组件类`learn-animation.component.ts`：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s analyze the preceding code in detail to understand Angular animations:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前面的代码，以了解Angular动画：
- en: We are defining a trigger named `customHover`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义一个名为`customHover`的触发器。
- en: 'We are defining two `states`: `inactive` and `active`.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义两个`states`：`inactive`和`active`。
- en: With each of the states, we are assigning a style, that is, CSS; `transform`,
    and `backgroundColor` properties for each of the respective states.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个状态，我们都分配了一个样式，即CSS；对于各自的状态，我们分配了`transform`和`backgroundColor`属性。
- en: 'We are also adding transition to mention the state and animation details:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还添加了过渡来提及状态和动画细节：
- en: '`transition` affects when the state moves from `inactive` to `active`.'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`transition`影响状态从`inactive`到`active`的移动。'
- en: '`transition` affects when the state moves from `active` to `inactive`.'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`transition`影响状态从`active`到`inactive`的移动。'
- en: We are defining a `toggleBackground` method that, which when called upon, will
    toggle states from `inactive` to `active` and vice versa.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义一个`toggleBackground`方法，当调用时，将从`inactive`状态切换到`active`状态，反之亦然。
- en: 'Now that we have created the component class, we have called the `toggleBackground`
    method in our `learn-animation.component.html` template:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了组件类，在我们的`learn-animation.component.html`模板中调用了`toggleBackground`方法：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s analyze the preceding code in detail:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前面的代码：
- en: In the `learn-animation.component.html`, we are defining a `div` element.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`learn-animation.component.html`中，我们正在定义一个`div`元素。
- en: We are binding the `mouseover` and `mouseout` events with the `toggleBackground`
    method.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在将`mouseover`和`mouseout`事件与`toggleBackground`方法进行绑定。
- en: Since we defined our trigger as `@customHover` we will use this for property
    binding. On any element that we place `[@customHover]`, the animation defined
    will be applied.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们将触发器定义为`@customHover`，我们将使用它进行属性绑定。在我们放置`[@customHover]`的任何元素上，将应用所定义的动画。
- en: As we have applied property binding, the value for the property `@customHover`
    will toggle between `active` and `inactive`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们应用了属性绑定，属性`@customHover`的值将在`active`和`inactive`之间切换。
- en: When we take the mouse over of the element, the `toggleBackground` method is
    called, and we see the background color change along with the `transform` property.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们将鼠标悬停在元素上时，将调用`toggleBackground`方法，并且我们将看到背景颜色随着`transform`属性的变化而改变。
- en: On the mouse-out event, again the `toggleBackground` method is called and the
    style gets reset back to the original.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在鼠标移出事件上，再次调用`toggleBackground`方法，并且样式将重置回原始状态。
- en: 'Run the app, and we should see the output in the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，我们应该在以下截图中看到输出：
- en: '![](assets/bcd37f1e-17b7-4f3c-99ba-9c5e7ac1258e.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bcd37f1e-17b7-4f3c-99ba-9c5e7ac1258e.png)'
- en: In this section, we discussed how to use basic Angular animation. In the next
    section, we will explore more examples of animation.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了如何使用基本的Angular动画。在下一节中，我们将探索更多动画示例。
- en: One more example - Angular animations
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另一个示例 - Angular动画
- en: In the preceding section, we learned about the basics of animation; in this
    section, we will create one more example using Angular animations.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们学习了动画的基础知识；在本节中，我们将使用Angular动画创建另一个示例。
- en: In this example, we will create a button and a `div` element. When the button
    is clicked, the `div` element will slide into to the page. Cool, right?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建一个按钮和一个`div`元素。当点击按钮时，`div`元素将滑入页面。很酷，对吧？
- en: 'Let''s get this started. Add the following code to the component file we created
    in the preceding section: `learn-animation.component.ts`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。将以下代码添加到我们在前一节中创建的组件文件`learn-animation.component.ts`中：
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following are the important things to note in the preceding code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，需要注意以下重要事项：
- en: We are creating a trigger with `animationToggle`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在创建一个带有`animationToggle`的触发器。
- en: We are defining two transitions, that is, from `show => hide` and `hide => show`.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义两个过渡，即从`show => hide`和`hide => show`。
- en: We are adding style properties to the `show => hide` transition.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在向`show => hide`过渡添加样式属性。
- en: We did NOT add style properties to the `hide => show` transition.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们没有向`hide => show`过渡添加样式属性。
- en: It's not mandatory to define style for transition but more often than not we
    will need to define custom styling for our elements with animations.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 定义过渡样式并不是强制性的，但往往我们需要为具有动画效果的元素定义自定义样式。
- en: 'Run the app, and you should see the application and animation as mentioned
    below after the screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，您应该在截图后看到以下应用程序和动画：
- en: '![](assets/e485edc7-9fe0-49bb-a627-9e2e07e1c2d6.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e485edc7-9fe0-49bb-a627-9e2e07e1c2d6.png)'
- en: In our application when you `click` on the show button, The `DIV` element will
    slide-in to the page from right side to left. Click on the button again it toggle
    to hide.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，当您点击显示按钮时，`DIV`元素将从右侧滑入页面到左侧。再次点击按钮，它将切换隐藏。
- en: It's cool, right? Yep. Angular animation gives us the ability to create beautiful
    animations and transition effects for elements, which will add up to a great user
    experience.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷，对吧？是的。Angular动画使我们能够为元素创建美丽的动画和过渡效果，这将增加用户体验。
- en: We will build a lot of cool examples implementing animations.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建许多很酷的示例来实现动画。
- en: Using keyframes - Sequence of styles
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用关键帧 - 样式序列
- en: So far, we have implemented examples using various methods for Angular animations.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用各种方法实现了Angular动画的示例。
- en: When we design/decide motion and the transitions of elements, we need to iterate
    through various styles for smooth transitions.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们设计/决定元素的运动和转换时，我们需要遍历各种样式以实现平滑的过渡。
- en: Using `keyframes` we can define iterations of different styles while transitioning.
    `keyframes` essentially are a sequence of styles defined for an element.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`keyframes`，我们可以在过渡时定义不同样式的迭代。`keyframes`本质上是为元素定义的一系列样式。
- en: 'To understand this better, let''s take a look at the following code snippet:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这一点，让我们看一下以下代码片段：
- en: '[PRE10]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s analyze the preceding code snippet in detail:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前面的代码片段：
- en: We are defining a `transition` from `frameTest1 => frameTest2`
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义从`frameTest1 => frameTest2`的`transition`
- en: We are defining the animate property with `300` milliseconds.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们用`300`毫秒定义了`animate`属性。
- en: We are defining the `keyframes` under which we are defining three different
    styles; the element will go through each of the `transition` frames step by step.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义`keyframes`，在其中我们定义了三种不同的样式；元素将逐步经历每个`transition`帧。
- en: Now, let's expand the preceding created example in the preceding section with
    the subsequent code.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们用下面的代码扩展前面部分创建的示例。
- en: 'The updated `learn-animation.component.ts` file will have code as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的`learn-animation.component.ts`文件将具有以下代码：
- en: '[PRE11]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s analyze the preceding code in detail:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前面的代码：
- en: 'We are importing the required modules from the Angular animation library: `state`,
    `style`, `animate`, `keyframes`, and `transition`. These modules help us in creating
    animations in our applications.'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从Angular动画库中导入所需的模块：`state`、`style`、`animate`、`keyframes`和`transition`。这些模块帮助我们在应用程序中创建动画。
- en: We create a `LearnAnimationComponent` component.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个`LearnAnimationComponent`组件。
- en: We specify `animations` for the component.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为组件指定了`animations`。
- en: We define a trigger named `animationState`.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了一个名为`animationState`的触发器。
- en: For the trigger created, we are defining two states--`frameTest1` and `frameTest2`.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于创建的触发器，我们定义了两个状态--`frameTest1`和`frameTest2`。
- en: 'We define two transitions: `''frameTest2 => frameTest1''` and `''frameTest2
    => frameTest1''`.'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了两个转换：`'frameTest2 => frameTest1'`和`'frameTest2 => frameTest1'`。
- en: For each of the transitions defined, we have implemented `keyframes`, that is,
    a sequence of styles attached with the `animate` method to achieve smooth transition
    with a time delay.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于定义的每个转换，我们已经实现了`keyframes`，也就是与`animate`方法一起使用的一系列样式，以实现平滑的过渡和时间延迟。
- en: In the component class, we define a `left` variable.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件类中，我们定义了一个`left`变量。
- en: We are defining an `onClick` method, toggling the values from `frameTest1` and
    `frameTest2`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义一个`onClick`方法，切换从`frameTest1`到`frameTest2`的值。
- en: So far, so good. We have implemented the component.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切顺利。我们已经实现了组件。
- en: 'Now it''s time to update our `learn-animation.component.html` and add the following
    code snippet to the file:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候更新我们的`learn-animation.component.html`并将以下代码片段添加到文件中：
- en: '[PRE12]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Alright, all set. Now, run the app, and you should see the output as shown
    in the screenshot and animations as mentioned below:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，一切准备就绪。现在运行应用程序，您应该看到如屏幕截图所示的输出和下面提到的动画：
- en: '![](assets/e58fdda2-5a05-4481-8e76-2d29da52b2c6.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e58fdda2-5a05-4481-8e76-2d29da52b2c6.png)'
- en: You should the following animations when you run the app
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行应用程序时，您应该看到以下动画
- en: When you click on the `DIV` element --it should slide towards right
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您点击`DIV`元素时--它应该向右滑动
- en: Click on the `DIV` element again and the element should move towards right with
    the `DIV` element transforming --giving a look-n-feel that the DIV is spinning.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击`DIV`元素，元素应该向右移动，`DIV`元素变换--给人一种DIV在旋转的感觉。
- en: In this section, you learned how to use `keyframes` and create a sequence of
    styles for elements for smoother transitions.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何使用`keyframes`并为元素创建一系列样式，以实现更平滑的过渡。
- en: Animate collapse menu
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画折叠菜单
- en: In the this section, we will create a very important aspect of any application,
    that is, a sidebar menu for our application.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为我们的应用程序创建一个非常重要的部分，即应用程序的侧边栏菜单。
- en: With what we have learned so far about Angular animations, we will create an
    example of a collapsing sidebar in this section.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们迄今为止学到的关于Angular动画的知识，在本节中我们将创建一个折叠侧边栏的示例。
- en: 'Let''s update the component template `learn-animation.component.html` and update
    the file with the following code snippet:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新组件模板`learn-animation.component.html`，并使用以下代码片段更新文件：
- en: '[PRE13]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'An analysis of the preceding code is given here:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 对前面的代码进行分析如下：
- en: We are adding a `<h4>` heading, a `Collapse` menu.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在添加一个`<h4>`标题，一个`Collapse`菜单。
- en: We are defining a button and attaching the `click` event with the `toggleMenu`
    method.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义一个按钮，并将`click`事件与`toggleMenu`方法关联起来。
- en: We are creating an unordered list `<ul>` with sample list items `<li>` in our
    menu.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在创建一个带有示例列表项`<li>`的无序列表`<ul>`。
- en: 'Now, we will add some basic CSS styling to the `learn-animation.component.css`
    file:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将向`learn-animation.component.css`文件添加一些基本的CSS样式：
- en: '[PRE14]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: So far, we have created our application component template `learn-animation.component.html`
    and styled the menu component `learn-animation.component.css`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了我们的应用程序组件模板`learn-animation.component.html`并为菜单组件`learn-animation.component.css`设置了样式。
- en: Now, we will create the menu component class.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建菜单组件类。
- en: 'Add the following code to the `learn-animation.component.ts` file:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到`learn-animation.component.ts`文件中：
- en: '[PRE15]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s analyze the preceding code in detail:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前面的代码：
- en: We are importing the required Angular animation library modules, such as `state`,
    `style`, `animate`, `trigger`, `transition`, and `keyframes`.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在导入所需的Angular动画库模块，例如`state`，`style`，`animate`，`trigger`，`transition`和`keyframes`。
- en: 'In the animations, we define a trigger: `toggleMenu`.'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在动画中，我们定义了一个触发器：`toggleMenu`。
- en: 'We are creating two states: `opened` and `closed`.'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在创建两种状态：`opened`和`closed`。
- en: For each of the states, we are defining some style attributes with `transform`.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个状态，我们正在定义一些带有`transform`的样式属性。
- en: We now define the transition `opened => closed` and `closed => open` with some
    animate details delay.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在定义了转换`opened => closed`和`closed => open`，并带有一些动画细节延迟。
- en: We have defined a `menuState` variable.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经定义了一个`menuState`变量。
- en: In the component class, we define the `toggleMenu`.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件类中，我们定义了`toggleMenu`。
- en: In the `toggleMenu` method, we are toggling the variable value of `menuState`
    to `opened` or `closed` and vice versa.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`toggleMenu`方法中，我们正在切换`menuState`变量值为`opened`或`closed`，反之亦然。
- en: 'It''s demo time. Run the application, and you should see output as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是演示时间。运行应用程序，您应该看到以下输出：
- en: '![](assets/efde53e9-fd39-4938-88e5-437701ba9fb0.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/efde53e9-fd39-4938-88e5-437701ba9fb0.png)'
- en: 'Click on the Toggle Menu button again, we should see the menu sliding to the
    right as shown in the following screenshot:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 再次点击Toggle菜单按钮，我们应该看到菜单向右滑动，如下截图所示：
- en: '![](assets/b42eb804-7fa2-46ec-9b2c-dc60ac48e066.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b42eb804-7fa2-46ec-9b2c-dc60ac48e066.png)'
- en: In this section, we created our application's sidebar menu with Angular animations.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们使用Angular动画创建了应用程序的侧边栏菜单。
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced Angular animations. Animations are key to designing
    and building beautiful user experiences with smooth transitions and element effects.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Angular动画。动画对于设计和构建具有平滑过渡和元素效果的美观用户体验至关重要。
- en: We covered how to install and import the Angular animations library and use
    various modules inside the library.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了如何安装和导入Angular动画库，并在库中使用各种模块。
- en: We discussed important modules, such as `state`, `style`, `animate`, `trigger`,
    `transition`, and `keyframes`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了重要的模块，比如`state`、`style`、`animate`、`trigger`、`transition`和`keyframes`。
- en: We created and implemented some examples using Angular animations.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建并实现了一些使用Angular动画的示例。
- en: Finally, we created a web application sidebar menu with some animations. Now,
    over to you!
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建了一个带有一些动画效果的网页应用侧边栏菜单。现在，轮到你了！
- en: In the next chapter, you will learn how to integrate Bootstrap with Angular
    applications. Bootstrap is arguably the most popular frontend framework out there
    and, in this chapter, you will learn what it means to have an Angular x Bootstrap
    application.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何将Bootstrap与Angular应用程序集成。Bootstrap可以说是目前最流行的前端框架，在本章中，您将了解拥有一个Angular
    x Bootstrap应用程序意味着什么。
