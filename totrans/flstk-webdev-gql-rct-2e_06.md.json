["```js\nnpm install --save @apollo/client graphql\n```", "```js\nmkdir src/client/apollo\ntouch src/client/apollo/index.js\n```", "```js\nimport { ApolloClient, InMemoryCache, from, HttpLink } from '@apollo/client';\nimport { onError } from \"@apollo/client/link/error\";\nconst client = new ApolloClient({\n  link: from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors) {\n        graphQLErrors.map(({ message, locations, path }) => \n        console.log('[GraphQL error]: Message: ${message},\n        Location: \n        ${locations}, Path: ${path}'));\n        if (networkError) {\n          console.log('[Network error]: ${networkError}');\n        }\n      }\n    }),\n    new HttpLink({\n      uri: 'http://localhost:8000/graphql',\n    }),\n ]),\n cache: new InMemoryCache(),\n});\nexport default client;\n```", "```js\n    import { gql } from '@apollo/client';\n    ```", "```js\n    client.query({\n      query: gql'\n        { \n          posts { \n            id\n            text\n            user {\n              avatar\n              username\n            }\n          }\n        }'\n    }).then(result => console.log(result));\n    ```", "```js\nimport client from './apollo';\n```", "```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/client/react'; \nimport App from './App';\nimport client from './apollo';\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>, document.getElementById('root')\n);\n```", "```js\n    import React from 'react';\n    import { Helmet } from 'react-helmet';\n    import Feed from './Feed';\n    import '../../assets/css/style.css';\n    const App = () => {\n      return (\n        <div className=\"container\">\n          <Helmet>\n            <title>Graphbook - Feed</title>\n            <meta name=\"description\" content=\"Newsfeed of \n              all your friends on Graphbook\" />\n          </Helmet>\n          <Feed />\n        </div>\n      )\n    }\n    export default App\n    ```", "```js\n    import { gql, useQuery } from '@apollo/client';\n    const GET_POSTS = gql'{ \n      posts { \n        id\n        text\n        user {\n          avatar\n          username\n        }\n      }\n    }';\n    ```", "```js\n    const { loading, error, data } = useQuery(GET_POSTS);\n    ```", "```js\n    if (loading) return 'Loading...';\n    if (error) return 'Error! ${error.message}';\n    ```", "```js\n    const { posts } = data;\n    ```", "```js\n    import { gql, useQuery, useMutation } from '@apollo/client';\n    ```", "```js\n    const ADD_POST = gql'\n      mutation addPost($post : PostInput!) {\n        addPost(post : $post) {\n          id\n          text\n          user {\n            username\n            avatar\n          }\n        }\n      }\n    ';\n    ```", "```js\n    const [addPost] = useMutation(ADD_POST);\n    ```", "```js\n    const handleSubmit = (event) => {\n      event.preventDefault();\n      addPost({ variables: { post: { text: postContent } } });\n      setPostContent('');\n    };\n    ```", "```js\nconst [addPost] = useMutation(ADD_POST, {\n  refetchQueries: [{query:GET_POSTS}]\n});\n```", "```js\nconst [addPost] = useMutation(ADD_POST, {\n  update(cache, { data: { addPost } }) {\n    const data = cache.readQuery({ query: GET_POSTS });\n    const newData = { posts: [addPost, ...data.posts]};\n    cache.writeQuery({ query: GET_POSTS, data: newData });\n  }\n});\n```", "```js\nupdate(cache, { data: { addPost } }) {\n  cache.modify({\n    fields: {\n      posts(existingPosts = []) {\n         const newPostRef = cache.writeFragment({\n           data: addPost,\n           fragment: gql'\n             fragment NewPost on Post {\n               id\n               type\n             }\n           '\n         });\n         return [newPostRef, ...existingPosts];\n      }\n    }\n  });\n} \n```", "```js\noptimisticResponse: {\n  __typename: \"mutation\",\n  addPost: {\n    __typename: \"Post\",\n    text: postContent,\n    id: -1,\n    user: {\n      __typename: \"User\",\n      username: \"Loading...\",\n      avatar: \"/public/loading.gif\"\n    }\n  }\n}\n```", "```js\n{posts.map((post, i) => \n  <div key={post.id} className={'post ' + (post.id < 0 ? \n    'optimistic': '')}>\n    <div className=\"header\">\n      <img src={post.user.avatar} />\n      <h2>{post.user.username}</h2>\n    </div>\n    <p className=\"content\">\n      {post.text}\n    </p>\n  </div>\n)}\n```", "```js\n.optimistic {\n  -webkit-animation: scale-up 0.4s cubic-bezier(0.390,\n    0.575, 0.565, 1.000) both;\n  animation: scale-up 0.4s cubic-bezier(0.390, 0.575,\n    0.565, 1.000) both;\n}\n@-webkit-keyframes scale-up {\n  0% {\n    -webkit-transform: scale(0.5);\n    transform: scale(0.5);\n  }\n  100% {\n    -webkit-transform: scale(1);\n    transform: scale(1);\n  }\n}\n@keyframes scale-up {\n  0% {\n    -webkit-transform: scale(0.5);\n    transform: scale(0.5);\n  }\n  100% {\n    -webkit-transform: scale(1);\n    transform: scale(1);\n  }\n}\n```", "```js\nconst { loading, error, data } = useQuery(GET_POSTS, { pollInterval: 5000 });\n```", "```js\n    query {\n      chats {\n        id\n        users {\n          avatar\n          username\n        }\n      }\n    }\n    ```", "```js\n    const chats = [{\n      \"id\": 1,\n      \"users\": [{\n          \"id\": 1,\n          \"avatar\": \"/uploads/avatar1.png\",\n          \"username\": \"Test User\"\n        },\n        {\n          \"id\": 2,\n          \"avatar\": \"/uploads/avatar2.png\",\n          \"username\": \"Test User 2\"\n        }]\n      }\n    ];\n    ```", "```js\n    import React, { useState } from 'react';\n    ```", "```js\n    const usernamesToString = (users)  => {\n      const userList = users.slice(1);\n      var usernamesString = '';\n      for(var i = 0; i < userList.length; i++) {\n        usernamesString += userList[i].username;\n        if(i - 1 === userList.length) {\n          usernamesString += ', ';\n        }\n      }\n      return usernamesString;\n    }\n    const shorten = (text) => {\n      if (text.length > 12) {\n        return text.substring(0, text.length - 9) + '...';\n      }\n      return text;\n    }\n    const Chats = () => {\n      return (\n        <div className=\"chats\">\n          {chats.map((chat, i) =>\n            <div key={chat.id} className=\"chat\">\n              <div className=\"header\">\n                <img src={(chat.users.length > 2 ?\n                 '/public/group.png' : \n                   chat.users[1].avatar)} />\n                <div>\n                  <h2>{shorten(usernamesToString\n                     (chat.users))}</h2>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )\n    }\n    export default Chats\n    ```", "```js\n    .post .header > *, .chats .chat .header > * {\n      display: inline-block;\n      vertical-align: middle;\n    }\n    .post .header img, .chats .chat .header img {\n      width: 50px;\n      margin: 5px;\n    }\n    ```", "```js\n    .chats {\n      background-color: #eee;\n      width: 200px;\n      height: 100%;\n      position: fixed;\n      top: 0;\n      right: 0;\n      border-left: 1px solid #c3c3c3;\n    }\n    .chats .chat {\n      cursor: pointer;\n    }\n    .chats .chat .header > div {\n      width: calc(100% - 65px);\n      font-size: 16px;\n      margin-left: 5px;\n    }\n    .chats .chat .header h2, .chats .chat .header span {\n      color: #333;\n      font-size: 16px;\n      margin: 0;\n    }\n    .chats .chat .header span {\n      color: #333;\n      font-size: 12px;\n    }\n    ```", "```js\n    import Chats from './Chats';\n    ```", "```js\n    lastMessage: Message\n    ```", "```js\n    lastMessage(chat, args, context) {\n      return chat.getMessages({limit: 1, order: [['id',\n        'DESC']]}).then((message) => {return message[0];\n      });\n    },\n    ```", "```js\n    \"lastMessage\": {\n      \"text\": \"This is a third test message.\"\n    }\n    ```", "```js\n    <span>{chat?.lastMessage?.text}</span>\n    ```", "```js\nimport { gql, useQuery } from '@apollo/client';\nconst GET_CHATS = gql'{\n  chats {\n    id\n    users {\n      id\n      avatar\n      username\n    }\n    lastMessage {\n      text\n    }\n  }\n}';\n```", "```js\nconst { loading, error, data} = useQuery(GET_CHATS);\nif (loading) return <div className=\"chats\"><p>Loading...</p></div>;\nif (error) return <div className=\"chats\"><p>{error.message}</p></div>;\nconst { chats } = data;\n```", "```js\nconst [openChats, setOpenChats] = useState([]);\n```", "```js\nconst openChat = (id) => {\n  var openChatsTemp = openChats.slice();\n  if(openChatsTemp.indexOf(id) === -1) {\n    if(openChatsTemp.length > 2) {\n      openChatsTemp = openChatsTemp.slice(1);\n    }\n    openChatsTemp.push(id);\n  }\n  setOpenChats(openChatsTemp);\n}\nconst closeChat = (id) => {\n  var openChatsTemp = openChats.slice();\n  const index = openChatsTemp.indexOf(id);\n  openChatsTemp.splice(index,1),\n  setOpenChats(openChatsTemp);\n} \n```", "```js\n<div key={\"chat\" + chat.id} className=\"chat\" onClick={() => openChat(chat.id)}>\n```", "```js\n    <div className=\"wrapper\">\n    ```", "```js\n    import React from 'react';\n    import { gql, useQuery } from '@apollo/client';\n    const GET_CHAT = gql'\n      query chat($chatId: Int!) {\n        chat(chatId: $chatId) {\n          id\n          users {\n            id\n            avatar\n            username\n          }\n          messages {\n            id\n            text\n            user {\n                id\n            }\n          }\n        }\n      }\n    ';\n    ```", "```js\n    const Chat = (props) => {\n      const { chatId, closeChat } = props;\n      const { loading, error, data } = useQuery(GET_CHAT, { \n        variables: { chatId }});\n      if (loading) return <div className=\"chatWindow\">\n        <p>Loading...</p></div>;\n      if (error) return <div className=\"chatWindow\">\n        <p>{error.message}</p></div>;\n      const { chat } = data;\n      return (\n        <div className=\"chatWindow\">\n          <div className=\"header\">\n            <span>{chat.users[1].username}</span>\n            <button onClick={() => closeChat(chatId)} \n              className=\"close\">X</button>\n          </div>\n          <div className=\"messages\">\n            {chat.messages.map((message, j) =>\n              <div key={'message' + message.id}\n                className={'message ' + (message.user.id >\n                  1 ? 'left' : 'right')}>\n                {message.text}\n              </div>\n            )}\n          </div>\n        </div>\n      )\n    }\n    export default Chat\n    ```", "```js\n    import Chat from './Chat';\n    ```", "```js\n    <div className=\"openChats\">\n      {openChats.map((chatId, i) => <Chat chatId={chatId}\n      key={\"chatWindow\" + chatId} closeChat={closeChat} /> )}\n    </div>\n    ```", "```js\n    import React, { useState } from 'react';\n    import { gql, useQuery, useMutation } from '@apollo/client';\n    ```", "```js\n    const ADD_MESSAGE = gql'\n      mutation addMessage($message : MessageInput!) {\n        addMessage(message : $message) {\n          id\n          text\n          user {\n            id\n          }\n        }\n      }\n    ';\n    ```", "```js\n    const [text, setText] = useState('');\n    const [addMessage] = useMutation(ADD_MESSAGE, {\n      update(cache, { data: { addMessage } }) {\n        cache.modify({\n          id: cache.identify(data.chat),\n          fields: {\n            messages(existingMessages = []) {\n              const newMessageRef = cache.writeFragment({\n                data: addMessage,\n                fragment: gql'\n                  fragment NewMessage on Chat {\n                    id\n                    type\n                  }\n                '\n              });\n              return [...existingMessages, newMessageRef];\n            }\n          }\n        });\n      }\n    });\n    const handleKeyPress = (event) => {\n      if (event.key === 'Enter' && text.length) {\n        addMessage({ variables: { message: { text, chatId \n          } } }).then(() => {\n          setText('');\n        });\n      }\n    }\n    ```", "```js\n    <div className=\"input\">\n      <input type=\"text\" value={text} onChange={(e) => \n        setText(e.target.value)} \n        onKeyPress={handleKeyPress}/>\n    </div>\n    ```", "```js\n    .chatWindow .input input {\n      width: calc(100% - 4px);\n      border: none;\n      padding: 2px;\n    }\n    .chatWindow .input input:focus {\n      outline: none;\n    }\n    ```", "```js\n    postsFeed(page: Int, limit: Int): PostFeed\n    ```", "```js\n    type PostFeed {\n      posts: [Post]\n    }\n    ```", "```js\n    postsFeed(root, { page, limit }, context) {\n      var skip = 0;\n      if(page && limit) {\n        skip = page * limit;\n      }\n      var query = {\n        order: [['createdAt', 'DESC']],\n        offset: skip,\n      };\n      if(limit) {\n        query.limit = limit;\n      }\n      return {\n       posts: Post.findAll(query)\n      };\n    },\n    ```", "```js\nnpm install react-infinite-scroll-component --save\n```", "```js\nimport InfiniteScroll from 'react-infinite-scroll-component';\nconst GET_POSTS = gql'\n  query postsFeed($page: Int, $limit: Int) { \n    postsFeed(page: $page, limit: $limit) { \n      posts {\n        id\n        text\n        user {\n          avatar\n          username\n        }\n      }\n    }\n  }\n';\n```", "```js\nconst [hasMore, setHasMore] = useState(true);\nconst [page, setPage] = useState(0);\nconst { loading, error, data, fetchMore } = useQuery(GET_POSTS, { pollInterval: 5000, variables: { page: 0, limit: 10 } });\n```", "```js\nconst { postsFeed } = data;\nconst { posts } = postsFeed;\n```", "```js\n<div className=\"feed\">\n  <InfiniteScroll\n    dataLength={posts.length}\n    next={() => loadMore(fetchMore)}\n    hasMore={hasMore}\n    loader={<div className=\"loader\" key={\"loader\"}>\n      Loading ...</div>}\n  >\n    {posts.map((post, i) =>\n      <div key={post.id} className={'post ' + (post.id < 0\n        ? 'optimistic': '')}>\n        <div className=\"header\">\n          <img src={post.user.avatar} />\n          <h2>{post.user.username}</h2>\n        </div>\n        <p className=\"content\">{post.text}</p>\n      </div>\n    )}\n  </InfiniteScroll>\n</div>\n```", "```js\nconst loadMore = (fetchMore) => {\n  const self = this;\n  fetchMore({\n    variables: {\n        page: page + 1,\n    },\n    updateQuery(previousResult, { fetchMoreResult }) {\n      if(!fetchMoreResult.postsFeed.posts.length) {\n        setHasMore(false);\n        return previousResult;\n      }\n      setPage(page + 1);\n      const newData = {\n        postsFeed: {\n          __typename: 'PostFeed',\n          posts: [\n            ...previousResult.postsFeed.posts,\n            ...fetchMoreResult.postsFeed.posts\n          ]\n        }\n      };\n      return newData;\n    }\n  });\n}\n```", "```js\npostsFeed(existingPostsFeed) {\n  const { posts: existingPosts } = existingPostsFeed;\n  const newPostRef = cache.writeFragment({\n    data: addPost,\n    fragment: gql'\n      fragment NewPost on Post {\n        id\n        type\n      }\n    '\n  });\n  return {\n    ...existingPostsFeed,\n    posts: [newPostRef, ...existingPosts]\n  };\n}\n```"]