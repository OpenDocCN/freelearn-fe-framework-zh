["```js\n    $ cp -R ch1 ch2\n    ```", "```js\n    console.log('hello node.js world!')\n    ```", "```js\n    $ node backend/helloworld.js\n    ```", "```js\n    import { writeFileSync, readFileSync } from 'node:fs'\n    ```", "```js\n    const users = [{ name: 'Adam Ondra', email: 'adam.ondra@climb.ing' }]\n    ```", "```js\n    const usersJson = JSON.stringify(users)\n    ```", "```js\n    writeFileSync('backend/users.json', usersJson)\n    ```", "```js\n    const readUsersJson = readFileSync('backend/users.json')\n    const readUsers = JSON.parse(readUsersJson)\n    ```", "```js\n    console.log(readUsers)\n    ```", "```js\n    $ node backend/files.js\n    ```", "```js\nconsole.log('first')\nsetTimeout(() => {\n  console.log('second')\n}, 1000)\nconsole.log('third')\n```", "```js\nfirst\nthird\nsecond\n```", "```js\nconsole.log('first')\nsetTimeout(() => {\n  console.log('second')\n}, 0)\nconsole.log('third')\n```", "```js\nfirst\nthird\nsecond\n```", "```js\n    import { createServer } from 'node:http'\n    ```", "```js\n    const server = createServer((req, res) => {\n    ```", "```js\n      res.statusCode = 200\n    ```", "```js\n      res.setHeader('Content-Type', 'text/plain')\n    ```", "```js\n      res.end('Hello HTTP world!')\n    })\n    ```", "```js\n    const host = 'localhost'\n    const port = 3000\n    ```", "```js\n    server.listen(port, host, () => {\n      console.log(`Server listening on http://${host}:${port}`)\n    })\n    ```", "```js\n    $ node backend/simpleweb.js\n    ```", "```js\n    import { readFileSync } from 'node:fs'\n    ```", "```js\n      res.setHeader('Content-Type', 'application/json')\n    ```", "```js\n      res.end(readFileSync('backend/users.json'))\n    ```", "```js\n    $ node backend/webfiles.js\n    ```", "```js\n$ docker -v\n```", "```js\nDocker version 24.0.6, build ed223bc\n```", "```js\n$ docker run -i -t ubuntu:24.04 /bin/bash\n```", "```js\n$ uname -a\n```", "```js\n$ exit\n```", "```js\n    $ docker ps\n    CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\n    ```", "```js\n    docker run command creates and runs a new container. The arguments are as follows:*   **-d**: Runs the container in the background (daemon mode).*   **--name**: Specifies a name for the container. In our case, we named it **dbserver**.*   **-p**: Maps a port from the container to the host. In our case, we map the default MongoDB server port **27017** in the container to the same port on our host. This allows us to access the MongoDB server running within our container from outside of it. If you already have a MongoDB server running on that port, feel free to change the first number to some other port, but make sure to also adjust the port number from **27017** to your specified port in the following guides.*   **--restart unless-stopped**: Makes sure to automatically start (and restart) the container unless we manually stop it. This ensures that every time we start Docker, our MongoDB server will already be running.*   **mongo**: This is the image name. The **mongo** image contains a MongoDB server.\n    ```", "```js\n    ch2> prompt. Here, we can enter commands to be executed on our database. Interestingly, MongoDB, like Node.js, also exposes a JavaScript engine, but with yet another different environment. So, we can run JavaScript code, such as the following:\n\n    ```", "```js\n\n    ```", "```js\n    db, then the collection name follows, and finally comes the operation, all separated by periods.\n    ```", "```js\n    > db.users.find()\n    ```", "```js\n    [\n      {\n        _id: ObjectId(\"6405f062b0d06adeaeefc3bc\"),\n        username: 'dan',\n        fullName: 'Daniel Bugl',\n        age: 26\n      }\n    ]\n    ```", "```js\n    > db.users.insertMany([\n      { username: 'jane', fullName: 'Jane Doe', age: 32 },\n      { username: 'john', fullName: 'John Doe', age: 30 }\n    ])\n    ```", "```js\n    > db.users.findOne({ username: 'jane' })\n    ```", "```js\n    > db.users.find({ fullName: 'Daniel Bugl' })\n    ```", "```js\n    ObjectId() constructor to a valid ObjectId returned from the previous commands.\n    ```", "```js\n    John Doe does not get returned, because his age is exactly 30\\. If we want to match ages greater than or equal to 30, we need to use the $gte operator.\n    ```", "```js\n    > db.users.find().sort({ age: 1 })\n    ```", "```js\n    > db.users.updateOne({ username: 'dan' }, { $set: { age: 27 } })\n    ```", "```js\n    > db.users.updateOne({ username: 'new' }, { $set: { fullName: 'New User' } })\n    ```", "```js\n    > db.users.updateOne({ username: 'new' }, { $set: { fullName: 'New User' } }, { upsert: true })\n    ```", "```js\n> db.users.deleteOne({ username: 'new' })\n```", "```js\n    mongodb://localhost:27017/\n    ```", "```js\n    $ npm install mongodb@6.3.0\n    ```", "```js\n    import { createServer } from 'node:http'\n    import { MongoClient } from 'mongodb'\n    ```", "```js\n    const url = 'mongodb://localhost:27017/'\n    const dbName = 'ch2'\n    const client = new MongoClient(url)\n    ```", "```js\n    try {\n      await client.connect()\n      console.log('Successfully connected to database!')\n    } catch (err) {\n      console.error('Error connecting to database:', err)\n    }\n    ```", "```js\n    const server = createServer(async (req, res) => {\n    ```", "```js\n      const db = client.db(dbName)\n      const users = db.collection('users')\n    ```", "```js\n      const usersList = await users.find().toArray()\n    ```", "```js\n      res.statusCode = 200\n      res.setHeader('Content-Type', 'application/json')\n      res.end(JSON.stringify(usersList))\n    })\n    ```", "```js\n    const host = 'localhost'\n    const port = 3000\n    server.listen(port, host, () => {\n      console.log(`Server listening on http://${host}:${port}`)\n    })\n    ```", "```js\n    $ node backend/mongodbweb.js\n    ```"]