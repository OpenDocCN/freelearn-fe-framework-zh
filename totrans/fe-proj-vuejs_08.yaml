- en: 8\. The State of Vue.js State Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8. Vue.js状态管理的状态
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: By the end of this chapter, you will be able to use and contrast approaches
    for sharing state and holding global state in a Vue.js application. To this end,
    you will use a shared ancestor to hold state required by components that do not
    have a parent-child relationship (sibling components). You will also gain familiarity
    with an event bus in the context of a Vue.js application. As we proceed, you will
    understand how and when to leverage Vuex for state management, and its strengths
    and weaknesses when compared to other solutions such as event buses or Redux.
    Towards the end of the chapter, you will become comfortable with selecting which
    parts of state should be stored globally and locally and how to combine them to
    build a scalable and performant Vue.js application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够使用和对比在Vue.js应用程序中共享状态和保持全局状态的方法。为此，你将使用一个共享的祖先组件来保持那些没有父子关系的组件（兄弟组件）所需的状态。你还将熟悉Vue.js应用程序上下文中的事件总线。随着我们的深入，你将了解何时以及如何利用Vuex进行状态管理，以及与其他解决方案（如事件总线或Redux）相比的优势和劣势。在本章的末尾，你将熟悉选择哪些状态部分应该存储在全局和本地，以及如何将它们结合起来构建一个可扩展且性能良好的Vue.js应用程序。
- en: In this chapter, we will look at the state of Vue.js state management, from
    local state to component-based state sharing patterns to more advanced concepts
    such as leveraging event buses or global state management solutions like Vuex.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨Vue.js状态管理的状态，从局部状态到基于组件的状态共享模式，再到更高级的概念，如利用事件总线或Vuex等全局状态管理解决方案。
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we'll explore the concept of state management in Vue.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨Vue中状态管理的概念。
- en: In previous chapters, we have seen how to use local state and `props` to hold
    state and share it in a **parent-child** component hierarchy.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们看到了如何使用局部状态和`props`来保持状态并在**父子**组件层次结构中共享它。
- en: We will begin by showing how to leverage `state`, `props`, and `events` to share
    state between components that are not in a **parent-child** configuration. These
    types of components are called **siblings**.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先展示如何利用`state`、`props`和`events`在不是**父子**配置的组件之间共享状态。这类组件被称为**兄弟组件**。
- en: '![Figure 8.1: Child 1 and Child 2 are "sibling" components'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 8.1: 子组件1和子组件2是“兄弟”组件'
- en: '](img/B15218_08_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B15218_08_01.jpg]'
- en: 'Figure 8.1: Child 1 and Child 2 are "sibling" components'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1：子组件1和子组件2是“兄弟”组件
- en: Throughout the chapter, we will be building a **profile card generator** app
    that demonstrates how state flows down the component tree as props in an application,
    and how updates are propagated back up using events, event buses, and store updates.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的整个过程中，我们将构建一个**个人资料卡片生成器**应用程序，以展示状态如何在应用程序中以props的形式向下流动到组件树，以及如何使用事件、事件总线和存储更新来向上传播更新。
- en: Given that we want to build a `Header`, where we will have global controls and
    display the title of the page; a `ProfileForm`, where we will capture data; and
    finally, a `ProfileDisplay`, where we will display the profile card.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们想要构建一个`Header`，其中我们将有全局控件并显示页面标题；一个`ProfileForm`，我们将捕获数据；最后，一个`ProfileDisplay`，我们将显示个人资料卡片。
- en: '![Figure 8.2: Representation of a profile card application component tree'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 8.2: 表示个人资料卡片应用程序组件树'
- en: '](img/B15218_08_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B15218_08_02.jpg]'
- en: 'Figure 8.2: Representation of a profile card application component tree'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2：表示个人资料卡片应用程序组件树
- en: We have now seen how to reason about a component tree and how our application
    can be structured in a component tree.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经看到了如何推理组件树以及我们的应用程序如何在组件树中结构化。
- en: Holding State in a Common Ancestor Component
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在公共祖先组件中保持状态
- en: To hold state only with component state and props and update it with events,
    we will store it in the nearest common ancestor component.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了仅使用组件状态和`props`来保持状态并使用事件来更新它，我们将将其存储在最近的公共祖先组件中。
- en: State is propagated only through `props` and is updated only through `events`.
    In this case, all the `state` will live in a shared ancestor of the components
    that require state. The App component, since it is the root component, is a good
    default for holding shared state.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 状态仅通过`props`进行传播，并且仅通过`events`进行更新。在这种情况下，所有`state`都将存在于需要状态的组件的共享祖先中。由于App组件是根组件，因此它是保持共享状态的理想默认选项。
- en: '![Figure 8.3: Common ancestor component holds state with props and event propagation'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 8.3: 公共祖先组件通过props和事件传播保持状态'
- en: '](img/B15218_08_03.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B15218_08_03.jpg]'
- en: 'Figure 8.3: Common ancestor component holds state with props and event propagation'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: To change the `state`, a component needs to emit an `event` up to the component
    holding state (the shared ancestor). The shared ancestor needs to update `state`
    according to the event data and type. This in turn causes a re-render, during
    which the ancestor component passes updated `props` to the component reading the `state`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4: Updating a sibling component when the ancestor holds state'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_08_04.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.4: Updating a sibling component when the ancestor holds state'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'To build a header, we need to create an `AppHeader` component in the `AppHeader.vue`
    file, which will contain a template and an `h2` heading with TailwindCSS classes:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will then import it, register it, and render it in the `App.vue` file:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of the preceding code will be as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5: AppHeader displayed in the profile card generator'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_08_05.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.5: AppHeader displayed in the profile card generator'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'We will similarly create an `AppProfileForm` file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will create an `AppProfileDisplay` file with the following initial content:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Both of our containers (`AppProfileForm` and `AppProfileDisplay`) can now be
    imported and rendered in `App`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of the preceding code will be as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6: App skeleton with AppHeader, AppProfileForm, and AppProfileDisplay'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_08_06.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.6: App skeleton with AppHeader, AppProfileForm, and AppProfileDisplay'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a form field, in this case `name`, we will start by adding an input
    to `AppProfileForm`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding code will display as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7: AppProfileForm with a name field and label'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_08_07.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.7: AppProfileForm with a name field and label'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'To keep track of the name input data, we will add a two-way binding to it using
    `v-model` and set a `name` property in the component''s `data` initializer:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We will also need a `submit` button that, on click, sends the form data to
    the parent by emitting a `submit` event with the form''s contents:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will display as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8: AppProfileForm with a wired-up submit button'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_08_08.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.8: AppProfileForm with a wired-up submit button'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to store the form's state in the `App` component. It is a good
    candidate for storing form state since it is a common ancestor to `AppProfileForm`
    and `AppProfileDisplay`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, we will need a `formData` attribute returned from `data()`.
    We will also need a way to update `formData`. Hence, we will add an `update(formData)` method:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we need to bind `update()` to the `submit` event emitted by `AppProfileForm`.
    We will do this using the `@submit` shorthand and with the magic event object
    notation as `update($event)`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To display the name inside of `AppProfileDisplay`, we will need to add `formData`
    as a prop:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will also need to display the name using `formData.name`. We will add a
    `p-12` class to the container to improve the appearance of the component:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, `App` needs to pass `formData` to `AppProfileDisplay` as a prop:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We are now able to update the name on the form. When you click on the `Submit`
    button, it will show the name in the profile card display as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.9: App storing state, passing as props to AppProfileDisplay'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_08_09.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.9: App storing state, passing as props to AppProfileDisplay'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: We have now seen how to store shared state on the `App` component and how to
    update it from the `AppProfileForm` and display it in `AppProfileDisplay`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: In the next topic, we will see how to add an additional field to the profile
    card generator.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8.01: Adding an Occupation Field to the Profile Card Generator'
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from the example of storing the `name` shared state, another field
    that would be interesting to capture in a `profile card` is the occupation of
    the individual. To this end, we will add an `occupation` field to `AppProfileForm`
    to capture this extra piece of state, and we'll display it in `AppProfileDisplay`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this exercise, refer to [https://packt.live/32VUbuH](https://packt.live/32VUbuH).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'The first place to start is by adding the new `occupation` field to `src/components/AppProfileForm`.
    We''ll also take this opportunity to get rid of the `h-64` and `bg-red-200` classes
    from the `section` element (if they''re present), which will mean the form displays
    without a background and without a set height:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output of the preceding code will be as follows:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.10: AppProfileForm with the new Occupation field'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_08_10.jpg)'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.10: AppProfileForm with the new Occupation field'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To track the value of `occupation` with a two-way data binding, we will add
    a new property to the output of the `data()` property:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We will now apply a two-way data binding from the `occupation` reactive data
    property to the `occupation` input using `v-model`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For the `occupation` value to be transmitted when `submit` is clicked, we will
    need to add it to the `submitForm` method as a property of the `submit` event payload:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The final step of adding this field is to display it in the `AppProfileDisplay`
    component. We add a paragraph with a couple of styling classes. We''ll also take
    this opportunity to remove the `h-64` and `bg-blue-200` classes from the container
    (if they are present):'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Our browser should look as follows:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.11: AppProfileForm'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_08_11.jpg)'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.11: AppProfileForm'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: As we have just seen, adding a new field using the common ancestor to manage
    state is a case of passing the data up in an event and back down in the props
    to the reading component.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: We will now see how we can reset the form and profile display with a `Clear`
    button.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8.02: Adding a Clear Button to the Profile Card Generator'
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When creating a new profile with our application, it is useful to be able to
    reset the profile. To this end, we will add a `Clear` button.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: A `Clear` button should reset the data in the form but also in `AppProfileDisplay`.
    To access the code files for this exercise, refer to [https://packt.live/2INsE7R](https://packt.live/2INsE7R).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s look at the steps to perform this exercise:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'We want a `Clear` button to be displayed. We will take this opportunity to
    improve the styling of both the `Clear` and `Submit` buttons (in `src/components/AppProfileForm.vue`):'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To clear the form, we need to reset the `name` and `occupation` fields. We
    can create a `clear` method that will do this (in `src/components/AppProfileForm.vue`):'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We want to bind the `clear` method to `click` events on the `Clear` button
    to reset the form (in `src/components/AppProfileForm.vue`):'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To also clear the contents of `AppProfileDisplay`, we will need to update `formData`
    in `App.vue` by emitting a `submit` event with an empty payload in `src/components/AppProfileForm.vue`:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'When we fill out the form and submit it, it will look as follows:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.15: AppProfileForm and AppProfileDisplay with data filled out'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: and submitted with a Clear button
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_08_15.jpg)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.15: AppProfileForm and AppProfileDisplay with data filled out and
    submitted with a Clear button'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'We can click `Clear` and reset the data displayed in both `AppProfileDisplay`
    and `AppProfileForm` as per the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.16: AppProfileForm and AppProfileDisplay after data'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: is cleared (using the Clear button)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_08_16.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.16: AppProfileForm and AppProfileDisplay after data is cleared (using
    the Clear button)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: We have now seen how to set up communication between sibling components through
    a common ancestor.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: There is quite a bit of bookkeeping and mental work required to keep track of
    all the bits of state that need to stay in sync across the application.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at what an event bus is and how it can help
    alleviate some of the issues we have encountered.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: The Event Bus
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The second scenario we will look at is when there is a global event bus.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: The **event bus** is an entity on which we can publish and subscribe to events.
    This allows all the different parts of the application to hold their own state
    and keep it in sync without passing events up to or props down from the common
    ancestors.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.17: Sequence diagram of a reader component and an updating component
    leveraging an event bus'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_08_17.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.17: Sequence diagram of a reader component and an updating component
    leveraging an event bus'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: To provide this, our event bus needs to provide a `subscribe` method and `publish`
    method. It's also useful to be able to unsubscribe.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'The Vue instance is an event bus since it provides three crucial operations:
    `main.js` file:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Our event bus has a few methods, namely `$on`, which is the `$on(eventName,
    callback)`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can then use `$emit` to trigger the subscriber callback. `$emit(eventName,
    payload)` is the event bus'' `$emit` supports two parameters—the name of the event
    (as a string) and a payload, which is optional and can be any object. It can be
    used as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Running this file in the browser will yield the following console output, where
    the subscriber is registered first, and the callback is then triggered on every
    `$emit`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.18: Console output from a Vue.js instance being used as an event
    bus with a subscriber and two event publications'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_08_18.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 18.18: Console output from a Vue.js instance being used as an event
    bus with a subscriber and two event publications'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '`$off`, the **unsubscribe** operation, needs to be called with the same parameters
    with which the **subscribe** operation was called. Namely, two parameters, the
    event name (as a string) and the callback (which is run with the event as a parameter
    on every event publication). To use it properly, we need to register a subscriber
    using a reference to a function (as opposed to an inline anonymous function):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Note that once `$off` is called, the second subscriber does not trigger but
    the initial one does. Your console output when run in the browser will look as
    follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.19: Console output showing the effect of $off'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_08_19.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.19: Console output showing the effect of $off'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'By setting an event bus in the `event-bus.js` file, we can avoid the confusion
    of having to send data up to the `App` component (the common ancestor):'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We can `$emit` `profileUpdate` events to the event bus from the `AppProfileForm.vue`
    file on form submission instead of using `this.$emit`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the `AppProfileDisplay.vue` file, we can subscribe to `profileUpdate` events
    using `$on` and update `formData` in state. Note that we have removed the `formData`
    prop. We use the `mounted()` and `beforeDestroy()` hooks to subscribe to and unsubscribe
    from the event bus:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The application works as expected. The following screenshot displays how your
    screen will look:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.20: AppProfileForm and AppProfileDisplay communicating with an event
    bus'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_08_20.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.20: AppProfileForm and AppProfileDisplay communicating with an event
    bus'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we have removed the `formData` prop for `AppProfileDisplay`, we can stop
    passing it in the `App.vue` file. Since we are not relying on `submit` events
    from `AppProfileForm`, we can also remove that binding:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We can also remove the unused `App update` and `data` methods from the `App.vue`
    file, which means the whole `App` script section is as follows (only registers
    `components`, not state or handlers):'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We have now simplified the application data flow by using an event bus instead
    of storing shared state in a common ancestor component. Now, we will see how to
    move the `Clear` button to the application header in the profile card generator.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8.03: Moving the Clear Button to the Application Header Profile Card
    Generator'
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our profile card generator application, the `Clear` button clears the state
    in the whole application. Its presence inside the form makes the `Clear` button's
    functionality unclear since it looks like it might only affect the form.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: To reflect the fact that the `Clear` button is global functionality, we will
    move it into the header.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this exercise, refer to [https://packt.live/2UzFvwZ](https://packt.live/2UzFvwZ).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help us perform this exercise:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by creating a `button` in `src/components/AppHeader.vue`:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can import the event bus and create a `clear()` handler in `AppHeader`,
    in which we''ll trigger an update event with an empty payload (in `src/components/AppHeader.vue`):'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We should bind the `clear()` function to the `button` (in `src/components/AppHeader.vue`):'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'At this stage, we should be able to fill out the form and a `Reset` button
    should appear as follows:'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.21: Form filled out and the Reset button in the header'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_08_21.jpg)'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.21: Form filled out and the Reset button in the header'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `Reset` button only resets the `AppProfileDisplay` data:'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.22: Form filled out, but the card section has been cleared'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_08_22.jpg)'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.22: Form filled out, but the card section has been cleared'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For `Reset` to clear the form, we need to subscribe to the `profileUpdate`
    events in the mounted life cycle method of `AppProfileForm` and react to said
    events by resetting the form (using `handleProfileUpdate`):'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We also take this opportunity to delete the `Clear` button and adjust the `Submit`
    button:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The form looks as follows when it gets filled out and submitted:'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.23: Filled-out and submitted form'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_08_23.jpg)'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.23: Filled-out and submitted form'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: 'Resetting the form now clears the form fields as well as `AppProfileDisplay`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.24: Resetting the form and the display using the Reset button'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_08_24.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.24: Resetting the form and the display using the Reset button'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: This final step using the event bus, triggering an event and listening for the
    same event, is part of the basis of the Vuex pattern where events and state updates
    are encapsulated.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Using the Vuex Pattern in Contrast with Other Patterns Such as Redux
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final scenario we will look at is using the Vuex pattern. In this case,
    all state is held in a single store. Any updates to the state are dispatched to
    this store. Components read shared and/or global state from the store.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: Vuex is both a state management pattern and a library implementation from the
    Vue.js core team. The pattern aims to alleviate issues found when global state
    is shared by different parts of the application. The state of the store cannot
    be directly manipulated. **Mutations** are used to update store state and, since
    store state is reactive, any consumers of the Vuex store will automatically update.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Vuex draws inspiration from previous work in the JavaScript state management
    space such as the **Flux** architecture, which popularized the concept of unidirectional
    data flow, and **Redux**, which is a single-store implementation of Flux.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 'Vuex is not just another Flux implementation. It is a Vue.js-specific state
    management library. It can therefore leverage Vue.js-specific things such as reactivity
    to improve the performance of updates. The following diagram shows a hierarchy
    of the props and the state updates:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.25: Vuex props and state updates hierarchy'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_08_25.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.25: Vuex props and state updates hierarchy'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'To update pieces of global state, components trigger an update called a mutation
    in the store. The store knows how to handle this update. It updates state and
    propagates props back down accordingly through Vue.js reactivity:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.26: Sequence diagram of a global state update with Vuex'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_08_26.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.26: Sequence diagram of a global state update with Vuex'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: We can extend the existing application using Vuex.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to add the `vuex` module using `yarn add vuex` or `npm install
    --save vuex`.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to register Vuex with Vue using `Vue.use()` in the `store.js`
    file:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Finally, we create a Vuex store with a default state. This state includes the
    same `formData` object we have been using in the `store.js` file. We then export
    it using `export default`:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Finally, we need to register our store with our main application instance of
    Vue.js in the `main.js` file:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The great thing is that every component has a reference to the store under
    `this.$store`. For example, to access `formData`, we can use `this.$store.state.formData`.
    Using this, we can replace the event bus subscription and local state updates
    in the script section of the `AppProfileDisplay.vue` file with a single computed
    property:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: To trigger state updates, we need to define some mutations. In this case, we
    need `profileUpdate` in the `store.js` file. Mutations receive `state` (the current
    state) and `payload` (the store `commit` payload) as properties.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now that we have got a `profileUpdate` mutation, we can update the `Reset`
    button in the `AppHeader.vue` file to use the Vuex `$store.commit()` function:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We should also update the `AppProfileForm.vue` file to commit to the `$store`
    instead of emitting to the event bus:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The application will now support updating the name and occupation:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.27: Application with AppProfileForm filled out and submitted'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_08_27.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.27: Application with AppProfileForm filled out and submitted'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, the `Reset` button does not clear the form:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.28: Application with AppProfileForm not clearing on Reset button
    click'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_08_28.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.28: Application with AppProfileForm not clearing on Reset button click'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'To reset more efficiently, we will add a `profileClear` mutation in the `store.js`
    file:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We will commit this action instead of `profileUpdate` in the `AppHeader.vue`
    file. Using `profileClear` instead of `profileUpdate` with empty data makes our
    code cleared:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Finally, we will need to subscribe to store changes and reset the local state
    when `profileClear` is committed to the store in the `AppProfileForm` file:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now the application''s `Reset` button will work correctly with Vuex. Our screen
    should display as follows:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.29: Application Reset button clearing both the form and the display'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_08_29.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.29: Application Reset button clearing both the form and the display'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: We have now seen how to use the Vuex store to store global state in our application.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8.04: Adding an Organization Field to the Profile Generator'
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a `profile card generator`, in addition to the name and occupation of an
    individual, it's also useful to know where they work, in other words, their organization.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we will add an `organization` field in `AppProfileForm` and `AppProfileDisplay`.
    To access the code files for this exercise, refer to [https://packt.live/3lIHJGe](https://packt.live/3lIHJGe).
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'We can start by adding a new text input and label to `AppProfileForm`:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The new field looks as follows:'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.30: Application with a new Organization field'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_08_30.jpg)'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.30: Application with a new Organization field'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can then add the `organization` field to the initial state and mutations
    in `src/store.js` so that `organization` gets initialized, set during `profileUpdate`,
    and reset during `profileClear`:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We need to track `organization` in the local state of the `src/components/AppProfileForm.vue`
    component using `v-model` and initializing it in the `data()` function:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'For the payload of the mutation to contain `organization`, we''ll need to add
    it to the `$store.commit(''profileUpdate'')` payload and also reset it in the
    form when a component triggers a `profileClear` mutation:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'For `organization` to display, we need to render it in `src/components/AppProfileDisplay.vue`
    using a conditional span (to hide `at` when there is no `organization` set):'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The application will now allow us to capture an `organization` field and display
    it.
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.31: Profile Card Generator with Organization field support, filled
    out and submitted'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_08_31.jpg)'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.31: Profile Card Generator with Organization field support, filled
    out and submitted'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: 'It will allow us to clear the profile without any issues too:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.32: Profile Card Generator with Organization field support, after
    Reset button click'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_08_32.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.32: Profile Card Generator with Organization field support, after
    Reset button click'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: We've now seen how to add a field to an application that uses Vuex. One of the
    biggest benefits of Vuex over an event bus or storing state in an ancestor component
    is that it scales as you add more data and operations. The following activity
    will showcase this strength.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 8.01: Adding Email and Phone Number to a Profile Card Generator'
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a profile generator, you look at a profile to find some information about
    the individual. Email and phone number are often the most crucial pieces of information
    looked for on a profile card. This activity is about adding these details to a
    profile card generator.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we will add `Email` and `Phone Number` fields in `AppProfileForm`
    and `AppProfileDisplay`:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: We can start by adding a new `email` input field and label to `AppProfileForm`
    for the `Email` field.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can then add a new `phone` input field (of type `tel`) and a label to `AppProfileForm`
    for the `Phone Number` field:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The new fields look as follows:'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.33: Application with new Email and Phone Number fields'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_08_33.jpg)'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.33: Application with new Email and Phone Number fields'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We can then add the `email` and `phone` fields to the initial state and mutations
    in `src/store.js` so that organization gets initialized, set during `profileUpdate`,
    and reset during `profileClear`.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to track `email` in the local state of the `src/components/AppProfileForm.vue`
    component using `v-model` and initialize it in the `data()` function.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to track `phone` in the local state of the `src/components/AppProfileForm.vue`
    component using `v-model` and initialize it in the `data()` function.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the payload of the mutation to contain `email` and `phone`, we'll need to
    add it to the `$store.commit('profileUpdate')` payload. We'll also want to reset
    it in the form when a component triggers a `profileClear` mutation.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For `email` to display, we need to render it in `src/components/AppProfileDisplay.vue`
    using a conditional paragraph (to hide the `Email` label when there is no email
    set).
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For `phone` to display, we need to render it in `src/components/AppProfileDisplay.vue`
    using a conditional span (to hide the `Phone Number` label when there is no phone
    set).
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The application should look as follows when the form is filled out and submitted:'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.34: Application with Email and Phone Number fields'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_08_34.jpg)'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.34: Application with Email and Phone Number fields'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this activity can be found via [this link](B15218_Solution_Final_SZ_ePub.xhtml#_idTextAnchor397).
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: When to Use Local State and When to Save to Global State
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen through the common ancestor, event bus, and Vuex examples, the
    Vue.js ecosystem has solutions for managing shared and global state. What we will
    look at now is how to decide whether something belongs in local state or global
    state.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: A good rule of thumb is that if a prop is passed through a depth of three components,
    it is probably best to put that piece of state in global state and access it that
    way.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: The second way to decide whether something is local or global is to ask the
    question *when the page reloads, does the user expect this information to persist?*.
    Why does this matter? Well, global state is a lot easier to save and persist than
    local state. This is due to global state's nature as *just a JavaScript object*
    as opposed to component state, which is more closely tied to the component tree
    and Vue.js.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Another key idea to bear in mind is that it is very much possible to mix Vuex
    and local state in a component. As we have seen with the `AppProfileForm` examples,
    exercises, and activity, we can selectively sync data from mutations into a component
    using `$store.subscribe`.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the day, there is nothing wrong with wrapping a Vue.js data property
    in a computed property and accessing the computed property to make a potential
    transition to Vuex easier. In this scenario, since all access is already done
    through the computed property, it is just a change from `this.privateData` to
    `this.$store.state.data`.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we have looked at different approaches to shared and
    global state management in a Vue.js application.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: State in a shared ancestor allows data sharing between sibling components through
    props and events.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: An event bus has three operations—`Vue.js` application. We have also seen how
    a `Vue.js` instance can be used as an event bus.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: You know what the Vuex pattern and library entail, how they differ from Redux
    and Flux, as well as the benefits of using a Vuex store over a shared ancestor
    or event bus.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have had a look at what criteria can be used to decide whether state
    should live in local component state or a more global or shared state solution
    such as Vuex. This chapter was an introduction to the state management landscape
    in `Vue.js`.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will be a deep-dive into writing large-scale `Vue.js` applications
    with Vuex.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
