- en: Chapter 7. Working with Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。使用表单
- en: This chapter will show readers how to use Angular 2 directives related to form
    creation and how to use a code-based form component to the HTML form. The chapter
    will use Bootstrap 4 to enhance the look of the form and to indicate invalid input
    for our web application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向读者展示如何使用与表单创建相关的Angular 2指令，以及如何使用基于代码的表单组件来创建HTML表单。本章将使用Bootstrap 4来增强表单的外观，并指示我们的Web应用程序的无效输入。
- en: 'At the end of the chapter, you will have a solid understanding of:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将对以下内容有扎实的理解：
- en: Bootstrap 4 forms
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap 4表单
- en: Angular 2 form directives
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 2表单指令
- en: One-way and two-way data bindings
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单向和双向数据绑定
- en: How to add validation to a form
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何向表单添加验证
- en: Joining the pieces of our application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接我们应用程序的各个部分
- en: 'Let''s start with the following steps:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下步骤开始：
- en: Open the Terminal, create a folder called `ecommercem` and open it.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，创建一个名为`ecommercem`的文件夹并打开它。
- en: Copy the content of the project from the folder, `chapter_7/1.ecommerce-seed,`
    into the new project.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目内容从文件夹`chapter_7/1.ecommerce-seed`复制到新项目中。
- en: 'Run the following script to install NPM modules:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下脚本以安装NPM模块：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Start the TypeScript watcher and lite server with the following command:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令启动TypeScript监视器和lite服务器：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This script opens the web browser and navigates to the welcome page of the project.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本打开了网页浏览器并导航到项目的欢迎页面。
- en: HTML form
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML表单
- en: 'An HTML form is a section of a web document containing:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: HTML表单是网页文档的一个部分，包含：
- en: Text
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本
- en: Images
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图片
- en: Markups
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记
- en: Special elements such as controls, like checkboxes, radio buttons, and so on
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特殊元素，如控件，如复选框、单选按钮等
- en: Labels on those controls that describe their purposes
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述控件目的的标签
- en: 'The user modifies the controls by entering text or selecting the drop-down
    menu to complete the form and submits it to the backend for processing. Every
    control has a `name` attribute the form uses to collect a specific piece of data.
    Those names are important because:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 用户通过输入文本或选择下拉菜单来修改控件，完成表单并将其提交到后端进行处理。每个控件都有一个`name`属性，表单用它来收集特定的数据。这些名称很重要，因为：
- en: On the client side, it tells the browser which names to give each piece of data
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端，它告诉浏览器给每个数据片段起什么名字
- en: On the server side, it lets the server handle each piece of data by name
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务器端，它让服务器通过名称处理每个数据片段
- en: The form defines where and how to send the data to the server via `action` and
    `method` attributes accordingly. The form usually has a submit button to allow
    the user to send data to the server.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 表单通过`action`和`method`属性定义了向服务器发送数据的位置和方式。表单通常有一个提交按钮，允许用户向服务器发送数据。
- en: Bootstrap forms
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bootstrap表单
- en: Bootstrap 4 provides default style form controls and layout options to create
    the customs forms for consistent rendering across browsers and devices.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 4提供了默认样式的表单控件和布局选项，以创建一致的渲染效果，适用于各种浏览器和设备。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For proper rendering, all inputs must have a `type` attribute.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确渲染，所有输入都必须有一个`type`属性。
- en: Form controls
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单控件
- en: 'Bootstrap supports specific classes to customize the following form controls:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap支持特定的类来自定义以下表单控件：
- en: The `form-group` class uses any group of form controls. You can use it with
    any block-level element such as `fieldset` or `div` .
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form-group`类用于任何一组表单控件。您可以将其与`fieldset`或`div`等块级元素一起使用。'
- en: The `form-control` class uses textual inputs, select menus, and text areas.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form-control`类用于文本输入、选择菜单和文本区域。'
- en: The `form-control-file` is the only one applicable to the file inputs.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form-control-file`是唯一适用于文件输入的类。'
- en: There are `form-check` and `formcheck-inline` classes we can use with checkboxes
    and radio buttons.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有`form-check`和`formcheck-inline`类，我们可以用它们来处理复选框和单选按钮。
- en: Form layouts
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单布局
- en: 'All forms by default are stacked vertically because Bootstrap 4 applies `display:
    block` and `width: 100%` to all form controls. We can use additional classes to
    vary this layout.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '所有的表单默认都是垂直堆叠的，因为Bootstrap 4将`display: block`和`width: 100%`应用到所有的表单控件上。我们可以使用额外的类来改变这种布局。'
- en: Standard form
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准表单
- en: 'Use the `form-group` class to create the form quickly:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`form-group`类快速创建表单：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This class adds `margin-bottom` around a label and control for optimum spacing:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类为标签和控件周围添加了`margin-bottom`，以获得最佳间距：
- en: '![Standard form](Image00108.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![标准表单](Image00108.jpg)'
- en: Inline form
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内联表单
- en: Use the `form-inline` class if you need to lay out the form elements in a single
    horizontal row aligned to the left.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要将表单元素在单个水平行中左对齐布局，请使用`form-inline`类。
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The form aligns controls inline only in viewports wider than 768px.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 表单只在宽度大于768px的视口中内联对齐控件。
- en: 'Form controls behave differently because they receive `width:auto` instead
    of `width: 100%` . To provide the vertical alignment with all of them use the
    `display: inline-block` . You may need to manually address the width and alignment
    of individual controls:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '表单控件的行为不同，因为它们接收到的是`width:auto`而不是`width: 100%`。为了使它们垂直对齐，使用`display: inline-block`。您可能需要手动调整各个控件的宽度和对齐方式：'
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Each form control should have the pair `label` element.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 每个表单控件都应该有`label`元素。
- en: 'I only added the `form-inline` class to the form element to lay out the element
    horizontally:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是在表单元素中添加了`form-inline`类来水平布局元素：
- en: '![Inline form](Image00109.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![内联表单](Image00109.jpg)'
- en: Hidden labels
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐藏标签
- en: 'You can hide away the labels in respect of placeholders for the standard and
    inline forms:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以隐藏标准和内联表单的标签，以便使用占位符：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We just add the `sr-only` class to each label:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需为每个标签添加`sr-only`类：
- en: '![Hidden labels](Image00110.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![隐藏标签](Image00110.jpg)'
- en: Why can we not remove labels from the form to make them invisible? The answer
    to this question lies in the use of assistive technologies such as screen readers
    for people with limited abilities. The screen readers will render the form incorrectly
    if we do not include a label for every input. The Bootstrap authors intentionally
    designed the `sr-only` class to hide information from the layout of the rendering
    page only for screen readers.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们不能删除表单中的标签使它们不可见？这个问题的答案在于辅助技术的使用，比如对于有限能力的人来说，屏幕阅读器。如果我们不为每个输入添加标签，屏幕阅读器会错误地渲染表单。Bootstrap的作者特意设计了`sr-only`类，只为屏幕阅读器隐藏页面布局中的信息。
- en: Form control size
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单控件尺寸
- en: 'There are two extra sizes of form controls, in addition to the default one,
    that we can use to increase or decrease the size of the form:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 表单控件有两种额外的尺寸，除了默认的尺寸，我们可以使用它们来增加或减小表单的尺寸：
- en: Use the `form-control-lg` to increase the size of input control
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`form-control-lg`来增加输入控件的尺寸
- en: Use the `form-control-sm` to decrease the size of input control
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`form-control-sm`来减小输入控件的尺寸
- en: Help text
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 帮助文本
- en: Sometimes we need to display the help text for associated form controls. Bootstrap
    4 supports help text for standard and inline forms.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们需要显示与表单控件相关的帮助文本。Bootstrap 4支持标准和内联表单的帮助文本。
- en: 'You can use the `form-text` class to create the block level help. It includes
    the `display: block` and adds some top margin for easy spacing from the preceding
    inputs:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '您可以使用`form-text`类来创建块级帮助。它包括`display: block`并为易于与前面的输入控件间隔添加一些顶部边距：'
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Help text](Image00111.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![帮助文本](Image00111.jpg)'
- en: 'Use the `text-muted` class with any typical inline element (like `span` or
    `small` ) to create help text for inline forms:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`text-muted`类与任何典型的内联元素（如`span`或`small`）一起创建内联表单的帮助文本：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Help text](Image00112.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![帮助文本](Image00112.jpg)'
- en: Form grid layout
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单网格布局
- en: 'We can use Bootstrap 4 grids to create more structured layouts for forms. Here
    are some guidelines:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Bootstrap 4网格为表单创建更结构化的布局。以下是一些指南：
- en: Wrap the form in an element with the `container` class
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将表单包装在具有`container`类的元素中
- en: Add the `row` class to `form-group`
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`row`类添加到`form-group`
- en: Use `col-*-*` classes to specify the width of labels and controls
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`col-*-*`类来指定标签和控件的宽度
- en: Add `col-form-label` class to all labels to vertically align them to corresponding
    controls
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`col-form-label`类添加到所有标签上，以使它们垂直对齐相应的控件
- en: Add `col-form-legend` to legend elements to help them appear similar to regular
    labels
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`col-form-legend`添加到传奇元素，以使它们看起来与常规标签类似
- en: 'Let''s update our markup with grids:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用网格更新我们的标记：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Form grid layout](Image00113.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![表单网格布局](Image00113.jpg)'
- en: Stacked checkboxes and radios
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆叠复选框和单选按钮
- en: Bootstrap 4 improves the layout and behavior of checkboxes and radio buttons
    with the help of `form-check*` classes. There is only one class for both types
    to help vertically stack and space the sibling elements. The labels and inputs
    must have appropriate `form-check-label` and `form-check-input` classes to make
    that magic happens.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 4通过`form-check*`类改进了复选框和单选按钮的布局和行为。这两种类型只有一个类，可以帮助垂直堆叠和间距兄弟元素。标签和输入必须具有适当的`form-check-label`和`form-check-input`类，以实现这种魔术。
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Stacked checkboxes and radios](Image00114.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![堆叠复选框和单选按钮](Image00114.jpg)'
- en: Inline checkboxes and radios
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内联复选框和单选按钮
- en: 'In scenarios when you need checkboxes or radio buttons to be layed out on a
    horizontal row you can:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在需要复选框或单选按钮水平排列的情况下，您可以：
- en: Add the `form-check-inline` class to the label element
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`form-check-inline`类添加到标签元素
- en: Add the `form-check-input` to the input
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`form-check-input`添加到输入
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Inline checkboxes and radios](Image00115.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![内联复选框和单选按钮](Image00115.jpg)'
- en: Static control
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态控件
- en: 'In the cases when you need to display the plain text instead of input fields
    you can use the paragraph element marked with the `form-control-static` class:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在需要显示纯文本而不是输入字段的情况下，可以使用带有`form-control-static`类的段落元素：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Static control](Image00116.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![静态控件](Image00116.jpg)'
- en: Disabled states
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用状态
- en: 'We can disable the input on one or many controls with an attribute of the same
    name:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用相同名称的属性禁用一个或多个控件上的输入：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The disabled input field is shown lighter and with the `not-allowed` cursor:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用的输入字段显示为较浅颜色，并带有`not-allowed`光标：
- en: '![Disabled states](Image00117.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![禁用状态](Image00117.jpg)'
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Use custom JavaScript code to disable the anchor and fieldset because browsers
    such as IE 11 and below don't fully support this property.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自定义JavaScript代码禁用锚点和字段集，因为IE 11及以下的浏览器不完全支持此属性。
- en: Read-only inputs
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 只读输入
- en: 'To prevent modification of any input field you can use a read-only attribute:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止修改任何输入字段，可以使用只读属性：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'These fields appear lighter with the standard cursor:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字段看起来较浅，带有标准光标：
- en: '![Read-only inputs](Image00118.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![只读输入](Image00118.jpg)'
- en: Validation styles
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证样式
- en: 'Bootstrap supports three validation states and appropriate styles for the form
    controls:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap支持三种验证状态，并为表单控件提供适当的样式：
- en: The `has-success` class defines the success state
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has-success`类定义了成功状态'
- en: The `has-danger` class defines the danger state
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has-danger`类定义了危险状态'
- en: The `has-warning` class defines the warning state
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has-warning`类定义了警告状态'
- en: 'We should apply those classes to the parent element, so all `control-label`
    , `form-control` , or `text-muted` elements will inherit the validation styles.
    We can use the feedback icons within the textual inputs such as `form-control-success`
    , `form-control-warning` , and `form-control-danger` . To give extra attention
    to validation, we can use contextual validation text with the help of `form-control-feedback`
    style. It adapts color to the parent `has-*` class:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该将这些类应用到父元素，这样所有的`control-label`、`form-control`或`text-muted`元素都将继承验证样式。我们可以在文本输入中使用反馈图标，比如`form-control-success`、`form-control-warning`和`form-control-danger`。为了给予额外的验证注意，我们可以使用`form-control-feedback`样式的上下文验证文本。它会根据父`has-*`类自适应颜色：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Validation styles](Image00119.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![验证样式](Image00119.jpg)'
- en: Formless search
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无表单搜索
- en: 'Look at the markup in the `product-search.component.html` file:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`product-search.component.html`文件中的标记：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'I didn''t use the `form` tag here. Why? The answer is quite tricky. The form
    tag is required mostly for the following scenarios:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我这里没有使用`form`标签。为什么？答案相当棘手。表单标签主要用于以下情况：
- en: You want to execute a non-AJAX request or post file to the server
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您想执行非AJAX请求或向服务器发送文件
- en: You need to programmatically capture the `submit` or `reset` events
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要以编程方式捕获`submit`或`reset`事件
- en: You want to add validation logic to the form
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您想要向表单添加验证逻辑
- en: For others, we could abandon it. The logic behind the search field is to update
    URL with appropriate information without any request to the server. So this is
    why the search is formless.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他情况，我们可以放弃它。搜索字段背后的逻辑是在不向服务器发出任何请求的情况下，使用适当的信息更新URL。这就是为什么搜索是无表单的。
- en: 'The search form has one issue; the **Go** button is always enabled even when
    the search field is empty. This results in inappropriate search results. We need
    to add validation to fix this issue and we have two options here:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索表单存在一个问题；即使搜索字段为空，**Go**按钮也始终处于启用状态。这会导致不合适的搜索结果。我们需要添加验证来解决这个问题，这里有两个选项：
- en: Start listening to the key events from search field to manage the `enabled`
    property of the **Go** button
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始监听搜索字段的键事件，以管理**Go**按钮的`enabled`属性
- en: Add validation and let Angular manage the `enabled` property of the **Go** button
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加验证，并让Angular管理**Go**按钮的`enabled`属性
- en: Let's do both of them to see the difference.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们两者都做一下，看看有什么区别。
- en: User input from event object
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件对象中的用户输入
- en: 'The user interacts with the web page, modifying the controls, and this results
    in triggering the DOM events. We use event binding to listen to those events that
    update components and models with the help of some simple syntax:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 用户与网页交互，修改控件，这会触发DOM事件。我们使用事件绑定来监听那些更新组件和模型的事件，并借助一些简单的语法：
- en: '[PRE15]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The shape of `$event` depends on which element raises the event. When the user
    types something on the input element it triggers the keyboard events and listens
    in the `searchChanged` method of the `ProductSearchComponent` :'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`$event`的形状取决于哪个元素引发了事件。当用户在输入元素上输入内容时，它会触发键盘事件，并在`ProductSearchComponent`的`searchChanged`方法中监听：'
- en: '[PRE16]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Firstly, we find the input element from the event `target` and change the `disabled`
    property of the component bound to the same name attribute of the `submit` button.
    By default, the disabled value equals true and the submit button is grayed out:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从事件`target`中找到输入元素，并更改与`submit`按钮的相同名称属性绑定的组件的`disabled`属性。默认情况下，禁用值等于true，提交按钮被灰掉：
- en: '![User input from event object](Image00120.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![事件对象中的用户输入](Image00120.jpg)'
- en: 'When the user inputs the text to search, the triggered events enable the button
    to update the URL:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户输入要搜索的文本时，触发的事件会使按钮更新URL：
- en: '![User input from event object](Image00121.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![事件对象中的用户输入](Image00121.jpg)'
- en: User input from a template reference variable
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来自模板引用变量的用户输入
- en: 'We can use the `#search` template reference variable to get value directly
    from the input element like this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`#search`模板引用变量直接从输入元素中获取值，就像这样：
- en: '[PRE17]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The code of the `searchChanged` method becomes a bit smaller:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`searchChanged`方法的代码变得更小了：'
- en: '[PRE18]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Opt to use the template reference variable to pass values instead of DOM events
    into the component listening methods.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 选择使用模板引用变量将值传递给组件监听方法，而不是DOM事件。
- en: You can find the source code at `chapter_7/2.ecommerce-key-event-listenning`
    .
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`chapter_7/2.ecommerce-key-event-listenning`找到源代码。
- en: Product View
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 产品视图
- en: 'The product card component displayed in the products grid has a **More Info**
    button. When the user clicks the button, it navigates to the Product View where
    you can do the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在产品网格中显示的产品卡片组件有一个**更多信息**按钮。当用户点击按钮时，它会导航到产品视图，您可以进行以下操作：
- en: Display the product information
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示产品信息
- en: Check the availability of the product
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查产品的可用性
- en: Update the quantity of the product by clicking **Add to Cart** or **Remove from
    Cart**
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过点击**加入购物车**或**从购物车中移除**来更新产品的数量
- en: Return to the products list by clicking on **Continue Shopping**
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击**继续购物**返回产品列表
- en: '![Product View](Image00122.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![产品视图](Image00122.jpg)'
- en: The wireframe of the Product View
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 产品视图的线框图
- en: Let's create the `product-view.component.html` . The content of this view is
    quite big, so I will explain it per columns.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`product-view.component.html`。这个视图的内容相当大，所以我会按列来解释它。
- en: Product image
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 产品图片
- en: 'In the first column, we show the image of the product. The product interface
    has reference to large images, so it is simple to present it on screen:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一列中，我们展示了产品的图片。产品界面有大图的参考，所以在屏幕上呈现它很简单：
- en: '[PRE19]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here is what this column looks like:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这一列的样子：
- en: '![Product image](Image00123.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![产品图片](Image00123.jpg)'
- en: Product information
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 产品信息
- en: 'The second column keeps the information about the product. I decided to use
    a Bootstrap 4 card component to present the information on screen:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 第二列保存了关于产品的信息。我决定使用Bootstrap 4的卡片组件来在屏幕上呈现信息：
- en: '[PRE20]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We have three cards here. The first one contains the product's general information
    such as the `title` and `description` . The following list keeps the product `id`
    and `category` . We use the `categoryTitle` pipe to print out the category title.
    At the end, we print out the availability information with the fake data. We will
    update this block in the next chapter, so leave it as it is for now.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有三张卡片。第一张包含产品的一般信息，比如`title`和`description`。接下来的列表保存了产品的`id`和`category`。我们使用`categoryTitle`管道来打印出类别标题。最后，我们用虚假数据打印出可用性信息。我们将在下一章更新这个块，所以现在就保持原样。
- en: '![Product information](Image00124.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![产品信息](Image00124.jpg)'
- en: 'The second and third cards work against each other and present information
    depending on the value of the `isSpecial` property of the product. When this property
    is `true` we show the price in an altering color:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 第二和第三张卡片相互对立，并根据产品的`isSpecial`属性的值呈现信息。当这个属性为`true`时，我们会以交替的颜色显示价格：
- en: '![Product information](Image00125.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![产品信息](Image00125.jpg)'
- en: The CategoryTitle pipe
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CategoryTitle管道
- en: 'As was mentioned in [Chapter 4](text00036.html#page "Chapter 4. Creating the
    Template") , *Creating the Template* , the Angular Framework gives us pipes: a
    way to write display-value transformations that we can declare in templates. The
    pipe is a simple function that accepts an input value and returns a transformed
    value. In our case, we keep the category ID in the cart item, but we need to display
    the title of the category. For that reason we created the file `category.pipe.ts`
    with the following content:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在[第4章](text00036.html#page "第4章。创建模板")中提到的，*创建模板*，Angular框架为我们提供了管道：一种在模板中声明的显示值转换的方法。管道是一个简单的函数，接受一个输入值并返回一个转换后的值。在我们的情况下，我们在购物车项目中保留了类别ID，但我们需要显示类别的标题。出于这个原因，我们创建了文件`category.pipe.ts`，内容如下：
- en: '[PRE21]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Plus, we updated the `CategoryModule` to declare and export the `CategoryTitlePipe`
    :'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们更新了`CategoryModule`来声明和导出`CategoryTitlePipe`：
- en: '[PRE22]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now, the `CategoryTitlePipe` is available across the application.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`CategoryTitlePipe`在整个应用程序中都可用。
- en: Cart information in Product View
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 产品视图中的购物车信息
- en: I used the Bootstrap 4 Form laid out inside the cart component in the last column
    to keep and manage information from the shopping cart as explained as follows.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我在购物车组件的最后一列中使用了Bootstrap 4表单布局，以保留和管理来自购物车的信息，如下所述。
- en: Quantity and amount
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数量和金额
- en: 'The quantity and amount of the product are crucial for the user doing the shopping.
    To present them on the view, I bound the component properties of the same name
    to the template:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 产品的数量和金额对于购物的用户至关重要。为了在视图上呈现它们，我将相同名称的组件属性绑定到模板中：
- en: '[PRE23]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Actions
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作
- en: 'The user uses **Add to Cart** and **Remove from Cart** buttons to increase
    and decrease the quantity of the product on the shopping cart. These buttons call
    the appropriate methods of the `CartService` to make the necessary changes in
    the shopping cart:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 用户使用**加入购物车**和**从购物车中移除**按钮来增加和减少购物车中产品的数量。这些按钮调用`CartService`的适当方法来对购物车进行必要的更改：
- en: '[PRE24]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: At the end, we have a **Continue Shopping** button to help the user navigate
    back to the Products View.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一个**继续购物**按钮，帮助用户返回到产品视图。
- en: '![Actions](Image00126.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![操作](Image00126.jpg)'
- en: Every time a user adds or removes a product from the shopping cart, the changes
    happen in the Product View, which updates information in the Cart Menu present
    in the navigation bar.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 用户每次向购物车中添加或移除产品时，更改都会发生在产品视图中，该视图会更新导航栏中的购物车菜单中的信息。
- en: Product View component
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 产品视图组件
- en: 'Now let''s create `product-view.component.ts` with the following code:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建`product-view.component.ts`，其中包含以下代码：
- en: '[PRE25]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'There are two properties, `product` and `cartItem,` available in `ProductViewComponent`
    to get information to the template. We use the `product` property to display information
    in the second column of the Product View. The `cartItem` property keeps the reference
    on the item in the shopping cart linked to the product:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ProductViewComponent`中有两个属性，`product`和`cartItem`，用于获取模板中的信息。我们使用`product`属性在产品视图的第二列中显示信息。`cartItem`属性保留了与产品相关联的购物车中的项目的引用：
- en: '[PRE26]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We need only show `count` and `amount` in the third column of the Product View
    but it is impossible without extra work:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要在产品视图的第三列中显示`count`和`amount`，但这是不可能的，需要额外的工作：
- en: 'The first problem is that we cannot show information from the `CartItem` until
    adding the product to the shopping cart. To solve it, we introduced the getter
    methods for `count` and `amount` properties:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个问题是，我们无法在将产品添加到购物车之前显示`CartItem`的信息。为了解决这个问题，我们引入了`count`和`amount`属性的getter方法：
- en: '[PRE27]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Another issue happens when the user adds a product to the shopping cart for
    the first time or removes the last one from it. As a solution, we need to reassign
    the `cartItem` from the shopping cart whenever we call the `addToCart` and `removeFromCart`
    methods:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户第一次将产品添加到购物车或从中删除最后一个时，另一个问题就会发生。作为解决方案，我们需要在调用`addToCart`和`removeFromCart`方法时重新分配来自购物车的`cartItem`：
- en: '[PRE28]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We use the `ActivatedRoute` service to retrieve the parameters for our route
    in the constructor. Since our parameters are provided as an `Observable` , we
    subscribe to them for the `id` parameter by name and tell `productService` and
    `cartService` to fetch appropriate information. We'll keep a reference to this
    `Subscription` so we can tidy things up later.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`ActivatedRoute`服务在构造函数中检索路由的参数。由于我们的参数是作为`Observable`提供的，我们通过名称订阅它们以获取`id`参数，并告诉`productService`和`cartService`获取适当的信息。我们将保留对此`Subscription`的引用，以便稍后整理事情。
- en: Adding ProductView to the ProductModule
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将ProductView添加到ProductModule
- en: 'Open the `product.module.ts` file to reference the `ProductView` there:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`product.module.ts`文件以在那里引用`ProductView`：
- en: '[PRE29]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `ProductView` is now available in the entire application.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProductView`现在在整个应用程序中可用。'
- en: Product View route definition with a parameter
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带参数的产品视图路由定义
- en: 'We must update the router configuration in the `app.routes.ts` so, when a user
    selects the product, Angular navigates to the `ProductViewComponent` :'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须在`app.routes.ts`中更新路由配置，这样，当用户选择产品时，Angular就会导航到`ProductViewComponent`：
- en: '[PRE30]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `id` in the third route is a token for a route parameter. In a URL such
    as `/product/123` , the `123` is the value of the `id` parameter. The corresponding
    `ProductViewComponent` uses that value to find and present the product whose `id`
    equals `123` .
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个路由中的`id`是路由参数的标记。在URL中，比如`/product/123`，`123`就是`id`参数的值。相应的`ProductViewComponent`使用该值来查找并呈现其`id`等于`123`的产品。
- en: Navigation to Product View
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航到产品视图
- en: 'When the user clicks on the **More Info** button on the card in the Products
    View, the router uses information provided as an array to the `routerLink` to
    build the navigation URL to the Product View:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在产品视图中的卡片上点击**更多信息**按钮时，路由器使用作为数组提供的信息来构建导航到产品视图的导航URL：
- en: '[PRE31]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here are how all three columns of the Product View look:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是产品视图的三列的外观：
- en: '![Navigation to Product View](Image00127.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![导航到产品视图](Image00127.jpg)'
- en: Tip
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can find the source code at `chapter_7/3.ecommerce-product-view` .
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`chapter_7/3.ecommerce-product-view`找到源代码。
- en: Angular 2 forms
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular 2表单
- en: 'We didn''t use Angular 2 forms in our project before, so now it''s time to
    unveil those predominantly flexible tools. Based on the nature of the information
    of the web application requesting from the user, we can split it into static and
    dynamic forms:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前没有在项目中使用过Angular 2表单，所以现在是时候揭开那些主要灵活的工具了。根据Web应用程序从用户请求的信息的性质，我们可以将其分为静态和动态表单：
- en: We use the template-driven approach to build static forms
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用模板驱动的方法来构建静态表单
- en: We use the model-driven approach to build dynamic forms
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用模型驱动的方法来构建动态表单
- en: Forms setup
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单设置
- en: 'Before we use the new Angular 2 forms module, we need to install it. Open the
    Terminal window, navigate to the web project, and run the npm package manager
    with the following command:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用新的Angular 2表单模块之前，我们需要安装它。打开终端窗口，导航到Web项目，并使用以下命令运行npm包管理器：
- en: '[PRE32]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now, when the forms module is installed, we enable it during the application
    bootstrap. Open the `app.module.ts` file and update it with the following code:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当表单模块安装完成后，我们在应用程序引导期间启用它。打开`app.module.ts`文件，并使用以下代码进行更新：
- en: '[PRE33]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We registered two different modules in `AppModule` because:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`AppModule`中注册了两个不同的模块，因为：
- en: The `FormsModule` is for template-driven forms
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormsModule`用于模板驱动表单'
- en: The `ReactiveFormsModule` is for reactive or dynamic forms
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReactiveFormsModule`用于响应式或动态表单'
- en: We will discover both of them shortly.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很快就会发现它们两个。
- en: Template-driven forms
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板驱动表单
- en: This way is the simplest one to build forms and requires little to no application
    code. We create the form declaratively in the template with the help of built-in
    Angular 2 directives doing all the magic behind the scene for us. Let's talk about
    the Angular 2 specific directives we can use in the forms.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方式是构建表单最简单的方式，几乎不需要应用程序代码。我们在模板中使用内置的Angular 2指令来声明性地创建表单，这些指令在幕后为我们执行所有的魔术。让我们谈谈在表单中可以使用的Angular
    2特定指令。
- en: The NgForm directive
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NgForm指令
- en: 'The `NgForm` directive creates a top-level `FormGroup` instance, providing
    information about the current state of the form, such as:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`NgForm`指令创建一个顶级`FormGroup`实例，提供有关表单当前状态的信息，例如：'
- en: The form value in JSON format
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON格式的表单值
- en: The form validity state
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单有效性状态
- en: 'Look at the directive definition of the class `FormGroupDirective` in the `form_group_directive.ts`
    from the source code of Angular 2:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 查看Angular 2源代码中的`form_group_directive.ts`中`FormGroupDirective`类的指令定义：
- en: '[PRE34]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The property `exportAs` of the directive metadata exposes an instance of `FormGroupDirective`
    to the template via the name `ngForm` so in any template we can use the template
    variable referencing on it:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 指令元数据的`exportAs`属性通过名称`ngForm`向模板公开`FormGroupDirective`的实例，因此在任何模板中，我们都可以使用模板变量引用它：
- en: '[PRE35]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The template variable `myForm` has access to the form value, so we can use
    the handle function to manage submitting values like this:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 模板变量`myForm`可以访问表单值，因此我们可以使用handle函数来管理提交的值，就像这样：
- en: '[PRE36]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `ngSubmit` is an event signal where the user triggers a form submission.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`ngSubmit`是一个事件信号，用户触发表单提交时会触发该事件。'
- en: The NgModel directive
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NgModel指令
- en: 'The `NgModel` directive helps register form controls on a `NgForm` instance.
    We must specify the `name` attribute to every form control. With the combination
    of `ngModel` and `name` attributes, the form control will automatically appear
    in the `value` of the form:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`NgModel`指令有助于在`NgForm`实例上注册表单控件。我们必须为每个表单控件指定`name`属性。通过`ngModel`和`name`属性的组合，表单控件将自动出现在表单的`value`中：'
- en: '[PRE37]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Let''s print out the `value` of the form in the `handle` function:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`handle`函数中打印表单的`value`：
- en: '[PRE38]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The result is printed in JSON format:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 结果以JSON格式打印出来：
- en: '[PRE39]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: We can use the `ngModel` as an attribute directive with an expression to bind
    the existing model to the form controls. There are two ways we can approach this.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`ngModel`作为属性指令，通过表达式将现有模型绑定到表单控件。我们可以用两种方式来处理这个问题。
- en: 'The **one-way binding** applies an existing value to the form control via property
    binding:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '**单向绑定**通过属性绑定将现有值应用于表单控件：'
- en: '[PRE40]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In the `MyForm` class we have properties of the same name:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MyForm`类中，我们有同名的属性：
- en: '[PRE41]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The **two-way binding** reflects changes on form control to an existing value
    of the property and vice versa:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**双向绑定**将表单控件上的更改反映到属性的现有值，反之亦然：'
- en: '[PRE42]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Track change-state and validity with NgModel
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用NgModel跟踪更改状态和有效性
- en: 'Every time we manually or programmatically manipulate form controls, `NgModel`
    tracks the state changes that happen on them. Based on that information, `NgModel`
    updates the control with specific classes. We can use those classes to organize
    visual feedback to reflect the state of components:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们手动或以编程方式操作表单控件时，`NgModel`都会跟踪发生在它们上面的状态更改。根据这些信息，`NgModel`会更新具有特定类的控件。我们可以使用这些类来组织视觉反馈，以反映组件的状态：
- en: Class `ng-untouched` marks the control that was not visited yet
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ng-untouched`类标记尚未访问的控件'
- en: Class `ng-touched` marks the visited control
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ng-touched`类标记访问过的控件'
- en: Class `ng-pristine` marks the control with the unchanged value
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类`ng-pristine`标记具有未更改值的控件
- en: Class `ng-dirty` marks the control with the changed value
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类`ng-dirty`标记具有更改值的控件
- en: Class `ng-invalid` marks an invalid control
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类`ng-invalid`标记无效控件
- en: Class `ng-valid` marks a valid control
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类`ng-valid`标记有效控件
- en: 'So, we should be able to use the `ng-valid` or `ng-invalid` class for feedback
    to the user about invalid form control. Let''s open the `ecommerce.css` file and
    add the following styles:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们应该能够使用`ng-valid`或`ng-invalid`类来向用户提供有关无效表单控件的反馈。让我们打开`ecommerce.css`文件并添加以下样式：
- en: '[PRE43]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Now, all controls marked as required fields will show the green left borders
    while all invalid fields will have the red left borders.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有标记为必填字段的控件将显示绿色的左边框，而所有无效字段将具有红色的左边框。
- en: The NgModelGroup directive
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NgModelGroup指令
- en: 'We can group the form controls into the control group. The form itself is a
    control group. It is possible to track the validity state of the controls in the
    group. Like the control uses a `ngModel` directive, the group utilizes a `NgModelGroup`
    directive:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将表单控件分组到控件组中。表单本身就是一个控件组。可以跟踪组中控件的有效状态。就像控件使用`ngModel`指令一样，组使用`NgModelGroup`指令：
- en: '[PRE44]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We can use `fieldset` or `div` elements to group controls. With the help of
    `ngModelGroup,` we semantically group controls into `user` and `contact` information:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`fieldset`或`div`元素来分组控件。借助`ngModelGroup`，我们可以将控件语义上分组为`user`和`contact`信息：
- en: '[PRE45]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Model-driven forms
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于模型的表单
- en: 'This approach helps to build forms without DOM requirements and makes them
    easy to test. It doesn''t mean we don''t need the templates. We need them in conjunction
    with the model-driven way. We are creating the form in a template and create the
    form model that represents the DOM structure. We can use two different APIs here:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有助于构建无需DOM要求的表单，并使其易于测试。这并不意味着我们不需要模板。我们需要它们与基于模型的方式结合使用。我们在模板中创建表单并创建代表DOM结构的表单模型。我们可以在这里使用两种不同的API：
- en: The low-level API based on `FormGroup` and `FormControl` classes
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于`FormGroup`和`FormControl`类的低级API
- en: The high-level API based on `FormBuilder` class
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于`FormBuilder`类的高级API
- en: 'Any form is a `FormGroup` . Any `FormGroup` represents a set of `FormControls`
    . Let''s imagine we have the following template:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 任何表单都是一个`FormGroup`。任何`FormGroup`代表一组`FormControls`。让我们想象一下我们有以下模板：
- en: '[PRE46]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now create a model for our form:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 现在为我们的表单创建一个模型：
- en: '[PRE47]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The `myForm` represents our form from the template. We create the `FormControl`
    for every field of the form and `FormGroup` for each group. In the first property,
    we assign the default value to the name. The `FormGroup` can contain another group
    and helps to create the hierarchy to replicate the DOM structure.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`myForm`代表我们在模板中的表单。我们为表单的每个字段创建`FormControl`，并为每个组创建`FormGroup`。在第一个属性中，我们为名称分配默认值。`FormGroup`可以包含另一个组，并有助于创建层次结构以复制DOM结构。'
- en: The FormGroup directive
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FormGroup指令
- en: 'Now we need to bind the model to the form elements with the help of an Angular
    2 `FormGroup` directive. We need to assign the expression evaluations into the
    `FormGroup` instance:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要使用Angular 2的`FormGroup`指令将模型绑定到表单元素。我们需要将表达式评估分配到`FormGroup`实例中：
- en: '[PRE48]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The FormControlName directive
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FormControlName指令
- en: 'The next very important step is to associate the model properties with form
    elements. We use the `FormControlName` instead of the name attribute to register
    the controls:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个非常重要的步骤是将模型属性与表单元素关联起来。我们使用`FormControlName`而不是name属性来注册控件：
- en: '[PRE49]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This directive keeps the `userName` of `FormControl` and `password` from `FormGroup`
    in sync with DOM elements of the same name. Any changes happen programmatically
    and the `FormGroup` properties will immediately be written into the DOM elements
    and vice versa. We use the `get` and `set` methods to access and update the form
    properties.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 该指令将`FormControl`和`FormGroup`中的`userName`和`password`与同名的DOM元素保持同步。任何变化都是以编程方式发生的，`FormGroup`属性将立即写入DOM元素，反之亦然。我们使用`get`和`set`方法来访问和更新表单属性。
- en: The FormGroupName directive
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FormGroupName指令
- en: 'In cases when we have a group of controls, we can use the `FormGroupName` directive
    to associate a group of controls with a parent `FormGroupDirective` (formally
    a `FormGroup` selector). You should specify via the name attribute to which nested
    `FormGroup` element you would like to link, so it might be quite handy to organize
    a validation of sub-group elements separately:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在有一组控件的情况下，我们可以使用`FormGroupName`指令将一组控件与父`FormGroupDirective`（正式为`FormGroup`选择器）关联起来。您应该通过名称属性指定要链接到哪个嵌套的`FormGroup`元素，因此单独组织子组元素的验证可能非常方便：
- en: '[PRE50]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: We use the get method of the `FormGroup` to get access to properties. Individual
    controls are available via dot syntax as shown in the preceding code.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`FormGroup`的`get`方法来访问属性。个别控件可以通过点语法来访问，如前面的代码所示。
- en: The FormBuilder class
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FormBuilder类
- en: 'The `FormBuilder` creates an `AbstractControl` form object from a user-specified
    configuration. So, instead of creating `FormGroup` , `FormControl` , and `FormArray`
    elements, we build the configuration to construct the model. We need only inject
    it in the constructor and call the `group` method to create the form group:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`FormBuilder`从用户指定的配置创建一个`AbstractControl`表单对象。因此，我们不需要创建`FormGroup`，`FormControl`和`FormArray`元素，我们构建配置来构造模型。我们只需要在构造函数中注入它，并调用`group`方法来创建表单组：'
- en: '[PRE51]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: As a result, we have a less verbose code.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们有了更简洁的代码。
- en: A FormControl directive
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FormControl指令
- en: 'At the beginning of this chapter, we talked about the formless search form.
    This form has only one element, and we don''t need a `FormGroup` at all. Angular
    has a `FormControl` directive which doesn''t have to be inside `FormGroup` . It
    only adds it to a single form control:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开头，我们谈到了无形搜索表单。这个表单只有一个元素，我们根本不需要`FormGroup`。Angular有一个`FormControl`指令，它不必在`FormGroup`内。它只将其添加到单个表单控件中：
- en: '[PRE52]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The updated version of the script looks like this:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的更新版本如下：
- en: '[PRE53]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Built-in validators
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内置验证器
- en: 'I cannot image the form without validators. Angular 2 comes with several built-in
    validators we can use declaratively as directives or imperatively with `FormControl`
    , `FormGroup` , or `FormBuilder` classes. Here is a list of them:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我无法想象没有验证器的表单。Angular 2带有几个内置验证器，我们可以使用声明式指令或使用`FormControl`，`FormGroup`或`FormBuilder`类进行命令式使用。以下是它们的列表：
- en: The form control with a `required` validator must have a non-empty value
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有`required`验证器的表单控件必须具有非空值
- en: The form control with a `minLength` must have the value of the minimum length
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有`minLength`的表单控件必须具有最小长度的值
- en: The form control with a `maxLength` must have the value of a maximum length
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有`maxLength`的表单控件必须具有最大长度的值
- en: The form control with a `pattern` must have the value to match the given regular
    expression
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有`pattern`的表单控件必须具有与给定正则表达式匹配的值
- en: 'Here is an example of how to use all of them declaratively:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何在声明式中使用它们的示例：
- en: '[PRE54]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Bear in mind that the `novalidate` is not a part of Angular 2\. It is an HTML5
    Boolean form attribute. The form will not validate input fields on submission
    when it presents.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`novalidate`不是Angular 2的一部分。这是一个HTML5布尔表单属性。当表单提交时，它不会验证输入字段。
- en: 'We can use the same validators imperatively with `FormGroup` and `FormControl`
    :'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用相同的验证器来命令性地使用`FormGroup`和`FormControl`：
- en: '[PRE55]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'As mentioned, we can use the `FormBuilder` and less verbose code:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们可以使用`FormBuilder`和更少冗长的代码：
- en: '[PRE56]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In both scenarios, we must use the `formGroup` directive to associate the `myForm`
    model with a form element in the DOM:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，我们必须使用`formGroup`指令将`myForm`模型与DOM中的表单元素关联起来：
- en: '[PRE57]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Creating a custom validator
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义验证器
- en: 'Angular 2 has an interface `Validator` that can be implemented by classes that
    can act as validators:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 2有一个接口`Validator`，可以由可以充当验证器的类来实现：
- en: '[PRE58]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Let''s create a function to validate the correctness of a ZIP code. Create
    the file `zip.validator.ts` in the `shared` folder with the following code:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个函数来验证邮政编码的正确性。在`shared`文件夹中创建文件`zip.validator.ts`，并使用以下代码：
- en: '[PRE59]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The function `validateZip` expects the `FormControl` as an argument and must
    return an error object if the value doesn''t match the regular expression or null
    if the value is valid. Now, we can import the `validateZip` function and use it
    in our class:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`validateZip`函数期望`FormControl`作为参数，并且如果值不匹配正则表达式，则必须返回一个错误对象，如果值有效，则返回null。现在，我们可以导入`validateZip`函数并在我们的类中使用它：'
- en: '[PRE60]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Creating a custom validator directive
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义验证器指令
- en: 'We can use Angular 2 built-in validators imperatively, or declaratively, with
    the help of some internal code to execute the validators on form controls. All
    built-in and custom validators must be registered in a multi-provider dependency
    token, `NG_VALIDATORS` . As you will remember from [Chapter 6](text00058.html#page
    "Chapter 6. Dependency Injection") , *Dependency Injection* , the multi-property
    of the provider allows the injection of multiple values to the same token. Angular
    injects `NG_VALIDATORS` , instantiates the form, and performs validation on the
    form control. Let''s create the custom validation directive we can use in template-driven
    forms. Open `zip.valdator.ts` and copy and paste the following code:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Angular 2内置的验证器命令式地或声明式地，借助一些内部代码来执行表单控件上的验证器。所有内置和自定义验证器都必须在多提供者依赖令牌`NG_VALIDATORS`中注册。正如您在[第6章](text00058.html#page
    "第6章. 依赖注入")中所记得的，*依赖注入*，提供者的多属性允许将多个值注入到相同的令牌中。Angular注入`NG_VALIDATORS`，实例化表单，并对表单控件进行验证。让我们创建自定义验证指令，我们可以在模板驱动的表单中使用。打开`zip.valdator.ts`并复制粘贴以下代码：
- en: '[PRE61]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'And now in the form we can use `ZipValidator` as a directive:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在表单中，我们可以使用`ZipValidator`作为指令：
- en: '[PRE62]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Cart view
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 购物车视图
- en: 'The cart view lists all items held in the user''s shopping cart. It displays
    product details for each item and, from this page, a user can:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车视图列出了用户购物车中持有的所有商品。它显示了每件商品的产品详细信息，并且用户可以从这个页面：
- en: Remove all goodies from his or her cart by clicking **Clear Cart**
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过单击**清空购物车**从购物车中删除所有商品
- en: Update the quantity for any listed item
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新任何列出的商品的数量
- en: Return to the products list by clicking on **Continue** shopping
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过单击**继续**购物返回产品列表
- en: Proceed to checkout by clicking **Checkout**
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过单击**结账**进行结账
- en: '![Cart view](Image00128.jpg)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![购物车视图](Image00128.jpg)'
- en: The wireframe of the cart view
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车视图的线框
- en: The significant part of the cart view is formed with dynamic content laid out
    in the grid. Look at the first column of the wireframe. There are rows of similar
    data we can use to display, modify, and validate. For this purpose, we can use
    Angular static forms to present the content of the shopping cart on the view.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车视图的重要部分是由网格中动态内容组成的。看一下线框的第一列。有一排类似的数据，我们可以用来显示、修改和验证。为此，我们可以使用Angular静态表单来在视图上呈现购物车的内容。
- en: 'Let''s create `cart-view.component.html` . In the first column, we need to
    print out information about products added to the shopping cart:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`cart-view.component.html`。在第一列，我们需要打印出添加到购物车的产品信息：
- en: '[PRE63]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'We use the template-driven approach here and assign a form variable to the
    exposed `ngForm` . I split the double-way binding format into two statements:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用模板驱动方法，并将表单变量分配给公开的`ngForm`。我将双向绑定格式拆分为两个语句：
- en: '`[ngModel]="item.count"` : This is used as property binding.'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[ngModel]="item.count"`：这用作属性绑定。'
- en: '`(ngModelChange)="item.count = update($event, item)"` : This is used as event
    binding.'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(ngModelChange)="item.count = update($event, item)"`：这用作事件绑定。'
- en: 'Every time a user updates the `count` value, this code calls the `update` method
    to add or remove products from the cart:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 每当用户更新`count`值时，此代码调用`update`方法来添加或从购物车中删除产品：
- en: '[PRE64]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Because we have a button, **Clear Cart** , we need to implement the method
    of the same name in `CartService` :'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们有一个**清空购物车**按钮，我们需要在`CartService`中实现同名的方法：
- en: '[PRE65]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Cart view route definition
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 购物车视图路由定义
- en: 'I updated the router configuration in the `app.routes.ts` to reflect the changes
    necessary to apply to navigate to the `CartViewComponent` :'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 我更新了`app.routes.ts`中的路由器配置，以反映必要的更改以导航到`CartViewComponent`：
- en: '[PRE66]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Navigation to cart view
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航到购物车视图
- en: 'When the user clicks on the **Cart** button in the markup of the Cart Menu,
    the router uses information from the link to navigate to the cart view:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在购物车菜单的标记中单击**购物车**按钮时，路由器使用链接中的信息导航到购物车视图：
- en: '[PRE67]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'We need to update the `CartModule` to add the `CartViewComponent` into the
    `declarations` property of `NgModule` :'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更新`CartModule`，将`CartViewComponent`添加到`NgModule`的`declarations`属性中：
- en: '[PRE68]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Here is the screenshot of the cart view:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 这是购物车视图的屏幕截图：
- en: '![Navigation to cart view](Image00129.jpg)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![导航到购物车视图](Image00129.jpg)'
- en: Tip
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can find the source code at `chapter_7/4.ecommerce-cart-view` .
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`chapter_7/4.ecommerce-cart-view`找到源代码。
- en: The Checkout View
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结账视图
- en: The Checkout View displays the customer details form, purchase conditions, and
    the order information. The customer should fill in the form, accept payment, and
    click on the **Submit** button to start the payment process.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 结账视图显示客户详细信息表单，购买条件和订单信息。客户应填写表单，接受付款，并单击**提交**按钮开始付款流程。
- en: '![The Checkout View](Image00130.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![结账视图](Image00130.jpg)'
- en: The wireframe of the Checkout View
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 结账视图的线框图
- en: 'Create the `checkout` folder and `checkout-view.component.ts` file:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`checkout`文件夹和`checkout-view.component.ts`文件：
- en: '[PRE69]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'I used the model-driven approach here to create the definition of the form.
    When the user clicks on the **Submit** button it shows the message and clears
    the shopping cart. Create the `checkout-view.component.html` and copy the following
    content there:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里使用了模型驱动方法来创建表单的定义。当用户单击**提交**按钮时，它会显示消息并清空购物车。创建`checkout-view.component.html`并将以下内容复制到那里：
- en: '[PRE70]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'We have several required fields, so when they are empty Angular 2, via `NgModel,`
    turns their bars red. That''s OK to indicate the problem but not enough to say
    what exactly is wrong. We can use the validation error message to display if the
    control is invalid or was not touched. Look at the markup I copied from the preceding
    code:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有几个必填字段，所以当它们为空时，Angular 2通过`NgModel`将它们的条变成红色。这是可以接受的，以指示问题，但不足以说明出了什么问题。我们可以使用验证错误消息来显示控件是否无效或未被触摸。看一下我从前面的代码中复制的标记：
- en: '[PRE71]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: We read information about `FormControl` status directly from the form model.
    We check if the `firstName` field is valid or if it's pristine and show or hide
    the error message.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 我们直接从表单模型中读取`FormControl`状态的信息。我们检查`firstName`字段是否有效，或者是否是原始的，并显示或隐藏错误消息。
- en: 'At the end, we bind the disabled property of the **Submit** button to the validity
    of the form, so the user will have the chance to send the data to the server only
    if all the fields of the form are valid:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将**提交**按钮的禁用属性绑定到表单的有效性，因此只有在表单的所有字段都有效时，用户才有机会将数据发送到服务器：
- en: '[PRE72]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Checkout view route definition
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查视图路由定义
- en: 'Update the router configuration in the `app.routes.ts` to add the `CheckoutViewComponent`
    :'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`app.routes.ts`中的路由器配置以添加`CheckoutViewComponent`：
- en: '[PRE73]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Navigation to Checkout View
  id: totrans-367
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航到结账视图
- en: 'When the user clicks on the **Checkout** button in the markup of the Cart Menu,
    the router navigates to the view:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在购物车菜单的标记上单击**结账**按钮时，路由器会导航到该视图：
- en: '[PRE74]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The `CheckoutViewComponent` does not belongs to any module, so we need to add
    it to the `AppModule` :'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`CheckoutViewComponent`不属于任何模块，因此我们需要将其添加到`AppModule`中：'
- en: '[PRE75]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Here is the screenshot of the Checkout View with validation error messages:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 这是带有验证错误消息的结账视图的屏幕截图：
- en: '![Navigation to Checkout View](Image00131.jpg)'
  id: totrans-373
  prefs: []
  type: TYPE_IMG
  zh: '![导航到结账视图](Image00131.jpg)'
- en: Tip
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can find the source code at `chapter_7/5.ecommerce-checkout-view` .
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`chapter_7/5.ecommerce-checkout-view`找到源代码。
- en: Summary
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discovered how to create forms with Bootstrap 4\. We know
    that Bootstrap supports different layouts from simple to complex.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们发现了如何使用Bootstrap 4创建表单。我们知道Bootstrap支持从简单到复杂的不同布局。
- en: We investigated the Angular 2 forms module and can now create model-driven and
    template-driven forms.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调查了Angular 2表单模块，现在可以创建基于模型和基于模板的表单。
- en: We joined all the pieces of our application, and now it looks very nice.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 我们把应用程序的所有部分都连接起来了，现在看起来非常好。
- en: In [Chapter 8](text00074.html#page "Chapter 8. Advanced Components") , *Advanced
    Components* , we will talk about the life cycle of a component and the methods
    that can be used at different stages of a component. This chapter also discusses
    how to create a multi-component application. As usual, we will continue to build
    the project we started to develop in previous chapters.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](text00074.html#page "第8章。高级组件")中，*高级组件*，我们将讨论组件的生命周期以及可以在组件不同阶段使用的方法。本章还讨论了如何创建多组件应用程序。像往常一样，我们将继续构建我们在之前章节中开始开发的项目。
