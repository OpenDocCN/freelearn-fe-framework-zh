- en: Debugging Vuex Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By developing your applications using test-driven development, you will reduce
    debugging time considerably. Still, there are moments when a piece of code refuses
    to work as expected or a subtle bug hides among your code.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, browsers provide developer tools to help frontend developers debug
    their applications and Vue provides vue-devtools .
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following chapter, we will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Using vue-devtools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the built-in logger plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To understand this chapter, you need to have basic knowledge of the Chrome developer
    Tools instrument.
  prefs: []
  type: TYPE_NORMAL
- en: Using vue-devtools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue.js provides the vue-devtools utility to help programmers debug Vue applications.
    Vuex enhances this tool to keep track of every mutation committed.
  prefs: []
  type: TYPE_NORMAL
- en: You can install this utility as an extension for Chrome or FireFox, or you can
    navigate to [https://github.com/vuejs/vue-devtools](https://github.com/vuejs/vue-devtools)
    for instructions on how to install it.
  prefs: []
  type: TYPE_NORMAL
- en: Start the *EveryNote* application by typing `npm start`, open Google Chrome
    with vue-devtools installed at `http://localhost:8080/`, then press *F12*.
  prefs: []
  type: TYPE_NORMAL
- en: Component inspector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you select the Elements tab in Chrome Developer Tools, you will see something
    like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32680610-2418-4a97-a269-b152b8136e60.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.1: Chrome Developer Tools, Elements tab'
  prefs: []
  type: TYPE_NORMAL
- en: Below the Elements tab, you can see the current DOM tree of the *EveryNote*
    application. The selected `div` is the element containing the second note.
  prefs: []
  type: TYPE_NORMAL
- en: By mapping the DOM structure back to the Vue components we've just coded, you
    can understand that the selected element is the root element of the component
    `Note`. Wouldn't it be better to see something like `<Note>` instead of the detailed
    `Note` DOM elements structure?
  prefs: []
  type: TYPE_NORMAL
- en: 'Now select the Vue tab, and you will see something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/57a83bdd-0259-484b-85ff-0fa6ebd320cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.2: Vue tab inside Chrome Developer Tools.'
  prefs: []
  type: TYPE_NORMAL
- en: In a glance, you can see the application structure with the components' names
    instead of the components' DOM elements. By moving the mouse over the components,
    the corresponding element will be highlighted in the HTML page. If you press the
    select button (![](img/cbb17bef-a076-403f-a362-b15ad1953cdc.png)), you can select
    an element inside the HTML page and have it highlighted in the components tree.
  prefs: []
  type: TYPE_NORMAL
- en: 'By selecting an element from the tree below the Filter components box, you
    will also see its properties in the `props` frame, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8f9edcc6-1c91-4783-abf6-50697b9fa0a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.3: Props frame'
  prefs: []
  type: TYPE_NORMAL
- en: 'If the selected component has a binding to Vuex, it will appear in the same
    box. This next screenshot is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/71bb1954-c2cd-49ae-b3d2-dfbc5a3ac78a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.4: Vuex component bindings'
  prefs: []
  type: TYPE_NORMAL
- en: This way, it becomes easy to move across Vue components inside a page, and see
    their state.
  prefs: []
  type: TYPE_NORMAL
- en: The next feature we will see is the events inspector.
  prefs: []
  type: TYPE_NORMAL
- en: Events inspector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Watching the components state is useful, but wouldn''t it be great if we could
    also record the interaction between components? In fact, vue-devtools provides
    two other features: events and Vuex mutation recording.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see the Filter events section of vue-devtools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/173462fc-fc41-420d-b07c-06f0d4d0aa22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.5: Filter events section'
  prefs: []
  type: TYPE_NORMAL
- en: As an example, I added a note and, because of this action, the Filter events
    tab recorded that an `editDone` event has been fired inside `NoteEditor`. It also
    shows the event payload.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will explore a Vuex dedicated tab.
  prefs: []
  type: TYPE_NORMAL
- en: Vuex time travel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By moving to the Vuex section by pressing the Vue button ![](img/00343d22-729f-4de2-91e6-9b061686d342.png),
    you will be able to record all the Vuex mutations committed. The following screenshot
    shows this feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fefc1aae-c780-405e-894a-7b82ce341061.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.6: Vuex time travel tab'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, after the application has been loaded, two notes have been added.
    Those are the notes that get added because of the fake call to a hypothetical
    server, triggered by the action `loadNotesFromServer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, I clicked the Delete button of the second note. In fact, the third
    mutation recorded is `DELETE_NOTE`. You can see the state and the mutation payload
    for each mutation, and even undo a commit, as demonstrated in the following screenshot,
    where I am about to undo the `DELETE_NOTE` mutation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d9d9f07-ac3a-406e-83e4-5e6a5e07cbbc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.7: Undoing the DELETE_NOTE mutation'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result of the undo, the application state reverts to the previous mutation,
    and the application shows the second note again, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f65780c8-471e-4ea6-9aba-00833695922e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.8: Application state after undoing the DELETE_NOTE mutation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The ability of undo mutations comes in handy when you want to debug an action
    and the corresponding mutation: you can put a breakpoint in the action code using
    the Sources tab in Chrome Developer Tools, and then execute and rollback the mutation
    as many times as you need. Note that, if you use Chrome debugger to restart the
    Action code after a mutation has been committed, then the application state has
    already been changed, and the second execution is influenced by the new state.
    On the contrary, if you undo a commit, you can safely re-execute a piece of code
    without the need to reload the entire page.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the two buttons above the state frame let you export and import the
    application state from and to the clipboard.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling the Vuex built-in logger plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Vuex provides a built-in plugin to log every mutation. It can be added to the
    application store as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting output for the *EveryNote* app is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be72e543-fe03-4f32-ae75-ddaf340b6981.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.8: Vuex built-in logger plugin'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, it logs not only the mutation name
    but also the previous and next state.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code at this stage by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we went through vue-devtools features, and we introduced the
    Vuex built-in logger plugin. But what exactly is a Vuex plugin?
  prefs: []
  type: TYPE_NORMAL
- en: Well, that is the topic of [Chapter 5](51bea87a-c56f-4f3f-8d2b-79ca84cc2de1.xhtml),
    *Using the Vuex Plugin System*; in the next few pages, we will learn what a Vuex
    plugin is, and how we can write a custom one.
  prefs: []
  type: TYPE_NORMAL
