- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: 'Handling User Inputs: Forms'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理用户输入：表单
- en: Since the early days of web applications, before the concept of `<form>` tag
    has been used to create, organize, and send forms to the backend.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 自从Web应用程序的早期以来，在`<form>`标签的概念被用来创建、组织和将表单发送到后端之前。
- en: In common applications, such as banking systems and health applications, we
    use forms to organize the inputs that our users need to perform in our systems.
    With such a common element in web applications, it is natural that Angular, a
    framework whose philosophy is *batteries included*, offers this feature to its
    developers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在常见的应用程序中，例如银行系统和健康应用程序，我们使用表单来组织用户需要在我们的系统中执行的操作。由于Web应用程序中这样一个常见的元素，Angular这样的框架，其哲学是“内置电池”，自然为开发者提供了这一功能。
- en: 'In this chapter, we will delve into the following forms features in Angular:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨Angular中的以下表单功能：
- en: Template-driven forms
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板驱动表单
- en: Reactive forms
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应式表单
- en: Data validation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据验证
- en: Custom validations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义验证
- en: Typed reactive forms
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打字响应式表单
- en: By the end of this chapter, you will be able to create maintainable and fluid
    forms for your user, in addition to improving your productivity with this type
    of task.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够为您的用户创建可维护且流畅的表单，同时通过此类任务提高您的生产力。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the instructions in this chapter, you’ll need the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章中的说明，您需要以下内容：
- en: Visual Studio Code ([https://code.visualstudio.com/Download](https://code.visualstudio.com/Download))
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code ([https://code.visualstudio.com/Download](https://code.visualstudio.com/Download))
- en: Node.js 18 or higher ([https://nodejs.org/en/download/](https://nodejs.org/en/download/))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 18或更高版本([https://nodejs.org/en/download/](https://nodejs.org/en/download/))
- en: The code files for this chapter are available at [https://github.com/PacktPublishing/Angular-Design-Patterns-and-Best-Practices/tree/main/ch6](https://github.com/PacktPublishing/Angular-Design-Patterns-and-Best-Practices/tree/main/ch6).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可在[https://github.com/PacktPublishing/Angular-Design-Patterns-and-Best-Practices/tree/main/ch6](https://github.com/PacktPublishing/Angular-Design-Patterns-and-Best-Practices/tree/main/ch6)找到。
- en: During the study of this chapter, remember to run the backend of the application
    found in the `gym-diary-backend` folder with the `npm` `start` command.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习本章内容时，请记住使用`npm start`命令运行位于`gym-diary-backend`文件夹中的应用程序的后端。
- en: Template-driven forms
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板驱动表单
- en: 'Angular has two different ways of working with forms: **template-driven** and
    **reactive**. First, let’s explore template-driven forms. As we can see by the
    name, we maximize the use of the capabilities of the HTML template to create and
    manage the data model linked to the form.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Angular有两种不同的方式处理表单：**模板驱动**和**响应式**。首先，让我们探索模板驱动表单。正如其名所示，我们最大限度地利用HTML模板的能力来创建和管理与表单关联的数据模型。
- en: 'We will evolve our Gym Diary application to better exemplify this concept.
    In the following command line, we use the Angular CLI to create the new page component:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将演进我们的健身日记应用程序，以更好地说明这一概念。在以下命令行中，我们使用Angular CLI创建新的页面组件：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To access the new assignment form, we’ll refactor the journal page component
    so the **Add New Entry** button takes the user to the component we created.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问新的分配表单，我们将重构日记页面组件，使**添加新条目**按钮将用户带到我们创建的组件。
- en: 'Let’s add to the `DiaryModule` module the import of the framework module responsible
    for managing the application’s routes:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`DiaryModule`模块中添加对负责管理应用程序路由的框架模块的导入：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With the `RouterModule` module imported, we will be able to use Angular’s route
    services. For more details on routing, see [*Chapter 7*](B19562_07.xhtml#_idTextAnchor207),
    *Routes and Routers*. We will add the new component to a route in the `DiaryRoutingModule`
    module:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 导入`RouterModule`模块后，我们将能够使用Angular的路由服务。有关路由的更多详细信息，请参阅[*第7章*](B19562_07.xhtml#_idTextAnchor207)，*路由和路由器*。我们将在`DiaryRoutingModule`模块中添加新组件到路由：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To be able to compare the two form creation approaches, we will create a route
    for each example component that we are going to create. Here, the URL `/home/new-template`
    will direct us to the template-driven form route.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够比较两种表单创建方法，我们将为将要创建的每个示例组件创建一个路由。在这里，URL `/home/new-template`将引导我们到模板驱动表单路由。
- en: 'We will now refactor `DiaryComponent` to modify the behavior of the **Add New**
    **Entry** button:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将重构`DiaryComponent`以修改**添加新条目**按钮的行为：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First, we need to inject Angular’s router service.We change the `addExercise`
    method to use the service and, using the `navigate` method, direct to the page.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要注入Angular的路由服务。我们将`addExercise`方法改为使用该服务，并使用`navigate`方法导航到页面。
- en: 'We can proceed to the HTML template of our form in the `new-entry-form-template.component.html`
    file and place only the elements of the form:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续在 `new-entry-form-template.component.html` 文件中的表单 HTML 模板，并仅放置表单的元素：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Angular uses HTML best practices, so we will now create the form fields under
    the HTML `<form>` tag. In the input fields, we are respecting the HTML semantics
    and creating the fields as `<input>` with the correct types for the type of information
    the client needs.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 使用 HTML 最佳实践，因此我们现在将在 HTML `<form>` 标签下创建表单字段。在输入字段中，我们尊重 HTML 语义，并创建与客户端所需信息类型正确的
    `<input>` 字段。
- en: Let’s run our application with the `ng serve` command. By clicking on the **New
    Entry** button, we will be able to notice our diary entry addition form.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `ng serve` 命令运行我们的应用程序。通过点击 **新条目** 按钮，我们将能够注意到我们的日记条目添加表单。
- en: '![Figure 6.1 – Gym Diary Form UI](img/B19562_06_1.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – 健身日记表单 UI](img/B19562_06_1.jpg)'
- en: Figure 6.1 – Gym Diary Form UI
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 健身日记表单 UI
- en: 'Here, we have the structure and template of our form. Now, we are going to
    prepare for Angular to manage the state of the fields via user input in the template.
    To use the template-driven form, we need to import the `FormModule` module to
    our feature module, `DiaryModule`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们有表单的结构和模板。现在，我们将准备让 Angular 通过模板中的用户输入来管理字段的状态。要使用模板驱动表单，我们需要将 `FormModule`
    模块导入到我们的功能模块 `DiaryModule` 中：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In our form template, we will add the directives that will create and link
    the form information to its data model:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的表单模板中，我们将添加创建和链接表单信息到其数据模型的指令：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: export class NewEntryFormTemplateComponent {
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: export class NewEntryFormTemplateComponent {
- en: private exerciseSetsService = inject(ExerciseSetsService);
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: private exerciseSetsService = inject(ExerciseSetsService);
- en: private router = inject(Router);
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: private router = inject(Router);
- en: 'entry: ExerciseSet = { date: new Date(), exercise: '''', reps: 0, sets: 0 };'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 'entry: ExerciseSet = { date: new Date(), exercise: '''', reps: 0, sets: 0 };'
- en: newEntry() {
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: newEntry() {
- en: const newEntry = { ...this.entry };
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: const newEntry = { ...this.entry };
- en: this.exerciseSetsService
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: this.exerciseSetsService
- en: .addNewItem(newEntry)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: .addNewItem(newEntry)
- en: .subscribe((entry) => this.router.navigate(['/home']));
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: .subscribe((entry) => this.router.navigate(['/home']));
- en: '}'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ng g c diary/new-entry-form-reactive
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: ng g c diary/new-entry-form-reactive
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: import { NewEntryFormReactiveComponent } from './new-entry-form-reactive/new-entry-form-reactive.component';
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: import { NewEntryFormReactiveComponent } from './new-entry-form-reactive/new-entry-form-reactive.component';
- en: 'const routes: Routes = ['
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 'const routes: Routes = ['
- en: '{'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'path: '''','
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 'path: '''','
- en: 'component: DiaryComponent,'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 'component: DiaryComponent,'
- en: '},'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'path: ''new-template'','
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 'path: ''new-template'','
- en: 'component: NewEntryFormTemplateComponent,'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 'component: NewEntryFormTemplateComponent,'
- en: '},'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'path: ''new-reactive'','
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 'path: ''new-reactive'','
- en: 'component: NewEntryFormReactiveComponent,'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 'component: NewEntryFormReactiveComponent,'
- en: '},'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '];'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '];'
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '@NgModule({'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '@NgModule({'
- en: 'declarations: ['
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 'declarations: ['
- en: . . .
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: . . .
- en: '],'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: 'imports: ['
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 'imports: ['
- en: . . .
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: . . .
- en: ReactiveFormsModule,
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ReactiveFormsModule,
- en: '],'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '})'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'addExercise(newSet: ExerciseSet) {'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 'addExercise(newSet: ExerciseSet) {'
- en: this.router.navigate(['/home/new-reactive']);
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: this.router.navigate(['/home/new-reactive']);
- en: '}'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: export class NewEntryFormReactiveComponent implements OnInit {
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: export class NewEntryFormReactiveComponent implements OnInit {
- en: 'public entryForm!: FormGroup;'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 'public entryForm!: FormGroup;'
- en: private formBuilder = inject(FormBuilder);
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: private formBuilder = inject(FormBuilder);
- en: ngOnInit() {
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: ngOnInit() {
- en: this.entryForm = this.formBuilder.group({
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: this.entryForm = this.formBuilder.group({
- en: 'date: [''''],'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: [''''],'
- en: 'exercise: [''''],'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 'exercise: [''''],'
- en: 'sets: [''''],'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 'sets: [''''],'
- en: 'reps: [''''],'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 'reps: [''''],'
- en: '});'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: <div class="flex h-screen items-center justify-center bg-gray-200">
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <div class="flex h-screen items-center justify-center bg-gray-200">
- en: <form
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: <form
- en: '[formGroup]="entryForm"'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[formGroup]="entryForm"'
- en: '>'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <input
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: <input
- en: type="date"
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: type="date"
- en: id="date"
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: id="date"
- en: name="date"
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: name="date"
- en: formControlName="date"
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: formControlName="date"
- en: />
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: <input
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: <input
- en: type="text"
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: type="text"
- en: id="exercise"
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: id="exercise"
- en: name="exercise"
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: name="exercise"
- en: formControlName="exercise"
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: formControlName="exercise"
- en: />
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: <input
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: <input
- en: type="number"
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: type="number"
- en: id="sets"
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: id="sets"
- en: name="sets"
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: name="sets"
- en: formControlName="sets"
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: formControlName="sets"
- en: />
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: <input
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: <input
- en: type="number"
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: type="number"
- en: id="reps"
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: id="reps"
- en: name="reps"
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: name="reps"
- en: formControlName="reps"
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: formControlName="reps"
- en: />
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: <button type="submit">
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: <button type="submit">
- en: Add Entry
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 添加条目
- en: </button>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: </button>
- en: formGroup attribute to associate the template with the object we created earlier.
    To associate each template field to the FormGroup attribute, we use the formControlName
    element.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 将 formGroup 属性与之前创建的对象关联。要将每个模板字段关联到 FormGroup 属性，我们使用 formControlName 元素。
- en: To debug the data model, we are also using the JSON pipe, but note that to get
    the data model filled in by the user, we use the `value` attribute of the `entryForm`
    object. Finally, we will complement the form with functionality and record the
    input using the project’s API.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调试数据模型，我们也在使用 JSON 管道，但请注意，为了获取用户填写的数据模型，我们使用 `entryForm` 对象的 `value` 属性。最后，我们将使用项目的
    API 功能和记录输入来完善表单。
- en: 'The next step is to change the component:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是更改组件：
- en: '[PRE13]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, we inject the consumer services of the `ExerciseSetsService` API and the
    Angular route service router.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们注入了 `ExerciseSetsService` API 的消费者服务和 Angular 路由服务路由。
- en: In the `newEntry` method, as in the previous example, we capture the data that
    the user typed. However, in the reactive form, it is in the `value` attribute,
    and we send this attribute to the API using the service.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `newEntry` 方法中，就像前面的例子一样，我们捕获用户输入的数据。然而，在响应式表单中，它位于 `value` 属性中，我们通过服务将此属性发送到
    API。
- en: Running the project, we can see that the interface works like its counterpart
    written for the template-driven form.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 运行项目后，我们可以看到界面工作得像为模板驱动表单编写的对应界面一样。
- en: '![Figure 6.2 – Gym Diary Form UI using a reactive -form](img/B19562_06_2.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – 使用响应式表单的健身房日记表单 UI](img/B19562_06_2.jpg)'
- en: Figure 6.2 – Gym Diary Form UI using a reactive -form
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 使用响应式表单的健身房日记表单 UI
- en: You may be wondering, what is the advantage of using the reactive form and why
    is it recommended by the Angular community and team? Next, we’ll see how to use
    the form’s built-in validations and how to integrate them into our reactive form.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道，使用响应式表单的优势是什么？为什么 Angular 社区和团队推荐使用它？接下来，我们将看到如何使用表单的内置验证以及如何将它们集成到我们的响应式表单中。
- en: Data validation
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 数据验证
- en: A good UX practice is to validate the information that users enter in the form
    as soon as it leaves the filled field. This minimizes user frustration while improving
    the information that will be sent to the backend.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的用户体验实践是在用户离开填写字段时立即验证用户在表单中输入的信息。这可以最小化用户的挫败感，同时提高将发送到后端的信息。
- en: 'Using reactive forms, we can use utility classes created by the Angular team
    to add validations that are commonly used in forms. Let’s improve our project,
    first in the `NewEntryFormReactiveComponent` component:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用响应式表单，我们可以使用 Angular 团队创建的实用类来添加在表单中常用到的验证。让我们改进我们的项目，首先在 `NewEntryFormReactiveComponent`
    组件中：
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding example, we are importing the `Validators` package from Angular
    that will provide the `utility` class for the basic validations of our report.
    In the `ngOnInit` method where we create the reactive form object, the validations
    are in the second position of the array that defines the form’s fields.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们正在从 Angular 导入 `Validators` 包，该包将为我们的报告的基本验证提供 `utility` 类。在创建响应式表单对象的
    `ngOnInit` 方法中，验证位于定义表单字段的数组中的第二个位置。
- en: We use the required validation in all fields of the form, and in the `sets`
    and `reps` fields, we add another validation to guarantee that the number is positive.
    To add more than one validation, we can add another array with the validations.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在表单的所有字段中使用必填验证，并在 `sets` 和 `reps` 字段中添加另一个验证以确保数字是正数。要添加多个验证，我们可以添加另一个包含验证的数组。
- en: Another change we made to our component is that it now checks whether the form
    is valid before starting the interaction with the backend. We do this by checking
    the `valid` attribute of the object. Angular automatically updates this field
    as the user enters data.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对组件所做的另一个更改是，现在它在开始与后端交互之前检查表单是否有效。我们通过检查对象的 `valid` 属性来完成此操作。Angular 会自动根据用户输入更新此字段。
- en: 'In the template file, let’s add the error messages for the user:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板文件中，让我们为用户添加错误信息：
- en: '[PRE15]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To show validation in the template, we use `div` elements with the message we
    want. To decide whether or not the message will appear, we use the `ngIf` directive,
    checking the status of the field.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要在模板中显示验证，我们使用包含我们想要的消息的 `div` 元素。为了决定消息是否显示，我们使用 `ngIf` 指令，检查字段的状况。
- en: 'For this, we first get the field using the `GET` method and check the following
    two properties:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们首先使用 `GET` 方法获取字段并检查以下两个属性：
- en: The `invalid` property checks whether the field is invalid according to what
    was configured in the component.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`invalid` 属性检查字段是否根据组件中配置的规则无效。'
- en: The `touched` property checks whether the user has accessed the field. It is
    recommended not to show all the validations when the interface is loaded.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`touched`属性检查用户是否访问了字段。建议在界面加载时不要显示所有验证。'
- en: In addition to the validations in each field, to improve usability, we changed
    the **Submission** button by disabling it while the form was invalid and applying
    the CSS to make it clear to the user.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 除了每个字段的验证之外，为了提高可用性，我们通过在表单无效时禁用**提交**按钮并应用CSS来使其对用户清晰可见。
- en: Running the project, we can see the validations accessing all fields without
    filling any field.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 运行项目，我们可以看到验证访问了所有字段，而没有任何字段被填写。
- en: '![Figure 6.3 – Gym Diary Form UI validations](img/B19562_06_3.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图6.3 – 健身日记表单UI验证](img/B19562_06_3.jpg)'
- en: Figure 6.3 – Gym Diary Form UI validations
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – 健身日记表单UI验证
- en: We’ve learned how to use Angular’s utility classes to perform validation, so
    let’s explore how we can create our own custom validations.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何使用Angular的实用类进行验证，所以让我们探索如何创建我们自己的自定义验证。
- en: Custom validations
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义验证
- en: We can expand the use of validations and create custom functions that can even
    receive parameters to maximize reuse in our projects. To illustrate this, let’s
    create a custom validation to evaluate whether the number of repetitions or sets
    are multiples of two and three, respectively.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以扩展验证的使用，并创建可以接收参数的自定义函数，以最大化在项目中的重用。为了说明这一点，让我们创建一个自定义验证来评估重复次数或组数是否分别是2和3的倍数。
- en: 'Let’s create a new file called `custom-validation.ts` and add the following
    function:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`custom-validation.ts`的新文件，并添加以下函数：
- en: '[PRE16]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: For Angular to recognize the form validation function, it must return a new
    function with the signature described in the `ValidatorFn` interface. This signature
    defines that it will receive `AbstractControl` and must return an object of type
    `ValidationErrors` that allows the template to interpret the new type of validation.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Angular识别表单验证函数，它必须返回一个具有`ValidatorFn`接口中描述的签名的函数。这个签名定义了它将接收`AbstractControl`，并且必须返回一个类型为`ValidationErrors`的对象，允许模板解释新的验证类型。
- en: Here, we get the input value using `control.value`, and if it is not a multiple
    of three, we will return the `error` object. Otherwise, we will return `null`,
    which will indicate to Angular that the value is correct.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`control.value`获取输入值，如果它不是3的倍数，我们将返回`error`对象。否则，我们将返回`null`，这将向Angular指示值是正确的。
- en: 'To use this function, we are going to refactor our form component as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个函数，我们将按照以下方式重构我们的表单组件：
- en: '[PRE17]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: To use our custom function, we import it from the new file we created and use
    it in the validation array in the construction of the form object in the same
    way as standard Angular validations.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用我们的自定义函数，我们需要从新创建的文件中导入它，并在构建表单对象时将其用于验证数组中，就像标准Angular验证一样。
- en: 'Finally, let’s change the form template to add the error message:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们更改表单模板以添加错误信息：
- en: '[PRE18]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We include the new `div` elements, but to specifically validate the error of
    multiples of the input, we use the `error` attribute and in it the new `isNotMultiple`
    attribute of our custom function.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们包括新的`div`元素，但为了特别验证输入的倍数错误，我们使用`error`属性，并在其中使用我们自定义函数的新`isNotMultiple`属性。
- en: We are using this parameter in square brackets because it is defined at runtime
    and Angular will warn at compile time that it does not exist.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用这个参数是因为它在运行时定义的，Angular将在编译时警告它不存在。
- en: 'Running our project, we can see the new validations:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 运行我们的项目，我们可以看到新的验证：
- en: "![Figure 6.4 – Gym Diary Form UI\uFEFF custom validations](img/B19562_06_4.jpg)"
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图6.4 – 健身日记表单UI自定义验证](img/B19562_06_4.jpg)'
- en: Figure 6.4 – Gym Diary Form UI custom validations
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – 健身日记表单UI自定义验证
- en: In addition to validations, reactive forms from version 14 of Angular can be
    better typed to ensure higher productivity and security in the development of
    your project. We will go over this function in the next section.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 除了验证之外，从Angular 14版本开始，响应式表单可以更好地进行类型化，以确保在项目开发中提高生产力和安全性。我们将在下一节中介绍这个功能。
- en: Typed reactive forms
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 类型化响应式表单
- en: In our project, if we look at the types of objects and values, we can see that
    they are all of the `any` type. Although functional, it is possible to improve
    this development experience by better using TypeScript’s type checking.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，如果我们查看对象和值的类型，我们可以看到它们都是`any`类型。虽然功能性强，但通过更好地使用TypeScript的类型检查，我们可以改善这种开发体验。
- en: 'Let’s refactor our code in the component as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下方式重构组件中的代码：
- en: '[PRE19]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We moved the creation of the form object to the construction of the component
    and set the initialization of the fields with the types that will be accepted
    by the API. Using Visual Studio Code’s IntelliSense, we can see that Angular infers
    the types and now we have an object very close to the `ExerciseSet` type.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将表单对象的创建移动到了组件的构造函数中，并使用 API 将接受的类型初始化字段。使用 Visual Studio Code 的 IntelliSense，我们可以看到
    Angular 推断出类型，现在我们有一个非常接近 `ExerciseSet` 类型的对象。
- en: With this change, however, the `addNewItem` method threw an error, which is
    actually a good thing, as it means that we are now using TypeScript’s type checking
    to discover possible bugs that could only appear at runtime. To resolve this issue,
    we first need to change the service to receive an object that can contain some
    of the attributes of `ExerciseSet`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着这个更改，`addNewItem` 方法抛出了一个错误，这实际上是个好事，因为它意味着我们现在正在使用 TypeScript 的类型检查来发现那些只能在运行时出现的潜在错误。为了解决这个问题，我们首先需要将服务修改为接收一个可以包含
    `ExerciseSet` 的一些属性的对象。
- en: 'In the service, change the `addNewItem` method:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务中更改 `addNewItem` 方法：
- en: '[PRE20]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, we use the `Partial` type of TypeScript to inform the function that it
    can receive an object with part of the interface attributes. Returning to our
    component, we can see that it still has an error. This happens because it can
    receive `null` values in the form’s attributes.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 TypeScript 的 `Partial` 类型来告知函数它可以接收一个包含部分接口属性的对象。回到我们的组件中，我们可以看到它仍然有一个错误。这是因为它可以接收表单属性中的
    `null` 值。
- en: 'To resolve this, let’s change the `FormBuilder` service to the `NonNullableFormBuilder`
    type as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，让我们将 `FormBuilder` 服务更改为 `NonNullableFormBuilder` 类型，如下所示：
- en: '[PRE21]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With this change, Angular itself performs this verification. The only requirement
    is that all the form fields are initialized, which we have already done here.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个更改，Angular 本身执行了这个验证。唯一的要求是所有表单字段都已初始化，这在我们这里已经完成了。
- en: With that, we have our reactive form working and can now use TypeScript’s type-checking
    more effectively!
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们的响应式表单就正常工作了，现在我们可以更有效地使用 TypeScript 的类型检查了！
- en: Summary
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored Angular forms and how to use them to improve our
    user experience and our team’s productivity. We learned how to use template forms
    for simpler requirements and explored how Angular performs the binding between
    the HTML and the data model using the `ngModel` object.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 Angular 表单以及如何使用它们来提升我们的用户体验和团队的生产力。我们学习了如何使用模板表单来满足更简单的需求，并探讨了 Angular
    如何使用 `ngModel` 对象在 HTML 和数据模型之间执行绑定。
- en: We also work with reactive forms, which opens up many possibilities for creating
    and manipulating forms. Regarding reactive forms, we studied how to apply validations
    to fields and how to create our own custom validation functions. Finally, we refactored
    our reactive form to use TypeScript type checking using typed forms.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用响应式表单，这为创建和操作表单提供了许多可能性。关于响应式表单，我们研究了如何对字段应用验证以及如何创建我们自己的自定义验证函数。最后，我们重构了我们的响应式表单，使用带类型的表单来利用
    TypeScript 类型检查。
- en: In the next chapter, we will explore Angular’s routing mechanism and the possibilities
    it can have for our applications.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 Angular 的路由机制以及它为我们的应用带来的可能性。
- en: '[PRE22]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
