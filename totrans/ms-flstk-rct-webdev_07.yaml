- en: The MongoDB Deployment on mLab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have come to the point where we need to start planning the deployment of
    our application. We have chosen MongoDB as our database. There are different approaches
    of using it for scaling--you can do everything on your own with your own servers
    (more time consuming and demanding) or you can use services that do replications/scaling
    for you, such as Database-as-a-Service providers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an mLab account and creating a new MongoDB deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How a replica set works in MongoDB and how you can use it within mLab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the replica set on a live demo (flip-flop from mLab)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the database user and password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about what you need to prepare for deployment on AWS EC2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mLab overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use mLab in our case in order to spend less time configuring the low-level
    stuff on MongoDB and more time building a robust scalable application.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we go to [www.mLab.com](http://www.mLab.com), there is a free DB plan (that
    we will use in this chapter) and a paid DB plan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In general, mLab provides several interesting features such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tools for cloud automation**: These provide on-demand provisioning (preparing)
    on AWS, Azure, or Google; replica sets (described in detail later in this chapter);
    and **sharded clusters**. These also provide seamless, zero-downtime scaling,
    and high availability via automatic failover.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tools for backup and recovery**: These provide automatic backups, which can
    help in later project stages in case of an emergency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tools for monitoring and alerts**: For example, there is a **slow queries**
    tool that helps you to find slow queries, which can be optimized by adding an
    index.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tools for online data browsing**: You can browse the MongoDB''s collection
    via the browser when you are logged into mLab''s administration panel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replica set connections and high availability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In MongoDB, there is a feature that ensures high availability using automatic
    failover. In short, failover is a feature that ensures that if a primary server
    (that has the most important copy of your database) fails, then a secondary member's
    database becomes the primary one if the original primary server is unavailable.
  prefs: []
  type: TYPE_NORMAL
- en: A secondary member's database is a server that keeps the so-called **read-only
    backup** of your database.
  prefs: []
  type: TYPE_NORMAL
- en: The primary and the secondary databases very often replicate themselves in order
    to be in sync all the time. The secondary server is mostly for read operations.
  prefs: []
  type: TYPE_NORMAL
- en: This whole replica set feature is quite time-consuming to implement from scratch
    (without mLab), but mLab provides this feature in order to *abstract* this part
    so that our whole process will be more automated.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB failover
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: mLab also provides a great tool for testing the failover scenario in our app,
    which is available at [http://flip-flop.mlab.com](http://flip-flop.mlab.com).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we can test how automatic failover with the MongoDB replica set works.
    As we can see in the preceding screenshot, there are three nodes: the replica''s
    **flip** and **flop**, and an arbiter. In the flip-flop''s demo, you can connect
    to the arbiter server, and the primary server will step down and the cluster will
    failover to the other node. You can experiment with it--try on your own and have
    fun!'
  prefs: []
  type: TYPE_NORMAL
- en: You can find more documentation on how to play with the flip-flop's demo at
    [http://docs.mlab.com/connecting/#replica-set-connections](http://docs.mlab.com/connecting/#replica-set-connections).
  prefs: []
  type: TYPE_NORMAL
- en: Free versus paid plan in mLab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we will guide you through the process of using mLab with a free
    plan. In mLab, the replica set is available in the paid plans (starting at $15/month),
    and, of course, you can use the flip-flop's demo for free in order to play with
    that very important feature of MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: The new mLab's account and node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go to [https://mlab.com/signup/](https://mlab.com/signup/), as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Verify your e-mail by clicking on the confirm link in your inbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Create new button, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You are on the Create new deployment page. Choose Single-node | Sandbox (FREE),
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'While you are still at [https://mlab.com/create](https://mlab.com/create) (Create
    new deployment), set the database name as `publishingapp` and click on the Create
    new MongoDB deployment button, as shown in the next screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After following the preceding steps, you should be able to find the MongoDB
    deployment on the dashboard ([https://mlab.com/home](https://mlab.com/home)),
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00090.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating the database's user/password and other configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Right now, the database is ready for our publishing application, but it's still
    empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are steps that we need to take in order to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a user/password combination. We need to click on the database that has
    been just created and find a tab called Users. After you click on it, click on
    the Add new database user button and then fill in the details on the form, as
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s assume for this book that our details are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'DB username: `usermlab`'
  prefs: []
  type: TYPE_NORMAL
- en: 'DB password: `pwdmlab`'
  prefs: []
  type: TYPE_NORMAL
- en: In the places where we will use the username and password, I will use these
    details.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we need to create the collections that are identical to our local
    MongoDB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Collections | Add collection | articles
  prefs: []
  type: TYPE_NORMAL
- en: Collections | Add collection | pubUsers
  prefs: []
  type: TYPE_NORMAL
- en: 'After performing all the preceding steps, you should see something like the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00092.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'At this stage, the last thing is to write down the Mongo details from the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00093.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Config wrap up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to keep and share all the information from mLab along with the AWS S3
    details. The details will be useful in the next chapter when deploying our app
    on Amazon AWS EC2.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point in the book, there are details that we need to keep separately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Make sure, that you have replaced the ports and the hostname to the correct
    one (as provided by mLab in the preceding screenshot).
  prefs: []
  type: TYPE_NORMAL
- en: 'All the Mongo `env` variables can be obtained from mLab, where you can find
    a link similar to the following (this is an example copied from the account created
    while writing this chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next chapter, we will start using those environment variables on our
    production server on the AWS EC2's platform. Keep all these details noted in an
    easily accessible, safe place, as we will use them soon.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing is to check if the app is running correctly and to use the remote
    mLab MongoDB (instead of the local MongoDB that was run with theÂ `mongd` command).
    You can do this by running it with `npm start`, and then you shall see the empty
    home page of the publishing app. Because we moved away from the local database
    and the remote is empty, you need to register a new user and try to publish a
    new article with mLab under the hood to store the data.
  prefs: []
  type: TYPE_NORMAL
