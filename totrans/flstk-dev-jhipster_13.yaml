- en: Using React for the Client-Side
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have seen how to build web applications and microservices with Angular
    as the client-side framework. AngularJS was the most popular client-side framework
    until the new Angular 2 framework was released. Angular 2 caused a major disruption
    due to its backward incompatible architecture and gave way to more people migrating
    to React. Hence, the tides have shifted and now  React is the most popular and
    sought-after client-side framework, followed by Angular. JHipster added experimental
    support for React with version 4.11 and with JHipster Version 5.0; React support
    will become BETA and ready for mainstream use.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Generating an application with React client-side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical stack and source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating an entity with React client side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating an application with React client side
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s dive in straight away and create a React application with JHipster.
    You will need to open a Terminal to run the commands:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder and navigate to it by running `mkdir jhipster-react && cd jhipster-react`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now run the `jhipster` command in the Terminal. If you are running JHipster
    version 4.x instead of 5.x, then you will have to pass the experimental flag by
    running `jhipster --experimental`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JHipster will start with prompts; let's select default options for everything
    except for the question Which *Framework* would you like to use for the client? For
    this question, choose **[BETA] React** and proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once all the prompts are completed, JHipster will generate the application and
    start installing dependencies before formatting the code using Prettier ([https://prettier.io/](https://prettier.io/))
    and starting the webpack build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can run `yarn prettier:format` to format the client-side code anytime. It
    will also be automatically run whenever you commit something with a git pre-commit
    hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our selected options will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: That's it; we are done. Our first JHipster React application was created successfully.
    Now let's start the application to play around.
  prefs: []
  type: TYPE_NORMAL
- en: We will choose the default Maven build option which JHipster created a wrapper
    for already, so let's start our server by running `./mvnw` in a Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Maven will download the necessary dependencies and will start the Spring Boot
    application using the embedded Undertow container. You could choose Gradle instead
    of Maven if you prefer. Once the application successfully starts, we will see
    the following in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Visit the URL(`http://localhost:8080`) in your favorite browser to see the
    application in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f4770fb9-2961-45b2-9fee-b47583320aed.png)'
  prefs: []
  type: TYPE_IMG
- en: You will see the home screen with the hipster dude looking back at you. Notice
    the React tattoo on his neck.
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and log in using the default admin user and play around.
  prefs: []
  type: TYPE_NORMAL
- en: The application looks exactly same as the Angular application we built earlier,
    except for the image, of course, and has all the same account and administration
    modules. This will make it more interesting for us to see the technical stack
    and source code.
  prefs: []
  type: TYPE_NORMAL
- en: Technical stack and source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dive into the generated code, let's talk about the technical stack.
    We already looked at React in [Chapter 2](7fc7275a-b035-4a45-9b55-3a3310572b3a.xhtml), *Getting
    Started with JHipster*, but let's recap.
  prefs: []
  type: TYPE_NORMAL
- en: React is a view rendering library created by Jordan Walke in 2011, and was open
    sourced in May 2013\. It is maintained and backed by Facebook and has a huge community
    behind it. React follows the JS approach for HTML, where the markup code is written
    using JavaScript. To reduce verbosity, React uses a syntax sugar for Javascript
    called JSX ([https://reactjs.org/docs/introducing-jsx.html](https://reactjs.org/docs/introducing-jsx.html))
    to describe view elements. It looks similar to HTML, but it is not exactly HTML
    as some of the standard HTML attributes such as class, for example, is renamed
    to className, and attribute names are written using camelCase rather than dash-case.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following is a JSX snippet. You always need to have to use
    React in context for JSX to work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When it comes to TypeScript, the JSX extension becomes TSX.
  prefs: []
  type: TYPE_NORMAL
- en: React uses a concept called Virtual DOM to improve the rendering efficiency.
    Virtual DOM is a lightweight copy of the actual DOM, and by comparing the virtual
    DOM after an update against the virtual DOM snapshot before the update, React
    can decide what exactly changed and render only that on to the actual DOM, hence
    making render cycles efficient and fast.
  prefs: []
  type: TYPE_NORMAL
- en: React components can have their own state and you can pass properties to a component,
    which are available to the component as props.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike Angular, React is not a full-fledged MVVM framework. It is just a view
    rendering library and hence when building React applications, we would always
    have to add a few more libraries for things like state management, routing, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: Technical stacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical stacks used by JHipster when React is chosen
    as the client side framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rendering**: React written using TypeScript'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**State management**: Redux + React Redux  + Redux Promise Middleware + Redux
    Thunk'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Routing**: React router'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP**: Axios'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Responsive design**: Bootstrap 4 + Reactstrap'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linting**: Tslint'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Utilities**: Lodash'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unit testing**: Karma + Mocha + Chai + Enzyme'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build**: Webpack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at some of the most important components of the stack.
  prefs: []
  type: TYPE_NORMAL
- en: Using TypeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The client side is built using React, but instead of going with the traditional
    Javascript ES6, we are using TypeScript as the language of choice. This gives
    you the flexibility to use some of the concepts that you may be already familiar
    with if you come from a server-side background. It also provides static type checking,
    which makes development more efficient and less error-prone.
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://github.com/piotrwitek/react-redux-typescript-guide](https://github.com/piotrwitek/react-redux-typescript-guide)
    to learn about how to make the most out of Typescript + React.
  prefs: []
  type: TYPE_NORMAL
- en: State management with Redux and friends
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React provides basic state management within React components, but sometimes
    it is not sufficient, especially when your application needs to share state between
    multiple components. State management solutions like Flux, Redux, and MobX and
    quite popular in the React world and JHipster uses Redux as the state management
    layer.
  prefs: []
  type: TYPE_NORMAL
- en: When should you use the React component state?
  prefs: []
  type: TYPE_NORMAL
- en: '**If the variable can always be calculated using a prop**: Don''t use component
    state, calculate the variable during rendering'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**If the variable is not used in rendering but to hold data**: Don''t use component state,
    use private class fields'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**If the variable is obtained from an API and is required by more than one
    component**: Don''t use component state, use Redux global state and pass the variable
    as a prop'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redux ([https://redux.js.org/](https://redux.js.org/)) is a predictable state
    management solution for JavaScript, evolved from the Flux concept ([https://facebook.github.io/flux/](https://facebook.github.io/flux/)).
    Redux provides a global immutable store which can only be updated by emitting
    or dispatching actions. An action is an object which describes what changed, and
    it uses a pure reducer function to transform the state. A reducer is a pure function
    which takes in the current state and action and returns a new state.
  prefs: []
  type: TYPE_NORMAL
- en: 'React Redux is a binding for Redux that provides a higher order component called
    `connect` for React, which is used to connect React components to the Redux store.
    Let''s take a look at `src/main/webapp/app/modules/home/home.tsx`, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `mapStateToProps` function is used to map properties from the global Redux
    store to the components props. The `mapDispatchToProps` function is used to wrap
    the given functions with the Redux dispatch call.
  prefs: []
  type: TYPE_NORMAL
- en: Redux Promise Middleware ([https://github.com/pburtchaell/redux-promise-middleware](https://github.com/pburtchaell/redux-promise-middleware))
    is used to handle asynchronous action payloads. It accepts a Promise and dispatches
    pending, fulfilled, and rejected actions based on the Promise state. It is useful
    when Redux actions are making HTTP requests or performing async operations.
  prefs: []
  type: TYPE_NORMAL
- en: Redux Thunk ([https://github.com/gaearon/redux-thunk](https://github.com/gaearon/redux-thunk))
    is another middleware used to chain actions. It is useful when an action has to
    call another action based on certain conditions or in general to handle side effects.
  prefs: []
  type: TYPE_NORMAL
- en: Routing with React Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React Router ([https://reacttraining.com/react-router/web/guides/philosophy](https://reacttraining.com/react-router/web/guides/philosophy))
    is used for client-side routing. The default setup with JHipster is to use Hash
    History-based routing. It provides a simple component-based routing along with
    a flexible API for advanced routing setups. Routes can be defined anywhere in
    the application alongside the normal React rendering code. JHipster provides some
    custom wrappers such as `PrivateRoute` to enable authorization-based routing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at `src/main/webapp/app/routes.tsx`, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: HTTP requests using Axios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Axios ([https://github.com/axios/axios](https://github.com/axios/axios)) is
    a Promise-based HTTP client. It is a powerful and flexible library with a very
    straightforward API. It is used to fetch data from the JHipster application's
    server-side REST endpoints from Redux actions. The resulting Promise is resolved
    by the Redux Promise Middleware to provide data to the reducer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following shows a Redux action with an asynchronous payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Bootstrap components using Reactstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JHipster uses Bootstrap 4 as its UI framework and since we are building a React
    application, it makes sense to use a Native React binding instead of Bootstrap's
    JQuery-based components. Reactstrap ([https://reactstrap.github.io/](https://reactstrap.github.io/))
    provides pure React components for Bootstrap 4\. We also make use of the Availity
    reactstrap Validation ([https://availity.github.io/availity-reactstrap-validation/](https://availity.github.io/availity-reactstrap-validation/))
    library, which provides form validation support for Reactstrap form elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at `src/main/webapp/app/modules/login/login-modal.tsx`,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Unit testing setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JHipster uses a combination of Karma, Mocha, Chai, and Enzyme to unit test the
    client-side components.
  prefs: []
  type: TYPE_NORMAL
- en: Karma ([https://karma-runner.github.io/2.0/index.html](https://karma-runner.github.io/2.0/index.html))
    is used as the test runner and Mocha ([https://mochajs.org/](https://mochajs.org/))
    is used as the testing framework. Chai ([http://chaijs.com/](http://chaijs.com/))
    is an assertion library with great plugin support. We use its BDD (Behavior-driven
    development) style assertions. Enzyme ([http://airbnb.io/enzyme/](http://airbnb.io/enzyme/))
    is a testing utility for React which makes it easy to unit test React components.
    In combination, these libraries provide a rich and intuitive testing environment
    for React.
  prefs: []
  type: TYPE_NORMAL
- en: Let's run the generated unit tests. Run `yarn test` in a Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Generating source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at the generated code. Since we already saw the server-side
    code in previous chapters, we will only look at the client-side code here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8bd704bd-2a60-4067-adf4-cede92f2035d.png)'
  prefs: []
  type: TYPE_IMG
- en: The structure is quite similar to what we saw for Angular, but the React code
    is organized slightly differently. We are concerned only about the code inside
    `src/main/webapp/app` as everything else is exactly the same as what we saw for
    the Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at some of the important parts of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index.tsx`: This is the entry point of our application. This is where we bootstrap
    React to the `root div` and initialize the Redux store:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`app.tsx`: This is our main application component. We declare the React router
    and the main application UI structure here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`routes.tsx`: The application''s main parent routes are defined here and they
    are imported in the `app.tsx` from here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config`: This is where framework level configurations are done:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`axios-interceptor.ts`: HTTP interceptors are configured here. This is where
    the JWT tokens are set to requests and errors are handled.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`constants.ts`: Application constants.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*-middleware.ts`: Error, Notification, and Logging middleware for Redux are
    configured here.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`store.ts`: Redux store configuration is done here. Middlewares are registered
    during this stage.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The order of the middlewares in the array is important as they act like a pipeline,
    passing actions from one middleware to another as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`translation.ts`: i18n-related configurations are done here.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`entities`: The entity modules are present here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`modules`: Application UI modules are here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`account`: Account pages like settings, password reset, and so on are here'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`administration`: The admin screens like metric, health, user-management, and
    so on are here'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`home`: Home screen of the application'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`login`: Login and logout components'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shared`: Shared components and reducers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layout`: Layout related components like header, footer, and so on'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model`: Typescript model for entities'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reducers`: shared reducers used by the application:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`authentication.ts`: This is for authentication-related actions and reducers.
    Let''s use the `LOGIN` action. The action accepts username, password, and rememberMe
    and dispatches the `ACTION_TYPES.LOGIN` with an asynchronous payload from an HTTP
    call to authenticate our credentials. We use the **async/await** feature from
    ES7 to avoid complex callbacks here. The result from the dispatch is obtained
    from when we extract the JWT `bearerToken` and store it in the local or session
    storage of the browser based on the remember me setting passed. The dispatch of `ACTION_TYPES.LOGIN`
    will trigger the appropriate case in the reducer based on the status of the promise:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`util`: Utility functions.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The folder structure of the unit test code is also quite similar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7382a4c-1090-4947-b0ce-f4e4e3f10586.png)'
  prefs: []
  type: TYPE_IMG
- en: Generating an entity with React client side
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see how we can create an entity using the JHipster entity generator
    with a React client side. We will create a simple Employee entity with the name,
    age, and date of birth fields:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a Terminal and navigate to the folder of the React app and run `jhipster
    entity employee`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the fields one by one, select yes for the question Do you want to add
    a field to your entity?, and start filling in the field name for the next question, What
    is the name of your field?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select String as the field type for the next question, What is the type of your
    field?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the question Which validation rules do you want to add?, choose Required for
    name field and proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continue the process for the following fields. `age` and `dob. age` are of type
    Integer and `dob` is of type Instant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When asked again, Do you want to add a field to your entity?, choose no.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the next question, Do you want to add a relationship to another entity?,
    choose yes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide `user` as the name of the other entity and as the name of the relationship
    for the following questions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the next question, What is the type of the relationship?, let's create a one-to-one
    relationship with the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose no for the next question and no again when asked to add another relationship.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the following questions, select the default options and proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The command will produce the following console output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: JHipster will generate the entity and run Prettier and the webpack build.
  prefs: []
  type: TYPE_NORMAL
- en: If your server is not running, start it in a Terminal by running `./mvnw`. If
    it is already running, then just compile the new code by running `./mvnw compile`,
    and Spring DevTools will restart the app automatically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start BrowserSync in another Terminal by running `yarn start` and check the
    employee entity we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8be985b1-c5a9-463b-ae41-62f7391c6c32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create an entity to check everything works fine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bbd46aae-8a9e-4b10-8791-b51d77707319.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the entity we created, JHipster generated/updated the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a74d2eb8-9f8b-4cf9-8590-59ec5498f7ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the React client side, we have the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `index.ts` file declares the routes for the entity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`employee.reducer.ts` declares the actions and reducer for the entity, for
    example, let''s use the action and reducer to create an entity. The `createEntity`
    action dispatches the `ACTION_TYPES.CREATE_EMPLOYEE` with the HTTP payload and
    metadata for notifications. Once the HTTP request resolves, we dispatch the `getEntities`
    action to fetch the updated entity list.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The reducer is common for create and update actions. Let''s take a look at
    the create action and reducer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`employee.tsx`, `employee-dialog.tsx`, `employee-detail.tsx`, and  `employee-delete-dialog.tsx`
    declare the entity listing, entity model dialog, entity detail, and entity delete
    dialog respectively. Let''s look at `employee.tsx`, for example. We define the
    type for the props using a TypeScript interface, `IEmployeeProps`, which is passed
    as the generic for the `React.Component` type. We trigger the actions to fetch
    entities and users when our component mounts using the `componentDidMount` lifecycle
    method. The render method returns the JSX for the UI.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The component is connected to the Redux store using the higher-order component.
    Let''s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The other components also follow a similar approach. Codewise React code has
    much less boilerplate and is more concise compared to Angular.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned general concepts about React, Redux, and other libraries
    on the React ecosystem. We also learned how to create a React app using JHipster
    and generated entities for it. We saw how we can make use of TypeScript with React
    and also walked through the generated code. We also ran and tested our created
    application. In the next chapter, we will conclude the book with best practices
    from the JHipster community and next steps to make use of what you've learned
    so far.
  prefs: []
  type: TYPE_NORMAL
