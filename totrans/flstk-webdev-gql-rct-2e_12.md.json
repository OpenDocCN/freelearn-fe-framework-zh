["```js\nnpm install --save subscriptions-transport-ws graphql-subscriptions \n```", "```js\n    import { createServer } from 'http';\n    ```", "```js\n    const server = createServer(app);\n    ```", "```js\n    for (let i = 0; i < serviceNames.length; i += 1) {\n      const name = serviceNames[i];\n      switch (name) {\n        case 'graphql':\n          (async () => {\n            await services[name].start();\n            app.use(graphqlUploadExpress());\n            services[name].applyMiddleware({ app });\n          })();\n          break;\n        case 'subscriptions':\n          server.listen(8000, () => {\n            console.log('Listening on port 8000!');\n            services[name](server);\n          });\n        break;\n        default:\n          app.use('/${name}', services[name]);\n          break;\n      }\n    }\n    ```", "```js\n    import graphql from './graphql';\n    import subscriptions from './subscriptions';\n    export default utils => ({\n      graphql: graphql(utils),\n      subscriptions: subscriptions(utils),\n    });\n    ```", "```js\n    import { makeExecutableSchema } from '@graphql-tools/schema';\n    import { SubscriptionServer } from 'subscriptions-transport-ws';\n    import { execute, subscribe } from 'graphql';\n    import jwt from 'jsonwebtoken';\n    import Resolvers from '../graphql/resolvers';\n    import Schema from'../graphql/schema';\n    import auth from '../graphql/auth';\n    ```", "```js\n    export default (utils) => (server) => {\n      const executableSchema = makeExecutableSchema({\n        typeDefs: Schema,\n        resolvers: Resolvers.call(utils),\n        schemaDirectives: {\n          auth: auth\n        },\n      });\n    }\n    ```", "```js\n    new SubscriptionServer({\n      execute,\n      subscribe,\n      schema: executableSchema,\n    }, \n    {\n      server,\n      path: '/subscriptions',\n    }); \n    ```", "```js\n    type RootSubscription {\n      messageAdded: Message\n    }\n    ```", "```js\n    schema {\n      query: RootQuery\n      mutation: RootMutation\n      subscription: RootSubscription\n    }\n    ```", "```js\n    import { PubSub, withFilter } from 'graphql-subscriptions';\n    const pubsub = new PubSub();\n    ```", "```js\n    RootSubscription: {\n      messageAdded: {\n        subscribe: () =>\n          pubsub.asyncIterator(['messageAdded']),\n      }\n    },\n    ```", "```js\n    addMessage(root, { message }, context) {\n      logger.log({\n          level: 'info',\n          message: 'Message was created',\n      });\n      return Message.create({\n          ...message,\n      }).then((newMessage) => {\n          return Promise.all([\n              newMessage.setUser(context.user.id),\n              newMessage.setChat(message.chatId),\n          ]).then(() => {\n              pubsub.publish('messageAdded', {\n                messageAdded: newMessage });\n              return newMessage;\n          });\n       });\n    },\n    ```", "```js\n    import { ApolloClient, InMemoryCache, from, split } from '@apollo/client';\n    import { WebSocketLink } from '@apollo/client/link/ws';\n    import { onError } from \"@apollo/client/link/error\";\n    import { getMainDefinition } from '@apollo/client/utilities';\n    import { createUploadLink } from 'apollo-upload-client';\n    import { SubscriptionClient } from 'subscriptions-transport-ws';\n    ```", "```js\n    const protocol = (location.protocol != 'https:') ? 'ws://': 'wss://';\n    const port = location.port ? ':'+location.port: '';\n    ```", "```js\n    const httpLink = createUploadLink({\n      uri: location.protocol + '//' + location.hostname +\n        port + '/graphql',credentials: 'same-origin',\n    });\n    ```", "```js\n    const SUBSCRIPTIONS_ENDPOINT = protocol +\n      location.hostname + port + '/subscriptions';\n    const subClient = \n      new SubscriptionClient(SUBSCRIPTIONS_ENDPOINT, {\n      reconnect: true,\n      connectionParams: () => {\n        var token = localStorage.getItem('jwt');\n        if(token) {\n          return { authToken: token };\n        }\n        return { };\n      }\n    });\n    const wsLink = new WebSocketLink(subClient);\n    ```", "```js\n    const link = split(\n      ({ query }) => {\n        const { kind, operation } =\n          getMainDefinition(query);\n        return kind === 'OperationDefinition' && \n          operation === 'subscription';\n      },\n      wsLink,\n      httpLink,\n    );\n    ```", "```js\nreturn (\n  <div className=\"wrapper\">\n    <div className=\"chats\">\n      {chats.map((chat, i) =>\n        <ChatItem chat={chat} user={user}\n          openChat={openChat} />\n      )}\n    </div>\n    <div className=\"openChats\">\n      {openChats.map((chatId, i) => <Chat chatId={chatId}\n        key={\"chatWindow\" + chatId} closeChat={closeChat} \n       /> )}\n    </div>\n  </div>\n)\n```", "```js\n    export const MESSAGES_SUBSCRIPTION = gql'\n      subscription onMessageAdded {\n        messageAdded {\n          id\n          text\n          chat {\n            id\n          }\n          user {\n            id\n            __typename \n          }\n          __typename \n        }\n      }\n    ';\n    ```", "```js\n    export const NEW_MESSAGE = gql'\n      fragment NewMessage on Chat {\n          id\n          type\n      }\n    ';\n    ```", "```js\n    import { MESSAGES_SUBSCRIPTION } from './apollo/queries/messageAdded';\n    import { NEW_MESSAGE } from './apollo/mutations/addMessage';\n    import { GET_CHAT } from './apollo/queries/getChat';\n    ```", "```js\n    const { loading, error, data, subscribeToMore } = useGetChatsQuery();\n    ```", "```js\n    import { withApollo } from '@apollo/client/react/hoc';\n    import { UserConsumer } from './components/context/user';\n    ```", "```js\n    const ChatContainer = (props) => <UserConsumer><Chats {...props} /></UserConsumer>\n    export default withApollo(ChatContainer)\n    ```", "```js\n    useEffect(() => {\n      subscribeToNewMessages()\n    }, []);\n    ```", "```js\nconst subscribeToNewMessages = () => {\n  subscribeToMore({\n    document: MESSAGES_SUBSCRIPTION,\n    updateQuery: (prev, { subscriptionData }) => {\n      if (!subscriptionData.data || (prev.chats &&\n          !prev.chats.length)) return prev;\n      var index = -1;\n      for(var i = 0; i < prev.chats.length; i++) {\n        if(prev.chats[i].id == \n          subscriptionData.data.messageAdded.chat.id) {\n          index = i;\n          break;\n        }\n      }\n      if (index === -1) return prev;\n      const newValue = Object.assign({},prev.chats[i], {\n        lastMessage: {\n          text: subscriptionData.data.messageAdded.text,\n          __typename: \n            subscriptionData.data.messageAdded.__typename\n        }\n      });\n      var newList = {chats:[...prev.chats]};\n      newList.chats[i] = newValue;\n      return newList;\n    }\n  });\n}\n```", "```js\nif(user.id !== subscriptionData.data.messageAdded.user.id) {\n  try {\n    const data = client.readQuery({ query: GET_CHAT,\n      variables: { chatId: \n        subscriptionData.data.messageAdded.chat.id } });\n    client.cache.modify({\n      id: client.cache.identify(data.chat),\n      fields: {\n        messages(existingMessages = []) {\n          const newMessageRef = \n            client.cache.writeFragment({\n            data: subscriptionData.data.messageAdded,\n            fragment: NEW_MESSAGE\n          });\n          return [...existingMessages, newMessageRef];\n        }\n      }\n    });\n  } catch(e) {}\n}\n```", "```js\nonConnect: async (params,socket) => {\n  const authorization = params.authToken;\n  if(typeof authorization !== typeof undefined) {\n    var search = \"Bearer\";\n    var regEx = new RegExp(search, \"ig\");\n    const token = authorization.replace(regEx, '').trim();\n    return jwt.verify(token, JWT_SECRET, function(err,\n      result) {\n      if(err) {\n        throw new Error('Missing auth token!');\n      } else {\n        return utils.db.models.User.findByPk(\n          result.id).then((user) => \n        {\n          return Object.assign({}, socket.upgradeReq, {\n            user });\n        });\n      }\n    });\n  } else {\n    throw new Error('Missing auth token!');\n  }\n},\n```", "```js\nmessageAdded: {\n  subscribe: withFilter(() =>\n    pubsub.asyncIterator('messageAdded'), \n    (payload, variables, context) => {\n    if (payload.messageAdded.UserId !== context.user.id) {\n      return Chat.findOne({\n        where: {\n          id: payload.messageAdded.ChatId\n        },\n        include: [{\n          model: User,\n          required: true,\n          through: { where: { userId: context.user.id } },\n        }],\n      }).then((chat) => {\n        if(chat !== null) {\n          return true;\n        }\n        return false;\n      })\n    }\n    return false;\n  }),\n}\n```", "```js\n    import { useSubscription, gql } from '@apollo/client';\n    export const MESSAGES_SUBSCRIPTION = gql'\n      subscription onMessageAdded {\n        messageAdded {\n          id\n          text\n          chat {\n            id\n          }\n          user {\n            id\n            __typename\n          }\n          __typename\n        }\n      }\n    ';\n    export const useMessageAddedSubscription = (options) => useSubscription(MESSAGES_SUBSCRIPTION, options);\n    ```", "```js\n    npm install --save react-toastify\n    ```", "```js\n    import { ToastContainer, toast } from 'react-toastify';\n    ```", "```js\n    <div className=\"wrapper\">\n      <ToastContainer/>\n    ```", "```js\n    import { useMessageAddedSubscription } from './apollo/subscriptions/messageAdded';\n    ```", "```js\n    useMessageAddedSubscription({\n      onSubscriptionData: data => {\n        if(data && data.subscriptionData &&\n          data.subscriptionData.data &&\n          data.subscriptionData.data.messageAdded)\n          toast(data.subscriptionData.data.messageAdded.text, \n            { position: toast.POSITION.TOP_LEFT });\n      }\n    });\n    ```", "```js\n    import 'react-toastify/dist/ReactToastify.css';\n    ```", "```js\n    .Toastify__toast-container--top-left {\n      top: 4em !important;\n    }\n    ```"]