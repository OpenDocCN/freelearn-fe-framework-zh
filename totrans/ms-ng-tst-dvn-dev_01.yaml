- en: <st c="0">1</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">1</st>
- en: <st c="2">Taking Your First Steps with TDD</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">使用 TDD 的第一步</st>
- en: '**<st c="34">Test-driven development</st>** <st c="58">(</st>**<st c="60">TDD</st>**<st
    c="63">) is a</st> <st c="70">software development process that’s widely used
    in Angular development to ensure code quality and reduce time spent debugging.</st>
    <st c="198">By writing automated tests before writing production code, developers
    can ensure that their code meets the desired specifications and can be easily
    modified and maintained</st> <st c="370">over time.</st>'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="34">测试驱动开发</st>** <st c="58">(**<st c="60">TDD</st>**) 是一种在 Angular
    开发中广泛使用的软件开发流程，用于确保代码质量并减少调试时间。通过在编写生产代码之前编写自动化测试，开发者可以确保他们的代码符合预期的规范，并且随着时间的推移可以轻松修改和维护。'
- en: <st c="380">In this chapter, we’ll explore the early stages of TDD in Angular.</st>
    <st c="448">We’ll start by discussing the role of TDD in Angular development and
    how it can help improve the quality of your code.</st> <st c="567">Then, we’ll
    set up the development environment, which involves installing the necessary tools</st>
    <st c="661">and dependencies.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="380">在本章中，我们将探讨 Angular 中 TDD 的早期阶段。</st> <st c="448">我们将首先讨论 TDD 在 Angular
    开发中的作用以及它如何有助于提高代码质量。</st> <st c="567">然后，我们将设置开发环境，这包括安装必要的工具</st> <st c="661">和依赖项。</st>
- en: <st c="678">Next, we’ll create a new Angular project and explore the various
    files related to writing tests, including the spec files, which contain the actual
    tests, and the</st> `<st c="842">karma.conf.js</st>` <st c="855">file, which is
    used to configure the</st> <st c="893">testing framework.</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="678">接下来，我们将创建一个新的 Angular 项目，并探索与编写测试相关的各种文件，包括包含实际测试的 spec 文件，以及</st>
    `<st c="842">karma.conf.js</st>` <st c="855">文件，该文件用于配置</st> <st c="893">测试框架。</st>
- en: <st c="911">Throughout this chapter, I will provide examples and best practices
    for writing effective tests in Angular, such as using descriptive test names,
    testing all code paths, and using dummy data to simulate</st> <st c="1115">different
    scenarios.</st>
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="911">在本章中，我将提供编写有效的 Angular 测试的示例和最佳实践，例如使用描述性的测试名称、测试所有代码路径以及使用模拟数据来模拟</st>
    <st c="1115">不同的场景。</st>
- en: <st c="1135">By the end of this chapter, you’ll have a solid understanding of
    the basics of TDD in Angular and how to start using it.</st> <st c="1257">Whether
    you’re new to TDD or looking to improve your skills, this chapter will provide
    you with the knowledge and tools you’ll need to create high-quality Angular applications
    using</st> <st c="1439">this approach.</st>
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1135">在本章结束时，你将对 Angular 中 TDD 的基础知识有一个扎实的理解，并了解如何开始使用它。</st> <st c="1257">无论你是
    TDD 的新手还是想提高你的技能，本章都将为你提供创建高质量 Angular 应用程序所需的知识和工具。</st>
- en: <st c="1453">We will cover the</st> <st c="1472">following topics:</st>
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1453">我们将涵盖以下主题：</st> <st c="1472">以下主题：</st>
- en: <st c="1489">Understanding TDD and its role</st> <st c="1521">in Angular</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1489">理解 TDD 及其在</st> <st c="1521">Angular 中的作用</st>
- en: <st c="1531">Setting up the</st> <st c="1547">development environment</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1531">设置</st> <st c="1547">开发环境</st>
- en: <st c="1570">Creating a new</st> <st c="1586">Angular project</st>
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1570">创建一个新的</st> <st c="1586">Angular 项目</st>
- en: <st c="1601">Exploring different files related to</st> <st c="1639">writing
    tests</st>
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1601">探索与</st> <st c="1639">编写测试</st> 相关的不同文件
- en: <st c="1652">Technical requirements</st>
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1652">技术要求</st>
- en: <st c="1675">To follow along with the examples and exercises in this chapter,
    you will need to have a basic understanding of Angular and TypeScript, as well
    as a code editor, such as Visual Studio Code, installed on</st> <st c="1879">your
    computer</st>
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1675">为了跟随本章中的示例和练习，你需要对 Angular 和 TypeScript 有基本的了解，以及安装在你的</st> <st
    c="1879">计算机上</st> 的代码编辑器，例如 Visual Studio Code。
- en: <st c="1892">All the code files for this chapter can be found</st> <st c="1942">at</st>
    [<st c="1945">https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%201</st>](https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%201)<st
    c="2043">.</st>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1892">本章的所有代码文件都可以在</st> <st c="1942">以下位置找到</st> [<st c="1945">https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%201</st>](https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%201)<st
    c="2043">。</st>
- en: <st c="2044">Understanding TDD and its role in Angular</st>
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2044">理解 TDD 及其在 Angular 中的作用</st>
- en: <st c="2086">In this section, we will explore</st> <st c="2119">the fundamentals
    of TDD and its role in Angular development.</st> <st c="2181">We’ll start by discussing
    the benefits of using TDD in general, such</st> <st c="2250">as improved code
    quality, faster development cycles, and reduced debugging time.</st> <st c="2331">Then,
    we’ll look at how TDD fits into the overall Angular development process and how
    it can be used to create scalable and</st> <st c="2455">maintainable applications.</st>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2086">在本节中，我们将探讨</st> <st c="2119">TDD 的基础及其在 Angular 开发中的作用。</st> <st
    c="2181">我们将首先讨论使用 TDD 的一般好处，例如提高代码质量、加快开发周期和减少调试时间。</st> <st c="2250">然后，我们将探讨
    TDD 如何融入 Angular 开发的整体流程，以及如何用它来创建可扩展和可维护的应用程序。</st>
- en: <st c="2481">What is Angular and TDD?</st>
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="2481">什么是 Angular 和 TDD？</st>
- en: <st c="2506">Angular is a popul</st><st c="2525">ar</st> <st c="2529">open source
    JavaScript framework that’s used for building complex web applications.</st> <st
    c="2613">It was developed by Google and is widely used by developers around the</st>
    <st c="2684">world.</st> <st c="2691">Angular provides a set of tools and features
    that make it easy to build dynamic, responsive, and scalable</st> <st c="2797">web
    applications.</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2506">Angular 是一个流行的</st><st c="2525">开源</st> <st c="2529">JavaScript
    框架，用于构建复杂网络应用程序。</st> <st c="2613">它由 Google 开发，并被世界各地的开发者广泛使用。</st> <st c="2684">Angular
    提供了一套工具和功能，使得构建动态、响应和可扩展的网络应用程序变得容易。</st>
- en: <st c="2814">Angular is a component-based framework that allows developers to
    build reusable UI components.</st> <st c="2910">These components can be combined
    to create complex user interfaces, making it easy to maintain and extend the application.</st>
    <st c="3033">Angular also provides built-in support for testing, making it easy
    to write and execute tests for</st> <st c="3131">Angular applications.</st>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2814">Angular 是一个基于组件的框架，允许开发者构建可重用的 UI 组件。</st> <st c="2910">这些组件可以组合起来创建复杂用户界面，使得维护和扩展应用程序变得容易。</st>
    <st c="3033">Angular 还提供了内置的测试支持，使得编写和执行 Angular 应用程序的测试变得容易。</st>
- en: <st c="3152">TDD is a dynamic methodology in software development that prioritizes
    incrementally creating tests before the code is</st> <st c="3270">implemented.</st>
    <st c="3284">The TDD process revolves around a structured sequence known as the</st>
    **<st c="3351">red-green-refactor</st>** <st c="3369">cycle, which consists of
    the</st> <st c="3399">following stages:</st>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3152">TDD 是一种软件开发动态方法，优先于在代码实现之前增量创建测试。</st> <st c="3270">TDD 流程围绕一个称为</st>
    **<st c="3351">红-绿-重构</st>** <st c="3369">循环的结构化序列，它包括以下阶段：</st>
- en: '**<st c="3416">Writing a failing test</st>**<st c="3439">: Initiate the cycle
    by crafting a test that intentionally fails.</st> <st c="3506">This test serves
    as a specification for the</st> <st c="3550">desired functionality.</st>'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="3416">编写失败的测试</st>**<st c="3439">：通过编写一个故意失败的测试来启动循环。</st> <st c="3506">这个测试作为所需功能的规范。</st>'
- en: '**<st c="3572">Prohibiting overly complex tests</st>**<st c="3605">: Emphasize
    the creation of tests that are only as intricate as necessary.</st> <st c="3681">Avoiding
    unnecessary complexity ensures that tests remain focused on specific functionalities,
    enhancing clarity</st> <st c="3794">and maintainability.</st>'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="3572">禁止过于复杂的测试</st>**<st c="3605">：强调创建仅必要复杂的测试。</st> <st c="3681">避免不必要的复杂性确保测试始终专注于特定的功能，增强清晰度和可维护性。</st>
    <st c="3794">。'
- en: '**<st c="3814">Minimizing code implementation</st>**<st c="3845">: Write the
    minimum code required to pass the failing test.</st> <st c="3906">This minimalist
    approach ensures that code is dedicated to fulfilling the</st> <st c="3980">specified
    requirements.</st>'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="3814">最小化代码实现</st>**<st c="3845">：编写通过失败测试所需的最少代码。</st> <st c="3906">这种极简方法确保代码专注于满足指定的要求。</st>'
- en: '<st c="4003">The iterative nature of TDD</st> <st c="4032">unfolds as follows:
    writing a failing test, implementing the code to pass the test, and refactoring
    the code to enhance code design and maintainability.</st> <st c="4185">This</st>
    <st c="4190">iterative loop persists until the entire code base</st> <st c="4241">is
    complete.</st>'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4003">TDD 的迭代性质如下：编写失败的测试，实现代码以通过测试，并重构代码以增强代码设计和可维护性。</st> <st c="4032">这个迭代循环持续到整个代码库</st>
    <st c="4241">完成。</st>
- en: <st c="4253">TDD’s unique approach to writing tests before code execution serves
    a dual purpose.</st> <st c="4338">First, it guarantees code correctness by aligning
    with predefined test requirements.</st> <st c="4423">Second, it fosters the creation
    of clean, maintainable, and adaptable code.</st> <st c="4499">Developers are encouraged
    to adhere to best practices, resulting in code that is easily comprehensible,
    modifiable, and extensible throughout the software development</st> <st c="4666">life
    cycle.</st>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4677">Now that we know what Angular</st> <st c="4707">is and looked at
    the benefits of using the TDD approach, let’s understand the</st> <st c="4786">red-green-refactor
    cycle.</st>
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4811">The red-green-refactor cycle</st>
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="4840">The red-green-refactor cycle is a fundamental concept in TDD.</st>
    <st c="4903">It serves as a robust and systematic methodology in</st> <st c="4955">software
    development that offers developers a structured framework for incremental progress.</st>
    <st c="5048">This approach is designed to break down the development process into
    discrete, manageable</st> <st c="5137">steps, guaranteeing code correctness and
    alignment with predefined test requirements.</st> <st c="5224">Now, let’s delve
    into the technical nuances of each phase – red, green, and refactor – within this</st>
    <st c="5323">iterative process:</st>
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="5341">Red – writing a</st>** **<st c="5358">failing test</st>**<st
    c="5370">:</st>'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5372">The first step in the red-green-refactor cycle is to write a failing
    test.</st> <st c="5447">The test should define the desired behavior of the code
    and should be written in a way that it fails initially.</st> <st c="5559">This
    is</st> <st c="5566">called the “red” step because the test is expected</st> <st
    c="5618">to fail.</st>
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**<st c="5626">Green – writing code to pass</st>** **<st c="5656">the test</st>**<st
    c="5664">:</st>'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5666">The second step is to write the code that will make the test pass.</st>
    <st c="5733">The code should be minimal, and it should only be written to make
    the test pass.</st> <st c="5814">This is called the “green” step</st> <st c="5846">because
    the test is expected</st> <st c="5875">to pass.</st>
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**<st c="5883">Refactor – improving code without</st>** **<st c="5918">changing
    functionality</st>**<st c="5940">:</st>'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5942">Once the test has passed, the developer can refactor the code to
    enhance its design, readability, and maintainability by eliminating duplication,
    simplifying the code, and improving its readability.</st> <st c="6141">The key
    is to make improvements without altering the functionality covered by</st> <st
    c="6218">the test.</st>
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="6228">In the next section, we will take a look at the benefits of the</st>
    <st c="6293">red-green-refactor cycle.</st>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6318">Benefits of the red-green-refactor cycle</st>
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="6359">The red-green-refactor cycle has several benefits, including</st>
    <st c="6421">the following:</st>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="6435">Enhanced code quality</st>**<st c="6457">: The red-green-refactor
    cycle ensures that the code is correct, reliable, and meets the requirements predefined
    in</st> <st c="6574">the tests</st>'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="6435">增强代码质量</st>**<st c="6457">：红-绿-重构循环确保代码正确、可靠，并满足测试中预定义的要求</st>
    <st c="6574">的测试</st>'
- en: '**<st c="6583">Accelerated development</st>**<st c="6607">: The red-green-refactor
    cycle allows developers to catch errors early in the development process, which
    saves time and reduces the cost of</st> <st c="6748">fixing bugs</st>'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="6583">加速开发</st>**<st c="6607">：红-绿-重构循环允许开发者在开发过程中早期捕捉错误，这节省了时间并减少了修复错误的成本</st>
    <st c="6748">的修复错误</st>'
- en: '**<st c="6759">Better collaboration</st>**<st c="6780">: The red-green-refactor
    cycle encourages collaboration between developers, testers, and other stakeholders,
    which improves communication and helps to ensure that everyone is on the</st>
    <st c="6963">same page</st>'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="6759">更好的协作</st>**<st c="6780">：红-绿-重构循环鼓励开发人员、测试人员和其他利益相关者之间的协作，这改善了沟通并有助于确保每个人都处于</st>
    <st c="6963">同一页</st>'
- en: '**<st c="6972">Simplified maintenance</st>**<st c="6995">: The red-green-refactor
    cycle produces code that is easier to maintain and extend, which reduces the cost
    and effort of</st> <st c="7117">future development</st>'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="6972">简化维护</st>**<st c="6995">：红-绿-重构循环生成的代码更容易维护和扩展，这减少了未来开发的成本和努力</st>
    <st c="7117">的未来开发</st>'
- en: <st c="7135">By using the red-green-refactor</st> <st c="7167">cycle, developers
    can build reliable, maintainable, and scalable</st> <st c="7233">software applications.</st>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7135">通过使用红-绿-重构</st> <st c="7167">循环，开发人员可以构建可靠、可维护和可扩展的</st> <st c="7233">软件应用</st>。
- en: <st c="7255">Next, we’ll learn how TDD is an important asset when it’s</st>
    <st c="7314">in use.</st>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7255">接下来，我们将学习TDD在应用时是如何成为一个重要资产的。</st> <st c="7314">在应用时。</st>
- en: <st c="7321">The role of TDD in Angular development</st>
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="7321">TDD在Angular开发中的作用</st>
- en: <st c="7360">TDD plays a critical role in Angular development.</st> <st c="7411">By
    writing tests first, developers can ensure that the code is correct and meets
    the requirements defined in the tests.</st> <st c="7531">This ensures that the
    application is reliable</st> <st c="7577">and reduces the risk of bugs and errors.</st>
    <st c="7618">TDD also encourages developers to write clean, maintainable code
    that is easy to modify and extend, making it easier to maintain and update the
    application</st> <st c="7773">over time.</st>
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7360">TDD在Angular开发中扮演着关键角色。</st> <st c="7411">通过首先编写测试，开发人员可以确保代码正确并满足测试中定义的要求。</st>
    <st c="7531">这确保了应用是可靠的</st> <st c="7577">并减少了错误和缺陷的风险。</st> <st c="7618">TDD还鼓励开发人员编写干净、易于维护的代码，易于修改和扩展，这使得随着时间的推移更容易维护和更新应用</st>
    <st c="7773">。</st>
- en: <st c="7784">Angular provides built-in support for testing, making it easy to
    write and execute tests for Angular applications.</st> <st c="7900">The Angular
    testing framework provides a set of tools and features that make it easy to write
    unit tests, integration tests, and end-to-end tests for Angular applications.</st>
    <st c="8072">These tests can be run automatically as part of the build process,
    ensuring that the application is always tested</st> <st c="8186">and reliable.</st>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7784">Angular提供了内置的测试支持，使得编写和执行Angular应用的测试变得容易。</st> <st c="7900">Angular测试框架提供了一套工具和功能，使得编写单元测试、集成测试和端到端测试变得容易。</st>
    <st c="8072">这些测试可以作为构建过程的一部分自动运行，确保应用始终得到测试并保持可靠。</st> <st c="8186">和可靠。</st>
- en: <st c="8199">In the next section, we’ll set up the development environment,
    which involves preparing the tools and resources needed to develop</st> <st c="8330">the
    project.</st>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8199">在下一节中，我们将设置开发环境，这涉及到准备开发</st> <st c="8330">项目所需的工具和资源</st>。
- en: <st c="8342">Setting up the development environment</st>
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="8342">设置开发环境</st>
- en: <st c="8381">With a theoretical</st> <st c="8401">understanding of TDD and its
    role in Angular application development, the next step is to configure our development
    environment so that we can apply TDD principles in Angular.</st> <st c="8577">To
    do this, we need to install the required tools to create an Angular project.</st>
    <st c="8657">By following the right steps, we can create a development environment
    that promotes effective and efficient development using TDD principles</st> <st
    c="8798">in Angular.</st>
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8381">在理论上理解TDD及其在Angular应用程序开发中的作用后，下一步是配置我们的开发环境，以便我们可以在Angular中应用TDD原则。</st>
    <st c="8577">为此，我们需要安装创建Angular项目的所需工具。</st> <st c="8657">通过遵循正确的步骤，我们可以创建一个促进使用TDD原则在Angular中进行有效和高效开发的开发环境</st>
    <st c="8798">。</st>
- en: <st c="8809">Setting up a development environment for Angular can be a bit more
    complex than setting up a general development environment.</st> <st c="8936">However,
    with the right guidance, it can be a straightforward process.</st> <st c="9007">Here,
    we</st> <st c="9016">will go over the steps you need to take to set up your Angular
    development environment.</st> <st c="9104">So, let’s</st> <st c="9114">get started.</st>
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8809">设置Angular的开发环境可能比设置通用开发环境要复杂一些。</st> <st c="8936">然而，有了正确的指导，这可以是一个简单直接的过程。</st>
    <st c="9007">在这里，我们将介绍你需要采取的步骤来设置你的Angular开发环境。</st> <st c="9104">那么，让我们开始吧。</st>
- en: <st c="9126">Installing Node.js on Windows or macOS</st>
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="9126">在Windows或macOS上安装Node.js</st>
- en: <st c="9165">Follow these steps</st> <st c="9184">to install Node.js on</st>
    <st c="9207">Windows</st> <st c="9215">or macOS:</st>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9165">按照以下步骤</st> <st c="9184">在Windows</st> <st c="9207">或macOS上安装Node.js：</st>
- en: <st c="9224">Go to the official Node.js website (</st>[<st c="9261">https://nodejs.org/en/</st>](https://nodejs.org/en/)<st
    c="9284">) and click on the</st> **<st c="9304">Download</st>** <st c="9312">button
    for the LTS</st> <st c="9332">version.</st> <st c="9341">This will download the
    latest</st> <st c="9370">version of Node.js for</st> <st c="9393">Windows</st>
    <st c="9402">or macOS:</st>
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="9224">访问官方Node.js网站（</st>[<st c="9261">https://nodejs.org/en/</st>](https://nodejs.org/en/)<st
    c="9284">），然后点击LTS</st> <st c="9304">版本的**<st c="9312">下载</st>** <st c="9332">按钮。</st>
    <st c="9341">这将下载适用于Windows</st> <st c="9370">或macOS的最新版本Node.js：</st>
- en: '![Figure 1.1 – Node.js home page](img/B21146_01_01.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – Node.js首页](img/B21146_01_01.jpg)'
- en: <st c="9542">Figure 1.1 – Node.js home page</st>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9542">图1.1 – Node.js首页</st>
- en: <st c="9572">Once the installer has finished downloading, run it by double-clicking
    on the downloaded file.</st> <st c="9668">You should see the Node.js</st> <st
    c="9695">setup wizard:</st>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9572">一旦安装程序下载完成，通过双击下载的文件来运行它。</st> <st c="9668">你应该会看到Node.js</st>
    <st c="9695">设置向导：</st>
- en: '![Figure 1.2 – Node.js installation – step 1](img/B21146_01_02.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – Node.js安装 – 步骤1](img/B21146_01_02.jpg)'
- en: <st c="9889">Figure 1.2 – Node.js installation – step 1</st>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9889">图1.2 – Node.js安装 – 步骤1</st>
- en: <st c="9931">Read through the license</st> <st c="9956">agreement and click
    the</st> **<st c="9981">Agree</st>** <st c="9986">button if you agree to</st>
    <st c="10010">the terms:</st>
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="9931">阅读许可</st> <st c="9956">协议，如果你同意条款，请点击</st> **<st c="9981">同意</st>**
    <st c="9986">按钮：</st> <st c="10010">。</st>
- en: '![Figure 1.3 – Node.js installation – step 2](img/B21146_01_03.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 – Node.js安装 – 步骤2](img/B21146_01_03.jpg)'
- en: <st c="11349">Figure 1.3 – Node.js installation – step 2</st>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11349">图1.3 – Node.js安装 – 步骤2</st>
- en: <st c="11391">Next, choose</st> <st c="11404">the location where</st> <st c="11424">you
    want to install Node.js.</st> <st c="11453">The</st> <st c="11456">default location</st>
    <st c="11473">is usually fine, but you can choose a different location if</st>
    <st c="11534">you prefer:</st>
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="11391">接下来，选择</st> <st c="11404">你想要安装Node.js的位置。</st> <st c="11453">默认位置</st>
    <st c="11456">通常就很好，但如果你</st> <st c="11473">更喜欢的话，可以选择不同的位置：</st>
- en: '![Figure 1.4 – Node.js installation – step 3](img/B21146_01_04.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图1.4 – Node.js安装 – 步骤3](img/B21146_01_04.jpg)'
- en: <st c="12028">Figure 1.4 – Node.js installation – step 3</st>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12028">图1.4 – Node.js安装 – 步骤3</st>
- en: <st c="12070">On the next screen, you’ll be</st> <st c="12100">asked to</st>
    <st c="12110">choose which components to install.</st> <st c="12146">The</st>
    <st c="12150">default options are usually fine, but</st> <st c="12188">you can
    choose to add or remove</st> <st c="12220">components</st> <st c="12231">as needed:</st>
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏幕上，您将被要求选择要安装的组件。
- en: '![Figure 1.5 – Node.js installation – step 4](img/B21146_01_05.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图1.5 – Node.js安装 – 步骤4](img/B21146_01_05.jpg)'
- en: <st c="12521">Figure 1.5 – Node.js installation – step 4</st>
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5 – Node.js安装 – 步骤4
- en: <st c="12563">Choose the folder where you want to create the start menu shortcuts
    for Node.js.</st> <st c="12645">The default folder is</st> <st c="12666">usually
    fine, but you can choose a different folder if</st> <st c="12722">you prefer.</st>
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您想要创建Node.js开始菜单快捷方式的文件夹。
- en: <st c="12733">Click the</st> **<st c="12744">Install</st>** <st c="12751">button
    to</st> <st c="12761">begin the installation</st> <st c="12785">process.</st>
    <st c="12794">This may take a</st> <st c="12809">few minutes to complete, depending</st>
    <st c="12845">on your</st> <st c="12853">computer’s speed:</st>
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**按钮开始安装过程。
- en: '![Figure 1.6 – Node.js installation – step 5](img/B21146_01_06.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图1.6 – Node.js安装 – 步骤5](img/B21146_01_06.jpg)'
- en: <st c="13053">Figure 1.6 – Node.js installation – step 5</st>
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6 – Node.js安装 – 步骤5
- en: <st c="13095">Once the installation is complete, you should see a message indicating
    that Node.js has been installed successfully.</st> <st c="13213">Click the</st>
    **<st c="13223">Close</st>** <st c="13228">button to close</st> <st c="13245">the
    installer:</st>
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，您应该会看到一个消息，表明Node.js已成功安装。
- en: '![Figure 1.7 – Node.js installation – step 6](img/B21146_01_07.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图1.7 – Node.js安装 – 步骤6](img/B21146_01_07.jpg)'
- en: <st c="13563">Figure 1.7 – Node.js installation – step 6</st>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 – Node.js安装 – 步骤6
- en: <st c="13605">To verify</st> <st c="13615">that Node.js has</st> <st c="13633">been
    installed</st> <st c="13647">correctly, open a comman</st><st c="13672">d prompt</st>
    <st c="13682">and run</st> <st c="13690">the</st> <st c="13694">following:</st>
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了验证Node.js是否已正确安装，打开命令提示符并运行以下命令：
- en: '[PRE0]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="13714">This should display the version number of Node.js that you</st>
    <st c="13774">just installed:</st>
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会显示您刚刚安装的Node.js的版本号：
- en: '![Figure 1.8 – Checking the npm version](img/B21146_01_08.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图1.8 – 检查npm版本](img/B21146_01_08.jpg)'
- en: <st c="13791">Figure 1.8 – Checking the npm version</st>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8 – 检查npm版本
- en: <st c="13828">In the</st> <st c="13836">next section, we’ll learn</st> <st c="13861">how
    to</st> <st c="13868">install</st> <st c="13877">Node.js</st> <st c="13885">on</st>
    <st c="13887">Linux.</st>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何在Linux上安装Node.js。
- en: <st c="13894">Installing Node.js on Linux</st>
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Node.js到Linux
- en: <st c="13922">Follow these steps</st> <st c="13941">to install Node.js</st>
    <st c="13961">on</st> <st c="13964">Linux:</st>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在Linux上安装Node.js：
- en: <st c="13970">Open your terminal and</st> <st c="13993">run the following command
    to update the</st> <st c="14034">package manager:</st>
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端并运行以下命令以更新包管理器：
- en: '[PRE1]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="14068">The preceding command will give you the</st> <st c="14109">following
    output:</st>
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的命令将给出以下输出：
- en: '![Figure 1.9 – Updating Ubuntu packages](img/B21146_01_09.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图1.9 – 更新Ubuntu软件包](img/B21146_01_09.jpg)'
- en: <st c="16265">Figure 1.9 – Updating Ubuntu packages</st>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9 – 更新Ubuntu软件包
- en: <st c="16302">Run the following</st> <st c="16321">command to</st> <st c="16332">install
    Node.js:</st>
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以安装Node.js：
- en: '[PRE2]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="16374">The preceding</st> <st c="16388">command will give you</st> <st
    c="16410">the</st> <st c="16415">following output:</st>
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的命令将给出以下输出：
- en: '![ Figure 1.10 – Node.js installation on Ubuntu](img/B21146_01_10.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: <st c="17692">Figure 1.10 – Node.js installation on Ubuntu</st>
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17736">To verify that Node.js has been installed</st> <st c="17778">correctly,
    run the</st> <st c="17798">following command:</st>
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="17826">This should display</st> <st c="17847">the version</st> <st c="17858">number
    of Node.js that you</st> <st c="17886">just installed:</st>
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.11 – Node.js version after installing it on Ubuntu](img/B21146_01_11.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: <st c="17921">Figure 1.11 – Node.js version after installing it on Ubuntu</st>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17980">npm is the package</st> <st c="17999">manager for Node.js.</st>
    <st c="18021">To install it, if you’ve not already installed it with Node.js,
    run the</st> <st c="18093">following command:</st>
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="18134">Here’s</st> <st c="18142">the output:</st>
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.12 – npm installation on Ubuntu](img/B21146_01_12.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: <st c="20579">Figure 1.12 – npm installation on Ubuntu</st>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20619">To verify that npm</st> <st c="20638">has been installed</st>
    <st c="20658">correctly, run the</st> <st c="20677">following</st> <st c="20687">command:</st>
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <st c="20704">You should see the</st> <st c="20724">following output:</st>
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: "![Figure 1.\uFEFF13 – npm version after Node.js installation](img/B21146_01_13.jpg)"
  id: totrans-106
  prefs: []
  type: TYPE_IMG
- en: <st c="20762">Figure 1.13 – npm version after Node.js installation</st>
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20814">In the next section, we’ll create a</st> <st c="20850">new</st>
    <st c="20855">Angular project.</st>
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20871">Creating a new Angular project</st>
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="20902">With our development environment set</st> <st c="20940">up and
    ready, we can create our Angular project.</st> <st c="20989">This involves using
    the Angular CLI to generate the basic structure of our project, including files
    and folders.</st> <st c="21102">Once created, we can begin building our Angular
    application using the powerful tools and features provided by</st> <st c="21212">the
    framework.</st>
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21226">After installing the Angular CLI, you can create a new Angular
    project by running the following command in</st> <st c="21334">your terminal:</st>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <st c="21395">This will create a new Angular project called</st> `<st c="21442">getting-started-angular-tdd</st>`
    <st c="21469">in the</st> <st c="21477">current directory.</st>
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21495">After creating your</st> <st c="21516">Angular project, you can
    serve it by running the following command in</st> <st c="21586">your terminal:</st>
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: <st c="21651">This will start a development server and open your application
    in your default browser.</st> <st c="21740">Here, you can make changes to your
    code and see the changes live in</st> <st c="21808">your browser.</st>
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21821">Now, it’s time to explore the different files involved in</st>
    <st c="21880">writing tests.</st>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21894">Exploring different files related to writing tests</st>
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="21945">Now that we’ve created the</st> <st c="21973">Angular project,
    we will explore the different files related to writing tests in Angular.</st>
    <st c="22063">I will provide insights into their role and best practices for working
    with them.</st> <st c="22145">Let’s</st> <st c="22151">get started.</st>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="21945">现在我们已经创建了Angular项目，我们将探索与在Angular中编写测试相关的不同文件。</st> `<st c="22063">我将提供它们的作用以及使用它们的最佳实践。</st>
    `<st c="22145">让我们开始吧。</st>`'
- en: <st c="22163">*.spec.ts files</st>
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`<st c="22163">*.spec.ts</st>`'
- en: '`<st c="22179">*.spec.ts</st>` <st c="22189">files contain the</st> <st c="22208">actual
    test cases that will be run against your code.</st> <st c="22262">These files
    are the backbone of testing in Angular as they define the individual test cases
    that will ensure your code works as</st> <st c="22389">expected.</st> <st c="22400">The
    name of the file should match the name o</st><st c="22444">f the file being tested,
    and it should be located in the same directory as the file being tested.</st>
    <st c="22543">The tests in these files are organized into te</st><st c="22589">st
    suites, which are defined using the</st> `<st c="22629">describe()</st>` <st c="22639">functio</st><st
    c="22647">n.</st> <st c="22651">Each test case is defined using the</st> `<st
    c="22687">it()</st>` <st c="22691">function.</st> <st c="22702">For example, if
    you were testing a component named</st> `<st c="22753">MyComponent</st>`<st c="22764">,
    you would create a file named</st> `<st c="22796">my-component.spec.ts</st>` <st
    c="22816">and define the test cases fo</st><st c="22845">r that component within</st>
    <st c="22870">that file.</st>'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="22179">*.spec.ts</st>` <st c="22189">文件包含将要运行在你代码上的实际测试用例。</st> `<st
    c="22208">这些文件是Angular测试的骨架，因为它们定义了确保你的代码按预期工作的单个测试用例。</st> `<st c="22262">文件的名称应与被测试文件的名称匹配，并且它应位于与被测试文件相同的目录中。</st>
    `<st c="22543">这些文件中的测试被组织成测试套件，这些套件是通过使用</st> `<st c="22629">describe()</st>`
    <st c="22639">函数定义的。</st> `<st c="22651">每个测试用例都是通过使用</st> `<st c="22687">it()</st>`
    <st c="22691">函数定义的。</st> `<st c="22702">例如，如果你正在测试一个名为</st> `<st c="22753">MyComponent</st>`<st
    c="22764">》的组件，你将创建一个名为</st> `<st c="22796">my-component.spec.ts</st>` <st c="22816">的文件，并在该文件中定义该组件的测试用例。</st>'
- en: '<st c="22880">The</st> `<st c="22885">describe()</st>` <st c="22895">function
    is used to group related test cases together, and it takes two parameters: a string
    that describes the test suite and a function that defines</st> <st c="23046">the
    test cases within that suite.</st> <st c="23081">The</st> `<st c="23085">it()</st>`
    <st c="23089">function is used to define individual test cases, and it takes two
    parameters: a</st> <st c="23170">string that describes the test case and a</st>
    <st c="23212">function that contains the code for the test case.</st> <st c="23264">Within</st>
    <st c="23270">the test case function, you can use the</st> `<st c="23311">expect()</st>`
    <st c="23319">function to define the expected behavior of your code.</st> <st
    c="23375">For example, you might use</st> `<st c="23402">expect(component.title).toEqual(''My
    Title'')</st>` <st c="23445">to test that the</st> `<st c="23463">title</st>`
    <st c="23468">property of a component has the</st> <st c="23501">expected value.</st>'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="22880">The</st>` `<st c="22885">describe()</st>` 函数用于将相关的测试用例组合在一起，它接受两个参数：一个描述测试套件的字符串和一个定义该套件内测试用例的函数。<st
    c="23046">The</st> `<st c="23085">it()</st>` 函数用于定义单个测试用例，它接受两个参数：一个描述测试用例的字符串和一个包含测试用例代码的函数。<st
    c="23264">在测试用例函数内部，你可以使用</st> `<st c="23311">expect()</st>` 函数来定义你代码的预期行为。</st>
    `<st c="23375">例如，你可能使用</st> `<st c="23402">expect(component.title).toEqual(''My
    Title'')</st>` <st c="23445">来测试组件的</st> `<st c="23463">title</st>` <st c="23468">属性是否具有预期的值。</st>'
- en: '`<st c="23516">*.spec.ts</st>` <st c="23526">files also typically import the
    component or service being tested, as well as any necessary dependencies.</st>
    <st c="23633">For example, if you were testing a component that used the</st>
    `<st c="23692">HttpClient</st>` <st c="23702">service, you would need to import
    both the component and</st> `<st c="23760">HttpClientTestingModule</st>` <st c="23783">from</st>
    `<st c="23789">@angular/common/http/testing</st>`<st c="23817">.</st>'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="23516">*.spec.ts</st>` <st c="23526">文件通常还会导入正在测试的组件或服务以及任何必要的依赖项。</st>
    `<st c="23633">例如，如果你正在测试一个使用了</st> `<st c="23692">HttpClient</st>` <st c="23702">服务的组件，你需要从</st>
    `<st c="23760">HttpClientTestingModule</st>` <st c="23783">导入组件和</st> `<st c="23789">@angular/common/http/testing</st>`<st
    c="23817">。</st>'
- en: <st c="23818">The karma.conf.js file</st>
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="23841">The</st> `<st c="23846">karma.conf.js</st>` <st c="23859">file
    is used to</st> <st c="23876">configure the Karma test runner, which is used to
    run your test cases.</st> <st c="23947">Karma is a popular test runner for Angular</st>
    <st c="23990">applications, and it provides a simple way to run your tests in
    a variety of browsers.</st> <st c="24077">The</st> `<st c="24081">karma.conf.js</st>`
    <st c="24094">file specifies the files that should be included in the test run,
    as well as the browsers that should be used to run</st> <st c="24212">the tests.</st>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24222">The</st> `<st c="24227">karma.conf.js</st>` <st c="24240">file
    typically exports a configuration object that specifies these settings.</st> <st
    c="24318">The configuration object contains several properties, such as frameworks,
    files, reporters, and browsers.</st> <st c="24424">These properties allow you
    to configure various aspects of the test run, such as which testing framework
    to use, which files to include in the test run, which reporters to use to display
    test results, and which browsers to use to run</st> <st c="24658">the tests.</st>
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24668">For example, a typical</st> `<st c="24692">karma.conf.js</st>`
    <st c="24705">file might look</st> <st c="24722">like this:</st>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <st c="24943">The given configuration outlines the utilization of the</st> `<st
    c="25000">Jasmine</st>` <st c="25007">and</st> `<st c="25011">@angular/cli</st>`
    <st c="25024">frameworks, the</st> <st c="25040">inclusion of the</st> `<st c="25058">./src/test.ts</st>`
    <st c="25071">file during the</st> <st c="25087">test run, the implementation
    of the</st> `<st c="25124">progress</st>` <st c="25132">and</st> `<st c="25137">kjhtml</st>`
    <st c="25143">reporters to showcase test results, and the execution of the tests
    in the</st> <st c="25218">Chrome browser.</st>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25233">The test.ts file</st>
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="25250">The</st> `<st c="25255">test.ts</st>` <st c="25262">file is the
    entry point for</st> <st c="25290">your test cases.</st> <st c="25308">It sets
    up the testing environment and loads all of the necessary files for the test run.</st>
    <st c="25398">This file typically imports</st> <st c="25426">the</st> `<st c="25430">zone.js</st>`
    <st c="25437">library, which is used to handle asynchronous operations in your
    tests.</st> <st c="25510">It also imports the Karma test runner and starts the</st>
    <st c="25563">test run.</st>
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25572">The</st> `<st c="25577">test.ts</st>` <st c="25584">file is typically
    located in the</st> `<st c="25618">src</st>` <st c="25621">directory of your project,
    and it is usually generated automatically when you create a new Angular project.</st>
    <st c="25730">This file sets up the testing environment and loads the necessary
    files for the</st> <st c="25810">test run.</st>
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25819">Here’s an example of what a</st> `<st c="25848">test.ts</st>`
    <st c="25855">file might</st> <st c="25867">look like:</st>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: <st c="26457">This file initializes the Angular</st> <st c="26491">testing environment
    using the</st> `<st c="26522">getTestBed().initTestEnvironment()</st>` <st c="26556">function,
    which sets up</st> `<st c="26581">TestBed</st>`<st c="26588">. It also</st> <st
    c="26597">loads all of the</st> `<st c="26615">*.spec.ts</st>` <st c="26624">files</st>
    <st c="26631">using</st> `<st c="26637">require.context()</st>`<st c="26654">.</st>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26655">The tsconfig.spec.json file</st>
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="26683">The</st> `<st c="26688">tsconfig.spec.json</st>` <st c="26706">file
    is used to</st> <st c="26723">configure the TypeScript compiler for your test
    cases.</st> <st c="26778">It specifies the compiler options that</st> <st c="26816">should
    be used when compiling your test files.</st> <st c="26864">This file typically
    extends the main</st> `<st c="26901">tsconfig.json</st>` <st c="26914">file for
    your project but may include additional settings specific</st> <st c="26982">to
    testing.</st>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26993">Here’s an example of what a</st> `<st c="27022">tsconfig.spec.json</st>`
    <st c="27040">file might</st> <st c="27052">look like:</st>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <st c="27324">This file extends the</st> <st c="27347">main</st> `<st c="27352">tsconfig.json</st>`
    <st c="27365">file and</st> <st c="27374">specifies the compiler options that
    should be used for test files.</st> <st c="27442">It also includes the</st> `<st
    c="27463">src/test.ts</st>` <st c="27474">and</st> `<st c="27479">src/polyfills.ts</st>`
    <st c="27495">files in the</st> <st c="27509">test run.</st>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27518">The src/test.ts file</st>
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="27539">The</st> `<st c="27544">src/test.ts</st>` <st c="27555">file is
    used to</st> <st c="27571">configure the Angular testing environment.</st> <st
    c="27615">It sets up</st> `<st c="27626">TestBed</st>`<st c="27633">, which is
    used to create</st> <st c="27658">instances of your components and services for
    testing.</st> <st c="27714">It also imports any necessary testing utilities, such
    as</st> `<st c="27771">TestBed</st>` <st c="27778">and</st> `<st c="27783">async</st>`<st
    c="27788">.</st>
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27789">Here’s an example of what a</st> `<st c="27818">src/test.ts</st>`
    <st c="27829">file might</st> <st c="27841">look like:</st>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: <st c="28125">This file sets up</st> `<st c="28144">TestBed</st>` <st c="28151">using
    the</st> `<st c="28162">TestBed.initTestEnvironment()</st>` <st c="28191">function.</st>
    <st c="28202">It specifies the</st> <st c="28219">testing module and platform
    module</st> <st c="28254">to use, which are the</st> `<st c="28276">BrowserDynamicTestingModule</st>`
    <st c="28303">and</st> `<st c="28308">platformBrowserDynamicTestingModule</st>`<st
    c="28343">, respectively.</st>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28358">Summary</st>
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="28366">This chapter covered the basics of TDD and its role in Angular.</st>
    <st c="28431">We explained the benefits of TDD and how it can help developers
    write high-quality code.</st> <st c="28520">Then, we discussed how to set up the
    development environment for Angular and created a new Angular project using the
    Angular programming interface.</st> <st c="28668">We also explored the various
    files related to writing tests in Angular, including</st> `<st c="28750">*.spec.ts</st>`<st
    c="28759">,</st> `<st c="28761">karma.conf.js</st>`<st c="28774">,</st>`<st c="28775">tsconfig.spec.json</st>`<st
    c="28793">, and</st> `<st c="28799">src/test.ts.</st>` <st c="28811">We provided
    detailed explanations of each file and their role in testing Angular applications.</st>
    <st c="28907">By understanding these files and their purpose, developers can write
    and run tests for their Angular applications more effectively and ensure that
    their code performs</st> <st c="29074">as expected.</st>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28366">本章介绍了 TDD 的基础知识及其在 Angular 中的作用。</st> <st c="28431">我们解释了 TDD
    的好处以及它如何帮助开发者编写高质量的代码。</st> <st c="28520">然后，我们讨论了如何设置 Angular 的开发环境，并使用 Angular
    编程接口创建了一个新的 Angular 项目。</st> <st c="28668">我们还探讨了与 Angular 中编写测试相关的各种文件，包括</st>
    `<st c="28750">*.spec.ts</st>`<st c="28759">,</st> `<st c="28761">karma.conf.js</st>`<st
    c="28774">,</st>`<st c="28775">tsconfig.spec.json</st>`<st c="28793">，以及</st>
    `<st c="28799">src/test.ts.</st>` <st c="28811">我们为每个文件及其在测试 Angular 应用程序中的作用提供了详细的解释。</st>
    <st c="28907">通过了解这些文件及其目的，开发者可以更有效地为他们的 Angular 应用程序编写和运行测试，并确保他们的代码表现</st> <st
    c="29074">如预期。</st>
- en: <st c="29086">In the next chapter, we’ll learn about the process of writing
    and executing unit tests using Jasmine while covering topics such as test suites,
    test specifications,</st> <st c="29252">and matchers.</st>
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习使用 Jasmine 编写和执行单元测试的过程，同时涵盖测试套件、测试规范<st c="29086">和匹配器</st> <st
    c="29252">等主题。</st>
