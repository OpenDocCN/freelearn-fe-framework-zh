["```js\n    const input = ['a', 'b', 'c']\n    let result = []\n    for (let i = 0; i < input.length; i++) {\n      result.push(input[i] + input[i])\n    }\n    console.log(result) // prints: [ 'aa', 'bb', 'cc' ]\n    ```", "```js\n    const input = ['a', 'b', 'c']\n    const result = input.map(str => str + str)\n    console.log(result) // prints: ['aa', 'bb', 'cc']\n    ```", "```js\n    $ cp -R ch1 ch4\n    ```", "```js\n    $ cp -R ch3 ch4/backend\n    ```", "```js\n    $ rm -rf ch4/backend/.git\n    ```", "```js\n      \"scripts\": {\n        \"dev\": \"nodemon src/index.js\",\n        \"start\": \"node src/index.js\",\n        \"test\": \"NODE_OPTIONS=--experimental-vm-modules jest\",\n        \"lint\": \"eslint src\",\n        \"prepare\": \"husky install\"\n      },\n    ```", "```js\n      \"lint-staged\": {\n        \"**/*.{js,jsx}\": [\n          \"npx prettier --write\",\n          \"npx eslint --fix\"\n        ]\n      }\n    ```", "```js\n    $ npm install\n    ```", "```js\n    $ cd backend/\n    $ npm install\n    ```", "```js\n    $ npm uninstall husky lint-staged \\\n      @commitlint/cli @commitlint/config-conventional\n    ```", "```js\n    $ cd ../\n    $ npm run dev\n    ```", "```js\n          <h1>Vite + React + Node.js</h1>\n    ```", "```js\n    import PropTypes from 'prop-types'\n    ```", "```js\n    export function Post({ title, contents, author }) {\n    ```", "```js\n      return (\n        <article>\n          <h3>{title}</h3>\n          <div>{contents}</div>\n          {author && (\n            <em>\n              <br />\n              Written by <strong>{author}</strong>\n            </em>\n          )}\n        </article>\n      )\n    }\n    ```", "```js\n    Post.propTypes = {\n      title: PropTypes.string.isRequired,\n      contents: PropTypes.string,\n      author: PropTypes.string,\n    }\n    ```", "```js\n    import { Post } from './components/Post.jsx'\n    export function App() {\n      return (\n        <Post\n          title='Full-Stack React Projects'\n          contents=\"Let's become full-stack developers!\"\n          author='Daniel Bugl'\n        />\n      )\n    }\n    ```", "```js\n    import { App } from './App.jsx'\n    ```", "```js\n    import './index.css'\n    ```", "```js\n    export function CreatePost() {\n      return (\n        <form onSubmit={(e) => e.preventDefault()}>\n          <div>\n            <label htmlFor='create-title'>Title: </label>\n            <input type='text' name='create-title' id='create-title' />\n          </div>\n          <br />\n          <div>\n            <label htmlFor='create-author'>Author: </label>\n            <input type='text' name='create-author' id='create-author' />\n          </div>\n          <br />\n          <textarea />\n          <br />\n          <br />\n          <input type='submit' value='Create' />\n        </form>\n      )\n    }\n    ```", "```js\n    import { CreatePost } from './components/CreatePost.jsx'\n    export function App() {\n      return <CreatePost />\n    }\n    ```", "```js\n    import PropTypes from 'prop-types'\n    ```", "```js\n    export function PostFilter({ field }) {\n      return (\n        <div>\n          <label htmlFor={`filter-${field}`}>{field}: </label>\n          <input\n            type='text'\n            name={`filter-${field}`}\n            id={`filter-${field}`}\n          />\n        </div>\n      )\n    }\n    PostFilter.propTypes = {\n      field: PropTypes.string.isRequired,\n    }\n    ```", "```js\n    import PropTypes from 'prop-types'\n    export function PostSorting({ fields = [] }) {\n      return (\n        <div>\n          <label htmlFor='sortBy'>Sort By: </label>\n          <select name='sortBy' id='sortBy'>\n            {fields.map((field) => (\n              <option key={field} value={field}>\n                {field}\n              </option>\n            ))}\n          </select>\n          {' / '}\n          <label htmlFor='sortOrder'>Sort Order: </label>\n          <select name='sortOrder' id='sortOrder'>\n            <option value={'ascending'}>ascending</option>\n            <option value={'descending'}>descending</option>\n          </select>\n        </div>\n      )\n    }\n    PostSorting.propTypes = {\n      fields: PropTypes.arrayOf(PropTypes.string).isRequired,\n    }\n    ```", "```js\n    import { Fragment } from 'react'\n    import PropTypes from 'prop-types'\n    import { Post } from './Post.jsx'\n    ```", "```js\n    export function PostList({ posts = [] }) {\n    ```", "```js\n      return (\n        <div>\n          {posts.map((post) => (\n            <Post {...post} key={post._id} />\n          ))}\n        </div>\n      )\n    }\n    ```", "```js\n    <Post\n      title={post.title}\n      author={post.author}\n      contents={post.contents}\n    />\n    ```", "```js\nlet renderedPosts = []\nlet index = 0\nfor (let post of posts) {\n  renderedPosts.push(<Post {...post} key={post._id} />)\n  index++\n}\nreturn (\n  <div>\n    {renderedPosts}\n  </div>\n)\n```", "```js\n    PostList.propTypes = {\n      posts: PropTypes.arrayOf(PropTypes.shape(Post.propTypes)).isRequired,\n    }\n    ```", "```js\n          {posts.map((post) => (\n            <Fragment key={post._id}>\n              <Post {...post} />\n              <hr />\n            </Fragment>\n          ))}\n    ```", "```js\n    import { PostList } from './components/PostList.jsx'\n    const posts = [\n      {\n        title: 'Full-Stack React Projects',\n        contents: \"Let's become full-stack developers!\",\n        author: 'Daniel Bugl',\n      },\n      { title: 'Hello React!' },\n    ]\n    export function App() {\n      return <PostList posts={posts} />\n    }\n    ```", "```js\n    import { PostList } from './components/PostList.jsx'\n    import { CreatePost } from './components/CreatePost.jsx'\n    import { PostFilter } from './components/PostFilter.jsx'\n    import { PostSorting } from './components/PostSorting.jsx'\n    ```", "```js\n    export function App() {\n      return (\n        <div style={{ padding: 8 }}>\n          <CreatePost />\n          <br />\n          <hr />\n          Filter by:\n          <PostFilter field='author' />\n          <br />\n          <PostSorting fields={['createdAt', 'updatedAt']} />\n          <hr />\n          <PostList posts={posts} />\n        </div>\n      )\n    }\n    ```", "```js\n    App component to a new Blog component, as we are going to use the App component for setting up libraries and contexts instead.\n    ```", "```js\n    export function Blog() {\n    ```", "```js\n    import { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n    ```", "```js\n    import { Blog } from './Blog.jsx'\n    ```", "```js\n    const queryClient = new QueryClient()\n    ```", "```js\n    export function App() {\n      return (\n        <QueryClientProvider client={queryClient}>\n          <Blog />\n        </QueryClientProvider>\n      )\n    }\n    ```", "```js\n    $ cd backend/\n    $ npm start\n    ```", "```js\n    VITE_BACKEND_URL=\"http://localhost:3001/api/v1\"\n    ```", "```js\n    export const getPosts = async (queryParams) => {\n    ```", "```js\n      const res = await fetch(\n        `${import.meta.env.VITE_BACKEND_URL}/posts?` +\n    ```", "```js\n          new URLSearchParams(queryParams),\n    ```", "```js\n      )\n      return await res.json()\n    }\n    ```", "```js\n    const posts = [\n      {\n        title: 'Full-Stack React Projects',\n        contents: \"Let's become full-stack developers!\",\n        author: 'Daniel Bugl',\n      },\n      { title: 'Hello React!' },\n    ]\n    ```", "```js\n    import { useQuery } from '@tanstack/react-query'\n    import { PostList } from './components/PostList.jsx'\n    import { CreatePost } from './components/CreatePost.jsx'\n    import { PostFilter } from './components/PostFilter.jsx'\n    import { PostSorting } from './components/PostSorting.jsx'\n    import { getPosts } from './api/posts.js'\n    ```", "```js\n    export function Blog() {\n      const postsQuery = useQuery({\n        queryKey: ['posts'],\n        queryFn: () => getPosts(),\n    queryKey is very important in TanStack Query, as it is used to uniquely identify a request, among other things, for caching purposes. Always make sure to use unique query keys. Otherwise, you might see requests not triggering properly.For the `queryFn` option, we just call the `getPosts` function, without query params for now.\n    ```", "```js\n    const posts = postsQuery.data ?? []\n    ```", "```js\n    import { useState } from 'react'\n    ```", "```js\n      const [author, setAuthor] = useState('')\n      const [sortBy, setSortBy] = useState('createdAt')\n      const [sortOrder, setSortOrder] = useState('descending')\n    ```", "```js\n      const postsQuery = useQuery({\n        queryKey: ['posts', { author, sortBy, sortOrder }],\n        queryFn: () => getPosts({ author, sortBy, sortOrder }),\n      })\n    ```", "```js\n          <PostFilter\n            field='author'\n            value={author}\n            onChange={(value) => setAuthor(value)}\n          />\n          <br />\n          <PostSorting\n            fields={['createdAt', 'updatedAt']}\n            value={sortBy}\n            onChange={(value) => setSortBy(value)}\n            orderValue={sortOrder}\n            onOrderChange={(orderValue) => setSortOrder(orderValue)}\n          />\n    ```", "```js\n    export function PostFilter({ field, value, onChange }) {\n      return (\n        <div>\n          <label htmlFor={`filter-${field}`}>{field}: </label>\n          <input\n            type='text'\n            name={`filter-${field}`}\n            id={`filter-${field}`}\n            value={value}\n            onChange={(e) => onChange(e.target.value)}\n          />\n        </div>\n      )\n    }\n    PostFilter.propTypes = {\n      field: PropTypes.string.isRequired,\n      value: PropTypes.string.isRequired,\n      onChange: PropTypes.func.isRequired,\n    }\n    ```", "```js\n    export function PostSorting({\n      fields = [],\n      value,\n      onChange,\n      orderValue,\n      onOrderChange,\n    }) {\n      return (\n        <div>\n          <label htmlFor='sortBy'>Sort By: </label>\n          <select\n            name='sortBy'\n            id='sortBy'\n            value={value}\n            onChange={(e) => onChange(e.target.value)}\n          >\n            {fields.map((field) => (\n              <option key={field} value={field}>\n                {field}\n              </option>\n            ))}\n          </select>\n          {' / '}\n          <label htmlFor='sortOrder'>Sort Order: </label>\n          <select\n            name='sortOrder'\n            id='sortOrder'\n            value={orderValue}\n            onChange={(e) => onOrderChange(e.target.value)}\n          >\n            <option value={'ascending'}>ascending</option>\n            <option value={'descending'}>descending</option>\n          </select>\n        </div>\n      )\n    }\n    PostSorting.propTypes = {\n      fields: PropTypes.arrayOf(PropTypes.string).isRequired,\n      value: PropTypes.string.isRequired,\n      onChange: PropTypes.func.isRequired,\n      orderValue: PropTypes.string.isRequired,\n      onOrderChange: PropTypes.func.isRequired,\n    }\n    ```", "```js\n    export const createPost = async (post) => {\n    ```", "```js\n      const res = await fetch(`${import.meta.env.VITE_BACKEND_URL}/posts`, {\n    ```", "```js\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(post),\n    ```", "```js\n      })\n      return await res.json()\n    }\n    ```", "```js\n    import { useMutation } from '@tanstack/react-query'\n    import { useState } from 'react'\n    import { createPost } from '../api/posts.js'\n    ```", "```js\n      const [title, setTitle] = useState('')\n      const [author, setAuthor] = useState('')\n      const [contents, setContents] = useState('')\n    ```", "```js\n      const createPostMutation = useMutation({\n        mutationFn: () => createPost({ title, author, contents }),\n      })\n    ```", "```js\n      const handleSubmit = (e) => {\n        e.preventDefault()\n        createPostMutation.mutate()\n      }\n    ```", "```js\n        <form onSubmit={handleSubmit}>\n    ```", "```js\n          <div>\n            <label htmlFor='create-title'>Title: </label>\n            <input\n              type='text'\n              name='create-title'\n              id='create-title'\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n          </div>\n          <br />\n          <div>\n            <label htmlFor='create-author'>Author: </label>\n            <input\n              type='text'\n              name='create-author'\n              id='create-author'\n              value={author}\n              onChange={(e) => setAuthor(e.target.value)}\n            />\n          </div>\n          <br />\n          <textarea\n            value={contents}\n            onChange={(e) => setContents(e.target.value)}\n          />\n    ```", "```js\n          <br />\n          <br />\n          <input\n            type='submit'\n            value={createPostMutation.isPending ? 'Creating...' : 'Create'}\n            disabled={!title || createPostMutation.isPending}\n          />\n    ```", "```js\n          {createPostMutation.isSuccess ? (\n            <>\n              <br />\n              Post created successfully!\n            </>\n          ) : null}\n        </form>\n    ```", "```js\n    import { useMutation, useQueryClient } from '@tanstack/react-query'\n    ```", "```js\n      const queryClient = useQueryClient()\n      const createPostMutation = useMutation({\n        mutationFn: () => createPost({ title, author, contents }),\n        onSuccess: () => queryClient.invalidateQueries(['posts']),\n      })\n    ```"]