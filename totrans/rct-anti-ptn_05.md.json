["```js\nexport function add(a: number, b: number) {\n  return a + b;\n}\n```", "```js\nimport { add } from './math';\ntest('add adds numbers correctly', () => {\n  expect(add(1, 2)).toBe(3);\n});\n```", "```js\nimport { add } from './math';\ndescribe('math functions', () => {\n  it('adds positive numbers correctly', () => {\n    expect(add(1, 2)).toBe(3);\n  });\n  it('adds negative numbers correctly', () => {\n    expect(add(-1, -2)).toBe(-3);\n  });\n  // More tests...\n});\n```", "```js\ndescribe('calculator', () => {\n  describe('addition', () => {\n    it('adds positive numbers correctly', () => {\n        expect(add(1, 2)).toBe(3);\n    });\n    it('adds negative numbers correctly', () => {\n        expect(add(-1, -2)).toBe(-3);\n    });\n    // More tests...\n  })\n  describe('subtraction', () => {\n    it('subtracts positive numbers', () => {});\n  })\n  // Other describe blocks for multiplication and division\n});\n```", "```js\ntype SectionProps = {\n  heading: string;\n  content: string;\n};\nconst Section = ({ heading, content }: SectionProps) => {\n  return (\n    <article>\n      <h1>{heading}</h1>\n      <p>{content}</p>\n    </article>\n  );\n};\nexport { Section };\n```", "```js\nimport React from \"react\";\nimport { render, screen } from \"@testing-library/react\";\nimport { Section } from \"../component/Section\";\ndescribe(\"Section\", () => {\n  it(\"renders a section with heading and content\", () => {\n    render(<Section heading=\"Basic\" content=\"Hello world\" />);\n    expect(screen.getByText(\"Basic\")).toBeInTheDocument();\n    expect(screen.getByText(\"Hello world\")).toBeInTheDocument();\n  });\n});\n```", "```js\ndescribe('Terms and Conditions', () => {\n  it(\"renders learn react link\", () => {\n    render(<TermsAndConditions />);\n    const button = screen.getByText('Next');\n    expect(button).toBeDisabled();\n    const checkbox = screen.getByRole('checkbox');\n    act(() => {\n      userEvent.click(checkbox);\n    })\n    expect(button).toBeEnabled();\n  });\n})\n```", "```js\nconst TheLegalContent = () => {\n  return (\n    <p>\n      {/*...*/}\n    </p>\n  );\n};\ntype CheckBoxProps = {\n  label: string;\n  isChecked: boolean;\n  onCheck: (event: any) => void\n}\nconst CheckBox = ({label, isChecked, onCheck}: CheckBoxProps) => {\n  return (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={isChecked}\n        onChange={onCheck}\n      />\n      {label}\n    </label>\n  )\n}\ntype ButtonProps = {\n  type: 'standard' | 'primary' | 'secondary';\n  label: string;\n  disabled?: boolean;\n}\nconst Button = ({label, disabled = true}: ButtonProps) => {\n  return (\n    <div style={{margin: '0.5rem 0'}}>\n      <button disabled={disabled}>{label}</button>\n    </div>\n  )\n}\nconst UserConsent = () => {\n  const [isChecked, setIsChecked] = useState(false);\n  const handleCheckboxChange = (event: React.\n   ChangeEvent<HTMLInputElement>) => {\n    setIsChecked(event.target.checked);\n  };\n  return (\n    <>\n      <CheckBox isChecked={isChecked} onCheck={handleCheckboxChange} \n       label=\"I accept the terms and conditions\" />\n      <Button type=\"primary\" label=\"Next\" disabled={!isChecked} />\n    </>\n  );\n};\nconst TermsAndConditions = () => {\n  return (\n    <div>\n      <h2>Terms and Conditions</h2>\n      <TheLegalContent />\n      <UserConsent />\n    </div>\n  );\n};\nexport { TermsAndConditions };\n```", "```js\ncypress\n├── downloads\n├── e2e\n│   └── quote-of-the-day.spec.cy.js\n├── fixtures\n│   └── example.json\n└── support\n    ├── commands.js\n    └── e2e.js\n```", "```js\ndescribe('quote of the day', () => {\n  it('display the heading', () => {\n    cy.visit('https://icodeit-juntao.github.io/quote-of-the-day/');\n  })\n});\n```", "```js\nit('display the heading', () => {\n  cy.visit('https://icodeit-juntao.github.io/quote-of-the-day/');\n  cy.contains(\"Quote of the day\");\n})\n```", "```js\nit('display a quote', () => {\n  cy.visit('https://icodeit-juntao.github.io/quote-of-the-day/');\n  cy.get('[data-testid=\"quote-container\"]').should('have.length', 1);\n})\n```", "```js\nconst quotes = [\n  {\n    content:\n      \"Any fool can write code that a computer can understand. Good \n       programmers write code that humans can understand.\",\n    author: \"Martin Fowler\",\n  },\n  {\n    content: \"Truth can only be found in one place: the code.\",\n    author: \"Robert C. Martin\",\n  },\n  {\n    content:\n      \"Optimism is an occupational hazard of programming: feedback is \n       the treatment.\",\n    author: \"Kent Beck\",\n  },\n];\n```", "```js\nit(\"display the quote content\", () => {\n  cy.intercept(\"GET\", \"https://api.quotable.io/quotes/random*\", {\n    statusCode: 200,\n    body: quotes,\n  });\n  cy.visit(\"https://icodeit-juntao.github.io/quote-of-the-day/\");\n  cy.contains(\n    \"Any fool can write code that a computer can understand. Good \n     programmers write code that humans can understand.\"\n  );\n  cy.contains(\n    \"Martin Fowler\"\n  );\n});\n```"]