- en: Routing and Navigation between Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件之间的路由和导航
- en: In this chapter, we will cover navigation in an Angular application. We will
    implement routers for our app component and authentication. We will also cover
    router outlets for our component view and create a router module for authentication.
    This will make our authentication feature completely independent of other modules.
    Component navigation in an authentication module will be taken care of by a child
    router module. We will also discuss Angular guard, which will restrict the navigation
    based on the condition to the component. This enhances the security of our application.
    Finally, we will cover Firebase session life cycles in depth and redirect our
    user to the Login or My Profile page.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖Angular应用程序中的导航。我们将为我们的应用程序组件和认证实现路由器。我们还将涵盖组件视图的路由出口，并为认证创建一个路由模块。这将使我们的认证功能完全独立于其他模块。认证模块中的组件导航将由子路由模块处理。我们还将讨论Angular守卫，它将根据组件的条件限制导航。这增强了我们应用程序的安全性。最后，我们将深入探讨Firebase会话生命周期，并将用户重定向到登录或我的个人资料页面。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Enabling routes in an app component
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用程序组件中启用路由
- en: Creating a routing module for authentication
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为认证创建一个路由模块
- en: Adding a router link
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加路由链接
- en: Using authentication guard
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用认证守卫
- en: Firebase session life cycles
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase会话生命周期
- en: Our project structure as of now
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到目前为止，我们的项目结构如下：
- en: Enabling routes in an app component
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在应用程序组件中启用路由
- en: 'In this section, we enable routing and create the main navigation bar for our
    application. The steps to enable routes are as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们启用路由并创建应用程序的主要导航栏。启用路由的步骤如下：
- en: '**Adding the base reference URL**: We will need to add a base element in `index.html`
    to tell the Angular router how to compose the navigation URL.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加基本参考URL**：我们需要在`index.html`中添加一个基本元素，以告诉Angular路由器如何组合导航URL。'
- en: 'We added `href` in the head tag of `index.html`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`index.html`的头部标签中添加了`href`：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Creating the main navigation bar**: Most web applications have a navigation
    bar at the top of the page for navigating to different pages in the application.
    We have added a main navigation bar for our friends application using the bootstrap
    `nav bar` component.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建主要导航栏**：大多数Web应用程序在页面顶部都有一个导航栏，用于在应用程序的不同页面之间导航。我们使用Bootstrap的`nav bar`组件为我们的朋友应用程序添加了一个主要导航栏。'
- en: 'The first step is to include the `nav` tag in `app.component.html`, as follows:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是在`app.component.html`中包含`nav`标签，如下所示：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The second step is to create a list of items using the `ul` tag:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二步是使用`ul`标签创建项目列表：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The third step is to create the items using the `li` tag. In our application,
    we have to activate tabs based on the user login condition, for example, a user
    profile tab will appear when the user logs in. We followed these conditions to
    activate tabs in our navigation bar:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三步是使用`li`标签创建项目。在我们的应用程序中，我们必须根据用户登录条件激活标签页，例如，当用户登录时，将显示用户个人资料标签页。我们遵循以下条件来激活导航栏中的标签页：
- en: '**User not signed**: We activated only the about and login tabs. A user can
    navigate to the signup page by clicking on the SIGNUP button.'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户未登录**：我们只激活了关于和登录标签页。用户可以通过点击SIGNUP按钮导航到注册页面。'
- en: '**User signed**: We deactivated the login page and activated the user profile
    page.'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户已登录**：我们停用了登录页面并激活了用户个人资料页面。'
- en: 'In order to achieve these scenarios, we will access the authentication service
    object, check the user logged-in status, and activate the tabs. We use the `ngIf`
    directive for condition check:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这些场景，我们将访问认证服务对象，检查用户登录状态，并激活标签页。我们使用`ngIf`指令进行条件检查：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The question mark in `authenticationService?` in `AuthenticationService` in
    the template ensures that the object is not null. This object is defined in `app.component.ts`,
    as shown in the following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 模板中`AuthenticationService`的`authenticationService?`中的问号确保对象不为空。该对象在`app.component.ts`中定义，如下所示：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here''s the complete `app.component.html` as of now:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止的完整`app.component.html`如下所示：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Creating page not found and about component**: The `PageNotFoundComponent`
    component is used to display the view for an incorrect URL and `AboutComponent`
    is used to display information about the site.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建页面未找到和关于组件**：`PageNotFoundComponent`组件用于显示错误URL的视图，而`AboutComponent`用于显示有关网站的信息。'
- en: Both these components look similar and have a message header with the `h2` tag
    with text. In these components, we defined a template and style sheets in component
    annotation. This is one simple way to create the component.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个组件看起来很相似，都有一个带有 `h2` 标签的消息标题。在这些组件中，我们在组件注释中定义了模板和样式表。这是创建组件的一种简单方法。
- en: 'The following is the complete `page-not-found.component.ts`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '以下为完整的 `page-not-found.component.ts`:'
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following is the complete `about.component.ts`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为完整的 `about.component.ts`：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Creating routes for an app component**: We create routes for our main app
    module for the about and page not found components.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为应用组件创建路由**：我们为主应用模块创建关于和页面未找到组件的路由。'
- en: 'We create the routes for two components with the following path as; the double
    star (**) is a wildcard so that when the user provides any incorrect URL, the
    router navigates to the page not found component:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下路径为两个组件创建路由；双星号（**）是一个通配符，因此当用户提供任何错误的 URL 时，路由器将导航到“页面未找到”组件：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We inject routes for the app module in Angular `RouterModule`; the complete `app.routing.ts` as
    of now is as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Angular 的 `RouterModule` 中注入应用模块的路由；现在完整的 `app.routing.ts` 如下所示：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, we integrate the app routing module in our main app module. We add `AppRouting`
    in the import tag as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将应用路由模块集成到我们的主应用模块中。我们在导入标签中添加 `AppRouting`，如下所示：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When the user is not logged in, the navigation bar will show the About and
    Login tabs:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户未登录时，导航栏将显示“关于”和“登录”标签页：
- en: '![](img/00020.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00020.jpeg)'
- en: 'When the user is logged in, the navigation bar will show the My Profile, Friends, and About tabs:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户登录时，导航栏将显示“我的资料”、“朋友”和“关于”标签页：
- en: '![](img/00021.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00021.jpeg)'
- en: Creating a routing module for authentication
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建认证的路由模块
- en: 'As discussed earlier, we will build the individual routes for each feature
    module. We have two components in authentication:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将为每个功能模块构建单独的路由。在认证方面，我们有两个组件：
- en: Login Component
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录组件
- en: Signup Component
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册组件
- en: 'In order to define the routing module, we will need to create routes constant
    for navigation:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义路由模块，我们需要创建导航路由常量：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Since these routes are child components of the main app component, we inject
    the routes into the child router module:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些路由是主应用组件的子组件，我们将路由注入到子路由模块中：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here''s the complete `authentication.routing.ts` as of now:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是完整的 `authentication.routing.ts`：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: After creating the routing module, we include the `AuthenticationRouting` module
    in the main authentication module; this makes our authentication module independent
    of the main app module.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 创建路由模块后，我们将 `AuthenticationRouting` 模块包含在主认证模块中；这使得我们的认证模块独立于主应用模块。
- en: 'Here is a sample `authentication.module.ts`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例 `authentication.module.ts`：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Exploring more routing techniques
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索更多路由技术
- en: 'In this section, we will explore two navigation methods in our application:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探索我们应用程序中的两种导航方法：
- en: '**Static Routing**: In static routing, we will provide the navigation in the
    HTML template. Angular router provides a directive to perform the navigation action.
    We will include the `routerLink` directive with we inject the routes into the
    child router module: path for navigation. As seen in the following code, when
    you click on the `SIGNUP` button, the Angular framework navigates to the signup
    component using `Router`:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态路由**：在静态路由中，我们将在 HTML 模板中提供导航。Angular 路由器提供了一个指令来执行导航操作。我们将包含 `routerLink`
    指令，并将路由注入到子路由模块中：导航路径。如以下代码所示，当您点击“注册”按钮时，Angular 框架使用 `Router` 导航到注册组件：'
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Dynamic Routing**: In dynamic routing, we use the `Router` component of the
    Angular framework. The instance is injected using dependency injection in the
    constructor:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态路由**：在动态路由中，我们使用 Angular 框架的 `Router` 组件。该实例在构造函数中使用依赖注入：'
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Router provides the `navigateByUrl()` method to route to different components;
    in the following scenario, after successful login, we navigate to the user profile
    page:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器提供了 `navigateByUrl()` 方法来导航到不同的组件；在以下场景中，登录成功后，我们导航到用户资料页面：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now we have added navigation to our application; thus, in the next section we
    add conditional-based navigation guards.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为我们的应用程序添加了导航；因此，在下一节中，我们将添加基于条件的导航守卫。
- en: Adding authentication guards
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加认证守卫
- en: Guard are a really useful feature in Angular for protecting routes. They provide
    the security feature used to restrict resources in our application so that the
    user is not able to consume a resource without proper permission.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 守卫是 Angular 中一个非常有用的功能，用于保护路由。它们提供了用于限制我们应用程序中资源的安全功能，这样用户就不能在没有适当权限的情况下消费资源。
- en: 'There are different guard types in Angular:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular 中有不同类型的守卫：
- en: '`CanActivate`: This is used to decide whether the route can be activated'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CanActivate`：这个用于决定路由是否可以被激活'
- en: '`CanActivateChild`: This is used to decide whether the child route can be activated'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CanActivateChild`：这个用于决定子路由是否可以被激活'
- en: '`CanDeactivate`: This is used to decide whether the route can be deactivated'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CanDeactivate`：这个用于决定路由是否可以被停用'
- en: '`CanLoad`: This is used to decide whether the module can be loaded lazily'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CanLoad`：这个用于决定模块是否可以懒加载'
- en: 'We will take a look at an example of the `CanActivate` guard in authentication.
    We will allow the user to access the user profile and friends pages only after
    their authentication is successful. This means that the user will not be allowed
    to access `http://localhost:4200/app-friends-userprofile` without authentication
    and will be redirected to the login page. The steps involved in activating the
    guard are as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看 `CanActivate` 守卫在认证中的示例。我们将在用户认证成功后允许用户访问用户资料和好友页面。这意味着用户在没有认证的情况下将不允许访问
    `http://localhost:4200/app-friends-userprofile`，并将被重定向到登录页面。激活守卫涉及的步骤如下：
- en: '**Guard condition**: We need to provide conditions for activating the guard.
    In this scenario, we are checking the current user status. This condition was
    also used in the app component to show various tabs based on the condition:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**守卫条件**：我们需要为激活守卫提供条件。在这个场景中，我们正在检查当前用户的状态。这个条件也用于应用程序组件中，根据条件显示各种标签页：'
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here''s the complete `authentication.service.ts` as of now:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的完整 `authentication.service.ts` 如下所示：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Guard implementation**: We implement the guard by extending the `CanActivate` interface
    and overriding the `canActivate` method. In this method, we navigate to the login
    page when the user authentication is not valid and this helps route to the login page
    based on the guard condition.'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**守卫实现**：我们通过扩展 `CanActivate` 接口并重写 `canActivate` 方法来实现守卫。在这个方法中，当用户认证无效时，我们将导航到登录页面，这有助于根据守卫条件将路由导航到登录页面。'
- en: 'Here''s the complete `authentication.guard.ts` as of now:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的完整 `authentication.guard.ts` 如下所示：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Adding a guard to the user module**: This guard is added in the user module.
    The user module is covered in the next chapter in more detail. Here, we configure
    a guard in the user routing module to restrict the user to accessing the user
    profile and friends pages:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**向用户模块添加守卫**：这个守卫是在用户模块中添加的。用户模块将在下一章中更详细地介绍。在这里，我们配置了用户路由模块中的守卫，以限制用户访问用户资料和好友页面：'
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**Adding a guard to protect the component**: As shown in the following code,
    we can add this guard to any component that requires this condition check. We add
    the guard to the user profile and user friend list component. This means that
    these pages are protected from illegal access.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**添加守卫以保护组件**：如以下代码所示，我们可以将这个守卫添加到任何需要此条件检查的组件中。我们将守卫添加到用户资料和用户好友列表组件中。这意味着这些页面受到非法访问的保护。'
- en: 'Here is the complete `user-routing.module.ts`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的 `user-routing.module.ts`：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Testing the guard**: You can test this guard by pasting the user profile
    URL (`http://localhost:4200/app-friends-userprofile`) into the browser, and the
    user is redirected to the login page for authentication.'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**测试守卫**：您可以通过将用户资料 URL (`http://localhost:4200/app-friends-userprofile`) 粘贴到浏览器中来测试这个守卫，用户将被重定向到登录页面进行认证。'
- en: Firebase session lifecycle
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firebase 会话生命周期
- en: 'Firebase persists the user state, hence the user is always logged in even if
    they refresh or restart the page again, and the page is redirected to the main
    page instead of the login page. We will cover two navigation scenarios for a Firebase
    session life cycle:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase 会持久化用户状态，因此即使用户刷新或重新启动页面，用户也始终处于登录状态，页面将被重定向到主页而不是登录页面。我们将涵盖 Firebase
    会话生命周期的两种导航场景：
- en: '**User token exists**: In this scenario, the user token is still valid and
    the user is redirected to the user profile page.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户令牌存在**：在这种情况下，用户令牌仍然有效，用户将被重定向到用户资料页面。'
- en: '`AngularFireAuth.auth` provides the `onAuthStateChanged` method to know user
    state information. We subscribe to this method, check for our user, and redirect
    them to the profile page.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`AngularFireAuth.auth` 提供了 `onAuthStateChanged` 方法来了解用户状态信息。我们订阅此方法，检查我们的用户，并将他们重定向到个人资料页面。'
- en: 'Here''s is a sample of `login.component.ts`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `login.component.ts` 的示例：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**User token expires**: In this scenario, the user token expires and the user
    is redirected to the login page. Normally, the user token expires on the following
    conditions:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户令牌过期**：在这种情况下，用户令牌过期，用户被重定向到登录页面。通常，用户令牌在以下条件下过期：'
- en: '**User clears browsing history**: The user token can expire by clearing the
    browser history. This will clear the token and the user is redirected to the login
    page.'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户清除浏览历史**：用户令牌可以通过清除浏览器历史记录而过期。这将清除令牌，并将用户重定向到登录页面。'
- en: '**User changes the password**: When a user changes the password, the user token
    expires and they are directed to the login page. This scenario is covered in the
    next chapter.'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户更改密码**：当用户更改密码时，用户令牌过期，并将他们重定向到登录页面。此场景将在下一章中介绍。'
- en: '**User sign out**: When a user signs out, the user token expires and they are
    directed to the login page. We will cover this scenario in this section.'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户注销**：当用户注销时，用户令牌过期，并将他们重定向到登录页面。我们将在本节中介绍此场景。'
- en: We have implemented the sign-out functionality in the user profile page. The
    user profile component is covered in more detail in the next chapter. In this
    section, we will add only a sign-out feature.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已在用户资料页面实现了注销功能。用户资料组件将在下一章中更详细地介绍。在本节中，我们仅添加注销功能。
- en: We create a button in the user profile template. When the user clicks on the LOGOUT
    button, the user session is cleared and the users are redirected to the login page.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在用户资料模板中创建了一个按钮。当用户点击 LOGOUT 按钮时，用户会话将被清除，并将用户重定向到登录页面。
- en: 'Here''s is sample `user-profile.component.html`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `user-profile.component.html` 的示例：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When the user clicks on the LOGOUT button, then `onLogout()` method of `UserProfileComponent` is
    called and we call `signout`() in the authentication service.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 LOGOUT 按钮时，`UserProfileComponent` 的 `onLogout()` 方法被调用，我们在认证服务中调用 `signout()`。
- en: 'Here''s the sample `user-profile.component.ts` as of now:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是目前 `user-profile.component.ts` 的示例：
- en: '[PRE25]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The authentication service has a sign-out functionality in `authentication.service.ts`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 认证服务在 `authentication.service.ts` 中具有注销功能：
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Our project structure as of now
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目前我们的项目结构如下：
- en: 'We thus come to the end of our first authentication module. Our authentication
    module will be as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们来到了第一个认证模块的结尾。我们的认证模块将如下所示：
- en: '![](img/00022.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00022.jpeg)'
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about navigation between page views. We enabled
    navigation in the base module. We used the router link directive to create our
    main navigation bar. We saw how to access component variables in the template
    and enabled navigation items based on the condition. We built our first guard
    to restrict our user to navigating to our user profile page so that only authenticated
    users are allowed to view the page. Finally, we covered the Firebase session life
    cycle and implemented navigation based on a user token. Finally, we explored the
    project structure for the authentication module.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了页面视图之间的导航。我们在基础模块中启用了导航。我们使用路由链接指令创建我们的主要导航栏。我们看到了如何在模板中访问组件变量，并基于条件启用了导航项。我们构建了第一个守卫来限制用户导航到我们的用户资料页面，以便只有经过身份验证的用户才能查看页面。最后，我们介绍了
    Firebase 会话生命周期，并基于用户令牌实现了导航。最后，我们探讨了认证模块的项目结构。
- en: In the next chapter, we will build more complex modules and explore more features
    of Firebase and Angular.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将构建更复杂的模块，并探索 Firebase 和 Angular 的更多功能。
