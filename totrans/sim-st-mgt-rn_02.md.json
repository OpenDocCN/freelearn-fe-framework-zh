["```js\nimport React from \"react\";\nimport { View, Text, Pressable } from \"react-native\";\nexport const ManagedButton = () => {\n  return (\n    <View>\n        <Text>this text will display the current status</Text>\n        <Pressable onPress=\"\">\n            <Text>Press here to check/uncheck</Text>\n        </Pressable>\n    </View>\n  );\n};\n```", "```js\nimport React, { useState } from \"react\";\nimport { View, Text, Pressable } from \"react-native\";\nexport const ManagedButton = () => {\n    const [checkedState, setCHeckedState] =      useState(\"unchecked\");\n  return (\n    <View>\n          <Text>this text will display the current status,            which is: {checkedState}</Text>\n        <Pressable onPress=\"\">\n            <Text>Press here to check/uncheck</Text>\n        </Pressable>\n    </View>\n  );\n};\n```", "```js\nconst [checkedState, setCheckedState] = useState(“unchecked”);\n```", "```js\n<Text>this text will display the current status, which is: {checkedState}</Text>\n```", "```js\n<Pressable onPress={setCheckedState(\"checked\")}>\n```", "```js\nimport React, { useState } from \"react\";\nimport { View, Text, Pressable } from \"react-native\";\nconst ManagedText = ({checkedState}) => {\n  return (\n      <Text>this text will display the current status,        which is: {checkedState}</Text>\n  );\n};\nexport const ParentComponent = () => {\n      const [checkedState, setCheckedState] =        useState(\"unchecked\");\n    return (\n        <View>\n            <ManagedText checkedState={checkedState} />\n              <Pressable onPress={() =>                setCheckedState(\"checked\")}>\n              <Text>Press here to check/uncheck</Text>\n            </Pressable>\n      </View>\n    );\n  };\n```", "```js\nconst ManagedText = (fancyComponentStuff) => {\n  return (\n      <Text>this text will display the current status,        which is:{fancyComponentStuff}</Text>\n  );\n};\nexport const ParentComponent = () => {\n      const [checkedState, setCheckedState] =        useState(\"unchecked\");\n    return (\n        <View>\n            <ManagedText fancyComponentStuff={checkedState} />\n            <Pressable onPress={setCheckedState(\"checked\")}>\n              <Text>Press here to check/uncheck</Text>\n            </Pressable>\n      </View>\n    );\n  };\n```", "```js\nclass Welcome extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {name: \"World\"}\n  };\n  render() {\n    return <Text>Hello, {this.state.name}</Text>;\n  }\n}\n```", "```js\nconst Welcome = (props) => {\n  return <Text>Hello, World! </Text>;\n}\n```", "```js\nimport React, {useState} from \"react\";\nimport {Text} from \"react-native\";\nconst Welcome = () => {\n  const [name, setName] = useState('World!');\n  return <Text>Hello, {name}</Text>;\n}\n```", "```js\nconst LikesParentComponent = () => {\n    const getCounterNumberFromApi =      someFunctionRetrievingDataFromAPI();\n    const [counterNumber, setCounterNumber] =      useState(getCounterNumberFromApi)\n  return (\n    <LikesComponent counterNumber={counterNumber} />\n  );\n};\nconst LikesComponent = (counterNumber) => {\n      const [likeState, setLikedState] = useState         (\"haven't yet liked\");\n    return (\n        <View>\n            <Text>you {likeState} this post</Text>\n            <Pressable onPress={setLikedState(\"liked\")}>\n              <Text>Press here to check/uncheck</Text>\n            </Pressable>\n              <Text>{counterNumber} other people liked this                 post</Text>\n      </View>\n    );\n  };\n```", "```js\n<LikesComponent counterNumber={counterNumber} setCounterNumber={setCounterNumber} />\n```", "```js\nconst LikesComponent = (counterNumber, setCountNumber) => {\n      const [likeState, setLikedState] = useState         (\"haven't yet liked\");\n    useEffect(() => {\n        if (likeState === \"liked\") {\n            setCounterNumber(counterNumber++)\n        } \n        else {\n            setCounterNumber(counterNumber-1)\n        }\n    }, [likeState])\n    return (\n        <View>\n            <Text>you {likeState} this post</Text>\n            <Pressable onPress={setLikedState(\"liked\")}>\n              <Text>Press here to check/uncheck</Text>\n            </Pressable>\n              <Text>{counterNumber} other people liked this                 post</Text>\n      </View>\n    );\n  };\n```", "```js\n    $ npm install –global expo-cli\n    ```", "```js\n    $ npx create-expo-app funbook-app\n    ```", "```js\n    $ cd funbook-app\n    ```", "```js\n    $ expo start\n    ```", "```js\n$ yarn start\n```", "```js\n    $ yarn add @react-navigation/native\n    ```", "```js\n    $ expo install react-native-screens react-native-safe-area-context\n    ```", "```js\n    $ yarn add @react-navigation/stack\n    ```", "```js\n    $ expo install react-native-gesture-handler\n    ```", "```js\n$ yarn add @react-navigation/bottom-tabs\n```", "```js\n// ./src/surfaces/Login.js\nimport React from \"react\";\nimport { View, Text } from \"react-native\";\nexport const Login = () => {\n  return (\n    <View>\n      <Text>this will be the login screen</Text>\n    </View>\n  );\n};\n```", "```js\n// ./src/surfaces/Feed.js\nimport React from \"react\";\nimport { View, Text } from \"react-native\";\nexport const Feed = () => {\n  return (\n    <View>\n      <Text>this will be the feed screen</Text>\n    </View>\n  );\n};\n```", "```js\n// ./App.js\nimport 'react-native-gesture-handler';\nimport React, { useState } from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { createBottomTabNavigator } from \"@react-navigation/  bottom-tabs\";\nimport { Login } from \"./src/surfaces/Login\";\nimport { Feed } from \"./src/surfaces/Feed\";\nconst Stack = createStackNavigator();\nconst Tab = createBottomTabNavigator();\nfunction Home() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Feed\" component={Feed} />\n    </Tab.Navigator>\n  );\n}\nexport default function App() {\n  const [userLoggedIn, setIsUserLoggedIn] = useState(true);\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        {!userLoggedIn ? (\n          <Stack.Screen name=\"Login\" component={Login} />\n        ) : (\n          <Stack.Screen\n            name=\"Home\"\n            component={Home}\n            options={{ headerShown: false }}\n          />\n        )}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```"]